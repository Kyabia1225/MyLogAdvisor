[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "getStoreClass",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<? extends SCMStore> getStoreClass()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "TestZeroArgConstructor",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void TestZeroArgConstructor() throws Exception\n{\r\n    ReflectionUtils.newInstance(getStoreClass(), new Configuration());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "isApplicationActive",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isApplicationActive(ApplicationId id) throws YarnException\n{\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "getActiveApplications",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Collection<ApplicationId> getActiveApplications() throws YarnException\n{\r\n    return new ArrayList<ApplicationId>();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "testNonExistentRoot",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testNonExistentRoot() throws Exception\n{\r\n    FileSystem fs = mock(FileSystem.class);\r\n    CleanerMetrics metrics = mock(CleanerMetrics.class);\r\n    SCMStore store = mock(SCMStore.class);\r\n    CleanerTask task = createSpiedTask(fs, store, metrics, new ReentrantLock());\r\n    when(fs.exists(task.getRootPath())).thenReturn(false);\r\n    task.run();\r\n    verify(task, never()).process();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "testProcessFreshResource",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testProcessFreshResource() throws Exception\n{\r\n    FileSystem fs = mock(FileSystem.class);\r\n    CleanerMetrics metrics = mock(CleanerMetrics.class);\r\n    SCMStore store = mock(SCMStore.class);\r\n    CleanerTask task = createSpiedTask(fs, store, metrics, new ReentrantLock());\r\n    when(store.isResourceEvictable(isA(String.class), isA(FileStatus.class))).thenReturn(false);\r\n    FileStatus status = mock(FileStatus.class);\r\n    when(status.getPath()).thenReturn(new Path(ROOT + \"/a/b/c/abc\"));\r\n    task.processSingleResource(status);\r\n    verify(fs, never()).rename(eq(status.getPath()), isA(Path.class));\r\n    verify(metrics).reportAFileProcess();\r\n    verify(metrics, never()).reportAFileDelete();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "testProcessEvictableResource",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testProcessEvictableResource() throws Exception\n{\r\n    FileSystem fs = mock(FileSystem.class);\r\n    CleanerMetrics metrics = mock(CleanerMetrics.class);\r\n    SCMStore store = mock(SCMStore.class);\r\n    CleanerTask task = createSpiedTask(fs, store, metrics, new ReentrantLock());\r\n    when(store.isResourceEvictable(isA(String.class), isA(FileStatus.class))).thenReturn(true);\r\n    FileStatus status = mock(FileStatus.class);\r\n    when(status.getPath()).thenReturn(new Path(ROOT + \"/a/b/c/abc\"));\r\n    when(store.removeResource(isA(String.class))).thenReturn(true);\r\n    when(fs.rename(isA(Path.class), isA(Path.class))).thenReturn(true);\r\n    when(fs.delete(isA(Path.class), anyBoolean())).thenReturn(true);\r\n    task.processSingleResource(status);\r\n    verify(fs).rename(eq(status.getPath()), isA(Path.class));\r\n    verify(metrics).reportAFileDelete();\r\n    verify(metrics, never()).reportAFileProcess();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "createSpiedTask",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "CleanerTask createSpiedTask(FileSystem fs, SCMStore store, CleanerMetrics metrics, Lock isCleanerRunning)\n{\r\n    return spy(new CleanerTask(ROOT, SLEEP_TIME, NESTED_LEVEL, fs, store, metrics, isCleanerRunning));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "testResourceIsInUseHasAnActiveApp",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testResourceIsInUseHasAnActiveApp() throws Exception\n{\r\n    FileSystem fs = mock(FileSystem.class);\r\n    CleanerMetrics metrics = mock(CleanerMetrics.class);\r\n    SCMStore store = mock(SCMStore.class);\r\n    FileStatus resource = mock(FileStatus.class);\r\n    when(resource.getPath()).thenReturn(new Path(ROOT + \"/a/b/c/abc\"));\r\n    when(store.isResourceEvictable(isA(String.class), isA(FileStatus.class))).thenReturn(true);\r\n    when(store.removeResource(isA(String.class))).thenReturn(false);\r\n    CleanerTask task = createSpiedTask(fs, store, metrics, new ReentrantLock());\r\n    task.processSingleResource(resource);\r\n    verify(metrics).reportAFileProcess();\r\n    verify(metrics, never()).reportAFileDelete();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "setupTestDirs",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setupTestDirs() throws IOException\n{\r\n    testDir = new File(\"target\", TestSharedCacheUploaderService.class.getCanonicalName());\r\n    testDir.delete();\r\n    testDir.mkdirs();\r\n    testDir = testDir.getAbsoluteFile();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "cleanupTestDirs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void cleanupTestDirs() throws IOException\n{\r\n    if (testDir != null) {\r\n        testDir.delete();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "startUp",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void startUp()\n{\r\n    Configuration conf = new Configuration();\r\n    conf.set(YarnConfiguration.SCM_STORE_CLASS, InMemorySCMStore.class.getName());\r\n    conf.set(YarnConfiguration.SHARED_CACHE_ROOT, testDir.getPath());\r\n    AppChecker appChecker = spy(new DummyAppChecker());\r\n    store = new InMemorySCMStore(appChecker);\r\n    store.init(conf);\r\n    store.start();\r\n    service = new ClientProtocolService(store);\r\n    service.init(conf);\r\n    service.start();\r\n    YarnRPC rpc = YarnRPC.create(new Configuration());\r\n    InetSocketAddress scmAddress = conf.getSocketAddr(YarnConfiguration.SCM_CLIENT_SERVER_ADDRESS, YarnConfiguration.DEFAULT_SCM_CLIENT_SERVER_ADDRESS, YarnConfiguration.DEFAULT_SCM_CLIENT_SERVER_PORT);\r\n    clientSCMProxy = (ClientSCMProtocol) rpc.getProxy(ClientSCMProtocol.class, scmAddress, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "cleanUp",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void cleanUp()\n{\r\n    if (store != null) {\r\n        store.stop();\r\n        store = null;\r\n    }\r\n    if (service != null) {\r\n        service.stop();\r\n        service = null;\r\n    }\r\n    if (clientSCMProxy != null) {\r\n        RPC.stopProxy(clientSCMProxy);\r\n        clientSCMProxy = null;\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "testUse_MissingEntry",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testUse_MissingEntry() throws Exception\n{\r\n    long misses = ClientSCMMetrics.getInstance().getCacheMisses();\r\n    UseSharedCacheResourceRequest request = recordFactory.newRecordInstance(UseSharedCacheResourceRequest.class);\r\n    request.setResourceKey(\"key1\");\r\n    request.setAppId(createAppId(1, 1L));\r\n    assertNull(clientSCMProxy.use(request).getPath());\r\n    assertEquals(\"Client SCM metrics aren't updated.\", 1, ClientSCMMetrics.getInstance().getCacheMisses() - misses);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "testUse_ExistingEntry_NoAppIds",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testUse_ExistingEntry_NoAppIds() throws Exception\n{\r\n    store.addResource(\"key1\", \"foo.jar\");\r\n    long hits = ClientSCMMetrics.getInstance().getCacheHits();\r\n    UseSharedCacheResourceRequest request = recordFactory.newRecordInstance(UseSharedCacheResourceRequest.class);\r\n    request.setResourceKey(\"key1\");\r\n    request.setAppId(createAppId(2, 2L));\r\n    String expectedPath = testDir.getAbsolutePath() + \"/k/e/y/key1/foo.jar\";\r\n    assertEquals(expectedPath, clientSCMProxy.use(request).getPath());\r\n    assertEquals(1, store.getResourceReferences(\"key1\").size());\r\n    assertEquals(\"Client SCM metrics aren't updated.\", 1, ClientSCMMetrics.getInstance().getCacheHits() - hits);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "testUse_ExistingEntry_OneId",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testUse_ExistingEntry_OneId() throws Exception\n{\r\n    store.addResource(\"key1\", \"foo.jar\");\r\n    store.addResourceReference(\"key1\", new SharedCacheResourceReference(createAppId(1, 1L), \"user\"));\r\n    assertEquals(1, store.getResourceReferences(\"key1\").size());\r\n    long hits = ClientSCMMetrics.getInstance().getCacheHits();\r\n    UseSharedCacheResourceRequest request = recordFactory.newRecordInstance(UseSharedCacheResourceRequest.class);\r\n    request.setResourceKey(\"key1\");\r\n    request.setAppId(createAppId(2, 2L));\r\n    String expectedPath = testDir.getAbsolutePath() + \"/k/e/y/key1/foo.jar\";\r\n    assertEquals(expectedPath, clientSCMProxy.use(request).getPath());\r\n    assertEquals(2, store.getResourceReferences(\"key1\").size());\r\n    assertEquals(\"Client SCM metrics aren't updated.\", 1, ClientSCMMetrics.getInstance().getCacheHits() - hits);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "testUse_ExistingEntry_DupId",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testUse_ExistingEntry_DupId() throws Exception\n{\r\n    store.addResource(\"key1\", \"foo.jar\");\r\n    UserGroupInformation testUGI = UserGroupInformation.getCurrentUser();\r\n    store.addResourceReference(\"key1\", new SharedCacheResourceReference(createAppId(1, 1L), testUGI.getShortUserName()));\r\n    assertEquals(1, store.getResourceReferences(\"key1\").size());\r\n    long hits = ClientSCMMetrics.getInstance().getCacheHits();\r\n    UseSharedCacheResourceRequest request = recordFactory.newRecordInstance(UseSharedCacheResourceRequest.class);\r\n    request.setResourceKey(\"key1\");\r\n    request.setAppId(createAppId(1, 1L));\r\n    String expectedPath = testDir.getAbsolutePath() + \"/k/e/y/key1/foo.jar\";\r\n    assertEquals(expectedPath, clientSCMProxy.use(request).getPath());\r\n    assertEquals(1, store.getResourceReferences(\"key1\").size());\r\n    assertEquals(\"Client SCM metrics aren't updated.\", 1, ClientSCMMetrics.getInstance().getCacheHits() - hits);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "testRelease_ExistingEntry_NonExistantAppId",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testRelease_ExistingEntry_NonExistantAppId() throws Exception\n{\r\n    store.addResource(\"key1\", \"foo.jar\");\r\n    store.addResourceReference(\"key1\", new SharedCacheResourceReference(createAppId(1, 1L), \"user\"));\r\n    assertEquals(1, store.getResourceReferences(\"key1\").size());\r\n    long releases = ClientSCMMetrics.getInstance().getCacheReleases();\r\n    ReleaseSharedCacheResourceRequest request = recordFactory.newRecordInstance(ReleaseSharedCacheResourceRequest.class);\r\n    request.setResourceKey(\"key1\");\r\n    request.setAppId(createAppId(2, 2L));\r\n    clientSCMProxy.release(request);\r\n    assertEquals(1, store.getResourceReferences(\"key1\").size());\r\n    assertEquals(\"Client SCM metrics were updated when a release did not happen\", 0, ClientSCMMetrics.getInstance().getCacheReleases() - releases);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "testRelease_ExistingEntry_WithAppId",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testRelease_ExistingEntry_WithAppId() throws Exception\n{\r\n    store.addResource(\"key1\", \"foo.jar\");\r\n    UserGroupInformation testUGI = UserGroupInformation.getCurrentUser();\r\n    store.addResourceReference(\"key1\", new SharedCacheResourceReference(createAppId(1, 1L), testUGI.getShortUserName()));\r\n    assertEquals(1, store.getResourceReferences(\"key1\").size());\r\n    long releases = ClientSCMMetrics.getInstance().getCacheReleases();\r\n    ReleaseSharedCacheResourceRequest request = recordFactory.newRecordInstance(ReleaseSharedCacheResourceRequest.class);\r\n    request.setResourceKey(\"key1\");\r\n    request.setAppId(createAppId(1, 1L));\r\n    clientSCMProxy.release(request);\r\n    assertEquals(0, store.getResourceReferences(\"key1\").size());\r\n    assertEquals(\"Client SCM metrics aren't updated.\", 1, ClientSCMMetrics.getInstance().getCacheReleases() - releases);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "testRelease_MissingEntry",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testRelease_MissingEntry() throws Exception\n{\r\n    long releases = ClientSCMMetrics.getInstance().getCacheReleases();\r\n    ReleaseSharedCacheResourceRequest request = recordFactory.newRecordInstance(ReleaseSharedCacheResourceRequest.class);\r\n    request.setResourceKey(\"key2\");\r\n    request.setAppId(createAppId(2, 2L));\r\n    clientSCMProxy.release(request);\r\n    assertNotNull(store.getResourceReferences(\"key2\"));\r\n    assertEquals(0, store.getResourceReferences(\"key2\").size());\r\n    assertEquals(\"Client SCM metrics were updated when a release did not happen.\", 0, ClientSCMMetrics.getInstance().getCacheReleases() - releases);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "createAppId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationId createAppId(int id, long timestamp)\n{\r\n    return ApplicationId.newInstance(timestamp, id);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\metrics",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void init()\n{\r\n    cleanerMetrics = CleanerMetrics.getInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\metrics",
  "methodName" : "testMetricsOverMultiplePeriods",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testMetricsOverMultiplePeriods()\n{\r\n    simulateACleanerRun();\r\n    assertMetrics(4, 4, 1, 1);\r\n    simulateACleanerRun();\r\n    assertMetrics(4, 8, 1, 2);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\metrics",
  "methodName" : "simulateACleanerRun",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void simulateACleanerRun()\n{\r\n    cleanerMetrics.reportCleaningStart();\r\n    cleanerMetrics.reportAFileProcess();\r\n    cleanerMetrics.reportAFileDelete();\r\n    cleanerMetrics.reportAFileProcess();\r\n    cleanerMetrics.reportAFileProcess();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\metrics",
  "methodName" : "assertMetrics",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void assertMetrics(int proc, int totalProc, int del, int totalDel)\n{\r\n    assertEquals(\"Processed files in the last period are not measured correctly\", proc, cleanerMetrics.getProcessedFiles());\r\n    assertEquals(\"Total processed files are not measured correctly\", totalProc, cleanerMetrics.getTotalProcessedFiles());\r\n    assertEquals(\"Deleted files in the last period are not measured correctly\", del, cleanerMetrics.getDeletedFiles());\r\n    assertEquals(\"Total deleted files are not measured correctly\", totalDel, cleanerMetrics.getTotalDeletedFiles());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "getStoreClass",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<? extends SCMStore> getStoreClass()\n{\r\n    return InMemorySCMStore.class;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setup()\n{\r\n    this.checker = spy(new DummyAppChecker());\r\n    this.store = spy(new InMemorySCMStore(checker));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "cleanup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void cleanup()\n{\r\n    if (this.store != null) {\r\n        this.store.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "startEmptyStore",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void startEmptyStore() throws Exception\n{\r\n    doReturn(new ArrayList<ApplicationId>()).when(checker).getActiveApplications();\r\n    doReturn(new HashMap<String, String>()).when(store).getInitialCachedResources(isA(FileSystem.class), isA(Configuration.class));\r\n    this.store.init(new Configuration());\r\n    this.store.start();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "startStoreWithResources",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "Map<String, String> startStoreWithResources() throws Exception\n{\r\n    Map<String, String> initialCachedResources = new HashMap<String, String>();\r\n    int count = 10;\r\n    for (int i = 0; i < count; i++) {\r\n        String key = String.valueOf(i);\r\n        String fileName = key + \".jar\";\r\n        initialCachedResources.put(key, fileName);\r\n    }\r\n    doReturn(new ArrayList<ApplicationId>()).when(checker).getActiveApplications();\r\n    doReturn(initialCachedResources).when(store).getInitialCachedResources(isA(FileSystem.class), isA(Configuration.class));\r\n    this.store.init(new Configuration());\r\n    this.store.start();\r\n    return initialCachedResources;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "startStoreWithApps",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void startStoreWithApps() throws Exception\n{\r\n    ArrayList<ApplicationId> list = new ArrayList<ApplicationId>();\r\n    int count = 5;\r\n    for (int i = 0; i < count; i++) {\r\n        list.add(createAppId(i, i));\r\n    }\r\n    doReturn(list).when(checker).getActiveApplications();\r\n    doReturn(new HashMap<String, String>()).when(store).getInitialCachedResources(isA(FileSystem.class), isA(Configuration.class));\r\n    this.store.init(new Configuration());\r\n    this.store.start();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "testAddResourceConcurrency",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testAddResourceConcurrency() throws Exception\n{\r\n    startEmptyStore();\r\n    final String key = \"key1\";\r\n    int count = 5;\r\n    ExecutorService exec = HadoopExecutors.newFixedThreadPool(count);\r\n    List<Future<String>> futures = new ArrayList<Future<String>>(count);\r\n    final CountDownLatch start = new CountDownLatch(1);\r\n    for (int i = 0; i < count; i++) {\r\n        final String fileName = \"foo-\" + i + \".jar\";\r\n        Callable<String> task = new Callable<String>() {\r\n\r\n            public String call() throws Exception {\r\n                start.await();\r\n                String result = store.addResource(key, fileName);\r\n                System.out.println(\"fileName: \" + fileName + \", result: \" + result);\r\n                return result;\r\n            }\r\n        };\r\n        futures.add(exec.submit(task));\r\n    }\r\n    start.countDown();\r\n    Set<String> results = new HashSet<String>();\r\n    for (Future<String> future : futures) {\r\n        results.add(future.get());\r\n    }\r\n    assertSame(1, results.size());\r\n    exec.shutdown();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "testAddResourceRefNonExistentResource",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testAddResourceRefNonExistentResource() throws Exception\n{\r\n    startEmptyStore();\r\n    String key = \"key1\";\r\n    ApplicationId id = createAppId(1, 1L);\r\n    assertNull(store.addResourceReference(key, new SharedCacheResourceReference(id, \"user\")));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "testRemoveResourceEmptyRefs",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testRemoveResourceEmptyRefs() throws Exception\n{\r\n    startEmptyStore();\r\n    String key = \"key1\";\r\n    String fileName = \"foo.jar\";\r\n    store.addResource(key, fileName);\r\n    assertTrue(store.removeResource(key));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "testAddResourceRefRemoveResource",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testAddResourceRefRemoveResource() throws Exception\n{\r\n    startEmptyStore();\r\n    String key = \"key1\";\r\n    ApplicationId id = createAppId(1, 1L);\r\n    String user = \"user\";\r\n    store.addResource(key, \"foo.jar\");\r\n    store.addResourceReference(key, new SharedCacheResourceReference(id, user));\r\n    assertTrue(!store.removeResource(key));\r\n    Collection<SharedCacheResourceReference> refs = store.getResourceReferences(key);\r\n    assertTrue(refs != null);\r\n    assertEquals(Collections.singleton(new SharedCacheResourceReference(id, user)), refs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "testAddResourceRefConcurrency",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testAddResourceRefConcurrency() throws Exception\n{\r\n    startEmptyStore();\r\n    final String key = \"key1\";\r\n    final String user = \"user\";\r\n    String fileName = \"foo.jar\";\r\n    store.addResource(key, fileName);\r\n    int count = 5;\r\n    ExecutorService exec = HadoopExecutors.newFixedThreadPool(count);\r\n    List<Future<String>> futures = new ArrayList<Future<String>>(count);\r\n    final CountDownLatch start = new CountDownLatch(1);\r\n    for (int i = 0; i < count; i++) {\r\n        final ApplicationId id = createAppId(i, i);\r\n        Callable<String> task = new Callable<String>() {\r\n\r\n            public String call() throws Exception {\r\n                start.await();\r\n                return store.addResourceReference(key, new SharedCacheResourceReference(id, user));\r\n            }\r\n        };\r\n        futures.add(exec.submit(task));\r\n    }\r\n    start.countDown();\r\n    Set<String> results = new HashSet<String>();\r\n    for (Future<String> future : futures) {\r\n        results.add(future.get());\r\n    }\r\n    assertSame(1, results.size());\r\n    assertEquals(Collections.singleton(fileName), results);\r\n    Collection<SharedCacheResourceReference> refs = store.getResourceReferences(key);\r\n    assertSame(count, refs.size());\r\n    exec.shutdown();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "testAddResourceRefAddResourceConcurrency",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testAddResourceRefAddResourceConcurrency() throws Exception\n{\r\n    startEmptyStore();\r\n    final String key = \"key1\";\r\n    final String fileName = \"foo.jar\";\r\n    final String user = \"user\";\r\n    final ApplicationId id = createAppId(1, 1L);\r\n    ExecutorService exec = HadoopExecutors.newFixedThreadPool(2);\r\n    final CountDownLatch start = new CountDownLatch(1);\r\n    Callable<String> addKeyTask = new Callable<String>() {\r\n\r\n        public String call() throws Exception {\r\n            start.await();\r\n            return store.addResource(key, fileName);\r\n        }\r\n    };\r\n    Callable<String> addAppIdTask = new Callable<String>() {\r\n\r\n        public String call() throws Exception {\r\n            start.await();\r\n            return store.addResourceReference(key, new SharedCacheResourceReference(id, user));\r\n        }\r\n    };\r\n    Future<String> addAppIdFuture = exec.submit(addAppIdTask);\r\n    Future<String> addKeyFuture = exec.submit(addKeyTask);\r\n    start.countDown();\r\n    String addKeyResult = addKeyFuture.get();\r\n    String addAppIdResult = addAppIdFuture.get();\r\n    assertEquals(fileName, addKeyResult);\r\n    System.out.println(\"addAppId() result: \" + addAppIdResult);\r\n    assertTrue(addAppIdResult == null || addAppIdResult.equals(fileName));\r\n    exec.shutdown();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "testRemoveRef",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testRemoveRef() throws Exception\n{\r\n    startEmptyStore();\r\n    String key = \"key1\";\r\n    String fileName = \"foo.jar\";\r\n    String user = \"user\";\r\n    store.addResource(key, fileName);\r\n    ApplicationId id = createAppId(1, 1L);\r\n    SharedCacheResourceReference myRef = new SharedCacheResourceReference(id, user);\r\n    String result = store.addResourceReference(key, myRef);\r\n    assertEquals(fileName, result);\r\n    Collection<SharedCacheResourceReference> refs = store.getResourceReferences(key);\r\n    assertSame(1, refs.size());\r\n    assertEquals(Collections.singleton(myRef), refs);\r\n    store.removeResourceReferences(key, Collections.singleton(myRef), true);\r\n    Collection<SharedCacheResourceReference> newRefs = store.getResourceReferences(key);\r\n    assertTrue(newRefs == null || newRefs.isEmpty());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "testBootstrapping",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testBootstrapping() throws Exception\n{\r\n    Map<String, String> initialCachedResources = startStoreWithResources();\r\n    int count = initialCachedResources.size();\r\n    ApplicationId id = createAppId(1, 1L);\r\n    for (int i = 0; i < count; i++) {\r\n        String key = String.valueOf(i);\r\n        String fileName = key + \".jar\";\r\n        String result = store.addResourceReference(key, new SharedCacheResourceReference(id, \"user\"));\r\n        assertEquals(fileName, result);\r\n        assertTrue(initialCachedResources.isEmpty());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "testEvictableWithInitialApps",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testEvictableWithInitialApps() throws Exception\n{\r\n    startStoreWithApps();\r\n    assertFalse(store.isResourceEvictable(\"key\", mock(FileStatus.class)));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "createAppId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationId createAppId(int id, long timestamp)\n{\r\n    return ApplicationId.newInstance(timestamp, id);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "startUp",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void startUp()\n{\r\n    Configuration conf = new Configuration();\r\n    conf.set(YarnConfiguration.SCM_STORE_CLASS, InMemorySCMStore.class.getName());\r\n    cleaner = mock(CleanerService.class);\r\n    service = spy(new SCMAdminProtocolService(cleaner));\r\n    service.init(conf);\r\n    service.start();\r\n    YarnRPC rpc = YarnRPC.create(new Configuration());\r\n    InetSocketAddress scmAddress = conf.getSocketAddr(YarnConfiguration.SCM_ADMIN_ADDRESS, YarnConfiguration.DEFAULT_SCM_ADMIN_ADDRESS, YarnConfiguration.DEFAULT_SCM_ADMIN_PORT);\r\n    SCMAdminProxy = (SCMAdminProtocol) rpc.getProxy(SCMAdminProtocol.class, scmAddress, conf);\r\n    mockAdmin = mock(SCMAdminProtocol.class);\r\n    adminCLI = new SCMAdmin(new Configuration()) {\r\n\r\n        @Override\r\n        protected SCMAdminProtocol createSCMAdminProtocol() throws IOException {\r\n            return mockAdmin;\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "cleanUpTest",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void cleanUpTest()\n{\r\n    if (service != null) {\r\n        service.stop();\r\n    }\r\n    if (SCMAdminProxy != null) {\r\n        RPC.stopProxy(SCMAdminProxy);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "testRunCleanerTask",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testRunCleanerTask() throws Exception\n{\r\n    doNothing().when(cleaner).runCleanerTask();\r\n    RunSharedCacheCleanerTaskRequest request = recordFactory.newRecordInstance(RunSharedCacheCleanerTaskRequest.class);\r\n    RunSharedCacheCleanerTaskResponse response = SCMAdminProxy.runCleanerTask(request);\r\n    Assert.assertTrue(\"cleaner task request isn't accepted\", response.getAccepted());\r\n    verify(service, times(1)).runCleanerTask(any(RunSharedCacheCleanerTaskRequest.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "testRunCleanerTaskCLI",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testRunCleanerTaskCLI() throws Exception\n{\r\n    String[] args = { \"-runCleanerTask\" };\r\n    RunSharedCacheCleanerTaskResponse rp = new RunSharedCacheCleanerTaskResponsePBImpl();\r\n    rp.setAccepted(true);\r\n    when(mockAdmin.runCleanerTask(isA(RunSharedCacheCleanerTaskRequest.class))).thenReturn(rp);\r\n    assertEquals(0, adminCLI.run(args));\r\n    rp.setAccepted(false);\r\n    when(mockAdmin.runCleanerTask(isA(RunSharedCacheCleanerTaskRequest.class))).thenReturn(rp);\r\n    assertEquals(1, adminCLI.run(args));\r\n    verify(mockAdmin, times(2)).runCleanerTask(any(RunSharedCacheCleanerTaskRequest.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "cleanup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void cleanup()\n{\r\n    if (checker != null) {\r\n        checker.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "createCheckerWithMockedClient",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "YarnClient createCheckerWithMockedClient()\n{\r\n    YarnClient client = spy(new DummyYarnClientImpl());\r\n    checker = new RemoteAppChecker(client);\r\n    checker.init(new Configuration());\r\n    checker.start();\r\n    return client;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "testNonExistentApp",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testNonExistentApp() throws Exception\n{\r\n    YarnClient client = createCheckerWithMockedClient();\r\n    ApplicationId id = ApplicationId.newInstance(1, 1);\r\n    doReturn(null).when(client).getApplicationReport(id);\r\n    assertFalse(checker.isApplicationActive(id));\r\n    doThrow(new ApplicationNotFoundException(\"Throw!\")).when(client).getApplicationReport(id);\r\n    assertFalse(checker.isApplicationActive(id));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "testRunningApp",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testRunningApp() throws Exception\n{\r\n    YarnClient client = createCheckerWithMockedClient();\r\n    ApplicationId id = ApplicationId.newInstance(1, 1);\r\n    ApplicationReport report = new ApplicationReportPBImpl();\r\n    report.setYarnApplicationState(YarnApplicationState.ACCEPTED);\r\n    doReturn(report).when(client).getApplicationReport(id);\r\n    assertTrue(checker.isApplicationActive(id));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "setupTestDirs",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setupTestDirs() throws IOException\n{\r\n    testDir = new File(\"target\", TestSharedCacheUploaderService.class.getCanonicalName());\r\n    testDir.delete();\r\n    testDir.mkdirs();\r\n    testDir = testDir.getAbsoluteFile();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "cleanupTestDirs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void cleanupTestDirs() throws IOException\n{\r\n    if (testDir != null) {\r\n        testDir.delete();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "startUp",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void startUp()\n{\r\n    Configuration conf = new Configuration();\r\n    conf.set(YarnConfiguration.SCM_STORE_CLASS, InMemorySCMStore.class.getName());\r\n    conf.set(YarnConfiguration.SHARED_CACHE_ROOT, testDir.getPath());\r\n    AppChecker appChecker = spy(new DummyAppChecker());\r\n    store = new InMemorySCMStore(appChecker);\r\n    store.init(conf);\r\n    store.start();\r\n    service = new SharedCacheUploaderService(store);\r\n    service.init(conf);\r\n    service.start();\r\n    YarnRPC rpc = YarnRPC.create(new Configuration());\r\n    InetSocketAddress scmAddress = conf.getSocketAddr(YarnConfiguration.SCM_UPLOADER_SERVER_ADDRESS, YarnConfiguration.DEFAULT_SCM_UPLOADER_SERVER_ADDRESS, YarnConfiguration.DEFAULT_SCM_UPLOADER_SERVER_PORT);\r\n    proxy = (SCMUploaderProtocol) rpc.getProxy(SCMUploaderProtocol.class, scmAddress, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "cleanUp",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void cleanUp()\n{\r\n    if (store != null) {\r\n        store.stop();\r\n    }\r\n    if (service != null) {\r\n        service.stop();\r\n    }\r\n    if (proxy != null) {\r\n        RPC.stopProxy(proxy);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "testNotify_noEntry",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testNotify_noEntry() throws Exception\n{\r\n    long accepted = SharedCacheUploaderMetrics.getInstance().getAcceptedUploads();\r\n    SCMUploaderNotifyRequest request = recordFactory.newRecordInstance(SCMUploaderNotifyRequest.class);\r\n    request.setResourceKey(\"key1\");\r\n    request.setFilename(\"foo.jar\");\r\n    assertTrue(proxy.notify(request).getAccepted());\r\n    Collection<SharedCacheResourceReference> set = store.getResourceReferences(\"key1\");\r\n    assertNotNull(set);\r\n    assertEquals(0, set.size());\r\n    assertEquals(\"NM upload metrics aren't updated.\", 1, SharedCacheUploaderMetrics.getInstance().getAcceptedUploads() - accepted);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "testNotify_entryExists_differentName",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testNotify_entryExists_differentName() throws Exception\n{\r\n    long rejected = SharedCacheUploaderMetrics.getInstance().getRejectUploads();\r\n    store.addResource(\"key1\", \"foo.jar\");\r\n    SCMUploaderNotifyRequest request = recordFactory.newRecordInstance(SCMUploaderNotifyRequest.class);\r\n    request.setResourceKey(\"key1\");\r\n    request.setFilename(\"foobar.jar\");\r\n    assertFalse(proxy.notify(request).getAccepted());\r\n    Collection<SharedCacheResourceReference> set = store.getResourceReferences(\"key1\");\r\n    assertNotNull(set);\r\n    assertEquals(0, set.size());\r\n    assertEquals(\"NM upload metrics aren't updated.\", 1, SharedCacheUploaderMetrics.getInstance().getRejectUploads() - rejected);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "testNotify_entryExists_sameName",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testNotify_entryExists_sameName() throws Exception\n{\r\n    long accepted = SharedCacheUploaderMetrics.getInstance().getAcceptedUploads();\r\n    store.addResource(\"key1\", \"foo.jar\");\r\n    SCMUploaderNotifyRequest request = recordFactory.newRecordInstance(SCMUploaderNotifyRequest.class);\r\n    request.setResourceKey(\"key1\");\r\n    request.setFilename(\"foo.jar\");\r\n    assertTrue(proxy.notify(request).getAccepted());\r\n    Collection<SharedCacheResourceReference> set = store.getResourceReferences(\"key1\");\r\n    assertNotNull(set);\r\n    assertEquals(0, set.size());\r\n    assertEquals(\"NM upload metrics aren't updated.\", 1, SharedCacheUploaderMetrics.getInstance().getAcceptedUploads() - accepted);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
} ]