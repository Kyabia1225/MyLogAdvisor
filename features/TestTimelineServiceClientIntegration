[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice",
  "methodName" : "setupClass",
  "errType" : [ "ExitUtil.ExitException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void setupClass() throws Exception\n{\r\n    try {\r\n        collectorManager = new MockNodeTimelineCollectorManager();\r\n        conf = new YarnConfiguration();\r\n        conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, true);\r\n        conf.setFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION, 2.0f);\r\n        conf.setClass(YarnConfiguration.TIMELINE_SERVICE_WRITER_CLASS, FileSystemTimelineWriterImpl.class, TimelineWriter.class);\r\n        conf.set(FileSystemTimelineWriterImpl.TIMELINE_SERVICE_STORAGE_DIR_ROOT, ROOT_DIR);\r\n        auxService = PerNodeTimelineCollectorsAuxService.launchServer(new String[0], collectorManager, conf);\r\n        auxService.addApplicationIfAbsent(ApplicationId.newInstance(0, 1), \"user\");\r\n    } catch (ExitUtil.ExitException e) {\r\n        fail();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice",
  "methodName" : "tearDownClass",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDownClass() throws Exception\n{\r\n    if (auxService != null) {\r\n        auxService.stop();\r\n    }\r\n    FileUtils.deleteDirectory(new File(ROOT_DIR));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice",
  "methodName" : "testPutEntities",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testPutEntities() throws Exception\n{\r\n    TimelineV2Client client = TimelineV2Client.createTimelineClient(ApplicationId.newInstance(0, 1));\r\n    try {\r\n        client.setTimelineCollectorInfo(CollectorInfo.newInstance(collectorManager.getRestServerBindAddress()));\r\n        client.init(conf);\r\n        client.start();\r\n        TimelineEntity entity = new TimelineEntity();\r\n        entity.setType(\"test entity type\");\r\n        entity.setId(\"test entity id\");\r\n        TimelineMetric metric = new TimelineMetric(TimelineMetric.Type.TIME_SERIES);\r\n        metric.setId(\"test metric id\");\r\n        metric.addValue(1L, 1.0D);\r\n        metric.addValue(2L, 2.0D);\r\n        entity.addMetric(metric);\r\n        client.putEntities(entity);\r\n        client.putEntitiesAsync(entity);\r\n    } finally {\r\n        client.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice",
  "methodName" : "testPutExtendedEntities",
  "errType" : null,
  "containingMethodsNum" : 22,
  "sourceCodeText" : "void testPutExtendedEntities() throws Exception\n{\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    TimelineV2Client client = TimelineV2Client.createTimelineClient(appId);\r\n    try {\r\n        client.setTimelineCollectorInfo(CollectorInfo.newInstance(collectorManager.getRestServerBindAddress()));\r\n        client.init(conf);\r\n        client.start();\r\n        ClusterEntity cluster = new ClusterEntity();\r\n        cluster.setId(YarnConfiguration.DEFAULT_RM_CLUSTER_ID);\r\n        FlowRunEntity flow = new FlowRunEntity();\r\n        flow.setUser(UserGroupInformation.getCurrentUser().getShortUserName());\r\n        flow.setName(\"test_flow_name\");\r\n        flow.setVersion(\"test_flow_version\");\r\n        flow.setRunId(1L);\r\n        flow.setParent(cluster.getType(), cluster.getId());\r\n        ApplicationEntity app = new ApplicationEntity();\r\n        app.setId(appId.toString());\r\n        flow.addChild(app.getType(), app.getId());\r\n        ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n        ApplicationAttemptEntity appAttempt = new ApplicationAttemptEntity();\r\n        appAttempt.setId(attemptId.toString());\r\n        ContainerId containerId = ContainerId.newContainerId(attemptId, 1);\r\n        ContainerEntity container = new ContainerEntity();\r\n        container.setId(containerId.toString());\r\n        UserEntity user = new UserEntity();\r\n        user.setId(UserGroupInformation.getCurrentUser().getShortUserName());\r\n        QueueEntity queue = new QueueEntity();\r\n        queue.setId(\"default_queue\");\r\n        client.putEntities(cluster, flow, app, appAttempt, container, user, queue);\r\n        client.putEntitiesAsync(cluster, flow, app, appAttempt, container, user, queue);\r\n    } finally {\r\n        client.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\security",
  "methodName" : "params",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Collection<Object[]> params()\n{\r\n    return Arrays.asList(new Object[][] { { false, true }, { false, false }, { true, false }, { true, true } });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\security",
  "methodName" : "setup",
  "errType" : [ "Exception", "Exception" ],
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void setup()\n{\r\n    try {\r\n        testMiniKDC = new MiniKdc(MiniKdc.createConf(), TEST_ROOT_DIR);\r\n        testMiniKDC.start();\r\n        testMiniKDC.createPrincipal(httpSpnegoKeytabFile, HTTP_USER + \"/localhost\");\r\n    } catch (Exception e) {\r\n        fail(\"Couldn't setup MiniKDC.\");\r\n    }\r\n    try {\r\n        conf = new Configuration(false);\r\n        conf.setClass(\"fs.file.impl\", RawLocalFileSystem.class, FileSystem.class);\r\n        conf.setStrings(TIMELINE_HTTP_AUTH_PREFIX + \"type\", \"kerberos\");\r\n        conf.set(TIMELINE_HTTP_AUTH_PREFIX + KerberosAuthenticationHandler.PRINCIPAL, httpSpnegoPrincipal);\r\n        conf.set(TIMELINE_HTTP_AUTH_PREFIX + KerberosAuthenticationHandler.KEYTAB, httpSpnegoKeytabFile.getAbsolutePath());\r\n        conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION, \"kerberos\");\r\n        conf.set(YarnConfiguration.TIMELINE_SERVICE_PRINCIPAL, httpSpnegoPrincipal);\r\n        conf.set(YarnConfiguration.TIMELINE_SERVICE_KEYTAB, httpSpnegoKeytabFile.getAbsolutePath());\r\n        conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, true);\r\n        conf.setFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION, 2.0f);\r\n        conf.setClass(YarnConfiguration.TIMELINE_SERVICE_WRITER_CLASS, FileSystemTimelineWriterImpl.class, TimelineWriter.class);\r\n        conf.set(YarnConfiguration.TIMELINE_SERVICE_READER_BIND_HOST, \"localhost\");\r\n        conf.set(FileSystemTimelineWriterImpl.TIMELINE_SERVICE_STORAGE_DIR_ROOT, TEST_ROOT_DIR.getAbsolutePath());\r\n        conf.set(\"hadoop.proxyuser.HTTP.hosts\", \"*\");\r\n        conf.set(\"hadoop.proxyuser.HTTP.users\", FOO_USER);\r\n        UserGroupInformation.setConfiguration(conf);\r\n    } catch (Exception e) {\r\n        fail(\"Couldn't setup TimelineServer V2.\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\security",
  "methodName" : "initialize",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void initialize() throws Exception\n{\r\n    if (withSsl) {\r\n        conf.set(YarnConfiguration.YARN_HTTP_POLICY_KEY, HttpConfig.Policy.HTTPS_ONLY.name());\r\n        File base = new File(BASEDIR);\r\n        FileUtil.fullyDelete(base);\r\n        base.mkdirs();\r\n        keystoresDir = new File(BASEDIR).getAbsolutePath();\r\n        sslConfDir = KeyStoreTestUtil.getClasspathDir(TestTimelineAuthFilterForV2.class);\r\n        KeyStoreTestUtil.setupSSLConfig(keystoresDir, sslConfDir, conf, false);\r\n    } else {\r\n        conf.set(YarnConfiguration.YARN_HTTP_POLICY_KEY, HttpConfig.Policy.HTTP_ONLY.name());\r\n    }\r\n    if (!withKerberosLogin) {\r\n        conf.setLong(YarnConfiguration.TIMELINE_DELEGATION_TOKEN_RENEW_INTERVAL, 100);\r\n        conf.setLong(YarnConfiguration.TIMELINE_DELEGATION_TOKEN_MAX_LIFETIME, 4000);\r\n    }\r\n    UserGroupInformation.setConfiguration(conf);\r\n    collectorManager = new DummyNodeTimelineCollectorManager();\r\n    auxService = PerNodeTimelineCollectorsAuxService.launchServer(new String[0], collectorManager, conf);\r\n    if (withKerberosLogin) {\r\n        SecurityUtil.login(conf, YarnConfiguration.TIMELINE_SERVICE_KEYTAB, YarnConfiguration.TIMELINE_SERVICE_PRINCIPAL, \"localhost\");\r\n    }\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    auxService.addApplicationIfAbsent(appId, UserGroupInformation.getCurrentUser().getUserName());\r\n    if (!withKerberosLogin) {\r\n        AppLevelTimelineCollector collector = (AppLevelTimelineCollector) collectorManager.get(appId);\r\n        Token<TimelineDelegationTokenIdentifier> token = collector.getDelegationTokenForApp();\r\n        token.setService(new Text(\"localhost\" + token.getService().toString().substring(token.getService().toString().indexOf(\":\"))));\r\n        UserGroupInformation.getCurrentUser().addToken(token);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\security",
  "methodName" : "createTimelineClientForUGI",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "TimelineV2Client createTimelineClientForUGI(ApplicationId appId)\n{\r\n    TimelineV2Client client = TimelineV2Client.createTimelineClient(ApplicationId.newInstance(0, 1));\r\n    String restBindAddr = collectorManager.getRestServerBindAddress();\r\n    String addr = \"localhost\" + restBindAddr.substring(restBindAddr.indexOf(\":\"));\r\n    client.setTimelineCollectorInfo(CollectorInfo.newInstance(addr));\r\n    client.init(conf);\r\n    client.start();\r\n    return client;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\security",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    if (testMiniKDC != null) {\r\n        testMiniKDC.stop();\r\n    }\r\n    FileUtil.fullyDelete(TEST_ROOT_DIR);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\security",
  "methodName" : "destroy",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void destroy() throws Exception\n{\r\n    if (auxService != null) {\r\n        auxService.stop();\r\n    }\r\n    if (withSsl) {\r\n        KeyStoreTestUtil.cleanupSSLConfig(keystoresDir, sslConfDir);\r\n        FileUtil.fullyDelete(new File(BASEDIR));\r\n    }\r\n    if (withKerberosLogin) {\r\n        UserGroupInformation.getCurrentUser().logoutUserFromKeytab();\r\n    }\r\n    UserGroupInformation.setLoginUser(UserGroupInformation.createRemoteUser(nonKerberosUser.getUserName()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\security",
  "methodName" : "createEntity",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "TimelineEntity createEntity(String id, String type)\n{\r\n    TimelineEntity entityToStore = new TimelineEntity();\r\n    entityToStore.setId(id);\r\n    entityToStore.setType(type);\r\n    entityToStore.setCreatedTime(0L);\r\n    return entityToStore;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\security",
  "methodName" : "verifyEntity",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void verifyEntity(File entityTypeDir, String id, String type) throws InterruptedException, IOException\n{\r\n    File entityFile = new File(entityTypeDir, id + FileSystemTimelineWriterImpl.TIMELINE_SERVICE_STORAGE_EXTENSION);\r\n    TimelineEntity entity = null;\r\n    for (int i = 0; i < 50; i++) {\r\n        if (entityFile.exists()) {\r\n            entity = readEntityFile(entityFile);\r\n            if (entity != null) {\r\n                break;\r\n            }\r\n        }\r\n        Thread.sleep(50);\r\n    }\r\n    assertTrue(entityFile.exists());\r\n    assertNotNull(entity);\r\n    assertEquals(id, entity.getId());\r\n    assertEquals(type, entity.getType());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\security",
  "methodName" : "readEntityFile",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "TimelineEntity readEntityFile(File entityFile) throws IOException\n{\r\n    BufferedReader reader = null;\r\n    String strLine;\r\n    try {\r\n        reader = new BufferedReader(new FileReader(entityFile));\r\n        while ((strLine = reader.readLine()) != null) {\r\n            if (strLine.trim().length() > 0) {\r\n                return FileSystemTimelineReaderImpl.getTimelineRecordFromJSON(strLine.trim(), TimelineEntity.class);\r\n            }\r\n        }\r\n        return null;\r\n    } finally {\r\n        reader.close();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\security",
  "methodName" : "publishAndVerifyEntity",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void publishAndVerifyEntity(ApplicationId appId, File entityTypeDir, String entityType, int numEntities) throws Exception\n{\r\n    TimelineV2Client client = createTimelineClientForUGI(appId);\r\n    try {\r\n        client.putEntities(createEntity(\"entity1\", entityType));\r\n        assertEquals(numEntities, entityTypeDir.listFiles().length);\r\n        verifyEntity(entityTypeDir, \"entity1\", entityType);\r\n        client.putEntitiesAsync(createEntity(\"entity2\", entityType));\r\n    } finally {\r\n        client.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\security",
  "methodName" : "publishWithRetries",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean publishWithRetries(ApplicationId appId, File entityTypeDir, String entityType, int numEntities) throws Exception\n{\r\n    for (int i = 0; i < 10; i++) {\r\n        try {\r\n            publishAndVerifyEntity(appId, entityTypeDir, entityType, numEntities);\r\n        } catch (YarnException e) {\r\n            Thread.sleep(50);\r\n            continue;\r\n        }\r\n        return true;\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\security",
  "methodName" : "testPutTimelineEntities",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 38,
  "sourceCodeText" : "void testPutTimelineEntities() throws Exception\n{\r\n    final String entityType = ENTITY_TYPE + ENTITY_TYPE_SUFFIX.getAndIncrement();\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    File entityTypeDir = new File(TEST_ROOT_DIR.getAbsolutePath() + File.separator + \"entities\" + File.separator + YarnConfiguration.DEFAULT_RM_CLUSTER_ID + File.separator + UserGroupInformation.getCurrentUser().getUserName() + File.separator + \"test_flow_name\" + File.separator + \"test_flow_version\" + File.separator + \"1\" + File.separator + appId.toString() + File.separator + entityType);\r\n    if (withKerberosLogin) {\r\n        KerberosTestUtils.doAs(HTTP_USER + \"/localhost\", new Callable<Void>() {\r\n\r\n            @Override\r\n            public Void call() throws Exception {\r\n                publishAndVerifyEntity(appId, entityTypeDir, entityType, 1);\r\n                return null;\r\n            }\r\n        });\r\n    } else {\r\n        assertTrue(\"Entities should have been published successfully.\", publishWithRetries(appId, entityTypeDir, entityType, 1));\r\n        AppLevelTimelineCollector collector = (AppLevelTimelineCollector) collectorManager.get(appId);\r\n        Token<TimelineDelegationTokenIdentifier> token = collector.getDelegationTokenForApp();\r\n        assertNotNull(token);\r\n        Thread.sleep(1000);\r\n        assertTrue(\"Entities should have been published successfully.\", publishWithRetries(appId, entityTypeDir, entityType, 2));\r\n        assertNotNull(collector);\r\n        verify(collectorManager.getTokenManagerService(), atLeastOnce()).renewToken(eq(collector.getDelegationTokenForApp()), any(String.class));\r\n        Thread.sleep(3000);\r\n        for (int i = 0; i < 40; i++) {\r\n            if (!token.equals(collector.getDelegationTokenForApp())) {\r\n                break;\r\n            }\r\n            Thread.sleep(50);\r\n        }\r\n        assertNotEquals(\"Token should have been regenerated.\", token, collector.getDelegationTokenForApp());\r\n        Thread.sleep(1000);\r\n        try {\r\n            publishAndVerifyEntity(appId, entityTypeDir, entityType, 2);\r\n            fail(\"Exception should have been thrown due to Invalid Token.\");\r\n        } catch (YarnException e) {\r\n            assertTrue(\"Exception thrown should have been due to Invalid Token.\", e.getCause().getMessage().contains(\"InvalidToken\"));\r\n        }\r\n        Token<TimelineDelegationTokenIdentifier> regeneratedToken = collector.getDelegationTokenForApp();\r\n        regeneratedToken.setService(new Text(\"localhost\" + regeneratedToken.getService().toString().substring(regeneratedToken.getService().toString().indexOf(\":\"))));\r\n        UserGroupInformation.getCurrentUser().addToken(regeneratedToken);\r\n        assertTrue(\"Entities should have been published successfully.\", publishWithRetries(appId, entityTypeDir, entityType, 2));\r\n        verify(collectorManager.getTokenManagerService(), times(2)).generateToken(any(UserGroupInformation.class), any(String.class));\r\n        assertEquals(1, ((DummyNodeTimelineCollectorManager) collectorManager).getTokenExpiredCnt());\r\n    }\r\n    FileFilter tmpFilter = (pathname -> !pathname.getName().endsWith(\".tmp\"));\r\n    File[] entities = null;\r\n    for (int i = 0; i < 50; i++) {\r\n        entities = entityTypeDir.listFiles(tmpFilter);\r\n        if (entities != null && entities.length == 2) {\r\n            break;\r\n        }\r\n        Thread.sleep(50);\r\n    }\r\n    assertNotNull(\"Error reading entityTypeDir\", entities);\r\n    assertEquals(2, entities.length);\r\n    verifyEntity(entityTypeDir, \"entity2\", entityType);\r\n    AppLevelTimelineCollector collector = (AppLevelTimelineCollector) collectorManager.get(appId);\r\n    assertNotNull(collector);\r\n    auxService.removeApplication(appId);\r\n    verify(collectorManager.getTokenManagerService()).cancelToken(eq(collector.getDelegationTokenForApp()), any(String.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getContainerID",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerId getContainerID()\n{\r\n    return new ContainerIdPBImpl(proto.getContainerId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "UserGroupInformation getUser()\n{\r\n    final ContainerId containerId = getContainerID();\r\n    return UserGroupInformation.createRemoteUser(containerId.toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getApplicationSubmitter",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getApplicationSubmitter()\n{\r\n    return proto.getAppSubmitter();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getNmHostAddress",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getNmHostAddress()\n{\r\n    return proto.getNmHostAddr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getResource",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource getResource()\n{\r\n    return new ResourcePBImpl(proto.getResource());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getExpiryTimeStamp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getExpiryTimeStamp()\n{\r\n    return proto.getExpiryTimeStamp();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getMasterKeyId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getMasterKeyId()\n{\r\n    return proto.getMasterKeyId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getPriority",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Priority getPriority()\n{\r\n    return new PriorityPBImpl(proto.getPriority());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getCreationTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getCreationTime()\n{\r\n    return proto.getCreationTime();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getRMIdentifier",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getRMIdentifier()\n{\r\n    return proto.getRmIdentifier();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "readFields",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void readFields(DataInput in) throws IOException\n{\r\n    DataInputStream dis = (DataInputStream) in;\r\n    byte[] buffer = IOUtils.toByteArray(dis);\r\n    proto = ContainerTokenIdentifierForTestProto.parseFrom(buffer);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void write(DataOutput out) throws IOException\n{\r\n    LOG.debug(\"Writing ContainerTokenIdentifierForTest to RPC layer: {}\", this);\r\n    out.write(proto.toByteArray());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getNewProto",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerTokenIdentifierForTestProto getNewProto()\n{\r\n    return this.proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return this.proto.hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getNewProto().equals(this.getClass().cast(other).getNewProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(this.proto);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void write(DataOutput out) throws IOException\n{\r\n    LOG.debug(\"Writing NMTokenIdentifierNewForTest to RPC layer: {}\", this);\r\n    out.write(proto.toByteArray());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "readFields",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void readFields(DataInput in) throws IOException\n{\r\n    DataInputStream dis = (DataInputStream) in;\r\n    byte[] buffer = IOUtils.toByteArray(dis);\r\n    proto = NMTokenIdentifierNewProto.parseFrom(buffer);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getKind",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Text getKind()\n{\r\n    return KIND;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "UserGroupInformation getUser()\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getMessage",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getMessage()\n{\r\n    return proto.getMessage();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "setMessage",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setMessage(String message)\n{\r\n    builder.setMessage(message);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getNewProto",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NMTokenIdentifierNewProto getNewProto()\n{\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "build",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void build()\n{\r\n    proto = builder.build();\r\n    builder = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getApplicationAttemptId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationAttemptId getApplicationAttemptId()\n{\r\n    return new ApplicationAttemptIdPBImpl(proto.getAppAttemptId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getNodeId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeId getNodeId()\n{\r\n    return new NodeIdPBImpl(proto.getNodeId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getApplicationSubmitter",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getApplicationSubmitter()\n{\r\n    return proto.getAppSubmitter();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getKeyId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getKeyId()\n{\r\n    return proto.getKeyId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return this.proto.hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getNewProto().equals(this.getClass().cast(other).getNewProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(this.proto);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setup() throws AccessControlException, FileNotFoundException, UnsupportedFileSystemException, IOException\n{\r\n    localFS = FileContext.getLocalFSFileContext();\r\n    localFS.delete(new Path(localFSDirBase.getAbsolutePath()), true);\r\n    localFSDirBase.mkdirs();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "teardown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void teardown()\n{\r\n    if (yarnCluster != null) {\r\n        yarnCluster.stop();\r\n        yarnCluster = null;\r\n    }\r\n    FileUtil.fullyDelete(localFSDirBase);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "testLocalDirsFailures",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testLocalDirsFailures() throws IOException\n{\r\n    testDirsFailures(true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "testLogDirsFailures",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testLogDirsFailures() throws IOException\n{\r\n    testDirsFailures(false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "testDirFailuresOnStartup",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testDirFailuresOnStartup() throws IOException\n{\r\n    Configuration conf = new YarnConfiguration();\r\n    String localDir1 = new File(testDir, \"localDir1\").getPath();\r\n    String localDir2 = new File(testDir, \"localDir2\").getPath();\r\n    String logDir1 = new File(testDir, \"logDir1\").getPath();\r\n    String logDir2 = new File(testDir, \"logDir2\").getPath();\r\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, localDir1 + \",\" + localDir2);\r\n    conf.set(YarnConfiguration.NM_LOG_DIRS, logDir1 + \",\" + logDir2);\r\n    prepareDirToFail(localDir1);\r\n    prepareDirToFail(logDir2);\r\n    LocalDirsHandlerService dirSvc = new LocalDirsHandlerService();\r\n    dirSvc.init(conf);\r\n    List<String> localDirs = dirSvc.getLocalDirs();\r\n    Assert.assertEquals(1, localDirs.size());\r\n    Assert.assertEquals(new Path(localDir2).toString(), localDirs.get(0));\r\n    List<String> logDirs = dirSvc.getLogDirs();\r\n    Assert.assertEquals(1, logDirs.size());\r\n    Assert.assertEquals(new Path(logDir1).toString(), logDirs.get(0));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "testDirsFailures",
  "errType" : null,
  "containingMethodsNum" : 25,
  "sourceCodeText" : "void testDirsFailures(boolean localORLogDirs) throws IOException\n{\r\n    String dirType = localORLogDirs ? \"local\" : \"log\";\r\n    String dirsProperty = localORLogDirs ? YarnConfiguration.NM_LOCAL_DIRS : YarnConfiguration.NM_LOG_DIRS;\r\n    Configuration conf = new Configuration();\r\n    conf.setLong(YarnConfiguration.NM_DISK_HEALTH_CHECK_INTERVAL_MS, TOO_HIGH_DISK_HEALTH_CHECK_INTERVAL);\r\n    conf.setFloat(YarnConfiguration.NM_MIN_HEALTHY_DISKS_FRACTION, 0.60F);\r\n    if (yarnCluster != null) {\r\n        yarnCluster.stop();\r\n        FileUtil.fullyDelete(localFSDirBase);\r\n        localFSDirBase.mkdirs();\r\n    }\r\n    LOG.info(\"Starting up YARN cluster\");\r\n    yarnCluster = new MiniYARNCluster(TestDiskFailures.class.getName(), 1, numLocalDirs, numLogDirs);\r\n    yarnCluster.init(conf);\r\n    yarnCluster.start();\r\n    NodeManager nm = yarnCluster.getNodeManager(0);\r\n    LOG.info(\"Configured nm-\" + dirType + \"-dirs=\" + nm.getConfig().get(dirsProperty));\r\n    dirsHandler = nm.getNodeHealthChecker().getDiskHandler();\r\n    List<String> list = localORLogDirs ? dirsHandler.getLocalDirs() : dirsHandler.getLogDirs();\r\n    String[] dirs = list.toArray(new String[list.size()]);\r\n    Assert.assertEquals(\"Number of nm-\" + dirType + \"-dirs is wrong.\", numLocalDirs, dirs.length);\r\n    String expectedDirs = StringUtils.join(\",\", list);\r\n    verifyDisksHealth(localORLogDirs, expectedDirs, true);\r\n    prepareDirToFail(dirs[2]);\r\n    expectedDirs = dirs[0] + \",\" + dirs[1] + \",\" + dirs[3];\r\n    verifyDisksHealth(localORLogDirs, expectedDirs, true);\r\n    prepareDirToFail(dirs[0]);\r\n    expectedDirs = dirs[1] + \",\" + dirs[3];\r\n    verifyDisksHealth(localORLogDirs, expectedDirs, false);\r\n    prepareDirToFail(dirs[1]);\r\n    prepareDirToFail(dirs[3]);\r\n    expectedDirs = \"\";\r\n    verifyDisksHealth(localORLogDirs, expectedDirs, false);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "verifyDisksHealth",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void verifyDisksHealth(boolean localORLogDirs, String expectedDirs, boolean isHealthy)\n{\r\n    dirsHandler.checkDirs();\r\n    List<String> list = localORLogDirs ? dirsHandler.getLocalDirs() : dirsHandler.getLogDirs();\r\n    String seenDirs = StringUtils.join(\",\", list);\r\n    LOG.info(\"ExpectedDirs=\" + expectedDirs);\r\n    LOG.info(\"SeenDirs=\" + seenDirs);\r\n    Assert.assertTrue(\"NodeManager could not identify disk failure.\", expectedDirs.equals(seenDirs));\r\n    Assert.assertEquals(\"Node's health in terms of disks is wrong\", isHealthy, dirsHandler.areDisksHealthy());\r\n    for (int i = 0; i < 10; i++) {\r\n        Iterator<RMNode> iter = yarnCluster.getResourceManager().getRMContext().getRMNodes().values().iterator();\r\n        if (iter.hasNext() && (iter.next().getState() != NodeState.UNHEALTHY) == isHealthy) {\r\n            break;\r\n        }\r\n        try {\r\n            Thread.sleep(1000);\r\n        } catch (InterruptedException e) {\r\n            LOG.error(\"Interrupted while waiting for NM->RM heartbeat.\");\r\n        }\r\n    }\r\n    Iterator<RMNode> iter = yarnCluster.getResourceManager().getRMContext().getRMNodes().values().iterator();\r\n    Assert.assertEquals(\"RM is not updated with the health status of a node\", isHealthy, iter.next().getState() != NodeState.UNHEALTHY);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "prepareDirToFail",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void prepareDirToFail(String dir) throws IOException\n{\r\n    File file = new File(dir);\r\n    if (!FileUtil.fullyDelete(file)) {\r\n        throw new IOException(\"Delete of file was unsuccessful! Path: \" + file.getAbsolutePath());\r\n    }\r\n    file.createNewFile();\r\n    LOG.info(\"Prepared \" + dir + \" to fail.\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "testTimelineServiceStartInMiniCluster",
  "errType" : null,
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void testTimelineServiceStartInMiniCluster() throws Exception\n{\r\n    Configuration conf = new YarnConfiguration();\r\n    int numNodeManagers = 1;\r\n    int numLocalDirs = 1;\r\n    int numLogDirs = 1;\r\n    boolean enableAHS;\r\n    conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, false);\r\n    enableAHS = false;\r\n    try (MiniYARNCluster cluster = new MiniYARNCluster(TestMiniYarnCluster.class.getSimpleName(), numNodeManagers, numLocalDirs, numLogDirs, numLogDirs, enableAHS)) {\r\n        cluster.init(conf);\r\n        cluster.start();\r\n        Assert.assertNull(\"Timeline Service should not have been started\", cluster.getApplicationHistoryServer());\r\n    }\r\n    conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, true);\r\n    enableAHS = false;\r\n    try (MiniYARNCluster cluster = new MiniYARNCluster(TestMiniYarnCluster.class.getSimpleName(), numNodeManagers, numLocalDirs, numLogDirs, numLogDirs, enableAHS)) {\r\n        cluster.init(conf);\r\n        String hostname = MiniYARNCluster.getHostname();\r\n        Assert.assertEquals(hostname + \":0\", conf.get(YarnConfiguration.TIMELINE_SERVICE_ADDRESS));\r\n        cluster.start();\r\n        int wait = 0;\r\n        while (cluster.getApplicationHistoryServer() == null && wait < 20) {\r\n            Thread.sleep(500);\r\n            wait++;\r\n        }\r\n        Assert.assertNotNull(\"Timeline Service should have been started\", cluster.getApplicationHistoryServer());\r\n    }\r\n    conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, false);\r\n    enableAHS = true;\r\n    try (MiniYARNCluster cluster = new MiniYARNCluster(TestMiniYarnCluster.class.getSimpleName(), numNodeManagers, numLocalDirs, numLogDirs, numLogDirs, enableAHS)) {\r\n        cluster.init(conf);\r\n        cluster.start();\r\n        int wait = 0;\r\n        while (cluster.getApplicationHistoryServer() == null && wait < 20) {\r\n            Thread.sleep(500);\r\n            wait++;\r\n        }\r\n        Assert.assertNotNull(\"Timeline Service should have been started\", cluster.getApplicationHistoryServer());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "testMultiRMConf",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testMultiRMConf() throws IOException\n{\r\n    String RM1_NODE_ID = \"rm1\", RM2_NODE_ID = \"rm2\";\r\n    int RM1_PORT_BASE = 10000, RM2_PORT_BASE = 20000;\r\n    Configuration conf = new YarnConfiguration();\r\n    conf.set(YarnConfiguration.RM_CLUSTER_ID, \"yarn-test-cluster\");\r\n    conf.setBoolean(YarnConfiguration.RECOVERY_ENABLED, true);\r\n    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, true);\r\n    conf.setBoolean(YarnConfiguration.AUTO_FAILOVER_ENABLED, false);\r\n    conf.set(YarnConfiguration.RM_HA_IDS, RM1_NODE_ID + \",\" + RM2_NODE_ID);\r\n    HATestUtil.setRpcAddressForRM(RM1_NODE_ID, RM1_PORT_BASE, conf);\r\n    HATestUtil.setRpcAddressForRM(RM2_NODE_ID, RM2_PORT_BASE, conf);\r\n    conf.setBoolean(YarnConfiguration.YARN_MINICLUSTER_FIXED_PORTS, true);\r\n    conf.setBoolean(YarnConfiguration.YARN_MINICLUSTER_USE_RPC, true);\r\n    try (MiniYARNCluster cluster = new MiniYARNCluster(TestMiniYarnCluster.class.getName(), 2, 0, 1, 1)) {\r\n        cluster.init(conf);\r\n        Configuration conf1 = cluster.getResourceManager(0).getConfig(), conf2 = cluster.getResourceManager(1).getConfig();\r\n        Assert.assertFalse(conf1 == conf2);\r\n        Assert.assertEquals(\"0.0.0.0:18032\", conf1.get(HAUtil.addSuffix(YarnConfiguration.RM_ADDRESS, RM1_NODE_ID)));\r\n        Assert.assertEquals(\"0.0.0.0:28032\", conf1.get(HAUtil.addSuffix(YarnConfiguration.RM_ADDRESS, RM2_NODE_ID)));\r\n        Assert.assertEquals(\"rm1\", conf1.get(YarnConfiguration.RM_HA_ID));\r\n        Assert.assertEquals(\"0.0.0.0:18032\", conf2.get(HAUtil.addSuffix(YarnConfiguration.RM_ADDRESS, RM1_NODE_ID)));\r\n        Assert.assertEquals(\"0.0.0.0:28032\", conf2.get(HAUtil.addSuffix(YarnConfiguration.RM_ADDRESS, RM2_NODE_ID)));\r\n        Assert.assertEquals(\"rm2\", conf2.get(YarnConfiguration.RM_HA_ID));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setup() throws IOException\n{\r\n    KRB5_CONF_ROOT_DIR.mkdir();\r\n    File krb5ConfFile = new File(KRB5_CONF_ROOT_DIR, \"krb5.conf\");\r\n    krb5ConfFile.createNewFile();\r\n    String content = \"[libdefaults]\\n\" + \"    default_realm = APACHE.ORG\\n\" + \"    udp_preference_limit = 1\\n\" + \"    extra_addresses = 127.0.0.1\\n\" + \"[realms]\\n\" + \"    APACHE.ORG = {\\n\" + \"        admin_server = localhost:88\\n\" + \"        kdc = localhost:88\\n}\\n\" + \"[domain_realm]\\n\" + \"    localhost = APACHE.ORG\";\r\n    IOUtil.writeFile(content, krb5ConfFile);\r\n    System.setProperty(KRB5_CONF, krb5ConfFile.getAbsolutePath());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown() throws IOException\n{\r\n    KRB5_CONF_ROOT_DIR.delete();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "testNMUpdation",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testNMUpdation() throws Exception\n{\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    validateRMNMKeyExchange(conf);\r\n    conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION, \"kerberos\");\r\n    UserGroupInformation.setConfiguration(conf);\r\n    validateRMNMKeyExchange(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "validateRMNMKeyExchange",
  "errType" : null,
  "containingMethodsNum" : 40,
  "sourceCodeText" : "void validateRMNMKeyExchange(YarnConfiguration conf) throws Exception\n{\r\n    final DrainDispatcher dispatcher = new DrainDispatcher();\r\n    ResourceManager rm = new ResourceManager() {\r\n\r\n        @Override\r\n        protected void doSecureLogin() throws IOException {\r\n        }\r\n\r\n        @Override\r\n        protected Dispatcher createDispatcher() {\r\n            return dispatcher;\r\n        }\r\n\r\n        @Override\r\n        protected void startWepApp() {\r\n        }\r\n    };\r\n    rm.init(conf);\r\n    rm.start();\r\n    String containerToken = \"Container Token : \";\r\n    String nmToken = \"NM Token : \";\r\n    MockNM nm = new MockNM(\"host:1234\", 3072, rm.getResourceTrackerService());\r\n    RegisterNodeManagerResponse registrationResponse = nm.registerNode();\r\n    MasterKey containerTokenMasterKey = registrationResponse.getContainerTokenMasterKey();\r\n    Assert.assertNotNull(containerToken + \"Registration should cause a key-update!\", containerTokenMasterKey);\r\n    MasterKey nmTokenMasterKey = registrationResponse.getNMTokenMasterKey();\r\n    Assert.assertNotNull(nmToken + \"Registration should cause a key-update!\", nmTokenMasterKey);\r\n    dispatcher.await();\r\n    NodeHeartbeatResponse response = nm.nodeHeartbeat(true);\r\n    Assert.assertNull(containerToken + \"First heartbeat after registration shouldn't get any key updates!\", response.getContainerTokenMasterKey());\r\n    Assert.assertNull(nmToken + \"First heartbeat after registration shouldn't get any key updates!\", response.getNMTokenMasterKey());\r\n    dispatcher.await();\r\n    response = nm.nodeHeartbeat(true);\r\n    Assert.assertNull(containerToken + \"Even second heartbeat after registration shouldn't get any key updates!\", response.getContainerTokenMasterKey());\r\n    Assert.assertNull(nmToken + \"Even second heartbeat after registration shouldn't get any key updates!\", response.getContainerTokenMasterKey());\r\n    dispatcher.await();\r\n    rm.getRMContext().getContainerTokenSecretManager().rollMasterKey();\r\n    rm.getRMContext().getNMTokenSecretManager().rollMasterKey();\r\n    response = nm.nodeHeartbeat(true);\r\n    Assert.assertNotNull(containerToken + \"Heartbeats after roll-over and before activation should not err out.\", response.getContainerTokenMasterKey());\r\n    Assert.assertNotNull(nmToken + \"Heartbeats after roll-over and before activation should not err out.\", response.getNMTokenMasterKey());\r\n    Assert.assertEquals(containerToken + \"Roll-over should have incremented the key-id only by one!\", containerTokenMasterKey.getKeyId() + 1, response.getContainerTokenMasterKey().getKeyId());\r\n    Assert.assertEquals(nmToken + \"Roll-over should have incremented the key-id only by one!\", nmTokenMasterKey.getKeyId() + 1, response.getNMTokenMasterKey().getKeyId());\r\n    dispatcher.await();\r\n    response = nm.nodeHeartbeat(true);\r\n    Assert.assertNull(containerToken + \"Second heartbeat after roll-over shouldn't get any key updates!\", response.getContainerTokenMasterKey());\r\n    Assert.assertNull(nmToken + \"Second heartbeat after roll-over shouldn't get any key updates!\", response.getNMTokenMasterKey());\r\n    dispatcher.await();\r\n    rm.getRMContext().getContainerTokenSecretManager().activateNextMasterKey();\r\n    rm.getRMContext().getNMTokenSecretManager().activateNextMasterKey();\r\n    response = nm.nodeHeartbeat(true);\r\n    Assert.assertNull(containerToken + \"Activation shouldn't cause any key updates!\", response.getContainerTokenMasterKey());\r\n    Assert.assertNull(nmToken + \"Activation shouldn't cause any key updates!\", response.getNMTokenMasterKey());\r\n    dispatcher.await();\r\n    response = nm.nodeHeartbeat(true);\r\n    Assert.assertNull(containerToken + \"Even second heartbeat after activation shouldn't get any key updates!\", response.getContainerTokenMasterKey());\r\n    Assert.assertNull(nmToken + \"Even second heartbeat after activation shouldn't get any key updates!\", response.getNMTokenMasterKey());\r\n    dispatcher.await();\r\n    rm.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    testRootDir.mkdirs();\r\n    httpSpnegoKeytabFile.deleteOnExit();\r\n    getKdc().createPrincipal(httpSpnegoKeytabFile, httpSpnegoPrincipal);\r\n    UserGroupInformation.setConfiguration(conf);\r\n    yarnCluster = new MiniYARNCluster(TestContainerManagerSecurity.class.getName(), 1, 1, 1);\r\n    yarnCluster.init(conf);\r\n    yarnCluster.start();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDown()\n{\r\n    if (yarnCluster != null) {\r\n        yarnCluster.stop();\r\n        yarnCluster = null;\r\n    }\r\n    testRootDir.delete();\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "configs",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "Collection<Object[]> configs()\n{\r\n    Configuration configurationWithoutSecurity = new Configuration();\r\n    configurationWithoutSecurity.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION, \"simple\");\r\n    Configuration configurationWithSecurity = new Configuration();\r\n    configurationWithSecurity.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION, \"kerberos\");\r\n    configurationWithSecurity.set(YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY, httpSpnegoPrincipal);\r\n    configurationWithSecurity.set(YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY, httpSpnegoKeytabFile.getAbsolutePath());\r\n    configurationWithSecurity.set(YarnConfiguration.NM_WEBAPP_SPNEGO_USER_NAME_KEY, httpSpnegoPrincipal);\r\n    configurationWithSecurity.set(YarnConfiguration.NM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY, httpSpnegoKeytabFile.getAbsolutePath());\r\n    return Arrays.asList(new Object[][] { { \"Simple\", configurationWithoutSecurity }, { \"Secure\", configurationWithSecurity } });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "testContainerManager",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testContainerManager() throws Exception\n{\r\n    testNMTokens(conf);\r\n    testContainerToken(conf);\r\n    testContainerTokenWithEpoch(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "testNMTokens",
  "errType" : null,
  "containingMethodsNum" : 67,
  "sourceCodeText" : "void testNMTokens(Configuration testConf) throws Exception\n{\r\n    NMTokenSecretManagerInRM nmTokenSecretManagerRM = yarnCluster.getResourceManager().getRMContext().getNMTokenSecretManager();\r\n    NMTokenSecretManagerInNM nmTokenSecretManagerNM = yarnCluster.getNodeManager(0).getNMContext().getNMTokenSecretManager();\r\n    RMContainerTokenSecretManager containerTokenSecretManager = yarnCluster.getResourceManager().getRMContext().getContainerTokenSecretManager();\r\n    NodeManager nm = yarnCluster.getNodeManager(0);\r\n    waitForNMToReceiveNMTokenKey(nmTokenSecretManagerNM);\r\n    Assert.assertEquals(nmTokenSecretManagerNM.getCurrentKey().getKeyId(), nmTokenSecretManagerRM.getCurrentKey().getKeyId());\r\n    YarnRPC rpc = YarnRPC.create(testConf);\r\n    String user = \"test\";\r\n    Resource r = Resource.newInstance(1024, 1);\r\n    ApplicationId appId = ApplicationId.newInstance(1, 1);\r\n    MockRMApp m = new MockRMApp(appId.getId(), appId.getClusterTimestamp(), RMAppState.NEW);\r\n    yarnCluster.getResourceManager().getRMContext().getRMApps().put(appId, m);\r\n    ApplicationAttemptId validAppAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId validContainerId = ContainerId.newContainerId(validAppAttemptId, 0);\r\n    NodeId validNode = yarnCluster.getNodeManager(0).getNMContext().getNodeId();\r\n    NodeId invalidNode = NodeId.newInstance(\"InvalidHost\", 1234);\r\n    org.apache.hadoop.yarn.api.records.Token validNMToken = nmTokenSecretManagerRM.createNMToken(validAppAttemptId, validNode, user);\r\n    org.apache.hadoop.yarn.api.records.Token validContainerToken = containerTokenSecretManager.createContainerToken(validContainerId, 0, validNode, user, r, Priority.newInstance(10), 1234);\r\n    ContainerTokenIdentifier identifier = BuilderUtils.newContainerTokenIdentifier(validContainerToken);\r\n    Assert.assertEquals(Priority.newInstance(10), identifier.getPriority());\r\n    Assert.assertEquals(1234, identifier.getCreationTime());\r\n    StringBuilder sb;\r\n    NMTokenSecretManagerInRM tempManager = new NMTokenSecretManagerInRM(testConf);\r\n    tempManager.rollMasterKey();\r\n    do {\r\n        tempManager.rollMasterKey();\r\n        tempManager.activateNextMasterKey();\r\n    } while (tempManager.getCurrentKey().getKeyId() == nmTokenSecretManagerRM.getCurrentKey().getKeyId());\r\n    if (UserGroupInformation.isSecurityEnabled()) {\r\n        sb = new StringBuilder(\"Client cannot authenticate via:[TOKEN]\");\r\n    } else {\r\n        sb = new StringBuilder(\"SIMPLE authentication is not enabled.  Available:[TOKEN]\");\r\n    }\r\n    String errorMsg = testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, null, true);\r\n    Assert.assertTrue(\"In calling \" + validNode + \" exception was '\" + errorMsg + \"' but doesn't contain '\" + sb.toString() + \"'\", errorMsg.contains(sb.toString()));\r\n    org.apache.hadoop.yarn.api.records.Token invalidNMToken = tempManager.createNMToken(validAppAttemptId, validNode, user);\r\n    sb = new StringBuilder(\"Given NMToken for application : \");\r\n    sb.append(validAppAttemptId.toString()).append(\" seems to have been generated illegally.\");\r\n    Assert.assertTrue(sb.toString().contains(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, invalidNMToken, true)));\r\n    invalidNMToken = nmTokenSecretManagerRM.createNMToken(validAppAttemptId, invalidNode, user);\r\n    sb = new StringBuilder(\"Given NMToken for application : \");\r\n    sb.append(validAppAttemptId).append(\" is not valid for current node manager.expected : \").append(validNode.toString()).append(\" found : \").append(invalidNode.toString());\r\n    Assert.assertTrue(sb.toString().contains(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, invalidNMToken, true)));\r\n    testConf.setInt(YarnConfiguration.RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS, 4 * 60 * 1000);\r\n    validContainerToken = containerTokenSecretManager.createContainerToken(validContainerId, 0, validNode, user, r, Priority.newInstance(0), 0);\r\n    Assert.assertTrue(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, validNMToken, false).isEmpty());\r\n    Assert.assertTrue(nmTokenSecretManagerNM.isAppAttemptNMTokenKeyPresent(validAppAttemptId));\r\n    ApplicationAttemptId validAppAttemptId2 = ApplicationAttemptId.newInstance(appId, 2);\r\n    ContainerId validContainerId2 = ContainerId.newContainerId(validAppAttemptId2, 0);\r\n    org.apache.hadoop.yarn.api.records.Token validContainerToken2 = containerTokenSecretManager.createContainerToken(validContainerId2, 0, validNode, user, r, Priority.newInstance(0), 0);\r\n    org.apache.hadoop.yarn.api.records.Token validNMToken2 = nmTokenSecretManagerRM.createNMToken(validAppAttemptId2, validNode, user);\r\n    NMTokenIdentifier newIdentifier = new NMTokenIdentifier();\r\n    byte[] tokenIdentifierContent = validNMToken2.getIdentifier().array();\r\n    DataInputBuffer dib = new DataInputBuffer();\r\n    dib.reset(tokenIdentifierContent, tokenIdentifierContent.length);\r\n    newIdentifier.readFields(dib);\r\n    NMTokenIdentifierNewForTest newVersionIdentifier = new NMTokenIdentifierNewForTest(newIdentifier, \"message\");\r\n    Assert.assertEquals(\"The ApplicationAttemptId is changed after set to \" + \"newVersionIdentifier\", validAppAttemptId2.getAttemptId(), newVersionIdentifier.getApplicationAttemptId().getAttemptId());\r\n    Assert.assertEquals(\"The message is changed after set to newVersionIdentifier\", \"message\", newVersionIdentifier.getMessage());\r\n    Assert.assertEquals(\"The NodeId is changed after set to newVersionIdentifier\", validNode, newVersionIdentifier.getNodeId());\r\n    org.apache.hadoop.yarn.api.records.Token newVersionedNMToken = BaseNMTokenSecretManager.newInstance(nmTokenSecretManagerRM.retrievePassword(newVersionIdentifier), newVersionIdentifier);\r\n    Assert.assertTrue(testStartContainer(rpc, validAppAttemptId2, validNode, validContainerToken2, newVersionedNMToken, false).isEmpty());\r\n    Assert.assertTrue(nmTokenSecretManagerNM.isAppAttemptNMTokenKeyPresent(validAppAttemptId2));\r\n    waitForContainerToFinishOnNM(validContainerId);\r\n    sb = new StringBuilder(\"Attempt to relaunch the same container with id \");\r\n    sb.append(validContainerId);\r\n    Assert.assertTrue(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, validNMToken, true).contains(sb.toString()));\r\n    testStopContainer(rpc, validAppAttemptId, validNode, validContainerId, validNMToken, false);\r\n    rollNMTokenMasterKey(nmTokenSecretManagerRM, nmTokenSecretManagerNM);\r\n    rollNMTokenMasterKey(nmTokenSecretManagerRM, nmTokenSecretManagerNM);\r\n    sb = new StringBuilder(\"Container \");\r\n    sb.append(validContainerId).append(\" was recently stopped on node manager\");\r\n    Assert.assertTrue(testGetContainer(rpc, validAppAttemptId, validNode, validContainerId, validNMToken, true).contains(sb.toString()));\r\n    nm.getNodeStatusUpdater().clearFinishedContainersFromCache();\r\n    sb = new StringBuilder(\"Container \").append(validContainerId.toString()).append(\" is not handled by this NodeManager\");\r\n    Assert.assertTrue(testGetContainer(rpc, validAppAttemptId, validNode, validContainerId, validNMToken, false).contains(sb.toString()));\r\n    ApplicationAttemptId attempt2 = ApplicationAttemptId.newInstance(appId, 2);\r\n    Token attempt1NMToken = nmTokenSecretManagerRM.createNMToken(validAppAttemptId, validNode, user);\r\n    org.apache.hadoop.yarn.api.records.Token newContainerToken = containerTokenSecretManager.createContainerToken(ContainerId.newContainerId(attempt2, 1), 0, validNode, user, r, Priority.newInstance(0), 0);\r\n    Assert.assertTrue(testStartContainer(rpc, attempt2, validNode, newContainerToken, attempt1NMToken, false).isEmpty());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "waitForContainerToFinishOnNM",
  "errType" : [ "TimeoutException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void waitForContainerToFinishOnNM(ContainerId containerId) throws InterruptedException\n{\r\n    Context nmContext = yarnCluster.getNodeManager(0).getNMContext();\r\n    final int timeout = 4 * 60 * 1000;\r\n    Container waitContainer = nmContext.getContainers().get(containerId);\r\n    if (waitContainer != null) {\r\n        try {\r\n            LOG.info(\"Waiting for \" + containerId + \" to get to state \" + ContainerState.COMPLETE);\r\n            GenericTestUtils.waitFor(() -> ContainerState.COMPLETE.equals(waitContainer.cloneAndGetContainerStatus().getState()), 500, timeout);\r\n        } catch (TimeoutException te) {\r\n            LOG.error(\"TimeoutException\", te);\r\n            fail(\"Was waiting for \" + containerId + \" to get to state \" + ContainerState.COMPLETE + \" but was in state \" + waitContainer.cloneAndGetContainerStatus().getState() + \" after the timeout\");\r\n        }\r\n    }\r\n    yarnCluster.getNodeManager(0).getNodeStatusUpdater().addCompletedContainer(containerId);\r\n    LOG.info(\"Removing container from NMContext, containerID = \" + containerId);\r\n    nmContext.getContainers().remove(containerId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "waitForNMToReceiveNMTokenKey",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void waitForNMToReceiveNMTokenKey(NMTokenSecretManagerInNM nmTokenSecretManagerNM) throws InterruptedException\n{\r\n    int attempt = 60;\r\n    while (nmTokenSecretManagerNM.getNodeId() == null && attempt-- > 0) {\r\n        Thread.sleep(2000);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "rollNMTokenMasterKey",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void rollNMTokenMasterKey(NMTokenSecretManagerInRM nmTokenSecretManagerRM, NMTokenSecretManagerInNM nmTokenSecretManagerNM) throws Exception\n{\r\n    int oldKeyId = nmTokenSecretManagerRM.getCurrentKey().getKeyId();\r\n    nmTokenSecretManagerRM.rollMasterKey();\r\n    int interval = 40;\r\n    while (nmTokenSecretManagerNM.getCurrentKey().getKeyId() == oldKeyId && interval-- > 0) {\r\n        Thread.sleep(1000);\r\n    }\r\n    nmTokenSecretManagerRM.activateNextMasterKey();\r\n    Assert.assertTrue((nmTokenSecretManagerNM.getCurrentKey().getKeyId() == nmTokenSecretManagerRM.getCurrentKey().getKeyId()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "testStopContainer",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String testStopContainer(YarnRPC rpc, ApplicationAttemptId appAttemptId, NodeId nodeId, ContainerId containerId, Token nmToken, boolean isExceptionExpected)\n{\r\n    try {\r\n        stopContainer(rpc, nmToken, Arrays.asList(new ContainerId[] { containerId }), appAttemptId, nodeId);\r\n        if (isExceptionExpected) {\r\n            fail(\"Exception was expected!!\");\r\n        }\r\n        return \"\";\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "testGetContainer",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String testGetContainer(YarnRPC rpc, ApplicationAttemptId appAttemptId, NodeId nodeId, ContainerId containerId, org.apache.hadoop.yarn.api.records.Token nmToken, boolean isExceptionExpected)\n{\r\n    try {\r\n        getContainerStatus(rpc, nmToken, containerId, appAttemptId, nodeId, isExceptionExpected);\r\n        if (isExceptionExpected) {\r\n            fail(\"Exception was expected!!\");\r\n        }\r\n        return \"\";\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "testStartContainer",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String testStartContainer(YarnRPC rpc, ApplicationAttemptId appAttemptId, NodeId nodeId, org.apache.hadoop.yarn.api.records.Token containerToken, org.apache.hadoop.yarn.api.records.Token nmToken, boolean isExceptionExpected)\n{\r\n    try {\r\n        startContainer(rpc, nmToken, containerToken, nodeId, appAttemptId.toString());\r\n        if (isExceptionExpected) {\r\n            fail(\"Exception was expected!!\");\r\n        }\r\n        return \"\";\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "stopContainer",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void stopContainer(YarnRPC rpc, Token nmToken, List<ContainerId> containerId, ApplicationAttemptId appAttemptId, NodeId nodeId) throws Exception\n{\r\n    StopContainersRequest request = StopContainersRequest.newInstance(containerId);\r\n    ContainerManagementProtocol proxy = null;\r\n    try {\r\n        proxy = getContainerManagementProtocolProxy(rpc, nmToken, nodeId, appAttemptId.toString());\r\n        StopContainersResponse response = proxy.stopContainers(request);\r\n        if (response.getFailedRequests() != null && response.getFailedRequests().containsKey(containerId)) {\r\n            parseAndThrowException(response.getFailedRequests().get(containerId).deSerialize());\r\n        }\r\n    } catch (Exception e) {\r\n        if (proxy != null) {\r\n            rpc.stopProxy(proxy, conf);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getContainerStatus",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void getContainerStatus(YarnRPC rpc, org.apache.hadoop.yarn.api.records.Token nmToken, ContainerId containerId, ApplicationAttemptId appAttemptId, NodeId nodeId, boolean isExceptionExpected) throws Exception\n{\r\n    List<ContainerId> containerIds = new ArrayList<ContainerId>();\r\n    containerIds.add(containerId);\r\n    GetContainerStatusesRequest request = GetContainerStatusesRequest.newInstance(containerIds);\r\n    ContainerManagementProtocol proxy = null;\r\n    try {\r\n        proxy = getContainerManagementProtocolProxy(rpc, nmToken, nodeId, appAttemptId.toString());\r\n        GetContainerStatusesResponse statuses = proxy.getContainerStatuses(request);\r\n        if (statuses.getFailedRequests() != null && statuses.getFailedRequests().containsKey(containerId)) {\r\n            parseAndThrowException(statuses.getFailedRequests().get(containerId).deSerialize());\r\n        }\r\n    } finally {\r\n        if (proxy != null) {\r\n            rpc.stopProxy(proxy, conf);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "startContainer",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void startContainer(final YarnRPC rpc, org.apache.hadoop.yarn.api.records.Token nmToken, org.apache.hadoop.yarn.api.records.Token containerToken, NodeId nodeId, String user) throws Exception\n{\r\n    ContainerLaunchContext context = Records.newRecord(ContainerLaunchContext.class);\r\n    StartContainerRequest scRequest = StartContainerRequest.newInstance(context, containerToken);\r\n    List<StartContainerRequest> list = new ArrayList<StartContainerRequest>();\r\n    list.add(scRequest);\r\n    StartContainersRequest allRequests = StartContainersRequest.newInstance(list);\r\n    ContainerManagementProtocol proxy = null;\r\n    try {\r\n        proxy = getContainerManagementProtocolProxy(rpc, nmToken, nodeId, user);\r\n        StartContainersResponse response = proxy.startContainers(allRequests);\r\n        for (SerializedException ex : response.getFailedRequests().values()) {\r\n            parseAndThrowException(ex.deSerialize());\r\n        }\r\n    } finally {\r\n        if (proxy != null) {\r\n            rpc.stopProxy(proxy, conf);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "parseAndThrowException",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void parseAndThrowException(Throwable t) throws YarnException, IOException\n{\r\n    if (t instanceof YarnException) {\r\n        throw (YarnException) t;\r\n    } else if (t instanceof InvalidToken) {\r\n        throw (InvalidToken) t;\r\n    } else {\r\n        throw (IOException) t;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getContainerManagementProtocolProxy",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "ContainerManagementProtocol getContainerManagementProtocolProxy(final YarnRPC rpc, org.apache.hadoop.yarn.api.records.Token nmToken, NodeId nodeId, String user)\n{\r\n    ContainerManagementProtocol proxy;\r\n    UserGroupInformation ugi = UserGroupInformation.createRemoteUser(user);\r\n    final InetSocketAddress addr = new InetSocketAddress(nodeId.getHost(), nodeId.getPort());\r\n    if (nmToken != null) {\r\n        ugi.addToken(ConverterUtils.convertFromYarn(nmToken, addr));\r\n    }\r\n    proxy = NMProxy.createNMProxy(conf, ContainerManagementProtocol.class, ugi, rpc, addr);\r\n    return proxy;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "testContainerToken",
  "errType" : null,
  "containingMethodsNum" : 28,
  "sourceCodeText" : "void testContainerToken(Configuration conf) throws IOException, InterruptedException, YarnException\n{\r\n    LOG.info(\"Running test for malice user\");\r\n    NMTokenSecretManagerInRM nmTokenSecretManagerInRM = yarnCluster.getResourceManager().getRMContext().getNMTokenSecretManager();\r\n    ApplicationId appId = ApplicationId.newInstance(1, 1);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 0);\r\n    ContainerId cId = ContainerId.newContainerId(appAttemptId, 0);\r\n    NodeManager nm = yarnCluster.getNodeManager(0);\r\n    NMTokenSecretManagerInNM nmTokenSecretManagerInNM = nm.getNMContext().getNMTokenSecretManager();\r\n    String user = \"test\";\r\n    waitForNMToReceiveNMTokenKey(nmTokenSecretManagerInNM);\r\n    NodeId nodeId = nm.getNMContext().getNodeId();\r\n    Assert.assertEquals(nmTokenSecretManagerInNM.getCurrentKey().getKeyId(), nmTokenSecretManagerInRM.getCurrentKey().getKeyId());\r\n    RMContainerTokenSecretManager containerTokenSecretManager = yarnCluster.getResourceManager().getRMContext().getContainerTokenSecretManager();\r\n    Resource r = Resource.newInstance(1230, 2);\r\n    Token containerToken = containerTokenSecretManager.createContainerToken(cId, 0, nodeId, user, r, Priority.newInstance(0), 0);\r\n    ContainerTokenIdentifier containerTokenIdentifier = getContainerTokenIdentifierFromToken(containerToken);\r\n    ContainerTokenIdentifierForTest newVersionTokenIdentifier = new ContainerTokenIdentifierForTest(containerTokenIdentifier, \"message\");\r\n    byte[] password = containerTokenSecretManager.createPassword(newVersionTokenIdentifier);\r\n    Token newContainerToken = BuilderUtils.newContainerToken(nodeId, password, newVersionTokenIdentifier);\r\n    Token nmToken = nmTokenSecretManagerInRM.createNMToken(appAttemptId, nodeId, user);\r\n    YarnRPC rpc = YarnRPC.create(conf);\r\n    Assert.assertTrue(testStartContainer(rpc, appAttemptId, nodeId, newContainerToken, nmToken, false).isEmpty());\r\n    RMContainerTokenSecretManager tamperedContainerTokenSecretManager = new RMContainerTokenSecretManager(conf);\r\n    tamperedContainerTokenSecretManager.rollMasterKey();\r\n    do {\r\n        tamperedContainerTokenSecretManager.rollMasterKey();\r\n        tamperedContainerTokenSecretManager.activateNextMasterKey();\r\n    } while (containerTokenSecretManager.getCurrentKey().getKeyId() == tamperedContainerTokenSecretManager.getCurrentKey().getKeyId());\r\n    ContainerId cId2 = ContainerId.newContainerId(appAttemptId, 1);\r\n    Token containerToken2 = tamperedContainerTokenSecretManager.createContainerToken(cId2, 0, nodeId, user, r, Priority.newInstance(0), 0);\r\n    StringBuilder sb = new StringBuilder(\"Given Container \");\r\n    sb.append(cId2).append(\" seems to have an illegally generated token.\");\r\n    Assert.assertTrue(testStartContainer(rpc, appAttemptId, nodeId, containerToken2, nmToken, true).contains(sb.toString()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getContainerTokenIdentifierFromToken",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ContainerTokenIdentifier getContainerTokenIdentifierFromToken(Token containerToken) throws IOException\n{\r\n    ContainerTokenIdentifier containerTokenIdentifier;\r\n    containerTokenIdentifier = new ContainerTokenIdentifier();\r\n    byte[] tokenIdentifierContent = containerToken.getIdentifier().array();\r\n    DataInputBuffer dib = new DataInputBuffer();\r\n    dib.reset(tokenIdentifierContent, tokenIdentifierContent.length);\r\n    containerTokenIdentifier.readFields(dib);\r\n    return containerTokenIdentifier;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "testContainerTokenWithEpoch",
  "errType" : null,
  "containingMethodsNum" : 27,
  "sourceCodeText" : "void testContainerTokenWithEpoch(Configuration conf) throws IOException, InterruptedException, YarnException\n{\r\n    LOG.info(\"Running test for serializing/deserializing containerIds\");\r\n    NMTokenSecretManagerInRM nmTokenSecretManagerInRM = yarnCluster.getResourceManager().getRMContext().getNMTokenSecretManager();\r\n    ApplicationId appId = ApplicationId.newInstance(1, 1);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 0);\r\n    ContainerId cId = ContainerId.newContainerId(appAttemptId, (5L << 40) | 3L);\r\n    NodeManager nm = yarnCluster.getNodeManager(0);\r\n    NMTokenSecretManagerInNM nmTokenSecretManagerInNM = nm.getNMContext().getNMTokenSecretManager();\r\n    String user = \"test\";\r\n    waitForNMToReceiveNMTokenKey(nmTokenSecretManagerInNM);\r\n    NodeId nodeId = nm.getNMContext().getNodeId();\r\n    Assert.assertEquals(nmTokenSecretManagerInNM.getCurrentKey().getKeyId(), nmTokenSecretManagerInRM.getCurrentKey().getKeyId());\r\n    RMContainerTokenSecretManager containerTokenSecretManager = yarnCluster.getResourceManager().getRMContext().getContainerTokenSecretManager();\r\n    Resource r = Resource.newInstance(1230, 2);\r\n    Token containerToken = containerTokenSecretManager.createContainerToken(cId, 0, nodeId, user, r, Priority.newInstance(0), 0);\r\n    ContainerTokenIdentifier containerTokenIdentifier = new ContainerTokenIdentifier();\r\n    byte[] tokenIdentifierContent = containerToken.getIdentifier().array();\r\n    DataInputBuffer dib = new DataInputBuffer();\r\n    dib.reset(tokenIdentifierContent, tokenIdentifierContent.length);\r\n    containerTokenIdentifier.readFields(dib);\r\n    Assert.assertEquals(cId, containerTokenIdentifier.getContainerID());\r\n    Assert.assertEquals(cId.toString(), containerTokenIdentifier.getContainerID().toString());\r\n    Token nmToken = nmTokenSecretManagerInRM.createNMToken(appAttemptId, nodeId, user);\r\n    YarnRPC rpc = YarnRPC.create(conf);\r\n    testStartContainer(rpc, appAttemptId, nodeId, containerToken, nmToken, false);\r\n    List<ContainerId> containerIds = new LinkedList<ContainerId>();\r\n    containerIds.add(cId);\r\n    ContainerManagementProtocol proxy = getContainerManagementProtocolProxy(rpc, nmToken, nodeId, user);\r\n    GetContainerStatusesResponse res = proxy.getContainerStatuses(GetContainerStatusesRequest.newInstance(containerIds));\r\n    Assert.assertNotNull(res.getContainerStatuses().get(0));\r\n    Assert.assertEquals(cId, res.getContainerStatuses().get(0).getContainerId());\r\n    Assert.assertEquals(cId.toString(), res.getContainerStatuses().get(0).getContainerId().toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void setup() throws IOException, InterruptedException\n{\r\n    Configuration conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.AUTO_FAILOVER_ENABLED, false);\r\n    conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS, \"localhost:0\");\r\n    cluster = new MiniYARNCluster(TestMiniYARNClusterForHA.class.getName(), 2, 1, 1, 1);\r\n    cluster.init(conf);\r\n    cluster.start();\r\n    assertFalse(\"RM never turned active\", -1 == cluster.getActiveRMIndex());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "testClusterWorks",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testClusterWorks() throws YarnException, InterruptedException\n{\r\n    assertTrue(\"NMs fail to connect to the RM\", cluster.waitForNodeManagersToConnect(5000));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void setup()\n{\r\n    conf = new YarnConfiguration();\r\n    conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS, \"localhost:0\");\r\n    conf.setInt(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS, 100);\r\n    String name = TestMiniYarnClusterNodeUtilization.class.getName();\r\n    cluster = new MiniYARNCluster(name, NUM_RM, NUM_NM, 1, 1);\r\n    cluster.init(conf);\r\n    cluster.start();\r\n    assertFalse(\"RM never turned active\", -1 == cluster.getActiveRMIndex());\r\n    nm = (CustomNodeManager) cluster.getNodeManager(0);\r\n    nodeStatus = createNodeStatus(nm.getNMContext().getNodeId(), 0, CONTAINER_PMEM_1, CONTAINER_VMEM_1, CONTAINER_CPU_1, NODE_PMEM_1, NODE_VMEM_1, NODE_CPU_1);\r\n    nm.setNodeStatus(nodeStatus);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "testUpdateNodeUtilization",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testUpdateNodeUtilization() throws InterruptedException, IOException, YarnException\n{\r\n    assertTrue(\"NMs fail to connect to the RM\", cluster.waitForNodeManagersToConnect(10000));\r\n    verifySimulatedUtilization();\r\n    nodeStatus = createNodeStatus(nm.getNMContext().getNodeId(), 0, CONTAINER_PMEM_2, CONTAINER_VMEM_2, CONTAINER_CPU_2, NODE_PMEM_2, NODE_VMEM_2, NODE_CPU_2);\r\n    nm.setNodeStatus(nodeStatus);\r\n    verifySimulatedUtilization();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "testMockNodeStatusHeartbeat",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testMockNodeStatusHeartbeat() throws InterruptedException, YarnException\n{\r\n    assertTrue(\"NMs fail to connect to the RM\", cluster.waitForNodeManagersToConnect(10000));\r\n    NodeStatusUpdater updater = nm.getNodeStatusUpdater();\r\n    updater.sendOutofBandHeartBeat();\r\n    verifySimulatedUtilization();\r\n    nodeStatus = createNodeStatus(nm.getNMContext().getNodeId(), 0, CONTAINER_PMEM_2, CONTAINER_VMEM_2, CONTAINER_CPU_2, NODE_PMEM_2, NODE_VMEM_2, NODE_CPU_2);\r\n    nm.setNodeStatus(nodeStatus);\r\n    updater.sendOutofBandHeartBeat();\r\n    verifySimulatedUtilization();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "createNodeStatus",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "NodeStatus createNodeStatus(NodeId nodeId, int responseId, int containerPMem, int containerVMem, float containerCPU, int nodePMem, int nodeVMem, float nodeCPU)\n{\r\n    ResourceUtilization containersUtilization = ResourceUtilization.newInstance(containerPMem, containerVMem, containerCPU);\r\n    ResourceUtilization nodeUtilization = ResourceUtilization.newInstance(nodePMem, nodeVMem, nodeCPU);\r\n    NodeStatus status = NodeStatus.newInstance(nodeId, responseId, new ArrayList<ContainerStatus>(), null, NodeHealthStatus.newInstance(true, null, 0), containersUtilization, nodeUtilization, null);\r\n    return status;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "verifySimulatedUtilization",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void verifySimulatedUtilization() throws InterruptedException\n{\r\n    ResourceManager rm = cluster.getResourceManager(0);\r\n    RMContext rmContext = rm.getRMContext();\r\n    ResourceUtilization containersUtilization = nodeStatus.getContainersUtilization();\r\n    ResourceUtilization nodeUtilization = nodeStatus.getNodeUtilization();\r\n    for (int i = 0; i < 100; i++) {\r\n        for (RMNode ni : rmContext.getRMNodes().values()) {\r\n            if (ni.getNodeUtilization() != null) {\r\n                if (ni.getNodeUtilization().equals(nodeUtilization)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        Thread.sleep(100);\r\n    }\r\n    for (RMNode ni : rmContext.getRMNodes().values()) {\r\n        ResourceUtilization cu = ni.getAggregatedContainersUtilization();\r\n        assertEquals(\"Containers Utillization not propagated to RMNode\", containersUtilization, cu);\r\n        ResourceUtilization nu = ni.getNodeUtilization();\r\n        assertEquals(\"Node Utillization not propagated to RMNode\", nodeUtilization, nu);\r\n        SchedulerNode scheduler = rmContext.getScheduler().getSchedulerNode(ni.getNodeID());\r\n        cu = scheduler.getAggregatedContainersUtilization();\r\n        assertEquals(\"Containers Utillization not propagated to SchedulerNode\", containersUtilization, cu);\r\n        nu = scheduler.getNodeUtilization();\r\n        assertEquals(\"Node Utillization not propagated to SchedulerNode\", nodeUtilization, nu);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "starting",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void starting(Description description)\n{\r\n    version = description.getAnnotation(TimelineVersion.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getTimelineVersion",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "float getTimelineVersion()\n{\r\n    if (version == null) {\r\n        return DEFAULT_TIMELINE_VERSION;\r\n    }\r\n    return version.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 28,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    useFixedPorts = conf.getBoolean(YarnConfiguration.YARN_MINICLUSTER_FIXED_PORTS, YarnConfiguration.DEFAULT_YARN_MINICLUSTER_FIXED_PORTS);\r\n    if (!useFixedPorts) {\r\n        String hostname = MiniYARNCluster.getHostname();\r\n        conf.set(YarnConfiguration.TIMELINE_SERVICE_ADDRESS, hostname + \":0\");\r\n        conf.set(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS, hostname + \":\" + ServerSocketUtil.getPort(9188, 10));\r\n    }\r\n    useRpc = conf.getBoolean(YarnConfiguration.YARN_MINICLUSTER_USE_RPC, YarnConfiguration.DEFAULT_YARN_MINICLUSTER_USE_RPC);\r\n    failoverTimeout = conf.getInt(YarnConfiguration.RM_ZK_TIMEOUT_MS, YarnConfiguration.DEFAULT_RM_ZK_TIMEOUT_MS);\r\n    if (conf.getBoolean(TEST_CONF_RESET_RESOURCE_TYPES, true)) {\r\n        ResourceUtils.resetResourceTypes(conf);\r\n    }\r\n    if (useRpc && !useFixedPorts) {\r\n        throw new YarnRuntimeException(\"Invalid configuration!\" + \" Minicluster can use rpc only when configured to use fixed ports\");\r\n    }\r\n    conf.setBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, true);\r\n    if (resourceManagers.length > 1) {\r\n        conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, true);\r\n        if (conf.get(YarnConfiguration.RM_HA_IDS) == null) {\r\n            StringBuilder rmIds = new StringBuilder();\r\n            for (int i = 0; i < resourceManagers.length; i++) {\r\n                if (i != 0) {\r\n                    rmIds.append(\",\");\r\n                }\r\n                rmIds.append(\"rm\" + i);\r\n            }\r\n            conf.set(YarnConfiguration.RM_HA_IDS, rmIds.toString());\r\n        }\r\n        Collection<String> rmIdsCollection = HAUtil.getRMHAIds(conf);\r\n        rmIds = rmIdsCollection.toArray(new String[rmIdsCollection.size()]);\r\n    }\r\n    for (int i = 0; i < resourceManagers.length; i++) {\r\n        resourceManagers[i] = createResourceManager();\r\n        if (!useFixedPorts) {\r\n            if (HAUtil.isHAEnabled(conf)) {\r\n                setHARMConfigurationWithEphemeralPorts(i, conf);\r\n            } else {\r\n                setNonHARMConfigurationWithEphemeralPorts(conf);\r\n            }\r\n        }\r\n        addService(new ResourceManagerWrapper(i));\r\n    }\r\n    for (int index = 0; index < nodeManagers.length; index++) {\r\n        nodeManagers[index] = useRpc ? new CustomNodeManager() : new ShortCircuitedNodeManager();\r\n        addService(new NodeManagerWrapper(index));\r\n    }\r\n    if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED) || enableAHS) {\r\n        addService(new ApplicationHistoryServerWrapper());\r\n    }\r\n    if (conf.get(YarnConfiguration.FS_NODE_ATTRIBUTE_STORE_ROOT_DIR) == null) {\r\n        File nodeAttrDir = new File(getTestWorkDir(), \"nodeattributes\");\r\n        conf.set(YarnConfiguration.FS_NODE_ATTRIBUTE_STORE_ROOT_DIR, nodeAttrDir.getCanonicalPath());\r\n    }\r\n    super.serviceInit(conf instanceof YarnConfiguration ? conf : new YarnConfiguration(conf));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    super.serviceStart();\r\n    this.waitForNodeManagersToConnect(5000);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "setNonHARMConfigurationWithEphemeralPorts",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void setNonHARMConfigurationWithEphemeralPorts(Configuration conf)\n{\r\n    String hostname = MiniYARNCluster.getHostname();\r\n    conf.set(YarnConfiguration.RM_ADDRESS, hostname + \":0\");\r\n    conf.set(YarnConfiguration.RM_ADMIN_ADDRESS, hostname + \":0\");\r\n    conf.set(YarnConfiguration.RM_SCHEDULER_ADDRESS, hostname + \":0\");\r\n    conf.set(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS, hostname + \":0\");\r\n    WebAppUtils.setRMWebAppHostnameAndPort(conf, hostname, 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "setHARMConfigurationWithEphemeralPorts",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setHARMConfigurationWithEphemeralPorts(final int index, Configuration conf)\n{\r\n    String hostname = MiniYARNCluster.getHostname();\r\n    for (String confKey : YarnConfiguration.getServiceAddressConfKeys(conf)) {\r\n        conf.set(HAUtil.addSuffix(confKey, rmIds[index]), hostname + \":0\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "initResourceManager",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void initResourceManager(int index, Configuration conf)\n{\r\n    Configuration newConf = resourceManagers.length > 1 ? new YarnConfiguration(conf) : conf;\r\n    if (HAUtil.isHAEnabled(newConf)) {\r\n        newConf.set(YarnConfiguration.RM_HA_ID, rmIds[index]);\r\n    }\r\n    resourceManagers[index].init(newConf);\r\n    resourceManagers[index].getRMContext().getDispatcher().register(RMAppAttemptEventType.class, new EventHandler<RMAppAttemptEvent>() {\r\n\r\n        public void handle(RMAppAttemptEvent event) {\r\n            if (event instanceof RMAppAttemptRegistrationEvent) {\r\n                appMasters.put(event.getApplicationAttemptId(), event.getTimestamp());\r\n            } else if (event instanceof RMAppAttemptUnregistrationEvent) {\r\n                appMasters.remove(event.getApplicationAttemptId());\r\n            }\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "startResourceManager",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void startResourceManager(final int index)\n{\r\n    try {\r\n        resourceManagers[index].start();\r\n        if (resourceManagers[index].getServiceState() != STATE.STARTED) {\r\n            throw new IOException(\"ResourceManager failed to start. Final state is \" + resourceManagers[index].getServiceState());\r\n        }\r\n    } catch (Throwable t) {\r\n        throw new YarnRuntimeException(t);\r\n    }\r\n    Configuration conf = resourceManagers[index].getConfig();\r\n    LOG.info(\"MiniYARN ResourceManager address: \" + conf.get(YarnConfiguration.RM_ADDRESS));\r\n    LOG.info(\"MiniYARN ResourceManager web address: \" + WebAppUtils.getRMWebAppURLWithoutScheme(conf));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "stopResourceManager",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void stopResourceManager(int index)\n{\r\n    if (resourceManagers[index] != null) {\r\n        resourceManagers[index].stop();\r\n        resourceManagers[index] = null;\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "restartResourceManager",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void restartResourceManager(int index) throws InterruptedException\n{\r\n    if (resourceManagers[index] != null) {\r\n        resourceManagers[index].stop();\r\n        resourceManagers[index] = null;\r\n    }\r\n    resourceManagers[index] = new ResourceManager();\r\n    initResourceManager(index, getConfig());\r\n    startResourceManager(index);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getTestWorkDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "File getTestWorkDir()\n{\r\n    return testWorkDir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getActiveRMIndex",
  "errType" : [ "IOException", "InterruptedException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int getActiveRMIndex()\n{\r\n    if (resourceManagers.length == 1) {\r\n        return 0;\r\n    }\r\n    int numRetriesForRMBecomingActive = failoverTimeout / 100;\r\n    while (numRetriesForRMBecomingActive-- > 0) {\r\n        for (int i = 0; i < resourceManagers.length; i++) {\r\n            if (resourceManagers[i] == null) {\r\n                continue;\r\n            }\r\n            try {\r\n                if (HAServiceProtocol.HAServiceState.ACTIVE == resourceManagers[i].getRMContext().getRMAdminService().getServiceStatus().getState()) {\r\n                    return i;\r\n                }\r\n            } catch (IOException e) {\r\n                throw new YarnRuntimeException(\"Couldn't read the status of \" + \"a ResourceManger in the HA ensemble.\", e);\r\n            }\r\n        }\r\n        try {\r\n            Thread.sleep(100);\r\n        } catch (InterruptedException e) {\r\n            throw new YarnRuntimeException(\"Interrupted while waiting for one \" + \"of the ResourceManagers to become active\");\r\n        }\r\n    }\r\n    return -1;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getResourceManager",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceManager getResourceManager()\n{\r\n    int activeRMIndex = getActiveRMIndex();\r\n    return activeRMIndex == -1 ? null : this.resourceManagers[activeRMIndex];\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getResourceManager",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourceManager getResourceManager(int i)\n{\r\n    return this.resourceManagers[i];\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getNodeManager",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeManager getNodeManager(int i)\n{\r\n    return this.nodeManagers[i];\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getHostname",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getHostname()\n{\r\n    return \"localhost\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "waitForNodeManagersToConnect",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "boolean waitForNodeManagersToConnect(long timeout) throws YarnException, InterruptedException\n{\r\n    GetClusterMetricsRequest req = GetClusterMetricsRequest.newInstance();\r\n    for (int i = 0; i < timeout / 10; i++) {\r\n        ResourceManager rm = getResourceManager();\r\n        if (rm == null) {\r\n            throw new YarnException(\"Can not find the active RM.\");\r\n        } else if (nodeManagers.length == rm.getClientRMService().getClusterMetrics(req).getClusterMetrics().getNumNodeManagers()) {\r\n            LOG.info(\"All Node Managers connected in MiniYARNCluster\");\r\n            return true;\r\n        }\r\n        Thread.sleep(10);\r\n    }\r\n    LOG.info(\"Node Managers did not connect within 5000ms\");\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getApplicationHistoryServer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationHistoryServer getApplicationHistoryServer()\n{\r\n    return this.appHistoryServer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "createResourceManager",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourceManager createResourceManager()\n{\r\n    return new ResourceManager() {\r\n\r\n        @Override\r\n        protected void doSecureLogin() throws IOException {\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-tests\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getNumOfResourceManager",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getNumOfResourceManager()\n{\r\n    return this.resourceManagers.length;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
} ]