[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\contract",
  "methodName" : "createContract",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AbstractFSContract createContract(Configuration conf)\n{\r\n    return new SwiftContract(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    super.setUp();\r\n    testPath = path(\"/test\");\r\n    smallSeekFile = new Path(testPath, \"seekfile.txt\");\r\n    zeroByteFile = new Path(testPath, \"zero.txt\");\r\n    byte[] block = SwiftTestUtils.dataset(SMALL_SEEK_FILE_LEN, 0, 255);\r\n    createFile(smallSeekFile, block);\r\n    createEmptyFile(zeroByteFile);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "cleanFile",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void cleanFile()\n{\r\n    IOUtils.closeStream(instream);\r\n    instream = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testSeekZeroByteFile",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testSeekZeroByteFile() throws Throwable\n{\r\n    instream = fs.open(zeroByteFile);\r\n    assertEquals(0, instream.getPos());\r\n    int result = instream.read();\r\n    assertMinusOne(\"initial byte read\", result);\r\n    byte[] buffer = new byte[1];\r\n    instream.seek(0);\r\n    result = instream.read();\r\n    assertMinusOne(\"post-seek byte read\", result);\r\n    result = instream.read(buffer, 0, 1);\r\n    assertMinusOne(\"post-seek buffer read\", result);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testBlockReadZeroByteFile",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testBlockReadZeroByteFile() throws Throwable\n{\r\n    instream = fs.open(zeroByteFile);\r\n    assertEquals(0, instream.getPos());\r\n    byte[] buffer = new byte[1];\r\n    int result = instream.read(buffer, 0, 1);\r\n    assertMinusOne(\"block read zero byte file\", result);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testSeekReadClosedFile",
  "errType" : [ "SwiftConnectionClosedException", "IOException", "IOException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testSeekReadClosedFile() throws Throwable\n{\r\n    instream = fs.open(smallSeekFile);\r\n    instream.close();\r\n    try {\r\n        instream.seek(0);\r\n    } catch (SwiftConnectionClosedException e) {\r\n    }\r\n    try {\r\n        instream.read();\r\n    } catch (IOException e) {\r\n    }\r\n    try {\r\n        byte[] buffer = new byte[1];\r\n        int result = instream.read(buffer, 0, 1);\r\n    } catch (IOException e) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testNegativeSeek",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testNegativeSeek() throws Throwable\n{\r\n    instream = fs.open(smallSeekFile);\r\n    assertEquals(0, instream.getPos());\r\n    try {\r\n        instream.seek(-1);\r\n        long p = instream.getPos();\r\n        LOG.warn(\"Seek to -1 returned a position of \" + p);\r\n        int result = instream.read();\r\n        fail(\"expected an exception, got data \" + result + \" at a position of \" + p);\r\n    } catch (IOException e) {\r\n    }\r\n    assertEquals(0, instream.getPos());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testSeekFile",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testSeekFile() throws Throwable\n{\r\n    instream = fs.open(smallSeekFile);\r\n    assertEquals(0, instream.getPos());\r\n    instream.seek(0);\r\n    int result = instream.read();\r\n    assertEquals(0, result);\r\n    assertEquals(1, instream.read());\r\n    assertEquals(2, instream.getPos());\r\n    assertEquals(2, instream.read());\r\n    assertEquals(3, instream.getPos());\r\n    instream.seek(128);\r\n    assertEquals(128, instream.getPos());\r\n    assertEquals(128, instream.read());\r\n    instream.seek(63);\r\n    assertEquals(63, instream.read());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testSeekAndReadPastEndOfFile",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testSeekAndReadPastEndOfFile() throws Throwable\n{\r\n    instream = fs.open(smallSeekFile);\r\n    assertEquals(0, instream.getPos());\r\n    instream.seek(SMALL_SEEK_FILE_LEN - 2);\r\n    assertTrue(\"Premature EOF\", instream.read() != -1);\r\n    assertTrue(\"Premature EOF\", instream.read() != -1);\r\n    assertMinusOne(\"read past end of file\", instream.read());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testSeekAndPastEndOfFileThenReseekAndRead",
  "errType" : [ "EOFException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testSeekAndPastEndOfFileThenReseekAndRead() throws Throwable\n{\r\n    instream = fs.open(smallSeekFile);\r\n    try {\r\n        instream.seek(SMALL_SEEK_FILE_LEN);\r\n        assertMinusOne(\"read after seeking past EOF\", instream.read());\r\n    } catch (EOFException expected) {\r\n    }\r\n    instream.seek(1);\r\n    assertTrue(\"Premature EOF\", instream.read() != -1);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "createConfiguration",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Configuration createConfiguration()\n{\r\n    Configuration conf = super.createConfiguration();\r\n    conf.set(SwiftProtocolConstants.SWIFT_REQUEST_SIZE, \"1\");\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testSeekBigFile",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testSeekBigFile() throws Throwable\n{\r\n    Path testSeekFile = new Path(testPath, \"bigseekfile.txt\");\r\n    byte[] block = SwiftTestUtils.dataset(65536, 0, 255);\r\n    createFile(testSeekFile, block);\r\n    instream = fs.open(testSeekFile);\r\n    assertEquals(0, instream.getPos());\r\n    instream.seek(0);\r\n    int result = instream.read();\r\n    assertEquals(0, result);\r\n    assertEquals(1, instream.read());\r\n    assertEquals(2, instream.read());\r\n    instream.seek(32768);\r\n    assertEquals(\"@32768\", block[32768], (byte) instream.read());\r\n    instream.seek(40000);\r\n    assertEquals(\"@40000\", block[40000], (byte) instream.read());\r\n    instream.seek(8191);\r\n    assertEquals(\"@8191\", block[8191], (byte) instream.read());\r\n    instream.seek(0);\r\n    assertEquals(\"@0\", 0, (byte) instream.read());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testPositionedBulkReadDoesntChangePosition",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testPositionedBulkReadDoesntChangePosition() throws Throwable\n{\r\n    Path testSeekFile = new Path(testPath, \"bigseekfile.txt\");\r\n    byte[] block = SwiftTestUtils.dataset(65536, 0, 255);\r\n    createFile(testSeekFile, block);\r\n    instream = fs.open(testSeekFile);\r\n    instream.seek(39999);\r\n    assertTrue(-1 != instream.read());\r\n    assertEquals(40000, instream.getPos());\r\n    byte[] readBuffer = new byte[256];\r\n    instream.read(128, readBuffer, 0, readBuffer.length);\r\n    assertEquals(40000, instream.getPos());\r\n    assertEquals(\"@40000\", block[40000], (byte) instream.read());\r\n    for (int i = 0; i < 256; i++) {\r\n        assertEquals(\"@\" + i, block[i + 128], readBuffer[i]);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "expectedByte",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int expectedByte(int offset)\n{\r\n    return offset & 0xff;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testLsRoot",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testLsRoot() throws Throwable\n{\r\n    Path path = new Path(\"/\");\r\n    FileStatus[] statuses = fs.listStatus(path);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testMkDir",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testMkDir() throws Throwable\n{\r\n    Path path = new Path(\"/test/MkDir\");\r\n    fs.mkdirs(path);\r\n    fs.delete(path, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testDeleteNonexistentFile",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testDeleteNonexistentFile() throws Throwable\n{\r\n    Path path = new Path(\"/test/DeleteNonexistentFile\");\r\n    assertFalse(\"delete returned true\", fs.delete(path, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testPutFile",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testPutFile() throws Throwable\n{\r\n    Path path = new Path(\"/test/PutFile\");\r\n    Exception caught = null;\r\n    writeTextFile(fs, path, \"Testing a put to a file\", false);\r\n    assertDeleted(path, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testPutGetFile",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testPutGetFile() throws Throwable\n{\r\n    Path path = new Path(\"/test/PutGetFile\");\r\n    try {\r\n        String text = \"Testing a put and get to a file \" + System.currentTimeMillis();\r\n        writeTextFile(fs, path, text, false);\r\n        String result = readBytesToString(fs, path, text.length());\r\n        assertEquals(text, result);\r\n    } finally {\r\n        delete(fs, path);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testPutDeleteFileInSubdir",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testPutDeleteFileInSubdir() throws Throwable\n{\r\n    Path path = new Path(\"/test/PutDeleteFileInSubdir/testPutDeleteFileInSubdir\");\r\n    String text = \"Testing a put and get to a file in a subdir \" + System.currentTimeMillis();\r\n    writeTextFile(fs, path, text, false);\r\n    assertDeleted(path, false);\r\n    assertDeleted(new Path(\"/test/PutDeleteFileInSubdir\"), false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testRecursiveDelete",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testRecursiveDelete() throws Throwable\n{\r\n    Path childpath = new Path(\"/test/testRecursiveDelete\");\r\n    String text = \"Testing a put and get to a file in a subdir \" + System.currentTimeMillis();\r\n    writeTextFile(fs, childpath, text, false);\r\n    assertDeleted(new Path(\"/test\"), true);\r\n    assertFalse(\"child entry still present \" + childpath, fs.exists(childpath));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "delete",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void delete(SwiftNativeFileSystem fs, Path path)\n{\r\n    try {\r\n        if (!fs.delete(path, false)) {\r\n            LOG.warn(\"Failed to delete \" + path);\r\n        }\r\n    } catch (IOException e) {\r\n        LOG.warn(\"deleting \" + path, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "deleteR",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void deleteR(SwiftNativeFileSystem fs, Path path)\n{\r\n    try {\r\n        if (!fs.delete(path, true)) {\r\n            LOG.warn(\"Failed to delete \" + path);\r\n        }\r\n    } catch (IOException e) {\r\n        LOG.warn(\"deleting \" + path, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testOverwrite",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testOverwrite() throws Throwable\n{\r\n    Path path = new Path(\"/test/Overwrite\");\r\n    try {\r\n        String text = \"Testing a put to a file \" + System.currentTimeMillis();\r\n        writeTextFile(fs, path, text, false);\r\n        assertFileHasLength(fs, path, text.length());\r\n        String text2 = \"Overwriting a file \" + System.currentTimeMillis();\r\n        writeTextFile(fs, path, text2, true);\r\n        assertFileHasLength(fs, path, text2.length());\r\n        String result = readBytesToString(fs, path, text2.length());\r\n        assertEquals(text2, result);\r\n    } finally {\r\n        delete(fs, path);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testOverwriteDirectory",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testOverwriteDirectory() throws Throwable\n{\r\n    Path path = new Path(\"/test/testOverwriteDirectory\");\r\n    try {\r\n        fs.mkdirs(path.getParent());\r\n        String text = \"Testing a put to a file \" + System.currentTimeMillis();\r\n        writeTextFile(fs, path, text, false);\r\n        assertFileHasLength(fs, path, text.length());\r\n    } finally {\r\n        delete(fs, path);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testFileStatus",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testFileStatus() throws Throwable\n{\r\n    Path path = new Path(\"/test/FileStatus\");\r\n    try {\r\n        String text = \"Testing File Status \" + System.currentTimeMillis();\r\n        writeTextFile(fs, path, text, false);\r\n        SwiftTestUtils.assertIsFile(fs, path);\r\n    } finally {\r\n        delete(fs, path);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testDirStatus",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testDirStatus() throws Throwable\n{\r\n    Path path = new Path(\"/test/DirStatus\");\r\n    try {\r\n        fs.mkdirs(path);\r\n        assertIsDirectory(fs, path);\r\n    } finally {\r\n        delete(fs, path);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testDirStaysADir",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testDirStaysADir() throws Throwable\n{\r\n    Path path = new Path(\"/test/dirStaysADir\");\r\n    Path child = new Path(path, \"child\");\r\n    try {\r\n        fs.mkdirs(path);\r\n        assertIsDirectory(fs, path);\r\n        writeTextFile(fs, child, \"child file\", true);\r\n        assertIsDirectory(fs, path);\r\n        delete(fs, child);\r\n    } finally {\r\n        deleteR(fs, path);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testCreateMultilevelDir",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testCreateMultilevelDir() throws Throwable\n{\r\n    Path base = new Path(\"/test/CreateMultilevelDir\");\r\n    Path path = new Path(base, \"1/2/3\");\r\n    fs.mkdirs(path);\r\n    assertExists(\"deep multilevel dir not created\", path);\r\n    fs.delete(base, true);\r\n    assertPathDoesNotExist(\"Multilevel delete failed\", path);\r\n    assertPathDoesNotExist(\"Multilevel delete failed\", base);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testCreateDirWithFileParent",
  "errType" : [ "ParentNotDirectoryException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testCreateDirWithFileParent() throws Throwable\n{\r\n    Path path = new Path(\"/test/CreateDirWithFileParent\");\r\n    Path child = new Path(path, \"subdir/child\");\r\n    fs.mkdirs(path.getParent());\r\n    try {\r\n        writeTextFile(fs, path, \"parent\", true);\r\n        try {\r\n            fs.mkdirs(child);\r\n        } catch (ParentNotDirectoryException expected) {\r\n            LOG.debug(\"Expected Exception\", expected);\r\n        }\r\n    } finally {\r\n        fs.delete(path, true);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testLongObjectNamesForbidden",
  "errType" : [ "SwiftBadRequestException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testLongObjectNamesForbidden() throws Throwable\n{\r\n    StringBuilder buffer = new StringBuilder(1200);\r\n    buffer.append(\"/\");\r\n    for (int i = 0; i < (1200 / 4); i++) {\r\n        buffer.append(String.format(\"%04x\", i));\r\n    }\r\n    String pathString = buffer.toString();\r\n    Path path = new Path(pathString);\r\n    try {\r\n        writeTextFile(fs, path, pathString, true);\r\n        fs.delete(path, false);\r\n        fail(\"Managed to create an object with a name of length \" + pathString.length());\r\n    } catch (SwiftBadRequestException e) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testLsNonExistentFile",
  "errType" : [ "FileNotFoundException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testLsNonExistentFile() throws Exception\n{\r\n    try {\r\n        Path path = new Path(\"/test/hadoop/file\");\r\n        FileStatus[] statuses = fs.listStatus(path);\r\n        fail(\"Should throw FileNotFoundException on \" + path + \" but got list of length \" + statuses.length);\r\n    } catch (FileNotFoundException fnfe) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testGetCanonicalServiceName",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetCanonicalServiceName()\n{\r\n    Assert.assertNull(fs.getCanonicalServiceName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    conf.setInt(SwiftProtocolConstants.SWIFT_BLOCKSIZE, 2);\r\n    URI serviceURI = SwiftTestUtils.getServiceURI(conf);\r\n    fSys = FileSystem.get(serviceURI, conf);\r\n    super.setUp();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "createFileSystem",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "FileSystem createFileSystem() throws Exception\n{\r\n    return fSys;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "getDefaultWorkingDirectory",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getDefaultWorkingDirectory() throws IOException\n{\r\n    if (wd == null) {\r\n        wd = fSys.getWorkingDirectory();\r\n    }\r\n    return wd;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testWDAbsolute",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testWDAbsolute() throws IOException\n{\r\n    Path absoluteDir = getTestRootPath(fSys, \"test/existingDir\");\r\n    fSys.mkdirs(absoluteDir);\r\n    fSys.setWorkingDirectory(absoluteDir);\r\n    Assert.assertEquals(absoluteDir, fSys.getWorkingDirectory());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testListStatusThrowsExceptionForUnreadableDir",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testListStatusThrowsExceptionForUnreadableDir()\n{\r\n    SwiftTestUtils.skip(\"unsupported\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testGlobStatusThrowsExceptionForUnreadableDir",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGlobStatusThrowsExceptionForUnreadableDir()\n{\r\n    SwiftTestUtils.skip(\"unsupported\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testFsStatus",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testFsStatus() throws Exception\n{\r\n    super.testFsStatus();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testWorkingDirectory",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testWorkingDirectory() throws Exception\n{\r\n    super.testWorkingDirectory();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testMkdirs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testMkdirs() throws Exception\n{\r\n    super.testMkdirs();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testMkdirsFailsForSubdirectoryOfExistingFile",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testMkdirsFailsForSubdirectoryOfExistingFile() throws Exception\n{\r\n    super.testMkdirsFailsForSubdirectoryOfExistingFile();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testGetFileStatusThrowsExceptionForNonExistentFile",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetFileStatusThrowsExceptionForNonExistentFile() throws Exception\n{\r\n    super.testGetFileStatusThrowsExceptionForNonExistentFile();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testListStatusThrowsExceptionForNonExistentFile",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testListStatusThrowsExceptionForNonExistentFile() throws Exception\n{\r\n    super.testListStatusThrowsExceptionForNonExistentFile();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testListStatus",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testListStatus() throws Exception\n{\r\n    super.testListStatus();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testListStatusFilterWithNoMatches",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testListStatusFilterWithNoMatches() throws Exception\n{\r\n    super.testListStatusFilterWithNoMatches();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testListStatusFilterWithSomeMatches",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testListStatusFilterWithSomeMatches() throws Exception\n{\r\n    super.testListStatusFilterWithSomeMatches();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testGlobStatusNonExistentFile",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGlobStatusNonExistentFile() throws Exception\n{\r\n    super.testGlobStatusNonExistentFile();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testGlobStatusWithNoMatchesInPath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGlobStatusWithNoMatchesInPath() throws Exception\n{\r\n    super.testGlobStatusWithNoMatchesInPath();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testGlobStatusSomeMatchesInDirectories",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGlobStatusSomeMatchesInDirectories() throws Exception\n{\r\n    super.testGlobStatusSomeMatchesInDirectories();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testGlobStatusWithMultipleWildCardMatches",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGlobStatusWithMultipleWildCardMatches() throws Exception\n{\r\n    super.testGlobStatusWithMultipleWildCardMatches();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testGlobStatusWithMultipleMatchesOfSingleChar",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGlobStatusWithMultipleMatchesOfSingleChar() throws Exception\n{\r\n    super.testGlobStatusWithMultipleMatchesOfSingleChar();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testGlobStatusFilterWithEmptyPathResults",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGlobStatusFilterWithEmptyPathResults() throws Exception\n{\r\n    super.testGlobStatusFilterWithEmptyPathResults();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testGlobStatusFilterWithSomePathMatchesAndTrivialFilter",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGlobStatusFilterWithSomePathMatchesAndTrivialFilter() throws Exception\n{\r\n    super.testGlobStatusFilterWithSomePathMatchesAndTrivialFilter();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testGlobStatusFilterWithMultipleWildCardMatchesAndTrivialFilter",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGlobStatusFilterWithMultipleWildCardMatchesAndTrivialFilter() throws Exception\n{\r\n    super.testGlobStatusFilterWithMultipleWildCardMatchesAndTrivialFilter();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testGlobStatusFilterWithMultiplePathMatchesAndNonTrivialFilter",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGlobStatusFilterWithMultiplePathMatchesAndNonTrivialFilter() throws Exception\n{\r\n    super.testGlobStatusFilterWithMultiplePathMatchesAndNonTrivialFilter();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testGlobStatusFilterWithNoMatchingPathsAndNonTrivialFilter",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGlobStatusFilterWithNoMatchingPathsAndNonTrivialFilter() throws Exception\n{\r\n    super.testGlobStatusFilterWithNoMatchingPathsAndNonTrivialFilter();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testGlobStatusFilterWithMultiplePathWildcardsAndNonTrivialFilter",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGlobStatusFilterWithMultiplePathWildcardsAndNonTrivialFilter() throws Exception\n{\r\n    super.testGlobStatusFilterWithMultiplePathWildcardsAndNonTrivialFilter();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testWriteReadAndDeleteEmptyFile",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testWriteReadAndDeleteEmptyFile() throws Exception\n{\r\n    super.testWriteReadAndDeleteEmptyFile();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testWriteReadAndDeleteHalfABlock",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testWriteReadAndDeleteHalfABlock() throws Exception\n{\r\n    super.testWriteReadAndDeleteHalfABlock();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testWriteReadAndDeleteOneBlock",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testWriteReadAndDeleteOneBlock() throws Exception\n{\r\n    super.testWriteReadAndDeleteOneBlock();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testWriteReadAndDeleteOneAndAHalfBlocks",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testWriteReadAndDeleteOneAndAHalfBlocks() throws Exception\n{\r\n    super.testWriteReadAndDeleteOneAndAHalfBlocks();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testWriteReadAndDeleteTwoBlocks",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testWriteReadAndDeleteTwoBlocks() throws Exception\n{\r\n    super.testWriteReadAndDeleteTwoBlocks();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testOverwrite",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testOverwrite() throws IOException\n{\r\n    super.testOverwrite();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testWriteInNonExistentDirectory",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testWriteInNonExistentDirectory() throws IOException\n{\r\n    super.testWriteInNonExistentDirectory();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testDeleteNonExistentFile",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testDeleteNonExistentFile() throws IOException\n{\r\n    super.testDeleteNonExistentFile();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testDeleteRecursively",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testDeleteRecursively() throws IOException\n{\r\n    super.testDeleteRecursively();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testDeleteEmptyDirectory",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testDeleteEmptyDirectory() throws IOException\n{\r\n    super.testDeleteEmptyDirectory();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testRenameNonExistentPath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testRenameNonExistentPath() throws Exception\n{\r\n    super.testRenameNonExistentPath();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testRenameFileToNonExistentDirectory",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testRenameFileToNonExistentDirectory() throws Exception\n{\r\n    super.testRenameFileToNonExistentDirectory();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testRenameFileToDestinationWithParentFile",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testRenameFileToDestinationWithParentFile() throws Exception\n{\r\n    super.testRenameFileToDestinationWithParentFile();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testRenameFileToExistingParent",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testRenameFileToExistingParent() throws Exception\n{\r\n    super.testRenameFileToExistingParent();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testRenameFileToItself",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testRenameFileToItself() throws Exception\n{\r\n    super.testRenameFileToItself();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testRenameFileAsExistingFile",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testRenameFileAsExistingFile() throws Exception\n{\r\n    super.testRenameFileAsExistingFile();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testRenameFileAsExistingDirectory",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testRenameFileAsExistingDirectory() throws Exception\n{\r\n    super.testRenameFileAsExistingDirectory();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testRenameDirectoryToItself",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testRenameDirectoryToItself() throws Exception\n{\r\n    super.testRenameDirectoryToItself();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testRenameDirectoryToNonExistentParent",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testRenameDirectoryToNonExistentParent() throws Exception\n{\r\n    super.testRenameDirectoryToNonExistentParent();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testRenameDirectoryAsNonExistentDirectory",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testRenameDirectoryAsNonExistentDirectory() throws Exception\n{\r\n    super.testRenameDirectoryAsNonExistentDirectory();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testRenameDirectoryAsEmptyDirectory",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testRenameDirectoryAsEmptyDirectory() throws Exception\n{\r\n    super.testRenameDirectoryAsEmptyDirectory();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testRenameDirectoryAsNonEmptyDirectory",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testRenameDirectoryAsNonEmptyDirectory() throws Exception\n{\r\n    super.testRenameDirectoryAsNonEmptyDirectory();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testRenameDirectoryAsFile",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testRenameDirectoryAsFile() throws Exception\n{\r\n    super.testRenameDirectoryAsFile();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testInputStreamClosedTwice",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testInputStreamClosedTwice() throws IOException\n{\r\n    super.testInputStreamClosedTwice();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testOutputStreamClosedTwice",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testOutputStreamClosedTwice() throws IOException\n{\r\n    super.testOutputStreamClosedTwice();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testGetWrappedInputStream",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetWrappedInputStream() throws IOException\n{\r\n    super.testGetWrappedInputStream();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testCopyToLocalWithUseRawLocalFileSystemOption",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testCopyToLocalWithUseRawLocalFileSystemOption() throws Exception\n{\r\n    super.testCopyToLocalWithUseRawLocalFileSystemOption();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\contract",
  "methodName" : "createContract",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AbstractFSContract createContract(Configuration conf)\n{\r\n    return new SwiftContract(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\hdfs2",
  "methodName" : "extraStatusAssertions",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void extraStatusAssertions(SwiftFileStatus stat)\n{\r\n    assertTrue(\"isDirectory(): Not a directory: \" + stat, stat.isDirectory());\r\n    assertFalse(\"isFile(): declares itself a file: \" + stat, stat.isFile());\r\n    assertFalse(\"isFile(): declares itself a file: \" + stat, stat.isSymlink());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testLocateSingleFileBlocks",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testLocateSingleFileBlocks() throws Throwable\n{\r\n    describe(\"verify that a file returns 1+ blocks\");\r\n    FileStatus fileStatus = createFileAndGetStatus();\r\n    BlockLocation[] locations = getFs().getFileBlockLocations(fileStatus, 0, 1);\r\n    assertNotEqual(\"No block locations supplied for \" + fileStatus, 0, locations.length);\r\n    for (BlockLocation location : locations) {\r\n        assertLocationValid(location);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "assertLocationValid",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void assertLocationValid(BlockLocation location) throws IOException\n{\r\n    LOG.info(\"{}\", location);\r\n    String[] hosts = location.getHosts();\r\n    String[] names = location.getNames();\r\n    assertNotEqual(\"No hosts supplied for \" + location, 0, hosts.length);\r\n    assertEquals(\"Unequal names and hosts in \" + location, hosts.length, names.length);\r\n    assertEquals(SwiftProtocolConstants.BLOCK_LOCATION, location.getNames()[0]);\r\n    assertEquals(SwiftProtocolConstants.TOPOLOGY_PATH, location.getTopologyPaths()[0]);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "createFileAndGetStatus",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "FileStatus createFileAndGetStatus() throws IOException\n{\r\n    Path path = path(\"/test/locatedFile\");\r\n    createFile(path);\r\n    return fs.getFileStatus(path);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testLocateNullStatus",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testLocateNullStatus() throws Throwable\n{\r\n    describe(\"verify that a null filestatus maps to a null location array\");\r\n    BlockLocation[] locations = getFs().getFileBlockLocations((FileStatus) null, 0, 1);\r\n    assertNull(locations);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testLocateNegativeSeek",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testLocateNegativeSeek() throws Throwable\n{\r\n    describe(\"verify that a negative offset is illegal\");\r\n    try {\r\n        BlockLocation[] locations = getFs().getFileBlockLocations(createFileAndGetStatus(), -1, 1);\r\n        fail(\"Expected an exception, got \" + locations.length + \" locations\");\r\n    } catch (IllegalArgumentException e) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testLocateNegativeLen",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testLocateNegativeLen() throws Throwable\n{\r\n    describe(\"verify that a negative length is illegal\");\r\n    try {\r\n        BlockLocation[] locations = getFs().getFileBlockLocations(createFileAndGetStatus(), 0, -1);\r\n        fail(\"Expected an exception, got \" + locations.length + \" locations\");\r\n    } catch (IllegalArgumentException e) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testLocateOutOfRangeLen",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testLocateOutOfRangeLen() throws Throwable\n{\r\n    describe(\"overshooting the length is legal, as long as the\" + \" origin location is valid\");\r\n    BlockLocation[] locations = getFs().getFileBlockLocations(createFileAndGetStatus(), 0, data.length + 100);\r\n    assertNotNull(locations);\r\n    assertTrue(locations.length > 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testLocateOutOfRangeSrc",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testLocateOutOfRangeSrc() throws Throwable\n{\r\n    describe(\"Seeking out of the file length returns an empty array\");\r\n    BlockLocation[] locations = getFs().getFileBlockLocations(createFileAndGetStatus(), data.length + 100, 1);\r\n    assertEmptyBlockLocations(locations);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "assertEmptyBlockLocations",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void assertEmptyBlockLocations(BlockLocation[] locations)\n{\r\n    assertNotNull(locations);\r\n    if (locations.length != 0) {\r\n        fail(\"non empty locations[] with first entry of \" + locations[0]);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testLocateDirectory",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testLocateDirectory() throws Throwable\n{\r\n    describe(\"verify that locating a directory is an error\");\r\n    createFile(path(\"/test/filename\"));\r\n    FileStatus status = fs.getFileStatus(path(\"/test\"));\r\n    LOG.info(\"Filesystem is \" + fs + \"; target is \" + status);\r\n    SwiftTestUtils.assertIsDirectory(status);\r\n    BlockLocation[] locations;\r\n    locations = getFs().getFileBlockLocations(status, 0, 1);\r\n    assertEmptyBlockLocations(locations);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testLocateRootDirectory",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testLocateRootDirectory() throws Throwable\n{\r\n    describe(\"verify that locating the root directory is an error\");\r\n    FileStatus status = fs.getFileStatus(path(\"/\"));\r\n    SwiftTestUtils.assertIsDirectory(status);\r\n    BlockLocation[] locations;\r\n    locations = getFs().getFileBlockLocations(status, 0, 1);\r\n    assertEmptyBlockLocations(locations);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testParsePath",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testParsePath() throws Exception\n{\r\n    final String pathString = \"/home/user/files/file1\";\r\n    final Path path = new Path(pathString);\r\n    final URI uri = new URI(\"http://container.localhost\");\r\n    final SwiftObjectPath expected = SwiftObjectPath.fromPath(uri, path);\r\n    final SwiftObjectPath actual = new SwiftObjectPath(RestClientBindings.extractContainerName(uri), pathString);\r\n    assertEquals(expected, actual);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testParseUrlPath",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testParseUrlPath() throws Exception\n{\r\n    final String pathString = \"swift://container.service1/home/user/files/file1\";\r\n    final URI uri = new URI(pathString);\r\n    final Path path = new Path(pathString);\r\n    final SwiftObjectPath expected = SwiftObjectPath.fromPath(uri, path);\r\n    final SwiftObjectPath actual = new SwiftObjectPath(RestClientBindings.extractContainerName(uri), \"/home/user/files/file1\");\r\n    assertEquals(expected, actual);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testHandleUrlAsPath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testHandleUrlAsPath() throws Exception\n{\r\n    final String hostPart = \"swift://container.service1\";\r\n    final String pathPart = \"/home/user/files/file1\";\r\n    final String uriString = hostPart + pathPart;\r\n    final SwiftObjectPath expected = new SwiftObjectPath(uriString, pathPart);\r\n    final SwiftObjectPath actual = new SwiftObjectPath(uriString, uriString);\r\n    assertEquals(expected, actual);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testParseAuthenticatedUrl",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testParseAuthenticatedUrl() throws Exception\n{\r\n    final String pathString = \"swift://container.service1/v2/AUTH_00345h34l93459y4/home/tom/documents/finance.docx\";\r\n    final URI uri = new URI(pathString);\r\n    final Path path = new Path(pathString);\r\n    final SwiftObjectPath expected = SwiftObjectPath.fromPath(uri, path);\r\n    final SwiftObjectPath actual = new SwiftObjectPath(RestClientBindings.extractContainerName(uri), \"/home/tom/documents/finance.docx\");\r\n    assertEquals(expected, actual);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testConvertToPath",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testConvertToPath() throws Throwable\n{\r\n    String initialpath = \"/dir/file1\";\r\n    Path ipath = new Path(initialpath);\r\n    SwiftObjectPath objectPath = SwiftObjectPath.fromPath(new URI(initialpath), ipath);\r\n    URI endpoint = new URI(ENDPOINT);\r\n    URI uri = SwiftRestClient.pathToURI(objectPath, endpoint);\r\n    LOG.info(\"Inital Hadoop Path =\" + initialpath);\r\n    LOG.info(\"Merged URI=\" + uri);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testRootDirProbeEmptyPath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testRootDirProbeEmptyPath() throws Throwable\n{\r\n    SwiftObjectPath object = new SwiftObjectPath(\"container\", \"\");\r\n    assertTrue(SwiftUtils.isRootDir(object));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testRootDirProbeRootPath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testRootDirProbeRootPath() throws Throwable\n{\r\n    SwiftObjectPath object = new SwiftObjectPath(\"container\", \"/\");\r\n    assertTrue(SwiftUtils.isRootDir(object));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "assertParentOf",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void assertParentOf(SwiftObjectPath p1, SwiftObjectPath p2)\n{\r\n    assertTrue(p1.toString() + \" is not a parent of \" + p2, p1.isEqualToOrParentOf(p2));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "assertNotParentOf",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void assertNotParentOf(SwiftObjectPath p1, SwiftObjectPath p2)\n{\r\n    assertFalse(p1.toString() + \" is a parent of \" + p2, p1.isEqualToOrParentOf(p2));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testChildOfProbe",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testChildOfProbe() throws Throwable\n{\r\n    SwiftObjectPath parent = new SwiftObjectPath(\"container\", \"/parent\");\r\n    SwiftObjectPath parent2 = new SwiftObjectPath(\"container\", \"/parent2\");\r\n    SwiftObjectPath child = new SwiftObjectPath(\"container\", \"/parent/child\");\r\n    SwiftObjectPath sibling = new SwiftObjectPath(\"container\", \"/parent/sibling\");\r\n    SwiftObjectPath grandchild = new SwiftObjectPath(\"container\", \"/parent/child/grandchild\");\r\n    assertParentOf(parent, child);\r\n    assertParentOf(parent, grandchild);\r\n    assertParentOf(child, grandchild);\r\n    assertParentOf(parent, parent);\r\n    assertNotParentOf(child, parent);\r\n    assertParentOf(child, child);\r\n    assertNotParentOf(parent, parent2);\r\n    assertNotParentOf(grandchild, parent);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testChildOfRoot",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testChildOfRoot() throws Throwable\n{\r\n    SwiftObjectPath root = new SwiftObjectPath(\"container\", \"/\");\r\n    SwiftObjectPath child = new SwiftObjectPath(\"container\", \"child\");\r\n    SwiftObjectPath grandchild = new SwiftObjectPath(\"container\", \"/child/grandchild\");\r\n    assertParentOf(root, child);\r\n    assertParentOf(root, grandchild);\r\n    assertParentOf(child, grandchild);\r\n    assertParentOf(root, root);\r\n    assertNotParentOf(child, root);\r\n    assertParentOf(child, child);\r\n    assertNotParentOf(grandchild, root);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\contract",
  "methodName" : "createContract",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AbstractFSContract createContract(Configuration conf)\n{\r\n    return new SwiftContract(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "getConf",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Configuration getConf()\n{\r\n    Configuration conf = super.getConf();\r\n    conf.setInt(SwiftProtocolConstants.SWIFT_BLOCKSIZE, SWIFT_READ_BLOCKSIZE);\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    super.setUp();\r\n    byte[] block = SwiftTestUtils.dataset(SEEK_FILE_LEN, 0, 255);\r\n    testPath = path(\"/test\");\r\n    readFile = new Path(testPath, \"TestReadPastBuffer.txt\");\r\n    createFile(readFile, block);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "cleanFile",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void cleanFile()\n{\r\n    IOUtils.closeStream(instream);\r\n    instream = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "createConfiguration",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Configuration createConfiguration()\n{\r\n    Configuration conf = super.createConfiguration();\r\n    conf.set(SwiftProtocolConstants.SWIFT_REQUEST_SIZE, \"1\");\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testSeekAndReadPastEndOfFile",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testSeekAndReadPastEndOfFile() throws Throwable\n{\r\n    instream = fs.open(readFile);\r\n    assertEquals(0, instream.getPos());\r\n    instream.seek(SEEK_FILE_LEN - 2);\r\n    assertTrue(\"Premature EOF\", instream.read() != -1);\r\n    assertTrue(\"Premature EOF\", instream.read() != -1);\r\n    assertMinusOne(\"read past end of file\", instream.read());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testSeekBulkReadPastEndOfFile",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testSeekBulkReadPastEndOfFile() throws Throwable\n{\r\n    instream = fs.open(readFile);\r\n    assertEquals(0, instream.getPos());\r\n    instream.seek(SEEK_FILE_LEN - 1);\r\n    byte[] buffer = new byte[1];\r\n    int result = instream.read(buffer, 0, 1);\r\n    result = instream.read(buffer, 0, 1);\r\n    assertMinusOne(\"read past end of file\", result);\r\n    result = instream.read(buffer, 0, 1);\r\n    assertMinusOne(\"read past end of file\", result);\r\n    result = instream.read(buffer, 0, 0);\r\n    assertEquals(\"EOF checks coming before read range check\", 0, result);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testReadPastBufferSize",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testReadPastBufferSize() throws Throwable\n{\r\n    instream = fs.open(readFile);\r\n    while (instream.read() != -1) ;\r\n    assertMinusOne(\"reading after the (large) file was read: \" + instream, instream.read());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "accept",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean accept(Path file)\n{\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testEmptyUrl",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testEmptyUrl() throws Exception\n{\r\n    final Configuration configuration = new Configuration();\r\n    set(configuration, DOT_TENANT, \"tenant\");\r\n    set(configuration, DOT_USERNAME, \"username\");\r\n    set(configuration, DOT_PASSWORD, \"password\");\r\n    mkInstance(configuration);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testEmptyTenant",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testEmptyTenant() throws Exception\n{\r\n    final Configuration configuration = new Configuration();\r\n    set(configuration, DOT_AUTH_URL, \"http://localhost:8080\");\r\n    set(configuration, DOT_USERNAME, \"username\");\r\n    set(configuration, DOT_PASSWORD, \"password\");\r\n    mkInstance(configuration);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testEmptyUsername",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testEmptyUsername() throws Exception\n{\r\n    final Configuration configuration = new Configuration();\r\n    set(configuration, DOT_AUTH_URL, \"http://localhost:8080\");\r\n    set(configuration, DOT_TENANT, \"tenant\");\r\n    set(configuration, DOT_PASSWORD, \"password\");\r\n    mkInstance(configuration);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testEmptyPassword",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testEmptyPassword() throws Exception\n{\r\n    final Configuration configuration = new Configuration();\r\n    set(configuration, DOT_AUTH_URL, \"http://localhost:8080\");\r\n    set(configuration, DOT_TENANT, \"tenant\");\r\n    set(configuration, DOT_USERNAME, \"username\");\r\n    mkInstance(configuration);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testGoodRetryCount",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testGoodRetryCount() throws Exception\n{\r\n    final Configuration configuration = createCoreConfig();\r\n    configuration.set(SWIFT_RETRY_COUNT, \"3\");\r\n    mkInstance(configuration);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testBadRetryCount",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testBadRetryCount() throws Exception\n{\r\n    final Configuration configuration = createCoreConfig();\r\n    configuration.set(SWIFT_RETRY_COUNT, \"three\");\r\n    mkInstance(configuration);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testBadConnectTimeout",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testBadConnectTimeout() throws Exception\n{\r\n    final Configuration configuration = createCoreConfig();\r\n    configuration.set(SWIFT_CONNECTION_TIMEOUT, \"three\");\r\n    mkInstance(configuration);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testZeroBlocksize",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testZeroBlocksize() throws Exception\n{\r\n    final Configuration configuration = createCoreConfig();\r\n    configuration.set(SWIFT_BLOCKSIZE, \"0\");\r\n    mkInstance(configuration);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testNegativeBlocksize",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testNegativeBlocksize() throws Exception\n{\r\n    final Configuration configuration = createCoreConfig();\r\n    configuration.set(SWIFT_BLOCKSIZE, \"-1\");\r\n    mkInstance(configuration);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testPositiveBlocksize",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testPositiveBlocksize() throws Exception\n{\r\n    final Configuration configuration = createCoreConfig();\r\n    int size = 127;\r\n    configuration.set(SWIFT_BLOCKSIZE, Integer.toString(size));\r\n    SwiftRestClient restClient = mkInstance(configuration);\r\n    assertEquals(size, restClient.getBlocksizeKB());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testLocationAwareTruePropagates",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testLocationAwareTruePropagates() throws Exception\n{\r\n    final Configuration configuration = createCoreConfig();\r\n    set(configuration, DOT_LOCATION_AWARE, \"true\");\r\n    SwiftRestClient restClient = mkInstance(configuration);\r\n    assertTrue(restClient.isLocationAware());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testLocationAwareFalsePropagates",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testLocationAwareFalsePropagates() throws Exception\n{\r\n    final Configuration configuration = createCoreConfig();\r\n    set(configuration, DOT_LOCATION_AWARE, \"false\");\r\n    SwiftRestClient restClient = mkInstance(configuration);\r\n    assertFalse(restClient.isLocationAware());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testNegativePartsize",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testNegativePartsize() throws Exception\n{\r\n    final Configuration configuration = createCoreConfig();\r\n    configuration.set(SWIFT_PARTITION_SIZE, \"-1\");\r\n    SwiftRestClient restClient = mkInstance(configuration);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testPositivePartsize",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testPositivePartsize() throws Exception\n{\r\n    final Configuration configuration = createCoreConfig();\r\n    int size = 127;\r\n    configuration.set(SWIFT_PARTITION_SIZE, Integer.toString(size));\r\n    SwiftRestClient restClient = mkInstance(configuration);\r\n    assertEquals(size, restClient.getPartSizeKB());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testProxyData",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testProxyData() throws Exception\n{\r\n    final Configuration configuration = createCoreConfig();\r\n    String proxy = \"web-proxy\";\r\n    int port = 8088;\r\n    configuration.set(SWIFT_PROXY_HOST_PROPERTY, proxy);\r\n    configuration.set(SWIFT_PROXY_PORT_PROPERTY, Integer.toString(port));\r\n    SwiftRestClient restClient = mkInstance(configuration);\r\n    assertEquals(proxy, restClient.getProxyHost());\r\n    assertEquals(port, restClient.getProxyPort());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "createCoreConfig",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Configuration createCoreConfig()\n{\r\n    final Configuration configuration = new Configuration();\r\n    set(configuration, DOT_AUTH_URL, \"http://localhost:8080\");\r\n    set(configuration, DOT_TENANT, \"tenant\");\r\n    set(configuration, DOT_USERNAME, \"username\");\r\n    set(configuration, DOT_PASSWORD, \"password\");\r\n    return configuration;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "set",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void set(Configuration configuration, String field, String value)\n{\r\n    configuration.set(SWIFT_SERVICE_PREFIX + SERVICE + field, value);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "mkInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SwiftRestClient mkInstance(Configuration configuration) throws IOException, URISyntaxException\n{\r\n    URI uri = new URI(\"swift://container.openstack/\");\r\n    return SwiftRestClient.getInstance(uri, configuration);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setup() throws IOException\n{\r\n    conf = new Configuration();\r\n    runTests = SwiftTestUtils.hasServiceURI(conf);\r\n    if (runTests) {\r\n        serviceURI = SwiftTestUtils.getServiceURI(conf);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "assumeEnabled",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void assumeEnabled()\n{\r\n    Assume.assumeTrue(runTests);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "testCreate",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testCreate() throws Throwable\n{\r\n    assumeEnabled();\r\n    SwiftRestClient client = createClient();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "createClient",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SwiftRestClient createClient() throws IOException\n{\r\n    return SwiftRestClient.getInstance(serviceURI, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "testAuthenticate",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testAuthenticate() throws Throwable\n{\r\n    assumeEnabled();\r\n    SwiftRestClient client = createClient();\r\n    client.authenticate();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "testPutAndDelete",
  "errType" : [ "FileNotFoundException" ],
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testPutAndDelete() throws Throwable\n{\r\n    assumeEnabled();\r\n    SwiftRestClient client = createClient();\r\n    client.authenticate();\r\n    Path path = new Path(\"restTestPutAndDelete\");\r\n    SwiftObjectPath sobject = SwiftObjectPath.fromPath(serviceURI, path);\r\n    byte[] stuff = new byte[1];\r\n    stuff[0] = 'a';\r\n    client.upload(sobject, new ByteArrayInputStream(stuff), stuff.length);\r\n    Duration head = new Duration();\r\n    Header[] responseHeaders = client.headRequest(\"expect success\", sobject, SwiftRestClient.NEWEST);\r\n    head.finished();\r\n    LOG.info(\"head request duration \" + head);\r\n    for (Header header : responseHeaders) {\r\n        LOG.info(header.toString());\r\n    }\r\n    client.delete(sobject);\r\n    try {\r\n        Header[] headers = client.headRequest(\"expect fail\", sobject, SwiftRestClient.NEWEST);\r\n        Assert.fail(\"Expected deleted file, but object is still present: \" + sobject);\r\n    } catch (FileNotFoundException e) {\r\n    }\r\n    for (DurationStats stats : client.getOperationStatistics()) {\r\n        LOG.info(stats.toString());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "createConfiguration",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Configuration createConfiguration()\n{\r\n    Configuration conf = super.createConfiguration();\r\n    conf.setInt(SwiftProtocolConstants.SWIFT_PARTITION_SIZE, PART_SIZE);\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testPartitionPropertyPropagatesToConf",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testPartitionPropertyPropagatesToConf() throws Throwable\n{\r\n    assertEquals(1, getConf().getInt(SwiftProtocolConstants.SWIFT_PARTITION_SIZE, 0));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testPartionPropertyPropagatesToStore",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testPartionPropertyPropagatesToStore() throws Throwable\n{\r\n    assertEquals(1, fs.getStore().getPartsizeKB());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testFilePartUpload",
  "errType" : [ "AssertionError" ],
  "containingMethodsNum" : 26,
  "sourceCodeText" : "void testFilePartUpload() throws Throwable\n{\r\n    final Path path = new Path(\"/test/testFilePartUpload\");\r\n    int len = 8192;\r\n    final byte[] src = SwiftTestUtils.dataset(len, 32, 144);\r\n    FSDataOutputStream out = fs.create(path, false, getBufferSize(), (short) 1, BLOCK_SIZE);\r\n    try {\r\n        int totalPartitionsToWrite = len / PART_SIZE_BYTES;\r\n        assertPartitionsWritten(\"Startup\", out, 0);\r\n        int firstWriteLen = 2048;\r\n        out.write(src, 0, firstWriteLen);\r\n        long expected = getExpectedPartitionsWritten(firstWriteLen, PART_SIZE_BYTES, false);\r\n        SwiftUtils.debug(LOG, \"First write: predict %d partitions written\", expected);\r\n        assertPartitionsWritten(\"First write completed\", out, expected);\r\n        int remainder = len - firstWriteLen;\r\n        SwiftUtils.debug(LOG, \"remainder: writing: %d bytes\", remainder);\r\n        out.write(src, firstWriteLen, remainder);\r\n        expected = getExpectedPartitionsWritten(len, PART_SIZE_BYTES, false);\r\n        assertPartitionsWritten(\"Remaining data\", out, expected);\r\n        out.close();\r\n        expected = getExpectedPartitionsWritten(len, PART_SIZE_BYTES, true);\r\n        assertPartitionsWritten(\"Stream closed\", out, expected);\r\n        Header[] headers = fs.getStore().getObjectHeaders(path, true);\r\n        for (Header header : headers) {\r\n            LOG.info(header.toString());\r\n        }\r\n        byte[] dest = readDataset(fs, path, len);\r\n        LOG.info(\"Read dataset from \" + path + \": data length =\" + len);\r\n        SwiftTestUtils.compareByteArrays(src, dest, len);\r\n        FileStatus status;\r\n        final Path qualifiedPath = fs.makeQualified(path);\r\n        status = fs.getFileStatus(qualifiedPath);\r\n        BlockLocation[] locations = fs.getFileBlockLocations(status, 0, len);\r\n        assertNotNull(\"Null getFileBlockLocations()\", locations);\r\n        assertTrue(\"empty array returned for getFileBlockLocations()\", locations.length > 0);\r\n        try {\r\n            validatePathLen(path, len);\r\n        } catch (AssertionError e) {\r\n            throw new AssumptionViolatedException(e, null);\r\n        }\r\n    } finally {\r\n        IOUtils.closeStream(out);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testFilePartUploadNoLengthCheck",
  "errType" : null,
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void testFilePartUploadNoLengthCheck() throws IOException, URISyntaxException\n{\r\n    final Path path = new Path(\"/test/testFilePartUploadLengthCheck\");\r\n    int len = 8192;\r\n    final byte[] src = SwiftTestUtils.dataset(len, 32, 144);\r\n    FSDataOutputStream out = fs.create(path, false, getBufferSize(), (short) 1, BLOCK_SIZE);\r\n    try {\r\n        int totalPartitionsToWrite = len / PART_SIZE_BYTES;\r\n        assertPartitionsWritten(\"Startup\", out, 0);\r\n        int firstWriteLen = 2048;\r\n        out.write(src, 0, firstWriteLen);\r\n        long expected = getExpectedPartitionsWritten(firstWriteLen, PART_SIZE_BYTES, false);\r\n        SwiftUtils.debug(LOG, \"First write: predict %d partitions written\", expected);\r\n        assertPartitionsWritten(\"First write completed\", out, expected);\r\n        int remainder = len - firstWriteLen;\r\n        SwiftUtils.debug(LOG, \"remainder: writing: %d bytes\", remainder);\r\n        out.write(src, firstWriteLen, remainder);\r\n        expected = getExpectedPartitionsWritten(len, PART_SIZE_BYTES, false);\r\n        assertPartitionsWritten(\"Remaining data\", out, expected);\r\n        out.close();\r\n        expected = getExpectedPartitionsWritten(len, PART_SIZE_BYTES, true);\r\n        assertPartitionsWritten(\"Stream closed\", out, expected);\r\n        Header[] headers = fs.getStore().getObjectHeaders(path, true);\r\n        for (Header header : headers) {\r\n            LOG.info(header.toString());\r\n        }\r\n        byte[] dest = readDataset(fs, path, len);\r\n        LOG.info(\"Read dataset from \" + path + \": data length =\" + len);\r\n        SwiftTestUtils.compareByteArrays(src, dest, len);\r\n        FileStatus status = fs.getFileStatus(path);\r\n        BlockLocation[] locations = fs.getFileBlockLocations(status, 0, len);\r\n        assertNotNull(\"Null getFileBlockLocations()\", locations);\r\n        assertTrue(\"empty array returned for getFileBlockLocations()\", locations.length > 0);\r\n    } finally {\r\n        IOUtils.closeStream(out);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "validatePathLen",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "FileStatus validatePathLen(Path path, int len) throws IOException\n{\r\n    final Path qualifiedPath = fs.makeQualified(path);\r\n    FileStatus[] parentDirListing = fs.listStatus(qualifiedPath.getParent());\r\n    StringBuilder listing = lsToString(parentDirListing);\r\n    String parentDirLS = listing.toString();\r\n    FileStatus status = fs.getFileStatus(qualifiedPath);\r\n    assertEquals(\"Length of written file \" + qualifiedPath + \" from status check \" + status + \" in dir \" + listing, len, status.getLen());\r\n    String fileInfo = qualifiedPath + \"  \" + status;\r\n    assertFalse(\"File claims to be a directory \" + fileInfo, status.isDirectory());\r\n    FileStatus listedFileStat = resolveChild(parentDirListing, qualifiedPath);\r\n    assertNotNull(\"Did not find \" + path + \" in \" + parentDirLS, listedFileStat);\r\n    assertEquals(\"Wrong len for \" + path + \" in listing \" + parentDirLS, len, listedFileStat.getLen());\r\n    listedFileStat.toString();\r\n    return status;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "resolveChild",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FileStatus resolveChild(FileStatus[] parentDirListing, Path childPath)\n{\r\n    FileStatus listedFileStat = null;\r\n    for (FileStatus stat : parentDirListing) {\r\n        if (stat.getPath().equals(childPath)) {\r\n            listedFileStat = stat;\r\n        }\r\n    }\r\n    return listedFileStat;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "lsToString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "StringBuilder lsToString(FileStatus[] parentDirListing)\n{\r\n    StringBuilder listing = new StringBuilder();\r\n    for (FileStatus stat : parentDirListing) {\r\n        listing.append(stat).append(\"\\n\");\r\n    }\r\n    return listing;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "getExpectedPartitionsWritten",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getExpectedPartitionsWritten(long uploaded, int partSizeBytes, boolean closed)\n{\r\n    int partitions = (int) (uploaded / partSizeBytes);\r\n    int remainder = (int) (uploaded % partSizeBytes);\r\n    if (closed) {\r\n        return partitions + ((remainder > 0) ? 1 : 0);\r\n    } else {\r\n        return partitions;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "getBufferSize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getBufferSize()\n{\r\n    return fs.getConf().getInt(\"io.file.buffer.size\", 4096);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testManyPartitionedFile",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testManyPartitionedFile() throws Throwable\n{\r\n    final Path path = new Path(\"/test/testManyPartitionedFile\");\r\n    int len = PART_SIZE_BYTES * 15;\r\n    final byte[] src = SwiftTestUtils.dataset(len, 32, 144);\r\n    FSDataOutputStream out = fs.create(path, false, getBufferSize(), (short) 1, BLOCK_SIZE);\r\n    out.write(src, 0, src.length);\r\n    int expected = getExpectedPartitionsWritten(len, PART_SIZE_BYTES, true);\r\n    out.close();\r\n    assertPartitionsWritten(\"write completed\", out, expected);\r\n    assertEquals(\"too few bytes written\", len, SwiftNativeFileSystem.getBytesWritten(out));\r\n    assertEquals(\"too few bytes uploaded\", len, SwiftNativeFileSystem.getBytesUploaded(out));\r\n    byte[] dest = readDataset(fs, path, len);\r\n    SwiftTestUtils.compareByteArrays(src, dest, len);\r\n    FileStatus[] stats = fs.listStatus(path);\r\n    assertEquals(\"wrong entry count in \" + SwiftTestUtils.dumpStats(path.toString(), stats), expected, stats.length);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testOverwritePartitionedFile",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testOverwritePartitionedFile() throws Throwable\n{\r\n    final Path path = new Path(\"/test/testOverwritePartitionedFile\");\r\n    final int len1 = 8192;\r\n    final byte[] src1 = SwiftTestUtils.dataset(len1, 'A', 'Z');\r\n    FSDataOutputStream out = fs.create(path, false, getBufferSize(), (short) 1, 1024);\r\n    out.write(src1, 0, len1);\r\n    out.close();\r\n    long expected = getExpectedPartitionsWritten(len1, PART_SIZE_BYTES, false);\r\n    assertPartitionsWritten(\"initial upload\", out, expected);\r\n    assertExists(\"Exists\", path);\r\n    FileStatus status = fs.getFileStatus(path);\r\n    assertEquals(\"Length\", len1, status.getLen());\r\n    final int len2 = 4095;\r\n    final byte[] src2 = SwiftTestUtils.dataset(len2, 'a', 'z');\r\n    out = fs.create(path, true, getBufferSize(), (short) 1, 1024);\r\n    out.write(src2, 0, len2);\r\n    out.close();\r\n    status = fs.getFileStatus(path);\r\n    assertEquals(\"Length\", len2, status.getLen());\r\n    byte[] dest = readDataset(fs, path, len2);\r\n    SwiftTestUtils.compareByteArrays(src2, dest, len2);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testDeleteSmallPartitionedFile",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testDeleteSmallPartitionedFile() throws Throwable\n{\r\n    final Path path = new Path(\"/test/testDeleteSmallPartitionedFile\");\r\n    final int len1 = 1024;\r\n    final byte[] src1 = SwiftTestUtils.dataset(len1, 'A', 'Z');\r\n    SwiftTestUtils.writeDataset(fs, path, src1, len1, 1024, false);\r\n    assertExists(\"Exists\", path);\r\n    Path part_0001 = new Path(path, SwiftUtils.partitionFilenameFromNumber(1));\r\n    Path part_0002 = new Path(path, SwiftUtils.partitionFilenameFromNumber(2));\r\n    String ls = SwiftTestUtils.ls(fs, path);\r\n    assertExists(\"Partition 0001 Exists in \" + ls, part_0001);\r\n    assertPathDoesNotExist(\"partition 0002 found under \" + ls, part_0002);\r\n    assertExists(\"Partition 0002 Exists in \" + ls, part_0001);\r\n    fs.delete(path, false);\r\n    assertPathDoesNotExist(\"deleted file still there\", path);\r\n    ls = SwiftTestUtils.ls(fs, path);\r\n    assertPathDoesNotExist(\"partition 0001 file still under \" + ls, part_0001);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testDeletePartitionedFile",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testDeletePartitionedFile() throws Throwable\n{\r\n    final Path path = new Path(\"/test/testDeletePartitionedFile\");\r\n    SwiftTestUtils.writeDataset(fs, path, data, data.length, 1024, false);\r\n    assertExists(\"Exists\", path);\r\n    Path part_0001 = new Path(path, SwiftUtils.partitionFilenameFromNumber(1));\r\n    Path part_0002 = new Path(path, SwiftUtils.partitionFilenameFromNumber(2));\r\n    String ls = SwiftTestUtils.ls(fs, path);\r\n    assertExists(\"Partition 0001 Exists in \" + ls, part_0001);\r\n    assertExists(\"Partition 0002 Exists in \" + ls, part_0001);\r\n    fs.delete(path, false);\r\n    assertPathDoesNotExist(\"deleted file still there\", path);\r\n    ls = SwiftTestUtils.ls(fs, path);\r\n    assertPathDoesNotExist(\"partition 0001 file still under \" + ls, part_0001);\r\n    assertPathDoesNotExist(\"partition 0002 file still under \" + ls, part_0002);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testRenamePartitionedFile",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testRenamePartitionedFile() throws Throwable\n{\r\n    Path src = new Path(\"/test/testRenamePartitionedFileSrc\");\r\n    int len = data.length;\r\n    SwiftTestUtils.writeDataset(fs, src, data, len, 1024, false);\r\n    assertExists(\"Exists\", src);\r\n    String partOneName = SwiftUtils.partitionFilenameFromNumber(1);\r\n    Path srcPart = new Path(src, partOneName);\r\n    Path dest = new Path(\"/test/testRenamePartitionedFileDest\");\r\n    Path destPart = new Path(src, partOneName);\r\n    assertExists(\"Partition Exists\", srcPart);\r\n    fs.rename(src, dest);\r\n    assertPathExists(fs, \"dest file missing\", dest);\r\n    FileStatus status = fs.getFileStatus(dest);\r\n    assertEquals(\"Length of renamed file is wrong\", len, status.getLen());\r\n    byte[] destData = readDataset(fs, dest, len);\r\n    SwiftTestUtils.compareByteArrays(data, destData, len);\r\n    String srcLs = SwiftTestUtils.ls(fs, src);\r\n    String destLs = SwiftTestUtils.ls(fs, dest);\r\n    assertPathDoesNotExist(\"deleted file still found in \" + srcLs, src);\r\n    assertPathDoesNotExist(\"partition file still found in \" + srcLs, srcPart);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "printf",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void printf(String format, Object... args)\n{\r\n    String msg = String.format(format, args);\r\n    System.out.printf(msg + \"\\n\");\r\n    LOG.info(msg);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testWhichLog4JPropsFile",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testWhichLog4JPropsFile() throws Throwable\n{\r\n    locateResource(\"log4j.properties\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testWhichLog4JXMLFile",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testWhichLog4JXMLFile() throws Throwable\n{\r\n    locateResource(\"log4j.XML\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testCommonsLoggingProps",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testCommonsLoggingProps() throws Throwable\n{\r\n    locateResource(\"commons-logging.properties\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "locateResource",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void locateResource(String resource)\n{\r\n    URL url = this.getClass().getClassLoader().getResource(resource);\r\n    if (url != null) {\r\n        printf(\"resource %s is at %s\", resource, url);\r\n    } else {\r\n        printf(\"resource %s is not on the classpath\", resource);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\contract",
  "methodName" : "createContract",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AbstractFSContract createContract(Configuration conf)\n{\r\n    return new SwiftContract(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\contract",
  "methodName" : "testOverwriteEmptyDirectory",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testOverwriteEmptyDirectory() throws Throwable\n{\r\n    ContractTestUtils.skip(\"blobstores can't distinguish empty directories from files\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testDeleteEmptyFile",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testDeleteEmptyFile() throws IOException\n{\r\n    final Path file = new Path(\"/test/testDeleteEmptyFile\");\r\n    createEmptyFile(file);\r\n    SwiftTestUtils.noteAction(\"about to delete\");\r\n    assertDeleted(file, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testDeleteEmptyFileTwice",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testDeleteEmptyFileTwice() throws IOException\n{\r\n    final Path file = new Path(\"/test/testDeleteEmptyFileTwice\");\r\n    createEmptyFile(file);\r\n    assertDeleted(file, true);\r\n    SwiftTestUtils.noteAction(\"multiple creates, and deletes\");\r\n    assertFalse(\"Delete returned true\", fs.delete(file, false));\r\n    createEmptyFile(file);\r\n    assertDeleted(file, true);\r\n    assertFalse(\"Delete returned true\", fs.delete(file, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testDeleteNonEmptyFile",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testDeleteNonEmptyFile() throws IOException\n{\r\n    final Path file = new Path(\"/test/testDeleteNonEmptyFile\");\r\n    createFile(file);\r\n    assertDeleted(file, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testDeleteNonEmptyFileTwice",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testDeleteNonEmptyFileTwice() throws IOException\n{\r\n    final Path file = new Path(\"/test/testDeleteNonEmptyFileTwice\");\r\n    createFile(file);\r\n    assertDeleted(file, true);\r\n    assertFalse(\"Delete returned true\", fs.delete(file, false));\r\n    createFile(file);\r\n    assertDeleted(file, true);\r\n    assertFalse(\"Delete returned true\", fs.delete(file, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testDeleteTestDir",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testDeleteTestDir() throws IOException\n{\r\n    final Path file = new Path(\"/test/\");\r\n    fs.delete(file, true);\r\n    assertPathDoesNotExist(\"Test dir found\", file);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testRmRootDirRecursiveIsForbidden",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testRmRootDirRecursiveIsForbidden() throws Throwable\n{\r\n    Path root = path(\"/\");\r\n    Path testFile = path(\"/test\");\r\n    createFile(testFile);\r\n    assertTrue(\"rm(/) returned false\", fs.delete(root, true));\r\n    assertExists(\"Root dir is missing\", root);\r\n    assertPathDoesNotExist(\"test file not deleted\", testFile);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    super.setUp();\r\n    Path test = path(\"/test\");\r\n    fs.delete(test, true);\r\n    mkdirs(test);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "createTestSubdirs",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void createTestSubdirs() throws IOException\n{\r\n    testDirs = new Path[] { path(\"/test/hadoop/a\"), path(\"/test/hadoop/b\"), path(\"/test/hadoop/c/1\") };\r\n    assertPathDoesNotExist(\"test directory setup\", testDirs[0]);\r\n    for (Path path : testDirs) {\r\n        mkdirs(path);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testListLevelTest",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testListLevelTest() throws Exception\n{\r\n    createTestSubdirs();\r\n    FileStatus[] paths = fs.listStatus(path(\"/test\"));\r\n    assertEquals(dumpStats(\"/test\", paths), 1, paths.length);\r\n    assertEquals(path(\"/test/hadoop\"), paths[0].getPath());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testListLevelTestHadoop",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testListLevelTestHadoop() throws Exception\n{\r\n    createTestSubdirs();\r\n    FileStatus[] paths;\r\n    paths = fs.listStatus(path(\"/test/hadoop\"));\r\n    String stats = dumpStats(\"/test/hadoop\", paths);\r\n    assertEquals(\"Paths.length wrong in \" + stats, 3, paths.length);\r\n    assertEquals(\"Path element[0] wrong: \" + stats, path(\"/test/hadoop/a\"), paths[0].getPath());\r\n    assertEquals(\"Path element[1] wrong: \" + stats, path(\"/test/hadoop/b\"), paths[1].getPath());\r\n    assertEquals(\"Path element[2] wrong: \" + stats, path(\"/test/hadoop/c\"), paths[2].getPath());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testListStatusEmptyDirectory",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testListStatusEmptyDirectory() throws Exception\n{\r\n    createTestSubdirs();\r\n    FileStatus[] paths;\r\n    paths = fs.listStatus(path(\"/test/hadoop/a\"));\r\n    assertEquals(dumpStats(\"/test/hadoop/a\", paths), 0, paths.length);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testListStatusFile",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testListStatusFile() throws Exception\n{\r\n    describe(\"Create a single file under /test;\" + \" assert that listStatus(/test) finds it\");\r\n    Path file = path(\"/test/filename\");\r\n    createFile(file);\r\n    FileStatus[] pathStats = fs.listStatus(file);\r\n    assertEquals(dumpStats(\"/test/\", pathStats), 1, pathStats.length);\r\n    FileStatus lsStat = pathStats[0];\r\n    assertEquals(\"Wrong file len in listing of \" + lsStat, data.length, lsStat.getLen());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testListEmptyRoot",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testListEmptyRoot() throws Throwable\n{\r\n    describe(\"Empty the root dir and verify that an LS / returns {}\");\r\n    cleanup(\"testListEmptyRoot\", fs, \"/test\");\r\n    cleanup(\"testListEmptyRoot\", fs, \"/user\");\r\n    FileStatus[] fileStatuses = fs.listStatus(path(\"/\"));\r\n    assertEquals(\"Non-empty root\" + dumpStats(\"/\", fileStatuses), 0, fileStatuses.length);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testListNonEmptyRoot",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testListNonEmptyRoot() throws Throwable\n{\r\n    Path test = path(\"/test\");\r\n    touch(fs, test);\r\n    FileStatus[] fileStatuses = fs.listStatus(path(\"/\"));\r\n    String stats = dumpStats(\"/\", fileStatuses);\r\n    assertEquals(\"Wrong #of root children\" + stats, 1, fileStatuses.length);\r\n    FileStatus status = fileStatuses[0];\r\n    assertEquals(\"Wrong path value\" + stats, test, status.getPath());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testListStatusRootDir",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testListStatusRootDir() throws Throwable\n{\r\n    Path dir = path(\"/\");\r\n    Path child = path(\"/test\");\r\n    touch(fs, child);\r\n    assertListStatusFinds(fs, dir, child);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testListStatusFiltered",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testListStatusFiltered() throws Throwable\n{\r\n    Path dir = path(\"/\");\r\n    Path child = path(\"/test\");\r\n    touch(fs, child);\r\n    FileStatus[] stats = fs.listStatus(dir, new AcceptAllFilter());\r\n    boolean found = false;\r\n    StringBuilder builder = new StringBuilder();\r\n    for (FileStatus stat : stats) {\r\n        builder.append(stat.toString()).append('\\n');\r\n        if (stat.getPath().equals(child)) {\r\n            found = true;\r\n        }\r\n    }\r\n    assertTrue(\"Path \" + child + \" not found in directory \" + dir + \":\" + builder, found);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setup() throws URISyntaxException\n{\r\n    filesysURI = new URI(FS_URI);\r\n    conf = new Configuration(true);\r\n    setInstanceVal(conf, SERVICE, DOT_AUTH_URL, AUTH_URL);\r\n    setInstanceVal(conf, SERVICE, DOT_USERNAME, USER);\r\n    setInstanceVal(conf, SERVICE, DOT_PASSWORD, PASS);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "setInstanceVal",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setInstanceVal(Configuration conf, String host, String key, String val)\n{\r\n    String instance = RestClientBindings.buildSwiftInstancePrefix(host);\r\n    String confkey = instance + key;\r\n    conf.set(confkey, val);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "testPrefixBuilder",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testPrefixBuilder() throws Throwable\n{\r\n    String built = RestClientBindings.buildSwiftInstancePrefix(SERVICE);\r\n    assertEquals(\"fs.swift.service.\" + SERVICE, built);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "testBindAgainstConf",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testBindAgainstConf() throws Exception\n{\r\n    Properties props = RestClientBindings.bind(filesysURI, conf);\r\n    assertPropertyEquals(props, SWIFT_CONTAINER_PROPERTY, CONTAINER);\r\n    assertPropertyEquals(props, SWIFT_SERVICE_PROPERTY, SERVICE);\r\n    assertPropertyEquals(props, SWIFT_AUTH_PROPERTY, AUTH_URL);\r\n    assertPropertyEquals(props, SWIFT_AUTH_PROPERTY, AUTH_URL);\r\n    assertPropertyEquals(props, SWIFT_USERNAME_PROPERTY, USER);\r\n    assertPropertyEquals(props, SWIFT_PASSWORD_PROPERTY, PASS);\r\n    assertPropertyEquals(props, SWIFT_TENANT_PROPERTY, null);\r\n    assertPropertyEquals(props, SWIFT_REGION_PROPERTY, null);\r\n    assertPropertyEquals(props, SWIFT_HTTP_PORT_PROPERTY, null);\r\n    assertPropertyEquals(props, SWIFT_HTTPS_PORT_PROPERTY, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "expectBindingFailure",
  "errType" : [ "SwiftConfigurationException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void expectBindingFailure(URI fsURI, Configuration config)\n{\r\n    try {\r\n        Properties binding = RestClientBindings.bind(fsURI, config);\r\n        StringBuilder details = new StringBuilder();\r\n        for (Object key : binding.keySet()) {\r\n            details.append(key.toString()).append(\" \");\r\n        }\r\n        fail(\"Expected a failure, got the binding [ \" + details + \"]\");\r\n    } catch (SwiftConfigurationException expected) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "testBindAgainstConfMissingInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testBindAgainstConfMissingInstance() throws Exception\n{\r\n    Configuration badConf = new Configuration();\r\n    expectBindingFailure(filesysURI, badConf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "testDottedServiceURL",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testDottedServiceURL() throws Exception\n{\r\n    RestClientBindings.bind(new URI(\"swift://hadoop.apache.org/\"), conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "testMissingServiceURL",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testMissingServiceURL() throws Exception\n{\r\n    RestClientBindings.bind(new URI(\"swift:///\"), conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "expectExtractContainerFail",
  "errType" : [ "SwiftConfigurationException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void expectExtractContainerFail(String hostname)\n{\r\n    try {\r\n        String container = RestClientBindings.extractContainerName(hostname);\r\n        fail(\"Expected an error -got a container of '\" + container + \"' from \" + hostname);\r\n    } catch (SwiftConfigurationException expected) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "expectExtractServiceFail",
  "errType" : [ "SwiftConfigurationException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void expectExtractServiceFail(String hostname)\n{\r\n    try {\r\n        String service = RestClientBindings.extractServiceName(hostname);\r\n        fail(\"Expected an error -got a service of '\" + service + \"' from \" + hostname);\r\n    } catch (SwiftConfigurationException expected) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "testEmptyHostname",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testEmptyHostname() throws Throwable\n{\r\n    expectExtractContainerFail(\"\");\r\n    expectExtractServiceFail(\"\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "testDot",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testDot() throws Throwable\n{\r\n    expectExtractContainerFail(\".\");\r\n    expectExtractServiceFail(\".\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "testSimple",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testSimple() throws Throwable\n{\r\n    expectExtractContainerFail(\"simple\");\r\n    expectExtractServiceFail(\"simple\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "testTrailingDot",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testTrailingDot() throws Throwable\n{\r\n    expectExtractServiceFail(\"simple.\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "testLeadingDot",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testLeadingDot() throws Throwable\n{\r\n    expectExtractServiceFail(\".leading\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\contract",
  "methodName" : "createContract",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AbstractFSContract createContract(Configuration conf)\n{\r\n    return new SwiftContract(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\contract",
  "methodName" : "testOpenReadDir",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testOpenReadDir() throws Throwable\n{\r\n    ContractTestUtils.skip(\"Skipping object-store quirk\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\contract",
  "methodName" : "testOpenReadDirWithChild",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testOpenReadDirWithChild() throws Throwable\n{\r\n    ContractTestUtils.skip(\"Skipping object-store quirk\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\scale",
  "methodName" : "getOperationCount",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getOperationCount()\n{\r\n    return getConf().getLong(KEY_OPERATION_COUNT, DEFAULT_OPERATION_COUNT);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testOverRead",
  "errType" : [ "EOFException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testOverRead() throws IOException\n{\r\n    final String message = \"message\";\r\n    final Path filePath = new Path(\"/test/file.txt\");\r\n    writeTextFile(fs, filePath, message, false);\r\n    try {\r\n        readBytesToString(fs, filePath, 20);\r\n        fail(\"expected an exception\");\r\n    } catch (EOFException e) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testRWJson",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testRWJson() throws IOException\n{\r\n    final String message = \"{\" + \" 'json': { 'i':43, 'b':true},\" + \" 's':'string'\" + \"}\";\r\n    final Path filePath = new Path(\"/test/file.json\");\r\n    writeTextFile(fs, filePath, message, false);\r\n    String readJson = readBytesToString(fs, filePath, message.length());\r\n    assertEquals(message, readJson);\r\n    FileStatus status = fs.getFileStatus(filePath);\r\n    BlockLocation[] locations = fs.getFileBlockLocations(status, 0, 10);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testRWXML",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testRWXML() throws IOException\n{\r\n    final String message = \"<x>\" + \" <json i='43' 'b'=true/>\" + \" string\" + \"</x>\";\r\n    final Path filePath = new Path(\"/test/file.xml\");\r\n    writeTextFile(fs, filePath, message, false);\r\n    String read = readBytesToString(fs, filePath, message.length());\r\n    assertEquals(message, read);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\hdfs2",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    super.setUp();\r\n    Path test = path(\"/test\");\r\n    fs.delete(test, true);\r\n    mkdirs(test);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\hdfs2",
  "methodName" : "createTestSubdirs",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void createTestSubdirs() throws IOException\n{\r\n    testDirs = new Path[] { path(\"/test/hadoop/a\"), path(\"/test/hadoop/b\"), path(\"/test/hadoop/c/1\") };\r\n    assertPathDoesNotExist(\"test directory setup\", testDirs[0]);\r\n    for (Path path : testDirs) {\r\n        mkdirs(path);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\hdfs2",
  "methodName" : "assertListFilesFinds",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void assertListFilesFinds(FileSystem fs, Path dir, Path subdir, boolean recursive) throws IOException\n{\r\n    RemoteIterator<LocatedFileStatus> iterator = fs.listFiles(dir, recursive);\r\n    boolean found = false;\r\n    int entries = 0;\r\n    StringBuilder builder = new StringBuilder();\r\n    while (iterator.hasNext()) {\r\n        LocatedFileStatus next = iterator.next();\r\n        entries++;\r\n        builder.append(next.toString()).append('\\n');\r\n        if (next.getPath().equals(subdir)) {\r\n            found = true;\r\n        }\r\n    }\r\n    assertTrue(\"Path \" + subdir + \" not found in directory \" + dir + \" : \" + \" entries=\" + entries + \" content\" + builder.toString(), found);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\hdfs2",
  "methodName" : "testListFilesRootDir",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testListFilesRootDir() throws Throwable\n{\r\n    Path dir = path(\"/\");\r\n    Path child = new Path(dir, \"test\");\r\n    fs.delete(child, true);\r\n    SwiftTestUtils.writeTextFile(fs, child, \"text\", false);\r\n    assertListFilesFinds(fs, dir, child, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\hdfs2",
  "methodName" : "testListFilesSubDir",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testListFilesSubDir() throws Throwable\n{\r\n    createTestSubdirs();\r\n    Path dir = path(\"/test/subdir\");\r\n    Path child = new Path(dir, \"text.txt\");\r\n    SwiftTestUtils.writeTextFile(fs, child, \"text\", false);\r\n    assertListFilesFinds(fs, dir, child, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\hdfs2",
  "methodName" : "testListFilesRecursive",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testListFilesRecursive() throws Throwable\n{\r\n    createTestSubdirs();\r\n    Path dir = path(\"/test/recursive\");\r\n    Path child = new Path(dir, \"hadoop/a/a.txt\");\r\n    SwiftTestUtils.writeTextFile(fs, child, \"text\", false);\r\n    assertListFilesFinds(fs, dir, child, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testDefaultBlocksizeNonZero",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testDefaultBlocksizeNonZero() throws Throwable\n{\r\n    assertTrue(\"Zero default blocksize\", 0L != getFs().getDefaultBlockSize());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testDefaultBlocksizeRootPathNonZero",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testDefaultBlocksizeRootPathNonZero() throws Throwable\n{\r\n    assertTrue(\"Zero default blocksize\", 0L != getFs().getDefaultBlockSize(new Path(\"/\")));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testDefaultBlocksizeOtherPathNonZero",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testDefaultBlocksizeOtherPathNonZero() throws Throwable\n{\r\n    assertTrue(\"Zero default blocksize\", 0L != getFs().getDefaultBlockSize(new Path(\"/test\")));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testBlocksizeNonZeroForFile",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testBlocksizeNonZeroForFile() throws Throwable\n{\r\n    Path smallfile = new Path(\"/test/smallfile\");\r\n    SwiftTestUtils.writeTextFile(fs, smallfile, \"blocksize\", true);\r\n    createFile(smallfile);\r\n    FileStatus status = getFs().getFileStatus(smallfile);\r\n    assertTrue(\"Zero blocksize in \" + status, status.getBlockSize() != 0L);\r\n    assertTrue(\"Zero replication in \" + status, status.getReplication() != 0L);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "setUp",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    noteAction(\"setup\");\r\n    final URI uri = getFilesystemURI();\r\n    conf = createConfiguration();\r\n    fs = createSwiftFS();\r\n    try {\r\n        fs.initialize(uri, conf);\r\n    } catch (IOException e) {\r\n        fs = null;\r\n        throw e;\r\n    }\r\n    lastFs = fs;\r\n    noteAction(\"setup complete\");\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "createConfiguration",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Configuration createConfiguration()\n{\r\n    return new Configuration();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    cleanupInTeardown(fs, \"/test\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "classTearDown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void classTearDown() throws Exception\n{\r\n    if (lastFs != null) {\r\n        List<DurationStats> statistics = lastFs.getOperationStatistics();\r\n        for (DurationStats stat : statistics) {\r\n            LOG.info(stat.toString());\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "getConf",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Configuration getConf()\n{\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "describe",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void describe(String description)\n{\r\n    noteAction(description);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "getFilesystemURI",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "URI getFilesystemURI() throws URISyntaxException, IOException\n{\r\n    return getServiceURI(createConfiguration());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "createSwiftFS",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SwiftNativeFileSystem createSwiftFS() throws IOException\n{\r\n    SwiftNativeFileSystem swiftNativeFileSystem = new SwiftNativeFileSystem();\r\n    return swiftNativeFileSystem;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "getBlockSize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getBlockSize()\n{\r\n    return 1024;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "renameSupported",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean renameSupported()\n{\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "assumeRenameSupported",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void assumeRenameSupported()\n{\r\n    Assume.assumeTrue(renameSupported());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "path",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path path(String pathString)\n{\r\n    return fs.makeQualified(new Path(pathString));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "getFs",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SwiftNativeFileSystem getFs()\n{\r\n    return fs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "createFile",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void createFile(Path path) throws IOException\n{\r\n    createFile(path, data);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "createFile",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void createFile(Path path, byte[] sourceData) throws IOException\n{\r\n    FSDataOutputStream out = fs.create(path);\r\n    out.write(sourceData, 0, sourceData.length);\r\n    out.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "createEmptyFile",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void createEmptyFile(Path path) throws IOException\n{\r\n    FSDataOutputStream out = fs.create(path);\r\n    out.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "getStore",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SwiftNativeFileSystemStore getStore()\n{\r\n    return fs.getStore();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "rename",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void rename(Path src, Path dst, boolean renameMustSucceed, boolean srcExists, boolean dstExists) throws IOException\n{\r\n    if (renameMustSucceed) {\r\n        renameToSuccess(src, dst, srcExists, dstExists);\r\n    } else {\r\n        renameToFailure(src, dst);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "getRenameOutcome",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String getRenameOutcome(Path src, Path dst) throws IOException\n{\r\n    String lsDst = ls(dst);\r\n    Path parent = dst.getParent();\r\n    String lsParent = parent != null ? ls(parent) : \"\";\r\n    return \"  result of \" + src + \" => \" + dst + \" - \" + lsDst + \" \\n\" + lsParent;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "renameToFailure",
  "errType" : [ "SwiftOperationFailedException", "FileNotFoundException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void renameToFailure(Path src, Path dst) throws IOException\n{\r\n    try {\r\n        getStore().rename(src, dst);\r\n        fail(\"Expected failure renaming \" + src + \" to \" + dst + \"- but got success\");\r\n    } catch (SwiftOperationFailedException e) {\r\n        LOG.debug(\"Rename failed (expected):\" + e);\r\n    } catch (FileNotFoundException e) {\r\n        LOG.debug(\"Rename failed (expected):\" + e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "renameToSuccess",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void renameToSuccess(Path src, Path dst, boolean srcExists, boolean dstExists) throws SwiftOperationFailedException, IOException\n{\r\n    getStore().rename(src, dst);\r\n    String outcome = getRenameOutcome(src, dst);\r\n    assertEquals(\"Source \" + src + \"exists: \" + outcome, srcExists, fs.exists(src));\r\n    assertEquals(\"Destination \" + dstExists + \" exists\" + outcome, dstExists, fs.exists(dst));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "ls",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String ls(Path path) throws IOException\n{\r\n    return SwiftTestUtils.ls(fs, path);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "assertExists",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void assertExists(String message, Path path) throws IOException\n{\r\n    assertPathExists(fs, message, path);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "assertPathDoesNotExist",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void assertPathDoesNotExist(String message, Path path) throws IOException\n{\r\n    SwiftTestUtils.assertPathDoesNotExist(fs, message, path);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "assertIsFile",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void assertIsFile(Path filename) throws IOException\n{\r\n    SwiftTestUtils.assertIsFile(fs, filename);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "mkdirs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mkdirs(Path path) throws IOException\n{\r\n    assertTrue(\"Failed to mkdir\" + path, fs.mkdirs(path));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "assertDeleted",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void assertDeleted(Path path, boolean recursive) throws IOException\n{\r\n    SwiftTestUtils.assertDeleted(fs, path, recursive);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "assertNotEqual",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void assertNotEqual(String message, int expected, int actual)\n{\r\n    assertTrue(message, actual != expected);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "getPartitionsWritten",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getPartitionsWritten(FSDataOutputStream out)\n{\r\n    return SwiftNativeFileSystem.getPartitionsWritten(out);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "assertPartitionsWritten",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void assertPartitionsWritten(String action, FSDataOutputStream out, long expected)\n{\r\n    OutputStream nativeStream = out.getWrappedStream();\r\n    int written = getPartitionsWritten(out);\r\n    if (written != expected) {\r\n        Assert.fail(action + \": \" + TestSwiftFileSystemPartitionedUploads.WRONG_PARTITION_COUNT + \" + expected: \" + expected + \" actual: \" + written + \" -- \" + nativeStream);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "assertMinusOne",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void assertMinusOne(String text, int result)\n{\r\n    assertEquals(text + \" wrong read result \" + result, -1, result);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\contract",
  "methodName" : "createContract",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AbstractFSContract createContract(Configuration conf)\n{\r\n    return new SwiftContract(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\contract",
  "methodName" : "createContract",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AbstractFSContract createContract(Configuration conf)\n{\r\n    return new SwiftContract(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\contract",
  "methodName" : "getScheme",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getScheme()\n{\r\n    return SwiftNativeFileSystem.SWIFT;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testRaceConditionOnDirDeleteTest",
  "errType" : [ "IOException", "IOException", "FileNotFoundException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testRaceConditionOnDirDeleteTest() throws Exception\n{\r\n    SwiftTestUtils.skip(\"Skipping unreliable test\");\r\n    final String message = \"message\";\r\n    final Path fileToRead = new Path(TEST_RACE_CONDITION_ON_DELETE_DIR + \"/files/many-files/file\");\r\n    final ExecutorService executorService = Executors.newFixedThreadPool(2);\r\n    fs.create(new Path(TEST_RACE_CONDITION_ON_DELETE_DIR + \"/file/test/file1\"));\r\n    fs.create(new Path(TEST_RACE_CONDITION_ON_DELETE_DIR + \"/documents/doc1\"));\r\n    fs.create(new Path(TEST_RACE_CONDITION_ON_DELETE_DIR + \"/pictures/picture\"));\r\n    executorService.execute(new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r\n            try {\r\n                assertDeleted(new Path(TEST_RACE_CONDITION_ON_DELETE_DIR), true);\r\n            } catch (IOException e) {\r\n                LOG.warn(\"deletion thread:\" + e, e);\r\n                thread1Ex = e;\r\n                throw new RuntimeException(e);\r\n            }\r\n        }\r\n    });\r\n    executorService.execute(new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r\n            try {\r\n                final FSDataOutputStream outputStream = fs.create(fileToRead);\r\n                outputStream.write(message.getBytes());\r\n                outputStream.close();\r\n            } catch (IOException e) {\r\n                LOG.warn(\"writer thread:\" + e, e);\r\n                thread2Ex = e;\r\n                throw new RuntimeException(e);\r\n            }\r\n        }\r\n    });\r\n    executorService.awaitTermination(1, TimeUnit.MINUTES);\r\n    if (thread1Ex != null) {\r\n        throw thread1Ex;\r\n    }\r\n    if (thread2Ex != null) {\r\n        throw thread2Ex;\r\n    }\r\n    try {\r\n        fs.open(fileToRead);\r\n        LOG.info(\"concurrency test failed to trigger a failure\");\r\n    } catch (FileNotFoundException expected) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testRenameFileIntoExistingDirectory",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testRenameFileIntoExistingDirectory() throws Exception\n{\r\n    assumeRenameSupported();\r\n    Path src = path(\"/test/olddir/file\");\r\n    createFile(src);\r\n    Path dst = path(\"/test/new/newdir\");\r\n    fs.mkdirs(dst);\r\n    rename(src, dst, true, false, true);\r\n    Path newFile = path(\"/test/new/newdir/file\");\r\n    if (!fs.exists(newFile)) {\r\n        String ls = ls(dst);\r\n        LOG.info(ls(path(\"/test/new\")));\r\n        LOG.info(ls(path(\"/test/hadoop\")));\r\n        fail(\"did not find \" + newFile + \" - directory: \" + ls);\r\n    }\r\n    assertTrue(\"Destination changed\", fs.exists(path(\"/test/new/newdir/file\")));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testRenameFile",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testRenameFile() throws Exception\n{\r\n    assumeRenameSupported();\r\n    final Path old = new Path(\"/test/alice/file\");\r\n    final Path newPath = new Path(\"/test/bob/file\");\r\n    fs.mkdirs(newPath.getParent());\r\n    final FSDataOutputStream fsDataOutputStream = fs.create(old);\r\n    final byte[] message = \"Some data\".getBytes();\r\n    fsDataOutputStream.write(message);\r\n    fsDataOutputStream.close();\r\n    assertTrue(fs.exists(old));\r\n    rename(old, newPath, true, false, true);\r\n    final FSDataInputStream bobStream = fs.open(newPath);\r\n    final byte[] bytes = new byte[512];\r\n    final int read = bobStream.read(bytes);\r\n    bobStream.close();\r\n    final byte[] buffer = new byte[read];\r\n    System.arraycopy(bytes, 0, buffer, 0, read);\r\n    assertEquals(new String(message), new String(buffer));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testRenameDirectory",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testRenameDirectory() throws Exception\n{\r\n    assumeRenameSupported();\r\n    final Path old = new Path(\"/test/data/logs\");\r\n    final Path newPath = new Path(\"/test/var/logs\");\r\n    fs.mkdirs(old);\r\n    fs.mkdirs(newPath.getParent());\r\n    assertTrue(fs.exists(old));\r\n    rename(old, newPath, true, false, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testRenameTheSameDirectory",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testRenameTheSameDirectory() throws Exception\n{\r\n    assumeRenameSupported();\r\n    final Path old = new Path(\"/test/usr/data\");\r\n    fs.mkdirs(old);\r\n    rename(old, old, false, true, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testRenameDirectoryIntoExistingDirectory",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testRenameDirectoryIntoExistingDirectory() throws Exception\n{\r\n    assumeRenameSupported();\r\n    Path src = path(\"/test/olddir/dir\");\r\n    fs.mkdirs(src);\r\n    createFile(path(\"/test/olddir/dir/file1\"));\r\n    createFile(path(\"/test/olddir/dir/subdir/file2\"));\r\n    Path dst = path(\"/test/new/newdir\");\r\n    fs.mkdirs(dst);\r\n    rename(src, dst, true, false, true);\r\n    assertExists(\"new dir\", path(\"/test/new/newdir/dir\"));\r\n    assertExists(\"Renamed nested file1\", path(\"/test/new/newdir/dir/file1\"));\r\n    assertPathDoesNotExist(\"Nested file1 should have been deleted\", path(\"/test/olddir/dir/file1\"));\r\n    assertExists(\"Renamed nested subdir\", path(\"/test/new/newdir/dir/subdir/\"));\r\n    assertExists(\"file under subdir\", path(\"/test/new/newdir/dir/subdir/file2\"));\r\n    assertPathDoesNotExist(\"Nested /test/hadoop/dir/subdir/file2 still exists\", path(\"/test/olddir/dir/subdir/file2\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testRenameDirToSelf",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testRenameDirToSelf() throws Throwable\n{\r\n    assumeRenameSupported();\r\n    Path parentdir = path(\"/test/parentdir\");\r\n    fs.mkdirs(parentdir);\r\n    Path child = new Path(parentdir, \"child\");\r\n    createFile(child);\r\n    rename(parentdir, parentdir, false, true, true);\r\n    assertIsFile(child);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testRenameRootDirForbidden",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testRenameRootDirForbidden() throws Exception\n{\r\n    assumeRenameSupported();\r\n    rename(path(\"/\"), path(\"/test/newRootDir\"), false, true, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testRenameChildDirForbidden",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testRenameChildDirForbidden() throws Exception\n{\r\n    assumeRenameSupported();\r\n    Path parentdir = path(\"/test/parentdir\");\r\n    fs.mkdirs(parentdir);\r\n    Path childFile = new Path(parentdir, \"childfile\");\r\n    createFile(childFile);\r\n    Path childdir = new Path(parentdir, \"childdir\");\r\n    rename(parentdir, childdir, false, true, false);\r\n    fs.mkdirs(childdir);\r\n    Path childchilddir = new Path(childdir, \"childdir\");\r\n    rename(parentdir, childchilddir, false, true, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testRenameFileAndVerifyContents",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testRenameFileAndVerifyContents() throws IOException\n{\r\n    assumeRenameSupported();\r\n    final Path filePath = new Path(\"/test/home/user/documents/file.txt\");\r\n    final Path newFilePath = new Path(\"/test/home/user/files/file.txt\");\r\n    mkdirs(newFilePath.getParent());\r\n    int len = 1024;\r\n    byte[] dataset = dataset(len, 'A', 26);\r\n    writeDataset(fs, filePath, dataset, len, len, false);\r\n    rename(filePath, newFilePath, true, false, true);\r\n    byte[] dest = readDataset(fs, newFilePath, len);\r\n    compareByteArrays(dataset, dest, len);\r\n    String reread = readBytesToString(fs, newFilePath, 20);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testMoveFileUnderParent",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testMoveFileUnderParent() throws Throwable\n{\r\n    if (!renameSupported())\r\n        return;\r\n    Path filepath = path(\"test/file\");\r\n    createFile(filepath);\r\n    rename(filepath, filepath, true, true, true);\r\n    assertIsFile(filepath);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testMoveDirUnderParent",
  "errType" : [ "SwiftOperationFailedException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testMoveDirUnderParent() throws Throwable\n{\r\n    if (!renameSupported()) {\r\n        return;\r\n    }\r\n    Path testdir = path(\"test/dir\");\r\n    fs.mkdirs(testdir);\r\n    Path parent = testdir.getParent();\r\n    try {\r\n        fs.rename(testdir, parent);\r\n    } catch (SwiftOperationFailedException e) {\r\n    }\r\n    assertExists(\"Source directory has been deleted \", testdir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testRenameFileToSelf",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testRenameFileToSelf() throws Throwable\n{\r\n    if (!renameSupported())\r\n        return;\r\n    Path filepath = path(\"test/file\");\r\n    createFile(filepath);\r\n    rename(filepath, filepath, true, true, true);\r\n    assertIsFile(filepath);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testRenamedConsistence",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testRenamedConsistence() throws IOException\n{\r\n    assumeRenameSupported();\r\n    describe(\"verify that overwriting a file with new data doesn't impact\" + \" the existing content\");\r\n    final Path filePath = new Path(\"/test/home/user/documents/file.txt\");\r\n    final Path newFilePath = new Path(\"/test/home/user/files/file.txt\");\r\n    mkdirs(newFilePath.getParent());\r\n    int len = 1024;\r\n    byte[] dataset = dataset(len, 'A', 26);\r\n    byte[] dataset2 = dataset(len, 'a', 26);\r\n    writeDataset(fs, filePath, dataset, len, len, false);\r\n    rename(filePath, newFilePath, true, false, true);\r\n    SwiftTestUtils.writeAndRead(fs, filePath, dataset2, len, len, false, true);\r\n    byte[] dest = readDataset(fs, newFilePath, len);\r\n    compareByteArrays(dataset, dest, len);\r\n    String reread = readBytesToString(fs, newFilePath, 20);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testRenameMissingFile",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testRenameMissingFile() throws Throwable\n{\r\n    assumeRenameSupported();\r\n    Path path = path(\"/test/RenameMissingFile\");\r\n    Path path2 = path(\"/test/RenameMissingFileDest\");\r\n    mkdirs(path(\"test\"));\r\n    rename(path, path2, false, false, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testZeroByteFilesAreDirectories",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testZeroByteFilesAreDirectories() throws Exception\n{\r\n    Path src = path(\"/test/testZeroByteFilesAreFiles\");\r\n    SwiftTestUtils.touch(fs, src);\r\n    SwiftTestUtils.assertIsDirectory(fs, src);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testNoStatusForMissingDirectories",
  "errType" : [ "FileNotFoundException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testNoStatusForMissingDirectories() throws Throwable\n{\r\n    Path missing = path(\"/test/testNoStatusForMissingDirectories\");\r\n    assertPathDoesNotExist(\"leftover?\", missing);\r\n    try {\r\n        FileStatus[] statuses = fs.listStatus(missing);\r\n        fail(\"Expected a FileNotFoundException, got the status \" + statuses);\r\n    } catch (FileNotFoundException expected) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testDirectoriesOffRootHaveMatchingFileStatus",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testDirectoriesOffRootHaveMatchingFileStatus() throws Exception\n{\r\n    Path test = path(\"/test\");\r\n    fs.delete(test, true);\r\n    mkdirs(test);\r\n    assertExists(\"created test directory\", test);\r\n    FileStatus[] statuses = fs.listStatus(test);\r\n    String statusString = statusToString(test.toString(), statuses);\r\n    assertEquals(\"Wrong number of elements in file status \" + statusString, 0, statuses.length);\r\n    Path src = path(\"/test/file\");\r\n    SwiftTestUtils.touch(fs, src);\r\n    statuses = fs.listStatus(test);\r\n    statusString = statusToString(test.toString(), statuses);\r\n    assertEquals(\"Wrong number of elements in file status \" + statusString, 1, statuses.length);\r\n    SwiftFileStatus stat = (SwiftFileStatus) statuses[0];\r\n    assertTrue(\"isDir(): Not a directory: \" + stat, stat.isDirectory());\r\n    extraStatusAssertions(stat);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testDirectoriesLowerDownHaveMatchingFileStatus",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testDirectoriesLowerDownHaveMatchingFileStatus() throws Exception\n{\r\n    Path test = path(\"/test/testDirectoriesLowerDownHaveMatchingFileStatus\");\r\n    fs.delete(test, true);\r\n    mkdirs(test);\r\n    assertExists(\"created test sub directory\", test);\r\n    FileStatus[] statuses = fs.listStatus(test);\r\n    String statusString = statusToString(test.toString(), statuses);\r\n    assertEquals(\"Wrong number of elements in file status \" + statusString, 0, statuses.length);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "statusToString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String statusToString(String pathname, FileStatus[] statuses)\n{\r\n    assertNotNull(statuses);\r\n    return SwiftTestUtils.dumpStats(pathname, statuses);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "extraStatusAssertions",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void extraStatusAssertions(SwiftFileStatus stat)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testMultiByteFilesAreFiles",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testMultiByteFilesAreFiles() throws Exception\n{\r\n    Path src = path(\"/test/testMultiByteFilesAreFiles\");\r\n    SwiftTestUtils.writeTextFile(fs, src, \"testMultiByteFilesAreFiles\", false);\r\n    assertIsFile(src);\r\n    FileStatus status = fs.getFileStatus(src);\r\n    assertFalse(status.isDirectory());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift\\scale",
  "methodName" : "testScaledWriteThenRead",
  "errType" : null,
  "containingMethodsNum" : 30,
  "sourceCodeText" : "void testScaledWriteThenRead() throws Throwable\n{\r\n    Path dir = new Path(\"/test/manysmallfiles\");\r\n    Duration rm1 = new Duration();\r\n    fs.delete(dir, true);\r\n    rm1.finished();\r\n    fs.mkdirs(dir);\r\n    Duration ls1 = new Duration();\r\n    fs.listStatus(dir);\r\n    ls1.finished();\r\n    long count = getOperationCount();\r\n    SwiftTestUtils.noteAction(\"Beginning Write of \" + count + \" files \");\r\n    DurationStats writeStats = new DurationStats(\"write\");\r\n    DurationStats readStats = new DurationStats(\"read\");\r\n    String format = \"%08d\";\r\n    for (long l = 0; l < count; l++) {\r\n        String name = String.format(format, l);\r\n        Path p = new Path(dir, \"part-\" + name);\r\n        Duration d = new Duration();\r\n        SwiftTestUtils.writeTextFile(fs, p, name, false);\r\n        d.finished();\r\n        writeStats.add(d);\r\n        Thread.sleep(1000);\r\n    }\r\n    SwiftTestUtils.noteAction(\"Beginning ls\");\r\n    Duration ls2 = new Duration();\r\n    FileStatus[] status2 = (FileStatus[]) fs.listStatus(dir);\r\n    ls2.finished();\r\n    assertEquals(\"Not enough entries in the directory\", count, status2.length);\r\n    SwiftTestUtils.noteAction(\"Beginning read\");\r\n    for (long l = 0; l < count; l++) {\r\n        String name = String.format(format, l);\r\n        Path p = new Path(dir, \"part-\" + name);\r\n        Duration d = new Duration();\r\n        String result = SwiftTestUtils.readBytesToString(fs, p, name.length());\r\n        assertEquals(name, result);\r\n        d.finished();\r\n        readStats.add(d);\r\n    }\r\n    SwiftTestUtils.noteAction(\"Beginning delete\");\r\n    Duration rm2 = new Duration();\r\n    fs.delete(dir, true);\r\n    rm2.finished();\r\n    LOG.info(String.format(\"'filesystem','%s'\", fs.getUri()));\r\n    LOG.info(writeStats.toString());\r\n    LOG.info(readStats.toString());\r\n    LOG.info(String.format(\"'rm1',%d,'ls1',%d\", rm1.value(), ls1.value()));\r\n    LOG.info(String.format(\"'rm2',%d,'ls2',%d\", rm2.value(), ls2.value()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "filesystemIsCaseSensitive",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean filesystemIsCaseSensitive()\n{\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "setUp",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    final URI uri = getFilesystemURI();\r\n    final Configuration conf = new Configuration();\r\n    fs = createSwiftFS();\r\n    try {\r\n        fs.initialize(uri, conf);\r\n    } catch (IOException e) {\r\n        fs = null;\r\n        throw e;\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "getFilesystemURI",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "URI getFilesystemURI() throws URISyntaxException, IOException\n{\r\n    return SwiftTestUtils.getServiceURI(new Configuration());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "createSwiftFS",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SwiftNativeFileSystem createSwiftFS() throws IOException\n{\r\n    SwiftNativeFileSystem swiftNativeFileSystem = new SwiftNativeFileSystem();\r\n    return swiftNativeFileSystem;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testMkdirsFailsForSubdirectoryOfExistingFile",
  "errType" : [ "ParentNotDirectoryException", "ParentNotDirectoryException" ],
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testMkdirsFailsForSubdirectoryOfExistingFile() throws Exception\n{\r\n    Path testDir = path(\"/test/hadoop\");\r\n    assertFalse(fs.exists(testDir));\r\n    assertTrue(fs.mkdirs(testDir));\r\n    assertTrue(fs.exists(testDir));\r\n    Path filepath = path(\"/test/hadoop/file\");\r\n    SwiftTestUtils.writeTextFile(fs, filepath, \"hello, world\", false);\r\n    Path testSubDir = new Path(filepath, \"subdir\");\r\n    SwiftTestUtils.assertPathDoesNotExist(fs, \"subdir before mkdir\", testSubDir);\r\n    try {\r\n        fs.mkdirs(testSubDir);\r\n        fail(\"Should throw IOException.\");\r\n    } catch (ParentNotDirectoryException e) {\r\n    }\r\n    SwiftTestUtils.assertPathDoesNotExist(fs, \"subdir after mkdir\", testSubDir);\r\n    Path testDeepSubDir = path(\"/test/hadoop/file/deep/sub/dir\");\r\n    try {\r\n        fs.mkdirs(testDeepSubDir);\r\n        fail(\"Should throw IOException.\");\r\n    } catch (ParentNotDirectoryException e) {\r\n    }\r\n    SwiftTestUtils.assertPathDoesNotExist(fs, \"testDeepSubDir  after mkdir\", testDeepSubDir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testWriteReadAndDeleteEmptyFile",
  "errType" : [ "AssertionError" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testWriteReadAndDeleteEmptyFile() throws Exception\n{\r\n    try {\r\n        super.testWriteReadAndDeleteEmptyFile();\r\n    } catch (AssertionError e) {\r\n        SwiftTestUtils.downgrade(\"empty files get mistaken for directories\", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testMkdirsWithUmask",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void testMkdirsWithUmask() throws Exception\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testZeroByteFilesAreFiles",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void testZeroByteFilesAreFiles() throws Exception\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testOpenNonExistingFile",
  "errType" : [ "FileNotFoundException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testOpenNonExistingFile() throws IOException\n{\r\n    final Path p = new Path(\"/test/testOpenNonExistingFile\");\r\n    try {\r\n        final FSDataInputStream in = fs.open(p);\r\n        in.close();\r\n        fail(\"didn't expect to get here\");\r\n    } catch (FileNotFoundException fnfe) {\r\n        LOG.debug(\"Expected: \" + fnfe, fnfe);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testFilesystemHasURI",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testFilesystemHasURI() throws Throwable\n{\r\n    assertNotNull(fs.getUri());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testCreateFile",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testCreateFile() throws Exception\n{\r\n    final Path f = new Path(\"/test/testCreateFile\");\r\n    final FSDataOutputStream fsDataOutputStream = fs.create(f);\r\n    fsDataOutputStream.close();\r\n    assertExists(\"created file\", f);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testWriteReadFile",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testWriteReadFile() throws Exception\n{\r\n    final Path f = new Path(\"/test/test\");\r\n    final FSDataOutputStream fsDataOutputStream = fs.create(f);\r\n    final String message = \"Test string\";\r\n    fsDataOutputStream.write(message.getBytes());\r\n    fsDataOutputStream.close();\r\n    assertExists(\"created file\", f);\r\n    FSDataInputStream open = null;\r\n    try {\r\n        open = fs.open(f);\r\n        final byte[] bytes = new byte[512];\r\n        final int read = open.read(bytes);\r\n        final byte[] buffer = new byte[read];\r\n        System.arraycopy(bytes, 0, buffer, 0, read);\r\n        assertEquals(message, new String(buffer));\r\n    } finally {\r\n        fs.delete(f, false);\r\n        IOUtils.closeStream(open);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testConfDefinesFilesystem",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testConfDefinesFilesystem() throws Throwable\n{\r\n    Configuration conf = new Configuration();\r\n    SwiftTestUtils.getServiceURI(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testConfIsValid",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testConfIsValid() throws Throwable\n{\r\n    Configuration conf = new Configuration();\r\n    URI fsURI = SwiftTestUtils.getServiceURI(conf);\r\n    RestClientBindings.bind(fsURI, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testGetSchemeImplemented",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testGetSchemeImplemented() throws Throwable\n{\r\n    String scheme = fs.getScheme();\r\n    assertEquals(SwiftNativeFileSystem.SWIFT, scheme);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\test\\java\\org\\apache\\hadoop\\fs\\swift",
  "methodName" : "testFilesystemIsCaseSensitive",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testFilesystemIsCaseSensitive() throws Exception\n{\r\n    String mixedCaseFilename = \"/test/UPPER.TXT\";\r\n    Path upper = path(mixedCaseFilename);\r\n    Path lower = path(StringUtils.toLowerCase(mixedCaseFilename));\r\n    assertFalse(\"File exists\" + upper, fs.exists(upper));\r\n    assertFalse(\"File exists\" + lower, fs.exists(lower));\r\n    FSDataOutputStream out = fs.create(upper);\r\n    out.writeUTF(\"UPPER\");\r\n    out.close();\r\n    FileStatus upperStatus = fs.getFileStatus(upper);\r\n    assertExists(\"Original upper case file\" + upper, upper);\r\n    assertPathDoesNotExist(\"lower case file\", lower);\r\n    out = fs.create(lower);\r\n    out.writeUTF(\"l\");\r\n    out.close();\r\n    assertExists(\"lower case file\", lower);\r\n    assertExists(\"Original upper case file \" + upper, upper);\r\n    FileStatus newStatus = fs.getFileStatus(upper);\r\n    assertEquals(\"Expected status:\" + upperStatus + \" actual status \" + newStatus, upperStatus.getLen(), newStatus.getLen());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
} ]