[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Container getContainer()\n{\r\n    return this.container;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUser()\n{\r\n    return this.user;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getPid",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getPid()\n{\r\n    return this.pid;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getSignal",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Signal getSignal()\n{\r\n    return this.signal;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 21,
  "sourceCodeText" : "boolean equals(Object obj)\n{\r\n    if (obj instanceof ContainerSignalContext) {\r\n        ContainerSignalContext other = (ContainerSignalContext) obj;\r\n        boolean ret = (other.getPid() == null && getPid() == null) || (other.getPid() != null && getPid() != null && other.getPid().equals(getPid()));\r\n        ret = ret && (other.getSignal() == null && getSignal() == null) || (other.getSignal() != null && getSignal() != null && other.getSignal().equals(getSignal()));\r\n        ret = ret && (other.getContainer() == null && getContainer() == null) || (other.getContainer() != null && getContainer() != null && other.getContainer().equals(getContainer()));\r\n        ret = ret && (other.getUser() == null && getUser() == null) || (other.getUser() != null && getUser() != null && other.getUser().equals(getUser()));\r\n        return ret;\r\n    }\r\n    return super.equals(obj);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return new HashCodeBuilder().append(getPid()).append(getSignal()).append(getContainer()).append(getUser()).toHashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\security",
  "methodName" : "createPassword",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "byte[] createPassword(LocalizerTokenIdentifier identifier)\n{\r\n    return createPassword(identifier.getBytes(), secretKey);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\security",
  "methodName" : "retrievePassword",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "byte[] retrievePassword(LocalizerTokenIdentifier identifier) throws org.apache.hadoop.security.token.SecretManager.InvalidToken\n{\r\n    return createPassword(identifier.getBytes(), secretKey);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\security",
  "methodName" : "createIdentifier",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LocalizerTokenIdentifier createIdentifier()\n{\r\n    return new LocalizerTokenIdentifier();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "shouldDoLogAggregation",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean shouldDoLogAggregation(ContainerLogContext logContext)\n{\r\n    int exitCode = logContext.getExitCode();\r\n    return exitCode != 0 && exitCode != ExitCode.FORCE_KILLED.getExitCode() && exitCode != ExitCode.TERMINATED.getExitCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getContainersToUpdate",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<Container> getContainersToUpdate()\n{\r\n    return this.containersToUpdate;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "getDevice",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Device getDevice()\n{\r\n    return device;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getContainerId()\n{\r\n    return containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "compareTo",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int compareTo(Object o)\n{\r\n    if (!(o instanceof AssignedDevice)) {\r\n        return -1;\r\n    }\r\n    AssignedDevice other = (AssignedDevice) o;\r\n    int result = getDevice().compareTo(other.getDevice());\r\n    if (0 != result) {\r\n        return result;\r\n    }\r\n    return getContainerId().compareTo(other.getContainerId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object o)\n{\r\n    if (!(o instanceof AssignedDevice)) {\r\n        return false;\r\n    }\r\n    AssignedDevice other = (AssignedDevice) o;\r\n    return getDevice().equals(other.getDevice()) && getContainerId().equals(other.getContainerId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return Objects.hash(getDevice(), getContainerId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\fpga",
  "methodName" : "getFpgaAllocator",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "FpgaResourceAllocator getFpgaAllocator()\n{\r\n    return allocator;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\fpga",
  "methodName" : "getRequestedIPID",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getRequestedIPID(Container container)\n{\r\n    return container.getLaunchContext().getEnvironment().get(REQUEST_FPGA_IP_ID_KEY);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\fpga",
  "methodName" : "bootstrap",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "List<PrivilegedOperation> bootstrap(Configuration configuration) throws ResourceHandlerException\n{\r\n    if (!vendorPlugin.initPlugin(configuration)) {\r\n        throw new ResourceHandlerException(\"FPGA plugin initialization failed\");\r\n    }\r\n    LOG.info(\"FPGA Plugin bootstrap success.\");\r\n    List<FpgaDevice> fpgaDeviceList = fpgaDiscoverer.discover();\r\n    allocator.addFpgaDevices(vendorPlugin.getFpgaType(), fpgaDeviceList);\r\n    this.cGroupsHandler.initializeCGroupController(CGroupsHandler.CGroupController.DEVICES);\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\fpga",
  "methodName" : "preStart",
  "errType" : [ "ResourceHandlerException", "PrivilegedOperationException", "IOException" ],
  "containingMethodsNum" : 34,
  "sourceCodeText" : "List<PrivilegedOperation> preStart(Container container) throws ResourceHandlerException\n{\r\n    List<PrivilegedOperation> ret = new ArrayList<>();\r\n    String containerIdStr = container.getContainerId().toString();\r\n    Resource requestedResource = container.getResource();\r\n    cGroupsHandler.createCGroup(CGroupsHandler.CGroupController.DEVICES, containerIdStr);\r\n    long deviceCount = requestedResource.getResourceValue(FPGA_URI);\r\n    LOG.info(containerIdStr + \" requested \" + deviceCount + \" Intel FPGA(s)\");\r\n    String ipFilePath = null;\r\n    try {\r\n        final String requestedIPID = getRequestedIPID(container);\r\n        String localizedIPIDHash = null;\r\n        ipFilePath = vendorPlugin.retrieveIPfilePath(requestedIPID, container.getWorkDir(), container.getResourceSet().getLocalizedResources());\r\n        if (ipFilePath != null) {\r\n            try (FileInputStream fis = new FileInputStream(ipFilePath)) {\r\n                localizedIPIDHash = DigestUtils.sha256Hex(fis);\r\n            } catch (IOException e) {\r\n                throw new ResourceHandlerException(\"Could not calculate SHA-256\", e);\r\n            }\r\n        }\r\n        FpgaResourceAllocator.FpgaAllocation allocation = allocator.assignFpga(vendorPlugin.getFpgaType(), deviceCount, container, localizedIPIDHash);\r\n        LOG.info(\"FpgaAllocation:\" + allocation);\r\n        PrivilegedOperation privilegedOperation = new PrivilegedOperation(PrivilegedOperation.OperationType.FPGA, Arrays.asList(CONTAINER_ID_CLI_OPTION, containerIdStr));\r\n        if (!allocation.getDenied().isEmpty()) {\r\n            List<Integer> denied = new ArrayList<>();\r\n            allocation.getDenied().forEach(device -> denied.add(device.getMinor()));\r\n            privilegedOperation.appendArgs(Arrays.asList(EXCLUDED_FPGAS_CLI_OPTION, StringUtils.join(\",\", denied)));\r\n        }\r\n        privilegedOperationExecutor.executePrivilegedOperation(privilegedOperation, true);\r\n        if (deviceCount > 0) {\r\n            ipFilePath = vendorPlugin.retrieveIPfilePath(getRequestedIPID(container), container.getWorkDir(), container.getResourceSet().getLocalizedResources());\r\n            if (ipFilePath == null) {\r\n                LOG.warn(\"FPGA plugin failed to downloaded IP, please check the\" + \" value of environment viable: \" + REQUEST_FPGA_IP_ID_KEY + \" if you want YARN to program the device\");\r\n            } else {\r\n                LOG.info(\"IP file path:\" + ipFilePath);\r\n                List<FpgaDevice> allowed = allocation.getAllowed();\r\n                String majorMinorNumber;\r\n                for (int i = 0; i < allowed.size(); i++) {\r\n                    FpgaDevice device = allowed.get(i);\r\n                    majorMinorNumber = device.getMajor() + \":\" + device.getMinor();\r\n                    String currentHash = allowed.get(i).getAocxHash();\r\n                    if (currentHash != null && currentHash.equalsIgnoreCase(localizedIPIDHash)) {\r\n                        LOG.info(\"IP already in device \\\"\" + allowed.get(i).getAliasDevName() + \",\" + majorMinorNumber + \"\\\", skip reprogramming\");\r\n                        continue;\r\n                    }\r\n                    if (vendorPlugin.configureIP(ipFilePath, device)) {\r\n                        allocator.updateFpga(containerIdStr, allowed.get(i), requestedIPID, localizedIPIDHash);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } catch (ResourceHandlerException re) {\r\n        allocator.cleanupAssignFpgas(containerIdStr);\r\n        cGroupsHandler.deleteCGroup(CGroupsHandler.CGroupController.DEVICES, containerIdStr);\r\n        throw re;\r\n    } catch (PrivilegedOperationException e) {\r\n        allocator.cleanupAssignFpgas(containerIdStr);\r\n        cGroupsHandler.deleteCGroup(CGroupsHandler.CGroupController.DEVICES, containerIdStr);\r\n        LOG.warn(\"Could not update cgroup for container\", e);\r\n        throw new ResourceHandlerException(e);\r\n    }\r\n    ret.add(new PrivilegedOperation(PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP, PrivilegedOperation.CGROUP_ARG_PREFIX + cGroupsHandler.getPathForCGroupTasks(CGroupsHandler.CGroupController.DEVICES, containerIdStr)));\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\fpga",
  "methodName" : "reacquireContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<PrivilegedOperation> reacquireContainer(ContainerId containerId) throws ResourceHandlerException\n{\r\n    allocator.recoverAssignedFpgas(containerId);\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\fpga",
  "methodName" : "updateContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<PrivilegedOperation> updateContainer(Container container) throws ResourceHandlerException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\fpga",
  "methodName" : "postComplete",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<PrivilegedOperation> postComplete(ContainerId containerId) throws ResourceHandlerException\n{\r\n    allocator.cleanupAssignFpgas(containerId.toString());\r\n    cGroupsHandler.deleteCGroup(CGroupsHandler.CGroupController.DEVICES, containerId.toString());\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\fpga",
  "methodName" : "teardown",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<PrivilegedOperation> teardown() throws ResourceHandlerException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\fpga",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return FpgaResourceHandlerImpl.class.getName() + \"{\" + \"vendorPlugin=\" + vendorPlugin + \", allocator=\" + allocator + '}';\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "getDevicesFromPath",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Set<Device> getDevicesFromPath(String path) throws IOException\n{\r\n    MutableInt counter = new MutableInt(0);\r\n    try (Stream<Path> stream = Files.walk(Paths.get(path), 1)) {\r\n        return stream.filter(p -> p.toFile().getName().startsWith(\"veslot\")).map(p -> toDevice(p, counter)).collect(Collectors.toSet());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "toDevice",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 16,
  "sourceCodeText" : "Device toDevice(Path p, MutableInt counter)\n{\r\n    CommandExecutor executor = commandExecutorProvider.apply(new String[] { \"stat\", \"-L\", \"-c\", \"%t:%T:%F\", p.toString() });\r\n    try {\r\n        LOG.info(\"Checking device file: {}\", p);\r\n        executor.execute();\r\n        String statOutput = executor.getOutput();\r\n        String[] stat = statOutput.trim().split(\":\");\r\n        int major = Integer.parseInt(stat[0], 16);\r\n        int minor = Integer.parseInt(stat[1], 16);\r\n        char devType = getDevType(p, stat[2]);\r\n        int deviceNumber = makeDev(major, minor);\r\n        LOG.info(\"Device: major: {}, minor: {}, devNo: {}, type: {}\", major, minor, deviceNumber, devType);\r\n        String sysPath = udev.getSysPath(deviceNumber, devType);\r\n        LOG.info(\"Device syspath: {}\", sysPath);\r\n        String deviceState = getDeviceState(sysPath);\r\n        Device.Builder builder = Device.Builder.newInstance();\r\n        builder.setId(counter.getAndIncrement()).setMajorNumber(major).setMinorNumber(minor).setHealthy(STATE_ONLINE.equalsIgnoreCase(deviceState)).setStatus(deviceState).setDevPath(p.toAbsolutePath().toString());\r\n        return builder.build();\r\n    } catch (IOException e) {\r\n        throw new UncheckedIOException(\"Cannot execute stat command\", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "makeDev",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int makeDev(int major, int minor)\n{\r\n    return major * 256 + minor;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "getDevType",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "char getDevType(Path p, String fromStat)\n{\r\n    if (fromStat.contains(\"character\")) {\r\n        return 'c';\r\n    } else if (fromStat.contains(\"block\")) {\r\n        return 'b';\r\n    } else {\r\n        throw new IllegalArgumentException(\"File is neither a char nor block device: \" + p);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "getDeviceState",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String getDeviceState(String sysPath) throws IOException\n{\r\n    Path statePath = Paths.get(sysPath, \"os_state\");\r\n    try (FileInputStream fis = new FileInputStream(statePath.toString())) {\r\n        byte state = (byte) fis.read();\r\n        if (state < 0 || DEVICE_STATE.length <= state) {\r\n            return String.format(\"Unknown (%d)\", state);\r\n        } else {\r\n            return DEVICE_STATE[state];\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "createCommandExecutor",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "CommandExecutor createCommandExecutor(String[] command)\n{\r\n    return new Shell.ShellCommandExecutor(command);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "setCommandExecutorProvider",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setCommandExecutorProvider(Function<String[], CommandExecutor> provider)\n{\r\n    this.commandExecutorProvider = provider;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getUpdatedToken",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerTokenIdentifier getUpdatedToken()\n{\r\n    return updatedToken;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "isResourceChange",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isResourceChange()\n{\r\n    return isResourceChange;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "isExecTypeUpdate",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isExecTypeUpdate()\n{\r\n    return isExecTypeUpdate;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "isIncrease",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isIncrease()\n{\r\n    return isIncrease;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "validateConfOrThrowException",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void validateConfOrThrowException() throws YarnException\n{\r\n    if (getConf() == null) {\r\n        throw new YarnException(\"Please initialize (call initialize) before use \" + GpuDiscoverer.class.getSimpleName());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "getErrorMessageOfScriptExecution",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getErrorMessageOfScriptExecution(String msg)\n{\r\n    return getFailedToExecuteScriptMessage() + \"! Exception message: \" + msg;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "getErrorMessageOfScriptExecutionThresholdReached",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getErrorMessageOfScriptExecutionThresholdReached()\n{\r\n    return getFailedToExecuteScriptMessage() + \" for \" + MAX_REPEATED_ERROR_ALLOWED + \" times, \" + \"skipping following executions!\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "getFailedToExecuteScriptMessage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getFailedToExecuteScriptMessage()\n{\r\n    return \"Failed to execute \" + GpuDeviceInformationParser.GPU_SCRIPT_REFERENCE + \" (\" + pathOfGpuBinary + \")\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "getFailedToParseErrorMessage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getFailedToParseErrorMessage(String msg)\n{\r\n    return \"Failed to parse XML output of \" + GpuDeviceInformationParser.GPU_SCRIPT_REFERENCE + \"( \" + pathOfGpuBinary + \")\" + msg;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "getGpuDeviceInformation",
  "errType" : [ "IOException", "YarnException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "GpuDeviceInformation getGpuDeviceInformation() throws YarnException\n{\r\n    if (numOfErrorExecutionSinceLastSucceed == MAX_REPEATED_ERROR_ALLOWED) {\r\n        String msg = getErrorMessageOfScriptExecutionThresholdReached();\r\n        LOG.error(msg);\r\n        throw new YarnException(msg);\r\n    }\r\n    try {\r\n        lastDiscoveredGpuInformation = nvidiaBinaryHelper.getGpuDeviceInformation(pathOfGpuBinary);\r\n    } catch (IOException e) {\r\n        numOfErrorExecutionSinceLastSucceed++;\r\n        String msg = getErrorMessageOfScriptExecution(e.getMessage());\r\n        LOG.debug(msg);\r\n        throw new YarnException(msg, e);\r\n    } catch (YarnException e) {\r\n        numOfErrorExecutionSinceLastSucceed++;\r\n        String msg = getFailedToParseErrorMessage(e.getMessage());\r\n        LOG.debug(msg, e);\r\n        throw e;\r\n    }\r\n    return lastDiscoveredGpuInformation;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "isAutoDiscoveryEnabled",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isAutoDiscoveryEnabled()\n{\r\n    String allowedDevicesStr = getConf().get(YarnConfiguration.NM_GPU_ALLOWED_DEVICES, YarnConfiguration.AUTOMATICALLY_DISCOVER_GPU_DEVICES);\r\n    return allowedDevicesStr.equals(YarnConfiguration.AUTOMATICALLY_DISCOVER_GPU_DEVICES);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "getGpusUsableByYarn",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "List<GpuDevice> getGpusUsableByYarn() throws YarnException\n{\r\n    validateConfOrThrowException();\r\n    if (isAutoDiscoveryEnabled()) {\r\n        return parseGpuDevicesFromAutoDiscoveredGpuInfo();\r\n    } else {\r\n        if (gpuDevicesFromUser == null) {\r\n            gpuDevicesFromUser = parseGpuDevicesFromUserDefinedValues();\r\n        }\r\n        return gpuDevicesFromUser;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "parseGpuDevicesFromAutoDiscoveredGpuInfo",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "List<GpuDevice> parseGpuDevicesFromAutoDiscoveredGpuInfo() throws YarnException\n{\r\n    if (lastDiscoveredGpuInformation == null) {\r\n        String msg = YarnConfiguration.NM_GPU_ALLOWED_DEVICES + \" is set to \" + YarnConfiguration.AUTOMATICALLY_DISCOVER_GPU_DEVICES + \", however automatically discovering \" + \"GPU information failed, please check NodeManager log for more\" + \" details, as an alternative, admin can specify \" + YarnConfiguration.NM_GPU_ALLOWED_DEVICES + \" manually to enable GPU isolation.\";\r\n        LOG.error(msg);\r\n        throw new YarnException(msg);\r\n    }\r\n    List<GpuDevice> gpuDevices = new ArrayList<>();\r\n    if (lastDiscoveredGpuInformation.getGpus() != null) {\r\n        int numberOfGpus = lastDiscoveredGpuInformation.getGpus().size();\r\n        LOG.debug(\"Found {} GPU devices\", numberOfGpus);\r\n        for (int i = 0; i < numberOfGpus; i++) {\r\n            List<PerGpuDeviceInformation> gpuInfos = lastDiscoveredGpuInformation.getGpus();\r\n            gpuDevices.add(new GpuDevice(i, gpuInfos.get(i).getMinorNumber()));\r\n        }\r\n    }\r\n    return gpuDevices;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "parseGpuDevicesFromUserDefinedValues",
  "errType" : [ "NumberFormatException" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "List<GpuDevice> parseGpuDevicesFromUserDefinedValues() throws YarnException\n{\r\n    String devices = getConf().get(YarnConfiguration.NM_GPU_ALLOWED_DEVICES, YarnConfiguration.AUTOMATICALLY_DISCOVER_GPU_DEVICES);\r\n    if (devices.trim().isEmpty()) {\r\n        throw GpuDeviceSpecificationException.createWithEmptyValueSpecified();\r\n    }\r\n    List<GpuDevice> gpuDevices = Lists.newArrayList();\r\n    for (String device : devices.split(\",\")) {\r\n        if (device.trim().length() > 0) {\r\n            String[] splitByColon = device.trim().split(\":\");\r\n            if (splitByColon.length != 2) {\r\n                throwIfNecessary(GpuDeviceSpecificationException.createWithWrongValueSpecified(device, devices), getConf());\r\n                LOG.warn(\"Wrong GPU specification string {}, ignored\", device);\r\n            }\r\n            GpuDevice gpuDevice;\r\n            try {\r\n                gpuDevice = parseGpuDevice(splitByColon);\r\n            } catch (NumberFormatException e) {\r\n                throwIfNecessary(GpuDeviceSpecificationException.createWithWrongValueSpecified(device, devices, e), getConf());\r\n                LOG.warn(\"Cannot parse GPU device numbers: {}\", device);\r\n                continue;\r\n            }\r\n            if (!gpuDevices.contains(gpuDevice)) {\r\n                gpuDevices.add(gpuDevice);\r\n            } else {\r\n                throwIfNecessary(GpuDeviceSpecificationException.createWithDuplicateValueSpecified(device, devices), getConf());\r\n                LOG.warn(\"CPU device is duplicated: {}\", device);\r\n            }\r\n        }\r\n    }\r\n    LOG.info(\"Allowed GPU devices:\" + gpuDevices);\r\n    return gpuDevices;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "parseGpuDevice",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GpuDevice parseGpuDevice(String[] splitByColon)\n{\r\n    int index = Integer.parseInt(splitByColon[0]);\r\n    int minorNumber = Integer.parseInt(splitByColon[1]);\r\n    return new GpuDevice(index, minorNumber);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "initialize",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void initialize(Configuration config, NvidiaBinaryHelper nvidiaHelper) throws YarnException\n{\r\n    setConf(config);\r\n    this.nvidiaBinaryHelper = nvidiaHelper;\r\n    if (isAutoDiscoveryEnabled()) {\r\n        numOfErrorExecutionSinceLastSucceed = 0;\r\n        lookUpAutoDiscoveryBinary(config);\r\n        try {\r\n            LOG.info(\"Trying to discover GPU information ...\");\r\n            GpuDeviceInformation info = getGpuDeviceInformation();\r\n            LOG.info(\"Discovered GPU information: \" + info.toString());\r\n        } catch (YarnException e) {\r\n            String msg = \"Failed to discover GPU information from system, exception message:\" + e.getMessage() + \" continue...\";\r\n            LOG.warn(msg);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "lookUpAutoDiscoveryBinary",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void lookUpAutoDiscoveryBinary(Configuration config) throws YarnException\n{\r\n    String configuredBinaryPath = config.get(YarnConfiguration.NM_GPU_PATH_TO_EXEC, DEFAULT_BINARY_NAME);\r\n    if (configuredBinaryPath.isEmpty()) {\r\n        configuredBinaryPath = DEFAULT_BINARY_NAME;\r\n    }\r\n    File binaryPath;\r\n    File configuredBinaryFile = new File(configuredBinaryPath);\r\n    if (!configuredBinaryFile.exists()) {\r\n        binaryPath = lookupBinaryInDefaultDirs();\r\n    } else if (configuredBinaryFile.isDirectory()) {\r\n        binaryPath = handleConfiguredBinaryPathIsDirectory(configuredBinaryFile);\r\n    } else {\r\n        binaryPath = configuredBinaryFile;\r\n        String fileName = binaryPath.getName();\r\n        if (!DEFAULT_BINARY_NAME.equals(fileName)) {\r\n            String msg = String.format(\"Please check the configuration value of\" + \" %s. It should point to an %s binary, which is now %s\", YarnConfiguration.NM_GPU_PATH_TO_EXEC, DEFAULT_BINARY_NAME, fileName);\r\n            throwIfNecessary(new YarnException(msg), config);\r\n            LOG.warn(msg);\r\n        }\r\n    }\r\n    pathOfGpuBinary = binaryPath.getAbsolutePath();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "handleConfiguredBinaryPathIsDirectory",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "File handleConfiguredBinaryPathIsDirectory(File configuredBinaryFile) throws YarnException\n{\r\n    File binaryPath = new File(configuredBinaryFile, DEFAULT_BINARY_NAME);\r\n    if (!binaryPath.exists()) {\r\n        throw new YarnException(\"Failed to find GPU discovery executable, \" + \"please double check \" + YarnConfiguration.NM_GPU_PATH_TO_EXEC + \" setting. The setting points to a directory but \" + \"no file found in the directory with name:\" + DEFAULT_BINARY_NAME);\r\n    } else {\r\n        LOG.warn(\"Specified path is a directory, use \" + DEFAULT_BINARY_NAME + \" under the directory, updated path-to-executable:\" + binaryPath.getAbsolutePath());\r\n    }\r\n    return binaryPath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "lookupBinaryInDefaultDirs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "File lookupBinaryInDefaultDirs() throws YarnException\n{\r\n    final File lookedUpBinary = lookupBinaryInDefaultDirsInternal();\r\n    if (lookedUpBinary == null) {\r\n        throw new YarnException(\"Failed to find GPU discovery executable, \" + \"please double check \" + YarnConfiguration.NM_GPU_PATH_TO_EXEC + \" setting. Also tried to find the executable \" + \"in the default directories: \" + DEFAULT_BINARY_SEARCH_DIRS);\r\n    }\r\n    return lookedUpBinary;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "lookupBinaryInDefaultDirsInternal",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "File lookupBinaryInDefaultDirsInternal()\n{\r\n    Set<String> triedBinaryPaths = Sets.newHashSet();\r\n    for (String dir : DEFAULT_BINARY_SEARCH_DIRS) {\r\n        File binaryPath = new File(dir, DEFAULT_BINARY_NAME);\r\n        if (binaryPath.exists()) {\r\n            return binaryPath;\r\n        } else {\r\n            triedBinaryPaths.add(binaryPath.getAbsolutePath());\r\n        }\r\n    }\r\n    LOG.warn(\"Failed to locate GPU device discovery binary, tried paths: \" + triedBinaryPaths + \"! Please double check the value of config \" + YarnConfiguration.NM_GPU_PATH_TO_EXEC + \". Using default binary: \" + DEFAULT_BINARY_NAME);\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "getEnvironmentToRunCommand",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, String> getEnvironmentToRunCommand()\n{\r\n    return environment;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "getPathOfGpuBinary",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getPathOfGpuBinary()\n{\r\n    return pathOfGpuBinary;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\impl\\pb\\service",
  "methodName" : "heartbeat",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "LocalizerHeartbeatResponseProto heartbeat(RpcController controller, LocalizerStatusProto proto) throws ServiceException\n{\r\n    LocalizerStatusPBImpl request = new LocalizerStatusPBImpl(proto);\r\n    try {\r\n        LocalizerHeartbeatResponse response = real.heartbeat(request);\r\n        return ((LocalizerHeartbeatResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\application",
  "methodName" : "getApplicationID",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationId getApplicationID()\n{\r\n    return this.applicationID;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "preHead",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void preHead(Page.HTML<__> html)\n{\r\n    commonPreHead(html);\r\n    setTitle(\"Applications running on this node\");\r\n    set(DATATABLES_ID, \"applications\");\r\n    set(initID(DATATABLES, \"applications\"), appsTableInit());\r\n    setTableStyles(html, \"applications\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "appsTableInit",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String appsTableInit()\n{\r\n    return tableInit().append(\", aaSorting: [[0, 'asc']]\").append(\", aoColumns:[\").append(getApplicationsIdColumnDefs()).append(\", null]} \").toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getApplicationsIdColumnDefs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getApplicationsIdColumnDefs()\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    return sb.append(\"{'sType':'natural', 'aTargets': [0]\").append(\", 'mRender': parseHadoopID }\").toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "content",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<? extends SubView> content()\n{\r\n    return AllApplicationsBlock.class;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "parseDiagnosticOutput",
  "errType" : null,
  "containingMethodsNum" : 26,
  "sourceCodeText" : "List<FpgaDevice> parseDiagnosticOutput(String output, InnerShellExecutor shellExecutor, String fpgaType)\n{\r\n    if (output.contains(\"DIAGNOSTIC_PASSED\")) {\r\n        List<FpgaDevice> devices = new ArrayList<>();\r\n        Matcher headerStartMatcher = Pattern.compile(\"acl[0-31]\").matcher(output);\r\n        Matcher headerEndMatcher = Pattern.compile(\"(?i)DIAGNOSTIC_PASSED\").matcher(output);\r\n        int sectionStartIndex;\r\n        int sectionEndIndex;\r\n        String aliasName;\r\n        while (headerStartMatcher.find()) {\r\n            sectionStartIndex = headerStartMatcher.end();\r\n            String section = null;\r\n            aliasName = headerStartMatcher.group();\r\n            while (headerEndMatcher.find(sectionStartIndex)) {\r\n                sectionEndIndex = headerEndMatcher.start();\r\n                section = output.substring(sectionStartIndex, sectionEndIndex);\r\n                break;\r\n            }\r\n            if (section == null) {\r\n                LOG.warn(\"Unsupported diagnose output\");\r\n                LOG.warn(\"aocl output is: \" + output);\r\n                return Collections.emptyList();\r\n            }\r\n            String[] fieldRegexes = new String[] { \"\\\\(.*\\\\)\\n\", \"(?i)bus:slot.func\\\\s=\\\\s.*,\", \"(?i)FPGA temperature\\\\s=\\\\s.*\", \"(?i)Total\\\\sCard\\\\sPower\\\\sUsage\\\\s=\\\\s.*\" };\r\n            String[] fields = new String[4];\r\n            String tempFieldValue;\r\n            for (int i = 0; i < fieldRegexes.length; i++) {\r\n                Matcher fieldMatcher = Pattern.compile(fieldRegexes[i]).matcher(section);\r\n                if (!fieldMatcher.find()) {\r\n                    LOG.warn(\"Couldn't find \" + fieldRegexes[i] + \" pattern\");\r\n                    fields[i] = \"\";\r\n                    continue;\r\n                }\r\n                tempFieldValue = fieldMatcher.group().trim();\r\n                if (i == 0) {\r\n                    fields[i] = tempFieldValue.substring(1, tempFieldValue.length() - 1);\r\n                } else {\r\n                    String ss = tempFieldValue.split(\"=\")[1].trim();\r\n                    fields[i] = ss.substring(0, ss.length() - 1);\r\n                }\r\n            }\r\n            String majorMinorNumber = shellExecutor.getMajorAndMinorNumber(fields[0]);\r\n            if (null != majorMinorNumber) {\r\n                String[] mmn = majorMinorNumber.split(\":\");\r\n                devices.add(new FpgaDevice(fpgaType, Integer.parseInt(mmn[0]), Integer.parseInt(mmn[1]), aliasName));\r\n            } else {\r\n                LOG.warn(\"Failed to retrieve major/minor number for device\");\r\n            }\r\n        }\r\n        return devices;\r\n    } else {\r\n        LOG.warn(\"The diagnostic has failed\");\r\n        LOG.warn(\"Output of aocl is: \" + output);\r\n        return Collections.emptyList();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "serviceList",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AuxServiceRecords serviceList(AuxServiceRecord... serviceList)\n{\r\n    for (AuxServiceRecord service : serviceList) {\r\n        this.services.add(service);\r\n    }\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "getServices",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<AuxServiceRecord> getServices()\n{\r\n    return services;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "shouldDoLogAggregation",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean shouldDoLogAggregation(ContainerLogContext logContext)\n{\r\n    return logContext.getContainerType() == ContainerType.APPLICATION_MASTER;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\security",
  "methodName" : "getKerberosInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "KerberosInfo getKerberosInfo(Class<?> protocol, Configuration conf)\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\security",
  "methodName" : "getTokenInfo",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "TokenInfo getTokenInfo(Class<?> protocol, Configuration conf)\n{\r\n    if (!protocol.equals(LocalizationProtocolPB.class)) {\r\n        return null;\r\n    }\r\n    return new TokenInfo() {\r\n\r\n        @Override\r\n        public Class<? extends Annotation> annotationType() {\r\n            return null;\r\n        }\r\n\r\n        @Override\r\n        public Class<? extends TokenSelector<? extends TokenIdentifier>> value() {\r\n            LOG.debug(\"Using localizerTokenSecurityInfo\");\r\n            return LocalizerTokenSelector.class;\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\collectormanager",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    Configuration conf = getConfig();\r\n    InetSocketAddress collectorServerAddress = conf.getSocketAddr(YarnConfiguration.NM_BIND_HOST, YarnConfiguration.NM_COLLECTOR_SERVICE_ADDRESS, YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_ADDRESS, YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_PORT);\r\n    Configuration serverConf = new Configuration(conf);\r\n    YarnRPC rpc = YarnRPC.create(conf);\r\n    server = rpc.getServer(CollectorNodemanagerProtocol.class, this, collectorServerAddress, serverConf, null, conf.getInt(YarnConfiguration.NM_COLLECTOR_SERVICE_THREAD_COUNT, YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_THREAD_COUNT));\r\n    if (conf.getBoolean(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, false)) {\r\n        server.refreshServiceAcl(conf, NMPolicyProvider.getInstance());\r\n    }\r\n    server.start();\r\n    collectorServerAddress = conf.updateConnectAddr(YarnConfiguration.NM_BIND_HOST, YarnConfiguration.NM_COLLECTOR_SERVICE_ADDRESS, YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_ADDRESS, server.getListenerAddress());\r\n    super.serviceStart();\r\n    LOG.info(\"NMCollectorService started at \" + collectorServerAddress);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\collectormanager",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    if (server != null) {\r\n        server.stop();\r\n    }\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\collectormanager",
  "methodName" : "reportNewCollectorInfo",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "ReportNewCollectorInfoResponse reportNewCollectorInfo(ReportNewCollectorInfoRequest request) throws YarnException, IOException\n{\r\n    List<AppCollectorData> newCollectorsList = request.getAppCollectorsList();\r\n    if (newCollectorsList != null && !newCollectorsList.isEmpty()) {\r\n        Map<ApplicationId, AppCollectorData> newCollectorsMap = new HashMap<>();\r\n        for (AppCollectorData collector : newCollectorsList) {\r\n            ApplicationId appId = collector.getApplicationId();\r\n            newCollectorsMap.put(appId, collector);\r\n            NMTimelinePublisher nmTimelinePublisher = context.getNMTimelinePublisher();\r\n            if (nmTimelinePublisher != null) {\r\n                nmTimelinePublisher.setTimelineServiceAddress(appId, collector.getCollectorAddr());\r\n            }\r\n        }\r\n        Map<ApplicationId, AppCollectorData> registeringCollectors = context.getRegisteringCollectors();\r\n        if (registeringCollectors != null) {\r\n            registeringCollectors.putAll(newCollectorsMap);\r\n        } else {\r\n            LOG.warn(\"collectors are added when the registered collectors are \" + \"initialized\");\r\n        }\r\n    }\r\n    return ReportNewCollectorInfoResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\collectormanager",
  "methodName" : "getTimelineCollectorContext",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetTimelineCollectorContextResponse getTimelineCollectorContext(GetTimelineCollectorContextRequest request) throws YarnException, IOException\n{\r\n    Application app = context.getApplications().get(request.getApplicationId());\r\n    if (app == null) {\r\n        throw new YarnException(\"Application \" + request.getApplicationId() + \" doesn't exist on NM.\");\r\n    }\r\n    return GetTimelineCollectorContextResponse.newInstance(app.getUser(), app.getFlowName(), app.getFlowVersion(), app.getFlowRunId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getContainersToCleanup",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<ContainerId> getContainersToCleanup()\n{\r\n    return this.containerToCleanup;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getReason",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Reason getReason()\n{\r\n    return reason;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "preHead",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void preHead(Page.HTML<__> html)\n{\r\n    commonPreHead(html);\r\n    setTitle(\"Container \" + $(CONTAINER_ID));\r\n    set(initID(ACCORDION, \"nav\"), \"{autoHeight:false, active:0}\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "content",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<? extends SubView> content()\n{\r\n    return ContainerBlock.class;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "serviceInit",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void serviceInit(Configuration config) throws Exception\n{\r\n    Configuration conf = new Configuration(config);\r\n    diskHealthCheckInterval = conf.getLong(YarnConfiguration.NM_DISK_HEALTH_CHECK_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_DISK_HEALTH_CHECK_INTERVAL_MS);\r\n    monitoringTimerTask = new MonitoringTimerTask(conf);\r\n    isDiskHealthCheckerEnabled = conf.getBoolean(YarnConfiguration.NM_DISK_HEALTH_CHECK_ENABLE, true);\r\n    minNeededHealthyDisksFactor = conf.getFloat(YarnConfiguration.NM_MIN_HEALTHY_DISKS_FRACTION, YarnConfiguration.DEFAULT_NM_MIN_HEALTHY_DISKS_FRACTION);\r\n    lastDisksCheckTime = System.currentTimeMillis();\r\n    super.serviceInit(conf);\r\n    FileContext localFs;\r\n    try {\r\n        localFs = FileContext.getLocalFSFileContext(config);\r\n    } catch (IOException e) {\r\n        throw new YarnRuntimeException(\"Unable to get the local filesystem\", e);\r\n    }\r\n    FsPermission perm = new FsPermission((short) 0755);\r\n    boolean createSucceeded = localDirs.createNonExistentDirs(localFs, perm);\r\n    createSucceeded &= logDirs.createNonExistentDirs(localFs, perm);\r\n    if (!createSucceeded) {\r\n        updateDirsAfterTest();\r\n    }\r\n    checkDirs();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    if (isDiskHealthCheckerEnabled) {\r\n        dirsHandlerScheduler = new Timer(\"DiskHealthMonitor-Timer\", true);\r\n        dirsHandlerScheduler.scheduleAtFixedRate(monitoringTimerTask, diskHealthCheckInterval, diskHealthCheckInterval);\r\n    }\r\n    super.serviceStart();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    if (dirsHandlerScheduler != null) {\r\n        dirsHandlerScheduler.cancel();\r\n    }\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "registerLocalDirsChangeListener",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void registerLocalDirsChangeListener(DirsChangeListener listener)\n{\r\n    localDirs.registerDirsChangeListener(listener);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "registerLogDirsChangeListener",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void registerLogDirsChangeListener(DirsChangeListener listener)\n{\r\n    logDirs.registerDirsChangeListener(listener);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "deregisterLocalDirsChangeListener",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void deregisterLocalDirsChangeListener(DirsChangeListener listener)\n{\r\n    localDirs.deregisterDirsChangeListener(listener);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "deregisterLogDirsChangeListener",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void deregisterLogDirsChangeListener(DirsChangeListener listener)\n{\r\n    logDirs.deregisterDirsChangeListener(listener);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getLocalDirs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<String> getLocalDirs()\n{\r\n    return localDirs.getGoodDirs();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getLogDirs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<String> getLogDirs()\n{\r\n    return logDirs.getGoodDirs();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getDiskFullLocalDirs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<String> getDiskFullLocalDirs()\n{\r\n    return localDirs.getFullDirs();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getDiskFullLogDirs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<String> getDiskFullLogDirs()\n{\r\n    return logDirs.getFullDirs();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getLocalDirsForRead",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<String> getLocalDirsForRead()\n{\r\n    return DirectoryCollection.concat(localDirs.getGoodDirs(), localDirs.getFullDirs());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getLocalDirsForCleanup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<String> getLocalDirsForCleanup()\n{\r\n    return DirectoryCollection.concat(localDirs.getGoodDirs(), localDirs.getFullDirs());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getLogDirsForRead",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<String> getLogDirsForRead()\n{\r\n    return DirectoryCollection.concat(logDirs.getGoodDirs(), logDirs.getFullDirs());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getLogDirsForCleanup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<String> getLogDirsForCleanup()\n{\r\n    return DirectoryCollection.concat(logDirs.getGoodDirs(), logDirs.getFullDirs());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getDisksHealthReport",
  "errType" : null,
  "containingMethodsNum" : 23,
  "sourceCodeText" : "String getDisksHealthReport(boolean listGoodDirs)\n{\r\n    if (!isDiskHealthCheckerEnabled) {\r\n        return \"\";\r\n    }\r\n    StringBuilder report = new StringBuilder();\r\n    List<String> erroredLocalDirsList = localDirs.getErroredDirs();\r\n    List<String> erroredLogDirsList = logDirs.getErroredDirs();\r\n    List<String> diskFullLocalDirsList = localDirs.getFullDirs();\r\n    List<String> diskFullLogDirsList = logDirs.getFullDirs();\r\n    List<String> goodLocalDirsList = localDirs.getGoodDirs();\r\n    List<String> goodLogDirsList = logDirs.getGoodDirs();\r\n    int numLocalDirs = goodLocalDirsList.size() + erroredLocalDirsList.size() + diskFullLocalDirsList.size();\r\n    int numLogDirs = goodLogDirsList.size() + erroredLogDirsList.size() + diskFullLogDirsList.size();\r\n    if (!listGoodDirs) {\r\n        if (!erroredLocalDirsList.isEmpty()) {\r\n            report.append(erroredLocalDirsList.size() + \"/\" + numLocalDirs + \" local-dirs have errors: \" + buildDiskErrorReport(erroredLocalDirsList, localDirs));\r\n        }\r\n        if (!diskFullLocalDirsList.isEmpty()) {\r\n            report.append(diskFullLocalDirsList.size() + \"/\" + numLocalDirs + \" local-dirs \" + diskCapacityExceededErrorMsg + buildDiskErrorReport(diskFullLocalDirsList, localDirs) + \"; \");\r\n        }\r\n        if (!erroredLogDirsList.isEmpty()) {\r\n            report.append(erroredLogDirsList.size() + \"/\" + numLogDirs + \" log-dirs have errors: \" + buildDiskErrorReport(erroredLogDirsList, logDirs));\r\n        }\r\n        if (!diskFullLogDirsList.isEmpty()) {\r\n            report.append(diskFullLogDirsList.size() + \"/\" + numLogDirs + \" log-dirs \" + diskCapacityExceededErrorMsg + buildDiskErrorReport(diskFullLogDirsList, logDirs));\r\n        }\r\n    } else {\r\n        report.append(goodLocalDirsList.size() + \"/\" + numLocalDirs + \" local-dirs are good: \" + StringUtils.join(\",\", goodLocalDirsList) + \"; \");\r\n        report.append(goodLogDirsList.size() + \"/\" + numLogDirs + \" log-dirs are good: \" + StringUtils.join(\",\", goodLogDirsList));\r\n    }\r\n    return report.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getHealthReport",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getHealthReport()\n{\r\n    return getDisksHealthReport(false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "areDisksHealthy",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean areDisksHealthy()\n{\r\n    if (!isDiskHealthCheckerEnabled) {\r\n        return true;\r\n    }\r\n    int goodDirs = getLocalDirs().size();\r\n    int failedDirs = localDirs.getFailedDirs().size();\r\n    int totalConfiguredDirs = goodDirs + failedDirs;\r\n    if (goodDirs / (float) totalConfiguredDirs < minNeededHealthyDisksFactor) {\r\n        return false;\r\n    }\r\n    goodDirs = getLogDirs().size();\r\n    failedDirs = logDirs.getFailedDirs().size();\r\n    totalConfiguredDirs = goodDirs + failedDirs;\r\n    if (goodDirs / (float) totalConfiguredDirs < minNeededHealthyDisksFactor) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "isHealthy",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isHealthy()\n{\r\n    return areDisksHealthy();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getLastDisksCheckTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getLastDisksCheckTime()\n{\r\n    return lastDisksCheckTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getLastHealthReportTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getLastHealthReportTime()\n{\r\n    return getLastDisksCheckTime();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "isGoodLocalDir",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isGoodLocalDir(String path)\n{\r\n    return isInGoodDirs(getLocalDirs(), path);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "isGoodLogDir",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isGoodLogDir(String path)\n{\r\n    return isInGoodDirs(getLogDirs(), path);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "isInGoodDirs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isInGoodDirs(List<String> goodDirs, String path)\n{\r\n    for (String goodDir : goodDirs) {\r\n        if (path.startsWith(goodDir)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "updateDirsAfterTest",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void updateDirsAfterTest()\n{\r\n    Configuration conf = getConfig();\r\n    List<String> localDirs = getLocalDirs();\r\n    conf.setStrings(NM_GOOD_LOCAL_DIRS, localDirs.toArray(new String[localDirs.size()]));\r\n    List<String> logDirs = getLogDirs();\r\n    conf.setStrings(NM_GOOD_LOG_DIRS, logDirs.toArray(new String[logDirs.size()]));\r\n    if (!areDisksHealthy()) {\r\n        LOG.error(\"Most of the disks failed. \" + getDisksHealthReport(false));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "logDiskStatus",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void logDiskStatus(boolean newDiskFailure, boolean diskTurnedGood)\n{\r\n    if (newDiskFailure) {\r\n        String report = getDisksHealthReport(false);\r\n        LOG.info(\"Disk(s) failed: \" + report);\r\n    }\r\n    if (diskTurnedGood) {\r\n        String report = getDisksHealthReport(true);\r\n        LOG.info(\"Disk(s) turned good: \" + report);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "checkDirs",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void checkDirs()\n{\r\n    boolean disksStatusChange = false;\r\n    Set<String> failedLocalDirsPreCheck = new HashSet<String>(localDirs.getFailedDirs());\r\n    Set<String> failedLogDirsPreCheck = new HashSet<String>(logDirs.getFailedDirs());\r\n    if (localDirs.checkDirs()) {\r\n        disksStatusChange = true;\r\n    }\r\n    if (logDirs.checkDirs()) {\r\n        disksStatusChange = true;\r\n    }\r\n    Set<String> failedLocalDirsPostCheck = new HashSet<String>(localDirs.getFailedDirs());\r\n    Set<String> failedLogDirsPostCheck = new HashSet<String>(logDirs.getFailedDirs());\r\n    boolean disksFailed = false;\r\n    boolean disksTurnedGood = false;\r\n    disksFailed = disksTurnedBad(failedLocalDirsPreCheck, failedLocalDirsPostCheck);\r\n    disksTurnedGood = disksTurnedGood(failedLocalDirsPreCheck, failedLocalDirsPostCheck);\r\n    if (!disksFailed) {\r\n        disksFailed = disksTurnedBad(failedLogDirsPreCheck, failedLogDirsPostCheck);\r\n    }\r\n    if (!disksTurnedGood) {\r\n        disksTurnedGood = disksTurnedGood(failedLogDirsPreCheck, failedLogDirsPostCheck);\r\n    }\r\n    logDiskStatus(disksFailed, disksTurnedGood);\r\n    if (disksStatusChange) {\r\n        updateDirsAfterTest();\r\n    }\r\n    updateMetrics();\r\n    lastDisksCheckTime = System.currentTimeMillis();\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "disksTurnedBad",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean disksTurnedBad(Set<String> preCheckFailedDirs, Set<String> postCheckDirs)\n{\r\n    boolean disksFailed = false;\r\n    for (String dir : postCheckDirs) {\r\n        if (!preCheckFailedDirs.contains(dir)) {\r\n            disksFailed = true;\r\n            break;\r\n        }\r\n    }\r\n    return disksFailed;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "disksTurnedGood",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean disksTurnedGood(Set<String> preCheckDirs, Set<String> postCheckDirs)\n{\r\n    boolean disksTurnedGood = false;\r\n    for (String dir : preCheckDirs) {\r\n        if (!postCheckDirs.contains(dir)) {\r\n            disksTurnedGood = true;\r\n            break;\r\n        }\r\n    }\r\n    return disksTurnedGood;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getPathToRead",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "Path getPathToRead(String pathStr, List<String> dirs) throws IOException\n{\r\n    if (pathStr.startsWith(\"/\")) {\r\n        pathStr = pathStr.substring(1);\r\n    }\r\n    FileSystem localFS = FileSystem.getLocal(getConfig());\r\n    for (String dir : dirs) {\r\n        try {\r\n            Path tmpDir = new Path(dir);\r\n            File tmpFile = tmpDir.isAbsolute() ? new File(localFS.makeQualified(tmpDir).toUri()) : new File(dir);\r\n            Path file = new Path(tmpFile.getPath(), pathStr);\r\n            if (localFS.exists(file)) {\r\n                return file;\r\n            }\r\n        } catch (IOException ie) {\r\n            LOG.warn(\"Failed to find \" + pathStr + \" at \" + dir, ie);\r\n        }\r\n    }\r\n    throw new IOException(\"Could not find \" + pathStr + \" in any of\" + \" the directories\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getLocalPathForWrite",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getLocalPathForWrite(String pathStr) throws IOException\n{\r\n    return localDirsAllocator.getLocalPathForWrite(pathStr, getConfig());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getLocalPathForWrite",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getLocalPathForWrite(String pathStr, long size, boolean checkWrite) throws IOException\n{\r\n    return localDirsAllocator.getLocalPathForWrite(pathStr, size, getConfig(), checkWrite);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getLocalPathForRead",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getLocalPathForRead(String pathStr) throws IOException\n{\r\n    return getPathToRead(pathStr, getLocalDirsForRead());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getAllLocalPathsForRead",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Iterable<Path> getAllLocalPathsForRead(String pathStr) throws IOException\n{\r\n    return localDirsAllocator.getAllLocalPathsToRead(pathStr, getConfig());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getLogPathForWrite",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getLogPathForWrite(String pathStr, boolean checkWrite) throws IOException\n{\r\n    return logDirsAllocator.getLocalPathForWrite(pathStr, LocalDirAllocator.SIZE_UNKNOWN, getConfig(), checkWrite);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getLogPathToRead",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getLogPathToRead(String pathStr) throws IOException\n{\r\n    return getPathToRead(pathStr, getLogDirsForRead());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "validatePaths",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "String[] validatePaths(String[] paths)\n{\r\n    ArrayList<String> validPaths = new ArrayList<String>();\r\n    for (int i = 0; i < paths.length; ++i) {\r\n        try {\r\n            URI uriPath = (new Path(paths[i])).toUri();\r\n            if (uriPath.getScheme() == null || uriPath.getScheme().equals(FILE_SCHEME)) {\r\n                validPaths.add(new Path(uriPath.getPath()).toString());\r\n            } else {\r\n                LOG.warn(paths[i] + \" is not a valid path. Path should be with \" + FILE_SCHEME + \" scheme or without scheme\");\r\n                throw new YarnRuntimeException(paths[i] + \" is not a valid path. Path should be with \" + FILE_SCHEME + \" scheme or without scheme\");\r\n            }\r\n        } catch (IllegalArgumentException e) {\r\n            LOG.warn(e.getMessage());\r\n            throw new YarnRuntimeException(paths[i] + \" is not a valid path. Path should be with \" + FILE_SCHEME + \" scheme or without scheme\");\r\n        }\r\n    }\r\n    String[] arrValidPaths = new String[validPaths.size()];\r\n    validPaths.toArray(arrValidPaths);\r\n    return arrValidPaths;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "updateMetrics",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void updateMetrics()\n{\r\n    if (nodeManagerMetrics != null) {\r\n        nodeManagerMetrics.setBadLocalDirs(localDirs.getFailedDirs().size());\r\n        nodeManagerMetrics.setBadLogDirs(logDirs.getFailedDirs().size());\r\n        nodeManagerMetrics.setGoodLocalDirsDiskUtilizationPerc(localDirs.getGoodDirsDiskUtilizationPercentage());\r\n        nodeManagerMetrics.setGoodLogDirsDiskUtilizationPerc(logDirs.getGoodDirsDiskUtilizationPercentage());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "buildDiskErrorReport",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "String buildDiskErrorReport(List<String> dirs, DirectoryCollection directoryCollection)\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\" [ \");\r\n    for (int i = 0; i < dirs.size(); i++) {\r\n        final String dirName = dirs.get(i);\r\n        if (directoryCollection.isDiskUnHealthy(dirName)) {\r\n            sb.append(dirName + \" : \" + directoryCollection.getDirectoryErrorInfo(dirName).message);\r\n        } else {\r\n            sb.append(dirName + \" : \" + \"Unknown cause for disk error\");\r\n        }\r\n        if (i != (dirs.size() - 1)) {\r\n            sb.append(\" , \");\r\n        }\r\n    }\r\n    sb.append(\" ] \");\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "getContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Container getContainer()\n{\r\n    return container;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "serviceStart",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    Configuration conf = getConfig();\r\n    Map<String, String> params = new HashMap<String, String>();\r\n    Map<String, String> terminalParams = new HashMap<String, String>();\r\n    terminalParams.put(\"resourceBase\", WebServer.class.getClassLoader().getResource(\"TERMINAL\").toExternalForm());\r\n    terminalParams.put(\"dirAllowed\", \"false\");\r\n    terminalParams.put(\"pathInfoOnly\", \"true\");\r\n    String bindAddress = WebAppUtils.getWebAppBindURL(conf, YarnConfiguration.NM_BIND_HOST, WebAppUtils.getNMWebAppURLWithoutScheme(conf));\r\n    boolean enableCors = conf.getBoolean(YarnConfiguration.NM_WEBAPP_ENABLE_CORS_FILTER, YarnConfiguration.DEFAULT_NM_WEBAPP_ENABLE_CORS_FILTER);\r\n    if (enableCors) {\r\n        getConfig().setBoolean(HttpCrossOriginFilterInitializer.PREFIX + HttpCrossOriginFilterInitializer.ENABLED_SUFFIX, true);\r\n    }\r\n    boolean hasHadoopAuthFilterInitializer = false;\r\n    String filterInitializerConfKey = \"hadoop.http.filter.initializers\";\r\n    Class<?>[] initializersClasses = conf.getClasses(filterInitializerConfKey);\r\n    List<String> targets = new ArrayList<String>();\r\n    if (initializersClasses != null) {\r\n        for (Class<?> initializer : initializersClasses) {\r\n            if (initializer.getName().equals(AuthenticationFilterInitializer.class.getName())) {\r\n                hasHadoopAuthFilterInitializer = true;\r\n                break;\r\n            }\r\n            targets.add(initializer.getName());\r\n        }\r\n    }\r\n    if (!hasHadoopAuthFilterInitializer) {\r\n        targets.add(AuthenticationFilterInitializer.class.getName());\r\n        conf.set(filterInitializerConfKey, StringUtils.join(\",\", targets));\r\n    }\r\n    ContainerShellWebSocket.init(nmContext);\r\n    LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\r\n    try {\r\n        this.webApp = WebApps.$for(\"node\", Context.class, this.nmContext, \"ws\").at(bindAddress).withServlet(\"ContainerShellWebSocket\", \"/container/*\", ContainerShellWebSocketServlet.class, params, false).withServlet(\"Terminal\", \"/terminal/*\", TerminalServlet.class, terminalParams, false).with(conf).withHttpSpnegoPrincipalKey(YarnConfiguration.NM_WEBAPP_SPNEGO_USER_NAME_KEY).withHttpSpnegoKeytabKey(YarnConfiguration.NM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY).withCSRFProtection(YarnConfiguration.NM_CSRF_PREFIX).withXFSProtection(YarnConfiguration.NM_XFS_PREFIX).start(this.nmWebApp);\r\n        this.port = this.webApp.httpServer().getConnectorAddress(0).getPort();\r\n    } catch (Exception e) {\r\n        String msg = \"NMWebapps failed to start.\";\r\n        LOG.error(msg, e);\r\n        throw new YarnRuntimeException(msg, e);\r\n    }\r\n    super.serviceStart();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getPort",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getPort()\n{\r\n    return this.port;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    if (this.webApp != null) {\r\n        LOG.debug(\"Stopping webapp\");\r\n        this.webApp.stop();\r\n    }\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getNMStartupTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getNMStartupTime()\n{\r\n    return nmStartupTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createNodeStatusUpdater",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeStatusUpdater createNodeStatusUpdater(Context context, Dispatcher dispatcher, NodeHealthCheckerService healthChecker)\n{\r\n    return new NodeStatusUpdaterImpl(context, dispatcher, healthChecker, metrics);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createNodeAttributesProvider",
  "errType" : [ "InstantiationException|IllegalAccessException|RuntimeException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "NodeAttributesProvider createNodeAttributesProvider(Configuration conf) throws IOException\n{\r\n    NodeAttributesProvider attributesProvider = null;\r\n    String providerString = conf.get(YarnConfiguration.NM_NODE_ATTRIBUTES_PROVIDER_CONFIG, null);\r\n    if (providerString == null || providerString.trim().length() == 0) {\r\n        return attributesProvider;\r\n    }\r\n    switch(providerString.trim().toLowerCase()) {\r\n        case YarnConfiguration.CONFIG_NODE_DESCRIPTOR_PROVIDER:\r\n            attributesProvider = new ConfigurationNodeAttributesProvider();\r\n            break;\r\n        case YarnConfiguration.SCRIPT_NODE_DESCRIPTOR_PROVIDER:\r\n            attributesProvider = new ScriptBasedNodeAttributesProvider();\r\n            break;\r\n        default:\r\n            try {\r\n                Class<? extends NodeAttributesProvider> labelsProviderClass = conf.getClass(YarnConfiguration.NM_NODE_ATTRIBUTES_PROVIDER_CONFIG, null, NodeAttributesProvider.class);\r\n                attributesProvider = labelsProviderClass.newInstance();\r\n            } catch (InstantiationException | IllegalAccessException | RuntimeException e) {\r\n                LOG.error(\"Failed to create NodeAttributesProvider\" + \" based on Configuration\", e);\r\n                throw new IOException(\"Failed to create NodeAttributesProvider : \" + e.getMessage(), e);\r\n            }\r\n    }\r\n    LOG.debug(\"Distributed Node Attributes is enabled with provider class\" + \" as : {}\", attributesProvider.getClass());\r\n    return attributesProvider;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createNodeLabelsProvider",
  "errType" : [ "InstantiationException|IllegalAccessException|RuntimeException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "NodeLabelsProvider createNodeLabelsProvider(Configuration conf) throws IOException\n{\r\n    NodeLabelsProvider provider = null;\r\n    String providerString = conf.get(YarnConfiguration.NM_NODE_LABELS_PROVIDER_CONFIG, null);\r\n    if (providerString == null || providerString.trim().length() == 0) {\r\n        return provider;\r\n    }\r\n    switch(providerString.trim().toLowerCase()) {\r\n        case YarnConfiguration.CONFIG_NODE_DESCRIPTOR_PROVIDER:\r\n            provider = new ConfigurationNodeLabelsProvider();\r\n            break;\r\n        case YarnConfiguration.SCRIPT_NODE_DESCRIPTOR_PROVIDER:\r\n            provider = new ScriptBasedNodeLabelsProvider();\r\n            break;\r\n        default:\r\n            try {\r\n                Class<? extends NodeLabelsProvider> labelsProviderClass = conf.getClass(YarnConfiguration.NM_NODE_LABELS_PROVIDER_CONFIG, null, NodeLabelsProvider.class);\r\n                provider = labelsProviderClass.newInstance();\r\n            } catch (InstantiationException | IllegalAccessException | RuntimeException e) {\r\n                LOG.error(\"Failed to create NodeLabelsProvider based on Configuration\", e);\r\n                throw new IOException(\"Failed to create NodeLabelsProvider : \" + e.getMessage(), e);\r\n            }\r\n    }\r\n    LOG.debug(\"Distributed Node Labels is enabled\" + \" with provider class as : {}\", provider.getClass());\r\n    return provider;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createNodeResourceMonitor",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeResourceMonitor createNodeResourceMonitor()\n{\r\n    return new NodeResourceMonitorImpl(context);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createContainerManager",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerManagerImpl createContainerManager(Context context, ContainerExecutor exec, DeletionService del, NodeStatusUpdater nodeStatusUpdater, ApplicationACLsManager aclsManager, LocalDirsHandlerService dirsHandler)\n{\r\n    return new ContainerManagerImpl(context, exec, del, nodeStatusUpdater, metrics, dirsHandler);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createNMCollectorService",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NMCollectorService createNMCollectorService(Context ctxt)\n{\r\n    return new NMCollectorService(ctxt);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createWebServer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "WebServer createWebServer(Context nmContext, ResourceView resourceView, ApplicationACLsManager aclsManager, LocalDirsHandlerService dirsHandler)\n{\r\n    return new WebServer(nmContext, resourceView, aclsManager, dirsHandler);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createDeletionService",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "DeletionService createDeletionService(ContainerExecutor exec)\n{\r\n    return new DeletionService(exec, nmStore);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createNMContext",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "NMContext createNMContext(NMContainerTokenSecretManager containerTokenSecretManager, NMTokenSecretManagerInNM nmTokenSecretManager, NMStateStoreService stateStore, boolean isDistSchedulerEnabled, Configuration conf)\n{\r\n    List<ContainerStateTransitionListener> listeners = conf.getInstances(YarnConfiguration.NM_CONTAINER_STATE_TRANSITION_LISTENERS, ContainerStateTransitionListener.class);\r\n    NMContext nmContext = new NMContext(containerTokenSecretManager, nmTokenSecretManager, dirsHandler, aclsManager, stateStore, isDistSchedulerEnabled, conf);\r\n    nmContext.setNodeManagerMetrics(metrics);\r\n    DefaultContainerStateListener defaultListener = new DefaultContainerStateListener();\r\n    nmContext.setContainerStateTransitionListener(defaultListener);\r\n    defaultListener.init(nmContext);\r\n    for (ContainerStateTransitionListener listener : listeners) {\r\n        listener.init(nmContext);\r\n        defaultListener.addListener(listener);\r\n    }\r\n    return nmContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "doSecureLogin",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void doSecureLogin() throws IOException\n{\r\n    SecurityUtil.login(getConfig(), YarnConfiguration.NM_KEYTAB, YarnConfiguration.NM_PRINCIPAL);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "initAndStartRecoveryStore",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void initAndStartRecoveryStore(Configuration conf) throws IOException\n{\r\n    boolean recoveryEnabled = conf.getBoolean(YarnConfiguration.NM_RECOVERY_ENABLED, YarnConfiguration.DEFAULT_NM_RECOVERY_ENABLED);\r\n    if (recoveryEnabled) {\r\n        FileSystem recoveryFs = FileSystem.getLocal(conf);\r\n        String recoveryDirName = conf.get(YarnConfiguration.NM_RECOVERY_DIR);\r\n        if (recoveryDirName == null) {\r\n            throw new IllegalArgumentException(\"Recovery is enabled but \" + YarnConfiguration.NM_RECOVERY_DIR + \" is not set.\");\r\n        }\r\n        Path recoveryRoot = new Path(recoveryDirName);\r\n        recoveryFs.mkdirs(recoveryRoot, new FsPermission((short) 0700));\r\n        nmStore = new NMLeveldbStateStoreService();\r\n    } else {\r\n        nmStore = new NMNullStateStoreService();\r\n    }\r\n    nmStore.init(conf);\r\n    nmStore.start();\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "stopRecoveryStore",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void stopRecoveryStore() throws IOException\n{\r\n    if (null != nmStore) {\r\n        nmStore.stop();\r\n        if (null != context) {\r\n            if (context.getDecommissioned() && nmStore.canRecover()) {\r\n                LOG.info(\"Removing state store due to decommission\");\r\n                Configuration conf = getConfig();\r\n                Path recoveryRoot = new Path(conf.get(YarnConfiguration.NM_RECOVERY_DIR));\r\n                LOG.info(\"Removing state store at \" + recoveryRoot + \" due to decommission\");\r\n                FileSystem recoveryFs = FileSystem.getLocal(conf);\r\n                if (!recoveryFs.delete(recoveryRoot, true)) {\r\n                    LOG.warn(\"Unable to delete \" + recoveryRoot);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "recoverTokens",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void recoverTokens(NMTokenSecretManagerInNM nmTokenSecretManager, NMContainerTokenSecretManager containerTokenSecretManager) throws IOException\n{\r\n    if (nmStore.canRecover()) {\r\n        nmTokenSecretManager.recover();\r\n        containerTokenSecretManager.recover();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createResourcePluginManager",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourcePluginManager createResourcePluginManager()\n{\r\n    return new ResourcePluginManager();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createContainerExecutor",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerExecutor createContainerExecutor(Configuration conf)\n{\r\n    return ReflectionUtils.newInstance(conf.getClass(YarnConfiguration.NM_CONTAINER_EXECUTOR, DefaultContainerExecutor.class, ContainerExecutor.class), conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "serviceInit",
  "errType" : [ "IOException", "IOException", "IOException" ],
  "containingMethodsNum" : 55,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    UserGroupInformation.setConfiguration(conf);\r\n    rmWorkPreservingRestartEnabled = conf.getBoolean(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED, YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\r\n    try {\r\n        initAndStartRecoveryStore(conf);\r\n    } catch (IOException e) {\r\n        String recoveryDirName = conf.get(YarnConfiguration.NM_RECOVERY_DIR);\r\n        throw new YarnRuntimeException(\"Unable to initialize recovery directory at \" + recoveryDirName, e);\r\n    }\r\n    NMContainerTokenSecretManager containerTokenSecretManager = new NMContainerTokenSecretManager(conf, nmStore);\r\n    NMTokenSecretManagerInNM nmTokenSecretManager = new NMTokenSecretManagerInNM(nmStore);\r\n    recoverTokens(nmTokenSecretManager, containerTokenSecretManager);\r\n    this.aclsManager = new ApplicationACLsManager(conf);\r\n    this.dirsHandler = new LocalDirsHandlerService(metrics);\r\n    boolean isDistSchedulingEnabled = conf.getBoolean(YarnConfiguration.DIST_SCHEDULING_ENABLED, YarnConfiguration.DEFAULT_DIST_SCHEDULING_ENABLED);\r\n    this.context = createNMContext(containerTokenSecretManager, nmTokenSecretManager, nmStore, isDistSchedulingEnabled, conf);\r\n    ResourcePluginManager pluginManager = createResourcePluginManager();\r\n    pluginManager.initialize(context);\r\n    ((NMContext) context).setResourcePluginManager(pluginManager);\r\n    ContainerExecutor exec = createContainerExecutor(conf);\r\n    try {\r\n        exec.init(context);\r\n    } catch (IOException e) {\r\n        throw new YarnRuntimeException(\"Failed to initialize container executor\", e);\r\n    }\r\n    DeletionService del = createDeletionService(exec);\r\n    addService(del);\r\n    this.dispatcher = createNMDispatcher();\r\n    this.nodeHealthChecker = new NodeHealthCheckerService(dirsHandler);\r\n    addService(nodeHealthChecker);\r\n    ((NMContext) context).setContainerExecutor(exec);\r\n    ((NMContext) context).setDeletionService(del);\r\n    nodeStatusUpdater = createNodeStatusUpdater(context, dispatcher, nodeHealthChecker);\r\n    nodeLabelsProvider = createNodeLabelsProvider(conf);\r\n    if (nodeLabelsProvider != null) {\r\n        addIfService(nodeLabelsProvider);\r\n        nodeStatusUpdater.setNodeLabelsProvider(nodeLabelsProvider);\r\n    }\r\n    nodeAttributesProvider = createNodeAttributesProvider(conf);\r\n    if (nodeAttributesProvider != null) {\r\n        addIfService(nodeAttributesProvider);\r\n        nodeStatusUpdater.setNodeAttributesProvider(nodeAttributesProvider);\r\n    }\r\n    nodeResourceMonitor = createNodeResourceMonitor();\r\n    addService(nodeResourceMonitor);\r\n    ((NMContext) context).setNodeResourceMonitor(nodeResourceMonitor);\r\n    containerManager = createContainerManager(context, exec, del, nodeStatusUpdater, this.aclsManager, dirsHandler);\r\n    addService(containerManager);\r\n    ((NMContext) context).setContainerManager(containerManager);\r\n    this.nmLogAggregationStatusTracker = createNMLogAggregationStatusTracker(context);\r\n    addService(nmLogAggregationStatusTracker);\r\n    ((NMContext) context).setNMLogAggregationStatusTracker(this.nmLogAggregationStatusTracker);\r\n    WebServer webServer = createWebServer(context, containerManager.getContainersMonitor(), this.aclsManager, dirsHandler);\r\n    addService(webServer);\r\n    ((NMContext) context).setWebServer(webServer);\r\n    int maxAllocationsPerAMHeartbeat = conf.getInt(YarnConfiguration.OPP_CONTAINER_MAX_ALLOCATIONS_PER_AM_HEARTBEAT, YarnConfiguration.DEFAULT_OPP_CONTAINER_MAX_ALLOCATIONS_PER_AM_HEARTBEAT);\r\n    ((NMContext) context).setQueueableContainerAllocator(new DistributedOpportunisticContainerAllocator(context.getContainerTokenSecretManager(), maxAllocationsPerAMHeartbeat));\r\n    dispatcher.register(ContainerManagerEventType.class, containerManager);\r\n    dispatcher.register(NodeManagerEventType.class, this);\r\n    addService(dispatcher);\r\n    pauseMonitor = new JvmPauseMonitor();\r\n    addService(pauseMonitor);\r\n    metrics.getJvmMetrics().setPauseMonitor(pauseMonitor);\r\n    DefaultMetricsSystem.initialize(\"NodeManager\");\r\n    if (YarnConfiguration.timelineServiceV2Enabled(conf)) {\r\n        this.nmCollectorService = createNMCollectorService(context);\r\n        addService(nmCollectorService);\r\n    }\r\n    addService(nodeStatusUpdater);\r\n    ((NMContext) context).setNodeStatusUpdater(nodeStatusUpdater);\r\n    nmStore.setNodeStatusUpdater(nodeStatusUpdater);\r\n    try {\r\n        doSecureLogin();\r\n    } catch (IOException e) {\r\n        throw new YarnRuntimeException(\"Failed NodeManager login\", e);\r\n    }\r\n    registerMXBean();\r\n    context.getContainerExecutor().start();\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    if (isStopping.getAndSet(true)) {\r\n        return;\r\n    }\r\n    try {\r\n        super.serviceStop();\r\n        DefaultMetricsSystem.shutdown();\r\n        if (null != context) {\r\n            context.getContainerExecutor().stop();\r\n            ResourcePluginManager rpm = context.getResourcePluginManager();\r\n            if (rpm != null) {\r\n                rpm.cleanup();\r\n            }\r\n        }\r\n    } finally {\r\n        stopRecoveryStore();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getName()\n{\r\n    return \"NodeManager\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "shutDown",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void shutDown(final int exitCode)\n{\r\n    new Thread() {\r\n\r\n        @Override\r\n        public void run() {\r\n            try {\r\n                NodeManager.this.stop();\r\n            } catch (Throwable t) {\r\n                LOG.error(\"Error while shutting down NodeManager\", t);\r\n            } finally {\r\n                if (shouldExitOnShutdownEvent && !ShutdownHookManager.get().isShutdownInProgress()) {\r\n                    ExitUtil.terminate(exitCode);\r\n                }\r\n            }\r\n        }\r\n    }.start();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "resyncWithRM",
  "errType" : [ "YarnRuntimeException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void resyncWithRM()\n{\r\n    if (this.resyncingWithRM.getAndSet(true)) {\r\n    } else {\r\n        new Thread() {\r\n\r\n            @Override\r\n            public void run() {\r\n                try {\r\n                    if (!rmWorkPreservingRestartEnabled) {\r\n                        LOG.info(\"Cleaning up running containers on resync\");\r\n                        containerManager.cleanupContainersOnNMResync();\r\n                        if (context.getKnownCollectors() != null) {\r\n                            context.getKnownCollectors().clear();\r\n                        }\r\n                    } else {\r\n                        LOG.info(\"Preserving containers on resync\");\r\n                        reregisterCollectors();\r\n                    }\r\n                    ((NodeStatusUpdaterImpl) nodeStatusUpdater).rebootNodeStatusUpdaterAndRegisterWithRM();\r\n                } catch (YarnRuntimeException e) {\r\n                    LOG.error(\"Error while rebooting NodeStatusUpdater.\", e);\r\n                    shutDown(NodeManagerStatus.EXCEPTION.getExitCode());\r\n                } finally {\r\n                    resyncingWithRM.set(false);\r\n                }\r\n            }\r\n        }.start();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "reregisterCollectors",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void reregisterCollectors()\n{\r\n    Map<ApplicationId, AppCollectorData> knownCollectors = context.getKnownCollectors();\r\n    if (knownCollectors == null) {\r\n        return;\r\n    }\r\n    ConcurrentMap<ApplicationId, AppCollectorData> registeringCollectors = context.getRegisteringCollectors();\r\n    for (Map.Entry<ApplicationId, AppCollectorData> entry : knownCollectors.entrySet()) {\r\n        Application app = context.getApplications().get(entry.getKey());\r\n        if ((app != null) && !ApplicationState.FINISHED.equals(app.getApplicationState())) {\r\n            registeringCollectors.putIfAbsent(entry.getKey(), entry.getValue());\r\n            AppCollectorData data = entry.getValue();\r\n            LOG.debug(\"{} : {}@<{}, {}>\", entry.getKey(), data.getCollectorAddr(), data.getRMIdentifier(), data.getVersion());\r\n        } else {\r\n            LOG.debug(\"Remove collector data for done app {}\", entry.getKey());\r\n        }\r\n    }\r\n    knownCollectors.clear();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getNodeHealthChecker",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeHealthCheckerService getNodeHealthChecker()\n{\r\n    return nodeHealthChecker;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "initAndStartNodeManager",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void initAndStartNodeManager(Configuration conf, boolean hasToReboot)\n{\r\n    try {\r\n        if (!Shell.WINDOWS) {\r\n            if (!Shell.checkIsBashSupported()) {\r\n                String message = \"Failing NodeManager start since we're on a \" + \"Unix-based system but bash doesn't seem to be available.\";\r\n                LOG.error(message);\r\n                throw new YarnRuntimeException(message);\r\n            }\r\n        }\r\n        if (hasToReboot && null != nodeManagerShutdownHook) {\r\n            ShutdownHookManager.get().removeShutdownHook(nodeManagerShutdownHook);\r\n        }\r\n        nodeManagerShutdownHook = new CompositeServiceShutdownHook(this);\r\n        ShutdownHookManager.get().addShutdownHook(nodeManagerShutdownHook, SHUTDOWN_HOOK_PRIORITY);\r\n        this.shouldExitOnShutdownEvent = true;\r\n        this.init(conf);\r\n        this.start();\r\n    } catch (Throwable t) {\r\n        LOG.error(\"Error starting NodeManager\", t);\r\n        System.exit(-1);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "handle",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void handle(NodeManagerEvent event)\n{\r\n    switch(event.getType()) {\r\n        case SHUTDOWN:\r\n            shutDown(NodeManagerStatus.NO_ERROR.getExitCode());\r\n            break;\r\n        case RESYNC:\r\n            resyncWithRM();\r\n            break;\r\n        default:\r\n            LOG.warn(\"Invalid shutdown event \" + event.getType() + \". Ignoring.\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "registerMXBean",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void registerMXBean()\n{\r\n    MBeans.register(\"NodeManager\", \"NodeManager\", this);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "isSecurityEnabled",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isSecurityEnabled()\n{\r\n    return UserGroupInformation.isSecurityEnabled();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createNewNodeManager",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeManager createNewNodeManager()\n{\r\n    return new NodeManager();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getContainerManager",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerManagerImpl getContainerManager()\n{\r\n    return containerManager;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createNMDispatcher",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AsyncDispatcher createNMDispatcher()\n{\r\n    return new AsyncDispatcher(\"NM Event dispatcher\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getNMDispatcher",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Dispatcher getNMDispatcher()\n{\r\n    return dispatcher;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getNMContext",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Context getNMContext()\n{\r\n    return this.context;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getNMCollectorService",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NMCollectorService getNMCollectorService()\n{\r\n    return this.nmCollectorService;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "main",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void main(String[] args) throws IOException\n{\r\n    Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\r\n    StringUtils.startupShutdownMessage(NodeManager.class, args, LOG);\r\n    @SuppressWarnings(\"resource\")\r\n    NodeManager nodeManager = new NodeManager();\r\n    Configuration conf = new YarnConfiguration();\r\n    new GenericOptionsParser(conf, args);\r\n    nodeManager.initAndStartNodeManager(conf, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getNodeStatusUpdater",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeStatusUpdater getNodeStatusUpdater()\n{\r\n    return nodeStatusUpdater;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createNMLogAggregationStatusTracker",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NMLogAggregationStatusTracker createNMLogAggregationStatusTracker(Context ctxt)\n{\r\n    return new NMLogAggregationStatusTracker(ctxt);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\runc",
  "methodName" : "getManifestFromImageTag",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "ImageManifest getManifestFromImageTag(String imageTag) throws IOException\n{\r\n    String hash = getHashFromImageTag(imageTag);\r\n    ImageManifest manifest = manifestCache.get(hash);\r\n    if (manifest != null) {\r\n        return manifest;\r\n    }\r\n    Path manifestPath = new Path(manifestDir + hash);\r\n    FileSystem fs = manifestPath.getFileSystem(conf);\r\n    FSDataInputStream input;\r\n    try {\r\n        input = fs.open(manifestPath);\r\n    } catch (IllegalArgumentException iae) {\r\n        throw new IOException(\"Manifest file is not a valid HDFS file: \" + manifestPath.toString(), iae);\r\n    }\r\n    byte[] bytes = IOUtils.toByteArray(input);\r\n    manifest = objMapper.readValue(bytes, ImageManifest.class);\r\n    manifestCache.put(hash, manifest);\r\n    return manifest;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\runc",
  "methodName" : "getHashFromImageTag",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String getHashFromImageTag(String imageTag)\n{\r\n    String hash;\r\n    Map<String, String> localImageToHashCacheMap = localImageToHashCache.get();\r\n    Map<String, String> hdfsImageToHashCacheMap = hdfsImageToHashCache.get();\r\n    hash = localImageToHashCacheMap.get(imageTag);\r\n    if (hash == null) {\r\n        hash = hdfsImageToHashCacheMap.get(imageTag);\r\n        if (hash == null) {\r\n            hash = imageTag;\r\n        }\r\n    }\r\n    return hash;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\runc",
  "methodName" : "getLocalImageToHashReader",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "BufferedReader getLocalImageToHashReader() throws IOException\n{\r\n    if (localImageTagToHashFile == null) {\r\n        LOG.debug(\"Did not load local image to hash file, \" + \"file is null\");\r\n        return null;\r\n    }\r\n    File imageTagToHashFile = new File(localImageTagToHashFile);\r\n    if (!imageTagToHashFile.exists()) {\r\n        LOG.debug(\"Did not load local image to hash file, \" + \"file doesn't exist\");\r\n        return null;\r\n    }\r\n    long newLocalModTime = imageTagToHashFile.lastModified();\r\n    if (newLocalModTime == localModTime) {\r\n        LOG.debug(\"Did not load local image to hash file, \" + \"file is unmodified\");\r\n        return null;\r\n    }\r\n    localModTime = newLocalModTime;\r\n    return new BufferedReader(new InputStreamReader(new FileInputStream(imageTagToHashFile), StandardCharsets.UTF_8));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\runc",
  "methodName" : "getHdfsImageToHashReader",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "BufferedReader getHdfsImageToHashReader() throws IOException\n{\r\n    if (hdfsImageToHashFile == null) {\r\n        LOG.debug(\"Did not load hdfs image to hash file, \" + \"file is null\");\r\n        return null;\r\n    }\r\n    Path imageToHash = new Path(hdfsImageToHashFile);\r\n    FileSystem fs = imageToHash.getFileSystem(conf);\r\n    if (!fs.exists(imageToHash)) {\r\n        LOG.debug(\"Did not load hdfs image to hash file, \" + \"file doesn't exist\");\r\n        return null;\r\n    }\r\n    long newHdfsModTime = fs.getFileStatus(imageToHash).getModificationTime();\r\n    if (newHdfsModTime == hdfsModTime) {\r\n        LOG.debug(\"Did not load hdfs image to hash file, \" + \"file is unmodified\");\r\n        return null;\r\n    }\r\n    hdfsModTime = newHdfsModTime;\r\n    return new BufferedReader(new InputStreamReader(fs.open(imageToHash), StandardCharsets.UTF_8));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\runc",
  "methodName" : "readImageToHashFile",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "Map<String, String> readImageToHashFile(BufferedReader br) throws IOException\n{\r\n    if (br == null) {\r\n        return null;\r\n    }\r\n    String line;\r\n    Map<String, String> imageToHashCache = new HashMap<>();\r\n    while ((line = br.readLine()) != null) {\r\n        int index;\r\n        index = line.indexOf(\"#\");\r\n        if (index == 0) {\r\n            continue;\r\n        } else if (index != -1) {\r\n            line = line.substring(0, index);\r\n        }\r\n        index = line.lastIndexOf(\":\");\r\n        if (index == -1) {\r\n            LOG.warn(\"Malformed imageTagToManifest entry: \" + line);\r\n            continue;\r\n        }\r\n        String imageTags = line.substring(0, index);\r\n        String[] imageTagArray = imageTags.split(\",\");\r\n        String hash = line.substring(index + 1);\r\n        if (!hash.matches(ALPHA_NUMERIC) || hash.length() != SHA256_HASH_LENGTH) {\r\n            LOG.warn(\"Malformed image hash: \" + hash);\r\n            continue;\r\n        }\r\n        for (String imageTag : imageTagArray) {\r\n            imageToHashCache.put(imageTag, hash);\r\n        }\r\n    }\r\n    return imageToHashCache;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\runc",
  "methodName" : "loadImageToHashFiles",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "boolean loadImageToHashFiles() throws IOException\n{\r\n    boolean ret = false;\r\n    try (BufferedReader localBr = getLocalImageToHashReader();\r\n        BufferedReader hdfsBr = getHdfsImageToHashReader()) {\r\n        Map<String, String> localImageToHash = readImageToHashFile(localBr);\r\n        Map<String, String> hdfsImageToHash = readImageToHashFile(hdfsBr);\r\n        Map<String, String> tmpLocalImageToHash = localImageToHashCache.get();\r\n        Map<String, String> tmpHdfsImageToHash = hdfsImageToHashCache.get();\r\n        if (localImageToHash != null && !localImageToHash.equals(tmpLocalImageToHash)) {\r\n            localImageToHashCache.set(localImageToHash);\r\n            LOG.info(\"Reloaded local image tag to hash cache\");\r\n            ret = true;\r\n        }\r\n        if (hdfsImageToHash != null && !hdfsImageToHash.equals(tmpHdfsImageToHash)) {\r\n            hdfsImageToHashCache.set(hdfsImageToHash);\r\n            LOG.info(\"Reloaded hdfs image tag to hash cache\");\r\n            ret = true;\r\n        }\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\runc",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void serviceInit(Configuration configuration) throws Exception\n{\r\n    super.serviceInit(configuration);\r\n    this.conf = configuration;\r\n    localImageTagToHashFile = conf.get(NM_LOCAL_RUNC_IMAGE_TAG_TO_HASH_FILE);\r\n    if (localImageTagToHashFile == null) {\r\n        LOG.debug(\"Failed to load local runC image to hash file. \" + \"Config not set\");\r\n    }\r\n    hdfsImageToHashFile = conf.get(NM_HDFS_RUNC_IMAGE_TAG_TO_HASH_FILE);\r\n    if (hdfsImageToHashFile == null) {\r\n        LOG.debug(\"Failed to load HDFS runC image to hash file. Config not set\");\r\n    }\r\n    if (hdfsImageToHashFile == null && localImageTagToHashFile == null) {\r\n        LOG.warn(\"No valid image-tag-to-hash files\");\r\n    }\r\n    manifestDir = conf.get(NM_RUNC_IMAGE_TOPLEVEL_DIR, DEFAULT_NM_RUNC_IMAGE_TOPLEVEL_DIR) + \"/manifests/\";\r\n    int numManifestsToCache = conf.getInt(NM_RUNC_NUM_MANIFESTS_TO_CACHE, DEFAULT_NUM_MANIFESTS_TO_CACHE);\r\n    this.objMapper = new ObjectMapper();\r\n    this.manifestCache = Collections.synchronizedMap(new LRUCache(numManifestsToCache, 0.75f));\r\n    exec = HadoopExecutors.newScheduledThreadPool(1);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\runc",
  "methodName" : "serviceStart",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    super.serviceStart();\r\n    if (!loadImageToHashFiles()) {\r\n        LOG.warn(\"Couldn't load any image-tag-to-hash-files\");\r\n    }\r\n    int runcCacheRefreshInterval = conf.getInt(NM_RUNC_CACHE_REFRESH_INTERVAL, DEFAULT_NM_RUNC_CACHE_REFRESH_INTERVAL);\r\n    exec = HadoopExecutors.newScheduledThreadPool(1);\r\n    exec.scheduleWithFixedDelay(new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r\n            try {\r\n                loadImageToHashFiles();\r\n            } catch (Exception e) {\r\n                LOG.warn(\"runC cache refresh thread caught an exception: \", e);\r\n            }\r\n        }\r\n    }, runcCacheRefreshInterval, runcCacheRefreshInterval, TimeUnit.SECONDS);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\runc",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    super.serviceStop();\r\n    exec.shutdownNow();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getContainerID",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerId getContainerID()\n{\r\n    return containerID;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\event",
  "methodName" : "getLocalResourceRequest",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LocalResourceRequest getLocalResourceRequest()\n{\r\n    return rsrc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "bootstrap",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "List<PrivilegedOperation> bootstrap(Configuration configuration) throws ResourceHandlerException\n{\r\n    conf = configuration;\r\n    cGroupsHandler.initializeCGroupController(CGroupsHandler.CGroupController.NET_CLS);\r\n    this.tagMappingManager = createNetworkTagMappingManager(conf);\r\n    this.tagMappingManager.initialize(conf);\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "preStart",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "List<PrivilegedOperation> preStart(Container container) throws ResourceHandlerException\n{\r\n    String containerIdStr = container.getContainerId().toString();\r\n    String classIdStr = this.tagMappingManager.getNetworkTagHexID(container);\r\n    cGroupsHandler.createCGroup(CGroupsHandler.CGroupController.NET_CLS, containerIdStr);\r\n    cGroupsHandler.updateCGroupParam(CGroupsHandler.CGroupController.NET_CLS, containerIdStr, CGroupsHandler.CGROUP_PARAM_CLASSID, classIdStr);\r\n    String tasksFile = cGroupsHandler.getPathForCGroupTasks(CGroupsHandler.CGroupController.NET_CLS, containerIdStr);\r\n    String opArg = new StringBuffer(PrivilegedOperation.CGROUP_ARG_PREFIX).append(tasksFile).toString();\r\n    List<PrivilegedOperation> ops = new ArrayList<>();\r\n    ops.add(new PrivilegedOperation(PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP, opArg));\r\n    return ops;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "reacquireContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<PrivilegedOperation> reacquireContainer(ContainerId containerId) throws ResourceHandlerException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "updateContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<PrivilegedOperation> updateContainer(Container container) throws ResourceHandlerException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "postComplete",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<PrivilegedOperation> postComplete(ContainerId containerId) throws ResourceHandlerException\n{\r\n    LOG.info(\"postComplete for container: \" + containerId.toString());\r\n    cGroupsHandler.deleteCGroup(CGroupsHandler.CGroupController.NET_CLS, containerId.toString());\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "teardown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<PrivilegedOperation> teardown() throws ResourceHandlerException\n{\r\n    LOG.debug(\"teardown(): Nothing to do\");\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "createNetworkTagMappingManager",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NetworkTagMappingManager createNetworkTagMappingManager(Configuration conf)\n{\r\n    return NetworkTagMappingManagerFactory.getManager(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return NetworkPacketTaggingHandlerImpl.class.getName();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "isHealthy",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isHealthy()\n{\r\n    return nodeHealthException == null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "getHealthReport",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getHealthReport()\n{\r\n    return nodeHealthException == null ? null : nodeHealthException.getMessage();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "getLastHealthReportTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getLastHealthReportTime()\n{\r\n    return nodeHealthExceptionReportTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "reportException",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void reportException(Exception ex)\n{\r\n    nodeHealthException = ex;\r\n    nodeHealthExceptionReportTime = System.currentTimeMillis();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    long taskInterval = conf.getLong(YarnConfiguration.NM_NODE_ATTRIBUTES_PROVIDER_FETCH_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_NODE_ATTRIBUTES_PROVIDER_FETCH_INTERVAL_MS);\r\n    this.setIntervalTime(taskInterval);\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "updateNodeAttributesFromConfig",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void updateNodeAttributesFromConfig(Configuration conf) throws IOException\n{\r\n    String configuredNodeAttributes = conf.get(YarnConfiguration.NM_PROVIDER_CONFIGURED_NODE_ATTRIBUTES, null);\r\n    setDescriptors(parseAttributes(configuredNodeAttributes));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "parseAttributes",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "Set<NodeAttribute> parseAttributes(String config) throws IOException\n{\r\n    if (Strings.isNullOrEmpty(config)) {\r\n        return ImmutableSet.of();\r\n    }\r\n    Set<NodeAttribute> attributeSet = new HashSet<>();\r\n    String[] attributeStrs = config.split(NODE_ATTRIBUTES_DELIMITER);\r\n    for (String attributeStr : attributeStrs) {\r\n        String[] fields = attributeStr.split(NODE_ATTRIBUTE_DELIMITER);\r\n        if (fields.length != 3) {\r\n            throw new IOException(\"Invalid value for \" + YarnConfiguration.NM_PROVIDER_CONFIGURED_NODE_ATTRIBUTES + \"=\" + config);\r\n        }\r\n        if (fields[0].contains(\"/\")) {\r\n            throw new IOException(\"Node attribute set in \" + YarnConfiguration.NM_PROVIDER_CONFIGURED_NODE_ATTRIBUTES + \" should not contain any prefix.\");\r\n        }\r\n        if (!EnumUtils.isValidEnum(NodeAttributeType.class, fields[1])) {\r\n            throw new IOException(\"Invalid node attribute type: \" + fields[1] + \", valid values are \" + Arrays.asList(NodeAttributeType.values()));\r\n        }\r\n        NodeAttribute na = NodeAttribute.newInstance(NodeAttribute.PREFIX_DISTRIBUTED, fields[0], NodeAttributeType.valueOf(fields[1]), fields[2]);\r\n        if (!attributeSet.add(na)) {\r\n            throw new IOException(\"Ambiguous node attribute is found: \" + na.toString() + \", a same attribute already exists\");\r\n        }\r\n    }\r\n    try {\r\n        NodeLabelUtil.validateNodeAttributes(attributeSet);\r\n    } catch (IOException e) {\r\n        throw new IOException(\"Node attributes set by configuration property: \" + YarnConfiguration.NM_PROVIDER_CONFIGURED_NODE_ATTRIBUTES + \" is not valid. Detail message: \" + e.getMessage());\r\n    }\r\n    return attributeSet;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "cleanUp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void cleanUp() throws Exception\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "createTimerTask",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimerTask createTimerTask()\n{\r\n    return new ConfigurationMonitorTimerTask();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\timelineservice",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    dispatcher = createDispatcher();\r\n    dispatcher.register(NMTimelineEventType.class, new ForwardingEventHandler());\r\n    addIfService(dispatcher);\r\n    this.nmLoginUGI = UserGroupInformation.isSecurityEnabled() ? UserGroupInformation.getLoginUser() : UserGroupInformation.getCurrentUser();\r\n    LOG.info(\"Initialized NMTimelinePublisher UGI to \" + nmLoginUGI);\r\n    String webAppURLWithoutScheme = WebAppUtils.getNMWebAppURLWithoutScheme(conf);\r\n    if (webAppURLWithoutScheme.contains(\":\")) {\r\n        httpPort = webAppURLWithoutScheme.split(\":\")[1];\r\n    }\r\n    publishNMContainerEvents = conf.getBoolean(YarnConfiguration.NM_PUBLISH_CONTAINER_EVENTS_ENABLED, YarnConfiguration.DEFAULT_NM_PUBLISH_CONTAINER_EVENTS_ENABLED);\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\timelineservice",
  "methodName" : "createDispatcher",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AsyncDispatcher createDispatcher()\n{\r\n    return new AsyncDispatcher(\"NM Timeline dispatcher\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\timelineservice",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    super.serviceStart();\r\n    this.nodeId = context.getNodeId();\r\n    this.httpAddress = nodeId.getHost() + \":\" + httpPort;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\timelineservice",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    for (ApplicationId app : appToClientMap.keySet()) {\r\n        stopTimelineClient(app);\r\n    }\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\timelineservice",
  "methodName" : "getAppToClientMap",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<ApplicationId, TimelineV2Client> getAppToClientMap()\n{\r\n    return appToClientMap;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\timelineservice",
  "methodName" : "handleNMTimelineEvent",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void handleNMTimelineEvent(NMTimelineEvent event)\n{\r\n    switch(event.getType()) {\r\n        case TIMELINE_ENTITY_PUBLISH:\r\n            putEntity(((TimelinePublishEvent) event).getTimelineEntityToPublish(), ((TimelinePublishEvent) event).getApplicationId());\r\n            break;\r\n        case STOP_TIMELINE_CLIENT:\r\n            removeAndStopTimelineClient(event.getApplicationId());\r\n            break;\r\n        default:\r\n            LOG.error(\"Unknown NMTimelineEvent type: \" + event.getType());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\timelineservice",
  "methodName" : "reportContainerResourceUsage",
  "errType" : [ "IOException", "YarnException" ],
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void reportContainerResourceUsage(Container container, Long pmemUsage, Float cpuUsagePercentPerCore)\n{\r\n    if (publishNMContainerEvents) {\r\n        if (pmemUsage != ResourceCalculatorProcessTree.UNAVAILABLE || cpuUsagePercentPerCore != ResourceCalculatorProcessTree.UNAVAILABLE) {\r\n            ContainerEntity entity = createContainerEntity(container.getContainerId());\r\n            long currentTimeMillis = System.currentTimeMillis();\r\n            if (pmemUsage != ResourceCalculatorProcessTree.UNAVAILABLE) {\r\n                TimelineMetric memoryMetric = new TimelineMetric();\r\n                memoryMetric.setId(ContainerMetric.MEMORY.toString());\r\n                memoryMetric.setRealtimeAggregationOp(TimelineMetricOperation.SUM);\r\n                memoryMetric.addValue(currentTimeMillis, pmemUsage);\r\n                entity.addMetric(memoryMetric);\r\n            }\r\n            if (cpuUsagePercentPerCore != ResourceCalculatorProcessTree.UNAVAILABLE) {\r\n                TimelineMetric cpuMetric = new TimelineMetric();\r\n                cpuMetric.setId(ContainerMetric.CPU.toString());\r\n                cpuMetric.setRealtimeAggregationOp(TimelineMetricOperation.SUM);\r\n                cpuMetric.addValue(currentTimeMillis, Math.round(cpuUsagePercentPerCore));\r\n                entity.addMetric(cpuMetric);\r\n            }\r\n            ApplicationId appId = container.getContainerId().getApplicationAttemptId().getApplicationId();\r\n            try {\r\n                TimelineV2Client timelineClient = getTimelineClient(appId);\r\n                if (timelineClient != null) {\r\n                    timelineClient.putEntitiesAsync(entity);\r\n                } else {\r\n                    LOG.error(\"Seems like client has been removed before the container\" + \" metric could be published for \" + container.getContainerId());\r\n                }\r\n            } catch (IOException e) {\r\n                LOG.error(\"Failed to publish Container metrics for container \" + container.getContainerId());\r\n                LOG.debug(\"Failed to publish Container metrics for container {}\", container.getContainerId(), e);\r\n            } catch (YarnException e) {\r\n                LOG.error(\"Failed to publish Container metrics for container \" + container.getContainerId(), e.getMessage());\r\n                LOG.debug(\"Failed to publish Container metrics for container {}\", container.getContainerId(), e);\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\timelineservice",
  "methodName" : "publishContainerCreatedEvent",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void publishContainerCreatedEvent(ContainerEvent event)\n{\r\n    if (publishNMContainerEvents) {\r\n        ContainerId containerId = event.getContainerID();\r\n        ContainerEntity entity = createContainerEntity(containerId);\r\n        Container container = context.getContainers().get(containerId);\r\n        Resource resource = container.getResource();\r\n        Map<String, Object> entityInfo = new HashMap<String, Object>();\r\n        entityInfo.put(ContainerMetricsConstants.ALLOCATED_MEMORY_INFO, resource.getMemorySize());\r\n        entityInfo.put(ContainerMetricsConstants.ALLOCATED_VCORE_INFO, resource.getVirtualCores());\r\n        entityInfo.put(ContainerMetricsConstants.ALLOCATED_HOST_INFO, nodeId.getHost());\r\n        entityInfo.put(ContainerMetricsConstants.ALLOCATED_PORT_INFO, nodeId.getPort());\r\n        entityInfo.put(ContainerMetricsConstants.ALLOCATED_PRIORITY_INFO, container.getPriority().toString());\r\n        entityInfo.put(ContainerMetricsConstants.ALLOCATED_HOST_HTTP_ADDRESS_INFO, httpAddress);\r\n        entity.setInfo(entityInfo);\r\n        TimelineEvent tEvent = new TimelineEvent();\r\n        tEvent.setId(ContainerMetricsConstants.CREATED_EVENT_TYPE);\r\n        tEvent.setTimestamp(event.getTimestamp());\r\n        long containerStartTime = container.getContainerStartTime();\r\n        entity.addEvent(tEvent);\r\n        entity.setCreatedTime(containerStartTime);\r\n        dispatcher.getEventHandler().handle(new TimelinePublishEvent(entity, containerId.getApplicationAttemptId().getApplicationId()));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\timelineservice",
  "methodName" : "publishContainerResumedEvent",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void publishContainerResumedEvent(ContainerEvent event)\n{\r\n    if (publishNMContainerEvents) {\r\n        ContainerResumeEvent resumeEvent = (ContainerResumeEvent) event;\r\n        ContainerId containerId = resumeEvent.getContainerID();\r\n        ContainerEntity entity = createContainerEntity(containerId);\r\n        Map<String, Object> entityInfo = new HashMap<String, Object>();\r\n        entityInfo.put(ContainerMetricsConstants.DIAGNOSTICS_INFO, resumeEvent.getDiagnostic());\r\n        entity.setInfo(entityInfo);\r\n        Container container = context.getContainers().get(containerId);\r\n        if (container != null) {\r\n            TimelineEvent tEvent = new TimelineEvent();\r\n            tEvent.setId(ContainerMetricsConstants.RESUMED_EVENT_TYPE);\r\n            tEvent.setTimestamp(event.getTimestamp());\r\n            entity.addEvent(tEvent);\r\n            dispatcher.getEventHandler().handle(new TimelinePublishEvent(entity, containerId.getApplicationAttemptId().getApplicationId()));\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\timelineservice",
  "methodName" : "publishContainerPausedEvent",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void publishContainerPausedEvent(ContainerEvent event)\n{\r\n    if (publishNMContainerEvents) {\r\n        ContainerPauseEvent pauseEvent = (ContainerPauseEvent) event;\r\n        ContainerId containerId = pauseEvent.getContainerID();\r\n        ContainerEntity entity = createContainerEntity(containerId);\r\n        Map<String, Object> entityInfo = new HashMap<String, Object>();\r\n        entityInfo.put(ContainerMetricsConstants.DIAGNOSTICS_INFO, pauseEvent.getDiagnostic());\r\n        entity.setInfo(entityInfo);\r\n        Container container = context.getContainers().get(containerId);\r\n        if (container != null) {\r\n            TimelineEvent tEvent = new TimelineEvent();\r\n            tEvent.setId(ContainerMetricsConstants.PAUSED_EVENT_TYPE);\r\n            tEvent.setTimestamp(event.getTimestamp());\r\n            entity.addEvent(tEvent);\r\n            dispatcher.getEventHandler().handle(new TimelinePublishEvent(entity, containerId.getApplicationAttemptId().getApplicationId()));\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\timelineservice",
  "methodName" : "publishContainerKilledEvent",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void publishContainerKilledEvent(ContainerEvent event)\n{\r\n    if (publishNMContainerEvents) {\r\n        ContainerKillEvent killEvent = (ContainerKillEvent) event;\r\n        ContainerId containerId = killEvent.getContainerID();\r\n        ContainerEntity entity = createContainerEntity(containerId);\r\n        Map<String, Object> entityInfo = new HashMap<String, Object>();\r\n        entityInfo.put(ContainerMetricsConstants.DIAGNOSTICS_INFO, killEvent.getDiagnostic());\r\n        entityInfo.put(ContainerMetricsConstants.EXIT_STATUS_INFO, killEvent.getContainerExitStatus());\r\n        entity.setInfo(entityInfo);\r\n        Container container = context.getContainers().get(containerId);\r\n        if (container != null) {\r\n            TimelineEvent tEvent = new TimelineEvent();\r\n            tEvent.setId(ContainerMetricsConstants.KILLED_EVENT_TYPE);\r\n            tEvent.setTimestamp(event.getTimestamp());\r\n            entity.addEvent(tEvent);\r\n            dispatcher.getEventHandler().handle(new TimelinePublishEvent(entity, containerId.getApplicationAttemptId().getApplicationId()));\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\timelineservice",
  "methodName" : "publishContainerFinishedEvent",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void publishContainerFinishedEvent(ContainerStatus containerStatus, long containerFinishTime, long containerStartTime)\n{\r\n    if (publishNMContainerEvents) {\r\n        ContainerId containerId = containerStatus.getContainerId();\r\n        TimelineEntity entity = createContainerEntity(containerId);\r\n        Map<String, Object> entityInfo = new HashMap<String, Object>();\r\n        entityInfo.put(ContainerMetricsConstants.DIAGNOSTICS_INFO, containerStatus.getDiagnostics());\r\n        entityInfo.put(ContainerMetricsConstants.EXIT_STATUS_INFO, containerStatus.getExitStatus());\r\n        entityInfo.put(ContainerMetricsConstants.STATE_INFO, ContainerState.COMPLETE.toString());\r\n        entityInfo.put(ContainerMetricsConstants.CONTAINER_FINISHED_TIME, containerFinishTime);\r\n        entity.setInfo(entityInfo);\r\n        TimelineEvent tEvent = new TimelineEvent();\r\n        tEvent.setId(ContainerMetricsConstants.FINISHED_EVENT_TYPE);\r\n        tEvent.setTimestamp(containerFinishTime);\r\n        entity.addEvent(tEvent);\r\n        dispatcher.getEventHandler().handle(new TimelinePublishEvent(entity, containerId.getApplicationAttemptId().getApplicationId()));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\timelineservice",
  "methodName" : "publishContainerLocalizationEvent",
  "errType" : [ "IOException", "YarnException" ],
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void publishContainerLocalizationEvent(ContainerLocalizationEvent event, String eventType)\n{\r\n    if (publishNMContainerEvents) {\r\n        Container container = event.getContainer();\r\n        ContainerId containerId = container.getContainerId();\r\n        TimelineEntity entity = createContainerEntity(containerId);\r\n        TimelineEvent tEvent = new TimelineEvent();\r\n        tEvent.setId(eventType);\r\n        tEvent.setTimestamp(event.getTimestamp());\r\n        entity.addEvent(tEvent);\r\n        ApplicationId appId = container.getContainerId().getApplicationAttemptId().getApplicationId();\r\n        try {\r\n            TimelineV2Client timelineClient = getTimelineClient(appId);\r\n            if (timelineClient != null) {\r\n                timelineClient.putEntitiesAsync(entity);\r\n            } else {\r\n                LOG.error(\"Seems like client has been removed before the event\" + \" could be published for \" + container.getContainerId());\r\n            }\r\n        } catch (IOException e) {\r\n            LOG.error(\"Failed to publish Container metrics for container \" + container.getContainerId());\r\n            LOG.debug(\"Failed to publish Container metrics for container {}\", container.getContainerId(), e);\r\n        } catch (YarnException e) {\r\n            LOG.error(\"Failed to publish Container metrics for container \" + container.getContainerId(), e.getMessage());\r\n            LOG.debug(\"Failed to publish Container metrics for container {}\", container.getContainerId(), e);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\timelineservice",
  "methodName" : "createContainerEntity",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "ContainerEntity createContainerEntity(ContainerId containerId)\n{\r\n    ContainerEntity entity = new ContainerEntity();\r\n    entity.setId(containerId.toString());\r\n    entity.setIdPrefix(TimelineServiceHelper.invertLong(containerId.getContainerId()));\r\n    Identifier parentIdentifier = new Identifier();\r\n    parentIdentifier.setType(TimelineEntityType.YARN_APPLICATION_ATTEMPT.name());\r\n    parentIdentifier.setId(containerId.getApplicationAttemptId().toString());\r\n    entity.setParent(parentIdentifier);\r\n    return entity;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\timelineservice",
  "methodName" : "putEntity",
  "errType" : [ "IOException", "YarnException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void putEntity(TimelineEntity entity, ApplicationId appId)\n{\r\n    try {\r\n        if (LOG.isDebugEnabled()) {\r\n            LOG.debug(\"Publishing the entity {} JSON-style content: {}\", entity, TimelineUtils.dumpTimelineRecordtoJSON(entity));\r\n        }\r\n        TimelineV2Client timelineClient = getTimelineClient(appId);\r\n        if (timelineClient != null) {\r\n            timelineClient.putEntities(entity);\r\n        } else {\r\n            LOG.error(\"Seems like client has been removed before the entity \" + \"could be published for \" + entity);\r\n        }\r\n    } catch (IOException e) {\r\n        LOG.error(\"Error when publishing entity \" + entity);\r\n        LOG.debug(\"Error when publishing entity {}\", entity, e);\r\n    } catch (YarnException e) {\r\n        LOG.error(\"Error when publishing entity \" + entity, e.getMessage());\r\n        LOG.debug(\"Error when publishing entity {}\", entity, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\timelineservice",
  "methodName" : "publishApplicationEvent",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void publishApplicationEvent(ApplicationEvent event)\n{\r\n    switch(event.getType()) {\r\n        case INIT_APPLICATION:\r\n        case FINISH_APPLICATION:\r\n        case APPLICATION_LOG_HANDLING_FAILED:\r\n            break;\r\n        case APPLICATION_CONTAINER_FINISHED:\r\n            ApplicationContainerFinishedEvent evnt = (ApplicationContainerFinishedEvent) event;\r\n            publishContainerFinishedEvent(evnt.getContainerStatus(), event.getTimestamp(), evnt.getContainerStartTime());\r\n            break;\r\n        default:\r\n            LOG.debug(\"{} is not a desired ApplicationEvent which\" + \" needs to be published by NMTimelinePublisher\", event.getType());\r\n            break;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\timelineservice",
  "methodName" : "publishContainerEvent",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void publishContainerEvent(ContainerEvent event)\n{\r\n    switch(event.getType()) {\r\n        case INIT_CONTAINER:\r\n            publishContainerCreatedEvent(event);\r\n            break;\r\n        case KILL_CONTAINER:\r\n            publishContainerKilledEvent(event);\r\n            break;\r\n        case PAUSE_CONTAINER:\r\n            publishContainerPausedEvent(event);\r\n            break;\r\n        case RESUME_CONTAINER:\r\n            publishContainerResumedEvent(event);\r\n            break;\r\n        default:\r\n            LOG.debug(\"{} is not a desired ContainerEvent which needs to be \" + \" published by NMTimelinePublisher\", event.getType());\r\n            break;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\timelineservice",
  "methodName" : "publishLocalizationEvent",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void publishLocalizationEvent(LocalizationEvent event)\n{\r\n    switch(event.getType()) {\r\n        case CONTAINER_RESOURCES_LOCALIZED:\r\n            publishContainerLocalizationEvent((ContainerLocalizationEvent) event, ContainerMetricsConstants.LOCALIZATION_FINISHED_EVENT_TYPE);\r\n            break;\r\n        case LOCALIZE_CONTAINER_RESOURCES:\r\n            publishContainerLocalizationEvent((ContainerLocalizationEvent) event, ContainerMetricsConstants.LOCALIZATION_START_EVENT_TYPE);\r\n            break;\r\n        default:\r\n            LOG.debug(\"{} is not a desired LocalizationEvent which needs to be\" + \" published by NMTimelinePublisher\", event.getType());\r\n            break;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\timelineservice",
  "methodName" : "createTimelineClient",
  "errType" : [ "IOException|InterruptedException|RuntimeException|Error" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void createTimelineClient(ApplicationId appId)\n{\r\n    if (!appToClientMap.containsKey(appId)) {\r\n        try {\r\n            TimelineV2Client timelineClient = nmLoginUGI.doAs(new PrivilegedExceptionAction<TimelineV2Client>() {\r\n\r\n                @Override\r\n                public TimelineV2Client run() throws Exception {\r\n                    TimelineV2Client timelineClient = TimelineV2Client.createTimelineClient(appId);\r\n                    timelineClient.init(getConfig());\r\n                    timelineClient.start();\r\n                    return timelineClient;\r\n                }\r\n            });\r\n            appToClientMap.put(appId, timelineClient);\r\n        } catch (IOException | InterruptedException | RuntimeException | Error e) {\r\n            LOG.warn(\"Unable to create timeline client for app \" + appId, e);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\timelineservice",
  "methodName" : "stopTimelineClient",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void stopTimelineClient(ApplicationId appId)\n{\r\n    dispatcher.getEventHandler().handle(new NMTimelineEvent(NMTimelineEventType.STOP_TIMELINE_CLIENT, appId));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\timelineservice",
  "methodName" : "removeAndStopTimelineClient",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void removeAndStopTimelineClient(ApplicationId appId)\n{\r\n    TimelineV2Client client = appToClientMap.remove(appId);\r\n    if (client != null) {\r\n        client.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\timelineservice",
  "methodName" : "setTimelineServiceAddress",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setTimelineServiceAddress(ApplicationId appId, String collectorAddr)\n{\r\n    TimelineV2Client client = appToClientMap.get(appId);\r\n    if (client != null) {\r\n        client.setTimelineCollectorInfo(CollectorInfo.newInstance(collectorAddr));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\timelineservice",
  "methodName" : "getTimelineClient",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineV2Client getTimelineClient(ApplicationId appId)\n{\r\n    return appToClientMap.get(appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "getServiceID",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getServiceID()\n{\r\n    return serviceId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "getServiceData",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ByteBuffer getServiceData()\n{\r\n    return serviceData;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUser()\n{\r\n    return user;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "getApplicationID",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationId getApplicationID()\n{\r\n    return appId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "getContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Container getContainer()\n{\r\n    return container;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "LocalizerHeartbeatResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (resourceSpecs != null) {\r\n        addResourcesToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = LocalizerHeartbeatResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getLocalizerAction",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "LocalizerAction getLocalizerAction()\n{\r\n    LocalizerHeartbeatResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasAction()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getAction());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getResourceSpecs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ResourceLocalizationSpec> getResourceSpecs()\n{\r\n    initResources();\r\n    return this.resourceSpecs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setLocalizerAction",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setLocalizerAction(LocalizerAction action)\n{\r\n    maybeInitBuilder();\r\n    if (action == null) {\r\n        builder.clearAction();\r\n        return;\r\n    }\r\n    builder.setAction(convertToProtoFormat(action));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setResourceSpecs",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setResourceSpecs(List<ResourceLocalizationSpec> rsrcs)\n{\r\n    maybeInitBuilder();\r\n    if (rsrcs == null) {\r\n        builder.clearResources();\r\n        return;\r\n    }\r\n    this.resourceSpecs = rsrcs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initResources",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initResources()\n{\r\n    if (this.resourceSpecs != null) {\r\n        return;\r\n    }\r\n    LocalizerHeartbeatResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ResourceLocalizationSpecProto> list = p.getResourcesList();\r\n    this.resourceSpecs = new ArrayList<ResourceLocalizationSpec>();\r\n    for (ResourceLocalizationSpecProto c : list) {\r\n        this.resourceSpecs.add(convertFromProtoFormat(c));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addResourcesToProto",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void addResourcesToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearResources();\r\n    if (this.resourceSpecs == null)\r\n        return;\r\n    Iterable<ResourceLocalizationSpecProto> iterable = new Iterable<ResourceLocalizationSpecProto>() {\r\n\r\n        @Override\r\n        public Iterator<ResourceLocalizationSpecProto> iterator() {\r\n            return new Iterator<ResourceLocalizationSpecProto>() {\r\n\r\n                Iterator<ResourceLocalizationSpec> iter = resourceSpecs.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public ResourceLocalizationSpecProto next() {\r\n                    ResourceLocalizationSpec resource = iter.next();\r\n                    return ((ResourceLocalizationSpecPBImpl) resource).getProto();\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllResources(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourceLocalizationSpec convertFromProtoFormat(ResourceLocalizationSpecProto p)\n{\r\n    return new ResourceLocalizationSpecPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LocalizerActionProto convertToProtoFormat(LocalizerAction a)\n{\r\n    return LocalizerActionProto.valueOf(a.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LocalizerAction convertFromProtoFormat(LocalizerActionProto a)\n{\r\n    return LocalizerAction.valueOf(a.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\security",
  "methodName" : "selectToken",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Token<LocalizerTokenIdentifier> selectToken(Text service, Collection<Token<? extends TokenIdentifier>> tokens)\n{\r\n    LOG.debug(\"Using localizerTokenSelector.\");\r\n    for (Token<? extends TokenIdentifier> token : tokens) {\r\n        LOG.debug(\"Token of kind {} is found\", token.getKind());\r\n        if (LocalizerTokenIdentifier.KIND.equals(token.getKind())) {\r\n            return (Token<LocalizerTokenIdentifier>) token;\r\n        }\r\n    }\r\n    LOG.debug(\"Returning null.\");\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "tag",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerMetrics tag(MetricsInfo info, ContainerId containerId)\n{\r\n    registry.tag(info, containerId.toString());\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "sourceName",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String sourceName(ContainerId containerId)\n{\r\n    return RECORD_INFO.name() + \"_\" + containerId.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "forContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerMetrics forContainer(ContainerId containerId, long flushPeriodMs, long delayMs)\n{\r\n    return forContainer(DefaultMetricsSystem.instance(), containerId, flushPeriodMs, delayMs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getContainerMetrics",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerMetrics getContainerMetrics(ContainerId containerId)\n{\r\n    return usageMetrics.get(containerId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "forContainer",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "ContainerMetrics forContainer(MetricsSystem ms, ContainerId containerId, long flushPeriodMs, long delayMs)\n{\r\n    ContainerMetrics metrics = usageMetrics.get(containerId);\r\n    if (metrics == null) {\r\n        metrics = new ContainerMetrics(ms, containerId, flushPeriodMs, delayMs).tag(RECORD_INFO, containerId);\r\n        if (ms != null) {\r\n            metrics = ms.register(sourceName(containerId), \"Metrics for container: \" + containerId, metrics);\r\n        }\r\n        usageMetrics.put(containerId, metrics);\r\n    }\r\n    return metrics;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "unregisterContainerMetrics",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void unregisterContainerMetrics(ContainerMetrics cm)\n{\r\n    cm.metricsSystem.unregisterSource(cm.recordInfo.name());\r\n    usageMetrics.remove(cm.containerId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getMetrics",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void getMetrics(MetricsCollector collector, boolean all)\n{\r\n    if (finished || flushOnPeriod) {\r\n        registry.snapshot(collector.addRecord(registry.info()), all);\r\n    }\r\n    if (!finished && flushOnPeriod) {\r\n        flushOnPeriod = false;\r\n        scheduleTimerTaskIfRequired();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "finished",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void finished(boolean unregisterWithoutDelay)\n{\r\n    if (!finished) {\r\n        this.finished = true;\r\n        if (timer != null) {\r\n            timer.cancel();\r\n            timer = null;\r\n        }\r\n        if (!unregisterWithoutDelay) {\r\n            scheduleTimerTaskForUnregistration();\r\n        } else {\r\n            ContainerMetrics.unregisterContainerMetrics(ContainerMetrics.this);\r\n        }\r\n        this.pMemMBQuantiles.stop();\r\n        this.cpuCoreUsagePercentQuantiles.stop();\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "recordMemoryUsage",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void recordMemoryUsage(int memoryMBs)\n{\r\n    if (memoryMBs >= 0) {\r\n        this.pMemMBsStat.add(memoryMBs);\r\n        this.pMemMBQuantiles.add(memoryMBs);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "recordCpuUsage",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void recordCpuUsage(int totalPhysicalCpuPercent, int milliVcoresUsed)\n{\r\n    if (totalPhysicalCpuPercent >= 0) {\r\n        this.cpuCoreUsagePercent.add(totalPhysicalCpuPercent);\r\n        this.cpuCoreUsagePercentQuantiles.add(totalPhysicalCpuPercent);\r\n    }\r\n    if (milliVcoresUsed >= 0) {\r\n        this.milliVcoresUsed.add(milliVcoresUsed);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "recordProcessId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void recordProcessId(String processId)\n{\r\n    registry.tag(PROCESSID_INFO, processId, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "recordResourceLimit",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void recordResourceLimit(int vmemLimit, int pmemLimit, int cpuVcores)\n{\r\n    this.vMemLimitMbs.set(vmemLimit);\r\n    this.pMemLimitMbs.set(pmemLimit);\r\n    this.cpuVcoreLimit.set(cpuVcores);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "recordStateChangeDurations",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void recordStateChangeDurations(long launchDuration, long localizationDuration)\n{\r\n    this.launchDurationMs.set(launchDuration);\r\n    this.localizationDurationMs.set(localizationDuration);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "recordStartTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void recordStartTime(long startTime)\n{\r\n    this.startTime.set(startTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "recordFinishTimeAndExitCode",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void recordFinishTimeAndExitCode(long finishTime, int exitCode)\n{\r\n    this.finishTime.set(finishTime);\r\n    this.exitCode.set(exitCode);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "scheduleTimerTaskIfRequired",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void scheduleTimerTaskIfRequired()\n{\r\n    if (flushPeriodMs > 0) {\r\n        if (timer == null) {\r\n            this.timer = new Timer(\"Metrics flush checker\", true);\r\n        }\r\n        TimerTask timerTask = new TimerTask() {\r\n\r\n            @Override\r\n            public void run() {\r\n                synchronized (ContainerMetrics.this) {\r\n                    if (!finished) {\r\n                        flushOnPeriod = true;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        timer.schedule(timerTask, flushPeriodMs);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "scheduleTimerTaskForUnregistration",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void scheduleTimerTaskForUnregistration()\n{\r\n    TimerTask timerTask = new TimerTask() {\r\n\r\n        @Override\r\n        public void run() {\r\n            ContainerMetrics.unregisterContainerMetrics(ContainerMetrics.this);\r\n        }\r\n    };\r\n    unregisterContainerMetricsTimer.schedule(timerTask, unregisterDelayMs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\event",
  "methodName" : "getDiagnosticMessage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDiagnosticMessage()\n{\r\n    return diagnosticMesage;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\impl\\pb",
  "methodName" : "convertProtoToDeletionTask",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "DeletionTask convertProtoToDeletionTask(DeletionServiceDeleteTaskProto proto, DeletionService deletionService)\n{\r\n    int taskId = proto.getId();\r\n    if (proto.hasTaskType() && proto.getTaskType() != null) {\r\n        if (proto.getTaskType().equals(DeletionTaskType.FILE.name())) {\r\n            LOG.debug(\"Converting recovered FileDeletionTask\");\r\n            return convertProtoToFileDeletionTask(proto, deletionService, taskId);\r\n        } else if (proto.getTaskType().equals(DeletionTaskType.DOCKER_CONTAINER.name())) {\r\n            LOG.debug(\"Converting recovered DockerContainerDeletionTask\");\r\n            return convertProtoToDockerContainerDeletionTask(proto, deletionService, taskId);\r\n        }\r\n    }\r\n    LOG.debug(\"Unable to get task type, trying FileDeletionTask\");\r\n    return convertProtoToFileDeletionTask(proto, deletionService, taskId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\impl\\pb",
  "methodName" : "convertProtoToFileDeletionTask",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "FileDeletionTask convertProtoToFileDeletionTask(DeletionServiceDeleteTaskProto proto, DeletionService deletionService, int taskId)\n{\r\n    String user = proto.hasUser() ? proto.getUser() : null;\r\n    Path subdir = null;\r\n    if (proto.hasSubdir()) {\r\n        subdir = new Path(proto.getSubdir());\r\n    }\r\n    List<Path> basePaths = null;\r\n    List<String> basedirs = proto.getBasedirsList();\r\n    if (basedirs != null && basedirs.size() > 0) {\r\n        basePaths = new ArrayList<>(basedirs.size());\r\n        for (String basedir : basedirs) {\r\n            basePaths.add(new Path(basedir));\r\n        }\r\n    }\r\n    return new FileDeletionTask(taskId, deletionService, user, subdir, basePaths);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\impl\\pb",
  "methodName" : "convertProtoToDockerContainerDeletionTask",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "DockerContainerDeletionTask convertProtoToDockerContainerDeletionTask(DeletionServiceDeleteTaskProto proto, DeletionService deletionService, int taskId)\n{\r\n    String user = proto.hasUser() ? proto.getUser() : null;\r\n    String containerId = proto.hasDockerContainerId() ? proto.getDockerContainerId() : null;\r\n    return new DockerContainerDeletionTask(taskId, deletionService, user, containerId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\impl\\pb",
  "methodName" : "convertProtoToDeletionTaskRecoveryInfo",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "DeletionTaskRecoveryInfo convertProtoToDeletionTaskRecoveryInfo(DeletionServiceDeleteTaskProto proto, DeletionService deletionService)\n{\r\n    DeletionTask deletionTask = NMProtoUtils.convertProtoToDeletionTask(proto, deletionService);\r\n    List<Integer> successorTaskIds = new ArrayList<>();\r\n    if (proto.getSuccessorIdsList() != null && !proto.getSuccessorIdsList().isEmpty()) {\r\n        successorTaskIds = proto.getSuccessorIdsList();\r\n    }\r\n    long deletionTimestamp = proto.getDeletionTime();\r\n    return new DeletionTaskRecoveryInfo(deletionTask, successorTaskIds, deletionTimestamp);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getMetrics",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AMRMProxyMetrics getMetrics()\n{\r\n    synchronized (AMRMProxyMetrics.class) {\r\n        if (instance == null) {\r\n            instance = DefaultMetricsSystem.instance().register(\"AMRMProxyMetrics\", \"Metrics for the Yarn AMRMProxy\", new AMRMProxyMetrics());\r\n        }\r\n    }\r\n    return instance;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getNumSucceededAppStartRequests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getNumSucceededAppStartRequests()\n{\r\n    return totalSucceededAppStartRequests.lastStat().numSamples();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getLatencySucceededAppStartRequests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "double getLatencySucceededAppStartRequests()\n{\r\n    return totalSucceededAppStartRequests.lastStat().mean();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "succeededAppStartRequests",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void succeededAppStartRequests(long duration)\n{\r\n    totalSucceededAppStartRequests.add(duration);\r\n    applicationStartLatency.add(duration);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getNumSucceededRegisterAMRequests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getNumSucceededRegisterAMRequests()\n{\r\n    return totalSucceededRegisterAMRequests.lastStat().numSamples();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getLatencySucceededRegisterAMRequests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "double getLatencySucceededRegisterAMRequests()\n{\r\n    return totalSucceededRegisterAMRequests.lastStat().mean();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "succeededRegisterAMRequests",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void succeededRegisterAMRequests(long duration)\n{\r\n    totalSucceededRegisterAMRequests.add(duration);\r\n    registerAMLatency.add(duration);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getNumSucceededFinishAMRequests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getNumSucceededFinishAMRequests()\n{\r\n    return totalSucceededFinishAMRequests.lastStat().numSamples();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getLatencySucceededFinishAMRequests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "double getLatencySucceededFinishAMRequests()\n{\r\n    return totalSucceededFinishAMRequests.lastStat().mean();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "succeededFinishAMRequests",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void succeededFinishAMRequests(long duration)\n{\r\n    totalSucceededFinishAMRequests.add(duration);\r\n    finishAMLatency.add(duration);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getNumSucceededAllocateRequests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getNumSucceededAllocateRequests()\n{\r\n    return totalSucceededAllocateRequests.lastStat().numSamples();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getLatencySucceededAllocateRequests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "double getLatencySucceededAllocateRequests()\n{\r\n    return totalSucceededAllocateRequests.lastStat().mean();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "succeededAllocateRequests",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void succeededAllocateRequests(long duration)\n{\r\n    totalSucceededAllocateRequests.add(duration);\r\n    allocateLatency.add(duration);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getFailedAppStartRequests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getFailedAppStartRequests()\n{\r\n    return failedAppStartRequests.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "incrFailedAppStartRequests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void incrFailedAppStartRequests()\n{\r\n    failedAppStartRequests.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getFailedRegisterAMRequests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getFailedRegisterAMRequests()\n{\r\n    return failedRegisterAMRequests.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "incrFailedRegisterAMRequests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void incrFailedRegisterAMRequests()\n{\r\n    failedRegisterAMRequests.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getFailedFinishAMRequests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getFailedFinishAMRequests()\n{\r\n    return failedFinishAMRequests.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "incrFailedFinishAMRequests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void incrFailedFinishAMRequests()\n{\r\n    failedFinishAMRequests.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getFailedAllocateRequests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getFailedAllocateRequests()\n{\r\n    return failedAllocateRequests.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "incrFailedAllocateRequests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void incrFailedAllocateRequests()\n{\r\n    failedAllocateRequests.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getFailedAppRecoveryCount",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getFailedAppRecoveryCount()\n{\r\n    return failedAppRecoveryCount.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "incrFailedAppRecoveryCount",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void incrFailedAppRecoveryCount()\n{\r\n    failedAppRecoveryCount.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\event",
  "methodName" : "getContext",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LocalizerContext getContext()\n{\r\n    return context;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\event",
  "methodName" : "getVisibility",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LocalResourceVisibility getVisibility()\n{\r\n    return vis;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\event",
  "methodName" : "getLocalizerId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getLocalizerId()\n{\r\n    return localizerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "shouldDoLogAggregation",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean shouldDoLogAggregation(ContainerLogContext logContext)\n{\r\n    return logContext.getExitCode() != ContainerExitStatus.KILLED_FOR_EXCESS_LOGS;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Resource getResource()\n{\r\n    return this.resource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void init(Configuration conf)\n{\r\n    this.rollingInterval = conf.getLong(YarnConfiguration.RM_AMRM_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS, YarnConfiguration.DEFAULT_RM_AMRM_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS) * 1000;\r\n    this.activationDelay = (long) (conf.getLong(YarnConfiguration.RM_AM_EXPIRY_INTERVAL_MS, YarnConfiguration.DEFAULT_RM_AM_EXPIRY_INTERVAL_MS) * 1.5);\r\n    LOG.info(\"AMRMTokenKeyRollingInterval: \" + this.rollingInterval + \"ms and AMRMTokenKeyActivationDelay: \" + this.activationDelay + \" ms\");\r\n    if (rollingInterval <= activationDelay * 2) {\r\n        throw new IllegalArgumentException(YarnConfiguration.RM_AMRM_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS + \" should be more than 3 X \" + YarnConfiguration.RM_AM_EXPIRY_INTERVAL_MS);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "start",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void start()\n{\r\n    if (this.currentMasterKey == null) {\r\n        this.currentMasterKey = createNewMasterKey();\r\n        if (this.nmStateStore != null) {\r\n            try {\r\n                this.nmStateStore.storeAMRMProxyCurrentMasterKey(this.currentMasterKey.getMasterKey());\r\n            } catch (IOException e) {\r\n                LOG.error(\"Unable to update current master key in state store\", e);\r\n            }\r\n        }\r\n    }\r\n    this.timer.scheduleAtFixedRate(new MasterKeyRoller(), rollingInterval, rollingInterval);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "stop",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void stop()\n{\r\n    this.timer.cancel();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "setNMStateStoreService",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNMStateStoreService(NMStateStoreService nmStateStoreService)\n{\r\n    this.nmStateStore = nmStateStoreService;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "applicationMasterFinished",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void applicationMasterFinished(ApplicationAttemptId appAttemptId)\n{\r\n    this.writeLock.lock();\r\n    try {\r\n        LOG.info(\"Application finished, removing password for \" + appAttemptId);\r\n        this.appAttemptSet.remove(appAttemptId);\r\n    } finally {\r\n        this.writeLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "rollMasterKey",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void rollMasterKey()\n{\r\n    this.writeLock.lock();\r\n    try {\r\n        LOG.info(\"Rolling master-key for amrm-tokens\");\r\n        this.nextMasterKey = createNewMasterKey();\r\n        if (this.nmStateStore != null) {\r\n            try {\r\n                this.nmStateStore.storeAMRMProxyNextMasterKey(this.nextMasterKey.getMasterKey());\r\n            } catch (IOException e) {\r\n                LOG.error(\"Unable to update next master key in state store\", e);\r\n            }\r\n        }\r\n        this.timer.schedule(new NextKeyActivator(), this.activationDelay);\r\n    } finally {\r\n        this.writeLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "activateNextMasterKey",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void activateNextMasterKey()\n{\r\n    this.writeLock.lock();\r\n    try {\r\n        LOG.info(\"Activating next master key with id: \" + this.nextMasterKey.getMasterKey().getKeyId());\r\n        this.currentMasterKey = this.nextMasterKey;\r\n        this.nextMasterKey = null;\r\n        if (this.nmStateStore != null) {\r\n            try {\r\n                this.nmStateStore.storeAMRMProxyCurrentMasterKey(this.currentMasterKey.getMasterKey());\r\n                this.nmStateStore.storeAMRMProxyNextMasterKey(null);\r\n            } catch (IOException e) {\r\n                LOG.error(\"Unable to update current master key in state store\", e);\r\n            }\r\n        }\r\n    } finally {\r\n        this.writeLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "createNewMasterKey",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "MasterKeyData createNewMasterKey()\n{\r\n    this.writeLock.lock();\r\n    try {\r\n        return new MasterKeyData(serialNo++, generateSecret());\r\n    } finally {\r\n        this.writeLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "createAndGetAMRMToken",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "Token<AMRMTokenIdentifier> createAndGetAMRMToken(ApplicationAttemptId appAttemptId)\n{\r\n    this.writeLock.lock();\r\n    try {\r\n        LOG.info(\"Create AMRMToken for ApplicationAttempt: \" + appAttemptId);\r\n        AMRMTokenIdentifier identifier = new AMRMTokenIdentifier(appAttemptId, getMasterKey().getMasterKey().getKeyId());\r\n        byte[] password = this.createPassword(identifier);\r\n        appAttemptSet.add(appAttemptId);\r\n        return new Token<AMRMTokenIdentifier>(identifier.getBytes(), password, identifier.getKind(), new Text());\r\n    } finally {\r\n        this.writeLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getMasterKey",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "MasterKeyData getMasterKey()\n{\r\n    this.readLock.lock();\r\n    try {\r\n        return nextMasterKey == null ? currentMasterKey : nextMasterKey;\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "retrievePassword",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "byte[] retrievePassword(AMRMTokenIdentifier identifier) throws InvalidToken\n{\r\n    this.readLock.lock();\r\n    try {\r\n        ApplicationAttemptId applicationAttemptId = identifier.getApplicationAttemptId();\r\n        LOG.debug(\"Trying to retrieve password for {}\", applicationAttemptId);\r\n        if (!appAttemptSet.contains(applicationAttemptId)) {\r\n            throw new InvalidToken(applicationAttemptId + \" not found in AMRMProxyTokenSecretManager.\");\r\n        }\r\n        if (identifier.getKeyId() == this.currentMasterKey.getMasterKey().getKeyId()) {\r\n            return createPassword(identifier.getBytes(), this.currentMasterKey.getSecretKey());\r\n        } else if (nextMasterKey != null && identifier.getKeyId() == this.nextMasterKey.getMasterKey().getKeyId()) {\r\n            return createPassword(identifier.getBytes(), this.nextMasterKey.getSecretKey());\r\n        }\r\n        throw new InvalidToken(\"Invalid AMRMToken from \" + applicationAttemptId);\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "createIdentifier",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AMRMTokenIdentifier createIdentifier()\n{\r\n    return new AMRMTokenIdentifier();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getCurrentMasterKeyData",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "MasterKeyData getCurrentMasterKeyData()\n{\r\n    this.readLock.lock();\r\n    try {\r\n        return this.currentMasterKey;\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getNextMasterKeyData",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "MasterKeyData getNextMasterKeyData()\n{\r\n    this.readLock.lock();\r\n    try {\r\n        return this.nextMasterKey;\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "createPassword",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "byte[] createPassword(AMRMTokenIdentifier identifier)\n{\r\n    this.readLock.lock();\r\n    try {\r\n        ApplicationAttemptId applicationAttemptId = identifier.getApplicationAttemptId();\r\n        LOG.info(\"Creating password for \" + applicationAttemptId);\r\n        return createPassword(identifier.getBytes(), getMasterKey().getSecretKey());\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "recover",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void recover(RecoveredAMRMProxyState state)\n{\r\n    if (state != null) {\r\n        MasterKey currentKey = state.getCurrentMasterKey();\r\n        if (currentKey != null) {\r\n            this.currentMasterKey = new MasterKeyData(currentKey, createSecretKey(currentKey.getBytes().array()));\r\n        } else {\r\n            LOG.warn(\"No current master key recovered from NM StateStore\" + \" for AMRMProxyTokenSecretManager\");\r\n        }\r\n        MasterKey nextKey = state.getNextMasterKey();\r\n        if (nextKey != null) {\r\n            this.nextMasterKey = new MasterKeyData(nextKey, createSecretKey(nextKey.getBytes().array()));\r\n            this.timer.schedule(new NextKeyActivator(), this.activationDelay);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\event",
  "methodName" : "getResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LocalizedResource getResource()\n{\r\n    return resource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\event",
  "methodName" : "getContext",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LocalizerContext getContext()\n{\r\n    return context;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\event",
  "methodName" : "getVisibility",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LocalResourceVisibility getVisibility()\n{\r\n    return vis;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\event",
  "methodName" : "getPattern",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getPattern()\n{\r\n    return pattern;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "scriptBasedInit",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void scriptBasedInit(Function<String, String> envProvider, String[] scriptPaths) throws ResourceHandlerException\n{\r\n    String binaryName = DEFAULT_SCRIPT_NAME;\r\n    String envScriptName = envProvider.apply(ENV_SCRIPT_NAME);\r\n    if (envScriptName != null) {\r\n        binaryName = envScriptName;\r\n    }\r\n    LOG.info(\"Use {} as script name.\", binaryName);\r\n    boolean found = false;\r\n    String envBinaryPath = envProvider.apply(ENV_SCRIPT_PATH);\r\n    if (envBinaryPath != null) {\r\n        this.binaryPath = getScriptFromEnvSetting(envBinaryPath);\r\n        found = binaryPath != null;\r\n    }\r\n    if (!found) {\r\n        if (envBinaryPath != null) {\r\n            LOG.warn(\"Script {} does not exist, falling back \" + \"to $HADOOP_COMMON_HOME/sbin/DevicePluginScript/\", envBinaryPath);\r\n        }\r\n        this.binaryPath = getScriptFromHadoopCommon(envProvider, binaryName);\r\n        found = binaryPath != null;\r\n    }\r\n    if (!found) {\r\n        LOG.info(\"Script not found under\" + \" $HADOOP_COMMON_HOME/sbin/DevicePluginScript/,\" + \" falling back to default search directories\");\r\n        this.binaryPath = getScriptFromSearchDirs(binaryName, scriptPaths);\r\n        found = binaryPath != null;\r\n    }\r\n    if (!found) {\r\n        LOG.error(\"Script not found in \" + Arrays.toString(scriptPaths));\r\n        throw new ResourceHandlerException(\"No binary found for \" + NECVEPlugin.class.getName());\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "getRegisterRequestInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DeviceRegisterRequest getRegisterRequestInfo()\n{\r\n    return DeviceRegisterRequest.Builder.newInstance().setResourceName(\"nec.com/ve\").build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "getDevices",
  "errType" : [ "IOException", "IOException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "Set<Device> getDevices()\n{\r\n    Set<Device> devices = null;\r\n    if (useUdev) {\r\n        try {\r\n            devices = discoverer.getDevicesFromPath(\"/dev\");\r\n        } catch (IOException e) {\r\n            LOG.error(\"Error during scanning devices\", e);\r\n        }\r\n    } else {\r\n        CommandExecutor executor = commandExecutorProvider.apply(new String[] { this.binaryPath });\r\n        try {\r\n            executor.execute();\r\n            String output = executor.getOutput();\r\n            devices = parseOutput(output);\r\n        } catch (IOException e) {\r\n            LOG.error(\"Error during executing external binary\", e);\r\n        }\r\n    }\r\n    if (devices != null) {\r\n        LOG.info(\"Found devices:\");\r\n        devices.forEach(dev -> LOG.info(\"{}\", dev));\r\n    }\r\n    return devices;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "onDevicesAllocated",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "DeviceRuntimeSpec onDevicesAllocated(Set<Device> set, YarnRuntimeType yarnRuntimeType)\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "parseOutput",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "Set<Device> parseOutput(String output)\n{\r\n    Set<Device> devices = new HashSet<>();\r\n    LOG.info(\"Parsing output: {}\", output);\r\n    String[] lines = output.split(\"\\n\");\r\n    outer: for (String line : lines) {\r\n        Device.Builder builder = Device.Builder.newInstance();\r\n        Map<String, Consumer<String>> builderInvocations = getBuilderInvocationsMap(builder);\r\n        String[] keyValues = line.trim().split(\",\");\r\n        for (String keyValue : keyValues) {\r\n            String[] tokens = keyValue.trim().split(\"=\");\r\n            if (tokens.length != 2) {\r\n                LOG.error(\"Unknown format of script output! Skipping this line\");\r\n                continue outer;\r\n            }\r\n            final String key = tokens[0];\r\n            final String value = tokens[1];\r\n            Consumer<String> builderInvocation = builderInvocations.get(key);\r\n            if (builderInvocation != null) {\r\n                builderInvocation.accept(value);\r\n            } else {\r\n                LOG.warn(\"Unknown key {}, ignored\", key);\r\n            }\r\n        }\r\n        Device device = builder.build();\r\n        if (device.isHealthy()) {\r\n            devices.add(device);\r\n        } else {\r\n            LOG.warn(\"Skipping device {} because it's not healthy\", device);\r\n        }\r\n    }\r\n    return devices;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "onDevicesReleased",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void onDevicesReleased(Set<Device> releasedDevices)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "allocateDevices",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<Device> allocateDevices(Set<Device> availableDevices, int count, Map<String, String> env)\n{\r\n    Set<Device> allocated = new HashSet<>();\r\n    int number = 0;\r\n    for (Device d : availableDevices) {\r\n        allocated.add(d);\r\n        number++;\r\n        if (number == count) {\r\n            break;\r\n        }\r\n    }\r\n    return allocated;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "createCommandExecutor",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "CommandExecutor createCommandExecutor(String[] command)\n{\r\n    return new Shell.ShellCommandExecutor(command);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "getScriptFromEnvSetting",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "String getScriptFromEnvSetting(String envBinaryPath)\n{\r\n    LOG.info(\"Checking script path: {}\", envBinaryPath);\r\n    File f = new File(envBinaryPath);\r\n    if (!f.exists()) {\r\n        LOG.warn(\"Script {} does not exist\", envBinaryPath);\r\n        return null;\r\n    }\r\n    if (f.isDirectory()) {\r\n        LOG.warn(\"Specified path {} is a directory\", envBinaryPath);\r\n        return null;\r\n    }\r\n    if (!FileUtil.canExecute(f)) {\r\n        LOG.warn(\"Script {} is not executable\", envBinaryPath);\r\n        return null;\r\n    }\r\n    LOG.info(\"Found script: {}\", envBinaryPath);\r\n    return envBinaryPath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "getScriptFromHadoopCommon",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "String getScriptFromHadoopCommon(Function<String, String> envProvider, String binaryName)\n{\r\n    String scriptPath = null;\r\n    String hadoopCommon = envProvider.apply(HADOOP_COMMON_HOME);\r\n    if (hadoopCommon != null) {\r\n        String targetPath = hadoopCommon + \"/sbin/DevicePluginScript/\" + binaryName;\r\n        LOG.info(\"Checking script {}: \", targetPath);\r\n        if (new File(targetPath).exists()) {\r\n            LOG.info(\"Found script: {}\", targetPath);\r\n            scriptPath = targetPath;\r\n        }\r\n    } else {\r\n        LOG.info(\"$HADOOP_COMMON_HOME is not set\");\r\n    }\r\n    return scriptPath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "getScriptFromSearchDirs",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String getScriptFromSearchDirs(String binaryName, String[] scriptPaths)\n{\r\n    String scriptPath = null;\r\n    for (String dir : scriptPaths) {\r\n        File f = new File(dir, binaryName);\r\n        if (f.exists()) {\r\n            LOG.info(\"Found script: {}\", dir);\r\n            scriptPath = f.getAbsolutePath();\r\n            break;\r\n        }\r\n    }\r\n    return scriptPath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "getBuilderInvocationsMap",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "Map<String, Consumer<String>> getBuilderInvocationsMap(Device.Builder builder)\n{\r\n    Map<String, Consumer<String>> builderInvocations = new HashMap<>();\r\n    builderInvocations.put(\"id\", v -> builder.setId(Integer.parseInt(v)));\r\n    builderInvocations.put(\"dev\", v -> builder.setDevPath(v));\r\n    builderInvocations.put(\"state\", v -> {\r\n        if (v.equals(\"ONLINE\")) {\r\n            builder.setHealthy(true);\r\n        }\r\n        builder.setStatus(v);\r\n    });\r\n    builderInvocations.put(\"busId\", v -> builder.setBusID(v));\r\n    builderInvocations.put(\"major\", v -> builder.setMajorNumber(Integer.parseInt(v)));\r\n    builderInvocations.put(\"minor\", v -> builder.setMinorNumber(Integer.parseInt(v)));\r\n    return builderInvocations;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "setCommandExecutorProvider",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setCommandExecutorProvider(Function<String[], CommandExecutor> provider)\n{\r\n    this.commandExecutorProvider = provider;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "setVeDeviceDiscoverer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setVeDeviceDiscoverer(VEDeviceDiscoverer veDeviceDiscoverer)\n{\r\n    this.discoverer = veDeviceDiscoverer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "getBinaryPath",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getBinaryPath()\n{\r\n    return binaryPath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "setVolumeName",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DockerVolumeCommand setVolumeName(String volumeName)\n{\r\n    super.addCommandArguments(\"volume\", volumeName);\r\n    this.volumeName = volumeName;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "setDriverName",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DockerVolumeCommand setDriverName(String driverName)\n{\r\n    super.addCommandArguments(\"driver\", driverName);\r\n    this.driverName = driverName;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "getVolumeName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getVolumeName()\n{\r\n    return volumeName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "getDriverName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDriverName()\n{\r\n    return driverName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "getSubCommand",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getSubCommand()\n{\r\n    return subCommand;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "setFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DockerVolumeCommand setFormat(String format)\n{\r\n    super.addCommandArguments(\"format\", format);\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\privileged",
  "methodName" : "appendArgs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void appendArgs(String... args)\n{\r\n    for (String arg : args) {\r\n        this.args.add(arg);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\privileged",
  "methodName" : "appendArgs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void appendArgs(List<String> args)\n{\r\n    this.args.addAll(args);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\privileged",
  "methodName" : "enableFailureLogging",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void enableFailureLogging()\n{\r\n    this.failureLogging = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\privileged",
  "methodName" : "disableFailureLogging",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void disableFailureLogging()\n{\r\n    this.failureLogging = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\privileged",
  "methodName" : "isFailureLoggingEnabled",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isFailureLoggingEnabled()\n{\r\n    return failureLogging;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\privileged",
  "methodName" : "getOperationType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "OperationType getOperationType()\n{\r\n    return opType;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\privileged",
  "methodName" : "getArguments",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<String> getArguments()\n{\r\n    return Collections.unmodifiableList(this.args);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\privileged",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (!(other instanceof PrivilegedOperation)) {\r\n        return false;\r\n    }\r\n    PrivilegedOperation otherOp = (PrivilegedOperation) other;\r\n    return otherOp.opType.equals(opType) && otherOp.args.equals(args);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\privileged",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int hashCode()\n{\r\n    return opType.hashCode() + 97 * args.hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nvidia",
  "methodName" : "getRegisterRequestInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DeviceRegisterRequest getRegisterRequestInfo() throws Exception\n{\r\n    return DeviceRegisterRequest.Builder.newInstance().setResourceName(NV_RESOURCE_NAME).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nvidia",
  "methodName" : "getDevices",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "Set<Device> getDevices() throws Exception\n{\r\n    shellExecutor.searchBinary();\r\n    TreeSet<Device> r = new TreeSet<>();\r\n    String output;\r\n    try {\r\n        output = shellExecutor.getDeviceInfo();\r\n        String[] lines = output.trim().split(\"\\n\");\r\n        int id = 0;\r\n        for (String oneLine : lines) {\r\n            String[] tokensEachLine = oneLine.split(\",\");\r\n            if (tokensEachLine.length != 2) {\r\n                throw new Exception(\"Cannot parse the output to get device info. \" + \"Unexpected format in it:\" + oneLine);\r\n            }\r\n            String minorNumber = tokensEachLine[0].trim();\r\n            String busId = tokensEachLine[1].trim();\r\n            String majorNumber = getMajorNumber(DEV_NAME_PREFIX + minorNumber);\r\n            if (majorNumber != null) {\r\n                r.add(Device.Builder.newInstance().setId(id).setMajorNumber(Integer.parseInt(majorNumber)).setMinorNumber(Integer.parseInt(minorNumber)).setBusID(busId).setDevPath(\"/dev/\" + DEV_NAME_PREFIX + minorNumber).setHealthy(true).build());\r\n                id++;\r\n            }\r\n        }\r\n        lastTimeFoundDevices = r;\r\n        return r;\r\n    } catch (IOException e) {\r\n        LOG.debug(\"Failed to get output from {}\", pathOfGpuBinary);\r\n        throw new YarnException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nvidia",
  "methodName" : "onDevicesAllocated",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "DeviceRuntimeSpec onDevicesAllocated(Set<Device> allocatedDevices, YarnRuntimeType yarnRuntime) throws Exception\n{\r\n    LOG.debug(\"Generating runtime spec for allocated devices: {}, {}\", allocatedDevices, yarnRuntime.getName());\r\n    if (yarnRuntime == YarnRuntimeType.RUNTIME_DOCKER) {\r\n        String nvidiaRuntime = \"nvidia\";\r\n        String nvidiaVisibleDevices = \"NVIDIA_VISIBLE_DEVICES\";\r\n        StringBuffer gpuMinorNumbersSB = new StringBuffer();\r\n        for (Device device : allocatedDevices) {\r\n            gpuMinorNumbersSB.append(device.getMinorNumber() + \",\");\r\n        }\r\n        String minorNumbers = gpuMinorNumbersSB.toString();\r\n        LOG.info(\"Nvidia Docker v2 assigned GPU: \" + minorNumbers);\r\n        return DeviceRuntimeSpec.Builder.newInstance().addEnv(nvidiaVisibleDevices, minorNumbers.substring(0, minorNumbers.length() - 1)).setContainerRuntime(nvidiaRuntime).build();\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nvidia",
  "methodName" : "onDevicesReleased",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void onDevicesReleased(Set<Device> releasedDevices) throws Exception\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nvidia",
  "methodName" : "getMajorNumber",
  "errType" : [ "IOException", "NumberFormatException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "String getMajorNumber(String devName)\n{\r\n    String output = null;\r\n    try {\r\n        LOG.debug(\"Get major numbers from /dev/{}\", devName);\r\n        output = shellExecutor.getMajorMinorInfo(devName);\r\n        String[] strs = output.trim().split(\":\");\r\n        LOG.debug(\"stat output:{}\", output);\r\n        output = Integer.toString(Integer.parseInt(strs[0], 16));\r\n    } catch (IOException e) {\r\n        String msg = \"Failed to get major number from reading /dev/\" + devName;\r\n        LOG.warn(msg);\r\n    } catch (NumberFormatException e) {\r\n        LOG.error(\"Failed to parse device major number from stat output\");\r\n        output = null;\r\n    }\r\n    return output;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nvidia",
  "methodName" : "allocateDevices",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "Set<Device> allocateDevices(Set<Device> availableDevices, int count, Map<String, String> envs)\n{\r\n    Set<Device> allocation = new TreeSet<>();\r\n    if (availableDevices.size() < 3 || count == 1 || availableDevices.size() == count) {\r\n        basicSchedule(allocation, count, availableDevices);\r\n        return allocation;\r\n    }\r\n    try {\r\n        if (!topoInitialized) {\r\n            initCostTable();\r\n        }\r\n        topologyAwareSchedule(allocation, count, envs, availableDevices, this.costTable);\r\n        if (allocation.size() == count) {\r\n            return allocation;\r\n        } else {\r\n            LOG.error(\"Failed to do topology scheduling. Skip to use basic \" + \"scheduling\");\r\n        }\r\n    } catch (IOException e) {\r\n        LOG.error(\"Error in getting GPU topology info. \" + \"Skip topology aware scheduling\", e);\r\n    }\r\n    basicSchedule(allocation, count, availableDevices);\r\n    return allocation;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nvidia",
  "methodName" : "initCostTable",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void initCostTable() throws IOException\n{\r\n    String topo = shellExecutor.getTopologyInfo();\r\n    parseTopo(topo, devicePairToWeight);\r\n    if (lastTimeFoundDevices == null) {\r\n        try {\r\n            getDevices();\r\n        } catch (Exception e) {\r\n            LOG.error(\"Failed to get devices!\", e);\r\n            return;\r\n        }\r\n    }\r\n    buildCostTable(costTable, lastTimeFoundDevices);\r\n    loggingCostTable(costTable);\r\n    this.topoInitialized = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nvidia",
  "methodName" : "loggingCostTable",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void loggingCostTable(Map<Integer, List<Map.Entry<Set<Device>, Integer>>> cTable)\n{\r\n    if (LOG.isDebugEnabled()) {\r\n        StringBuilder sb = new StringBuilder(\"The costTable is:\");\r\n        sb.append(\"\\n{\");\r\n        for (Map.Entry<Integer, List<Map.Entry<Set<Device>, Integer>>> entry : cTable.entrySet()) {\r\n            sb.append(\"\\n\\t\").append(entry.getKey()).append(\" => [\");\r\n            for (Map.Entry<Set<Device>, Integer> e : entry.getValue()) {\r\n                sb.append(\"\\n\\t\\t\").append(e.toString()).append(\",\\n\");\r\n            }\r\n            sb.append(\"\\t\\t]\\n\");\r\n        }\r\n        sb.append(\"}\\n\");\r\n        LOG.debug(sb.toString());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nvidia",
  "methodName" : "buildCostTable",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void buildCostTable(Map<Integer, List<Map.Entry<Set<Device>, Integer>>> cTable, Set<Device> ltfDevices)\n{\r\n    Device[] deviceList = new Device[ltfDevices.size()];\r\n    ltfDevices.toArray(deviceList);\r\n    generateAllDeviceCombination(cTable, deviceList, deviceList.length);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nvidia",
  "methodName" : "generateAllDeviceCombination",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void generateAllDeviceCombination(Map<Integer, List<Map.Entry<Set<Device>, Integer>>> cTable, Device[] allDevices, int n)\n{\r\n    for (int i = 2; i < n; i++) {\r\n        Map<Set<Device>, Integer> combinationToCost = new HashMap<>();\r\n        buildCombination(combinationToCost, allDevices, n, i);\r\n        List<Map.Entry<Set<Device>, Integer>> listSortedByCost = new LinkedList<>(combinationToCost.entrySet());\r\n        Collections.sort(listSortedByCost, (o1, o2) -> (o1.getValue()).compareTo(o2.getValue()));\r\n        cTable.put(i, listSortedByCost);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nvidia",
  "methodName" : "buildCombination",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void buildCombination(Map<Set<Device>, Integer> combinationToCost, Device[] allDevices, int n, int r)\n{\r\n    Device[] subDeviceList = new Device[r];\r\n    combinationRecursive(combinationToCost, allDevices, subDeviceList, 0, n - 1, 0, r);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nvidia",
  "methodName" : "combinationRecursive",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void combinationRecursive(Map<Set<Device>, Integer> cTc, Device[] allDevices, Device[] subDeviceList, int start, int end, int index, int r)\n{\r\n    if (index == r) {\r\n        Set<Device> oneSet = new TreeSet<>(Arrays.asList(subDeviceList));\r\n        int cost = computeCostOfDevices(subDeviceList);\r\n        cTc.put(oneSet, cost);\r\n        return;\r\n    }\r\n    for (int i = start; i <= end; i++) {\r\n        subDeviceList[index] = allDevices[i];\r\n        combinationRecursive(cTc, allDevices, subDeviceList, i + 1, end, index + 1, r);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nvidia",
  "methodName" : "computeCostOfDevices",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int computeCostOfDevices(Device[] devices)\n{\r\n    int cost = 0;\r\n    String gpuIndex0;\r\n    String gpuIndex1;\r\n    for (int i = 0; i < devices.length; i++) {\r\n        gpuIndex0 = String.valueOf(devices[i].getMinorNumber());\r\n        for (int j = i + 1; j < devices.length; j++) {\r\n            gpuIndex1 = String.valueOf(devices[j].getMinorNumber());\r\n            cost += this.devicePairToWeight.get(gpuIndex0 + \"-\" + gpuIndex1);\r\n        }\r\n    }\r\n    return cost;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nvidia",
  "methodName" : "topologyAwareSchedule",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void topologyAwareSchedule(Set<Device> allocation, int count, Map<String, String> envs, Set<Device> availableDevices, Map<Integer, List<Map.Entry<Set<Device>, Integer>>> cTable)\n{\r\n    int num = 0;\r\n    String policy = envs.get(TOPOLOGY_POLICY_ENV_KEY);\r\n    if (policy == null) {\r\n        policy = TOPOLOGY_POLICY_PACK;\r\n    }\r\n    if (cTable == null) {\r\n        LOG.error(\"No cost table initialized!\");\r\n        return;\r\n    }\r\n    List<Map.Entry<Set<Device>, Integer>> combinationsToCost = cTable.get(count);\r\n    Iterator<Map.Entry<Set<Device>, Integer>> iterator = combinationsToCost.iterator();\r\n    if (policy.equalsIgnoreCase(TOPOLOGY_POLICY_SPREAD)) {\r\n        iterator = ((LinkedList) combinationsToCost).descendingIterator();\r\n    }\r\n    while (iterator.hasNext()) {\r\n        Map.Entry<Set<Device>, Integer> element = iterator.next();\r\n        if (availableDevices.containsAll(element.getKey())) {\r\n            allocation.addAll(element.getKey());\r\n            LOG.info(\"Topology scheduler allocated: \" + allocation);\r\n            return;\r\n        }\r\n    }\r\n    LOG.error(\"Unknown error happened in topology scheduler\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nvidia",
  "methodName" : "basicSchedule",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void basicSchedule(Set<Device> allocation, int count, Set<Device> availableDevices)\n{\r\n    if (count == availableDevices.size()) {\r\n        allocation.addAll(availableDevices);\r\n        return;\r\n    }\r\n    int number = 0;\r\n    for (Device d : availableDevices) {\r\n        allocation.add(d);\r\n        number++;\r\n        if (number == count) {\r\n            break;\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nvidia",
  "methodName" : "parseTopo",
  "errType" : null,
  "containingMethodsNum" : 36,
  "sourceCodeText" : "void parseTopo(String topo, Map<String, Integer> deviceLinkToWeight)\n{\r\n    String[] lines = topo.split(\"\\n\");\r\n    int rowMinor;\r\n    int colMinor;\r\n    String legend;\r\n    String tempType;\r\n    for (String oneLine : lines) {\r\n        oneLine = oneLine.trim();\r\n        if (oneLine.isEmpty()) {\r\n            continue;\r\n        }\r\n        if (oneLine.startsWith(\"Legend\")) {\r\n            break;\r\n        }\r\n        if (oneLine.contains(\"Affinity\")) {\r\n            continue;\r\n        }\r\n        String[] tokens = oneLine.split((\"\\\\s+\"));\r\n        String name = tokens[0];\r\n        rowMinor = Integer.parseInt(name.substring(name.lastIndexOf(\"U\") + 1));\r\n        for (int i = 1; i < tokens.length; i++) {\r\n            tempType = tokens[i];\r\n            colMinor = i - 1;\r\n            if (tempType.equals(\"X\")) {\r\n                continue;\r\n            }\r\n            if (tempType.equals(\"SOC\") || tempType.equals(\"SYS\")) {\r\n                populateGraphEdgeWeight(DeviceLinkType.P2PLinkCrossCPUSocket, rowMinor, colMinor, deviceLinkToWeight);\r\n                continue;\r\n            }\r\n            if (tempType.equals(\"PHB\") || tempType.equals(\"NODE\")) {\r\n                populateGraphEdgeWeight(DeviceLinkType.P2PLinkSameCPUSocket, rowMinor, colMinor, deviceLinkToWeight);\r\n                continue;\r\n            }\r\n            if (tempType.equals(\"PXB\")) {\r\n                populateGraphEdgeWeight(DeviceLinkType.P2PLinkMultiSwitch, rowMinor, colMinor, deviceLinkToWeight);\r\n                continue;\r\n            }\r\n            if (tempType.equals(\"PIX\")) {\r\n                populateGraphEdgeWeight(DeviceLinkType.P2PLinkSingleSwitch, rowMinor, colMinor, deviceLinkToWeight);\r\n                continue;\r\n            }\r\n            if (tempType.equals(\"NV1\")) {\r\n                populateGraphEdgeWeight(DeviceLinkType.P2PLinkNVLink1, rowMinor, colMinor, deviceLinkToWeight);\r\n                continue;\r\n            }\r\n            if (tempType.equals(\"NV2\")) {\r\n                populateGraphEdgeWeight(DeviceLinkType.P2PLinkNVLink2, rowMinor, colMinor, deviceLinkToWeight);\r\n                continue;\r\n            }\r\n            if (tempType.equals(\"NV3\")) {\r\n                populateGraphEdgeWeight(DeviceLinkType.P2PLinkNVLink3, rowMinor, colMinor, deviceLinkToWeight);\r\n                continue;\r\n            }\r\n            if (tempType.equals(\"NV4\")) {\r\n                populateGraphEdgeWeight(DeviceLinkType.P2PLinkNVLink4, rowMinor, colMinor, deviceLinkToWeight);\r\n                continue;\r\n            }\r\n            if (tempType.equals(\"NV5\")) {\r\n                populateGraphEdgeWeight(DeviceLinkType.P2PLinkNVLink5, rowMinor, colMinor, deviceLinkToWeight);\r\n                continue;\r\n            }\r\n            if (tempType.equals(\"NV6\")) {\r\n                populateGraphEdgeWeight(DeviceLinkType.P2PLinkNVLink6, rowMinor, colMinor, deviceLinkToWeight);\r\n                continue;\r\n            }\r\n            if (tempType.equals(\"NV7\")) {\r\n                populateGraphEdgeWeight(DeviceLinkType.P2PLinkNVLink7, rowMinor, colMinor, deviceLinkToWeight);\r\n                continue;\r\n            }\r\n            if (tempType.equals(\"NV8\")) {\r\n                populateGraphEdgeWeight(DeviceLinkType.P2PLinkNVLink8, rowMinor, colMinor, deviceLinkToWeight);\r\n                continue;\r\n            }\r\n            if (tempType.equals(\"NV9\")) {\r\n                populateGraphEdgeWeight(DeviceLinkType.P2PLinkNVLink9, rowMinor, colMinor, deviceLinkToWeight);\r\n                continue;\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nvidia",
  "methodName" : "populateGraphEdgeWeight",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void populateGraphEdgeWeight(DeviceLinkType linkType, int leftVertex, int rightVertex, Map<String, Integer> deviceLinkToWeight)\n{\r\n    deviceLinkToWeight.put(leftVertex + \"-\" + rightVertex, linkType.getWeight());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nvidia",
  "methodName" : "setPathOfGpuBinary",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setPathOfGpuBinary(String pOfGpuBinary)\n{\r\n    this.pathOfGpuBinary = pOfGpuBinary;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nvidia",
  "methodName" : "setShellExecutor",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setShellExecutor(NvidiaCommandExecutor shellExecutor)\n{\r\n    this.shellExecutor = shellExecutor;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nvidia",
  "methodName" : "isTopoInitialized",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isTopoInitialized()\n{\r\n    return topoInitialized;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nvidia",
  "methodName" : "getCostTable",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<Integer, List<Map.Entry<Set<Device>, Integer>>> getCostTable()\n{\r\n    return costTable;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nvidia",
  "methodName" : "getDevicePairToWeight",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, Integer> getDevicePairToWeight()\n{\r\n    return devicePairToWeight;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "getMemNodes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<String> getMemNodes()\n{\r\n    return nodeVsMemory.keySet();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "getCpuNodes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<String> getCpuNodes()\n{\r\n    return nodeVsCpus.keySet();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "getNodeVsMemory",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ImmutableMap<String, Long> getNodeVsMemory()\n{\r\n    return nodeVsMemory;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "getNodeVsCpus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ImmutableMap<String, Integer> getNodeVsCpus()\n{\r\n    return nodeVsCpus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String toString()\n{\r\n    return \"NumaResourceAllocation{\" + \"nodeVsMemory=\" + nodeVsMemory + \", nodeVsCpus=\" + nodeVsCpus + '}';\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean equals(Object o)\n{\r\n    if (this == o) {\r\n        return true;\r\n    }\r\n    if (o == null || getClass() != o.getClass()) {\r\n        return false;\r\n    }\r\n    NumaResourceAllocation that = (NumaResourceAllocation) o;\r\n    return Objects.equals(nodeVsMemory, that.nodeVsMemory) && Objects.equals(nodeVsCpus, that.nodeVsCpus);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return Objects.hash(nodeVsMemory, nodeVsCpus);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getDefaultOOMHandler",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Runnable getDefaultOOMHandler(Configuration conf, Context context, Runnable oomHandlerLocal, boolean controlVirtual) throws YarnException\n{\r\n    Class oomHandlerClass = conf.getClass(YarnConfiguration.NM_ELASTIC_MEMORY_CONTROL_OOM_HANDLER, DefaultOOMHandler.class);\r\n    if (oomHandlerLocal == null) {\r\n        try {\r\n            Constructor constr = oomHandlerClass.getConstructor(Context.class, boolean.class);\r\n            oomHandlerLocal = (Runnable) constr.newInstance(context, controlVirtual);\r\n        } catch (Exception ex) {\r\n            throw new YarnException(ex);\r\n        }\r\n    }\r\n    return oomHandlerLocal;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "stopListening",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void stopListening()\n{\r\n    stopped = true;\r\n    if (process != null) {\r\n        process.destroyForcibly();\r\n    } else {\r\n        LOG.warn(\"Trying to stop listening, when listening is not running\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "isAvailable",
  "errType" : [ "SecurityException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "boolean isAvailable()\n{\r\n    try {\r\n        if (!Shell.LINUX) {\r\n            LOG.info(\"CGroupElasticMemoryController currently is supported only \" + \"on Linux.\");\r\n            return false;\r\n        }\r\n        if (ResourceHandlerModule.getCGroupsHandler() == null || ResourceHandlerModule.getMemoryResourceHandler() == null) {\r\n            LOG.info(\"CGroupElasticMemoryController requires enabling \" + \"memory CGroups with\" + YarnConfiguration.NM_MEMORY_RESOURCE_ENABLED);\r\n            return false;\r\n        }\r\n    } catch (SecurityException se) {\r\n        LOG.info(\"Failed to get Operating System name. \" + se);\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "run",
  "errType" : [ "OOMNotResolvedException", "Exception", "InterruptedException" ],
  "containingMethodsNum" : 22,
  "sourceCodeText" : "void run()\n{\r\n    ExecutorService executor = null;\r\n    try {\r\n        setCGroupParameters();\r\n        ProcessBuilder oomListener = new ProcessBuilder();\r\n        oomListener.command(oomListenerPath, yarnCGroupPath);\r\n        synchronized (this) {\r\n            if (!stopped) {\r\n                process = oomListener.start();\r\n            } else {\r\n                resetCGroupParameters();\r\n                LOG.info(\"Listener stopped before starting\");\r\n                return;\r\n            }\r\n        }\r\n        LOG.info(String.format(\"Listening on %s with %s\", yarnCGroupPath, oomListenerPath));\r\n        executor = Executors.newFixedThreadPool(2);\r\n        Future<String> errorListener = executor.submit(() -> IOUtils.toString(process.getErrorStream(), StandardCharsets.UTF_8));\r\n        InputStream events = process.getInputStream();\r\n        byte[] event = new byte[8];\r\n        int read;\r\n        while ((read = events.read(event)) == event.length) {\r\n            resolveOOM(executor);\r\n        }\r\n        if (read != -1) {\r\n            LOG.warn(String.format(\"Characters returned from event hander: %d\", read));\r\n        }\r\n        int exitCode = process.waitFor();\r\n        String error = errorListener.get();\r\n        process = null;\r\n        LOG.info(String.format(\"OOM listener exited %d %s\", exitCode, error));\r\n    } catch (OOMNotResolvedException ex) {\r\n        throw new YarnRuntimeException(\"Could not resolve OOM\", ex);\r\n    } catch (Exception ex) {\r\n        synchronized (this) {\r\n            if (!stopped) {\r\n                LOG.warn(\"OOM Listener exiting.\", ex);\r\n            }\r\n        }\r\n    } finally {\r\n        if (process != null && process.isAlive()) {\r\n            process.destroyForcibly();\r\n        }\r\n        if (executor != null) {\r\n            try {\r\n                executor.awaitTermination(6, TimeUnit.SECONDS);\r\n            } catch (InterruptedException e) {\r\n                LOG.warn(\"Exiting without processing all OOM events.\");\r\n            }\r\n            executor.shutdown();\r\n        }\r\n        resetCGroupParameters();\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "resolveOOM",
  "errType" : [ "RuntimeException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void resolveOOM(ExecutorService executor) throws InterruptedException, java.util.concurrent.ExecutionException\n{\r\n    final long start = clock.getTime();\r\n    Future<Boolean> watchdog = executor.submit(() -> watchAndLogOOMState(start));\r\n    try {\r\n        oomHandler.run();\r\n    } catch (RuntimeException ex) {\r\n        watchdog.cancel(true);\r\n        throw new OOMNotResolvedException(\"OOM handler failed\", ex);\r\n    }\r\n    if (!watchdog.get()) {\r\n        throw new OOMNotResolvedException(\"OOM handler timed out\", null);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "watchAndLogOOMState",
  "errType" : [ "InterruptedException", "Exception" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "boolean watchAndLogOOMState(long start)\n{\r\n    long lastLog = start;\r\n    try {\r\n        long end = start;\r\n        while (end - start < timeoutMS) {\r\n            end = clock.getTime();\r\n            String underOOM = cgroups.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, \"\", CGROUP_PARAM_MEMORY_OOM_CONTROL);\r\n            if (underOOM.contains(CGroupsHandler.UNDER_OOM)) {\r\n                if (end - lastLog > 1000) {\r\n                    LOG.warn(String.format(\"OOM not resolved in %d ms\", end - start));\r\n                    lastLog = end;\r\n                }\r\n            } else {\r\n                LOG.info(String.format(\"Resolved OOM in %d ms\", end - start));\r\n                return true;\r\n            }\r\n            Thread.sleep(10);\r\n        }\r\n    } catch (InterruptedException ex) {\r\n        LOG.debug(\"Watchdog interrupted\");\r\n    } catch (Exception e) {\r\n        LOG.warn(\"Exception running logging thread\", e);\r\n    }\r\n    LOG.warn(String.format(\"OOM was not resolved in %d ms\", clock.getTime() - start));\r\n    stopListening();\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "setCGroupParameters",
  "errType" : [ "ResourceHandlerException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void setCGroupParameters() throws ResourceHandlerException\n{\r\n    cgroups.updateCGroupParam(CGroupsHandler.CGroupController.MEMORY, \"\", CGROUP_PARAM_MEMORY_OOM_CONTROL, \"1\");\r\n    if (controlPhysicalMemory && !controlVirtualMemory) {\r\n        try {\r\n            cgroups.updateCGroupParam(CGroupsHandler.CGroupController.MEMORY, \"\", CGROUP_PARAM_MEMORY_SWAP_HARD_LIMIT_BYTES, CGROUP_NO_LIMIT);\r\n        } catch (ResourceHandlerException ex) {\r\n            LOG.debug(\"Swap monitoring is turned off in the kernel\");\r\n        }\r\n        cgroups.updateCGroupParam(CGroupsHandler.CGroupController.MEMORY, \"\", CGROUP_PARAM_MEMORY_HARD_LIMIT_BYTES, Long.toString(limit));\r\n    } else if (controlVirtualMemory && !controlPhysicalMemory) {\r\n        cgroups.updateCGroupParam(CGroupsHandler.CGroupController.MEMORY, \"\", CGROUP_PARAM_MEMORY_SWAP_HARD_LIMIT_BYTES, CGROUP_NO_LIMIT);\r\n        cgroups.updateCGroupParam(CGroupsHandler.CGroupController.MEMORY, \"\", CGROUP_PARAM_MEMORY_HARD_LIMIT_BYTES, Long.toString(limit));\r\n        cgroups.updateCGroupParam(CGroupsHandler.CGroupController.MEMORY, \"\", CGROUP_PARAM_MEMORY_SWAP_HARD_LIMIT_BYTES, Long.toString(limit));\r\n    } else {\r\n        throw new ResourceHandlerException(String.format(\"Unsupported scenario physical:%b virtual:%b\", controlPhysicalMemory, controlVirtualMemory));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "resetCGroupParameters",
  "errType" : [ "ResourceHandlerException", "ResourceHandlerException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void resetCGroupParameters()\n{\r\n    try {\r\n        try {\r\n            cgroups.updateCGroupParam(CGroupsHandler.CGroupController.MEMORY, \"\", CGROUP_PARAM_MEMORY_SWAP_HARD_LIMIT_BYTES, CGROUP_NO_LIMIT);\r\n        } catch (ResourceHandlerException ex) {\r\n            LOG.debug(\"Swap monitoring is turned off in the kernel\");\r\n        }\r\n        cgroups.updateCGroupParam(CGroupsHandler.CGroupController.MEMORY, \"\", CGROUP_PARAM_MEMORY_HARD_LIMIT_BYTES, CGROUP_NO_LIMIT);\r\n        cgroups.updateCGroupParam(CGroupsHandler.CGroupController.MEMORY, \"\", CGROUP_PARAM_MEMORY_OOM_CONTROL, \"0\");\r\n    } catch (ResourceHandlerException ex) {\r\n        LOG.warn(\"Error in cleanup\", ex);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getOOMListenerExecutablePath",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String getOOMListenerExecutablePath(Configuration conf)\n{\r\n    String yarnHomeEnvVar = System.getenv(ApplicationConstants.Environment.HADOOP_YARN_HOME.key());\r\n    if (yarnHomeEnvVar == null) {\r\n        yarnHomeEnvVar = \".\";\r\n    }\r\n    File hadoopBin = new File(yarnHomeEnvVar, \"bin\");\r\n    String defaultPath = new File(hadoopBin, \"oom-listener\").getAbsolutePath();\r\n    final String path = conf.get(YarnConfiguration.NM_ELASTIC_MEMORY_CONTROL_OOM_LISTENER_PATH, defaultPath);\r\n    LOG.debug(String.format(\"oom-listener path: %s %s\", path, defaultPath));\r\n    return path;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "getContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Container getContainer()\n{\r\n    return container;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 36,
  "sourceCodeText" : "void serviceInit(Configuration myConf) throws Exception\n{\r\n    this.conf = myConf;\r\n    this.monitoringInterval = this.conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS, this.conf.getLong(YarnConfiguration.NM_RESOURCE_MON_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_RESOURCE_MON_INTERVAL_MS));\r\n    this.logCheckInterval = conf.getInt(YarnConfiguration.NM_CONTAINER_LOG_MON_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_CONTAINER_LOG_MON_INTERVAL_MS);\r\n    this.logDirSizeLimit = conf.getLong(YarnConfiguration.NM_CONTAINER_LOG_DIR_SIZE_LIMIT_BYTES, YarnConfiguration.DEFAULT_NM_CONTAINER_LOG_DIR_SIZE_LIMIT_BYTES);\r\n    this.logTotalSizeLimit = conf.getLong(YarnConfiguration.NM_CONTAINER_LOG_TOTAL_SIZE_LIMIT_BYTES, YarnConfiguration.DEFAULT_NM_CONTAINER_LOG_TOTAL_SIZE_LIMIT_BYTES);\r\n    this.resourceCalculatorPlugin = ResourceCalculatorPlugin.getContainersMonitorPlugin(this.conf);\r\n    LOG.info(\"Using ResourceCalculatorPlugin: {}\", this.resourceCalculatorPlugin);\r\n    processTreeClass = this.conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, null, ResourceCalculatorProcessTree.class);\r\n    LOG.info(\"Using ResourceCalculatorProcessTree: {}\", this.processTreeClass);\r\n    this.containerMetricsEnabled = this.conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE, YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);\r\n    this.containerMetricsPeriodMs = this.conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS, YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);\r\n    this.containerMetricsUnregisterDelayMs = this.conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS, YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS);\r\n    long configuredPMemForContainers = NodeManagerHardwareUtils.getContainerMemoryMB(this.resourceCalculatorPlugin, this.conf);\r\n    int configuredVCoresForContainers = NodeManagerHardwareUtils.getVCores(this.resourceCalculatorPlugin, this.conf);\r\n    vmemRatio = this.conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO, YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\r\n    Preconditions.checkArgument(vmemRatio > 0.99f, YarnConfiguration.NM_VMEM_PMEM_RATIO + \" should be at least 1.0\");\r\n    Resource resourcesForContainers = Resource.newInstance(configuredPMemForContainers, configuredVCoresForContainers);\r\n    setAllocatedResourcesForContainers(resourcesForContainers);\r\n    pmemCheckEnabled = this.conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED, YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\r\n    vmemCheckEnabled = this.conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED, YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\r\n    elasticMemoryEnforcement = this.conf.getBoolean(YarnConfiguration.NM_ELASTIC_MEMORY_CONTROL_ENABLED, YarnConfiguration.DEFAULT_NM_ELASTIC_MEMORY_CONTROL_ENABLED);\r\n    strictMemoryEnforcement = conf.getBoolean(YarnConfiguration.NM_MEMORY_RESOURCE_ENFORCED, YarnConfiguration.DEFAULT_NM_MEMORY_RESOURCE_ENFORCED);\r\n    LOG.info(\"Physical memory check enabled: {}\", pmemCheckEnabled);\r\n    LOG.info(\"Virtual memory check enabled: {}\", vmemCheckEnabled);\r\n    LOG.info(\"Elastic memory control enabled: {}\", elasticMemoryEnforcement);\r\n    LOG.info(\"Strict memory control enabled: {}\", strictMemoryEnforcement);\r\n    if (elasticMemoryEnforcement) {\r\n        if (!CGroupElasticMemoryController.isAvailable()) {\r\n            throw new YarnException(\"CGroup Elastic Memory controller enabled but \" + \"it is not available. Exiting.\");\r\n        } else {\r\n            this.oomListenerThread = new CGroupElasticMemoryController(conf, context, ResourceHandlerModule.getCGroupsHandler(), pmemCheckEnabled, vmemCheckEnabled, pmemCheckEnabled ? maxPmemAllottedForContainers : maxVmemAllottedForContainers);\r\n        }\r\n    }\r\n    containersMonitorEnabled = isContainerMonitorEnabled() && monitoringInterval > 0;\r\n    LOG.info(\"ContainersMonitor enabled: {}\", containersMonitorEnabled);\r\n    logMonitorEnabled = conf.getBoolean(YarnConfiguration.NM_CONTAINER_LOG_MONITOR_ENABLED, YarnConfiguration.DEFAULT_NM_CONTAINER_LOG_MONITOR_ENABLED);\r\n    LOG.info(\"Container Log Monitor Enabled: \" + logMonitorEnabled);\r\n    nodeCpuPercentageForYARN = NodeManagerHardwareUtils.getNodeCpuPercentage(this.conf);\r\n    if (pmemCheckEnabled) {\r\n        long totalPhysicalMemoryOnNM = UNKNOWN_MEMORY_LIMIT;\r\n        if (this.resourceCalculatorPlugin != null) {\r\n            totalPhysicalMemoryOnNM = this.resourceCalculatorPlugin.getPhysicalMemorySize();\r\n            if (totalPhysicalMemoryOnNM <= 0) {\r\n                LOG.warn(\"NodeManager's totalPmem could not be calculated. \" + \"Setting it to {}\", UNKNOWN_MEMORY_LIMIT);\r\n                totalPhysicalMemoryOnNM = UNKNOWN_MEMORY_LIMIT;\r\n            }\r\n        }\r\n        if (totalPhysicalMemoryOnNM != UNKNOWN_MEMORY_LIMIT && this.maxPmemAllottedForContainers > totalPhysicalMemoryOnNM * 0.80f) {\r\n            LOG.warn(\"NodeManager configured with {} physical memory allocated to \" + \"containers, which is more than 80% of the total physical memory \" + \"available ({}). Thrashing might happen.\", TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers, \"B\", 1), TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM, \"B\", 1));\r\n        }\r\n    }\r\n    super.serviceInit(this.conf);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "isContainerMonitorEnabled",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isContainerMonitorEnabled()\n{\r\n    return conf.getBoolean(YarnConfiguration.NM_CONTAINER_MONITOR_ENABLED, YarnConfiguration.DEFAULT_NM_CONTAINER_MONITOR_ENABLED);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getResourceCalculatorProcessTree",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceCalculatorProcessTree getResourceCalculatorProcessTree(String pId)\n{\r\n    return ResourceCalculatorProcessTree.getResourceCalculatorProcessTree(pId, processTreeClass, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "isResourceCalculatorAvailable",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean isResourceCalculatorAvailable()\n{\r\n    if (resourceCalculatorPlugin == null) {\r\n        LOG.info(\"ResourceCalculatorPlugin is unavailable on this system. \" + \"{} is disabled.\", this.getClass().getName());\r\n        return false;\r\n    }\r\n    if (getResourceCalculatorProcessTree(\"0\") == null) {\r\n        LOG.info(\"ResourceCalculatorProcessTree is unavailable on this system. \" + \"{} is disabled.\", this.getClass().getName());\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    if (containersMonitorEnabled) {\r\n        this.monitoringThread.start();\r\n    }\r\n    if (oomListenerThread != null) {\r\n        oomListenerThread.start();\r\n    }\r\n    if (logMonitorEnabled) {\r\n        this.logMonitorThread.start();\r\n    }\r\n    super.serviceStart();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "serviceStop",
  "errType" : [ "InterruptedException", "InterruptedException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    stopped = true;\r\n    if (containersMonitorEnabled) {\r\n        this.monitoringThread.interrupt();\r\n        try {\r\n            this.monitoringThread.join();\r\n        } catch (InterruptedException e) {\r\n            LOG.info(\"ContainersMonitorImpl monitoring thread interrupted\");\r\n        }\r\n        if (this.oomListenerThread != null) {\r\n            this.oomListenerThread.stopListening();\r\n            try {\r\n                this.oomListenerThread.join();\r\n            } finally {\r\n                this.oomListenerThread = null;\r\n            }\r\n        }\r\n    }\r\n    if (logMonitorEnabled) {\r\n        this.logMonitorThread.interrupt();\r\n        try {\r\n            this.logMonitorThread.join();\r\n        } catch (InterruptedException e) {\r\n        }\r\n    }\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "isProcessTreeOverLimit",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isProcessTreeOverLimit(String containerId, long currentMemUsage, long curMemUsageOfAgedProcesses, long memLimit)\n{\r\n    boolean isOverLimit = false;\r\n    if (currentMemUsage > (2 * memLimit)) {\r\n        LOG.warn(\"Process tree for container: {} running over twice \" + \"the configured limit. Limit={}, current usage = {}\", containerId, memLimit, currentMemUsage);\r\n        isOverLimit = true;\r\n    } else if (curMemUsageOfAgedProcesses > memLimit) {\r\n        LOG.warn(\"Process tree for container: {} has processes older than 1 \" + \"iteration running over the configured limit. \" + \"Limit={}, current usage = {}\", containerId, memLimit, curMemUsageOfAgedProcesses);\r\n        isOverLimit = true;\r\n    }\r\n    return isOverLimit;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "isProcessTreeOverLimit",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean isProcessTreeOverLimit(ResourceCalculatorProcessTree pTree, String containerId, long limit)\n{\r\n    long currentMemUsage = pTree.getVirtualMemorySize();\r\n    long curMemUsageOfAgedProcesses = pTree.getVirtualMemorySize(1);\r\n    return isProcessTreeOverLimit(containerId, currentMemUsage, curMemUsageOfAgedProcesses, limit);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "updateContainerMetrics",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void updateContainerMetrics(ContainersMonitorEvent monitoringEvent)\n{\r\n    if (!containerMetricsEnabled || monitoringEvent == null) {\r\n        return;\r\n    }\r\n    ContainerId containerId = monitoringEvent.getContainerId();\r\n    ContainerMetrics usageMetrics;\r\n    int vmemLimitMBs;\r\n    int pmemLimitMBs;\r\n    int cpuVcores;\r\n    switch(monitoringEvent.getType()) {\r\n        case START_MONITORING_CONTAINER:\r\n            usageMetrics = ContainerMetrics.forContainer(containerId, containerMetricsPeriodMs, containerMetricsUnregisterDelayMs);\r\n            ContainerStartMonitoringEvent startEvent = (ContainerStartMonitoringEvent) monitoringEvent;\r\n            usageMetrics.recordStateChangeDurations(startEvent.getLaunchDuration(), startEvent.getLocalizationDuration());\r\n            cpuVcores = startEvent.getCpuVcores();\r\n            vmemLimitMBs = (int) (startEvent.getVmemLimit() >> 20);\r\n            pmemLimitMBs = (int) (startEvent.getPmemLimit() >> 20);\r\n            usageMetrics.recordResourceLimit(vmemLimitMBs, pmemLimitMBs, cpuVcores);\r\n            break;\r\n        case STOP_MONITORING_CONTAINER:\r\n            ContainerStopMonitoringEvent stopEvent = (ContainerStopMonitoringEvent) monitoringEvent;\r\n            usageMetrics = ContainerMetrics.getContainerMetrics(containerId);\r\n            if (usageMetrics != null) {\r\n                usageMetrics.finished(stopEvent.isForReInit());\r\n            }\r\n            break;\r\n        case CHANGE_MONITORING_CONTAINER_RESOURCE:\r\n            usageMetrics = ContainerMetrics.forContainer(containerId, containerMetricsPeriodMs, containerMetricsUnregisterDelayMs);\r\n            ChangeMonitoringContainerResourceEvent changeEvent = (ChangeMonitoringContainerResourceEvent) monitoringEvent;\r\n            Resource resource = changeEvent.getResource();\r\n            pmemLimitMBs = (int) resource.getMemorySize();\r\n            vmemLimitMBs = (int) (pmemLimitMBs * vmemRatio);\r\n            cpuVcores = resource.getVirtualCores();\r\n            usageMetrics.recordResourceLimit(vmemLimitMBs, pmemLimitMBs, cpuVcores);\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getVmemAllocatedForContainers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getVmemAllocatedForContainers()\n{\r\n    return this.maxVmemAllottedForContainers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "isPmemCheckEnabled",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isPmemCheckEnabled()\n{\r\n    return this.pmemCheckEnabled;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getPmemAllocatedForContainers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getPmemAllocatedForContainers()\n{\r\n    return this.maxPmemAllottedForContainers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getVCoresAllocatedForContainers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getVCoresAllocatedForContainers()\n{\r\n    return this.maxVCoresAllottedForContainers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "setAllocatedResourcesForContainers",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setAllocatedResourcesForContainers(final Resource resource)\n{\r\n    LOG.info(\"Setting the resources allocated to containers to {}\", resource);\r\n    this.maxVCoresAllottedForContainers = resource.getVirtualCores();\r\n    this.maxPmemAllottedForContainers = convertMBytesToBytes(resource.getMemorySize());\r\n    this.maxVmemAllottedForContainers = (long) (getVmemRatio() * maxPmemAllottedForContainers);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "isVmemCheckEnabled",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isVmemCheckEnabled()\n{\r\n    return this.vmemCheckEnabled;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getContainersUtilization",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourceUtilization getContainersUtilization()\n{\r\n    return this.containersUtilization;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "setContainersUtilization",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setContainersUtilization(ResourceUtilization utilization)\n{\r\n    this.containersUtilization = utilization;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "subtractNodeResourcesFromResourceUtilization",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void subtractNodeResourcesFromResourceUtilization(ResourceUtilization resourceUtil)\n{\r\n    resourceUtil.subtractFrom((int) (getPmemAllocatedForContainers() >> 20), (int) (getVmemAllocatedForContainers() >> 20), getVCoresAllocatedForContainers());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getVmemRatio",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "float getVmemRatio()\n{\r\n    return vmemRatio;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "handle",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void handle(ContainersMonitorEvent monitoringEvent)\n{\r\n    ContainerId containerId = monitoringEvent.getContainerId();\r\n    switch(monitoringEvent.getType()) {\r\n        case START_MONITORING_CONTAINER:\r\n            onStartMonitoringContainer(monitoringEvent, containerId);\r\n            break;\r\n        case STOP_MONITORING_CONTAINER:\r\n            onStopMonitoringContainer(monitoringEvent, containerId);\r\n            break;\r\n        case CHANGE_MONITORING_CONTAINER_RESOURCE:\r\n            onChangeMonitoringContainerResource(monitoringEvent, containerId);\r\n            break;\r\n        default:\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "onChangeMonitoringContainerResource",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void onChangeMonitoringContainerResource(ContainersMonitorEvent monitoringEvent, ContainerId containerId)\n{\r\n    ChangeMonitoringContainerResourceEvent changeEvent = (ChangeMonitoringContainerResourceEvent) monitoringEvent;\r\n    if (containersMonitorEnabled) {\r\n        ProcessTreeInfo processTreeInfo = trackingContainers.get(containerId);\r\n        if (processTreeInfo == null) {\r\n            LOG.warn(\"Failed to track container {}. It may have already completed.\", containerId);\r\n            return;\r\n        }\r\n        LOG.info(\"Changing resource-monitoring for {}\", containerId);\r\n        updateContainerMetrics(monitoringEvent);\r\n        Resource resource = changeEvent.getResource();\r\n        long pmemLimit = convertMBytesToBytes(resource.getMemorySize());\r\n        long vmemLimit = (long) (pmemLimit * vmemRatio);\r\n        int cpuVcores = resource.getVirtualCores();\r\n        processTreeInfo.setResourceLimit(pmemLimit, vmemLimit, cpuVcores);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "onStopMonitoringContainer",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void onStopMonitoringContainer(ContainersMonitorEvent monitoringEvent, ContainerId containerId)\n{\r\n    LOG.info(\"Stopping resource-monitoring for {}\", containerId);\r\n    updateContainerMetrics(monitoringEvent);\r\n    trackingContainers.remove(containerId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "onStartMonitoringContainer",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void onStartMonitoringContainer(ContainersMonitorEvent monitoringEvent, ContainerId containerId)\n{\r\n    ContainerStartMonitoringEvent startEvent = (ContainerStartMonitoringEvent) monitoringEvent;\r\n    LOG.info(\"Starting resource-monitoring for {}\", containerId);\r\n    updateContainerMetrics(monitoringEvent);\r\n    trackingContainers.put(containerId, new ProcessTreeInfo(containerId, null, null, startEvent.getVmemLimit(), startEvent.getPmemLimit(), startEvent.getCpuVcores()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "convertMBytesToBytes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long convertMBytesToBytes(long mb)\n{\r\n    return mb * 1024L * 1024L;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "isHardwareDetectionEnabled",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isHardwareDetectionEnabled(Configuration conf)\n{\r\n    return conf.getBoolean(YarnConfiguration.NM_ENABLE_HARDWARE_CAPABILITY_DETECTION, YarnConfiguration.DEFAULT_NM_ENABLE_HARDWARE_CAPABILITY_DETECTION);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "getNodeCPUs",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int getNodeCPUs(Configuration conf)\n{\r\n    ResourceCalculatorPlugin plugin = ResourceCalculatorPlugin.getResourceCalculatorPlugin(null, conf);\r\n    return NodeManagerHardwareUtils.getNodeCPUs(plugin, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "getNodeCPUs",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int getNodeCPUs(ResourceCalculatorPlugin plugin, Configuration conf)\n{\r\n    int numProcessors = plugin.getNumProcessors();\r\n    boolean countLogicalCores = conf.getBoolean(YarnConfiguration.NM_COUNT_LOGICAL_PROCESSORS_AS_CORES, YarnConfiguration.DEFAULT_NM_COUNT_LOGICAL_PROCESSORS_AS_CORES);\r\n    if (!countLogicalCores) {\r\n        numProcessors = plugin.getNumCores();\r\n    }\r\n    return numProcessors;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "getContainersCPUs",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "float getContainersCPUs(Configuration conf)\n{\r\n    ResourceCalculatorPlugin plugin = ResourceCalculatorPlugin.getResourceCalculatorPlugin(null, conf);\r\n    return NodeManagerHardwareUtils.getContainersCPUs(plugin, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "getContainersCPUs",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "float getContainersCPUs(ResourceCalculatorPlugin plugin, Configuration conf)\n{\r\n    int numProcessors = getNodeCPUs(plugin, conf);\r\n    int nodeCpuPercentage = getNodeCpuPercentage(conf);\r\n    return (nodeCpuPercentage * numProcessors) / 100.0f;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "getNodeCpuPercentage",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int getNodeCpuPercentage(Configuration conf)\n{\r\n    int nodeCpuPercentage = Math.min(conf.getInt(YarnConfiguration.NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT, YarnConfiguration.DEFAULT_NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT), 100);\r\n    nodeCpuPercentage = Math.max(0, nodeCpuPercentage);\r\n    if (nodeCpuPercentage == 0) {\r\n        String message = \"Illegal value for \" + YarnConfiguration.NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT + \". Value cannot be less than or equal to 0.\";\r\n        throw new IllegalArgumentException(message);\r\n    }\r\n    return nodeCpuPercentage;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "getConfiguredVCores",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getConfiguredVCores(Configuration conf)\n{\r\n    int cores = conf.getInt(YarnConfiguration.NM_VCORES, YarnConfiguration.DEFAULT_NM_VCORES);\r\n    if (cores == -1) {\r\n        cores = YarnConfiguration.DEFAULT_NM_VCORES;\r\n    }\r\n    return cores;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "getVCores",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "int getVCores(Configuration conf)\n{\r\n    if (!isHardwareDetectionEnabled(conf)) {\r\n        return getConfiguredVCores(conf);\r\n    }\r\n    ResourceCalculatorPlugin plugin = ResourceCalculatorPlugin.getResourceCalculatorPlugin(null, conf);\r\n    if (plugin == null) {\r\n        return getConfiguredVCores(conf);\r\n    }\r\n    return getVCoresInternal(plugin, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "getVCores",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int getVCores(ResourceCalculatorPlugin plugin, Configuration conf)\n{\r\n    if (!isHardwareDetectionEnabled(conf) || plugin == null) {\r\n        return getConfiguredVCores(conf);\r\n    }\r\n    return getVCoresInternal(plugin, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "getVCoresInternal",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "int getVCoresInternal(ResourceCalculatorPlugin plugin, Configuration conf)\n{\r\n    String message;\r\n    int cores = conf.getInt(YarnConfiguration.NM_VCORES, -1);\r\n    if (cores == -1) {\r\n        float physicalCores = NodeManagerHardwareUtils.getContainersCPUs(plugin, conf);\r\n        float multiplier = conf.getFloat(YarnConfiguration.NM_PCORES_VCORES_MULTIPLIER, YarnConfiguration.DEFAULT_NM_PCORES_VCORES_MULTIPLIER);\r\n        if (multiplier > 0) {\r\n            float tmp = physicalCores * multiplier;\r\n            if (tmp > 0 && tmp < 1) {\r\n                cores = 1;\r\n            } else {\r\n                cores = Math.round(tmp);\r\n            }\r\n        } else {\r\n            message = \"Illegal value for \" + YarnConfiguration.NM_PCORES_VCORES_MULTIPLIER + \". Value must be greater than 0.\";\r\n            throw new IllegalArgumentException(message);\r\n        }\r\n    }\r\n    if (cores <= 0) {\r\n        message = \"Illegal value for \" + YarnConfiguration.NM_VCORES + \". Value must be greater than 0.\";\r\n        throw new IllegalArgumentException(message);\r\n    }\r\n    return cores;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "getConfiguredMemoryMB",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getConfiguredMemoryMB(Configuration conf)\n{\r\n    long memoryMb = conf.getLong(YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\r\n    if (memoryMb == -1) {\r\n        memoryMb = YarnConfiguration.DEFAULT_NM_PMEM_MB;\r\n    }\r\n    return memoryMb;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "getContainerMemoryMB",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "long getContainerMemoryMB(Configuration conf)\n{\r\n    if (!isHardwareDetectionEnabled(conf)) {\r\n        return getConfiguredMemoryMB(conf);\r\n    }\r\n    ResourceCalculatorPlugin plugin = ResourceCalculatorPlugin.getResourceCalculatorPlugin(null, conf);\r\n    if (plugin == null) {\r\n        return getConfiguredMemoryMB(conf);\r\n    }\r\n    return getContainerMemoryMBInternal(plugin, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "getContainerMemoryMB",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "long getContainerMemoryMB(ResourceCalculatorPlugin plugin, Configuration conf)\n{\r\n    if (!isHardwareDetectionEnabled(conf) || plugin == null) {\r\n        return getConfiguredMemoryMB(conf);\r\n    }\r\n    return getContainerMemoryMBInternal(plugin, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "getContainerMemoryMBInternal",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "long getContainerMemoryMBInternal(ResourceCalculatorPlugin plugin, Configuration conf)\n{\r\n    long memoryMb = conf.getInt(YarnConfiguration.NM_PMEM_MB, -1);\r\n    if (memoryMb == -1) {\r\n        long physicalMemoryMB = (plugin.getPhysicalMemorySize() / (1024 * 1024));\r\n        long hadoopHeapSizeMB = (Runtime.getRuntime().maxMemory() / (1024 * 1024));\r\n        long containerPhysicalMemoryMB = (long) (0.8f * (physicalMemoryMB - (2 * hadoopHeapSizeMB)));\r\n        long reservedMemoryMB = conf.getInt(YarnConfiguration.NM_SYSTEM_RESERVED_PMEM_MB, -1);\r\n        if (reservedMemoryMB != -1) {\r\n            containerPhysicalMemoryMB = physicalMemoryMB - reservedMemoryMB;\r\n        }\r\n        if (containerPhysicalMemoryMB <= 0) {\r\n            LOG.error(\"Calculated memory for YARN containers is too low.\" + \" Node memory is \" + physicalMemoryMB + \" MB, system reserved memory is \" + reservedMemoryMB + \" MB.\");\r\n        }\r\n        containerPhysicalMemoryMB = Math.max(containerPhysicalMemoryMB, 0);\r\n        memoryMb = containerPhysicalMemoryMB;\r\n    }\r\n    if (memoryMb <= 0) {\r\n        String message = \"Illegal value for \" + YarnConfiguration.NM_PMEM_MB + \". Value must be greater than 0.\";\r\n        throw new IllegalArgumentException(message);\r\n    }\r\n    return memoryMb;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "getNodeResources",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "Resource getNodeResources(Configuration configuration)\n{\r\n    Configuration conf = new Configuration(configuration);\r\n    String memory = ResourceInformation.MEMORY_MB.getName();\r\n    String vcores = ResourceInformation.VCORES.getName();\r\n    Resource ret = Resource.newInstance(0, 0);\r\n    Map<String, ResourceInformation> resourceInformation = ResourceUtils.getNodeResourceInformation(conf);\r\n    for (Map.Entry<String, ResourceInformation> entry : resourceInformation.entrySet()) {\r\n        ret.setResourceInformation(entry.getKey(), entry.getValue());\r\n        LOG.debug(\"Setting key {} to {}\", entry.getKey(), entry.getValue());\r\n    }\r\n    if (resourceInformation.containsKey(memory)) {\r\n        Long value = resourceInformation.get(memory).getValue();\r\n        if (value > Integer.MAX_VALUE) {\r\n            throw new YarnRuntimeException(\"Value '\" + value + \"' for resource memory is more than the maximum for an integer.\");\r\n        }\r\n        ResourceInformation memResInfo = resourceInformation.get(memory);\r\n        if (memResInfo.getValue() == 0) {\r\n            ret.setMemorySize(getContainerMemoryMB(conf));\r\n            LOG.debug(\"Set memory to {}\", ret.getMemorySize());\r\n        }\r\n    }\r\n    if (resourceInformation.containsKey(vcores)) {\r\n        Long value = resourceInformation.get(vcores).getValue();\r\n        if (value > Integer.MAX_VALUE) {\r\n            throw new YarnRuntimeException(\"Value '\" + value + \"' for resource vcores is more than the maximum for an integer.\");\r\n        }\r\n        ResourceInformation vcoresResInfo = resourceInformation.get(vcores);\r\n        if (vcoresResInfo.getValue() == 0) {\r\n            ret.setVirtualCores(getVCores(conf));\r\n            LOG.debug(\"Set vcores to {}\", ret.getVirtualCores());\r\n        }\r\n    }\r\n    LOG.debug(\"Node resource information map is {}\", ret);\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\application",
  "methodName" : "getApplicationACLs",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<ApplicationAccessType, String> getApplicationACLs()\n{\r\n    return this.applicationACLs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\application",
  "methodName" : "getLogAggregationContext",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LogAggregationContext getLogAggregationContext()\n{\r\n    return this.logAggregationContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUser()\n{\r\n    return this.user;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getSubDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Path getSubDir()\n{\r\n    return this.subDir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getBasedirs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<Path> getBasedirs()\n{\r\n    if (this.basedirs != null) {\r\n        return Collections.unmodifiableList(this.basedirs);\r\n    } else {\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\application",
  "methodName" : "getContainerID",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerId getContainerID()\n{\r\n    return containerStatus.getContainerId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\application",
  "methodName" : "getContainerStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerStatus getContainerStatus()\n{\r\n    return containerStatus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\application",
  "methodName" : "getContainerStartTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getContainerStartTime()\n{\r\n    return containerStartTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\sharedcache",
  "methodName" : "getResources",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<LocalResourceRequest, Path> getResources()\n{\r\n    return resources;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\sharedcache",
  "methodName" : "getContainerLaunchContext",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerLaunchContext getContainerLaunchContext()\n{\r\n    return context;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\sharedcache",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUser()\n{\r\n    return user;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "isDockerContainerRequested",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean isDockerContainerRequested(Configuration daemonConf, Map<String, String> env)\n{\r\n    String type = (env == null) ? null : env.get(ContainerRuntimeConstants.ENV_CONTAINER_TYPE);\r\n    if (type == null) {\r\n        type = daemonConf.get(YarnConfiguration.LINUX_CONTAINER_RUNTIME_TYPE);\r\n    }\r\n    return type != null && type.equals(ContainerRuntimeConstants.CONTAINER_RUNTIME_DOCKER);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "initialize",
  "errType" : null,
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void initialize(Configuration conf, Context nmContext) throws ContainerExecutionException\n{\r\n    super.initialize(conf, nmContext);\r\n    this.nmContext = nmContext;\r\n    this.conf = conf;\r\n    dockerClient = new DockerClient();\r\n    allowedNetworks.clear();\r\n    allowedRuntimes.clear();\r\n    defaultROMounts.clear();\r\n    defaultRWMounts.clear();\r\n    defaultTmpfsMounts.clear();\r\n    defaultImageName = conf.getTrimmed(YarnConfiguration.NM_DOCKER_IMAGE_NAME, \"\");\r\n    defaultImageUpdate = conf.getBoolean(YarnConfiguration.NM_DOCKER_IMAGE_UPDATE, false);\r\n    allowedNetworks.addAll(Arrays.asList(conf.getTrimmedStrings(YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS, YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS)));\r\n    defaultNetwork = conf.getTrimmed(YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK, YarnConfiguration.DEFAULT_NM_DOCKER_DEFAULT_CONTAINER_NETWORK);\r\n    allowedRuntimes.addAll(Arrays.asList(conf.getTrimmedStrings(YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_RUNTIMES, YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_RUNTIMES)));\r\n    if (!allowedNetworks.contains(defaultNetwork)) {\r\n        String message = \"Default network: \" + defaultNetwork + \" is not in the set of allowed networks: \" + allowedNetworks;\r\n        if (LOG.isWarnEnabled()) {\r\n            LOG.warn(message + \". Please check configuration\");\r\n        }\r\n        throw new ContainerExecutionException(message);\r\n    }\r\n    initiateCsiClients(conf);\r\n    privilegedContainersAcl = new AccessControlList(conf.getTrimmed(YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL, YarnConfiguration.DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL));\r\n    enableUserReMapping = conf.getBoolean(YarnConfiguration.NM_DOCKER_ENABLE_USER_REMAPPING, YarnConfiguration.DEFAULT_NM_DOCKER_ENABLE_USER_REMAPPING);\r\n    userRemappingUidThreshold = conf.getInt(YarnConfiguration.NM_DOCKER_USER_REMAPPING_UID_THRESHOLD, YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_UID_THRESHOLD);\r\n    userRemappingGidThreshold = conf.getInt(YarnConfiguration.NM_DOCKER_USER_REMAPPING_GID_THRESHOLD, YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_GID_THRESHOLD);\r\n    capabilities = getDockerCapabilitiesFromConf();\r\n    delayedRemovalAllowed = conf.getBoolean(YarnConfiguration.NM_DOCKER_ALLOW_DELAYED_REMOVAL, YarnConfiguration.DEFAULT_NM_DOCKER_ALLOW_DELAYED_REMOVAL);\r\n    defaultROMounts.addAll(Arrays.asList(conf.getTrimmedStrings(YarnConfiguration.NM_DOCKER_DEFAULT_RO_MOUNTS)));\r\n    defaultRWMounts.addAll(Arrays.asList(conf.getTrimmedStrings(YarnConfiguration.NM_DOCKER_DEFAULT_RW_MOUNTS)));\r\n    defaultTmpfsMounts.addAll(Arrays.asList(conf.getTrimmedStrings(YarnConfiguration.NM_DOCKER_DEFAULT_TMPFS_MOUNTS)));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "isRuntimeRequested",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isRuntimeRequested(Map<String, String> env)\n{\r\n    return isDockerContainerRequested(conf, env);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getDockerCapabilitiesFromConf",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Set<String> getDockerCapabilitiesFromConf() throws ContainerExecutionException\n{\r\n    Set<String> caps = new HashSet<>(Arrays.asList(conf.getTrimmedStrings(YarnConfiguration.NM_DOCKER_CONTAINER_CAPABILITIES, YarnConfiguration.DEFAULT_NM_DOCKER_CONTAINER_CAPABILITIES)));\r\n    if (caps.contains(\"none\") || caps.contains(\"NONE\")) {\r\n        if (caps.size() > 1) {\r\n            String msg = \"Mixing capabilities with the none keyword is\" + \" not supported\";\r\n            throw new ContainerExecutionException(msg);\r\n        }\r\n        caps = Collections.emptySet();\r\n    }\r\n    return caps;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getCapabilities",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Set<String> getCapabilities()\n{\r\n    return capabilities;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "runDockerVolumeCommand",
  "errType" : [ "ContainerExecutionException", "PrivilegedOperationException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "String runDockerVolumeCommand(DockerVolumeCommand dockerVolumeCommand, Container container) throws ContainerExecutionException\n{\r\n    try {\r\n        String commandFile = dockerClient.writeCommandToTempFile(dockerVolumeCommand, container.getContainerId(), nmContext);\r\n        PrivilegedOperation privOp = new PrivilegedOperation(PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\r\n        privOp.appendArgs(commandFile);\r\n        String output = privilegedOperationExecutor.executePrivilegedOperation(null, privOp, null, null, true, false);\r\n        LOG.info(\"ContainerId=\" + container.getContainerId() + \", docker volume output for \" + dockerVolumeCommand + \": \" + output);\r\n        return output;\r\n    } catch (ContainerExecutionException e) {\r\n        LOG.error(\"Error when writing command to temp file, command=\" + dockerVolumeCommand, e);\r\n        throw e;\r\n    } catch (PrivilegedOperationException e) {\r\n        LOG.error(\"Error when executing command, command=\" + dockerVolumeCommand, e);\r\n        throw new ContainerExecutionException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "checkDockerVolumeCreated",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void checkDockerVolumeCreated(DockerVolumeCommand dockerVolumeCreationCommand, Container container) throws ContainerExecutionException\n{\r\n    DockerVolumeCommand dockerVolumeInspectCommand = new DockerVolumeCommand(DockerVolumeCommand.VOLUME_LS_SUB_COMMAND);\r\n    String output = runDockerVolumeCommand(dockerVolumeInspectCommand, container);\r\n    String volumeName = dockerVolumeCreationCommand.getVolumeName();\r\n    String driverName = dockerVolumeCreationCommand.getDriverName();\r\n    if (driverName == null) {\r\n        driverName = \"local\";\r\n    }\r\n    for (String line : output.split(\"\\n\")) {\r\n        line = line.trim();\r\n        if (line.contains(volumeName) && line.contains(driverName)) {\r\n            LOG.info(\"Docker volume-name=\" + volumeName + \" driver-name=\" + driverName + \" already exists for container=\" + container.getContainerId() + \", continue...\");\r\n            return;\r\n        }\r\n    }\r\n    String message = \" Couldn't find volume=\" + volumeName + \" driver=\" + driverName + \" for container=\" + container.getContainerId() + \", please check error message in log to understand \" + \"why this happens.\";\r\n    LOG.error(message);\r\n    LOG.debug(\"All docker volumes in the system, command={}\", dockerVolumeInspectCommand);\r\n    throw new ContainerExecutionException(message);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "setHostname",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void setHostname(DockerRunCommand runCommand, String containerIdStr, String network, String name) throws ContainerExecutionException\n{\r\n    if (network.equalsIgnoreCase(\"host\")) {\r\n        if (name != null && !name.isEmpty()) {\r\n            LOG.info(\"setting hostname in container to: \" + name);\r\n            runCommand.setHostname(name);\r\n        }\r\n    } else {\r\n        if (name == null || name.isEmpty()) {\r\n            name = RegistryPathUtils.encodeYarnID(containerIdStr);\r\n            String domain = conf.get(RegistryConstants.KEY_DNS_DOMAIN);\r\n            if (domain != null) {\r\n                name += (\".\" + domain);\r\n            }\r\n            validateHostname(name);\r\n        }\r\n        LOG.info(\"setting hostname in container to: \" + name);\r\n        runCommand.setHostname(name);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "addCGroupParentIfRequired",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void addCGroupParentIfRequired(String resourcesOptions, String containerIdStr, DockerRunCommand runCommand)\n{\r\n    if (cGroupsHandler == null) {\r\n        LOG.debug(\"cGroupsHandler is null. cgroups are not in use. nothing to\" + \" do.\");\r\n        return;\r\n    }\r\n    if (resourcesOptions.equals(PrivilegedOperation.CGROUP_ARG_PREFIX + PrivilegedOperation.CGROUP_ARG_NO_TASKS)) {\r\n        LOG.debug(\"no resource restrictions specified. not using docker's \" + \"cgroup options\");\r\n    } else {\r\n        LOG.debug(\"using docker's cgroups options\");\r\n        String cGroupPath = \"/\" + cGroupsHandler.getRelativePathForCGroup(containerIdStr);\r\n        LOG.debug(\"using cgroup parent: {}\", cGroupPath);\r\n        runCommand.setCGroupParent(cGroupPath);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "checkUseEntryPoint",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "boolean checkUseEntryPoint(Map<String, String> environment)\n{\r\n    boolean overrideDisable = false;\r\n    String overrideDisableKey = Environment.YARN_CONTAINER_RUNTIME_DOCKER_RUN_OVERRIDE_DISABLE.name();\r\n    String overrideDisableValue = (environment.get(overrideDisableKey) != null) ? environment.get(overrideDisableKey) : System.getenv(overrideDisableKey);\r\n    overrideDisable = Boolean.parseBoolean(overrideDisableValue);\r\n    return overrideDisable;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "launchContainer",
  "errType" : [ "YarnException|IOException", "PrivilegedOperationException" ],
  "containingMethodsNum" : 117,
  "sourceCodeText" : "void launchContainer(ContainerRuntimeContext ctx) throws ContainerExecutionException\n{\r\n    Container container = ctx.getContainer();\r\n    ContainerId containerId = container.getContainerId();\r\n    String containerIdStr = containerId.toString();\r\n    Map<String, String> environment = container.getLaunchContext().getEnvironment();\r\n    String imageName = environment.get(ENV_DOCKER_CONTAINER_IMAGE);\r\n    String network = environment.get(ENV_DOCKER_CONTAINER_NETWORK);\r\n    String hostname = environment.get(ENV_DOCKER_CONTAINER_HOSTNAME);\r\n    String runtime = environment.get(ENV_DOCKER_CONTAINER_DOCKER_RUNTIME);\r\n    boolean serviceMode = Boolean.parseBoolean(environment.get(ENV_DOCKER_CONTAINER_DOCKER_SERVICE_MODE));\r\n    boolean useEntryPoint = serviceMode || checkUseEntryPoint(environment);\r\n    if (imageName == null || imageName.isEmpty()) {\r\n        imageName = defaultImageName;\r\n    }\r\n    if (network == null || network.isEmpty()) {\r\n        network = defaultNetwork;\r\n    }\r\n    validateContainerNetworkType(network);\r\n    validateHostname(hostname);\r\n    validateImageName(imageName);\r\n    validateContainerRuntimeType(runtime);\r\n    if (defaultImageUpdate) {\r\n        pullImageFromRemote(containerIdStr, imageName);\r\n    }\r\n    String runAsUser = ctx.getExecutionAttribute(RUN_AS_USER);\r\n    String dockerRunAsUser = runAsUser;\r\n    Path containerWorkDir = ctx.getExecutionAttribute(CONTAINER_WORK_DIR);\r\n    String[] groups = null;\r\n    if (enableUserReMapping) {\r\n        String uid = getUserIdInfo(runAsUser);\r\n        groups = getGroupIdInfo(runAsUser);\r\n        String gid = groups[0];\r\n        if (Integer.parseInt(uid) < userRemappingUidThreshold) {\r\n            String message = \"uid: \" + uid + \" below threshold: \" + userRemappingUidThreshold;\r\n            throw new ContainerExecutionException(message);\r\n        }\r\n        for (int i = 0; i < groups.length; i++) {\r\n            String group = groups[i];\r\n            if (Integer.parseInt(group) < userRemappingGidThreshold) {\r\n                String message = \"gid: \" + group + \" below threshold: \" + userRemappingGidThreshold;\r\n                throw new ContainerExecutionException(message);\r\n            }\r\n        }\r\n        if (!allowPrivilegedContainerExecution(container)) {\r\n            dockerRunAsUser = uid + \":\" + gid;\r\n        } else {\r\n            dockerRunAsUser = ctx.getExecutionAttribute(USER);\r\n        }\r\n    }\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<String> filecacheDirs = ctx.getExecutionAttribute(FILECACHE_DIRS);\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<String> containerLogDirs = ctx.getExecutionAttribute(CONTAINER_LOG_DIRS);\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<String> userFilecacheDirs = ctx.getExecutionAttribute(USER_FILECACHE_DIRS);\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<String> applicationLocalDirs = ctx.getExecutionAttribute(APPLICATION_LOCAL_DIRS);\r\n    @SuppressWarnings(\"unchecked\")\r\n    Map<Path, List<String>> localizedResources = ctx.getExecutionAttribute(LOCALIZED_RESOURCES);\r\n    @SuppressWarnings(\"unchecked\")\r\n    DockerRunCommand runCommand = new DockerRunCommand(containerIdStr, dockerRunAsUser, imageName).setNetworkType(network);\r\n    setHostname(runCommand, containerIdStr, network, hostname);\r\n    if (environment.containsKey(ENV_DOCKER_CONTAINER_PORTS_MAPPING)) {\r\n        String portsMapping = environment.get(ENV_DOCKER_CONTAINER_PORTS_MAPPING);\r\n        for (String mapping : portsMapping.split(\",\")) {\r\n            if (!Pattern.matches(PORTS_MAPPING_PATTERN, mapping)) {\r\n                throw new ContainerExecutionException(\"Invalid port mappings: \" + mapping);\r\n            }\r\n            runCommand.addPortsMapping(mapping);\r\n        }\r\n    }\r\n    runCommand.setCapabilities(capabilities);\r\n    if (runtime != null && !runtime.isEmpty()) {\r\n        runCommand.addRuntime(runtime);\r\n    }\r\n    if (!serviceMode) {\r\n        runCommand.addAllReadWriteMountLocations(containerLogDirs);\r\n        runCommand.addAllReadWriteMountLocations(applicationLocalDirs);\r\n        runCommand.addAllReadOnlyMountLocations(filecacheDirs);\r\n        runCommand.addAllReadOnlyMountLocations(userFilecacheDirs);\r\n    }\r\n    if (environment.containsKey(ENV_DOCKER_CONTAINER_MOUNTS)) {\r\n        Matcher parsedMounts = USER_MOUNT_PATTERN.matcher(environment.get(ENV_DOCKER_CONTAINER_MOUNTS));\r\n        if (!parsedMounts.find()) {\r\n            throw new ContainerExecutionException(\"Unable to parse user supplied mount list: \" + environment.get(ENV_DOCKER_CONTAINER_MOUNTS));\r\n        }\r\n        parsedMounts.reset();\r\n        long mountCount = 0;\r\n        while (parsedMounts.find()) {\r\n            mountCount++;\r\n            String src = parsedMounts.group(1);\r\n            java.nio.file.Path srcPath = java.nio.file.Paths.get(src);\r\n            if (!srcPath.isAbsolute()) {\r\n                src = mountReadOnlyPath(src, localizedResources);\r\n            }\r\n            String dst = parsedMounts.group(2);\r\n            String mode = parsedMounts.group(4);\r\n            if (mode == null) {\r\n                mode = \"rw\";\r\n            } else if (!mode.startsWith(\"ro\") && !mode.startsWith(\"rw\")) {\r\n                mode = \"rw+\" + mode;\r\n            }\r\n            runCommand.addMountLocation(src, dst, mode);\r\n        }\r\n        long commaCount = environment.get(ENV_DOCKER_CONTAINER_MOUNTS).chars().filter(c -> c == ',').count();\r\n        if (mountCount != commaCount + 1) {\r\n            throw new ContainerExecutionException(\"Unable to parse some mounts in user supplied mount list: \" + environment.get(ENV_DOCKER_CONTAINER_MOUNTS));\r\n        }\r\n    }\r\n    if (defaultROMounts != null && !defaultROMounts.isEmpty()) {\r\n        for (String mount : defaultROMounts) {\r\n            String[] dir = StringUtils.split(mount, ':');\r\n            if (dir.length != 2) {\r\n                throw new ContainerExecutionException(\"Invalid mount : \" + mount);\r\n            }\r\n            String src = dir[0];\r\n            String dst = dir[1];\r\n            runCommand.addReadOnlyMountLocation(src, dst);\r\n        }\r\n    }\r\n    if (defaultRWMounts != null && !defaultRWMounts.isEmpty()) {\r\n        for (String mount : defaultRWMounts) {\r\n            String[] dir = StringUtils.split(mount, ':');\r\n            if (dir.length != 2) {\r\n                throw new ContainerExecutionException(\"Invalid mount : \" + mount);\r\n            }\r\n            String src = dir[0];\r\n            String dst = dir[1];\r\n            runCommand.addReadWriteMountLocation(src, dst);\r\n        }\r\n    }\r\n    ContainerVolumePublisher publisher = new ContainerVolumePublisher(container, container.getCsiVolumesRootDir(), this);\r\n    try {\r\n        Map<String, String> volumeMounts = publisher.publishVolumes();\r\n        volumeMounts.forEach((local, remote) -> runCommand.addReadWriteMountLocation(local, remote));\r\n    } catch (YarnException | IOException e) {\r\n        throw new ContainerExecutionException(\"Container requests for volume resource but we are failed\" + \" to publish volumes on this node\");\r\n    }\r\n    if (environment.containsKey(ENV_DOCKER_CONTAINER_TMPFS_MOUNTS)) {\r\n        String[] tmpfsMounts = environment.get(ENV_DOCKER_CONTAINER_TMPFS_MOUNTS).split(\",\");\r\n        for (String mount : tmpfsMounts) {\r\n            if (!TMPFS_MOUNT_PATTERN.matcher(mount).matches()) {\r\n                throw new ContainerExecutionException(\"Invalid tmpfs mount : \" + mount);\r\n            }\r\n            runCommand.addTmpfsMount(mount);\r\n        }\r\n    }\r\n    if (defaultTmpfsMounts != null && !defaultTmpfsMounts.isEmpty()) {\r\n        for (String mount : defaultTmpfsMounts) {\r\n            if (!TMPFS_MOUNT_PATTERN.matcher(mount).matches()) {\r\n                throw new ContainerExecutionException(\"Invalid tmpfs mount : \" + mount);\r\n            }\r\n            runCommand.addTmpfsMount(mount);\r\n        }\r\n    }\r\n    if (allowHostPidNamespace(container)) {\r\n        runCommand.setPidNamespace(\"host\");\r\n    }\r\n    if (allowPrivilegedContainerExecution(container)) {\r\n        runCommand.setPrivileged();\r\n    }\r\n    addDockerClientConfigToRunCommand(ctx, runCommand);\r\n    String resourcesOpts = ctx.getExecutionAttribute(RESOURCES_OPTIONS);\r\n    addCGroupParentIfRequired(resourcesOpts, containerIdStr, runCommand);\r\n    if (environment.containsKey(ENV_DOCKER_CONTAINER_YARN_SYSFS) && Boolean.parseBoolean(environment.get(ENV_DOCKER_CONTAINER_YARN_SYSFS))) {\r\n        runCommand.setYarnSysFS(true);\r\n    }\r\n    List<String> commands = container.getLaunchContext().getCommands();\r\n    if (serviceMode) {\r\n        commands = Arrays.asList(String.join(\" \", commands).split(\"1>\")[0].split(\" \"));\r\n    }\r\n    if (useEntryPoint) {\r\n        runCommand.setOverrideDisabled(true);\r\n        runCommand.addEnv(environment);\r\n        runCommand.setOverrideCommandWithArgs(commands);\r\n        runCommand.disableDetach();\r\n        runCommand.setLogDir(container.getLogDir());\r\n    } else {\r\n        List<String> overrideCommands = new ArrayList<>();\r\n        Path launchDst = new Path(containerWorkDir, ContainerLaunch.CONTAINER_SCRIPT);\r\n        overrideCommands.add(\"bash\");\r\n        overrideCommands.add(launchDst.toUri().getPath());\r\n        runCommand.setContainerWorkDir(containerWorkDir.toString());\r\n        runCommand.setOverrideCommandWithArgs(overrideCommands);\r\n        runCommand.detachOnRun();\r\n    }\r\n    if (serviceMode) {\r\n        runCommand.setServiceMode(serviceMode);\r\n    }\r\n    if (enableUserReMapping) {\r\n        if (!allowPrivilegedContainerExecution(container)) {\r\n            runCommand.groupAdd(groups);\r\n        }\r\n    }\r\n    if (nmContext != null && nmContext.getResourcePluginManager().getNameToPlugins() != null) {\r\n        for (ResourcePlugin plugin : nmContext.getResourcePluginManager().getNameToPlugins().values()) {\r\n            DockerCommandPlugin dockerCommandPlugin = plugin.getDockerCommandPluginInstance();\r\n            if (dockerCommandPlugin != null) {\r\n                DockerVolumeCommand dockerVolumeCommand = dockerCommandPlugin.getCreateDockerVolumeCommand(ctx.getContainer());\r\n                if (dockerVolumeCommand != null) {\r\n                    runDockerVolumeCommand(dockerVolumeCommand, container);\r\n                    if (dockerVolumeCommand.getSubCommand().equals(DockerVolumeCommand.VOLUME_CREATE_SUB_COMMAND)) {\r\n                        checkDockerVolumeCreated(dockerVolumeCommand, container);\r\n                    }\r\n                }\r\n                dockerCommandPlugin.updateDockerRunCommand(runCommand, container);\r\n            }\r\n        }\r\n    }\r\n    String commandFile = dockerClient.writeCommandToTempFile(runCommand, containerId, nmContext);\r\n    PrivilegedOperation launchOp = buildLaunchOp(ctx, commandFile, runCommand);\r\n    launchOp.disableFailureLogging();\r\n    try {\r\n        privilegedOperationExecutor.executePrivilegedOperation(null, launchOp, null, null, false, false);\r\n    } catch (PrivilegedOperationException e) {\r\n        throw new ContainerExecutionException(\"Launch container failed\", e.getExitCode(), e.getOutput(), e.getErrorOutput());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "relaunchContainer",
  "errType" : [ "PrivilegedOperationException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void relaunchContainer(ContainerRuntimeContext ctx) throws ContainerExecutionException\n{\r\n    ContainerId containerId = ctx.getContainer().getContainerId();\r\n    String containerIdStr = containerId.toString();\r\n    DockerCommandExecutor.DockerContainerStatus containerStatus = DockerCommandExecutor.getContainerStatus(containerIdStr, privilegedOperationExecutor, nmContext);\r\n    if (containerStatus != null && DockerCommandExecutor.isStartable(containerStatus)) {\r\n        DockerStartCommand startCommand = new DockerStartCommand(containerIdStr);\r\n        String commandFile = dockerClient.writeCommandToTempFile(startCommand, containerId, nmContext);\r\n        PrivilegedOperation launchOp = buildLaunchOp(ctx, commandFile, startCommand);\r\n        launchOp.disableFailureLogging();\r\n        try {\r\n            privilegedOperationExecutor.executePrivilegedOperation(null, launchOp, null, null, false, false);\r\n        } catch (PrivilegedOperationException e) {\r\n            throw new ContainerExecutionException(\"Relaunch container failed\", e.getExitCode(), e.getOutput(), e.getErrorOutput());\r\n        }\r\n    } else {\r\n        throw new ContainerExecutionException(\"Container is not in a startable \" + \"state, unable to relaunch: \" + containerIdStr);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "signalContainer",
  "errType" : [ "ContainerExecutionException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void signalContainer(ContainerRuntimeContext ctx) throws ContainerExecutionException\n{\r\n    ContainerExecutor.Signal signal = ctx.getExecutionAttribute(SIGNAL);\r\n    Map<String, String> env = ctx.getContainer().getLaunchContext().getEnvironment();\r\n    try {\r\n        if (ContainerExecutor.Signal.NULL.equals(signal)) {\r\n            executeLivelinessCheck(ctx);\r\n        } else if (ContainerExecutor.Signal.TERM.equals(signal)) {\r\n            ContainerId containerId = ctx.getContainer().getContainerId();\r\n            handleContainerStop(containerId, env);\r\n        } else {\r\n            handleContainerKill(ctx, env, signal);\r\n        }\r\n    } catch (ContainerExecutionException e) {\r\n        throw new ContainerExecutionException(\"Signal docker container failed\", e.getExitCode(), e.getOutput(), e.getErrorOutput());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "reapContainer",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void reapContainer(ContainerRuntimeContext ctx) throws ContainerExecutionException\n{\r\n    handleContainerRemove(ctx.getContainer().getContainerId().toString(), ctx.getContainer().getLaunchContext().getEnvironment());\r\n    if (nmContext != null && nmContext.getResourcePluginManager().getNameToPlugins() != null) {\r\n        for (ResourcePlugin plugin : nmContext.getResourcePluginManager().getNameToPlugins().values()) {\r\n            DockerCommandPlugin dockerCommandPlugin = plugin.getDockerCommandPluginInstance();\r\n            if (dockerCommandPlugin != null) {\r\n                DockerVolumeCommand dockerVolumeCommand = dockerCommandPlugin.getCleanupDockerVolumesCommand(ctx.getContainer());\r\n                if (dockerVolumeCommand != null) {\r\n                    runDockerVolumeCommand(dockerVolumeCommand, ctx.getContainer());\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "execContainer",
  "errType" : [ "PrivilegedOperationException", "InterruptedException" ],
  "containingMethodsNum" : 18,
  "sourceCodeText" : "IOStreamPair execContainer(ContainerExecContext ctx) throws ContainerExecutionException\n{\r\n    String containerId = ctx.getContainer().getContainerId().toString();\r\n    DockerExecCommand dockerExecCommand = new DockerExecCommand(containerId);\r\n    dockerExecCommand.setInteractive();\r\n    dockerExecCommand.setTTY();\r\n    List<String> command = new ArrayList<String>();\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"/bin/\");\r\n    sb.append(ctx.getShell());\r\n    command.add(sb.toString());\r\n    command.add(\"-i\");\r\n    dockerExecCommand.setOverrideCommandWithArgs(command);\r\n    String commandFile = dockerClient.writeCommandToTempFile(dockerExecCommand, ContainerId.fromString(containerId), nmContext);\r\n    PrivilegedOperation privOp = new PrivilegedOperation(PrivilegedOperation.OperationType.EXEC_CONTAINER);\r\n    privOp.appendArgs(commandFile);\r\n    privOp.disableFailureLogging();\r\n    IOStreamPair output;\r\n    try {\r\n        output = privilegedOperationExecutor.executePrivilegedInteractiveOperation(null, privOp);\r\n        LOG.info(\"ContainerId=\" + containerId + \", docker exec output for \" + dockerExecCommand + \": \" + output);\r\n    } catch (PrivilegedOperationException e) {\r\n        throw new ContainerExecutionException(\"Execute container interactive shell failed\", e.getExitCode(), e.getOutput(), e.getErrorOutput());\r\n    } catch (InterruptedException ie) {\r\n        LOG.warn(\"InterruptedException executing command: \", ie);\r\n        throw new ContainerExecutionException(ie.getMessage());\r\n    }\r\n    return output;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getIpAndHost",
  "errType" : [ "ContainerExecutionException", "PrivilegedOperationException", "NullPointerException", "UnknownHostException" ],
  "containingMethodsNum" : 19,
  "sourceCodeText" : "String[] getIpAndHost(Container container)\n{\r\n    ContainerId containerId = container.getContainerId();\r\n    String containerIdStr = containerId.toString();\r\n    DockerInspectCommand inspectCommand = new DockerInspectCommand(containerIdStr).getIpAndHost();\r\n    try {\r\n        String output = executeDockerInspect(containerId, inspectCommand);\r\n        LOG.info(\"Docker inspect output for \" + containerId + \": \" + output);\r\n        output = output.replaceAll(\"['\\\"]\", \"\");\r\n        int index = output.lastIndexOf(',');\r\n        if (index == -1) {\r\n            LOG.error(\"Incorrect format for ip and host\");\r\n            return null;\r\n        }\r\n        String ips = output.substring(0, index).trim();\r\n        String host = output.substring(index + 1).trim();\r\n        if (ips.equals(\"\")) {\r\n            String network;\r\n            try {\r\n                network = container.getLaunchContext().getEnvironment().get(ENV_DOCKER_CONTAINER_NETWORK);\r\n                if (network == null || network.isEmpty()) {\r\n                    network = defaultNetwork;\r\n                }\r\n            } catch (NullPointerException e) {\r\n                network = defaultNetwork;\r\n            }\r\n            boolean useHostNetwork = network.equalsIgnoreCase(\"host\");\r\n            if (useHostNetwork) {\r\n                InetAddress address;\r\n                try {\r\n                    address = InetAddress.getLocalHost();\r\n                    ips = address.getHostAddress();\r\n                } catch (UnknownHostException e) {\r\n                    LOG.error(\"Can not determine IP for container:\" + containerId);\r\n                }\r\n            }\r\n        }\r\n        String[] ipAndHost = new String[2];\r\n        ipAndHost[0] = ips;\r\n        ipAndHost[1] = host;\r\n        return ipAndHost;\r\n    } catch (ContainerExecutionException e) {\r\n        LOG.error(\"Error when writing command to temp file\", e);\r\n    } catch (PrivilegedOperationException e) {\r\n        LOG.error(\"Error when executing command.\", e);\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 3,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getExposedPorts",
  "errType" : [ "ContainerExecutionException", "PrivilegedOperationException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "String getExposedPorts(Container container)\n{\r\n    ContainerId containerId = container.getContainerId();\r\n    String containerIdStr = containerId.toString();\r\n    DockerInspectCommand inspectCommand = new DockerInspectCommand(containerIdStr).getExposedPorts();\r\n    try {\r\n        String output = executeDockerInspect(containerId, inspectCommand);\r\n        return output;\r\n    } catch (ContainerExecutionException e) {\r\n        LOG.error(\"Error when writing command to temp file\", e);\r\n    } catch (PrivilegedOperationException e) {\r\n        LOG.error(\"Error when executing command.\", e);\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "buildLaunchOp",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "PrivilegedOperation buildLaunchOp(ContainerRuntimeContext ctx, String commandFile, DockerCommand command)\n{\r\n    String runAsUser = ctx.getExecutionAttribute(RUN_AS_USER);\r\n    String containerIdStr = ctx.getContainer().getContainerId().toString();\r\n    Path nmPrivateContainerScriptPath = ctx.getExecutionAttribute(NM_PRIVATE_CONTAINER_SCRIPT_PATH);\r\n    Path containerWorkDir = ctx.getExecutionAttribute(CONTAINER_WORK_DIR);\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<String> localDirs = ctx.getExecutionAttribute(LOCAL_DIRS);\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<String> logDirs = ctx.getExecutionAttribute(LOG_DIRS);\r\n    PrivilegedOperation launchOp = new PrivilegedOperation(PrivilegedOperation.OperationType.LAUNCH_DOCKER_CONTAINER);\r\n    launchOp.appendArgs(runAsUser, ctx.getExecutionAttribute(USER), Integer.toString(PrivilegedOperation.RunAsUserCommand.LAUNCH_DOCKER_CONTAINER.getValue()), ctx.getExecutionAttribute(APPID), containerIdStr, containerWorkDir.toString(), nmPrivateContainerScriptPath.toUri().getPath(), ctx.getExecutionAttribute(NM_PRIVATE_TOKENS_PATH).toUri().getPath());\r\n    Path keystorePath = ctx.getExecutionAttribute(NM_PRIVATE_KEYSTORE_PATH);\r\n    Path truststorePath = ctx.getExecutionAttribute(NM_PRIVATE_TRUSTSTORE_PATH);\r\n    if (keystorePath != null && truststorePath != null) {\r\n        launchOp.appendArgs(\"--https\", keystorePath.toUri().getPath(), truststorePath.toUri().getPath());\r\n    } else {\r\n        launchOp.appendArgs(\"--http\");\r\n    }\r\n    launchOp.appendArgs(ctx.getExecutionAttribute(PID_FILE_PATH).toString(), StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR, localDirs), StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR, logDirs), commandFile);\r\n    String tcCommandFile = ctx.getExecutionAttribute(TC_COMMAND_FILE);\r\n    if (tcCommandFile != null) {\r\n        launchOp.appendArgs(tcCommandFile);\r\n    }\r\n    LOG.debug(\"Launching container with cmd: {}\", command);\r\n    return launchOp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "validateImageName",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void validateImageName(String imageName) throws ContainerExecutionException\n{\r\n    if (imageName == null || imageName.isEmpty()) {\r\n        throw new ContainerExecutionException(ENV_DOCKER_CONTAINER_IMAGE + \" not set!\");\r\n    }\r\n    if (!dockerImagePattern.matcher(imageName).matches()) {\r\n        throw new ContainerExecutionException(\"Image name '\" + imageName + \"' doesn't match docker image name pattern\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "pullImageFromRemote",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void pullImageFromRemote(String containerIdStr, String imageName) throws ContainerExecutionException\n{\r\n    long start = System.currentTimeMillis();\r\n    DockerPullCommand dockerPullCommand = new DockerPullCommand(imageName);\r\n    LOG.debug(\"now pulling docker image. image name: {}, container: {}\", imageName, containerIdStr);\r\n    DockerCommandExecutor.executeDockerCommand(dockerPullCommand, containerIdStr, null, privilegedOperationExecutor, false, nmContext);\r\n    long end = System.currentTimeMillis();\r\n    long pullImageTimeMs = end - start;\r\n    LOG.debug(\"pull docker image done with {}ms specnt. image name: {},\" + \" container: {}\", pullImageTimeMs, imageName, containerIdStr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "executeLivelinessCheck",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void executeLivelinessCheck(ContainerRuntimeContext ctx) throws ContainerExecutionException\n{\r\n    String procFs = ctx.getExecutionAttribute(PROCFS);\r\n    if (procFs == null || procFs.isEmpty()) {\r\n        procFs = DEFAULT_PROCFS;\r\n    }\r\n    String pid = ctx.getExecutionAttribute(PID);\r\n    if (!new File(procFs + File.separator + pid).exists()) {\r\n        String msg = \"Liveliness check failed for PID: \" + pid + \". Container may have already completed.\";\r\n        throw new ContainerExecutionException(msg, PrivilegedOperation.ResultCode.INVALID_CONTAINER_PID.getValue());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "handleContainerStop",
  "errType" : [ "ContainerExecutionException|PrivilegedOperationException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void handleContainerStop(ContainerId containerId, Map<String, String> env) throws ContainerExecutionException\n{\r\n    DockerCommandExecutor.DockerContainerStatus containerStatus = DockerCommandExecutor.DockerContainerStatus.UNKNOWN;\r\n    String stopSignal = ContainerExecutor.Signal.TERM.toString();\r\n    char delimiter = ',';\r\n    DockerInspectCommand inspectCommand = new DockerInspectCommand(containerId.toString()).get(new String[] { DockerInspectCommand.STATUS_TEMPLATE, DockerInspectCommand.STOPSIGNAL_TEMPLATE }, delimiter);\r\n    try {\r\n        String output = executeDockerInspect(containerId, inspectCommand).trim();\r\n        if (!output.isEmpty()) {\r\n            String[] statusAndSignal = StringUtils.split(output, delimiter);\r\n            containerStatus = DockerCommandExecutor.parseContainerStatus(statusAndSignal[0]);\r\n            if (statusAndSignal.length > 1) {\r\n                stopSignal = statusAndSignal[1];\r\n            }\r\n        }\r\n    } catch (ContainerExecutionException | PrivilegedOperationException e) {\r\n        LOG.debug(\"{} inspect failed, skipping stop\", containerId, e);\r\n        return;\r\n    }\r\n    if (DockerCommandExecutor.isStoppable(containerStatus)) {\r\n        DockerKillCommand dockerStopCommand = new DockerKillCommand(containerId.toString()).setSignal(stopSignal);\r\n        DockerCommandExecutor.executeDockerCommand(dockerStopCommand, containerId.toString(), env, privilegedOperationExecutor, false, nmContext);\r\n    } else {\r\n        LOG.debug(\"{} status is {}, skipping stop\", containerId, containerStatus);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "executeDockerInspect",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String executeDockerInspect(ContainerId containerId, DockerInspectCommand inspectCommand) throws ContainerExecutionException, PrivilegedOperationException\n{\r\n    String commandFile = dockerClient.writeCommandToTempFile(inspectCommand, containerId, nmContext);\r\n    PrivilegedOperation privOp = new PrivilegedOperation(PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\r\n    privOp.appendArgs(commandFile);\r\n    String output = privilegedOperationExecutor.executePrivilegedOperation(null, privOp, null, null, true, false);\r\n    LOG.info(\"{} : docker inspect output {} \", containerId, output);\r\n    return output;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "handleContainerKill",
  "errType" : [ "YarnException|IOException", "PrivilegedOperationException" ],
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void handleContainerKill(ContainerRuntimeContext ctx, Map<String, String> env, ContainerExecutor.Signal signal) throws ContainerExecutionException\n{\r\n    Container container = ctx.getContainer();\r\n    ContainerVolumePublisher publisher = new ContainerVolumePublisher(container, container.getCsiVolumesRootDir(), this);\r\n    try {\r\n        publisher.unpublishVolumes();\r\n    } catch (YarnException | IOException e) {\r\n        throw new ContainerExecutionException(e);\r\n    }\r\n    boolean serviceMode = Boolean.parseBoolean(env.get(ENV_DOCKER_CONTAINER_DOCKER_SERVICE_MODE));\r\n    if (isContainerRequestedAsPrivileged(container) || serviceMode) {\r\n        String containerId = container.getContainerId().toString();\r\n        DockerCommandExecutor.DockerContainerStatus containerStatus = DockerCommandExecutor.getContainerStatus(containerId, privilegedOperationExecutor, nmContext);\r\n        if (DockerCommandExecutor.isKillable(containerStatus)) {\r\n            DockerKillCommand dockerKillCommand = new DockerKillCommand(containerId).setSignal(signal.name());\r\n            DockerCommandExecutor.executeDockerCommand(dockerKillCommand, containerId, env, privilegedOperationExecutor, false, nmContext);\r\n        } else {\r\n            LOG.debug(\"Container status is {}, skipping kill - {}\", containerStatus.getName(), containerId);\r\n        }\r\n    } else {\r\n        PrivilegedOperation privOp = new PrivilegedOperation(PrivilegedOperation.OperationType.SIGNAL_CONTAINER);\r\n        privOp.appendArgs(ctx.getExecutionAttribute(RUN_AS_USER), ctx.getExecutionAttribute(USER), Integer.toString(PrivilegedOperation.RunAsUserCommand.SIGNAL_CONTAINER.getValue()), ctx.getExecutionAttribute(PID), Integer.toString(ctx.getExecutionAttribute(SIGNAL).getValue()));\r\n        privOp.disableFailureLogging();\r\n        try {\r\n            privilegedOperationExecutor.executePrivilegedOperation(null, privOp, null, null, false, false);\r\n        } catch (PrivilegedOperationException e) {\r\n            throw new ContainerExecutionException(\"Signal container failed using \" + \"signal: \" + signal.name(), e.getExitCode(), e.getOutput(), e.getErrorOutput());\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "handleContainerRemove",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void handleContainerRemove(String containerId, Map<String, String> env) throws ContainerExecutionException\n{\r\n    String delayedRemoval = env.get(ENV_DOCKER_CONTAINER_DELAYED_REMOVAL);\r\n    if (delayedRemovalAllowed && delayedRemoval != null && delayedRemoval.equalsIgnoreCase(\"true\")) {\r\n        LOG.info(\"Delayed removal requested and allowed, skipping removal - \" + containerId);\r\n    } else {\r\n        DockerCommandExecutor.DockerContainerStatus containerStatus = DockerCommandExecutor.getContainerStatus(containerId, privilegedOperationExecutor, nmContext);\r\n        if (DockerCommandExecutor.isRemovable(containerStatus)) {\r\n            DockerRmCommand dockerRmCommand = new DockerRmCommand(containerId, ResourceHandlerModule.getCgroupsRelativeRoot());\r\n            DockerCommandExecutor.executeDockerCommand(dockerRmCommand, containerId, env, privilegedOperationExecutor, false, nmContext);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "addDockerClientConfigToRunCommand",
  "errType" : [ "IOException", "IOException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void addDockerClientConfigToRunCommand(ContainerRuntimeContext ctx, DockerRunCommand dockerRunCommand) throws ContainerExecutionException\n{\r\n    ByteBuffer tokens = ctx.getContainer().getLaunchContext().getTokens();\r\n    Credentials credentials;\r\n    if (tokens != null) {\r\n        tokens.rewind();\r\n        if (tokens.hasRemaining()) {\r\n            try {\r\n                credentials = DockerClientConfigHandler.getCredentialsFromTokensByteBuffer(tokens);\r\n            } catch (IOException e) {\r\n                throw new ContainerExecutionException(\"Unable to read tokens.\");\r\n            }\r\n            if (credentials.numberOfTokens() > 0) {\r\n                Path nmPrivateDir = ctx.getExecutionAttribute(NM_PRIVATE_CONTAINER_SCRIPT_PATH).getParent();\r\n                File dockerConfigPath = new File(nmPrivateDir + \"/config.json\");\r\n                try {\r\n                    if (DockerClientConfigHandler.writeDockerCredentialsToPath(dockerConfigPath, credentials)) {\r\n                        dockerRunCommand.setClientConfigDir(dockerConfigPath.getParent());\r\n                    }\r\n                } catch (IOException e) {\r\n                    throw new ContainerExecutionException(\"Unable to write Docker client credentials to \" + dockerConfigPath);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getHostPidNamespaceEnabled",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean getHostPidNamespaceEnabled()\n{\r\n    return conf.getBoolean(YarnConfiguration.NM_DOCKER_ALLOW_HOST_PID_NAMESPACE, YarnConfiguration.DEFAULT_NM_DOCKER_ALLOW_HOST_PID_NAMESPACE);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getPrivilegedContainersEnabledOnCluster",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean getPrivilegedContainersEnabledOnCluster()\n{\r\n    return conf.getBoolean(YarnConfiguration.NM_DOCKER_ALLOW_PRIVILEGED_CONTAINERS, YarnConfiguration.DEFAULT_NM_DOCKER_ALLOW_PRIVILEGED_CONTAINERS);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getAllowedNetworks",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Set<String> getAllowedNetworks()\n{\r\n    return allowedNetworks;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getAllowedRuntimes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Set<String> getAllowedRuntimes()\n{\r\n    return allowedRuntimes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getPrivilegedContainersAcl",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AccessControlList getPrivilegedContainersAcl()\n{\r\n    return privilegedContainersAcl;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getEnvOciContainerPidNamespace",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getEnvOciContainerPidNamespace()\n{\r\n    return ENV_OCI_CONTAINER_PID_NAMESPACE;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getEnvOciContainerRunPrivilegedContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getEnvOciContainerRunPrivilegedContainer()\n{\r\n    return ENV_OCI_CONTAINER_RUN_PRIVILEGED_CONTAINER;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "bootstrap",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "List<PrivilegedOperation> bootstrap(Configuration configuration) throws ResourceHandlerException\n{\r\n    conf = configuration;\r\n    cGroupsHandler.initializeCGroupController(CGroupsHandler.CGroupController.NET_CLS);\r\n    device = conf.get(YarnConfiguration.NM_NETWORK_RESOURCE_INTERFACE, YarnConfiguration.DEFAULT_NM_NETWORK_RESOURCE_INTERFACE);\r\n    strictMode = configuration.getBoolean(YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE, YarnConfiguration.DEFAULT_NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE);\r\n    rootBandwidthMbit = conf.getInt(YarnConfiguration.NM_NETWORK_RESOURCE_OUTBOUND_BANDWIDTH_MBIT, YarnConfiguration.DEFAULT_NM_NETWORK_RESOURCE_OUTBOUND_BANDWIDTH_MBIT);\r\n    yarnBandwidthMbit = conf.getInt(YarnConfiguration.NM_NETWORK_RESOURCE_OUTBOUND_BANDWIDTH_YARN_MBIT, rootBandwidthMbit);\r\n    containerBandwidthMbit = (int) Math.ceil((double) yarnBandwidthMbit / MAX_CONTAINER_COUNT);\r\n    StringBuffer logLine = new StringBuffer(\"strict mode is set to :\").append(strictMode).append(System.lineSeparator());\r\n    if (strictMode) {\r\n        logLine.append(\"container bandwidth will be capped to soft limit.\").append(System.lineSeparator());\r\n    } else {\r\n        logLine.append(\"containers will be allowed to use spare YARN bandwidth.\").append(System.lineSeparator());\r\n    }\r\n    logLine.append(\"containerBandwidthMbit soft limit (in mbit/sec) is set to : \").append(containerBandwidthMbit);\r\n    LOG.info(logLine.toString());\r\n    trafficController.bootstrap(device, rootBandwidthMbit, yarnBandwidthMbit);\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "preStart",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "List<PrivilegedOperation> preStart(Container container) throws ResourceHandlerException\n{\r\n    String containerIdStr = container.getContainerId().toString();\r\n    int classId = trafficController.getNextClassId();\r\n    String classIdStr = trafficController.getStringForNetClsClassId(classId);\r\n    cGroupsHandler.createCGroup(CGroupsHandler.CGroupController.NET_CLS, containerIdStr);\r\n    cGroupsHandler.updateCGroupParam(CGroupsHandler.CGroupController.NET_CLS, containerIdStr, CGroupsHandler.CGROUP_PARAM_CLASSID, classIdStr);\r\n    containerIdClassIdMap.put(container.getContainerId(), classId);\r\n    String tasksFile = cGroupsHandler.getPathForCGroupTasks(CGroupsHandler.CGroupController.NET_CLS, containerIdStr);\r\n    String opArg = new StringBuffer(PrivilegedOperation.CGROUP_ARG_PREFIX).append(tasksFile).toString();\r\n    List<PrivilegedOperation> ops = new ArrayList<>();\r\n    ops.add(new PrivilegedOperation(PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP, opArg));\r\n    TrafficController.BatchBuilder builder = trafficController.new BatchBuilder(PrivilegedOperation.OperationType.TC_MODIFY_STATE);\r\n    builder.addContainerClass(classId, containerBandwidthMbit, strictMode);\r\n    ops.add(builder.commitBatchToTempFile());\r\n    return ops;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "reacquireContainer",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "List<PrivilegedOperation> reacquireContainer(ContainerId containerId) throws ResourceHandlerException\n{\r\n    String containerIdStr = containerId.toString();\r\n    LOG.debug(\"Attempting to reacquire classId for container: {}\", containerIdStr);\r\n    String classIdStrFromFile = cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.NET_CLS, containerIdStr, CGroupsHandler.CGROUP_PARAM_CLASSID);\r\n    int classId = trafficController.getClassIdFromFileContents(classIdStrFromFile);\r\n    LOG.info(\"Reacquired containerId -> classId mapping: \" + containerIdStr + \" -> \" + classId);\r\n    containerIdClassIdMap.put(containerId, classId);\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "updateContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<PrivilegedOperation> updateContainer(Container container) throws ResourceHandlerException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getBytesSentPerContainer",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "Map<ContainerId, Integer> getBytesSentPerContainer() throws ResourceHandlerException\n{\r\n    Map<Integer, Integer> classIdStats = trafficController.readStats();\r\n    Map<ContainerId, Integer> containerIdStats = new HashMap<>();\r\n    for (Map.Entry<ContainerId, Integer> entry : containerIdClassIdMap.entrySet()) {\r\n        ContainerId containerId = entry.getKey();\r\n        Integer classId = entry.getValue();\r\n        Integer bytesSent = classIdStats.get(classId);\r\n        if (bytesSent == null) {\r\n            LOG.warn(\"No bytes sent metric found for container: \" + containerId + \" with classId: \" + classId);\r\n            continue;\r\n        }\r\n        containerIdStats.put(containerId, bytesSent);\r\n    }\r\n    return containerIdStats;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "postComplete",
  "errType" : [ "PrivilegedOperationException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "List<PrivilegedOperation> postComplete(ContainerId containerId) throws ResourceHandlerException\n{\r\n    LOG.info(\"postComplete for container: \" + containerId.toString());\r\n    cGroupsHandler.deleteCGroup(CGroupsHandler.CGroupController.NET_CLS, containerId.toString());\r\n    Integer classId = containerIdClassIdMap.get(containerId);\r\n    if (classId != null) {\r\n        PrivilegedOperation op = trafficController.new BatchBuilder(PrivilegedOperation.OperationType.TC_MODIFY_STATE).deleteContainerClass(classId).commitBatchToTempFile();\r\n        try {\r\n            privilegedOperationExecutor.executePrivilegedOperation(op, false);\r\n            trafficController.releaseClassId(classId);\r\n        } catch (PrivilegedOperationException e) {\r\n            LOG.warn(\"Failed to delete tc rule for classId: \" + classId);\r\n            throw new ResourceHandlerException(\"Failed to delete tc rule for classId:\" + classId);\r\n        }\r\n    } else {\r\n        LOG.warn(\"Not cleaning up tc rules. classId unknown for container: \" + containerId.toString());\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "teardown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<PrivilegedOperation> teardown() throws ResourceHandlerException\n{\r\n    LOG.debug(\"teardown(): Nothing to do\");\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TrafficControlBandwidthHandlerImpl.class.getName();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "createGpuDockerCommandPlugin",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "DockerCommandPlugin createGpuDockerCommandPlugin(Configuration conf) throws YarnException\n{\r\n    String impl = conf.get(YarnConfiguration.NM_GPU_DOCKER_PLUGIN_IMPL, YarnConfiguration.DEFAULT_NM_GPU_DOCKER_PLUGIN_IMPL);\r\n    if (impl.equals(YarnConfiguration.NVIDIA_DOCKER_V1)) {\r\n        return new NvidiaDockerV1CommandPlugin(conf);\r\n    }\r\n    if (impl.equals(YarnConfiguration.NVIDIA_DOCKER_V2)) {\r\n        return new NvidiaDockerV2CommandPlugin();\r\n    }\r\n    throw new YarnException(\"Unkown implementation name for Gpu docker plugin, impl=\" + impl);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga\\discovery",
  "methodName" : "discover",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "List<FpgaDevice> discover() throws ResourceHandlerException\n{\r\n    Optional<String> scriptOutput = scriptRunner.apply(discoveryScript);\r\n    if (scriptOutput.isPresent()) {\r\n        List<FpgaDevice> list = DeviceSpecParser.getDevicesFromString(type, scriptOutput.get());\r\n        if (list.isEmpty()) {\r\n            throw new ResourceHandlerException(\"No FPGA devices were specified\");\r\n        }\r\n        return list;\r\n    } else {\r\n        throw new ResourceHandlerException(\"Unable to run external script\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "preHead",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void preHead(Page.HTML<__> html)\n{\r\n    commonPreHead(html);\r\n    set(DATATABLES_ID, \"containers\");\r\n    set(initID(DATATABLES, \"containers\"), containersTableInit());\r\n    setTableStyles(html, \"containers\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "containersTableInit",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String containersTableInit()\n{\r\n    return tableInit().append(\",aoColumns:[null]}\").toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "content",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<? extends SubView> content()\n{\r\n    return ApplicationBlock.class;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "shouldDoLogAggregation",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean shouldDoLogAggregation(ContainerLogContext logContext)\n{\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "configure",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void configure(WebSocketServletFactory factory)\n{\r\n    factory.register(ContainerShellWebSocket.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\security",
  "methodName" : "recover",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void recover() throws IOException\n{\r\n    RecoveredNMTokensState state = stateStore.loadNMTokensState();\r\n    MasterKey key = state.getCurrentMasterKey();\r\n    if (key != null) {\r\n        super.currentMasterKey = new MasterKeyData(key, createSecretKey(key.getBytes().array()));\r\n    }\r\n    key = state.getPreviousMasterKey();\r\n    if (key != null) {\r\n        previousMasterKey = new MasterKeyData(key, createSecretKey(key.getBytes().array()));\r\n    }\r\n    if (super.currentMasterKey != null) {\r\n        super.serialNo = super.currentMasterKey.getMasterKey().getKeyId() + 1;\r\n    }\r\n    try (RecoveryIterator<Map.Entry<ApplicationAttemptId, MasterKey>> it = state.getIterator()) {\r\n        while (it.hasNext()) {\r\n            Map.Entry<ApplicationAttemptId, MasterKey> entry = it.next();\r\n            key = entry.getValue();\r\n            oldMasterKeys.put(entry.getKey(), new MasterKeyData(key, createSecretKey(key.getBytes().array())));\r\n        }\r\n    }\r\n    appToAppAttemptMap.clear();\r\n    for (ApplicationAttemptId attempt : oldMasterKeys.keySet()) {\r\n        ApplicationId app = attempt.getApplicationId();\r\n        List<ApplicationAttemptId> attempts = appToAppAttemptMap.get(app);\r\n        if (attempts == null) {\r\n            attempts = new ArrayList<ApplicationAttemptId>();\r\n            appToAppAttemptMap.put(app, attempts);\r\n        }\r\n        attempts.add(attempt);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\security",
  "methodName" : "updateCurrentMasterKey",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void updateCurrentMasterKey(MasterKeyData key)\n{\r\n    super.currentMasterKey = key;\r\n    try {\r\n        stateStore.storeNMTokenCurrentMasterKey(key.getMasterKey());\r\n    } catch (IOException e) {\r\n        LOG.error(\"Unable to update current master key in state store\", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\security",
  "methodName" : "updatePreviousMasterKey",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void updatePreviousMasterKey(MasterKeyData key)\n{\r\n    previousMasterKey = key;\r\n    try {\r\n        stateStore.storeNMTokenPreviousMasterKey(key.getMasterKey());\r\n    } catch (IOException e) {\r\n        LOG.error(\"Unable to update previous master key in state store\", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\security",
  "methodName" : "setMasterKey",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setMasterKey(MasterKey masterKey)\n{\r\n    if (super.currentMasterKey == null || super.currentMasterKey.getMasterKey().getKeyId() != masterKey.getKeyId()) {\r\n        LOG.info(\"Rolling master-key for container-tokens, got key with id \" + masterKey.getKeyId());\r\n        if (super.currentMasterKey != null) {\r\n            updatePreviousMasterKey(super.currentMasterKey);\r\n        }\r\n        updateCurrentMasterKey(new MasterKeyData(masterKey, createSecretKey(masterKey.getBytes().array())));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\security",
  "methodName" : "retrievePassword",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "byte[] retrievePassword(NMTokenIdentifier identifier) throws InvalidToken\n{\r\n    int keyId = identifier.getKeyId();\r\n    ApplicationAttemptId appAttemptId = identifier.getApplicationAttemptId();\r\n    MasterKeyData oldMasterKey = oldMasterKeys.get(appAttemptId);\r\n    MasterKeyData masterKeyToUse = oldMasterKey;\r\n    if (previousMasterKey != null && keyId == previousMasterKey.getMasterKey().getKeyId()) {\r\n        masterKeyToUse = previousMasterKey;\r\n    } else if (keyId == currentMasterKey.getMasterKey().getKeyId()) {\r\n        masterKeyToUse = currentMasterKey;\r\n    }\r\n    if (nodeId != null && !identifier.getNodeId().equals(nodeId)) {\r\n        throw new InvalidToken(\"Given NMToken for application : \" + appAttemptId.toString() + \" is not valid for current node manager.\" + \"expected : \" + nodeId.toString() + \" found : \" + identifier.getNodeId().toString());\r\n    }\r\n    if (masterKeyToUse != null) {\r\n        byte[] password = retrivePasswordInternal(identifier, masterKeyToUse);\r\n        LOG.debug(\"NMToken password retrieved successfully!!\");\r\n        return password;\r\n    }\r\n    throw new InvalidToken(\"Given NMToken for application : \" + appAttemptId.toString() + \" seems to have been generated illegally.\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\security",
  "methodName" : "appFinished",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void appFinished(ApplicationId appId)\n{\r\n    List<ApplicationAttemptId> appAttemptList = appToAppAttemptMap.get(appId);\r\n    if (appAttemptList != null) {\r\n        LOG.debug(\"Removing application attempts NMToken keys for\" + \" application {}\", appId);\r\n        for (ApplicationAttemptId appAttemptId : appAttemptList) {\r\n            removeAppAttemptKey(appAttemptId);\r\n        }\r\n        appToAppAttemptMap.remove(appId);\r\n    } else {\r\n        LOG.error(\"No application Attempt for application : \" + appId + \" started on this NM.\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\security",
  "methodName" : "appAttemptStartContainer",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void appAttemptStartContainer(NMTokenIdentifier identifier) throws org.apache.hadoop.security.token.SecretManager.InvalidToken\n{\r\n    ApplicationAttemptId appAttemptId = identifier.getApplicationAttemptId();\r\n    if (!appToAppAttemptMap.containsKey(appAttemptId.getApplicationId())) {\r\n        appToAppAttemptMap.put(appAttemptId.getApplicationId(), new ArrayList<ApplicationAttemptId>());\r\n    }\r\n    MasterKeyData oldKey = oldMasterKeys.get(appAttemptId);\r\n    if (oldKey == null) {\r\n        appToAppAttemptMap.get(appAttemptId.getApplicationId()).add(appAttemptId);\r\n    }\r\n    if (oldKey == null || oldKey.getMasterKey().getKeyId() != identifier.getKeyId()) {\r\n        LOG.debug(\"NMToken key updated for application attempt : {}\", identifier.getApplicationAttemptId().toString());\r\n        if (identifier.getKeyId() == currentMasterKey.getMasterKey().getKeyId()) {\r\n            updateAppAttemptKey(appAttemptId, currentMasterKey);\r\n        } else if (previousMasterKey != null && identifier.getKeyId() == previousMasterKey.getMasterKey().getKeyId()) {\r\n            updateAppAttemptKey(appAttemptId, previousMasterKey);\r\n        } else {\r\n            throw new InvalidToken(\"Older NMToken should not be used while starting the container.\");\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\security",
  "methodName" : "setNodeId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setNodeId(NodeId nodeId)\n{\r\n    LOG.debug(\"updating nodeId : {}\", nodeId);\r\n    this.nodeId = nodeId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\security",
  "methodName" : "isAppAttemptNMTokenKeyPresent",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isAppAttemptNMTokenKeyPresent(ApplicationAttemptId appAttemptId)\n{\r\n    return oldMasterKeys.containsKey(appAttemptId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\security",
  "methodName" : "getNodeId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeId getNodeId()\n{\r\n    return this.nodeId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\security",
  "methodName" : "updateAppAttemptKey",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void updateAppAttemptKey(ApplicationAttemptId attempt, MasterKeyData key)\n{\r\n    this.oldMasterKeys.put(attempt, key);\r\n    try {\r\n        stateStore.storeNMTokenApplicationMasterKey(attempt, key.getMasterKey());\r\n    } catch (IOException e) {\r\n        LOG.error(\"Unable to store master key for application \" + attempt, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\security",
  "methodName" : "removeAppAttemptKey",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void removeAppAttemptKey(ApplicationAttemptId attempt)\n{\r\n    this.oldMasterKeys.remove(attempt);\r\n    try {\r\n        stateStore.removeNMTokenApplicationMasterKey(attempt);\r\n    } catch (IOException e) {\r\n        LOG.error(\"Unable to remove master key for application \" + attempt, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\security",
  "methodName" : "generateNMToken",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "NMToken generateNMToken(String applicationSubmitter, Container container)\n{\r\n    this.readLock.lock();\r\n    try {\r\n        Token token = createNMToken(container.getId().getApplicationAttemptId(), container.getNodeId(), applicationSubmitter);\r\n        return NMToken.newInstance(container.getNodeId(), token);\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\fpga",
  "methodName" : "getAvailableFpga",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, List<FpgaDevice>> getAvailableFpga()\n{\r\n    return availableFpgas;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\fpga",
  "methodName" : "getAllowedFpga",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<FpgaDevice> getAllowedFpga()\n{\r\n    return allowedFpgas;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\fpga",
  "methodName" : "getAvailableFpgaCount",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getAvailableFpgaCount()\n{\r\n    int count = 0;\r\n    count = availableFpgas.values().stream().mapToInt(i -> i.size()).sum();\r\n    return count;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\fpga",
  "methodName" : "getUsedFpga",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, List<FpgaDevice>> getUsedFpga()\n{\r\n    return containerToFpgaMapping;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\fpga",
  "methodName" : "getUsedFpgaCount",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getUsedFpgaCount()\n{\r\n    int count = 0;\r\n    count = containerToFpgaMapping.values().stream().mapToInt(i -> i.size()).sum();\r\n    return count;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\fpga",
  "methodName" : "addFpgaDevices",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void addFpgaDevices(String type, List<FpgaDevice> list)\n{\r\n    availableFpgas.putIfAbsent(type, new LinkedList<>());\r\n    List<FpgaDevice> fpgaDevices = new LinkedList<>();\r\n    for (FpgaDevice device : list) {\r\n        if (!allowedFpgas.contains(device)) {\r\n            fpgaDevices.add(device);\r\n            availableFpgas.get(type).add(device);\r\n        } else {\r\n            LOG.warn(\"Duplicate device found: \" + device + \". Ignored\");\r\n        }\r\n    }\r\n    allowedFpgas = ImmutableList.copyOf(fpgaDevices);\r\n    LOG.info(\"Added a list of FPGA Devices: \" + allowedFpgas);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\fpga",
  "methodName" : "updateFpga",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void updateFpga(String requestor, FpgaDevice device, String newIPID, String newHash)\n{\r\n    device.setIPID(newIPID);\r\n    device.setAocxHash(newHash);\r\n    LOG.info(\"Update IPID to \" + newIPID + \" for this allocated device: \" + device);\r\n    LOG.info(\"Update IP hash to \" + newHash);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\fpga",
  "methodName" : "assignFpga",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "FpgaAllocation assignFpga(String type, long count, Container container, String ipidHash) throws ResourceHandlerException\n{\r\n    List<FpgaDevice> currentAvailableFpga = availableFpgas.get(type);\r\n    String requestor = container.getContainerId().toString();\r\n    if (null == currentAvailableFpga) {\r\n        throw new ResourceHandlerException(\"No such type of FPGA resource available: \" + type);\r\n    }\r\n    if (count < 0 || count > currentAvailableFpga.size()) {\r\n        throw new ResourceHandlerException(\"Invalid FPGA request count or not enough, requested:\" + count + \", available:\" + getAvailableFpgaCount());\r\n    }\r\n    if (count > 0) {\r\n        List<FpgaDevice> assignedFpgas = new LinkedList<>();\r\n        int matchIPCount = 0;\r\n        for (int i = 0; i < currentAvailableFpga.size(); i++) {\r\n            String deviceIPIDhash = currentAvailableFpga.get(i).getAocxHash();\r\n            if (deviceIPIDhash != null && deviceIPIDhash.equalsIgnoreCase(ipidHash)) {\r\n                assignedFpgas.add(currentAvailableFpga.get(i));\r\n                currentAvailableFpga.remove(i);\r\n                matchIPCount++;\r\n            }\r\n        }\r\n        int remaining = (int) count - matchIPCount;\r\n        while (remaining > 0) {\r\n            assignedFpgas.add(currentAvailableFpga.remove(0));\r\n            remaining--;\r\n        }\r\n        if (!assignedFpgas.isEmpty()) {\r\n            try {\r\n                nmContext.getNMStateStore().storeAssignedResources(container, FPGA_URI, new LinkedList<>(assignedFpgas));\r\n            } catch (IOException e) {\r\n                currentAvailableFpga.addAll(assignedFpgas);\r\n                throw new ResourceHandlerException(e);\r\n            }\r\n            containerToFpgaMapping.putIfAbsent(requestor, new LinkedList<>());\r\n            containerToFpgaMapping.get(requestor).addAll(assignedFpgas);\r\n        }\r\n        return new FpgaAllocation(assignedFpgas, currentAvailableFpga);\r\n    }\r\n    return new FpgaAllocation(null, allowedFpgas);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\fpga",
  "methodName" : "recoverAssignedFpgas",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void recoverAssignedFpgas(ContainerId containerId) throws ResourceHandlerException\n{\r\n    Container c = nmContext.getContainers().get(containerId);\r\n    if (null == c) {\r\n        throw new ResourceHandlerException(\"This shouldn't happen, cannot find container with id=\" + containerId);\r\n    }\r\n    for (Serializable fpgaDevice : c.getResourceMappings().getAssignedResources(FPGA_URI)) {\r\n        if (!(fpgaDevice instanceof FpgaDevice)) {\r\n            throw new ResourceHandlerException(\"Trying to recover allocated FPGA devices, however it\" + \" is not FpgaDevice type, this shouldn't happen\");\r\n        }\r\n        if (!allowedFpgas.contains(fpgaDevice)) {\r\n            throw new ResourceHandlerException(\"Try to recover FpgaDevice = \" + fpgaDevice + \" however it is not in allowed device list:\" + StringUtils.join(\";\", allowedFpgas));\r\n        }\r\n        Iterator<Map.Entry<String, List<FpgaDevice>>> iterator = getUsedFpga().entrySet().iterator();\r\n        while (iterator.hasNext()) {\r\n            if (iterator.next().getValue().contains(fpgaDevice)) {\r\n                throw new ResourceHandlerException(\"Try to recover FpgaDevice = \" + fpgaDevice + \" however it is already assigned to others\");\r\n            }\r\n        }\r\n        getUsedFpga().putIfAbsent(containerId.toString(), new LinkedList<>());\r\n        getUsedFpga().get(containerId.toString()).add((FpgaDevice) fpgaDevice);\r\n        getAvailableFpga().get(((FpgaDevice) fpgaDevice).getType()).remove(fpgaDevice);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\fpga",
  "methodName" : "cleanupAssignFpgas",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void cleanupAssignFpgas(String requestor)\n{\r\n    List<FpgaDevice> usedFpgas = containerToFpgaMapping.get(requestor);\r\n    if (usedFpgas != null) {\r\n        for (FpgaDevice device : usedFpgas) {\r\n            availableFpgas.get(device.getType()).add(device);\r\n        }\r\n        containerToFpgaMapping.remove(requestor);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\event",
  "methodName" : "getResources",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<LocalResourceVisibility, Collection<LocalResourceRequest>> getResources()\n{\r\n    return rsrc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "create",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeManagerMetrics create()\n{\r\n    return create(DefaultMetricsSystem.instance());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "create",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NodeManagerMetrics create(MetricsSystem ms)\n{\r\n    JvmMetrics jm = JvmMetrics.initSingleton(\"NodeManager\", null);\r\n    return ms.register(new NodeManagerMetrics(jm));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "getJvmMetrics",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "JvmMetrics getJvmMetrics()\n{\r\n    return jvmMetrics;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "launchedContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void launchedContainer()\n{\r\n    containersLaunched.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "completedContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void completedContainer()\n{\r\n    containersCompleted.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "rollbackContainerOnFailure",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void rollbackContainerOnFailure()\n{\r\n    containersRolledBackOnFailure.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "failedContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void failedContainer()\n{\r\n    containersFailed.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "killedContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void killedContainer()\n{\r\n    containersKilled.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "initingContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void initingContainer()\n{\r\n    containersIniting.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "endInitingContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void endInitingContainer()\n{\r\n    containersIniting.decr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "runningContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void runningContainer()\n{\r\n    containersRunning.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "endRunningContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void endRunningContainer()\n{\r\n    containersRunning.decr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "reInitingContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void reInitingContainer()\n{\r\n    containersReIniting.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "endReInitingContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void endReInitingContainer()\n{\r\n    containersReIniting.decr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "runningApplication",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void runningApplication()\n{\r\n    applicationsRunning.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "endRunningApplication",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void endRunningApplication()\n{\r\n    applicationsRunning.decr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "pausedContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void pausedContainer()\n{\r\n    containersPaused.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "endPausedContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void endPausedContainer()\n{\r\n    containersPaused.decr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "allocateContainer",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void allocateContainer(Resource res)\n{\r\n    allocatedContainers.incr();\r\n    allocatedMB = allocatedMB + res.getMemorySize();\r\n    allocatedGB.set((int) Math.ceil(allocatedMB / 1024d));\r\n    availableMB = availableMB - res.getMemorySize();\r\n    availableGB.set((int) Math.floor(availableMB / 1024d));\r\n    allocatedVCores.incr(res.getVirtualCores());\r\n    availableVCores.decr(res.getVirtualCores());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "releaseContainer",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void releaseContainer(Resource res)\n{\r\n    allocatedContainers.decr();\r\n    allocatedMB = allocatedMB - res.getMemorySize();\r\n    allocatedGB.set((int) Math.ceil(allocatedMB / 1024d));\r\n    availableMB = availableMB + res.getMemorySize();\r\n    availableGB.set((int) Math.floor(availableMB / 1024d));\r\n    allocatedVCores.decr(res.getVirtualCores());\r\n    availableVCores.incr(res.getVirtualCores());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "changeContainer",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void changeContainer(Resource before, Resource now)\n{\r\n    long deltaMB = now.getMemorySize() - before.getMemorySize();\r\n    int deltaVCores = now.getVirtualCores() - before.getVirtualCores();\r\n    allocatedMB = allocatedMB + deltaMB;\r\n    allocatedGB.set((int) Math.ceil(allocatedMB / 1024d));\r\n    availableMB = availableMB - deltaMB;\r\n    availableGB.set((int) Math.floor(availableMB / 1024d));\r\n    allocatedVCores.incr(deltaVCores);\r\n    availableVCores.decr(deltaVCores);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "startOpportunisticContainer",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void startOpportunisticContainer(Resource res)\n{\r\n    runningOpportunisticContainers.incr();\r\n    allocatedOpportunisticMB = allocatedOpportunisticMB + res.getMemorySize();\r\n    allocatedOpportunisticGB.set((int) Math.ceil(allocatedOpportunisticMB / 1024d));\r\n    allocatedOpportunisticVCores.incr(res.getVirtualCores());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "completeOpportunisticContainer",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void completeOpportunisticContainer(Resource res)\n{\r\n    runningOpportunisticContainers.decr();\r\n    allocatedOpportunisticMB = allocatedOpportunisticMB - res.getMemorySize();\r\n    allocatedOpportunisticGB.set((int) Math.ceil(allocatedOpportunisticMB / 1024d));\r\n    allocatedOpportunisticVCores.decr(res.getVirtualCores());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "setQueuedContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setQueuedContainers(int opportunisticCount, int guaranteedCount)\n{\r\n    containersOpportunisticQueued.set(opportunisticCount);\r\n    containersGuaranteedQueued.set(guaranteedCount);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "addResource",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void addResource(Resource res)\n{\r\n    availableMB = availableMB + res.getMemorySize();\r\n    availableGB.set((int) Math.floor(availableMB / 1024d));\r\n    availableVCores.incr(res.getVirtualCores());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "addContainerLaunchDuration",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addContainerLaunchDuration(long value)\n{\r\n    containerLaunchDuration.add(value);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "setBadLocalDirs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setBadLocalDirs(int badLocalDirs)\n{\r\n    this.badLocalDirs.set(badLocalDirs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "setBadLogDirs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setBadLogDirs(int badLogDirs)\n{\r\n    this.badLogDirs.set(badLogDirs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "setGoodLocalDirsDiskUtilizationPerc",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setGoodLocalDirsDiskUtilizationPerc(int goodLocalDirsDiskUtilizationPerc)\n{\r\n    this.goodLocalDirsDiskUtilizationPerc.set(goodLocalDirsDiskUtilizationPerc);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "setGoodLogDirsDiskUtilizationPerc",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setGoodLogDirsDiskUtilizationPerc(int goodLogDirsDiskUtilizationPerc)\n{\r\n    this.goodLogDirsDiskUtilizationPerc.set(goodLogDirsDiskUtilizationPerc);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "setCacheSizeBeforeClean",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setCacheSizeBeforeClean(long cacheSizeBeforeClean)\n{\r\n    this.cacheSizeBeforeClean.set(cacheSizeBeforeClean);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "setTotalBytesDeleted",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setTotalBytesDeleted(long totalBytesDeleted)\n{\r\n    this.totalBytesDeleted.set(totalBytesDeleted);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "setPublicBytesDeleted",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setPublicBytesDeleted(long publicBytesDeleted)\n{\r\n    this.publicBytesDeleted.set(publicBytesDeleted);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "setPrivateBytesDeleted",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setPrivateBytesDeleted(long privateBytesDeleted)\n{\r\n    this.privateBytesDeleted.set(privateBytesDeleted);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "getRunningContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getRunningContainers()\n{\r\n    return containersRunning.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "getPausedContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getPausedContainers()\n{\r\n    return containersPaused.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "getKilledContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getKilledContainers()\n{\r\n    return containersKilled.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "getFailedContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getFailedContainers()\n{\r\n    return containersFailed.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "getCompletedContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getCompletedContainers()\n{\r\n    return containersCompleted.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "getBadLogDirs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getBadLogDirs()\n{\r\n    return badLogDirs.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "getBadLocalDirs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getBadLocalDirs()\n{\r\n    return badLocalDirs.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "getGoodLogDirsDiskUtilizationPerc",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getGoodLogDirsDiskUtilizationPerc()\n{\r\n    return goodLogDirsDiskUtilizationPerc.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "getGoodLocalDirsDiskUtilizationPerc",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getGoodLocalDirsDiskUtilizationPerc()\n{\r\n    return goodLocalDirsDiskUtilizationPerc.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "getReInitializingContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getReInitializingContainer()\n{\r\n    return containersReIniting.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "getContainersRolledbackOnFailure",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getContainersRolledbackOnFailure()\n{\r\n    return containersRolledBackOnFailure.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "getAllocatedOpportunisticGB",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getAllocatedOpportunisticGB()\n{\r\n    return allocatedOpportunisticGB.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "getAllocatedOpportunisticVCores",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getAllocatedOpportunisticVCores()\n{\r\n    return allocatedOpportunisticVCores.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "getRunningOpportunisticContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getRunningOpportunisticContainers()\n{\r\n    return runningOpportunisticContainers.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "getQueuedOpportunisticContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getQueuedOpportunisticContainers()\n{\r\n    return containersOpportunisticQueued.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "getQueuedGuaranteedContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getQueuedGuaranteedContainers()\n{\r\n    return containersGuaranteedQueued.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "getCacheSizeBeforeClean",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getCacheSizeBeforeClean()\n{\r\n    return this.cacheSizeBeforeClean.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "getTotalBytesDeleted",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getTotalBytesDeleted()\n{\r\n    return this.totalBytesDeleted.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "getPublicBytesDeleted",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getPublicBytesDeleted()\n{\r\n    return this.publicBytesDeleted.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "getPrivateBytesDeleted",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getPrivateBytesDeleted()\n{\r\n    return this.privateBytesDeleted.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "setContainerUsedMemGB",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setContainerUsedMemGB(long usedMem)\n{\r\n    this.containerUsedMemGB.set((int) Math.floor(usedMem / 1024d));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "getContainerUsedMemGB",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getContainerUsedMemGB()\n{\r\n    return this.containerUsedMemGB.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "setContainerUsedVMemGB",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setContainerUsedVMemGB(long usedVMem)\n{\r\n    this.containerUsedVMemGB.set((int) Math.floor(usedVMem / 1024d));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "getContainerUsedVMemGB",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getContainerUsedVMemGB()\n{\r\n    return this.containerUsedVMemGB.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "setContainerCpuUtilization",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setContainerCpuUtilization(float cpuUtilization)\n{\r\n    this.containerCpuUtilization.set(cpuUtilization);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "getContainerCpuUtilization",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "float getContainerCpuUtilization()\n{\r\n    return this.containerCpuUtilization.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "setNodeUsedMemGB",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setNodeUsedMemGB(long totalUsedMemGB)\n{\r\n    this.nodeUsedMemGB.set((int) Math.floor(totalUsedMemGB / 1024d));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "getNodeUsedMemGB",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getNodeUsedMemGB()\n{\r\n    return nodeUsedMemGB.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "setNodeUsedVMemGB",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setNodeUsedVMemGB(long totalUsedVMemGB)\n{\r\n    this.nodeUsedVMemGB.set((int) Math.floor(totalUsedVMemGB / 1024d));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "getNodeUsedVMemGB",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getNodeUsedVMemGB()\n{\r\n    return nodeUsedVMemGB.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "getNodeCpuUtilization",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "float getNodeCpuUtilization()\n{\r\n    return nodeCpuUtilization.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "setNodeCpuUtilization",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setNodeCpuUtilization(float cpuUtilization)\n{\r\n    this.nodeCpuUtilization.set(cpuUtilization);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "setNodeGpuUtilization",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setNodeGpuUtilization(float nodeGpuUtilization)\n{\r\n    this.nodeGpuUtilization.set(nodeGpuUtilization);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "getNodeGpuUtilization",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "float getNodeGpuUtilization()\n{\r\n    return nodeGpuUtilization.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "updateLocalizationHitRatios",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void updateLocalizationHitRatios()\n{\r\n    updateLocalizationHitRatio(localizedCacheHitBytes, localizedCacheMissBytes, localizedCacheHitBytesRatio);\r\n    updateLocalizationHitRatio(localizedCacheHitFiles, localizedCacheMissFiles, localizedCacheHitFilesRatio);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "updateLocalizationHitRatio",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void updateLocalizationHitRatio(MutableCounterLong hitCounter, MutableCounterLong missedCounter, MutableGaugeInt ratioGauge)\n{\r\n    final long hits = hitCounter.value();\r\n    final long misses = missedCounter.value();\r\n    final long total = hits + misses;\r\n    if (total > 0) {\r\n        ratioGauge.set((int) (100 * hits / total));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "localizationCacheHitMiss",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void localizationCacheHitMiss(long size)\n{\r\n    if (size > 0) {\r\n        localizedCacheMissBytes.incr(size);\r\n        localizedCacheMissFiles.incr();\r\n        updateLocalizationHitRatios();\r\n    } else if (size < 0) {\r\n        localizedCacheHitBytes.incr(-size);\r\n        localizedCacheHitFiles.incr();\r\n        updateLocalizationHitRatios();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "localizationComplete",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void localizationComplete(long downloadMillis)\n{\r\n    localizationDurationMillis.add(downloadMillis);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "run",
  "errType" : [ "IOException", "Exception", "IOException", "IOException" ],
  "containingMethodsNum" : 29,
  "sourceCodeText" : "void run()\n{\r\n    ContainerId containerId = container.getContainerId();\r\n    String containerIdStr = containerId.toString();\r\n    LOG.info(\"Cleaning up container \" + containerIdStr);\r\n    try {\r\n        context.getNMStateStore().storeContainerKilled(containerId);\r\n    } catch (IOException e) {\r\n        LOG.error(\"Unable to mark container \" + containerId + \" killed in store\", e);\r\n    }\r\n    boolean alreadyLaunched = !launch.markLaunched() || launch.isLaunchCompleted();\r\n    if (!alreadyLaunched) {\r\n        LOG.info(\"Container \" + containerIdStr + \" not launched.\" + \" No cleanup needed to be done\");\r\n        return;\r\n    }\r\n    LOG.debug(\"Marking container {} as inactive\", containerIdStr);\r\n    exec.deactivateContainer(containerId);\r\n    Path pidFilePath = launch.getPidFilePath();\r\n    LOG.debug(\"Getting pid for container {} to kill\" + \" from pid file {}\", containerIdStr, pidFilePath != null ? pidFilePath : \"null\");\r\n    try {\r\n        String processId = launch.getContainerPid();\r\n        String user = container.getUser();\r\n        if (processId != null) {\r\n            signalProcess(processId, user, containerIdStr);\r\n        } else {\r\n            if (!launch.isLaunchCompleted()) {\r\n                LOG.warn(\"Container clean up before pid file created \" + containerIdStr);\r\n                dispatcher.getEventHandler().handle(new ContainerExitEvent(container.getContainerId(), ContainerEventType.CONTAINER_KILLED_ON_REQUEST, Shell.WINDOWS ? ContainerExecutor.ExitCode.FORCE_KILLED.getExitCode() : ContainerExecutor.ExitCode.TERMINATED.getExitCode(), \"Container terminated before pid file created.\"));\r\n            }\r\n        }\r\n        if (DockerLinuxContainerRuntime.isDockerContainerRequested(conf, container.getLaunchContext().getEnvironment())) {\r\n            rmDockerContainerDelayed();\r\n        }\r\n    } catch (Exception e) {\r\n        String message = \"Exception when trying to cleanup container \" + containerIdStr + \": \" + StringUtils.stringifyException(e);\r\n        LOG.warn(message);\r\n        dispatcher.getEventHandler().handle(new ContainerDiagnosticsUpdateEvent(containerId, message));\r\n    } finally {\r\n        if (pidFilePath != null) {\r\n            try {\r\n                FileContext lfs = FileContext.getLocalFSFileContext();\r\n                lfs.delete(pidFilePath, false);\r\n                lfs.delete(pidFilePath.suffix(EXIT_CODE_FILE_SUFFIX), false);\r\n            } catch (IOException ioe) {\r\n                LOG.warn(\"{} exception trying to delete pid file {}. Ignoring.\", containerId, pidFilePath, ioe);\r\n            }\r\n        }\r\n    }\r\n    try {\r\n        launch.reapContainer();\r\n    } catch (IOException ioe) {\r\n        LOG.warn(\"{} exception trying to reap container. Ignoring.\", containerId, ioe);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 4,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "rmDockerContainerDelayed",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void rmDockerContainerDelayed()\n{\r\n    DeletionService deletionService = context.getDeletionService();\r\n    DockerContainerDeletionTask deletionTask = new DockerContainerDeletionTask(deletionService, container.getUser(), container.getContainerId().toString());\r\n    deletionService.delete(deletionTask);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "signalProcess",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void signalProcess(String processId, String user, String containerIdStr) throws IOException\n{\r\n    LOG.debug(\"Sending signal to pid {} as user {} for container {}\", processId, user, containerIdStr);\r\n    final ContainerExecutor.Signal signal = sleepDelayBeforeSigKill > 0 ? ContainerExecutor.Signal.TERM : ContainerExecutor.Signal.KILL;\r\n    boolean result = sendSignal(user, processId, signal);\r\n    LOG.debug(\"Sent signal {} to pid {} as user {} for container {},\" + \" result={}\", signal, processId, user, containerIdStr, (result ? \"success\" : \"failed\"));\r\n    if (sleepDelayBeforeSigKill > 0) {\r\n        new ContainerExecutor.DelayedProcessKiller(container, user, processId, sleepDelayBeforeSigKill, ContainerExecutor.Signal.KILL, exec).start();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "sendSignal",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean sendSignal(String user, String processId, ContainerExecutor.Signal signal) throws IOException\n{\r\n    return exec.signalContainer(new ContainerSignalContext.Builder().setContainer(container).setUser(user).setPid(processId).setSignal(signal).build());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getNodeId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getNodeId()\n{\r\n    return this.id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getNodeHostName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getNodeHostName()\n{\r\n    return this.nodeHostName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getNMVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getNMVersion()\n{\r\n    return this.nodeManagerVersion;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getNMBuildVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getNMBuildVersion()\n{\r\n    return this.nodeManagerBuildVersion;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getNMVersionBuiltOn",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getNMVersionBuiltOn()\n{\r\n    return this.nodeManagerVersionBuiltOn;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getHadoopVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getHadoopVersion()\n{\r\n    return this.hadoopVersion;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getHadoopBuildVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getHadoopBuildVersion()\n{\r\n    return this.hadoopBuildVersion;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getHadoopVersionBuiltOn",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getHadoopVersionBuiltOn()\n{\r\n    return this.hadoopVersionBuiltOn;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getHealthStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean getHealthStatus()\n{\r\n    return this.nodeHealthy;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getLastNodeUpdateTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getLastNodeUpdateTime()\n{\r\n    return this.lastNodeUpdateTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getHealthReport",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getHealthReport()\n{\r\n    return this.healthReport;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getTotalVmemAllocated",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getTotalVmemAllocated()\n{\r\n    return this.totalVmemAllocatedContainersMB;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getTotalVCoresAllocated",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getTotalVCoresAllocated()\n{\r\n    return this.totalVCoresAllocatedContainers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "isVmemCheckEnabled",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isVmemCheckEnabled()\n{\r\n    return this.vmemCheckEnabled;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getTotalPmemAllocated",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getTotalPmemAllocated()\n{\r\n    return this.totalPmemAllocatedContainersMB;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "isPmemCheckEnabled",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isPmemCheckEnabled()\n{\r\n    return this.pmemCheckEnabled;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getResourceTypes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getResourceTypes()\n{\r\n    return this.resourceTypes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getNMStartupTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getNMStartupTime()\n{\r\n    return nmStartupTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "updateDockerRunCommand",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void updateDockerRunCommand(DockerRunCommand dockerRunCommand, Container container) throws ContainerExecutionException\n{\r\n    String containerId = container.getContainerId().toString();\r\n    LOG.debug(\"Try to update docker run command for: {}\", containerId);\r\n    if (!requestedDevice(resourceName, container)) {\r\n        return;\r\n    }\r\n    DeviceRuntimeSpec deviceRuntimeSpec = getRuntimeSpec(container);\r\n    if (deviceRuntimeSpec == null) {\r\n        LOG.warn(\"The device plugin: \" + devicePlugin.getClass().getCanonicalName() + \" returns null device runtime spec value for container: \" + containerId);\r\n        return;\r\n    }\r\n    dockerRunCommand.addRuntime(deviceRuntimeSpec.getContainerRuntime());\r\n    LOG.debug(\"Handle docker container runtime type: {} for container: {}\", deviceRuntimeSpec.getContainerRuntime(), containerId);\r\n    Set<MountDeviceSpec> deviceMounts = deviceRuntimeSpec.getDeviceMounts();\r\n    LOG.debug(\"Handle device mounts: {} for container: {}\", deviceMounts, containerId);\r\n    for (MountDeviceSpec mountDeviceSpec : deviceMounts) {\r\n        dockerRunCommand.addDevice(mountDeviceSpec.getDevicePathInHost(), mountDeviceSpec.getDevicePathInContainer());\r\n    }\r\n    Set<MountVolumeSpec> mountVolumeSpecs = deviceRuntimeSpec.getVolumeMounts();\r\n    LOG.debug(\"Handle volume mounts: {} for container: {}\", mountVolumeSpecs, containerId);\r\n    for (MountVolumeSpec mountVolumeSpec : mountVolumeSpecs) {\r\n        if (mountVolumeSpec.getReadOnly()) {\r\n            dockerRunCommand.addReadOnlyMountLocation(mountVolumeSpec.getHostPath(), mountVolumeSpec.getMountPath());\r\n        } else {\r\n            dockerRunCommand.addReadWriteMountLocation(mountVolumeSpec.getHostPath(), mountVolumeSpec.getMountPath());\r\n        }\r\n    }\r\n    dockerRunCommand.addEnv(deviceRuntimeSpec.getEnvs());\r\n    LOG.debug(\"Handle envs: {} for container: {}\", deviceRuntimeSpec.getEnvs(), containerId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "getCreateDockerVolumeCommand",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "DockerVolumeCommand getCreateDockerVolumeCommand(Container container) throws ContainerExecutionException\n{\r\n    if (!requestedDevice(resourceName, container)) {\r\n        return null;\r\n    }\r\n    DeviceRuntimeSpec deviceRuntimeSpec = getRuntimeSpec(container);\r\n    if (deviceRuntimeSpec == null) {\r\n        return null;\r\n    }\r\n    Set<VolumeSpec> volumeClaims = deviceRuntimeSpec.getVolumeSpecs();\r\n    for (VolumeSpec volumeSec : volumeClaims) {\r\n        if (volumeSec.getVolumeOperation().equals(VolumeSpec.CREATE)) {\r\n            DockerVolumeCommand command = new DockerVolumeCommand(DockerVolumeCommand.VOLUME_CREATE_SUB_COMMAND);\r\n            command.setDriverName(volumeSec.getVolumeDriver());\r\n            command.setVolumeName(volumeSec.getVolumeName());\r\n            LOG.debug(\"Get volume create request from plugin:{} for container: {}\", volumeClaims, container.getContainerId());\r\n            return command;\r\n        }\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "getCleanupDockerVolumesCommand",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "DockerVolumeCommand getCleanupDockerVolumesCommand(Container container) throws ContainerExecutionException\n{\r\n    if (!requestedDevice(resourceName, container)) {\r\n        return null;\r\n    }\r\n    Set<Device> allocated = getAllocatedDevices(container);\r\n    try {\r\n        devicePlugin.onDevicesReleased(allocated);\r\n    } catch (Exception e) {\r\n        LOG.warn(\"Exception thrown in onDeviceReleased of \" + devicePlugin.getClass() + \"for container: \" + container.getContainerId().toString(), e);\r\n    }\r\n    ContainerId containerId = container.getContainerId();\r\n    cachedAllocation.remove(containerId);\r\n    cachedSpec.remove(containerId);\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "requestedDevice",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean requestedDevice(String resName, Container container)\n{\r\n    return DeviceMappingManager.getRequestedDeviceCount(resName, container.getResource()) > 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "getAllocatedDevices",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Set<Device> getAllocatedDevices(Container container)\n{\r\n    Set<Device> allocated;\r\n    ContainerId containerId = container.getContainerId();\r\n    allocated = cachedAllocation.get(containerId);\r\n    if (allocated != null) {\r\n        return allocated;\r\n    }\r\n    allocated = devicePluginAdapter.getDeviceMappingManager().getAllocatedDevices(resourceName, containerId);\r\n    LOG.debug(\"Get allocation from deviceMappingManager: {}, {} for\" + \" container: {}\", allocated, resourceName, containerId);\r\n    cachedAllocation.put(containerId, allocated);\r\n    return allocated;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "getRuntimeSpec",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "DeviceRuntimeSpec getRuntimeSpec(Container container)\n{\r\n    ContainerId containerId = container.getContainerId();\r\n    DeviceRuntimeSpec deviceRuntimeSpec = cachedSpec.get(containerId);\r\n    if (deviceRuntimeSpec == null) {\r\n        Set<Device> allocated = getAllocatedDevices(container);\r\n        if (allocated == null || allocated.size() == 0) {\r\n            LOG.error(\"Cannot get allocation for container:\" + containerId);\r\n            return null;\r\n        }\r\n        try {\r\n            deviceRuntimeSpec = devicePlugin.onDevicesAllocated(allocated, YarnRuntimeType.RUNTIME_DOCKER);\r\n        } catch (Exception e) {\r\n            LOG.error(\"Exception thrown in onDeviceAllocated of \" + devicePlugin.getClass() + \" for container: \" + containerId, e);\r\n        }\r\n        if (deviceRuntimeSpec == null) {\r\n            LOG.error(\"Null DeviceRuntimeSpec value got from \" + devicePlugin.getClass() + \" for container: \" + containerId + \", please check plugin logic\");\r\n            return null;\r\n        }\r\n        cachedSpec.put(containerId, deviceRuntimeSpec);\r\n    }\r\n    return deviceRuntimeSpec;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getContainersToSignal",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<SignalContainerRequest> getContainersToSignal()\n{\r\n    return this.containerToSignal;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "properties",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AuxServiceConfiguration properties(Map<String, String> props)\n{\r\n    this.properties = props;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "getProperties",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, String> getProperties()\n{\r\n    return properties;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "setProperties",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setProperties(Map<String, String> properties)\n{\r\n    this.properties = properties;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "files",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AuxServiceConfiguration files(List<AuxServiceFile> fileList)\n{\r\n    this.files = fileList;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "getFiles",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<AuxServiceFile> getFiles()\n{\r\n    return files;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "setFiles",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setFiles(List<AuxServiceFile> files)\n{\r\n    this.files = files;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "getProperty",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getProperty(String name, String defaultValue)\n{\r\n    String value = getProperty(name);\r\n    if (StringUtils.isEmpty(value)) {\r\n        return defaultValue;\r\n    }\r\n    return value;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "setProperty",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setProperty(String name, String value)\n{\r\n    properties.put(name, value);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "getProperty",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getProperty(String name)\n{\r\n    return properties.get(name.trim());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean equals(java.lang.Object o)\n{\r\n    if (this == o) {\r\n        return true;\r\n    }\r\n    if (o == null || getClass() != o.getClass()) {\r\n        return false;\r\n    }\r\n    AuxServiceConfiguration configuration = (AuxServiceConfiguration) o;\r\n    return Objects.equals(this.properties, configuration.properties) && Objects.equals(this.files, configuration.files);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return Objects.hash(properties, files);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"class Configuration {\\n\");\r\n    sb.append(\"    properties: \").append(toIndentedString(properties)).append(\"\\n\");\r\n    sb.append(\"    files: \").append(toIndentedString(files)).append(\"\\n\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "toIndentedString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toIndentedString(java.lang.Object o)\n{\r\n    if (o == null) {\r\n        return \"null\";\r\n    }\r\n    return o.toString().replace(\"\\n\", \"\\n    \");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "getLogAggPolicy",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ContainerLogAggregationPolicy getLogAggPolicy(Configuration conf)\n{\r\n    ContainerLogAggregationPolicy policy = getLogAggPolicyInstance(conf);\r\n    String params = getLogAggPolicyParameters(conf);\r\n    if (params != null) {\r\n        policy.parseParameters(params);\r\n    }\r\n    return policy;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "getLogAggPolicyInstance",
  "errType" : [ "ClassNotFoundException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "ContainerLogAggregationPolicy getLogAggPolicyInstance(Configuration conf)\n{\r\n    Class<? extends ContainerLogAggregationPolicy> policyClass = null;\r\n    if (this.logAggregationContext != null) {\r\n        String className = this.logAggregationContext.getLogAggregationPolicyClassName();\r\n        if (className != null) {\r\n            try {\r\n                Class<?> policyFromContext = conf.getClassByName(className);\r\n                if (ContainerLogAggregationPolicy.class.isAssignableFrom(policyFromContext)) {\r\n                    policyClass = policyFromContext.asSubclass(ContainerLogAggregationPolicy.class);\r\n                } else {\r\n                    LOG.warn(this.appId + \" specified invalid log aggregation policy \" + className);\r\n                }\r\n            } catch (ClassNotFoundException cnfe) {\r\n                LOG.warn(this.appId + \" specified invalid log aggregation policy \" + className);\r\n            }\r\n        }\r\n    }\r\n    if (policyClass == null) {\r\n        policyClass = conf.getClass(YarnConfiguration.NM_LOG_AGG_POLICY_CLASS, AllContainerLogAggregationPolicy.class, ContainerLogAggregationPolicy.class);\r\n    } else {\r\n        LOG.info(this.appId + \" specifies ContainerLogAggregationPolicy of \" + policyClass);\r\n    }\r\n    return ReflectionUtils.newInstance(policyClass, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "getLogAggPolicyParameters",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getLogAggPolicyParameters(Configuration conf)\n{\r\n    String params = null;\r\n    if (this.logAggregationContext != null) {\r\n        params = this.logAggregationContext.getLogAggregationPolicyParameters();\r\n    }\r\n    if (params == null) {\r\n        params = conf.get(YarnConfiguration.NM_LOG_AGG_POLICY_CLASS_PARAMETERS);\r\n    }\r\n    return params;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "uploadLogsForContainers",
  "errType" : [ "LogAggregationDFSException", "IOException", "Exception", "Exception" ],
  "containingMethodsNum" : 41,
  "sourceCodeText" : "void uploadLogsForContainers(boolean appFinished) throws LogAggregationDFSException\n{\r\n    if (this.logAggregationDisabled) {\r\n        return;\r\n    }\r\n    addCredentials();\r\n    Set<ContainerId> pendingContainerInThisCycle = new HashSet<ContainerId>();\r\n    this.pendingContainers.drainTo(pendingContainerInThisCycle);\r\n    Set<ContainerId> finishedContainers = new HashSet<ContainerId>(pendingContainerInThisCycle);\r\n    if (this.context.getApplications().get(this.appId) != null) {\r\n        for (Container container : this.context.getApplications().get(this.appId).getContainers().values()) {\r\n            ContainerType containerType = container.getContainerTokenIdentifier().getContainerType();\r\n            if (shouldUploadLogs(new ContainerLogContext(container.getContainerId(), containerType, 0))) {\r\n                pendingContainerInThisCycle.add(container.getContainerId());\r\n            }\r\n        }\r\n    }\r\n    if (pendingContainerInThisCycle.isEmpty()) {\r\n        LOG.debug(\"No pending container in this cycle\");\r\n        sendLogAggregationReport(true, \"\", appFinished);\r\n        return;\r\n    }\r\n    logAggregationTimes++;\r\n    LOG.debug(\"Cycle #{} of log aggregator\", logAggregationTimes);\r\n    String diagnosticMessage = \"\";\r\n    boolean logAggregationSucceedInThisCycle = true;\r\n    DeletionTask deletionTask = null;\r\n    try {\r\n        try {\r\n            logAggregationFileController.initializeWriter(logControllerContext);\r\n        } catch (IOException e1) {\r\n            logAggregationSucceedInThisCycle = false;\r\n            LOG.error(\"Cannot create writer for app \" + this.applicationId + \". Skip log upload this time. \", e1);\r\n            return;\r\n        }\r\n        boolean uploadedLogsInThisCycle = false;\r\n        for (ContainerId container : pendingContainerInThisCycle) {\r\n            ContainerLogAggregator aggregator = null;\r\n            if (containerLogAggregators.containsKey(container)) {\r\n                aggregator = containerLogAggregators.get(container);\r\n            } else {\r\n                aggregator = new ContainerLogAggregator(container);\r\n                containerLogAggregators.put(container, aggregator);\r\n            }\r\n            Set<Path> uploadedFilePathsInThisCycle = aggregator.doContainerLogAggregation(logAggregationFileController, appFinished, finishedContainers.contains(container));\r\n            if (uploadedFilePathsInThisCycle.size() > 0) {\r\n                uploadedLogsInThisCycle = true;\r\n                LOG.trace(\"Uploaded the following files for {}: {}\", container, uploadedFilePathsInThisCycle.toString());\r\n                List<Path> uploadedFilePathsInThisCycleList = new ArrayList<>();\r\n                uploadedFilePathsInThisCycleList.addAll(uploadedFilePathsInThisCycle);\r\n                if (LOG.isDebugEnabled()) {\r\n                    for (Path uploadedFilePath : uploadedFilePathsInThisCycleList) {\r\n                        try {\r\n                            long fileSize = lfs.getFileStatus(uploadedFilePath).getLen();\r\n                            if (fileSize >= logFileSizeThreshold) {\r\n                                LOG.debug(\"Log File \" + uploadedFilePath + \" size is \" + fileSize + \" bytes\");\r\n                            }\r\n                        } catch (Exception e1) {\r\n                            LOG.error(\"Failed to get log file size \" + e1);\r\n                        }\r\n                    }\r\n                }\r\n                deletionTask = new FileDeletionTask(delService, this.userUgi.getShortUserName(), null, uploadedFilePathsInThisCycleList);\r\n            }\r\n            if (finishedContainers.contains(container)) {\r\n                containerLogAggregators.remove(container);\r\n            }\r\n        }\r\n        logControllerContext.setUploadedLogsInThisCycle(uploadedLogsInThisCycle);\r\n        logControllerContext.setLogUploadTimeStamp(System.currentTimeMillis());\r\n        logControllerContext.increLogAggregationTimes();\r\n        try {\r\n            this.logAggregationFileController.postWrite(logControllerContext);\r\n            diagnosticMessage = \"Log uploaded successfully for Application: \" + appId + \" in NodeManager: \" + LogAggregationUtils.getNodeString(nodeId) + \" at \" + Times.format(logControllerContext.getLogUploadTimeStamp()) + \"\\n\";\r\n        } catch (Exception e) {\r\n            diagnosticMessage = e.getMessage();\r\n            renameTemporaryLogFileFailed = true;\r\n            logAggregationSucceedInThisCycle = false;\r\n        }\r\n    } finally {\r\n        LogAggregationDFSException exc = null;\r\n        try {\r\n            this.logAggregationFileController.closeWriter();\r\n        } catch (LogAggregationDFSException e) {\r\n            diagnosticMessage = e.getMessage();\r\n            renameTemporaryLogFileFailed = true;\r\n            logAggregationSucceedInThisCycle = false;\r\n            exc = e;\r\n        }\r\n        if (logAggregationSucceedInThisCycle && deletionTask != null) {\r\n            delService.delete(deletionTask);\r\n        }\r\n        if (diagnosticMessage != null && !diagnosticMessage.isEmpty()) {\r\n            LOG.debug(\"Sending log aggregation report along with the \" + \"following diagnostic message:\\\"{}\\\"\", diagnosticMessage);\r\n        }\r\n        if (!logAggregationSucceedInThisCycle) {\r\n            LOG.warn(\"Log aggregation did not succeed in this cycle\");\r\n        }\r\n        sendLogAggregationReport(logAggregationSucceedInThisCycle, diagnosticMessage, appFinished);\r\n        if (exc != null) {\r\n            throw exc;\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 5,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "addCredentials",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void addCredentials()\n{\r\n    if (UserGroupInformation.isSecurityEnabled()) {\r\n        Credentials systemCredentials = context.getSystemCredentialsForApps().get(appId);\r\n        if (systemCredentials != null) {\r\n            LOG.debug(\"Adding new framework-token for {} for log-aggregation:\" + \" {}; userUgi={}\", appId, systemCredentials.getAllTokens(), userUgi);\r\n            userUgi.addCredentials(systemCredentials);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "sendLogAggregationReport",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void sendLogAggregationReport(boolean logAggregationSucceedInThisCycle, String diagnosticMessage, boolean appFinished)\n{\r\n    LogAggregationStatus logAggregationStatus = logAggregationSucceedInThisCycle ? LogAggregationStatus.RUNNING : LogAggregationStatus.RUNNING_WITH_FAILURE;\r\n    sendLogAggregationReportInternal(logAggregationStatus, diagnosticMessage, false);\r\n    if (appFinished) {\r\n        LogAggregationStatus finalLogAggregationStatus = renameTemporaryLogFileFailed || !logAggregationSucceedInThisCycle ? LogAggregationStatus.FAILED : LogAggregationStatus.SUCCEEDED;\r\n        sendLogAggregationReportInternal(finalLogAggregationStatus, \"\", true);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "sendLogAggregationReportInternal",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void sendLogAggregationReportInternal(LogAggregationStatus logAggregationStatus, String diagnosticMessage, boolean finalized)\n{\r\n    LogAggregationReport report = Records.newRecord(LogAggregationReport.class);\r\n    report.setApplicationId(appId);\r\n    report.setDiagnosticMessage(diagnosticMessage);\r\n    report.setLogAggregationStatus(logAggregationStatus);\r\n    this.context.getLogAggregationStatusForApps().add(report);\r\n    this.context.getNMLogAggregationStatusTracker().updateLogAggregationStatus(appId, logAggregationStatus, System.currentTimeMillis(), diagnosticMessage, finalized);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "run",
  "errType" : [ "LogAggregationDFSException", "Exception" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void run()\n{\r\n    try {\r\n        doAppLogAggregation();\r\n    } catch (LogAggregationDFSException e) {\r\n        LOG.error(\"Error occurred while aggregating the log for the application \" + appId, e);\r\n    } catch (Exception e) {\r\n        LOG.error(\"Error occurred while aggregating the log for the application \" + appId, e);\r\n        doAppLogAggregationPostCleanUp();\r\n    } finally {\r\n        if (!this.appAggregationFinished.get() && !this.aborted.get()) {\r\n            LOG.warn(\"Log aggregation did not complete for application \" + appId);\r\n            this.dispatcher.getEventHandler().handle(new ApplicationEvent(this.appId, ApplicationEventType.APPLICATION_LOG_HANDLING_FAILED));\r\n        }\r\n        this.appAggregationFinished.set(true);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "doAppLogAggregation",
  "errType" : [ "InterruptedException", "LogAggregationDFSException", "LogAggregationDFSException" ],
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void doAppLogAggregation() throws LogAggregationDFSException\n{\r\n    while (!this.appFinishing.get() && !this.aborted.get()) {\r\n        synchronized (this) {\r\n            try {\r\n                waiting.set(true);\r\n                if (logControllerContext.isLogAggregationInRolling()) {\r\n                    wait(logControllerContext.getRollingMonitorInterval() * 1000);\r\n                    if (this.appFinishing.get() || this.aborted.get()) {\r\n                        break;\r\n                    }\r\n                    uploadLogsForContainers(false);\r\n                } else {\r\n                    wait(THREAD_SLEEP_TIME);\r\n                }\r\n            } catch (InterruptedException e) {\r\n                LOG.warn(\"PendingContainers queue is interrupted\");\r\n                this.appFinishing.set(true);\r\n            } catch (LogAggregationDFSException e) {\r\n                this.appFinishing.set(true);\r\n                throw e;\r\n            }\r\n        }\r\n    }\r\n    if (this.aborted.get()) {\r\n        return;\r\n    }\r\n    try {\r\n        uploadLogsForContainers(true);\r\n        doAppLogAggregationPostCleanUp();\r\n    } catch (LogAggregationDFSException e) {\r\n        LOG.error(\"Error during log aggregation\", e);\r\n    }\r\n    this.dispatcher.getEventHandler().handle(new ApplicationEvent(this.appId, ApplicationEventType.APPLICATION_LOG_HANDLING_FINISHED));\r\n    this.appAggregationFinished.set(true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "doAppLogAggregationPostCleanUp",
  "errType" : [ "UnsupportedFileSystemException", "IOException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void doAppLogAggregationPostCleanUp()\n{\r\n    List<Path> localAppLogDirs = new ArrayList<Path>();\r\n    for (String rootLogDir : dirsHandler.getLogDirsForCleanup()) {\r\n        Path logPath = new Path(rootLogDir, applicationId);\r\n        try {\r\n            lfs.getFileStatus(logPath);\r\n            localAppLogDirs.add(logPath);\r\n        } catch (UnsupportedFileSystemException ue) {\r\n            LOG.warn(\"Log dir {} is in an unsupported file system\", rootLogDir, ue);\r\n            continue;\r\n        } catch (IOException fe) {\r\n            LOG.warn(\"An exception occurred while getting file information\", fe);\r\n            continue;\r\n        }\r\n    }\r\n    if (localAppLogDirs.size() > 0) {\r\n        LOG.debug(\"Cleaning up {} files\", localAppLogDirs.size());\r\n        List<Path> localAppLogDirsList = new ArrayList<>();\r\n        localAppLogDirsList.addAll(localAppLogDirs);\r\n        DeletionTask deletionTask = new FileDeletionTask(delService, this.userUgi.getShortUserName(), null, localAppLogDirsList);\r\n        this.delService.delete(deletionTask);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "getRemoteNodeTmpLogFileForApp",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path getRemoteNodeTmpLogFileForApp()\n{\r\n    return new Path(remoteNodeLogFileForApp.getParent(), (remoteNodeLogFileForApp.getName() + LogAggregationUtils.TMP_FILE_SUFFIX));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "shouldUploadLogs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean shouldUploadLogs(ContainerLogContext logContext)\n{\r\n    return logAggPolicy.shouldDoLogAggregation(logContext);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "startContainerLogAggregation",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void startContainerLogAggregation(ContainerLogContext logContext)\n{\r\n    if (shouldUploadLogs(logContext)) {\r\n        LOG.info(\"Considering container \" + logContext.getContainerId() + \" for log-aggregation\");\r\n        this.pendingContainers.add(logContext.getContainerId());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "finishLogAggregation",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void finishLogAggregation()\n{\r\n    LOG.info(\"Application just finished : \" + this.applicationId);\r\n    this.appFinishing.set(true);\r\n    this.notifyAll();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "abortLogAggregation",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void abortLogAggregation()\n{\r\n    LOG.info(\"Aborting log aggregation for \" + this.applicationId);\r\n    this.aborted.set(true);\r\n    this.notifyAll();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "disableLogAggregation",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void disableLogAggregation()\n{\r\n    this.logAggregationDisabled = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "enableLogAggregation",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void enableLogAggregation()\n{\r\n    this.logAggregationDisabled = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "isAggregationEnabled",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isAggregationEnabled()\n{\r\n    return !logAggregationDisabled;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "doLogAggregationOutOfBand",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void doLogAggregationOutOfBand()\n{\r\n    while (!waiting.get()) {\r\n        try {\r\n            wait(200);\r\n        } catch (InterruptedException e) {\r\n        }\r\n    }\r\n    LOG.info(\"Do OutOfBand log aggregation\");\r\n    this.notifyAll();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "getUgi",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "UserGroupInformation getUgi()\n{\r\n    return this.userUgi;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "updateCredentials",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "UserGroupInformation updateCredentials(Credentials cred)\n{\r\n    this.userUgi.addCredentials(cred);\r\n    return userUgi;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "getLogAggregationFileController",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LogAggregationFileController getLogAggregationFileController()\n{\r\n    return this.logAggregationFileController;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "getLogAggregationFileControllerContext",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LogAggregationFileControllerContext getLogAggregationFileControllerContext()\n{\r\n    return this.logControllerContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    super.serviceInit(conf);\r\n    String nodeAttributeProviderScript = conf.get(NM_SCRIPT_BASED_NODE_ATTRIBUTES_PROVIDER_PATH);\r\n    long scriptTimeout = conf.getLong(NM_NODE_ATTRIBUTES_PROVIDER_FETCH_TIMEOUT_MS, DEFAULT_NM_NODE_ATTRIBUTES_PROVIDER_FETCH_TIMEOUT_MS);\r\n    String[] scriptArgs = conf.getStrings(NM_SCRIPT_BASED_NODE_ATTRIBUTES_PROVIDER_OPTS, new String[] {});\r\n    verifyConfiguredScript(nodeAttributeProviderScript);\r\n    long intervalTime = conf.getLong(NM_NODE_ATTRIBUTES_PROVIDER_FETCH_INTERVAL_MS, DEFAULT_NM_NODE_ATTRIBUTES_PROVIDER_FETCH_INTERVAL_MS);\r\n    this.setIntervalTime(intervalTime);\r\n    this.runner = new NodeAttributeScriptRunner(nodeAttributeProviderScript, scriptArgs, scriptTimeout, this);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "cleanUp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void cleanUp() throws Exception\n{\r\n    runner.cleanUp();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "createTimerTask",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimerTask createTimerTask()\n{\r\n    return runner;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "setConf",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setConf(Configuration conf)\n{\r\n    this.conf = conf;\r\n    if (conf != null) {\r\n        whitelistVars = conf.get(YarnConfiguration.NM_ENV_WHITELIST, YarnConfiguration.DEFAULT_NM_ENV_WHITELIST).split(\",\");\r\n        exitCodeFileTimeout = conf.getInt(YarnConfiguration.NM_CONTAINER_EXECUTOR_EXIT_FILE_TIMEOUT, YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_EXIT_FILE_TIMEOUT);\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getConf",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Configuration getConf()\n{\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void init(Context nmContext) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "start",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void start()\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "stop",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void stop()\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "localizeClasspathJar",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Path localizeClasspathJar(Path jarPath, Path target, String owner) throws IOException\n{\r\n    return jarPath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "startLocalizer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void startLocalizer(LocalizerStartContext ctx) throws IOException, InterruptedException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "prepareContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void prepareContainer(ContainerPrepareContext ctx) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "launchContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int launchContainer(ContainerStartContext ctx) throws IOException, ConfigurationException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "relaunchContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int relaunchContainer(ContainerStartContext ctx) throws IOException, ConfigurationException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "signalContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean signalContainer(ContainerSignalContext ctx) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "reapContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean reapContainer(ContainerReapContext ctx) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "execContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "IOStreamPair execContainer(ContainerExecContext ctx) throws ContainerExecutionException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "deleteAsUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void deleteAsUser(DeletionAsUserContext ctx) throws IOException, InterruptedException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "symLink",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void symLink(String target, String symlink) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "isContainerAlive",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isContainerAlive(ContainerLivenessContext ctx) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getLocalResources",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<String, LocalResource> getLocalResources(Container container) throws IOException\n{\r\n    return container.getLaunchContext().getLocalResources();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "updateYarnSysFS",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void updateYarnSysFS(Context ctx, String user, String appId, String spec) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "reacquireContainer",
  "errType" : [ "NumberFormatException" ],
  "containingMethodsNum" : 18,
  "sourceCodeText" : "int reacquireContainer(ContainerReacquisitionContext ctx) throws IOException, InterruptedException\n{\r\n    Container container = ctx.getContainer();\r\n    String user = ctx.getUser();\r\n    ContainerId containerId = ctx.getContainerId();\r\n    Path pidPath = getPidFilePath(containerId);\r\n    if (pidPath == null) {\r\n        LOG.warn(\"{} is not active, returning terminated error\", containerId);\r\n        return ExitCode.TERMINATED.getExitCode();\r\n    }\r\n    String pid = ProcessIdFileReader.getProcessId(pidPath);\r\n    if (pid == null) {\r\n        throw new IOException(\"Unable to determine pid for \" + containerId);\r\n    }\r\n    LOG.info(\"Reacquiring {} with pid {}\", containerId, pid);\r\n    ContainerLivenessContext livenessContext = new ContainerLivenessContext.Builder().setContainer(container).setUser(user).setPid(pid).build();\r\n    while (isContainerAlive(livenessContext)) {\r\n        Thread.sleep(1000);\r\n    }\r\n    final int sleepMsec = 100;\r\n    int msecLeft = this.exitCodeFileTimeout;\r\n    String exitCodeFile = ContainerLaunch.getExitCodeFile(pidPath.toString());\r\n    File file = new File(exitCodeFile);\r\n    while (!file.exists() && msecLeft >= 0) {\r\n        if (!isContainerActive(containerId)) {\r\n            LOG.info(\"{} was deactivated\", containerId);\r\n            return ExitCode.TERMINATED.getExitCode();\r\n        }\r\n        Thread.sleep(sleepMsec);\r\n        msecLeft -= sleepMsec;\r\n    }\r\n    if (msecLeft < 0) {\r\n        throw new IOException(\"Timeout while waiting for exit code from \" + containerId);\r\n    }\r\n    try {\r\n        return Integer.parseInt(FileUtils.readFileToString(file, StandardCharsets.UTF_8).trim());\r\n    } catch (NumberFormatException e) {\r\n        throw new IOException(\"Error parsing exit code from pid \" + pid, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "writeLaunchEnv",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void writeLaunchEnv(OutputStream out, Map<String, String> environment, Map<Path, List<String>> resources, List<String> command, Path logDir, String user, LinkedHashSet<String> nmVars) throws IOException\n{\r\n    this.writeLaunchEnv(out, environment, resources, command, logDir, user, ContainerLaunch.CONTAINER_SCRIPT, nmVars);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "writeLaunchEnv",
  "errType" : null,
  "containingMethodsNum" : 25,
  "sourceCodeText" : "void writeLaunchEnv(OutputStream out, Map<String, String> environment, Map<Path, List<String>> resources, List<String> command, Path logDir, String user, String outFilename, LinkedHashSet<String> nmVars) throws IOException\n{\r\n    ContainerLaunch.ShellScriptBuilder sb = ContainerLaunch.ShellScriptBuilder.create();\r\n    sb.setExitOnFailure();\r\n    sb.stdout(logDir, CONTAINER_PRE_LAUNCH_STDOUT);\r\n    sb.stderr(logDir, CONTAINER_PRE_LAUNCH_STDERR);\r\n    if (environment != null) {\r\n        sb.echo(\"Setting up env variables\");\r\n        for (String var : whitelistVars) {\r\n            if (!environment.containsKey(var)) {\r\n                String val = getNMEnvVar(var);\r\n                if (val != null) {\r\n                    sb.whitelistedEnv(var, val);\r\n                }\r\n            }\r\n        }\r\n        for (String nmEnvVar : nmVars) {\r\n            sb.env(nmEnvVar, environment.get(nmEnvVar));\r\n        }\r\n        for (Map.Entry<String, String> env : sb.orderEnvByDependencies(environment).entrySet()) {\r\n            if (!nmVars.contains(env.getKey())) {\r\n                sb.env(env.getKey(), env.getValue());\r\n            }\r\n        }\r\n    }\r\n    if (resources != null) {\r\n        sb.echo(\"Setting up job resources\");\r\n        Map<Path, Path> symLinks = resolveSymLinks(resources, user);\r\n        for (Map.Entry<Path, Path> symLink : symLinks.entrySet()) {\r\n            sb.symlink(symLink.getKey(), symLink.getValue());\r\n        }\r\n    }\r\n    if (getConf() != null && getConf().getBoolean(YarnConfiguration.NM_LOG_CONTAINER_DEBUG_INFO, YarnConfiguration.DEFAULT_NM_LOG_CONTAINER_DEBUG_INFO)) {\r\n        sb.echo(\"Copying debugging information\");\r\n        sb.copyDebugInformation(new Path(outFilename), new Path(logDir, outFilename));\r\n        sb.listDebugInformation(new Path(logDir, DIRECTORY_CONTENTS));\r\n    }\r\n    sb.echo(\"Launching container\");\r\n    sb.command(command);\r\n    PrintStream pout = null;\r\n    try {\r\n        pout = new PrintStream(out, false, \"UTF-8\");\r\n        sb.write(pout);\r\n    } finally {\r\n        if (out != null) {\r\n            out.close();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "readDirAsUser",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "File[] readDirAsUser(String user, Path dir)\n{\r\n    return new File(dir.toString()).listFiles();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "logOutput",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void logOutput(String output)\n{\r\n    String shExecOutput = output;\r\n    if (shExecOutput != null) {\r\n        for (String str : shExecOutput.split(\"\\n\")) {\r\n            LOG.info(str);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getPidFilePath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getPidFilePath(ContainerId containerId)\n{\r\n    return this.pidFiles.get(containerId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getRunCommand",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String[] getRunCommand(String command, String groupId, String userName, Path pidFile, Configuration config)\n{\r\n    return getRunCommand(command, groupId, userName, pidFile, config, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getRunCommand",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String[] getRunCommand(String command, String groupId, String userName, Path pidFile, Configuration config, Resource resource)\n{\r\n    if (Shell.WINDOWS) {\r\n        return getRunCommandForWindows(command, groupId, userName, pidFile, config, resource);\r\n    } else {\r\n        return getRunCommandForOther(command, config);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getRunCommandForWindows",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "String[] getRunCommandForWindows(String command, String groupId, String userName, Path pidFile, Configuration config, Resource resource)\n{\r\n    int cpuRate = -1;\r\n    int memory = -1;\r\n    if (resource != null) {\r\n        if (config.getBoolean(YarnConfiguration.NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED, YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED)) {\r\n            memory = (int) resource.getMemorySize();\r\n        }\r\n        if (config.getBoolean(YarnConfiguration.NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED, YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED)) {\r\n            int containerVCores = resource.getVirtualCores();\r\n            int nodeVCores = NodeManagerHardwareUtils.getVCores(config);\r\n            int nodeCpuPercentage = NodeManagerHardwareUtils.getNodeCpuPercentage(config);\r\n            float containerCpuPercentage = (float) (nodeCpuPercentage * containerVCores) / nodeVCores;\r\n            cpuRate = Math.min(10000, (int) (containerCpuPercentage * 100));\r\n        }\r\n    }\r\n    return new String[] { Shell.getWinUtilsPath(), \"task\", \"create\", \"-m\", String.valueOf(memory), \"-c\", String.valueOf(cpuRate), groupId, \"cmd /c \" + command };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getRunCommandForOther",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "String[] getRunCommandForOther(String command, Configuration config)\n{\r\n    List<String> retCommand = new ArrayList<>();\r\n    boolean containerSchedPriorityIsSet = false;\r\n    int containerSchedPriorityAdjustment = YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY;\r\n    if (config.get(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY) != null) {\r\n        containerSchedPriorityIsSet = true;\r\n        containerSchedPriorityAdjustment = config.getInt(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY, YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY);\r\n    }\r\n    if (containerSchedPriorityIsSet) {\r\n        retCommand.addAll(Arrays.asList(\"nice\", \"-n\", Integer.toString(containerSchedPriorityAdjustment)));\r\n    }\r\n    retCommand.addAll(Arrays.asList(\"bash\", command));\r\n    return retCommand.toArray(new String[retCommand.size()]);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "isContainerActive",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isContainerActive(ContainerId containerId)\n{\r\n    return this.pidFiles.containsKey(containerId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getNMEnvVar",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getNMEnvVar(String varname)\n{\r\n    return System.getenv(varname);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "activateContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void activateContainer(ContainerId containerId, Path pidFilePath)\n{\r\n    this.pidFiles.put(containerId, pidFilePath);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getIpAndHost",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String[] getIpAndHost(Container container) throws ContainerExecutionException\n{\r\n    return getLocalIpAndHost(container);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getLocalIpAndHost",
  "errType" : [ "UnknownHostException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String[] getLocalIpAndHost(Container container)\n{\r\n    String[] ipAndHost = new String[2];\r\n    try {\r\n        InetAddress address = InetAddress.getLocalHost();\r\n        ipAndHost[0] = address.getHostAddress();\r\n        ipAndHost[1] = address.getHostName();\r\n    } catch (UnknownHostException e) {\r\n        LOG.error(\"Unable to get Local hostname and ip for {}\", container.getContainerId(), e);\r\n    }\r\n    return ipAndHost;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "deactivateContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void deactivateContainer(ContainerId containerId)\n{\r\n    this.pidFiles.remove(containerId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "pauseContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void pauseContainer(Container container)\n{\r\n    LOG.warn(\"{} doesn't support pausing.\", container.getContainerId());\r\n    throw new UnsupportedOperationException();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "resumeContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void resumeContainer(Container container)\n{\r\n    LOG.warn(\"{} doesn't support resume.\", container.getContainerId());\r\n    throw new UnsupportedOperationException();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "cleanupBeforeRelaunch",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void cleanupBeforeRelaunch(Container container) throws IOException, InterruptedException\n{\r\n    if (container.getLocalizedResources() != null) {\r\n        Map<Path, Path> symLinks = resolveSymLinks(container.getLocalizedResources(), container.getUser());\r\n        for (Map.Entry<Path, Path> symLink : symLinks.entrySet()) {\r\n            LOG.debug(\"{} deleting {}\", container.getContainerId(), symLink.getValue());\r\n            deleteAsUser(new DeletionAsUserContext.Builder().setUser(container.getUser()).setSubDir(symLink.getValue()).build());\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getProcessId",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String getProcessId(ContainerId containerID)\n{\r\n    String pid = null;\r\n    Path pidFile = pidFiles.get(containerID);\r\n    if (pidFile != null) {\r\n        try {\r\n            pid = ProcessIdFileReader.getProcessId(pidFile);\r\n        } catch (IOException e) {\r\n            LOG.error(\"Got exception reading pid from pid-file {}\", pidFile, e);\r\n        }\r\n    }\r\n    return pid;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "resolveSymLinks",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "Map<Path, Path> resolveSymLinks(Map<Path, List<String>> resources, String user)\n{\r\n    Map<Path, Path> symLinks = new HashMap<>();\r\n    for (Map.Entry<Path, List<String>> resourceEntry : resources.entrySet()) {\r\n        for (String linkName : resourceEntry.getValue()) {\r\n            if (new Path(linkName).getName().equals(WILDCARD)) {\r\n                for (File wildLink : readDirAsUser(user, resourceEntry.getKey())) {\r\n                    symLinks.put(new Path(wildLink.toString()), new Path(wildLink.getName()));\r\n                }\r\n            } else {\r\n                symLinks.put(resourceEntry.getKey(), new Path(linkName));\r\n            }\r\n        }\r\n    }\r\n    return symLinks;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getExposedPorts",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getExposedPorts(Container container) throws ContainerExecutionException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int hashCode()\n{\r\n    int hash = loc.hashCode() ^ (int) ((timestamp >>> 32) ^ timestamp) * type.hashCode();\r\n    if (pattern != null) {\r\n        hash = hash ^ pattern.hashCode();\r\n    }\r\n    return hash;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "boolean equals(Object o)\n{\r\n    if (this == o) {\r\n        return true;\r\n    }\r\n    if (!(o instanceof LocalResourceRequest)) {\r\n        return false;\r\n    }\r\n    final LocalResourceRequest other = (LocalResourceRequest) o;\r\n    String pattern = getPattern();\r\n    String otherPattern = other.getPattern();\r\n    boolean patternEquals = (pattern == null && otherPattern == null) || (pattern != null && otherPattern != null && pattern.equals(otherPattern));\r\n    return getPath().equals(other.getPath()) && getTimestamp() == other.getTimestamp() && getType() == other.getType() && patternEquals;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "compareTo",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "int compareTo(LocalResourceRequest other)\n{\r\n    if (this == other) {\r\n        return 0;\r\n    }\r\n    int ret = getPath().compareTo(other.getPath());\r\n    if (0 == ret) {\r\n        ret = (int) (getTimestamp() - other.getTimestamp());\r\n        if (0 == ret) {\r\n            ret = getType().ordinal() - other.getType().ordinal();\r\n            if (0 == ret) {\r\n                String pattern = getPattern();\r\n                String otherPattern = other.getPattern();\r\n                if (pattern == null && otherPattern == null) {\r\n                    ret = 0;\r\n                } else if (pattern == null) {\r\n                    ret = -1;\r\n                } else if (otherPattern == null) {\r\n                    ret = 1;\r\n                } else {\r\n                    ret = pattern.compareTo(otherPattern);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getPath",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Path getPath()\n{\r\n    return loc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getTimestamp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getTimestamp()\n{\r\n    return timestamp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LocalResourceType getType()\n{\r\n    return type;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getResource",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "URL getResource()\n{\r\n    return URL.fromPath(loc);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getSize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getSize()\n{\r\n    return -1L;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getVisibility",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LocalResourceVisibility getVisibility()\n{\r\n    return visibility;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getPattern",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getPattern()\n{\r\n    return pattern;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getShouldBeUploadedToSharedCache",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean getShouldBeUploadedToSharedCache()\n{\r\n    throw new UnsupportedOperationException();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "setShouldBeUploadedToSharedCache",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setShouldBeUploadedToSharedCache(boolean shouldBeUploadedToSharedCache)\n{\r\n    throw new UnsupportedOperationException();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "setResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setResource(URL resource)\n{\r\n    throw new UnsupportedOperationException();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "setSize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setSize(long size)\n{\r\n    throw new UnsupportedOperationException();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "setTimestamp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setTimestamp(long timestamp)\n{\r\n    throw new UnsupportedOperationException();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "setType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setType(LocalResourceType type)\n{\r\n    throw new UnsupportedOperationException();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "setVisibility",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setVisibility(LocalResourceVisibility visibility)\n{\r\n    throw new UnsupportedOperationException();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "setPattern",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setPattern(String pattern)\n{\r\n    throw new UnsupportedOperationException();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{ \");\r\n    sb.append(getPath().toString()).append(\", \");\r\n    sb.append(getTimestamp()).append(\", \");\r\n    sb.append(getType()).append(\", \");\r\n    sb.append(getPattern()).append(\" }\");\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "LocalResourceStatusProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.resource != null && !((LocalResourcePBImpl) this.resource).getProto().equals(builder.getResource())) {\r\n        builder.setResource(convertToProtoFormat(this.resource));\r\n    }\r\n    if (this.localPath != null && !((URLPBImpl) this.localPath).getProto().equals(builder.getLocalPath())) {\r\n        builder.setLocalPath(convertToProtoFormat(this.localPath));\r\n    }\r\n    if (this.exception != null && !((SerializedExceptionPBImpl) this.exception).getProto().equals(builder.getException())) {\r\n        builder.setException(convertToProtoFormat(this.exception));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = LocalResourceStatusProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "LocalResource getResource()\n{\r\n    LocalResourceStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.resource != null) {\r\n        return this.resource;\r\n    }\r\n    if (!p.hasResource()) {\r\n        return null;\r\n    }\r\n    this.resource = convertFromProtoFormat(p.getResource());\r\n    return this.resource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getStatus",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ResourceStatusType getStatus()\n{\r\n    LocalResourceStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasStatus()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getLocalPath",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "URL getLocalPath()\n{\r\n    LocalResourceStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.localPath != null) {\r\n        return this.localPath;\r\n    }\r\n    if (!p.hasLocalPath()) {\r\n        return null;\r\n    }\r\n    this.localPath = convertFromProtoFormat(p.getLocalPath());\r\n    return this.localPath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getLocalSize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getLocalSize()\n{\r\n    LocalResourceStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.getLocalSize());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getException",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SerializedException getException()\n{\r\n    LocalResourceStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.exception != null) {\r\n        return this.exception;\r\n    }\r\n    if (!p.hasException()) {\r\n        return null;\r\n    }\r\n    this.exception = convertFromProtoFormat(p.getException());\r\n    return this.exception;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setResource(LocalResource resource)\n{\r\n    maybeInitBuilder();\r\n    if (resource == null)\r\n        builder.clearResource();\r\n    this.resource = resource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setStatus",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setStatus(ResourceStatusType status)\n{\r\n    maybeInitBuilder();\r\n    if (status == null) {\r\n        builder.clearStatus();\r\n        return;\r\n    }\r\n    builder.setStatus(convertToProtoFormat(status));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setLocalPath",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setLocalPath(URL localPath)\n{\r\n    maybeInitBuilder();\r\n    if (localPath == null)\r\n        builder.clearLocalPath();\r\n    this.localPath = localPath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setLocalSize",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setLocalSize(long size)\n{\r\n    maybeInitBuilder();\r\n    builder.setLocalSize(size);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setException",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setException(SerializedException exception)\n{\r\n    maybeInitBuilder();\r\n    if (exception == null)\r\n        builder.clearException();\r\n    this.exception = exception;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LocalResourceProto convertToProtoFormat(LocalResource rsrc)\n{\r\n    return ((LocalResourcePBImpl) rsrc).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LocalResourcePBImpl convertFromProtoFormat(LocalResourceProto rsrc)\n{\r\n    return new LocalResourcePBImpl(rsrc);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "URLPBImpl convertFromProtoFormat(URLProto p)\n{\r\n    return new URLPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "URLProto convertToProtoFormat(URL t)\n{\r\n    return ((URLPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceStatusTypeProto convertToProtoFormat(ResourceStatusType e)\n{\r\n    return ResourceStatusTypeProto.valueOf(e.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceStatusType convertFromProtoFormat(ResourceStatusTypeProto e)\n{\r\n    return ResourceStatusType.valueOf(e.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SerializedExceptionPBImpl convertFromProtoFormat(SerializedExceptionProto p)\n{\r\n    return new SerializedExceptionPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SerializedExceptionProto convertToProtoFormat(SerializedException t)\n{\r\n    return ((SerializedExceptionPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "setNextInterceptor",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNextInterceptor(RequestInterceptor nextInterceptor)\n{\r\n    this.nextInterceptor = nextInterceptor;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "setConf",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setConf(Configuration conf)\n{\r\n    this.conf = conf;\r\n    if (this.nextInterceptor != null) {\r\n        this.nextInterceptor.setConf(conf);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getConf",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Configuration getConf()\n{\r\n    return this.conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void init(AMRMProxyApplicationContext appContext)\n{\r\n    Preconditions.checkState(this.appContext == null, \"init is called multiple times on this interceptor: \" + this.getClass().getName());\r\n    this.appContext = appContext;\r\n    if (this.nextInterceptor != null) {\r\n        this.nextInterceptor.init(appContext);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "recover",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void recover(Map<String, byte[]> recoveredDataMap)\n{\r\n    if (this.nextInterceptor != null) {\r\n        this.nextInterceptor.recover(recoveredDataMap);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "shutdown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void shutdown()\n{\r\n    if (this.nextInterceptor != null) {\r\n        this.nextInterceptor.shutdown();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getNextInterceptor",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RequestInterceptor getNextInterceptor()\n{\r\n    return this.nextInterceptor;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getApplicationContext",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AMRMProxyApplicationContext getApplicationContext()\n{\r\n    return this.appContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "allocateForDistributedScheduling",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DistributedSchedulingAllocateResponse allocateForDistributedScheduling(DistributedSchedulingAllocateRequest request) throws YarnException, IOException\n{\r\n    return (this.nextInterceptor != null) ? this.nextInterceptor.allocateForDistributedScheduling(request) : null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "registerApplicationMasterForDistributedScheduling",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RegisterDistributedSchedulingAMResponse registerApplicationMasterForDistributedScheduling(RegisterApplicationMasterRequest request) throws YarnException, IOException\n{\r\n    return (this.nextInterceptor != null) ? this.nextInterceptor.registerApplicationMasterForDistributedScheduling(request) : null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getNMStateStore",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NMStateStoreService getNMStateStore()\n{\r\n    if (this.appContext == null || this.appContext.getNMCotext() == null) {\r\n        return null;\r\n    }\r\n    return this.appContext.getNMCotext().getNMStateStore();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getDiagnosticMessage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDiagnosticMessage()\n{\r\n    return diagnosticMesage;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "getGpuDeviceInformation",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "GpuDeviceInformation getGpuDeviceInformation()\n{\r\n    return gpuDeviceInformation;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "setGpuDeviceInformation",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setGpuDeviceInformation(GpuDeviceInformation gpuDeviceInformation)\n{\r\n    this.gpuDeviceInformation = gpuDeviceInformation;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "getTotalGpuDevices",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<GpuDevice> getTotalGpuDevices()\n{\r\n    return totalGpuDevices;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "setTotalGpuDevices",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setTotalGpuDevices(List<GpuDevice> totalGpuDevices)\n{\r\n    this.totalGpuDevices = totalGpuDevices;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "getAssignedGpuDevices",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<AssignedGpuDevice> getAssignedGpuDevices()\n{\r\n    return assignedGpuDevices;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "setAssignedGpuDevices",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAssignedGpuDevices(List<AssignedGpuDevice> assignedGpuDevices)\n{\r\n    this.assignedGpuDevices = assignedGpuDevices;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "setConf",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setConf(Configuration conf)\n{\r\n    super.setConf(conf);\r\n    nodeManagerGroup = conf.get(YarnConfiguration.NM_WINDOWS_SECURE_CONTAINER_GROUP);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getRunCommand",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String[] getRunCommand(String command, String groupId, String userName, Path pidFile, Configuration conf)\n{\r\n    File f = new File(command);\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(String.format(\"getRunCommand: %s exists:%b\", command, f.exists()));\r\n    }\r\n    return new String[] { Shell.getWinUtilsPath(), \"task\", \"createAsUser\", groupId, userName, pidFile.toString(), \"cmd /c \" + command };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getLocalWrapperScriptBuilder",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LocalWrapperScriptBuilder getLocalWrapperScriptBuilder(String containerIdStr, Path containerWorkDir)\n{\r\n    return new WindowsSecureWrapperScriptBuilder(containerWorkDir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "copyFile",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void copyFile(Path src, Path dst, String owner) throws IOException\n{\r\n    LOG.debug(\"copyFile: {} -> {} owner:{}\", src, dst, owner);\r\n    Native.Elevated.copy(src, dst, true);\r\n    Native.Elevated.chown(dst, owner, nodeManagerGroup);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createDir",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void createDir(Path dirPath, FsPermission perms, boolean createParent, String owner) throws IOException\n{\r\n    perms = new FsPermission(DIR_PERM);\r\n    LOG.debug(\"createDir: {} perm:{} owner:{}\", dirPath, perms, owner);\r\n    super.createDir(dirPath, perms, createParent, owner);\r\n    lfs.setOwner(dirPath, owner, nodeManagerGroup);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "setScriptExecutable",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setScriptExecutable(Path script, String owner) throws IOException\n{\r\n    LOG.debug(\"setScriptExecutable: {} owner:{}\", script, owner);\r\n    super.setScriptExecutable(script, owner);\r\n    Native.Elevated.chown(script, owner, nodeManagerGroup);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "localizeClasspathJar",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Path localizeClasspathJar(Path jarPath, Path target, String owner) throws IOException\n{\r\n    LOG.debug(\"localizeClasspathJar: {} {} o:{}\", jarPath, target, owner);\r\n    createDir(target, new FsPermission(DIR_PERM), true, owner);\r\n    String fileName = jarPath.getName();\r\n    Path dst = new Path(target, fileName);\r\n    Native.Elevated.move(jarPath, dst, true);\r\n    Native.Elevated.chown(dst, owner, nodeManagerGroup);\r\n    return dst;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "startLocalizer",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 39,
  "sourceCodeText" : "void startLocalizer(LocalizerStartContext ctx) throws IOException, InterruptedException\n{\r\n    Path nmPrivateContainerTokensPath = ctx.getNmPrivateContainerTokens();\r\n    InetSocketAddress nmAddr = ctx.getNmAddr();\r\n    String user = ctx.getUser();\r\n    String appId = ctx.getAppId();\r\n    String locId = ctx.getLocId();\r\n    LocalDirsHandlerService dirsHandler = ctx.getDirsHandler();\r\n    List<String> localDirs = dirsHandler.getLocalDirs();\r\n    List<String> logDirs = dirsHandler.getLogDirs();\r\n    Path classpathJarPrivateDir = dirsHandler.getLocalPathForWrite(ResourceLocalizationService.NM_PRIVATE_DIR);\r\n    createUserLocalDirs(localDirs, user);\r\n    createUserCacheDirs(localDirs, user);\r\n    createAppDirs(localDirs, user, appId);\r\n    createAppLogDirs(appId, logDirs, user);\r\n    Path appStorageDir = getWorkingDir(localDirs, user, appId);\r\n    String tokenFn = String.format(ContainerExecutor.TOKEN_FILE_NAME_FMT, locId);\r\n    Path tokenDst = new Path(appStorageDir, tokenFn);\r\n    copyFile(nmPrivateContainerTokensPath, tokenDst, user);\r\n    File cwdApp = new File(appStorageDir.toString());\r\n    LOG.debug(\"cwdApp: {}\", cwdApp);\r\n    List<String> command;\r\n    command = new ArrayList<String>();\r\n    File jvm = new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java.exe\");\r\n    command.add(jvm.toString());\r\n    Path cwdPath = new Path(cwdApp.getPath());\r\n    String classPath = System.getProperty(\"java.class.path\");\r\n    Map<String, String> env = new HashMap<String, String>(System.getenv());\r\n    String[] jarCp = FileUtil.createJarWithClassPath(classPath, classpathJarPrivateDir, cwdPath, env);\r\n    String classPathJar = localizeClasspathJar(new Path(jarCp[0]), cwdPath, user).toString();\r\n    command.add(\"-classpath\");\r\n    command.add(classPathJar + jarCp[1]);\r\n    String javaLibPath = System.getProperty(\"java.library.path\");\r\n    if (javaLibPath != null) {\r\n        command.add(\"-Djava.library.path=\" + javaLibPath);\r\n    }\r\n    command.addAll(ContainerLocalizer.getJavaOpts(getConf()));\r\n    ContainerLocalizer.buildMainArgs(command, user, appId, locId, nmAddr, tokenFn, localDirs, super.getConf());\r\n    String cmdLine = StringUtils.join(command, \" \");\r\n    String localizerPid = String.format(LOCALIZER_PID_FORMAT, locId);\r\n    WintuilsProcessStubExecutor stubExecutor = new WintuilsProcessStubExecutor(cwdApp.getAbsolutePath(), localizerPid, user, \"nul:\", cmdLine);\r\n    try {\r\n        stubExecutor.execute();\r\n        stubExecutor.validateResult();\r\n    } finally {\r\n        stubExecutor.close();\r\n        try {\r\n            killContainer(localizerPid, Signal.KILL);\r\n        } catch (Throwable e) {\r\n            LOG.warn(String.format(\"An exception occurred during the cleanup of localizer job %s:%n%s\", localizerPid, org.apache.hadoop.util.StringUtils.stringifyException(e)));\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "buildCommandExecutor",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "CommandExecutor buildCommandExecutor(String wrapperScriptPath, String containerIdStr, String userName, Path pidFile, Resource resource, File wordDir, Map<String, String> environment)\n{\r\n    return new WintuilsProcessStubExecutor(wordDir.toString(), containerIdStr, userName, pidFile.toString(), \"cmd /c \" + wrapperScriptPath);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "killContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void killContainer(String pid, Signal signal) throws IOException\n{\r\n    Native.Elevated.killTask(pid);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "addResources",
  "errType" : null,
  "containingMethodsNum" : 22,
  "sourceCodeText" : "Map<LocalResourceVisibility, Collection<LocalResourceRequest>> addResources(Map<String, LocalResource> localResourceMap) throws URISyntaxException\n{\r\n    if (localResourceMap == null || localResourceMap.isEmpty()) {\r\n        return null;\r\n    }\r\n    Map<LocalResourceRequest, Set<String>> allResources = new HashMap<>();\r\n    List<LocalResourceRequest> publicList = new ArrayList<>();\r\n    List<LocalResourceRequest> privateList = new ArrayList<>();\r\n    List<LocalResourceRequest> appList = new ArrayList<>();\r\n    for (Map.Entry<String, LocalResource> rsrc : localResourceMap.entrySet()) {\r\n        LocalResource resource = rsrc.getValue();\r\n        LocalResourceRequest req = new LocalResourceRequest(rsrc.getValue());\r\n        allResources.putIfAbsent(req, new HashSet<>());\r\n        allResources.get(req).add(rsrc.getKey());\r\n        storeSharedCacheUploadPolicy(req, resource.getShouldBeUploadedToSharedCache());\r\n        switch(resource.getVisibility()) {\r\n            case PUBLIC:\r\n                publicList.add(req);\r\n                break;\r\n            case PRIVATE:\r\n                privateList.add(req);\r\n                break;\r\n            case APPLICATION:\r\n                appList.add(req);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    Map<LocalResourceVisibility, Collection<LocalResourceRequest>> req = new LinkedHashMap<>();\r\n    if (!publicList.isEmpty()) {\r\n        publicRsrcs.addAll(publicList);\r\n        req.put(LocalResourceVisibility.PUBLIC, publicList);\r\n    }\r\n    if (!privateList.isEmpty()) {\r\n        privateRsrcs.addAll(privateList);\r\n        req.put(LocalResourceVisibility.PRIVATE, privateList);\r\n    }\r\n    if (!appList.isEmpty()) {\r\n        appRsrcs.addAll(appList);\r\n        req.put(LocalResourceVisibility.APPLICATION, appList);\r\n    }\r\n    if (!allResources.isEmpty()) {\r\n        this.pendingResources.putAll(allResources);\r\n    }\r\n    return req;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "resourceLocalized",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Set<String> resourceLocalized(LocalResourceRequest request, Path location)\n{\r\n    Set<String> symlinks = pendingResources.remove(request);\r\n    if (symlinks == null) {\r\n        return null;\r\n    } else {\r\n        for (String symlink : symlinks) {\r\n            localizedResources.put(symlink, location);\r\n        }\r\n        return symlinks;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "resourceLocalizationFailed",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void resourceLocalizationFailed(LocalResourceRequest request, String diagnostics)\n{\r\n    if (request == null) {\r\n        return;\r\n    }\r\n    Set<String> keys = pendingResources.remove(request);\r\n    if (keys != null) {\r\n        synchronized (resourcesFailedToBeLocalized) {\r\n            keys.forEach(key -> resourcesFailedToBeLocalized.add(LocalizationStatus.newInstance(key, LocalizationState.FAILED, diagnostics)));\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getAllResourcesByVisibility",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "Map<LocalResourceVisibility, Collection<LocalResourceRequest>> getAllResourcesByVisibility()\n{\r\n    Map<LocalResourceVisibility, Collection<LocalResourceRequest>> rsrc = new HashMap<>();\r\n    if (!publicRsrcs.isEmpty()) {\r\n        rsrc.put(LocalResourceVisibility.PUBLIC, publicRsrcs);\r\n    }\r\n    if (!privateRsrcs.isEmpty()) {\r\n        rsrc.put(LocalResourceVisibility.PRIVATE, privateRsrcs);\r\n    }\r\n    if (!appRsrcs.isEmpty()) {\r\n        rsrc.put(LocalResourceVisibility.APPLICATION, appRsrcs);\r\n    }\r\n    return rsrc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "storeSharedCacheUploadPolicy",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void storeSharedCacheUploadPolicy(LocalResourceRequest resourceRequest, Boolean uploadPolicy)\n{\r\n    Boolean storedUploadPolicy = resourcesUploadPolicies.get(resourceRequest);\r\n    if (storedUploadPolicy == null || (!storedUploadPolicy && uploadPolicy)) {\r\n        resourcesUploadPolicies.put(resourceRequest, uploadPolicy);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getLocalizedResources",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Map<Path, List<String>> getLocalizedResources()\n{\r\n    Map<Path, List<String>> map = new HashMap<>();\r\n    for (Map.Entry<String, Path> entry : localizedResources.entrySet()) {\r\n        map.putIfAbsent(entry.getValue(), new ArrayList<>());\r\n        map.get(entry.getValue()).add(entry.getKey());\r\n    }\r\n    return map;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getResourcesToBeUploaded",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<LocalResourceRequest, Path> getResourcesToBeUploaded()\n{\r\n    return resourcesToBeUploaded;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getResourcesUploadPolicies",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<LocalResourceRequest, Boolean> getResourcesUploadPolicies()\n{\r\n    return resourcesUploadPolicies;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getPendingResources",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<LocalResourceRequest, Set<String>> getPendingResources()\n{\r\n    return pendingResources;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "merge",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "ResourceSet merge(ResourceSet... resourceSets)\n{\r\n    ResourceSet merged = new ResourceSet();\r\n    for (ResourceSet rs : resourceSets) {\r\n        merged.localizedResources.putAll(rs.localizedResources);\r\n        merged.resourcesToBeUploaded.putAll(rs.resourcesToBeUploaded);\r\n        merged.resourcesUploadPolicies.putAll(rs.resourcesUploadPolicies);\r\n        merged.publicRsrcs.addAll(rs.publicRsrcs);\r\n        merged.privateRsrcs.addAll(rs.privateRsrcs);\r\n        merged.appRsrcs.addAll(rs.appRsrcs);\r\n    }\r\n    return merged;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getLocalizationStatuses",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "List<LocalizationStatus> getLocalizationStatuses()\n{\r\n    List<LocalizationStatus> statuses = new ArrayList<>();\r\n    localizedResources.forEach((key, path) -> {\r\n        LocalizationStatus status = LocalizationStatus.newInstance(key, LocalizationState.COMPLETED);\r\n        statuses.add(status);\r\n    });\r\n    pendingResources.forEach((lrReq, keys) -> keys.forEach(key -> {\r\n        LocalizationStatus status = LocalizationStatus.newInstance(key, LocalizationState.PENDING);\r\n        statuses.add(status);\r\n    }));\r\n    synchronized (resourcesFailedToBeLocalized) {\r\n        statuses.addAll(resourcesFailedToBeLocalized);\r\n    }\r\n    return statuses;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "setInnerShellExecutor",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setInnerShellExecutor(InnerShellExecutor shellExecutor)\n{\r\n    this.shell = shellExecutor;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "getPathToExecutable",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getPathToExecutable()\n{\r\n    return pathToExecutable;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "setEnvProvider",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setEnvProvider(Function<String, String> envProvider)\n{\r\n    this.envProvider = envProvider;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "getDefaultPathToExecutable",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getDefaultPathToExecutable()\n{\r\n    return envProvider.apply(ALTERAOCLSDKROOT_NAME);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "initPlugin",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "boolean initPlugin(Configuration config)\n{\r\n    if (initialized) {\r\n        return true;\r\n    }\r\n    String pluginDefaultBinaryName = DEFAULT_BINARY_NAME;\r\n    String executable = config.get(YarnConfiguration.NM_FPGA_PATH_TO_EXEC, pluginDefaultBinaryName);\r\n    File binaryPath = new File(executable);\r\n    if (!binaryPath.exists()) {\r\n        LOG.warn(\"Failed to find FPGA discoverer executable configured in \" + YarnConfiguration.NM_FPGA_PATH_TO_EXEC + \", please check! Try default path\");\r\n        executable = pluginDefaultBinaryName;\r\n        String pluginDefaultPreferredPath = getDefaultPathToExecutable();\r\n        if (null == pluginDefaultPreferredPath) {\r\n            LOG.warn(\"Failed to find FPGA discoverer executable from system \" + \" environment \" + ALTERAOCLSDKROOT_NAME + \", please check your environment!\");\r\n        } else {\r\n            binaryPath = new File(pluginDefaultPreferredPath + \"/bin\", pluginDefaultBinaryName);\r\n            if (binaryPath.exists()) {\r\n                executable = binaryPath.getAbsolutePath();\r\n                LOG.info(\"Succeed in finding FPGA discoverer executable: \" + executable);\r\n            } else {\r\n                executable = pluginDefaultBinaryName;\r\n                LOG.warn(\"Failed to find FPGA discoverer executable in \" + pluginDefaultPreferredPath + \", file doesn't exists! Use default binary\" + executable);\r\n            }\r\n        }\r\n    }\r\n    pathToExecutable = executable;\r\n    if (!diagnose(10 * 1000)) {\r\n        LOG.warn(\"Intel FPGA for OpenCL diagnose failed!\");\r\n        initialized = false;\r\n    } else {\r\n        initialized = true;\r\n    }\r\n    return initialized;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "discover",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<FpgaDevice> discover(int timeout)\n{\r\n    List<FpgaDevice> list = new LinkedList<>();\r\n    String output;\r\n    output = getDiagnoseInfo(timeout);\r\n    if (null == output) {\r\n        return list;\r\n    }\r\n    list = AoclDiagnosticOutputParser.parseDiagnosticOutput(output, shell, getFpgaType());\r\n    return list;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "getDiagnoseInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getDiagnoseInfo(int timeout)\n{\r\n    return this.shell.runDiagnose(this.pathToExecutable, timeout);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "diagnose",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean diagnose(int timeout)\n{\r\n    String output = getDiagnoseInfo(timeout);\r\n    if (null != output && output.contains(\"DIAGNOSTIC_PASSED\")) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "getFpgaType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getFpgaType()\n{\r\n    return \"IntelOpenCL\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "retrieveIPfilePath",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "String retrieveIPfilePath(String id, String dstDir, Map<Path, List<String>> localizedResources)\n{\r\n    String ipFilePath = null;\r\n    LOG.info(\"Got environment: \" + id + \", search IP file in localized resources\");\r\n    if (null == id || id.isEmpty()) {\r\n        LOG.warn(\"IP_ID environment is empty, skip downloading\");\r\n        return null;\r\n    }\r\n    if (localizedResources != null) {\r\n        Optional<Path> aocxPath = localizedResources.keySet().stream().filter(path -> matchesIpid(path, id)).findFirst();\r\n        if (aocxPath.isPresent()) {\r\n            ipFilePath = aocxPath.get().toString();\r\n            LOG.info(\"Found: {}\", ipFilePath);\r\n        } else {\r\n            LOG.warn(\"Requested IP file not found\");\r\n        }\r\n    } else {\r\n        LOG.warn(\"Localized resource is null!\");\r\n    }\r\n    return ipFilePath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "matchesIpid",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean matchesIpid(Path p, String id)\n{\r\n    return p.getName().toLowerCase().equals(id.toLowerCase() + \".aocx\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "configureIP",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "boolean configureIP(String ipPath, FpgaDevice device)\n{\r\n    Shell.ShellCommandExecutor shexec;\r\n    String aclName;\r\n    aclName = device.getAliasDevName();\r\n    shexec = new Shell.ShellCommandExecutor(new String[] { this.pathToExecutable, \"program\", aclName, ipPath });\r\n    try {\r\n        shexec.execute();\r\n        if (0 == shexec.getExitCode()) {\r\n            LOG.debug(\"{}\", shexec.getOutput());\r\n            LOG.info(\"Intel aocl program \" + ipPath + \" to \" + aclName + \" successfully\");\r\n        } else {\r\n            LOG.error(\"Device programming failed, aocl output is:\");\r\n            LOG.error(shexec.getOutput());\r\n            return false;\r\n        }\r\n    } catch (IOException e) {\r\n        LOG.error(\"Intel aocl program \" + ipPath + \" to \" + aclName + \" failed!\", e);\r\n        LOG.error(\"Aocl output: \" + shexec.getOutput());\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createSuccessLog",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "String createSuccessLog(String user, String operation, String target, ApplicationId appId, ContainerId containerId)\n{\r\n    StringBuilder b = new StringBuilder();\r\n    start(Keys.USER, user, b);\r\n    addRemoteIP(b);\r\n    add(Keys.OPERATION, operation, b);\r\n    add(Keys.TARGET, target, b);\r\n    add(Keys.RESULT, AuditConstants.SUCCESS, b);\r\n    if (appId != null) {\r\n        add(Keys.APPID, appId.toString(), b);\r\n    }\r\n    if (containerId != null) {\r\n        add(Keys.CONTAINERID, containerId.toString(), b);\r\n    }\r\n    return b.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "logSuccess",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void logSuccess(String user, String operation, String target, ApplicationId appId, ContainerId containerId)\n{\r\n    if (LOG.isInfoEnabled()) {\r\n        LOG.info(createSuccessLog(user, operation, target, appId, containerId));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "logSuccess",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void logSuccess(String user, String operation, String target)\n{\r\n    if (LOG.isInfoEnabled()) {\r\n        LOG.info(createSuccessLog(user, operation, target, null, null));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createFailureLog",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "String createFailureLog(String user, String operation, String target, String description, ApplicationId appId, ContainerId containerId)\n{\r\n    StringBuilder b = new StringBuilder();\r\n    start(Keys.USER, user, b);\r\n    addRemoteIP(b);\r\n    add(Keys.OPERATION, operation, b);\r\n    add(Keys.TARGET, target, b);\r\n    add(Keys.RESULT, AuditConstants.FAILURE, b);\r\n    add(Keys.DESCRIPTION, description, b);\r\n    if (appId != null) {\r\n        add(Keys.APPID, appId.toString(), b);\r\n    }\r\n    if (containerId != null) {\r\n        add(Keys.CONTAINERID, containerId.toString(), b);\r\n    }\r\n    return b.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "logFailure",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void logFailure(String user, String operation, String target, String description, ApplicationId appId, ContainerId containerId)\n{\r\n    if (LOG.isWarnEnabled()) {\r\n        LOG.warn(createFailureLog(user, operation, target, description, appId, containerId));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "logFailure",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void logFailure(String user, String operation, String target, String description)\n{\r\n    if (LOG.isWarnEnabled()) {\r\n        LOG.warn(createFailureLog(user, operation, target, description, null, null));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "addRemoteIP",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void addRemoteIP(StringBuilder b)\n{\r\n    InetAddress ip = Server.getRemoteIp();\r\n    if (ip != null) {\r\n        add(Keys.IP, ip.getHostAddress(), b);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "start",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void start(Keys key, String value, StringBuilder b)\n{\r\n    b.append(key.name()).append(AuditConstants.KEY_VAL_SEPARATOR).append(value);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "add",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void add(Keys key, String value, StringBuilder b)\n{\r\n    b.append(AuditConstants.PAIR_SEPARATOR).append(key.name()).append(AuditConstants.KEY_VAL_SEPARATOR).append(value);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void init() throws ResourceHandlerException\n{\r\n    initializeControllerPaths();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getControllerPath",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String getControllerPath(CGroupController controller)\n{\r\n    rwLock.readLock().lock();\r\n    try {\r\n        return controllerPaths.get(controller);\r\n    } finally {\r\n        rwLock.readLock().unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "initializeControllerPaths",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void initializeControllerPaths() throws ResourceHandlerException\n{\r\n    Map<String, Set<String>> newMtab = null;\r\n    Map<CGroupController, String> cPaths;\r\n    try {\r\n        if (this.cGroupsMountConfig.mountDisabledButMountPathDefined()) {\r\n            newMtab = ResourceHandlerModule.parseConfiguredCGroupPath(this.cGroupsMountConfig.getMountPath());\r\n        }\r\n        if (newMtab == null) {\r\n            newMtab = parseMtab(mtabFile);\r\n        }\r\n        cPaths = initializeControllerPathsFromMtab(newMtab);\r\n    } catch (IOException e) {\r\n        LOG.warn(\"Failed to initialize controller paths! Exception: \" + e);\r\n        throw new ResourceHandlerException(\"Failed to initialize controller paths!\");\r\n    }\r\n    rwLock.writeLock().lock();\r\n    try {\r\n        controllerPaths = cPaths;\r\n        parsedMtab = newMtab;\r\n    } finally {\r\n        rwLock.writeLock().unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "initializeControllerPathsFromMtab",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Map<CGroupController, String> initializeControllerPathsFromMtab(Map<String, Set<String>> parsedMtab) throws ResourceHandlerException\n{\r\n    Map<CGroupController, String> ret = new HashMap<>();\r\n    for (CGroupController controller : CGroupController.values()) {\r\n        String subsystemName = controller.getName();\r\n        String controllerPath = findControllerInMtab(subsystemName, parsedMtab);\r\n        if (controllerPath != null) {\r\n            ret.put(controller, controllerPath);\r\n        }\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "parseMtab",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 14,
  "sourceCodeText" : "Map<String, Set<String>> parseMtab(String mtab) throws IOException\n{\r\n    Map<String, Set<String>> ret = new HashMap<>();\r\n    BufferedReader in = null;\r\n    Set<String> validCgroups = CGroupsHandler.CGroupController.getValidCGroups();\r\n    try {\r\n        FileInputStream fis = new FileInputStream(new File(mtab));\r\n        in = new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\r\n        for (String str = in.readLine(); str != null; str = in.readLine()) {\r\n            Matcher m = MTAB_FILE_FORMAT.matcher(str);\r\n            boolean mat = m.find();\r\n            if (mat) {\r\n                String path = m.group(1);\r\n                String type = m.group(2);\r\n                String options = m.group(3);\r\n                if (type.equals(CGROUPS_FSTYPE)) {\r\n                    Set<String> cgroupList = new HashSet<>(Arrays.asList(options.split(\",\")));\r\n                    cgroupList.retainAll(validCgroups);\r\n                    ret.put(path, cgroupList);\r\n                }\r\n            }\r\n        }\r\n    } catch (IOException e) {\r\n        if (Shell.LINUX) {\r\n            throw new IOException(\"Error while reading \" + mtab, e);\r\n        } else {\r\n            LOG.warn(\"Error while reading \" + mtab, e);\r\n        }\r\n    } finally {\r\n        IOUtils.cleanupWithLogger(LOG, in);\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "findControllerInMtab",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "String findControllerInMtab(String controller, Map<String, Set<String>> entries)\n{\r\n    for (Map.Entry<String, Set<String>> e : entries.entrySet()) {\r\n        if (e.getValue().contains(controller)) {\r\n            if (new File(e.getKey()).canRead()) {\r\n                return e.getKey();\r\n            } else {\r\n                LOG.warn(String.format(\"Skipping inaccessible cgroup mount point %s\", e.getKey()));\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "mountCGroupController",
  "errType" : [ "PrivilegedOperationException" ],
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void mountCGroupController(CGroupController controller) throws ResourceHandlerException\n{\r\n    String existingMountPath = getControllerPath(controller);\r\n    String requestedMountPath = new File(cGroupsMountConfig.getMountPath(), controller.getName()).getAbsolutePath();\r\n    if (existingMountPath == null || !requestedMountPath.equals(existingMountPath)) {\r\n        rwLock.writeLock().lock();\r\n        try {\r\n            String mountOptions;\r\n            if (existingMountPath != null) {\r\n                mountOptions = Joiner.on(',').join(parsedMtab.get(existingMountPath));\r\n            } else {\r\n                mountOptions = controller.getName();\r\n            }\r\n            String cGroupKV = mountOptions + \"=\" + requestedMountPath;\r\n            PrivilegedOperation.OperationType opType = PrivilegedOperation.OperationType.MOUNT_CGROUPS;\r\n            PrivilegedOperation op = new PrivilegedOperation(opType);\r\n            op.appendArgs(cGroupPrefix, cGroupKV);\r\n            LOG.info(\"Mounting controller \" + controller.getName() + \" at \" + requestedMountPath);\r\n            privilegedOperationExecutor.executePrivilegedOperation(op, false);\r\n            controllerPaths.put(controller, requestedMountPath);\r\n        } catch (PrivilegedOperationException e) {\r\n            LOG.error(\"Failed to mount controller: \" + controller.getName());\r\n            throw new ResourceHandlerException(\"Failed to mount controller: \" + controller.getName());\r\n        } finally {\r\n            rwLock.writeLock().unlock();\r\n        }\r\n    } else {\r\n        LOG.info(\"CGroup controller already mounted at: \" + existingMountPath);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getRelativePathForCGroup",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getRelativePathForCGroup(String cGroupId)\n{\r\n    return cGroupPrefix + Path.SEPARATOR + cGroupId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getPathForCGroup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getPathForCGroup(CGroupController controller, String cGroupId)\n{\r\n    return getControllerPath(controller) + Path.SEPARATOR + cGroupPrefix + Path.SEPARATOR + cGroupId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getPathForCGroupTasks",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getPathForCGroupTasks(CGroupController controller, String cGroupId)\n{\r\n    return getPathForCGroup(controller, cGroupId) + Path.SEPARATOR + CGROUP_PROCS_FILE;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getPathForCGroupParam",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getPathForCGroupParam(CGroupController controller, String cGroupId, String param)\n{\r\n    return getPathForCGroup(controller, cGroupId) + Path.SEPARATOR + controller.getName() + \".\" + param;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "initializeCGroupController",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void initializeCGroupController(CGroupController controller) throws ResourceHandlerException\n{\r\n    if (this.cGroupsMountConfig.isMountEnabled() && cGroupsMountConfig.ensureMountPathIsDefined()) {\r\n        mountCGroupController(controller);\r\n    }\r\n    initializePreMountedCGroupController(controller);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "initializePreMountedCGroupController",
  "errType" : [ "SecurityException" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void initializePreMountedCGroupController(CGroupController controller) throws ResourceHandlerException\n{\r\n    String controllerPath = getControllerPath(controller);\r\n    if (controllerPath == null) {\r\n        throw new ResourceHandlerException(String.format(\"Controller %s not mounted.\" + \" You either need to mount it with %s\" + \" or mount cgroups before launching Yarn\", controller.getName(), YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_MOUNT));\r\n    }\r\n    File rootHierarchy = new File(controllerPath);\r\n    File yarnHierarchy = new File(rootHierarchy, cGroupPrefix);\r\n    String subsystemName = controller.getName();\r\n    LOG.info(\"Initializing mounted controller \" + controller.getName() + \" \" + \"at \" + yarnHierarchy);\r\n    if (!rootHierarchy.exists()) {\r\n        throw new ResourceHandlerException(getErrorWithDetails(\"Cgroups mount point does not exist or not accessible\", subsystemName, rootHierarchy.getAbsolutePath()));\r\n    } else if (!yarnHierarchy.exists()) {\r\n        LOG.info(\"Yarn control group does not exist. Creating \" + yarnHierarchy.getAbsolutePath());\r\n        try {\r\n            if (!yarnHierarchy.mkdir()) {\r\n                throw new ResourceHandlerException(getErrorWithDetails(\"Unexpected: Cannot create yarn cgroup\", subsystemName, yarnHierarchy.getAbsolutePath()));\r\n            }\r\n        } catch (SecurityException e) {\r\n            throw new ResourceHandlerException(getErrorWithDetails(\"No permissions to create yarn cgroup\", subsystemName, yarnHierarchy.getAbsolutePath()), e);\r\n        }\r\n    } else if (!FileUtil.canWrite(yarnHierarchy)) {\r\n        throw new ResourceHandlerException(getErrorWithDetails(\"Yarn control group not writable\", subsystemName, yarnHierarchy.getAbsolutePath()));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getErrorWithDetails",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getErrorWithDetails(String errorMessage, String subsystemName, String yarnCgroupPath)\n{\r\n    return String.format(\"%s Subsystem:%s Mount points:%s User:%s Path:%s \", errorMessage, subsystemName, mtabFile, System.getProperty(\"user.name\"), yarnCgroupPath);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "createCGroup",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String createCGroup(CGroupController controller, String cGroupId) throws ResourceHandlerException\n{\r\n    String path = getPathForCGroup(controller, cGroupId);\r\n    LOG.debug(\"createCgroup: {}\", path);\r\n    if (!new File(path).mkdir()) {\r\n        throw new ResourceHandlerException(\"Failed to create cgroup at \" + path);\r\n    }\r\n    return path;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "logLineFromTasksFile",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void logLineFromTasksFile(File cgf)\n{\r\n    String str;\r\n    if (LOG.isDebugEnabled()) {\r\n        try (BufferedReader inl = new BufferedReader(new InputStreamReader(new FileInputStream(cgf + \"/tasks\"), \"UTF-8\"))) {\r\n            str = inl.readLine();\r\n            if (str != null) {\r\n                LOG.debug(\"First line in cgroup tasks file: {} {}\", cgf, str);\r\n            }\r\n        } catch (IOException e) {\r\n            LOG.warn(\"Failed to read cgroup tasks file. \", e);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "checkAndDeleteCgroup",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "boolean checkAndDeleteCgroup(File cgf) throws InterruptedException\n{\r\n    boolean deleted = false;\r\n    if (cgf.exists()) {\r\n        try (FileInputStream in = new FileInputStream(cgf + \"/tasks\")) {\r\n            if (in.read() == -1) {\r\n                Thread.sleep(deleteCGroupDelay);\r\n                deleted = cgf.delete();\r\n                if (!deleted) {\r\n                    LOG.warn(\"Failed attempt to delete cgroup: \" + cgf);\r\n                }\r\n            } else {\r\n                logLineFromTasksFile(cgf);\r\n            }\r\n        } catch (IOException e) {\r\n            LOG.warn(\"Failed to read cgroup tasks file. \", e);\r\n        }\r\n    } else {\r\n        LOG.info(\"Parent Cgroups directory {} does not exist. Skipping \" + \"deletion\", cgf.getPath());\r\n        deleted = true;\r\n    }\r\n    return deleted;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "deleteCGroup",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void deleteCGroup(CGroupController controller, String cGroupId) throws ResourceHandlerException\n{\r\n    boolean deleted = false;\r\n    String cGroupPath = getPathForCGroup(controller, cGroupId);\r\n    LOG.debug(\"deleteCGroup: {}\", cGroupPath);\r\n    long start = clock.getTime();\r\n    do {\r\n        try {\r\n            deleted = checkAndDeleteCgroup(new File(cGroupPath));\r\n            if (!deleted) {\r\n                Thread.sleep(deleteCGroupDelay);\r\n            }\r\n        } catch (InterruptedException ex) {\r\n        }\r\n    } while (!deleted && (clock.getTime() - start) < deleteCGroupTimeout);\r\n    if (!deleted) {\r\n        LOG.warn(String.format(\"Unable to delete  %s, tried to delete for %d ms\", cGroupPath, deleteCGroupTimeout));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "updateCGroupParam",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void updateCGroupParam(CGroupController controller, String cGroupId, String param, String value) throws ResourceHandlerException\n{\r\n    String cGroupParamPath = getPathForCGroupParam(controller, cGroupId, param);\r\n    PrintWriter pw = null;\r\n    LOG.debug(\"updateCGroupParam for path: {} with value {}\", cGroupParamPath, value);\r\n    try {\r\n        File file = new File(cGroupParamPath);\r\n        Writer w = new OutputStreamWriter(new FileOutputStream(file), \"UTF-8\");\r\n        pw = new PrintWriter(w);\r\n        pw.write(value);\r\n    } catch (IOException e) {\r\n        throw new ResourceHandlerException(String.format(\"Unable to write to %s with value: %s\", cGroupParamPath, value), e);\r\n    } finally {\r\n        if (pw != null) {\r\n            boolean hasError = pw.checkError();\r\n            pw.close();\r\n            if (hasError) {\r\n                throw new ResourceHandlerException(String.format(\"PrintWriter unable to write to %s with value: %s\", cGroupParamPath, value));\r\n            }\r\n            if (pw.checkError()) {\r\n                throw new ResourceHandlerException(String.format(\"Error while closing cgroup file %s\", cGroupParamPath));\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getCGroupParam",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "String getCGroupParam(CGroupController controller, String cGroupId, String param) throws ResourceHandlerException\n{\r\n    String cGroupParamPath = param.equals(CGROUP_PROCS_FILE) ? getPathForCGroup(controller, cGroupId) + Path.SEPARATOR + param : getPathForCGroupParam(controller, cGroupId, param);\r\n    try {\r\n        byte[] contents = Files.readAllBytes(Paths.get(cGroupParamPath));\r\n        return new String(contents, \"UTF-8\").trim();\r\n    } catch (IOException e) {\r\n        throw new ResourceHandlerException(\"Unable to read from \" + cGroupParamPath);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getCGroupMountPath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getCGroupMountPath()\n{\r\n    return this.cGroupsMountConfig.getMountPath();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return CGroupsHandlerImpl.class.getName() + \"{\" + \"mtabFile='\" + mtabFile + '\\'' + \", cGroupPrefix='\" + cGroupPrefix + '\\'' + \", cGroupsMountConfig=\" + cGroupsMountConfig + \", deleteCGroupTimeout=\" + deleteCGroupTimeout + \", deleteCGroupDelay=\" + deleteCGroupDelay + '}';\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getReInitLaunchContext",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerLaunchContext getReInitLaunchContext()\n{\r\n    return reInitLaunchContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getResourceSet",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourceSet getResourceSet()\n{\r\n    return resourceSet;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "isAutoCommit",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isAutoCommit()\n{\r\n    return autoCommit;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "shouldDoLogAggregation",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean shouldDoLogAggregation(ContainerLogContext logContext)\n{\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\loghandler\\event",
  "methodName" : "getApplicationId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationId getApplicationId()\n{\r\n    return this.applicationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\loghandler\\event",
  "methodName" : "getCredentials",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Credentials getCredentials()\n{\r\n    return this.credentials;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\loghandler\\event",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUser()\n{\r\n    return this.user;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\loghandler\\event",
  "methodName" : "getApplicationAcls",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<ApplicationAccessType, String> getApplicationAcls()\n{\r\n    return this.appAcls;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\loghandler\\event",
  "methodName" : "getLogAggregationContext",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LogAggregationContext getLogAggregationContext()\n{\r\n    return this.logAggregationContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\loghandler\\event",
  "methodName" : "getRecoveredAppLogInitedTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getRecoveredAppLogInitedTime()\n{\r\n    return this.recoveredAppLogInitedTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\event",
  "methodName" : "getLocation",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Path getLocation()\n{\r\n    return location;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\event",
  "methodName" : "getSize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getSize()\n{\r\n    return size;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\deviceplugin",
  "methodName" : "getId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getId()\n{\r\n    return id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\deviceplugin",
  "methodName" : "getDevPath",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDevPath()\n{\r\n    return devPath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\deviceplugin",
  "methodName" : "getMajorNumber",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getMajorNumber()\n{\r\n    return majorNumber;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\deviceplugin",
  "methodName" : "getMinorNumber",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getMinorNumber()\n{\r\n    return minorNumber;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\deviceplugin",
  "methodName" : "getBusID",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getBusID()\n{\r\n    return busID;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\deviceplugin",
  "methodName" : "isHealthy",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isHealthy()\n{\r\n    return isHealthy;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\deviceplugin",
  "methodName" : "getStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getStatus()\n{\r\n    return status;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\deviceplugin",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "boolean equals(Object o)\n{\r\n    if (this == o) {\r\n        return true;\r\n    }\r\n    if (o == null || getClass() != o.getClass()) {\r\n        return false;\r\n    }\r\n    Device device = (Device) o;\r\n    return id == device.getId() && Objects.equals(devPath, device.getDevPath()) && majorNumber == device.getMajorNumber() && minorNumber == device.getMinorNumber() && Objects.equals(busID, device.getBusID());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\deviceplugin",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return Objects.hash(id, devPath, majorNumber, minorNumber, busID);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\deviceplugin",
  "methodName" : "compareTo",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "int compareTo(Object o)\n{\r\n    if (o == null || (!(o instanceof Device))) {\r\n        return -1;\r\n    }\r\n    Device other = (Device) o;\r\n    int result = Integer.compare(id, other.getId());\r\n    if (0 != result) {\r\n        return result;\r\n    }\r\n    result = Integer.compare(majorNumber, other.getMajorNumber());\r\n    if (0 != result) {\r\n        return result;\r\n    }\r\n    result = Integer.compare(minorNumber, other.getMinorNumber());\r\n    if (0 != result) {\r\n        return result;\r\n    }\r\n    result = devPath.compareTo(other.getDevPath());\r\n    if (0 != result) {\r\n        return result;\r\n    }\r\n    return busID.compareTo(other.getBusID());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\deviceplugin",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String toString()\n{\r\n    return \"(\" + getId() + \", \" + getDevPath() + \", \" + getMajorNumber() + \":\" + getMinorNumber() + \")\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "call",
  "errType" : [ "ConfigurationException", "Throwable", "IOException" ],
  "containingMethodsNum" : 36,
  "sourceCodeText" : "Integer call()\n{\r\n    if (!validateContainerState()) {\r\n        return 0;\r\n    }\r\n    ContainerId containerId = container.getContainerId();\r\n    String containerIdStr = containerId.toString();\r\n    int ret = -1;\r\n    Path containerLogDir;\r\n    try {\r\n        Path containerWorkDir = getContainerWorkDir();\r\n        cleanupContainerFiles(containerWorkDir);\r\n        containerLogDir = getContainerLogDir();\r\n        Map<Path, List<String>> localResources = getLocalizedResources();\r\n        String appIdStr = app.getAppId().toString();\r\n        Path nmPrivateContainerScriptPath = getNmPrivateContainerScriptPath(appIdStr, containerIdStr);\r\n        Path nmPrivateTokensPath = getNmPrivateTokensPath(appIdStr, containerIdStr);\r\n        Path nmPrivateKeystorePath = (container.getCredentials().getSecretKey(AMSecretKeys.YARN_APPLICATION_AM_KEYSTORE) == null) ? null : getNmPrivateKeystorePath(appIdStr, containerIdStr);\r\n        Path nmPrivateTruststorePath = (container.getCredentials().getSecretKey(AMSecretKeys.YARN_APPLICATION_AM_TRUSTSTORE) == null) ? null : getNmPrivateTruststorePath(appIdStr, containerIdStr);\r\n        try {\r\n            pidFilePath = getPidFilePath(appIdStr, containerIdStr);\r\n        } catch (IOException e) {\r\n            String pidFileSubpath = getPidFileSubpath(appIdStr, containerIdStr);\r\n            pidFilePath = dirsHandler.getLocalPathForWrite(pidFileSubpath);\r\n        }\r\n        LOG.info(\"Relaunch container with \" + \"workDir = \" + containerWorkDir.toString() + \", logDir = \" + containerLogDir.toString() + \", nmPrivateContainerScriptPath = \" + nmPrivateContainerScriptPath.toString() + \", nmPrivateTokensPath = \" + nmPrivateTokensPath.toString() + \", pidFilePath = \" + pidFilePath.toString());\r\n        List<String> localDirs = dirsHandler.getLocalDirs();\r\n        List<String> logDirs = dirsHandler.getLogDirs();\r\n        List<String> containerLocalDirs = getContainerLocalDirs(localDirs);\r\n        List<String> containerLogDirs = getContainerLogDirs(logDirs);\r\n        List<String> filecacheDirs = getNMFilecacheDirs(localDirs);\r\n        List<String> userLocalDirs = getUserLocalDirs(localDirs);\r\n        List<String> userFilecacheDirs = getUserFilecacheDirs(localDirs);\r\n        List<String> applicationLocalDirs = getApplicationLocalDirs(localDirs, appIdStr);\r\n        if (!dirsHandler.areDisksHealthy()) {\r\n            ret = ContainerExitStatus.DISKS_FAILED;\r\n            throw new IOException(\"Most of the disks failed. \" + dirsHandler.getDisksHealthReport(false));\r\n        }\r\n        ret = relaunchContainer(new ContainerStartContext.Builder().setContainer(container).setLocalizedResources(localResources).setNmPrivateContainerScriptPath(nmPrivateContainerScriptPath).setNmPrivateTokensPath(nmPrivateTokensPath).setNmPrivateKeystorePath(nmPrivateKeystorePath).setNmPrivateTruststorePath(nmPrivateTruststorePath).setUser(container.getUser()).setAppId(appIdStr).setContainerWorkDir(containerWorkDir).setLocalDirs(localDirs).setLogDirs(logDirs).setFilecacheDirs(filecacheDirs).setUserLocalDirs(userLocalDirs).setContainerLocalDirs(containerLocalDirs).setContainerLogDirs(containerLogDirs).setUserFilecacheDirs(userFilecacheDirs).setApplicationLocalDirs(applicationLocalDirs).build());\r\n    } catch (ConfigurationException e) {\r\n        LOG.error(\"Failed to launch container due to configuration error.\", e);\r\n        dispatcher.getEventHandler().handle(new ContainerExitEvent(containerId, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret, e.getMessage()));\r\n        getContext().getNodeStatusUpdater().reportException(e);\r\n        return ret;\r\n    } catch (Throwable e) {\r\n        LOG.warn(\"Failed to relaunch container.\", e);\r\n        dispatcher.getEventHandler().handle(new ContainerExitEvent(containerId, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret, e.getMessage()));\r\n        return ret;\r\n    } finally {\r\n        setContainerCompletedStatus(ret);\r\n    }\r\n    handleContainerExitCode(ret, containerLogDir);\r\n    return ret;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "getContainerLogDir",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path getContainerLogDir() throws IOException\n{\r\n    String containerLogDir = container.getLogDir();\r\n    if (containerLogDir == null || !dirsHandler.isGoodLogDir(containerLogDir)) {\r\n        throw new IOException(\"Could not find a good log dir \" + containerLogDir + \" for container \" + container);\r\n    }\r\n    return new Path(containerLogDir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "getNmPrivateContainerScriptPath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getNmPrivateContainerScriptPath(String appIdStr, String containerIdStr) throws IOException\n{\r\n    return dirsHandler.getLocalPathForRead(getContainerPrivateDir(appIdStr, containerIdStr) + Path.SEPARATOR + CONTAINER_SCRIPT);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "getNmPrivateTokensPath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getNmPrivateTokensPath(String appIdStr, String containerIdStr) throws IOException\n{\r\n    return dirsHandler.getLocalPathForRead(getContainerPrivateDir(appIdStr, containerIdStr) + Path.SEPARATOR + String.format(ContainerExecutor.TOKEN_FILE_NAME_FMT, containerIdStr));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "getNmPrivateKeystorePath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getNmPrivateKeystorePath(String appIdStr, String containerIdStr) throws IOException\n{\r\n    return dirsHandler.getLocalPathForRead(getContainerPrivateDir(appIdStr, containerIdStr) + Path.SEPARATOR + ContainerLaunch.KEYSTORE_FILE);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "getNmPrivateTruststorePath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getNmPrivateTruststorePath(String appIdStr, String containerIdStr) throws IOException\n{\r\n    return dirsHandler.getLocalPathForRead(getContainerPrivateDir(appIdStr, containerIdStr) + Path.SEPARATOR + ContainerLaunch.TRUSTSTORE_FILE);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "getPidFilePath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getPidFilePath(String appIdStr, String containerIdStr) throws IOException\n{\r\n    return dirsHandler.getLocalPathForRead(getPidFileSubpath(appIdStr, containerIdStr));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "add",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void add(AppInfo appInfo)\n{\r\n    app.add(appInfo);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getApps",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ArrayList<AppInfo> getApps()\n{\r\n    return app;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getContainerLogDirs",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "List<File> getContainerLogDirs(ContainerId containerId, String remoteUser, Context context) throws YarnException\n{\r\n    Container container = context.getContainers().get(containerId);\r\n    Application application = getApplicationForContainer(containerId, context);\r\n    checkAccess(remoteUser, application, context);\r\n    if (container != null) {\r\n        checkState(container.getContainerState());\r\n    }\r\n    return getContainerLogDirs(containerId, context.getLocalDirsHandler());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getContainerLogDirs",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "List<File> getContainerLogDirs(ContainerId containerId, LocalDirsHandlerService dirsHandler) throws YarnException\n{\r\n    List<String> logDirs = dirsHandler.getLogDirsForRead();\r\n    List<File> containerLogDirs = new ArrayList<File>(logDirs.size());\r\n    for (String logDir : logDirs) {\r\n        logDir = new File(logDir).toURI().getPath();\r\n        String appIdStr = containerId.getApplicationAttemptId().getApplicationId().toString();\r\n        File appLogDir = new File(logDir, appIdStr);\r\n        containerLogDirs.add(new File(appLogDir, containerId.toString()));\r\n    }\r\n    return containerLogDirs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getContainerLogFile",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "File getContainerLogFile(ContainerId containerId, String fileName, String remoteUser, Context context) throws YarnException\n{\r\n    Container container = context.getContainers().get(containerId);\r\n    Application application = getApplicationForContainer(containerId, context);\r\n    checkAccess(remoteUser, application, context);\r\n    if (container != null) {\r\n        checkState(container.getContainerState());\r\n    }\r\n    try {\r\n        LocalDirsHandlerService dirsHandler = context.getLocalDirsHandler();\r\n        String relativeContainerLogDir = ContainerLaunch.getRelativeContainerLogDir(application.getAppId().toString(), containerId.toString());\r\n        Path logPath = dirsHandler.getLogPathToRead(relativeContainerLogDir + Path.SEPARATOR + fileName);\r\n        URI logPathURI = new File(logPath.toString()).toURI();\r\n        File logFile = new File(logPathURI.getPath());\r\n        return logFile;\r\n    } catch (IOException e) {\r\n        LOG.warn(\"Failed to find log file\", e);\r\n        throw new NotFoundException(\"Cannot find this log on the local disk.\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getApplicationForContainer",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Application getApplicationForContainer(ContainerId containerId, Context context)\n{\r\n    ApplicationId applicationId = containerId.getApplicationAttemptId().getApplicationId();\r\n    Application application = context.getApplications().get(applicationId);\r\n    if (application == null) {\r\n        throw new NotFoundException(\"Unknown container. Container either has not started or \" + \"has already completed or \" + \"doesn't belong to this node at all.\");\r\n    }\r\n    return application;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "checkAccess",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void checkAccess(String remoteUser, Application application, Context context) throws YarnException\n{\r\n    UserGroupInformation callerUGI = null;\r\n    if (remoteUser != null) {\r\n        callerUGI = UserGroupInformation.createRemoteUser(remoteUser);\r\n    }\r\n    if (callerUGI != null && !context.getApplicationACLsManager().checkAccess(callerUGI, ApplicationAccessType.VIEW_APP, application.getUser(), application.getAppId())) {\r\n        throw new YarnException(\"User [\" + remoteUser + \"] is not authorized to view the logs for application \" + application.getAppId());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "checkState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void checkState(ContainerState state)\n{\r\n    if (state == ContainerState.NEW || state == ContainerState.LOCALIZING || state == ContainerState.SCHEDULED) {\r\n        throw new NotFoundException(\"Container is not yet running. Current state is \" + state);\r\n    }\r\n    if (state == ContainerState.LOCALIZATION_FAILED) {\r\n        throw new NotFoundException(\"Container wasn't started. Localization failed.\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "openLogFileForRead",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "FileInputStream openLogFileForRead(String containerIdStr, File logFile, Context context) throws IOException\n{\r\n    ContainerId containerId = ContainerId.fromString(containerIdStr);\r\n    ApplicationId applicationId = containerId.getApplicationAttemptId().getApplicationId();\r\n    String user = context.getApplications().get(applicationId).getUser();\r\n    try {\r\n        return SecureIOUtils.openForRead(logFile, user, null);\r\n    } catch (IOException e) {\r\n        if (e.getMessage().contains(\"did not match expected owner '\" + user + \"'\")) {\r\n            LOG.error(\"Exception reading log file \" + logFile.getAbsolutePath(), e);\r\n            throw new IOException(\"Exception reading log file. Application submitted by '\" + user + \"' doesn't own requested log file : \" + logFile.getName(), e);\r\n        } else {\r\n            throw new IOException(\"Exception reading log file. It might be because log \" + \"file was aggregated : \" + logFile.getName(), e);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getDiagnostic",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDiagnostic()\n{\r\n    return this.diagnostic;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getId()\n{\r\n    return this.id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUser()\n{\r\n    return this.user;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getState()\n{\r\n    return this.state;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getContainers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ArrayList<String> getContainers()\n{\r\n    return this.containerids;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\impl\\pb\\client",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void close()\n{\r\n    if (this.proxy != null) {\r\n        RPC.stopProxy(this.proxy);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\impl\\pb\\client",
  "methodName" : "heartbeat",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "LocalizerHeartbeatResponse heartbeat(LocalizerStatus status) throws YarnException, IOException\n{\r\n    LocalizerStatusProto statusProto = ((LocalizerStatusPBImpl) status).getProto();\r\n    try {\r\n        return new LocalizerHeartbeatResponsePBImpl(proxy.heartbeat(null, statusProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUser()\n{\r\n    return this.user;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getAppId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getAppId()\n{\r\n    return this.appId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Container getContainer()\n{\r\n    return this.container;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getShell",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getShell()\n{\r\n    return this.command;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getLocalDirsHandlerService",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LocalDirsHandlerService getLocalDirsHandlerService()\n{\r\n    return this.localDirsHandler;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getConf",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Configuration getConf()\n{\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getApplicationAttemptId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationAttemptId getApplicationAttemptId()\n{\r\n    return applicationAttemptId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUser()\n{\r\n    return user;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getAMRMToken",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Token<AMRMTokenIdentifier> getAMRMToken()\n{\r\n    return amrmToken;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "setAMRMToken",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean setAMRMToken(Token<AMRMTokenIdentifier> amrmToken)\n{\r\n    Token<AMRMTokenIdentifier> oldValue = this.amrmToken;\r\n    this.amrmToken = amrmToken;\r\n    return !this.amrmToken.equals(oldValue);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getLocalAMRMToken",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Token<AMRMTokenIdentifier> getLocalAMRMToken()\n{\r\n    return this.localToken;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "setLocalAMRMToken",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setLocalAMRMToken(Token<AMRMTokenIdentifier> localToken)\n{\r\n    this.localToken = localToken;\r\n    this.localTokenKeyId = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getLocalAMRMTokenKeyId",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getLocalAMRMTokenKeyId()\n{\r\n    Integer keyId = this.localTokenKeyId;\r\n    if (keyId == null) {\r\n        try {\r\n            if (this.localToken == null) {\r\n                throw new YarnRuntimeException(\"Missing AMRM token for \" + this.applicationAttemptId);\r\n            }\r\n            keyId = this.localToken.decodeIdentifier().getKeyId();\r\n            this.localTokenKeyId = keyId;\r\n        } catch (IOException e) {\r\n            throw new YarnRuntimeException(\"AMRM token decode error for \" + this.applicationAttemptId, e);\r\n        }\r\n    }\r\n    return keyId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getNMCotext",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Context getNMCotext()\n{\r\n    return nmContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getCredentials",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Credentials getCredentials()\n{\r\n    return this.credentials;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getRegistryClient",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RegistryOperations getRegistryClient()\n{\r\n    return this.registry;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getId()\n{\r\n    return this.id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getNodeId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getNodeId()\n{\r\n    return this.nodeId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getState()\n{\r\n    return this.state;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getExitCode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getExitCode()\n{\r\n    return this.exitCode;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getExitStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getExitStatus()\n{\r\n    return this.exitStatus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getDiagnostics",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDiagnostics()\n{\r\n    return this.diagnostics;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUser()\n{\r\n    return this.user;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getShortLogLink",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getShortLogLink()\n{\r\n    return this.containerLogsShortLink;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getLogLink",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getLogLink()\n{\r\n    return this.containerLogsLink;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getMemoryNeeded",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getMemoryNeeded()\n{\r\n    return this.totalMemoryNeededMB;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getVCoresNeeded",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getVCoresNeeded()\n{\r\n    return this.totalVCoresNeeded;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getExecutionType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getExecutionType()\n{\r\n    return this.executionType;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getContainerLogFiles",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<String> getContainerLogFiles()\n{\r\n    return this.containerLogFiles;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getContainerLogFiles",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "List<String> getContainerLogFiles(ContainerId id, String remoteUser, Context nmContext)\n{\r\n    List<String> logFiles = new ArrayList<>();\r\n    try {\r\n        List<File> logDirs = ContainerLogsUtils.getContainerLogDirs(id, remoteUser, nmContext);\r\n        for (File containerLogsDir : logDirs) {\r\n            File[] logs = containerLogsDir.listFiles();\r\n            if (logs != null) {\r\n                for (File log : logs) {\r\n                    if (log.isFile()) {\r\n                        logFiles.add(log.getName());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } catch (Exception ye) {\r\n        return logFiles;\r\n    }\r\n    return logFiles;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "getCurrentGpuTemp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Float getCurrentGpuTemp()\n{\r\n    return currentGpuTemp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "setCurrentGpuTemp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setCurrentGpuTemp(Float currentGpuTemp)\n{\r\n    this.currentGpuTemp = currentGpuTemp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "getMaxGpuTemp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Float getMaxGpuTemp()\n{\r\n    return maxGpuTemp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "setMaxGpuTemp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setMaxGpuTemp(Float maxGpuTemp)\n{\r\n    this.maxGpuTemp = maxGpuTemp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "getSlowThresholdGpuTemp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Float getSlowThresholdGpuTemp()\n{\r\n    return slowThresholdGpuTemp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "setSlowThresholdGpuTemp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setSlowThresholdGpuTemp(Float slowThresholdGpuTemp)\n{\r\n    this.slowThresholdGpuTemp = slowThresholdGpuTemp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "bootstrap",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "List<PrivilegedOperation> bootstrap(Configuration configuration) throws ResourceHandlerException\n{\r\n    List<GpuDevice> usableGpus;\r\n    try {\r\n        usableGpus = gpuDiscoverer.getGpusUsableByYarn();\r\n        if (usableGpus == null || usableGpus.isEmpty()) {\r\n            String message = \"GPU is enabled on the NodeManager, but couldn't find \" + \"any usable GPU devices, please double check configuration!\";\r\n            LOG.error(message);\r\n            throwIfNecessary(new ResourceHandlerException(message), configuration);\r\n        }\r\n    } catch (YarnException e) {\r\n        LOG.error(\"Exception when trying to get usable GPU device\", e);\r\n        throw new ResourceHandlerException(e);\r\n    }\r\n    for (GpuDevice gpu : usableGpus) {\r\n        gpuAllocator.addGpu(gpu);\r\n    }\r\n    this.cGroupsHandler.initializeCGroupController(CGroupsHandler.CGroupController.DEVICES);\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "preStart",
  "errType" : [ "PrivilegedOperationException" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "List<PrivilegedOperation> preStart(Container container) throws ResourceHandlerException\n{\r\n    String containerIdStr = container.getContainerId().toString();\r\n    GpuResourceAllocator.GpuAllocation allocation = gpuAllocator.assignGpus(container);\r\n    cGroupsHandler.createCGroup(CGroupsHandler.CGroupController.DEVICES, containerIdStr);\r\n    if (!OCIContainerRuntime.isOCICompliantContainerRequested(nmContext.getConf(), container.getLaunchContext().getEnvironment())) {\r\n        try {\r\n            PrivilegedOperation privilegedOperation = new PrivilegedOperation(PrivilegedOperation.OperationType.GPU, Arrays.asList(CONTAINER_ID_CLI_OPTION, containerIdStr));\r\n            if (!allocation.getDeniedGPUs().isEmpty()) {\r\n                List<Integer> minorNumbers = new ArrayList<>();\r\n                for (GpuDevice deniedGpu : allocation.getDeniedGPUs()) {\r\n                    minorNumbers.add(deniedGpu.getMinorNumber());\r\n                }\r\n                privilegedOperation.appendArgs(Arrays.asList(EXCLUDED_GPUS_CLI_OPTION, StringUtils.join(\",\", minorNumbers)));\r\n            }\r\n            privilegedOperationExecutor.executePrivilegedOperation(privilegedOperation, true);\r\n        } catch (PrivilegedOperationException e) {\r\n            cGroupsHandler.deleteCGroup(CGroupsHandler.CGroupController.DEVICES, containerIdStr);\r\n            LOG.warn(\"Could not update cgroup for container\", e);\r\n            throw new ResourceHandlerException(e);\r\n        }\r\n        List<PrivilegedOperation> ret = new ArrayList<>();\r\n        ret.add(new PrivilegedOperation(PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP, PrivilegedOperation.CGROUP_ARG_PREFIX + cGroupsHandler.getPathForCGroupTasks(CGroupsHandler.CGroupController.DEVICES, containerIdStr)));\r\n        return ret;\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "getGpuAllocator",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "GpuResourceAllocator getGpuAllocator()\n{\r\n    return gpuAllocator;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "reacquireContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<PrivilegedOperation> reacquireContainer(ContainerId containerId) throws ResourceHandlerException\n{\r\n    gpuAllocator.recoverAssignedGpus(containerId);\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "updateContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<PrivilegedOperation> updateContainer(Container container) throws ResourceHandlerException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "postComplete",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<PrivilegedOperation> postComplete(ContainerId containerId) throws ResourceHandlerException\n{\r\n    gpuAllocator.unassignGpus(containerId);\r\n    cGroupsHandler.deleteCGroup(CGroupsHandler.CGroupController.DEVICES, containerId.toString());\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "teardown",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<PrivilegedOperation> teardown() throws ResourceHandlerException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return GpuResourceHandlerImpl.class.getName() + \"{\" + \"gpuAllocator=\" + gpuAllocator + '}';\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getTotalDevices",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<Device> getTotalDevices()\n{\r\n    return totalDevices;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "setTotalDevices",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setTotalDevices(List<Device> totalDevices)\n{\r\n    this.totalDevices = totalDevices;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getAssignedDevices",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<AssignedDevice> getAssignedDevices()\n{\r\n    return assignedDevices;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "setAssignedDevices",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAssignedDevices(List<AssignedDevice> assignedDevices)\n{\r\n    this.assignedDevices = assignedDevices;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "initialize",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void initialize(Configuration conf, Context nmContext) throws ContainerExecutionException\n{\r\n    String[] configuredRuntimes = conf.getTrimmedStrings(YarnConfiguration.LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES, YarnConfiguration.DEFAULT_LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES);\r\n    for (String configuredRuntime : configuredRuntimes) {\r\n        String normRuntime = configuredRuntime.toUpperCase();\r\n        allowedRuntimes.add(normRuntime);\r\n        if (isPluggableRuntime(normRuntime)) {\r\n            LinuxContainerRuntime runtime = createPluggableRuntime(conf, configuredRuntime);\r\n            runtime.initialize(conf, nmContext);\r\n            pluggableRuntimes.add(runtime);\r\n        }\r\n    }\r\n    if (isRuntimeAllowed(LinuxContainerRuntimeConstants.RuntimeType.JAVASANDBOX.name())) {\r\n        javaSandboxLinuxContainerRuntime = new JavaSandboxLinuxContainerRuntime(PrivilegedOperationExecutor.getInstance(conf));\r\n        javaSandboxLinuxContainerRuntime.initialize(conf, nmContext);\r\n    }\r\n    if (isRuntimeAllowed(LinuxContainerRuntimeConstants.RuntimeType.DOCKER.name())) {\r\n        dockerLinuxContainerRuntime = new DockerLinuxContainerRuntime(PrivilegedOperationExecutor.getInstance(conf));\r\n        dockerLinuxContainerRuntime.initialize(conf, nmContext);\r\n    }\r\n    if (isRuntimeAllowed(LinuxContainerRuntimeConstants.RuntimeType.RUNC.name())) {\r\n        runcContainerRuntime = new RuncContainerRuntime(PrivilegedOperationExecutor.getInstance(conf));\r\n        runcContainerRuntime.initialize(conf, nmContext);\r\n    }\r\n    if (isRuntimeAllowed(LinuxContainerRuntimeConstants.RuntimeType.DEFAULT.name())) {\r\n        defaultLinuxContainerRuntime = new DefaultLinuxContainerRuntime(PrivilegedOperationExecutor.getInstance(conf));\r\n        defaultLinuxContainerRuntime.initialize(conf, nmContext);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "isRuntimeRequested",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isRuntimeRequested(Map<String, String> env)\n{\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "pickContainerRuntime",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "LinuxContainerRuntime pickContainerRuntime(Map<String, String> environment) throws ContainerExecutionException\n{\r\n    LinuxContainerRuntime runtime;\r\n    if (javaSandboxLinuxContainerRuntime != null && javaSandboxLinuxContainerRuntime.isRuntimeRequested(environment)) {\r\n        runtime = javaSandboxLinuxContainerRuntime;\r\n    } else if (dockerLinuxContainerRuntime != null && dockerLinuxContainerRuntime.isRuntimeRequested(environment)) {\r\n        runtime = dockerLinuxContainerRuntime;\r\n    } else if (runcContainerRuntime != null && runcContainerRuntime.isRuntimeRequested(environment)) {\r\n        runtime = runcContainerRuntime;\r\n    } else {\r\n        LinuxContainerRuntime pluggableRuntime = pickPluggableRuntime(environment);\r\n        if (pluggableRuntime != null) {\r\n            runtime = pluggableRuntime;\r\n        } else if (defaultLinuxContainerRuntime != null && defaultLinuxContainerRuntime.isRuntimeRequested(environment)) {\r\n            runtime = defaultLinuxContainerRuntime;\r\n        } else {\r\n            throw new ContainerExecutionException(\"Requested runtime not allowed.\");\r\n        }\r\n    }\r\n    LOG.debug(\"Using container runtime: {}\", runtime.getClass().getSimpleName());\r\n    return runtime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "pickPluggableRuntime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LinuxContainerRuntime pickPluggableRuntime(Map<String, String> environment)\n{\r\n    for (LinuxContainerRuntime runtime : pluggableRuntimes) {\r\n        if (runtime.isRuntimeRequested(environment)) {\r\n            return runtime;\r\n        }\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "pickContainerRuntime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LinuxContainerRuntime pickContainerRuntime(Container container) throws ContainerExecutionException\n{\r\n    return pickContainerRuntime(container.getLaunchContext().getEnvironment());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "prepareContainer",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void prepareContainer(ContainerRuntimeContext ctx) throws ContainerExecutionException\n{\r\n    LinuxContainerRuntime runtime = pickContainerRuntime(ctx.getContainer());\r\n    runtime.prepareContainer(ctx);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "launchContainer",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void launchContainer(ContainerRuntimeContext ctx) throws ContainerExecutionException\n{\r\n    Container container = ctx.getContainer();\r\n    LinuxContainerRuntime runtime = pickContainerRuntime(container);\r\n    runtime.launchContainer(ctx);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "relaunchContainer",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void relaunchContainer(ContainerRuntimeContext ctx) throws ContainerExecutionException\n{\r\n    Container container = ctx.getContainer();\r\n    LinuxContainerRuntime runtime = pickContainerRuntime(container);\r\n    runtime.relaunchContainer(ctx);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "signalContainer",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void signalContainer(ContainerRuntimeContext ctx) throws ContainerExecutionException\n{\r\n    Container container = ctx.getContainer();\r\n    LinuxContainerRuntime runtime = pickContainerRuntime(container);\r\n    runtime.signalContainer(ctx);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "reapContainer",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void reapContainer(ContainerRuntimeContext ctx) throws ContainerExecutionException\n{\r\n    Container container = ctx.getContainer();\r\n    LinuxContainerRuntime runtime = pickContainerRuntime(container);\r\n    runtime.reapContainer(ctx);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getIpAndHost",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String[] getIpAndHost(Container container) throws ContainerExecutionException\n{\r\n    LinuxContainerRuntime runtime = pickContainerRuntime(container);\r\n    return runtime.getIpAndHost(container);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getExposedPorts",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getExposedPorts(Container container) throws ContainerExecutionException\n{\r\n    LinuxContainerRuntime runtime = pickContainerRuntime(container);\r\n    return runtime.getExposedPorts(container);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "isPluggableRuntime",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isPluggableRuntime(String runtimeType)\n{\r\n    for (LinuxContainerRuntimeConstants.RuntimeType type : LinuxContainerRuntimeConstants.RuntimeType.values()) {\r\n        if (type.name().equalsIgnoreCase(runtimeType)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "createPluggableRuntime",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "LinuxContainerRuntime createPluggableRuntime(Configuration conf, String runtimeType) throws ContainerExecutionException\n{\r\n    String confKey = String.format(YarnConfiguration.LINUX_CONTAINER_RUNTIME_CLASS_FMT, runtimeType);\r\n    Class<? extends LinuxContainerRuntime> clazz = conf.getClass(confKey, null, LinuxContainerRuntime.class);\r\n    if (clazz == null) {\r\n        throw new ContainerExecutionException(\"Invalid runtime set in \" + YarnConfiguration.LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES + \" : \" + runtimeType + \" : Missing configuration \" + confKey);\r\n    }\r\n    return ReflectionUtils.newInstance(clazz, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "isRuntimeAllowed",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isRuntimeAllowed(String runtimeType)\n{\r\n    return runtimeType != null && allowedRuntimes.contains(runtimeType.toUpperCase());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "execContainer",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "IOStreamPair execContainer(ContainerExecContext ctx) throws ContainerExecutionException\n{\r\n    Container container = ctx.getContainer();\r\n    LinuxContainerRuntime runtime = pickContainerRuntime(container);\r\n    return runtime.execContainer(ctx);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getLocalResources",
  "errType" : [ "ContainerExecutionException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Map<String, LocalResource> getLocalResources(Container container) throws IOException\n{\r\n    try {\r\n        LinuxContainerRuntime runtime = pickContainerRuntime(container);\r\n        return runtime.getLocalResources(container);\r\n    } catch (ContainerExecutionException e) {\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "start",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void start()\n{\r\n    if (isRuntimeAllowed(LinuxContainerRuntimeConstants.RuntimeType.JAVASANDBOX.name())) {\r\n        javaSandboxLinuxContainerRuntime.start();\r\n    }\r\n    if (isRuntimeAllowed(LinuxContainerRuntimeConstants.RuntimeType.DOCKER.name())) {\r\n        dockerLinuxContainerRuntime.start();\r\n    }\r\n    if (isRuntimeAllowed(LinuxContainerRuntimeConstants.RuntimeType.RUNC.name())) {\r\n        runcContainerRuntime.start();\r\n    }\r\n    if (isRuntimeAllowed(LinuxContainerRuntimeConstants.RuntimeType.DEFAULT.name())) {\r\n        defaultLinuxContainerRuntime.start();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "stop",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void stop()\n{\r\n    if (isRuntimeAllowed(LinuxContainerRuntimeConstants.RuntimeType.JAVASANDBOX.name())) {\r\n        javaSandboxLinuxContainerRuntime.stop();\r\n    }\r\n    if (isRuntimeAllowed(LinuxContainerRuntimeConstants.RuntimeType.DOCKER.name())) {\r\n        dockerLinuxContainerRuntime.stop();\r\n    }\r\n    if (isRuntimeAllowed(LinuxContainerRuntimeConstants.RuntimeType.RUNC.name())) {\r\n        runcContainerRuntime.stop();\r\n    }\r\n    if (isRuntimeAllowed(LinuxContainerRuntimeConstants.RuntimeType.DEFAULT.name())) {\r\n        defaultLinuxContainerRuntime.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\volume\\csi",
  "methodName" : "publishVolumes",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "Map<String, String> publishVolumes() throws YarnException, IOException\n{\r\n    LOG.info(\"publishing volumes\");\r\n    Map<String, String> volumeMounts = new HashMap<>();\r\n    List<VolumeMetaData> volumes = getVolumes();\r\n    LOG.info(\"Found {} volumes to be published on this node\", volumes.size());\r\n    for (VolumeMetaData volume : volumes) {\r\n        Map<String, String> bindings = publishVolume(volume);\r\n        if (bindings != null && !bindings.isEmpty()) {\r\n            volumeMounts.putAll(bindings);\r\n        }\r\n    }\r\n    return volumeMounts;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\volume\\csi",
  "methodName" : "unpublishVolumes",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void unpublishVolumes() throws YarnException, IOException\n{\r\n    LOG.info(\"Un-publishing Volumes\");\r\n    List<VolumeMetaData> volumes = getVolumes();\r\n    LOG.info(\"Volumes to un-publish {}\", volumes.size());\r\n    for (VolumeMetaData volume : volumes) {\r\n        this.unpublishVolume(volume);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\volume\\csi",
  "methodName" : "getLocalVolumeMountPath",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "File getLocalVolumeMountPath(String containerWorkDir, String volumeId)\n{\r\n    return new File(containerWorkDir, volumeId + \"_mount\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\volume\\csi",
  "methodName" : "getLocalVolumeStagingPath",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "File getLocalVolumeStagingPath(String containerWorkDir, String volumeId)\n{\r\n    return new File(containerWorkDir, volumeId + \"_staging\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\volume\\csi",
  "methodName" : "getVolumes",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "List<VolumeMetaData> getVolumes() throws InvalidVolumeException\n{\r\n    List<VolumeMetaData> volumes = new ArrayList<>();\r\n    Resource containerResource = container.getResource();\r\n    if (containerResource != null) {\r\n        for (ResourceInformation resourceInformation : containerResource.getAllResourcesListCopy()) {\r\n            if (resourceInformation.getTags().contains(CsiConstants.CSI_VOLUME_RESOURCE_TAG)) {\r\n                volumes.addAll(VolumeMetaData.fromResource(resourceInformation));\r\n            }\r\n        }\r\n    }\r\n    if (volumes.size() > 0) {\r\n        LOG.info(\"Total number of volumes require provisioning is {}\", volumes.size());\r\n    }\r\n    return volumes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\volume\\csi",
  "methodName" : "publishVolume",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "Map<String, String> publishVolume(VolumeMetaData volume) throws IOException, YarnException\n{\r\n    Map<String, String> bindVolumes = new HashMap<>();\r\n    File localMount = getLocalVolumeMountPath(localMountRoot, volume.getVolumeId().toString());\r\n    File localStaging = getLocalVolumeStagingPath(localMountRoot, volume.getVolumeId().toString());\r\n    LOG.info(\"Volume {}, local mount path: {}, local staging path {}\", volume.getVolumeId().toString(), localMount, localStaging);\r\n    NodePublishVolumeRequest publishRequest = NodePublishVolumeRequest.newInstance(volume.getVolumeId().getId(), false, localMount.getAbsolutePath(), localStaging.getAbsolutePath(), new ValidateVolumeCapabilitiesRequest.VolumeCapability(ValidateVolumeCapabilitiesRequest.AccessMode.SINGLE_NODE_WRITER, ValidateVolumeCapabilitiesRequest.VolumeType.FILE_SYSTEM, ImmutableList.of()), ImmutableMap.of(), ImmutableMap.of());\r\n    if (runtime.getCsiClients().get(volume.getDriverName()) == null) {\r\n        throw new YarnException(\"No csi-adaptor is found that can talk\" + \" to csi-driver \" + volume.getDriverName());\r\n    }\r\n    LOG.info(\"Publish volume on NM, request {}\", publishRequest.toString());\r\n    runtime.getCsiClients().get(volume.getDriverName()).nodePublishVolume(publishRequest);\r\n    String containerMountPath = volume.getMountPoint();\r\n    bindVolumes.put(localMount.getAbsolutePath(), containerMountPath);\r\n    return bindVolumes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\volume\\csi",
  "methodName" : "unpublishVolume",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void unpublishVolume(VolumeMetaData volume) throws YarnException, IOException\n{\r\n    CsiAdaptorProtocol csiClient = runtime.getCsiClients().get(volume.getDriverName());\r\n    if (csiClient == null) {\r\n        throw new YarnException(\"No csi-adaptor is found that can talk\" + \" to csi-driver \" + volume.getDriverName());\r\n    }\r\n    File localMount = getLocalVolumeMountPath(container.getCsiVolumesRootDir(), volume.getVolumeId().toString());\r\n    if (!localMount.exists()) {\r\n        LOG.info(\"Local mount {} no longer exist, skipping cleaning\" + \" up the volume\", localMount.getAbsolutePath());\r\n        return;\r\n    }\r\n    NodeUnpublishVolumeRequest unpublishRequest = NodeUnpublishVolumeRequest.newInstance(volume.getVolumeId().getId(), localMount.getAbsolutePath());\r\n    LOG.info(\"Un-publish volume {}, request {}\", volume.getVolumeId().toString(), unpublishRequest.toString());\r\n    csiClient.nodeUnpublishVolume(unpublishRequest);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\logaggregation\\tracker",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    if (disabled) {\r\n        LOG.warn(\"Log Aggregation is disabled.\" + \"So is the LogAggregationStatusTracker.\");\r\n    } else {\r\n        this.timer.scheduleAtFixedRate(new LogAggregationStatusRoller(), rollingInterval, rollingInterval);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\logaggregation\\tracker",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    this.timer.cancel();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\logaggregation\\tracker",
  "methodName" : "updateLogAggregationStatus",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void updateLogAggregationStatus(ApplicationId appId, LogAggregationStatus logAggregationStatus, long updateTime, String diagnosis, boolean finalized)\n{\r\n    if (disabled) {\r\n        LOG.warn(\"The log aggregation is disabled. No need to update \" + \"the log aggregation status\");\r\n    }\r\n    this.readLocker.lock();\r\n    try {\r\n        AppLogAggregationStatusForRMRecovery tracker = recoveryStatuses.get(appId);\r\n        if (tracker == null) {\r\n            Application application = this.nmContext.getApplications().get(appId);\r\n            if (application == null) {\r\n                LOG.warn(\"The application:\" + appId + \" has already finished,\" + \" and has been removed from NodeManager, we should not \" + \"receive the log aggregation status update for \" + \"this application.\");\r\n                return;\r\n            }\r\n            AppLogAggregationStatusForRMRecovery newTracker = new AppLogAggregationStatusForRMRecovery(logAggregationStatus, diagnosis);\r\n            newTracker.setLastModifiedTime(updateTime);\r\n            newTracker.setFinalized(finalized);\r\n            recoveryStatuses.put(appId, newTracker);\r\n        } else {\r\n            if (tracker.isFinalized()) {\r\n                LOG.warn(\"Ignore the log aggregation status update request \" + \"for the application:\" + appId + \". The cached log aggregation \" + \"status is \" + tracker.getLogAggregationStatus() + \".\");\r\n            } else {\r\n                if (tracker.getLastModifiedTime() > updateTime) {\r\n                    LOG.warn(\"Ignore the log aggregation status update request \" + \"for the application:\" + appId + \". The request log \" + \"aggregation status update is older than the cached \" + \"log aggregation status.\");\r\n                } else {\r\n                    tracker.setLogAggregationStatus(logAggregationStatus);\r\n                    tracker.setDiagnosis(diagnosis);\r\n                    tracker.setLastModifiedTime(updateTime);\r\n                    tracker.setFinalized(finalized);\r\n                    recoveryStatuses.put(appId, tracker);\r\n                }\r\n            }\r\n        }\r\n    } finally {\r\n        this.readLocker.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\logaggregation\\tracker",
  "methodName" : "pullCachedLogAggregationReports",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "List<LogAggregationReport> pullCachedLogAggregationReports()\n{\r\n    List<LogAggregationReport> reports = new ArrayList<>();\r\n    if (disabled) {\r\n        LOG.warn(\"The log aggregation is disabled.\" + \"There is no cached log aggregation status.\");\r\n        return reports;\r\n    }\r\n    this.writeLocker.lock();\r\n    try {\r\n        for (Entry<ApplicationId, AppLogAggregationStatusForRMRecovery> tracker : recoveryStatuses.entrySet()) {\r\n            AppLogAggregationStatusForRMRecovery current = tracker.getValue();\r\n            LogAggregationReport report = LogAggregationReport.newInstance(tracker.getKey(), current.getLogAggregationStatus(), current.getDiagnosis());\r\n            reports.add(report);\r\n        }\r\n        return reports;\r\n    } finally {\r\n        this.writeLocker.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\logaggregation\\tracker",
  "methodName" : "rollLogAggregationStatus",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void rollLogAggregationStatus()\n{\r\n    this.writeLocker.lock();\r\n    try {\r\n        long currentTimeStamp = System.currentTimeMillis();\r\n        LOG.info(\"Rolling over the cached log aggregation status.\");\r\n        Iterator<Entry<ApplicationId, AppLogAggregationStatusForRMRecovery>> it = recoveryStatuses.entrySet().iterator();\r\n        while (it.hasNext()) {\r\n            Entry<ApplicationId, AppLogAggregationStatusForRMRecovery> tracker = it.next();\r\n            if (nmContext.getApplications().get(tracker.getKey()) == null) {\r\n                if (currentTimeStamp - tracker.getValue().getLastModifiedTime() > rollingInterval) {\r\n                    it.remove();\r\n                }\r\n            }\r\n        }\r\n    } finally {\r\n        this.writeLocker.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "setGracePeriod",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DockerStopCommand setGracePeriod(int value)\n{\r\n    super.addCommandArguments(\"time\", Integer.toString(value));\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\task",
  "methodName" : "getLfs",
  "errType" : [ "UnsupportedFileSystemException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FileContext getLfs()\n{\r\n    try {\r\n        return FileContext.getLocalFSFileContext();\r\n    } catch (UnsupportedFileSystemException e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\task",
  "methodName" : "getSubDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Path getSubDir()\n{\r\n    return this.subDir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\task",
  "methodName" : "getBaseDirs",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<Path> getBaseDirs()\n{\r\n    return this.baseDirs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\task",
  "methodName" : "run",
  "errType" : [ "IOException|InterruptedException", "IOException", "IOException" ],
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void run()\n{\r\n    LOG.debug(\"Running DeletionTask : {}\", this);\r\n    boolean error = false;\r\n    if (null == getUser()) {\r\n        if (baseDirs == null || baseDirs.size() == 0) {\r\n            LOG.debug(\"NM deleting absolute path : {}\", subDir);\r\n            try {\r\n                lfs.delete(subDir, true);\r\n            } catch (IOException e) {\r\n                error = true;\r\n                LOG.warn(\"Failed to delete \" + subDir);\r\n            }\r\n        } else {\r\n            for (Path baseDir : baseDirs) {\r\n                Path del = subDir == null ? baseDir : new Path(baseDir, subDir);\r\n                LOG.debug(\"NM deleting path : {}\", del);\r\n                try {\r\n                    lfs.delete(del, true);\r\n                } catch (IOException e) {\r\n                    error = true;\r\n                    LOG.warn(\"Failed to delete \" + subDir);\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        try {\r\n            LOG.debug(\"Deleting path: [{}] as user [{}]\", subDir, getUser());\r\n            if (baseDirs == null || baseDirs.size() == 0) {\r\n                getDeletionService().getContainerExecutor().deleteAsUser(new DeletionAsUserContext.Builder().setUser(getUser()).setSubDir(subDir).build());\r\n            } else {\r\n                getDeletionService().getContainerExecutor().deleteAsUser(new DeletionAsUserContext.Builder().setUser(getUser()).setSubDir(subDir).setBasedirs(baseDirs.toArray(new Path[0])).build());\r\n            }\r\n        } catch (IOException | InterruptedException e) {\r\n            error = true;\r\n            LOG.warn(\"Failed to delete as user \" + getUser(), e);\r\n        }\r\n    }\r\n    if (error) {\r\n        setSuccess(!error);\r\n    }\r\n    deletionTaskFinished();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\task",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder sb = new StringBuilder(\"FileDeletionTask :\");\r\n    sb.append(\"  id : \").append(getTaskId());\r\n    sb.append(\"  user : \").append(getUser());\r\n    sb.append(\"  subDir : \").append(subDir == null ? \"null\" : subDir.toString());\r\n    sb.append(\"  baseDir : \");\r\n    if (baseDirs == null || baseDirs.size() == 0) {\r\n        sb.append(\"null\");\r\n    } else {\r\n        for (Path baseDir : baseDirs) {\r\n            sb.append(baseDir.toString()).append(',');\r\n        }\r\n    }\r\n    return sb.toString().trim();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\task",
  "methodName" : "convertDeletionTaskToProto",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "DeletionServiceDeleteTaskProto convertDeletionTaskToProto()\n{\r\n    DeletionServiceDeleteTaskProto.Builder builder = getBaseDeletionTaskProtoBuilder();\r\n    builder.setTaskType(DeletionTaskType.FILE.name());\r\n    if (getSubDir() != null) {\r\n        builder.setSubdir(getSubDir().toString());\r\n    }\r\n    if (getBaseDirs() != null) {\r\n        for (Path dir : getBaseDirs()) {\r\n            builder.addBasedirs(dir.toString());\r\n        }\r\n    }\r\n    return builder.build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    this.secretManager = new AMRMProxyTokenSecretManager(this.nmContext.getNMStateStore());\r\n    this.secretManager.init(conf);\r\n    if (conf.getBoolean(YarnConfiguration.AMRM_PROXY_HA_ENABLED, YarnConfiguration.DEFAULT_AMRM_PROXY_HA_ENABLED)) {\r\n        this.registry = FederationStateStoreFacade.createInstance(conf, YarnConfiguration.YARN_REGISTRY_CLASS, YarnConfiguration.DEFAULT_YARN_REGISTRY_CLASS, RegistryOperations.class);\r\n        addService(this.registry);\r\n    }\r\n    this.federationFacade = FederationStateStoreFacade.getInstance();\r\n    this.federationEnabled = conf.getBoolean(YarnConfiguration.FEDERATION_ENABLED, YarnConfiguration.DEFAULT_FEDERATION_ENABLED);\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    LOG.info(\"Starting AMRMProxyService\");\r\n    Configuration conf = getConfig();\r\n    YarnRPC rpc = YarnRPC.create(conf);\r\n    UserGroupInformation.setConfiguration(conf);\r\n    this.listenerEndpoint = conf.getSocketAddr(YarnConfiguration.AMRM_PROXY_ADDRESS, YarnConfiguration.DEFAULT_AMRM_PROXY_ADDRESS, YarnConfiguration.DEFAULT_AMRM_PROXY_PORT);\r\n    Configuration serverConf = new Configuration(conf);\r\n    serverConf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION, SaslRpcServer.AuthMethod.TOKEN.toString());\r\n    int numWorkerThreads = serverConf.getInt(YarnConfiguration.AMRM_PROXY_CLIENT_THREAD_COUNT, YarnConfiguration.DEFAULT_AMRM_PROXY_CLIENT_THREAD_COUNT);\r\n    this.secretManager.start();\r\n    this.server = rpc.getServer(ApplicationMasterProtocol.class, this, listenerEndpoint, serverConf, this.secretManager, numWorkerThreads);\r\n    if (conf.getBoolean(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, false)) {\r\n        this.server.refreshServiceAcl(conf, NMPolicyProvider.getInstance());\r\n    }\r\n    this.server.start();\r\n    LOG.info(\"AMRMProxyService listening on address: \" + this.server.getListenerAddress());\r\n    super.serviceStart();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    LOG.info(\"Stopping AMRMProxyService\");\r\n    if (this.server != null) {\r\n        this.server.stop();\r\n    }\r\n    this.secretManager.stop();\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "recover",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 27,
  "sourceCodeText" : "void recover() throws IOException\n{\r\n    LOG.info(\"Recovering AMRMProxyService\");\r\n    RecoveredAMRMProxyState state = this.nmContext.getNMStateStore().loadAMRMProxyState();\r\n    this.secretManager.recover(state);\r\n    LOG.info(\"Recovering {} running applications for AMRMProxy\", state.getAppContexts().size());\r\n    for (Map.Entry<ApplicationAttemptId, Map<String, byte[]>> entry : state.getAppContexts().entrySet()) {\r\n        ApplicationAttemptId attemptId = entry.getKey();\r\n        LOG.info(\"Recovering app attempt {}\", attemptId);\r\n        try {\r\n            String user = null;\r\n            Token<AMRMTokenIdentifier> amrmToken = null;\r\n            for (Map.Entry<String, byte[]> contextEntry : entry.getValue().entrySet()) {\r\n                if (contextEntry.getKey().equals(NMSS_USER_KEY)) {\r\n                    user = new String(contextEntry.getValue(), \"UTF-8\");\r\n                } else if (contextEntry.getKey().equals(NMSS_AMRMTOKEN_KEY)) {\r\n                    amrmToken = new Token<>();\r\n                    amrmToken.decodeFromUrlString(new String(contextEntry.getValue(), \"UTF-8\"));\r\n                    amrmToken.setService(new Text());\r\n                }\r\n            }\r\n            if (amrmToken == null) {\r\n                throw new IOException(\"No amrmToken found for app attempt \" + attemptId);\r\n            }\r\n            if (user == null) {\r\n                throw new IOException(\"No user found for app attempt \" + attemptId);\r\n            }\r\n            Token<AMRMTokenIdentifier> localToken = this.secretManager.createAndGetAMRMToken(attemptId);\r\n            Credentials amCred = null;\r\n            for (Container container : this.nmContext.getContainers().values()) {\r\n                LOG.debug(\"From NM Context container {}\", container.getContainerId());\r\n                if (container.getContainerId().getApplicationAttemptId().equals(attemptId) && container.getContainerTokenIdentifier() != null) {\r\n                    LOG.debug(\"Container type {}\", container.getContainerTokenIdentifier().getContainerType());\r\n                    if (container.getContainerTokenIdentifier().getContainerType() == ContainerType.APPLICATION_MASTER) {\r\n                        LOG.info(\"AM container {} found in context, has credentials: {}\", container.getContainerId(), (container.getCredentials() != null));\r\n                        amCred = container.getCredentials();\r\n                    }\r\n                }\r\n            }\r\n            if (amCred == null) {\r\n                LOG.error(\"No credentials found for AM container of {}. \" + \"Yarn registry access might not work\", attemptId);\r\n            }\r\n            initializePipeline(attemptId, user, amrmToken, localToken, entry.getValue(), true, amCred);\r\n        } catch (Throwable e) {\r\n            LOG.error(\"Exception when recovering \" + attemptId + \", removing it from NMStateStore and move on\", e);\r\n            this.metrics.incrFailedAppRecoveryCount();\r\n            this.nmContext.getNMStateStore().removeAMRMProxyAppContext(attemptId);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "registerApplicationMaster",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "RegisterApplicationMasterResponse registerApplicationMaster(RegisterApplicationMasterRequest request) throws YarnException, IOException\n{\r\n    long startTime = clock.getTime();\r\n    try {\r\n        RequestInterceptorChainWrapper pipeline = authorizeAndGetInterceptorChain();\r\n        LOG.info(\"Registering application master.\" + \" Host:\" + request.getHost() + \" Port:\" + request.getRpcPort() + \" Tracking Url:\" + request.getTrackingUrl() + \" for application \" + pipeline.getApplicationAttemptId());\r\n        RegisterApplicationMasterResponse response = pipeline.getRootInterceptor().registerApplicationMaster(request);\r\n        long endTime = clock.getTime();\r\n        this.metrics.succeededRegisterAMRequests(endTime - startTime);\r\n        LOG.info(\"RegisterAM processing finished in {} ms for application {}\", endTime - startTime, pipeline.getApplicationAttemptId());\r\n        return response;\r\n    } catch (Throwable t) {\r\n        this.metrics.incrFailedRegisterAMRequests();\r\n        throw t;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "finishApplicationMaster",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "FinishApplicationMasterResponse finishApplicationMaster(FinishApplicationMasterRequest request) throws YarnException, IOException\n{\r\n    long startTime = clock.getTime();\r\n    try {\r\n        RequestInterceptorChainWrapper pipeline = authorizeAndGetInterceptorChain();\r\n        LOG.info(\"Finishing application master for {}. Tracking Url: {}\", pipeline.getApplicationAttemptId(), request.getTrackingUrl());\r\n        FinishApplicationMasterResponse response = pipeline.getRootInterceptor().finishApplicationMaster(request);\r\n        long endTime = clock.getTime();\r\n        this.metrics.succeededFinishAMRequests(endTime - startTime);\r\n        LOG.info(\"FinishAM finished with isUnregistered = {} in {} ms for {}\", response.getIsUnregistered(), endTime - startTime, pipeline.getApplicationAttemptId());\r\n        return response;\r\n    } catch (Throwable t) {\r\n        this.metrics.incrFailedFinishAMRequests();\r\n        throw t;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "allocate",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "AllocateResponse allocate(AllocateRequest request) throws YarnException, IOException\n{\r\n    long startTime = clock.getTime();\r\n    try {\r\n        AMRMTokenIdentifier amrmTokenIdentifier = YarnServerSecurityUtils.authorizeRequest();\r\n        RequestInterceptorChainWrapper pipeline = getInterceptorChain(amrmTokenIdentifier);\r\n        AllocateResponse allocateResponse = pipeline.getRootInterceptor().allocate(request);\r\n        updateAMRMTokens(amrmTokenIdentifier, pipeline, allocateResponse);\r\n        long endTime = clock.getTime();\r\n        this.metrics.succeededAllocateRequests(endTime - startTime);\r\n        LOG.info(\"Allocate processing finished in {} ms for application {}\", endTime - startTime, pipeline.getApplicationAttemptId());\r\n        return allocateResponse;\r\n    } catch (Throwable t) {\r\n        this.metrics.incrFailedAllocateRequests();\r\n        throw t;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "processApplicationStartRequest",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void processApplicationStartRequest(StartContainerRequest request) throws IOException, YarnException\n{\r\n    long startTime = clock.getTime();\r\n    try {\r\n        ContainerTokenIdentifier containerTokenIdentifierForKey = BuilderUtils.newContainerTokenIdentifier(request.getContainerToken());\r\n        ApplicationAttemptId appAttemptId = containerTokenIdentifierForKey.getContainerID().getApplicationAttemptId();\r\n        ApplicationId applicationID = appAttemptId.getApplicationId();\r\n        if (!checkIfAppExistsInStateStore(applicationID)) {\r\n            return;\r\n        }\r\n        LOG.info(\"Callback received for initializing request \" + \"processing pipeline for an AM\");\r\n        Credentials credentials = YarnServerSecurityUtils.parseCredentials(request.getContainerLaunchContext());\r\n        Token<AMRMTokenIdentifier> amrmToken = getFirstAMRMToken(credentials.getAllTokens());\r\n        if (amrmToken == null) {\r\n            throw new YarnRuntimeException(\"AMRMToken not found in the start container request for \" + \"application:\" + appAttemptId.toString());\r\n        }\r\n        Token<AMRMTokenIdentifier> localToken = this.secretManager.createAndGetAMRMToken(appAttemptId);\r\n        credentials.addToken(localToken.getService(), localToken);\r\n        DataOutputBuffer dob = new DataOutputBuffer();\r\n        credentials.writeTokenStorageToStream(dob);\r\n        request.getContainerLaunchContext().setTokens(ByteBuffer.wrap(dob.getData(), 0, dob.getLength()));\r\n        initializePipeline(appAttemptId, containerTokenIdentifierForKey.getApplicationSubmitter(), amrmToken, localToken, null, false, credentials);\r\n        long endTime = clock.getTime();\r\n        this.metrics.succeededAppStartRequests(endTime - startTime);\r\n    } catch (Throwable t) {\r\n        this.metrics.incrFailedAppStartRequests();\r\n        throw t;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "initializePipeline",
  "errType" : [ "IOException", "Throwable", "Exception", "IOException" ],
  "containingMethodsNum" : 23,
  "sourceCodeText" : "void initializePipeline(ApplicationAttemptId applicationAttemptId, String user, Token<AMRMTokenIdentifier> amrmToken, Token<AMRMTokenIdentifier> localToken, Map<String, byte[]> recoveredDataMap, boolean isRecovery, Credentials credentials)\n{\r\n    RequestInterceptorChainWrapper chainWrapper = null;\r\n    synchronized (applPipelineMap) {\r\n        if (applPipelineMap.containsKey(applicationAttemptId.getApplicationId())) {\r\n            LOG.warn(\"Request to start an already existing appId was received. \" + \" This can happen if an application failed and a new attempt \" + \"was created on this machine.  ApplicationId: \" + applicationAttemptId.toString());\r\n            RequestInterceptorChainWrapper chainWrapperBackup = this.applPipelineMap.get(applicationAttemptId.getApplicationId());\r\n            if (chainWrapperBackup != null && chainWrapperBackup.getApplicationAttemptId() != null && !chainWrapperBackup.getApplicationAttemptId().equals(applicationAttemptId)) {\r\n                LOG.info(\"Remove the previous pipeline for ApplicationId: \" + applicationAttemptId.toString());\r\n                RequestInterceptorChainWrapper pipeline = applPipelineMap.remove(applicationAttemptId.getApplicationId());\r\n                if (!isRecovery && this.nmContext.getNMStateStore() != null) {\r\n                    try {\r\n                        this.nmContext.getNMStateStore().removeAMRMProxyAppContext(applicationAttemptId);\r\n                    } catch (IOException e) {\r\n                        LOG.error(\"Error removing AMRMProxy application context for \" + applicationAttemptId, e);\r\n                    }\r\n                }\r\n                try {\r\n                    pipeline.getRootInterceptor().shutdown();\r\n                } catch (Throwable ex) {\r\n                    LOG.warn(\"Failed to shutdown the request processing pipeline for app:\" + applicationAttemptId.getApplicationId(), ex);\r\n                }\r\n            } else {\r\n                return;\r\n            }\r\n        }\r\n        chainWrapper = new RequestInterceptorChainWrapper();\r\n        this.applPipelineMap.put(applicationAttemptId.getApplicationId(), chainWrapper);\r\n    }\r\n    LOG.info(\"Initializing request processing pipeline for application. \" + \" ApplicationId:\" + applicationAttemptId + \" for the user: \" + user);\r\n    try {\r\n        RequestInterceptor interceptorChain = this.createRequestInterceptorChain();\r\n        interceptorChain.init(createApplicationMasterContext(this.nmContext, applicationAttemptId, user, amrmToken, localToken, credentials, this.registry));\r\n        if (isRecovery) {\r\n            if (recoveredDataMap == null) {\r\n                throw new YarnRuntimeException(\"null recoveredDataMap recieved for recover\");\r\n            }\r\n            interceptorChain.recover(recoveredDataMap);\r\n        }\r\n        chainWrapper.init(interceptorChain, applicationAttemptId);\r\n        if (!isRecovery && this.nmContext.getNMStateStore() != null) {\r\n            try {\r\n                this.nmContext.getNMStateStore().storeAMRMProxyAppContextEntry(applicationAttemptId, NMSS_USER_KEY, user.getBytes(\"UTF-8\"));\r\n                this.nmContext.getNMStateStore().storeAMRMProxyAppContextEntry(applicationAttemptId, NMSS_AMRMTOKEN_KEY, amrmToken.encodeToUrlString().getBytes(\"UTF-8\"));\r\n            } catch (IOException e) {\r\n                LOG.error(\"Error storing AMRMProxy application context entry for \" + applicationAttemptId, e);\r\n            }\r\n        }\r\n    } catch (Exception e) {\r\n        this.applPipelineMap.remove(applicationAttemptId.getApplicationId());\r\n        throw e;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 4,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "stopApplication",
  "errType" : [ "Throwable", "IOException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void stopApplication(ApplicationId applicationId)\n{\r\n    Preconditions.checkArgument(applicationId != null, \"applicationId is null\");\r\n    RequestInterceptorChainWrapper pipeline = this.applPipelineMap.remove(applicationId);\r\n    if (pipeline == null) {\r\n        LOG.info(\"No interceptor pipeline for application {},\" + \" likely because its AM is not run in this node.\", applicationId);\r\n    } else {\r\n        this.secretManager.applicationMasterFinished(pipeline.getApplicationAttemptId());\r\n        LOG.info(\"Stopping the request processing pipeline for application: \" + applicationId);\r\n        try {\r\n            pipeline.getRootInterceptor().shutdown();\r\n        } catch (Throwable ex) {\r\n            LOG.warn(\"Failed to shutdown the request processing pipeline for app:\" + applicationId, ex);\r\n        }\r\n        if (this.nmContext.getNMStateStore() != null) {\r\n            try {\r\n                this.nmContext.getNMStateStore().removeAMRMProxyAppContext(pipeline.getApplicationAttemptId());\r\n            } catch (IOException e) {\r\n                LOG.error(\"Error removing AMRMProxy application context for \" + applicationId, e);\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "updateAMRMTokens",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void updateAMRMTokens(AMRMTokenIdentifier amrmTokenIdentifier, RequestInterceptorChainWrapper pipeline, AllocateResponse allocateResponse)\n{\r\n    AMRMProxyApplicationContextImpl context = (AMRMProxyApplicationContextImpl) pipeline.getRootInterceptor().getApplicationContext();\r\n    if (allocateResponse.getAMRMToken() != null) {\r\n        LOG.info(\"RM rolled master-key for amrm-tokens\");\r\n        org.apache.hadoop.yarn.api.records.Token token = allocateResponse.getAMRMToken();\r\n        allocateResponse.setAMRMToken(null);\r\n        org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> newToken = ConverterUtils.convertFromYarn(token, (Text) null);\r\n        if (context.setAMRMToken(newToken) && this.nmContext.getNMStateStore() != null) {\r\n            try {\r\n                this.nmContext.getNMStateStore().storeAMRMProxyAppContextEntry(context.getApplicationAttemptId(), NMSS_AMRMTOKEN_KEY, newToken.encodeToUrlString().getBytes(\"UTF-8\"));\r\n            } catch (IOException e) {\r\n                LOG.error(\"Error storing AMRMProxy application context entry for \" + context.getApplicationAttemptId(), e);\r\n            }\r\n        }\r\n    }\r\n    MasterKeyData nextMasterKey = this.secretManager.getNextMasterKeyData();\r\n    if (nextMasterKey != null && nextMasterKey.getMasterKey().getKeyId() != amrmTokenIdentifier.getKeyId()) {\r\n        Token<AMRMTokenIdentifier> localToken = context.getLocalAMRMToken();\r\n        if (nextMasterKey.getMasterKey().getKeyId() != context.getLocalAMRMTokenKeyId()) {\r\n            LOG.info(\"The local AMRMToken has been rolled-over.\" + \" Send new local AMRMToken back to application: \" + pipeline.getApplicationId());\r\n            localToken = this.secretManager.createAndGetAMRMToken(pipeline.getApplicationAttemptId());\r\n            context.setLocalAMRMToken(localToken);\r\n        }\r\n        allocateResponse.setAMRMToken(org.apache.hadoop.yarn.api.records.Token.newInstance(localToken.getIdentifier(), localToken.getKind().toString(), localToken.getPassword(), localToken.getService().toString()));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "createApplicationMasterContext",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AMRMProxyApplicationContext createApplicationMasterContext(Context context, ApplicationAttemptId applicationAttemptId, String user, Token<AMRMTokenIdentifier> amrmToken, Token<AMRMTokenIdentifier> localToken, Credentials credentials, RegistryOperations registryImpl)\n{\r\n    AMRMProxyApplicationContextImpl appContext = new AMRMProxyApplicationContextImpl(context, getConfig(), applicationAttemptId, user, amrmToken, localToken, credentials, registryImpl);\r\n    return appContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getPipelines",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<ApplicationId, RequestInterceptorChainWrapper> getPipelines()\n{\r\n    return this.applPipelineMap;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "createRequestInterceptorChain",
  "errType" : [ "ClassNotFoundException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "RequestInterceptor createRequestInterceptorChain()\n{\r\n    Configuration conf = getConfig();\r\n    List<String> interceptorClassNames = getInterceptorClassNames(conf);\r\n    RequestInterceptor pipeline = null;\r\n    RequestInterceptor current = null;\r\n    for (String interceptorClassName : interceptorClassNames) {\r\n        try {\r\n            Class<?> interceptorClass = conf.getClassByName(interceptorClassName);\r\n            if (RequestInterceptor.class.isAssignableFrom(interceptorClass)) {\r\n                RequestInterceptor interceptorInstance = (RequestInterceptor) ReflectionUtils.newInstance(interceptorClass, conf);\r\n                if (pipeline == null) {\r\n                    pipeline = interceptorInstance;\r\n                    current = interceptorInstance;\r\n                    continue;\r\n                } else {\r\n                    current.setNextInterceptor(interceptorInstance);\r\n                    current = interceptorInstance;\r\n                }\r\n            } else {\r\n                throw new YarnRuntimeException(\"Class: \" + interceptorClassName + \" not instance of \" + RequestInterceptor.class.getCanonicalName());\r\n            }\r\n        } catch (ClassNotFoundException e) {\r\n            throw new YarnRuntimeException(\"Could not instantiate ApplicationMasterRequestInterceptor: \" + interceptorClassName, e);\r\n        }\r\n    }\r\n    if (pipeline == null) {\r\n        throw new YarnRuntimeException(\"RequestInterceptor pipeline is not configured in the system\");\r\n    }\r\n    return pipeline;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getInterceptorClassNames",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "List<String> getInterceptorClassNames(Configuration conf)\n{\r\n    String configuredInterceptorClassNames = conf.get(YarnConfiguration.AMRM_PROXY_INTERCEPTOR_CLASS_PIPELINE, YarnConfiguration.DEFAULT_AMRM_PROXY_INTERCEPTOR_CLASS_PIPELINE);\r\n    List<String> interceptorClassNames = new ArrayList<String>();\r\n    Collection<String> tempList = StringUtils.getStringCollection(configuredInterceptorClassNames);\r\n    for (String item : tempList) {\r\n        interceptorClassNames.add(item.trim());\r\n    }\r\n    if (this.nmContext.isDistributedSchedulingEnabled()) {\r\n        interceptorClassNames.add(0, DistributedScheduler.class.getName());\r\n    }\r\n    return interceptorClassNames;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "authorizeAndGetInterceptorChain",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RequestInterceptorChainWrapper authorizeAndGetInterceptorChain() throws YarnException\n{\r\n    AMRMTokenIdentifier tokenIdentifier = YarnServerSecurityUtils.authorizeRequest();\r\n    return getInterceptorChain(tokenIdentifier);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getInterceptorChain",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "RequestInterceptorChainWrapper getInterceptorChain(AMRMTokenIdentifier tokenIdentifier) throws YarnException\n{\r\n    ApplicationAttemptId appAttemptId = tokenIdentifier.getApplicationAttemptId();\r\n    synchronized (this.applPipelineMap) {\r\n        if (!this.applPipelineMap.containsKey(appAttemptId.getApplicationId())) {\r\n            throw new YarnException(\"The AM request processing pipeline is not initialized for app: \" + appAttemptId.getApplicationId().toString());\r\n        }\r\n        return this.applPipelineMap.get(appAttemptId.getApplicationId());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "checkIfAppExistsInStateStore",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean checkIfAppExistsInStateStore(ApplicationId applicationID)\n{\r\n    if (!federationEnabled) {\r\n        return true;\r\n    }\r\n    try {\r\n        this.federationFacade.getApplicationHomeSubCluster(applicationID);\r\n    } catch (YarnException ex) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getFirstAMRMToken",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Token<AMRMTokenIdentifier> getFirstAMRMToken(Collection<Token<? extends TokenIdentifier>> allTokens)\n{\r\n    Iterator<Token<? extends TokenIdentifier>> iter = allTokens.iterator();\r\n    while (iter.hasNext()) {\r\n        Token<? extends TokenIdentifier> token = iter.next();\r\n        if (token.getKind().equals(AMRMTokenIdentifier.KIND_NAME)) {\r\n            return (Token<AMRMTokenIdentifier>) token;\r\n        }\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getBindAddress",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "InetSocketAddress getBindAddress()\n{\r\n    return this.listenerEndpoint;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getSecretManager",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AMRMProxyTokenSecretManager getSecretManager()\n{\r\n    return this.secretManager;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "getGpus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<PerGpuDeviceInformation> getGpus()\n{\r\n    return gpus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "setGpus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setGpus(List<PerGpuDeviceInformation> gpus)\n{\r\n    this.gpus = gpus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "getDriverVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDriverVersion()\n{\r\n    return driverVersion;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "setDriverVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDriverVersion(String driverVersion)\n{\r\n    this.driverVersion = driverVersion;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"=== GPUs in the system ===\\n\").append(\"\\tDriver Version:\").append(getDriverVersion()).append(\"\\n\");\r\n    if (gpus != null) {\r\n        for (PerGpuDeviceInformation gpu : gpus) {\r\n            sb.append(\"\\t\").append(gpu.toString()).append(\"\\n\");\r\n        }\r\n    }\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Container getContainer()\n{\r\n    return this.container;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUser()\n{\r\n    return this.user;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerId getContainerId()\n{\r\n    return this.containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "name",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AuxServiceRecord name(String n)\n{\r\n    this.name = n;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "getName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getName()\n{\r\n    return name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "setName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setName(String name)\n{\r\n    this.name = name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "getVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getVersion()\n{\r\n    return version;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "setVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setVersion(String version)\n{\r\n    this.version = version;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "version",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AuxServiceRecord version(String v)\n{\r\n    this.version = v;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "getDescription",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDescription()\n{\r\n    return description;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "setDescription",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDescription(String description)\n{\r\n    this.description = description;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "description",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AuxServiceRecord description(String d)\n{\r\n    this.description = d;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "launchTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AuxServiceRecord launchTime(Date time)\n{\r\n    this.launchTime = time == null ? null : (Date) time.clone();\r\n    return this;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "getLaunchTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Date getLaunchTime()\n{\r\n    return launchTime == null ? null : (Date) launchTime.clone();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "setLaunchTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setLaunchTime(Date time)\n{\r\n    this.launchTime = time == null ? null : (Date) time.clone();\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "configuration",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AuxServiceRecord configuration(AuxServiceConfiguration conf)\n{\r\n    this.configuration = conf;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "getConfiguration",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AuxServiceConfiguration getConfiguration()\n{\r\n    return configuration;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "setConfiguration",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setConfiguration(AuxServiceConfiguration conf)\n{\r\n    this.configuration = conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean equals(java.lang.Object o)\n{\r\n    if (this == o) {\r\n        return true;\r\n    }\r\n    if (o == null || getClass() != o.getClass()) {\r\n        return false;\r\n    }\r\n    AuxServiceRecord service = (AuxServiceRecord) o;\r\n    return Objects.equals(this.name, service.name) && Objects.equals(this.version, service.version);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return Objects.hash(name, version);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"class Service {\\n\");\r\n    sb.append(\"    name: \").append(toIndentedString(name)).append(\"\\n\");\r\n    sb.append(\"    version: \").append(toIndentedString(version)).append(\"\\n\");\r\n    sb.append(\"    description: \").append(toIndentedString(description)).append(\"\\n\");\r\n    sb.append(\"    configuration: \").append(toIndentedString(configuration)).append(\"\\n\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "toIndentedString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toIndentedString(java.lang.Object o)\n{\r\n    if (o == null) {\r\n        return \"null\";\r\n    }\r\n    return o.toString().replace(\"\\n\", \"\\n    \");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "getIntervalTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getIntervalTime()\n{\r\n    return intervalTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "setIntervalTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setIntervalTime(long intervalMS)\n{\r\n    this.intervalTime = intervalMS;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    ReadWriteLock readWriteLock = new ReentrantReadWriteLock();\r\n    readLock = readWriteLock.readLock();\r\n    writeLock = readWriteLock.writeLock();\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    timerTask = createTimerTask();\r\n    timerTask.run();\r\n    long taskInterval = getIntervalTime();\r\n    if (taskInterval != DISABLE_NODE_DESCRIPTORS_PROVIDER_FETCH_TIMER) {\r\n        scheduler = new Timer(\"DistributedNodeDescriptorsRunner-Timer\", true);\r\n        scheduler.schedule(timerTask, taskInterval, taskInterval);\r\n    }\r\n    super.serviceStart();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    if (scheduler != null) {\r\n        scheduler.cancel();\r\n    }\r\n    cleanUp();\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "cleanUp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void cleanUp() throws Exception",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "getDescriptors",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Set<T> getDescriptors()\n{\r\n    readLock.lock();\r\n    try {\r\n        return this.nodeDescriptors;\r\n    } finally {\r\n        readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "setDescriptors",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setDescriptors(Set<T> descriptorsSet)\n{\r\n    writeLock.lock();\r\n    try {\r\n        this.nodeDescriptors = descriptorsSet;\r\n    } finally {\r\n        writeLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "verifyConfiguredScript",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void verifyConfiguredScript(String scriptPath) throws IOException\n{\r\n    boolean invalidConfiguration;\r\n    if (scriptPath == null || scriptPath.trim().isEmpty()) {\r\n        invalidConfiguration = true;\r\n    } else {\r\n        File f = new File(scriptPath);\r\n        invalidConfiguration = !f.exists() || !FileUtil.canExecute(f);\r\n    }\r\n    if (invalidConfiguration) {\r\n        throw new IOException(\"Node descriptors provider script \\\"\" + scriptPath + \"\\\" is not configured properly. Please check whether\" + \" the script path exists, owner and the access rights\" + \" are suitable for NM process to execute it\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "convertToNodeLabelSet",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<NodeLabel> convertToNodeLabelSet(String partitionNodeLabel)\n{\r\n    if (null == partitionNodeLabel) {\r\n        return null;\r\n    }\r\n    Set<NodeLabel> labels = new HashSet<NodeLabel>();\r\n    labels.add(NodeLabel.newInstance(partitionNodeLabel));\r\n    return labels;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "getTimerTask",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimerTask getTimerTask()\n{\r\n    return timerTask;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "getScheduler",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Timer getScheduler()\n{\r\n    return this.scheduler;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "createTimerTask",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimerTask createTimerTask()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LocalResourceRequest getResource()\n{\r\n    return rsrc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\loghandler\\event",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerId getContainerId()\n{\r\n    return this.containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\loghandler\\event",
  "methodName" : "getContainerType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerType getContainerType()\n{\r\n    return containerType;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\loghandler\\event",
  "methodName" : "getExitCode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getExitCode()\n{\r\n    return this.exitCode;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "render",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void render(Block html)\n{\r\n    boolean addErrorsAndWarningsLink = false;\r\n    if (isLog4jLogger(NMErrorsAndWarningsPage.class)) {\r\n        Log4jWarningErrorMetricsAppender appender = Log4jWarningErrorMetricsAppender.findAppender();\r\n        if (appender != null) {\r\n            addErrorsAndWarningsLink = true;\r\n        }\r\n    }\r\n    String RMWebAppURL = WebAppUtils.getResolvedRMWebAppURLWithScheme(this.conf);\r\n    Hamlet.DIV<Hamlet> ul = html.div(\"#nav\").h3().__(\"ResourceManager\").__().ul().li().a(RMWebAppURL, \"RM Home\").__().__().h3().__(\"NodeManager\").__().ul().li().a(url(\"node\"), \"Node Information\").__().li().a(url(\"allApplications\"), \"List of Applications\").__().li().a(url(\"allContainers\"), \"List of Containers\").__().__();\r\n    Hamlet.UL<Hamlet.DIV<Hamlet>> tools = WebPageUtils.appendToolSection(ul, conf);\r\n    if (tools == null) {\r\n        return;\r\n    }\r\n    if (addErrorsAndWarningsLink) {\r\n        tools.li().a(url(\"errors-and-warnings\"), \"Errors/Warnings\").__();\r\n    }\r\n    tools.__().__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "getCommand",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SignalContainerCommand getCommand()\n{\r\n    return command;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\deviceplugin",
  "methodName" : "getContainerRuntime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getContainerRuntime()\n{\r\n    return containerRuntime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\deviceplugin",
  "methodName" : "getEnvs",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, String> getEnvs()\n{\r\n    return envs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\deviceplugin",
  "methodName" : "getVolumeMounts",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Set<MountVolumeSpec> getVolumeMounts()\n{\r\n    return volumeMounts;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\deviceplugin",
  "methodName" : "getDeviceMounts",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Set<MountDeviceSpec> getDeviceMounts()\n{\r\n    return deviceMounts;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\deviceplugin",
  "methodName" : "getVolumeSpecs",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Set<VolumeSpec> getVolumeSpecs()\n{\r\n    return volumeSpecs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void init(Context nmContext, Dispatcher nmDispatcher, ContainerExecutor containerExec, LocalDirsHandlerService nmDirsHandler, ContainerManagerImpl nmContainerManager)\n{\r\n    this.exec = containerExec;\r\n    this.context = nmContext;\r\n    this.dispatcher = nmDispatcher;\r\n    this.dirsHandler = nmDirsHandler;\r\n    this.containerManager = nmContainerManager;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "serviceInit",
  "errType" : [ "UnsupportedFileSystemException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    try {\r\n        FileContext.getLocalFSFileContext(conf);\r\n    } catch (UnsupportedFileSystemException e) {\r\n        throw new YarnRuntimeException(\"Failed to start ContainersLauncher\", e);\r\n    }\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    containerLauncher.shutdownNow();\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "handle",
  "errType" : [ "IOException", "Exception", "Exception" ],
  "containingMethodsNum" : 34,
  "sourceCodeText" : "void handle(ContainersLauncherEvent event)\n{\r\n    Container container = event.getContainer();\r\n    ContainerId containerId = container.getContainerId();\r\n    switch(event.getType()) {\r\n        case LAUNCH_CONTAINER:\r\n            Application app = context.getApplications().get(containerId.getApplicationAttemptId().getApplicationId());\r\n            ContainerLaunch launch = new ContainerLaunch(context, getConfig(), dispatcher, exec, app, event.getContainer(), dirsHandler, containerManager);\r\n            containerLauncher.submit(launch);\r\n            running.put(containerId, launch);\r\n            break;\r\n        case RELAUNCH_CONTAINER:\r\n            app = context.getApplications().get(containerId.getApplicationAttemptId().getApplicationId());\r\n            ContainerRelaunch relaunch = new ContainerRelaunch(context, getConfig(), dispatcher, exec, app, event.getContainer(), dirsHandler, containerManager);\r\n            containerLauncher.submit(relaunch);\r\n            running.put(containerId, relaunch);\r\n            break;\r\n        case RECOVER_CONTAINER:\r\n            app = context.getApplications().get(containerId.getApplicationAttemptId().getApplicationId());\r\n            launch = new RecoveredContainerLaunch(context, getConfig(), dispatcher, exec, app, event.getContainer(), dirsHandler, containerManager);\r\n            containerLauncher.submit(launch);\r\n            running.put(containerId, launch);\r\n            break;\r\n        case RECOVER_PAUSED_CONTAINER:\r\n            app = context.getApplications().get(containerId.getApplicationAttemptId().getApplicationId());\r\n            launch = new RecoverPausedContainerLaunch(context, getConfig(), dispatcher, exec, app, event.getContainer(), dirsHandler, containerManager);\r\n            containerLauncher.submit(launch);\r\n            break;\r\n        case CLEANUP_CONTAINER:\r\n            cleanup(event, containerId, true);\r\n            break;\r\n        case CLEANUP_CONTAINER_FOR_REINIT:\r\n            cleanup(event, containerId, false);\r\n            break;\r\n        case SIGNAL_CONTAINER:\r\n            SignalContainersLauncherEvent signalEvent = (SignalContainersLauncherEvent) event;\r\n            ContainerLaunch runningContainer = running.get(containerId);\r\n            if (runningContainer == null) {\r\n                LOG.info(\"Container \" + containerId + \" not running, nothing to signal.\");\r\n                return;\r\n            }\r\n            try {\r\n                runningContainer.signalContainer(signalEvent.getCommand());\r\n            } catch (IOException e) {\r\n                LOG.warn(\"Got exception while signaling container \" + containerId + \" with command \" + signalEvent.getCommand());\r\n            }\r\n            break;\r\n        case PAUSE_CONTAINER:\r\n            ContainerLaunch launchedContainer = running.get(containerId);\r\n            if (launchedContainer == null) {\r\n                return;\r\n            }\r\n            try {\r\n                launchedContainer.pauseContainer();\r\n            } catch (Exception e) {\r\n                LOG.info(\"Got exception while pausing container: \" + StringUtils.stringifyException(e));\r\n            }\r\n            break;\r\n        case RESUME_CONTAINER:\r\n            ContainerLaunch launchCont = running.get(containerId);\r\n            if (launchCont == null) {\r\n                return;\r\n            }\r\n            try {\r\n                launchCont.resumeContainer();\r\n            } catch (Exception e) {\r\n                LOG.info(\"Got exception while resuming container: \" + StringUtils.stringifyException(e));\r\n            }\r\n            break;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 3,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "cleanup",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void cleanup(ContainersLauncherEvent event, ContainerId containerId, boolean async)\n{\r\n    ContainerLaunch existingLaunch = running.remove(containerId);\r\n    if (existingLaunch == null) {\r\n        dispatcher.getEventHandler().handle(new ContainerExitEvent(containerId, ContainerEventType.CONTAINER_KILLED_ON_REQUEST, Shell.WINDOWS ? ContainerExecutor.ExitCode.FORCE_KILLED.getExitCode() : ContainerExecutor.ExitCode.TERMINATED.getExitCode(), \"Container terminated before launch.\"));\r\n        return;\r\n    }\r\n    ContainerCleanup cleanup = new ContainerCleanup(context, getConfig(), dispatcher, exec, event.getContainer(), existingLaunch);\r\n    if (async) {\r\n        containerLauncher.submit(cleanup);\r\n    } else {\r\n        cleanup.run();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Container getContainer()\n{\r\n    return this.container;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getLocalizedResources",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<Path, List<String>> getLocalizedResources()\n{\r\n    if (this.localizedResources != null) {\r\n        return Collections.unmodifiableMap(this.localizedResources);\r\n    } else {\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUser()\n{\r\n    return this.user;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getContainerLocalDirs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<String> getContainerLocalDirs()\n{\r\n    return Collections.unmodifiableList(this.containerLocalDirs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getCommands",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<String> getCommands()\n{\r\n    return this.commands;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "setConf",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void setConf(Configuration conf)\n{\r\n    super.setConf(conf);\r\n    resourcesHandler = getResourcesHandler(conf);\r\n    containerSchedPriorityIsSet = false;\r\n    if (conf.get(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY) != null) {\r\n        containerSchedPriorityIsSet = true;\r\n        containerSchedPriorityAdjustment = conf.getInt(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY, YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY);\r\n    }\r\n    nonsecureLocalUser = conf.get(YarnConfiguration.NM_NONSECURE_MODE_LOCAL_USER_KEY, YarnConfiguration.DEFAULT_NM_NONSECURE_MODE_LOCAL_USER);\r\n    nonsecureLocalUserPattern = Pattern.compile(conf.get(YarnConfiguration.NM_NONSECURE_MODE_USER_PATTERN_KEY, YarnConfiguration.DEFAULT_NM_NONSECURE_MODE_USER_PATTERN));\r\n    containerLimitUsers = conf.getBoolean(YarnConfiguration.NM_NONSECURE_MODE_LIMIT_USERS, YarnConfiguration.DEFAULT_NM_NONSECURE_MODE_LIMIT_USERS);\r\n    if (!containerLimitUsers) {\r\n        LOG.warn(\"{}: impersonation without authentication enabled\", YarnConfiguration.NM_NONSECURE_MODE_LIMIT_USERS);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getResourcesHandler",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "LCEResourcesHandler getResourcesHandler(Configuration conf)\n{\r\n    LCEResourcesHandler handler = ReflectionUtils.newInstance(conf.getClass(YarnConfiguration.NM_LINUX_CONTAINER_RESOURCES_HANDLER, DefaultLCEResourcesHandler.class, LCEResourcesHandler.class), conf);\r\n    if (handler instanceof CgroupsLCEResourcesHandler) {\r\n        handler = ReflectionUtils.newInstance(DefaultLCEResourcesHandler.class, conf);\r\n    }\r\n    handler.setConf(conf);\r\n    return handler;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "verifyUsernamePattern",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void verifyUsernamePattern(String user)\n{\r\n    if (!UserGroupInformation.isSecurityEnabled() && !nonsecureLocalUserPattern.matcher(user).matches()) {\r\n        throw new IllegalArgumentException(\"Invalid user name '\" + user + \"',\" + \" it must match '\" + nonsecureLocalUserPattern.pattern() + \"'\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getRunAsUser",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getRunAsUser(String user)\n{\r\n    if (UserGroupInformation.isSecurityEnabled() || !containerLimitUsers) {\r\n        return user;\r\n    } else {\r\n        return nonsecureLocalUser;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getContainerExecutorExecutablePath",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String getContainerExecutorExecutablePath(Configuration conf)\n{\r\n    String yarnHomeEnvVar = System.getenv(ApplicationConstants.Environment.HADOOP_YARN_HOME.key());\r\n    File hadoopBin = new File(yarnHomeEnvVar, \"bin\");\r\n    String defaultPath = new File(hadoopBin, \"container-executor\").getAbsolutePath();\r\n    return null == conf ? defaultPath : conf.get(YarnConfiguration.NM_LINUX_CONTAINER_EXECUTOR_PATH, defaultPath);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "addSchedPriorityCommand",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addSchedPriorityCommand(List<String> command)\n{\r\n    if (containerSchedPriorityIsSet) {\r\n        command.addAll(Arrays.asList(\"nice\", \"-n\", Integer.toString(containerSchedPriorityAdjustment)));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getPrivilegedOperationExecutor",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "PrivilegedOperationExecutor getPrivilegedOperationExecutor()\n{\r\n    return PrivilegedOperationExecutor.getInstance(getConf());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "init",
  "errType" : [ "PrivilegedOperationException", "ResourceHandlerException", "ContainerExecutionException" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void init(Context context) throws IOException\n{\r\n    Configuration conf = super.getConf();\r\n    this.nmContext = context;\r\n    try {\r\n        PrivilegedOperation checkSetupOp = new PrivilegedOperation(PrivilegedOperation.OperationType.CHECK_SETUP);\r\n        PrivilegedOperationExecutor privilegedOperationExecutor = getPrivilegedOperationExecutor();\r\n        privilegedOperationExecutor.executePrivilegedOperation(checkSetupOp, false);\r\n    } catch (PrivilegedOperationException e) {\r\n        int exitCode = e.getExitCode();\r\n        LOG.warn(\"Exit code from container executor initialization is : {}\", exitCode, e);\r\n        throw new IOException(\"Linux container executor not configured properly\" + \" (error=\" + exitCode + \")\", e);\r\n    }\r\n    try {\r\n        resourceHandlerChain = ResourceHandlerModule.getConfiguredResourceHandlerChain(conf, nmContext);\r\n        LOG.debug(\"Resource handler chain enabled = {}\", (resourceHandlerChain != null));\r\n        if (resourceHandlerChain != null) {\r\n            LOG.debug(\"Bootstrapping resource handler chain: {}\", resourceHandlerChain);\r\n            resourceHandlerChain.bootstrap(conf);\r\n        }\r\n    } catch (ResourceHandlerException e) {\r\n        LOG.error(\"Failed to bootstrap configured resource subsystems! \", e);\r\n        throw new IOException(\"Failed to bootstrap configured resource subsystems!\");\r\n    }\r\n    try {\r\n        if (linuxContainerRuntime == null) {\r\n            LinuxContainerRuntime runtime = new DelegatingLinuxContainerRuntime();\r\n            runtime.initialize(conf, nmContext);\r\n            this.linuxContainerRuntime = runtime;\r\n        }\r\n    } catch (ContainerExecutionException e) {\r\n        LOG.error(\"Failed to initialize linux container runtime(s)!\", e);\r\n        throw new IOException(\"Failed to initialize linux container runtime(s)!\");\r\n    }\r\n    resourcesHandler.init(this);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "start",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void start()\n{\r\n    super.start();\r\n    linuxContainerRuntime.start();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "stop",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void stop()\n{\r\n    super.stop();\r\n    linuxContainerRuntime.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "startLocalizer",
  "errType" : [ "PrivilegedOperationException" ],
  "containingMethodsNum" : 29,
  "sourceCodeText" : "void startLocalizer(LocalizerStartContext ctx) throws IOException, InterruptedException\n{\r\n    Path nmPrivateContainerTokensPath = ctx.getNmPrivateContainerTokens();\r\n    InetSocketAddress nmAddr = ctx.getNmAddr();\r\n    String user = ctx.getUser();\r\n    String appId = ctx.getAppId();\r\n    String locId = ctx.getLocId();\r\n    LocalDirsHandlerService dirsHandler = ctx.getDirsHandler();\r\n    List<String> localDirs = dirsHandler.getLocalDirs();\r\n    List<String> logDirs = dirsHandler.getLogDirs();\r\n    verifyUsernamePattern(user);\r\n    String runAsUser = getRunAsUser(user);\r\n    PrivilegedOperation initializeContainerOp = new PrivilegedOperation(PrivilegedOperation.OperationType.INITIALIZE_CONTAINER);\r\n    List<String> prefixCommands = new ArrayList<>();\r\n    addSchedPriorityCommand(prefixCommands);\r\n    initializeContainerOp.appendArgs(runAsUser, user, Integer.toString(PrivilegedOperation.RunAsUserCommand.INITIALIZE_CONTAINER.getValue()), appId, locId, nmPrivateContainerTokensPath.toUri().getPath().toString(), StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR, localDirs), StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR, logDirs));\r\n    File jvm = new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\r\n    initializeContainerOp.appendArgs(jvm.toString());\r\n    initializeContainerOp.appendArgs(\"-classpath\");\r\n    initializeContainerOp.appendArgs(System.getProperty(\"java.class.path\"));\r\n    String javaLibPath = System.getProperty(\"java.library.path\");\r\n    if (javaLibPath != null) {\r\n        initializeContainerOp.appendArgs(\"-Djava.library.path=\" + javaLibPath);\r\n    }\r\n    initializeContainerOp.appendArgs(ContainerLocalizer.getJavaOpts(getConf()));\r\n    List<String> localizerArgs = new ArrayList<>();\r\n    buildMainArgs(localizerArgs, user, appId, locId, nmAddr, nmPrivateContainerTokensPath.getName(), localDirs);\r\n    Path containerLogDir = getContainerLogDir(dirsHandler, appId, locId);\r\n    localizerArgs = replaceWithContainerLogDir(localizerArgs, containerLogDir);\r\n    initializeContainerOp.appendArgs(localizerArgs);\r\n    try {\r\n        Configuration conf = super.getConf();\r\n        PrivilegedOperationExecutor privilegedOperationExecutor = getPrivilegedOperationExecutor();\r\n        privilegedOperationExecutor.executePrivilegedOperation(prefixCommands, initializeContainerOp, null, null, false, true);\r\n    } catch (PrivilegedOperationException e) {\r\n        int exitCode = e.getExitCode();\r\n        LOG.warn(\"Exit code from container {} startLocalizer is : {}\", locId, exitCode, e);\r\n        throw new IOException(\"Application \" + appId + \" initialization failed\" + \" (exitCode=\" + exitCode + \") with output: \" + e.getOutput(), e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "replaceWithContainerLogDir",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<String> replaceWithContainerLogDir(List<String> commands, Path containerLogDir)\n{\r\n    List<String> newCmds = new ArrayList<>(commands.size());\r\n    for (String item : commands) {\r\n        newCmds.add(item.replace(ApplicationConstants.LOG_DIR_EXPANSION_VAR, containerLogDir.toString()));\r\n    }\r\n    return newCmds;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getContainerLogDir",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path getContainerLogDir(LocalDirsHandlerService dirsHandler, String appId, String containerId) throws IOException\n{\r\n    String relativeContainerLogDir = ContainerLaunch.getRelativeContainerLogDir(appId, containerId);\r\n    return dirsHandler.getLogPathForWrite(relativeContainerLogDir, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "buildMainArgs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void buildMainArgs(List<String> command, String user, String appId, String locId, InetSocketAddress nmAddr, String tokenFileName, List<String> localDirs)\n{\r\n    ContainerLocalizer.buildMainArgs(command, user, appId, locId, nmAddr, tokenFileName, localDirs, super.getConf());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "prepareContainer",
  "errType" : [ "ContainerExecutionException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void prepareContainer(ContainerPrepareContext ctx) throws IOException\n{\r\n    ContainerRuntimeContext.Builder builder = new ContainerRuntimeContext.Builder(ctx.getContainer());\r\n    builder.setExecutionAttribute(LOCALIZED_RESOURCES, ctx.getLocalizedResources()).setExecutionAttribute(USER, ctx.getUser()).setExecutionAttribute(CONTAINER_LOCAL_DIRS, ctx.getContainerLocalDirs()).setExecutionAttribute(CONTAINER_RUN_CMDS, ctx.getCommands()).setExecutionAttribute(CONTAINER_ID_STR, ctx.getContainer().getContainerId().toString());\r\n    try {\r\n        linuxContainerRuntime.prepareContainer(builder.build());\r\n    } catch (ContainerExecutionException e) {\r\n        throw new IOException(\"Unable to prepare container: \", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "launchContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int launchContainer(ContainerStartContext ctx) throws IOException, ConfigurationException\n{\r\n    return handleLaunchForLaunchType(ctx, ApplicationConstants.ContainerLaunchType.LAUNCH);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "relaunchContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int relaunchContainer(ContainerStartContext ctx) throws IOException, ConfigurationException\n{\r\n    return handleLaunchForLaunchType(ctx, ApplicationConstants.ContainerLaunchType.RELAUNCH);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "handleLaunchForLaunchType",
  "errType" : [ "ResourceHandlerException", "PrivilegedOperationException", "ContainerExecutionException" ],
  "containingMethodsNum" : 28,
  "sourceCodeText" : "int handleLaunchForLaunchType(ContainerStartContext ctx, ApplicationConstants.ContainerLaunchType type) throws IOException, ConfigurationException\n{\r\n    Container container = ctx.getContainer();\r\n    String user = ctx.getUser();\r\n    verifyUsernamePattern(user);\r\n    ContainerId containerId = container.getContainerId();\r\n    resourcesHandler.preExecute(containerId, container.getResource());\r\n    String resourcesOptions = resourcesHandler.getResourcesOption(containerId);\r\n    String tcCommandFile = null;\r\n    List<String> numaArgs = null;\r\n    try {\r\n        if (resourceHandlerChain != null) {\r\n            List<PrivilegedOperation> ops = resourceHandlerChain.preStart(container);\r\n            if (ops != null) {\r\n                List<PrivilegedOperation> resourceOps = new ArrayList<>();\r\n                resourceOps.add(new PrivilegedOperation(PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP, resourcesOptions));\r\n                for (PrivilegedOperation op : ops) {\r\n                    switch(op.getOperationType()) {\r\n                        case ADD_PID_TO_CGROUP:\r\n                            resourceOps.add(op);\r\n                            break;\r\n                        case TC_MODIFY_STATE:\r\n                            tcCommandFile = op.getArguments().get(0);\r\n                            break;\r\n                        case ADD_NUMA_PARAMS:\r\n                            numaArgs = op.getArguments();\r\n                            break;\r\n                        default:\r\n                            LOG.warn(\"PrivilegedOperation type unsupported in launch: {}\", op.getOperationType());\r\n                    }\r\n                }\r\n                if (resourceOps.size() > 1) {\r\n                    try {\r\n                        PrivilegedOperation operation = PrivilegedOperationExecutor.squashCGroupOperations(resourceOps);\r\n                        resourcesOptions = operation.getArguments().get(0);\r\n                    } catch (PrivilegedOperationException e) {\r\n                        LOG.error(\"Failed to squash cgroup operations!\", e);\r\n                        throw new ResourceHandlerException(\"Failed to squash cgroup operations!\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } catch (ResourceHandlerException e) {\r\n        LOG.error(\"ResourceHandlerChain.preStart() failed!\", e);\r\n        throw new IOException(\"ResourceHandlerChain.preStart() failed!\", e);\r\n    }\r\n    try {\r\n        Path pidFilePath = getPidFilePath(containerId);\r\n        if (pidFilePath != null) {\r\n            ContainerRuntimeContext runtimeContext = buildContainerRuntimeContext(ctx, pidFilePath, resourcesOptions, tcCommandFile, numaArgs);\r\n            if (type.equals(ApplicationConstants.ContainerLaunchType.RELAUNCH)) {\r\n                linuxContainerRuntime.relaunchContainer(runtimeContext);\r\n            } else {\r\n                linuxContainerRuntime.launchContainer(runtimeContext);\r\n            }\r\n        } else {\r\n            LOG.info(\"Container was marked as inactive. Returning terminated error\");\r\n            return ContainerExecutor.ExitCode.TERMINATED.getExitCode();\r\n        }\r\n    } catch (ContainerExecutionException e) {\r\n        return handleExitCode(e, container, containerId);\r\n    } finally {\r\n        resourcesHandler.postExecute(containerId);\r\n        postComplete(containerId);\r\n    }\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 3,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "handleExitCode",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "int handleExitCode(ContainerExecutionException e, Container container, ContainerId containerId) throws ConfigurationException\n{\r\n    int exitCode = e.getExitCode();\r\n    LOG.warn(\"Exit code from container {} is : {}\", containerId, exitCode);\r\n    if (exitCode != ContainerExecutor.ExitCode.FORCE_KILLED.getExitCode() && exitCode != ContainerExecutor.ExitCode.TERMINATED.getExitCode()) {\r\n        LOG.warn(\"Exception from container-launch with container ID: {} \" + \"and exit code: {}\", containerId, exitCode, e);\r\n        StringBuilder builder = new StringBuilder();\r\n        builder.append(\"Exception from container-launch.\\n\").append(\"Container id: \" + containerId + \"\\n\").append(\"Exit code: \" + exitCode + \"\\n\").append(\"Exception message: \" + e.getMessage() + \"\\n\");\r\n        if (!Optional.ofNullable(e.getErrorOutput()).orElse(\"\").isEmpty()) {\r\n            builder.append(\"Shell error output: \" + e.getErrorOutput() + \"\\n\");\r\n        }\r\n        String output = e.getOutput();\r\n        if (output != null && !output.isEmpty()) {\r\n            builder.append(\"Shell output: \" + output + \"\\n\");\r\n        }\r\n        String diagnostics = builder.toString();\r\n        logOutput(diagnostics);\r\n        container.handle(new ContainerDiagnosticsUpdateEvent(containerId, diagnostics));\r\n        if (exitCode == ExitCode.INVALID_CONTAINER_EXEC_PERMISSIONS.getExitCode() || exitCode == ExitCode.INVALID_CONFIG_FILE.getExitCode()) {\r\n            throw new ConfigurationException(\"Linux Container Executor reached unrecoverable exception\", e);\r\n        }\r\n    } else {\r\n        container.handle(new ContainerDiagnosticsUpdateEvent(containerId, \"Container killed on request. Exit code is \" + exitCode));\r\n    }\r\n    return exitCode;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "buildContainerRuntimeContext",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "ContainerRuntimeContext buildContainerRuntimeContext(ContainerStartContext ctx, Path pidFilePath, String resourcesOptions, String tcCommandFile, List<String> numaArgs)\n{\r\n    List<String> prefixCommands = new ArrayList<>();\r\n    addSchedPriorityCommand(prefixCommands);\r\n    addNumaArgsToCommand(prefixCommands, numaArgs);\r\n    Container container = ctx.getContainer();\r\n    ContainerRuntimeContext.Builder builder = new ContainerRuntimeContext.Builder(container);\r\n    if (prefixCommands.size() > 0) {\r\n        builder.setExecutionAttribute(CONTAINER_LAUNCH_PREFIX_COMMANDS, prefixCommands);\r\n    }\r\n    builder.setExecutionAttribute(LOCALIZED_RESOURCES, ctx.getLocalizedResources()).setExecutionAttribute(RUN_AS_USER, getRunAsUser(ctx.getUser())).setExecutionAttribute(USER, ctx.getUser()).setExecutionAttribute(APPID, ctx.getAppId()).setExecutionAttribute(CONTAINER_ID_STR, container.getContainerId().toString()).setExecutionAttribute(CONTAINER_WORK_DIR, ctx.getContainerWorkDir()).setExecutionAttribute(NM_PRIVATE_CONTAINER_SCRIPT_PATH, ctx.getNmPrivateContainerScriptPath()).setExecutionAttribute(NM_PRIVATE_TOKENS_PATH, ctx.getNmPrivateTokensPath()).setExecutionAttribute(NM_PRIVATE_KEYSTORE_PATH, ctx.getNmPrivateKeystorePath()).setExecutionAttribute(NM_PRIVATE_TRUSTSTORE_PATH, ctx.getNmPrivateTruststorePath()).setExecutionAttribute(PID_FILE_PATH, pidFilePath).setExecutionAttribute(LOCAL_DIRS, ctx.getLocalDirs()).setExecutionAttribute(LOG_DIRS, ctx.getLogDirs()).setExecutionAttribute(FILECACHE_DIRS, ctx.getFilecacheDirs()).setExecutionAttribute(USER_LOCAL_DIRS, ctx.getUserLocalDirs()).setExecutionAttribute(CONTAINER_LOCAL_DIRS, ctx.getContainerLocalDirs()).setExecutionAttribute(USER_FILECACHE_DIRS, ctx.getUserFilecacheDirs()).setExecutionAttribute(APPLICATION_LOCAL_DIRS, ctx.getApplicationLocalDirs()).setExecutionAttribute(CONTAINER_LOG_DIRS, ctx.getContainerLogDirs()).setExecutionAttribute(RESOURCES_OPTIONS, resourcesOptions);\r\n    if (tcCommandFile != null) {\r\n        builder.setExecutionAttribute(TC_COMMAND_FILE, tcCommandFile);\r\n    }\r\n    return builder.build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getIpAndHost",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String[] getIpAndHost(Container container) throws ContainerExecutionException\n{\r\n    return linuxContainerRuntime.getIpAndHost(container);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "addNumaArgsToCommand",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addNumaArgsToCommand(List<String> prefixCommands, List<String> numaArgs)\n{\r\n    if (numaArgs != null) {\r\n        prefixCommands.addAll(numaArgs);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "reacquireContainer",
  "errType" : [ "ResourceHandlerException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "int reacquireContainer(ContainerReacquisitionContext ctx) throws IOException, InterruptedException\n{\r\n    ContainerId containerId = ctx.getContainerId();\r\n    try {\r\n        if (resourceHandlerChain != null) {\r\n            try {\r\n                resourceHandlerChain.reacquireContainer(containerId);\r\n            } catch (ResourceHandlerException e) {\r\n                LOG.warn(\"ResourceHandlerChain.reacquireContainer failed for \" + \"containerId: {} Exception: \", containerId, e);\r\n            }\r\n        }\r\n        return super.reacquireContainer(ctx);\r\n    } finally {\r\n        resourcesHandler.postExecute(containerId);\r\n        postComplete(containerId);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "signalContainer",
  "errType" : [ "ContainerExecutionException" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "boolean signalContainer(ContainerSignalContext ctx) throws IOException\n{\r\n    Container container = ctx.getContainer();\r\n    String user = ctx.getUser();\r\n    String pid = ctx.getPid();\r\n    Signal signal = ctx.getSignal();\r\n    verifyUsernamePattern(user);\r\n    String runAsUser = getRunAsUser(user);\r\n    ContainerRuntimeContext runtimeContext = new ContainerRuntimeContext.Builder(container).setExecutionAttribute(RUN_AS_USER, runAsUser).setExecutionAttribute(USER, user).setExecutionAttribute(PID, pid).setExecutionAttribute(SIGNAL, signal).build();\r\n    try {\r\n        linuxContainerRuntime.signalContainer(runtimeContext);\r\n    } catch (ContainerExecutionException e) {\r\n        int retCode = e.getExitCode();\r\n        if (retCode == PrivilegedOperation.ResultCode.INVALID_CONTAINER_PID.getValue()) {\r\n            return false;\r\n        }\r\n        LOG.warn(\"Error in signalling container {} with {}; exit = {}\", pid, signal, retCode, e);\r\n        logOutput(e.getOutput());\r\n        throw new IOException(\"Problem signalling container \" + pid + \" with \" + signal + \"; output: \" + e.getOutput() + \" and exitCode: \" + retCode, e);\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "reapContainer",
  "errType" : [ "ContainerExecutionException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "boolean reapContainer(ContainerReapContext ctx) throws IOException\n{\r\n    Container container = ctx.getContainer();\r\n    String user = ctx.getUser();\r\n    String runAsUser = getRunAsUser(user);\r\n    ContainerRuntimeContext runtimeContext = new ContainerRuntimeContext.Builder(container).setExecutionAttribute(RUN_AS_USER, runAsUser).setExecutionAttribute(USER, user).build();\r\n    try {\r\n        linuxContainerRuntime.reapContainer(runtimeContext);\r\n    } catch (ContainerExecutionException e) {\r\n        int retCode = e.getExitCode();\r\n        if (retCode != 0) {\r\n            return false;\r\n        }\r\n        LOG.warn(\"Error in reaping container {} exit = {}\", container.getContainerId(), retCode, e);\r\n        logOutput(e.getOutput());\r\n        throw new IOException(\"Error in reaping container \" + container.getContainerId().toString() + \" exit = \" + retCode, e);\r\n    } finally {\r\n        postComplete(container.getContainerId());\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "execContainer",
  "errType" : [ "ContainerExecutionException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "IOStreamPair execContainer(ContainerExecContext ctx) throws ContainerExecutionException\n{\r\n    IOStreamPair res;\r\n    try {\r\n        res = linuxContainerRuntime.execContainer(ctx);\r\n    } catch (ContainerExecutionException e) {\r\n        int retCode = e.getExitCode();\r\n        if (retCode != 0) {\r\n            return new IOStreamPair(null, null);\r\n        }\r\n        LOG.warn(\"Error in executing container interactive shell {} exit = {}\", ctx, retCode, e);\r\n        logOutput(e.getOutput());\r\n        throw new ContainerExecutionException(\"Error in executing container interactive shel\" + ctx.getContainer().getContainerId().toString() + \" exit = \" + retCode);\r\n    }\r\n    return res;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "deleteAsUser",
  "errType" : [ "PrivilegedOperationException" ],
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void deleteAsUser(DeletionAsUserContext ctx)\n{\r\n    String user = ctx.getUser();\r\n    Path dir = ctx.getSubDir();\r\n    List<Path> baseDirs = ctx.getBasedirs();\r\n    verifyUsernamePattern(user);\r\n    String runAsUser = getRunAsUser(user);\r\n    String dirString = dir == null ? \"\" : dir.toUri().getPath();\r\n    PrivilegedOperation deleteAsUserOp = new PrivilegedOperation(PrivilegedOperation.OperationType.DELETE_AS_USER, (String) null);\r\n    deleteAsUserOp.appendArgs(runAsUser, user, Integer.toString(PrivilegedOperation.RunAsUserCommand.DELETE_AS_USER.getValue()), dirString);\r\n    List<String> pathsToDelete = new ArrayList<String>();\r\n    if (baseDirs == null || baseDirs.size() == 0) {\r\n        LOG.info(\"Deleting absolute path : {}\", dir);\r\n        pathsToDelete.add(dirString);\r\n    } else {\r\n        for (Path baseDir : baseDirs) {\r\n            Path del = dir == null ? baseDir : new Path(baseDir, dir);\r\n            LOG.info(\"Deleting path : {}\", del);\r\n            pathsToDelete.add(del.toString());\r\n            deleteAsUserOp.appendArgs(baseDir.toUri().getPath());\r\n        }\r\n    }\r\n    try {\r\n        Configuration conf = super.getConf();\r\n        PrivilegedOperationExecutor privilegedOperationExecutor = getPrivilegedOperationExecutor();\r\n        privilegedOperationExecutor.executePrivilegedOperation(deleteAsUserOp, false);\r\n    } catch (PrivilegedOperationException e) {\r\n        int exitCode = e.getExitCode();\r\n        LOG.error(\"DeleteAsUser for {} returned with exit code: {}\", StringUtils.join(\" \", pathsToDelete), exitCode, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "readDirAsUser",
  "errType" : [ "PrivilegedOperationException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "File[] readDirAsUser(String user, Path dir)\n{\r\n    List<File> files = new ArrayList<>();\r\n    PrivilegedOperation listAsUserOp = new PrivilegedOperation(PrivilegedOperation.OperationType.LIST_AS_USER, (String) null);\r\n    String runAsUser = getRunAsUser(user);\r\n    String dirString = \"\";\r\n    if (dir != null) {\r\n        dirString = dir.toUri().getPath();\r\n    }\r\n    listAsUserOp.appendArgs(runAsUser, user, Integer.toString(PrivilegedOperation.RunAsUserCommand.LIST_AS_USER.getValue()), dirString);\r\n    try {\r\n        PrivilegedOperationExecutor privOpExecutor = getPrivilegedOperationExecutor();\r\n        String results = privOpExecutor.executePrivilegedOperation(listAsUserOp, true);\r\n        for (String file : results.split(\"\\n\")) {\r\n            if (!file.startsWith(\"main :\")) {\r\n                files.add(new File(new File(dirString), file));\r\n            }\r\n        }\r\n    } catch (PrivilegedOperationException e) {\r\n        LOG.error(\"ListAsUser for {} returned with exit code: {}\", dir, e.getExitCode(), e);\r\n    }\r\n    return files.toArray(new File[files.size()]);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "symLink",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void symLink(String target, String symlink)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "isContainerAlive",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean isContainerAlive(ContainerLivenessContext ctx) throws IOException\n{\r\n    String user = ctx.getUser();\r\n    String pid = ctx.getPid();\r\n    Container container = ctx.getContainer();\r\n    return signalContainer(new ContainerSignalContext.Builder().setContainer(container).setUser(user).setPid(pid).setSignal(Signal.NULL).build());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "mountCgroups",
  "errType" : [ "PrivilegedOperationException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void mountCgroups(List<String> cgroupKVs, String hierarchy) throws IOException\n{\r\n    try {\r\n        PrivilegedOperation mountCGroupsOp = new PrivilegedOperation(PrivilegedOperation.OperationType.MOUNT_CGROUPS, hierarchy);\r\n        Configuration conf = super.getConf();\r\n        mountCGroupsOp.appendArgs(cgroupKVs);\r\n        PrivilegedOperationExecutor privilegedOperationExecutor = getPrivilegedOperationExecutor();\r\n        privilegedOperationExecutor.executePrivilegedOperation(mountCGroupsOp, false);\r\n    } catch (PrivilegedOperationException e) {\r\n        int exitCode = e.getExitCode();\r\n        LOG.warn(\"Exception in LinuxContainerExecutor mountCgroups \", e);\r\n        throw new IOException(\"Problem mounting cgroups \" + cgroupKVs + \"; exit code = \" + exitCode + \" and output: \" + e.getOutput(), e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getResourceHandler",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourceHandler getResourceHandler()\n{\r\n    return resourceHandlerChain;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "removeDockerContainer",
  "errType" : [ "ContainerExecutionException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void removeDockerContainer(String containerId)\n{\r\n    try {\r\n        PrivilegedOperationExecutor privOpExecutor = PrivilegedOperationExecutor.getInstance(super.getConf());\r\n        if (DockerCommandExecutor.isRemovable(DockerCommandExecutor.getContainerStatus(containerId, privOpExecutor, nmContext))) {\r\n            LOG.info(\"Removing Docker container : {}\", containerId);\r\n            DockerRmCommand dockerRmCommand = new DockerRmCommand(containerId, ResourceHandlerModule.getCgroupsRelativeRoot());\r\n            DockerCommandExecutor.executeDockerCommand(dockerRmCommand, containerId, null, privOpExecutor, false, nmContext);\r\n        }\r\n    } catch (ContainerExecutionException e) {\r\n        LOG.warn(\"Unable to remove docker container: {}\", containerId);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "postComplete",
  "errType" : [ "ResourceHandlerException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void postComplete(final ContainerId containerId)\n{\r\n    try {\r\n        if (resourceHandlerChain != null) {\r\n            LOG.debug(\"{} post complete\", containerId);\r\n            resourceHandlerChain.postComplete(containerId);\r\n        }\r\n    } catch (ResourceHandlerException e) {\r\n        LOG.warn(\"ResourceHandlerChain.postComplete failed for \" + \"containerId: {}. Exception: \", containerId, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "updateYarnSysFS",
  "errType" : [ "PrivilegedOperationException" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void updateYarnSysFS(Context ctx, String user, String appId, String spec) throws IOException\n{\r\n    LocalDirsHandlerService dirsHandler = nmContext.getLocalDirsHandler();\r\n    Path sysFSPath = dirsHandler.getLocalPathForWrite(\"nmPrivate/\" + appId + \"/sysfs/app.json\");\r\n    File file = new File(sysFSPath.toString());\r\n    List<String> localDirs = dirsHandler.getLocalDirs();\r\n    if (file.exists()) {\r\n        if (!file.delete()) {\r\n            LOG.warn(\"Unable to delete {}\", sysFSPath);\r\n        }\r\n    }\r\n    if (file.createNewFile()) {\r\n        FileOutputStream output = new FileOutputStream(file);\r\n        try {\r\n            output.write(spec.getBytes(\"UTF-8\"));\r\n        } finally {\r\n            output.close();\r\n        }\r\n    }\r\n    PrivilegedOperation privOp = new PrivilegedOperation(PrivilegedOperation.OperationType.SYNC_YARN_SYSFS);\r\n    String runAsUser = getRunAsUser(user);\r\n    privOp.appendArgs(runAsUser, user, Integer.toString(PrivilegedOperation.RunAsUserCommand.SYNC_YARN_SYSFS.getValue()), appId, StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR, localDirs));\r\n    privOp.disableFailureLogging();\r\n    PrivilegedOperationExecutor privilegedOperationExecutor = PrivilegedOperationExecutor.getInstance(nmContext.getConf());\r\n    try {\r\n        privilegedOperationExecutor.executePrivilegedOperation(null, privOp, null, null, false, false);\r\n    } catch (PrivilegedOperationException e) {\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getExposedPorts",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getExposedPorts(Container container) throws ContainerExecutionException\n{\r\n    return linuxContainerRuntime.getExposedPorts(container);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getLocalResources",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<String, LocalResource> getLocalResources(Container container) throws IOException\n{\r\n    return linuxContainerRuntime.getLocalResources(container);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "initialize",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initialize(Configuration conf, Context nmContext) throws ContainerExecutionException\n{\r\n    this.configuration = conf;\r\n    this.sandboxMode = SandboxMode.get(this.configuration.get(YARN_CONTAINER_SANDBOX, YarnConfiguration.DEFAULT_YARN_CONTAINER_SANDBOX));\r\n    super.initialize(conf, nmContext);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "initializePolicyDir",
  "errType" : [ "IOException", "IOException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void initializePolicyDir() throws ContainerExecutionException\n{\r\n    String hadoopTempDir = configuration.get(\"hadoop.tmp.dir\");\r\n    if (hadoopTempDir == null) {\r\n        throw new ContainerExecutionException(\"hadoop.tmp.dir not set!\");\r\n    }\r\n    policyFileDir = Paths.get(hadoopTempDir, POLICY_FILE_DIR);\r\n    if (Files.exists(policyFileDir)) {\r\n        try (DirectoryStream<Path> stream = Files.newDirectoryStream(policyFileDir)) {\r\n            for (Path policyFile : stream) {\r\n                Files.delete(policyFile);\r\n            }\r\n        } catch (IOException e) {\r\n            throw new ContainerExecutionException(\"Unable to initialize policy \" + \"directory: \" + e);\r\n        }\r\n    } else {\r\n        try {\r\n            policyFileDir = Files.createDirectories(Paths.get(hadoopTempDir, POLICY_FILE_DIR), POLICY_ATTR);\r\n        } catch (IOException e) {\r\n            throw new ContainerExecutionException(\"Unable to create policy file \" + \"directory: \" + e);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "prepareContainer",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void prepareContainer(ContainerRuntimeContext ctx) throws ContainerExecutionException\n{\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<String> localDirs = ctx.getExecutionAttribute(CONTAINER_LOCAL_DIRS);\r\n    @SuppressWarnings(\"unchecked\")\r\n    Map<org.apache.hadoop.fs.Path, List<String>> resources = ctx.getExecutionAttribute(LOCALIZED_RESOURCES);\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<String> commands = ctx.getExecutionAttribute(CONTAINER_RUN_CMDS);\r\n    Map<String, String> env = ctx.getContainer().getLaunchContext().getEnvironment();\r\n    String username = ctx.getExecutionAttribute(USER);\r\n    if (!isSandboxContainerWhitelisted(username, commands)) {\r\n        String tmpDirBase = configuration.get(\"hadoop.tmp.dir\");\r\n        if (tmpDirBase == null) {\r\n            throw new ContainerExecutionException(\"hadoop.tmp.dir not set!\");\r\n        }\r\n        try {\r\n            String containerID = ctx.getExecutionAttribute(CONTAINER_ID_STR);\r\n            initializePolicyDir();\r\n            List<String> groupPolicyFiles = getGroupPolicyFiles(configuration, ctx.getExecutionAttribute(USER));\r\n            Path policyFilePath = Files.createFile(Paths.get(policyFileDir.toString(), containerID + \"-\" + NMContainerPolicyUtils.POLICY_FILE), POLICY_ATTR);\r\n            try (OutputStream policyOutputStream = Files.newOutputStream(policyFilePath)) {\r\n                containerPolicies.put(containerID, policyFilePath);\r\n                NMContainerPolicyUtils.generatePolicyFile(policyOutputStream, localDirs, groupPolicyFiles, resources, configuration);\r\n                NMContainerPolicyUtils.appendSecurityFlags(commands, env, policyFilePath, sandboxMode);\r\n            }\r\n        } catch (IOException e) {\r\n            throw new ContainerExecutionException(e);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "launchContainer",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void launchContainer(ContainerRuntimeContext ctx) throws ContainerExecutionException\n{\r\n    try {\r\n        super.launchContainer(ctx);\r\n    } finally {\r\n        deletePolicyFiles(ctx);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "relaunchContainer",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void relaunchContainer(ContainerRuntimeContext ctx) throws ContainerExecutionException\n{\r\n    try {\r\n        super.relaunchContainer(ctx);\r\n    } finally {\r\n        deletePolicyFiles(ctx);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "isRuntimeRequested",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isRuntimeRequested(Map<String, String> env)\n{\r\n    return sandboxMode != SandboxMode.disabled;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getGroupPolicyFiles",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "List<String> getGroupPolicyFiles(Configuration conf, String user) throws ContainerExecutionException\n{\r\n    Groups groups = Groups.getUserToGroupsMappingService(conf);\r\n    Set<String> userGroups;\r\n    try {\r\n        userGroups = groups.getGroupsSet(user);\r\n    } catch (IOException e) {\r\n        throw new ContainerExecutionException(\"Container user does not exist\");\r\n    }\r\n    return userGroups.stream().map(group -> conf.get(YARN_CONTAINER_SANDBOX_POLICY_GROUP_PREFIX + group)).filter(groupPolicy -> groupPolicy != null).collect(Collectors.toList());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "isSandboxContainerWhitelisted",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "boolean isSandboxContainerWhitelisted(String username, List<String> commands) throws ContainerExecutionException\n{\r\n    String whitelistGroup = configuration.get(YarnConfiguration.YARN_CONTAINER_SANDBOX_WHITELIST_GROUP);\r\n    Groups groups = Groups.getUserToGroupsMappingService(configuration);\r\n    Set<String> userGroups;\r\n    boolean isWhitelisted = false;\r\n    try {\r\n        userGroups = groups.getGroupsSet(username);\r\n    } catch (IOException e) {\r\n        throw new ContainerExecutionException(\"Container user does not exist\");\r\n    }\r\n    if (whitelistGroup != null && userGroups.contains(whitelistGroup)) {\r\n        for (String cmd : commands) {\r\n            if (cmd.contains(NMContainerPolicyUtils.SECURITY_FLAG)) {\r\n                isWhitelisted = false;\r\n                break;\r\n            } else {\r\n                isWhitelisted = true;\r\n            }\r\n        }\r\n    }\r\n    return isWhitelisted;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "deletePolicyFiles",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void deletePolicyFiles(ContainerRuntimeContext ctx) throws ContainerExecutionException\n{\r\n    try {\r\n        Files.delete(containerPolicies.remove(ctx.getExecutionAttribute(CONTAINER_ID_STR)));\r\n    } catch (IOException e) {\r\n        throw new ContainerExecutionException(\"Unable to delete policy file: \" + e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "getValue",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getValue(String input) throws IllegalArgumentException\n{\r\n    int index = input.indexOf('=');\r\n    if (index < 0) {\r\n        throw new IllegalArgumentException(\"Failed to locate '=' from input=\" + input);\r\n    }\r\n    return input.substring(index + 1);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "addToCommand",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void addToCommand(String key, String value)\n{\r\n    if (additionalCommands == null) {\r\n        additionalCommands = new HashMap<>();\r\n    }\r\n    if (!additionalCommands.containsKey(key)) {\r\n        additionalCommands.put(key, new HashSet<>());\r\n    }\r\n    additionalCommands.get(key).add(value);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "init",
  "errType" : [ "RuntimeException", "IOException" ],
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void init() throws ContainerExecutionException\n{\r\n    String endpoint = conf.get(YarnConfiguration.NVIDIA_DOCKER_PLUGIN_V1_ENDPOINT, YarnConfiguration.DEFAULT_NVIDIA_DOCKER_PLUGIN_V1_ENDPOINT);\r\n    if (null == endpoint || endpoint.isEmpty()) {\r\n        LOG.info(YarnConfiguration.NVIDIA_DOCKER_PLUGIN_V1_ENDPOINT + \" set to empty, skip init ..\");\r\n        return;\r\n    }\r\n    String cliOptions;\r\n    try {\r\n        URL url = new URL(endpoint);\r\n        URLConnection uc = url.openConnection();\r\n        uc.setRequestProperty(\"X-Requested-With\", \"Curl\");\r\n        StringWriter writer = new StringWriter();\r\n        IOUtils.copy(uc.getInputStream(), writer, \"utf-8\");\r\n        cliOptions = writer.toString();\r\n        LOG.info(\"Additional docker CLI options from plugin to run GPU \" + \"containers:\" + cliOptions);\r\n        for (String str : cliOptions.split(\" \")) {\r\n            str = str.trim();\r\n            if (str.startsWith(DEVICE_OPTION)) {\r\n                addToCommand(DEVICE_OPTION, getValue(str));\r\n            } else if (str.startsWith(VOLUME_DRIVER_OPTION)) {\r\n                volumeDriver = getValue(str);\r\n                LOG.debug(\"Found volume-driver:{}\", volumeDriver);\r\n            } else if (str.startsWith(MOUNT_RO_OPTION)) {\r\n                String mount = getValue(str);\r\n                if (!mount.endsWith(\":ro\")) {\r\n                    throw new IllegalArgumentException(\"Should not have mount other than ro, command=\" + str);\r\n                }\r\n                addToCommand(MOUNT_RO_OPTION, mount.substring(0, mount.lastIndexOf(':')));\r\n            } else {\r\n                throw new IllegalArgumentException(\"Unsupported option:\" + str);\r\n            }\r\n        }\r\n    } catch (RuntimeException e) {\r\n        LOG.warn(\"RuntimeException of \" + this.getClass().getSimpleName() + \" init:\", e);\r\n        throw new ContainerExecutionException(e);\r\n    } catch (IOException e) {\r\n        LOG.warn(\"IOException of \" + this.getClass().getSimpleName() + \" init:\", e);\r\n        throw new ContainerExecutionException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "getGpuIndexFromDeviceName",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "int getGpuIndexFromDeviceName(String device)\n{\r\n    final String NVIDIA = \"nvidia\";\r\n    int idx = device.lastIndexOf(NVIDIA);\r\n    if (idx < 0) {\r\n        return -1;\r\n    }\r\n    String str = device.substring(idx + NVIDIA.length());\r\n    for (int i = 0; i < str.length(); i++) {\r\n        if (!Character.isDigit(str.charAt(i))) {\r\n            return -1;\r\n        }\r\n    }\r\n    return Integer.parseInt(str);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "getAssignedGpus",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Set<GpuDevice> getAssignedGpus(Container container)\n{\r\n    ResourceMappings resourceMappings = container.getResourceMappings();\r\n    Set<GpuDevice> assignedResources = null;\r\n    if (resourceMappings != null) {\r\n        assignedResources = new HashSet<>();\r\n        for (Serializable s : resourceMappings.getAssignedResources(ResourceInformation.GPU_URI)) {\r\n            assignedResources.add((GpuDevice) s);\r\n        }\r\n    }\r\n    if (assignedResources == null || assignedResources.isEmpty()) {\r\n        return Collections.emptySet();\r\n    }\r\n    return assignedResources;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "requestsGpu",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean requestsGpu(Container container)\n{\r\n    return GpuResourceAllocator.getRequestedGpus(container.getResource()) > 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "initializeWhenGpuRequested",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean initializeWhenGpuRequested(Container container) throws ContainerExecutionException\n{\r\n    if (!requestsGpu(container)) {\r\n        return false;\r\n    }\r\n    if (additionalCommands == null) {\r\n        init();\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "updateDockerRunCommand",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void updateDockerRunCommand(DockerRunCommand dockerRunCommand, Container container) throws ContainerExecutionException\n{\r\n    if (!initializeWhenGpuRequested(container)) {\r\n        return;\r\n    }\r\n    Set<GpuDevice> assignedResources = getAssignedGpus(container);\r\n    if (assignedResources == null || assignedResources.isEmpty()) {\r\n        return;\r\n    }\r\n    for (Map.Entry<String, Set<String>> option : additionalCommands.entrySet()) {\r\n        String key = option.getKey();\r\n        Set<String> values = option.getValue();\r\n        if (key.equals(DEVICE_OPTION)) {\r\n            int foundGpuDevices = 0;\r\n            for (String deviceName : values) {\r\n                Integer gpuIdx = getGpuIndexFromDeviceName(deviceName);\r\n                if (gpuIdx >= 0) {\r\n                    for (GpuDevice gpuDevice : assignedResources) {\r\n                        if (gpuDevice.getIndex() == gpuIdx) {\r\n                            foundGpuDevices++;\r\n                            dockerRunCommand.addDevice(deviceName, deviceName);\r\n                        }\r\n                    }\r\n                } else {\r\n                    dockerRunCommand.addDevice(deviceName, deviceName);\r\n                }\r\n            }\r\n            if (foundGpuDevices < assignedResources.size()) {\r\n                throw new ContainerExecutionException(\"Cannot get all assigned Gpu devices from docker plugin output\");\r\n            }\r\n        } else if (key.equals(MOUNT_RO_OPTION)) {\r\n            for (String value : values) {\r\n                int idx = value.indexOf(':');\r\n                String source = value.substring(0, idx);\r\n                String target = value.substring(idx + 1);\r\n                dockerRunCommand.addReadOnlyMountLocation(source, target, true);\r\n            }\r\n        } else {\r\n            throw new ContainerExecutionException(\"Unsupported option:\" + key);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "getCreateDockerVolumeCommand",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "DockerVolumeCommand getCreateDockerVolumeCommand(Container container) throws ContainerExecutionException\n{\r\n    if (!initializeWhenGpuRequested(container)) {\r\n        return null;\r\n    }\r\n    String newVolumeName = null;\r\n    Set<String> mounts = additionalCommands.get(MOUNT_RO_OPTION);\r\n    for (String mount : mounts) {\r\n        int idx = mount.indexOf(':');\r\n        if (idx >= 0) {\r\n            String mountSource = mount.substring(0, idx);\r\n            if (VOLUME_NAME_PATTERN.matcher(mountSource).matches()) {\r\n                newVolumeName = mountSource;\r\n                LOG.debug(\"Found volume name for GPU:{}\", newVolumeName);\r\n                break;\r\n            } else {\r\n                LOG.debug(\"Failed to match {} to named-volume regex pattern\", mountSource);\r\n            }\r\n        }\r\n    }\r\n    if (newVolumeName != null) {\r\n        DockerVolumeCommand command = new DockerVolumeCommand(DockerVolumeCommand.VOLUME_CREATE_SUB_COMMAND);\r\n        command.setDriverName(volumeDriver);\r\n        command.setVolumeName(newVolumeName);\r\n        return command;\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "getCleanupDockerVolumesCommand",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "DockerVolumeCommand getCleanupDockerVolumesCommand(Container container) throws ContainerExecutionException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "setSignal",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DockerKillCommand setSignal(String signal)\n{\r\n    super.addCommandArguments(\"signal\", signal);\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "bootstrap",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<PrivilegedOperation> bootstrap(Configuration configuration) throws ResourceHandlerException\n{\r\n    List<PrivilegedOperation> allOperations = new ArrayList<PrivilegedOperation>();\r\n    for (ResourceHandler resourceHandler : resourceHandlers) {\r\n        List<PrivilegedOperation> handlerOperations = resourceHandler.bootstrap(configuration);\r\n        if (handlerOperations != null) {\r\n            allOperations.addAll(handlerOperations);\r\n        }\r\n    }\r\n    return allOperations;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "preStart",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<PrivilegedOperation> preStart(Container container) throws ResourceHandlerException\n{\r\n    List<PrivilegedOperation> allOperations = new ArrayList<PrivilegedOperation>();\r\n    for (ResourceHandler resourceHandler : resourceHandlers) {\r\n        List<PrivilegedOperation> handlerOperations = resourceHandler.preStart(container);\r\n        if (handlerOperations != null) {\r\n            allOperations.addAll(handlerOperations);\r\n        }\r\n    }\r\n    return allOperations;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "reacquireContainer",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<PrivilegedOperation> reacquireContainer(ContainerId containerId) throws ResourceHandlerException\n{\r\n    List<PrivilegedOperation> allOperations = new ArrayList<PrivilegedOperation>();\r\n    for (ResourceHandler resourceHandler : resourceHandlers) {\r\n        List<PrivilegedOperation> handlerOperations = resourceHandler.reacquireContainer(containerId);\r\n        if (handlerOperations != null) {\r\n            allOperations.addAll(handlerOperations);\r\n        }\r\n    }\r\n    return allOperations;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "updateContainer",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<PrivilegedOperation> updateContainer(Container container) throws ResourceHandlerException\n{\r\n    List<PrivilegedOperation> allOperations = new ArrayList<PrivilegedOperation>();\r\n    for (ResourceHandler resourceHandler : resourceHandlers) {\r\n        List<PrivilegedOperation> handlerOperations = resourceHandler.updateContainer(container);\r\n        if (handlerOperations != null) {\r\n            allOperations.addAll(handlerOperations);\r\n        }\r\n    }\r\n    return allOperations;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "postComplete",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<PrivilegedOperation> postComplete(ContainerId containerId) throws ResourceHandlerException\n{\r\n    List<PrivilegedOperation> allOperations = new ArrayList<PrivilegedOperation>();\r\n    for (ResourceHandler resourceHandler : resourceHandlers) {\r\n        List<PrivilegedOperation> handlerOperations = resourceHandler.postComplete(containerId);\r\n        if (handlerOperations != null) {\r\n            allOperations.addAll(handlerOperations);\r\n        }\r\n    }\r\n    return allOperations;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "teardown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<PrivilegedOperation> teardown() throws ResourceHandlerException\n{\r\n    List<PrivilegedOperation> allOperations = new ArrayList<PrivilegedOperation>();\r\n    for (ResourceHandler resourceHandler : resourceHandlers) {\r\n        List<PrivilegedOperation> handlerOperations = resourceHandler.teardown();\r\n        if (handlerOperations != null) {\r\n            allOperations.addAll(handlerOperations);\r\n        }\r\n    }\r\n    return allOperations;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getResourceHandlerList",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ResourceHandler> getResourceHandlerList()\n{\r\n    return Collections.unmodifiableList(resourceHandlers);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return ResourceHandlerChain.class.getName() + \"{\" + \"resourceHandlers=\" + resourceHandlers + '}';\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\runtime",
  "methodName" : "getContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Container getContainer()\n{\r\n    return this.container;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\runtime",
  "methodName" : "getExecutionAttributes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<Attribute<?>, Object> getExecutionAttributes()\n{\r\n    return Collections.unmodifiableMap(this.executionAttributes);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\runtime",
  "methodName" : "getExecutionAttribute",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "E getExecutionAttribute(Attribute<E> attribute)\n{\r\n    return attribute.valueClass.cast(executionAttributes.get(attribute));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "setInteractive",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DockerExecCommand setInteractive()\n{\r\n    super.addCommandArguments(\"interactive\", \"true\");\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "setTTY",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DockerExecCommand setTTY()\n{\r\n    super.addCommandArguments(\"tty\", \"true\");\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "setOverrideCommandWithArgs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DockerExecCommand setOverrideCommandWithArgs(List<String> overrideCommandWithArgs)\n{\r\n    for (String override : overrideCommandWithArgs) {\r\n        super.addCommandArguments(\"launch-command\", override);\r\n    }\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "getDockerCommandWithArguments",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<String, List<String>> getDockerCommandWithArguments()\n{\r\n    return super.getDockerCommandWithArguments();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "throwIfNecessary",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void throwIfNecessary(YarnException e, Configuration conf) throws YarnException\n{\r\n    if (conf.getBoolean(NM_RESOURCE_PLUGINS_FAIL_FAST, DEFAULT_NM_RESOURCE_PLUGINS_FAIL_FAST)) {\r\n        throw e;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "getAssignedGpus",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Set<GpuDevice> getAssignedGpus(Container container)\n{\r\n    ResourceMappings resourceMappings = container.getResourceMappings();\r\n    Set<GpuDevice> assignedResources = null;\r\n    if (resourceMappings != null) {\r\n        assignedResources = new HashSet<>();\r\n        for (Serializable s : resourceMappings.getAssignedResources(ResourceInformation.GPU_URI)) {\r\n            assignedResources.add((GpuDevice) s);\r\n        }\r\n    }\r\n    if (assignedResources == null || assignedResources.isEmpty()) {\r\n        return Collections.emptySet();\r\n    }\r\n    return assignedResources;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "requestsGpu",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean requestsGpu(Container container)\n{\r\n    return GpuResourceAllocator.getRequestedGpus(container.getResource()) > 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "updateDockerRunCommand",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void updateDockerRunCommand(DockerRunCommand dockerRunCommand, Container container) throws ContainerExecutionException\n{\r\n    if (!requestsGpu(container)) {\r\n        return;\r\n    }\r\n    Set<GpuDevice> assignedResources = getAssignedGpus(container);\r\n    if (assignedResources == null || assignedResources.isEmpty()) {\r\n        return;\r\n    }\r\n    Map<String, String> environment = new HashMap<>();\r\n    String gpuIndexList = \"\";\r\n    for (GpuDevice gpuDevice : assignedResources) {\r\n        gpuIndexList = gpuIndexList + gpuDevice.getIndex() + \",\";\r\n        LOG.info(\"nvidia docker2 assigned gpu index: \" + gpuDevice.getIndex());\r\n    }\r\n    dockerRunCommand.addRuntime(nvidiaRuntime);\r\n    environment.put(nvidiaVisibleDevices, gpuIndexList.substring(0, gpuIndexList.length() - 1));\r\n    dockerRunCommand.addEnv(environment);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "getCreateDockerVolumeCommand",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "DockerVolumeCommand getCreateDockerVolumeCommand(Container container) throws ContainerExecutionException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "getCleanupDockerVolumesCommand",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "DockerVolumeCommand getCleanupDockerVolumesCommand(Container container) throws ContainerExecutionException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 26,
  "sourceCodeText" : "void init(Configuration conf) throws YarnException\n{\r\n    if (conf.getBoolean(YarnConfiguration.NM_NUMA_AWARENESS_READ_TOPOLOGY, YarnConfiguration.DEFAULT_NM_NUMA_AWARENESS_READ_TOPOLOGY)) {\r\n        LOG.info(\"Reading NUMA topology using 'numactl --hardware' command.\");\r\n        String cmdOutput = executeNGetCmdOutput(conf);\r\n        String[] outputLines = cmdOutput.split(\"\\\\n\");\r\n        Pattern pattern = Pattern.compile(NUMA_NODEIDS_REGEX);\r\n        String nodeIdsStr = null;\r\n        for (String line : outputLines) {\r\n            Matcher matcher = pattern.matcher(line);\r\n            if (matcher.find()) {\r\n                nodeIdsStr = matcher.group(1);\r\n                break;\r\n            }\r\n        }\r\n        if (nodeIdsStr == null) {\r\n            throw new YarnException(\"Failed to get numa nodes from\" + \" 'numactl --hardware' output and output is:\\n\" + cmdOutput);\r\n        }\r\n        String[] nodeIdCommaSplits = nodeIdsStr.split(\"[,\\\\s]\");\r\n        for (String nodeIdOrRange : nodeIdCommaSplits) {\r\n            if (nodeIdOrRange.contains(\"-\")) {\r\n                String[] beginNEnd = nodeIdOrRange.split(\"-\");\r\n                int endNode = Integer.parseInt(beginNEnd[1]);\r\n                for (int nodeId = Integer.parseInt(beginNEnd[0]); nodeId <= endNode; nodeId++) {\r\n                    long memory = parseMemory(outputLines, String.valueOf(nodeId));\r\n                    int cpus = parseCpus(outputLines, String.valueOf(nodeId));\r\n                    addToCollection(String.valueOf(nodeId), memory, cpus);\r\n                }\r\n            } else {\r\n                long memory = parseMemory(outputLines, nodeIdOrRange);\r\n                int cpus = parseCpus(outputLines, nodeIdOrRange);\r\n                addToCollection(nodeIdOrRange, memory, cpus);\r\n            }\r\n        }\r\n    } else {\r\n        LOG.info(\"Reading NUMA topology using configurations.\");\r\n        Collection<String> nodeIds = conf.getStringCollection(YarnConfiguration.NM_NUMA_AWARENESS_NODE_IDS);\r\n        for (String nodeId : nodeIds) {\r\n            long mem = conf.getLong(\"yarn.nodemanager.numa-awareness.\" + nodeId + \".memory\", DEFAULT_NUMA_NODE_MEMORY);\r\n            int cpus = conf.getInt(\"yarn.nodemanager.numa-awareness.\" + nodeId + \".cpus\", DEFAULT_NUMA_NODE_CPUS);\r\n            addToCollection(nodeId, mem, cpus);\r\n        }\r\n    }\r\n    if (numaNodesList.isEmpty()) {\r\n        throw new YarnException(\"There are no available NUMA nodes\" + \" for making containers NUMA aware.\");\r\n    }\r\n    LOG.info(\"Available numa nodes with capacities : \" + numaNodesList.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "executeNGetCmdOutput",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String executeNGetCmdOutput(Configuration conf) throws YarnException\n{\r\n    String numaCtlCmd = conf.get(YarnConfiguration.NM_NUMA_AWARENESS_NUMACTL_CMD, YarnConfiguration.DEFAULT_NM_NUMA_AWARENESS_NUMACTL_CMD);\r\n    String[] args = new String[] { numaCtlCmd, \"--hardware\" };\r\n    ShellCommandExecutor shExec = new ShellCommandExecutor(args);\r\n    try {\r\n        shExec.execute();\r\n    } catch (IOException e) {\r\n        throw new YarnException(\"Failed to read the numa configurations.\", e);\r\n    }\r\n    return shExec.getOutput();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "parseCpus",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "int parseCpus(String[] outputLines, String nodeId)\n{\r\n    int cpus = 0;\r\n    Pattern patternNodeCPUs = Pattern.compile(NUMA_NODE_CPUS_REGEX.replace(NUMA_NODE, nodeId));\r\n    for (String line : outputLines) {\r\n        Matcher matcherNodeCPUs = patternNodeCPUs.matcher(line);\r\n        if (matcherNodeCPUs.find()) {\r\n            String cpusStr = matcherNodeCPUs.group(1);\r\n            cpus = cpusStr.split(SPACE).length;\r\n            break;\r\n        }\r\n    }\r\n    return cpus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "parseMemory",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "long parseMemory(String[] outputLines, String nodeId) throws YarnException\n{\r\n    long memory = 0;\r\n    String units;\r\n    Pattern patternNodeMem = Pattern.compile(NUMA_NODE_MEMORY_REGEX.replace(NUMA_NODE, nodeId));\r\n    for (String line : outputLines) {\r\n        Matcher matcherNodeMem = patternNodeMem.matcher(line);\r\n        if (matcherNodeMem.find()) {\r\n            try {\r\n                memory = Long.parseLong(matcherNodeMem.group(1));\r\n                units = matcherNodeMem.group(2);\r\n                if (GB.equals(units)) {\r\n                    memory = memory * 1024;\r\n                } else if (KB.equals(units)) {\r\n                    memory = memory / 1024;\r\n                }\r\n            } catch (Exception ex) {\r\n                throw new YarnException(\"Failed to get memory for node:\" + nodeId, ex);\r\n            }\r\n            break;\r\n        }\r\n    }\r\n    return memory;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "addToCollection",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void addToCollection(String nodeId, long memory, int cpus)\n{\r\n    NumaNodeResource numaNode = new NumaNodeResource(nodeId, memory, cpus);\r\n    numaNodesList.add(numaNode);\r\n    numaNodeIdVsResource.put(nodeId, numaNode);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "allocateNumaNodes",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "NumaResourceAllocation allocateNumaNodes(Container container) throws ResourceHandlerException\n{\r\n    NumaResourceAllocation allocation = allocate(container.getContainerId(), container.getResource());\r\n    if (allocation != null) {\r\n        try {\r\n            context.getNMStateStore().storeAssignedResources(container, NUMA_RESOURCE_TYPE, Arrays.asList(allocation));\r\n        } catch (IOException e) {\r\n            releaseNumaResource(container.getContainerId());\r\n            throw new ResourceHandlerException(e);\r\n        }\r\n    }\r\n    return allocation;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "allocate",
  "errType" : null,
  "containingMethodsNum" : 26,
  "sourceCodeText" : "NumaResourceAllocation allocate(ContainerId containerId, Resource resource)\n{\r\n    for (int index = 0; index < numaNodesList.size(); index++) {\r\n        NumaNodeResource numaNode = numaNodesList.get((currentAssignNode + index) % numaNodesList.size());\r\n        if (numaNode.isResourcesAvailable(resource)) {\r\n            numaNode.assignResources(resource, containerId);\r\n            LOG.info(\"Assigning NUMA node \" + numaNode.getNodeId() + \" for memory, \" + numaNode.getNodeId() + \" for cpus for the \" + containerId);\r\n            currentAssignNode = (currentAssignNode + index + 1) % numaNodesList.size();\r\n            return new NumaResourceAllocation(numaNode.getNodeId(), resource.getMemorySize(), numaNode.getNodeId(), resource.getVirtualCores());\r\n        }\r\n    }\r\n    long memoryRequirement = resource.getMemorySize();\r\n    Map<String, Long> memoryAllocations = Maps.newHashMap();\r\n    for (NumaNodeResource numaNode : numaNodesList) {\r\n        long memoryRemaining = numaNode.assignAvailableMemory(memoryRequirement, containerId);\r\n        memoryAllocations.put(numaNode.getNodeId(), memoryRequirement - memoryRemaining);\r\n        memoryRequirement = memoryRemaining;\r\n        if (memoryRequirement == 0) {\r\n            break;\r\n        }\r\n    }\r\n    if (memoryRequirement != 0) {\r\n        LOG.info(\"There is no available memory:\" + resource.getMemorySize() + \" in numa nodes for \" + containerId);\r\n        releaseNumaResource(containerId);\r\n        return null;\r\n    }\r\n    int cpusRequirement = resource.getVirtualCores();\r\n    Map<String, Integer> cpuAllocations = Maps.newHashMap();\r\n    for (int index = 0; index < numaNodesList.size(); index++) {\r\n        NumaNodeResource numaNode = numaNodesList.get((currentAssignNode + index) % numaNodesList.size());\r\n        int cpusRemaining = numaNode.assignAvailableCpus(cpusRequirement, containerId);\r\n        cpuAllocations.put(numaNode.getNodeId(), cpusRequirement - cpusRemaining);\r\n        cpusRequirement = cpusRemaining;\r\n        if (cpusRequirement == 0) {\r\n            currentAssignNode = (currentAssignNode + index + 1) % numaNodesList.size();\r\n            break;\r\n        }\r\n    }\r\n    if (cpusRequirement != 0) {\r\n        LOG.info(\"There are no available cpus:\" + resource.getVirtualCores() + \" in numa nodes for \" + containerId);\r\n        releaseNumaResource(containerId);\r\n        return null;\r\n    }\r\n    NumaResourceAllocation assignedNumaNodeInfo = new NumaResourceAllocation(memoryAllocations, cpuAllocations);\r\n    LOG.info(\"Assigning multiple NUMA nodes (\" + StringUtils.join(\",\", assignedNumaNodeInfo.getMemNodes()) + \") for memory, (\" + StringUtils.join(\",\", assignedNumaNodeInfo.getCpuNodes()) + \") for cpus for \" + containerId);\r\n    return assignedNumaNodeInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "releaseNumaResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void releaseNumaResource(ContainerId containerId)\n{\r\n    LOG.info(\"Releasing the assigned NUMA resources for \" + containerId);\r\n    for (NumaNodeResource numaNode : numaNodesList) {\r\n        numaNode.releaseResources(containerId);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "recoverNumaResource",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void recoverNumaResource(ContainerId containerId)\n{\r\n    Container container = context.getContainers().get(containerId);\r\n    ResourceMappings resourceMappings = container.getResourceMappings();\r\n    List<Serializable> assignedResources = resourceMappings.getAssignedResources(NUMA_RESOURCE_TYPE);\r\n    if (assignedResources.size() == 1) {\r\n        NumaResourceAllocation numaResourceAllocation = (NumaResourceAllocation) assignedResources.get(0);\r\n        for (Entry<String, Long> nodeAndMemory : numaResourceAllocation.getNodeVsMemory().entrySet()) {\r\n            numaNodeIdVsResource.get(nodeAndMemory.getKey()).recoverMemory(containerId, nodeAndMemory.getValue());\r\n        }\r\n        for (Entry<String, Integer> nodeAndCpus : numaResourceAllocation.getNodeVsCpus().entrySet()) {\r\n            numaNodeIdVsResource.get(nodeAndCpus.getKey()).recoverCpus(containerId, nodeAndCpus.getValue());\r\n        }\r\n    } else {\r\n        LOG.error(\"Unexpected number:\" + assignedResources.size() + \" of assigned numa resources for \" + containerId + \" while recovering.\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "getNumaNodesList",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Collection<NumaNodeResource> getNumaNodesList()\n{\r\n    return numaNodesList;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\recovery",
  "methodName" : "getTask",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "DeletionTask getTask()\n{\r\n    return task;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\recovery",
  "methodName" : "getSuccessorTaskIds",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<Integer> getSuccessorTaskIds()\n{\r\n    return successorTaskIds;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\recovery",
  "methodName" : "getDeletionTimestamp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getDeletionTimestamp()\n{\r\n    return deletionTimestamp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getDiagnostic",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDiagnostic()\n{\r\n    return this.diagnostic;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "preHead",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void preHead(Page.HTML<__> html)\n{\r\n    commonPreHead(html);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "commonPreHead",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void commonPreHead(Page.HTML<__> html)\n{\r\n    set(ACCORDION_ID, \"nav\");\r\n    set(initID(ACCORDION, \"nav\"), \"{autoHeight:false, active:0}\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "nav",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<? extends SubView> nav()\n{\r\n    return NavBlock.class;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\deviceplugin",
  "methodName" : "getHostPath",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getHostPath()\n{\r\n    return hostPath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\deviceplugin",
  "methodName" : "getMountPath",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getMountPath()\n{\r\n    return mountPath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\deviceplugin",
  "methodName" : "getReadOnly",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Boolean getReadOnly()\n{\r\n    return isReadOnly;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\deviceplugin",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "boolean equals(Object o)\n{\r\n    if (this == o) {\r\n        return true;\r\n    }\r\n    if (o == null || getClass() != o.getClass()) {\r\n        return false;\r\n    }\r\n    MountVolumeSpec other = (MountVolumeSpec) o;\r\n    return Objects.equals(hostPath, other.getHostPath()) && Objects.equals(mountPath, other.getMountPath()) && Objects.equals(isReadOnly, other.getReadOnly());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\deviceplugin",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return Objects.hash(hostPath, mountPath, isReadOnly);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\deviceplugin",
  "methodName" : "compareTo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int compareTo(Object o)\n{\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "bootstrap",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void bootstrap(String device, int rootBandwidthMbit, int yarnBandwidthMbit) throws ResourceHandlerException\n{\r\n    if (device == null) {\r\n        throw new ResourceHandlerException(\"device cannot be null!\");\r\n    }\r\n    String tmpDirBase = conf.get(\"hadoop.tmp.dir\");\r\n    if (tmpDirBase == null) {\r\n        throw new ResourceHandlerException(\"hadoop.tmp.dir not set!\");\r\n    }\r\n    tmpDirPath = tmpDirBase + \"/nm-tc-rules\";\r\n    File tmpDir = new File(tmpDirPath);\r\n    if (!(tmpDir.exists() || tmpDir.mkdirs())) {\r\n        LOG.warn(\"Unable to create directory: \" + tmpDirPath);\r\n        throw new ResourceHandlerException(\"Unable to create directory: \" + tmpDirPath);\r\n    }\r\n    this.device = device;\r\n    this.rootBandwidthMbit = rootBandwidthMbit;\r\n    this.yarnBandwidthMbit = yarnBandwidthMbit;\r\n    defaultClassBandwidthMbit = (rootBandwidthMbit - yarnBandwidthMbit) <= 0 ? rootBandwidthMbit : (rootBandwidthMbit - yarnBandwidthMbit);\r\n    boolean recoveryEnabled = conf.getBoolean(YarnConfiguration.NM_RECOVERY_ENABLED, YarnConfiguration.DEFAULT_NM_RECOVERY_ENABLED);\r\n    String state = null;\r\n    if (!recoveryEnabled) {\r\n        LOG.info(\"NM recovery is not enabled. We'll wipe tc state before proceeding.\");\r\n    } else {\r\n        state = readState();\r\n        if (checkIfAlreadyBootstrapped(state)) {\r\n            LOG.info(\"TC configuration is already in place. Not wiping state.\");\r\n            reacquireContainerClasses(state);\r\n            return;\r\n        } else {\r\n            LOG.info(\"TC configuration is incomplete. Wiping tc state before proceeding\");\r\n        }\r\n    }\r\n    wipeState();\r\n    initializeState();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "initializeState",
  "errType" : [ "PrivilegedOperationException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void initializeState() throws ResourceHandlerException\n{\r\n    LOG.info(\"Initializing tc state.\");\r\n    BatchBuilder builder = new BatchBuilder(PrivilegedOperation.OperationType.TC_MODIFY_STATE).addRootQDisc().addCGroupFilter().addClassToRootQDisc(rootBandwidthMbit).addDefaultClass(defaultClassBandwidthMbit, rootBandwidthMbit).addYARNRootClass(yarnBandwidthMbit, yarnBandwidthMbit);\r\n    PrivilegedOperation op = builder.commitBatchToTempFile();\r\n    try {\r\n        privilegedOperationExecutor.executePrivilegedOperation(op, false);\r\n    } catch (PrivilegedOperationException e) {\r\n        LOG.warn(\"Failed to bootstrap outbound bandwidth configuration\");\r\n        throw new ResourceHandlerException(\"Failed to bootstrap outbound bandwidth configuration\", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "checkIfAlreadyBootstrapped",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "boolean checkIfAlreadyBootstrapped(String state) throws ResourceHandlerException\n{\r\n    List<String> regexes = new ArrayList<>();\r\n    regexes.add(String.format(\"^qdisc htb %d: root(.)*$\", ROOT_QDISC_HANDLE));\r\n    regexes.add(String.format(\"^filter parent %d: protocol ip \" + \"(.)*cgroup(.)*$\", ROOT_QDISC_HANDLE));\r\n    regexes.add(String.format(\"^class htb %d:%d root(.)*$\", ROOT_QDISC_HANDLE, ROOT_CLASS_ID));\r\n    regexes.add(String.format(\"^class htb %d:%d parent %d:%d(.)*$\", ROOT_QDISC_HANDLE, DEFAULT_CLASS_ID, ROOT_QDISC_HANDLE, ROOT_CLASS_ID));\r\n    regexes.add(String.format(\"^class htb %d:%d parent %d:%d(.)*$\", ROOT_QDISC_HANDLE, YARN_ROOT_CLASS_ID, ROOT_QDISC_HANDLE, ROOT_CLASS_ID));\r\n    for (String regex : regexes) {\r\n        Pattern pattern = Pattern.compile(regex, Pattern.MULTILINE);\r\n        if (pattern.matcher(state).find()) {\r\n            LOG.debug(\"Matched regex: {}\", regex);\r\n        } else {\r\n            String logLine = new StringBuffer(\"Failed to match regex: \").append(regex).append(\" Current state: \").append(state).toString();\r\n            LOG.warn(logLine);\r\n            return false;\r\n        }\r\n    }\r\n    LOG.info(\"Bootstrap check succeeded\");\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "readState",
  "errType" : [ "PrivilegedOperationException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "String readState() throws ResourceHandlerException\n{\r\n    BatchBuilder builder = new BatchBuilder(PrivilegedOperation.OperationType.TC_READ_STATE).readState();\r\n    PrivilegedOperation op = builder.commitBatchToTempFile();\r\n    try {\r\n        String output = privilegedOperationExecutor.executePrivilegedOperation(op, true);\r\n        LOG.debug(\"TC state: {}\" + output);\r\n        return output;\r\n    } catch (PrivilegedOperationException e) {\r\n        LOG.warn(\"Failed to bootstrap outbound bandwidth rules\");\r\n        throw new ResourceHandlerException(\"Failed to bootstrap outbound bandwidth rules\", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "wipeState",
  "errType" : [ "PrivilegedOperationException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void wipeState() throws ResourceHandlerException\n{\r\n    BatchBuilder builder = new BatchBuilder(PrivilegedOperation.OperationType.TC_MODIFY_STATE).wipeState();\r\n    PrivilegedOperation op = builder.commitBatchToTempFile();\r\n    try {\r\n        LOG.info(\"Wiping tc state.\");\r\n        privilegedOperationExecutor.executePrivilegedOperation(op, false);\r\n    } catch (PrivilegedOperationException e) {\r\n        LOG.warn(\"Failed to wipe tc state. This could happen if the interface\" + \" is already in its default state. Ignoring.\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "reacquireContainerClasses",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void reacquireContainerClasses(String state)\n{\r\n    String tcClassesStr = state.substring(state.indexOf(\"class\"));\r\n    String[] tcClasses = Pattern.compile(\"$\", Pattern.MULTILINE).split(tcClassesStr);\r\n    Pattern tcClassPattern = Pattern.compile(String.format(\"class htb %d:(\\\\d+) .*\", ROOT_QDISC_HANDLE));\r\n    synchronized (classIdSet) {\r\n        for (String tcClassSplit : tcClasses) {\r\n            String tcClass = tcClassSplit.trim();\r\n            if (!tcClass.isEmpty()) {\r\n                Matcher classMatcher = tcClassPattern.matcher(tcClass);\r\n                if (classMatcher.matches()) {\r\n                    int classId = Integer.parseInt(classMatcher.group(1));\r\n                    if (classId >= MIN_CONTAINER_CLASS_ID) {\r\n                        classIdSet.set(classId - MIN_CONTAINER_CLASS_ID);\r\n                        LOG.info(\"Reacquired container classid: \" + classId);\r\n                    }\r\n                } else {\r\n                    LOG.warn(\"Unable to match classid in string:\" + tcClass);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "readStats",
  "errType" : [ "PrivilegedOperationException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "Map<Integer, Integer> readStats() throws ResourceHandlerException\n{\r\n    BatchBuilder builder = new BatchBuilder(PrivilegedOperation.OperationType.TC_READ_STATS).readClasses();\r\n    PrivilegedOperation op = builder.commitBatchToTempFile();\r\n    try {\r\n        String output = privilegedOperationExecutor.executePrivilegedOperation(op, true);\r\n        LOG.debug(\"TC stats output:{}\", output);\r\n        Map<Integer, Integer> classIdBytesStats = parseStatsString(output);\r\n        LOG.debug(\"classId -> bytes sent {}\", classIdBytesStats);\r\n        return classIdBytesStats;\r\n    } catch (PrivilegedOperationException e) {\r\n        LOG.warn(\"Failed to get tc stats\");\r\n        throw new ResourceHandlerException(\"Failed to get tc stats\", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "parseStatsString",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "Map<Integer, Integer> parseStatsString(String stats)\n{\r\n    String[] lines = Pattern.compile(\"$\", Pattern.MULTILINE).split(stats);\r\n    Pattern tcClassPattern = Pattern.compile(String.format(\"class htb %d:(\\\\d+) .*\", ROOT_QDISC_HANDLE));\r\n    Pattern bytesPattern = Pattern.compile(\"Sent (\\\\d+) bytes.*\");\r\n    int currentClassId = -1;\r\n    Map<Integer, Integer> containerClassIdStats = new HashMap<>();\r\n    for (String lineSplit : lines) {\r\n        String line = lineSplit.trim();\r\n        if (!line.isEmpty()) {\r\n            Matcher classMatcher = tcClassPattern.matcher(line);\r\n            if (classMatcher.matches()) {\r\n                int classId = Integer.parseInt(classMatcher.group(1));\r\n                if (classId >= MIN_CONTAINER_CLASS_ID) {\r\n                    currentClassId = classId;\r\n                    continue;\r\n                }\r\n            }\r\n            Matcher bytesMatcher = bytesPattern.matcher(line);\r\n            if (bytesMatcher.matches()) {\r\n                if (currentClassId != -1) {\r\n                    int bytes = Integer.parseInt(bytesMatcher.group(1));\r\n                    containerClassIdStats.put(currentClassId, bytes);\r\n                } else {\r\n                    LOG.warn(\"Matched a 'bytes sent' line outside of a class stats \" + \"segment : \" + line);\r\n                }\r\n                continue;\r\n            }\r\n        }\r\n    }\r\n    return containerClassIdStats;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getStringForAddRootQDisc",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getStringForAddRootQDisc()\n{\r\n    return String.format(FORMAT_QDISC_ADD_TO_ROOT_WITH_DEFAULT, device, ROOT_QDISC_HANDLE, DEFAULT_CLASS_ID);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getStringForaAddCGroupFilter",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getStringForaAddCGroupFilter()\n{\r\n    return String.format(FORMAT_FILTER_CGROUP_ADD_TO_PARENT, device, ROOT_QDISC_HANDLE);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getNextClassId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int getNextClassId() throws ResourceHandlerException\n{\r\n    synchronized (classIdSet) {\r\n        int index = classIdSet.nextClearBit(0);\r\n        if (index >= MAX_CONTAINER_CLASSES) {\r\n            throw new ResourceHandlerException(\"Reached max container classes: \" + MAX_CONTAINER_CLASSES);\r\n        }\r\n        classIdSet.set(index);\r\n        return (index + MIN_CONTAINER_CLASS_ID);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "releaseClassId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void releaseClassId(int classId) throws ResourceHandlerException\n{\r\n    synchronized (classIdSet) {\r\n        int index = classId - MIN_CONTAINER_CLASS_ID;\r\n        if (index < 0 || index >= MAX_CONTAINER_CLASSES) {\r\n            throw new ResourceHandlerException(\"Invalid incoming classId: \" + classId);\r\n        }\r\n        classIdSet.clear(index);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getStringForNetClsClassId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getStringForNetClsClassId(int classId)\n{\r\n    return String.format(FORMAT_NET_CLS_CLASS_ID, ROOT_QDISC_HANDLE, classId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getClassIdFromFileContents",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int getClassIdFromFileContents(String input)\n{\r\n    String classIdStr = String.format(\"%08x\", Integer.parseInt(input));\r\n    LOG.debug(\"ClassId hex string : {}\", classIdStr);\r\n    return Integer.parseInt(classIdStr.substring(4));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getStringForAddClassToRootQDisc",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getStringForAddClassToRootQDisc(int rateMbit)\n{\r\n    String rateMbitStr = rateMbit + MBIT_SUFFIX;\r\n    return String.format(FORMAT_CLASS_ADD_TO_PARENT_WITH_RATES, device, ROOT_QDISC_HANDLE, ZERO_CLASS_ID, ROOT_QDISC_HANDLE, ROOT_CLASS_ID, rateMbitStr, rateMbitStr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getStringForAddDefaultClass",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getStringForAddDefaultClass(int rateMbit, int ceilMbit)\n{\r\n    String rateMbitStr = rateMbit + MBIT_SUFFIX;\r\n    String ceilMbitStr = ceilMbit + MBIT_SUFFIX;\r\n    return String.format(FORMAT_CLASS_ADD_TO_PARENT_WITH_RATES, device, ROOT_QDISC_HANDLE, ROOT_CLASS_ID, ROOT_QDISC_HANDLE, DEFAULT_CLASS_ID, rateMbitStr, ceilMbitStr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getStringForAddYARNRootClass",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getStringForAddYARNRootClass(int rateMbit, int ceilMbit)\n{\r\n    String rateMbitStr = rateMbit + MBIT_SUFFIX;\r\n    String ceilMbitStr = ceilMbit + MBIT_SUFFIX;\r\n    return String.format(FORMAT_CLASS_ADD_TO_PARENT_WITH_RATES, device, ROOT_QDISC_HANDLE, ROOT_CLASS_ID, ROOT_QDISC_HANDLE, YARN_ROOT_CLASS_ID, rateMbitStr, ceilMbitStr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getStringForAddContainerClass",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getStringForAddContainerClass(int classId, int rateMbit, int ceilMbit)\n{\r\n    String rateMbitStr = rateMbit + MBIT_SUFFIX;\r\n    String ceilMbitStr = ceilMbit + MBIT_SUFFIX;\r\n    return String.format(FORMAT_CLASS_ADD_TO_PARENT_WITH_RATES, device, ROOT_QDISC_HANDLE, YARN_ROOT_CLASS_ID, ROOT_QDISC_HANDLE, classId, rateMbitStr, ceilMbitStr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getStringForDeleteContainerClass",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getStringForDeleteContainerClass(int classId)\n{\r\n    return String.format(FORMAT_DELETE_CLASS, device, ROOT_QDISC_HANDLE, classId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getStringForReadState",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getStringForReadState()\n{\r\n    return String.format(FORMAT_READ_STATE, device);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getStringForReadClasses",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getStringForReadClasses()\n{\r\n    return String.format(FORMAT_READ_CLASSES, device);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getStringForWipeState",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getStringForWipeState()\n{\r\n    return String.format(FORMAT_WIPE_STATE, device);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\deviceplugin",
  "methodName" : "getDevicePathInHost",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDevicePathInHost()\n{\r\n    return devicePathInHost;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\deviceplugin",
  "methodName" : "getDevicePathInContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDevicePathInContainer()\n{\r\n    return devicePathInContainer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\deviceplugin",
  "methodName" : "getDevicePermission",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDevicePermission()\n{\r\n    return devicePermission;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\deviceplugin",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "boolean equals(Object o)\n{\r\n    if (this == o) {\r\n        return true;\r\n    }\r\n    if (o == null || getClass() != o.getClass()) {\r\n        return false;\r\n    }\r\n    MountDeviceSpec other = (MountDeviceSpec) o;\r\n    return Objects.equals(devicePathInHost, other.getDevicePathInHost()) && Objects.equals(devicePathInContainer, other.getDevicePathInContainer()) && Objects.equals(devicePermission, other.getDevicePermission());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\deviceplugin",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return Objects.hash(devicePathInContainer, devicePathInHost, devicePermission);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\deviceplugin",
  "methodName" : "compareTo",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int compareTo(Object o)\n{\r\n    if (o == null || (!(o instanceof MountDeviceSpec))) {\r\n        return -1;\r\n    }\r\n    MountDeviceSpec other = (MountDeviceSpec) o;\r\n    int result = devicePathInContainer.compareTo(other.getDevicePathInContainer());\r\n    if (0 != result) {\r\n        return result;\r\n    }\r\n    result = devicePathInHost.compareTo(other.getDevicePathInHost());\r\n    if (0 != result) {\r\n        return result;\r\n    }\r\n    return devicePermission.compareTo(other.getDevicePermission());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\privileged",
  "methodName" : "getContainerExecutorExecutablePath",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String getContainerExecutorExecutablePath(Configuration conf)\n{\r\n    String yarnHomeEnvVar = System.getenv(ApplicationConstants.Environment.HADOOP_YARN_HOME.key());\r\n    File hadoopBin = new File(yarnHomeEnvVar, \"bin\");\r\n    String defaultPath = new File(hadoopBin, \"container-executor\").getAbsolutePath();\r\n    return null == conf ? defaultPath : conf.get(YarnConfiguration.NM_LINUX_CONTAINER_EXECUTOR_PATH, defaultPath);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\privileged",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void init(Configuration conf)\n{\r\n    containerExecutorExe = getContainerExecutorExecutablePath(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\privileged",
  "methodName" : "getInstance",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PrivilegedOperationExecutor getInstance(Configuration conf)\n{\r\n    if (instance == null) {\r\n        synchronized (PrivilegedOperationExecutor.class) {\r\n            if (instance == null) {\r\n                instance = new PrivilegedOperationExecutor(conf);\r\n            }\r\n        }\r\n    }\r\n    return instance;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\privileged",
  "methodName" : "getPrivilegedOperationExecutionCommand",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "String[] getPrivilegedOperationExecutionCommand(List<String> prefixCommands, PrivilegedOperation operation)\n{\r\n    List<String> fullCommand = new ArrayList<String>();\r\n    if (prefixCommands != null && !prefixCommands.isEmpty()) {\r\n        fullCommand.addAll(prefixCommands);\r\n    }\r\n    fullCommand.add(containerExecutorExe);\r\n    String cliSwitch = operation.getOperationType().getOption();\r\n    if (!cliSwitch.isEmpty()) {\r\n        fullCommand.add(cliSwitch);\r\n    }\r\n    fullCommand.addAll(operation.getArguments());\r\n    String[] fullCommandArray = fullCommand.toArray(new String[fullCommand.size()]);\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(\"Privileged Execution Command Array: \" + Arrays.toString(fullCommandArray));\r\n    }\r\n    return fullCommandArray;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\privileged",
  "methodName" : "executePrivilegedOperation",
  "errType" : [ "ExitCodeException", "IOException" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "String executePrivilegedOperation(List<String> prefixCommands, PrivilegedOperation operation, File workingDir, Map<String, String> env, boolean grabOutput, boolean inheritParentEnv) throws PrivilegedOperationException\n{\r\n    String[] fullCommandArray = getPrivilegedOperationExecutionCommand(prefixCommands, operation);\r\n    ShellCommandExecutor exec = new ShellCommandExecutor(fullCommandArray, workingDir, env, 0L, inheritParentEnv);\r\n    try {\r\n        exec.execute();\r\n        if (LOG.isDebugEnabled()) {\r\n            LOG.debug(\"command array:\");\r\n            LOG.debug(Arrays.toString(fullCommandArray));\r\n            LOG.debug(\"Privileged Execution Operation Output:\");\r\n            LOG.debug(exec.getOutput());\r\n        }\r\n    } catch (ExitCodeException e) {\r\n        if (operation.isFailureLoggingEnabled()) {\r\n            StringBuilder logBuilder = new StringBuilder(\"Shell execution returned \" + \"exit code: \").append(exec.getExitCode()).append(\". Privileged Execution Operation Stderr: \").append(System.lineSeparator()).append(e.getMessage()).append(System.lineSeparator()).append(\"Stdout: \" + exec.getOutput()).append(System.lineSeparator());\r\n            logBuilder.append(\"Full command array for failed execution: \").append(System.lineSeparator());\r\n            logBuilder.append(Arrays.toString(fullCommandArray));\r\n            LOG.warn(logBuilder.toString());\r\n        }\r\n        throw new PrivilegedOperationException(e, e.getExitCode(), exec.getOutput(), e.getMessage());\r\n    } catch (IOException e) {\r\n        LOG.warn(\"IOException executing command: \", e);\r\n        throw new PrivilegedOperationException(e);\r\n    }\r\n    if (grabOutput) {\r\n        return exec.getOutput();\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\privileged",
  "methodName" : "executePrivilegedOperation",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String executePrivilegedOperation(PrivilegedOperation operation, boolean grabOutput) throws PrivilegedOperationException\n{\r\n    return executePrivilegedOperation(null, operation, null, null, grabOutput, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\privileged",
  "methodName" : "executePrivilegedInteractiveOperation",
  "errType" : [ "ExitCodeException", "IOException" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "IOStreamPair executePrivilegedInteractiveOperation(List<String> prefixCommands, PrivilegedOperation operation) throws PrivilegedOperationException, InterruptedException\n{\r\n    String[] fullCommandArray = getPrivilegedOperationExecutionCommand(prefixCommands, operation);\r\n    ProcessBuilder pb = new ProcessBuilder(fullCommandArray);\r\n    OutputStream stdin;\r\n    InputStream stdout;\r\n    try {\r\n        pb.redirectErrorStream(true);\r\n        Process p = pb.start();\r\n        stdin = p.getOutputStream();\r\n        stdout = p.getInputStream();\r\n        if (LOG.isDebugEnabled()) {\r\n            LOG.debug(\"command array:\");\r\n            LOG.debug(Arrays.toString(fullCommandArray));\r\n        }\r\n    } catch (ExitCodeException e) {\r\n        if (operation.isFailureLoggingEnabled()) {\r\n            StringBuilder logBuilder = new StringBuilder(\"Interactive Shell execution returned exit code: \").append(e.getExitCode()).append(\". Privileged Interactive Operation Stderr: \").append(System.lineSeparator()).append(e.getMessage()).append(System.lineSeparator());\r\n            logBuilder.append(\"Full command array for failed execution: \").append(System.lineSeparator());\r\n            logBuilder.append(Arrays.toString(fullCommandArray));\r\n            LOG.warn(logBuilder.toString());\r\n        }\r\n        throw new PrivilegedOperationException(e, e.getExitCode(), pb.redirectError().toString(), e.getMessage());\r\n    } catch (IOException e) {\r\n        LOG.warn(\"IOException executing command: \", e);\r\n        throw new PrivilegedOperationException(e);\r\n    }\r\n    return new IOStreamPair(stdout, stdin);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\privileged",
  "methodName" : "squashCGroupOperations",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "PrivilegedOperation squashCGroupOperations(List<PrivilegedOperation> ops) throws PrivilegedOperationException\n{\r\n    if (ops.size() == 0) {\r\n        return null;\r\n    }\r\n    StringBuffer finalOpArg = new StringBuffer(PrivilegedOperation.CGROUP_ARG_PREFIX);\r\n    boolean noTasks = true;\r\n    for (PrivilegedOperation op : ops) {\r\n        if (!op.getOperationType().equals(PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP)) {\r\n            LOG.warn(\"Unsupported operation type: \" + op.getOperationType());\r\n            throw new PrivilegedOperationException(\"Unsupported operation type:\" + op.getOperationType());\r\n        }\r\n        List<String> args = op.getArguments();\r\n        if (args.size() != 1) {\r\n            LOG.warn(\"Invalid number of args: \" + args.size());\r\n            throw new PrivilegedOperationException(\"Invalid number of args: \" + args.size());\r\n        }\r\n        String arg = args.get(0);\r\n        String tasksFile = StringUtils.substringAfter(arg, PrivilegedOperation.CGROUP_ARG_PREFIX);\r\n        if (tasksFile == null || tasksFile.isEmpty()) {\r\n            LOG.warn(\"Invalid argument: \" + arg);\r\n            throw new PrivilegedOperationException(\"Invalid argument: \" + arg);\r\n        }\r\n        if (tasksFile.equals(PrivilegedOperation.CGROUP_ARG_NO_TASKS)) {\r\n            continue;\r\n        }\r\n        if (noTasks == false) {\r\n            finalOpArg.append(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR);\r\n            finalOpArg.append(tasksFile);\r\n        } else {\r\n            finalOpArg.append(tasksFile);\r\n            noTasks = false;\r\n        }\r\n    }\r\n    if (noTasks) {\r\n        finalOpArg.append(PrivilegedOperation.CGROUP_ARG_NO_TASKS);\r\n    }\r\n    PrivilegedOperation finalOp = new PrivilegedOperation(PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP, finalOpArg.toString());\r\n    return finalOp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "init",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 28,
  "sourceCodeText" : "void init(AMRMProxyApplicationContext appContext)\n{\r\n    super.init(appContext);\r\n    LOG.info(\"Initializing Federation Interceptor\");\r\n    Configuration conf = appContext.getConf();\r\n    if (conf == null) {\r\n        conf = getConf();\r\n    } else {\r\n        setConf(conf);\r\n    }\r\n    UserGroupInformation appOwner;\r\n    try {\r\n        appOwner = UserGroupInformation.createProxyUser(appContext.getUser(), UserGroupInformation.getCurrentUser());\r\n    } catch (Exception ex) {\r\n        throw new YarnRuntimeException(ex);\r\n    }\r\n    if (appContext.getRegistryClient() != null) {\r\n        this.registryClient = new FederationRegistryClient(conf, appContext.getRegistryClient(), appOwner);\r\n        if (appContext.getCredentials() != null) {\r\n            appOwner.addCredentials(appContext.getCredentials());\r\n        }\r\n    }\r\n    this.attemptId = appContext.getApplicationAttemptId();\r\n    ApplicationId appId = this.attemptId.getApplicationId();\r\n    this.homeSubClusterId = SubClusterId.newInstance(YarnConfiguration.getClusterId(conf));\r\n    this.homeRMRelayer = new AMRMClientRelayer(createHomeRMProxy(appContext, ApplicationMasterProtocol.class, appOwner), appId, this.homeSubClusterId.toString());\r\n    this.homeHeartbeartHandler = createHomeHeartbeartHandler(conf, appId, this.homeRMRelayer);\r\n    this.homeHeartbeartHandler.setUGI(appOwner);\r\n    this.homeHeartbeartHandler.setDaemon(true);\r\n    this.homeHeartbeartHandler.start();\r\n    this.lastAllocateResponse = RECORD_FACTORY.newRecordInstance(AllocateResponse.class);\r\n    this.lastAllocateResponse.setResponseId(AMRMClientUtils.PRE_REGISTER_RESPONSE_ID);\r\n    this.federationFacade = FederationStateStoreFacade.getInstance();\r\n    this.subClusterResolver = this.federationFacade.getSubClusterResolver();\r\n    this.policyInterpreter = null;\r\n    this.uamPool.init(conf);\r\n    this.uamPool.start();\r\n    this.heartbeatMaxWaitTimeMs = conf.getLong(YarnConfiguration.FEDERATION_AMRMPROXY_HB_MAX_WAIT_MS, YarnConfiguration.DEFAULT_FEDERATION_AMRMPROXY_HB_MAX_WAIT_MS);\r\n    this.subClusterTimeOut = conf.getLong(YarnConfiguration.FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT, YarnConfiguration.DEFAULT_FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT);\r\n    if (this.subClusterTimeOut <= 0) {\r\n        LOG.info(\"{} configured to be {}, should be positive. Using default of {}.\", YarnConfiguration.FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT, this.subClusterTimeOut, YarnConfiguration.DEFAULT_FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT);\r\n        this.subClusterTimeOut = YarnConfiguration.DEFAULT_FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT;\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "recover",
  "errType" : [ "IOException|YarnException", "Exception" ],
  "containingMethodsNum" : 41,
  "sourceCodeText" : "void recover(Map<String, byte[]> recoveredDataMap)\n{\r\n    super.recover(recoveredDataMap);\r\n    LOG.info(\"Recovering data for FederationInterceptor for {}\", this.attemptId);\r\n    this.justRecovered = true;\r\n    if (recoveredDataMap == null) {\r\n        return;\r\n    }\r\n    try {\r\n        if (recoveredDataMap.containsKey(NMSS_REG_REQUEST_KEY)) {\r\n            RegisterApplicationMasterRequestProto pb = RegisterApplicationMasterRequestProto.parseFrom(recoveredDataMap.get(NMSS_REG_REQUEST_KEY));\r\n            this.amRegistrationRequest = new RegisterApplicationMasterRequestPBImpl(pb);\r\n            LOG.info(\"amRegistrationRequest recovered for {}\", this.attemptId);\r\n            this.homeRMRelayer.setAMRegistrationRequest(this.amRegistrationRequest);\r\n        }\r\n        if (recoveredDataMap.containsKey(NMSS_REG_RESPONSE_KEY)) {\r\n            RegisterApplicationMasterResponseProto pb = RegisterApplicationMasterResponseProto.parseFrom(recoveredDataMap.get(NMSS_REG_RESPONSE_KEY));\r\n            this.amRegistrationResponse = new RegisterApplicationMasterResponsePBImpl(pb);\r\n            LOG.info(\"amRegistrationResponse recovered for {}\", this.attemptId);\r\n        }\r\n        Map<String, Token<AMRMTokenIdentifier>> uamMap;\r\n        if (this.registryClient != null) {\r\n            uamMap = this.registryClient.loadStateFromRegistry(this.attemptId.getApplicationId());\r\n            LOG.info(\"Found {} existing UAMs for application {} in Yarn Registry\", uamMap.size(), this.attemptId.getApplicationId());\r\n        } else {\r\n            uamMap = new HashMap<>();\r\n            for (Entry<String, byte[]> entry : recoveredDataMap.entrySet()) {\r\n                if (entry.getKey().startsWith(NMSS_SECONDARY_SC_PREFIX)) {\r\n                    String scId = entry.getKey().substring(NMSS_SECONDARY_SC_PREFIX.length());\r\n                    Token<AMRMTokenIdentifier> amrmToken = new Token<>();\r\n                    amrmToken.decodeFromUrlString(new String(entry.getValue(), STRING_TO_BYTE_FORMAT));\r\n                    uamMap.put(scId, amrmToken);\r\n                    LOG.debug(\"Recovered UAM in {} from NMSS\", scId);\r\n                }\r\n            }\r\n            LOG.info(\"Found {} existing UAMs for application {} in NMStateStore\", uamMap.size(), this.attemptId.getApplicationId());\r\n        }\r\n        int containers = 0;\r\n        for (Map.Entry<String, Token<AMRMTokenIdentifier>> entry : uamMap.entrySet()) {\r\n            SubClusterId subClusterId = SubClusterId.newInstance(entry.getKey());\r\n            YarnConfiguration config = new YarnConfiguration(getConf());\r\n            FederationProxyProviderUtil.updateConfForFederation(config, subClusterId.getId());\r\n            try {\r\n                this.uamPool.reAttachUAM(subClusterId.getId(), config, this.attemptId.getApplicationId(), this.amRegistrationResponse.getQueue(), getApplicationContext().getUser(), this.homeSubClusterId.getId(), entry.getValue(), subClusterId.toString());\r\n                this.secondaryRelayers.put(subClusterId.getId(), this.uamPool.getAMRMClientRelayer(subClusterId.getId()));\r\n                RegisterApplicationMasterResponse response = this.uamPool.registerApplicationMaster(subClusterId.getId(), this.amRegistrationRequest);\r\n                lastSCResponseTime.put(subClusterId, clock.getTime() - subClusterTimeOut);\r\n                for (Container container : response.getContainersFromPreviousAttempts()) {\r\n                    containerIdToSubClusterIdMap.put(container.getId(), subClusterId);\r\n                    containers++;\r\n                    LOG.debug(\"  From subcluster {} running container {}\", subClusterId, container.getId());\r\n                }\r\n                LOG.info(\"Recovered {} running containers from UAM in {}\", response.getContainersFromPreviousAttempts().size(), subClusterId);\r\n            } catch (Exception e) {\r\n                LOG.error(\"Error reattaching UAM to \" + subClusterId + \" for \" + this.attemptId, e);\r\n            }\r\n        }\r\n        UserGroupInformation appSubmitter = UserGroupInformation.createRemoteUser(getApplicationContext().getUser());\r\n        ApplicationClientProtocol rmClient = createHomeRMProxy(getApplicationContext(), ApplicationClientProtocol.class, appSubmitter);\r\n        GetContainersResponse response = rmClient.getContainers(GetContainersRequest.newInstance(this.attemptId));\r\n        for (ContainerReport container : response.getContainerList()) {\r\n            containerIdToSubClusterIdMap.put(container.getContainerId(), this.homeSubClusterId);\r\n            containers++;\r\n            LOG.debug(\"  From home RM {} running container {}\", this.homeSubClusterId, container.getContainerId());\r\n        }\r\n        LOG.info(\"{} running containers including AM recovered from home RM {}\", response.getContainerList().size(), this.homeSubClusterId);\r\n        LOG.info(\"In all {} UAMs {} running containers including AM recovered for {}\", uamMap.size(), containers, this.attemptId);\r\n        if (this.amRegistrationResponse != null) {\r\n            String queue = this.amRegistrationResponse.getQueue();\r\n            this.policyInterpreter = FederationPolicyUtils.loadAMRMPolicy(queue, this.policyInterpreter, getConf(), this.federationFacade, this.homeSubClusterId);\r\n        }\r\n    } catch (IOException | YarnException e) {\r\n        throw new YarnRuntimeException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "registerApplicationMaster",
  "errType" : [ "Exception", "Exception", "FederationPolicyInitializationException" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "RegisterApplicationMasterResponse registerApplicationMaster(RegisterApplicationMasterRequest request) throws YarnException, IOException\n{\r\n    synchronized (this.lastAllocateResponseLock) {\r\n        this.lastAllocateResponse.setResponseId(0);\r\n    }\r\n    this.justRecovered = false;\r\n    if (this.amRegistrationRequest != null) {\r\n        if (!this.amRegistrationRequest.equals(request)) {\r\n            throw new YarnException(\"AM should not call \" + \"registerApplicationMaster with a different request body\");\r\n        }\r\n    } else {\r\n        this.amRegistrationRequest = request;\r\n        if (getNMStateStore() != null) {\r\n            try {\r\n                RegisterApplicationMasterRequestPBImpl pb = (RegisterApplicationMasterRequestPBImpl) this.amRegistrationRequest;\r\n                getNMStateStore().storeAMRMProxyAppContextEntry(this.attemptId, NMSS_REG_REQUEST_KEY, pb.getProto().toByteArray());\r\n            } catch (Exception e) {\r\n                LOG.error(\"Error storing AMRMProxy application context entry for \" + this.attemptId, e);\r\n            }\r\n        }\r\n    }\r\n    if (this.amRegistrationResponse != null) {\r\n        return this.amRegistrationResponse;\r\n    }\r\n    this.amRegistrationResponse = this.homeRMRelayer.registerApplicationMaster(request);\r\n    if (this.amRegistrationResponse.getContainersFromPreviousAttempts() != null) {\r\n        cacheAllocatedContainers(this.amRegistrationResponse.getContainersFromPreviousAttempts(), this.homeSubClusterId);\r\n    }\r\n    ApplicationId appId = this.attemptId.getApplicationId();\r\n    reAttachUAMAndMergeRegisterResponse(this.amRegistrationResponse, appId);\r\n    if (getNMStateStore() != null) {\r\n        try {\r\n            RegisterApplicationMasterResponsePBImpl pb = (RegisterApplicationMasterResponsePBImpl) this.amRegistrationResponse;\r\n            getNMStateStore().storeAMRMProxyAppContextEntry(this.attemptId, NMSS_REG_RESPONSE_KEY, pb.getProto().toByteArray());\r\n        } catch (Exception e) {\r\n            LOG.error(\"Error storing AMRMProxy application context entry for \" + this.attemptId, e);\r\n        }\r\n    }\r\n    String queue = this.amRegistrationResponse.getQueue();\r\n    if (queue == null) {\r\n        LOG.warn(\"Received null queue for application \" + appId + \" from home subcluster. Will use default queue name \" + YarnConfiguration.DEFAULT_QUEUE_NAME + \" for getting AMRMProxyPolicy\");\r\n    } else {\r\n        LOG.info(\"Application \" + appId + \" belongs to queue \" + queue);\r\n    }\r\n    try {\r\n        this.policyInterpreter = FederationPolicyUtils.loadAMRMPolicy(queue, this.policyInterpreter, getConf(), this.federationFacade, this.homeSubClusterId);\r\n    } catch (FederationPolicyInitializationException e) {\r\n        throw new YarnRuntimeException(e);\r\n    }\r\n    return this.amRegistrationResponse;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "allocate",
  "errType" : [ "Throwable", "InterruptedException", "InterruptedException" ],
  "containingMethodsNum" : 23,
  "sourceCodeText" : "AllocateResponse allocate(AllocateRequest request) throws YarnException, IOException\n{\r\n    Preconditions.checkArgument(this.policyInterpreter != null, \"Allocate should be called after registerApplicationMaster\");\r\n    this.lastAMHeartbeatTime = this.clock.getTime();\r\n    if (this.justRecovered) {\r\n        throw new ApplicationMasterNotRegisteredException(\"AMRMProxy just restarted and recovered for \" + this.attemptId + \". AM should re-register and full re-send pending requests.\");\r\n    }\r\n    if (this.finishAMCalled) {\r\n        LOG.warn(\"FinishApplicationMaster already called by {}, skip heartbeat \" + \"processing and return dummy response\" + this.attemptId);\r\n        return RECORD_FACTORY.newRecordInstance(AllocateResponse.class);\r\n    }\r\n    synchronized (this.lastAllocateResponseLock) {\r\n        LOG.info(\"Heartbeat from \" + this.attemptId + \" with responseId \" + request.getResponseId() + \" when we are expecting \" + this.lastAllocateResponse.getResponseId());\r\n        if (AMRMClientUtils.getNextResponseId(request.getResponseId()) == this.lastAllocateResponse.getResponseId()) {\r\n            return this.lastAllocateResponse;\r\n        } else if (request.getResponseId() != this.lastAllocateResponse.getResponseId()) {\r\n            throw new InvalidApplicationMasterRequestException(AMRMClientUtils.assembleInvalidResponseIdExceptionMessage(attemptId, this.lastAllocateResponse.getResponseId(), request.getResponseId()));\r\n        }\r\n    }\r\n    try {\r\n        Map<SubClusterId, AllocateRequest> requests = splitAllocateRequest(request);\r\n        sendRequestsToResourceManagers(requests);\r\n        long startTime = this.clock.getTime();\r\n        synchronized (this.asyncResponseSink) {\r\n            try {\r\n                this.asyncResponseSink.wait(this.heartbeatMaxWaitTimeMs);\r\n            } catch (InterruptedException e) {\r\n            }\r\n        }\r\n        long firstResponseTime = this.clock.getTime() - startTime;\r\n        try {\r\n            Thread.sleep(firstResponseTime);\r\n        } catch (InterruptedException e) {\r\n        }\r\n        AllocateResponse response = generateBaseAllocationResponse();\r\n        mergeAllocateResponses(response);\r\n        if (!isNullOrEmpty(this.uamRegistrations)) {\r\n            Map<SubClusterId, RegisterApplicationMasterResponse> newRegistrations;\r\n            synchronized (this.uamRegistrations) {\r\n                newRegistrations = new HashMap<>(this.uamRegistrations);\r\n                this.uamRegistrations.clear();\r\n            }\r\n            mergeRegistrationResponses(response, newRegistrations);\r\n        }\r\n        synchronized (this.lastAllocateResponseLock) {\r\n            response.setResponseId(AMRMClientUtils.getNextResponseId(this.lastAllocateResponse.getResponseId()));\r\n            this.lastAllocateResponse = response;\r\n        }\r\n        return response;\r\n    } catch (Throwable ex) {\r\n        LOG.error(\"Exception encountered while processing heart beat for \" + this.attemptId, ex);\r\n        throw new YarnException(ex);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "finishApplicationMaster",
  "errType" : [ "Throwable", "Throwable" ],
  "containingMethodsNum" : 18,
  "sourceCodeText" : "FinishApplicationMasterResponse finishApplicationMaster(FinishApplicationMasterRequest request) throws YarnException, IOException\n{\r\n    this.finishAMCalled = true;\r\n    boolean failedToUnRegister = false;\r\n    ExecutorCompletionService<FinishApplicationMasterResponseInfo> compSvc = null;\r\n    Set<String> subClusterIds = this.uamPool.getAllUAMIds();\r\n    if (subClusterIds.size() > 0) {\r\n        final FinishApplicationMasterRequest finishRequest = request;\r\n        compSvc = new ExecutorCompletionService<FinishApplicationMasterResponseInfo>(this.threadpool);\r\n        LOG.info(\"Sending finish application request to {} sub-cluster RMs\", subClusterIds.size());\r\n        for (final String subClusterId : subClusterIds) {\r\n            compSvc.submit(new Callable<FinishApplicationMasterResponseInfo>() {\r\n\r\n                @Override\r\n                public FinishApplicationMasterResponseInfo call() throws Exception {\r\n                    LOG.info(\"Sending finish application request to RM {}\", subClusterId);\r\n                    FinishApplicationMasterResponse uamResponse = null;\r\n                    try {\r\n                        uamResponse = uamPool.finishApplicationMaster(subClusterId, finishRequest);\r\n                        if (uamResponse.getIsUnregistered()) {\r\n                            secondaryRelayers.remove(subClusterId);\r\n                            if (getNMStateStore() != null) {\r\n                                getNMStateStore().removeAMRMProxyAppContextEntry(attemptId, NMSS_SECONDARY_SC_PREFIX + subClusterId);\r\n                            }\r\n                        }\r\n                    } catch (Throwable e) {\r\n                        LOG.warn(\"Failed to finish unmanaged application master: \" + \"RM address: \" + subClusterId + \" ApplicationId: \" + attemptId, e);\r\n                    }\r\n                    return new FinishApplicationMasterResponseInfo(uamResponse, subClusterId);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    FinishApplicationMasterResponse homeResponse = this.homeRMRelayer.finishApplicationMaster(request);\r\n    this.homeHeartbeartHandler.shutdown();\r\n    if (subClusterIds.size() > 0) {\r\n        LOG.info(\"Waiting for finish application response from {} sub-cluster RMs\", subClusterIds.size());\r\n        for (int i = 0; i < subClusterIds.size(); ++i) {\r\n            try {\r\n                Future<FinishApplicationMasterResponseInfo> future = compSvc.take();\r\n                FinishApplicationMasterResponseInfo uamResponse = future.get();\r\n                LOG.debug(\"Received finish application response from RM: {}\", uamResponse.getSubClusterId());\r\n                if (uamResponse.getResponse() == null || !uamResponse.getResponse().getIsUnregistered()) {\r\n                    failedToUnRegister = true;\r\n                }\r\n            } catch (Throwable e) {\r\n                failedToUnRegister = true;\r\n                LOG.warn(\"Failed to finish unmanaged application master: \" + \" ApplicationId: \" + this.attemptId, e);\r\n            }\r\n        }\r\n    }\r\n    if (failedToUnRegister) {\r\n        homeResponse.setIsUnregistered(false);\r\n    } else {\r\n        this.uamPool.stop();\r\n        if (this.registryClient != null) {\r\n            this.registryClient.removeAppFromRegistry(this.attemptId.getApplicationId());\r\n        }\r\n    }\r\n    return homeResponse;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "setNextInterceptor",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNextInterceptor(RequestInterceptor next)\n{\r\n    throw new YarnRuntimeException(\"setNextInterceptor is being called on FederationInterceptor. \" + \"It should always be used as the last interceptor in the chain\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "shutdown",
  "errType" : [ "YarnException", "Throwable" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void shutdown()\n{\r\n    LOG.info(\"Shutting down FederationInterceptor for {}\", this.attemptId);\r\n    try {\r\n        this.uamPool.shutDownConnections();\r\n    } catch (YarnException e) {\r\n        LOG.error(\"Error shutting down all UAM clients without killing them\", e);\r\n    }\r\n    if (this.threadpool != null) {\r\n        try {\r\n            this.threadpool.shutdown();\r\n        } catch (Throwable ex) {\r\n        }\r\n        this.threadpool = null;\r\n    }\r\n    this.homeHeartbeartHandler.shutdown();\r\n    this.homeRMRelayer.shutdown();\r\n    super.shutdown();\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "cleanupRegistry",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void cleanupRegistry()\n{\r\n    if (this.registryClient != null) {\r\n        this.registryClient.cleanAllApplications();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getRegistryClient",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "FederationRegistryClient getRegistryClient()\n{\r\n    return this.registryClient;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getAttemptId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationAttemptId getAttemptId()\n{\r\n    return this.attemptId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getHomeHeartbeartHandler",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AMHeartbeatRequestHandler getHomeHeartbeartHandler()\n{\r\n    return this.homeHeartbeartHandler;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "createUnmanagedAMPoolManager",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "UnmanagedAMPoolManager createUnmanagedAMPoolManager(ExecutorService threadPool)\n{\r\n    return new UnmanagedAMPoolManager(threadPool);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "createHomeHeartbeartHandler",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AMHeartbeatRequestHandler createHomeHeartbeartHandler(Configuration conf, ApplicationId appId, AMRMClientRelayer rmProxyRelayer)\n{\r\n    return new AMHeartbeatRequestHandler(conf, appId, rmProxyRelayer);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "createHomeRMProxy",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "T createHomeRMProxy(AMRMProxyApplicationContext appContext, Class<T> protocol, UserGroupInformation user)\n{\r\n    try {\r\n        return FederationProxyProviderUtil.createRMProxy(appContext.getConf(), protocol, this.homeSubClusterId, user, appContext.getAMRMToken());\r\n    } catch (Exception ex) {\r\n        throw new YarnRuntimeException(ex);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "mergeRegisterResponse",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void mergeRegisterResponse(RegisterApplicationMasterResponse homeResponse, RegisterApplicationMasterResponse otherResponse)\n{\r\n    if (!isNullOrEmpty(otherResponse.getContainersFromPreviousAttempts())) {\r\n        if (!isNullOrEmpty(homeResponse.getContainersFromPreviousAttempts())) {\r\n            homeResponse.getContainersFromPreviousAttempts().addAll(otherResponse.getContainersFromPreviousAttempts());\r\n        } else {\r\n            homeResponse.setContainersFromPreviousAttempts(otherResponse.getContainersFromPreviousAttempts());\r\n        }\r\n    }\r\n    if (!isNullOrEmpty(otherResponse.getNMTokensFromPreviousAttempts())) {\r\n        if (!isNullOrEmpty(homeResponse.getNMTokensFromPreviousAttempts())) {\r\n            homeResponse.getNMTokensFromPreviousAttempts().addAll(otherResponse.getNMTokensFromPreviousAttempts());\r\n        } else {\r\n            homeResponse.setNMTokensFromPreviousAttempts(otherResponse.getNMTokensFromPreviousAttempts());\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "reAttachUAMAndMergeRegisterResponse",
  "errType" : [ "Throwable", "Exception" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void reAttachUAMAndMergeRegisterResponse(RegisterApplicationMasterResponse homeResponse, final ApplicationId appId)\n{\r\n    if (this.registryClient == null) {\r\n        LOG.warn(\"registryClient is null, skip attaching existing UAM if any\");\r\n        return;\r\n    }\r\n    Map<String, Token<AMRMTokenIdentifier>> uamMap = this.registryClient.loadStateFromRegistry(appId);\r\n    if (uamMap.size() == 0) {\r\n        LOG.info(\"No existing UAM for application {} found in Yarn Registry\", appId);\r\n        return;\r\n    }\r\n    LOG.info(\"Found {} existing UAMs for application {} in Yarn Registry. \" + \"Reattaching in parallel\", uamMap.size(), appId);\r\n    ExecutorCompletionService<RegisterApplicationMasterResponse> completionService = new ExecutorCompletionService<>(this.threadpool);\r\n    for (Entry<String, Token<AMRMTokenIdentifier>> entry : uamMap.entrySet()) {\r\n        final SubClusterId subClusterId = SubClusterId.newInstance(entry.getKey());\r\n        final Token<AMRMTokenIdentifier> amrmToken = entry.getValue();\r\n        completionService.submit(new Callable<RegisterApplicationMasterResponse>() {\r\n\r\n            @Override\r\n            public RegisterApplicationMasterResponse call() throws Exception {\r\n                RegisterApplicationMasterResponse response = null;\r\n                try {\r\n                    YarnConfiguration config = new YarnConfiguration(getConf());\r\n                    FederationProxyProviderUtil.updateConfForFederation(config, subClusterId.getId());\r\n                    uamPool.reAttachUAM(subClusterId.getId(), config, appId, amRegistrationResponse.getQueue(), getApplicationContext().getUser(), homeSubClusterId.getId(), amrmToken, subClusterId.toString());\r\n                    secondaryRelayers.put(subClusterId.getId(), uamPool.getAMRMClientRelayer(subClusterId.getId()));\r\n                    response = uamPool.registerApplicationMaster(subClusterId.getId(), amRegistrationRequest);\r\n                    lastSCResponseTime.put(subClusterId, clock.getTime() - subClusterTimeOut);\r\n                    if (response != null && response.getContainersFromPreviousAttempts() != null) {\r\n                        cacheAllocatedContainers(response.getContainersFromPreviousAttempts(), subClusterId);\r\n                    }\r\n                    LOG.info(\"UAM {} reattached for {}\", subClusterId, appId);\r\n                } catch (Throwable e) {\r\n                    LOG.error(\"Reattaching UAM \" + subClusterId + \" failed for \" + appId, e);\r\n                }\r\n                return response;\r\n            }\r\n        });\r\n    }\r\n    for (int i = 0; i < uamMap.size(); i++) {\r\n        try {\r\n            Future<RegisterApplicationMasterResponse> future = completionService.take();\r\n            RegisterApplicationMasterResponse registerResponse = future.get();\r\n            if (registerResponse != null) {\r\n                LOG.info(\"Merging register response for {}\", appId);\r\n                mergeRegisterResponse(homeResponse, registerResponse);\r\n            }\r\n        } catch (Exception e) {\r\n            LOG.warn(\"Reattaching UAM failed for ApplicationId: \" + appId, e);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getSubClusterForNode",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "SubClusterId getSubClusterForNode(String nodeName)\n{\r\n    SubClusterId subClusterId = null;\r\n    try {\r\n        subClusterId = this.subClusterResolver.getSubClusterForNode(nodeName);\r\n    } catch (YarnException e) {\r\n        LOG.error(\"Failed to resolve sub-cluster for node \" + nodeName + \", skipping this node\", e);\r\n        return null;\r\n    }\r\n    if (subClusterId == null) {\r\n        LOG.error(\"Failed to resolve sub-cluster for node {}, skipping this node\", nodeName);\r\n        return null;\r\n    }\r\n    return subClusterId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "splitAllocateRequest",
  "errType" : null,
  "containingMethodsNum" : 31,
  "sourceCodeText" : "Map<SubClusterId, AllocateRequest> splitAllocateRequest(AllocateRequest request) throws YarnException\n{\r\n    Map<SubClusterId, AllocateRequest> requestMap = new HashMap<SubClusterId, AllocateRequest>();\r\n    findOrCreateAllocateRequestForSubCluster(this.homeSubClusterId, request, requestMap);\r\n    Set<String> subClusterIds = this.uamPool.getAllUAMIds();\r\n    for (String subClusterId : subClusterIds) {\r\n        findOrCreateAllocateRequestForSubCluster(SubClusterId.newInstance(subClusterId), request, requestMap);\r\n    }\r\n    if (!isNullOrEmpty(request.getAskList())) {\r\n        Map<SubClusterId, List<ResourceRequest>> asks = splitResourceRequests(request.getAskList());\r\n        for (Entry<SubClusterId, List<ResourceRequest>> entry : asks.entrySet()) {\r\n            AllocateRequest newRequest = findOrCreateAllocateRequestForSubCluster(entry.getKey(), request, requestMap);\r\n            newRequest.getAskList().addAll(entry.getValue());\r\n        }\r\n    }\r\n    if (request.getResourceBlacklistRequest() != null) {\r\n        if (!isNullOrEmpty(request.getResourceBlacklistRequest().getBlacklistAdditions())) {\r\n            for (String resourceName : request.getResourceBlacklistRequest().getBlacklistAdditions()) {\r\n                SubClusterId subClusterId = getSubClusterForNode(resourceName);\r\n                if (subClusterId != null) {\r\n                    AllocateRequest newRequest = findOrCreateAllocateRequestForSubCluster(subClusterId, request, requestMap);\r\n                    newRequest.getResourceBlacklistRequest().getBlacklistAdditions().add(resourceName);\r\n                }\r\n            }\r\n        }\r\n        if (!isNullOrEmpty(request.getResourceBlacklistRequest().getBlacklistRemovals())) {\r\n            for (String resourceName : request.getResourceBlacklistRequest().getBlacklistRemovals()) {\r\n                SubClusterId subClusterId = getSubClusterForNode(resourceName);\r\n                if (subClusterId != null) {\r\n                    AllocateRequest newRequest = findOrCreateAllocateRequestForSubCluster(subClusterId, request, requestMap);\r\n                    newRequest.getResourceBlacklistRequest().getBlacklistRemovals().add(resourceName);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (!isNullOrEmpty(request.getReleaseList())) {\r\n        for (ContainerId cid : request.getReleaseList()) {\r\n            if (warnIfNotExists(cid, \"release\")) {\r\n                SubClusterId subClusterId = this.containerIdToSubClusterIdMap.get(cid);\r\n                AllocateRequest newRequest = requestMap.get(subClusterId);\r\n                newRequest.getReleaseList().add(cid);\r\n            }\r\n        }\r\n    }\r\n    if (!isNullOrEmpty(request.getUpdateRequests())) {\r\n        for (UpdateContainerRequest ucr : request.getUpdateRequests()) {\r\n            if (warnIfNotExists(ucr.getContainerId(), \"update\")) {\r\n                SubClusterId subClusterId = this.containerIdToSubClusterIdMap.get(ucr.getContainerId());\r\n                AllocateRequest newRequest = requestMap.get(subClusterId);\r\n                newRequest.getUpdateRequests().add(ucr);\r\n            }\r\n        }\r\n    }\r\n    return requestMap;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "sendRequestsToResourceManagers",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void sendRequestsToResourceManagers(Map<SubClusterId, AllocateRequest> requests) throws YarnException, IOException\n{\r\n    List<SubClusterId> newSubClusters = registerAndAllocateWithNewSubClusters(requests);\r\n    for (Entry<SubClusterId, AllocateRequest> entry : requests.entrySet()) {\r\n        SubClusterId subClusterId = entry.getKey();\r\n        if (newSubClusters.contains(subClusterId)) {\r\n            continue;\r\n        }\r\n        if (subClusterId.equals(this.homeSubClusterId)) {\r\n            this.homeHeartbeartHandler.allocateAsync(entry.getValue(), new HeartbeatCallBack(this.homeSubClusterId, false));\r\n        } else {\r\n            if (!this.uamPool.hasUAMId(subClusterId.getId())) {\r\n                throw new YarnException(\"UAM not found for \" + this.attemptId + \" in sub-cluster \" + subClusterId);\r\n            }\r\n            this.uamPool.allocateAsync(subClusterId.getId(), entry.getValue(), new HeartbeatCallBack(subClusterId, true));\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "registerAndAllocateWithNewSubClusters",
  "errType" : [ "Throwable", "Throwable", "Throwable" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "List<SubClusterId> registerAndAllocateWithNewSubClusters(final Map<SubClusterId, AllocateRequest> requests) throws IOException\n{\r\n    List<SubClusterId> newSubClusters = new ArrayList<>();\r\n    for (SubClusterId subClusterId : requests.keySet()) {\r\n        if (!subClusterId.equals(this.homeSubClusterId) && !this.uamPool.hasUAMId(subClusterId.getId())) {\r\n            newSubClusters.add(subClusterId);\r\n            lastSCResponseTime.put(subClusterId, clock.getTime() - subClusterTimeOut);\r\n        }\r\n    }\r\n    this.uamRegisterFutures.clear();\r\n    for (final SubClusterId scId : newSubClusters) {\r\n        Future<?> future = this.threadpool.submit(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                String subClusterId = scId.getId();\r\n                YarnConfiguration config = new YarnConfiguration(getConf());\r\n                FederationProxyProviderUtil.updateConfForFederation(config, subClusterId);\r\n                RegisterApplicationMasterResponse uamResponse = null;\r\n                Token<AMRMTokenIdentifier> token = null;\r\n                try {\r\n                    token = uamPool.launchUAM(subClusterId, config, attemptId.getApplicationId(), amRegistrationResponse.getQueue(), getApplicationContext().getUser(), homeSubClusterId.toString(), true, subClusterId);\r\n                    secondaryRelayers.put(subClusterId, uamPool.getAMRMClientRelayer(subClusterId));\r\n                    uamResponse = uamPool.registerApplicationMaster(subClusterId, amRegistrationRequest);\r\n                } catch (Throwable e) {\r\n                    LOG.error(\"Failed to register application master: \" + subClusterId + \" Application: \" + attemptId, e);\r\n                    return;\r\n                }\r\n                uamRegistrations.put(scId, uamResponse);\r\n                LOG.info(\"Successfully registered unmanaged application master: \" + subClusterId + \" ApplicationId: \" + attemptId);\r\n                try {\r\n                    uamPool.allocateAsync(subClusterId, requests.get(scId), new HeartbeatCallBack(scId, true));\r\n                } catch (Throwable e) {\r\n                    LOG.error(\"Failed to allocate async to \" + subClusterId + \" Application: \" + attemptId, e);\r\n                }\r\n                try {\r\n                    if (registryClient != null) {\r\n                        registryClient.writeAMRMTokenForUAM(attemptId.getApplicationId(), subClusterId, token);\r\n                    } else if (getNMStateStore() != null) {\r\n                        getNMStateStore().storeAMRMProxyAppContextEntry(attemptId, NMSS_SECONDARY_SC_PREFIX + subClusterId, token.encodeToUrlString().getBytes(STRING_TO_BYTE_FORMAT));\r\n                    }\r\n                } catch (Throwable e) {\r\n                    LOG.error(\"Failed to persist UAM token from \" + subClusterId + \" Application: \" + attemptId, e);\r\n                }\r\n            }\r\n        });\r\n        this.uamRegisterFutures.put(scId, future);\r\n    }\r\n    return newSubClusters;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 3,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "generateBaseAllocationResponse",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "AllocateResponse generateBaseAllocationResponse()\n{\r\n    AllocateResponse baseResponse = RECORD_FACTORY.newRecordInstance(AllocateResponse.class);\r\n    baseResponse.setAvailableResources(Resource.newInstance(0, 0));\r\n    baseResponse.setNumClusterNodes(0);\r\n    Set<SubClusterId> expiredSC = getTimedOutSCs(false);\r\n    for (Entry<SubClusterId, AllocateResponse> entry : lastSCResponse.entrySet()) {\r\n        if (expiredSC.contains(entry.getKey())) {\r\n            continue;\r\n        }\r\n        AllocateResponse response = entry.getValue();\r\n        if (response.getAvailableResources() != null) {\r\n            baseResponse.setAvailableResources(Resources.add(baseResponse.getAvailableResources(), response.getAvailableResources()));\r\n        }\r\n        baseResponse.setNumClusterNodes(baseResponse.getNumClusterNodes() + response.getNumClusterNodes());\r\n    }\r\n    return baseResponse;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "mergeAllocateResponses",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void mergeAllocateResponses(AllocateResponse mergedResponse)\n{\r\n    synchronized (this.asyncResponseSink) {\r\n        for (Entry<SubClusterId, List<AllocateResponse>> entry : this.asyncResponseSink.entrySet()) {\r\n            SubClusterId subClusterId = entry.getKey();\r\n            List<AllocateResponse> responses = entry.getValue();\r\n            if (responses.size() > 0) {\r\n                for (AllocateResponse response : responses) {\r\n                    removeFinishedContainersFromCache(response.getCompletedContainersStatuses());\r\n                    cacheAllocatedContainers(response.getAllocatedContainers(), subClusterId);\r\n                    mergeAllocateResponse(mergedResponse, response, subClusterId);\r\n                }\r\n                responses.clear();\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "removeFinishedContainersFromCache",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void removeFinishedContainersFromCache(List<ContainerStatus> finishedContainers)\n{\r\n    for (ContainerStatus container : finishedContainers) {\r\n        LOG.debug(\"Completed container {}\", container);\r\n        if (containerIdToSubClusterIdMap.containsKey(container.getContainerId())) {\r\n            containerIdToSubClusterIdMap.remove(container.getContainerId());\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "mergeRegistrationResponses",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void mergeRegistrationResponses(AllocateResponse homeResponse, Map<SubClusterId, RegisterApplicationMasterResponse> registrations)\n{\r\n    for (Entry<SubClusterId, RegisterApplicationMasterResponse> entry : registrations.entrySet()) {\r\n        RegisterApplicationMasterResponse registration = entry.getValue();\r\n        if (!isNullOrEmpty(registration.getContainersFromPreviousAttempts())) {\r\n            List<Container> tempContainers = homeResponse.getAllocatedContainers();\r\n            if (!isNullOrEmpty(tempContainers)) {\r\n                tempContainers.addAll(registration.getContainersFromPreviousAttempts());\r\n                homeResponse.setAllocatedContainers(tempContainers);\r\n            } else {\r\n                homeResponse.setAllocatedContainers(registration.getContainersFromPreviousAttempts());\r\n            }\r\n            cacheAllocatedContainers(registration.getContainersFromPreviousAttempts(), entry.getKey());\r\n        }\r\n        if (!isNullOrEmpty(registration.getNMTokensFromPreviousAttempts())) {\r\n            List<NMToken> tempTokens = homeResponse.getNMTokens();\r\n            if (!isNullOrEmpty(tempTokens)) {\r\n                tempTokens.addAll(registration.getNMTokensFromPreviousAttempts());\r\n                homeResponse.setNMTokens(tempTokens);\r\n            } else {\r\n                homeResponse.setNMTokens(registration.getNMTokensFromPreviousAttempts());\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "mergeAllocateResponse",
  "errType" : null,
  "containingMethodsNum" : 43,
  "sourceCodeText" : "void mergeAllocateResponse(AllocateResponse homeResponse, AllocateResponse otherResponse, SubClusterId otherRMAddress)\n{\r\n    if (otherResponse.getAMRMToken() != null) {\r\n        if (otherRMAddress.equals(this.homeSubClusterId)) {\r\n            homeResponse.setAMRMToken(otherResponse.getAMRMToken());\r\n        } else {\r\n            LOG.warn(\"amrmToken from UAM {} not null, it should be null here\", otherRMAddress);\r\n        }\r\n    }\r\n    if (!isNullOrEmpty(otherResponse.getAllocatedContainers())) {\r\n        if (!isNullOrEmpty(homeResponse.getAllocatedContainers())) {\r\n            homeResponse.getAllocatedContainers().addAll(otherResponse.getAllocatedContainers());\r\n        } else {\r\n            homeResponse.setAllocatedContainers(otherResponse.getAllocatedContainers());\r\n        }\r\n    }\r\n    if (!isNullOrEmpty(otherResponse.getCompletedContainersStatuses())) {\r\n        if (!isNullOrEmpty(homeResponse.getCompletedContainersStatuses())) {\r\n            homeResponse.getCompletedContainersStatuses().addAll(otherResponse.getCompletedContainersStatuses());\r\n        } else {\r\n            homeResponse.setCompletedContainersStatuses(otherResponse.getCompletedContainersStatuses());\r\n        }\r\n    }\r\n    if (!isNullOrEmpty(otherResponse.getUpdatedNodes())) {\r\n        if (!isNullOrEmpty(homeResponse.getUpdatedNodes())) {\r\n            homeResponse.getUpdatedNodes().addAll(otherResponse.getUpdatedNodes());\r\n        } else {\r\n            homeResponse.setUpdatedNodes(otherResponse.getUpdatedNodes());\r\n        }\r\n    }\r\n    if (otherResponse.getApplicationPriority() != null) {\r\n        homeResponse.setApplicationPriority(otherResponse.getApplicationPriority());\r\n    }\r\n    homeResponse.setNumClusterNodes(homeResponse.getNumClusterNodes() + otherResponse.getNumClusterNodes());\r\n    PreemptionMessage homePreempMessage = homeResponse.getPreemptionMessage();\r\n    PreemptionMessage otherPreempMessage = otherResponse.getPreemptionMessage();\r\n    if (homePreempMessage == null && otherPreempMessage != null) {\r\n        homeResponse.setPreemptionMessage(otherPreempMessage);\r\n    }\r\n    if (homePreempMessage != null && otherPreempMessage != null) {\r\n        PreemptionContract par1 = homePreempMessage.getContract();\r\n        PreemptionContract par2 = otherPreempMessage.getContract();\r\n        if (par1 == null && par2 != null) {\r\n            homePreempMessage.setContract(par2);\r\n        }\r\n        if (par1 != null && par2 != null) {\r\n            par1.getResourceRequest().addAll(par2.getResourceRequest());\r\n            par1.getContainers().addAll(par2.getContainers());\r\n        }\r\n        StrictPreemptionContract spar1 = homePreempMessage.getStrictContract();\r\n        StrictPreemptionContract spar2 = otherPreempMessage.getStrictContract();\r\n        if (spar1 == null && spar2 != null) {\r\n            homePreempMessage.setStrictContract(spar2);\r\n        }\r\n        if (spar1 != null && spar2 != null) {\r\n            spar1.getContainers().addAll(spar2.getContainers());\r\n        }\r\n    }\r\n    if (!isNullOrEmpty(otherResponse.getNMTokens())) {\r\n        if (!isNullOrEmpty(homeResponse.getNMTokens())) {\r\n            homeResponse.getNMTokens().addAll(otherResponse.getNMTokens());\r\n        } else {\r\n            homeResponse.setNMTokens(otherResponse.getNMTokens());\r\n        }\r\n    }\r\n    if (!isNullOrEmpty(otherResponse.getUpdatedContainers())) {\r\n        if (!isNullOrEmpty(homeResponse.getUpdatedContainers())) {\r\n            homeResponse.getUpdatedContainers().addAll(otherResponse.getUpdatedContainers());\r\n        } else {\r\n            homeResponse.setUpdatedContainers(otherResponse.getUpdatedContainers());\r\n        }\r\n    }\r\n    if (!isNullOrEmpty(otherResponse.getUpdateErrors())) {\r\n        if (!isNullOrEmpty(homeResponse.getUpdateErrors())) {\r\n            homeResponse.getUpdateErrors().addAll(otherResponse.getUpdateErrors());\r\n        } else {\r\n            homeResponse.setUpdateErrors(otherResponse.getUpdateErrors());\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "cacheAllocatedContainers",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void cacheAllocatedContainers(List<Container> containers, SubClusterId subClusterId)\n{\r\n    for (Container container : containers) {\r\n        LOG.debug(\"Adding container {}\", container);\r\n        if (this.containerIdToSubClusterIdMap.containsKey(container.getId())) {\r\n            SubClusterId existingSubClusterId = this.containerIdToSubClusterIdMap.get(container.getId());\r\n            if (existingSubClusterId.equals(subClusterId)) {\r\n                LOG.warn(\"Duplicate containerID: {} found in the allocated containers\" + \" from same sub-cluster: {}, so ignoring.\", container.getId(), subClusterId);\r\n            } else {\r\n                throw new YarnRuntimeException(\"Duplicate containerID found in the allocated containers. This\" + \" can happen if the RM epoch is not configured properly.\" + \" ContainerId: \" + container.getId().toString() + \" ApplicationId: \" + this.attemptId + \" From RM: \" + subClusterId + \" . Previous container was from sub-cluster: \" + existingSubClusterId);\r\n            }\r\n        }\r\n        this.containerIdToSubClusterIdMap.put(container.getId(), subClusterId);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "findOrCreateAllocateRequestForSubCluster",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "AllocateRequest findOrCreateAllocateRequestForSubCluster(SubClusterId subClusterId, AllocateRequest originalAMRequest, Map<SubClusterId, AllocateRequest> requestMap)\n{\r\n    AllocateRequest newRequest = null;\r\n    if (requestMap.containsKey(subClusterId)) {\r\n        newRequest = requestMap.get(subClusterId);\r\n    } else {\r\n        newRequest = createAllocateRequest();\r\n        newRequest.setResponseId(originalAMRequest.getResponseId());\r\n        newRequest.setProgress(originalAMRequest.getProgress());\r\n        requestMap.put(subClusterId, newRequest);\r\n    }\r\n    return newRequest;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "createAllocateRequest",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "AllocateRequest createAllocateRequest()\n{\r\n    AllocateRequest request = RECORD_FACTORY.newRecordInstance(AllocateRequest.class);\r\n    request.setAskList(new ArrayList<ResourceRequest>());\r\n    request.setReleaseList(new ArrayList<ContainerId>());\r\n    ResourceBlacklistRequest blackList = ResourceBlacklistRequest.newInstance(null, null);\r\n    blackList.setBlacklistAdditions(new ArrayList<String>());\r\n    blackList.setBlacklistRemovals(new ArrayList<String>());\r\n    request.setResourceBlacklistRequest(blackList);\r\n    request.setUpdateRequests(new ArrayList<UpdateContainerRequest>());\r\n    return request;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getTimedOutSCs",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "Set<SubClusterId> getTimedOutSCs(boolean verbose)\n{\r\n    Set<SubClusterId> timedOutSCs = new HashSet<>();\r\n    for (Map.Entry<SubClusterId, Long> entry : this.lastSCResponseTime.entrySet()) {\r\n        if (entry.getValue() > this.lastAMHeartbeatTime) {\r\n            continue;\r\n        }\r\n        long duration = this.clock.getTime() - entry.getValue();\r\n        if (duration > this.subClusterTimeOut) {\r\n            if (verbose) {\r\n                LOG.warn(\"Subcluster {} doesn't have a successful heartbeat\" + \" for {} seconds for {}\", entry.getKey(), (double) duration / 1000, this.attemptId);\r\n            }\r\n            timedOutSCs.add(entry.getKey());\r\n        }\r\n    }\r\n    return timedOutSCs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "warnIfNotExists",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean warnIfNotExists(ContainerId containerId, String actionName)\n{\r\n    if (!this.containerIdToSubClusterIdMap.containsKey(containerId)) {\r\n        LOG.error(\"AM is trying to {} a container {} that does not exist. Might happen \" + \"shortly after NM restart when NM recovery is enabled\", actionName, containerId.toString());\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "splitResourceRequests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<SubClusterId, List<ResourceRequest>> splitResourceRequests(List<ResourceRequest> askList) throws YarnException\n{\r\n    return policyInterpreter.splitResourceRequests(askList, getTimedOutSCs(true));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getUnmanagedAMPoolSize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getUnmanagedAMPoolSize()\n{\r\n    return this.uamPool.getAllUAMIds().size();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getUnmanagedAMPool",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "UnmanagedAMPoolManager getUnmanagedAMPool()\n{\r\n    return this.uamPool;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getUamRegisterFutures",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<SubClusterId, Future<?>> getUamRegisterFutures()\n{\r\n    return this.uamRegisterFutures;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getAsyncResponseSink",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<SubClusterId, List<AllocateResponse>> getAsyncResponseSink()\n{\r\n    return this.asyncResponseSink;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "isNullOrEmpty",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isNullOrEmpty(Collection<T> c)\n{\r\n    return (c == null || c.size() == 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "isNullOrEmpty",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isNullOrEmpty(Map<T1, T2> c)\n{\r\n    return (c == null || c.size() == 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "isRuntimeRequested",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean isRuntimeRequested(Map<String, String> env)\n{\r\n    String type = env.get(ContainerRuntimeConstants.ENV_CONTAINER_TYPE);\r\n    if (type == null) {\r\n        type = conf.get(YarnConfiguration.LINUX_CONTAINER_RUNTIME_TYPE);\r\n    }\r\n    return type == null || type.isEmpty() || type.equals(\"default\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "initialize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void initialize(Configuration conf, Context nmContext) throws ContainerExecutionException\n{\r\n    this.conf = conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "prepareContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void prepareContainer(ContainerRuntimeContext ctx) throws ContainerExecutionException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "launchContainer",
  "errType" : [ "PrivilegedOperationException" ],
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void launchContainer(ContainerRuntimeContext ctx) throws ContainerExecutionException\n{\r\n    PrivilegedOperation launchOp = new PrivilegedOperation(PrivilegedOperation.OperationType.LAUNCH_CONTAINER);\r\n    launchOp.appendArgs(ctx.getExecutionAttribute(RUN_AS_USER), ctx.getExecutionAttribute(USER), Integer.toString(PrivilegedOperation.RunAsUserCommand.LAUNCH_CONTAINER.getValue()), ctx.getExecutionAttribute(APPID), ctx.getExecutionAttribute(CONTAINER_ID_STR), ctx.getExecutionAttribute(CONTAINER_WORK_DIR).toString(), ctx.getExecutionAttribute(NM_PRIVATE_CONTAINER_SCRIPT_PATH).toUri().getPath(), ctx.getExecutionAttribute(NM_PRIVATE_TOKENS_PATH).toUri().getPath());\r\n    Path keystorePath = ctx.getExecutionAttribute(NM_PRIVATE_KEYSTORE_PATH);\r\n    Path truststorePath = ctx.getExecutionAttribute(NM_PRIVATE_TRUSTSTORE_PATH);\r\n    if (keystorePath != null && truststorePath != null) {\r\n        launchOp.appendArgs(\"--https\", keystorePath.toUri().getPath(), truststorePath.toUri().getPath());\r\n    } else {\r\n        launchOp.appendArgs(\"--http\");\r\n    }\r\n    launchOp.appendArgs(ctx.getExecutionAttribute(PID_FILE_PATH).toString(), StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR, ctx.getExecutionAttribute(LOCAL_DIRS)), StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR, ctx.getExecutionAttribute(LOG_DIRS)), ctx.getExecutionAttribute(RESOURCES_OPTIONS));\r\n    String tcCommandFile = ctx.getExecutionAttribute(TC_COMMAND_FILE);\r\n    if (tcCommandFile != null) {\r\n        launchOp.appendArgs(tcCommandFile);\r\n    }\r\n    launchOp.disableFailureLogging();\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<String> prefixCommands = (List<String>) ctx.getExecutionAttribute(CONTAINER_LAUNCH_PREFIX_COMMANDS);\r\n    try {\r\n        privilegedOperationExecutor.executePrivilegedOperation(prefixCommands, launchOp, null, null, false, false);\r\n    } catch (PrivilegedOperationException e) {\r\n        throw new ContainerExecutionException(\"Launch container failed\", e.getExitCode(), e.getOutput(), e.getErrorOutput());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "relaunchContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void relaunchContainer(ContainerRuntimeContext ctx) throws ContainerExecutionException\n{\r\n    launchContainer(ctx);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "signalContainer",
  "errType" : [ "PrivilegedOperationException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void signalContainer(ContainerRuntimeContext ctx) throws ContainerExecutionException\n{\r\n    PrivilegedOperation signalOp = new PrivilegedOperation(PrivilegedOperation.OperationType.SIGNAL_CONTAINER);\r\n    signalOp.appendArgs(ctx.getExecutionAttribute(RUN_AS_USER), ctx.getExecutionAttribute(USER), Integer.toString(PrivilegedOperation.RunAsUserCommand.SIGNAL_CONTAINER.getValue()), ctx.getExecutionAttribute(PID), Integer.toString(ctx.getExecutionAttribute(SIGNAL).getValue()));\r\n    signalOp.disableFailureLogging();\r\n    try {\r\n        PrivilegedOperationExecutor executor = PrivilegedOperationExecutor.getInstance(conf);\r\n        executor.executePrivilegedOperation(null, signalOp, null, null, false, false);\r\n    } catch (PrivilegedOperationException e) {\r\n        throw new ContainerExecutionException(\"Signal container failed\", e.getExitCode(), e.getOutput(), e.getErrorOutput());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "reapContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void reapContainer(ContainerRuntimeContext ctx) throws ContainerExecutionException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getIpAndHost",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String[] getIpAndHost(Container container)\n{\r\n    return ContainerExecutor.getLocalIpAndHost(container);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getExposedPorts",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getExposedPorts(Container container)\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "execContainer",
  "errType" : [ "PrivilegedOperationException", "InterruptedException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "IOStreamPair execContainer(ContainerExecContext ctx) throws ContainerExecutionException\n{\r\n    IOStreamPair output;\r\n    try {\r\n        PrivilegedOperation privOp = new PrivilegedOperation(PrivilegedOperation.OperationType.EXEC_CONTAINER);\r\n        String commandFile = writeCommandToTempFile(ctx);\r\n        privOp.appendArgs(commandFile);\r\n        privOp.disableFailureLogging();\r\n        output = privilegedOperationExecutor.executePrivilegedInteractiveOperation(null, privOp);\r\n    } catch (PrivilegedOperationException e) {\r\n        throw new ContainerExecutionException(\"Execute container interactive shell failed\", e.getExitCode(), e.getOutput(), e.getErrorOutput());\r\n    } catch (InterruptedException ie) {\r\n        LOG.warn(\"InterruptedException executing command: \", ie);\r\n        throw new ContainerExecutionException(ie.getMessage());\r\n    }\r\n    return output;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "writeCommandToTempFile",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 31,
  "sourceCodeText" : "String writeCommandToTempFile(ContainerExecContext ctx) throws ContainerExecutionException\n{\r\n    Container container = ctx.getContainer();\r\n    File cmdDir = null;\r\n    String appId = container.getContainerId().getApplicationAttemptId().getApplicationId().toString();\r\n    String containerId = container.getContainerId().toString();\r\n    String filePrefix = containerId.toString();\r\n    try {\r\n        String cmdDirPath = ctx.getLocalDirsHandlerService().getLocalPathForWrite(ResourceLocalizationService.NM_PRIVATE_DIR + Path.SEPARATOR + appId + Path.SEPARATOR + filePrefix + Path.SEPARATOR).toString();\r\n        cmdDir = new File(cmdDirPath);\r\n        if (!cmdDir.mkdirs() && !cmdDir.exists()) {\r\n            throw new IOException(\"Cannot create container private directory \" + cmdDir);\r\n        }\r\n        File commandFile = File.createTempFile(TMP_FILE_PREFIX + filePrefix, TMP_FILE_SUFFIX, cmdDir);\r\n        try (Writer writer = new OutputStreamWriter(new FileOutputStream(commandFile.toString()), \"UTF-8\");\r\n            PrintWriter printWriter = new PrintWriter(writer)) {\r\n            Map<String, List<String>> cmd = new HashMap<String, List<String>>();\r\n            List<String> exec = new ArrayList<String>();\r\n            exec.add(\"exec\");\r\n            cmd.put(\"command\", exec);\r\n            List<String> user = new ArrayList<String>();\r\n            user.add(container.getUser());\r\n            cmd.put(\"user\", user);\r\n            List<String> commands = new ArrayList<String>();\r\n            StringBuilder sb = new StringBuilder();\r\n            sb.append(\"/bin/\");\r\n            sb.append(ctx.getShell());\r\n            commands.add(sb.toString());\r\n            commands.add(\"-ir\");\r\n            cmd.put(\"launch-command\", commands);\r\n            List<String> workdir = new ArrayList<String>();\r\n            workdir.add(container.getWorkDir());\r\n            cmd.put(\"workdir\", workdir);\r\n            printWriter.println(\"[command-execution]\");\r\n            for (Map.Entry<String, List<String>> entry : cmd.entrySet()) {\r\n                if (entry.getKey().contains(\"=\")) {\r\n                    throw new ContainerExecutionException(\"'=' found in entry for docker command file, key = \" + entry.getKey() + \"; value = \" + entry.getValue());\r\n                }\r\n                if (entry.getValue().contains(\"\\n\")) {\r\n                    throw new ContainerExecutionException(\"'\\\\n' found in entry for docker command file, key = \" + entry.getKey() + \"; value = \" + entry.getValue());\r\n                }\r\n                printWriter.println(\"  \" + entry.getKey() + \"=\" + StringUtils.join(\",\", entry.getValue()));\r\n            }\r\n            return commandFile.toString();\r\n        }\r\n    } catch (IOException e) {\r\n        LOG.warn(\"Unable to write command to \" + cmdDir);\r\n        throw new ContainerExecutionException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\task",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getContainerId()\n{\r\n    return containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\task",
  "methodName" : "run",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void run()\n{\r\n    LOG.debug(\"Running DeletionTask : {}\", this);\r\n    LinuxContainerExecutor exec = ((LinuxContainerExecutor) getDeletionService().getContainerExecutor());\r\n    exec.removeDockerContainer(containerId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\task",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuffer sb = new StringBuffer(\"DockerContainerDeletionTask : \");\r\n    sb.append(\"  id : \").append(this.getTaskId());\r\n    sb.append(\"  containerId : \").append(this.containerId);\r\n    return sb.toString().trim();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\task",
  "methodName" : "convertDeletionTaskToProto",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "DeletionServiceDeleteTaskProto convertDeletionTaskToProto()\n{\r\n    DeletionServiceDeleteTaskProto.Builder builder = getBaseDeletionTaskProtoBuilder();\r\n    builder.setTaskType(DeletionTaskType.DOCKER_CONTAINER.name());\r\n    if (getContainerId() != null) {\r\n        builder.setDockerContainerId(getContainerId());\r\n    }\r\n    return builder.build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\task",
  "methodName" : "getTaskId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getTaskId()\n{\r\n    return taskId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\task",
  "methodName" : "setTaskId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setTaskId(int taskId)\n{\r\n    this.taskId = taskId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\task",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUser()\n{\r\n    return user;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\task",
  "methodName" : "getDeletionService",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "DeletionService getDeletionService()\n{\r\n    return deletionService;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\task",
  "methodName" : "getDeletionTaskType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "DeletionTaskType getDeletionTaskType()\n{\r\n    return deletionTaskType;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\task",
  "methodName" : "setSuccess",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setSuccess(boolean success)\n{\r\n    this.success = success;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\task",
  "methodName" : "getSucess",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean getSucess()\n{\r\n    return this.success;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\task",
  "methodName" : "getSuccessorTasks",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "DeletionTask[] getSuccessorTasks()\n{\r\n    DeletionTask[] successors = new DeletionTask[successorTaskSet.size()];\r\n    return successorTaskSet.toArray(successors);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\task",
  "methodName" : "convertDeletionTaskToProto",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "DeletionServiceDeleteTaskProto convertDeletionTaskToProto()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\task",
  "methodName" : "addDeletionTaskDependency",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void addDeletionTaskDependency(DeletionTask successorTask)\n{\r\n    if (successorTaskSet.add(successorTask)) {\r\n        successorTask.incrementAndGetPendingPredecessorTasks();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\task",
  "methodName" : "incrementAndGetPendingPredecessorTasks",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int incrementAndGetPendingPredecessorTasks()\n{\r\n    return numberOfPendingPredecessorTasks.incrementAndGet();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\task",
  "methodName" : "decrementAndGetPendingPredecessorTasks",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int decrementAndGetPendingPredecessorTasks()\n{\r\n    return numberOfPendingPredecessorTasks.decrementAndGet();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\task",
  "methodName" : "deletionTaskFinished",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void deletionTaskFinished()\n{\r\n    try {\r\n        NMStateStoreService stateStore = deletionService.getStateStore();\r\n        stateStore.removeDeletionTask(taskId);\r\n    } catch (IOException e) {\r\n        LOG.error(\"Unable to remove deletion task \" + taskId + \" from state store\", e);\r\n    }\r\n    Iterator<DeletionTask> successorTaskI = this.successorTaskSet.iterator();\r\n    while (successorTaskI.hasNext()) {\r\n        DeletionTask successorTask = successorTaskI.next();\r\n        if (!success) {\r\n            successorTask.setSuccess(success);\r\n        }\r\n        int count = successorTask.decrementAndGetPendingPredecessorTasks();\r\n        if (count == 0) {\r\n            if (successorTask.getSucess()) {\r\n                successorTask.deletionService.delete(successorTask);\r\n            } else {\r\n                successorTask.deletionTaskFinished();\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\task",
  "methodName" : "getBaseDeletionTaskProtoBuilder",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "DeletionServiceDeleteTaskProto.Builder getBaseDeletionTaskProtoBuilder()\n{\r\n    DeletionServiceDeleteTaskProto.Builder builder = DeletionServiceDeleteTaskProto.newBuilder();\r\n    builder.setId(getTaskId());\r\n    if (getUser() != null) {\r\n        builder.setUser(getUser());\r\n    }\r\n    builder.setDeletionTime(System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(getDeletionService().getDebugDelay(), TimeUnit.SECONDS));\r\n    for (DeletionTask successor : getSuccessorTasks()) {\r\n        builder.addSuccessorIds(successor.getTaskId());\r\n    }\r\n    return builder;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\event",
  "methodName" : "getApplication",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Application getApplication()\n{\r\n    return app;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "writeEnvFile",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String writeEnvFile(DockerRunCommand cmd, String filePrefix, File cmdDir) throws IOException\n{\r\n    File dockerEnvFile = File.createTempFile(TMP_FILE_PREFIX + filePrefix, TMP_ENV_FILE_SUFFIX, cmdDir);\r\n    try (Writer envWriter = new OutputStreamWriter(new FileOutputStream(dockerEnvFile), \"UTF-8\");\r\n        PrintWriter envPrintWriter = new PrintWriter(envWriter)) {\r\n        for (Map.Entry<String, String> entry : cmd.getEnv().entrySet()) {\r\n            envPrintWriter.println(entry.getKey() + \"=\" + entry.getValue());\r\n        }\r\n        return dockerEnvFile.getAbsolutePath();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "writeCommandToTempFile",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 22,
  "sourceCodeText" : "String writeCommandToTempFile(DockerCommand cmd, ContainerId containerId, Context nmContext) throws ContainerExecutionException\n{\r\n    String filePrefix = containerId.toString();\r\n    ApplicationId appId = containerId.getApplicationAttemptId().getApplicationId();\r\n    File dockerCommandFile;\r\n    File cmdDir = null;\r\n    if (nmContext == null || nmContext.getLocalDirsHandler() == null) {\r\n        throw new ContainerExecutionException(\"Unable to write temporary docker command\");\r\n    }\r\n    try {\r\n        String cmdDirPath = nmContext.getLocalDirsHandler().getLocalPathForWrite(ResourceLocalizationService.NM_PRIVATE_DIR + Path.SEPARATOR + appId + Path.SEPARATOR + filePrefix + Path.SEPARATOR).toString();\r\n        cmdDir = new File(cmdDirPath);\r\n        if (!cmdDir.mkdirs() && !cmdDir.exists()) {\r\n            throw new IOException(\"Cannot create container private directory \" + cmdDir);\r\n        }\r\n        dockerCommandFile = File.createTempFile(TMP_FILE_PREFIX + filePrefix, TMP_FILE_SUFFIX, cmdDir);\r\n        try (Writer writer = new OutputStreamWriter(new FileOutputStream(dockerCommandFile.toString()), \"UTF-8\");\r\n            PrintWriter printWriter = new PrintWriter(writer)) {\r\n            printWriter.println(\"[docker-command-execution]\");\r\n            for (Map.Entry<String, List<String>> entry : cmd.getDockerCommandWithArguments().entrySet()) {\r\n                if (entry.getKey().contains(\"=\")) {\r\n                    throw new ContainerExecutionException(\"'=' found in entry for docker command file, key = \" + entry.getKey() + \"; value = \" + entry.getValue());\r\n                }\r\n                String value = StringUtils.join(\",\", entry.getValue());\r\n                if (value.contains(\"\\n\")) {\r\n                    throw new ContainerExecutionException(\"'\\\\n' found in entry for docker command file, key = \" + entry.getKey() + \"; value = \" + value);\r\n                }\r\n                printWriter.println(\"  \" + entry.getKey() + \"=\" + value);\r\n            }\r\n            if (cmd instanceof DockerRunCommand) {\r\n                DockerRunCommand runCommand = (DockerRunCommand) cmd;\r\n                if (runCommand.containsEnv()) {\r\n                    String path = writeEnvFile(runCommand, filePrefix, cmdDir);\r\n                    printWriter.println(\"  environ=\" + path);\r\n                }\r\n            }\r\n            return dockerCommandFile.toString();\r\n        }\r\n    } catch (IOException e) {\r\n        LOG.warn(\"Unable to write docker command to \" + cmdDir);\r\n        throw new ContainerExecutionException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getLocation",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Path getLocation()\n{\r\n    return loc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getSize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getSize()\n{\r\n    return size;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "setSize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setSize(long size)\n{\r\n    this.size = size;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "NodeHealthScriptRunner newInstance(String scriptName, Configuration conf)\n{\r\n    String nodeHealthScriptsConfig = String.format(YarnConfiguration.NM_HEALTH_CHECK_SCRIPT_PATH_TEMPLATE, scriptName);\r\n    String nodeHealthScript = conf.get(nodeHealthScriptsConfig);\r\n    if (!shouldRun(scriptName, nodeHealthScript)) {\r\n        return null;\r\n    }\r\n    String checkIntervalMsConfig = String.format(YarnConfiguration.NM_HEALTH_CHECK_SCRIPT_INTERVAL_MS_TEMPLATE, scriptName);\r\n    long checkIntervalMs = conf.getLong(checkIntervalMsConfig, 0L);\r\n    if (checkIntervalMs == 0L) {\r\n        checkIntervalMs = conf.getLong(YarnConfiguration.NM_HEALTH_CHECK_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_HEALTH_CHECK_INTERVAL_MS);\r\n    }\r\n    if (checkIntervalMs < 0) {\r\n        throw new IllegalArgumentException(\"The node health-checker's \" + \"interval-ms can not be set to a negative number.\");\r\n    }\r\n    boolean runBeforeStartup = conf.getBoolean(YarnConfiguration.NM_HEALTH_CHECK_RUN_BEFORE_STARTUP, YarnConfiguration.DEFAULT_NM_HEALTH_CHECK_RUN_BEFORE_STARTUP);\r\n    String scriptTimeoutConfig = String.format(YarnConfiguration.NM_HEALTH_CHECK_SCRIPT_TIMEOUT_MS_TEMPLATE, scriptName);\r\n    long scriptTimeout = conf.getLong(scriptTimeoutConfig, 0L);\r\n    if (scriptTimeout == 0L) {\r\n        scriptTimeout = conf.getLong(YarnConfiguration.NM_HEALTH_CHECK_TIMEOUT_MS, YarnConfiguration.DEFAULT_NM_HEALTH_CHECK_TIMEOUT_MS);\r\n    }\r\n    if (scriptTimeout <= 0) {\r\n        throw new IllegalArgumentException(\"The node health-checker's \" + \"timeout can only be set to a positive number.\");\r\n    }\r\n    String scriptArgsConfig = String.format(YarnConfiguration.NM_HEALTH_CHECK_SCRIPT_OPTS_TEMPLATE, scriptName);\r\n    String[] scriptArgs = conf.getStrings(scriptArgsConfig, new String[] {});\r\n    return new NodeHealthScriptRunner(nodeHealthScript, checkIntervalMs, scriptTimeout, scriptArgs, runBeforeStartup);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    if (commandExecutor != null) {\r\n        Process p = commandExecutor.getProcess();\r\n        if (p != null) {\r\n            p.destroy();\r\n        }\r\n    }\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "shouldRun",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "boolean shouldRun(String script, String healthScript)\n{\r\n    if (healthScript == null || healthScript.trim().isEmpty()) {\r\n        LOG.info(\"Missing location for the node health check script \\\"{}\\\".\", script);\r\n        return false;\r\n    }\r\n    File f = new File(healthScript);\r\n    if (!f.exists()) {\r\n        LOG.warn(\"File {} for script \\\"{}\\\" does not exist.\", healthScript, script);\r\n        return false;\r\n    }\r\n    if (!FileUtil.canExecute(f)) {\r\n        LOG.warn(\"File {} for script \\\"{}\\\" can not be executed.\", healthScript, script);\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\runtime",
  "methodName" : "getExitCode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getExitCode()\n{\r\n    return exitCode;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\runtime",
  "methodName" : "getOutput",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getOutput()\n{\r\n    return output;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\runtime",
  "methodName" : "getErrorOutput",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getErrorOutput()\n{\r\n    return errorOutput;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Container getContainer()\n{\r\n    return container;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUser()\n{\r\n    return user;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    String nodeLabelsScriptPath = conf.get(YarnConfiguration.NM_SCRIPT_BASED_NODE_LABELS_PROVIDER_PATH);\r\n    long scriptTimeout = conf.getLong(YarnConfiguration.NM_NODE_LABELS_PROVIDER_FETCH_TIMEOUT_MS, YarnConfiguration.DEFAULT_NM_NODE_LABELS_PROVIDER_FETCH_TIMEOUT_MS);\r\n    String[] scriptArgs = conf.getStrings(YarnConfiguration.NM_SCRIPT_BASED_NODE_LABELS_PROVIDER_SCRIPT_OPTS, new String[] {});\r\n    verifyConfiguredScript(nodeLabelsScriptPath);\r\n    long taskInterval = conf.getLong(YarnConfiguration.NM_NODE_LABELS_PROVIDER_FETCH_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_NODE_LABELS_PROVIDER_FETCH_INTERVAL_MS);\r\n    this.setIntervalTime(taskInterval);\r\n    this.runner = new NodeLabelScriptRunner(nodeLabelsScriptPath, scriptArgs, scriptTimeout, this);\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "cleanUp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void cleanUp()\n{\r\n    if (runner != null) {\r\n        runner.cleanUp();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "createTimerTask",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimerTask createTimerTask()\n{\r\n    return runner;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getExitCode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getExitCode()\n{\r\n    return this.exitCode;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getDiagnosticInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDiagnosticInfo()\n{\r\n    return diagnosticInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "bootstrap",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "List<PrivilegedOperation> bootstrap(Configuration configuration) throws ResourceHandlerException\n{\r\n    Set<Device> availableDevices = null;\r\n    try {\r\n        availableDevices = devicePlugin.getDevices();\r\n    } catch (Exception e) {\r\n        throw new ResourceHandlerException(\"Exception thrown from\" + \" plugin's \\\"getDevices\\\"\" + e.getMessage());\r\n    }\r\n    if (availableDevices == null) {\r\n        LOG.error(\"Bootstrap \" + resourceName + \" failed. Null value got from plugin's getDevices method\");\r\n        return null;\r\n    }\r\n    deviceMappingManager.addDeviceSet(resourceName, availableDevices);\r\n    this.cGroupsHandler.initializeCGroupController(CGroupsHandler.CGroupController.DEVICES);\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "preStart",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "List<PrivilegedOperation> preStart(Container container) throws ResourceHandlerException\n{\r\n    String containerIdStr = container.getContainerId().toString();\r\n    DeviceMappingManager.DeviceAllocation allocation = deviceMappingManager.assignDevices(resourceName, container);\r\n    LOG.debug(\"Allocated to {}: {}\", containerIdStr, allocation);\r\n    DeviceRuntimeSpec spec;\r\n    try {\r\n        spec = devicePlugin.onDevicesAllocated(allocation.getAllowed(), YarnRuntimeType.RUNTIME_DEFAULT);\r\n    } catch (Exception e) {\r\n        throw new ResourceHandlerException(\"Exception thrown from\" + \" plugin's \\\"onDeviceAllocated\\\"\" + e.getMessage());\r\n    }\r\n    if (spec != null) {\r\n        LOG.warn(\"Runtime spec in non-Docker container is not supported yet!\");\r\n    }\r\n    cGroupsHandler.createCGroup(CGroupsHandler.CGroupController.DEVICES, containerIdStr);\r\n    if (!OCIContainerRuntime.isOCICompliantContainerRequested(nmContext.getConf(), container.getLaunchContext().getEnvironment())) {\r\n        tryIsolateDevices(allocation, containerIdStr);\r\n        List<PrivilegedOperation> ret = new ArrayList<>();\r\n        ret.add(new PrivilegedOperation(PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP, PrivilegedOperation.CGROUP_ARG_PREFIX + cGroupsHandler.getPathForCGroupTasks(CGroupsHandler.CGroupController.DEVICES, containerIdStr)));\r\n        return ret;\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "tryIsolateDevices",
  "errType" : [ "PrivilegedOperationException" ],
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void tryIsolateDevices(DeviceMappingManager.DeviceAllocation allocation, String containerIdStr) throws ResourceHandlerException\n{\r\n    try {\r\n        PrivilegedOperation privilegedOperation = new PrivilegedOperation(PrivilegedOperation.OperationType.DEVICE, Arrays.asList(CONTAINER_ID_CLI_OPTION, containerIdStr));\r\n        boolean needNativeDeviceOperation = false;\r\n        int majorNumber;\r\n        int minorNumber;\r\n        List<String> devNumbers = new ArrayList<>();\r\n        if (!allocation.getDenied().isEmpty()) {\r\n            DeviceType devType;\r\n            for (Device deniedDevice : allocation.getDenied()) {\r\n                majorNumber = deniedDevice.getMajorNumber();\r\n                minorNumber = deniedDevice.getMinorNumber();\r\n                devType = getDeviceType(deniedDevice);\r\n                if (devType != null) {\r\n                    devNumbers.add(devType.getName() + \"-\" + majorNumber + \":\" + minorNumber + \"-rwm\");\r\n                }\r\n            }\r\n            if (devNumbers.size() != 0) {\r\n                privilegedOperation.appendArgs(Arrays.asList(EXCLUDED_DEVICES_CLI_OPTION, StringUtils.join(\",\", devNumbers)));\r\n                needNativeDeviceOperation = true;\r\n            }\r\n        }\r\n        if (!allocation.getAllowed().isEmpty()) {\r\n            devNumbers.clear();\r\n            for (Device allowedDevice : allocation.getAllowed()) {\r\n                majorNumber = allowedDevice.getMajorNumber();\r\n                minorNumber = allowedDevice.getMinorNumber();\r\n                if (majorNumber != -1 && minorNumber != -1) {\r\n                    devNumbers.add(majorNumber + \":\" + minorNumber);\r\n                }\r\n            }\r\n            if (devNumbers.size() > 0) {\r\n                privilegedOperation.appendArgs(Arrays.asList(ALLOWED_DEVICES_CLI_OPTION, StringUtils.join(\",\", devNumbers)));\r\n                needNativeDeviceOperation = true;\r\n            }\r\n        }\r\n        if (needNativeDeviceOperation) {\r\n            privilegedOperationExecutor.executePrivilegedOperation(privilegedOperation, true);\r\n        }\r\n    } catch (PrivilegedOperationException e) {\r\n        cGroupsHandler.deleteCGroup(CGroupsHandler.CGroupController.DEVICES, containerIdStr);\r\n        LOG.warn(\"Could not update cgroup for container\", e);\r\n        throw new ResourceHandlerException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "reacquireContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<PrivilegedOperation> reacquireContainer(ContainerId containerId) throws ResourceHandlerException\n{\r\n    deviceMappingManager.recoverAssignedDevices(resourceName, containerId);\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "updateContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<PrivilegedOperation> updateContainer(Container container) throws ResourceHandlerException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "postComplete",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<PrivilegedOperation> postComplete(ContainerId containerId) throws ResourceHandlerException\n{\r\n    deviceMappingManager.cleanupAssignedDevices(resourceName, containerId);\r\n    cGroupsHandler.deleteCGroup(CGroupsHandler.CGroupController.DEVICES, containerId.toString());\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "teardown",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<PrivilegedOperation> teardown() throws ResourceHandlerException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return DeviceResourceHandlerImpl.class.getName() + \"{\" + \"resourceName='\" + resourceName + '\\'' + \", devicePlugin=\" + devicePlugin + \", devicePluginAdapter=\" + devicePluginAdapter + '}';\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "getDeviceType",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "DeviceType getDeviceType(Device device)\n{\r\n    String devName = device.getDevPath();\r\n    if (devName.isEmpty()) {\r\n        LOG.warn(\"Empty device path provided, try to get device type from \" + \"major:minor device number\");\r\n        int major = device.getMajorNumber();\r\n        int minor = device.getMinorNumber();\r\n        if (major == -1 && minor == -1) {\r\n            LOG.warn(\"Non device number provided, cannot decide the device type\");\r\n            return null;\r\n        }\r\n        return getDeviceTypeFromDeviceNumber(device.getMajorNumber(), device.getMinorNumber());\r\n    }\r\n    DeviceType deviceType;\r\n    try {\r\n        LOG.debug(\"Try to get device type from device path: {}\", devName);\r\n        String output = shellWrapper.getDeviceFileType(devName);\r\n        LOG.debug(\"stat output:{}\", output);\r\n        deviceType = output.startsWith(\"c\") ? DeviceType.CHAR : DeviceType.BLOCK;\r\n    } catch (IOException e) {\r\n        String msg = \"Failed to get device type from stat \" + devName;\r\n        LOG.warn(msg);\r\n        return null;\r\n    }\r\n    return deviceType;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "getDeviceTypeFromDeviceNumber",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DeviceType getDeviceTypeFromDeviceNumber(int major, int minor)\n{\r\n    if (shellWrapper.existFile(\"/sys/dev/block/\" + major + \":\" + minor)) {\r\n        return DeviceType.BLOCK;\r\n    }\r\n    return DeviceType.CHAR;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "preparePrivilegedOperation",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "PrivilegedOperation preparePrivilegedOperation(DockerCommand dockerCommand, String containerName, Map<String, String> env, Context nmContext)\n{\r\n    PrivilegedOperation dockerOp = new PrivilegedOperation(PrivilegedOperation.OperationType.REMOVE_DOCKER_CONTAINER);\r\n    if (this.cGroupArg != null) {\r\n        dockerOp.appendArgs(cGroupArg);\r\n    }\r\n    dockerOp.appendArgs(containerName);\r\n    return dockerOp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getCGroupsHandler",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "CGroupsHandler getCGroupsHandler()\n{\r\n    return ResourceHandlerModule.getCGroupsHandler();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "isContainerOutOfLimit",
  "errType" : [ "ResourceHandlerException", "NumberFormatException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "boolean isContainerOutOfLimit(Container container)\n{\r\n    boolean outOfLimit = false;\r\n    String value = null;\r\n    try {\r\n        value = cgroups.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, container.getContainerId().toString(), memoryStatFile);\r\n        long usage = Long.parseLong(value);\r\n        long request = container.getResource().getMemorySize() * 1024 * 1024;\r\n        if (usage > request) {\r\n            outOfLimit = true;\r\n            String message = String.format(\"Container %s is out of its limits, using %d \" + \"when requested only %d\", container.getContainerId(), usage, request);\r\n            LOG.warn(message);\r\n        }\r\n    } catch (ResourceHandlerException ex) {\r\n        LOG.warn(String.format(\"Could not access memory resource for %s\", container.getContainerId()), ex);\r\n    } catch (NumberFormatException ex) {\r\n        LOG.warn(String.format(\"Could not parse %s in %s\", value, container.getContainerId()));\r\n    }\r\n    return outOfLimit;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "sigKill",
  "errType" : [ "ResourceHandlerException", "IOException", "InterruptedException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "boolean sigKill(Container container)\n{\r\n    boolean containerKilled = false;\r\n    boolean finished = false;\r\n    try {\r\n        while (!finished) {\r\n            String[] pids = cgroups.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, container.getContainerId().toString(), CGROUP_PROCS_FILE).split(\"\\n\");\r\n            finished = true;\r\n            for (String pid : pids) {\r\n                if (pid != null && !pid.isEmpty()) {\r\n                    LOG.debug(String.format(\"Terminating container %s Sending SIGKILL to -%s\", container.getContainerId().toString(), pid));\r\n                    finished = false;\r\n                    try {\r\n                        context.getContainerExecutor().signalContainer(new ContainerSignalContext.Builder().setContainer(container).setUser(container.getUser()).setPid(pid).setSignal(ContainerExecutor.Signal.KILL).build());\r\n                    } catch (IOException ex) {\r\n                        LOG.warn(String.format(\"Cannot kill container %s pid -%s.\", container.getContainerId(), pid), ex);\r\n                    }\r\n                }\r\n            }\r\n            try {\r\n                Thread.sleep(10);\r\n            } catch (InterruptedException e) {\r\n                LOG.debug(\"Interrupted while waiting for processes to disappear\");\r\n            }\r\n        }\r\n        containerKilled = true;\r\n    } catch (ResourceHandlerException ex) {\r\n        LOG.warn(String.format(\"Cannot list more tasks in container %s to kill.\", container.getContainerId()));\r\n    }\r\n    return containerKilled;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "run",
  "errType" : [ "ResourceHandlerException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void run()\n{\r\n    try {\r\n        while (true) {\r\n            String status = cgroups.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, \"\", CGROUP_PARAM_MEMORY_OOM_CONTROL);\r\n            if (!status.contains(CGroupsHandler.UNDER_OOM)) {\r\n                break;\r\n            }\r\n            boolean containerKilled = killContainer();\r\n            if (!containerKilled) {\r\n                throw new YarnRuntimeException(\"Could not find any containers but CGroups \" + \"reserved for containers ran out of memory. \" + \"I am giving up\");\r\n            }\r\n        }\r\n    } catch (ResourceHandlerException ex) {\r\n        LOG.warn(\"Could not fetch OOM status. \" + \"This is expected at shutdown. Exiting.\", ex);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "killContainer",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "boolean killContainer()\n{\r\n    boolean containerKilled = false;\r\n    ArrayList<ContainerCandidate> candidates = new ArrayList<>(0);\r\n    for (Container container : context.getContainers().values()) {\r\n        if (!container.isRunning()) {\r\n            continue;\r\n        }\r\n        candidates.add(new ContainerCandidate(container, isContainerOutOfLimit(container)));\r\n    }\r\n    Collections.sort(candidates);\r\n    if (candidates.isEmpty()) {\r\n        LOG.warn(\"Found no running containers to kill in order to release memory\");\r\n    }\r\n    for (int i = 0; !containerKilled && i < candidates.size(); i++) {\r\n        ContainerCandidate candidate = candidates.get(i);\r\n        if (sigKill(candidate.container)) {\r\n            String message = String.format(\"container %s killed by elastic cgroups OOM handler.\", candidate.container.getContainerId());\r\n            LOG.warn(message);\r\n            containerKilled = true;\r\n        }\r\n    }\r\n    return containerKilled;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\event",
  "methodName" : "getContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerId getContainer()\n{\r\n    return container;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga\\discovery",
  "methodName" : "discover",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<FpgaDevice> discover() throws ResourceHandlerException\n{\r\n    List<FpgaDevice> list = DeviceSpecParser.getDevicesFromString(type, availableDevices);\r\n    if (list.isEmpty()) {\r\n        throw new ResourceHandlerException(\"No FPGA devices were specified\");\r\n    }\r\n    return list;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "getTemperature",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PerGpuTemperature getTemperature()\n{\r\n    return temperature;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "setTemperature",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setTemperature(PerGpuTemperature temperature)\n{\r\n    this.temperature = temperature;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "getUuid",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUuid()\n{\r\n    return uuid;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "setUuid",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setUuid(String uuid)\n{\r\n    this.uuid = uuid;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "getProductName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getProductName()\n{\r\n    return productName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "setProductName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setProductName(String productName)\n{\r\n    this.productName = productName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "getMinorNumber",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getMinorNumber()\n{\r\n    return minorNumber;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "setMinorNumber",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setMinorNumber(int minorNumber)\n{\r\n    this.minorNumber = minorNumber;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "getGpuUtilizations",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PerGpuUtilizations getGpuUtilizations()\n{\r\n    return gpuUtilizations;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "setGpuUtilizations",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setGpuUtilizations(PerGpuUtilizations utilizations)\n{\r\n    this.gpuUtilizations = utilizations;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "getGpuMemoryUsage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PerGpuMemoryUsage getGpuMemoryUsage()\n{\r\n    return gpuMemoryUsage;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "setGpuMemoryUsage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setGpuMemoryUsage(PerGpuMemoryUsage gpuMemoryUsage)\n{\r\n    this.gpuMemoryUsage = gpuMemoryUsage;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"ProductName=\").append(productName).append(\", MinorNumber=\").append(minorNumber);\r\n    if (getGpuMemoryUsage() != null) {\r\n        sb.append(\", TotalMemory=\").append(getGpuMemoryUsage().getTotalMemoryMiB()).append(\"MiB\");\r\n    }\r\n    if (getGpuUtilizations() != null) {\r\n        sb.append(\", Utilization=\").append(getGpuUtilizations().getOverallGpuUtilization()).append(\"%\");\r\n    }\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "getCommandOption",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getCommandOption()\n{\r\n    return this.command;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "addCommandArguments",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void addCommandArguments(String key, String value)\n{\r\n    List<String> list = commandArguments.get(key);\r\n    if (list != null) {\r\n        list.add(value);\r\n        return;\r\n    }\r\n    list = new ArrayList<>();\r\n    list.add(value);\r\n    this.commandArguments.put(key, list);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "getDockerCommandWithArguments",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<String, List<String>> getDockerCommandWithArguments()\n{\r\n    return Collections.unmodifiableMap(commandArguments);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuffer ret = new StringBuffer(this.command);\r\n    for (Map.Entry<String, List<String>> entry : commandArguments.entrySet()) {\r\n        ret.append(\" \").append(entry.getKey());\r\n        ret.append(\"=\").append(StringUtils.join(\",\", entry.getValue()));\r\n    }\r\n    return ret.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "setClientConfigDir",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setClientConfigDir(String clientConfigDir)\n{\r\n    if (clientConfigDir != null) {\r\n        addCommandArguments(\"docker-config\", clientConfigDir);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "preparePrivilegedOperation",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "PrivilegedOperation preparePrivilegedOperation(DockerCommand dockerCommand, String containerName, Map<String, String> env, Context nmContext) throws ContainerExecutionException\n{\r\n    DockerClient dockerClient = new DockerClient();\r\n    String commandFile = dockerClient.writeCommandToTempFile(dockerCommand, ContainerId.fromString(containerName), nmContext);\r\n    PrivilegedOperation dockerOp = new PrivilegedOperation(PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\r\n    dockerOp.appendArgs(commandFile);\r\n    return dockerOp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getContainerLogsInfo",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "List<ContainerLogFileInfo> getContainerLogsInfo(ContainerId id, String remoteUser, Context nmContext) throws YarnException\n{\r\n    List<ContainerLogFileInfo> logFiles = new ArrayList<>();\r\n    List<File> logDirs = ContainerLogsUtils.getContainerLogDirs(id, remoteUser, nmContext);\r\n    for (File containerLogsDir : logDirs) {\r\n        File[] logs = containerLogsDir.listFiles();\r\n        if (logs != null) {\r\n            for (File log : logs) {\r\n                if (log.isFile()) {\r\n                    ContainerLogFileInfo logMeta = new ContainerLogFileInfo(log.getName(), Long.toString(log.length()), Times.format(log.lastModified()));\r\n                    logFiles.add(logMeta);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return logFiles;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "index",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void index()\n{\r\n    setTitle(join(\"NodeManager - \", $(NM_NODENAME)));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "info",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void info()\n{\r\n    render(NodePage.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "node",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void node()\n{\r\n    render(NodePage.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "allApplications",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void allApplications()\n{\r\n    render(AllApplicationsPage.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "allContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void allContainers()\n{\r\n    render(AllContainersPage.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "application",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void application()\n{\r\n    render(ApplicationPage.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "container",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void container()\n{\r\n    render(ContainerPage.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "errorsAndWarnings",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void errorsAndWarnings()\n{\r\n    render(NMErrorsAndWarningsPage.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "logs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void logs()\n{\r\n    render(ContainerLogsPage.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "updateConfiguredResource",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void updateConfiguredResource(Resource res) throws YarnException\n{\r\n    LOG.info(\"Initializing configured GPU resources for the NodeManager.\");\r\n    List<GpuDevice> usableGpus = gpuDiscoverer.getGpusUsableByYarn();\r\n    if (usableGpus == null || usableGpus.isEmpty()) {\r\n        String message = \"GPU is enabled, \" + \"but could not find any usable GPUs on the NodeManager!\";\r\n        LOG.error(message);\r\n        throwIfNecessary(new YarnException(message), conf);\r\n        return;\r\n    }\r\n    long nUsableGpus = usableGpus.size();\r\n    Map<String, ResourceInformation> configuredResourceTypes = ResourceUtils.getResourceTypes();\r\n    if (!configuredResourceTypes.containsKey(GPU_URI)) {\r\n        LOG.warn(\"Found \" + nUsableGpus + \" usable GPUs, however \" + GPU_URI + \" resource-type is not configured inside\" + \" resource-types.xml, please configure it to enable GPU feature or\" + \" remove \" + GPU_URI + \" from \" + YarnConfiguration.NM_RESOURCE_PLUGINS);\r\n    }\r\n    res.setResourceValue(GPU_URI, nUsableGpus);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "getAvgNodeGpuUtilization",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "float getAvgNodeGpuUtilization() throws Exception\n{\r\n    List<PerGpuDeviceInformation> gpuList = gpuDiscoverer.getGpuDeviceInformation().getGpus();\r\n    Float avgGpuUtilization = 0F;\r\n    if (gpuList != null && gpuList.size() != 0) {\r\n        avgGpuUtilization = getTotalNodeGpuUtilization() / gpuList.size();\r\n    }\r\n    return avgGpuUtilization;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "getTotalNodeGpuUtilization",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "float getTotalNodeGpuUtilization() throws Exception\n{\r\n    List<PerGpuDeviceInformation> gpuList = gpuDiscoverer.getGpuDeviceInformation().getGpus();\r\n    Float totalGpuUtilization = gpuList.stream().map(g -> g.getGpuUtilizations().getOverallGpuUtilization()).collect(Collectors.summingDouble(Float::floatValue)).floatValue();\r\n    return totalGpuUtilization;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "shouldDoLogAggregation",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean shouldDoLogAggregation(ContainerLogContext logContext)\n{\r\n    int exitCode = logContext.getExitCode();\r\n    return logContext.getContainerType() == ContainerType.APPLICATION_MASTER || (exitCode != 0 && exitCode != ExitCode.FORCE_KILLED.getExitCode() && exitCode != ExitCode.TERMINATED.getExitCode());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "addGpu",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addGpu(GpuDevice gpuDevice)\n{\r\n    allowedGpuDevices.add(gpuDevice);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "getAvailableGpus",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int getAvailableGpus()\n{\r\n    return allowedGpuDevices.size() - usedDevices.size();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "recoverAssignedGpus",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void recoverAssignedGpus(ContainerId containerId) throws ResourceHandlerException\n{\r\n    Container c = nmContext.getContainers().get(containerId);\r\n    if (c == null) {\r\n        throw new ResourceHandlerException(\"Cannot find container with id=\" + containerId + \", this should not occur under normal circumstances!\");\r\n    }\r\n    LOG.info(\"Starting recovery of GpuDevice for {}.\", containerId);\r\n    for (Serializable gpuDeviceSerializable : c.getResourceMappings().getAssignedResources(GPU_URI)) {\r\n        if (!(gpuDeviceSerializable instanceof GpuDevice)) {\r\n            throw new ResourceHandlerException(\"Trying to recover device id, however it\" + \" is not an instance of \" + GpuDevice.class.getName() + \", this should not occur under normal circumstances!\");\r\n        }\r\n        GpuDevice gpuDevice = (GpuDevice) gpuDeviceSerializable;\r\n        if (!allowedGpuDevices.contains(gpuDevice)) {\r\n            throw new ResourceHandlerException(\"Try to recover device = \" + gpuDevice + \" however it is not in the allowed device list:\" + StringUtils.join(\",\", allowedGpuDevices));\r\n        }\r\n        if (usedDevices.containsKey(gpuDevice)) {\r\n            throw new ResourceHandlerException(\"Try to recover device id = \" + gpuDevice + \" however it is already assigned to container=\" + usedDevices.get(gpuDevice) + \", please double check what happened.\");\r\n        }\r\n        usedDevices.put(gpuDevice, containerId);\r\n        LOG.info(\"ContainerId {} is assigned to GpuDevice {} on recovery.\", containerId, gpuDevice);\r\n    }\r\n    LOG.info(\"Finished recovery of GpuDevice for {}.\", containerId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "getRequestedGpus",
  "errType" : [ "ResourceNotFoundException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getRequestedGpus(Resource requestedResource)\n{\r\n    try {\r\n        return Long.valueOf(requestedResource.getResourceValue(GPU_URI)).intValue();\r\n    } catch (ResourceNotFoundException e) {\r\n        return 0;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "assignGpus",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "GpuAllocation assignGpus(Container container) throws ResourceHandlerException\n{\r\n    GpuAllocation allocation = internalAssignGpus(container);\r\n    int timeWaiting = 0;\r\n    while (allocation == null) {\r\n        if (timeWaiting >= waitPeriodForResource) {\r\n            break;\r\n        }\r\n        try {\r\n            LOG.info(\"Container : \" + container.getContainerId() + \" is waiting for free GPU devices.\");\r\n            Thread.sleep(WAIT_MS_PER_LOOP);\r\n            timeWaiting += WAIT_MS_PER_LOOP;\r\n            allocation = internalAssignGpus(container);\r\n        } catch (InterruptedException e) {\r\n            Thread.currentThread().interrupt();\r\n            LOG.warn(\"Interrupted while waiting for available GPU\");\r\n            break;\r\n        }\r\n    }\r\n    if (allocation == null) {\r\n        String message = \"Could not get valid GPU device for container '\" + container.getContainerId() + \"' as some other containers might not releasing GPUs.\";\r\n        LOG.warn(message);\r\n        throw new ResourceHandlerException(message);\r\n    }\r\n    return allocation;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "internalAssignGpus",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 18,
  "sourceCodeText" : "GpuAllocation internalAssignGpus(Container container) throws ResourceHandlerException\n{\r\n    Resource requestedResource = container.getResource();\r\n    ContainerId containerId = container.getContainerId();\r\n    int numRequestedGpuDevices = getRequestedGpus(requestedResource);\r\n    if (numRequestedGpuDevices > 0) {\r\n        if (LOG.isDebugEnabled()) {\r\n            LOG.debug(String.format(\"Trying to assign %d GPUs to container: %s\" + \", #AvailableGPUs=%d, #ReleasingGPUs=%d\", numRequestedGpuDevices, containerId, getAvailableGpus(), getReleasingGpus()));\r\n        }\r\n        if (numRequestedGpuDevices > getAvailableGpus()) {\r\n            if (numRequestedGpuDevices <= getReleasingGpus() + getAvailableGpus()) {\r\n                return null;\r\n            }\r\n        }\r\n        if (numRequestedGpuDevices > getAvailableGpus()) {\r\n            throw new ResourceHandlerException(\"Failed to find enough GPUs, requestor=\" + containerId + \", #RequestedGPUs=\" + numRequestedGpuDevices + \", #AvailableGPUs=\" + getAvailableGpus());\r\n        }\r\n        Set<GpuDevice> assignedGpus = new TreeSet<>();\r\n        for (GpuDevice gpu : allowedGpuDevices) {\r\n            if (!usedDevices.containsKey(gpu)) {\r\n                usedDevices.put(gpu, containerId);\r\n                assignedGpus.add(gpu);\r\n                if (assignedGpus.size() == numRequestedGpuDevices) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (!assignedGpus.isEmpty()) {\r\n            try {\r\n                nmContext.getNMStateStore().storeAssignedResources(container, GPU_URI, new ArrayList<>(assignedGpus));\r\n            } catch (IOException e) {\r\n                unassignGpus(containerId);\r\n                throw new ResourceHandlerException(e);\r\n            }\r\n        }\r\n        return new GpuAllocation(assignedGpus, Sets.differenceInTreeSets(allowedGpuDevices, assignedGpus));\r\n    }\r\n    return new GpuAllocation(null, allowedGpuDevices);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "getReleasingGpus",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "long getReleasingGpus()\n{\r\n    long releasingGpus = 0;\r\n    for (ContainerId containerId : ImmutableSet.copyOf(usedDevices.values())) {\r\n        Container container;\r\n        if ((container = nmContext.getContainers().get(containerId)) != null) {\r\n            if (container.isContainerInFinalStates()) {\r\n                releasingGpus = releasingGpus + container.getResource().getResourceInformation(ResourceInformation.GPU_URI).getValue();\r\n            }\r\n        }\r\n    }\r\n    return releasingGpus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "unassignGpus",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void unassignGpus(ContainerId containerId)\n{\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(\"Trying to unassign GPU device from container \" + containerId);\r\n    }\r\n    usedDevices.entrySet().removeIf(entry -> entry.getValue().equals(containerId));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "getDeviceAllocationMapping",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<GpuDevice, ContainerId> getDeviceAllocationMapping()\n{\r\n    return ImmutableMap.copyOf(usedDevices);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "getAllowedGpus",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<GpuDevice> getAllowedGpus()\n{\r\n    return ImmutableList.copyOf(allowedGpuDevices);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "getAssignedGpus",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<AssignedGpuDevice> getAssignedGpus()\n{\r\n    return usedDevices.entrySet().stream().map(e -> {\r\n        final GpuDevice gpu = e.getKey();\r\n        ContainerId containerId = e.getValue();\r\n        return new AssignedGpuDevice(gpu.getIndex(), gpu.getMinorNumber(), containerId);\r\n    }).collect(Collectors.toList());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return GpuResourceAllocator.class.getName();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\event",
  "methodName" : "getContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Container getContainer()\n{\r\n    return container;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\deviceplugin",
  "methodName" : "getResourceName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getResourceName()\n{\r\n    return resourceName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\deviceplugin",
  "methodName" : "getPluginVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getPluginVersion()\n{\r\n    return pluginVersion;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerId getContainerId()\n{\r\n    return this.containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin",
  "methodName" : "updateConfiguredResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void updateConfiguredResource(Resource res) throws YarnException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\security",
  "methodName" : "recover",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void recover() throws IOException\n{\r\n    RecoveredContainerTokensState state = stateStore.loadContainerTokensState();\r\n    MasterKey key = state.getCurrentMasterKey();\r\n    if (key != null) {\r\n        super.currentMasterKey = new MasterKeyData(key, createSecretKey(key.getBytes().array()));\r\n    }\r\n    key = state.getPreviousMasterKey();\r\n    if (key != null) {\r\n        previousMasterKey = new MasterKeyData(key, createSecretKey(key.getBytes().array()));\r\n    }\r\n    if (super.currentMasterKey != null) {\r\n        super.serialNo = super.currentMasterKey.getMasterKey().getKeyId() + 1;\r\n    }\r\n    try (RecoveryIterator<Entry<ContainerId, Long>> it = state.getIterator()) {\r\n        while (it.hasNext()) {\r\n            Entry<ContainerId, Long> entry = it.next();\r\n            ContainerId containerId = entry.getKey();\r\n            Long expTime = entry.getValue();\r\n            List<ContainerId> containerList = recentlyStartedContainerTracker.get(expTime);\r\n            if (containerList == null) {\r\n                containerList = new ArrayList<ContainerId>();\r\n                recentlyStartedContainerTracker.put(expTime, containerList);\r\n            }\r\n            if (!containerList.contains(containerId)) {\r\n                containerList.add(containerId);\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\security",
  "methodName" : "updateCurrentMasterKey",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void updateCurrentMasterKey(MasterKeyData key)\n{\r\n    super.currentMasterKey = key;\r\n    try {\r\n        stateStore.storeContainerTokenCurrentMasterKey(key.getMasterKey());\r\n    } catch (IOException e) {\r\n        LOG.error(\"Unable to update current master key in state store\", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\security",
  "methodName" : "updatePreviousMasterKey",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void updatePreviousMasterKey(MasterKeyData key)\n{\r\n    previousMasterKey = key;\r\n    try {\r\n        stateStore.storeContainerTokenPreviousMasterKey(key.getMasterKey());\r\n    } catch (IOException e) {\r\n        LOG.error(\"Unable to update previous master key in state store\", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\security",
  "methodName" : "setMasterKey",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setMasterKey(MasterKey masterKeyRecord)\n{\r\n    if (super.currentMasterKey == null || super.currentMasterKey.getMasterKey().getKeyId() != masterKeyRecord.getKeyId()) {\r\n        LOG.info(\"Rolling master-key for container-tokens, got key with id \" + masterKeyRecord.getKeyId());\r\n        if (super.currentMasterKey != null) {\r\n            updatePreviousMasterKey(super.currentMasterKey);\r\n        }\r\n        updateCurrentMasterKey(new MasterKeyData(masterKeyRecord, createSecretKey(masterKeyRecord.getBytes().array())));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\security",
  "methodName" : "retrievePassword",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "byte[] retrievePassword(ContainerTokenIdentifier identifier) throws SecretManager.InvalidToken\n{\r\n    int keyId = identifier.getMasterKeyId();\r\n    MasterKeyData masterKeyToUse = null;\r\n    if (this.previousMasterKey != null && keyId == this.previousMasterKey.getMasterKey().getKeyId()) {\r\n        masterKeyToUse = this.previousMasterKey;\r\n    } else if (keyId == super.currentMasterKey.getMasterKey().getKeyId()) {\r\n        masterKeyToUse = super.currentMasterKey;\r\n    }\r\n    if (nodeHostAddr != null && !identifier.getNmHostAddress().equals(nodeHostAddr)) {\r\n        throw new SecretManager.InvalidToken(\"Given Container \" + identifier.getContainerID().toString() + \" identifier is not valid for current Node manager. Expected : \" + nodeHostAddr + \" Found : \" + identifier.getNmHostAddress());\r\n    }\r\n    if (masterKeyToUse != null) {\r\n        return retrievePasswordInternal(identifier, masterKeyToUse);\r\n    }\r\n    throw new SecretManager.InvalidToken(\"Given Container \" + identifier.getContainerID().toString() + \" seems to have an illegally generated token.\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\security",
  "methodName" : "startContainerSuccessful",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void startContainerSuccessful(ContainerTokenIdentifier tokenId)\n{\r\n    removeAnyContainerTokenIfExpired();\r\n    ContainerId containerId = tokenId.getContainerID();\r\n    Long expTime = tokenId.getExpiryTimeStamp();\r\n    if (!recentlyStartedContainerTracker.containsKey(expTime)) {\r\n        recentlyStartedContainerTracker.put(expTime, new ArrayList<ContainerId>());\r\n    }\r\n    recentlyStartedContainerTracker.get(expTime).add(containerId);\r\n    try {\r\n        stateStore.storeContainerToken(containerId, expTime);\r\n    } catch (IOException e) {\r\n        LOG.error(\"Unable to store token for container \" + containerId, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\security",
  "methodName" : "removeAnyContainerTokenIfExpired",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void removeAnyContainerTokenIfExpired()\n{\r\n    Iterator<Entry<Long, List<ContainerId>>> containersI = this.recentlyStartedContainerTracker.entrySet().iterator();\r\n    Long currTime = System.currentTimeMillis();\r\n    while (containersI.hasNext()) {\r\n        Entry<Long, List<ContainerId>> containerEntry = containersI.next();\r\n        if (containerEntry.getKey() < currTime) {\r\n            for (ContainerId container : containerEntry.getValue()) {\r\n                try {\r\n                    stateStore.removeContainerToken(container);\r\n                } catch (IOException e) {\r\n                    LOG.error(\"Unable to remove token for container \" + container, e);\r\n                }\r\n            }\r\n            containersI.remove();\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\security",
  "methodName" : "isValidStartContainerRequest",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean isValidStartContainerRequest(ContainerTokenIdentifier containerTokenIdentifier)\n{\r\n    removeAnyContainerTokenIfExpired();\r\n    Long expTime = containerTokenIdentifier.getExpiryTimeStamp();\r\n    List<ContainerId> containers = this.recentlyStartedContainerTracker.get(expTime);\r\n    if (containers == null || !containers.contains(containerTokenIdentifier.getContainerID())) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\security",
  "methodName" : "setNodeId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNodeId(NodeId nodeId)\n{\r\n    nodeHostAddr = nodeId.toString();\r\n    LOG.info(\"Updating node address : \" + nodeHostAddr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "getProcessId",
  "errType" : [ "Exception", "Exception" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "String getProcessId(Path path) throws IOException\n{\r\n    if (path == null) {\r\n        throw new IOException(\"Trying to access process id from a null path\");\r\n    }\r\n    LOG.debug(\"Accessing pid from pid file {}\", path);\r\n    String processId = null;\r\n    BufferedReader bufReader = null;\r\n    try {\r\n        File file = new File(path.toString());\r\n        if (file.exists()) {\r\n            FileInputStream fis = new FileInputStream(file);\r\n            bufReader = new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\r\n            while (true) {\r\n                String line = bufReader.readLine();\r\n                if (line == null) {\r\n                    break;\r\n                }\r\n                String temp = line.trim();\r\n                if (!temp.isEmpty()) {\r\n                    if (Shell.WINDOWS) {\r\n                        try {\r\n                            ContainerId.fromString(temp);\r\n                            processId = temp;\r\n                            break;\r\n                        } catch (Exception e) {\r\n                        }\r\n                    } else {\r\n                        try {\r\n                            long pid = Long.parseLong(temp);\r\n                            if (pid > 0) {\r\n                                processId = temp;\r\n                                break;\r\n                            }\r\n                        } catch (Exception e) {\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } finally {\r\n        if (bufReader != null) {\r\n            bufReader.close();\r\n        }\r\n    }\r\n    LOG.debug(\"Got pid {} from path {}\", (processId != null ? processId : \"null\"), path);\r\n    return processId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "createFpgaVendorPlugin",
  "errType" : [ "ClassNotFoundException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "AbstractFpgaVendorPlugin createFpgaVendorPlugin(Configuration conf)\n{\r\n    String vendorPluginClass = conf.get(YarnConfiguration.NM_FPGA_VENDOR_PLUGIN, YarnConfiguration.DEFAULT_NM_FPGA_VENDOR_PLUGIN);\r\n    LOG.info(\"Using FPGA vendor plugin: \" + vendorPluginClass);\r\n    try {\r\n        Class<?> schedulerClazz = Class.forName(vendorPluginClass);\r\n        if (AbstractFpgaVendorPlugin.class.isAssignableFrom(schedulerClazz)) {\r\n            return (AbstractFpgaVendorPlugin) ReflectionUtils.newInstance(schedulerClazz, conf);\r\n        } else {\r\n            throw new YarnRuntimeException(\"Class: \" + vendorPluginClass + \" not instance of \" + AbstractFpgaVendorPlugin.class.getCanonicalName());\r\n        }\r\n    } catch (ClassNotFoundException e) {\r\n        throw new YarnRuntimeException(\"Could not instantiate FPGA vendor plugin: \" + vendorPluginClass, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "initialize",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void initialize(Context context) throws YarnException\n{\r\n    this.vendorPlugin = createFpgaVendorPlugin(context.getConf());\r\n    fpgaDiscoverer = new FpgaDiscoverer();\r\n    fpgaDiscoverer.setResourceHanderPlugin(vendorPlugin);\r\n    fpgaDiscoverer.initialize(context.getConf());\r\n    fpgaNodeResourceUpdateHandler = new FpgaNodeResourceUpdateHandler(fpgaDiscoverer);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "createResourceHandler",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourceHandler createResourceHandler(Context nmContext, CGroupsHandler cGroupsHandler, PrivilegedOperationExecutor privilegedOperationExecutor)\n{\r\n    if (fpgaResourceHandler == null) {\r\n        fpgaResourceHandler = new FpgaResourceHandlerImpl(nmContext, cGroupsHandler, privilegedOperationExecutor, vendorPlugin, fpgaDiscoverer);\r\n    }\r\n    return fpgaResourceHandler;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "getNodeResourceHandlerInstance",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeResourceUpdaterPlugin getNodeResourceHandlerInstance()\n{\r\n    return fpgaNodeResourceUpdateHandler;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "cleanup",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void cleanup() throws YarnException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "getDockerCommandPluginInstance",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "DockerCommandPlugin getDockerCommandPluginInstance()\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "getNMResourceInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NMResourceInfo getNMResourceInfo() throws YarnException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return FpgaResourcePlugin.class.getName();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "isResourcesAvailable",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean isResourcesAvailable(Resource resource)\n{\r\n    LOG.debug(\"Memory available:\" + (totalMemory - usedMemory) + \", CPUs available:\" + (totalCpus - usedCpus) + \", requested:\" + resource);\r\n    if ((totalMemory - usedMemory) >= resource.getMemorySize() && (totalCpus - usedCpus) >= resource.getVirtualCores()) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "assignAvailableMemory",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long assignAvailableMemory(long memreq, ContainerId containerId)\n{\r\n    long memAvailable = totalMemory - usedMemory;\r\n    if (memAvailable >= memreq) {\r\n        containerVsMemUsage.put(containerId, memreq);\r\n        usedMemory += memreq;\r\n        return 0;\r\n    } else {\r\n        usedMemory += memAvailable;\r\n        containerVsMemUsage.put(containerId, memAvailable);\r\n        return memreq - memAvailable;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "assignAvailableCpus",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int assignAvailableCpus(int cpusreq, ContainerId containerId)\n{\r\n    int cpusAvailable = totalCpus - usedCpus;\r\n    if (cpusAvailable >= cpusreq) {\r\n        containerVsCpusUsage.put(containerId, cpusreq);\r\n        usedCpus += cpusreq;\r\n        return 0;\r\n    } else {\r\n        usedCpus += cpusAvailable;\r\n        containerVsCpusUsage.put(containerId, cpusAvailable);\r\n        return cpusreq - cpusAvailable;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "assignResources",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void assignResources(Resource resource, ContainerId containerId)\n{\r\n    containerVsMemUsage.put(containerId, resource.getMemorySize());\r\n    containerVsCpusUsage.put(containerId, resource.getVirtualCores());\r\n    usedMemory += resource.getMemorySize();\r\n    usedCpus += resource.getVirtualCores();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "releaseResources",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void releaseResources(ContainerId containerId)\n{\r\n    if (containerVsMemUsage.containsKey(containerId)) {\r\n        usedMemory -= containerVsMemUsage.get(containerId);\r\n        containerVsMemUsage.remove(containerId);\r\n    }\r\n    if (containerVsCpusUsage.containsKey(containerId)) {\r\n        usedCpus -= containerVsCpusUsage.get(containerId);\r\n        containerVsCpusUsage.remove(containerId);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "recoverMemory",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void recoverMemory(ContainerId containerId, long memory)\n{\r\n    containerVsMemUsage.put(containerId, memory);\r\n    usedMemory += memory;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "recoverCpus",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void recoverCpus(ContainerId containerId, int cpus)\n{\r\n    containerVsCpusUsage.put(containerId, cpus);\r\n    usedCpus += cpus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String toString()\n{\r\n    return \"Node Id:\" + nodeId + \"\\tMemory:\" + totalMemory + \"\\tCPus:\" + totalCpus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    final int prime = 31;\r\n    int result = 1;\r\n    result = prime * result + ((nodeId == null) ? 0 : nodeId.hashCode());\r\n    result = prime * result + (int) (totalMemory ^ (totalMemory >>> 32));\r\n    result = prime * result + totalCpus;\r\n    return result;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean equals(Object obj)\n{\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj == null || getClass() != obj.getClass()) {\r\n        return false;\r\n    }\r\n    NumaNodeResource other = (NumaNodeResource) obj;\r\n    if (nodeId == null) {\r\n        if (other.nodeId != null) {\r\n            return false;\r\n        }\r\n    } else if (!nodeId.equals(other.nodeId)) {\r\n        return false;\r\n    }\r\n    if (totalMemory != other.totalMemory) {\r\n        return false;\r\n    }\r\n    if (totalCpus != other.totalCpus) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "getNodeId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getNodeId()\n{\r\n    return nodeId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getLocalFileContext",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FileContext getLocalFileContext(Configuration conf)\n{\r\n    try {\r\n        return FileContext.getLocalFSFileContext(conf);\r\n    } catch (IOException e) {\r\n        throw new YarnRuntimeException(\"Failed to access local fs\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "validateConf",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void validateConf(Configuration conf)\n{\r\n    int perDirFileLimit = conf.getInt(YarnConfiguration.NM_LOCAL_CACHE_MAX_FILES_PER_DIRECTORY, YarnConfiguration.DEFAULT_NM_LOCAL_CACHE_MAX_FILES_PER_DIRECTORY);\r\n    if (perDirFileLimit <= 36) {\r\n        LOG.error(YarnConfiguration.NM_LOCAL_CACHE_MAX_FILES_PER_DIRECTORY + \" parameter is configured with very low value.\");\r\n        throw new YarnRuntimeException(YarnConfiguration.NM_LOCAL_CACHE_MAX_FILES_PER_DIRECTORY + \" parameter is configured with a value less than 37.\");\r\n    } else {\r\n        LOG.info(\"per directory file limit = \" + perDirFileLimit);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "serviceInit",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    this.validateConf(conf);\r\n    this.publicRsrc = new LocalResourcesTrackerImpl(null, null, dispatcher, true, conf, stateStore, dirsHandler);\r\n    this.recordFactory = RecordFactoryProvider.getRecordFactory(conf);\r\n    try {\r\n        lfs = getLocalFileContext(conf);\r\n        lfs.setUMask(new FsPermission((short) FsPermission.DEFAULT_UMASK));\r\n        if (!stateStore.canRecover() || stateStore.isNewlyCreated()) {\r\n            cleanUpLocalDirs(lfs, delService);\r\n            cleanupLogDirs(lfs, delService);\r\n            initializeLocalDirs(lfs);\r\n            initializeLogDirs(lfs);\r\n        }\r\n    } catch (Exception e) {\r\n        throw new YarnRuntimeException(\"Failed to initialize LocalizationService\", e);\r\n    }\r\n    diskValidator = DiskValidatorFactory.getInstance(YarnConfiguration.DEFAULT_DISK_VALIDATOR);\r\n    cacheTargetSize = conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) << 20;\r\n    cacheCleanupPeriod = conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\r\n    localizationServerAddress = conf.getSocketAddr(YarnConfiguration.NM_BIND_HOST, YarnConfiguration.NM_LOCALIZER_ADDRESS, YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS, YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\r\n    localizerTracker = createLocalizerTracker(conf);\r\n    addService(localizerTracker);\r\n    dispatcher.register(LocalizerEventType.class, localizerTracker);\r\n    localDirsChangeListener = new DirsChangeListener() {\r\n\r\n        @Override\r\n        public void onDirsChanged() {\r\n            checkAndInitializeLocalDirs();\r\n        }\r\n    };\r\n    logDirsChangeListener = new DirsChangeListener() {\r\n\r\n        @Override\r\n        public void onDirsChanged() {\r\n            initializeLogDirs(lfs);\r\n        }\r\n    };\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "recoverLocalizedResources",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void recoverLocalizedResources(RecoveredLocalizationState state) throws URISyntaxException, IOException\n{\r\n    LocalResourceTrackerState trackerState = state.getPublicTrackerState();\r\n    recoverTrackerResources(publicRsrc, trackerState);\r\n    try (RecoveryIterator<Map.Entry<String, RecoveredUserResources>> it = state.getIterator()) {\r\n        while (it.hasNext()) {\r\n            Map.Entry<String, RecoveredUserResources> userEntry = it.next();\r\n            String user = userEntry.getKey();\r\n            RecoveredUserResources userResources = userEntry.getValue();\r\n            trackerState = userResources.getPrivateTrackerState();\r\n            LocalResourcesTracker tracker = new LocalResourcesTrackerImpl(user, null, dispatcher, true, super.getConfig(), stateStore, dirsHandler);\r\n            LocalResourcesTracker oldTracker = privateRsrc.putIfAbsent(user, tracker);\r\n            if (oldTracker != null) {\r\n                tracker = oldTracker;\r\n            }\r\n            recoverTrackerResources(tracker, trackerState);\r\n            for (Map.Entry<ApplicationId, LocalResourceTrackerState> appEntry : userResources.getAppTrackerStates().entrySet()) {\r\n                trackerState = appEntry.getValue();\r\n                ApplicationId appId = appEntry.getKey();\r\n                String appIdStr = appId.toString();\r\n                LocalResourcesTracker tracker1 = new LocalResourcesTrackerImpl(user, appId, dispatcher, false, super.getConfig(), stateStore, dirsHandler);\r\n                LocalResourcesTracker oldTracker1 = appRsrc.putIfAbsent(appIdStr, tracker1);\r\n                if (oldTracker1 != null) {\r\n                    tracker1 = oldTracker1;\r\n                }\r\n                recoverTrackerResources(tracker1, trackerState);\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "recoverTrackerResources",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void recoverTrackerResources(LocalResourcesTracker tracker, LocalResourceTrackerState state) throws URISyntaxException, IOException\n{\r\n    try (RecoveryIterator<LocalizedResourceProto> it = state.getCompletedResourcesIterator()) {\r\n        while (it != null && it.hasNext()) {\r\n            LocalizedResourceProto proto = it.next();\r\n            LocalResource rsrc = new LocalResourcePBImpl(proto.getResource());\r\n            LocalResourceRequest req = new LocalResourceRequest(rsrc);\r\n            LOG.debug(\"Recovering localized resource {} at {}\", req, proto.getLocalPath());\r\n            tracker.handle(new ResourceRecoveredEvent(req, new Path(proto.getLocalPath()), proto.getSize()));\r\n        }\r\n    }\r\n    try (RecoveryIterator<Map.Entry<LocalResourceProto, Path>> it = state.getStartedResourcesIterator()) {\r\n        while (it != null && it.hasNext()) {\r\n            Map.Entry<LocalResourceProto, Path> entry = it.next();\r\n            LocalResource rsrc = new LocalResourcePBImpl(entry.getKey());\r\n            LocalResourceRequest req = new LocalResourceRequest(rsrc);\r\n            Path localPath = entry.getValue();\r\n            tracker.handle(new ResourceRecoveredEvent(req, localPath, 0));\r\n            LOG.info(\"Deleting in-progress localization for \" + req + \" at \" + localPath);\r\n            tracker.remove(tracker.getLocalizedResource(req), delService);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "heartbeat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LocalizerHeartbeatResponse heartbeat(LocalizerStatus status)\n{\r\n    return localizerTracker.processHeartbeat(status);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    cacheCleanup.scheduleWithFixedDelay(new CacheCleanup(dispatcher), cacheCleanupPeriod, cacheCleanupPeriod, TimeUnit.MILLISECONDS);\r\n    server = createServer();\r\n    server.start();\r\n    localizationServerAddress = getConfig().updateConnectAddr(YarnConfiguration.NM_BIND_HOST, YarnConfiguration.NM_LOCALIZER_ADDRESS, YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS, server.getListenerAddress());\r\n    LOG.info(\"Localizer started on port \" + server.getPort());\r\n    super.serviceStart();\r\n    dirsHandler.registerLocalDirsChangeListener(localDirsChangeListener);\r\n    dirsHandler.registerLogDirsChangeListener(logDirsChangeListener);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "createLocalizerTracker",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LocalizerTracker createLocalizerTracker(Configuration conf)\n{\r\n    return new LocalizerTracker(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "createServer",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "Server createServer()\n{\r\n    Configuration conf = getConfig();\r\n    YarnRPC rpc = YarnRPC.create(conf);\r\n    if (UserGroupInformation.isSecurityEnabled()) {\r\n        secretManager = new LocalizerTokenSecretManager();\r\n    }\r\n    Server server = rpc.getServer(LocalizationProtocol.class, this, localizationServerAddress, conf, secretManager, conf.getInt(YarnConfiguration.NM_LOCALIZER_CLIENT_THREAD_COUNT, YarnConfiguration.DEFAULT_NM_LOCALIZER_CLIENT_THREAD_COUNT));\r\n    if (conf.getBoolean(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, false)) {\r\n        server.refreshServiceAcl(conf, NMPolicyProvider.getInstance());\r\n    }\r\n    return server;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    dirsHandler.deregisterLocalDirsChangeListener(localDirsChangeListener);\r\n    dirsHandler.deregisterLogDirsChangeListener(logDirsChangeListener);\r\n    if (server != null) {\r\n        server.stop();\r\n    }\r\n    cacheCleanup.shutdown();\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "handle",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void handle(LocalizationEvent event)\n{\r\n    switch(event.getType()) {\r\n        case INIT_APPLICATION_RESOURCES:\r\n            handleInitApplicationResources(((ApplicationLocalizationEvent) event).getApplication());\r\n            break;\r\n        case LOCALIZE_CONTAINER_RESOURCES:\r\n            handleInitContainerResources((ContainerLocalizationRequestEvent) event);\r\n            break;\r\n        case CONTAINER_RESOURCES_LOCALIZED:\r\n            handleContainerResourcesLocalized((ContainerLocalizationEvent) event);\r\n            break;\r\n        case CACHE_CLEANUP:\r\n            handleCacheCleanup();\r\n            break;\r\n        case CLEANUP_CONTAINER_RESOURCES:\r\n            handleCleanupContainerResources((ContainerLocalizationCleanupEvent) event);\r\n            break;\r\n        case DESTROY_APPLICATION_RESOURCES:\r\n            handleDestroyApplicationResources(((ApplicationLocalizationEvent) event).getApplication());\r\n            break;\r\n        default:\r\n            throw new YarnRuntimeException(\"Unknown localization event: \" + event);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "handleInitApplicationResources",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void handleInitApplicationResources(Application app)\n{\r\n    String userName = app.getUser();\r\n    privateRsrc.putIfAbsent(userName, new LocalResourcesTrackerImpl(userName, null, dispatcher, true, super.getConfig(), stateStore, dirsHandler));\r\n    String appIdStr = app.getAppId().toString();\r\n    appRsrc.putIfAbsent(appIdStr, new LocalResourcesTrackerImpl(app.getUser(), app.getAppId(), dispatcher, false, super.getConfig(), stateStore, dirsHandler));\r\n    dispatcher.getEventHandler().handle(new ApplicationInitedEvent(app.getAppId()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "handleInitContainerResources",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void handleInitContainerResources(ContainerLocalizationRequestEvent rsrcReqs)\n{\r\n    Container c = rsrcReqs.getContainer();\r\n    EnumSet<ContainerState> set = EnumSet.of(ContainerState.LOCALIZING, ContainerState.RUNNING, ContainerState.REINITIALIZING);\r\n    if (!set.contains(c.getContainerState())) {\r\n        LOG.warn(c.getContainerId() + \" is at \" + c.getContainerState() + \" state, do not localize resources.\");\r\n        return;\r\n    }\r\n    LoadingCache<Path, Future<FileStatus>> statCache = CacheBuilder.newBuilder().build(FSDownload.createStatusCacheLoader(getConfig()));\r\n    LocalizerContext ctxt = new LocalizerContext(c.getUser(), c.getContainerId(), c.getCredentials(), statCache);\r\n    Map<LocalResourceVisibility, Collection<LocalResourceRequest>> rsrcs = rsrcReqs.getRequestedResources();\r\n    for (Map.Entry<LocalResourceVisibility, Collection<LocalResourceRequest>> e : rsrcs.entrySet()) {\r\n        LocalResourcesTracker tracker = getLocalResourcesTracker(e.getKey(), c.getUser(), c.getContainerId().getApplicationAttemptId().getApplicationId());\r\n        for (LocalResourceRequest req : e.getValue()) {\r\n            tracker.handle(new ResourceRequestEvent(req, e.getKey(), ctxt));\r\n            LOG.debug(\"Localizing {} for container {}\", req.getPath(), c.getContainerId());\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "handleContainerResourcesLocalized",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void handleContainerResourcesLocalized(ContainerLocalizationEvent event)\n{\r\n    Container c = event.getContainer();\r\n    String locId = c.getContainerId().toString();\r\n    localizerTracker.endContainerLocalization(locId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "handleCacheCleanup",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "LocalCacheCleanerStats handleCacheCleanup()\n{\r\n    LocalCacheCleaner cleaner = new LocalCacheCleaner(delService, cacheTargetSize);\r\n    cleaner.addResources(publicRsrc);\r\n    for (LocalResourcesTracker t : privateRsrc.values()) {\r\n        cleaner.addResources(t);\r\n    }\r\n    LocalCacheCleaner.LocalCacheCleanerStats stats = cleaner.cleanCache();\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(stats.toStringDetailed());\r\n    } else if (LOG.isInfoEnabled()) {\r\n        LOG.info(stats.toString());\r\n    }\r\n    metrics.setCacheSizeBeforeClean(stats.getCacheSizeBeforeClean());\r\n    metrics.setTotalBytesDeleted(stats.getTotalDelSize());\r\n    metrics.setPrivateBytesDeleted(stats.getPrivateDelSize());\r\n    metrics.setPublicBytesDeleted(stats.getPublicDelSize());\r\n    return stats;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "handleCleanupContainerResources",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void handleCleanupContainerResources(ContainerLocalizationCleanupEvent rsrcCleanup)\n{\r\n    Container c = rsrcCleanup.getContainer();\r\n    Map<LocalResourceVisibility, Collection<LocalResourceRequest>> rsrcs = rsrcCleanup.getResources();\r\n    for (Map.Entry<LocalResourceVisibility, Collection<LocalResourceRequest>> e : rsrcs.entrySet()) {\r\n        LocalResourcesTracker tracker = getLocalResourcesTracker(e.getKey(), c.getUser(), c.getContainerId().getApplicationAttemptId().getApplicationId());\r\n        for (LocalResourceRequest req : e.getValue()) {\r\n            tracker.handle(new ResourceReleaseEvent(req, c.getContainerId()));\r\n        }\r\n    }\r\n    String locId = c.getContainerId().toString();\r\n    localizerTracker.cleanupPrivLocalizers(locId);\r\n    String userName = c.getUser();\r\n    String containerIDStr = c.toString();\r\n    String appIDStr = c.getContainerId().getApplicationAttemptId().getApplicationId().toString();\r\n    for (String localDir : dirsHandler.getLocalDirsForCleanup()) {\r\n        Path usersdir = new Path(localDir, ContainerLocalizer.USERCACHE);\r\n        Path userdir = new Path(usersdir, userName);\r\n        Path allAppsdir = new Path(userdir, ContainerLocalizer.APPCACHE);\r\n        Path appDir = new Path(allAppsdir, appIDStr);\r\n        Path containerDir = new Path(appDir, containerIDStr);\r\n        submitDirForDeletion(userName, containerDir);\r\n        Path sysDir = new Path(localDir, NM_PRIVATE_DIR);\r\n        Path appSysDir = new Path(sysDir, appIDStr);\r\n        Path containerSysDir = new Path(appSysDir, containerIDStr);\r\n        submitDirForDeletion(null, containerSysDir);\r\n    }\r\n    dispatcher.getEventHandler().handle(new ContainerEvent(c.getContainerId(), ContainerEventType.CONTAINER_RESOURCES_CLEANEDUP));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "submitDirForDeletion",
  "errType" : [ "UnsupportedFileSystemException", "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void submitDirForDeletion(String userName, Path dir)\n{\r\n    try {\r\n        lfs.getFileStatus(dir);\r\n        FileDeletionTask deletionTask = new FileDeletionTask(delService, userName, dir, null);\r\n        delService.delete(deletionTask);\r\n    } catch (UnsupportedFileSystemException ue) {\r\n        LOG.warn(\"Local dir \" + dir + \" is an unsupported filesystem\", ue);\r\n    } catch (IOException ie) {\r\n        return;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "handleDestroyApplicationResources",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void handleDestroyApplicationResources(Application application)\n{\r\n    String userName = application.getUser();\r\n    ApplicationId appId = application.getAppId();\r\n    String appIDStr = application.toString();\r\n    LocalResourcesTracker appLocalRsrcsTracker = appRsrc.remove(appId.toString());\r\n    if (appLocalRsrcsTracker != null) {\r\n        for (LocalizedResource rsrc : appLocalRsrcsTracker) {\r\n            Path localPath = rsrc.getLocalPath();\r\n            if (localPath != null) {\r\n                try {\r\n                    stateStore.removeLocalizedResource(userName, appId, localPath);\r\n                } catch (IOException e) {\r\n                    LOG.error(\"Unable to remove resource \" + rsrc + \" for \" + appIDStr + \" from state store\", e);\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        LOG.warn(\"Removing uninitialized application \" + application);\r\n    }\r\n    userName = application.getUser();\r\n    appIDStr = application.toString();\r\n    for (String localDir : dirsHandler.getLocalDirsForCleanup()) {\r\n        Path usersdir = new Path(localDir, ContainerLocalizer.USERCACHE);\r\n        Path userdir = new Path(usersdir, userName);\r\n        Path allAppsdir = new Path(userdir, ContainerLocalizer.APPCACHE);\r\n        Path appDir = new Path(allAppsdir, appIDStr);\r\n        submitDirForDeletion(userName, appDir);\r\n        Path sysDir = new Path(localDir, NM_PRIVATE_DIR);\r\n        Path appSysDir = new Path(sysDir, appIDStr);\r\n        submitDirForDeletion(null, appSysDir);\r\n    }\r\n    dispatcher.getEventHandler().handle(new ApplicationEvent(application.getAppId(), ApplicationEventType.APPLICATION_RESOURCES_CLEANEDUP));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getLocalResourcesTracker",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "LocalResourcesTracker getLocalResourcesTracker(LocalResourceVisibility visibility, String user, ApplicationId appId)\n{\r\n    switch(visibility) {\r\n        default:\r\n        case PUBLIC:\r\n            return publicRsrc;\r\n        case PRIVATE:\r\n            return privateRsrc.get(user);\r\n        case APPLICATION:\r\n            return appRsrc.get(appId.toString());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getUserFileCachePath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getUserFileCachePath(String user)\n{\r\n    return StringUtils.join(Path.SEPARATOR, Arrays.asList(\".\", ContainerLocalizer.USERCACHE, user, ContainerLocalizer.FILECACHE));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getAppFileCachePath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getAppFileCachePath(String user, String appId)\n{\r\n    return StringUtils.join(Path.SEPARATOR, Arrays.asList(\".\", ContainerLocalizer.USERCACHE, user, ContainerLocalizer.APPCACHE, appId, ContainerLocalizer.FILECACHE));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getPublicLocalizer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PublicLocalizer getPublicLocalizer()\n{\r\n    return localizerTracker.publicLocalizer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getLocalizerRunner",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LocalizerRunner getLocalizerRunner(String locId)\n{\r\n    return localizerTracker.privLocalizers.get(locId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getPrivateLocalizers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, LocalizerRunner> getPrivateLocalizers()\n{\r\n    return localizerTracker.privLocalizers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "createLocalizerExecutor",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ExecutorService createLocalizerExecutor(Configuration conf)\n{\r\n    int nThreads = conf.getInt(YarnConfiguration.NM_LOCALIZER_FETCH_THREAD_COUNT, YarnConfiguration.DEFAULT_NM_LOCALIZER_FETCH_THREAD_COUNT);\r\n    ThreadFactory tf = new ThreadFactoryBuilder().setNameFormat(\"PublicLocalizer #%d\").build();\r\n    return HadoopExecutors.newFixedThreadPool(nThreads, tf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "buildTokenFingerprint",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "String buildTokenFingerprint(Token<? extends TokenIdentifier> tk) throws IOException\n{\r\n    char[] digest = DigestUtils.sha256Hex(tk.encodeToUrlString()).toCharArray();\r\n    StringBuilder fingerprint = new StringBuilder();\r\n    for (int i = 0; i < 10; ++i) {\r\n        if (i > 0) {\r\n            fingerprint.append(' ');\r\n        }\r\n        fingerprint.append(digest[2 * i]);\r\n        fingerprint.append(digest[2 * i + 1]);\r\n    }\r\n    return fingerprint.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "initializeLocalDirs",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initializeLocalDirs(FileContext lfs)\n{\r\n    List<String> localDirs = dirsHandler.getLocalDirs();\r\n    for (String localDir : localDirs) {\r\n        initializeLocalDir(lfs, localDir);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "initializeLocalDir",
  "errType" : [ "FileNotFoundException", "IOException", "IOException", "IOException" ],
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void initializeLocalDir(FileContext lfs, String localDir)\n{\r\n    Map<Path, FsPermission> pathPermissionMap = getLocalDirsPathPermissionsMap(localDir);\r\n    for (Map.Entry<Path, FsPermission> entry : pathPermissionMap.entrySet()) {\r\n        FileStatus status;\r\n        try {\r\n            status = lfs.getFileStatus(entry.getKey());\r\n        } catch (FileNotFoundException fs) {\r\n            status = null;\r\n        } catch (IOException ie) {\r\n            String msg = \"Could not get file status for local dir \" + entry.getKey();\r\n            LOG.warn(msg, ie);\r\n            throw new YarnRuntimeException(msg, ie);\r\n        }\r\n        if (status == null) {\r\n            try {\r\n                lfs.mkdir(entry.getKey(), entry.getValue(), true);\r\n                status = lfs.getFileStatus(entry.getKey());\r\n            } catch (IOException e) {\r\n                String msg = \"Could not initialize local dir \" + entry.getKey();\r\n                LOG.warn(msg, e);\r\n                throw new YarnRuntimeException(msg, e);\r\n            }\r\n        }\r\n        FsPermission perms = status.getPermission();\r\n        if (!perms.equals(entry.getValue())) {\r\n            try {\r\n                lfs.setPermission(entry.getKey(), entry.getValue());\r\n            } catch (IOException ie) {\r\n                String msg = \"Could not set permissions for local dir \" + entry.getKey();\r\n                LOG.warn(msg, ie);\r\n                throw new YarnRuntimeException(msg, ie);\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "initializeLogDirs",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initializeLogDirs(FileContext lfs)\n{\r\n    List<String> logDirs = dirsHandler.getLogDirs();\r\n    for (String logDir : logDirs) {\r\n        initializeLogDir(lfs, logDir);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "initializeLogDir",
  "errType" : [ "FileAlreadyExistsException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initializeLogDir(FileContext fs, String logDir)\n{\r\n    try {\r\n        fs.mkdir(new Path(logDir), null, true);\r\n    } catch (FileAlreadyExistsException fe) {\r\n    } catch (IOException e) {\r\n        String msg = \"Could not initialize log dir \" + logDir;\r\n        LOG.warn(msg, e);\r\n        throw new YarnRuntimeException(msg, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "cleanupLogDirs",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void cleanupLogDirs(FileContext fs, DeletionService del)\n{\r\n    for (String logDir : dirsHandler.getLogDirsForCleanup()) {\r\n        try {\r\n            cleanupLogDir(fs, del, logDir);\r\n        } catch (IOException e) {\r\n            LOG.warn(\"failed to cleanup app log dir \" + logDir, e);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "cleanupLogDir",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void cleanupLogDir(FileContext fs, DeletionService del, String logDir) throws IOException\n{\r\n    if (!fs.util().exists(new Path(logDir))) {\r\n        return;\r\n    }\r\n    renameAppLogDir(logDir);\r\n    deleteAppLogDir(fs, del, logDir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "renameAppLogDir",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void renameAppLogDir(String logDir) throws IOException\n{\r\n    long currentTimeStamp = System.currentTimeMillis();\r\n    RemoteIterator<FileStatus> fileStatuses = lfs.listStatus(new Path(logDir));\r\n    if (fileStatuses != null) {\r\n        while (fileStatuses.hasNext()) {\r\n            FileStatus fileStatus = fileStatuses.next();\r\n            String appName = fileStatus.getPath().getName();\r\n            if (appName.matches(\"^application_\\\\d+_\\\\d+$\")) {\r\n                lfs.rename(new Path(logDir, appName), new Path(logDir, appName + \"_DEL_\" + currentTimeStamp));\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "deleteAppLogDir",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void deleteAppLogDir(FileContext fs, DeletionService del, String logDir) throws IOException\n{\r\n    RemoteIterator<FileStatus> fileStatuses = fs.listStatus(new Path(logDir));\r\n    if (fileStatuses != null) {\r\n        while (fileStatuses.hasNext()) {\r\n            FileStatus fileStatus = fileStatuses.next();\r\n            String appName = fileStatus.getPath().getName();\r\n            if (appName.matches(\"^application_\\\\d+_\\\\d+_DEL_\\\\d+$\")) {\r\n                LOG.info(\"delete app log dir,\" + appName);\r\n                FileDeletionTask deletionTask = new FileDeletionTask(del, null, fileStatus.getPath(), null);\r\n                del.delete(deletionTask);\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "cleanUpLocalDirs",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void cleanUpLocalDirs(FileContext lfs, DeletionService del)\n{\r\n    for (String localDir : dirsHandler.getLocalDirsForCleanup()) {\r\n        cleanUpLocalDir(lfs, del, localDir);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "cleanUpLocalDir",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void cleanUpLocalDir(FileContext lfs, DeletionService del, String localDir)\n{\r\n    long currentTimeStamp = System.currentTimeMillis();\r\n    renameLocalDir(lfs, localDir, ContainerLocalizer.USERCACHE, currentTimeStamp);\r\n    renameLocalDir(lfs, localDir, ContainerLocalizer.FILECACHE, currentTimeStamp);\r\n    renameLocalDir(lfs, localDir, ResourceLocalizationService.NM_PRIVATE_DIR, currentTimeStamp);\r\n    try {\r\n        deleteLocalDir(lfs, del, localDir);\r\n    } catch (IOException e) {\r\n        LOG.warn(\"Failed to delete localDir: \" + localDir);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "renameLocalDir",
  "errType" : [ "FileNotFoundException", "Exception" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void renameLocalDir(FileContext lfs, String localDir, String localSubDir, long currentTimeStamp)\n{\r\n    try {\r\n        lfs.rename(new Path(localDir, localSubDir), new Path(localDir, localSubDir + \"_DEL_\" + currentTimeStamp));\r\n    } catch (FileNotFoundException ex) {\r\n    } catch (Exception ex) {\r\n        LOG.warn(\"Failed to rename the local file under \" + localDir + \"/\" + localSubDir);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "deleteLocalDir",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void deleteLocalDir(FileContext lfs, DeletionService del, String localDir) throws IOException\n{\r\n    RemoteIterator<FileStatus> fileStatus = lfs.listStatus(new Path(localDir));\r\n    if (fileStatus != null) {\r\n        while (fileStatus.hasNext()) {\r\n            FileStatus status = fileStatus.next();\r\n            try {\r\n                if (status.getPath().getName().matches(\".*\" + ContainerLocalizer.USERCACHE + \"_DEL_.*\")) {\r\n                    LOG.info(\"usercache path : \" + status.getPath().toString());\r\n                    cleanUpFilesPerUserDir(lfs, del, status.getPath());\r\n                } else if (status.getPath().getName().matches(\".*\" + NM_PRIVATE_DIR + \"_DEL_.*\") || status.getPath().getName().matches(\".*\" + ContainerLocalizer.FILECACHE + \"_DEL_.*\")) {\r\n                    FileDeletionTask deletionTask = new FileDeletionTask(del, null, status.getPath(), null);\r\n                    del.delete(deletionTask);\r\n                }\r\n            } catch (IOException ex) {\r\n                LOG.warn(\"Failed to delete this local Directory: \" + status.getPath().getName());\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "cleanUpFilesPerUserDir",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void cleanUpFilesPerUserDir(FileContext lfs, DeletionService del, Path userDirPath) throws IOException\n{\r\n    RemoteIterator<FileStatus> userDirStatus = lfs.listStatus(userDirPath);\r\n    FileDeletionTask dependentDeletionTask = new FileDeletionTask(del, null, userDirPath, new ArrayList<Path>());\r\n    if (userDirStatus != null && userDirStatus.hasNext()) {\r\n        List<FileDeletionTask> deletionTasks = new ArrayList<FileDeletionTask>();\r\n        while (userDirStatus.hasNext()) {\r\n            FileStatus status = userDirStatus.next();\r\n            String owner = status.getOwner();\r\n            List<Path> pathList = new ArrayList<>();\r\n            pathList.add(status.getPath());\r\n            FileDeletionTask deletionTask = new FileDeletionTask(del, owner, null, pathList);\r\n            deletionTask.addDeletionTaskDependency(dependentDeletionTask);\r\n            deletionTasks.add(deletionTask);\r\n        }\r\n        for (FileDeletionTask task : deletionTasks) {\r\n            del.delete(task);\r\n        }\r\n    } else {\r\n        del.delete(dependentDeletionTask);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "checkAndInitializeLocalDirs",
  "errType" : [ "YarnRuntimeException", "YarnRuntimeException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void checkAndInitializeLocalDirs()\n{\r\n    List<String> dirs = dirsHandler.getLocalDirs();\r\n    List<String> checkFailedDirs = new ArrayList<String>();\r\n    for (String dir : dirs) {\r\n        try {\r\n            checkLocalDir(dir);\r\n        } catch (YarnRuntimeException e) {\r\n            checkFailedDirs.add(dir);\r\n        }\r\n    }\r\n    for (String dir : checkFailedDirs) {\r\n        LOG.info(\"Attempting to initialize \" + dir);\r\n        initializeLocalDir(lfs, dir);\r\n        try {\r\n            checkLocalDir(dir);\r\n        } catch (YarnRuntimeException e) {\r\n            String msg = \"Failed to setup local dir \" + dir + \", which was marked as good.\";\r\n            LOG.warn(msg, e);\r\n            throw new YarnRuntimeException(msg, e);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "checkLocalDir",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "boolean checkLocalDir(String localDir)\n{\r\n    Map<Path, FsPermission> pathPermissionMap = getLocalDirsPathPermissionsMap(localDir);\r\n    for (Map.Entry<Path, FsPermission> entry : pathPermissionMap.entrySet()) {\r\n        FileStatus status;\r\n        try {\r\n            status = lfs.getFileStatus(entry.getKey());\r\n        } catch (Exception e) {\r\n            String msg = \"Could not carry out resource dir checks for \" + localDir + \", which was marked as good\";\r\n            LOG.warn(msg, e);\r\n            throw new YarnRuntimeException(msg, e);\r\n        }\r\n        if (!status.getPermission().equals(entry.getValue())) {\r\n            String msg = \"Permissions incorrectly set for dir \" + entry.getKey() + \", should be \" + entry.getValue() + \", actual value = \" + status.getPermission();\r\n            LOG.warn(msg);\r\n            throw new YarnRuntimeException(msg);\r\n        }\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getLocalDirsPathPermissionsMap",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Map<Path, FsPermission> getLocalDirsPathPermissionsMap(String localDir)\n{\r\n    Map<Path, FsPermission> localDirPathFsPermissionsMap = new HashMap<Path, FsPermission>();\r\n    FsPermission defaultPermission = FsPermission.getDirDefault().applyUMask(lfs.getUMask());\r\n    FsPermission nmPrivatePermission = NM_PRIVATE_PERM.applyUMask(lfs.getUMask());\r\n    Path userDir = new Path(localDir, ContainerLocalizer.USERCACHE);\r\n    Path fileDir = new Path(localDir, ContainerLocalizer.FILECACHE);\r\n    Path sysDir = new Path(localDir, NM_PRIVATE_DIR);\r\n    localDirPathFsPermissionsMap.put(userDir, defaultPermission);\r\n    localDirPathFsPermissionsMap.put(fileDir, defaultPermission);\r\n    localDirPathFsPermissionsMap.put(sysDir, nmPrivatePermission);\r\n    return localDirPathFsPermissionsMap;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getLocalizedResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "LocalizedResource getLocalizedResource(LocalResourceRequest req, String user, ApplicationId appId)\n{\r\n    LocalResourcesTracker tracker = getLocalResourcesTracker(req.getVisibility(), user, appId);\r\n    if (tracker == null) {\r\n        return null;\r\n    }\r\n    return tracker.getLocalizedResource(req);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga\\discovery",
  "methodName" : "discover",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<FpgaDevice> discover() throws ResourceHandlerException\n{\r\n    List<FpgaDevice> list = plugin.discover(FpgaDiscoverer.MAX_EXEC_TIMEOUT_MS);\r\n    if (list.isEmpty()) {\r\n        throw new ResourceHandlerException(\"No FPGA devices detected!\");\r\n    }\r\n    return list;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUser()\n{\r\n    return user;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerId getContainerId()\n{\r\n    return containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getCredentials",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Credentials getCredentials()\n{\r\n    return credentials;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getStatCache",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LoadingCache<Path, Future<FileStatus>> getStatCache()\n{\r\n    return statCache;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "getIndex",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getIndex()\n{\r\n    return index;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "getMinorNumber",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getMinorNumber()\n{\r\n    return minorNumber;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean equals(Object obj)\n{\r\n    if (!(obj instanceof GpuDevice)) {\r\n        return false;\r\n    }\r\n    GpuDevice other = (GpuDevice) obj;\r\n    return index == other.index && minorNumber == other.minorNumber;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "compareTo",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int compareTo(Object obj)\n{\r\n    if (!(obj instanceof GpuDevice)) {\r\n        return -1;\r\n    }\r\n    GpuDevice other = (GpuDevice) obj;\r\n    int result = Integer.compare(index, other.index);\r\n    if (0 != result) {\r\n        return result;\r\n    }\r\n    return Integer.compare(minorNumber, other.minorNumber);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int hashCode()\n{\r\n    final int prime = 47;\r\n    return prime * index + minorNumber;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String toString()\n{\r\n    return \"(index=\" + index + \",minor_number=\" + minorNumber + \")\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    logHandler = createLogHandler(conf, this.context, this.deletionService);\r\n    addIfService(logHandler);\r\n    dispatcher.register(LogHandlerEventType.class, logHandler);\r\n    SharedCacheUploadService sharedCacheUploader = createSharedCacheUploaderService();\r\n    addService(sharedCacheUploader);\r\n    dispatcher.register(SharedCacheUploadEventType.class, sharedCacheUploader);\r\n    createAMRMProxyService(conf);\r\n    waitForContainersOnShutdownMillis = conf.getLong(YarnConfiguration.NM_SLEEP_DELAY_BEFORE_SIGKILL_MS, YarnConfiguration.DEFAULT_NM_SLEEP_DELAY_BEFORE_SIGKILL_MS) + conf.getLong(YarnConfiguration.NM_PROCESS_KILL_WAIT_MS, YarnConfiguration.DEFAULT_NM_PROCESS_KILL_WAIT_MS) + SHUTDOWN_CLEANUP_SLOP_MS;\r\n    super.serviceInit(conf);\r\n    recover();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "createAMRMProxyService",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void createAMRMProxyService(Configuration conf)\n{\r\n    this.amrmProxyEnabled = conf.getBoolean(YarnConfiguration.AMRM_PROXY_ENABLED, YarnConfiguration.DEFAULT_AMRM_PROXY_ENABLED) || conf.getBoolean(YarnConfiguration.DIST_SCHEDULING_ENABLED, YarnConfiguration.DEFAULT_DIST_SCHEDULING_ENABLED);\r\n    if (amrmProxyEnabled) {\r\n        LOG.info(\"AMRMProxyService is enabled. \" + \"All the AM->RM requests will be intercepted by the proxy\");\r\n        this.setAMRMProxyService(new AMRMProxyService(this.context, this.dispatcher));\r\n        addService(this.getAMRMProxyService());\r\n    } else {\r\n        LOG.info(\"AMRMProxyService is disabled\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "createContainerScheduler",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerScheduler createContainerScheduler(Context cntxt)\n{\r\n    return new ContainerScheduler(cntxt, dispatcher, metrics);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "createContainersMonitor",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainersMonitor createContainersMonitor(ContainerExecutor exec)\n{\r\n    return new ContainersMonitorImpl(exec, dispatcher, this.context);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "recover",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void recover() throws IOException, URISyntaxException\n{\r\n    NMStateStoreService stateStore = context.getNMStateStore();\r\n    if (stateStore.canRecover()) {\r\n        rsrcLocalizationSrvc.recoverLocalizedResources(stateStore.loadLocalizationState());\r\n        RecoveredApplicationsState appsState = stateStore.loadApplicationsState();\r\n        try (RecoveryIterator<ContainerManagerApplicationProto> rasIterator = appsState.getIterator()) {\r\n            while (rasIterator.hasNext()) {\r\n                ContainerManagerApplicationProto proto = rasIterator.next();\r\n                LOG.debug(\"Recovering application with state: {}\", proto);\r\n                recoverApplication(proto);\r\n            }\r\n        }\r\n        try (RecoveryIterator<RecoveredContainerState> rcsIterator = stateStore.getContainerStateIterator()) {\r\n            while (rcsIterator.hasNext()) {\r\n                RecoveredContainerState rcs = rcsIterator.next();\r\n                LOG.debug(\"Recovering container with state: {}\", rcs);\r\n                recoverContainer(rcs);\r\n            }\r\n        }\r\n        if (this.amrmProxyEnabled) {\r\n            this.getAMRMProxyService().recover();\r\n        }\r\n        dispatcher.getEventHandler().handle(new ContainerSchedulerEvent(null, ContainerSchedulerEventType.RECOVERY_COMPLETED));\r\n    } else {\r\n        LOG.info(\"Not a recoverable state store. Nothing to recover.\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "recoverApplication",
  "errType" : null,
  "containingMethodsNum" : 22,
  "sourceCodeText" : "void recoverApplication(ContainerManagerApplicationProto p) throws IOException\n{\r\n    ApplicationId appId = new ApplicationIdPBImpl(p.getId());\r\n    Credentials creds = new Credentials();\r\n    creds.readTokenStorageStream(new DataInputStream(p.getCredentials().newInput()));\r\n    List<ApplicationACLMapProto> aclProtoList = p.getAclsList();\r\n    Map<ApplicationAccessType, String> acls = new HashMap<ApplicationAccessType, String>(aclProtoList.size());\r\n    for (ApplicationACLMapProto aclProto : aclProtoList) {\r\n        acls.put(ProtoUtils.convertFromProtoFormat(aclProto.getAccessType()), aclProto.getAcl());\r\n    }\r\n    LogAggregationContext logAggregationContext = null;\r\n    if (p.getLogAggregationContext() != null) {\r\n        logAggregationContext = new LogAggregationContextPBImpl(p.getLogAggregationContext());\r\n    }\r\n    FlowContext fc = null;\r\n    if (p.getFlowContext() != null) {\r\n        FlowContextProto fcp = p.getFlowContext();\r\n        fc = new FlowContext(fcp.getFlowName(), fcp.getFlowVersion(), fcp.getFlowRunId());\r\n        LOG.debug(\"Recovering Flow context: {} for an application {}\", fc, appId);\r\n    } else {\r\n        fc = new FlowContext(TimelineUtils.generateDefaultFlowName(null, appId), YarnConfiguration.DEFAULT_FLOW_VERSION, appId.getClusterTimestamp());\r\n        LOG.debug(\"No prior existing flow context found. Using default Flow context: \" + \"{} for an application {}\", fc, appId);\r\n    }\r\n    LOG.info(\"Recovering application \" + appId);\r\n    ApplicationImpl app = new ApplicationImpl(dispatcher, p.getUser(), fc, appId, creds, context, p.getAppLogAggregationInitedTime());\r\n    context.getApplications().put(appId, app);\r\n    metrics.runningApplication();\r\n    app.handle(new ApplicationInitEvent(appId, acls, logAggregationContext));\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "recoverContainer",
  "errType" : null,
  "containingMethodsNum" : 32,
  "sourceCodeText" : "void recoverContainer(RecoveredContainerState rcs) throws IOException\n{\r\n    StartContainerRequest req = rcs.getStartRequest();\r\n    ContainerLaunchContext launchContext = req.getContainerLaunchContext();\r\n    ContainerTokenIdentifier token;\r\n    if (rcs.getCapability() != null) {\r\n        ContainerTokenIdentifier originalToken = BuilderUtils.newContainerTokenIdentifier(req.getContainerToken());\r\n        token = new ContainerTokenIdentifier(originalToken.getContainerID(), originalToken.getVersion(), originalToken.getNmHostAddress(), originalToken.getApplicationSubmitter(), rcs.getCapability(), originalToken.getExpiryTimeStamp(), originalToken.getMasterKeyId(), originalToken.getRMIdentifier(), originalToken.getPriority(), originalToken.getCreationTime(), originalToken.getLogAggregationContext(), originalToken.getNodeLabelExpression(), originalToken.getContainerType(), originalToken.getExecutionType(), originalToken.getAllocationRequestId(), originalToken.getAllcationTags());\r\n    } else {\r\n        token = BuilderUtils.newContainerTokenIdentifier(req.getContainerToken());\r\n    }\r\n    ContainerId containerId = token.getContainerID();\r\n    ApplicationId appId = containerId.getApplicationAttemptId().getApplicationId();\r\n    LOG.info(\"Recovering \" + containerId + \" in state \" + rcs.getStatus() + \" with exit code \" + rcs.getExitCode());\r\n    Application app = context.getApplications().get(appId);\r\n    if (app != null) {\r\n        recoverActiveContainer(app, launchContext, token, rcs);\r\n        if (rcs.getRecoveryType() == RecoveredContainerType.KILL) {\r\n            dispatcher.getEventHandler().handle(new ContainerKillEvent(containerId, ContainerExitStatus.ABORTED, \"Due to invalid StateStore info container was killed\" + \" during recovery\"));\r\n        }\r\n    } else {\r\n        if (rcs.getStatus() != RecoveredContainerStatus.COMPLETED) {\r\n            LOG.warn(containerId + \" has no corresponding application!\");\r\n        }\r\n        LOG.info(\"Adding \" + containerId + \" to recently stopped containers\");\r\n        nodeStatusUpdater.addCompletedContainer(containerId);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "recoverActiveContainer",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void recoverActiveContainer(Application app, ContainerLaunchContext launchContext, ContainerTokenIdentifier token, RecoveredContainerState rcs) throws IOException\n{\r\n    Credentials credentials = YarnServerSecurityUtils.parseCredentials(launchContext);\r\n    Container container = new ContainerImpl(getConfig(), dispatcher, launchContext, credentials, metrics, token, context, rcs);\r\n    context.getContainers().put(token.getContainerID(), container);\r\n    containerScheduler.recoverActiveContainer(container, rcs);\r\n    app.handle(new ApplicationContainerInitEvent(container));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "waitForRecoveredContainers",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void waitForRecoveredContainers() throws InterruptedException\n{\r\n    final int sleepMsec = 100;\r\n    int waitIterations = 100;\r\n    List<ContainerId> newContainers = new ArrayList<ContainerId>();\r\n    while (--waitIterations >= 0) {\r\n        newContainers.clear();\r\n        for (Container container : context.getContainers().values()) {\r\n            if (container.getContainerState() == org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.NEW) {\r\n                newContainers.add(container.getContainerId());\r\n            }\r\n        }\r\n        if (newContainers.isEmpty()) {\r\n            break;\r\n        }\r\n        LOG.info(\"Waiting for containers: \" + newContainers);\r\n        Thread.sleep(sleepMsec);\r\n    }\r\n    if (waitIterations < 0) {\r\n        LOG.warn(\"Timeout waiting for recovered containers\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "createLogHandler",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "LogHandler createLogHandler(Configuration conf, Context context, DeletionService deletionService)\n{\r\n    if (conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED, YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)) {\r\n        return new LogAggregationService(this.dispatcher, context, deletionService, dirsHandler);\r\n    } else {\r\n        return new NonAggregatingLogHandler(this.dispatcher, deletionService, dirsHandler, context.getNMStateStore());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "getContainersMonitor",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainersMonitor getContainersMonitor()\n{\r\n    return this.containersMonitor;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "createResourceLocalizationService",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourceLocalizationService createResourceLocalizationService(ContainerExecutor exec, DeletionService deletionContext, Context nmContext, NodeManagerMetrics nmMetrics)\n{\r\n    return new ResourceLocalizationService(this.dispatcher, exec, deletionContext, dirsHandler, nmContext, nmMetrics);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "createSharedCacheUploaderService",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SharedCacheUploadService createSharedCacheUploaderService()\n{\r\n    return new SharedCacheUploadService();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "createNMTimelinePublisher",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NMTimelinePublisher createNMTimelinePublisher(Context ctxt)\n{\r\n    NMTimelinePublisher nmTimelinePublisherLocal = new NMTimelinePublisher(ctxt);\r\n    addIfService(nmTimelinePublisherLocal);\r\n    return nmTimelinePublisherLocal;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "createContainersLauncher",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "AbstractContainersLauncher createContainersLauncher(Context ctxt, ContainerExecutor exec)\n{\r\n    Class<? extends AbstractContainersLauncher> containersLauncherClass = ctxt.getConf().getClass(YarnConfiguration.NM_CONTAINERS_LAUNCHER_CLASS, ContainersLauncher.class, AbstractContainersLauncher.class);\r\n    AbstractContainersLauncher launcher;\r\n    try {\r\n        launcher = ReflectionUtils.newInstance(containersLauncherClass, ctxt.getConf());\r\n        launcher.init(ctxt, this.dispatcher, exec, dirsHandler, this);\r\n    } catch (Exception e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n    return launcher;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "createApplicationEventDispatcher",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "EventHandler<ApplicationEvent> createApplicationEventDispatcher()\n{\r\n    return new ApplicationEventDispatcher();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 30,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    Configuration conf = getConfig();\r\n    final InetSocketAddress initialAddress = conf.getSocketAddr(YarnConfiguration.NM_BIND_HOST, YarnConfiguration.NM_ADDRESS, YarnConfiguration.DEFAULT_NM_ADDRESS, YarnConfiguration.DEFAULT_NM_PORT);\r\n    boolean usingEphemeralPort = (initialAddress.getPort() == 0);\r\n    if (context.getNMStateStore().canRecover() && usingEphemeralPort) {\r\n        throw new IllegalArgumentException(\"Cannot support recovery with an \" + \"ephemeral server port. Check the setting of \" + YarnConfiguration.NM_ADDRESS);\r\n    }\r\n    final boolean delayedRpcServerStart = context.getNMStateStore().canRecover();\r\n    Configuration serverConf = new Configuration(conf);\r\n    serverConf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION, SaslRpcServer.AuthMethod.TOKEN.toString());\r\n    YarnRPC rpc = YarnRPC.create(conf);\r\n    server = rpc.getServer(ContainerManagementProtocol.class, this, initialAddress, serverConf, this.context.getNMTokenSecretManager(), conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\r\n    if (conf.getBoolean(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, false)) {\r\n        refreshServiceAcls(conf, NMPolicyProvider.getInstance());\r\n    }\r\n    String bindHost = conf.get(YarnConfiguration.NM_BIND_HOST);\r\n    String nmAddress = conf.getTrimmed(YarnConfiguration.NM_ADDRESS);\r\n    String hostOverride = null;\r\n    if (bindHost != null && !bindHost.isEmpty() && nmAddress != null && !nmAddress.isEmpty()) {\r\n        hostOverride = nmAddress.split(\":\")[0];\r\n    }\r\n    InetSocketAddress connectAddress;\r\n    if (delayedRpcServerStart) {\r\n        connectAddress = NetUtils.getConnectAddress(initialAddress);\r\n    } else {\r\n        server.start();\r\n        connectAddress = NetUtils.getConnectAddress(server);\r\n    }\r\n    NodeId nodeId = buildNodeId(connectAddress, hostOverride);\r\n    ((NodeManager.NMContext) context).setNodeId(nodeId);\r\n    this.context.getNMTokenSecretManager().setNodeId(nodeId);\r\n    this.context.getContainerTokenSecretManager().setNodeId(nodeId);\r\n    super.serviceStart();\r\n    if (delayedRpcServerStart) {\r\n        waitForRecoveredContainers();\r\n        server.start();\r\n        connectAddress = NetUtils.getConnectAddress(server);\r\n        NodeId serverNode = buildNodeId(connectAddress, hostOverride);\r\n        if (!serverNode.equals(nodeId)) {\r\n            throw new IOException(\"Node mismatch after server started, expected '\" + nodeId + \"' but found '\" + serverNode + \"'\");\r\n        }\r\n    }\r\n    LOG.info(\"ContainerManager started at \" + connectAddress);\r\n    LOG.info(\"ContainerManager bound to \" + initialAddress);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "buildNodeId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NodeId buildNodeId(InetSocketAddress connectAddress, String hostOverride)\n{\r\n    if (hostOverride != null) {\r\n        connectAddress = NetUtils.getConnectAddress(new InetSocketAddress(hostOverride, connectAddress.getPort()));\r\n    }\r\n    return NodeId.newInstance(connectAddress.getAddress().getCanonicalHostName(), connectAddress.getPort());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "refreshServiceAcls",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void refreshServiceAcls(Configuration configuration, PolicyProvider policyProvider)\n{\r\n    this.server.refreshServiceAcl(configuration, policyProvider);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    this.writeLock.lock();\r\n    try {\r\n        serviceStopped = true;\r\n        if (context != null) {\r\n            cleanUpApplicationsOnNMShutDown();\r\n        }\r\n    } finally {\r\n        this.writeLock.unlock();\r\n    }\r\n    if (auxiliaryServices.getServiceState() == STARTED) {\r\n        auxiliaryServices.unregisterServiceListener(this);\r\n    }\r\n    if (server != null) {\r\n        server.stop();\r\n    }\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "cleanUpApplicationsOnNMShutDown",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void cleanUpApplicationsOnNMShutDown()\n{\r\n    Map<ApplicationId, Application> applications = this.context.getApplications();\r\n    if (applications.isEmpty()) {\r\n        return;\r\n    }\r\n    LOG.info(\"Applications still running : \" + applications.keySet());\r\n    if (this.context.getNMStateStore().canRecover() && !this.context.getDecommissioned()) {\r\n        if (getConfig().getBoolean(YarnConfiguration.NM_RECOVERY_SUPERVISED, YarnConfiguration.DEFAULT_NM_RECOVERY_SUPERVISED)) {\r\n            return;\r\n        }\r\n    }\r\n    List<ApplicationId> appIds = new ArrayList<ApplicationId>(applications.keySet());\r\n    this.handle(new CMgrCompletedAppsEvent(appIds, CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN));\r\n    LOG.info(\"Waiting for Applications to be Finished\");\r\n    long waitStartTime = System.currentTimeMillis();\r\n    while (!applications.isEmpty() && System.currentTimeMillis() - waitStartTime < waitForContainersOnShutdownMillis) {\r\n        try {\r\n            Thread.sleep(1000);\r\n        } catch (InterruptedException ex) {\r\n            LOG.warn(\"Interrupted while sleeping on applications finish on shutdown\", ex);\r\n        }\r\n    }\r\n    if (applications.isEmpty()) {\r\n        LOG.info(\"All applications in FINISHED state\");\r\n    } else {\r\n        LOG.info(\"Done waiting for Applications to be Finished. Still alive: \" + applications.keySet());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "cleanupContainersOnNMResync",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void cleanupContainersOnNMResync()\n{\r\n    Map<ContainerId, Container> containers = context.getContainers();\r\n    if (containers.isEmpty()) {\r\n        return;\r\n    }\r\n    LOG.info(\"Containers still running on \" + CMgrCompletedContainersEvent.Reason.ON_NODEMANAGER_RESYNC + \" : \" + containers.keySet());\r\n    List<ContainerId> containerIds = new ArrayList<ContainerId>(containers.keySet());\r\n    LOG.info(\"Waiting for containers to be killed\");\r\n    this.handle(new CMgrCompletedContainersEvent(containerIds, CMgrCompletedContainersEvent.Reason.ON_NODEMANAGER_RESYNC));\r\n    boolean allContainersCompleted = false;\r\n    while (!containers.isEmpty() && !allContainersCompleted) {\r\n        allContainersCompleted = true;\r\n        for (Entry<ContainerId, Container> container : containers.entrySet()) {\r\n            if (((ContainerImpl) container.getValue()).getCurrentState() != ContainerState.COMPLETE) {\r\n                allContainersCompleted = false;\r\n                try {\r\n                    Thread.sleep(1000);\r\n                } catch (InterruptedException ex) {\r\n                    LOG.warn(\"Interrupted while sleeping on container kill on resync\", ex);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    if (allContainersCompleted) {\r\n        LOG.info(\"All containers in DONE state\");\r\n    } else {\r\n        LOG.info(\"Done waiting for containers to be killed. Still alive: \" + containers.keySet());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "getRemoteUgi",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "UserGroupInformation getRemoteUgi() throws YarnException\n{\r\n    UserGroupInformation remoteUgi;\r\n    try {\r\n        remoteUgi = UserGroupInformation.getCurrentUser();\r\n    } catch (IOException e) {\r\n        String msg = \"Cannot obtain the user-name. Got exception: \" + StringUtils.stringifyException(e);\r\n        LOG.warn(msg);\r\n        throw RPCUtil.getRemoteException(msg);\r\n    }\r\n    return remoteUgi;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "selectNMTokenIdentifier",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NMTokenIdentifier selectNMTokenIdentifier(UserGroupInformation remoteUgi)\n{\r\n    Set<TokenIdentifier> tokenIdentifiers = remoteUgi.getTokenIdentifiers();\r\n    NMTokenIdentifier resultId = null;\r\n    for (TokenIdentifier id : tokenIdentifiers) {\r\n        if (id instanceof NMTokenIdentifier) {\r\n            resultId = (NMTokenIdentifier) id;\r\n            break;\r\n        }\r\n    }\r\n    return resultId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "authorizeUser",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void authorizeUser(UserGroupInformation remoteUgi, NMTokenIdentifier nmTokenIdentifier) throws YarnException\n{\r\n    if (nmTokenIdentifier == null) {\r\n        throw RPCUtil.getRemoteException(INVALID_NMTOKEN_MSG);\r\n    }\r\n    if (!remoteUgi.getUserName().equals(nmTokenIdentifier.getApplicationAttemptId().toString())) {\r\n        throw RPCUtil.getRemoteException(\"Expected applicationAttemptId: \" + remoteUgi.getUserName() + \"Found: \" + nmTokenIdentifier.getApplicationAttemptId());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "authorizeStartAndResourceIncreaseRequest",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void authorizeStartAndResourceIncreaseRequest(NMTokenIdentifier nmTokenIdentifier, ContainerTokenIdentifier containerTokenIdentifier, boolean startRequest) throws YarnException\n{\r\n    if (nmTokenIdentifier == null) {\r\n        throw RPCUtil.getRemoteException(INVALID_NMTOKEN_MSG);\r\n    }\r\n    if (containerTokenIdentifier == null) {\r\n        throw RPCUtil.getRemoteException(INVALID_CONTAINERTOKEN_MSG);\r\n    }\r\n    ContainerId containerId = containerTokenIdentifier.getContainerID();\r\n    String containerIDStr = containerId.toString();\r\n    boolean unauthorized = false;\r\n    StringBuilder messageBuilder = new StringBuilder(\"Unauthorized request to \" + (startRequest ? \"start container.\" : \"increase container resource.\"));\r\n    if (!nmTokenIdentifier.getApplicationAttemptId().getApplicationId().equals(containerId.getApplicationAttemptId().getApplicationId())) {\r\n        unauthorized = true;\r\n        messageBuilder.append(\"\\nNMToken for application attempt : \").append(nmTokenIdentifier.getApplicationAttemptId()).append(\" was used for \" + (startRequest ? \"starting \" : \"increasing resource of \") + \"container with container token\").append(\" issued for application attempt : \").append(containerId.getApplicationAttemptId());\r\n    } else if (startRequest && !this.context.getContainerTokenSecretManager().isValidStartContainerRequest(containerTokenIdentifier)) {\r\n        unauthorized = true;\r\n        messageBuilder.append(\"\\n Attempt to relaunch the same \").append(\"container with id \").append(containerIDStr).append(\".\");\r\n    } else if (containerTokenIdentifier.getExpiryTimeStamp() < System.currentTimeMillis()) {\r\n        unauthorized = true;\r\n        messageBuilder.append(\"\\nThis token is expired. current time is \").append(System.currentTimeMillis()).append(\" found \").append(containerTokenIdentifier.getExpiryTimeStamp());\r\n        messageBuilder.append(\"\\nNote: System times on machines may be out of sync.\").append(\" Check system time and time zones.\");\r\n    }\r\n    if (unauthorized) {\r\n        String msg = messageBuilder.toString();\r\n        LOG.error(msg);\r\n        throw RPCUtil.getRemoteException(msg);\r\n    }\r\n    if (containerTokenIdentifier.getRMIdentifier() != nodeStatusUpdater.getRMIdentifier()) {\r\n        StringBuilder sb = new StringBuilder(\"\\nContainer \");\r\n        sb.append(containerTokenIdentifier.getContainerID().toString()).append(\" rejected as it is allocated by a previous RM\");\r\n        throw new InvalidContainerException(sb.toString());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "startContainers",
  "errType" : [ "YarnException", "InvalidToken", "IOException" ],
  "containingMethodsNum" : 19,
  "sourceCodeText" : "StartContainersResponse startContainers(StartContainersRequest requests) throws YarnException, IOException\n{\r\n    UserGroupInformation remoteUgi = getRemoteUgi();\r\n    String remoteUser = remoteUgi.getUserName();\r\n    NMTokenIdentifier nmTokenIdentifier = selectNMTokenIdentifier(remoteUgi);\r\n    authorizeUser(remoteUgi, nmTokenIdentifier);\r\n    List<ContainerId> succeededContainers = new ArrayList<ContainerId>();\r\n    Map<ContainerId, SerializedException> failedContainers = new HashMap<ContainerId, SerializedException>();\r\n    synchronized (this.context) {\r\n        for (StartContainerRequest request : requests.getStartContainerRequests()) {\r\n            ContainerId containerId = null;\r\n            try {\r\n                if (request.getContainerToken() == null || request.getContainerToken().getIdentifier() == null) {\r\n                    throw new IOException(INVALID_CONTAINERTOKEN_MSG);\r\n                }\r\n                ContainerTokenIdentifier containerTokenIdentifier = BuilderUtils.newContainerTokenIdentifier(request.getContainerToken());\r\n                verifyAndGetContainerTokenIdentifier(request.getContainerToken(), containerTokenIdentifier);\r\n                containerId = containerTokenIdentifier.getContainerID();\r\n                if (amrmProxyEnabled && containerTokenIdentifier.getContainerType().equals(ContainerType.APPLICATION_MASTER)) {\r\n                    this.getAMRMProxyService().processApplicationStartRequest(request);\r\n                }\r\n                performContainerPreStartChecks(nmTokenIdentifier, request, containerTokenIdentifier);\r\n                startContainerInternal(containerTokenIdentifier, request, remoteUser);\r\n                succeededContainers.add(containerId);\r\n            } catch (YarnException e) {\r\n                failedContainers.put(containerId, SerializedException.newInstance(e));\r\n            } catch (InvalidToken ie) {\r\n                failedContainers.put(containerId, SerializedException.newInstance(ie));\r\n                throw ie;\r\n            } catch (IOException e) {\r\n                throw RPCUtil.getRemoteException(e);\r\n            }\r\n        }\r\n        return StartContainersResponse.newInstance(getAuxServiceMetaData(), succeededContainers, failedContainers);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "performContainerPreStartChecks",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void performContainerPreStartChecks(NMTokenIdentifier nmTokenIdentifier, StartContainerRequest request, ContainerTokenIdentifier containerTokenIdentifier) throws YarnException, InvalidToken\n{\r\n    authorizeStartAndResourceIncreaseRequest(nmTokenIdentifier, containerTokenIdentifier, true);\r\n    updateNMTokenIdentifier(nmTokenIdentifier);\r\n    ContainerLaunchContext launchContext = request.getContainerLaunchContext();\r\n    Map<String, ByteBuffer> serviceData = getAuxServiceMetaData();\r\n    if (launchContext.getServiceData() != null && !launchContext.getServiceData().isEmpty()) {\r\n        for (Entry<String, ByteBuffer> meta : launchContext.getServiceData().entrySet()) {\r\n            if (null == serviceData.get(meta.getKey())) {\r\n                throw new InvalidAuxServiceException(\"The auxService:\" + meta.getKey() + \" does not exist\");\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "buildAppProto",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 18,
  "sourceCodeText" : "ContainerManagerApplicationProto buildAppProto(ApplicationId appId, String user, Credentials credentials, Map<ApplicationAccessType, String> appAcls, LogAggregationContext logAggregationContext, FlowContext flowContext)\n{\r\n    ContainerManagerApplicationProto.Builder builder = ContainerManagerApplicationProto.newBuilder();\r\n    builder.setId(((ApplicationIdPBImpl) appId).getProto());\r\n    builder.setUser(user);\r\n    if (logAggregationContext != null) {\r\n        builder.setLogAggregationContext(((LogAggregationContextPBImpl) logAggregationContext).getProto());\r\n    }\r\n    builder.clearCredentials();\r\n    if (credentials != null) {\r\n        DataOutputBuffer dob = new DataOutputBuffer();\r\n        try {\r\n            credentials.writeTokenStorageToStream(dob);\r\n            builder.setCredentials(ByteString.copyFrom(dob.getData()));\r\n        } catch (IOException e) {\r\n            LOG.error(\"Cannot serialize credentials\", e);\r\n        }\r\n    }\r\n    builder.clearAcls();\r\n    if (appAcls != null) {\r\n        for (Map.Entry<ApplicationAccessType, String> acl : appAcls.entrySet()) {\r\n            ApplicationACLMapProto p = ApplicationACLMapProto.newBuilder().setAccessType(ProtoUtils.convertToProtoFormat(acl.getKey())).setAcl(acl.getValue()).build();\r\n            builder.addAcls(p);\r\n        }\r\n    }\r\n    builder.clearFlowContext();\r\n    if (flowContext != null && flowContext.getFlowName() != null && flowContext.getFlowVersion() != null) {\r\n        FlowContextProto fcp = FlowContextProto.newBuilder().setFlowName(flowContext.getFlowName()).setFlowVersion(flowContext.getFlowVersion()).setFlowRunId(flowContext.getFlowRunId()).build();\r\n        builder.setFlowContext(fcp);\r\n    }\r\n    return builder.build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "startContainerInternal",
  "errType" : null,
  "containingMethodsNum" : 49,
  "sourceCodeText" : "void startContainerInternal(ContainerTokenIdentifier containerTokenIdentifier, StartContainerRequest request, String remoteUser) throws YarnException, IOException\n{\r\n    ContainerId containerId = containerTokenIdentifier.getContainerID();\r\n    String containerIdStr = containerId.toString();\r\n    String user = containerTokenIdentifier.getApplicationSubmitter();\r\n    Resource containerResource = containerTokenIdentifier.getResource();\r\n    LOG.info(\"Start request for \" + containerIdStr + \" by user \" + remoteUser + \" with resource \" + containerResource);\r\n    ContainerLaunchContext launchContext = request.getContainerLaunchContext();\r\n    for (Map.Entry<String, LocalResource> rsrc : launchContext.getLocalResources().entrySet()) {\r\n        if (rsrc.getValue() == null || rsrc.getValue().getResource() == null) {\r\n            throw new YarnException(\"Null resource URL for local resource \" + rsrc.getKey() + \" : \" + rsrc.getValue());\r\n        } else if (rsrc.getValue().getType() == null) {\r\n            throw new YarnException(\"Null resource type for local resource \" + rsrc.getKey() + \" : \" + rsrc.getValue());\r\n        } else if (rsrc.getValue().getVisibility() == null) {\r\n            throw new YarnException(\"Null resource visibility for local resource \" + rsrc.getKey() + \" : \" + rsrc.getValue());\r\n        }\r\n    }\r\n    Credentials credentials = YarnServerSecurityUtils.parseCredentials(launchContext);\r\n    long containerStartTime = SystemClock.getInstance().getTime();\r\n    Container container = new ContainerImpl(getConfig(), this.dispatcher, launchContext, credentials, metrics, containerTokenIdentifier, context, containerStartTime);\r\n    ApplicationId applicationID = containerId.getApplicationAttemptId().getApplicationId();\r\n    if (context.getContainers().putIfAbsent(containerId, container) != null) {\r\n        NMAuditLogger.logFailure(remoteUser, AuditConstants.START_CONTAINER, \"ContainerManagerImpl\", \"Container already running on this node!\", applicationID, containerId);\r\n        throw RPCUtil.getRemoteException(\"Container \" + containerIdStr + \" already is running on this node!!\");\r\n    }\r\n    this.readLock.lock();\r\n    try {\r\n        if (!isServiceStopped()) {\r\n            if (!context.getApplications().containsKey(applicationID)) {\r\n                FlowContext flowContext = getFlowContext(launchContext, applicationID);\r\n                Application application = new ApplicationImpl(dispatcher, user, flowContext, applicationID, credentials, context);\r\n                if (context.getApplications().putIfAbsent(applicationID, application) == null) {\r\n                    metrics.runningApplication();\r\n                    LOG.info(\"Creating a new application reference for app \" + applicationID);\r\n                    LogAggregationContext logAggregationContext = containerTokenIdentifier.getLogAggregationContext();\r\n                    Map<ApplicationAccessType, String> appAcls = container.getLaunchContext().getApplicationACLs();\r\n                    context.getNMStateStore().storeApplication(applicationID, buildAppProto(applicationID, user, credentials, appAcls, logAggregationContext, flowContext));\r\n                    dispatcher.getEventHandler().handle(new ApplicationInitEvent(applicationID, appAcls, logAggregationContext));\r\n                }\r\n            } else if (containerTokenIdentifier.getContainerType() == ContainerType.APPLICATION_MASTER) {\r\n                FlowContext flowContext = getFlowContext(launchContext, applicationID);\r\n                if (flowContext != null) {\r\n                    ApplicationImpl application = (ApplicationImpl) context.getApplications().get(applicationID);\r\n                    application.setFlowContext(flowContext);\r\n                    context.getNMStateStore().storeApplication(applicationID, buildAppProto(applicationID, user, credentials, container.getLaunchContext().getApplicationACLs(), containerTokenIdentifier.getLogAggregationContext(), flowContext));\r\n                    LOG.info(\"Updated application reference with flowContext \" + flowContext + \" for app \" + applicationID);\r\n                } else {\r\n                    LOG.info(\"TimelineService V2.0 is not enabled. Skipping updating \" + \"flowContext for application \" + applicationID);\r\n                }\r\n            }\r\n            this.context.getNMStateStore().storeContainer(containerId, containerTokenIdentifier.getVersion(), containerStartTime, request);\r\n            dispatcher.getEventHandler().handle(new ApplicationContainerInitEvent(container));\r\n            this.context.getContainerTokenSecretManager().startContainerSuccessful(containerTokenIdentifier);\r\n            NMAuditLogger.logSuccess(remoteUser, AuditConstants.START_CONTAINER, \"ContainerManageImpl\", applicationID, containerId);\r\n            metrics.launchedContainer();\r\n            metrics.allocateContainer(containerTokenIdentifier.getResource());\r\n        } else {\r\n            throw new YarnException(\"Container start failed as the NodeManager is \" + \"in the process of shutting down\");\r\n        }\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "getFlowContext",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "FlowContext getFlowContext(ContainerLaunchContext launchContext, ApplicationId applicationID)\n{\r\n    FlowContext flowContext = null;\r\n    if (timelineServiceV2Enabled) {\r\n        String flowName = launchContext.getEnvironment().get(TimelineUtils.FLOW_NAME_TAG_PREFIX);\r\n        String flowVersion = launchContext.getEnvironment().get(TimelineUtils.FLOW_VERSION_TAG_PREFIX);\r\n        String flowRunIdStr = launchContext.getEnvironment().get(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX);\r\n        long flowRunId = 0L;\r\n        if (flowRunIdStr != null && !flowRunIdStr.isEmpty()) {\r\n            flowRunId = Long.parseLong(flowRunIdStr);\r\n        }\r\n        flowContext = new FlowContext(flowName, flowVersion, flowRunId);\r\n        LOG.debug(\"Flow context: {} created for an application {}\", flowContext, applicationID);\r\n    }\r\n    return flowContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "verifyAndGetContainerTokenIdentifier",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "ContainerTokenIdentifier verifyAndGetContainerTokenIdentifier(org.apache.hadoop.yarn.api.records.Token token, ContainerTokenIdentifier containerTokenIdentifier) throws YarnException, InvalidToken\n{\r\n    byte[] password = context.getContainerTokenSecretManager().retrievePassword(containerTokenIdentifier);\r\n    byte[] tokenPass = token.getPassword().array();\r\n    if (password == null || tokenPass == null || !MessageDigest.isEqual(password, tokenPass)) {\r\n        throw new InvalidToken(\"Invalid container token used for starting container on : \" + context.getNodeId().toString());\r\n    }\r\n    return containerTokenIdentifier;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "increaseContainersResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "IncreaseContainersResourceResponse increaseContainersResource(IncreaseContainersResourceRequest requests) throws YarnException, IOException\n{\r\n    ContainerUpdateResponse resp = updateContainer(ContainerUpdateRequest.newInstance(requests.getContainersToIncrease()));\r\n    return IncreaseContainersResourceResponse.newInstance(resp.getSuccessfullyUpdatedContainers(), resp.getFailedRequests());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "updateContainer",
  "errType" : [ "YarnException|InvalidToken", "IOException" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "ContainerUpdateResponse updateContainer(ContainerUpdateRequest request) throws YarnException, IOException\n{\r\n    UserGroupInformation remoteUgi = getRemoteUgi();\r\n    NMTokenIdentifier nmTokenIdentifier = selectNMTokenIdentifier(remoteUgi);\r\n    authorizeUser(remoteUgi, nmTokenIdentifier);\r\n    List<ContainerId> successfullyUpdatedContainers = new ArrayList<ContainerId>();\r\n    Map<ContainerId, SerializedException> failedContainers = new HashMap<ContainerId, SerializedException>();\r\n    synchronized (this.context) {\r\n        for (org.apache.hadoop.yarn.api.records.Token token : request.getContainersToUpdate()) {\r\n            ContainerId containerId = null;\r\n            try {\r\n                if (token.getIdentifier() == null) {\r\n                    throw new IOException(INVALID_CONTAINERTOKEN_MSG);\r\n                }\r\n                ContainerTokenIdentifier containerTokenIdentifier = BuilderUtils.newContainerTokenIdentifier(token);\r\n                verifyAndGetContainerTokenIdentifier(token, containerTokenIdentifier);\r\n                authorizeStartAndResourceIncreaseRequest(nmTokenIdentifier, containerTokenIdentifier, false);\r\n                containerId = containerTokenIdentifier.getContainerID();\r\n                updateNMTokenIdentifier(nmTokenIdentifier);\r\n                updateContainerInternal(containerId, containerTokenIdentifier);\r\n                successfullyUpdatedContainers.add(containerId);\r\n            } catch (YarnException | InvalidToken e) {\r\n                failedContainers.put(containerId, SerializedException.newInstance(e));\r\n            } catch (IOException e) {\r\n                throw RPCUtil.getRemoteException(e);\r\n            }\r\n        }\r\n    }\r\n    return ContainerUpdateResponse.newInstance(successfullyUpdatedContainers, failedContainers);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "updateContainerInternal",
  "errType" : null,
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void updateContainerInternal(ContainerId containerId, ContainerTokenIdentifier containerTokenIdentifier) throws YarnException, IOException\n{\r\n    Container container = context.getContainers().get(containerId);\r\n    if (container == null) {\r\n        if (nodeStatusUpdater.isContainerRecentlyStopped(containerId)) {\r\n            throw RPCUtil.getRemoteException(\"Container \" + containerId.toString() + \" was recently stopped on node manager.\");\r\n        } else {\r\n            throw RPCUtil.getRemoteException(\"Container \" + containerId.toString() + \" is not handled by this NodeManager\");\r\n        }\r\n    }\r\n    int currentVersion = container.getContainerTokenIdentifier().getVersion();\r\n    if (containerTokenIdentifier.getVersion() <= currentVersion) {\r\n        throw RPCUtil.getRemoteException(\"Container \" + containerId.toString() + \" has update version [\" + currentVersion + \"] >= requested version\" + \" [\" + containerTokenIdentifier.getVersion() + \"]\");\r\n    }\r\n    Resource currentResource = container.getResource();\r\n    ExecutionType currentExecType = container.getContainerTokenIdentifier().getExecutionType();\r\n    boolean isResourceChange = false;\r\n    boolean isExecTypeUpdate = false;\r\n    Resource targetResource = containerTokenIdentifier.getResource();\r\n    ExecutionType targetExecType = containerTokenIdentifier.getExecutionType();\r\n    boolean isIncrease = false;\r\n    if (!currentResource.equals(targetResource)) {\r\n        isResourceChange = true;\r\n        isIncrease = Resources.fitsIn(currentResource, targetResource) && !Resources.fitsIn(targetResource, currentResource);\r\n    } else if (!currentExecType.equals(targetExecType)) {\r\n        isExecTypeUpdate = true;\r\n        isIncrease = currentExecType == ExecutionType.OPPORTUNISTIC && targetExecType == ExecutionType.GUARANTEED;\r\n    }\r\n    if (isIncrease) {\r\n        org.apache.hadoop.yarn.api.records.Container increasedContainer = null;\r\n        if (isResourceChange) {\r\n            increasedContainer = org.apache.hadoop.yarn.api.records.Container.newInstance(containerId, null, null, targetResource, null, null, currentExecType);\r\n            if (context.getIncreasedContainers().putIfAbsent(containerId, increasedContainer) != null) {\r\n                throw RPCUtil.getRemoteException(\"Container \" + containerId.toString() + \" resource is being increased -or- \" + \"is undergoing ExecutionType promoted.\");\r\n            }\r\n        }\r\n    }\r\n    this.readLock.lock();\r\n    try {\r\n        if (!serviceStopped) {\r\n            dispatcher.getEventHandler().handle(new UpdateContainerTokenEvent(container.getContainerId(), containerTokenIdentifier, isResourceChange, isExecTypeUpdate, isIncrease));\r\n        } else {\r\n            throw new YarnException(\"Unable to change container resource as the NodeManager is \" + \"in the process of shutting down\");\r\n        }\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "updateNMTokenIdentifier",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void updateNMTokenIdentifier(NMTokenIdentifier nmTokenIdentifier) throws InvalidToken\n{\r\n    context.getNMTokenSecretManager().appAttemptStartContainer(nmTokenIdentifier);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "stopContainers",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "StopContainersResponse stopContainers(StopContainersRequest requests) throws YarnException, IOException\n{\r\n    List<ContainerId> succeededRequests = new ArrayList<ContainerId>();\r\n    Map<ContainerId, SerializedException> failedRequests = new HashMap<ContainerId, SerializedException>();\r\n    UserGroupInformation remoteUgi = getRemoteUgi();\r\n    NMTokenIdentifier identifier = selectNMTokenIdentifier(remoteUgi);\r\n    if (identifier == null) {\r\n        throw RPCUtil.getRemoteException(INVALID_NMTOKEN_MSG);\r\n    }\r\n    String remoteUser = remoteUgi.getUserName();\r\n    for (ContainerId id : requests.getContainerIds()) {\r\n        try {\r\n            Container container = this.context.getContainers().get(id);\r\n            authorizeGetAndStopContainerRequest(id, container, true, identifier, remoteUser);\r\n            stopContainerInternal(id, remoteUser);\r\n            succeededRequests.add(id);\r\n        } catch (YarnException e) {\r\n            failedRequests.put(id, SerializedException.newInstance(e));\r\n        }\r\n    }\r\n    return StopContainersResponse.newInstance(succeededRequests, failedRequests);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "stopContainerInternal",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void stopContainerInternal(ContainerId containerID, String remoteUser) throws YarnException, IOException\n{\r\n    String containerIDStr = containerID.toString();\r\n    Container container = this.context.getContainers().get(containerID);\r\n    LOG.info(\"Stopping container with container Id: \" + containerIDStr);\r\n    if (container == null) {\r\n        if (!nodeStatusUpdater.isContainerRecentlyStopped(containerID)) {\r\n            throw RPCUtil.getRemoteException(\"Container \" + containerIDStr + \" is not handled by this NodeManager\");\r\n        }\r\n    } else {\r\n        if (container.isRecovering()) {\r\n            throw new NMNotYetReadyException(\"Container \" + containerIDStr + \" is recovering, try later\");\r\n        }\r\n        context.getNMStateStore().storeContainerKilled(containerID);\r\n        container.sendKillEvent(ContainerExitStatus.KILLED_BY_APPMASTER, \"Container killed by the ApplicationMaster.\");\r\n        NMAuditLogger.logSuccess(remoteUser, AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", containerID.getApplicationAttemptId().getApplicationId(), containerID);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "getContainerStatuses",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "GetContainerStatusesResponse getContainerStatuses(GetContainerStatusesRequest request) throws YarnException, IOException\n{\r\n    List<ContainerStatus> succeededRequests = new ArrayList<ContainerStatus>();\r\n    Map<ContainerId, SerializedException> failedRequests = new HashMap<ContainerId, SerializedException>();\r\n    UserGroupInformation remoteUgi = getRemoteUgi();\r\n    NMTokenIdentifier identifier = selectNMTokenIdentifier(remoteUgi);\r\n    if (identifier == null) {\r\n        throw RPCUtil.getRemoteException(INVALID_NMTOKEN_MSG);\r\n    }\r\n    String remoteUser = remoteUgi.getUserName();\r\n    for (ContainerId id : request.getContainerIds()) {\r\n        try {\r\n            ContainerStatus status = getContainerStatusInternal(id, identifier, remoteUser);\r\n            succeededRequests.add(status);\r\n        } catch (YarnException e) {\r\n            failedRequests.put(id, SerializedException.newInstance(e));\r\n        }\r\n    }\r\n    return GetContainerStatusesResponse.newInstance(succeededRequests, failedRequests);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "getContainerStatusInternal",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "ContainerStatus getContainerStatusInternal(ContainerId containerID, NMTokenIdentifier nmTokenIdentifier, String remoteUser) throws YarnException\n{\r\n    String containerIDStr = containerID.toString();\r\n    Container container = this.context.getContainers().get(containerID);\r\n    LOG.info(\"Getting container-status for \" + containerIDStr);\r\n    authorizeGetAndStopContainerRequest(containerID, container, false, nmTokenIdentifier, remoteUser);\r\n    if (container == null) {\r\n        if (nodeStatusUpdater.isContainerRecentlyStopped(containerID)) {\r\n            throw RPCUtil.getRemoteException(\"Container \" + containerIDStr + \" was recently stopped on node manager.\");\r\n        } else {\r\n            throw RPCUtil.getRemoteException(\"Container \" + containerIDStr + \" is not handled by this NodeManager\");\r\n        }\r\n    }\r\n    ContainerStatus containerStatus = container.cloneAndGetContainerStatus();\r\n    logContainerStatus(\"Returning \", containerStatus);\r\n    return containerStatus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "logContainerStatus",
  "errType" : null,
  "containingMethodsNum" : 25,
  "sourceCodeText" : "void logContainerStatus(String prefix, ContainerStatus status)\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(prefix);\r\n    sb.append(\"ContainerStatus: [\");\r\n    sb.append(\"ContainerId: \");\r\n    sb.append(status.getContainerId()).append(\", \");\r\n    sb.append(\"ExecutionType: \");\r\n    sb.append(status.getExecutionType()).append(\", \");\r\n    sb.append(\"State: \");\r\n    sb.append(status.getState()).append(\", \");\r\n    sb.append(\"Capability: \");\r\n    sb.append(status.getCapability()).append(\", \");\r\n    sb.append(\"Diagnostics: \");\r\n    sb.append(LOG.isDebugEnabled() ? status.getDiagnostics() : \"...\");\r\n    sb.append(\", \");\r\n    sb.append(\"ExitStatus: \");\r\n    sb.append(status.getExitStatus()).append(\", \");\r\n    sb.append(\"IP: \");\r\n    sb.append(status.getIPs()).append(\", \");\r\n    sb.append(\"Host: \");\r\n    sb.append(status.getHost()).append(\", \");\r\n    sb.append(\"ExposedPorts: \");\r\n    sb.append(status.getExposedPorts()).append(\", \");\r\n    sb.append(\"ContainerSubState: \");\r\n    sb.append(status.getContainerSubState());\r\n    sb.append(\"]\");\r\n    LOG.info(sb.toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "authorizeGetAndStopContainerRequest",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void authorizeGetAndStopContainerRequest(ContainerId containerId, Container container, boolean stopRequest, NMTokenIdentifier identifier, String remoteUser) throws YarnException\n{\r\n    if (identifier == null) {\r\n        throw RPCUtil.getRemoteException(INVALID_NMTOKEN_MSG);\r\n    }\r\n    ApplicationId nmTokenAppId = identifier.getApplicationAttemptId().getApplicationId();\r\n    if ((!nmTokenAppId.equals(containerId.getApplicationAttemptId().getApplicationId())) || (container != null && !nmTokenAppId.equals(container.getContainerId().getApplicationAttemptId().getApplicationId()))) {\r\n        String msg;\r\n        if (stopRequest) {\r\n            msg = identifier.getApplicationAttemptId() + \" attempted to stop non-application container : \" + containerId;\r\n            NMAuditLogger.logFailure(remoteUser, AuditConstants.STOP_CONTAINER, \"ContainerManagerImpl\", \"Trying to stop unknown container!\", nmTokenAppId, containerId);\r\n        } else {\r\n            msg = identifier.getApplicationAttemptId() + \" attempted to get status for non-application container : \" + containerId;\r\n        }\r\n        LOG.warn(msg);\r\n        throw RPCUtil.getRemoteException(msg);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "handle",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 27,
  "sourceCodeText" : "void handle(ContainerManagerEvent event)\n{\r\n    switch(event.getType()) {\r\n        case FINISH_APPS:\r\n            CMgrCompletedAppsEvent appsFinishedEvent = (CMgrCompletedAppsEvent) event;\r\n            for (ApplicationId appID : appsFinishedEvent.getAppsToCleanup()) {\r\n                Application app = this.context.getApplications().get(appID);\r\n                if (app == null) {\r\n                    LOG.info(\"couldn't find application \" + appID + \" while processing\" + \" FINISH_APPS event. The ResourceManager allocated resources\" + \" for this application to the NodeManager but no active\" + \" containers were found to process.\");\r\n                    continue;\r\n                }\r\n                boolean shouldDropEvent = false;\r\n                for (Container container : app.getContainers().values()) {\r\n                    if (container.isRecovering()) {\r\n                        LOG.info(\"drop FINISH_APPS event to \" + appID + \" because \" + \"container \" + container.getContainerId() + \" is recovering\");\r\n                        shouldDropEvent = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (shouldDropEvent) {\r\n                    continue;\r\n                }\r\n                String diagnostic = \"\";\r\n                if (appsFinishedEvent.getReason() == CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN) {\r\n                    diagnostic = \"Application killed on shutdown\";\r\n                } else if (appsFinishedEvent.getReason() == CMgrCompletedAppsEvent.Reason.BY_RESOURCEMANAGER) {\r\n                    diagnostic = \"Application killed by ResourceManager\";\r\n                }\r\n                this.dispatcher.getEventHandler().handle(new ApplicationFinishEvent(appID, diagnostic));\r\n            }\r\n            break;\r\n        case FINISH_CONTAINERS:\r\n            CMgrCompletedContainersEvent containersFinishedEvent = (CMgrCompletedContainersEvent) event;\r\n            for (ContainerId containerId : containersFinishedEvent.getContainersToCleanup()) {\r\n                ApplicationId appId = containerId.getApplicationAttemptId().getApplicationId();\r\n                Application app = this.context.getApplications().get(appId);\r\n                if (app == null) {\r\n                    LOG.warn(\"couldn't find app \" + appId + \" while processing\" + \" FINISH_CONTAINERS event\");\r\n                    continue;\r\n                }\r\n                Container container = app.getContainers().get(containerId);\r\n                if (container == null) {\r\n                    LOG.warn(\"couldn't find container \" + containerId + \" while processing FINISH_CONTAINERS event\");\r\n                    continue;\r\n                }\r\n                if (container.isRecovering()) {\r\n                    LOG.info(\"drop FINISH_CONTAINERS event to \" + containerId + \" because container is recovering\");\r\n                    continue;\r\n                }\r\n                this.dispatcher.getEventHandler().handle(new ContainerKillEvent(containerId, ContainerExitStatus.KILLED_BY_RESOURCEMANAGER, \"Container Killed by ResourceManager\"));\r\n            }\r\n            break;\r\n        case UPDATE_CONTAINERS:\r\n            CMgrUpdateContainersEvent containersDecreasedEvent = (CMgrUpdateContainersEvent) event;\r\n            for (org.apache.hadoop.yarn.api.records.Container container : containersDecreasedEvent.getContainersToUpdate()) {\r\n                try {\r\n                    ContainerTokenIdentifier containerTokenIdentifier = BuilderUtils.newContainerTokenIdentifier(container.getContainerToken());\r\n                    updateContainerInternal(container.getId(), containerTokenIdentifier);\r\n                } catch (YarnException e) {\r\n                    LOG.error(\"Unable to decrease container resource\", e);\r\n                } catch (IOException e) {\r\n                    LOG.error(\"Unable to update container resource in store\", e);\r\n                }\r\n            }\r\n            break;\r\n        case SIGNAL_CONTAINERS:\r\n            CMgrSignalContainersEvent containersSignalEvent = (CMgrSignalContainersEvent) event;\r\n            for (SignalContainerRequest request : containersSignalEvent.getContainersToSignal()) {\r\n                internalSignalToContainer(request, \"ResourceManager\");\r\n            }\r\n            break;\r\n        default:\r\n            throw new YarnRuntimeException(\"Got an unknown ContainerManagerEvent type: \" + event.getType());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "stateChanged",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void stateChanged(Service service)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "getContext",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Context getContext()\n{\r\n    return this.context;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "getAuxServiceMetaData",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<String, ByteBuffer> getAuxServiceMetaData()\n{\r\n    return this.auxiliaryServices.getMetaData();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "getAMRMProxyService",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AMRMProxyService getAMRMProxyService()\n{\r\n    return this.amrmProxyService;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "setAMRMProxyService",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAMRMProxyService(AMRMProxyService amrmProxyService)\n{\r\n    this.amrmProxyService = amrmProxyService;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "isServiceStopped",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isServiceStopped()\n{\r\n    return serviceStopped;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "getOpportunisticContainersStatus",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "OpportunisticContainersStatus getOpportunisticContainersStatus()\n{\r\n    return this.containerScheduler.getOpportunisticContainersStatus();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "updateQueuingLimit",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void updateQueuingLimit(ContainerQueuingLimit queuingLimit)\n{\r\n    this.containerScheduler.updateQueuingLimit(queuingLimit);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "signalToContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SignalContainerResponse signalToContainer(SignalContainerRequest request) throws YarnException, IOException\n{\r\n    internalSignalToContainer(request, \"Application Master\");\r\n    return new SignalContainerResponsePBImpl();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "localize",
  "errType" : [ "URISyntaxException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "ResourceLocalizationResponse localize(ResourceLocalizationRequest request) throws YarnException, IOException\n{\r\n    ContainerId containerId = request.getContainerId();\r\n    Container container = preReInitializeOrLocalizeCheck(containerId, ReInitOp.LOCALIZE);\r\n    try {\r\n        Map<LocalResourceVisibility, Collection<LocalResourceRequest>> req = container.getResourceSet().addResources(request.getLocalResources());\r\n        if (req != null && !req.isEmpty()) {\r\n            dispatcher.getEventHandler().handle(new ContainerLocalizationRequestEvent(container, req));\r\n        }\r\n    } catch (URISyntaxException e) {\r\n        LOG.info(\"Error when parsing local resource URI for \" + containerId, e);\r\n        throw new YarnException(e);\r\n    }\r\n    return ResourceLocalizationResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "reInitializeContainer",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReInitializeContainerResponse reInitializeContainer(ReInitializeContainerRequest request) throws YarnException, IOException\n{\r\n    reInitializeContainer(request.getContainerId(), request.getContainerLaunchContext(), request.getAutoCommit());\r\n    return ReInitializeContainerResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "restartContainer",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RestartContainerResponse restartContainer(ContainerId containerId) throws YarnException, IOException\n{\r\n    reInitializeContainer(containerId, null, true);\r\n    return RestartContainerResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "reInitializeContainer",
  "errType" : [ "URISyntaxException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void reInitializeContainer(ContainerId containerId, ContainerLaunchContext reInitLaunchContext, boolean autoCommit) throws YarnException\n{\r\n    LOG.debug(\"{} requested reinit\", containerId);\r\n    Container container = preReInitializeOrLocalizeCheck(containerId, ReInitOp.RE_INIT);\r\n    ResourceSet resourceSet = new ResourceSet();\r\n    try {\r\n        if (reInitLaunchContext != null) {\r\n            resourceSet.addResources(reInitLaunchContext.getLocalResources());\r\n        }\r\n        dispatcher.getEventHandler().handle(new ContainerReInitEvent(containerId, reInitLaunchContext, resourceSet, autoCommit));\r\n        container.setIsReInitializing(true);\r\n    } catch (URISyntaxException e) {\r\n        LOG.info(\"Error when parsing local resource URI for upgrade of\" + \"Container [\" + containerId + \"]\", e);\r\n        throw new YarnException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "rollbackLastReInitialization",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "RollbackResponse rollbackLastReInitialization(ContainerId containerId) throws YarnException\n{\r\n    Container container = preReInitializeOrLocalizeCheck(containerId, ReInitOp.ROLLBACK);\r\n    if (container.canRollback()) {\r\n        dispatcher.getEventHandler().handle(new ContainerEvent(containerId, ContainerEventType.ROLLBACK_REINIT));\r\n        container.setIsReInitializing(true);\r\n    } else {\r\n        throw new YarnException(\"Nothing to rollback to !!\");\r\n    }\r\n    return RollbackResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "commitLastReInitialization",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "CommitResponse commitLastReInitialization(ContainerId containerId) throws YarnException\n{\r\n    Container container = preReInitializeOrLocalizeCheck(containerId, ReInitOp.COMMIT);\r\n    if (container.canRollback()) {\r\n        container.commitUpgrade();\r\n    } else {\r\n        throw new YarnException(\"Nothing to Commit !!\");\r\n    }\r\n    return CommitResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "preReInitializeOrLocalizeCheck",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "Container preReInitializeOrLocalizeCheck(ContainerId containerId, ReInitOp op) throws YarnException\n{\r\n    UserGroupInformation remoteUgi = getRemoteUgi();\r\n    NMTokenIdentifier nmTokenIdentifier = selectNMTokenIdentifier(remoteUgi);\r\n    authorizeUser(remoteUgi, nmTokenIdentifier);\r\n    if (!nmTokenIdentifier.getApplicationAttemptId().getApplicationId().equals(containerId.getApplicationAttemptId().getApplicationId())) {\r\n        throw new YarnException(\"ApplicationMaster not authorized to perform \" + \"[\" + op + \"] on Container [\" + containerId + \"]!!\");\r\n    }\r\n    Container container = context.getContainers().get(containerId);\r\n    if (container == null) {\r\n        throw new YarnException(\"Specified \" + containerId + \" does not exist!\");\r\n    }\r\n    if (!container.isRunning() || container.isReInitializing() || container.getContainerTokenIdentifier().getExecutionType() == ExecutionType.OPPORTUNISTIC) {\r\n        throw new YarnException(\"Cannot perform \" + op + \" on [\" + containerId + \"]. Current state is [\" + container.getContainerState() + \", \" + \"isReInitializing=\" + container.isReInitializing() + \"]. Container\" + \" Execution Type is [\" + container.getContainerTokenIdentifier().getExecutionType() + \"].\");\r\n    }\r\n    return container;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "internalSignalToContainer",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void internalSignalToContainer(SignalContainerRequest request, String sentBy)\n{\r\n    ContainerId containerId = request.getContainerId();\r\n    Container container = this.context.getContainers().get(containerId);\r\n    if (container != null) {\r\n        LOG.info(containerId + \" signal request \" + request.getCommand() + \" by \" + sentBy);\r\n        this.dispatcher.getEventHandler().handle(new SignalContainersLauncherEvent(container, request.getCommand()));\r\n    } else {\r\n        LOG.info(\"Container \" + containerId + \" no longer exists\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "getContainerScheduler",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerScheduler getContainerScheduler()\n{\r\n    return this.containerScheduler;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "handleCredentialUpdate",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void handleCredentialUpdate()\n{\r\n    Set<ApplicationId> invalidApps = logHandler.getInvalidTokenApps();\r\n    if (!invalidApps.isEmpty()) {\r\n        dispatcher.getEventHandler().handle(new LogHandlerTokenUpdatedEvent());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "getLocalizationStatuses",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "GetLocalizationStatusesResponse getLocalizationStatuses(GetLocalizationStatusesRequest request) throws YarnException, IOException\n{\r\n    Map<ContainerId, List<LocalizationStatus>> allStatuses = new HashMap<>();\r\n    Map<ContainerId, SerializedException> failedRequests = new HashMap<>();\r\n    UserGroupInformation remoteUgi = getRemoteUgi();\r\n    NMTokenIdentifier identifier = selectNMTokenIdentifier(remoteUgi);\r\n    if (identifier == null) {\r\n        throw RPCUtil.getRemoteException(INVALID_NMTOKEN_MSG);\r\n    }\r\n    String remoteUser = remoteUgi.getUserName();\r\n    for (ContainerId id : request.getContainerIds()) {\r\n        try {\r\n            List<LocalizationStatus> statuses = getLocalizationStatusesInternal(id, identifier, remoteUser);\r\n            allStatuses.put(id, statuses);\r\n        } catch (YarnException e) {\r\n            failedRequests.put(id, SerializedException.newInstance(e));\r\n        }\r\n    }\r\n    return GetLocalizationStatusesResponse.newInstance(allStatuses, failedRequests);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "getLocalizationStatusesInternal",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "List<LocalizationStatus> getLocalizationStatusesInternal(ContainerId containerID, NMTokenIdentifier nmTokenIdentifier, String remoteUser) throws YarnException\n{\r\n    Container container = this.context.getContainers().get(containerID);\r\n    LOG.info(\"Getting localization status for {}\", containerID);\r\n    authorizeGetAndStopContainerRequest(containerID, container, false, nmTokenIdentifier, remoteUser);\r\n    String containerIDStr = containerID.toString();\r\n    if (container == null) {\r\n        if (nodeStatusUpdater.isContainerRecentlyStopped(containerID)) {\r\n            throw RPCUtil.getRemoteException(\"Container \" + containerIDStr + \" was recently stopped on node manager.\");\r\n        } else {\r\n            throw RPCUtil.getRemoteException(\"Container \" + containerIDStr + \" is not handled by this NodeManager\");\r\n        }\r\n    }\r\n    return container.getLocalizationStatuses();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "getResourceLocalizationService",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourceLocalizationService getResourceLocalizationService()\n{\r\n    return rsrcLocalizationSrvc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin",
  "methodName" : "initialize",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void initialize(Context context) throws YarnException, ClassNotFoundException\n{\r\n    Configuration conf = context.getConf();\r\n    String[] plugins = getPluginsFromConfig(conf);\r\n    Map<String, ResourcePlugin> pluginMap = Maps.newHashMap();\r\n    if (plugins != null) {\r\n        pluginMap = initializePlugins(conf, context, plugins);\r\n    }\r\n    boolean pluggableDeviceFrameworkEnabled = conf.getBoolean(YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED, YarnConfiguration.DEFAULT_NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED);\r\n    if (pluggableDeviceFrameworkEnabled) {\r\n        initializePluggableDevicePlugins(context, conf, pluginMap);\r\n    } else {\r\n        LOG.info(\"The pluggable device framework is not enabled.\" + \" If you want, please set true to {}\", YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED);\r\n    }\r\n    configuredPlugins = Collections.unmodifiableMap(pluginMap);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin",
  "methodName" : "getPluginsFromConfig",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String[] getPluginsFromConfig(Configuration conf)\n{\r\n    String[] plugins = conf.getStrings(YarnConfiguration.NM_RESOURCE_PLUGINS);\r\n    if (plugins == null || plugins.length == 0) {\r\n        LOG.info(\"No Resource plugins found from configuration!\");\r\n    }\r\n    LOG.info(\"Found Resource plugins from configuration: \" + Arrays.toString(plugins));\r\n    return plugins;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin",
  "methodName" : "initializePlugins",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "Map<String, ResourcePlugin> initializePlugins(Configuration conf, Context context, String[] plugins) throws YarnException\n{\r\n    Map<String, ResourcePlugin> pluginMap = Maps.newHashMap();\r\n    for (String resourceName : plugins) {\r\n        resourceName = resourceName.trim();\r\n        ensurePluginIsSupported(resourceName);\r\n        if (!isPluginDuplicate(pluginMap, resourceName)) {\r\n            ResourcePlugin plugin = null;\r\n            if (resourceName.equals(GPU_URI)) {\r\n                final GpuDiscoverer gpuDiscoverer = new GpuDiscoverer();\r\n                final GpuNodeResourceUpdateHandler updateHandler = new GpuNodeResourceUpdateHandler(gpuDiscoverer, conf);\r\n                plugin = new GpuResourcePlugin(updateHandler, gpuDiscoverer);\r\n            } else if (resourceName.equals(FPGA_URI)) {\r\n                plugin = new FpgaResourcePlugin();\r\n            }\r\n            if (plugin == null) {\r\n                throw new YarnException(\"This shouldn't happen, plugin=\" + resourceName + \" should be loaded and initialized\");\r\n            }\r\n            plugin.initialize(context);\r\n            LOG.info(\"Initialized plugin {}\", plugin);\r\n            pluginMap.put(resourceName, plugin);\r\n        }\r\n    }\r\n    return pluginMap;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin",
  "methodName" : "ensurePluginIsSupported",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void ensurePluginIsSupported(String resourceName) throws YarnException\n{\r\n    if (!SUPPORTED_RESOURCE_PLUGINS.contains(resourceName)) {\r\n        String msg = \"Trying to initialize resource plugin with name=\" + resourceName + \", it is not supported, list of supported plugins:\" + StringUtils.join(\",\", SUPPORTED_RESOURCE_PLUGINS);\r\n        LOG.error(msg);\r\n        throw new YarnException(msg);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin",
  "methodName" : "isPluginDuplicate",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isPluginDuplicate(Map<String, ResourcePlugin> pluginMap, String resourceName)\n{\r\n    if (pluginMap.containsKey(resourceName)) {\r\n        LOG.warn(\"Ignoring duplicate Resource plugin definition: \" + resourceName);\r\n        return true;\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin",
  "methodName" : "initializePluggableDevicePlugins",
  "errType" : [ "Exception", "YarnException" ],
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void initializePluggableDevicePlugins(Context context, Configuration configuration, Map<String, ResourcePlugin> pluginMap) throws YarnRuntimeException, ClassNotFoundException\n{\r\n    LOG.info(\"The pluggable device framework enabled,\" + \"trying to load the vendor plugins\");\r\n    if (null == deviceMappingManager) {\r\n        LOG.debug(\"DeviceMappingManager initialized.\");\r\n        deviceMappingManager = new DeviceMappingManager(context);\r\n    }\r\n    String[] pluginClassNames = configuration.getStrings(YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_DEVICE_CLASSES);\r\n    if (null == pluginClassNames) {\r\n        throw new YarnRuntimeException(\"Null value found in configuration: \" + YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_DEVICE_CLASSES);\r\n    }\r\n    for (String pluginClassName : pluginClassNames) {\r\n        Class<?> pluginClazz = Class.forName(pluginClassName);\r\n        if (!DevicePlugin.class.isAssignableFrom(pluginClazz)) {\r\n            throw new YarnRuntimeException(\"Class: \" + pluginClassName + \" not instance of \" + DevicePlugin.class.getCanonicalName());\r\n        }\r\n        checkInterfaceCompatibility(DevicePlugin.class, pluginClazz);\r\n        DevicePlugin dpInstance = (DevicePlugin) ReflectionUtils.newInstance(pluginClazz, configuration);\r\n        DeviceRegisterRequest request = null;\r\n        try {\r\n            request = dpInstance.getRegisterRequestInfo();\r\n        } catch (Exception e) {\r\n            throw new YarnRuntimeException(\"Exception thrown from plugin's\" + \" getRegisterRequestInfo:\" + e.getMessage());\r\n        }\r\n        String resourceName = request.getResourceName();\r\n        if (pluginMap.containsKey(resourceName)) {\r\n            throw new YarnRuntimeException(resourceName + \" already registered! Please change resource type name\" + \" or configure correct resource type name\" + \" in resource-types.xml for \" + pluginClassName);\r\n        }\r\n        if (!isConfiguredResourceName(resourceName)) {\r\n            throw new YarnRuntimeException(resourceName + \" is not configured inside \" + YarnConfiguration.RESOURCE_TYPES_CONFIGURATION_FILE + \" , please configure it first\");\r\n        }\r\n        LOG.info(\"New resource type: {} registered successfully by {}\", resourceName, pluginClassName);\r\n        DevicePluginAdapter pluginAdapter = new DevicePluginAdapter(resourceName, dpInstance, deviceMappingManager);\r\n        LOG.info(\"Adapter of {} created. Initializing..\", pluginClassName);\r\n        try {\r\n            pluginAdapter.initialize(context);\r\n        } catch (YarnException e) {\r\n            throw new YarnRuntimeException(\"Adapter of \" + pluginClassName + \" init failed!\");\r\n        }\r\n        LOG.info(\"Adapter of {} init success!\", pluginClassName);\r\n        pluginMap.put(request.getResourceName(), pluginAdapter);\r\n        if (dpInstance instanceof DevicePluginScheduler) {\r\n            checkInterfaceCompatibility(DevicePluginScheduler.class, pluginClazz);\r\n            LOG.info(\"{} can schedule {} devices.\" + \"Added as preferred device plugin scheduler\", pluginClassName, resourceName);\r\n            deviceMappingManager.addDevicePluginScheduler(resourceName, (DevicePluginScheduler) dpInstance);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin",
  "methodName" : "checkInterfaceCompatibility",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void checkInterfaceCompatibility(Class<?> expectedClass, Class<?> actualClass) throws YarnRuntimeException\n{\r\n    LOG.debug(\"Checking implemented interface's compatibility: {}\", expectedClass.getSimpleName());\r\n    Method[] expectedDevicePluginMethods = expectedClass.getMethods();\r\n    boolean found;\r\n    for (Method method : expectedDevicePluginMethods) {\r\n        found = false;\r\n        LOG.debug(\"Try to find method: {}\", method.getName());\r\n        for (Method m : actualClass.getDeclaredMethods()) {\r\n            if (m.getName().equals(method.getName())) {\r\n                LOG.debug(\"Method {} found in class {}\", m.getName(), actualClass.getSimpleName());\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!found) {\r\n            LOG.error(\"Method {} is not found in plugin\", method.getName());\r\n            throw new YarnRuntimeException(\"Method \" + method.getName() + \" is expected but not implemented in \" + actualClass.getCanonicalName());\r\n        }\r\n    }\r\n    LOG.info(\"{} compatibility is ok.\", expectedClass.getSimpleName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin",
  "methodName" : "isConfiguredResourceName",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isConfiguredResourceName(String resourceName)\n{\r\n    Map<String, ResourceInformation> configuredResourceTypes = ResourceUtils.getResourceTypes();\r\n    if (!configuredResourceTypes.containsKey(resourceName)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin",
  "methodName" : "setDeviceMappingManager",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDeviceMappingManager(DeviceMappingManager deviceMappingManager)\n{\r\n    this.deviceMappingManager = deviceMappingManager;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin",
  "methodName" : "getDeviceMappingManager",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "DeviceMappingManager getDeviceMappingManager()\n{\r\n    return deviceMappingManager;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin",
  "methodName" : "cleanup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void cleanup() throws YarnException\n{\r\n    for (ResourcePlugin plugin : configuredPlugins.values()) {\r\n        plugin.cleanup();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin",
  "methodName" : "getNameToPlugins",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, ResourcePlugin> getNameToPlugins()\n{\r\n    return configuredPlugins;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga\\discovery",
  "methodName" : "getDevicesFromString",
  "errType" : [ "NumberFormatException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "List<FpgaDevice> getDevicesFromString(String type, String devices) throws ResourceHandlerException\n{\r\n    if (devices.trim().isEmpty()) {\r\n        return Collections.emptyList();\r\n    }\r\n    String[] deviceList = devices.split(\",\");\r\n    List<FpgaDevice> fpgaDevices = new ArrayList<>();\r\n    for (final String deviceSpec : deviceList) {\r\n        Matcher matcher = DEVICE_PATTERN.matcher(deviceSpec);\r\n        if (matcher.matches()) {\r\n            try {\r\n                String devName = matcher.group(1);\r\n                int major = Integer.parseInt(matcher.group(3));\r\n                int minor = Integer.parseInt(matcher.group(5));\r\n                fpgaDevices.add(new FpgaDevice(type, major, minor, devName));\r\n            } catch (NumberFormatException e) {\r\n                throw new ResourceHandlerException(\"Cannot parse major/minor number: \" + deviceSpec);\r\n            }\r\n        } else {\r\n            throw new ResourceHandlerException(\"Illegal device specification string: \" + deviceSpec);\r\n        }\r\n    }\r\n    return fpgaDevices;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\privileged",
  "methodName" : "getExitCode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getExitCode()\n{\r\n    return exitCode;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\privileged",
  "methodName" : "getOutput",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getOutput()\n{\r\n    return output;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\privileged",
  "methodName" : "getErrorOutput",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getErrorOutput()\n{\r\n    return errorOutput;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "add",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void add(ContainerInfo containerInfo)\n{\r\n    container.add(containerInfo);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getContainers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ArrayList<ContainerInfo> getContainers()\n{\r\n    return container;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "updateConfiguredResource",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void updateConfiguredResource(Resource res) throws YarnException\n{\r\n    LOG.info(\"Initializing configured FPGA resources for the NodeManager.\");\r\n    List<FpgaDevice> list = fpgaDiscoverer.getCurrentFpgaInfo();\r\n    List<Integer> minors = new LinkedList<>();\r\n    for (FpgaDevice device : list) {\r\n        minors.add(device.getMinor());\r\n    }\r\n    if (minors.isEmpty()) {\r\n        LOG.info(\"Didn't find any usable FPGAs on the NodeManager.\");\r\n        return;\r\n    }\r\n    long count = minors.size();\r\n    Map<String, ResourceInformation> configuredResourceTypes = ResourceUtils.getResourceTypes();\r\n    if (!configuredResourceTypes.containsKey(FPGA_URI)) {\r\n        throw new YarnException(\"Wrong configurations, found \" + count + \" usable FPGAs, however \" + FPGA_URI + \" resource-type is not configured inside\" + \" resource-types.xml, please configure it to enable FPGA feature or\" + \" remove \" + FPGA_URI + \" from \" + YarnConfiguration.NM_RESOURCE_PLUGINS);\r\n    }\r\n    res.setResourceValue(FPGA_URI, count);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "initConfiguration",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Configuration initConfiguration()\n{\r\n    return new YarnConfiguration();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getProxy",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "LocalizationProtocol getProxy(final InetSocketAddress nmAddr)\n{\r\n    YarnRPC rpc = YarnRPC.create(conf);\r\n    return (LocalizationProtocol) rpc.getProxy(LocalizationProtocol.class, nmAddr, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "runLocalization",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void runLocalization(final InetSocketAddress nmAddr) throws IOException, InterruptedException\n{\r\n    initDirs(conf, user, appId, lfs, localDirs);\r\n    final Credentials creds = new Credentials();\r\n    DataInputStream credFile = null;\r\n    try {\r\n        Path tokenPath = new Path(tokenFileName);\r\n        credFile = lfs.open(tokenPath);\r\n        creds.readTokenStorageStream(credFile);\r\n        lfs.delete(tokenPath, false);\r\n    } finally {\r\n        if (credFile != null) {\r\n            credFile.close();\r\n        }\r\n    }\r\n    UserGroupInformation remoteUser = UserGroupInformation.createRemoteUser(user);\r\n    remoteUser.addToken(creds.getToken(LocalizerTokenIdentifier.KIND));\r\n    final LocalizationProtocol nodeManager = remoteUser.doAs(new PrivilegedAction<LocalizationProtocol>() {\r\n\r\n        @Override\r\n        public LocalizationProtocol run() {\r\n            return getProxy(nmAddr);\r\n        }\r\n    });\r\n    UserGroupInformation ugi = UserGroupInformation.createRemoteUser(user);\r\n    for (Token<? extends TokenIdentifier> token : creds.getAllTokens()) {\r\n        ugi.addToken(token);\r\n    }\r\n    ExecutorService exec = null;\r\n    try {\r\n        exec = createDownloadThreadPool();\r\n        CompletionService<Path> ecs = createCompletionService(exec);\r\n        localizeFiles(nodeManager, ecs, ugi);\r\n    } catch (Throwable e) {\r\n        throw new IOException(e);\r\n    } finally {\r\n        try {\r\n            if (exec != null) {\r\n                exec.shutdown();\r\n                destroyShellProcesses(getAllShells());\r\n                exec.awaitTermination(10, TimeUnit.SECONDS);\r\n            }\r\n            LocalDirAllocator.removeContext(appCacheDirContextName);\r\n        } finally {\r\n            closeFileSystems(ugi);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "createDownloadThreadPool",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ExecutorService createDownloadThreadPool()\n{\r\n    return HadoopExecutors.newSingleThreadExecutor(new ThreadFactoryBuilder().setNameFormat(\"ContainerLocalizer Downloader\").build());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "createCompletionService",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "CompletionService<Path> createCompletionService(ExecutorService exec)\n{\r\n    return new ExecutorCompletionService<Path>(exec);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "download",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Callable<Path> download(Path destDirPath, LocalResource rsrc, UserGroupInformation ugi) throws IOException\n{\r\n    if (rsrc.getVisibility() == LocalResourceVisibility.PRIVATE) {\r\n        createParentDirs(destDirPath);\r\n    }\r\n    diskValidator.checkStatus(new File(destDirPath.getParent().toUri().getRawPath()));\r\n    return new FSDownloadWrapper(lfs, ugi, conf, destDirPath, rsrc);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "createParentDirs",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void createParentDirs(Path destDirPath) throws IOException\n{\r\n    Path parent = destDirPath.getParent();\r\n    Path cacheRoot = LocalCacheDirectoryManager.getCacheDirectoryRoot(parent);\r\n    Stack<Path> dirs = new Stack<Path>();\r\n    while (!parent.equals(cacheRoot)) {\r\n        dirs.push(parent);\r\n        parent = parent.getParent();\r\n    }\r\n    while (!dirs.isEmpty()) {\r\n        createDir(lfs, dirs.pop(), USERCACHE_FOLDER_PERMS);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getEstimatedSize",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "long getEstimatedSize(LocalResource rsrc)\n{\r\n    if (rsrc.getSize() < 0) {\r\n        return -1;\r\n    }\r\n    switch(rsrc.getType()) {\r\n        case ARCHIVE:\r\n        case PATTERN:\r\n            return 5 * rsrc.getSize();\r\n        case FILE:\r\n        default:\r\n            return rsrc.getSize();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "sleep",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void sleep(int duration) throws InterruptedException\n{\r\n    TimeUnit.SECONDS.sleep(duration);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "closeFileSystems",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void closeFileSystems(UserGroupInformation ugi)\n{\r\n    try {\r\n        FileSystem.closeAllForUGI(ugi);\r\n    } catch (IOException e) {\r\n        LOG.warn(\"Failed to close filesystems: \", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "localizeFiles",
  "errType" : [ "InterruptedException", "YarnException", "YarnException" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void localizeFiles(LocalizationProtocol nodemanager, CompletionService<Path> cs, UserGroupInformation ugi) throws IOException, YarnException\n{\r\n    while (true) {\r\n        try {\r\n            LocalizerStatus status = createStatus();\r\n            LocalizerHeartbeatResponse response = nodemanager.heartbeat(status);\r\n            switch(response.getLocalizerAction()) {\r\n                case LIVE:\r\n                    List<ResourceLocalizationSpec> newRsrcs = response.getResourceSpecs();\r\n                    for (ResourceLocalizationSpec newRsrc : newRsrcs) {\r\n                        if (!pendingResources.containsKey(newRsrc.getResource())) {\r\n                            pendingResources.put(newRsrc.getResource(), cs.submit(download(new Path(newRsrc.getDestinationDirectory().getFile()), newRsrc.getResource(), ugi)));\r\n                        }\r\n                    }\r\n                    break;\r\n                case DIE:\r\n                    for (Future<Path> pending : pendingResources.values()) {\r\n                        pending.cancel(true);\r\n                    }\r\n                    status = createStatus();\r\n                    try {\r\n                        nodemanager.heartbeat(status);\r\n                    } catch (YarnException e) {\r\n                        e.printStackTrace(System.out);\r\n                        LOG.error(\"Heartbeat failed while dying: \", e);\r\n                    }\r\n                    return;\r\n            }\r\n            cs.poll(1000, TimeUnit.MILLISECONDS);\r\n        } catch (InterruptedException e) {\r\n            return;\r\n        } catch (YarnException e) {\r\n            throw e;\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "createStatus",
  "errType" : [ "ExecutionException", "CancellationException" ],
  "containingMethodsNum" : 21,
  "sourceCodeText" : "LocalizerStatus createStatus() throws InterruptedException\n{\r\n    final List<LocalResourceStatus> currentResources = new ArrayList<LocalResourceStatus>();\r\n    for (Iterator<Entry<LocalResource, Future<Path>>> i = pendingResources.entrySet().iterator(); i.hasNext(); ) {\r\n        Entry<LocalResource, Future<Path>> mapEntry = i.next();\r\n        LocalResourceStatus stat = recordFactory.newRecordInstance(LocalResourceStatus.class);\r\n        stat.setResource(mapEntry.getKey());\r\n        Future<Path> fPath = mapEntry.getValue();\r\n        if (fPath.isDone()) {\r\n            try {\r\n                Path localPath = fPath.get();\r\n                stat.setLocalPath(URL.fromPath(localPath));\r\n                stat.setLocalSize(FileUtil.getDU(new File(localPath.getParent().toUri())));\r\n                stat.setStatus(ResourceStatusType.FETCH_SUCCESS);\r\n            } catch (ExecutionException e) {\r\n                stat.setStatus(ResourceStatusType.FETCH_FAILURE);\r\n                stat.setException(SerializedException.newInstance(e.getCause()));\r\n            } catch (CancellationException e) {\r\n                stat.setStatus(ResourceStatusType.FETCH_FAILURE);\r\n                stat.setException(SerializedException.newInstance(e));\r\n            }\r\n            i.remove();\r\n        } else {\r\n            stat.setStatus(ResourceStatusType.FETCH_PENDING);\r\n        }\r\n        currentResources.add(stat);\r\n    }\r\n    LocalizerStatus status = recordFactory.newRecordInstance(LocalizerStatus.class);\r\n    status.setLocalizerId(localizerId);\r\n    status.addAllResources(currentResources);\r\n    return status;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getJavaOpts",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<String> getJavaOpts(Configuration conf)\n{\r\n    String opts = conf.get(YarnConfiguration.NM_CONTAINER_LOCALIZER_JAVA_OPTS_KEY, YarnConfiguration.NM_CONTAINER_LOCALIZER_JAVA_OPTS_DEFAULT);\r\n    return Arrays.asList(opts.split(\" \"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "buildMainArgs",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void buildMainArgs(List<String> command, String user, String appId, String locId, InetSocketAddress nmAddr, String tokenFileName, List<String> localDirs, Configuration conf)\n{\r\n    String logLevel = conf.get(YarnConfiguration.NM_CONTAINER_LOCALIZER_LOG_LEVEL, YarnConfiguration.NM_CONTAINER_LOCALIZER_LOG_LEVEL_DEFAULT);\r\n    addLog4jSystemProperties(logLevel, command);\r\n    command.add(ContainerLocalizer.class.getName());\r\n    command.add(user);\r\n    command.add(appId);\r\n    command.add(locId);\r\n    command.add(nmAddr.getHostName());\r\n    command.add(Integer.toString(nmAddr.getPort()));\r\n    command.add(tokenFileName);\r\n    for (String dir : localDirs) {\r\n        command.add(dir);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "addLog4jSystemProperties",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void addLog4jSystemProperties(String logLevel, List<String> command)\n{\r\n    command.add(\"-Dlog4j.configuration=container-log4j.properties\");\r\n    command.add(\"-D\" + YarnConfiguration.YARN_APP_CONTAINER_LOG_DIR + \"=\" + ApplicationConstants.LOG_DIR_EXPANSION_VAR);\r\n    command.add(\"-D\" + YarnConfiguration.YARN_APP_CONTAINER_LOG_SIZE + \"=0\");\r\n    command.add(\"-Dhadoop.root.logger=\" + logLevel + \",CLA\");\r\n    command.add(\"-Dhadoop.root.logfile=container-localizer-syslog\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "main",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void main(String[] argv) throws Throwable\n{\r\n    Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\r\n    int nRet = 0;\r\n    try {\r\n        String user = argv[0];\r\n        String appId = argv[1];\r\n        String locId = argv[2];\r\n        InetSocketAddress nmAddr = new InetSocketAddress(argv[3], Integer.parseInt(argv[4]));\r\n        String tokenFileName = argv[5];\r\n        String[] sLocaldirs = Arrays.copyOfRange(argv, 6, argv.length);\r\n        ArrayList<Path> localDirs = new ArrayList<>(sLocaldirs.length);\r\n        for (String sLocaldir : sLocaldirs) {\r\n            localDirs.add(new Path(sLocaldir));\r\n        }\r\n        final String uid = UserGroupInformation.getCurrentUser().getShortUserName();\r\n        if (!user.equals(uid)) {\r\n            LOG.warn(\"Localization running as \" + uid + \" not \" + user);\r\n        }\r\n        ContainerLocalizer localizer = new ContainerLocalizer(FileContext.getLocalFSFileContext(), user, appId, locId, tokenFileName, localDirs, RecordFactoryProvider.getRecordFactory(null));\r\n        localizer.runLocalization(nmAddr);\r\n    } catch (Throwable e) {\r\n        e.printStackTrace(System.out);\r\n        LOG.error(\"Exception in main:\", e);\r\n        nRet = -1;\r\n    } finally {\r\n        System.exit(nRet);\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "initDirs",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void initDirs(Configuration conf, String user, String appId, FileContext lfs, List<Path> localDirs) throws IOException\n{\r\n    if (null == localDirs || 0 == localDirs.size()) {\r\n        throw new IOException(\"Cannot initialize without local dirs\");\r\n    }\r\n    String[] appsFileCacheDirs = new String[localDirs.size()];\r\n    String[] usersFileCacheDirs = new String[localDirs.size()];\r\n    for (int i = 0, n = localDirs.size(); i < n; ++i) {\r\n        Path base = lfs.makeQualified(new Path(new Path(localDirs.get(i), USERCACHE), user));\r\n        Path userFileCacheDir = new Path(base, FILECACHE);\r\n        usersFileCacheDirs[i] = userFileCacheDir.toString();\r\n        createDir(lfs, userFileCacheDir, FILECACHE_PERMS);\r\n        Path appBase = new Path(base, new Path(APPCACHE, appId));\r\n        Path appFileCacheDir = new Path(appBase, FILECACHE);\r\n        appsFileCacheDirs[i] = appFileCacheDir.toString();\r\n        createDir(lfs, appFileCacheDir, FILECACHE_PERMS);\r\n    }\r\n    conf.setStrings(String.format(APPCACHE_CTXT_FMT, appId), appsFileCacheDirs);\r\n    conf.setStrings(String.format(USERCACHE_CTXT_FMT, user), usersFileCacheDirs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "createDir",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void createDir(FileContext lfs, Path dirPath, FsPermission perms) throws IOException\n{\r\n    lfs.mkdir(dirPath, perms, false);\r\n    if (!perms.equals(perms.applyUMask(lfs.getUMask()))) {\r\n        lfs.setPermission(dirPath, perms);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "destroyShellProcesses",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void destroyShellProcesses(Set<Shell> shells)\n{\r\n    for (Shell shell : shells) {\r\n        if (localizingThreads.contains(shell.getWaitingThread())) {\r\n            shell.getProcess().destroy();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "concat",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "List<String> concat(List<String> l1, List<String> l2)\n{\r\n    List<String> ret = new ArrayList<String>(l1.size() + l2.size());\r\n    ret.addAll(l1);\r\n    ret.addAll(l2);\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "registerDirsChangeListener",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void registerDirsChangeListener(DirsChangeListener listener)\n{\r\n    if (dirsChangeListeners.add(listener)) {\r\n        listener.onDirsChanged();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "deregisterDirsChangeListener",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void deregisterDirsChangeListener(DirsChangeListener listener)\n{\r\n    dirsChangeListeners.remove(listener);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getGoodDirs",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "List<String> getGoodDirs()\n{\r\n    this.readLock.lock();\r\n    try {\r\n        return ImmutableList.copyOf(localDirs);\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getFailedDirs",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "List<String> getFailedDirs()\n{\r\n    this.readLock.lock();\r\n    try {\r\n        return Collections.unmodifiableList(DirectoryCollection.concat(errorDirs, fullDirs));\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getFullDirs",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "List<String> getFullDirs()\n{\r\n    this.readLock.lock();\r\n    try {\r\n        return ImmutableList.copyOf(fullDirs);\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getErroredDirs",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "List<String> getErroredDirs()\n{\r\n    this.readLock.lock();\r\n    try {\r\n        return ImmutableList.copyOf(errorDirs);\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getNumFailures",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int getNumFailures()\n{\r\n    this.readLock.lock();\r\n    try {\r\n        return numFailures;\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getDirectoryErrorInfo",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "DiskErrorInformation getDirectoryErrorInfo(String dirName)\n{\r\n    this.readLock.lock();\r\n    try {\r\n        return directoryErrorInfo.get(dirName);\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "isDiskUnHealthy",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean isDiskUnHealthy(String dirName)\n{\r\n    this.readLock.lock();\r\n    try {\r\n        return directoryErrorInfo.containsKey(dirName);\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createNonExistentDirs",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "boolean createNonExistentDirs(FileContext localFs, FsPermission perm)\n{\r\n    boolean failed = false;\r\n    List<String> localDirectories = null;\r\n    this.readLock.lock();\r\n    try {\r\n        localDirectories = new ArrayList<>(localDirs);\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n    for (final String dir : localDirectories) {\r\n        try {\r\n            createDir(localFs, new Path(dir), perm);\r\n        } catch (IOException e) {\r\n            LOG.warn(\"Unable to create directory \" + dir + \" error \" + e.getMessage() + \", removing from the list of valid directories.\");\r\n            this.writeLock.lock();\r\n            try {\r\n                localDirs.remove(dir);\r\n                errorDirs.add(dir);\r\n                directoryErrorInfo.put(dir, new DiskErrorInformation(DiskErrorCause.OTHER, \"Cannot create directory : \" + dir + \", error \" + e.getMessage()));\r\n                numFailures++;\r\n            } finally {\r\n                this.writeLock.unlock();\r\n            }\r\n            failed = true;\r\n        }\r\n    }\r\n    return !failed;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 3,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "checkDirs",
  "errType" : null,
  "containingMethodsNum" : 32,
  "sourceCodeText" : "boolean checkDirs()\n{\r\n    boolean setChanged = false;\r\n    Set<String> preCheckGoodDirs = null;\r\n    Set<String> preCheckFullDirs = null;\r\n    Set<String> preCheckOtherErrorDirs = null;\r\n    List<String> failedDirs = null;\r\n    List<String> allLocalDirs = null;\r\n    this.readLock.lock();\r\n    try {\r\n        preCheckGoodDirs = new HashSet<String>(localDirs);\r\n        preCheckFullDirs = new HashSet<String>(fullDirs);\r\n        preCheckOtherErrorDirs = new HashSet<String>(errorDirs);\r\n        failedDirs = DirectoryCollection.concat(errorDirs, fullDirs);\r\n        allLocalDirs = DirectoryCollection.concat(localDirs, failedDirs);\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n    Map<String, DiskErrorInformation> dirsFailedCheck = testDirs(allLocalDirs, preCheckGoodDirs);\r\n    this.writeLock.lock();\r\n    try {\r\n        localDirs.clear();\r\n        errorDirs.clear();\r\n        fullDirs.clear();\r\n        directoryErrorInfo.clear();\r\n        for (Map.Entry<String, DiskErrorInformation> entry : dirsFailedCheck.entrySet()) {\r\n            String dir = entry.getKey();\r\n            DiskErrorInformation errorInformation = entry.getValue();\r\n            switch(entry.getValue().cause) {\r\n                case DISK_FULL:\r\n                    fullDirs.add(entry.getKey());\r\n                    break;\r\n                case OTHER:\r\n                    errorDirs.add(entry.getKey());\r\n                    break;\r\n                default:\r\n                    LOG.warn(entry.getValue().cause + \" is unknown for disk error.\");\r\n                    break;\r\n            }\r\n            directoryErrorInfo.put(entry.getKey(), errorInformation);\r\n            if (preCheckGoodDirs.contains(dir)) {\r\n                LOG.warn(\"Directory \" + dir + \" error, \" + errorInformation.message + \", removing from list of valid directories\");\r\n                setChanged = true;\r\n                numFailures++;\r\n            }\r\n        }\r\n        for (String dir : allLocalDirs) {\r\n            if (!dirsFailedCheck.containsKey(dir)) {\r\n                localDirs.add(dir);\r\n                if (preCheckFullDirs.contains(dir) || preCheckOtherErrorDirs.contains(dir)) {\r\n                    setChanged = true;\r\n                    LOG.info(\"Directory \" + dir + \" passed disk check, adding to list of valid directories.\");\r\n                }\r\n            }\r\n        }\r\n        Set<String> postCheckFullDirs = new HashSet<String>(fullDirs);\r\n        Set<String> postCheckOtherDirs = new HashSet<String>(errorDirs);\r\n        for (String dir : preCheckFullDirs) {\r\n            if (postCheckOtherDirs.contains(dir)) {\r\n                LOG.warn(\"Directory \" + dir + \" error \" + dirsFailedCheck.get(dir).message);\r\n            }\r\n        }\r\n        for (String dir : preCheckOtherErrorDirs) {\r\n            if (postCheckFullDirs.contains(dir)) {\r\n                LOG.warn(\"Directory \" + dir + \" error \" + dirsFailedCheck.get(dir).message);\r\n            }\r\n        }\r\n        setGoodDirsDiskUtilizationPercentage();\r\n        if (setChanged) {\r\n            for (DirsChangeListener listener : dirsChangeListeners) {\r\n                listener.onDirsChanged();\r\n            }\r\n        }\r\n        return setChanged;\r\n    } finally {\r\n        this.writeLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testDirs",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "Map<String, DiskErrorInformation> testDirs(List<String> dirs, Set<String> goodDirs)\n{\r\n    HashMap<String, DiskErrorInformation> ret = new HashMap<String, DiskErrorInformation>();\r\n    for (final String dir : dirs) {\r\n        String msg;\r\n        try {\r\n            File testDir = new File(dir);\r\n            diskValidator.checkStatus(testDir);\r\n            float diskUtilizationPercentageCutoff = goodDirs.contains(dir) ? diskUtilizationPercentageCutoffHigh : diskUtilizationPercentageCutoffLow;\r\n            long diskFreeSpaceCutoff = goodDirs.contains(dir) ? diskFreeSpaceCutoffLow : diskFreeSpaceCutoffHigh;\r\n            if (diskUtilizationThresholdEnabled && isDiskUsageOverPercentageLimit(testDir, diskUtilizationPercentageCutoff)) {\r\n                msg = \"used space above threshold of \" + diskUtilizationPercentageCutoff + \"%\";\r\n                ret.put(dir, new DiskErrorInformation(DiskErrorCause.DISK_FULL, msg));\r\n                continue;\r\n            } else if (diskFreeSpaceThresholdEnabled && isDiskFreeSpaceUnderLimit(testDir, diskFreeSpaceCutoff)) {\r\n                msg = \"free space below limit of \" + diskFreeSpaceCutoff + \"MB\";\r\n                ret.put(dir, new DiskErrorInformation(DiskErrorCause.DISK_FULL, msg));\r\n                continue;\r\n            }\r\n        } catch (IOException ie) {\r\n            ret.put(dir, new DiskErrorInformation(DiskErrorCause.OTHER, ie.getMessage()));\r\n        }\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "isDiskUsageOverPercentageLimit",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isDiskUsageOverPercentageLimit(File dir, float diskUtilizationPercentageCutoff)\n{\r\n    float freePercentage = 100 * (dir.getUsableSpace() / (float) dir.getTotalSpace());\r\n    float usedPercentage = 100.0F - freePercentage;\r\n    return (usedPercentage > diskUtilizationPercentageCutoff || usedPercentage >= 100.0F);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "isDiskFreeSpaceUnderLimit",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isDiskFreeSpaceUnderLimit(File dir, long freeSpaceCutoff)\n{\r\n    long freeSpace = dir.getUsableSpace() / (1024 * 1024);\r\n    return freeSpace < freeSpaceCutoff;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createDir",
  "errType" : [ "FileNotFoundException", "FileAlreadyExistsException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void createDir(FileContext localFs, Path dir, FsPermission perm) throws IOException\n{\r\n    if (dir == null) {\r\n        return;\r\n    }\r\n    try {\r\n        localFs.getFileStatus(dir);\r\n    } catch (FileNotFoundException e) {\r\n        createDir(localFs, dir.getParent(), perm);\r\n        try {\r\n            localFs.mkdir(dir, perm, false);\r\n        } catch (FileAlreadyExistsException ex) {\r\n        }\r\n        if (!perm.equals(perm.applyUMask(localFs.getUMask()))) {\r\n            localFs.setPermission(dir, perm);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getDiskUtilizationPercentageCutoffHigh",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "float getDiskUtilizationPercentageCutoffHigh()\n{\r\n    return diskUtilizationPercentageCutoffHigh;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getDiskUtilizationPercentageCutoffLow",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "float getDiskUtilizationPercentageCutoffLow()\n{\r\n    return diskUtilizationPercentageCutoffLow;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "setDiskUtilizationPercentageCutoff",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setDiskUtilizationPercentageCutoff(float utilizationPercentageCutOffHigh, float utilizationPercentageCutOffLow)\n{\r\n    diskUtilizationPercentageCutoffHigh = Math.max(0.0F, Math.min(100.0F, utilizationPercentageCutOffHigh));\r\n    diskUtilizationPercentageCutoffLow = Math.max(0.0F, Math.min(diskUtilizationPercentageCutoffHigh, utilizationPercentageCutOffLow));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getDiskUtilizationSpaceCutoff",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getDiskUtilizationSpaceCutoff()\n{\r\n    return getDiskUtilizationSpaceCutoffLow();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getDiskUtilizationSpaceCutoffLow",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getDiskUtilizationSpaceCutoffLow()\n{\r\n    return diskFreeSpaceCutoffLow;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getDiskUtilizationSpaceCutoffHigh",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getDiskUtilizationSpaceCutoffHigh()\n{\r\n    return diskFreeSpaceCutoffHigh;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getDiskUtilizationThresholdEnabled",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean getDiskUtilizationThresholdEnabled()\n{\r\n    return diskUtilizationThresholdEnabled;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getDiskFreeSpaceThresholdEnabled",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean getDiskFreeSpaceThresholdEnabled()\n{\r\n    return diskFreeSpaceThresholdEnabled;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "setDiskUtilizationThresholdEnabled",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDiskUtilizationThresholdEnabled(boolean utilizationEnabled)\n{\r\n    diskUtilizationThresholdEnabled = utilizationEnabled;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "setDiskFreeSpaceThresholdEnabled",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDiskFreeSpaceThresholdEnabled(boolean freeSpaceEnabled)\n{\r\n    diskFreeSpaceThresholdEnabled = freeSpaceEnabled;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "setDiskUtilizationSpaceCutoff",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setDiskUtilizationSpaceCutoff(long freeSpaceCutoff)\n{\r\n    setDiskUtilizationSpaceCutoff(freeSpaceCutoff, freeSpaceCutoff);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "setDiskUtilizationSpaceCutoff",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setDiskUtilizationSpaceCutoff(long freeSpaceCutoffLow, long freeSpaceCutoffHigh)\n{\r\n    diskFreeSpaceCutoffLow = Math.max(0, freeSpaceCutoffLow);\r\n    diskFreeSpaceCutoffHigh = Math.max(diskFreeSpaceCutoffLow, Math.max(0, freeSpaceCutoffHigh));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "setGoodDirsDiskUtilizationPercentage",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setGoodDirsDiskUtilizationPercentage()\n{\r\n    long totalSpace = 0;\r\n    long usableSpace = 0;\r\n    for (String dir : localDirs) {\r\n        File f = new File(dir);\r\n        if (!f.isDirectory()) {\r\n            continue;\r\n        }\r\n        totalSpace += f.getTotalSpace();\r\n        usableSpace += f.getUsableSpace();\r\n    }\r\n    if (totalSpace != 0) {\r\n        long tmp = ((totalSpace - usableSpace) * 100) / totalSpace;\r\n        if (Integer.MIN_VALUE < tmp && Integer.MAX_VALUE > tmp) {\r\n            goodDirsDiskUtilizationPercentage = Math.toIntExact(tmp);\r\n        }\r\n    } else {\r\n        goodDirsDiskUtilizationPercentage = 0;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getGoodDirsDiskUtilizationPercentage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getGoodDirsDiskUtilizationPercentage()\n{\r\n    return goodDirsDiskUtilizationPercentage;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "call",
  "errType" : [ "InterruptedException|InterruptedIOException", "IOException", "IOException" ],
  "containingMethodsNum" : 20,
  "sourceCodeText" : "Integer call()\n{\r\n    int retCode = ExitCode.LOST.getExitCode();\r\n    ContainerId containerId = container.getContainerId();\r\n    String appIdStr = containerId.getApplicationAttemptId().getApplicationId().toString();\r\n    String containerIdStr = containerId.toString();\r\n    dispatcher.getEventHandler().handle(new ContainerEvent(containerId, ContainerEventType.CONTAINER_LAUNCHED));\r\n    boolean notInterrupted = true;\r\n    try {\r\n        File pidFile = locatePidFile(appIdStr, containerIdStr);\r\n        if (pidFile != null) {\r\n            String pidPathStr = pidFile.getPath();\r\n            pidFilePath = new Path(pidPathStr);\r\n            exec.activateContainer(containerId, pidFilePath);\r\n            retCode = exec.reacquireContainer(new ContainerReacquisitionContext.Builder().setContainer(container).setUser(container.getUser()).setContainerId(containerId).build());\r\n        } else {\r\n            LOG.warn(\"Unable to locate pid file for container \" + containerIdStr);\r\n        }\r\n    } catch (InterruptedException | InterruptedIOException e) {\r\n        LOG.warn(\"Interrupted while waiting for exit code from \" + containerId);\r\n        notInterrupted = false;\r\n    } catch (IOException e) {\r\n        LOG.error(\"Unable to recover container \" + containerIdStr, e);\r\n    } finally {\r\n        if (notInterrupted) {\r\n            this.completed.set(true);\r\n            exec.deactivateContainer(containerId);\r\n            try {\r\n                getContext().getNMStateStore().storeContainerCompleted(containerId, retCode);\r\n            } catch (IOException e) {\r\n                LOG.error(\"Unable to set exit code for container \" + containerId);\r\n            }\r\n        }\r\n    }\r\n    if (retCode != 0) {\r\n        LOG.warn(\"Recovered container exited with a non-zero exit code \" + retCode);\r\n        this.dispatcher.getEventHandler().handle(new ContainerExitEvent(containerId, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, retCode, \"Container exited with a non-zero exit code \" + retCode));\r\n        return retCode;\r\n    }\r\n    LOG.info(\"Recovered container \" + containerId + \" succeeded\");\r\n    dispatcher.getEventHandler().handle(new ContainerEvent(containerId, ContainerEventType.CONTAINER_EXITED_WITH_SUCCESS));\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "locatePidFile",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "File locatePidFile(String appIdStr, String containerIdStr)\n{\r\n    String pidSubpath = getPidFileSubpath(appIdStr, containerIdStr);\r\n    for (String dir : getContext().getLocalDirsHandler().getLocalDirsForRead()) {\r\n        File pidFile = new File(dir, pidSubpath);\r\n        if (pidFile.exists()) {\r\n            return pidFile;\r\n        }\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void init(Context nm)\n{\r\n    ContainerShellWebSocket.nmContext = nm;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "onText",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void onText(Session session, String message) throws IOException\n{\r\n    try {\r\n        byte[] buffer = new byte[4000];\r\n        if (session.isOpen()) {\r\n            if (!message.equals(\"1{}\")) {\r\n                byte[] payload;\r\n                payload = message.getBytes(Charset.forName(\"UTF-8\"));\r\n                if (payload != null) {\r\n                    pair.out.write(payload);\r\n                    pair.out.flush();\r\n                }\r\n            }\r\n            int no = pair.in.available();\r\n            pair.in.read(buffer, 0, Math.min(no, buffer.length));\r\n            String formatted = new String(buffer, Charset.forName(\"UTF-8\")).replaceAll(\"\\n\", \"\\r\\n\");\r\n            session.getRemote().sendString(formatted);\r\n        }\r\n    } catch (IOException e) {\r\n        onClose(session, 1001, \"Shutdown\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "onConnect",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void onConnect(Session session)\n{\r\n    try {\r\n        URI containerURI = session.getUpgradeRequest().getRequestURI();\r\n        String command = \"bash\";\r\n        String[] containerPath = containerURI.getPath().split(\"/\");\r\n        String cId = containerPath[2];\r\n        if (containerPath.length == 4) {\r\n            for (ShellContainerCommand c : ShellContainerCommand.values()) {\r\n                if (c.name().equalsIgnoreCase(containerPath[3])) {\r\n                    command = containerPath[3].toLowerCase();\r\n                }\r\n            }\r\n        }\r\n        Container container = nmContext.getContainers().get(ContainerId.fromString(cId));\r\n        if (!checkAuthorization(session, container)) {\r\n            session.close(1008, \"Forbidden\");\r\n            return;\r\n        }\r\n        if (checkInsecureSetup()) {\r\n            session.close(1003, \"Nonsecure mode is unsupported.\");\r\n            return;\r\n        }\r\n        LOG.info(session.getRemoteAddress().getHostString() + \" connected!\");\r\n        LOG.info(\"Making interactive connection to running docker container with ID: \" + cId);\r\n        ContainerExecContext execContext = new ContainerExecContext.Builder().setContainer(container).setNMLocalPath(nmContext.getLocalDirsHandler()).setShell(command).build();\r\n        pair = exec.execContainer(execContext);\r\n    } catch (Exception e) {\r\n        LOG.error(\"Failed to establish WebSocket connection with Client\", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "onClose",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void onClose(Session session, int status, String reason)\n{\r\n    try {\r\n        LOG.info(session.getRemoteAddress().getHostString() + \" closed!\");\r\n        String exit = \"exit\\r\\n\";\r\n        pair.out.write(exit.getBytes(Charset.forName(\"UTF-8\")));\r\n        pair.out.flush();\r\n        pair.in.close();\r\n        pair.out.close();\r\n    } catch (IOException e) {\r\n    } finally {\r\n        session.close();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "checkAuthorization",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "boolean checkAuthorization(Session session, Container container) throws IOException\n{\r\n    boolean authorized = true;\r\n    String user = \"\";\r\n    if (UserGroupInformation.isSecurityEnabled()) {\r\n        user = new HadoopKerberosName(session.getUpgradeRequest().getUserPrincipal().getName()).getShortName();\r\n    } else {\r\n        Map<String, List<String>> parameters = session.getUpgradeRequest().getParameterMap();\r\n        if (parameters.containsKey(\"user.name\")) {\r\n            List<String> users = parameters.get(\"user.name\");\r\n            user = users.get(0);\r\n        }\r\n    }\r\n    boolean isAdmin = false;\r\n    if (nmContext.getApplicationACLsManager().areACLsEnabled()) {\r\n        UserGroupInformation ugi = UserGroupInformation.createRemoteUser(user);\r\n        isAdmin = nmContext.getApplicationACLsManager().isAdmin(ugi);\r\n    }\r\n    String containerUser = container.getUser();\r\n    if (!user.equals(containerUser) && !isAdmin) {\r\n        authorized = false;\r\n    }\r\n    return authorized;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "checkInsecureSetup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean checkInsecureSetup()\n{\r\n    boolean kerberos = UserGroupInformation.isSecurityEnabled();\r\n    boolean limitUsers = nmContext.getConf().getBoolean(YarnConfiguration.NM_NONSECURE_MODE_LIMIT_USERS, true);\r\n    if (kerberos) {\r\n        return false;\r\n    }\r\n    return limitUsers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getInitializedCGroupsHandler",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "CGroupsHandler getInitializedCGroupsHandler(Configuration conf) throws ResourceHandlerException\n{\r\n    if (cGroupsHandler == null) {\r\n        synchronized (CGroupsHandler.class) {\r\n            if (cGroupsHandler == null) {\r\n                cGroupsHandler = new CGroupsHandlerImpl(conf, PrivilegedOperationExecutor.getInstance(conf));\r\n                LOG.debug(\"Value of CGroupsHandler is: {}\", cGroupsHandler);\r\n            }\r\n        }\r\n    }\r\n    return cGroupsHandler;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getCGroupsHandler",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "CGroupsHandler getCGroupsHandler()\n{\r\n    return cGroupsHandler;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getCgroupsRelativeRoot",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String getCgroupsRelativeRoot()\n{\r\n    if (cGroupsHandler == null) {\r\n        return null;\r\n    }\r\n    String cGroupPath = cGroupsHandler.getRelativePathForCGroup(\"\");\r\n    if (cGroupPath == null || cGroupPath.isEmpty()) {\r\n        return null;\r\n    }\r\n    return cGroupPath.replaceAll(\"/$\", \"\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getNetworkResourceHandler",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NetworkPacketTaggingHandlerImpl getNetworkResourceHandler()\n{\r\n    return networkPacketTaggingHandlerImpl;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getDiskResourceHandler",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "DiskResourceHandler getDiskResourceHandler()\n{\r\n    return cGroupsBlkioResourceHandler;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getMemoryResourceHandler",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "MemoryResourceHandler getMemoryResourceHandler()\n{\r\n    return cGroupsMemoryResourceHandler;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getCpuResourceHandler",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "CpuResourceHandler getCpuResourceHandler()\n{\r\n    return cGroupsCpuResourceHandler;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "initCGroupsCpuResourceHandler",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "CGroupsCpuResourceHandlerImpl initCGroupsCpuResourceHandler(Configuration conf) throws ResourceHandlerException\n{\r\n    boolean cgroupsCpuEnabled = conf.getBoolean(YarnConfiguration.NM_CPU_RESOURCE_ENABLED, YarnConfiguration.DEFAULT_NM_CPU_RESOURCE_ENABLED);\r\n    boolean cgroupsLCEResourcesHandlerEnabled = conf.getClass(YarnConfiguration.NM_LINUX_CONTAINER_RESOURCES_HANDLER, DefaultLCEResourcesHandler.class).equals(CgroupsLCEResourcesHandler.class);\r\n    if (cgroupsCpuEnabled || cgroupsLCEResourcesHandlerEnabled) {\r\n        if (cGroupsCpuResourceHandler == null) {\r\n            synchronized (CpuResourceHandler.class) {\r\n                if (cGroupsCpuResourceHandler == null) {\r\n                    LOG.debug(\"Creating new cgroups cpu handler\");\r\n                    cGroupsCpuResourceHandler = new CGroupsCpuResourceHandlerImpl(getInitializedCGroupsHandler(conf));\r\n                    return cGroupsCpuResourceHandler;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getTrafficControlBandwidthHandler",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "TrafficControlBandwidthHandlerImpl getTrafficControlBandwidthHandler(Configuration conf) throws ResourceHandlerException\n{\r\n    if (conf.getBoolean(YarnConfiguration.NM_NETWORK_RESOURCE_ENABLED, YarnConfiguration.DEFAULT_NM_NETWORK_RESOURCE_ENABLED)) {\r\n        if (trafficControlBandwidthHandler == null) {\r\n            synchronized (OutboundBandwidthResourceHandler.class) {\r\n                if (trafficControlBandwidthHandler == null) {\r\n                    LOG.info(\"Creating new traffic control bandwidth handler.\");\r\n                    trafficControlBandwidthHandler = new TrafficControlBandwidthHandlerImpl(PrivilegedOperationExecutor.getInstance(conf), getInitializedCGroupsHandler(conf), new TrafficController(conf, PrivilegedOperationExecutor.getInstance(conf)));\r\n                }\r\n            }\r\n        }\r\n        return trafficControlBandwidthHandler;\r\n    } else {\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "initNetworkResourceHandler",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "ResourceHandler initNetworkResourceHandler(Configuration conf) throws ResourceHandlerException\n{\r\n    boolean useNetworkTagHandler = conf.getBoolean(YarnConfiguration.NM_NETWORK_TAG_HANDLER_ENABLED, YarnConfiguration.DEFAULT_NM_NETWORK_TAG_HANDLER_ENABLED);\r\n    if (useNetworkTagHandler) {\r\n        LOG.info(\"Using network-tagging-handler.\");\r\n        return getNetworkTaggingHandler(conf);\r\n    } else {\r\n        LOG.info(\"Using traffic control bandwidth handler\");\r\n        return getTrafficControlBandwidthHandler(conf);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getNetworkTaggingHandler",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ResourceHandler getNetworkTaggingHandler(Configuration conf) throws ResourceHandlerException\n{\r\n    if (networkPacketTaggingHandlerImpl == null) {\r\n        synchronized (OutboundBandwidthResourceHandler.class) {\r\n            if (networkPacketTaggingHandlerImpl == null) {\r\n                LOG.info(\"Creating new network-tagging-handler.\");\r\n                networkPacketTaggingHandlerImpl = new NetworkPacketTaggingHandlerImpl(PrivilegedOperationExecutor.getInstance(conf), getInitializedCGroupsHandler(conf));\r\n            }\r\n        }\r\n    }\r\n    return networkPacketTaggingHandlerImpl;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "initOutboundBandwidthResourceHandler",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "OutboundBandwidthResourceHandler initOutboundBandwidthResourceHandler(Configuration conf) throws ResourceHandlerException\n{\r\n    return getTrafficControlBandwidthHandler(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "initDiskResourceHandler",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "DiskResourceHandler initDiskResourceHandler(Configuration conf) throws ResourceHandlerException\n{\r\n    if (conf.getBoolean(YarnConfiguration.NM_DISK_RESOURCE_ENABLED, YarnConfiguration.DEFAULT_NM_DISK_RESOURCE_ENABLED)) {\r\n        return getCgroupsBlkioResourceHandler(conf);\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getCgroupsBlkioResourceHandler",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "CGroupsBlkioResourceHandlerImpl getCgroupsBlkioResourceHandler(Configuration conf) throws ResourceHandlerException\n{\r\n    if (cGroupsBlkioResourceHandler == null) {\r\n        synchronized (DiskResourceHandler.class) {\r\n            if (cGroupsBlkioResourceHandler == null) {\r\n                LOG.debug(\"Creating new cgroups blkio handler\");\r\n                cGroupsBlkioResourceHandler = new CGroupsBlkioResourceHandlerImpl(getInitializedCGroupsHandler(conf));\r\n            }\r\n        }\r\n    }\r\n    return cGroupsBlkioResourceHandler;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "initMemoryResourceHandler",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "MemoryResourceHandler initMemoryResourceHandler(Configuration conf) throws ResourceHandlerException\n{\r\n    if (conf.getBoolean(YarnConfiguration.NM_MEMORY_RESOURCE_ENABLED, YarnConfiguration.DEFAULT_NM_MEMORY_RESOURCE_ENABLED)) {\r\n        return getCgroupsMemoryResourceHandler(conf);\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getCgroupsMemoryResourceHandler",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "CGroupsMemoryResourceHandlerImpl getCgroupsMemoryResourceHandler(Configuration conf) throws ResourceHandlerException\n{\r\n    if (cGroupsMemoryResourceHandler == null) {\r\n        synchronized (MemoryResourceHandler.class) {\r\n            if (cGroupsMemoryResourceHandler == null) {\r\n                cGroupsMemoryResourceHandler = new CGroupsMemoryResourceHandlerImpl(getInitializedCGroupsHandler(conf));\r\n            }\r\n        }\r\n    }\r\n    return cGroupsMemoryResourceHandler;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getNumaResourceHandler",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceHandler getNumaResourceHandler(Configuration conf, Context nmContext)\n{\r\n    if (YarnConfiguration.numaAwarenessEnabled(conf)) {\r\n        return new NumaResourceHandlerImpl(conf, nmContext);\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "addHandlerIfNotNull",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addHandlerIfNotNull(List<ResourceHandler> handlerList, ResourceHandler handler)\n{\r\n    if (handler != null) {\r\n        handlerList.add(handler);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "initializeConfiguredResourceHandlerChain",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void initializeConfiguredResourceHandlerChain(Configuration conf, Context nmContext) throws ResourceHandlerException\n{\r\n    ArrayList<ResourceHandler> handlerList = new ArrayList<>();\r\n    addHandlerIfNotNull(handlerList, initNetworkResourceHandler(conf));\r\n    addHandlerIfNotNull(handlerList, initDiskResourceHandler(conf));\r\n    addHandlerIfNotNull(handlerList, initMemoryResourceHandler(conf));\r\n    addHandlerIfNotNull(handlerList, initCGroupsCpuResourceHandler(conf));\r\n    addHandlerIfNotNull(handlerList, getNumaResourceHandler(conf, nmContext));\r\n    addHandlersFromConfiguredResourcePlugins(handlerList, conf, nmContext);\r\n    resourceHandlerChain = new ResourceHandlerChain(handlerList);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "addHandlersFromConfiguredResourcePlugins",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void addHandlersFromConfiguredResourcePlugins(List<ResourceHandler> handlerList, Configuration conf, Context nmContext) throws ResourceHandlerException\n{\r\n    ResourcePluginManager pluginManager = nmContext.getResourcePluginManager();\r\n    if (pluginManager == null) {\r\n        LOG.warn(\"Plugin manager was null while trying to add \" + \"ResourceHandlers from configuration!\");\r\n        return;\r\n    }\r\n    Map<String, ResourcePlugin> pluginMap = pluginManager.getNameToPlugins();\r\n    if (pluginMap == null) {\r\n        LOG.debug(\"List of plugins of ResourcePluginManager was empty \" + \"while trying to add ResourceHandlers from configuration!\");\r\n        return;\r\n    } else {\r\n        LOG.debug(\"List of plugins of ResourcePluginManager: {}\", pluginManager.getNameToPlugins());\r\n    }\r\n    for (ResourcePlugin plugin : pluginMap.values()) {\r\n        addHandlerIfNotNull(handlerList, plugin.createResourceHandler(nmContext, getInitializedCGroupsHandler(conf), PrivilegedOperationExecutor.getInstance(conf)));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getConfiguredResourceHandlerChain",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ResourceHandlerChain getConfiguredResourceHandlerChain(Configuration conf, Context nmContext) throws ResourceHandlerException\n{\r\n    if (resourceHandlerChain == null) {\r\n        synchronized (ResourceHandlerModule.class) {\r\n            if (resourceHandlerChain == null) {\r\n                initializeConfiguredResourceHandlerChain(conf, nmContext);\r\n            }\r\n        }\r\n    }\r\n    if (resourceHandlerChain.getResourceHandlerList().size() != 0) {\r\n        return resourceHandlerChain;\r\n    } else {\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "nullifyResourceHandlerChain",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void nullifyResourceHandlerChain() throws ResourceHandlerException\n{\r\n    resourceHandlerChain = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "parseConfiguredCGroupPath",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "Map<String, Set<String>> parseConfiguredCGroupPath(String cgroupMountPath) throws IOException\n{\r\n    File cgroupDir = new File(cgroupMountPath);\r\n    File[] list = cgroupDir.listFiles();\r\n    if (list == null) {\r\n        throw new IOException(\"Empty cgroup mount directory specified: \" + cgroupMountPath);\r\n    }\r\n    Map<String, Set<String>> pathSubsystemMappings = new HashMap<>();\r\n    Set<String> validCGroups = CGroupsHandler.CGroupController.getValidCGroups();\r\n    for (File candidate : list) {\r\n        Set<String> cgroupList = new HashSet<>(Arrays.asList(candidate.getName().split(\",\")));\r\n        cgroupList.retainAll(validCGroups);\r\n        if (!cgroupList.isEmpty()) {\r\n            if (candidate.isDirectory()) {\r\n                pathSubsystemMappings.put(candidate.getAbsolutePath(), cgroupList);\r\n            } else {\r\n                LOG.warn(\"The following cgroup is not a directory \" + candidate.getAbsolutePath());\r\n            }\r\n        }\r\n    }\r\n    return pathSubsystemMappings;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "executeDockerCommand",
  "errType" : [ "PrivilegedOperationException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "String executeDockerCommand(DockerCommand dockerCommand, String containerId, Map<String, String> env, PrivilegedOperationExecutor privilegedOperationExecutor, boolean disableFailureLogging, Context nmContext) throws ContainerExecutionException\n{\r\n    PrivilegedOperation dockerOp = dockerCommand.preparePrivilegedOperation(dockerCommand, containerId, env, nmContext);\r\n    if (disableFailureLogging) {\r\n        dockerOp.disableFailureLogging();\r\n    }\r\n    LOG.debug(\"Running docker command: {}\", dockerCommand);\r\n    try {\r\n        String result = privilegedOperationExecutor.executePrivilegedOperation(null, dockerOp, null, env, true, false);\r\n        if (result != null && !result.isEmpty()) {\r\n            result = result.trim();\r\n        }\r\n        return result;\r\n    } catch (PrivilegedOperationException e) {\r\n        throw new ContainerExecutionException(\"Docker operation failed\", e.getExitCode(), e.getOutput(), e.getErrorOutput());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "getContainerStatus",
  "errType" : [ "ContainerExecutionException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "DockerContainerStatus getContainerStatus(String containerId, PrivilegedOperationExecutor privilegedOperationExecutor, Context nmContext)\n{\r\n    try {\r\n        String currentContainerStatus = executeStatusCommand(containerId, privilegedOperationExecutor, nmContext);\r\n        DockerContainerStatus dockerContainerStatus = parseContainerStatus(currentContainerStatus);\r\n        LOG.debug(\"Container Status: {} ContainerId: {}\", dockerContainerStatus.getName(), containerId);\r\n        return dockerContainerStatus;\r\n    } catch (ContainerExecutionException e) {\r\n        LOG.debug(\"Container Status: {} ContainerId: {}\", DockerContainerStatus.NONEXISTENT.getName(), containerId);\r\n        return DockerContainerStatus.NONEXISTENT;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "parseContainerStatus",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "DockerContainerStatus parseContainerStatus(String containerStatusStr)\n{\r\n    DockerContainerStatus dockerContainerStatus;\r\n    if (containerStatusStr == null) {\r\n        dockerContainerStatus = DockerContainerStatus.UNKNOWN;\r\n    } else if (containerStatusStr.equals(DockerContainerStatus.CREATED.getName())) {\r\n        dockerContainerStatus = DockerContainerStatus.CREATED;\r\n    } else if (containerStatusStr.equals(DockerContainerStatus.RUNNING.getName())) {\r\n        dockerContainerStatus = DockerContainerStatus.RUNNING;\r\n    } else if (containerStatusStr.equals(DockerContainerStatus.STOPPED.getName())) {\r\n        dockerContainerStatus = DockerContainerStatus.STOPPED;\r\n    } else if (containerStatusStr.equals(DockerContainerStatus.RESTARTING.getName())) {\r\n        dockerContainerStatus = DockerContainerStatus.RESTARTING;\r\n    } else if (containerStatusStr.equals(DockerContainerStatus.REMOVING.getName())) {\r\n        dockerContainerStatus = DockerContainerStatus.REMOVING;\r\n    } else if (containerStatusStr.equals(DockerContainerStatus.DEAD.getName())) {\r\n        dockerContainerStatus = DockerContainerStatus.DEAD;\r\n    } else if (containerStatusStr.equals(DockerContainerStatus.EXITED.getName())) {\r\n        dockerContainerStatus = DockerContainerStatus.EXITED;\r\n    } else if (containerStatusStr.equals(DockerContainerStatus.NONEXISTENT.getName())) {\r\n        dockerContainerStatus = DockerContainerStatus.NONEXISTENT;\r\n    } else {\r\n        dockerContainerStatus = DockerContainerStatus.UNKNOWN;\r\n    }\r\n    return dockerContainerStatus;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "executeStatusCommand",
  "errType" : [ "ContainerExecutionException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String executeStatusCommand(String containerId, PrivilegedOperationExecutor privilegedOperationExecutor, Context nmContext) throws ContainerExecutionException\n{\r\n    DockerInspectCommand dockerInspectCommand = new DockerInspectCommand(containerId).getContainerStatus();\r\n    try {\r\n        return DockerCommandExecutor.executeDockerCommand(dockerInspectCommand, containerId, null, privilegedOperationExecutor, true, nmContext);\r\n    } catch (ContainerExecutionException e) {\r\n        throw new ContainerExecutionException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "isStoppable",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isStoppable(DockerContainerStatus containerStatus)\n{\r\n    if (containerStatus.equals(DockerContainerStatus.RUNNING) || containerStatus.equals(DockerContainerStatus.RESTARTING)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "isKillable",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isKillable(DockerContainerStatus containerStatus)\n{\r\n    return isStoppable(containerStatus);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "isRemovable",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean isRemovable(DockerContainerStatus containerStatus)\n{\r\n    return !containerStatus.equals(DockerContainerStatus.NONEXISTENT) && !containerStatus.equals(DockerContainerStatus.UNKNOWN) && !containerStatus.equals(DockerContainerStatus.REMOVING) && !containerStatus.equals(DockerContainerStatus.RUNNING);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "isStartable",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isStartable(DockerContainerStatus containerStatus)\n{\r\n    if (containerStatus.equals(DockerContainerStatus.EXITED) || containerStatus.equals(DockerContainerStatus.STOPPED)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getVmemLimit",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getVmemLimit()\n{\r\n    return this.vmemLimit;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getPmemLimit",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getPmemLimit()\n{\r\n    return this.pmemLimit;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getCpuVcores",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getCpuVcores()\n{\r\n    return this.cpuVcores;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getLaunchDuration",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getLaunchDuration()\n{\r\n    return this.launchDuration;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getLocalizationDuration",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getLocalizationDuration()\n{\r\n    return this.localizationDuration;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "preHead",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void preHead(Page.HTML<__> html)\n{\r\n    commonPreHead(html);\r\n    setTitle(\"All containers running on this node\");\r\n    set(DATATABLES_ID, \"containers\");\r\n    set(initID(DATATABLES, \"containers\"), containersTableInit());\r\n    setTableStyles(html, \"containers\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "containersTableInit",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String containersTableInit()\n{\r\n    return tableInit().append(\", aoColumns:[\").append(getContainersIdColumnDefs()).append(\", null, null, {bSearchable:false}]} \").toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getContainersIdColumnDefs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getContainersIdColumnDefs()\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    return sb.append(\"{'sType':'natural', 'aTargets': [0]\").append(\", 'mRender': parseHadoopID }\").toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "content",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<? extends SubView> content()\n{\r\n    return AllContainersBlock.class;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "getType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getType()\n{\r\n    return type;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "getMajor",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getMajor()\n{\r\n    return major;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "getMinor",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getMinor()\n{\r\n    return minor;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "getIPID",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getIPID()\n{\r\n    return IPID;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "getAocxHash",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getAocxHash()\n{\r\n    return aocxHash;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "setAocxHash",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAocxHash(String hash)\n{\r\n    this.aocxHash = hash;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "setIPID",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setIPID(String IPID)\n{\r\n    this.IPID = IPID;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "getAliasDevName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getAliasDevName()\n{\r\n    return aliasDevName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean equals(Object obj)\n{\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj == null) {\r\n        return false;\r\n    }\r\n    if (getClass() != obj.getClass()) {\r\n        return false;\r\n    }\r\n    FpgaDevice other = (FpgaDevice) obj;\r\n    if (aliasDevName == null) {\r\n        if (other.aliasDevName != null) {\r\n            return false;\r\n        }\r\n    } else if (!aliasDevName.equals(other.aliasDevName)) {\r\n        return false;\r\n    }\r\n    if (major != other.major) {\r\n        return false;\r\n    }\r\n    if (minor != other.minor) {\r\n        return false;\r\n    }\r\n    if (type == null) {\r\n        if (other.type != null) {\r\n            return false;\r\n        }\r\n    } else if (!type.equals(other.type)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int hashCode()\n{\r\n    if (hashCode == null) {\r\n        final int prime = 31;\r\n        int result = 1;\r\n        result = prime * result + major;\r\n        result = prime * result + type.hashCode();\r\n        result = prime * result + minor;\r\n        result = prime * result + aliasDevName.hashCode();\r\n        hashCode = result;\r\n    }\r\n    return hashCode;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String toString()\n{\r\n    return \"FPGA Device:(Type: \" + this.type + \", Major: \" + this.major + \", Minor: \" + this.minor + \", IPID: \" + this.IPID + \", Hash: \" + this.aocxHash + \")\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\loghandler\\event",
  "methodName" : "getApplicationId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationId getApplicationId()\n{\r\n    return this.applicationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void init()\n{\r\n    response.setContentType(null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "get",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeInfo get()\n{\r\n    return getNodeInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getNodeInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeInfo getNodeInfo()\n{\r\n    init();\r\n    return new NodeInfo(this.nmContext, this.rview);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getNodeApps",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "AppsInfo getNodeApps(@javax.ws.rs.core.Context HttpServletRequest hsr, @QueryParam(\"state\") String stateQuery, @QueryParam(\"user\") String userQuery)\n{\r\n    init();\r\n    AppsInfo allApps = new AppsInfo();\r\n    for (Entry<ApplicationId, Application> entry : this.nmContext.getApplications().entrySet()) {\r\n        AppInfo appInfo = new AppInfo(entry.getValue());\r\n        if (stateQuery != null && !stateQuery.isEmpty()) {\r\n            ApplicationState.valueOf(stateQuery);\r\n            if (!appInfo.getState().equalsIgnoreCase(stateQuery)) {\r\n                continue;\r\n            }\r\n        }\r\n        if (userQuery != null) {\r\n            if (userQuery.isEmpty()) {\r\n                String msg = \"Error: You must specify a non-empty string for the user\";\r\n                throw new BadRequestException(msg);\r\n            }\r\n            if (!appInfo.getUser().equals(userQuery)) {\r\n                continue;\r\n            }\r\n        }\r\n        if (filterAppsByUser && !hasAccess(appInfo.getUser(), entry.getKey(), hsr)) {\r\n            continue;\r\n        }\r\n        allApps.add(appInfo);\r\n    }\r\n    return allApps;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getNodeApp",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "AppInfo getNodeApp(@PathParam(\"appid\") String appId)\n{\r\n    init();\r\n    ApplicationId id = WebAppUtils.parseApplicationId(recordFactory, appId);\r\n    Application app = this.nmContext.getApplications().get(id);\r\n    if (app == null) {\r\n        throw new NotFoundException(\"app with id \" + appId + \" not found\");\r\n    }\r\n    return new AppInfo(app);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getNodeContainers",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "ContainersInfo getNodeContainers(@javax.ws.rs.core.Context HttpServletRequest hsr)\n{\r\n    init();\r\n    ContainersInfo allContainers = new ContainersInfo();\r\n    for (Entry<ContainerId, Container> entry : this.nmContext.getContainers().entrySet()) {\r\n        if (entry.getValue() == null) {\r\n            continue;\r\n        }\r\n        ContainerInfo info = new ContainerInfo(this.nmContext, entry.getValue(), uriInfo.getBaseUri().toString(), webapp.name(), hsr.getRemoteUser());\r\n        ApplicationId appId = entry.getKey().getApplicationAttemptId().getApplicationId();\r\n        if (filterAppsByUser && !hasAccess(entry.getValue().getUser(), appId, hsr)) {\r\n            continue;\r\n        }\r\n        allContainers.add(info);\r\n    }\r\n    return allContainers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getNodeContainer",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "ContainerInfo getNodeContainer(@javax.ws.rs.core.Context HttpServletRequest hsr, @PathParam(\"containerid\") String id)\n{\r\n    ContainerId containerId = null;\r\n    init();\r\n    try {\r\n        containerId = ContainerId.fromString(id);\r\n    } catch (Exception e) {\r\n        throw new BadRequestException(\"invalid container id, \" + id);\r\n    }\r\n    Container container = nmContext.getContainers().get(containerId);\r\n    if (container == null) {\r\n        throw new NotFoundException(\"container with id, \" + id + \", not found\");\r\n    }\r\n    return new ContainerInfo(this.nmContext, container, uriInfo.getBaseUri().toString(), webapp.name(), hsr.getRemoteUser());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getContainerLogsInfo",
  "errType" : [ "IllegalArgumentException", "Exception", "IOException" ],
  "containingMethodsNum" : 19,
  "sourceCodeText" : "Response getContainerLogsInfo(@javax.ws.rs.core.Context HttpServletRequest hsr, @javax.ws.rs.core.Context HttpServletResponse res, @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr)\n{\r\n    ContainerId containerId = null;\r\n    init();\r\n    try {\r\n        containerId = ContainerId.fromString(containerIdStr);\r\n    } catch (IllegalArgumentException ex) {\r\n        throw new BadRequestException(\"invalid container id, \" + containerIdStr);\r\n    }\r\n    try {\r\n        List<ContainerLogsInfo> containersLogsInfo = new ArrayList<>();\r\n        containersLogsInfo.add(new NMContainerLogsInfo(this.nmContext, containerId, hsr.getRemoteUser(), ContainerLogAggregationType.LOCAL));\r\n        ApplicationId appId = containerId.getApplicationAttemptId().getApplicationId();\r\n        Application app = this.nmContext.getApplications().get(appId);\r\n        String appOwner = app == null ? null : app.getUser();\r\n        try {\r\n            ContainerLogsRequest logRequest = new ContainerLogsRequest();\r\n            logRequest.setAppId(appId);\r\n            logRequest.setAppOwner(appOwner);\r\n            logRequest.setContainerId(containerIdStr);\r\n            logRequest.setNodeId(this.nmContext.getNodeId().toString());\r\n            List<ContainerLogMeta> containerLogMeta = factory.getFileControllerForRead(appId, appOwner).readAggregatedLogsMeta(logRequest);\r\n            if (!containerLogMeta.isEmpty()) {\r\n                for (ContainerLogMeta logMeta : containerLogMeta) {\r\n                    containersLogsInfo.add(new ContainerLogsInfo(logMeta, ContainerLogAggregationType.AGGREGATED));\r\n                }\r\n            }\r\n        } catch (IOException ex) {\r\n            LOG.debug(\"{}\", ex);\r\n        }\r\n        GenericEntity<List<ContainerLogsInfo>> meta = new GenericEntity<List<ContainerLogsInfo>>(containersLogsInfo) {\r\n        };\r\n        ResponseBuilder resp = Response.ok(meta);\r\n        resp.header(\"X-Content-Type-Options\", \"nosniff\");\r\n        return resp.build();\r\n    } catch (Exception ex) {\r\n        if (redirectWSUrl == null || redirectWSUrl.isEmpty()) {\r\n            throw new WebApplicationException(ex);\r\n        }\r\n        String redirectURI = \"/containers/\" + containerIdStr + \"/logs\";\r\n        return createRedirectResponse(hsr, redirectWSUrl, redirectURI);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getContainerLogFile",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response getContainerLogFile(@PathParam(YarnWebServiceParams.CONTAINER_ID) final String containerIdStr, @PathParam(YarnWebServiceParams.CONTAINER_LOG_FILE_NAME) String filename, @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_FORMAT) String format, @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_SIZE) String size)\n{\r\n    return getLogs(containerIdStr, filename, format, size);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getLogs",
  "errType" : [ "IllegalArgumentException", "Exception", "NotFoundException", "YarnException", "IOException", "Exception" ],
  "containingMethodsNum" : 45,
  "sourceCodeText" : "Response getLogs(@PathParam(YarnWebServiceParams.CONTAINER_ID) final String containerIdStr, @PathParam(YarnWebServiceParams.CONTAINER_LOG_FILE_NAME) String filename, @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_FORMAT) String format, @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_SIZE) String size)\n{\r\n    ContainerId tempContainerId;\r\n    try {\r\n        tempContainerId = ContainerId.fromString(containerIdStr);\r\n    } catch (IllegalArgumentException ex) {\r\n        return Response.status(Status.BAD_REQUEST).build();\r\n    }\r\n    final ContainerId containerId = tempContainerId;\r\n    boolean tempIsRunning = false;\r\n    try {\r\n        Container container = nmContext.getContainers().get(containerId);\r\n        tempIsRunning = (container.getContainerState() == ContainerState.RUNNING);\r\n    } catch (Exception ex) {\r\n        LOG.debug(\"Can not find the container:{} in this node.\", containerId);\r\n    }\r\n    final boolean isRunning = tempIsRunning;\r\n    File logFile = null;\r\n    try {\r\n        logFile = ContainerLogsUtils.getContainerLogFile(containerId, filename, request.getRemoteUser(), nmContext);\r\n    } catch (NotFoundException ex) {\r\n        if (redirectWSUrl == null || redirectWSUrl.isEmpty()) {\r\n            return Response.status(Status.NOT_FOUND).entity(ex.getMessage()).build();\r\n        }\r\n        String redirectURI = \"/containers/\" + containerIdStr + \"/logs/\" + filename;\r\n        return createRedirectResponse(request, redirectWSUrl, redirectURI);\r\n    } catch (YarnException ex) {\r\n        return Response.serverError().entity(ex.getMessage()).build();\r\n    }\r\n    final long bytes = parseLongParam(size);\r\n    final String lastModifiedTime = Times.format(logFile.lastModified());\r\n    final String outputFileName = filename;\r\n    String contentType = WebAppUtils.getDefaultLogContentType();\r\n    if (format != null && !format.isEmpty()) {\r\n        contentType = WebAppUtils.getSupportedLogContentType(format);\r\n        if (contentType == null) {\r\n            String errorMessage = \"The valid values for the parameter : format \" + \"are \" + WebAppUtils.listSupportedLogContentType();\r\n            return Response.status(Status.BAD_REQUEST).entity(errorMessage).build();\r\n        }\r\n    }\r\n    try {\r\n        final FileInputStream fis = ContainerLogsUtils.openLogFileForRead(containerIdStr, logFile, nmContext);\r\n        final long fileLength = logFile.length();\r\n        StreamingOutput stream = new StreamingOutput() {\r\n\r\n            @Override\r\n            public void write(OutputStream os) throws IOException, WebApplicationException {\r\n                try {\r\n                    LogToolUtils.outputContainerLogThroughZeroCopy(containerId.toString(), nmContext.getNodeId().toString(), outputFileName, fileLength, bytes, lastModifiedTime, fis, os, ContainerLogAggregationType.LOCAL);\r\n                    StringBuilder sb = new StringBuilder();\r\n                    String endOfFile = \"End of LogType:\" + outputFileName;\r\n                    sb.append(endOfFile + \".\");\r\n                    if (isRunning) {\r\n                        sb.append(\"This log file belongs to a running container (\" + containerIdStr + \") and so may not be complete.\" + \"\\n\");\r\n                    } else {\r\n                        sb.append(\"\\n\");\r\n                    }\r\n                    sb.append(StringUtils.repeat(\"*\", endOfFile.length() + 50) + \"\\n\\n\");\r\n                    os.write(sb.toString().getBytes(Charset.forName(\"UTF-8\")));\r\n                    ApplicationId appId = containerId.getApplicationAttemptId().getApplicationId();\r\n                    Application app = nmContext.getApplications().get(appId);\r\n                    String appOwner = app == null ? null : app.getUser();\r\n                    try {\r\n                        ContainerLogsRequest logRequest = new ContainerLogsRequest();\r\n                        logRequest.setAppId(appId);\r\n                        logRequest.setAppOwner(appOwner);\r\n                        logRequest.setContainerId(containerId.toString());\r\n                        logRequest.setNodeId(nmContext.getNodeId().toString());\r\n                        logRequest.setBytes(bytes);\r\n                        Set<String> logTypes = new HashSet<>();\r\n                        logTypes.add(outputFileName);\r\n                        logRequest.setLogTypes(logTypes);\r\n                        factory.getFileControllerForRead(appId, appOwner).readAggregatedLogs(logRequest, os);\r\n                    } catch (Exception ex) {\r\n                        if (LOG.isDebugEnabled()) {\r\n                            LOG.debug(\"Can not access the aggregated log for \" + \"the container:\" + containerId);\r\n                            LOG.debug(ex.getMessage());\r\n                        }\r\n                    }\r\n                } finally {\r\n                    IOUtils.closeStream(fis);\r\n                }\r\n            }\r\n        };\r\n        ResponseBuilder resp = Response.ok(stream);\r\n        resp.header(\"Content-Type\", contentType + \"; \" + JettyUtils.UTF_8);\r\n        resp.header(\"X-Content-Type-Options\", \"nosniff\");\r\n        return resp.build();\r\n    } catch (IOException ex) {\r\n        return Response.serverError().entity(ex.getMessage()).build();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 6,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getNMResourceInfo",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Object getNMResourceInfo(@PathParam(\"resourcename\") String resourceName) throws YarnException\n{\r\n    init();\r\n    ResourcePluginManager rpm = this.nmContext.getResourcePluginManager();\r\n    if (rpm != null && rpm.getNameToPlugins() != null) {\r\n        ResourcePlugin plugin = rpm.getNameToPlugins().get(resourceName);\r\n        if (plugin != null) {\r\n            NMResourceInfo nmResourceInfo = plugin.getNMResourceInfo();\r\n            if (nmResourceInfo != null) {\r\n                return nmResourceInfo;\r\n            }\r\n        }\r\n    }\r\n    return new NMResourceInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getAuxiliaryServices",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "AuxiliaryServicesInfo getAuxiliaryServices(@javax.ws.rs.core.Context HttpServletRequest hsr)\n{\r\n    init();\r\n    if (!this.nmContext.getAuxServices().isManifestEnabled()) {\r\n        throw new BadRequestException(\"Auxiliary services manifest is not \" + \"enabled\");\r\n    }\r\n    AuxiliaryServicesInfo auxiliaryServices = new AuxiliaryServicesInfo();\r\n    Collection<AuxServiceRecord> loadedServices = nmContext.getAuxServices().getServiceRecords();\r\n    if (loadedServices != null) {\r\n        auxiliaryServices.addAll(loadedServices);\r\n    }\r\n    return auxiliaryServices;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "putAuxiliaryServices",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "Response putAuxiliaryServices(@javax.ws.rs.core.Context HttpServletRequest req, AuxServiceRecords services)\n{\r\n    init();\r\n    if (!this.nmContext.getAuxServices().isManifestEnabled()) {\r\n        throw new BadRequestException(\"Auxiliary services manifest is not \" + \"enabled\");\r\n    }\r\n    if (!hasAdminAccess(req)) {\r\n        return Response.status(Status.FORBIDDEN).build();\r\n    }\r\n    if (services == null) {\r\n        return Response.status(Status.BAD_REQUEST).build();\r\n    }\r\n    try {\r\n        nmContext.getAuxServices().reload(services);\r\n    } catch (Exception e) {\r\n        LOG.error(\"Fail to reload auxiliary services, reason: \", e);\r\n        return Response.status(Status.INTERNAL_SERVER_ERROR).entity(e).build();\r\n    }\r\n    return Response.ok().build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "syncYarnSysFS",
  "errType" : [ "IOException|ServiceStateException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "Response syncYarnSysFS(@javax.ws.rs.core.Context HttpServletRequest req, @PathParam(\"user\") String user, @PathParam(\"appId\") String appId, String spec)\n{\r\n    if (UserGroupInformation.isSecurityEnabled()) {\r\n        if (!req.getRemoteUser().equals(user)) {\r\n            return Response.status(Status.FORBIDDEN).build();\r\n        }\r\n    }\r\n    try {\r\n        nmContext.getContainerExecutor().updateYarnSysFS(nmContext, user, appId, spec);\r\n    } catch (IOException | ServiceStateException e) {\r\n        LOG.error(\"Fail to sync yarn sysfs for application ID: {}, reason: \", appId, e);\r\n        return Response.status(Status.INTERNAL_SERVER_ERROR).entity(e).build();\r\n    }\r\n    return Response.ok().build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "parseLongParam",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long parseLongParam(String bytes)\n{\r\n    if (bytes == null || bytes.isEmpty()) {\r\n        return Long.MAX_VALUE;\r\n    }\r\n    return Long.parseLong(bytes);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "createRedirectResponse",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "Response createRedirectResponse(HttpServletRequest httpRequest, String redirectWSUrlPrefix, String uri)\n{\r\n    StringBuilder redirectPath = new StringBuilder();\r\n    if (redirectWSUrlPrefix.endsWith(\"/\")) {\r\n        redirectWSUrlPrefix = redirectWSUrlPrefix.substring(0, redirectWSUrlPrefix.length() - 1);\r\n    }\r\n    redirectPath.append(redirectWSUrlPrefix + uri);\r\n    String requestParams = WebAppUtils.removeQueryParams(httpRequest, YarnWebServiceParams.NM_ID);\r\n    if (requestParams != null && !requestParams.isEmpty()) {\r\n        redirectPath.append(\"?\" + requestParams + \"&\" + YarnWebServiceParams.REDIRECTED_FROM_NODE + \"=true\");\r\n    } else {\r\n        redirectPath.append(\"?\" + YarnWebServiceParams.REDIRECTED_FROM_NODE + \"=true\");\r\n    }\r\n    ResponseBuilder res = Response.status(HttpServletResponse.SC_TEMPORARY_REDIRECT);\r\n    res.header(\"Location\", redirectPath.toString());\r\n    return res.build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "hasAccess",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Boolean hasAccess(String user, ApplicationId appId, HttpServletRequest hsr)\n{\r\n    UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr, true);\r\n    if (callerUGI != null && !(this.nmContext.getApplicationACLsManager().checkAccess(callerUGI, ApplicationAccessType.VIEW_APP, user, appId))) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "hasAdminAccess",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Boolean hasAdminAccess(HttpServletRequest hsr)\n{\r\n    UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr, true);\r\n    if (callerUGI == null) {\r\n        return false;\r\n    }\r\n    if (!this.nmContext.getApplicationACLsManager().isAdmin(callerUGI)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getCallerUserGroupInformation",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "UserGroupInformation getCallerUserGroupInformation(HttpServletRequest hsr, boolean usePrincipal)\n{\r\n    String remoteUser = hsr.getRemoteUser();\r\n    if (usePrincipal) {\r\n        Principal princ = hsr.getUserPrincipal();\r\n        remoteUser = princ == null ? null : princ.getName();\r\n    }\r\n    UserGroupInformation callerUGI = null;\r\n    if (remoteUser != null) {\r\n        callerUGI = UserGroupInformation.createRemoteUser(remoteUser);\r\n    }\r\n    return callerUGI;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "initSaxParserFactory",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "SAXParserFactory initSaxParserFactory() throws Exception\n{\r\n    SAXParserFactory spf = SAXParserFactory.newInstance();\r\n    spf.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\r\n    spf.setFeature(\"http://xml.org/sax/features/validation\", false);\r\n    return spf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "parseXml",
  "errType" : [ "JAXBException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GpuDeviceInformation parseXml(String xmlContent) throws YarnException\n{\r\n    InputSource inputSource = new InputSource(new StringReader(xmlContent));\r\n    SAXSource source = new SAXSource(xmlReader, inputSource);\r\n    try {\r\n        return (GpuDeviceInformation) unmarshaller.unmarshal(source);\r\n    } catch (JAXBException e) {\r\n        String msg = \"Failed to parse XML output of \" + GPU_SCRIPT_REFERENCE + \"!\";\r\n        LOG.error(msg, e);\r\n        throw new YarnException(msg, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getName()\n{\r\n    return name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getVersion()\n{\r\n    return version;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getStartTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getStartTime()\n{\r\n    return startTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getContext",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "JAXBContext getContext(Class<?> objectType)\n{\r\n    return (types.contains(objectType)) ? context : null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\scheduler",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void init(AMRMProxyApplicationContext applicationContext)\n{\r\n    super.init(applicationContext);\r\n    initLocal(applicationContext.getNMCotext().getNodeStatusUpdater().getRMIdentifier(), applicationContext.getApplicationAttemptId(), applicationContext.getNMCotext().getContainerAllocator(), applicationContext.getNMCotext().getNMTokenSecretManager(), applicationContext.getUser());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\scheduler",
  "methodName" : "initLocal",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void initLocal(long rmId, ApplicationAttemptId appAttemptId, OpportunisticContainerAllocator oppContainerAllocator, NMTokenSecretManagerInNM nmSecretManager, String appSubmitter)\n{\r\n    this.rmIdentifier = rmId;\r\n    this.applicationAttemptId = appAttemptId;\r\n    this.containerAllocator = oppContainerAllocator;\r\n    this.nmSecretManager = nmSecretManager;\r\n    this.appSubmitter = appSubmitter;\r\n    this.oppContainerContext.setContainerIdGenerator(new OpportunisticContainerAllocator.ContainerIdGenerator() {\r\n\r\n        @Override\r\n        public long generateContainerId() {\r\n            return this.containerIdCounter.decrementAndGet();\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\scheduler",
  "methodName" : "registerApplicationMaster",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RegisterApplicationMasterResponse registerApplicationMaster(RegisterApplicationMasterRequest request) throws YarnException, IOException\n{\r\n    return registerApplicationMasterForDistributedScheduling(request).getRegisterResponse();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\scheduler",
  "methodName" : "allocate",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "AllocateResponse allocate(AllocateRequest request) throws YarnException, IOException\n{\r\n    DistributedSchedulingAllocateRequest distRequest = RECORD_FACTORY.newRecordInstance(DistributedSchedulingAllocateRequest.class);\r\n    distRequest.setAllocateRequest(request);\r\n    return allocateForDistributedScheduling(distRequest).getAllocateResponse();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\scheduler",
  "methodName" : "finishApplicationMaster",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FinishApplicationMasterResponse finishApplicationMaster(FinishApplicationMasterRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().finishApplicationMaster(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\scheduler",
  "methodName" : "updateAllocateResponse",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void updateAllocateResponse(AllocateResponse response, List<NMToken> nmTokens, List<Container> allocatedContainers)\n{\r\n    List<NMToken> newTokens = new ArrayList<>();\r\n    if (allocatedContainers.size() > 0) {\r\n        response.getAllocatedContainers().addAll(allocatedContainers);\r\n        for (Container alloc : allocatedContainers) {\r\n            if (!nodeTokens.containsKey(alloc.getNodeId())) {\r\n                newTokens.add(nmSecretManager.generateNMToken(appSubmitter, alloc));\r\n            }\r\n        }\r\n        List<NMToken> retTokens = new ArrayList<>(nmTokens);\r\n        retTokens.addAll(newTokens);\r\n        response.setNMTokens(retTokens);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\scheduler",
  "methodName" : "updateParameters",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void updateParameters(RegisterDistributedSchedulingAMResponse registerResponse)\n{\r\n    Resource incrementResource = registerResponse.getIncrContainerResource();\r\n    if (incrementResource == null) {\r\n        incrementResource = registerResponse.getMinContainerResource();\r\n    }\r\n    oppContainerContext.updateAllocationParams(registerResponse.getMinContainerResource(), registerResponse.getMaxContainerResource(), incrementResource, registerResponse.getContainerTokenExpiryInterval());\r\n    oppContainerContext.getContainerIdGenerator().resetContainerIdCounter(registerResponse.getContainerIdStart());\r\n    setNodeList(registerResponse.getNodesForScheduling());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\scheduler",
  "methodName" : "setNodeList",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setNodeList(List<RemoteNode> nodeList)\n{\r\n    oppContainerContext.updateNodeList(nodeList);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\scheduler",
  "methodName" : "registerApplicationMasterForDistributedScheduling",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "RegisterDistributedSchedulingAMResponse registerApplicationMasterForDistributedScheduling(RegisterApplicationMasterRequest request) throws YarnException, IOException\n{\r\n    LOG.info(\"Forwarding registration request to the\" + \"Distributed Scheduler Service on YARN RM\");\r\n    RegisterDistributedSchedulingAMResponse dsResp = getNextInterceptor().registerApplicationMasterForDistributedScheduling(request);\r\n    updateParameters(dsResp);\r\n    return dsResp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\scheduler",
  "methodName" : "allocateForDistributedScheduling",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "DistributedSchedulingAllocateResponse allocateForDistributedScheduling(DistributedSchedulingAllocateRequest request) throws YarnException, IOException\n{\r\n    OpportunisticContainerAllocator.PartitionedResourceRequests partitionedAsks = containerAllocator.partitionAskList(request.getAllocateRequest().getAskList());\r\n    List<Container> allocatedContainers = containerAllocator.allocateContainers(request.getAllocateRequest().getResourceBlacklistRequest(), partitionedAsks.getOpportunistic(), applicationAttemptId, oppContainerContext, rmIdentifier, appSubmitter);\r\n    request.setAllocatedContainers(allocatedContainers);\r\n    request.getAllocateRequest().setAskList(partitionedAsks.getGuaranteed());\r\n    LOG.debug(\"Forwarding allocate request to the\" + \"Distributed Scheduler Service on YARN RM\");\r\n    DistributedSchedulingAllocateResponse dsResp = getNextInterceptor().allocateForDistributedScheduling(request);\r\n    setNodeList(dsResp.getNodesForScheduling());\r\n    List<NMToken> nmTokens = dsResp.getAllocateResponse().getNMTokens();\r\n    for (NMToken nmToken : nmTokens) {\r\n        nodeTokens.put(nmToken.getNodeId(), nmToken);\r\n    }\r\n    updateAllocateResponse(dsResp.getAllocateResponse(), nmTokens, allocatedContainers);\r\n    return dsResp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "doFilter",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException\n{\r\n    String redirectPath = containerLogPageRedirectPath(request);\r\n    if (redirectPath != null) {\r\n        String redirectMsg = \"Redirecting to log server\" + \" : \" + redirectPath;\r\n        PrintWriter out = response.getWriter();\r\n        out.println(redirectMsg);\r\n        response.setHeader(\"Location\", redirectPath);\r\n        response.setStatus(HttpServletResponse.SC_TEMPORARY_REDIRECT);\r\n        return;\r\n    }\r\n    super.doFilter(request, response, chain);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "containerLogPageRedirectPath",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 29,
  "sourceCodeText" : "String containerLogPageRedirectPath(HttpServletRequest request)\n{\r\n    String uri = HtmlQuoting.quoteHtmlChars(request.getRequestURI());\r\n    String redirectPath = null;\r\n    if (!uri.contains(\"/ws/v1/node\") && uri.contains(\"/containerlogs\")) {\r\n        String[] parts = uri.split(\"/\");\r\n        String containerIdStr = parts[3];\r\n        String appOwner = parts[4];\r\n        String logType = null;\r\n        if (parts.length > 5) {\r\n            logType = parts[5];\r\n        }\r\n        if (containerIdStr != null && !containerIdStr.isEmpty()) {\r\n            ContainerId containerId = null;\r\n            try {\r\n                containerId = ContainerId.fromString(containerIdStr);\r\n            } catch (IllegalArgumentException ex) {\r\n                return redirectPath;\r\n            }\r\n            ApplicationId appId = containerId.getApplicationAttemptId().getApplicationId();\r\n            Application app = nmContext.getApplications().get(appId);\r\n            boolean fetchAggregatedLog = false;\r\n            List<NameValuePair> params = WebAppUtils.getURLEncodedQueryParam(request);\r\n            if (params != null) {\r\n                for (NameValuePair param : params) {\r\n                    if (param.getName().equals(ContainerLogsPage.LOG_AGGREGATION_TYPE)) {\r\n                        if (param.getValue().equals(ContainerLogsPage.LOG_AGGREGATION_REMOTE_TYPE)) {\r\n                            fetchAggregatedLog = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Configuration nmConf = nmContext.getLocalDirsHandler().getConfig();\r\n            if ((app == null || fetchAggregatedLog) && nmConf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED, YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)) {\r\n                String logServerUrl = nmConf.get(YarnConfiguration.YARN_LOG_SERVER_URL);\r\n                if (logServerUrl != null && !logServerUrl.isEmpty()) {\r\n                    StringBuilder sb = new StringBuilder();\r\n                    sb.append(logServerUrl);\r\n                    sb.append(\"/\");\r\n                    sb.append(nmContext.getNodeId().toString());\r\n                    sb.append(\"/\");\r\n                    sb.append(containerIdStr);\r\n                    sb.append(\"/\");\r\n                    sb.append(containerIdStr);\r\n                    sb.append(\"/\");\r\n                    sb.append(appOwner);\r\n                    if (logType != null && !logType.isEmpty()) {\r\n                        sb.append(\"/\");\r\n                        sb.append(logType);\r\n                    }\r\n                    redirectPath = WebAppUtils.appendQueryParams(request, sb.toString());\r\n                } else {\r\n                    injector.getInstance(RequestContext.class).set(ContainerLogsPage.REDIRECT_URL, \"false\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return redirectPath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getDiagnosticsUpdate",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDiagnosticsUpdate()\n{\r\n    return this.diagnosticsUpdate;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "removeContainerOnExit",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DockerRunCommand removeContainerOnExit()\n{\r\n    super.addCommandArguments(\"rm\", \"true\");\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "detachOnRun",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DockerRunCommand detachOnRun()\n{\r\n    super.addCommandArguments(\"detach\", \"true\");\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "setContainerWorkDir",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DockerRunCommand setContainerWorkDir(String workdir)\n{\r\n    super.addCommandArguments(\"workdir\", workdir);\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "setNetworkType",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DockerRunCommand setNetworkType(String type)\n{\r\n    super.addCommandArguments(\"net\", type);\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "setPidNamespace",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DockerRunCommand setPidNamespace(String type)\n{\r\n    super.addCommandArguments(\"pid\", type);\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "addMountLocation",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DockerRunCommand addMountLocation(String sourcePath, String destinationPath, String mode)\n{\r\n    super.addCommandArguments(\"mounts\", sourcePath + \":\" + destinationPath + \":\" + mode);\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "addReadWriteMountLocation",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DockerRunCommand addReadWriteMountLocation(String sourcePath, String destinationPath)\n{\r\n    return addMountLocation(sourcePath, destinationPath, \"rw\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "addAllReadWriteMountLocations",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DockerRunCommand addAllReadWriteMountLocations(List<String> paths)\n{\r\n    for (String dir : paths) {\r\n        this.addReadWriteMountLocation(dir, dir);\r\n    }\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "addReadOnlyMountLocation",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "DockerRunCommand addReadOnlyMountLocation(String sourcePath, String destinationPath, boolean createSource)\n{\r\n    boolean sourceExists = new File(sourcePath).exists();\r\n    if (!sourceExists && !createSource) {\r\n        return this;\r\n    }\r\n    return addReadOnlyMountLocation(sourcePath, destinationPath);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "addReadOnlyMountLocation",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DockerRunCommand addReadOnlyMountLocation(String sourcePath, String destinationPath)\n{\r\n    return addMountLocation(sourcePath, destinationPath, \"ro\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "addAllReadOnlyMountLocations",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DockerRunCommand addAllReadOnlyMountLocations(List<String> paths)\n{\r\n    for (String dir : paths) {\r\n        this.addReadOnlyMountLocation(dir, dir);\r\n    }\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "addTmpfsMount",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DockerRunCommand addTmpfsMount(String mount)\n{\r\n    super.addCommandArguments(\"tmpfs\", mount);\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "setVolumeDriver",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DockerRunCommand setVolumeDriver(String volumeDriver)\n{\r\n    super.addCommandArguments(\"volume-driver\", volumeDriver);\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "setCGroupParent",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DockerRunCommand setCGroupParent(String parentPath)\n{\r\n    super.addCommandArguments(\"cgroup-parent\", parentPath);\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "setPrivileged",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DockerRunCommand setPrivileged()\n{\r\n    super.addCommandArguments(\"privileged\", \"true\");\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "setCapabilities",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "DockerRunCommand setCapabilities(Set<String> capabilties)\n{\r\n    super.addCommandArguments(\"cap-drop\", \"ALL\");\r\n    for (String capability : capabilties) {\r\n        super.addCommandArguments(\"cap-add\", capability);\r\n    }\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "setHostname",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DockerRunCommand setHostname(String hostname)\n{\r\n    super.addCommandArguments(\"hostname\", hostname);\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "addDevice",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DockerRunCommand addDevice(String sourceDevice, String destinationDevice)\n{\r\n    super.addCommandArguments(\"devices\", sourceDevice + \":\" + destinationDevice);\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "enableDetach",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DockerRunCommand enableDetach()\n{\r\n    super.addCommandArguments(\"detach\", \"true\");\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "disableDetach",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DockerRunCommand disableDetach()\n{\r\n    super.addCommandArguments(\"detach\", \"false\");\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "addPortsMapping",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DockerRunCommand addPortsMapping(String mapping)\n{\r\n    super.addCommandArguments(\"ports-mapping\", mapping);\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "addRuntime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DockerRunCommand addRuntime(String runtime)\n{\r\n    super.addCommandArguments(\"runtime\", runtime);\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "groupAdd",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DockerRunCommand groupAdd(String[] groups)\n{\r\n    super.addCommandArguments(\"group-add\", String.join(\",\", groups));\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "setOverrideCommandWithArgs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DockerRunCommand setOverrideCommandWithArgs(List<String> overrideCommandWithArgs)\n{\r\n    for (String override : overrideCommandWithArgs) {\r\n        super.addCommandArguments(\"launch-command\", override);\r\n    }\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "getDockerCommandWithArguments",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<String, List<String>> getDockerCommandWithArguments()\n{\r\n    return super.getDockerCommandWithArguments();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "setOverrideDisabled",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "DockerRunCommand setOverrideDisabled(boolean toggle)\n{\r\n    String value = Boolean.toString(toggle);\r\n    super.addCommandArguments(\"use-entry-point\", value);\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "setLogDir",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DockerRunCommand setLogDir(String logDir)\n{\r\n    super.addCommandArguments(\"log-dir\", logDir);\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "setServiceMode",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "DockerRunCommand setServiceMode(boolean serviceMode)\n{\r\n    String value = Boolean.toString(serviceMode);\r\n    super.addCommandArguments(\"service-mode\", value);\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "containsEnv",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean containsEnv()\n{\r\n    if (userEnv.size() > 0) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "getEnv",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, String> getEnv()\n{\r\n    return userEnv;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "addEnv",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addEnv(Map<String, String> environment)\n{\r\n    userEnv.putAll(environment);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "setYarnSysFS",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "DockerRunCommand setYarnSysFS(boolean toggle)\n{\r\n    String value = Boolean.toString(toggle);\r\n    super.addCommandArguments(\"use-yarn-sysfs\", value);\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "initialize",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initialize() throws YarnException\n{\r\n    if (!CGroupsResourceCalculator.isAvailable()) {\r\n        throw new YarnException(\"CGroupsResourceCalculator is not available\");\r\n    }\r\n    setCGroupFilePaths();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getCpuUsagePercent",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "float getCpuUsagePercent()\n{\r\n    LOG.debug(\"Process {} jiffies:{}\", pid, processTotalJiffies);\r\n    return cpuTimeTracker.getCpuTrackerUsagePercent();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getCumulativeCpuTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getCumulativeCpuTime()\n{\r\n    if (jiffyLengthMs < 0) {\r\n        return UNAVAILABLE;\r\n    }\r\n    return processTotalJiffies.longValue() * jiffyLengthMs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getRssMemorySize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getRssMemorySize(int olderThanAge)\n{\r\n    if (olderThanAge > 1) {\r\n        return UNAVAILABLE;\r\n    }\r\n    return processPhysicalMemory;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getVirtualMemorySize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getVirtualMemorySize(int olderThanAge)\n{\r\n    if (olderThanAge > 1) {\r\n        return UNAVAILABLE;\r\n    }\r\n    return processVirtualMemory;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "updateProcessTree",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void updateProcessTree()\n{\r\n    try {\r\n        this.processTotalJiffies = readTotalProcessJiffies();\r\n        cpuTimeTracker.updateElapsedJiffies(processTotalJiffies, clock.getTime());\r\n    } catch (YarnException e) {\r\n        LOG.warn(\"Failed to parse \" + pid, e);\r\n    }\r\n    processPhysicalMemory = getMemorySize(memStat);\r\n    if (memswStat.exists()) {\r\n        processVirtualMemory = getMemorySize(memswStat);\r\n    } else {\r\n        LOG.debug(\"Swap cgroups monitoring is not compiled into the kernel {}\", memswStat.getAbsolutePath());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getProcessTreeDump",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getProcessTreeDump()\n{\r\n    return pid;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "checkPidPgrpidForMatch",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean checkPidPgrpidForMatch()\n{\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "isAvailable",
  "errType" : [ "SecurityException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "boolean isAvailable()\n{\r\n    try {\r\n        if (!Shell.LINUX) {\r\n            LOG.info(\"CGroupsResourceCalculator currently is supported only on \" + \"Linux.\");\r\n            return false;\r\n        }\r\n        if (ResourceHandlerModule.getCGroupsHandler() == null || ResourceHandlerModule.getCpuResourceHandler() == null || ResourceHandlerModule.getMemoryResourceHandler() == null) {\r\n            LOG.info(\"CGroupsResourceCalculator requires enabling CGroups\" + \"cpu and memory\");\r\n            return false;\r\n        }\r\n    } catch (SecurityException se) {\r\n        LOG.warn(\"Failed to get Operating System name. \" + se);\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getMemorySize",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getMemorySize(File cgroupUsageFile)\n{\r\n    long[] mem = new long[1];\r\n    try {\r\n        processFile(cgroupUsageFile, (String line) -> {\r\n            mem[0] = Long.parseLong(line);\r\n            return Result.Exit;\r\n        });\r\n        return mem[0];\r\n    } catch (YarnException e) {\r\n        LOG.warn(\"Failed to parse cgroups \" + memswStat, e);\r\n    }\r\n    return UNAVAILABLE;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "readTotalProcessJiffies",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "BigInteger readTotalProcessJiffies() throws YarnException\n{\r\n    final BigInteger[] totalCPUTimeJiffies = new BigInteger[1];\r\n    totalCPUTimeJiffies[0] = BigInteger.ZERO;\r\n    processFile(cpuStat, (String line) -> {\r\n        if (line.startsWith(USER)) {\r\n            totalCPUTimeJiffies[0] = totalCPUTimeJiffies[0].add(new BigInteger(line.substring(USER.length())));\r\n        }\r\n        if (line.startsWith(SYSTEM)) {\r\n            totalCPUTimeJiffies[0] = totalCPUTimeJiffies[0].add(new BigInteger(line.substring(SYSTEM.length())));\r\n        }\r\n        return Result.Continue;\r\n    });\r\n    return totalCPUTimeJiffies[0];\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getCGroupRelativePath",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getCGroupRelativePath(CGroupsHandler.CGroupController controller) throws YarnException\n{\r\n    if (pid == null) {\r\n        return cGroupsHandler.getRelativePathForCGroup(\"\");\r\n    } else {\r\n        return getCGroupRelativePathForPid(controller);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getCGroupRelativePathForPid",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getCGroupRelativePathForPid(CGroupsHandler.CGroupController controller) throws YarnException\n{\r\n    File pidCgroupFile = new File(new File(procfsDir, pid), CGROUP);\r\n    String[] result = new String[1];\r\n    processFile(pidCgroupFile, (String line) -> {\r\n        Matcher m = CGROUP_FILE_FORMAT.matcher(line);\r\n        boolean mat = m.find();\r\n        if (mat) {\r\n            if (m.group(2).contains(controller.getName())) {\r\n                String cgroupPath = m.group(3);\r\n                if (cgroupPath != null) {\r\n                    String cgroup = new File(cgroupPath).toPath().getFileName().toString();\r\n                    result[0] = cGroupsHandler.getRelativePathForCGroup(cgroup);\r\n                } else {\r\n                    LOG.warn(\"Invalid cgroup path for \" + pidCgroupFile);\r\n                }\r\n                return Result.Exit;\r\n            }\r\n        } else {\r\n            LOG.warn(\"Unexpected: cgroup file is not in the expected format\" + \" for process with pid \" + pid);\r\n        }\r\n        return Result.Continue;\r\n    });\r\n    if (result[0] == null) {\r\n        throw new YarnException(controller.getName() + \" CGroup for pid \" + pid + \" not found \" + pidCgroupFile);\r\n    }\r\n    return result[0];\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "processFile",
  "errType" : [ "IOException", "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void processFile(File file, Function<String, Result> processLine) throws YarnException\n{\r\n    try (InputStreamReader fReader = new InputStreamReader(new FileInputStream(file), Charset.forName(\"UTF-8\"))) {\r\n        try (BufferedReader in = new BufferedReader(fReader)) {\r\n            try {\r\n                String str;\r\n                while ((str = in.readLine()) != null) {\r\n                    Result result = processLine.apply(str);\r\n                    if (result == Result.Exit) {\r\n                        return;\r\n                    }\r\n                }\r\n            } catch (IOException io) {\r\n                throw new YarnException(\"Error reading the stream \" + io, io);\r\n            }\r\n        }\r\n    } catch (IOException f) {\r\n        throw new YarnException(\"The process vanished in the interim \" + pid, f);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 3,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "setCGroupFilePaths",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setCGroupFilePaths() throws YarnException\n{\r\n    if (cGroupsHandler == null) {\r\n        throw new YarnException(\"CGroups handler is not initialized\");\r\n    }\r\n    File cpuDir = new File(cGroupsHandler.getControllerPath(CGroupsHandler.CGroupController.CPUACCT), getCGroupRelativePath(CGroupsHandler.CGroupController.CPUACCT));\r\n    File memDir = new File(cGroupsHandler.getControllerPath(CGroupsHandler.CGroupController.MEMORY), getCGroupRelativePath(CGroupsHandler.CGroupController.MEMORY));\r\n    cpuStat = new File(cpuDir, CPU_STAT);\r\n    memStat = new File(memDir, MEM_STAT);\r\n    memswStat = new File(memDir, MEMSW_STAT);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{ \").append(rsrc.toString()).append(\",\").append(getState() == ResourceState.LOCALIZED ? getLocalPath() + \",\" + getSize() : \"pending\").append(\",[\");\r\n    this.readLock.lock();\r\n    try {\r\n        for (ContainerId c : ref) {\r\n            sb.append(\"(\").append(c.toString()).append(\")\");\r\n        }\r\n        sb.append(\"],\").append(getTimestamp()).append(\",\").append(getState()).append(\"}\");\r\n        return sb.toString();\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "release",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void release(ContainerId container)\n{\r\n    if (ref.remove(container)) {\r\n        timestamp.set(currentTime());\r\n    } else {\r\n        LOG.info(\"Container \" + container + \" doesn't exist in the container list of the Resource \" + this + \" to which it sent RELEASE event\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "currentTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long currentTime()\n{\r\n    return System.nanoTime();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getState",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ResourceState getState()\n{\r\n    this.readLock.lock();\r\n    try {\r\n        return stateMachine.getCurrentState();\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getRequest",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LocalResourceRequest getRequest()\n{\r\n    return rsrc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getLocalPath",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Path getLocalPath()\n{\r\n    return localPath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "setLocalPath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setLocalPath(Path localPath)\n{\r\n    this.localPath = Path.getPathWithoutSchemeAndAuthority(localPath);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getTimestamp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getTimestamp()\n{\r\n    return timestamp.get();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getSize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getSize()\n{\r\n    return size;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getRefCount",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getRefCount()\n{\r\n    return ref.size();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "tryAcquire",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean tryAcquire()\n{\r\n    return sem.tryAcquire();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "unlock",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void unlock()\n{\r\n    sem.release();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "handle",
  "errType" : [ "InvalidStateTransitionException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void handle(ResourceEvent event)\n{\r\n    this.writeLock.lock();\r\n    try {\r\n        Path resourcePath = event.getLocalResourceRequest().getPath();\r\n        LOG.debug(\"Processing {} of type {}\", resourcePath, event.getType());\r\n        ResourceState oldState = this.stateMachine.getCurrentState();\r\n        ResourceState newState = null;\r\n        try {\r\n            newState = this.stateMachine.doTransition(event.getType(), event);\r\n        } catch (InvalidStateTransitionException e) {\r\n            LOG.error(\"Can't handle this event at current state\", e);\r\n        }\r\n        if (newState != null && oldState != newState) {\r\n            LOG.debug(\"Resource {}{} size : {} transitioned from {} to {}\", resourcePath, (localPath != null ? \"(->\" + localPath + \")\" : \"\"), getSize(), oldState, newState);\r\n        }\r\n    } finally {\r\n        this.writeLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getAssignedResources",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "List<Serializable> getAssignedResources(String resourceType)\n{\r\n    AssignedResources ar = assignedResourcesMap.get(resourceType);\r\n    if (null == ar) {\r\n        return Collections.emptyList();\r\n    }\r\n    return ar.getAssignedResources();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "addAssignedResources",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addAssignedResources(String resourceType, AssignedResources assigned)\n{\r\n    assignedResourcesMap.put(resourceType, assigned);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "init",
  "errType" : [ "IOException", "Exception" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void init(AMRMProxyApplicationContext appContext)\n{\r\n    super.init(appContext);\r\n    try {\r\n        user = UserGroupInformation.createProxyUser(appContext.getApplicationAttemptId().toString(), UserGroupInformation.getCurrentUser());\r\n        user.addToken(appContext.getAMRMToken());\r\n        final Configuration conf = this.getConf();\r\n        rmClient = createRMClient(appContext, conf);\r\n    } catch (IOException e) {\r\n        String message = \"Error while creating of RM app master service proxy for attemptId:\" + appContext.getApplicationAttemptId().toString();\r\n        if (user != null) {\r\n            message += \", user: \" + user;\r\n        }\r\n        LOG.info(message);\r\n        throw new YarnRuntimeException(message, e);\r\n    } catch (Exception e) {\r\n        throw new YarnRuntimeException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "createRMClient",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ApplicationMasterProtocol createRMClient(AMRMProxyApplicationContext appContext, final Configuration conf) throws IOException, InterruptedException\n{\r\n    if (appContext.getNMCotext().isDistributedSchedulingEnabled()) {\r\n        return user.doAs(new PrivilegedExceptionAction<DistributedSchedulingAMProtocol>() {\r\n\r\n            @Override\r\n            public DistributedSchedulingAMProtocol run() throws Exception {\r\n                setAMRMTokenService(conf);\r\n                return ServerRMProxy.createRMProxy(conf, DistributedSchedulingAMProtocol.class);\r\n            }\r\n        });\r\n    } else {\r\n        return user.doAs(new PrivilegedExceptionAction<ApplicationMasterProtocol>() {\r\n\r\n            @Override\r\n            public ApplicationMasterProtocol run() throws Exception {\r\n                setAMRMTokenService(conf);\r\n                return ClientRMProxy.createRMProxy(conf, ApplicationMasterProtocol.class);\r\n            }\r\n        });\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "registerApplicationMaster",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RegisterApplicationMasterResponse registerApplicationMaster(final RegisterApplicationMasterRequest request) throws YarnException, IOException\n{\r\n    LOG.info(\"Forwarding registration request to the real YARN RM\");\r\n    return rmClient.registerApplicationMaster(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "allocate",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "AllocateResponse allocate(final AllocateRequest request) throws YarnException, IOException\n{\r\n    LOG.debug(\"Forwarding allocate request to the real YARN RM\");\r\n    AllocateResponse allocateResponse = rmClient.allocate(request);\r\n    if (allocateResponse.getAMRMToken() != null) {\r\n        YarnServerSecurityUtils.updateAMRMToken(allocateResponse.getAMRMToken(), this.user, getConf());\r\n    }\r\n    return allocateResponse;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "registerApplicationMasterForDistributedScheduling",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "RegisterDistributedSchedulingAMResponse registerApplicationMasterForDistributedScheduling(RegisterApplicationMasterRequest request) throws YarnException, IOException\n{\r\n    if (getApplicationContext().getNMCotext().isDistributedSchedulingEnabled()) {\r\n        LOG.info(\"Forwarding registerApplicationMasterForDistributedScheduling\" + \"request to the real YARN RM\");\r\n        return ((DistributedSchedulingAMProtocol) rmClient).registerApplicationMasterForDistributedScheduling(request);\r\n    } else {\r\n        throw new YarnException(\"Distributed Scheduling is not enabled.\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "allocateForDistributedScheduling",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "DistributedSchedulingAllocateResponse allocateForDistributedScheduling(DistributedSchedulingAllocateRequest request) throws YarnException, IOException\n{\r\n    LOG.debug(\"Forwarding allocateForDistributedScheduling request\" + \"to the real YARN RM\");\r\n    if (getApplicationContext().getNMCotext().isDistributedSchedulingEnabled()) {\r\n        DistributedSchedulingAllocateResponse allocateResponse = ((DistributedSchedulingAMProtocol) rmClient).allocateForDistributedScheduling(request);\r\n        if (allocateResponse.getAllocateResponse().getAMRMToken() != null) {\r\n            YarnServerSecurityUtils.updateAMRMToken(allocateResponse.getAllocateResponse().getAMRMToken(), this.user, getConf());\r\n        }\r\n        return allocateResponse;\r\n    } else {\r\n        throw new YarnException(\"Distributed Scheduling is not enabled.\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "finishApplicationMaster",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "FinishApplicationMasterResponse finishApplicationMaster(final FinishApplicationMasterRequest request) throws YarnException, IOException\n{\r\n    LOG.info(\"Forwarding finish application request to \" + \"the real YARN Resource Manager\");\r\n    return rmClient.finishApplicationMaster(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "setNextInterceptor",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNextInterceptor(RequestInterceptor next)\n{\r\n    throw new YarnRuntimeException(\"setNextInterceptor is being called on DefaultRequestInterceptor,\" + \"which should be the last one in the chain \" + \"Check if the interceptor pipeline configuration is correct\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "setRMClient",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setRMClient(final ApplicationMasterProtocol rmClient)\n{\r\n    if (rmClient instanceof DistributedSchedulingAMProtocol) {\r\n        this.rmClient = (DistributedSchedulingAMProtocol) rmClient;\r\n    } else {\r\n        this.rmClient = new DistributedSchedulingAMProtocol() {\r\n\r\n            @Override\r\n            public RegisterApplicationMasterResponse registerApplicationMaster(RegisterApplicationMasterRequest request) throws YarnException, IOException {\r\n                return rmClient.registerApplicationMaster(request);\r\n            }\r\n\r\n            @Override\r\n            public FinishApplicationMasterResponse finishApplicationMaster(FinishApplicationMasterRequest request) throws YarnException, IOException {\r\n                return rmClient.finishApplicationMaster(request);\r\n            }\r\n\r\n            @Override\r\n            public AllocateResponse allocate(AllocateRequest request) throws YarnException, IOException {\r\n                return rmClient.allocate(request);\r\n            }\r\n\r\n            @Override\r\n            public RegisterDistributedSchedulingAMResponse registerApplicationMasterForDistributedScheduling(RegisterApplicationMasterRequest request) throws YarnException, IOException {\r\n                throw new IOException(\"Not Supported !!\");\r\n            }\r\n\r\n            @Override\r\n            public DistributedSchedulingAllocateResponse allocateForDistributedScheduling(DistributedSchedulingAllocateRequest request) throws YarnException, IOException {\r\n                throw new IOException(\"Not Supported !!\");\r\n            }\r\n        };\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "setAMRMTokenService",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setAMRMTokenService(final Configuration conf) throws IOException\n{\r\n    for (org.apache.hadoop.security.token.Token<? extends TokenIdentifier> token : UserGroupInformation.getCurrentUser().getTokens()) {\r\n        if (token.getKind().equals(AMRMTokenIdentifier.KIND_NAME)) {\r\n            token.setService(ClientRMProxy.getAMRMTokenService(conf));\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getTokenService",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "Text getTokenService(Configuration conf, String address, String defaultAddr, int defaultPort)\n{\r\n    if (HAUtil.isHAEnabled(conf)) {\r\n        ArrayList<String> services = new ArrayList<String>();\r\n        YarnConfiguration yarnConf = new YarnConfiguration(conf);\r\n        for (String rmId : HAUtil.getRMHAIds(conf)) {\r\n            yarnConf.set(YarnConfiguration.RM_HA_ID, rmId);\r\n            services.add(SecurityUtil.buildTokenService(yarnConf.getSocketAddr(address, defaultAddr, defaultPort)).toString());\r\n        }\r\n        return new Text(Joiner.on(',').join(services));\r\n    }\r\n    return SecurityUtil.buildTokenService(conf.getSocketAddr(address, defaultAddr, defaultPort));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "setNodeAttributesProvider",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNodeAttributesProvider(NodeAttributesProvider provider)\n{\r\n    this.nodeAttributesProvider = provider;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "setNodeLabelsProvider",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNodeLabelsProvider(NodeLabelsProvider provider)\n{\r\n    this.nodeLabelsProvider = provider;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    this.totalResource = NodeManagerHardwareUtils.getNodeResources(conf);\r\n    long memoryMb = totalResource.getMemorySize();\r\n    float vMemToPMem = conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO, YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\r\n    long virtualMemoryMb = (long) Math.ceil(memoryMb * vMemToPMem);\r\n    int virtualCores = totalResource.getVirtualCores();\r\n    updateConfiguredResourcesViaPlugins(totalResource);\r\n    LOG.info(\"Nodemanager resources is set to: \" + totalResource);\r\n    metrics.addResource(totalResource);\r\n    long physicalMemoryMb = memoryMb;\r\n    int physicalCores = virtualCores;\r\n    ResourceCalculatorPlugin rcp = ResourceCalculatorPlugin.getNodeResourceMonitorPlugin(conf);\r\n    if (rcp != null) {\r\n        physicalMemoryMb = rcp.getPhysicalMemorySize() / (1024 * 1024);\r\n        physicalCores = rcp.getNumProcessors();\r\n    }\r\n    this.physicalResource = Resource.newInstance(physicalMemoryMb, physicalCores);\r\n    this.tokenKeepAliveEnabled = isTokenKeepAliveEnabled(conf);\r\n    this.tokenRemovalDelayMs = conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS, YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\r\n    this.minimumResourceManagerVersion = conf.get(YarnConfiguration.NM_RESOURCEMANAGER_MINIMUM_VERSION, YarnConfiguration.DEFAULT_NM_RESOURCEMANAGER_MINIMUM_VERSION);\r\n    nodeLabelsHandler = createNMNodeLabelsHandler(nodeLabelsProvider);\r\n    nodeAttributesHandler = createNMNodeAttributesHandler(nodeAttributesProvider);\r\n    durationToTrackStoppedContainers = conf.getLong(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS, 600000);\r\n    if (durationToTrackStoppedContainers < 0) {\r\n        String message = \"Invalid configuration for \" + YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" default \" + \"value is 10Min(600000).\";\r\n        LOG.error(message);\r\n        throw new YarnException(message);\r\n    }\r\n    LOG.debug(\"{} :{}\", YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS, durationToTrackStoppedContainers);\r\n    super.serviceInit(conf);\r\n    LOG.info(\"Initialized nodemanager with :\" + \" physical-memory=\" + memoryMb + \" virtual-memory=\" + virtualMemoryMb + \" virtual-cores=\" + virtualCores);\r\n    this.logAggregationEnabled = conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED, YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED);\r\n    this.timelineServiceV2Enabled = YarnConfiguration.timelineServiceV2Enabled(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "serviceStart",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    this.nodeId = this.context.getNodeId();\r\n    LOG.info(\"Node ID assigned is : \" + this.nodeId);\r\n    this.httpPort = this.context.getHttpPort();\r\n    this.nodeManagerVersionId = YarnVersionInfo.getVersion();\r\n    try {\r\n        this.resourceTracker = getRMClient();\r\n        registerWithRM();\r\n        super.serviceStart();\r\n        startStatusUpdater();\r\n    } catch (Exception e) {\r\n        String errorMessage = \"Unexpected error starting NodeStatusUpdater\";\r\n        LOG.error(errorMessage, e);\r\n        throw new YarnRuntimeException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    synchronized (shutdownMonitor) {\r\n        if (this.registeredWithRM && !this.isStopped && !isNMUnderSupervisionWithRecoveryEnabled() && !context.getDecommissioned() && !failedToConnect) {\r\n            unRegisterNM();\r\n        }\r\n        this.isStopped = true;\r\n        stopRMProxy();\r\n        super.serviceStop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "isNMUnderSupervisionWithRecoveryEnabled",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean isNMUnderSupervisionWithRecoveryEnabled()\n{\r\n    Configuration config = getConfig();\r\n    return config.getBoolean(YarnConfiguration.NM_RECOVERY_ENABLED, YarnConfiguration.DEFAULT_NM_RECOVERY_ENABLED) && config.getBoolean(YarnConfiguration.NM_RECOVERY_SUPERVISED, YarnConfiguration.DEFAULT_NM_RECOVERY_SUPERVISED);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "unRegisterNM",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void unRegisterNM()\n{\r\n    RecordFactory recordFactory = RecordFactoryPBImpl.get();\r\n    UnRegisterNodeManagerRequest request = recordFactory.newRecordInstance(UnRegisterNodeManagerRequest.class);\r\n    request.setNodeId(this.nodeId);\r\n    try {\r\n        resourceTracker.unRegisterNodeManager(request);\r\n        LOG.info(\"Successfully Unregistered the Node \" + this.nodeId + \" with ResourceManager.\");\r\n    } catch (Exception e) {\r\n        LOG.warn(\"Unregistration of the Node \" + this.nodeId + \" failed.\", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "rebootNodeStatusUpdaterAndRegisterWithRM",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void rebootNodeStatusUpdaterAndRegisterWithRM()\n{\r\n    synchronized (shutdownMonitor) {\r\n        if (this.isStopped) {\r\n            LOG.info(\"Currently being shutdown. Aborting reboot\");\r\n            return;\r\n        }\r\n        this.isStopped = true;\r\n        sendOutofBandHeartBeat();\r\n        try {\r\n            statusUpdater.join();\r\n            registerWithRM();\r\n            statusUpdater = new Thread(statusUpdaterRunnable, \"Node Status Updater\");\r\n            this.isStopped = false;\r\n            statusUpdater.start();\r\n            LOG.info(\"NodeStatusUpdater thread is reRegistered and restarted\");\r\n        } catch (Exception e) {\r\n            String errorMessage = \"Unexpected error rebooting NodeStatusUpdater\";\r\n            LOG.error(errorMessage, e);\r\n            throw new YarnRuntimeException(e);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "stopRMProxy",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void stopRMProxy()\n{\r\n    if (this.resourceTracker != null) {\r\n        RPC.stopProxy(this.resourceTracker);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "isTokenKeepAliveEnabled",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isTokenKeepAliveEnabled(Configuration conf)\n{\r\n    return conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED, YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED) && UserGroupInformation.isSecurityEnabled();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getRMClient",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ResourceTracker getRMClient() throws IOException\n{\r\n    Configuration conf = getConfig();\r\n    return ServerRMProxy.createRMProxy(conf, ResourceTracker.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "updateConfiguredResourcesViaPlugins",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void updateConfiguredResourcesViaPlugins(Resource configuredResource) throws YarnException\n{\r\n    ResourcePluginManager pluginManager = context.getResourcePluginManager();\r\n    if (pluginManager != null && pluginManager.getNameToPlugins() != null) {\r\n        for (ResourcePlugin resourcePlugin : pluginManager.getNameToPlugins().values()) {\r\n            if (resourcePlugin.getNodeResourceHandlerInstance() != null) {\r\n                resourcePlugin.getNodeResourceHandlerInstance().updateConfiguredResource(configuredResource);\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "registerWithRM",
  "errType" : null,
  "containingMethodsNum" : 31,
  "sourceCodeText" : "void registerWithRM() throws YarnException, IOException\n{\r\n    RegisterNodeManagerResponse regNMResponse;\r\n    Set<NodeLabel> nodeLabels = nodeLabelsHandler.getNodeLabelsForRegistration();\r\n    Set<NodeAttribute> nodeAttributes = nodeAttributesHandler.getNodeAttributesForRegistration();\r\n    synchronized (this.context) {\r\n        List<NMContainerStatus> containerReports = getNMContainerStatuses();\r\n        NodeStatus nodeStatus = getNodeStatus(0);\r\n        RegisterNodeManagerRequest request = RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource, nodeManagerVersionId, containerReports, getRunningApplications(), nodeLabels, physicalResource, nodeAttributes, nodeStatus);\r\n        if (containerReports != null && !containerReports.isEmpty()) {\r\n            LOG.info(\"Registering with RM using containers :\" + containerReports);\r\n        }\r\n        if (logAggregationEnabled) {\r\n            List<LogAggregationReport> logAggregationReports = context.getNMLogAggregationStatusTracker().pullCachedLogAggregationReports();\r\n            if (logAggregationReports != null && !logAggregationReports.isEmpty()) {\r\n                LOG.debug(\"The cache log aggregation status size:{}\", logAggregationReports.size());\r\n                request.setLogAggregationReportsForApps(logAggregationReports);\r\n            }\r\n        }\r\n        regNMResponse = resourceTracker.registerNodeManager(request);\r\n        this.rmIdentifier = regNMResponse.getRMIdentifier();\r\n    }\r\n    if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\r\n        String message = \"Message from ResourceManager: \" + regNMResponse.getDiagnosticsMessage();\r\n        throw new YarnRuntimeException(\"Received SHUTDOWN signal from Resourcemanager, Registration of NodeManager failed, \" + message);\r\n    }\r\n    if (!minimumResourceManagerVersion.equals(\"NONE\")) {\r\n        if (minimumResourceManagerVersion.equals(\"EqualToNM\")) {\r\n            minimumResourceManagerVersion = nodeManagerVersionId;\r\n        }\r\n        String rmVersion = regNMResponse.getRMVersion();\r\n        if (rmVersion == null) {\r\n            String message = \"The Resource Manager's did not return a version. \" + \"Valid version cannot be checked.\";\r\n            throw new YarnRuntimeException(\"Shutting down the Node Manager. \" + message);\r\n        }\r\n        if (VersionUtil.compareVersions(rmVersion, minimumResourceManagerVersion) < 0) {\r\n            String message = \"The Resource Manager's version (\" + rmVersion + \") is less than the minimum \" + \"allowed version \" + minimumResourceManagerVersion;\r\n            throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \" + \"version error, \" + message);\r\n        }\r\n    }\r\n    this.registeredWithRM = true;\r\n    MasterKey masterKey = regNMResponse.getContainerTokenMasterKey();\r\n    if (masterKey != null) {\r\n        this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\r\n    }\r\n    masterKey = regNMResponse.getNMTokenMasterKey();\r\n    if (masterKey != null) {\r\n        this.context.getNMTokenSecretManager().setMasterKey(masterKey);\r\n    }\r\n    StringBuilder successfullRegistrationMsg = new StringBuilder();\r\n    successfullRegistrationMsg.append(\"Registered with ResourceManager as \").append(this.nodeId);\r\n    Resource newResource = regNMResponse.getResource();\r\n    if (newResource != null) {\r\n        updateNMResource(newResource);\r\n        successfullRegistrationMsg.append(\" with updated total resource of \").append(this.totalResource);\r\n    } else {\r\n        successfullRegistrationMsg.append(\" with total resource of \").append(this.totalResource);\r\n    }\r\n    successfullRegistrationMsg.append(nodeLabelsHandler.verifyRMRegistrationResponseForNodeLabels(regNMResponse));\r\n    successfullRegistrationMsg.append(nodeAttributesHandler.verifyRMRegistrationResponseForNodeAttributes(regNMResponse));\r\n    LOG.info(successfullRegistrationMsg.toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createKeepAliveApplicationList",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "List<ApplicationId> createKeepAliveApplicationList()\n{\r\n    if (!tokenKeepAliveEnabled) {\r\n        return Collections.emptyList();\r\n    }\r\n    List<ApplicationId> appList = new ArrayList<ApplicationId>();\r\n    for (Iterator<Entry<ApplicationId, Long>> i = this.appTokenKeepAliveMap.entrySet().iterator(); i.hasNext(); ) {\r\n        Entry<ApplicationId, Long> e = i.next();\r\n        ApplicationId appId = e.getKey();\r\n        Long nextKeepAlive = e.getValue();\r\n        if (!this.context.getApplications().containsKey(appId)) {\r\n            i.remove();\r\n        } else if (System.currentTimeMillis() > nextKeepAlive) {\r\n            appList.add(appId);\r\n            trackAppForKeepAlive(appId);\r\n        }\r\n    }\r\n    return appList;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getNodeStatus",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "NodeStatus getNodeStatus(int responseId) throws IOException\n{\r\n    NodeHealthStatus nodeHealthStatus = this.context.getNodeHealthStatus();\r\n    nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\r\n    nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\r\n    nodeHealthStatus.setLastHealthReportTime(healthChecker.getLastHealthReportTime());\r\n    LOG.debug(\"Node's health-status : {}, {}\", nodeHealthStatus.getIsNodeHealthy(), nodeHealthStatus.getHealthReport());\r\n    List<ContainerStatus> containersStatuses = getContainerStatuses();\r\n    ResourceUtilization containersUtilization = getContainersUtilization();\r\n    ResourceUtilization nodeUtilization = getNodeUtilization();\r\n    List<org.apache.hadoop.yarn.api.records.Container> increasedContainers = getIncreasedContainers();\r\n    NodeStatus nodeStatus = NodeStatus.newInstance(nodeId, responseId, containersStatuses, createKeepAliveApplicationList(), nodeHealthStatus, containersUtilization, nodeUtilization, increasedContainers);\r\n    nodeStatus.setOpportunisticContainersStatus(getOpportunisticContainersStatus());\r\n    return nodeStatus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getOpportunisticContainersStatus",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "OpportunisticContainersStatus getOpportunisticContainersStatus()\n{\r\n    OpportunisticContainersStatus status = this.context.getContainerManager().getOpportunisticContainersStatus();\r\n    return status;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getContainersUtilization",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ResourceUtilization getContainersUtilization()\n{\r\n    ContainersMonitor containersMonitor = this.context.getContainerManager().getContainersMonitor();\r\n    return containersMonitor.getContainersUtilization();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getNodeUtilization",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ResourceUtilization getNodeUtilization()\n{\r\n    NodeResourceMonitorImpl nodeResourceMonitor = (NodeResourceMonitorImpl) this.context.getNodeResourceMonitor();\r\n    return nodeResourceMonitor.getUtilization();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getIncreasedContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<org.apache.hadoop.yarn.api.records.Container> getIncreasedContainers()\n{\r\n    List<org.apache.hadoop.yarn.api.records.Container> increasedContainers = new ArrayList<>(this.context.getIncreasedContainers().values());\r\n    for (org.apache.hadoop.yarn.api.records.Container container : increasedContainers) {\r\n        this.context.getIncreasedContainers().remove(container.getId());\r\n    }\r\n    return increasedContainers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "updateNMResource",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void updateNMResource(Resource resource)\n{\r\n    metrics.addResource(Resources.subtract(resource, totalResource));\r\n    this.totalResource = resource;\r\n    ContainersMonitor containersMonitor = this.context.getContainerManager().getContainersMonitor();\r\n    containersMonitor.setAllocatedResourcesForContainers(totalResource);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getContainerStatuses",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "List<ContainerStatus> getContainerStatuses() throws IOException\n{\r\n    List<ContainerStatus> containerStatuses = new ArrayList<ContainerStatus>();\r\n    for (Container container : this.context.getContainers().values()) {\r\n        ContainerId containerId = container.getContainerId();\r\n        ApplicationId applicationId = containerId.getApplicationAttemptId().getApplicationId();\r\n        org.apache.hadoop.yarn.api.records.ContainerStatus containerStatus = container.cloneAndGetContainerStatus();\r\n        if (containerStatus.getState() == ContainerState.COMPLETE) {\r\n            if (isApplicationStopped(applicationId)) {\r\n                LOG.debug(\"{} is completing, remove {} from NM context.\", applicationId, containerId);\r\n                context.getContainers().remove(containerId);\r\n                pendingCompletedContainers.put(containerId, containerStatus);\r\n            } else {\r\n                if (!isContainerRecentlyStopped(containerId)) {\r\n                    pendingCompletedContainers.put(containerId, containerStatus);\r\n                }\r\n            }\r\n            addCompletedContainer(containerId);\r\n        } else {\r\n            containerStatuses.add(containerStatus);\r\n        }\r\n    }\r\n    containerStatuses.addAll(pendingCompletedContainers.values());\r\n    if (!containerStatuses.isEmpty()) {\r\n        LOG.debug(\"Sending out {} container statuses: {}\", containerStatuses.size(), containerStatuses);\r\n    }\r\n    return containerStatuses;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getRunningApplications",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "List<ApplicationId> getRunningApplications()\n{\r\n    List<ApplicationId> runningApplications = new ArrayList<ApplicationId>();\r\n    for (Entry<ApplicationId, Application> appEntry : this.context.getApplications().entrySet()) {\r\n        if (ApplicationState.FINISHED != appEntry.getValue().getApplicationState()) {\r\n            runningApplications.add(appEntry.getKey());\r\n        }\r\n    }\r\n    return runningApplications;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getNMContainerStatuses",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "List<NMContainerStatus> getNMContainerStatuses() throws IOException\n{\r\n    List<NMContainerStatus> containerStatuses = new ArrayList<NMContainerStatus>();\r\n    for (Container container : this.context.getContainers().values()) {\r\n        ContainerId containerId = container.getContainerId();\r\n        ApplicationId applicationId = containerId.getApplicationAttemptId().getApplicationId();\r\n        if (!this.context.getApplications().containsKey(applicationId)) {\r\n            context.getContainers().remove(containerId);\r\n            continue;\r\n        }\r\n        NMContainerStatus status = container.getNMContainerStatus();\r\n        containerStatuses.add(status);\r\n        if (status.getContainerState() == ContainerState.COMPLETE) {\r\n            addCompletedContainer(containerId);\r\n        }\r\n    }\r\n    if (!containerStatuses.isEmpty()) {\r\n        LOG.info(\"Sending out \" + containerStatuses.size() + \" NM container statuses: \" + containerStatuses);\r\n    }\r\n    return containerStatuses;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "isApplicationStopped",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isApplicationStopped(ApplicationId applicationId)\n{\r\n    if (!this.context.getApplications().containsKey(applicationId)) {\r\n        return true;\r\n    }\r\n    ApplicationState applicationState = this.context.getApplications().get(applicationId).getApplicationState();\r\n    if (applicationState == ApplicationState.FINISHING_CONTAINERS_WAIT || applicationState == ApplicationState.APPLICATION_RESOURCES_CLEANINGUP || applicationState == ApplicationState.FINISHED) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "addCompletedContainer",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void addCompletedContainer(ContainerId containerId)\n{\r\n    synchronized (recentlyStoppedContainers) {\r\n        removeVeryOldStoppedContainersFromCache();\r\n        if (!recentlyStoppedContainers.containsKey(containerId)) {\r\n            recentlyStoppedContainers.put(containerId, System.currentTimeMillis() + durationToTrackStoppedContainers);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "removeOrTrackCompletedContainersFromContext",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void removeOrTrackCompletedContainersFromContext(List<ContainerId> containerIds)\n{\r\n    Set<ContainerId> removedContainers = new HashSet<ContainerId>();\r\n    pendingContainersToRemove.addAll(containerIds);\r\n    Iterator<ContainerId> iter = pendingContainersToRemove.iterator();\r\n    while (iter.hasNext()) {\r\n        ContainerId containerId = iter.next();\r\n        Container nmContainer = context.getContainers().get(containerId);\r\n        if (nmContainer == null) {\r\n            iter.remove();\r\n        } else if (nmContainer.getContainerState().equals(org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.DONE)) {\r\n            context.getContainers().remove(containerId);\r\n            removedContainers.add(containerId);\r\n            iter.remove();\r\n        }\r\n        pendingCompletedContainers.remove(containerId);\r\n    }\r\n    if (!removedContainers.isEmpty()) {\r\n        LOG.info(\"Removed completed containers from NM context: \" + removedContainers);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "trackAppsForKeepAlive",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void trackAppsForKeepAlive(List<ApplicationId> appIds)\n{\r\n    if (tokenKeepAliveEnabled && appIds != null && appIds.size() > 0) {\r\n        for (ApplicationId appId : appIds) {\r\n            trackAppForKeepAlive(appId);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "trackAppForKeepAlive",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void trackAppForKeepAlive(ApplicationId appId)\n{\r\n    long nextTime = System.currentTimeMillis() + (long) (0.7 * tokenRemovalDelayMs + (0.2 * tokenRemovalDelayMs * keepAliveDelayRandom.nextInt(100)) / 100);\r\n    appTokenKeepAliveMap.put(appId, nextTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "sendOutofBandHeartBeat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void sendOutofBandHeartBeat()\n{\r\n    synchronized (this.heartbeatMonitor) {\r\n        this.heartbeatMonitor.notify();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getStatusUpdaterThreadState",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Thread.State getStatusUpdaterThreadState()\n{\r\n    return statusUpdater.getState();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "isContainerRecentlyStopped",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isContainerRecentlyStopped(ContainerId containerId)\n{\r\n    synchronized (recentlyStoppedContainers) {\r\n        return recentlyStoppedContainers.containsKey(containerId);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "clearFinishedContainersFromCache",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void clearFinishedContainersFromCache()\n{\r\n    synchronized (recentlyStoppedContainers) {\r\n        recentlyStoppedContainers.clear();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "removeVeryOldStoppedContainersFromCache",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void removeVeryOldStoppedContainersFromCache()\n{\r\n    synchronized (recentlyStoppedContainers) {\r\n        long currentTime = System.currentTimeMillis();\r\n        Iterator<Entry<ContainerId, Long>> i = recentlyStoppedContainers.entrySet().iterator();\r\n        while (i.hasNext()) {\r\n            Entry<ContainerId, Long> mapEntry = i.next();\r\n            ContainerId cid = mapEntry.getKey();\r\n            if (mapEntry.getValue() >= currentTime) {\r\n                break;\r\n            }\r\n            if (!context.getContainers().containsKey(cid)) {\r\n                ApplicationId appId = cid.getApplicationAttemptId().getApplicationId();\r\n                if (isApplicationStopped(appId)) {\r\n                    i.remove();\r\n                    try {\r\n                        context.getNMStateStore().removeContainer(cid);\r\n                    } catch (IOException e) {\r\n                        LOG.error(\"Unable to remove container \" + cid + \" in store\", e);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getRMIdentifier",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getRMIdentifier()\n{\r\n    return this.rmIdentifier;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "parseCredentials",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "Map<ApplicationId, Credentials> parseCredentials(Map<ApplicationId, ByteBuffer> systemCredentials) throws IOException\n{\r\n    Map<ApplicationId, Credentials> map = new HashMap<ApplicationId, Credentials>();\r\n    for (Map.Entry<ApplicationId, ByteBuffer> entry : systemCredentials.entrySet()) {\r\n        Credentials credentials = new Credentials();\r\n        DataInputByteBuffer buf = new DataInputByteBuffer();\r\n        ByteBuffer buffer = entry.getValue();\r\n        buffer.rewind();\r\n        buf.reset(buffer);\r\n        credentials.readTokenStorageStream(buf);\r\n        map.put(entry.getKey(), credentials);\r\n    }\r\n    if (LOG.isDebugEnabled()) {\r\n        for (Map.Entry<ApplicationId, Credentials> entry : map.entrySet()) {\r\n            LOG.debug(\"Retrieved credentials form RM for {}: {}\", entry.getKey(), entry.getValue().getAllTokens());\r\n        }\r\n    }\r\n    return map;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "startStatusUpdater",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void startStatusUpdater()\n{\r\n    statusUpdaterRunnable = new StatusUpdaterRunnable();\r\n    statusUpdater = new Thread(statusUpdaterRunnable, \"Node Status Updater\");\r\n    statusUpdater.start();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "handleShutdownOrResyncCommand",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "boolean handleShutdownOrResyncCommand(NodeHeartbeatResponse response)\n{\r\n    if (response.getNodeAction() == NodeAction.SHUTDOWN) {\r\n        LOG.warn(\"Received SHUTDOWN signal from Resourcemanager as part of\" + \" heartbeat, hence shutting down.\");\r\n        LOG.warn(\"Message from ResourceManager: \" + response.getDiagnosticsMessage());\r\n        context.setDecommissioned(true);\r\n        dispatcher.getEventHandler().handle(new NodeManagerEvent(NodeManagerEventType.SHUTDOWN));\r\n        return true;\r\n    }\r\n    if (response.getNodeAction() == NodeAction.RESYNC) {\r\n        LOG.warn(\"Node is out of sync with ResourceManager,\" + \" hence resyncing.\");\r\n        LOG.warn(\"Message from ResourceManager: \" + response.getDiagnosticsMessage());\r\n        NodeStatusUpdaterImpl.this.rmIdentifier = ResourceManagerConstants.RM_INVALID_IDENTIFIER;\r\n        dispatcher.getEventHandler().handle(new NodeManagerEvent(NodeManagerEventType.RESYNC));\r\n        pendingCompletedContainers.clear();\r\n        return true;\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "reportException",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void reportException(Exception ex)\n{\r\n    healthChecker.reportException(ex);\r\n    sendOutofBandHeartBeat();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getLogAggregationReportsForApps",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "List<LogAggregationReport> getLogAggregationReportsForApps(ConcurrentLinkedQueue<LogAggregationReport> lastestLogAggregationStatus)\n{\r\n    LogAggregationReport status;\r\n    while ((status = lastestLogAggregationStatus.poll()) != null) {\r\n        this.logAggregationReportForAppsTempList.add(status);\r\n    }\r\n    List<LogAggregationReport> reports = new ArrayList<LogAggregationReport>();\r\n    reports.addAll(logAggregationReportForAppsTempList);\r\n    return reports;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createNMNodeLabelsHandler",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NMNodeLabelsHandler createNMNodeLabelsHandler(NodeLabelsProvider nodeLabelsProvider)\n{\r\n    if (nodeLabelsProvider == null) {\r\n        return new NMCentralizedNodeLabelsHandler();\r\n    } else {\r\n        return new NMDistributedNodeLabelsHandler(nodeLabelsProvider, this.getConfig());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createNMNodeAttributesHandler",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NMNodeAttributesHandler createNMNodeAttributesHandler(NodeAttributesProvider provider)\n{\r\n    if (provider == null) {\r\n        return new NMCentralizedNodeAttributesHandler();\r\n    } else {\r\n        return new NMDistributedNodeAttributesHandler(provider, this.getConfig());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\event",
  "methodName" : "getLocalPath",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Path getLocalPath()\n{\r\n    return localPath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\event",
  "methodName" : "getSize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getSize()\n{\r\n    return size;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "getCurrentUtilization",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourceUtilization getCurrentUtilization()\n{\r\n    return this.containersAllocation;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "addContainerResources",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addContainerResources(Container container)\n{\r\n    ContainersMonitor.increaseResourceUtilization(getContainersMonitor(), this.containersAllocation, container.getResource());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "subtractContainerResource",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void subtractContainerResource(Container container)\n{\r\n    ContainersMonitor.decreaseResourceUtilization(getContainersMonitor(), this.containersAllocation, container.getResource());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "hasResourcesAvailable",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean hasResourcesAvailable(Container container)\n{\r\n    return hasResourcesAvailable(container.getResource());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "convertMBToBytes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long convertMBToBytes(final long memMB)\n{\r\n    return memMB << LEFT_SHIFT_MB_IN_BYTES;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "convertBytesToMB",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long convertBytesToMB(final long bytes)\n{\r\n    return bytes >> RIGHT_SHIFT_BYTES_IN_MB;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "hasResourcesAvailable",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean hasResourcesAvailable(Resource resource)\n{\r\n    long pMemBytes = convertMBToBytes(resource.getMemorySize());\r\n    final long vmemBytes = (long) (getContainersMonitor().getVmemRatio() * pMemBytes);\r\n    return hasResourcesAvailable(pMemBytes, vmemBytes, resource.getVirtualCores());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "hasResourcesAvailable",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "boolean hasResourcesAvailable(long pMemBytes, long vMemBytes, int cpuVcores)\n{\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(\"pMemCheck [current={} + asked={} > allowed={}]\", this.containersAllocation.getPhysicalMemory(), convertBytesToMB(pMemBytes), convertBytesToMB(getContainersMonitor().getPmemAllocatedForContainers()));\r\n    }\r\n    if (this.containersAllocation.getPhysicalMemory() + convertBytesToMB(pMemBytes) > convertBytesToMB(getContainersMonitor().getPmemAllocatedForContainers())) {\r\n        return false;\r\n    }\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(\"before vMemCheck\" + \"[isEnabled={}, current={} + asked={} > allowed={}]\", getContainersMonitor().isVmemCheckEnabled(), this.containersAllocation.getVirtualMemory(), convertBytesToMB(vMemBytes), convertBytesToMB(getContainersMonitor().getVmemAllocatedForContainers()));\r\n    }\r\n    if (getContainersMonitor().isVmemCheckEnabled() && this.containersAllocation.getVirtualMemory() + convertBytesToMB(vMemBytes) > convertBytesToMB(getContainersMonitor().getVmemAllocatedForContainers())) {\r\n        return false;\r\n    }\r\n    LOG.debug(\"before cpuCheck [asked={} > allowed={}]\", this.containersAllocation.getCPU(), getContainersMonitor().getVCoresAllocatedForContainers());\r\n    if (this.containersAllocation.getCPU() + cpuVcores > getContainersMonitor().getVCoresAllocatedForContainers()) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "getContainersMonitor",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainersMonitor getContainersMonitor()\n{\r\n    return this.scheduler.getContainersMonitor();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "shouldRetry",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "boolean shouldRetry(RetryContext retryContext, int errorCode)\n{\r\n    ContainerRetryContext containerRC = retryContext.containerRetryContext;\r\n    Preconditions.checkNotNull(containerRC, \"container retry context null\");\r\n    ContainerRetryPolicy retryPolicy = containerRC.getRetryPolicy();\r\n    if (retryPolicy == ContainerRetryPolicy.RETRY_ON_ALL_ERRORS || (retryPolicy == ContainerRetryPolicy.RETRY_ON_SPECIFIC_ERROR_CODES && containerRC.getErrorCodes() != null && containerRC.getErrorCodes().contains(errorCode))) {\r\n        return containerRC.getMaxRetries() == ContainerRetryContext.RETRY_FOREVER || calculateRemainingRetries(retryContext) > 0;\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "calculateRemainingRetries",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "int calculateRemainingRetries(RetryContext retryContext)\n{\r\n    ContainerRetryContext containerRC = retryContext.containerRetryContext;\r\n    if (containerRC.getFailuresValidityInterval() > 0) {\r\n        int validFailuresCount = 0;\r\n        long currentTime = clock.getTime();\r\n        for (int i = retryContext.restartTimes.size() - 1; i >= 0; i--) {\r\n            long restartTime = retryContext.restartTimes.get(i);\r\n            if (currentTime - restartTime <= containerRC.getFailuresValidityInterval()) {\r\n                validFailuresCount++;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        return containerRC.getMaxRetries() - validFailuresCount;\r\n    } else {\r\n        return retryContext.getRemainingRetries();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "updateRetryContext",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void updateRetryContext(RetryContext retryContext)\n{\r\n    if (retryContext.containerRetryContext.getFailuresValidityInterval() > 0) {\r\n        ContainerRetryContext containerRC = retryContext.containerRetryContext;\r\n        Iterator<Long> iterator = retryContext.getRestartTimes().iterator();\r\n        long currentTime = clock.getTime();\r\n        while (iterator.hasNext()) {\r\n            long restartTime = iterator.next();\r\n            if (currentTime - restartTime > containerRC.getFailuresValidityInterval()) {\r\n                iterator.remove();\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        retryContext.setRemainingRetries(containerRC.getMaxRetries() - retryContext.restartTimes.size());\r\n        retryContext.getRestartTimes().add(currentTime);\r\n    } else {\r\n        retryContext.remainingRetries--;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "setClock",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setClock(Clock clock)\n{\r\n    this.clock = Preconditions.checkNotNull(clock);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "checkDiskScheduler",
  "errType" : [ "IOException", "IOException" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void checkDiskScheduler()\n{\r\n    String data;\r\n    try {\r\n        byte[] contents = Files.readAllBytes(Paths.get(PARTITIONS_FILE));\r\n        data = new String(contents, \"UTF-8\").trim();\r\n    } catch (IOException e) {\r\n        String msg = \"Couldn't read \" + PARTITIONS_FILE + \"; can't determine disk scheduler type\";\r\n        LOG.warn(msg, e);\r\n        return;\r\n    }\r\n    String[] lines = data.split(System.lineSeparator());\r\n    if (lines.length > 0) {\r\n        for (String line : lines) {\r\n            String[] columns = line.split(\"\\\\s+\");\r\n            if (columns.length > 4) {\r\n                String partition = columns[4];\r\n                if (partition.startsWith(\"sd\") || partition.startsWith(\"hd\") || partition.startsWith(\"vd\") || partition.startsWith(\"xvd\")) {\r\n                    String schedulerPath = \"/sys/block/\" + partition + \"/queue/scheduler\";\r\n                    File schedulerFile = new File(schedulerPath);\r\n                    if (schedulerFile.exists()) {\r\n                        try {\r\n                            byte[] contents = Files.readAllBytes(Paths.get(schedulerPath));\r\n                            String schedulerString = new String(contents, \"UTF-8\").trim();\r\n                            if (!schedulerString.contains(\"[cfq]\")) {\r\n                                LOG.warn(\"Device \" + partition + \" does not use the CFQ\" + \" scheduler; disk isolation using \" + \"CGroups will not work on this partition.\");\r\n                            }\r\n                        } catch (IOException ie) {\r\n                            LOG.warn(\"Unable to determine disk scheduler type for partition \" + partition, ie);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "bootstrap",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<PrivilegedOperation> bootstrap(Configuration configuration) throws ResourceHandlerException\n{\r\n    this.cGroupsHandler.initializeCGroupController(CGroupsHandler.CGroupController.BLKIO);\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "preStart",
  "errType" : [ "ResourceHandlerException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "List<PrivilegedOperation> preStart(Container container) throws ResourceHandlerException\n{\r\n    String cgroupId = container.getContainerId().toString();\r\n    cGroupsHandler.createCGroup(CGroupsHandler.CGroupController.BLKIO, cgroupId);\r\n    try {\r\n        cGroupsHandler.updateCGroupParam(CGroupsHandler.CGroupController.BLKIO, cgroupId, CGroupsHandler.CGROUP_PARAM_BLKIO_WEIGHT, DEFAULT_WEIGHT);\r\n    } catch (ResourceHandlerException re) {\r\n        cGroupsHandler.deleteCGroup(CGroupsHandler.CGroupController.BLKIO, cgroupId);\r\n        LOG.warn(\"Could not update cgroup for container\", re);\r\n        throw re;\r\n    }\r\n    List<PrivilegedOperation> ret = new ArrayList<>();\r\n    ret.add(new PrivilegedOperation(PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP, PrivilegedOperation.CGROUP_ARG_PREFIX + cGroupsHandler.getPathForCGroupTasks(CGroupsHandler.CGroupController.BLKIO, cgroupId)));\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "reacquireContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<PrivilegedOperation> reacquireContainer(ContainerId containerId) throws ResourceHandlerException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "updateContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<PrivilegedOperation> updateContainer(Container container) throws ResourceHandlerException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "postComplete",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<PrivilegedOperation> postComplete(ContainerId containerId) throws ResourceHandlerException\n{\r\n    cGroupsHandler.deleteCGroup(CGroupsHandler.CGroupController.BLKIO, containerId.toString());\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "teardown",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<PrivilegedOperation> teardown() throws ResourceHandlerException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return CGroupsBlkioResourceHandlerImpl.class.getName();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    this.monitoringInterval = conf.getLong(YarnConfiguration.NM_RESOURCE_MON_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_RESOURCE_MON_INTERVAL_MS);\r\n    this.resourceCalculatorPlugin = ResourceCalculatorPlugin.getNodeResourceMonitorPlugin(conf);\r\n    if (nmContext.getResourcePluginManager() != null) {\r\n        this.gpuResourcePlugin = (GpuResourcePlugin) nmContext.getResourcePluginManager().getNameToPlugins().get(ResourceInformation.GPU_URI);\r\n        if (gpuResourcePlugin != null) {\r\n            this.gpuNodeResourceUpdateHandler = (GpuNodeResourceUpdateHandler) gpuResourcePlugin.getNodeResourceHandlerInstance();\r\n        }\r\n    }\r\n    LOG.info(\" Using ResourceCalculatorPlugin : \" + this.resourceCalculatorPlugin);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "isEnabled",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isEnabled()\n{\r\n    if (this.monitoringInterval <= 0) {\r\n        LOG.info(\"Node Resource monitoring interval is <=0. \" + this.getClass().getName() + \" is disabled.\");\r\n        return false;\r\n    }\r\n    if (resourceCalculatorPlugin == null) {\r\n        LOG.info(\"ResourceCalculatorPlugin is unavailable on this system. \" + this.getClass().getName() + \" is disabled.\");\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    if (this.isEnabled()) {\r\n        this.monitoringThread.start();\r\n    }\r\n    super.serviceStart();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "serviceStop",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    if (this.isEnabled()) {\r\n        this.monitoringThread.interrupt();\r\n        try {\r\n            this.monitoringThread.join(10 * 1000);\r\n        } catch (InterruptedException e) {\r\n            LOG.warn(\"Could not wait for the thread to join\");\r\n        }\r\n    }\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getUtilization",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourceUtilization getUtilization()\n{\r\n    return this.nodeUtilization;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\event",
  "methodName" : "getRequestedResources",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<LocalResourceVisibility, Collection<LocalResourceRequest>> getRequestedResources()\n{\r\n    return rsrc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "calculateRollingMonitorInterval",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "long calculateRollingMonitorInterval(Configuration conf)\n{\r\n    long interval = conf.getLong(YarnConfiguration.NM_LOG_AGGREGATION_ROLL_MONITORING_INTERVAL_SECONDS, YarnConfiguration.DEFAULT_NM_LOG_AGGREGATION_ROLL_MONITORING_INTERVAL_SECONDS);\r\n    if (interval <= 0) {\r\n        LOG.info(\"rollingMonitorInterval is set as \" + interval + \". The log rolling monitoring interval is disabled. \" + \"The logs will be aggregated after this application is finished.\");\r\n    } else {\r\n        boolean logAggregationDebugMode = conf.getBoolean(NM_LOG_AGGREGATION_DEBUG_ENABLED, false);\r\n        long minRollingMonitorInterval = conf.getLong(YarnConfiguration.MIN_LOG_ROLLING_INTERVAL_SECONDS, YarnConfiguration.MIN_LOG_ROLLING_INTERVAL_SECONDS_DEFAULT);\r\n        boolean warnHardMinLimitLowerThanDefault = minRollingMonitorInterval < YarnConfiguration.MIN_LOG_ROLLING_INTERVAL_SECONDS_DEFAULT && !logAggregationDebugMode;\r\n        if (warnHardMinLimitLowerThanDefault) {\r\n            LOG.warn(\"{} has been set to {}, which is less than the default \" + \"minimum value {}. This may impact NodeManager's performance.\", YarnConfiguration.MIN_LOG_ROLLING_INTERVAL_SECONDS, minRollingMonitorInterval, YarnConfiguration.MIN_LOG_ROLLING_INTERVAL_SECONDS_DEFAULT);\r\n        }\r\n        boolean lowerThanHardLimit = interval < minRollingMonitorInterval;\r\n        if (lowerThanHardLimit) {\r\n            if (logAggregationDebugMode) {\r\n                LOG.info(\"Log aggregation debug mode enabled. \" + \"Skipped checking minimum limit.\");\r\n            } else {\r\n                LOG.warn(\"rollingMonitorInterval should be more than \" + \"or equal to {} seconds. Using {} seconds instead.\", minRollingMonitorInterval, minRollingMonitorInterval);\r\n                interval = minRollingMonitorInterval;\r\n            }\r\n        }\r\n    }\r\n    return interval;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    int threadPoolSize = getAggregatorThreadPoolSize(conf);\r\n    this.threadPool = HadoopExecutors.newFixedThreadPool(threadPoolSize, new ThreadFactoryBuilder().setNameFormat(\"LogAggregationService #%d\").build());\r\n    rollingMonitorInterval = calculateRollingMonitorInterval(conf);\r\n    LOG.info(\"rollingMonitorInterval is set as {}. The logs will be \" + \"aggregated every {} seconds\", rollingMonitorInterval, rollingMonitorInterval);\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    this.nodeId = this.context.getNodeId();\r\n    super.serviceStart();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    LOG.info(this.getName() + \" waiting for pending aggregation during exit\");\r\n    stopAggregators();\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "stopAggregators",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void stopAggregators()\n{\r\n    threadPool.shutdown();\r\n    boolean supervised = getConfig().getBoolean(YarnConfiguration.NM_RECOVERY_SUPERVISED, YarnConfiguration.DEFAULT_NM_RECOVERY_SUPERVISED);\r\n    boolean shouldAbort = context.getNMStateStore().canRecover() && !context.getDecommissioned() && supervised;\r\n    for (AppLogAggregator aggregator : appLogAggregators.values()) {\r\n        if (shouldAbort) {\r\n            aggregator.abortLogAggregation();\r\n        } else {\r\n            aggregator.finishLogAggregation();\r\n        }\r\n    }\r\n    while (!threadPool.isTerminated()) {\r\n        for (ApplicationId appId : appLogAggregators.keySet()) {\r\n            LOG.info(\"Waiting for aggregation to complete for \" + appId);\r\n        }\r\n        try {\r\n            if (!threadPool.awaitTermination(30, TimeUnit.SECONDS)) {\r\n                threadPool.shutdownNow();\r\n            }\r\n        } catch (InterruptedException e) {\r\n            LOG.warn(\"Aggregation stop interrupted!\");\r\n            break;\r\n        }\r\n    }\r\n    for (ApplicationId appId : appLogAggregators.keySet()) {\r\n        LOG.warn(\"Some logs may not have been aggregated for \" + appId);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "initApp",
  "errType" : [ "YarnRuntimeException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void initApp(final ApplicationId appId, String user, Credentials credentials, Map<ApplicationAccessType, String> appAcls, LogAggregationContext logAggregationContext, long recoveredLogInitedTime)\n{\r\n    ApplicationEvent eventResponse;\r\n    try {\r\n        initAppAggregator(appId, user, credentials, appAcls, logAggregationContext, recoveredLogInitedTime);\r\n        eventResponse = new ApplicationEvent(appId, ApplicationEventType.APPLICATION_LOG_HANDLING_INITED);\r\n    } catch (YarnRuntimeException e) {\r\n        LOG.warn(\"Application failed to init aggregation\", e);\r\n        eventResponse = new ApplicationEvent(appId, ApplicationEventType.APPLICATION_LOG_HANDLING_FAILED);\r\n    }\r\n    this.dispatcher.getEventHandler().handle(eventResponse);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "getLocalFileContext",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FileContext getLocalFileContext(Configuration conf)\n{\r\n    try {\r\n        return FileContext.getLocalFSFileContext(conf);\r\n    } catch (IOException e) {\r\n        throw new YarnRuntimeException(\"Failed to access local fs\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "initAppAggregator",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void initAppAggregator(final ApplicationId appId, String user, Credentials credentials, Map<ApplicationAccessType, String> appAcls, LogAggregationContext logAggregationContext, long recoveredLogInitedTime)\n{\r\n    final UserGroupInformation userUgi = UserGroupInformation.createRemoteUser(user);\r\n    if (credentials != null) {\r\n        userUgi.addCredentials(credentials);\r\n    }\r\n    LogAggregationFileController logAggregationFileController = getLogAggregationFileController(getConfig());\r\n    logAggregationFileController.verifyAndCreateRemoteLogDir();\r\n    final AppLogAggregator appLogAggregator = new AppLogAggregatorImpl(this.dispatcher, this.deletionService, getConfig(), appId, userUgi, this.nodeId, dirsHandler, logAggregationFileController.getRemoteNodeLogFileForApp(appId, user, nodeId), appAcls, logAggregationContext, this.context, getLocalFileContext(getConfig()), this.rollingMonitorInterval, recoveredLogInitedTime, logAggregationFileController);\r\n    if (this.appLogAggregators.putIfAbsent(appId, appLogAggregator) != null) {\r\n        throw new YarnRuntimeException(\"Duplicate initApp for \" + appId);\r\n    }\r\n    YarnRuntimeException appDirException = null;\r\n    try {\r\n        logAggregationFileController.createAppDir(user, appId, userUgi);\r\n    } catch (Exception e) {\r\n        appLogAggregator.disableLogAggregation();\r\n        if (e.getCause() instanceof SecretManager.InvalidToken) {\r\n            invalidTokenApps.add(appId);\r\n        }\r\n        if (!(e instanceof YarnRuntimeException)) {\r\n            appDirException = new YarnRuntimeException(e);\r\n        } else {\r\n            appDirException = (YarnRuntimeException) e;\r\n        }\r\n    }\r\n    Runnable aggregatorWrapper = new Runnable() {\r\n\r\n        public void run() {\r\n            try {\r\n                appLogAggregator.run();\r\n            } finally {\r\n                appLogAggregators.remove(appId);\r\n                closeFileSystems(userUgi);\r\n            }\r\n        }\r\n    };\r\n    this.threadPool.execute(aggregatorWrapper);\r\n    if (appDirException != null) {\r\n        throw appDirException;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "closeFileSystems",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void closeFileSystems(final UserGroupInformation userUgi)\n{\r\n    try {\r\n        FileSystem.closeAllForUGI(userUgi);\r\n    } catch (IOException e) {\r\n        LOG.warn(\"Failed to close filesystems: \", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "getNumAggregators",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getNumAggregators()\n{\r\n    return this.appLogAggregators.size();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "stopContainer",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void stopContainer(ContainerId containerId, ContainerType containerType, int exitCode)\n{\r\n    AppLogAggregator aggregator = this.appLogAggregators.get(containerId.getApplicationAttemptId().getApplicationId());\r\n    if (aggregator == null) {\r\n        LOG.warn(\"Log aggregation is not initialized for \" + containerId + \", did it fail to start?\");\r\n        return;\r\n    }\r\n    aggregator.startContainerLogAggregation(new ContainerLogContext(containerId, containerType, exitCode));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "stopApp",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void stopApp(ApplicationId appId)\n{\r\n    try {\r\n        AppLogAggregator aggregator = this.appLogAggregators.get(appId);\r\n        if (aggregator == null) {\r\n            LOG.warn(\"Log aggregation is not initialized for \" + appId + \", did it fail to start?\");\r\n            this.dispatcher.getEventHandler().handle(new ApplicationEvent(appId, ApplicationEventType.APPLICATION_LOG_HANDLING_FAILED));\r\n            return;\r\n        }\r\n        aggregator.finishLogAggregation();\r\n    } finally {\r\n        invalidTokenApps.remove(appId);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "handle",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void handle(LogHandlerEvent event)\n{\r\n    switch(event.getType()) {\r\n        case APPLICATION_STARTED:\r\n            LogHandlerAppStartedEvent appStartEvent = (LogHandlerAppStartedEvent) event;\r\n            initApp(appStartEvent.getApplicationId(), appStartEvent.getUser(), appStartEvent.getCredentials(), appStartEvent.getApplicationAcls(), appStartEvent.getLogAggregationContext(), appStartEvent.getRecoveredAppLogInitedTime());\r\n            break;\r\n        case CONTAINER_FINISHED:\r\n            LogHandlerContainerFinishedEvent containerFinishEvent = (LogHandlerContainerFinishedEvent) event;\r\n            stopContainer(containerFinishEvent.getContainerId(), containerFinishEvent.getContainerType(), containerFinishEvent.getExitCode());\r\n            break;\r\n        case APPLICATION_FINISHED:\r\n            LogHandlerAppFinishedEvent appFinishedEvent = (LogHandlerAppFinishedEvent) event;\r\n            stopApp(appFinishedEvent.getApplicationId());\r\n            break;\r\n        case LOG_AGG_TOKEN_UPDATE:\r\n            checkAndEnableAppAggregators();\r\n            break;\r\n        default:\r\n            ;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "checkAndEnableAppAggregators",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void checkAndEnableAppAggregators()\n{\r\n    for (ApplicationId appId : invalidTokenApps) {\r\n        try {\r\n            AppLogAggregator aggregator = appLogAggregators.get(appId);\r\n            if (aggregator != null) {\r\n                Credentials credentials = context.getSystemCredentialsForApps().get(appId);\r\n                if (credentials != null) {\r\n                    LogAggregationFileController logAggregationFileController = getLogAggregationFileController(getConfig());\r\n                    UserGroupInformation userUgi = aggregator.updateCredentials(credentials);\r\n                    logAggregationFileController.createAppDir(userUgi.getShortUserName(), appId, userUgi);\r\n                    aggregator.enableLogAggregation();\r\n                }\r\n                invalidTokenApps.remove(appId);\r\n                LOG.info(\"LogAggregation enabled for application {}\", appId);\r\n            }\r\n        } catch (Exception e) {\r\n            LOG.warn(\"Enable aggregators failed {}\", appId);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "getInvalidTokenApps",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Set<ApplicationId> getInvalidTokenApps()\n{\r\n    return invalidTokenApps;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "getAppLogAggregators",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ConcurrentMap<ApplicationId, AppLogAggregator> getAppLogAggregators()\n{\r\n    return this.appLogAggregators;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "getNodeId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeId getNodeId()\n{\r\n    return this.nodeId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "getRollingMonitorInterval",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getRollingMonitorInterval()\n{\r\n    return rollingMonitorInterval;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "getAggregatorThreadPoolSize",
  "errType" : [ "NumberFormatException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int getAggregatorThreadPoolSize(Configuration conf)\n{\r\n    int threadPoolSize;\r\n    try {\r\n        threadPoolSize = conf.getInt(YarnConfiguration.NM_LOG_AGGREGATION_THREAD_POOL_SIZE, YarnConfiguration.DEFAULT_NM_LOG_AGGREGATION_THREAD_POOL_SIZE);\r\n    } catch (NumberFormatException ex) {\r\n        LOG.warn(\"Invalid thread pool size. Setting it to the default value \" + \"in YarnConfiguration\");\r\n        threadPoolSize = YarnConfiguration.DEFAULT_NM_LOG_AGGREGATION_THREAD_POOL_SIZE;\r\n    }\r\n    if (threadPoolSize <= 0) {\r\n        LOG.warn(\"Invalid thread pool size. Setting it to the default value \" + \"in YarnConfiguration\");\r\n        threadPoolSize = YarnConfiguration.DEFAULT_NM_LOG_AGGREGATION_THREAD_POOL_SIZE;\r\n    }\r\n    return threadPoolSize;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "getLogAggregationFileController",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LogAggregationFileController getLogAggregationFileController(Configuration conf)\n{\r\n    LogAggregationFileControllerFactory factory = new LogAggregationFileControllerFactory(conf);\r\n    LogAggregationFileController logAggregationFileController = factory.getFileControllerForWrite();\r\n    return logAggregationFileController;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getDebugDelay",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getDebugDelay()\n{\r\n    return debugDelay;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getContainerExecutor",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerExecutor getContainerExecutor()\n{\r\n    return containerExecutor;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getStateStore",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NMStateStoreService getStateStore()\n{\r\n    return stateStore;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "delete",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void delete(DeletionTask deletionTask)\n{\r\n    if (debugDelay != -1) {\r\n        LOG.debug(\"Scheduling DeletionTask (delay {}) : {}\", debugDelay, deletionTask);\r\n        recordDeletionTaskInStateStore(deletionTask);\r\n        sched.schedule(deletionTask, debugDelay, TimeUnit.SECONDS);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "recover",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void recover(NMStateStoreService.RecoveredDeletionServiceState state) throws IOException\n{\r\n    Map<Integer, DeletionTaskRecoveryInfo> idToInfoMap = new HashMap<Integer, DeletionTaskRecoveryInfo>();\r\n    Set<Integer> successorTasks = new HashSet<Integer>();\r\n    try (RecoveryIterator<DeletionServiceDeleteTaskProto> it = state.getIterator()) {\r\n        while (it.hasNext()) {\r\n            DeletionServiceDeleteTaskProto proto = it.next();\r\n            DeletionTaskRecoveryInfo info = NMProtoUtils.convertProtoToDeletionTaskRecoveryInfo(proto, this);\r\n            idToInfoMap.put(info.getTask().getTaskId(), info);\r\n            nextTaskId.set(Math.max(nextTaskId.get(), info.getTask().getTaskId()));\r\n            successorTasks.addAll(info.getSuccessorTaskIds());\r\n        }\r\n    }\r\n    final long now = System.currentTimeMillis();\r\n    for (DeletionTaskRecoveryInfo info : idToInfoMap.values()) {\r\n        for (Integer successorId : info.getSuccessorTaskIds()) {\r\n            DeletionTaskRecoveryInfo successor = idToInfoMap.get(successorId);\r\n            if (successor != null) {\r\n                info.getTask().addDeletionTaskDependency(successor.getTask());\r\n            } else {\r\n                LOG.error(\"Unable to locate dependency task for deletion task \" + info.getTask().getTaskId());\r\n            }\r\n        }\r\n        if (!successorTasks.contains(info.getTask().getTaskId())) {\r\n            long msecTilDeletion = info.getDeletionTimestamp() - now;\r\n            sched.schedule(info.getTask(), msecTilDeletion, TimeUnit.MILLISECONDS);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "generateTaskId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int generateTaskId()\n{\r\n    int taskId = nextTaskId.incrementAndGet();\r\n    while (taskId == DeletionTask.INVALID_TASK_ID) {\r\n        taskId = nextTaskId.incrementAndGet();\r\n    }\r\n    return taskId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "recordDeletionTaskInStateStore",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void recordDeletionTaskInStateStore(DeletionTask task)\n{\r\n    if (!stateStore.canRecover()) {\r\n        return;\r\n    }\r\n    if (task.getTaskId() != DeletionTask.INVALID_TASK_ID) {\r\n        return;\r\n    }\r\n    task.setTaskId(generateTaskId());\r\n    DeletionTask[] successors = task.getSuccessorTasks();\r\n    for (DeletionTask successor : successors) {\r\n        recordDeletionTaskInStateStore(successor);\r\n    }\r\n    try {\r\n        stateStore.storeDeletionTask(task.getTaskId(), task.convertDeletionTaskToProto());\r\n    } catch (IOException e) {\r\n        LOG.error(\"Unable to store deletion task \" + task.getTaskId(), e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    ThreadFactory tf = new ThreadFactoryBuilder().setNameFormat(\"DeletionService #%d\").build();\r\n    if (conf != null) {\r\n        sched = new HadoopScheduledThreadPoolExecutor(conf.getInt(YarnConfiguration.NM_DELETE_THREAD_COUNT, YarnConfiguration.DEFAULT_NM_DELETE_THREAD_COUNT), tf);\r\n        debugDelay = conf.getInt(YarnConfiguration.DEBUG_NM_DELETE_DELAY_SEC, 0);\r\n    } else {\r\n        sched = new HadoopScheduledThreadPoolExecutor(YarnConfiguration.DEFAULT_NM_DELETE_THREAD_COUNT, tf);\r\n    }\r\n    sched.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\r\n    sched.setKeepAliveTime(60L, SECONDS);\r\n    if (stateStore.canRecover()) {\r\n        recover(stateStore.loadDeletionServiceState());\r\n    }\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "serviceStop",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    if (sched != null) {\r\n        sched.shutdown();\r\n        boolean terminated = false;\r\n        try {\r\n            terminated = sched.awaitTermination(10, SECONDS);\r\n        } catch (InterruptedException e) {\r\n        }\r\n        if (!terminated) {\r\n            sched.shutdownNow();\r\n        }\r\n    }\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "isTerminated",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isTerminated()\n{\r\n    return getServiceState() == STATE.STOPPED && sched.isTerminated();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "parseParameters",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void parseParameters(String parameters)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void init()\n{\r\n    LibUdev.init();\r\n    libUdev = LibUdev.instance;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "getSysPath",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "String getSysPath(int deviceNo, char devType)\n{\r\n    Pointer udev = null;\r\n    Pointer device = null;\r\n    try {\r\n        udev = libUdev.udev_new();\r\n        device = libUdev.udev_device_new_from_devnum(udev, (byte) devType, deviceNo);\r\n        if (device == null) {\r\n            throw new IllegalArgumentException(\"Udev: device not found\");\r\n        }\r\n        Pointer sysPathPtr = libUdev.udev_device_get_syspath(device);\r\n        if (sysPathPtr == null) {\r\n            throw new IllegalArgumentException(\"Udev: syspath not found for device\");\r\n        }\r\n        return sysPathPtr.getString(0);\r\n    } finally {\r\n        if (device != null) {\r\n            libUdev.udev_device_unref(device);\r\n        }\r\n        if (udev != null) {\r\n            libUdev.udev_unref(udev);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\sharedcache",
  "methodName" : "serviceInit",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    enabled = conf.getBoolean(YarnConfiguration.SHARED_CACHE_ENABLED, YarnConfiguration.DEFAULT_SHARED_CACHE_ENABLED);\r\n    if (enabled) {\r\n        int threadCount = conf.getInt(YarnConfiguration.SHARED_CACHE_NM_UPLOADER_THREAD_COUNT, YarnConfiguration.DEFAULT_SHARED_CACHE_NM_UPLOADER_THREAD_COUNT);\r\n        uploaderPool = HadoopExecutors.newFixedThreadPool(threadCount, new ThreadFactoryBuilder().setNameFormat(\"Shared cache uploader #%d\").build());\r\n        scmClient = createSCMClient(conf);\r\n        try {\r\n            fs = FileSystem.get(conf);\r\n            localFs = FileSystem.getLocal(conf);\r\n        } catch (IOException e) {\r\n            LOG.error(\"Unexpected exception in getting the filesystem\", e);\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\sharedcache",
  "methodName" : "createSCMClient",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "SCMUploaderProtocol createSCMClient(Configuration conf)\n{\r\n    YarnRPC rpc = YarnRPC.create(conf);\r\n    InetSocketAddress scmAddress = conf.getSocketAddr(YarnConfiguration.SCM_UPLOADER_SERVER_ADDRESS, YarnConfiguration.DEFAULT_SCM_UPLOADER_SERVER_ADDRESS, YarnConfiguration.DEFAULT_SCM_UPLOADER_SERVER_PORT);\r\n    return (SCMUploaderProtocol) rpc.getProxy(SCMUploaderProtocol.class, scmAddress, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\sharedcache",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    if (enabled) {\r\n        uploaderPool.shutdown();\r\n        RPC.stopProxy(scmClient);\r\n    }\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\sharedcache",
  "methodName" : "handle",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void handle(SharedCacheUploadEvent event)\n{\r\n    if (enabled) {\r\n        Map<LocalResourceRequest, Path> resources = event.getResources();\r\n        for (Map.Entry<LocalResourceRequest, Path> e : resources.entrySet()) {\r\n            SharedCacheUploader uploader = new SharedCacheUploader(e.getKey(), e.getValue(), event.getUser(), getConfig(), scmClient, fs, localFs);\r\n            uploaderPool.submit(uploader);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\sharedcache",
  "methodName" : "isEnabled",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isEnabled()\n{\r\n    return enabled;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "run",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void run()\n{\r\n    try {\r\n        exec.execute();\r\n        provider.setDescriptors(parseOutput(exec.getOutput()));\r\n    } catch (Exception e) {\r\n        if (exec.isTimedOut()) {\r\n            LOG.warn(\"Node Labels script timed out, Caught exception : \" + e.getMessage(), e);\r\n        } else {\r\n            LOG.warn(\"Execution of Node Labels script failed, Caught exception : \" + e.getMessage(), e);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "cleanUp",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void cleanUp()\n{\r\n    if (exec != null) {\r\n        Process p = exec.getProcess();\r\n        if (p != null) {\r\n            p.destroy();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "parseOutput",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Set<T> parseOutput(String scriptOutput) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "startStorage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void startStorage() throws IOException\n{\r\n    isHealthy = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "closeStorage",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void closeStorage() throws IOException\n{\r\n    if (compactionTimer != null) {\r\n        compactionTimer.cancel();\r\n        compactionTimer = null;\r\n    }\r\n    if (db != null) {\r\n        db.close();\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "isNewlyCreated",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isNewlyCreated()\n{\r\n    return isNewlyCreated;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "markStoreUnHealthy",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void markStoreUnHealthy(DBException dbErr)\n{\r\n    LOG.error(\"Statestore exception: \", dbErr);\r\n    if (!isHealthy) {\r\n        return;\r\n    }\r\n    isHealthy = false;\r\n    NodeStatusUpdater nsu = getNodeStatusUpdater();\r\n    if (nsu != null) {\r\n        nsu.reportException(dbErr);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "isHealthy",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isHealthy()\n{\r\n    return isHealthy;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "getLevelDBIterator",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LeveldbIterator getLevelDBIterator(String startKey) throws IOException\n{\r\n    try {\r\n        LeveldbIterator it = new LeveldbIterator(db);\r\n        it.seek(bytes(startKey));\r\n        return it;\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "getNextRecoveredContainer",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "RecoveredContainerState getNextRecoveredContainer(LeveldbIterator it) throws IOException\n{\r\n    RecoveredContainerState rcs = null;\r\n    try {\r\n        while (it.hasNext()) {\r\n            Entry<byte[], byte[]> entry = it.peekNext();\r\n            String key = asString(entry.getKey());\r\n            if (!key.startsWith(CONTAINERS_KEY_PREFIX)) {\r\n                return null;\r\n            }\r\n            int idEndPos = key.indexOf('/', CONTAINERS_KEY_PREFIX.length());\r\n            if (idEndPos < 0) {\r\n                throw new IOException(\"Unable to determine container in key: \" + key);\r\n            }\r\n            String keyPrefix = key.substring(0, idEndPos + 1);\r\n            rcs = loadContainerState(it, keyPrefix);\r\n            if (rcs.startRequest != null) {\r\n                break;\r\n            } else {\r\n                removeContainer(rcs.getContainerId());\r\n                rcs = null;\r\n            }\r\n        }\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    }\r\n    return rcs;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "getContainerStateIterator",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RecoveryIterator<RecoveredContainerState> getContainerStateIterator() throws IOException\n{\r\n    return new ContainerStateIterator();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadContainerState",
  "errType" : null,
  "containingMethodsNum" : 49,
  "sourceCodeText" : "RecoveredContainerState loadContainerState(LeveldbIterator iter, String keyPrefix) throws IOException\n{\r\n    ContainerId containerId = ContainerId.fromString(keyPrefix.substring(CONTAINERS_KEY_PREFIX.length(), keyPrefix.length() - 1));\r\n    RecoveredContainerState rcs = new RecoveredContainerState(containerId);\r\n    rcs.status = RecoveredContainerStatus.REQUESTED;\r\n    while (iter.hasNext()) {\r\n        Entry<byte[], byte[]> entry = iter.peekNext();\r\n        String key = asString(entry.getKey());\r\n        if (!key.startsWith(keyPrefix)) {\r\n            break;\r\n        }\r\n        iter.next();\r\n        String suffix = key.substring(keyPrefix.length() - 1);\r\n        if (suffix.equals(CONTAINER_REQUEST_KEY_SUFFIX)) {\r\n            rcs.startRequest = new StartContainerRequestPBImpl(StartContainerRequestProto.parseFrom(entry.getValue()));\r\n            ContainerTokenIdentifier containerTokenIdentifier = BuilderUtils.newContainerTokenIdentifier(rcs.startRequest.getContainerToken());\r\n            rcs.capability = new ResourcePBImpl(containerTokenIdentifier.getProto().getResource());\r\n        } else if (suffix.equals(CONTAINER_VERSION_KEY_SUFFIX)) {\r\n            rcs.version = Integer.parseInt(asString(entry.getValue()));\r\n        } else if (suffix.equals(CONTAINER_START_TIME_KEY_SUFFIX)) {\r\n            rcs.setStartTime(Long.parseLong(asString(entry.getValue())));\r\n        } else if (suffix.equals(CONTAINER_DIAGS_KEY_SUFFIX)) {\r\n            rcs.diagnostics = asString(entry.getValue());\r\n        } else if (suffix.equals(CONTAINER_QUEUED_KEY_SUFFIX)) {\r\n            if (rcs.status == RecoveredContainerStatus.REQUESTED) {\r\n                rcs.status = RecoveredContainerStatus.QUEUED;\r\n            }\r\n        } else if (suffix.equals(CONTAINER_PAUSED_KEY_SUFFIX)) {\r\n            if ((rcs.status == RecoveredContainerStatus.LAUNCHED) || (rcs.status == RecoveredContainerStatus.QUEUED) || (rcs.status == RecoveredContainerStatus.REQUESTED)) {\r\n                rcs.status = RecoveredContainerStatus.PAUSED;\r\n            }\r\n        } else if (suffix.equals(CONTAINER_LAUNCHED_KEY_SUFFIX)) {\r\n            if ((rcs.status == RecoveredContainerStatus.REQUESTED) || (rcs.status == RecoveredContainerStatus.QUEUED) || (rcs.status == RecoveredContainerStatus.PAUSED)) {\r\n                rcs.status = RecoveredContainerStatus.LAUNCHED;\r\n            }\r\n        } else if (suffix.equals(CONTAINER_KILLED_KEY_SUFFIX)) {\r\n            rcs.killed = true;\r\n        } else if (suffix.equals(CONTAINER_EXIT_CODE_KEY_SUFFIX)) {\r\n            rcs.status = RecoveredContainerStatus.COMPLETED;\r\n            rcs.exitCode = Integer.parseInt(asString(entry.getValue()));\r\n        } else if (suffix.equals(CONTAINER_UPDATE_TOKEN_SUFFIX)) {\r\n            ContainerTokenIdentifierProto tokenIdentifierProto = ContainerTokenIdentifierProto.parseFrom(entry.getValue());\r\n            Token currentToken = rcs.getStartRequest().getContainerToken();\r\n            Token updatedToken = Token.newInstance(tokenIdentifierProto.toByteArray(), ContainerTokenIdentifier.KIND.toString(), currentToken.getPassword().array(), currentToken.getService());\r\n            rcs.startRequest.setContainerToken(updatedToken);\r\n            rcs.capability = new ResourcePBImpl(tokenIdentifierProto.getResource());\r\n            rcs.version = tokenIdentifierProto.getVersion();\r\n        } else if (suffix.equals(CONTAINER_REMAIN_RETRIES_KEY_SUFFIX)) {\r\n            rcs.setRemainingRetryAttempts(Integer.parseInt(asString(entry.getValue())));\r\n        } else if (suffix.equals(CONTAINER_RESTART_TIMES_SUFFIX)) {\r\n            String value = asString(entry.getValue());\r\n            String[] unparsedRestartTimes = value.substring(1, value.length() - 1).split(\", \");\r\n            List<Long> restartTimes = new ArrayList<>();\r\n            for (String restartTime : unparsedRestartTimes) {\r\n                if (!restartTime.isEmpty()) {\r\n                    restartTimes.add(Long.parseLong(restartTime));\r\n                }\r\n            }\r\n            rcs.setRestartTimes(restartTimes);\r\n        } else if (suffix.equals(CONTAINER_WORK_DIR_KEY_SUFFIX)) {\r\n            rcs.setWorkDir(asString(entry.getValue()));\r\n        } else if (suffix.equals(CONTAINER_LOG_DIR_KEY_SUFFIX)) {\r\n            rcs.setLogDir(asString(entry.getValue()));\r\n        } else if (suffix.startsWith(CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX)) {\r\n            String resourceType = suffix.substring(CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX.length());\r\n            ResourceMappings.AssignedResources assignedResources = ResourceMappings.AssignedResources.fromBytes(entry.getValue());\r\n            rcs.getResourceMappings().addAssignedResources(resourceType, assignedResources);\r\n        } else {\r\n            LOG.warn(\"the container \" + containerId + \" will be killed because of the unknown key \" + key + \" during recovery.\");\r\n            containerUnknownKeySuffixes.put(containerId, suffix);\r\n            rcs.setRecoveryType(RecoveredContainerType.KILL);\r\n        }\r\n    }\r\n    return rcs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainer",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void storeContainer(ContainerId containerId, int containerVersion, long startTime, StartContainerRequest startRequest) throws IOException\n{\r\n    String idStr = containerId.toString();\r\n    LOG.debug(\"storeContainer: containerId= {}, startRequest= {}\", idStr, startRequest);\r\n    final String keyVersion = getContainerVersionKey(idStr);\r\n    final String keyRequest = getContainerKey(idStr, CONTAINER_REQUEST_KEY_SUFFIX);\r\n    final StartContainerRequestProto startContainerRequest = ((StartContainerRequestPBImpl) startRequest).getProto();\r\n    final String keyStartTime = getContainerKey(idStr, CONTAINER_START_TIME_KEY_SUFFIX);\r\n    final String startTimeValue = Long.toString(startTime);\r\n    try {\r\n        try (WriteBatch batch = db.createWriteBatch()) {\r\n            batch.put(bytes(keyRequest), startContainerRequest.toByteArray());\r\n            batch.put(bytes(keyStartTime), bytes(startTimeValue));\r\n            if (containerVersion != 0) {\r\n                batch.put(bytes(keyVersion), bytes(Integer.toString(containerVersion)));\r\n            }\r\n            db.write(batch);\r\n        }\r\n    } catch (DBException e) {\r\n        markStoreUnHealthy(e);\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "getContainerVersionKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getContainerVersionKey(String containerId)\n{\r\n    return getContainerKey(containerId, CONTAINER_VERSION_KEY_SUFFIX);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "getContainerKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getContainerKey(String containerId, String suffix)\n{\r\n    return CONTAINERS_KEY_PREFIX + containerId + suffix;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerQueued",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void storeContainerQueued(ContainerId containerId) throws IOException\n{\r\n    LOG.debug(\"storeContainerQueued: containerId={}\", containerId);\r\n    String key = CONTAINERS_KEY_PREFIX + containerId.toString() + CONTAINER_QUEUED_KEY_SUFFIX;\r\n    try {\r\n        db.put(bytes(key), EMPTY_VALUE);\r\n    } catch (DBException e) {\r\n        markStoreUnHealthy(e);\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeContainerQueued",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void removeContainerQueued(ContainerId containerId) throws IOException\n{\r\n    LOG.debug(\"removeContainerQueued: containerId={}\", containerId);\r\n    String key = CONTAINERS_KEY_PREFIX + containerId.toString() + CONTAINER_QUEUED_KEY_SUFFIX;\r\n    try {\r\n        db.delete(bytes(key));\r\n    } catch (DBException e) {\r\n        markStoreUnHealthy(e);\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerPaused",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void storeContainerPaused(ContainerId containerId) throws IOException\n{\r\n    LOG.debug(\"storeContainerPaused: containerId={}\", containerId);\r\n    String key = CONTAINERS_KEY_PREFIX + containerId.toString() + CONTAINER_PAUSED_KEY_SUFFIX;\r\n    try {\r\n        db.put(bytes(key), EMPTY_VALUE);\r\n    } catch (DBException e) {\r\n        markStoreUnHealthy(e);\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeContainerPaused",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void removeContainerPaused(ContainerId containerId) throws IOException\n{\r\n    LOG.debug(\"removeContainerPaused: containerId={}\", containerId);\r\n    String key = CONTAINERS_KEY_PREFIX + containerId.toString() + CONTAINER_PAUSED_KEY_SUFFIX;\r\n    try {\r\n        db.delete(bytes(key));\r\n    } catch (DBException e) {\r\n        markStoreUnHealthy(e);\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerDiagnostics",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void storeContainerDiagnostics(ContainerId containerId, StringBuilder diagnostics) throws IOException\n{\r\n    LOG.debug(\"storeContainerDiagnostics: containerId={}, diagnostics=\", containerId, diagnostics);\r\n    String key = CONTAINERS_KEY_PREFIX + containerId.toString() + CONTAINER_DIAGS_KEY_SUFFIX;\r\n    try {\r\n        db.put(bytes(key), bytes(diagnostics.toString()));\r\n    } catch (DBException e) {\r\n        markStoreUnHealthy(e);\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerLaunched",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void storeContainerLaunched(ContainerId containerId) throws IOException\n{\r\n    LOG.debug(\"storeContainerLaunched: containerId={}\", containerId);\r\n    removeContainerQueued(containerId);\r\n    String key = CONTAINERS_KEY_PREFIX + containerId.toString() + CONTAINER_LAUNCHED_KEY_SUFFIX;\r\n    try {\r\n        db.put(bytes(key), EMPTY_VALUE);\r\n    } catch (DBException e) {\r\n        markStoreUnHealthy(e);\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerUpdateToken",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void storeContainerUpdateToken(ContainerId containerId, ContainerTokenIdentifier containerTokenIdentifier) throws IOException\n{\r\n    LOG.debug(\"storeContainerUpdateToken: containerId={}\", containerId);\r\n    String keyUpdateToken = CONTAINERS_KEY_PREFIX + containerId.toString() + CONTAINER_UPDATE_TOKEN_SUFFIX;\r\n    String keyVersion = CONTAINERS_KEY_PREFIX + containerId.toString() + CONTAINER_VERSION_KEY_SUFFIX;\r\n    try {\r\n        WriteBatch batch = db.createWriteBatch();\r\n        try {\r\n            batch.put(bytes(keyUpdateToken), containerTokenIdentifier.getProto().toByteArray());\r\n            batch.put(bytes(keyVersion), bytes(Integer.toString(containerTokenIdentifier.getVersion())));\r\n            db.write(batch);\r\n        } finally {\r\n            batch.close();\r\n        }\r\n    } catch (DBException e) {\r\n        markStoreUnHealthy(e);\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerKilled",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void storeContainerKilled(ContainerId containerId) throws IOException\n{\r\n    LOG.debug(\"storeContainerKilled: containerId={}\", containerId);\r\n    String key = CONTAINERS_KEY_PREFIX + containerId.toString() + CONTAINER_KILLED_KEY_SUFFIX;\r\n    try {\r\n        db.put(bytes(key), EMPTY_VALUE);\r\n    } catch (DBException e) {\r\n        markStoreUnHealthy(e);\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerCompleted",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void storeContainerCompleted(ContainerId containerId, int exitCode) throws IOException\n{\r\n    LOG.debug(\"storeContainerCompleted: containerId={}\", containerId);\r\n    String key = CONTAINERS_KEY_PREFIX + containerId.toString() + CONTAINER_EXIT_CODE_KEY_SUFFIX;\r\n    try {\r\n        db.put(bytes(key), bytes(Integer.toString(exitCode)));\r\n    } catch (DBException e) {\r\n        markStoreUnHealthy(e);\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerRemainingRetryAttempts",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void storeContainerRemainingRetryAttempts(ContainerId containerId, int remainingRetryAttempts) throws IOException\n{\r\n    String key = CONTAINERS_KEY_PREFIX + containerId.toString() + CONTAINER_REMAIN_RETRIES_KEY_SUFFIX;\r\n    try {\r\n        db.put(bytes(key), bytes(Integer.toString(remainingRetryAttempts)));\r\n    } catch (DBException e) {\r\n        markStoreUnHealthy(e);\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerRestartTimes",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void storeContainerRestartTimes(ContainerId containerId, List<Long> restartTimes) throws IOException\n{\r\n    String key = CONTAINERS_KEY_PREFIX + containerId.toString() + CONTAINER_RESTART_TIMES_SUFFIX;\r\n    try {\r\n        db.put(bytes(key), bytes(restartTimes.toString()));\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerWorkDir",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void storeContainerWorkDir(ContainerId containerId, String workDir) throws IOException\n{\r\n    String key = CONTAINERS_KEY_PREFIX + containerId.toString() + CONTAINER_WORK_DIR_KEY_SUFFIX;\r\n    try {\r\n        db.put(bytes(key), bytes(workDir));\r\n    } catch (DBException e) {\r\n        markStoreUnHealthy(e);\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerLogDir",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void storeContainerLogDir(ContainerId containerId, String logDir) throws IOException\n{\r\n    String key = CONTAINERS_KEY_PREFIX + containerId.toString() + CONTAINER_LOG_DIR_KEY_SUFFIX;\r\n    try {\r\n        db.put(bytes(key), bytes(logDir));\r\n    } catch (DBException e) {\r\n        markStoreUnHealthy(e);\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeContainer",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 22,
  "sourceCodeText" : "void removeContainer(ContainerId containerId) throws IOException\n{\r\n    LOG.debug(\"removeContainer: containerId={}\", containerId);\r\n    String keyPrefix = CONTAINERS_KEY_PREFIX + containerId.toString();\r\n    try {\r\n        WriteBatch batch = db.createWriteBatch();\r\n        try {\r\n            batch.delete(bytes(keyPrefix + CONTAINER_REQUEST_KEY_SUFFIX));\r\n            batch.delete(bytes(keyPrefix + CONTAINER_DIAGS_KEY_SUFFIX));\r\n            batch.delete(bytes(keyPrefix + CONTAINER_LAUNCHED_KEY_SUFFIX));\r\n            batch.delete(bytes(keyPrefix + CONTAINER_QUEUED_KEY_SUFFIX));\r\n            batch.delete(bytes(keyPrefix + CONTAINER_PAUSED_KEY_SUFFIX));\r\n            batch.delete(bytes(keyPrefix + CONTAINER_KILLED_KEY_SUFFIX));\r\n            batch.delete(bytes(keyPrefix + CONTAINER_EXIT_CODE_KEY_SUFFIX));\r\n            batch.delete(bytes(keyPrefix + CONTAINER_UPDATE_TOKEN_SUFFIX));\r\n            batch.delete(bytes(keyPrefix + CONTAINER_START_TIME_KEY_SUFFIX));\r\n            batch.delete(bytes(keyPrefix + CONTAINER_LOG_DIR_KEY_SUFFIX));\r\n            batch.delete(bytes(keyPrefix + CONTAINER_VERSION_KEY_SUFFIX));\r\n            batch.delete(bytes(keyPrefix + CONTAINER_REMAIN_RETRIES_KEY_SUFFIX));\r\n            batch.delete(bytes(keyPrefix + CONTAINER_RESTART_TIMES_SUFFIX));\r\n            batch.delete(bytes(keyPrefix + CONTAINER_WORK_DIR_KEY_SUFFIX));\r\n            List<String> unknownKeysForContainer = containerUnknownKeySuffixes.removeAll(containerId);\r\n            for (String unknownKeySuffix : unknownKeysForContainer) {\r\n                batch.delete(bytes(keyPrefix + unknownKeySuffix));\r\n            }\r\n            db.write(batch);\r\n        } finally {\r\n            batch.close();\r\n        }\r\n    } catch (DBException e) {\r\n        markStoreUnHealthy(e);\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "getNextRecoveredApplication",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "ContainerManagerApplicationProto getNextRecoveredApplication(LeveldbIterator it) throws IOException\n{\r\n    ContainerManagerApplicationProto applicationProto = null;\r\n    try {\r\n        if (it.hasNext()) {\r\n            Entry<byte[], byte[]> entry = it.next();\r\n            String key = asString(entry.getKey());\r\n            if (!key.startsWith(APPLICATIONS_KEY_PREFIX)) {\r\n                return null;\r\n            }\r\n            applicationProto = ContainerManagerApplicationProto.parseFrom(entry.getValue());\r\n        }\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    }\r\n    return applicationProto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadApplicationsState",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RecoveredApplicationsState loadApplicationsState() throws IOException\n{\r\n    RecoveredApplicationsState state = new RecoveredApplicationsState();\r\n    state.it = new ApplicationStateIterator();\r\n    cleanupDeprecatedFinishedApps();\r\n    return state;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeApplication",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void storeApplication(ApplicationId appId, ContainerManagerApplicationProto p) throws IOException\n{\r\n    LOG.debug(\"storeApplication: appId={}, proto={}\", appId, p);\r\n    String key = APPLICATIONS_KEY_PREFIX + appId;\r\n    try {\r\n        db.put(bytes(key), p.toByteArray());\r\n    } catch (DBException e) {\r\n        markStoreUnHealthy(e);\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeApplication",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void removeApplication(ApplicationId appId) throws IOException\n{\r\n    LOG.debug(\"removeApplication: appId={}\", appId);\r\n    try {\r\n        WriteBatch batch = db.createWriteBatch();\r\n        try {\r\n            String key = APPLICATIONS_KEY_PREFIX + appId;\r\n            batch.delete(bytes(key));\r\n            db.write(batch);\r\n        } finally {\r\n            batch.close();\r\n        }\r\n    } catch (DBException e) {\r\n        markStoreUnHealthy(e);\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "getNextRecoveredPrivateLocalizationEntry",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "Entry<String, RecoveredUserResources> getNextRecoveredPrivateLocalizationEntry(LeveldbIterator it) throws IOException\n{\r\n    Entry<String, RecoveredUserResources> localEntry = null;\r\n    try {\r\n        if (it.hasNext()) {\r\n            Entry<byte[], byte[]> entry = it.peekNext();\r\n            String key = asString(entry.getKey());\r\n            if (!key.startsWith(LOCALIZATION_PRIVATE_KEY_PREFIX)) {\r\n                return null;\r\n            }\r\n            int userEndPos = key.indexOf('/', LOCALIZATION_PRIVATE_KEY_PREFIX.length());\r\n            if (userEndPos < 0) {\r\n                throw new IOException(\"Unable to determine user in resource key: \" + key);\r\n            }\r\n            String user = key.substring(LOCALIZATION_PRIVATE_KEY_PREFIX.length(), userEndPos);\r\n            RecoveredUserResources val = loadUserLocalizedResources(it, key.substring(0, userEndPos + 1));\r\n            localEntry = new AbstractMap.SimpleEntry<>(user, val);\r\n        }\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    }\r\n    return localEntry;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadLocalizationState",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RecoveredLocalizationState loadLocalizationState() throws IOException\n{\r\n    RecoveredLocalizationState state = new RecoveredLocalizationState();\r\n    state.publicTrackerState = loadResourceTrackerState(LOCALIZATION_PUBLIC_KEY_PREFIX);\r\n    state.it = new UserResourcesIterator();\r\n    return state;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadResourceTrackerState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LocalResourceTrackerState loadResourceTrackerState(String keyPrefix) throws IOException\n{\r\n    final String completedPrefix = keyPrefix + LOCALIZATION_COMPLETED_SUFFIX;\r\n    final String startedPrefix = keyPrefix + LOCALIZATION_STARTED_SUFFIX;\r\n    RecoveryIterator<LocalizedResourceProto> crIt = new CompletedResourcesIterator(completedPrefix);\r\n    RecoveryIterator<Entry<LocalResourceProto, Path>> srIt = new StartedResourcesIterator(startedPrefix);\r\n    return new LocalResourceTrackerState(crIt, srIt);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "getNextCompletedResource",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "LocalizedResourceProto getNextCompletedResource(LeveldbIterator iter, String keyPrefix) throws IOException\n{\r\n    LocalizedResourceProto nextCompletedResource = null;\r\n    if (iter.hasNext()) {\r\n        Entry<byte[], byte[]> entry = iter.next();\r\n        String key = asString(entry.getKey());\r\n        if (!key.startsWith(keyPrefix)) {\r\n            return null;\r\n        }\r\n        LOG.debug(\"Loading completed resource from {}\", key);\r\n        nextCompletedResource = LocalizedResourceProto.parseFrom(entry.getValue());\r\n    }\r\n    return nextCompletedResource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "getNextStartedResource",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "Entry<LocalResourceProto, Path> getNextStartedResource(LeveldbIterator iter, String keyPrefix) throws IOException\n{\r\n    Entry<LocalResourceProto, Path> nextStartedResource = null;\r\n    if (iter.hasNext()) {\r\n        Entry<byte[], byte[]> entry = iter.next();\r\n        String key = asString(entry.getKey());\r\n        if (!key.startsWith(keyPrefix)) {\r\n            return null;\r\n        }\r\n        Path localPath = new Path(key.substring(keyPrefix.length()));\r\n        LOG.debug(\"Loading in-progress resource at {}\", localPath);\r\n        nextStartedResource = new SimpleEntry<LocalResourceProto, Path>(LocalResourceProto.parseFrom(entry.getValue()), localPath);\r\n    }\r\n    return nextStartedResource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "seekPastPrefix",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void seekPastPrefix(LeveldbIterator iter, String keyPrefix) throws IOException\n{\r\n    try {\r\n        iter.seek(bytes(keyPrefix + BEYOND_ENTRIES_SUFFIX));\r\n        while (iter.hasNext()) {\r\n            Entry<byte[], byte[]> entry = iter.peekNext();\r\n            String key = asString(entry.getKey());\r\n            if (key.startsWith(keyPrefix)) {\r\n                iter.next();\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadUserLocalizedResources",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "RecoveredUserResources loadUserLocalizedResources(LeveldbIterator iter, String keyPrefix) throws IOException\n{\r\n    RecoveredUserResources userResources = new RecoveredUserResources();\r\n    String appCachePrefix = keyPrefix + LOCALIZATION_APPCACHE_SUFFIX;\r\n    iter.seek(bytes(appCachePrefix));\r\n    while (iter.hasNext()) {\r\n        Entry<byte[], byte[]> entry = iter.peekNext();\r\n        String key = asString(entry.getKey());\r\n        if (!key.startsWith(appCachePrefix)) {\r\n            break;\r\n        }\r\n        int appIdStartPos = appCachePrefix.length();\r\n        int appIdEndPos = key.indexOf('/', appIdStartPos);\r\n        if (appIdEndPos < 0) {\r\n            throw new IOException(\"Unable to determine appID in resource key: \" + key);\r\n        }\r\n        ApplicationId appId = ApplicationId.fromString(key.substring(appIdStartPos, appIdEndPos));\r\n        String trackerStateKey = key.substring(0, appIdEndPos + 1);\r\n        userResources.appTrackerStates.put(appId, loadResourceTrackerState(trackerStateKey));\r\n        seekPastPrefix(iter, trackerStateKey);\r\n    }\r\n    String fileCachePrefix = keyPrefix + LOCALIZATION_FILECACHE_SUFFIX;\r\n    iter.seek(bytes(fileCachePrefix));\r\n    Entry<byte[], byte[]> entry = iter.peekNext();\r\n    String key = asString(entry.getKey());\r\n    if (key.startsWith(fileCachePrefix)) {\r\n        userResources.privateTrackerState = loadResourceTrackerState(fileCachePrefix);\r\n    }\r\n    seekPastPrefix(iter, keyPrefix);\r\n    return userResources;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "startResourceLocalization",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void startResourceLocalization(String user, ApplicationId appId, LocalResourceProto proto, Path localPath) throws IOException\n{\r\n    String key = getResourceStartedKey(user, appId, localPath.toString());\r\n    try {\r\n        db.put(bytes(key), proto.toByteArray());\r\n    } catch (DBException e) {\r\n        markStoreUnHealthy(e);\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "finishResourceLocalization",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void finishResourceLocalization(String user, ApplicationId appId, LocalizedResourceProto proto) throws IOException\n{\r\n    String localPath = proto.getLocalPath();\r\n    String startedKey = getResourceStartedKey(user, appId, localPath);\r\n    String completedKey = getResourceCompletedKey(user, appId, localPath);\r\n    LOG.debug(\"Storing localized resource to {}\", completedKey);\r\n    try {\r\n        WriteBatch batch = db.createWriteBatch();\r\n        try {\r\n            batch.delete(bytes(startedKey));\r\n            batch.put(bytes(completedKey), proto.toByteArray());\r\n            db.write(batch);\r\n        } finally {\r\n            batch.close();\r\n        }\r\n    } catch (DBException e) {\r\n        markStoreUnHealthy(e);\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeLocalizedResource",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void removeLocalizedResource(String user, ApplicationId appId, Path localPath) throws IOException\n{\r\n    String localPathStr = localPath.toString();\r\n    String startedKey = getResourceStartedKey(user, appId, localPathStr);\r\n    String completedKey = getResourceCompletedKey(user, appId, localPathStr);\r\n    LOG.debug(\"Removing local resource at {}\", localPathStr);\r\n    try {\r\n        WriteBatch batch = db.createWriteBatch();\r\n        try {\r\n            batch.delete(bytes(startedKey));\r\n            batch.delete(bytes(completedKey));\r\n            db.write(batch);\r\n        } finally {\r\n            batch.close();\r\n        }\r\n    } catch (DBException e) {\r\n        markStoreUnHealthy(e);\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "getResourceStartedKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getResourceStartedKey(String user, ApplicationId appId, String localPath)\n{\r\n    return getResourceTrackerKeyPrefix(user, appId) + LOCALIZATION_STARTED_SUFFIX + localPath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "getResourceCompletedKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getResourceCompletedKey(String user, ApplicationId appId, String localPath)\n{\r\n    return getResourceTrackerKeyPrefix(user, appId) + LOCALIZATION_COMPLETED_SUFFIX + localPath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "getResourceTrackerKeyPrefix",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getResourceTrackerKeyPrefix(String user, ApplicationId appId)\n{\r\n    if (user == null) {\r\n        return LOCALIZATION_PUBLIC_KEY_PREFIX;\r\n    }\r\n    if (appId == null) {\r\n        return LOCALIZATION_PRIVATE_KEY_PREFIX + user + \"/\" + LOCALIZATION_FILECACHE_SUFFIX;\r\n    }\r\n    return LOCALIZATION_PRIVATE_KEY_PREFIX + user + \"/\" + LOCALIZATION_APPCACHE_SUFFIX + appId + \"/\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "getNextRecoveredDeletionService",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "DeletionServiceDeleteTaskProto getNextRecoveredDeletionService(LeveldbIterator it) throws IOException\n{\r\n    DeletionServiceDeleteTaskProto deleteProto = null;\r\n    try {\r\n        if (it.hasNext()) {\r\n            Entry<byte[], byte[]> entry = it.next();\r\n            String key = asString(entry.getKey());\r\n            if (!key.startsWith(DELETION_TASK_KEY_PREFIX)) {\r\n                return null;\r\n            }\r\n            deleteProto = DeletionServiceDeleteTaskProto.parseFrom(entry.getValue());\r\n        }\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    }\r\n    return deleteProto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadDeletionServiceState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RecoveredDeletionServiceState loadDeletionServiceState() throws IOException\n{\r\n    RecoveredDeletionServiceState state = new RecoveredDeletionServiceState();\r\n    state.it = new DeletionStateIterator();\r\n    return state;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeDeletionTask",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void storeDeletionTask(int taskId, DeletionServiceDeleteTaskProto taskProto) throws IOException\n{\r\n    String key = DELETION_TASK_KEY_PREFIX + taskId;\r\n    try {\r\n        db.put(bytes(key), taskProto.toByteArray());\r\n    } catch (DBException e) {\r\n        markStoreUnHealthy(e);\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeDeletionTask",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void removeDeletionTask(int taskId) throws IOException\n{\r\n    String key = DELETION_TASK_KEY_PREFIX + taskId;\r\n    try {\r\n        db.delete(bytes(key));\r\n    } catch (DBException e) {\r\n        markStoreUnHealthy(e);\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "getMasterKey",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "MasterKey getMasterKey(String dbKey) throws IOException\n{\r\n    try {\r\n        byte[] data = db.get(bytes(dbKey));\r\n        if (data == null || data.length == 0) {\r\n            return null;\r\n        }\r\n        return parseMasterKey(data);\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "getNextMasterKeyEntry",
  "errType" : [ "DBException", "IllegalArgumentException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "Entry<ApplicationAttemptId, MasterKey> getNextMasterKeyEntry(LeveldbIterator it) throws IOException\n{\r\n    Entry<ApplicationAttemptId, MasterKey> masterKeyentry = null;\r\n    try {\r\n        while (it.hasNext()) {\r\n            Entry<byte[], byte[]> entry = it.next();\r\n            String fullKey = asString(entry.getKey());\r\n            if (!fullKey.startsWith(NM_TOKENS_KEY_PREFIX)) {\r\n                break;\r\n            }\r\n            String key = fullKey.substring(NM_TOKENS_KEY_PREFIX.length());\r\n            if (key.startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\r\n                ApplicationAttemptId attempt;\r\n                try {\r\n                    attempt = ApplicationAttemptId.fromString(key);\r\n                } catch (IllegalArgumentException e) {\r\n                    throw new IOException(\"Bad application master key state for \" + fullKey, e);\r\n                }\r\n                masterKeyentry = new AbstractMap.SimpleEntry<>(attempt, parseMasterKey(entry.getValue()));\r\n                break;\r\n            }\r\n        }\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    }\r\n    return masterKeyentry;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadNMTokensState",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RecoveredNMTokensState loadNMTokensState() throws IOException\n{\r\n    RecoveredNMTokensState state = new RecoveredNMTokensState();\r\n    state.currentMasterKey = getMasterKey(NM_TOKENS_KEY_PREFIX + CURRENT_MASTER_KEY_SUFFIX);\r\n    state.previousMasterKey = getMasterKey(NM_TOKENS_KEY_PREFIX + PREV_MASTER_KEY_SUFFIX);\r\n    state.it = new NMTokensStateIterator();\r\n    return state;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeNMTokenCurrentMasterKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void storeNMTokenCurrentMasterKey(MasterKey key) throws IOException\n{\r\n    storeMasterKey(NM_TOKENS_CURRENT_MASTER_KEY, key);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeNMTokenPreviousMasterKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void storeNMTokenPreviousMasterKey(MasterKey key) throws IOException\n{\r\n    storeMasterKey(NM_TOKENS_PREV_MASTER_KEY, key);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeNMTokenApplicationMasterKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void storeNMTokenApplicationMasterKey(ApplicationAttemptId attempt, MasterKey key) throws IOException\n{\r\n    storeMasterKey(NM_TOKENS_KEY_PREFIX + attempt, key);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeNMTokenApplicationMasterKey",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void removeNMTokenApplicationMasterKey(ApplicationAttemptId attempt) throws IOException\n{\r\n    String key = NM_TOKENS_KEY_PREFIX + attempt;\r\n    try {\r\n        db.delete(bytes(key));\r\n    } catch (DBException e) {\r\n        markStoreUnHealthy(e);\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "parseMasterKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "MasterKey parseMasterKey(byte[] keyData) throws IOException\n{\r\n    return new MasterKeyPBImpl(MasterKeyProto.parseFrom(keyData));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeMasterKey",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void storeMasterKey(String dbKey, MasterKey key) throws IOException\n{\r\n    MasterKeyPBImpl pb = (MasterKeyPBImpl) key;\r\n    try {\r\n        db.put(bytes(dbKey), pb.getProto().toByteArray());\r\n    } catch (DBException e) {\r\n        markStoreUnHealthy(e);\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "getNextContainerToken",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "Entry<ContainerId, Long> getNextContainerToken(LeveldbIterator it) throws IOException\n{\r\n    Entry<ContainerId, Long> containerTokenEntry = null;\r\n    try {\r\n        while (it.hasNext()) {\r\n            Entry<byte[], byte[]> entry = it.next();\r\n            String fullKey = asString(entry.getKey());\r\n            if (!fullKey.startsWith(CONTAINER_TOKENS_KEY_PREFIX)) {\r\n                break;\r\n            }\r\n            String key = fullKey.substring(CONTAINER_TOKENS_KEY_PREFIX.length());\r\n            if (key.startsWith(ConverterUtils.CONTAINER_PREFIX)) {\r\n                containerTokenEntry = loadContainerToken(fullKey, key, entry.getValue());\r\n                break;\r\n            }\r\n        }\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    }\r\n    return containerTokenEntry;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadContainerToken",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Entry<ContainerId, Long> loadContainerToken(String key, String containerIdStr, byte[] value) throws IOException\n{\r\n    ContainerId containerId;\r\n    Long expTime;\r\n    try {\r\n        containerId = ContainerId.fromString(containerIdStr);\r\n        expTime = Long.parseLong(asString(value));\r\n    } catch (IllegalArgumentException e) {\r\n        throw new IOException(\"Bad container token state for \" + key, e);\r\n    }\r\n    return new AbstractMap.SimpleEntry<>(containerId, expTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadContainerTokensState",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RecoveredContainerTokensState loadContainerTokensState() throws IOException\n{\r\n    RecoveredContainerTokensState state = new RecoveredContainerTokensState();\r\n    state.currentMasterKey = getMasterKey(CONTAINER_TOKENS_KEY_PREFIX + CURRENT_MASTER_KEY_SUFFIX);\r\n    state.previousMasterKey = getMasterKey(CONTAINER_TOKENS_KEY_PREFIX + PREV_MASTER_KEY_SUFFIX);\r\n    state.it = new ContainerTokensStateIterator();\r\n    return state;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerTokenCurrentMasterKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void storeContainerTokenCurrentMasterKey(MasterKey key) throws IOException\n{\r\n    storeMasterKey(CONTAINER_TOKEN_SECRETMANAGER_CURRENT_MASTER_KEY, key);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerTokenPreviousMasterKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void storeContainerTokenPreviousMasterKey(MasterKey key) throws IOException\n{\r\n    storeMasterKey(CONTAINER_TOKEN_SECRETMANAGER_PREV_MASTER_KEY, key);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerToken",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void storeContainerToken(ContainerId containerId, Long expTime) throws IOException\n{\r\n    String key = CONTAINER_TOKENS_KEY_PREFIX + containerId;\r\n    try {\r\n        db.put(bytes(key), bytes(expTime.toString()));\r\n    } catch (DBException e) {\r\n        markStoreUnHealthy(e);\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeContainerToken",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void removeContainerToken(ContainerId containerId) throws IOException\n{\r\n    String key = CONTAINER_TOKENS_KEY_PREFIX + containerId;\r\n    try {\r\n        db.delete(bytes(key));\r\n    } catch (DBException e) {\r\n        markStoreUnHealthy(e);\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadLogDeleterState",
  "errType" : [ "DBException", "IllegalArgumentException" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "RecoveredLogDeleterState loadLogDeleterState() throws IOException\n{\r\n    RecoveredLogDeleterState state = new RecoveredLogDeleterState();\r\n    state.logDeleterMap = new HashMap<ApplicationId, LogDeleterProto>();\r\n    LeveldbIterator iter = null;\r\n    try {\r\n        iter = new LeveldbIterator(db);\r\n        iter.seek(bytes(LOG_DELETER_KEY_PREFIX));\r\n        final int logDeleterKeyPrefixLength = LOG_DELETER_KEY_PREFIX.length();\r\n        while (iter.hasNext()) {\r\n            Entry<byte[], byte[]> entry = iter.next();\r\n            String fullKey = asString(entry.getKey());\r\n            if (!fullKey.startsWith(LOG_DELETER_KEY_PREFIX)) {\r\n                break;\r\n            }\r\n            String appIdStr = fullKey.substring(logDeleterKeyPrefixLength);\r\n            ApplicationId appId = null;\r\n            try {\r\n                appId = ApplicationId.fromString(appIdStr);\r\n            } catch (IllegalArgumentException e) {\r\n                LOG.warn(\"Skipping unknown log deleter key \" + fullKey);\r\n                continue;\r\n            }\r\n            LogDeleterProto proto = LogDeleterProto.parseFrom(entry.getValue());\r\n            state.logDeleterMap.put(appId, proto);\r\n        }\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    } finally {\r\n        if (iter != null) {\r\n            iter.close();\r\n        }\r\n    }\r\n    return state;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeLogDeleter",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void storeLogDeleter(ApplicationId appId, LogDeleterProto proto) throws IOException\n{\r\n    String key = getLogDeleterKey(appId);\r\n    try {\r\n        db.put(bytes(key), proto.toByteArray());\r\n    } catch (DBException e) {\r\n        markStoreUnHealthy(e);\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeLogDeleter",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void removeLogDeleter(ApplicationId appId) throws IOException\n{\r\n    String key = getLogDeleterKey(appId);\r\n    try {\r\n        db.delete(bytes(key));\r\n    } catch (DBException e) {\r\n        markStoreUnHealthy(e);\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeAssignedResources",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void storeAssignedResources(Container container, String resourceType, List<Serializable> assignedResources) throws IOException\n{\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(\"storeAssignedResources: containerId=\" + container.getContainerId() + \", assignedResources=\" + StringUtils.join(\",\", assignedResources));\r\n    }\r\n    String keyResChng = CONTAINERS_KEY_PREFIX + container.getContainerId().toString() + CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX + resourceType;\r\n    try {\r\n        try (WriteBatch batch = db.createWriteBatch()) {\r\n            ResourceMappings.AssignedResources res = new ResourceMappings.AssignedResources();\r\n            res.updateAssignedResources(assignedResources);\r\n            batch.put(bytes(keyResChng), res.toBytes());\r\n            db.write(batch);\r\n        }\r\n    } catch (DBException e) {\r\n        markStoreUnHealthy(e);\r\n        throw new IOException(e);\r\n    }\r\n    updateContainerResourceMapping(container, resourceType, assignedResources);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "cleanupDeprecatedFinishedApps",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void cleanupDeprecatedFinishedApps()\n{\r\n    try {\r\n        cleanupKeysWithPrefix(FINISHED_APPS_KEY_PREFIX);\r\n    } catch (Exception e) {\r\n        LOG.warn(\"cleanup keys with prefix \" + FINISHED_APPS_KEY_PREFIX + \" from leveldb failed\", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "cleanupKeysWithPrefix",
  "errType" : [ "DBException", "DBException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void cleanupKeysWithPrefix(String prefix) throws IOException\n{\r\n    WriteBatch batch = null;\r\n    LeveldbIterator iter = null;\r\n    try {\r\n        iter = new LeveldbIterator(db);\r\n        try {\r\n            batch = db.createWriteBatch();\r\n            iter.seek(bytes(prefix));\r\n            while (iter.hasNext()) {\r\n                byte[] key = iter.next().getKey();\r\n                String keyStr = asString(key);\r\n                if (!keyStr.startsWith(prefix)) {\r\n                    break;\r\n                }\r\n                batch.delete(key);\r\n                LOG.debug(\"cleanup {} from leveldb\", keyStr);\r\n            }\r\n            db.write(batch);\r\n        } catch (DBException e) {\r\n            throw new IOException(e);\r\n        } finally {\r\n            if (batch != null) {\r\n                batch.close();\r\n            }\r\n        }\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    } finally {\r\n        if (iter != null) {\r\n            iter.close();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "getLogDeleterKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getLogDeleterKey(ApplicationId appId)\n{\r\n    return LOG_DELETER_KEY_PREFIX + appId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadAMRMProxyState",
  "errType" : [ "DBException", "Exception", "DBException" ],
  "containingMethodsNum" : 23,
  "sourceCodeText" : "RecoveredAMRMProxyState loadAMRMProxyState() throws IOException\n{\r\n    RecoveredAMRMProxyState result = new RecoveredAMRMProxyState();\r\n    Set<String> unknownKeys = new HashSet<>();\r\n    LeveldbIterator iter = null;\r\n    try {\r\n        iter = new LeveldbIterator(db);\r\n        iter.seek(bytes(AMRMPROXY_KEY_PREFIX));\r\n        while (iter.hasNext()) {\r\n            Entry<byte[], byte[]> entry = iter.peekNext();\r\n            String key = asString(entry.getKey());\r\n            if (!key.startsWith(AMRMPROXY_KEY_PREFIX)) {\r\n                break;\r\n            }\r\n            String suffix = key.substring(AMRMPROXY_KEY_PREFIX.length());\r\n            if (suffix.equals(CURRENT_MASTER_KEY_SUFFIX)) {\r\n                iter.next();\r\n                result.setCurrentMasterKey(parseMasterKey(entry.getValue()));\r\n                LOG.info(\"Recovered for AMRMProxy: current master key id \" + result.getCurrentMasterKey().getKeyId());\r\n            } else if (suffix.equals(NEXT_MASTER_KEY_SUFFIX)) {\r\n                iter.next();\r\n                result.setNextMasterKey(parseMasterKey(entry.getValue()));\r\n                LOG.info(\"Recovered for AMRMProxy: next master key id \" + result.getNextMasterKey().getKeyId());\r\n            } else {\r\n                int idEndPos;\r\n                ApplicationAttemptId attemptId;\r\n                try {\r\n                    idEndPos = key.indexOf('/', AMRMPROXY_KEY_PREFIX.length());\r\n                    if (idEndPos < 0) {\r\n                        throw new IOException(\"Unable to determine attemptId in key: \" + key);\r\n                    }\r\n                    attemptId = ApplicationAttemptId.fromString(key.substring(AMRMPROXY_KEY_PREFIX.length(), idEndPos));\r\n                } catch (Exception e) {\r\n                    LOG.warn(\"Unknown key \" + key + \", remove and move on\", e);\r\n                    unknownKeys.add(key);\r\n                    continue;\r\n                }\r\n                Map<String, byte[]> appContext = loadAMRMProxyAppContextMap(iter, key.substring(0, idEndPos + 1));\r\n                result.getAppContexts().put(attemptId, appContext);\r\n                LOG.info(\"Recovered for AMRMProxy: \" + attemptId + \", map size \" + appContext.size());\r\n            }\r\n        }\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    } finally {\r\n        if (iter != null) {\r\n            iter.close();\r\n        }\r\n    }\r\n    try {\r\n        for (String key : unknownKeys) {\r\n            db.delete(bytes(key));\r\n        }\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    }\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadAMRMProxyAppContextMap",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "Map<String, byte[]> loadAMRMProxyAppContextMap(LeveldbIterator iter, String keyPrefix) throws IOException\n{\r\n    Map<String, byte[]> appContextMap = new HashMap<>();\r\n    while (iter.hasNext()) {\r\n        Entry<byte[], byte[]> entry = iter.peekNext();\r\n        String key = asString(entry.getKey());\r\n        if (!key.startsWith(keyPrefix)) {\r\n            break;\r\n        }\r\n        iter.next();\r\n        String suffix = key.substring(keyPrefix.length());\r\n        byte[] data = entry.getValue();\r\n        appContextMap.put(suffix, Arrays.copyOf(data, data.length));\r\n    }\r\n    return appContextMap;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeAMRMProxyCurrentMasterKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void storeAMRMProxyCurrentMasterKey(MasterKey key) throws IOException\n{\r\n    storeMasterKey(AMRMPROXY_KEY_PREFIX + CURRENT_MASTER_KEY_SUFFIX, key);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeAMRMProxyNextMasterKey",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void storeAMRMProxyNextMasterKey(MasterKey key) throws IOException\n{\r\n    String dbkey = AMRMPROXY_KEY_PREFIX + NEXT_MASTER_KEY_SUFFIX;\r\n    if (key == null) {\r\n        try {\r\n            db.delete(bytes(dbkey));\r\n        } catch (DBException e) {\r\n            markStoreUnHealthy(e);\r\n            throw new IOException(e);\r\n        }\r\n        return;\r\n    }\r\n    storeMasterKey(dbkey, key);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeAMRMProxyAppContextEntry",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void storeAMRMProxyAppContextEntry(ApplicationAttemptId attempt, String key, byte[] data) throws IOException\n{\r\n    String fullkey = AMRMPROXY_KEY_PREFIX + attempt + \"/\" + key;\r\n    try {\r\n        db.put(bytes(fullkey), data);\r\n    } catch (DBException e) {\r\n        markStoreUnHealthy(e);\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeAMRMProxyAppContextEntry",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void removeAMRMProxyAppContextEntry(ApplicationAttemptId attempt, String key) throws IOException\n{\r\n    String fullkey = AMRMPROXY_KEY_PREFIX + attempt + \"/\" + key;\r\n    try {\r\n        db.delete(bytes(fullkey));\r\n    } catch (DBException e) {\r\n        markStoreUnHealthy(e);\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeAMRMProxyAppContext",
  "errType" : [ "DBException", "DBException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void removeAMRMProxyAppContext(ApplicationAttemptId attempt) throws IOException\n{\r\n    Set<String> candidates = new HashSet<>();\r\n    String keyPrefix = AMRMPROXY_KEY_PREFIX + attempt + \"/\";\r\n    LeveldbIterator iter = null;\r\n    try {\r\n        iter = new LeveldbIterator(db);\r\n        iter.seek(bytes(keyPrefix));\r\n        while (iter.hasNext()) {\r\n            Entry<byte[], byte[]> entry = iter.next();\r\n            String key = asString(entry.getKey());\r\n            if (!key.startsWith(keyPrefix)) {\r\n                break;\r\n            }\r\n            candidates.add(key);\r\n        }\r\n    } catch (DBException e) {\r\n        markStoreUnHealthy(e);\r\n        throw new IOException(e);\r\n    } finally {\r\n        if (iter != null) {\r\n            iter.close();\r\n        }\r\n    }\r\n    try {\r\n        for (String key : candidates) {\r\n            db.delete(bytes(key));\r\n        }\r\n    } catch (DBException e) {\r\n        markStoreUnHealthy(e);\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "initStorage",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void initStorage(Configuration conf) throws IOException\n{\r\n    db = openDatabase(conf);\r\n    checkVersion();\r\n    startCompactionTimer(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "openDatabase",
  "errType" : [ "NativeDB.DBException", "DBException" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "DB openDatabase(Configuration conf) throws IOException\n{\r\n    Path storeRoot = createStorageDir(conf);\r\n    Options options = new Options();\r\n    options.createIfMissing(false);\r\n    LOG.info(\"Using state database at \" + storeRoot + \" for recovery\");\r\n    File dbfile = new File(storeRoot.toString());\r\n    try {\r\n        db = JniDBFactory.factory.open(dbfile, options);\r\n    } catch (NativeDB.DBException e) {\r\n        if (e.isNotFound() || e.getMessage().contains(\" does not exist \")) {\r\n            LOG.info(\"Creating state database at \" + dbfile);\r\n            isNewlyCreated = true;\r\n            options.createIfMissing(true);\r\n            try {\r\n                db = JniDBFactory.factory.open(dbfile, options);\r\n                storeVersion();\r\n            } catch (DBException dbErr) {\r\n                throw new IOException(dbErr.getMessage(), dbErr);\r\n            }\r\n        } else {\r\n            throw e;\r\n        }\r\n    }\r\n    return db;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "createStorageDir",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Path createStorageDir(Configuration conf) throws IOException\n{\r\n    final String storeUri = conf.get(YarnConfiguration.NM_RECOVERY_DIR);\r\n    if (storeUri == null) {\r\n        throw new IOException(\"No store location directory configured in \" + YarnConfiguration.NM_RECOVERY_DIR);\r\n    }\r\n    Path root = new Path(storeUri, DB_NAME);\r\n    FileSystem fs = FileSystem.getLocal(conf);\r\n    fs.mkdirs(root, new FsPermission((short) 0700));\r\n    return root;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "startCompactionTimer",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void startCompactionTimer(Configuration conf)\n{\r\n    long intervalMsec = conf.getLong(YarnConfiguration.NM_RECOVERY_COMPACTION_INTERVAL_SECS, YarnConfiguration.DEFAULT_NM_RECOVERY_COMPACTION_INTERVAL_SECS) * 1000;\r\n    if (intervalMsec > 0) {\r\n        compactionTimer = new Timer(this.getClass().getSimpleName() + \" compaction timer\", true);\r\n        compactionTimer.schedule(new CompactionTimerTask(), intervalMsec, intervalMsec);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadVersion",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Version loadVersion() throws IOException\n{\r\n    byte[] data = db.get(bytes(DB_SCHEMA_VERSION_KEY));\r\n    if (data == null || data.length == 0) {\r\n        return getCurrentVersion();\r\n    }\r\n    Version version = new VersionPBImpl(VersionProto.parseFrom(data));\r\n    return version;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeVersion",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void storeVersion() throws IOException\n{\r\n    dbStoreVersion(CURRENT_VERSION_INFO);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeVersion",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void storeVersion(Version state) throws IOException\n{\r\n    dbStoreVersion(state);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "dbStoreVersion",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void dbStoreVersion(Version state) throws IOException\n{\r\n    String key = DB_SCHEMA_VERSION_KEY;\r\n    byte[] data = ((VersionPBImpl) state).getProto().toByteArray();\r\n    try {\r\n        db.put(bytes(key), data);\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "getCurrentVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Version getCurrentVersion()\n{\r\n    return CURRENT_VERSION_INFO;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "getDB",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "DB getDB()\n{\r\n    return db;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "setDB",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDB(DB testDb)\n{\r\n    this.db = testDb;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "checkVersion",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void checkVersion() throws IOException\n{\r\n    Version loadedVersion = loadVersion();\r\n    LOG.info(\"Loaded NM state version info \" + loadedVersion);\r\n    if (loadedVersion.equals(getCurrentVersion())) {\r\n        return;\r\n    }\r\n    if (loadedVersion.isCompatibleTo(getCurrentVersion())) {\r\n        LOG.info(\"Storing NM state version info \" + getCurrentVersion());\r\n        storeVersion();\r\n    } else {\r\n        throw new IOException(\"Incompatible version for NM state: expecting NM state version \" + getCurrentVersion() + \", but loading version \" + loadedVersion);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "newResourceLocalizationSpec",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "ResourceLocalizationSpec newResourceLocalizationSpec(LocalResource rsrc, Path path)\n{\r\n    URL local = URL.fromPath(path);\r\n    ResourceLocalizationSpec resourceLocalizationSpec = Records.newRecord(ResourceLocalizationSpec.class);\r\n    resourceLocalizationSpec.setDestinationDirectory(local);\r\n    resourceLocalizationSpec.setResource(rsrc);\r\n    return resourceLocalizationSpec;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\loghandler",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    this.deleteDelaySeconds = conf.getLong(YarnConfiguration.NM_LOG_RETAIN_SECONDS, YarnConfiguration.DEFAULT_NM_LOG_RETAIN_SECONDS);\r\n    sched = createScheduledThreadPoolExecutor(conf);\r\n    super.serviceInit(conf);\r\n    recover();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\loghandler",
  "methodName" : "serviceStop",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    if (sched != null) {\r\n        sched.shutdown();\r\n        boolean isShutdown = false;\r\n        try {\r\n            isShutdown = sched.awaitTermination(10, TimeUnit.SECONDS);\r\n        } catch (InterruptedException e) {\r\n            sched.shutdownNow();\r\n            isShutdown = true;\r\n        }\r\n        if (!isShutdown) {\r\n            sched.shutdownNow();\r\n        }\r\n    }\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\loghandler",
  "methodName" : "getLocalFileContext",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FileContext getLocalFileContext(Configuration conf)\n{\r\n    try {\r\n        return FileContext.getLocalFSFileContext(conf);\r\n    } catch (IOException e) {\r\n        throw new YarnRuntimeException(\"Failed to access local fs\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\loghandler",
  "methodName" : "recover",
  "errType" : [ "RejectedExecutionException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void recover() throws IOException\n{\r\n    if (stateStore.canRecover()) {\r\n        RecoveredLogDeleterState state = stateStore.loadLogDeleterState();\r\n        long now = System.currentTimeMillis();\r\n        for (Map.Entry<ApplicationId, LogDeleterProto> entry : state.getLogDeleterMap().entrySet()) {\r\n            ApplicationId appId = entry.getKey();\r\n            LogDeleterProto proto = entry.getValue();\r\n            long deleteDelayMsec = proto.getDeletionTime() - now;\r\n            LOG.debug(\"Scheduling deletion of {} logs in {} msec\", appId, deleteDelayMsec);\r\n            LogDeleterRunnable logDeleter = new LogDeleterRunnable(proto.getUser(), appId);\r\n            try {\r\n                sched.schedule(logDeleter, deleteDelayMsec, TimeUnit.MILLISECONDS);\r\n            } catch (RejectedExecutionException e) {\r\n                logDeleter.run();\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\loghandler",
  "methodName" : "handle",
  "errType" : [ "IOException", "RejectedExecutionException" ],
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void handle(LogHandlerEvent event)\n{\r\n    switch(event.getType()) {\r\n        case APPLICATION_STARTED:\r\n            LogHandlerAppStartedEvent appStartedEvent = (LogHandlerAppStartedEvent) event;\r\n            this.appOwners.put(appStartedEvent.getApplicationId(), appStartedEvent.getUser());\r\n            this.dispatcher.getEventHandler().handle(new ApplicationEvent(appStartedEvent.getApplicationId(), ApplicationEventType.APPLICATION_LOG_HANDLING_INITED));\r\n            break;\r\n        case CONTAINER_FINISHED:\r\n            break;\r\n        case APPLICATION_FINISHED:\r\n            LogHandlerAppFinishedEvent appFinishedEvent = (LogHandlerAppFinishedEvent) event;\r\n            ApplicationId appId = appFinishedEvent.getApplicationId();\r\n            LOG.info(\"Scheduling Log Deletion for application: \" + appId + \", with delay of \" + this.deleteDelaySeconds + \" seconds\");\r\n            String user = appOwners.remove(appId);\r\n            if (user == null) {\r\n                LOG.error(\"Unable to locate user for \" + appId);\r\n                NonAggregatingLogHandler.this.dispatcher.getEventHandler().handle(new ApplicationEvent(appId, ApplicationEventType.APPLICATION_LOG_HANDLING_FAILED));\r\n                break;\r\n            }\r\n            LogDeleterRunnable logDeleter = new LogDeleterRunnable(user, appId);\r\n            long deletionTimestamp = System.currentTimeMillis() + this.deleteDelaySeconds * 1000;\r\n            LogDeleterProto deleterProto = LogDeleterProto.newBuilder().setUser(user).setDeletionTime(deletionTimestamp).build();\r\n            try {\r\n                stateStore.storeLogDeleter(appId, deleterProto);\r\n            } catch (IOException e) {\r\n                LOG.error(\"Unable to record log deleter state\", e);\r\n            }\r\n            try {\r\n                sched.schedule(logDeleter, this.deleteDelaySeconds, TimeUnit.SECONDS);\r\n            } catch (RejectedExecutionException e) {\r\n                logDeleter.run();\r\n            }\r\n            break;\r\n        default:\r\n            ;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\loghandler",
  "methodName" : "getInvalidTokenApps",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<ApplicationId> getInvalidTokenApps()\n{\r\n    return Collections.emptySet();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\loghandler",
  "methodName" : "createScheduledThreadPoolExecutor",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ScheduledThreadPoolExecutor createScheduledThreadPoolExecutor(Configuration conf)\n{\r\n    ThreadFactory tf = new ThreadFactoryBuilder().setNameFormat(\"LogDeleter #%d\").build();\r\n    sched = new HadoopScheduledThreadPoolExecutor(conf.getInt(YarnConfiguration.NM_LOG_DELETION_THREADS_COUNT, YarnConfiguration.DEFAULT_NM_LOG_DELETE_THREAD_COUNT), tf);\r\n    return sched;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "setConf",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setConf(Configuration conf)\n{\r\n    this.conf = conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "getConf",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Configuration getConf()\n{\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "initConfig",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void initConfig() throws IOException\n{\r\n    this.cgroupPrefix = conf.get(YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_HIERARCHY, \"/hadoop-yarn\");\r\n    this.cGroupsMountConfig = new CGroupsMountConfig(conf);\r\n    this.deleteCgroupTimeout = conf.getLong(YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_DELETE_TIMEOUT, YarnConfiguration.DEFAULT_NM_LINUX_CONTAINER_CGROUPS_DELETE_TIMEOUT);\r\n    this.deleteCgroupDelay = conf.getLong(YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_DELETE_DELAY, YarnConfiguration.DEFAULT_NM_LINUX_CONTAINER_CGROUPS_DELETE_DELAY);\r\n    if (cgroupPrefix.charAt(0) == '/') {\r\n        cgroupPrefix = cgroupPrefix.substring(1);\r\n    }\r\n    this.strictResourceUsageMode = conf.getBoolean(YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE, YarnConfiguration.DEFAULT_NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE);\r\n    int len = cgroupPrefix.length();\r\n    if (cgroupPrefix.charAt(len - 1) == '/') {\r\n        cgroupPrefix = cgroupPrefix.substring(0, len - 1);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void init(LinuxContainerExecutor lce) throws IOException\n{\r\n    this.init(lce, ResourceCalculatorPlugin.getResourceCalculatorPlugin(null, conf));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void init(LinuxContainerExecutor lce, ResourceCalculatorPlugin plugin) throws IOException\n{\r\n    initConfig();\r\n    if (cGroupsMountConfig.mountEnabledAndMountPathDefined()) {\r\n        ArrayList<String> cgroupKVs = new ArrayList<String>();\r\n        cgroupKVs.add(CONTROLLER_CPU + \"=\" + cGroupsMountConfig.getMountPath() + \"/\" + CONTROLLER_CPU);\r\n        lce.mountCgroups(cgroupKVs, cgroupPrefix);\r\n    }\r\n    initializeControllerPaths();\r\n    nodeVCores = NodeManagerHardwareUtils.getVCores(plugin, conf);\r\n    yarnProcessors = NodeManagerHardwareUtils.getContainersCPUs(plugin, conf);\r\n    int systemProcessors = NodeManagerHardwareUtils.getNodeCPUs(plugin, conf);\r\n    if (systemProcessors != (int) yarnProcessors) {\r\n        LOG.info(\"YARN containers restricted to \" + yarnProcessors + \" cores\");\r\n        int[] limits = getOverallLimits(yarnProcessors);\r\n        updateCgroup(CONTROLLER_CPU, \"\", CPU_PERIOD_US, String.valueOf(limits[0]));\r\n        updateCgroup(CONTROLLER_CPU, \"\", CPU_QUOTA_US, String.valueOf(limits[1]));\r\n    } else if (CGroupsCpuResourceHandlerImpl.cpuLimitsExist(pathForCgroup(CONTROLLER_CPU, \"\"))) {\r\n        LOG.info(\"Removing CPU constraints for YARN containers.\");\r\n        updateCgroup(CONTROLLER_CPU, \"\", CPU_QUOTA_US, String.valueOf(-1));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "getOverallLimits",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int[] getOverallLimits(float yarnProcessorsArg)\n{\r\n    return CGroupsCpuResourceHandlerImpl.getOverallLimits(yarnProcessorsArg);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "isCpuWeightEnabled",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isCpuWeightEnabled()\n{\r\n    return this.cpuWeightEnabled;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "pathForCgroup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String pathForCgroup(String controller, String groupName)\n{\r\n    String controllerPath = controllerPaths.get(controller);\r\n    return controllerPath + \"/\" + cgroupPrefix + \"/\" + groupName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "createCgroup",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void createCgroup(String controller, String groupName) throws IOException\n{\r\n    String path = pathForCgroup(controller, groupName);\r\n    LOG.debug(\"createCgroup: {}\", path);\r\n    if (!new File(path).mkdir()) {\r\n        throw new IOException(\"Failed to create cgroup at \" + path);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "updateCgroup",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void updateCgroup(String controller, String groupName, String param, String value) throws IOException\n{\r\n    String path = pathForCgroup(controller, groupName);\r\n    param = controller + \".\" + param;\r\n    LOG.debug(\"updateCgroup: {}: {}={}\", path, param, value);\r\n    PrintWriter pw = null;\r\n    try {\r\n        File file = new File(path + \"/\" + param);\r\n        Writer w = new OutputStreamWriter(new FileOutputStream(file), \"UTF-8\");\r\n        pw = new PrintWriter(w);\r\n        pw.write(value);\r\n    } catch (IOException e) {\r\n        throw new IOException(\"Unable to set \" + param + \"=\" + value + \" for cgroup at: \" + path, e);\r\n    } finally {\r\n        if (pw != null) {\r\n            boolean hasError = pw.checkError();\r\n            pw.close();\r\n            if (hasError) {\r\n                throw new IOException(\"Unable to set \" + param + \"=\" + value + \" for cgroup at: \" + path);\r\n            }\r\n            if (pw.checkError()) {\r\n                throw new IOException(\"Error while closing cgroup file \" + path);\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "logLineFromTasksFile",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void logLineFromTasksFile(File cgf)\n{\r\n    String str;\r\n    if (LOG.isDebugEnabled()) {\r\n        try (BufferedReader inl = new BufferedReader(new InputStreamReader(new FileInputStream(cgf + \"/tasks\"), \"UTF-8\"))) {\r\n            str = inl.readLine();\r\n            if (str != null) {\r\n                LOG.debug(\"First line in cgroup tasks file: {} {}\", cgf, str);\r\n            }\r\n        } catch (IOException e) {\r\n            LOG.warn(\"Failed to read cgroup tasks file. \", e);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "checkAndDeleteCgroup",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "boolean checkAndDeleteCgroup(File cgf) throws InterruptedException\n{\r\n    boolean deleted = false;\r\n    try (FileInputStream in = new FileInputStream(cgf + \"/tasks\")) {\r\n        if (in.read() == -1) {\r\n            Thread.sleep(deleteCgroupDelay);\r\n            deleted = cgf.delete();\r\n            if (!deleted) {\r\n                LOG.warn(\"Failed attempt to delete cgroup: \" + cgf);\r\n            }\r\n        } else {\r\n            logLineFromTasksFile(cgf);\r\n        }\r\n    } catch (IOException e) {\r\n        LOG.warn(\"Failed to read cgroup tasks file. \", e);\r\n    }\r\n    return deleted;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "deleteCgroup",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "boolean deleteCgroup(String cgroupPath)\n{\r\n    boolean deleted = false;\r\n    LOG.debug(\"deleteCgroup: {}\", cgroupPath);\r\n    long start = clock.getTime();\r\n    do {\r\n        try {\r\n            deleted = checkAndDeleteCgroup(new File(cgroupPath));\r\n            if (!deleted) {\r\n                Thread.sleep(deleteCgroupDelay);\r\n            }\r\n        } catch (InterruptedException ex) {\r\n        }\r\n    } while (!deleted && (clock.getTime() - start) < deleteCgroupTimeout);\r\n    if (!deleted) {\r\n        LOG.warn(\"Unable to delete cgroup at: \" + cgroupPath + \", tried to delete for \" + deleteCgroupTimeout + \"ms\");\r\n    }\r\n    return deleted;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "setupLimits",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void setupLimits(ContainerId containerId, Resource containerResource) throws IOException\n{\r\n    String containerName = containerId.toString();\r\n    if (isCpuWeightEnabled()) {\r\n        int containerVCores = containerResource.getVirtualCores();\r\n        createCgroup(CONTROLLER_CPU, containerName);\r\n        int cpuShares = CPU_DEFAULT_WEIGHT * containerVCores;\r\n        updateCgroup(CONTROLLER_CPU, containerName, \"shares\", String.valueOf(cpuShares));\r\n        if (strictResourceUsageMode) {\r\n            if (nodeVCores != containerVCores) {\r\n                float containerCPU = (containerVCores * yarnProcessors) / (float) nodeVCores;\r\n                int[] limits = getOverallLimits(containerCPU);\r\n                updateCgroup(CONTROLLER_CPU, containerName, CPU_PERIOD_US, String.valueOf(limits[0]));\r\n                updateCgroup(CONTROLLER_CPU, containerName, CPU_QUOTA_US, String.valueOf(limits[1]));\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "clearLimits",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void clearLimits(ContainerId containerId)\n{\r\n    if (isCpuWeightEnabled()) {\r\n        deleteCgroup(pathForCgroup(CONTROLLER_CPU, containerId.toString()));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "preExecute",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void preExecute(ContainerId containerId, Resource containerResource) throws IOException\n{\r\n    setupLimits(containerId, containerResource);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "postExecute",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void postExecute(ContainerId containerId)\n{\r\n    clearLimits(containerId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "getResourcesOption",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "String getResourcesOption(ContainerId containerId)\n{\r\n    String containerName = containerId.toString();\r\n    StringBuilder sb = new StringBuilder(\"cgroups=\");\r\n    if (isCpuWeightEnabled()) {\r\n        sb.append(pathForCgroup(CONTROLLER_CPU, containerName) + \"/tasks\");\r\n        sb.append(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR);\r\n    }\r\n    if (sb.charAt(sb.length() - 1) == PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR) {\r\n        sb.deleteCharAt(sb.length() - 1);\r\n    }\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "parseMtab",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "Map<String, Set<String>> parseMtab() throws IOException\n{\r\n    Map<String, Set<String>> ret = new HashMap<String, Set<String>>();\r\n    BufferedReader in = null;\r\n    Set<String> validCgroups = CGroupsHandler.CGroupController.getValidCGroups();\r\n    try {\r\n        FileInputStream fis = new FileInputStream(new File(getMtabFileName()));\r\n        in = new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\r\n        for (String str = in.readLine(); str != null; str = in.readLine()) {\r\n            Matcher m = MTAB_FILE_FORMAT.matcher(str);\r\n            boolean mat = m.find();\r\n            if (mat) {\r\n                String path = m.group(1);\r\n                String type = m.group(2);\r\n                String options = m.group(3);\r\n                if (type.equals(CGROUPS_FSTYPE)) {\r\n                    Set<String> cgroupList = new HashSet<>(Arrays.asList(options.split(\",\")));\r\n                    cgroupList.retainAll(validCgroups);\r\n                    ret.put(path, cgroupList);\r\n                }\r\n            }\r\n        }\r\n    } catch (IOException e) {\r\n        throw new IOException(\"Error while reading \" + getMtabFileName(), e);\r\n    } finally {\r\n        IOUtils.cleanupWithLogger(LOG, in);\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "findControllerInMtab",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "String findControllerInMtab(String controller, Map<String, Set<String>> entries)\n{\r\n    for (Entry<String, Set<String>> e : entries.entrySet()) {\r\n        if (e.getValue().contains(controller)) {\r\n            if (new File(e.getKey()).canRead()) {\r\n                return e.getKey();\r\n            } else {\r\n                LOG.warn(String.format(\"Skipping inaccessible cgroup mount point %s\", e.getKey()));\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "initializeControllerPaths",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void initializeControllerPaths() throws IOException\n{\r\n    String controllerPath;\r\n    Map<String, Set<String>> parsedMtab = null;\r\n    if (this.cGroupsMountConfig.mountDisabledButMountPathDefined()) {\r\n        parsedMtab = ResourceHandlerModule.parseConfiguredCGroupPath(this.cGroupsMountConfig.getMountPath());\r\n    }\r\n    if (parsedMtab == null) {\r\n        parsedMtab = parseMtab();\r\n    }\r\n    controllerPath = findControllerInMtab(CONTROLLER_CPU, parsedMtab);\r\n    if (controllerPath != null) {\r\n        File f = new File(controllerPath + \"/\" + this.cgroupPrefix);\r\n        if (FileUtil.canWrite(f)) {\r\n            controllerPaths.put(CONTROLLER_CPU, controllerPath);\r\n        } else {\r\n            throw new IOException(\"Not able to enforce cpu weights; cannot write \" + \"to cgroup at: \" + f.getPath());\r\n        }\r\n    } else {\r\n        throw new IOException(\"Not able to enforce cpu weights; cannot find \" + \"cgroup for cpu controller in \" + getMtabFileName());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "getMtabFileName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getMtabFileName()\n{\r\n    return MTAB_FILE;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "getControllerPaths",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<String, String> getControllerPaths()\n{\r\n    return Collections.unmodifiableMap(controllerPaths);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "ensureMountPathIsDefined",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean ensureMountPathIsDefined() throws ResourceHandlerException\n{\r\n    if (mountPath == null) {\r\n        throw new ResourceHandlerException(String.format(\"Cgroups mount path not specified in %s.\", YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_MOUNT_PATH));\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "isMountPathDefined",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isMountPathDefined()\n{\r\n    return mountPath != null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "isMountEnabled",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isMountEnabled()\n{\r\n    return enableMount;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "mountDisabledButMountPathDefined",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean mountDisabledButMountPathDefined()\n{\r\n    return !enableMount && mountPath != null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "mountEnabledAndMountPathDefined",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean mountEnabledAndMountPathDefined()\n{\r\n    return enableMount && mountPath != null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getMountPath",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getMountPath()\n{\r\n    return mountPath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String toString()\n{\r\n    return \"CGroupsMountConfig{\" + \"enableMount=\" + enableMount + \", mountPath='\" + mountPath + '\\'' + '}';\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getAppsToCleanup",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<ApplicationId> getAppsToCleanup()\n{\r\n    return this.appsToCleanup;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getReason",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Reason getReason()\n{\r\n    return reason;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\application",
  "methodName" : "getContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Container getContainer()\n{\r\n    return container;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "createWithEmptyValueSpecified",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "GpuDeviceSpecificationException createWithEmptyValueSpecified()\n{\r\n    return new GpuDeviceSpecificationException(YarnConfiguration.NM_GPU_ALLOWED_DEVICES + \" is set to an empty value! Please specify \" + YarnConfiguration.AUTOMATICALLY_DISCOVER_GPU_DEVICES + \" to enable auto-discovery or \" + \"please enter the GPU device IDs manually! \" + VALID_FORMAT_MESSAGE);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "createWithWrongValueSpecified",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GpuDeviceSpecificationException createWithWrongValueSpecified(String device, String configValue, Exception cause)\n{\r\n    final String message = createIllegalFormatMessage(device, configValue);\r\n    return new GpuDeviceSpecificationException(message, cause);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "createWithWrongValueSpecified",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GpuDeviceSpecificationException createWithWrongValueSpecified(String device, String configValue)\n{\r\n    final String message = createIllegalFormatMessage(device, configValue);\r\n    return new GpuDeviceSpecificationException(message);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "createWithDuplicateValueSpecified",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GpuDeviceSpecificationException createWithDuplicateValueSpecified(String device, String configValue)\n{\r\n    final String message = createDuplicateFormatMessage(device, configValue);\r\n    return new GpuDeviceSpecificationException(message);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "createIllegalFormatMessage",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String createIllegalFormatMessage(String device, String configValue)\n{\r\n    return String.format(\"Illegal format of individual GPU device: %s, \" + \"the whole config value was: '%s'! \" + VALID_FORMAT_MESSAGE, device, configValue);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "createDuplicateFormatMessage",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String createDuplicateFormatMessage(String device, String configValue)\n{\r\n    return String.format(\"GPU device %s\" + \" has a duplicate definition! \" + \"Please double-check the configuration \" + YarnConfiguration.NM_GPU_ALLOWED_DEVICES + \"! Current value of the configuration is: %s\", device, configValue);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "setDeviceResourceHandler",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDeviceResourceHandler(DeviceResourceHandlerImpl deviceResourceHandler)\n{\r\n    this.deviceResourceHandler = deviceResourceHandler;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "getDeviceMappingManager",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "DeviceMappingManager getDeviceMappingManager()\n{\r\n    return deviceMappingManager;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "getDevicePlugin",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "DevicePlugin getDevicePlugin()\n{\r\n    return devicePlugin;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "initialize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void initialize(Context context) throws YarnException\n{\r\n    deviceDockerCommandPlugin = new DeviceResourceDockerRuntimePluginImpl(resourceName, devicePlugin, this);\r\n    deviceResourceUpdater = new DeviceResourceUpdaterImpl(resourceName, devicePlugin);\r\n    LOG.info(resourceName + \" plugin adapter initialized\");\r\n    return;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "createResourceHandler",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourceHandler createResourceHandler(Context nmContext, CGroupsHandler cGroupsHandler, PrivilegedOperationExecutor privilegedOperationExecutor)\n{\r\n    this.deviceResourceHandler = new DeviceResourceHandlerImpl(resourceName, this, deviceMappingManager, cGroupsHandler, privilegedOperationExecutor, nmContext);\r\n    return deviceResourceHandler;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "getNodeResourceHandlerInstance",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeResourceUpdaterPlugin getNodeResourceHandlerInstance()\n{\r\n    return deviceResourceUpdater;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "cleanup",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void cleanup()\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "getDockerCommandPluginInstance",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "DockerCommandPlugin getDockerCommandPluginInstance()\n{\r\n    return deviceDockerCommandPlugin;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "getNMResourceInfo",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "NMResourceInfo getNMResourceInfo() throws YarnException\n{\r\n    List<Device> allowed = new ArrayList<>(deviceMappingManager.getAllAllowedDevices().get(resourceName));\r\n    List<AssignedDevice> assigned = new ArrayList<>();\r\n    Map<Device, ContainerId> assignedMap = deviceMappingManager.getAllUsedDevices().get(resourceName);\r\n    for (Map.Entry<Device, ContainerId> entry : assignedMap.entrySet()) {\r\n        assigned.add(new AssignedDevice(entry.getValue(), entry.getKey()));\r\n    }\r\n    return new NMDeviceResourceInfo(allowed, assigned);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "getDeviceResourceHandler",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "DeviceResourceHandlerImpl getDeviceResourceHandler()\n{\r\n    return deviceResourceHandler;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return DevicePluginAdapter.class.getName();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "initialize",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void initialize(Context context) throws YarnException\n{\r\n    validateExecutorConfig(context.getConf());\r\n    this.gpuDiscoverer.initialize(context.getConf(), new NvidiaBinaryHelper());\r\n    this.dockerCommandPlugin = GpuDockerCommandPluginFactory.createGpuDockerCommandPlugin(context.getConf());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "validateExecutorConfig",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void validateExecutorConfig(Configuration conf)\n{\r\n    Class<? extends ContainerExecutor> executorClass = conf.getClass(YarnConfiguration.NM_CONTAINER_EXECUTOR, DefaultContainerExecutor.class, ContainerExecutor.class);\r\n    if (executorClass.equals(DefaultContainerExecutor.class)) {\r\n        LOG.warn(\"Using GPU plugin with disabled LinuxContainerExecutor\" + \" is considered to be unsafe.\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "createResourceHandler",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourceHandler createResourceHandler(Context context, CGroupsHandler cGroupsHandler, PrivilegedOperationExecutor privilegedOperationExecutor)\n{\r\n    if (gpuResourceHandler == null) {\r\n        gpuResourceHandler = new GpuResourceHandlerImpl(context, cGroupsHandler, privilegedOperationExecutor, gpuDiscoverer);\r\n    }\r\n    return gpuResourceHandler;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "getNodeResourceHandlerInstance",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeResourceUpdaterPlugin getNodeResourceHandlerInstance()\n{\r\n    return resourceDiscoverHandler;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "cleanup",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void cleanup() throws YarnException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "getDockerCommandPluginInstance",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "DockerCommandPlugin getDockerCommandPluginInstance()\n{\r\n    return dockerCommandPlugin;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "getNMResourceInfo",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "NMResourceInfo getNMResourceInfo() throws YarnException\n{\r\n    final GpuDeviceInformation gpuDeviceInformation;\r\n    if (gpuDiscoverer.isAutoDiscoveryEnabled()) {\r\n        checkGpuResourceHandler();\r\n        checkErrorCount();\r\n        try {\r\n            gpuDeviceInformation = gpuDiscoverer.getGpuDeviceInformation();\r\n            numOfErrorExecutionSinceLastSucceed = 0;\r\n        } catch (YarnException e) {\r\n            LOG.error(e.getMessage(), e);\r\n            numOfErrorExecutionSinceLastSucceed++;\r\n            throw e;\r\n        }\r\n    } else {\r\n        gpuDeviceInformation = null;\r\n    }\r\n    GpuResourceAllocator gpuResourceAllocator = gpuResourceHandler.getGpuAllocator();\r\n    List<GpuDevice> totalGpus = gpuResourceAllocator.getAllowedGpus();\r\n    List<AssignedGpuDevice> assignedGpuDevices = gpuResourceAllocator.getAssignedGpus();\r\n    return new NMGpuResourceInfo(gpuDeviceInformation, totalGpus, assignedGpuDevices);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "checkGpuResourceHandler",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void checkGpuResourceHandler() throws YarnException\n{\r\n    if (gpuResourceHandler == null) {\r\n        String errorMsg = \"Linux Container Executor is not configured for the NodeManager. \" + \"To fully enable GPU feature on the node also set \" + YarnConfiguration.NM_CONTAINER_EXECUTOR + \" properly.\";\r\n        LOG.warn(errorMsg);\r\n        throw new YarnException(errorMsg);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "checkErrorCount",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void checkErrorCount() throws YarnException\n{\r\n    if (numOfErrorExecutionSinceLastSucceed == MAX_REPEATED_ERROR_ALLOWED) {\r\n        String msg = \"Failed to execute GPU device information detection script for \" + MAX_REPEATED_ERROR_ALLOWED + \" times, skip following executions.\";\r\n        LOG.error(msg);\r\n        throw new YarnException(msg);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return GpuResourcePlugin.class.getName();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "isManifestEnabled",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isManifestEnabled()\n{\r\n    return manifestEnabled;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "addService",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void addService(String name, AuxiliaryService service, AuxServiceRecord serviceRecord)\n{\r\n    LOG.info(\"Adding auxiliary service \" + serviceRecord.getName() + \" version \" + serviceRecord.getVersion());\r\n    serviceMap.put(name, service);\r\n    serviceRecordMap.put(name, serviceRecord);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "getServices",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Collection<AuxiliaryService> getServices()\n{\r\n    return Collections.unmodifiableCollection(serviceMap.values());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "getServiceRecords",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Collection<AuxServiceRecord> getServiceRecords()\n{\r\n    return Collections.unmodifiableCollection(serviceRecordMap.values());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "getMetaData",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Map<String, ByteBuffer> getMetaData()\n{\r\n    Map<String, ByteBuffer> metaClone = new HashMap<>(serviceMetaData.size());\r\n    synchronized (serviceMetaData) {\r\n        for (Entry<String, ByteBuffer> entry : serviceMetaData.entrySet()) {\r\n            metaClone.put(entry.getKey(), entry.getValue().duplicate());\r\n        }\r\n    }\r\n    return metaClone;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "createAuxServiceFromConfiguration",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "AuxiliaryService createAuxServiceFromConfiguration(AuxServiceRecord service)\n{\r\n    Configuration c = new Configuration(false);\r\n    c.set(CLASS_NAME, getClassName(service));\r\n    Class<? extends AuxiliaryService> sClass = c.getClass(CLASS_NAME, null, AuxiliaryService.class);\r\n    if (sClass == null) {\r\n        throw new YarnRuntimeException(\"No class defined for auxiliary \" + \"service\" + service.getName());\r\n    }\r\n    return ReflectionUtils.newInstance(sClass, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "createAuxServiceFromLocalClasspath",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "AuxiliaryService createAuxServiceFromLocalClasspath(AuxServiceRecord service, String appLocalClassPath, Configuration conf) throws IOException, ClassNotFoundException\n{\r\n    Preconditions.checkArgument(appLocalClassPath != null && !appLocalClassPath.isEmpty(), \"local classpath was null in createAuxServiceFromLocalClasspath\");\r\n    final String sName = service.getName();\r\n    final String className = getClassName(service);\r\n    if (service.getConfiguration() != null && service.getConfiguration().getFiles().size() > 0) {\r\n        throw new YarnRuntimeException(\"The aux service:\" + sName + \" has configured local classpath:\" + appLocalClassPath + \" and config files:\" + service.getConfiguration().getFiles() + \". Only one of them should be configured.\");\r\n    }\r\n    return AuxiliaryServiceWithCustomClassLoader.getInstance(conf, className, appLocalClassPath, getSystemClasses(service));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "createAuxService",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "AuxiliaryService createAuxService(AuxServiceRecord service, Configuration conf, boolean fromConfiguration) throws IOException, ClassNotFoundException\n{\r\n    final String sName = service.getName();\r\n    final String className = getClassName(service);\r\n    if (className == null || className.isEmpty()) {\r\n        throw new YarnRuntimeException(\"Class name not provided for auxiliary \" + \"service \" + sName);\r\n    }\r\n    if (fromConfiguration) {\r\n        final String appLocalClassPath = conf.get(String.format(YarnConfiguration.NM_AUX_SERVICES_CLASSPATH, sName));\r\n        if (appLocalClassPath != null && !appLocalClassPath.isEmpty()) {\r\n            return createAuxServiceFromLocalClasspath(service, appLocalClassPath, conf);\r\n        }\r\n    }\r\n    AuxServiceConfiguration serviceConf = service.getConfiguration();\r\n    List<Path> destFiles = new ArrayList<>();\r\n    if (serviceConf != null) {\r\n        List<AuxServiceFile> files = serviceConf.getFiles();\r\n        if (files != null) {\r\n            for (AuxServiceFile file : files) {\r\n                destFiles.add(maybeDownloadJars(sName, className, file.getSrcFile(), file.getType(), conf));\r\n            }\r\n        }\r\n    }\r\n    if (destFiles.size() > 0) {\r\n        LOG.info(\"The aux service:\" + sName + \" is using the custom classloader with classpath \" + destFiles);\r\n        return AuxiliaryServiceWithCustomClassLoader.getInstance(conf, className, StringUtils.join(File.pathSeparatorChar, destFiles), getSystemClasses(service));\r\n    } else {\r\n        return createAuxServiceFromConfiguration(service);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "maybeDownloadJars",
  "errType" : [ "IOException", "Exception" ],
  "containingMethodsNum" : 26,
  "sourceCodeText" : "Path maybeDownloadJars(String sName, String className, String remoteFile, AuxServiceFile.TypeEnum type, Configuration conf) throws IOException\n{\r\n    FileContext localLFS = getLocalFileContext(conf);\r\n    Path nmAuxDir = dirsHandler.getLocalPathForWrite(\".\" + Path.SEPARATOR + NM_AUX_SERVICE_DIR);\r\n    if (!localLFS.util().exists(nmAuxDir)) {\r\n        try {\r\n            localLFS.mkdir(nmAuxDir, NM_AUX_SERVICE_DIR_PERM, true);\r\n        } catch (IOException ex) {\r\n            throw new YarnRuntimeException(\"Fail to create dir:\" + nmAuxDir.toString(), ex);\r\n        }\r\n    }\r\n    Path src = new Path(remoteFile);\r\n    FileContext remoteLFS = getRemoteFileContext(src.toUri(), conf);\r\n    FileStatus scFileStatus = remoteLFS.getFileStatus(src);\r\n    if (!scFileStatus.getOwner().equals(this.userUGI.getShortUserName())) {\r\n        throw new YarnRuntimeException(\"The remote jarfile owner:\" + scFileStatus.getOwner() + \" is not the same as the NM user:\" + this.userUGI.getShortUserName() + \".\");\r\n    }\r\n    if ((scFileStatus.getPermission().toShort() & 0022) != 0) {\r\n        throw new YarnRuntimeException(\"The remote jarfile should not \" + \"be writable by group or others. \" + \"The current Permission is \" + scFileStatus.getPermission().toShort());\r\n    }\r\n    Path downloadDest = new Path(nmAuxDir, className + \"_\" + scFileStatus.getModificationTime());\r\n    Path targetDirPath = new Path(downloadDest, scFileStatus.getPath().getName());\r\n    FileStatus[] allSubDirs = localLFS.util().listStatus(nmAuxDir);\r\n    for (FileStatus sub : allSubDirs) {\r\n        if (sub.getPath().getName().equals(downloadDest.getName())) {\r\n            return targetDirPath;\r\n        } else {\r\n            if (sub.getPath().getName().contains(className) && !sub.getPath().getName().endsWith(DEL_SUFFIX)) {\r\n                Path delPath = new Path(sub.getPath().getParent(), sub.getPath().getName() + DEL_SUFFIX);\r\n                localLFS.rename(sub.getPath(), delPath);\r\n                LOG.info(\"delete old aux service jar dir:\" + delPath.toString());\r\n                FileDeletionTask deletionTask = new FileDeletionTask(this.delService, null, delPath, null);\r\n                this.delService.delete(deletionTask);\r\n            }\r\n        }\r\n    }\r\n    LocalResourceType srcType;\r\n    if (type == AuxServiceFile.TypeEnum.STATIC) {\r\n        srcType = LocalResourceType.FILE;\r\n    } else if (type == AuxServiceFile.TypeEnum.ARCHIVE) {\r\n        srcType = LocalResourceType.ARCHIVE;\r\n    } else {\r\n        throw new YarnRuntimeException(\"Cannot unpack file of type \" + type + \" from remote-file-path:\" + src + \"for aux-service:\" + \".\\n\");\r\n    }\r\n    LocalResource scRsrc = LocalResource.newInstance(URL.fromURI(src.toUri()), srcType, LocalResourceVisibility.PRIVATE, scFileStatus.getLen(), scFileStatus.getModificationTime());\r\n    FSDownload download = new FSDownload(localLFS, null, conf, downloadDest, scRsrc, null);\r\n    try {\r\n        return download.call();\r\n    } catch (Exception ex) {\r\n        throw new YarnRuntimeException(\"Exception happend while downloading files \" + \"for aux-service:\" + sName + \" and remote-file-path:\" + src + \".\\n\" + ex.getMessage());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "setStateStoreDir",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setStateStoreDir(String sName, AuxiliaryService s) throws IOException\n{\r\n    if (stateStoreRoot != null) {\r\n        Path storePath = new Path(stateStoreRoot, sName);\r\n        stateStoreFs.mkdirs(storePath, storeDirPerms);\r\n        s.setRecoveryPath(storePath);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "maybeRemoveAuxService",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void maybeRemoveAuxService(String sName)\n{\r\n    AuxiliaryService s;\r\n    s = serviceMap.remove(sName);\r\n    serviceRecordMap.remove(sName);\r\n    serviceMetaData.remove(sName);\r\n    if (s != null) {\r\n        LOG.info(\"Removing aux service \" + sName);\r\n        stopAuxService(s);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "initAuxService",
  "errType" : [ "RuntimeException", "ClassNotFoundException" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "AuxiliaryService initAuxService(AuxServiceRecord service, Configuration conf, boolean fromConfiguration) throws IOException\n{\r\n    final String sName = service.getName();\r\n    AuxiliaryService s;\r\n    try {\r\n        Preconditions.checkArgument(validateAuxServiceName(sName), \"The auxiliary service name: \" + sName + \" is invalid. \" + \"The valid service name should only contain a-zA-Z0-9_ \" + \"and cannot start with numbers.\");\r\n        s = createAuxService(service, conf, fromConfiguration);\r\n        if (s == null) {\r\n            throw new YarnRuntimeException(\"No auxiliary service class loaded for\" + \" \" + sName);\r\n        }\r\n        if (!sName.equals(s.getName())) {\r\n            LOG.warn(\"The Auxiliary Service named '\" + sName + \"' in the \" + \"configuration is for \" + s.getClass() + \" which has \" + \"a name of '\" + s.getName() + \"'. Because these are \" + \"not the same tools trying to send ServiceData and read \" + \"Service Meta Data may have issues unless the refer to \" + \"the name in the config.\");\r\n        }\r\n        s.setAuxiliaryLocalPathHandler(auxiliaryLocalPathHandler);\r\n        setStateStoreDir(sName, s);\r\n        Configuration customConf = new Configuration(conf);\r\n        if (service.getConfiguration() != null) {\r\n            for (Entry<String, String> entry : service.getConfiguration().getProperties().entrySet()) {\r\n                customConf.set(entry.getKey(), entry.getValue());\r\n            }\r\n        }\r\n        s.init(customConf);\r\n        LOG.info(\"Initialized auxiliary service \" + sName);\r\n    } catch (RuntimeException e) {\r\n        LOG.error(\"Failed to initialize \" + sName, e);\r\n        throw e;\r\n    } catch (ClassNotFoundException e) {\r\n        throw new YarnRuntimeException(e);\r\n    }\r\n    return s;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "reloadManifest",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void reloadManifest() throws IOException\n{\r\n    loadManifest(getConfig(), true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "reload",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void reload(AuxServiceRecords services) throws IOException\n{\r\n    if (!manifestEnabled) {\r\n        throw new IOException(\"Dynamic reloading is not enabled via \" + YarnConfiguration.NM_AUX_SERVICES_MANIFEST_ENABLED);\r\n    }\r\n    if (getServiceState() != Service.STATE.STARTED) {\r\n        throw new IOException(\"Auxiliary services have not been started yet, \" + \"please retry later\");\r\n    }\r\n    LOG.info(\"Received list of auxiliary services: \" + mapper.writeValueAsString(services));\r\n    loadServices(services, getConfig(), true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "checkManifestPermissions",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean checkManifestPermissions(FileStatus status) throws IOException\n{\r\n    if ((status.getPermission().toShort() & 0022) != 0) {\r\n        LOG.error(\"Manifest file and parents must not be writable by group or \" + \"others. The current Permission of \" + status.getPath() + \" is \" + status.getPermission());\r\n        return false;\r\n    }\r\n    Path parent = status.getPath().getParent();\r\n    if (parent == null) {\r\n        return true;\r\n    }\r\n    return checkManifestPermissions(manifestFS.getFileStatus(parent));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "checkManifestOwnerAndPermissions",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean checkManifestOwnerAndPermissions(FileStatus status) throws IOException\n{\r\n    AccessControlList yarnAdminAcl = new AccessControlList(getConfig().get(YarnConfiguration.YARN_ADMIN_ACL, YarnConfiguration.DEFAULT_YARN_ADMIN_ACL));\r\n    if (!yarnAdminAcl.isUserAllowed(UserGroupInformation.createRemoteUser(status.getOwner()))) {\r\n        LOG.error(\"Manifest must be owned by YARN admin: \" + manifest);\r\n        return false;\r\n    }\r\n    return checkManifestPermissions(status);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "maybeReadManifestFile",
  "errType" : [ "FileNotFoundException" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "AuxServiceRecords maybeReadManifestFile() throws IOException\n{\r\n    if (manifest == null) {\r\n        return null;\r\n    }\r\n    if (!manifestFS.exists(manifest)) {\r\n        LOG.warn(\"Manifest file \" + manifest + \" doesn't exist\");\r\n        return null;\r\n    }\r\n    FileStatus status;\r\n    try {\r\n        status = manifestFS.getFileStatus(manifest);\r\n    } catch (FileNotFoundException e) {\r\n        LOG.warn(\"Manifest file \" + manifest + \" doesn't exist\");\r\n        return null;\r\n    }\r\n    if (!status.isFile()) {\r\n        LOG.warn(\"Manifest file \" + manifest + \" is not a file\");\r\n    }\r\n    if (!checkManifestOwnerAndPermissions(status)) {\r\n        return null;\r\n    }\r\n    if (status.getModificationTime() == manifestModifyTS) {\r\n        return null;\r\n    }\r\n    manifestModifyTS = status.getModificationTime();\r\n    LOG.info(\"Reading auxiliary services manifest \" + manifest);\r\n    try (FSDataInputStream in = manifestFS.open(manifest)) {\r\n        return mapper.readValue((InputStream) in, AuxServiceRecords.class);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "loadManifest",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void loadManifest(Configuration conf, boolean startServices) throws IOException\n{\r\n    if (!manifestEnabled) {\r\n        throw new IOException(\"Dynamic reloading is not enabled via \" + YarnConfiguration.NM_AUX_SERVICES_MANIFEST_ENABLED);\r\n    }\r\n    if (manifest == null) {\r\n        return;\r\n    }\r\n    if (!manifestFS.exists(manifest)) {\r\n        if (serviceMap.isEmpty()) {\r\n            return;\r\n        }\r\n        LOG.info(\"Manifest file \" + manifest + \" doesn't exist, stopping \" + \"auxiliary services\");\r\n        Set<String> servicesToRemove = new HashSet<>(serviceMap.keySet());\r\n        for (String sName : servicesToRemove) {\r\n            maybeRemoveAuxService(sName);\r\n        }\r\n        return;\r\n    }\r\n    AuxServiceRecords services = maybeReadManifestFile();\r\n    loadServices(services, conf, startServices);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "loadServices",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void loadServices(AuxServiceRecords services, Configuration conf, boolean startServices) throws IOException\n{\r\n    if (services == null) {\r\n        return;\r\n    }\r\n    Set<String> loadedAuxServices = new HashSet<>();\r\n    boolean foundChanges = false;\r\n    if (services.getServices() != null) {\r\n        for (AuxServiceRecord service : services.getServices()) {\r\n            AuxServiceRecord existingService = serviceRecordMap.get(service.getName());\r\n            loadedAuxServices.add(service.getName());\r\n            if (existingService != null && existingService.equals(service)) {\r\n                LOG.debug(\"Auxiliary service already loaded: {}\", service.getName());\r\n                continue;\r\n            }\r\n            foundChanges = true;\r\n            try {\r\n                maybeRemoveAuxService(service.getName());\r\n                AuxiliaryService s = initAuxService(service, conf, false);\r\n                if (startServices) {\r\n                    startAuxService(service.getName(), s, service);\r\n                }\r\n                addService(service.getName(), s, service);\r\n            } catch (IOException e) {\r\n                LOG.error(\"Failed to load auxiliary service \" + service.getName());\r\n            }\r\n        }\r\n    }\r\n    Set<String> servicesToRemove = new HashSet<>(serviceMap.keySet());\r\n    servicesToRemove.removeAll(loadedAuxServices);\r\n    for (String sName : servicesToRemove) {\r\n        foundChanges = true;\r\n        maybeRemoveAuxService(sName);\r\n    }\r\n    if (!foundChanges) {\r\n        LOG.info(\"No auxiliary services changes detected\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "getClassName",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getClassName(AuxServiceRecord service)\n{\r\n    AuxServiceConfiguration serviceConf = service.getConfiguration();\r\n    if (serviceConf == null) {\r\n        return null;\r\n    }\r\n    return serviceConf.getProperty(CLASS_NAME);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "getSystemClasses",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String[] getSystemClasses(AuxServiceRecord service)\n{\r\n    AuxServiceConfiguration serviceConf = service.getConfiguration();\r\n    if (serviceConf == null || serviceConf.getProperty(SYSTEM_CLASSES) == null) {\r\n        return new String[] {};\r\n    }\r\n    return StringUtils.split(serviceConf.getProperty(SYSTEM_CLASSES));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "createServiceRecordFromConfiguration",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "AuxServiceRecord createServiceRecordFromConfiguration(String sName, Configuration conf)\n{\r\n    String className = conf.get(String.format(YarnConfiguration.NM_AUX_SERVICE_FMT, sName));\r\n    String remoteClassPath = conf.get(String.format(YarnConfiguration.NM_AUX_SERVICE_REMOTE_CLASSPATH, sName));\r\n    String[] systemClasses = conf.getTrimmedStrings(String.format(YarnConfiguration.NM_AUX_SERVICES_SYSTEM_CLASSES, sName));\r\n    AuxServiceConfiguration serviceConf = new AuxServiceConfiguration();\r\n    if (className != null) {\r\n        serviceConf.setProperty(CLASS_NAME, className);\r\n    }\r\n    if (systemClasses != null) {\r\n        serviceConf.setProperty(SYSTEM_CLASSES, StringUtils.join(\",\", systemClasses));\r\n    }\r\n    if (remoteClassPath != null) {\r\n        AuxServiceFile.TypeEnum type;\r\n        String lcClassPath = StringUtils.toLowerCase(remoteClassPath);\r\n        if (lcClassPath.endsWith(\".jar\")) {\r\n            type = AuxServiceFile.TypeEnum.STATIC;\r\n        } else if (lcClassPath.endsWith(\".zip\") || lcClassPath.endsWith(\".tar.gz\") || lcClassPath.endsWith(\".tgz\") || lcClassPath.endsWith(\".tar\")) {\r\n            type = AuxServiceFile.TypeEnum.ARCHIVE;\r\n        } else {\r\n            throw new YarnRuntimeException(\"Cannot unpack file from \" + \"remote-file-path:\" + remoteClassPath + \"for aux-service:\" + sName + \".\\n\");\r\n        }\r\n        AuxServiceFile file = new AuxServiceFile().srcFile(remoteClassPath).type(type);\r\n        serviceConf.getFiles().add(file);\r\n    }\r\n    return new AuxServiceRecord().name(sName).configuration(serviceConf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    boolean recoveryEnabled = conf.getBoolean(YarnConfiguration.NM_RECOVERY_ENABLED, YarnConfiguration.DEFAULT_NM_RECOVERY_ENABLED);\r\n    if (recoveryEnabled) {\r\n        stateStoreRoot = new Path(conf.get(YarnConfiguration.NM_RECOVERY_DIR), STATE_STORE_ROOT_NAME);\r\n        stateStoreFs = FileSystem.getLocal(conf);\r\n    }\r\n    manifestEnabled = conf.getBoolean(YarnConfiguration.NM_AUX_SERVICES_MANIFEST_ENABLED, YarnConfiguration.DEFAULT_NM_AUX_SERVICES_MANIFEST_ENABLED);\r\n    if (!manifestEnabled) {\r\n        Collection<String> auxNames = conf.getStringCollection(YarnConfiguration.NM_AUX_SERVICES);\r\n        for (final String sName : auxNames) {\r\n            AuxServiceRecord service = createServiceRecordFromConfiguration(sName, conf);\r\n            maybeRemoveAuxService(sName);\r\n            AuxiliaryService s = initAuxService(service, conf, true);\r\n            addService(sName, s, service);\r\n        }\r\n    } else {\r\n        String manifestStr = conf.get(YarnConfiguration.NM_AUX_SERVICES_MANIFEST);\r\n        if (manifestStr != null) {\r\n            manifest = new Path(manifestStr);\r\n            manifestFS = FileSystem.get(new URI(manifestStr), conf);\r\n            loadManifest(conf, false);\r\n            manifestReloadInterval = conf.getLong(YarnConfiguration.NM_AUX_SERVICES_MANIFEST_RELOAD_MS, YarnConfiguration.DEFAULT_NM_AUX_SERVICES_MANIFEST_RELOAD_MS);\r\n            manifestReloadTask = new ManifestReloadTask();\r\n        } else {\r\n            LOG.info(\"Auxiliary services manifest is enabled, but no manifest \" + \"file is specified in the configuration.\");\r\n        }\r\n    }\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "startAuxService",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void startAuxService(String name, AuxiliaryService service, AuxServiceRecord serviceRecord)\n{\r\n    service.start();\r\n    service.registerServiceListener(this);\r\n    ByteBuffer meta = service.getMetaData();\r\n    if (meta != null) {\r\n        serviceMetaData.put(name, meta);\r\n    }\r\n    serviceRecord.setLaunchTime(new Date());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "stopAuxService",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void stopAuxService(Service service)\n{\r\n    if (service.getServiceState() == Service.STATE.STARTED) {\r\n        service.unregisterServiceListener(this);\r\n        service.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    for (Map.Entry<String, AuxiliaryService> entry : serviceMap.entrySet()) {\r\n        AuxiliaryService service = entry.getValue();\r\n        String name = entry.getKey();\r\n        startAuxService(name, service, serviceRecordMap.get(name));\r\n    }\r\n    if (manifestEnabled && manifest != null && manifestReloadInterval > 0) {\r\n        LOG.info(\"Scheduling reloading auxiliary services manifest file at \" + \"interval \" + manifestReloadInterval + \" ms\");\r\n        manifestReloadTimer = new Timer(\"AuxServicesManifestReload-Timer\", true);\r\n        manifestReloadTimer.schedule(manifestReloadTask, manifestReloadInterval, manifestReloadInterval);\r\n    }\r\n    super.serviceStart();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    try {\r\n        for (Service service : serviceMap.values()) {\r\n            stopAuxService(service);\r\n        }\r\n        serviceMap.clear();\r\n        serviceRecordMap.clear();\r\n        serviceMetaData.clear();\r\n        if (manifestFS != null) {\r\n            manifestFS.close();\r\n        }\r\n        if (manifestReloadTimer != null) {\r\n            manifestReloadTimer.cancel();\r\n        }\r\n    } finally {\r\n        super.serviceStop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "stateChanged",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void stateChanged(Service service)\n{\r\n    LOG.info(\"Service \" + service.getName() + \" changed state: \" + service.getServiceState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "handle",
  "errType" : [ "Throwable", "Throwable", "Throwable", "Throwable" ],
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void handle(AuxServicesEvent event)\n{\r\n    LOG.info(\"Got event \" + event.getType() + \" for appId \" + event.getApplicationID());\r\n    switch(event.getType()) {\r\n        case APPLICATION_INIT:\r\n            LOG.info(\"Got APPLICATION_INIT for service \" + event.getServiceID());\r\n            AuxiliaryService service = null;\r\n            try {\r\n                service = serviceMap.get(event.getServiceID());\r\n                service.initializeApplication(new ApplicationInitializationContext(event.getUser(), event.getApplicationID(), event.getServiceData()));\r\n            } catch (Throwable th) {\r\n                logWarningWhenAuxServiceThrowExceptions(service, AuxServicesEventType.APPLICATION_INIT, th);\r\n            }\r\n            break;\r\n        case APPLICATION_STOP:\r\n            for (AuxiliaryService serv : serviceMap.values()) {\r\n                try {\r\n                    serv.stopApplication(new ApplicationTerminationContext(event.getApplicationID()));\r\n                } catch (Throwable th) {\r\n                    logWarningWhenAuxServiceThrowExceptions(serv, AuxServicesEventType.APPLICATION_STOP, th);\r\n                }\r\n            }\r\n            break;\r\n        case CONTAINER_INIT:\r\n            for (AuxiliaryService serv : serviceMap.values()) {\r\n                try {\r\n                    serv.initializeContainer(new ContainerInitializationContext(event.getContainer().getUser(), event.getContainer().getContainerId(), event.getContainer().getResource(), event.getContainer().getContainerTokenIdentifier().getContainerType()));\r\n                } catch (Throwable th) {\r\n                    logWarningWhenAuxServiceThrowExceptions(serv, AuxServicesEventType.CONTAINER_INIT, th);\r\n                }\r\n            }\r\n            break;\r\n        case CONTAINER_STOP:\r\n            for (AuxiliaryService serv : serviceMap.values()) {\r\n                try {\r\n                    serv.stopContainer(new ContainerTerminationContext(event.getUser(), event.getContainer().getContainerId(), event.getContainer().getResource(), event.getContainer().getContainerTokenIdentifier().getContainerType()));\r\n                } catch (Throwable th) {\r\n                    logWarningWhenAuxServiceThrowExceptions(serv, AuxServicesEventType.CONTAINER_STOP, th);\r\n                }\r\n            }\r\n            break;\r\n        default:\r\n            throw new RuntimeException(\"Unknown type: \" + event.getType());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 4,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "validateAuxServiceName",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean validateAuxServiceName(String name)\n{\r\n    if (name == null || name.trim().isEmpty()) {\r\n        return false;\r\n    }\r\n    return p.matcher(name).matches();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "logWarningWhenAuxServiceThrowExceptions",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void logWarningWhenAuxServiceThrowExceptions(AuxiliaryService service, AuxServicesEventType eventType, Throwable th)\n{\r\n    LOG.warn((null == service ? \"The auxService is null\" : \"The auxService name is \" + service.getName()) + \" and it got an error at event: \" + eventType, th);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "getLocalFileContext",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FileContext getLocalFileContext(Configuration conf)\n{\r\n    try {\r\n        return FileContext.getLocalFSFileContext(conf);\r\n    } catch (IOException e) {\r\n        throw new YarnRuntimeException(\"Failed to access local fs\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "getRemoteFileContext",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FileContext getRemoteFileContext(final URI path, Configuration conf)\n{\r\n    try {\r\n        return FileContext.getFileContext(path, conf);\r\n    } catch (IOException e) {\r\n        throw new YarnRuntimeException(\"Failed to access remote fs\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "getRemoteUgi",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "UserGroupInformation getRemoteUgi()\n{\r\n    UserGroupInformation remoteUgi;\r\n    try {\r\n        remoteUgi = UserGroupInformation.getCurrentUser();\r\n    } catch (IOException e) {\r\n        String msg = \"Cannot obtain the user-name. Got exception: \" + StringUtils.stringifyException(e);\r\n        LOG.warn(msg);\r\n        throw new YarnRuntimeException(msg);\r\n    }\r\n    return remoteUgi;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "newAuxService",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "AuxServiceRecord newAuxService(String name, String className)\n{\r\n    AuxServiceConfiguration serviceConf = new AuxServiceConfiguration();\r\n    serviceConf.setProperty(CLASS_NAME, className);\r\n    return new AuxServiceRecord().name(name).configuration(serviceConf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "setClasspath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setClasspath(AuxServiceRecord service, String classpath)\n{\r\n    service.getConfiguration().getFiles().add(new AuxServiceFile().srcFile(classpath).type(AuxServiceFile.TypeEnum.STATIC));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "setSystemClasses",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setSystemClasses(AuxServiceRecord service, String systemClasses)\n{\r\n    service.getConfiguration().setProperty(SYSTEM_CLASSES, systemClasses);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\application",
  "methodName" : "getDiagnostic",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDiagnostic()\n{\r\n    return diagnostic;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "getDeviceFileType",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getDeviceFileType(String devName) throws IOException\n{\r\n    Shell.ShellCommandExecutor shexec = new Shell.ShellCommandExecutor(new String[] { \"stat\", \"-c\", \"%F\", devName });\r\n    shexec.execute();\r\n    return shexec.getOutput();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "existFile",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean existFile(String path)\n{\r\n    File searchFile = new File(path);\r\n    if (searchFile.exists()) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "add",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void add(AuxServiceRecord s)\n{\r\n    service.add(new AuxiliaryServiceInfo(s.getName(), s.getVersion(), s.getLaunchTime()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "addAll",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addAll(Collection<AuxServiceRecord> serviceList)\n{\r\n    for (AuxServiceRecord s : serviceList) {\r\n        add(s);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao",
  "methodName" : "getServices",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ArrayList<AuxiliaryServiceInfo> getServices()\n{\r\n    return service;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\security\\authorize",
  "methodName" : "getInstance",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NMPolicyProvider getInstance()\n{\r\n    if (nmPolicyProvider == null) {\r\n        synchronized (NMPolicyProvider.class) {\r\n            if (nmPolicyProvider == null) {\r\n                nmPolicyProvider = new NMPolicyProvider();\r\n            }\r\n        }\r\n    }\r\n    return nmPolicyProvider;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\security\\authorize",
  "methodName" : "getServices",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Service[] getServices()\n{\r\n    return NODE_MANAGER_SERVICES;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "getOriginalToken",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerTokenIdentifier getOriginalToken()\n{\r\n    return this.originalToken;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "getUpdatedToken",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerTokenIdentifier getUpdatedToken()\n{\r\n    return containerEvent.getUpdatedToken();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "isResourceChange",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isResourceChange()\n{\r\n    return containerEvent.isResourceChange();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "isExecTypeUpdate",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isExecTypeUpdate()\n{\r\n    return containerEvent.isExecTypeUpdate();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "isIncrease",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isIncrease()\n{\r\n    return containerEvent.isIncrease();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "initialize",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void initialize(Configuration configuration, Context nmCtx) throws ContainerExecutionException\n{\r\n    super.initialize(configuration, nmCtx);\r\n    this.conf = configuration;\r\n    this.nmContext = nmCtx;\r\n    imageTagToManifestPlugin = chooseImageTagToManifestPlugin();\r\n    imageTagToManifestPlugin.init(conf);\r\n    manifestToResourcesPlugin = chooseManifestToResourcesPlugin();\r\n    manifestToResourcesPlugin.init(conf);\r\n    mapper = new ObjectMapper();\r\n    defaultRuncImage = conf.get(YarnConfiguration.NM_RUNC_IMAGE_NAME);\r\n    allowedNetworks.clear();\r\n    allowedRuntimes.clear();\r\n    allowedNetworks.addAll(Arrays.asList(conf.getTrimmedStrings(YarnConfiguration.NM_RUNC_ALLOWED_CONTAINER_NETWORKS, YarnConfiguration.DEFAULT_NM_RUNC_ALLOWED_CONTAINER_NETWORKS)));\r\n    allowedRuntimes.addAll(Arrays.asList(conf.getTrimmedStrings(YarnConfiguration.NM_RUNC_ALLOWED_CONTAINER_RUNTIMES, YarnConfiguration.DEFAULT_NM_RUNC_ALLOWED_CONTAINER_RUNTIMES)));\r\n    privilegedContainersAcl = new AccessControlList(conf.getTrimmed(YarnConfiguration.NM_RUNC_PRIVILEGED_CONTAINERS_ACL, YarnConfiguration.DEFAULT_NM_RUNC_PRIVILEGED_CONTAINERS_ACL));\r\n    seccompProfile = conf.get(YarnConfiguration.NM_RUNC_SECCOMP_PROFILE);\r\n    defaultROMounts.addAll(Arrays.asList(conf.getTrimmedStrings(YarnConfiguration.NM_RUNC_DEFAULT_RO_MOUNTS)));\r\n    defaultRWMounts.addAll(Arrays.asList(conf.getTrimmedStrings(YarnConfiguration.NM_RUNC_DEFAULT_RW_MOUNTS)));\r\n    try {\r\n        if (seccompProfile != null) {\r\n            seccomp = new String(Files.readAllBytes(Paths.get(seccompProfile)), StandardCharsets.UTF_8);\r\n        }\r\n    } catch (IOException ioe) {\r\n        throw new ContainerExecutionException(ioe);\r\n    }\r\n    layersToKeep = conf.getInt(NM_RUNC_LAYER_MOUNTS_TO_KEEP, DEFAULT_NM_RUNC_LAYER_MOUNTS_TO_KEEP);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "start",
  "errType" : [ "Exception", "PrivilegedOperationException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void start()\n{\r\n    int reapRuncLayerMountsInterval = conf.getInt(NM_REAP_RUNC_LAYER_MOUNTS_INTERVAL, DEFAULT_NM_REAP_RUNC_LAYER_MOUNTS_INTERVAL);\r\n    exec = HadoopExecutors.newScheduledThreadPool(1);\r\n    exec.scheduleAtFixedRate(new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r\n            try {\r\n                PrivilegedOperation launchOp = new PrivilegedOperation(PrivilegedOperation.OperationType.REAP_RUNC_LAYER_MOUNTS);\r\n                launchOp.appendArgs(Integer.toString(layersToKeep));\r\n                try {\r\n                    String stdout = privilegedOperationExecutor.executePrivilegedOperation(null, launchOp, null, null, false, false);\r\n                    if (stdout != null) {\r\n                        LOG.info(\"Reap layer mounts thread: \" + stdout);\r\n                    }\r\n                } catch (PrivilegedOperationException e) {\r\n                    LOG.warn(\"Failed to reap old runc layer mounts\", e);\r\n                }\r\n            } catch (Exception e) {\r\n                LOG.warn(\"Reap layer mount thread caught an exception: \", e);\r\n            }\r\n        }\r\n    }, 0, reapRuncLayerMountsInterval, TimeUnit.SECONDS);\r\n    imageTagToManifestPlugin.start();\r\n    manifestToResourcesPlugin.start();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "stop",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void stop()\n{\r\n    exec.shutdownNow();\r\n    imageTagToManifestPlugin.stop();\r\n    manifestToResourcesPlugin.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "launchContainer",
  "errType" : [ "URISyntaxException", "IOException", "PrivilegedOperationException", "IOException" ],
  "containingMethodsNum" : 54,
  "sourceCodeText" : "void launchContainer(ContainerRuntimeContext ctx) throws ContainerExecutionException\n{\r\n    List<String> env = new ArrayList<>();\r\n    Container container = ctx.getContainer();\r\n    String runAsUser = ctx.getExecutionAttribute(RUN_AS_USER);\r\n    String user = ctx.getExecutionAttribute(USER);\r\n    ContainerId containerId = container.getContainerId();\r\n    ApplicationId appId = containerId.getApplicationAttemptId().getApplicationId();\r\n    Map<String, String> environment = container.getLaunchContext().getEnvironment();\r\n    ArrayList<OCIMount> mounts = new ArrayList<>();\r\n    ArrayList<OCILayer> layers = new ArrayList<>();\r\n    String hostname = environment.get(ENV_RUNC_CONTAINER_HOSTNAME);\r\n    validateHostname(hostname);\r\n    String containerIdStr = containerId.toString();\r\n    String applicationId = appId.toString();\r\n    Path containerWorkDir = ctx.getExecutionAttribute(CONTAINER_WORK_DIR);\r\n    RuncRuntimeObject runcRuntimeObject = container.getContainerRuntimeData(RuncRuntimeObject.class);\r\n    List<LocalResource> layerResources = runcRuntimeObject.getOCILayers();\r\n    ResourceLocalizationService localizationService = nmContext.getContainerManager().getResourceLocalizationService();\r\n    List<String> args = new ArrayList<>();\r\n    try {\r\n        try {\r\n            LocalResource rsrc = runcRuntimeObject.getConfig();\r\n            LocalResourceRequest req = new LocalResourceRequest(rsrc);\r\n            LocalizedResource localRsrc = localizationService.getLocalizedResource(req, user, appId);\r\n            if (localRsrc == null) {\r\n                throw new ContainerExecutionException(\"Could not successfully \" + \"localize layers. rsrc: \" + rsrc.getResource().getFile());\r\n            }\r\n            File file = new File(localRsrc.getLocalPath().toString());\r\n            List<String> imageEnv = extractImageEnv(file);\r\n            if (imageEnv != null && !imageEnv.isEmpty()) {\r\n                env.addAll(imageEnv);\r\n            }\r\n            List<String> entrypoint = extractImageEntrypoint(file);\r\n            if (entrypoint != null && !entrypoint.isEmpty()) {\r\n                args.addAll(entrypoint);\r\n            }\r\n        } catch (IOException ioe) {\r\n            throw new ContainerExecutionException(ioe);\r\n        }\r\n        for (LocalResource rsrc : layerResources) {\r\n            LocalResourceRequest req = new LocalResourceRequest(rsrc);\r\n            LocalizedResource localRsrc = localizationService.getLocalizedResource(req, user, appId);\r\n            OCILayer layer = new OCILayer(\"application/vnd.squashfs\", localRsrc.getLocalPath().toString());\r\n            layers.add(layer);\r\n        }\r\n    } catch (URISyntaxException e) {\r\n        throw new ContainerExecutionException(e);\r\n    }\r\n    setContainerMounts(mounts, ctx, containerWorkDir, environment);\r\n    String resourcesOpts = ctx.getExecutionAttribute(RESOURCES_OPTIONS);\r\n    Path nmPrivateContainerScriptPath = ctx.getExecutionAttribute(NM_PRIVATE_CONTAINER_SCRIPT_PATH);\r\n    Path nmPrivateTokensPath = ctx.getExecutionAttribute(NM_PRIVATE_TOKENS_PATH);\r\n    int cpuShares = container.getResource().getVirtualCores();\r\n    if (cpuShares < 2) {\r\n        cpuShares = 2;\r\n    }\r\n    Path launchDst = new Path(containerWorkDir, ContainerLaunch.CONTAINER_SCRIPT);\r\n    args.add(\"bash\");\r\n    args.add(launchDst.toUri().getPath());\r\n    String cgroupPath = getCgroupPath(resourcesOpts, \"runc-\" + containerIdStr);\r\n    String pidFile = ctx.getExecutionAttribute(PID_FILE_PATH).toString();\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<String> localDirs = ctx.getExecutionAttribute(LOCAL_DIRS);\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<String> logDirs = ctx.getExecutionAttribute(LOG_DIRS);\r\n    Path keystorePath = ctx.getExecutionAttribute(NM_PRIVATE_KEYSTORE_PATH);\r\n    Path truststorePath = ctx.getExecutionAttribute(NM_PRIVATE_TRUSTSTORE_PATH);\r\n    int https = 0;\r\n    String keystore = null;\r\n    String truststore = null;\r\n    if (keystorePath != null && truststorePath != null) {\r\n        https = 1;\r\n        keystore = keystorePath.toUri().getPath();\r\n        truststore = truststorePath.toUri().getPath();\r\n    }\r\n    OCIProcessConfig processConfig = createOCIProcessConfig(containerWorkDir.toString(), env, args);\r\n    OCILinuxConfig linuxConfig = createOCILinuxConfig(cpuShares, cgroupPath, seccomp);\r\n    OCIRuntimeConfig ociRuntimeConfig = new OCIRuntimeConfig(null, mounts, processConfig, hostname, null, null, linuxConfig);\r\n    RuncContainerExecutorConfig runcContainerExecutorConfig = createRuncContainerExecutorConfig(runAsUser, user, containerIdStr, applicationId, pidFile, nmPrivateContainerScriptPath.toString(), nmPrivateTokensPath.toString(), https, keystore, truststore, localDirs, logDirs, layers, ociRuntimeConfig);\r\n    String commandFile = writeCommandToFile(runcContainerExecutorConfig, container);\r\n    PrivilegedOperation launchOp = new PrivilegedOperation(PrivilegedOperation.OperationType.RUN_RUNC_CONTAINER);\r\n    launchOp.appendArgs(commandFile);\r\n    try {\r\n        privilegedOperationExecutor.executePrivilegedOperation(null, launchOp, null, null, false, false);\r\n    } catch (PrivilegedOperationException e) {\r\n        LOG.info(\"Launch container failed: \", e);\r\n        try {\r\n            LOG.debug(\"config.json used: \" + mapper.writeValueAsString(runcContainerExecutorConfig));\r\n        } catch (IOException ioe) {\r\n            LOG.info(\"Json Generation Exception\", ioe);\r\n        }\r\n        throw new ContainerExecutionException(\"Launch container failed\", e.getExitCode(), e.getOutput(), e.getErrorOutput());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 4,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getCgroupPath",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "String getCgroupPath(String resourcesOptions, String containerIdStr)\n{\r\n    if (cGroupsHandler == null) {\r\n        LOG.debug(\"cGroupsHandler is null. cgroups are not in use. nothing to\" + \" do.\");\r\n        return null;\r\n    }\r\n    if (resourcesOptions.equals((PrivilegedOperation.CGROUP_ARG_PREFIX + PrivilegedOperation.CGROUP_ARG_NO_TASKS))) {\r\n        LOG.debug(\"no resource restrictions specified. not using runc's \" + \"cgroup options\");\r\n    } else {\r\n        LOG.debug(\"using runc's cgroups options\");\r\n        String cGroupPath = \"/\" + cGroupsHandler.getRelativePathForCGroup(containerIdStr);\r\n        LOG.debug(\"using cgroup parent: \" + cGroupPath);\r\n        return cGroupPath;\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "addUserMounts",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void addUserMounts(List<OCIMount> mounts, Map<String, String> environment, Map<Path, List<String>> localizedResources) throws ContainerExecutionException\n{\r\n    if (environment.containsKey(ENV_RUNC_CONTAINER_MOUNTS)) {\r\n        Matcher parsedMounts = USER_MOUNT_PATTERN.matcher(environment.get(ENV_RUNC_CONTAINER_MOUNTS));\r\n        if (!parsedMounts.find()) {\r\n            throw new ContainerExecutionException(\"Unable to parse user supplied mount list: \" + environment.get(ENV_RUNC_CONTAINER_MOUNTS));\r\n        }\r\n        parsedMounts.reset();\r\n        long mountCount = 0;\r\n        while (parsedMounts.find()) {\r\n            mountCount++;\r\n            String src = parsedMounts.group(1);\r\n            java.nio.file.Path srcPath = java.nio.file.Paths.get(src);\r\n            if (!srcPath.isAbsolute()) {\r\n                src = mountReadOnlyPath(src, localizedResources);\r\n            }\r\n            String dst = parsedMounts.group(2);\r\n            String mode = parsedMounts.group(4);\r\n            boolean isReadWrite;\r\n            if (mode == null) {\r\n                isReadWrite = true;\r\n            } else if (mode.equals(\"rw\")) {\r\n                isReadWrite = true;\r\n            } else if (mode.equals(\"ro\")) {\r\n                isReadWrite = false;\r\n            } else {\r\n                throw new ContainerExecutionException(\"Unable to parse mode of some mounts in user supplied \" + \"mount list: \" + environment.get(ENV_RUNC_CONTAINER_MOUNTS));\r\n            }\r\n            addRuncMountLocation(mounts, src, dst, false, isReadWrite);\r\n        }\r\n        long commaCount = environment.get(ENV_RUNC_CONTAINER_MOUNTS).chars().filter(c -> c == ',').count();\r\n        if (mountCount != commaCount + 1) {\r\n            throw new ContainerExecutionException(\"Unable to parse some mounts in user supplied mount list: \" + environment.get(ENV_RUNC_CONTAINER_MOUNTS));\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "addDefaultMountLocation",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void addDefaultMountLocation(List<OCIMount> mounts, Set<String> defaultMounts, boolean createSource, boolean isReadWrite) throws ContainerExecutionException\n{\r\n    if (defaultMounts != null && !defaultMounts.isEmpty()) {\r\n        for (String mount : defaultMounts) {\r\n            String[] dir = StringUtils.split(mount, ':');\r\n            if (dir.length != 2) {\r\n                throw new ContainerExecutionException(\"Invalid mount : \" + mount);\r\n            }\r\n            String src = dir[0];\r\n            String dst = dir[1];\r\n            addRuncMountLocation(mounts, src, dst, createSource, isReadWrite);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "addRuncMountLocation",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addRuncMountLocation(List<OCIMount> mounts, String srcPath, String dstPath, boolean createSource, boolean isReadWrite)\n{\r\n    if (!createSource) {\r\n        boolean sourceExists = new File(srcPath).exists();\r\n        if (!sourceExists) {\r\n            return;\r\n        }\r\n    }\r\n    ArrayList<String> options = new ArrayList<>();\r\n    if (isReadWrite) {\r\n        options.add(\"rw\");\r\n    } else {\r\n        options.add(\"ro\");\r\n    }\r\n    options.add(\"rbind\");\r\n    options.add(\"rprivate\");\r\n    mounts.add(new OCIMount(dstPath, \"bind\", srcPath, options));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "addAllRuncMountLocations",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addAllRuncMountLocations(List<OCIMount> mounts, List<String> paths, boolean createSource, boolean isReadWrite)\n{\r\n    for (String dir : paths) {\r\n        this.addRuncMountLocation(mounts, dir, dir, createSource, isReadWrite);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getLocalResources",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "Map<String, LocalResource> getLocalResources(Container container) throws IOException\n{\r\n    Map<String, LocalResource> containerLocalRsrc = container.getLaunchContext().getLocalResources();\r\n    long layerCount = 0;\r\n    Map<String, String> environment = container.getLaunchContext().getEnvironment();\r\n    String imageName = environment.get(ENV_RUNC_CONTAINER_IMAGE);\r\n    if (imageName == null || imageName.isEmpty()) {\r\n        environment.put(ENV_RUNC_CONTAINER_IMAGE, defaultRuncImage);\r\n        imageName = defaultRuncImage;\r\n    }\r\n    ImageManifest manifest = imageTagToManifestPlugin.getManifestFromImageTag(imageName);\r\n    LocalResource config = manifestToResourcesPlugin.getConfigResource(manifest);\r\n    List<LocalResource> layers = manifestToResourcesPlugin.getLayerResources(manifest);\r\n    RuncRuntimeObject runcRuntimeObject = new RuncRuntimeObject(config, layers);\r\n    container.setContainerRuntimeData(runcRuntimeObject);\r\n    for (LocalResource localRsrc : layers) {\r\n        while (containerLocalRsrc.putIfAbsent(\"runc-layer\" + Long.toString(layerCount), localRsrc) != null) {\r\n            layerCount++;\r\n        }\r\n    }\r\n    while (containerLocalRsrc.putIfAbsent(\"runc-config\" + Long.toString(layerCount), config) != null) {\r\n        layerCount++;\r\n    }\r\n    return containerLocalRsrc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "chooseImageTagToManifestPlugin",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "RuncImageTagToManifestPlugin chooseImageTagToManifestPlugin() throws ContainerExecutionException\n{\r\n    String pluginName = conf.get(NM_RUNC_IMAGE_TAG_TO_MANIFEST_PLUGIN, DEFAULT_NM_RUNC_IMAGE_TAG_TO_MANIFEST_PLUGIN);\r\n    RuncImageTagToManifestPlugin runcImageTagToManifestPlugin;\r\n    try {\r\n        Class<?> clazz = Class.forName(pluginName);\r\n        runcImageTagToManifestPlugin = (RuncImageTagToManifestPlugin) clazz.newInstance();\r\n    } catch (Exception e) {\r\n        throw new ContainerExecutionException(e);\r\n    }\r\n    return runcImageTagToManifestPlugin;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "chooseManifestToResourcesPlugin",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "RuncManifestToResourcesPlugin chooseManifestToResourcesPlugin() throws ContainerExecutionException\n{\r\n    String pluginName = conf.get(NM_RUNC_MANIFEST_TO_RESOURCES_PLUGIN, DEFAULT_NM_RUNC_MANIFEST_TO_RESOURCES_PLUGIN);\r\n    LOG.info(\"pluginName = \" + pluginName);\r\n    RuncManifestToResourcesPlugin runcManifestToResourcesPlugin;\r\n    try {\r\n        Class<?> clazz = Class.forName(pluginName);\r\n        runcManifestToResourcesPlugin = (RuncManifestToResourcesPlugin) clazz.newInstance();\r\n    } catch (Exception e) {\r\n        throw new ContainerExecutionException(e);\r\n    }\r\n    return runcManifestToResourcesPlugin;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "extractImageEnv",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "List<String> extractImageEnv(File config) throws IOException\n{\r\n    JsonNode node = mapper.readTree(config);\r\n    JsonNode envNode = node.path(\"config\").path(\"Env\");\r\n    if (envNode.isMissingNode()) {\r\n        return null;\r\n    }\r\n    return mapper.readValue(envNode.traverse(), List.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "extractImageEntrypoint",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "List<String> extractImageEntrypoint(File config) throws IOException\n{\r\n    JsonNode node = mapper.readTree(config);\r\n    JsonNode entrypointNode = node.path(\"config\").path(\"Entrypoint\");\r\n    if (entrypointNode.isMissingNode()) {\r\n        return null;\r\n    }\r\n    return mapper.readValue(entrypointNode.traverse(), List.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "createRuncContainerExecutorConfig",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RuncContainerExecutorConfig createRuncContainerExecutorConfig(String runAsUser, String username, String containerId, String applicationId, String pidFile, String containerScriptPath, String containerCredentialsPath, int https, String keystorePath, String truststorePath, List<String> localDirs, List<String> logDirs, List<OCILayer> layers, OCIRuntimeConfig ociRuntimeConfig)\n{\r\n    return new RuncContainerExecutorConfig(runAsUser, username, containerId, applicationId, pidFile, containerScriptPath, containerCredentialsPath, https, keystorePath, truststorePath, localDirs, logDirs, layers, layersToKeep, ociRuntimeConfig);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "createOCIProcessConfig",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "OCIProcessConfig createOCIProcessConfig(String cwd, List<String> env, List<String> args)\n{\r\n    return new OCIProcessConfig(false, null, cwd, env, args, null, null, null, false, 0, null, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "createOCILinuxConfig",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "OCILinuxConfig createOCILinuxConfig(long cpuShares, String cgroupsPath, String seccompProf)\n{\r\n    OCILinuxConfig.Resources.CPU cgroupCPU = new OCILinuxConfig.Resources.CPU(cpuShares, 0, 0, 0, 0, null, null);\r\n    OCILinuxConfig.Resources cgroupResources = new OCILinuxConfig.Resources(null, null, cgroupCPU, null, null, null, null, null);\r\n    return new OCILinuxConfig(null, null, null, null, cgroupsPath, cgroupResources, null, null, seccompProf, null, null, null, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "setContainerMounts",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void setContainerMounts(ArrayList<OCIMount> mounts, ContainerRuntimeContext ctx, Path containerWorkDir, Map<String, String> environment) throws ContainerExecutionException\n{\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<String> filecacheDirs = ctx.getExecutionAttribute(FILECACHE_DIRS);\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<String> containerLogDirs = ctx.getExecutionAttribute(CONTAINER_LOG_DIRS);\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<String> userFilecacheDirs = ctx.getExecutionAttribute(USER_FILECACHE_DIRS);\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<String> applicationLocalDirs = ctx.getExecutionAttribute(APPLICATION_LOCAL_DIRS);\r\n    @SuppressWarnings(\"unchecked\")\r\n    Map<Path, List<String>> localizedResources = ctx.getExecutionAttribute(LOCALIZED_RESOURCES);\r\n    addRuncMountLocation(mounts, containerWorkDir.toString() + \"/private_slash_tmp\", \"/tmp\", true, true);\r\n    addRuncMountLocation(mounts, containerWorkDir.toString() + \"/private_var_slash_tmp\", \"/var/tmp\", true, true);\r\n    addAllRuncMountLocations(mounts, containerLogDirs, true, true);\r\n    addAllRuncMountLocations(mounts, applicationLocalDirs, true, true);\r\n    addAllRuncMountLocations(mounts, filecacheDirs, false, false);\r\n    addAllRuncMountLocations(mounts, userFilecacheDirs, false, false);\r\n    addDefaultMountLocation(mounts, defaultROMounts, false, false);\r\n    addDefaultMountLocation(mounts, defaultRWMounts, false, true);\r\n    addUserMounts(mounts, environment, localizedResources);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "writeCommandToFile",
  "errType" : [ "IOException", "IOException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "String writeCommandToFile(RuncContainerExecutorConfig runcContainerExecutorConfig, Container container) throws ContainerExecutionException\n{\r\n    ContainerId containerId = container.getContainerId();\r\n    String filePrefix = containerId.toString();\r\n    ApplicationId appId = containerId.getApplicationAttemptId().getApplicationId();\r\n    File commandFile;\r\n    try {\r\n        File cmdDir = null;\r\n        if (nmContext != null && nmContext.getLocalDirsHandler() != null) {\r\n            String cmdDirStr = nmContext.getLocalDirsHandler().getLocalPathForWrite(ResourceLocalizationService.NM_PRIVATE_DIR + Path.SEPARATOR + appId + Path.SEPARATOR + filePrefix + Path.SEPARATOR).toString();\r\n            cmdDir = new File(cmdDirStr);\r\n            if (!cmdDir.mkdirs() && !cmdDir.exists()) {\r\n                throw new IOException(\"Cannot create container private directory \" + cmdDir);\r\n            }\r\n        }\r\n        commandFile = new File(cmdDir + \"/runc-config.json\");\r\n        try {\r\n            mapper.writeValue(commandFile, runcContainerExecutorConfig);\r\n        } catch (IOException ioe) {\r\n            throw new ContainerExecutionException(ioe);\r\n        }\r\n        return commandFile.getAbsolutePath();\r\n    } catch (IOException e) {\r\n        LOG.warn(\"Unable to write runc config.json to temporary file!\");\r\n        throw new ContainerExecutionException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getExposedPorts",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getExposedPorts(Container container)\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getIpAndHost",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String[] getIpAndHost(Container container)\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "execContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "IOStreamPair execContainer(ContainerExecContext ctx) throws ContainerExecutionException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "reapContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void reapContainer(ContainerRuntimeContext ctx) throws ContainerExecutionException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "relaunchContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void relaunchContainer(ContainerRuntimeContext ctx) throws ContainerExecutionException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "isRuncContainerRequested",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean isRuncContainerRequested(Configuration daemonConf, Map<String, String> env)\n{\r\n    String type = (env == null) ? null : env.get(ContainerRuntimeConstants.ENV_CONTAINER_TYPE);\r\n    if (type == null) {\r\n        type = daemonConf.get(YarnConfiguration.LINUX_CONTAINER_RUNTIME_TYPE);\r\n    }\r\n    return type != null && type.equals(ContainerRuntimeConstants.CONTAINER_RUNTIME_RUNC);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "isRuntimeRequested",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isRuntimeRequested(Map<String, String> env)\n{\r\n    return isRuncContainerRequested(conf, env);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "signalContainer",
  "errType" : [ "YarnException|IOException", "PrivilegedOperationException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void signalContainer(ContainerRuntimeContext ctx) throws ContainerExecutionException\n{\r\n    ContainerExecutor.Signal signal = ctx.getExecutionAttribute(SIGNAL);\r\n    Container container = ctx.getContainer();\r\n    if (signal == ContainerExecutor.Signal.KILL || signal == ContainerExecutor.Signal.TERM) {\r\n        ContainerVolumePublisher publisher = new ContainerVolumePublisher(container, container.getCsiVolumesRootDir(), this);\r\n        try {\r\n            publisher.unpublishVolumes();\r\n        } catch (YarnException | IOException e) {\r\n            throw new ContainerExecutionException(e);\r\n        }\r\n    }\r\n    PrivilegedOperation signalOp = new PrivilegedOperation(PrivilegedOperation.OperationType.SIGNAL_CONTAINER);\r\n    signalOp.appendArgs(ctx.getExecutionAttribute(RUN_AS_USER), ctx.getExecutionAttribute(USER), Integer.toString(PrivilegedOperation.RunAsUserCommand.SIGNAL_CONTAINER.getValue()), ctx.getExecutionAttribute(PID), Integer.toString(signal.getValue()));\r\n    signalOp.disableFailureLogging();\r\n    try {\r\n        PrivilegedOperationExecutor executor = PrivilegedOperationExecutor.getInstance(conf);\r\n        executor.executePrivilegedOperation(null, signalOp, null, null, false, false);\r\n    } catch (PrivilegedOperationException e) {\r\n        throw new ContainerExecutionException(\"Signal container failed\", e.getExitCode(), e.getOutput(), e.getErrorOutput());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getHostPidNamespaceEnabled",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean getHostPidNamespaceEnabled()\n{\r\n    return conf.getBoolean(YarnConfiguration.NM_RUNC_ALLOW_HOST_PID_NAMESPACE, YarnConfiguration.DEFAULT_NM_RUNC_ALLOW_HOST_PID_NAMESPACE);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getPrivilegedContainersEnabledOnCluster",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean getPrivilegedContainersEnabledOnCluster()\n{\r\n    return conf.getBoolean(YarnConfiguration.NM_RUNC_ALLOW_PRIVILEGED_CONTAINERS, YarnConfiguration.DEFAULT_NM_RUNC_ALLOW_PRIVILEGED_CONTAINERS);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getAllowedNetworks",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Set<String> getAllowedNetworks()\n{\r\n    return allowedNetworks;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getAllowedRuntimes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Set<String> getAllowedRuntimes()\n{\r\n    return allowedRuntimes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getPrivilegedContainersAcl",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AccessControlList getPrivilegedContainersAcl()\n{\r\n    return privilegedContainersAcl;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getEnvOciContainerPidNamespace",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getEnvOciContainerPidNamespace()\n{\r\n    return ENV_RUNC_CONTAINER_PID_NAMESPACE;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getEnvOciContainerRunPrivilegedContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getEnvOciContainerRunPrivilegedContainer()\n{\r\n    return ENV_RUNC_CONTAINER_RUN_PRIVILEGED_CONTAINER;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\impl\\pb",
  "methodName" : "getResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "LocalResource getResource()\n{\r\n    ResourceLocalizationSpecProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (resource != null) {\r\n        return resource;\r\n    }\r\n    if (!p.hasResource()) {\r\n        return null;\r\n    }\r\n    resource = new LocalResourcePBImpl(p.getResource());\r\n    return resource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\impl\\pb",
  "methodName" : "setResource",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setResource(LocalResource rsrc)\n{\r\n    maybeInitBuilder();\r\n    resource = rsrc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\impl\\pb",
  "methodName" : "getDestinationDirectory",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "URL getDestinationDirectory()\n{\r\n    ResourceLocalizationSpecProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (destinationDirectory != null) {\r\n        return destinationDirectory;\r\n    }\r\n    if (!p.hasDestinationDirectory()) {\r\n        return null;\r\n    }\r\n    destinationDirectory = new URLPBImpl(p.getDestinationDirectory());\r\n    return destinationDirectory;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\impl\\pb",
  "methodName" : "setDestinationDirectory",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setDestinationDirectory(URL destinationDirectory)\n{\r\n    maybeInitBuilder();\r\n    this.destinationDirectory = destinationDirectory;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ResourceLocalizationSpecProto getProto()\n{\r\n    mergeLocalToBuilder();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (builder == null || viaProto) {\r\n        builder = ResourceLocalizationSpecProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    ResourceLocalizationSpecProtoOrBuilder l = viaProto ? proto : builder;\r\n    if (this.resource != null && !(l.getResource().equals(((LocalResourcePBImpl) resource).getProto()))) {\r\n        maybeInitBuilder();\r\n        builder.setResource(((LocalResourcePBImpl) resource).getProto());\r\n    }\r\n    if (this.destinationDirectory != null && !(l.getDestinationDirectory().equals(((URLPBImpl) destinationDirectory).getProto()))) {\r\n        maybeInitBuilder();\r\n        builder.setDestinationDirectory(((URLPBImpl) destinationDirectory).getProto());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "getContainerStatus",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "DockerInspectCommand getContainerStatus()\n{\r\n    super.addCommandArguments(\"format\", STATUS_TEMPLATE);\r\n    this.commandArguments = String.format(\"--format=%s\", STATUS_TEMPLATE);\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "getIpAndHost",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DockerInspectCommand getIpAndHost()\n{\r\n    super.addCommandArguments(\"format\", \"{{range(.NetworkSettings.Networks)}}\" + \"{{.IPAddress}},{{end}}{{.Config.Hostname}}\");\r\n    this.commandArguments = \"--format={{range(.NetworkSettings.Networks)}}\" + \"{{.IPAddress}},{{end}}{{.Config.Hostname}}\";\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "get",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "DockerInspectCommand get(String[] templates, char delimiter)\n{\r\n    String format = StringUtils.join(delimiter, templates);\r\n    super.addCommandArguments(\"format\", format);\r\n    this.commandArguments = String.format(\"--format=%s\", format);\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "preparePrivilegedOperation",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "PrivilegedOperation preparePrivilegedOperation(DockerCommand dockerCommand, String containerName, Map<String, String> env, Context nmContext)\n{\r\n    PrivilegedOperation dockerOp = new PrivilegedOperation(PrivilegedOperation.OperationType.INSPECT_DOCKER_CONTAINER);\r\n    dockerOp.appendArgs(commandArguments, containerName);\r\n    return dockerOp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "getExposedPorts",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DockerInspectCommand getExposedPorts()\n{\r\n    super.addCommandArguments(\"format\", \"{{json .NetworkSettings.Ports}}\");\r\n    this.commandArguments = \"--format={{json .NetworkSettings.Ports}}\";\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "initialize",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void initialize(Configuration conf)\n{\r\n    String mappingJsonFile = conf.get(YarnConfiguration.NM_NETWORK_TAG_MAPPING_FILE_PATH, YarnConfiguration.DEFAULT_NM_NETWORK_RESOURCE_TAG_MAPPING_FILE_PATH);\r\n    if (mappingJsonFile == null || mappingJsonFile.isEmpty()) {\r\n        throw new YarnRuntimeException(\"To use NetworkTagMappingJsonManager,\" + \" we have to set the configuration:\" + YarnConfiguration.NM_NETWORK_TAG_MAPPING_FILE_PATH);\r\n    }\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    try {\r\n        networkTagMapping = mapper.readValue(new File(mappingJsonFile), NetworkTagMapping.class);\r\n    } catch (Exception e) {\r\n        throw new YarnRuntimeException(e);\r\n    }\r\n    if (networkTagMapping == null) {\r\n        throw new YarnRuntimeException(\"Fail to load the specific JSON file: \" + mappingJsonFile);\r\n    }\r\n    networkTagMapping.validateUsers();\r\n    networkTagMapping.validateGroups();\r\n    networkTagMapping.validateDefaultClass();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getNetworkTagHexID",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "String getNetworkTagHexID(Container container)\n{\r\n    String userNetworkTagID = this.networkTagMapping.getUserNetworkTagID(container.getUser());\r\n    if (userNetworkTagID != null) {\r\n        return userNetworkTagID;\r\n    }\r\n    UserGroupInformation userUGI = UserGroupInformation.createRemoteUser(container.getUser());\r\n    List<Group> groups = this.networkTagMapping.getGroups();\r\n    for (Group group : groups) {\r\n        if (userUGI.getGroupsSet().contains(group.getGroupName())) {\r\n            return group.getNetworkTagID();\r\n        }\r\n    }\r\n    return this.networkTagMapping.getDefaultNetworkTagID();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getNetworkTagMapping",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NetworkTagMapping getNetworkTagMapping()\n{\r\n    return this.networkTagMapping;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "bootstrap",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<PrivilegedOperation> bootstrap(Configuration configuration) throws ResourceHandlerException\n{\r\n    try {\r\n        numaResourceAllocator.init(configuration);\r\n    } catch (YarnException e) {\r\n        throw new ResourceHandlerException(e);\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "preStart",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "List<PrivilegedOperation> preStart(Container container) throws ResourceHandlerException\n{\r\n    List<PrivilegedOperation> ret = null;\r\n    NumaResourceAllocation numaAllocation = numaResourceAllocator.allocateNumaNodes(container);\r\n    if (numaAllocation != null) {\r\n        ret = new ArrayList<>();\r\n        ArrayList<String> args = new ArrayList<>();\r\n        args.add(numaCtlCmd);\r\n        args.add(\"--interleave=\" + String.join(\",\", numaAllocation.getMemNodes()));\r\n        args.add(\"--cpunodebind=\" + String.join(\",\", numaAllocation.getCpuNodes()));\r\n        ret.add(new PrivilegedOperation(OperationType.ADD_NUMA_PARAMS, args));\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "reacquireContainer",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<PrivilegedOperation> reacquireContainer(ContainerId containerId) throws ResourceHandlerException\n{\r\n    try {\r\n        numaResourceAllocator.recoverNumaResource(containerId);\r\n    } catch (Throwable e) {\r\n        throw new ResourceHandlerException(\"Failed to recover numa resource for \" + containerId, e);\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "updateContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<PrivilegedOperation> updateContainer(Container container) throws ResourceHandlerException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "postComplete",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<PrivilegedOperation> postComplete(ContainerId containerId) throws ResourceHandlerException\n{\r\n    numaResourceAllocator.releaseNumaResource(containerId);\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "teardown",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<PrivilegedOperation> teardown() throws ResourceHandlerException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return NumaResourceHandlerImpl.class.getName() + \"{\" + \"numaResourceAllocator=\" + numaResourceAllocator + \", numaCtlCmd='\" + numaCtlCmd + '\\'' + '}';\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "handle",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 25,
  "sourceCodeText" : "void handle(ResourceEvent event)\n{\r\n    LocalResourceRequest req = event.getLocalResourceRequest();\r\n    LocalizedResource rsrc = localrsrc.get(req);\r\n    switch(event.getType()) {\r\n        case LOCALIZED:\r\n            if (useLocalCacheDirectoryManager) {\r\n                inProgressLocalResourcesMap.remove(req);\r\n            }\r\n            break;\r\n        case REQUEST:\r\n            if (rsrc != null && (!isResourcePresent(rsrc))) {\r\n                LOG.info(\"Resource \" + rsrc.getLocalPath() + \" is missing, localizing it again\");\r\n                removeResource(req);\r\n                rsrc = null;\r\n            }\r\n            if (null == rsrc) {\r\n                rsrc = new LocalizedResource(req, dispatcher);\r\n                localrsrc.put(req, rsrc);\r\n            }\r\n            break;\r\n        case RELEASE:\r\n            if (null == rsrc) {\r\n                ResourceReleaseEvent relEvent = (ResourceReleaseEvent) event;\r\n                LOG.info(\"Container \" + relEvent.getContainer() + \" sent RELEASE event on a resource request \" + req + \" not present in cache.\");\r\n                return;\r\n            }\r\n            break;\r\n        case LOCALIZATION_FAILED:\r\n            removeResource(req);\r\n            break;\r\n        case RECOVERED:\r\n            if (rsrc != null) {\r\n                LOG.warn(\"Ignoring attempt to recover existing resource \" + rsrc);\r\n                return;\r\n            }\r\n            rsrc = recoverResource(req, (ResourceRecoveredEvent) event);\r\n            localrsrc.put(req, rsrc);\r\n            break;\r\n    }\r\n    if (rsrc == null) {\r\n        LOG.warn(\"Received \" + event.getType() + \" event for request \" + req + \" but localized resource is missing\");\r\n        return;\r\n    }\r\n    rsrc.handle(event);\r\n    if (event.getType() == ResourceEventType.RELEASE) {\r\n        if (rsrc.getState() == ResourceState.DOWNLOADING && rsrc.getRefCount() <= 0 && rsrc.getRequest().getVisibility() != LocalResourceVisibility.PUBLIC) {\r\n            removeResource(req);\r\n        }\r\n    }\r\n    if (event.getType() == ResourceEventType.LOCALIZED) {\r\n        if (rsrc.getLocalPath() != null) {\r\n            try {\r\n                stateStore.finishResourceLocalization(user, appId, buildLocalizedResourceProto(rsrc));\r\n            } catch (IOException ioe) {\r\n                LOG.error(\"Error storing resource state for \" + rsrc, ioe);\r\n            }\r\n        } else {\r\n            LOG.warn(\"Resource \" + rsrc + \" localized without a location\");\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "recoverResource",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "LocalizedResource recoverResource(LocalResourceRequest req, ResourceRecoveredEvent event)\n{\r\n    Path localDir = event.getLocalPath().getParent();\r\n    long rsrcId = Long.parseLong(localDir.getName());\r\n    while (true) {\r\n        long currentRsrcId = uniqueNumberGenerator.get();\r\n        long nextRsrcId = Math.max(currentRsrcId, rsrcId);\r\n        if (uniqueNumberGenerator.compareAndSet(currentRsrcId, nextRsrcId)) {\r\n            break;\r\n        }\r\n    }\r\n    incrementFileCountForLocalCacheDirectory(localDir.getParent());\r\n    return new LocalizedResource(req, dispatcher);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "buildLocalizedResourceProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LocalizedResourceProto buildLocalizedResourceProto(LocalizedResource rsrc)\n{\r\n    return LocalizedResourceProto.newBuilder().setResource(buildLocalResourceProto(rsrc.getRequest())).setLocalPath(rsrc.getLocalPath().toString()).setSize(rsrc.getSize()).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "buildLocalResourceProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "LocalResourceProto buildLocalResourceProto(LocalResource lr)\n{\r\n    LocalResourcePBImpl lrpb;\r\n    if (!(lr instanceof LocalResourcePBImpl)) {\r\n        lr = LocalResource.newInstance(lr.getResource(), lr.getType(), lr.getVisibility(), lr.getSize(), lr.getTimestamp(), lr.getPattern());\r\n    }\r\n    lrpb = (LocalResourcePBImpl) lr;\r\n    return lrpb.getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "incrementFileCountForLocalCacheDirectory",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void incrementFileCountForLocalCacheDirectory(Path cacheDir)\n{\r\n    if (useLocalCacheDirectoryManager) {\r\n        Path cacheRoot = LocalCacheDirectoryManager.getCacheDirectoryRoot(cacheDir);\r\n        if (cacheRoot != null) {\r\n            LocalCacheDirectoryManager dir = directoryManagers.get(cacheRoot);\r\n            if (dir == null) {\r\n                dir = new LocalCacheDirectoryManager(conf);\r\n                LocalCacheDirectoryManager otherDir = directoryManagers.putIfAbsent(cacheRoot, dir);\r\n                if (otherDir != null) {\r\n                    dir = otherDir;\r\n                }\r\n            }\r\n            if (cacheDir.equals(cacheRoot)) {\r\n                dir.incrementFileCountForPath(\"\");\r\n            } else {\r\n                String dirStr = cacheDir.toUri().getRawPath();\r\n                String rootStr = cacheRoot.toUri().getRawPath();\r\n                dir.incrementFileCountForPath(dirStr.substring(rootStr.length() + 1));\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "decrementFileCountForLocalCacheDirectory",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void decrementFileCountForLocalCacheDirectory(LocalResourceRequest req, LocalizedResource rsrc)\n{\r\n    if (useLocalCacheDirectoryManager) {\r\n        Path rsrcPath = null;\r\n        if (inProgressLocalResourcesMap.containsKey(req)) {\r\n            rsrcPath = inProgressLocalResourcesMap.remove(req);\r\n        } else if (rsrc != null && rsrc.getLocalPath() != null) {\r\n            rsrcPath = rsrc.getLocalPath().getParent().getParent();\r\n        }\r\n        if (rsrcPath != null) {\r\n            Path parentPath = new Path(rsrcPath.toUri().getRawPath());\r\n            while (!directoryManagers.containsKey(parentPath)) {\r\n                parentPath = parentPath.getParent();\r\n                if (parentPath == null) {\r\n                    return;\r\n                }\r\n            }\r\n            if (parentPath != null) {\r\n                String parentDir = parentPath.toUri().getRawPath().toString();\r\n                LocalCacheDirectoryManager dir = directoryManagers.get(parentPath);\r\n                String rsrcDir = rsrcPath.toUri().getRawPath();\r\n                if (rsrcDir.equals(parentDir)) {\r\n                    dir.decrementFileCountForPath(\"\");\r\n                } else {\r\n                    dir.decrementFileCountForPath(rsrcDir.substring(parentDir.length() + 1));\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "isResourcePresent",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean isResourcePresent(LocalizedResource rsrc)\n{\r\n    boolean ret = true;\r\n    if (rsrc.getState() == ResourceState.LOCALIZED) {\r\n        File file = new File(rsrc.getLocalPath().toUri().getRawPath().toString());\r\n        if (!file.exists()) {\r\n            ret = false;\r\n        } else if (dirsHandler != null) {\r\n            ret = checkLocalResource(rsrc);\r\n        }\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "checkLocalResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean checkLocalResource(LocalizedResource rsrc)\n{\r\n    List<String> localDirs = dirsHandler.getLocalDirsForRead();\r\n    for (String dir : localDirs) {\r\n        if (isParent(rsrc.getLocalPath().toUri().getPath(), dir)) {\r\n            return true;\r\n        } else {\r\n            continue;\r\n        }\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "isParent",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isParent(String path, String parentdir)\n{\r\n    if (path.charAt(path.length() - 1) != File.separatorChar) {\r\n        path += File.separator;\r\n    }\r\n    return path.startsWith(parentdir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "remove",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "boolean remove(LocalizedResource rem, DeletionService delService)\n{\r\n    LocalizedResource rsrc = localrsrc.get(rem.getRequest());\r\n    if (null == rsrc) {\r\n        LOG.error(\"Attempt to remove absent resource: \" + rem.getRequest() + \" from \" + getUser());\r\n        return true;\r\n    }\r\n    if (rsrc.getRefCount() > 0 || ResourceState.DOWNLOADING.equals(rsrc.getState()) || rsrc != rem) {\r\n        LOG.error(\"Attempt to remove resource: \" + rsrc + \" with non-zero refcount\");\r\n        return false;\r\n    } else {\r\n        if (ResourceState.LOCALIZED.equals(rsrc.getState())) {\r\n            FileDeletionTask deletionTask = new FileDeletionTask(delService, getUser(), getPathToDelete(rsrc.getLocalPath()), null);\r\n            delService.delete(deletionTask);\r\n        }\r\n        removeResource(rem.getRequest());\r\n        LOG.info(\"Removed \" + rsrc.getLocalPath() + \" from localized cache\");\r\n        return true;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "removeResource",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void removeResource(LocalResourceRequest req)\n{\r\n    LocalizedResource rsrc = localrsrc.remove(req);\r\n    decrementFileCountForLocalCacheDirectory(req, rsrc);\r\n    if (rsrc != null) {\r\n        Path localPath = rsrc.getLocalPath();\r\n        if (localPath != null) {\r\n            try {\r\n                stateStore.removeLocalizedResource(user, appId, localPath);\r\n            } catch (IOException e) {\r\n                LOG.error(\"Unable to remove resource \" + rsrc + \" from state store\", e);\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getPathToDelete",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Path getPathToDelete(Path localPath)\n{\r\n    Path delPath = localPath.getParent();\r\n    String name = delPath.getName();\r\n    Matcher matcher = RANDOM_DIR_PATTERN.matcher(name);\r\n    if (matcher.matches()) {\r\n        return delPath;\r\n    } else {\r\n        LOG.warn(\"Random directory component did not match. \" + \"Deleting localized path only\");\r\n        return localPath;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUser()\n{\r\n    return user;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "iterator",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Iterator<LocalizedResource> iterator()\n{\r\n    return localrsrc.values().iterator();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getPathForLocalization",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 19,
  "sourceCodeText" : "Path getPathForLocalization(LocalResourceRequest req, Path localDirPath, DeletionService delService)\n{\r\n    Path rPath = localDirPath;\r\n    if (useLocalCacheDirectoryManager && localDirPath != null) {\r\n        if (!directoryManagers.containsKey(localDirPath)) {\r\n            directoryManagers.putIfAbsent(localDirPath, new LocalCacheDirectoryManager(conf));\r\n        }\r\n        LocalCacheDirectoryManager dir = directoryManagers.get(localDirPath);\r\n        rPath = localDirPath;\r\n        String hierarchicalPath = dir.getRelativePathForLocalization();\r\n        if (!hierarchicalPath.isEmpty()) {\r\n            rPath = new Path(localDirPath, hierarchicalPath);\r\n        }\r\n        inProgressLocalResourcesMap.put(req, rPath);\r\n    }\r\n    while (true) {\r\n        Path uniquePath = new Path(rPath, Long.toString(uniqueNumberGenerator.incrementAndGet()));\r\n        File file = new File(uniquePath.toUri().getRawPath());\r\n        if (!file.exists()) {\r\n            rPath = uniquePath;\r\n            break;\r\n        }\r\n        LOG.warn(\"Directory \" + uniquePath + \" already exists, \" + \"try next one.\");\r\n        if (delService != null) {\r\n            FileDeletionTask deletionTask = new FileDeletionTask(delService, getUser(), uniquePath, null);\r\n            delService.delete(deletionTask);\r\n        }\r\n    }\r\n    Path localPath = new Path(rPath, req.getPath().getName());\r\n    LocalizedResource rsrc = localrsrc.get(req);\r\n    if (rsrc == null) {\r\n        LOG.warn(\"Resource \" + req + \" has been removed\" + \" and will no longer be localized\");\r\n        return null;\r\n    }\r\n    rsrc.setLocalPath(localPath);\r\n    LocalResource lr = LocalResource.newInstance(req.getResource(), req.getType(), req.getVisibility(), req.getSize(), req.getTimestamp());\r\n    try {\r\n        stateStore.startResourceLocalization(user, appId, ((LocalResourcePBImpl) lr).getProto(), localPath);\r\n    } catch (IOException e) {\r\n        LOG.error(\"Unable to record localization start for \" + rsrc, e);\r\n    }\r\n    return rPath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getLocalizedResource",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LocalizedResource getLocalizedResource(LocalResourceRequest request)\n{\r\n    return localrsrc.get(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getDirectoryManager",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LocalCacheDirectoryManager getDirectoryManager(Path localDirPath)\n{\r\n    LocalCacheDirectoryManager mgr = null;\r\n    if (useLocalCacheDirectoryManager) {\r\n        mgr = directoryManagers.get(localDirPath);\r\n    }\r\n    return mgr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getDirsHandler",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LocalDirsHandlerService getDirsHandler()\n{\r\n    return dirsHandler;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "type",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AuxServiceFile type(TypeEnum t)\n{\r\n    this.type = t;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "getType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TypeEnum getType()\n{\r\n    return type;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "setType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setType(TypeEnum type)\n{\r\n    this.type = type;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "srcFile",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AuxServiceFile srcFile(String file)\n{\r\n    this.srcFile = file;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "getSrcFile",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getSrcFile()\n{\r\n    return srcFile;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "setSrcFile",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setSrcFile(String srcFile)\n{\r\n    this.srcFile = srcFile;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean equals(java.lang.Object o)\n{\r\n    if (this == o) {\r\n        return true;\r\n    }\r\n    if (o == null || getClass() != o.getClass()) {\r\n        return false;\r\n    }\r\n    AuxServiceFile auxServiceFile = (AuxServiceFile) o;\r\n    return Objects.equals(this.type, auxServiceFile.type) && Objects.equals(this.srcFile, auxServiceFile.srcFile);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return Objects.hash(type, srcFile);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"class AuxServiceFile {\\n\");\r\n    sb.append(\"    type: \").append(toIndentedString(type)).append(\"\\n\");\r\n    sb.append(\"    srcFile: \").append(toIndentedString(srcFile)).append(\"\\n\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\records",
  "methodName" : "toIndentedString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toIndentedString(java.lang.Object o)\n{\r\n    if (o == null) {\r\n        return \"null\";\r\n    }\r\n    return o.toString().replace(\"\\n\", \"\\n    \");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getRelativePathForLocalization",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "String getRelativePathForLocalization()\n{\r\n    if (nonFullDirectories.isEmpty()) {\r\n        totalSubDirectories++;\r\n        Directory newDir = new Directory(totalSubDirectories);\r\n        nonFullDirectories.add(newDir);\r\n        knownDirectories.put(newDir.getRelativePath(), newDir);\r\n    }\r\n    Directory subDir = nonFullDirectories.peek();\r\n    if (subDir.incrementAndGetCount() >= perDirectoryFileLimit) {\r\n        nonFullDirectories.remove();\r\n    }\r\n    return subDir.getRelativePath();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "decrementFileCountForPath",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void decrementFileCountForPath(String relPath)\n{\r\n    relPath = relPath == null ? \"\" : relPath.trim();\r\n    Directory subDir = knownDirectories.get(relPath);\r\n    int oldCount = subDir.getCount();\r\n    if (subDir.decrementAndGetCount() < perDirectoryFileLimit && oldCount >= perDirectoryFileLimit) {\r\n        nonFullDirectories.add(subDir);\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "incrementFileCountForPath",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void incrementFileCountForPath(String relPath)\n{\r\n    relPath = relPath == null ? \"\" : relPath.trim();\r\n    Directory subDir = knownDirectories.get(relPath);\r\n    if (subDir == null) {\r\n        int dirnum = Directory.getDirectoryNumber(relPath);\r\n        totalSubDirectories = Math.max(dirnum, totalSubDirectories);\r\n        subDir = new Directory(dirnum);\r\n        nonFullDirectories.add(subDir);\r\n        knownDirectories.put(subDir.getRelativePath(), subDir);\r\n    }\r\n    if (subDir.incrementAndGetCount() >= perDirectoryFileLimit) {\r\n        nonFullDirectories.remove(subDir);\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getCacheDirectoryRoot",
  "errType" : [ "NumberFormatException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Path getCacheDirectoryRoot(Path path)\n{\r\n    while (path != null) {\r\n        String name = path.getName();\r\n        if (name.length() != 1) {\r\n            return path;\r\n        }\r\n        int dirnum = DIRECTORIES_PER_LEVEL;\r\n        try {\r\n            dirnum = Integer.parseInt(name, DIRECTORIES_PER_LEVEL);\r\n        } catch (NumberFormatException e) {\r\n        }\r\n        if (dirnum >= DIRECTORIES_PER_LEVEL) {\r\n            return path;\r\n        }\r\n        path = path.getParent();\r\n    }\r\n    return path;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getDirectory",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Directory getDirectory(String relPath)\n{\r\n    return knownDirectories.get(relPath);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "doGet",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n{\r\n    if (request.getRequestURI().endsWith(\".template\")) {\r\n        response.setHeader(\"Content-Type\", \"text/html;charset=utf-8\");\r\n    }\r\n    super.doGet(request, response);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Container getContainer()\n{\r\n    return this.container;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getLocalizedResources",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<Path, List<String>> getLocalizedResources()\n{\r\n    if (this.localizedResources != null) {\r\n        return Collections.unmodifiableMap(this.localizedResources);\r\n    } else {\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getNmPrivateContainerScriptPath",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Path getNmPrivateContainerScriptPath()\n{\r\n    return this.nmPrivateContainerScriptPath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getNmPrivateTokensPath",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Path getNmPrivateTokensPath()\n{\r\n    return this.nmPrivateTokensPath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getNmPrivateKeystorePath",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Path getNmPrivateKeystorePath()\n{\r\n    return this.nmPrivateKeystorePath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getNmPrivateTruststorePath",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Path getNmPrivateTruststorePath()\n{\r\n    return this.nmPrivateTruststorePath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUser()\n{\r\n    return this.user;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getAppId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getAppId()\n{\r\n    return this.appId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getContainerWorkDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Path getContainerWorkDir()\n{\r\n    return this.containerWorkDir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getLocalDirs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<String> getLocalDirs()\n{\r\n    return Collections.unmodifiableList(this.localDirs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getLogDirs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<String> getLogDirs()\n{\r\n    return Collections.unmodifiableList(this.logDirs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getFilecacheDirs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<String> getFilecacheDirs()\n{\r\n    return Collections.unmodifiableList(this.filecacheDirs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getUserLocalDirs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<String> getUserLocalDirs()\n{\r\n    return Collections.unmodifiableList(this.userLocalDirs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getContainerLocalDirs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<String> getContainerLocalDirs()\n{\r\n    return Collections.unmodifiableList(this.containerLocalDirs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getContainerLogDirs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<String> getContainerLogDirs()\n{\r\n    return Collections.unmodifiableList(this.containerLogDirs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getUserFilecacheDirs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<String> getUserFilecacheDirs()\n{\r\n    return Collections.unmodifiableList(this.userFilecacheDirs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getApplicationLocalDirs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<String> getApplicationLocalDirs()\n{\r\n    return Collections.unmodifiableList(this.applicationLocalDirs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getCsiVolumesRootDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Path getCsiVolumesRootDir()\n{\r\n    return this.csiVolumesRootDir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "initialize",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initialize() throws YarnException\n{\r\n    procfs.initialize();\r\n    cgroup.initialize();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "updateProcessTree",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void updateProcessTree()\n{\r\n    procfs.updateProcessTree();\r\n    cgroup.updateProcessTree();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getProcessTreeDump",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getProcessTreeDump()\n{\r\n    return procfs.getProcessTreeDump();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getCpuUsagePercent",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "float getCpuUsagePercent()\n{\r\n    float cgroupUsage = cgroup.getCpuUsagePercent();\r\n    if (LOG.isDebugEnabled()) {\r\n        float procfsUsage = procfs.getCpuUsagePercent();\r\n        LOG.debug(\"CPU Comparison:\" + procfsUsage + \" \" + cgroupUsage);\r\n        LOG.debug(\"Jiffy Comparison:\" + procfs.getCumulativeCpuTime() + \" \" + cgroup.getCumulativeCpuTime());\r\n    }\r\n    return cgroupUsage;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "checkPidPgrpidForMatch",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean checkPidPgrpidForMatch()\n{\r\n    return procfs.checkPidPgrpidForMatch();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getCumulativeCpuTime",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "long getCumulativeCpuTime()\n{\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(\"CPU Comparison:\" + procfs.getCumulativeCpuTime() + \" \" + cgroup.getCumulativeCpuTime());\r\n    }\r\n    return cgroup.getCumulativeCpuTime();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getRssMemorySize",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "long getRssMemorySize(int olderThanAge)\n{\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(\"MEM Comparison:\" + procfs.getRssMemorySize(olderThanAge) + \" \" + cgroup.getRssMemorySize(olderThanAge));\r\n    }\r\n    return cgroup.getRssMemorySize(olderThanAge);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getVirtualMemorySize",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "long getVirtualMemorySize(int olderThanAge)\n{\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(\"VMEM Comparison:\" + procfs.getVirtualMemorySize(olderThanAge) + \" \" + cgroup.getVirtualMemorySize(olderThanAge));\r\n    }\r\n    return procfs.getVirtualMemorySize(olderThanAge);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    Configuration config = new Configuration(conf);\r\n    setConfig(config);\r\n    config.setClassLoader(customClassLoader);\r\n    ClassLoader original = Thread.currentThread().getContextClassLoader();\r\n    Thread.currentThread().setContextClassLoader(customClassLoader);\r\n    try {\r\n        wrapped.init(config);\r\n    } finally {\r\n        Thread.currentThread().setContextClassLoader(original);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    ClassLoader original = Thread.currentThread().getContextClassLoader();\r\n    Thread.currentThread().setContextClassLoader(customClassLoader);\r\n    try {\r\n        wrapped.start();\r\n    } finally {\r\n        Thread.currentThread().setContextClassLoader(original);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    ClassLoader original = Thread.currentThread().getContextClassLoader();\r\n    Thread.currentThread().setContextClassLoader(customClassLoader);\r\n    try {\r\n        wrapped.stop();\r\n    } finally {\r\n        Thread.currentThread().setContextClassLoader(original);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "initializeApplication",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void initializeApplication(ApplicationInitializationContext initAppContext)\n{\r\n    ClassLoader original = Thread.currentThread().getContextClassLoader();\r\n    Thread.currentThread().setContextClassLoader(customClassLoader);\r\n    try {\r\n        wrapped.initializeApplication(initAppContext);\r\n    } finally {\r\n        Thread.currentThread().setContextClassLoader(original);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "stopApplication",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void stopApplication(ApplicationTerminationContext stopAppContext)\n{\r\n    ClassLoader original = Thread.currentThread().getContextClassLoader();\r\n    Thread.currentThread().setContextClassLoader(customClassLoader);\r\n    try {\r\n        wrapped.stopApplication(stopAppContext);\r\n    } finally {\r\n        Thread.currentThread().setContextClassLoader(original);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "getMetaData",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "ByteBuffer getMetaData()\n{\r\n    ClassLoader original = Thread.currentThread().getContextClassLoader();\r\n    Thread.currentThread().setContextClassLoader(customClassLoader);\r\n    try {\r\n        return wrapped.getMetaData();\r\n    } finally {\r\n        Thread.currentThread().setContextClassLoader(original);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "initializeContainer",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void initializeContainer(ContainerInitializationContext initContainerContext)\n{\r\n    ClassLoader original = Thread.currentThread().getContextClassLoader();\r\n    Thread.currentThread().setContextClassLoader(customClassLoader);\r\n    try {\r\n        wrapped.initializeContainer(initContainerContext);\r\n    } finally {\r\n        Thread.currentThread().setContextClassLoader(original);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "stopContainer",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void stopContainer(ContainerTerminationContext stopContainerContext)\n{\r\n    ClassLoader original = Thread.currentThread().getContextClassLoader();\r\n    Thread.currentThread().setContextClassLoader(customClassLoader);\r\n    try {\r\n        wrapped.stopContainer(stopContainerContext);\r\n    } finally {\r\n        Thread.currentThread().setContextClassLoader(original);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "setRecoveryPath",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setRecoveryPath(Path recoveryPath)\n{\r\n    ClassLoader original = Thread.currentThread().getContextClassLoader();\r\n    Thread.currentThread().setContextClassLoader(customClassLoader);\r\n    try {\r\n        wrapped.setRecoveryPath(recoveryPath);\r\n    } finally {\r\n        Thread.currentThread().setContextClassLoader(original);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "getInstance",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "AuxiliaryServiceWithCustomClassLoader getInstance(Configuration conf, String className, String appClassPath, String[] systemClasses) throws IOException, ClassNotFoundException\n{\r\n    ClassLoader customClassLoader = createAuxServiceClassLoader(appClassPath, systemClasses);\r\n    Class<?> clazz = Class.forName(className, true, customClassLoader);\r\n    Class<? extends AuxiliaryService> sClass = clazz.asSubclass(AuxiliaryService.class);\r\n    AuxiliaryService wrapped = ReflectionUtils.newInstance(sClass, conf);\r\n    return new AuxiliaryServiceWithCustomClassLoader(className + \" with custom class loader\", wrapped, customClassLoader);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "createAuxServiceClassLoader",
  "errType" : [ "PrivilegedActionException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ClassLoader createAuxServiceClassLoader(final String appClasspath, final String[] systemClasses) throws IOException\n{\r\n    try {\r\n        return AccessController.doPrivileged(new PrivilegedExceptionAction<ClassLoader>() {\r\n\r\n            @Override\r\n            public ClassLoader run() throws MalformedURLException {\r\n                return new ApplicationClassLoader(appClasspath, AuxServices.class.getClassLoader(), Arrays.asList(systemClasses));\r\n            }\r\n        });\r\n    } catch (PrivilegedActionException e) {\r\n        Throwable t = e.getCause();\r\n        if (t instanceof MalformedURLException) {\r\n            throw (MalformedURLException) t;\r\n        }\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Container getContainer()\n{\r\n    return this.container;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUser()\n{\r\n    return this.user;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getPid",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getPid()\n{\r\n    return this.pid;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getAllowedNetworks",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Set<String> getAllowedNetworks()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getAllowedRuntimes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Set<String> getAllowedRuntimes()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getHostPidNamespaceEnabled",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean getHostPidNamespaceEnabled()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getPrivilegedContainersEnabledOnCluster",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean getPrivilegedContainersEnabledOnCluster()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getPrivilegedContainersAcl",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AccessControlList getPrivilegedContainersAcl()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getEnvOciContainerPidNamespace",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getEnvOciContainerPidNamespace()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getEnvOciContainerRunPrivilegedContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getEnvOciContainerRunPrivilegedContainer()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "initialize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void initialize(Configuration conf, Context nmContext) throws ContainerExecutionException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "isOCICompliantContainerRequested",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isOCICompliantContainerRequested(Configuration daemonConf, Map<String, String> env)\n{\r\n    return isDockerContainerRequested(daemonConf, env) || isRuncContainerRequested(daemonConf, env);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "mountReadOnlyPath",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "String mountReadOnlyPath(String mount, Map<Path, List<String>> localizedResources) throws ContainerExecutionException\n{\r\n    for (Map.Entry<Path, List<String>> resource : localizedResources.entrySet()) {\r\n        if (resource.getValue().contains(mount)) {\r\n            java.nio.file.Path path = Paths.get(resource.getKey().toString());\r\n            if (!path.isAbsolute()) {\r\n                throw new ContainerExecutionException(\"Mount must be absolute: \" + mount);\r\n            }\r\n            if (Files.isSymbolicLink(path)) {\r\n                throw new ContainerExecutionException(\"Mount cannot be a symlink: \" + mount);\r\n            }\r\n            return path.toString();\r\n        }\r\n    }\r\n    throw new ContainerExecutionException(\"Mount must be a localized \" + \"resource: \" + mount);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "prepareContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void prepareContainer(ContainerRuntimeContext ctx) throws ContainerExecutionException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getUserIdInfo",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getUserIdInfo(String userName) throws ContainerExecutionException\n{\r\n    String id;\r\n    Shell.ShellCommandExecutor shexec = new Shell.ShellCommandExecutor(new String[] { \"id\", \"-u\", userName });\r\n    try {\r\n        shexec.execute();\r\n        id = shexec.getOutput().replaceAll(\"[^0-9]\", \"\");\r\n    } catch (Exception e) {\r\n        throw new ContainerExecutionException(e);\r\n    }\r\n    return id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getGroupIdInfo",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String[] getGroupIdInfo(String userName) throws ContainerExecutionException\n{\r\n    String[] id;\r\n    Shell.ShellCommandExecutor shexec = new Shell.ShellCommandExecutor(new String[] { \"id\", \"-G\", userName });\r\n    try {\r\n        shexec.execute();\r\n        id = shexec.getOutput().replace(\"\\n\", \"\").split(\" \");\r\n    } catch (Exception e) {\r\n        throw new ContainerExecutionException(e);\r\n    }\r\n    return id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "validateContainerNetworkType",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void validateContainerNetworkType(String network) throws ContainerExecutionException\n{\r\n    Set<String> allowedNetworks = getAllowedNetworks();\r\n    if (allowedNetworks.contains(network)) {\r\n        return;\r\n    }\r\n    String msg = \"Disallowed network:  '\" + network + \"' specified. Allowed networks: are \" + allowedNetworks.toString();\r\n    throw new ContainerExecutionException(msg);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "validateContainerRuntimeType",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void validateContainerRuntimeType(String runtime) throws ContainerExecutionException\n{\r\n    Set<String> allowedRuntimes = getAllowedRuntimes();\r\n    if (runtime == null || runtime.isEmpty() || allowedRuntimes.contains(runtime)) {\r\n        return;\r\n    }\r\n    String msg = \"Disallowed runtime:  '\" + runtime + \"' specified. Allowed runtimes: are \" + allowedRuntimes.toString();\r\n    throw new ContainerExecutionException(msg);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "allowHostPidNamespace",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "boolean allowHostPidNamespace(Container container) throws ContainerExecutionException\n{\r\n    Map<String, String> environment = container.getLaunchContext().getEnvironment();\r\n    String envOciContainerPidNamespace = getEnvOciContainerPidNamespace();\r\n    String pidNamespace = environment.get(envOciContainerPidNamespace);\r\n    if (pidNamespace == null) {\r\n        return false;\r\n    }\r\n    if (!pidNamespace.equalsIgnoreCase(\"host\")) {\r\n        LOG.warn(\"NOT requesting PID namespace. Value of \" + envOciContainerPidNamespace + \"is invalid: \" + pidNamespace);\r\n        return false;\r\n    }\r\n    boolean hostPidNamespaceEnabled = getHostPidNamespaceEnabled();\r\n    if (!hostPidNamespaceEnabled) {\r\n        String message = \"Host pid namespace being requested but this is not \" + \"enabled on this cluster\";\r\n        LOG.warn(message);\r\n        throw new ContainerExecutionException(message);\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "validateHostname",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void validateHostname(String hostname) throws ContainerExecutionException\n{\r\n    if (hostname != null && !hostname.isEmpty()) {\r\n        if (!HOSTNAME_PATTERN.matcher(hostname).matches()) {\r\n            throw new ContainerExecutionException(\"Hostname '\" + hostname + \"' doesn't match OCI-compliant hostname pattern\");\r\n        }\r\n        if (hostname.length() > HOST_NAME_LENGTH) {\r\n            throw new ContainerExecutionException(\"Hostname can not be greater than \" + HOST_NAME_LENGTH + \" characters: \" + hostname);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "allowPrivilegedContainerExecution",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "boolean allowPrivilegedContainerExecution(Container container) throws ContainerExecutionException\n{\r\n    if (!isContainerRequestedAsPrivileged(container)) {\r\n        return false;\r\n    }\r\n    LOG.info(\"Privileged container requested for : \" + container.getContainerId().toString());\r\n    boolean privilegedContainersEnabledOnCluster = getPrivilegedContainersEnabledOnCluster();\r\n    if (!privilegedContainersEnabledOnCluster) {\r\n        String message = \"Privileged container being requested but privileged \" + \"containers are not enabled on this cluster\";\r\n        LOG.warn(message);\r\n        throw new ContainerExecutionException(message);\r\n    }\r\n    String submittingUser = container.getUser();\r\n    UserGroupInformation submitterUgi = UserGroupInformation.createRemoteUser(submittingUser);\r\n    if (!getPrivilegedContainersAcl().isUserAllowed(submitterUgi)) {\r\n        String message = \"Cannot launch privileged container. Submitting user (\" + submittingUser + \") fails ACL check.\";\r\n        LOG.warn(message);\r\n        throw new ContainerExecutionException(message);\r\n    }\r\n    LOG.info(\"All checks pass. Launching privileged container for : \" + container.getContainerId().toString());\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "isContainerRequestedAsPrivileged",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean isContainerRequestedAsPrivileged(Container container)\n{\r\n    String envOciContainerRunPrivilegedContainer = getEnvOciContainerRunPrivilegedContainer();\r\n    String runPrivilegedContainerEnvVar = container.getLaunchContext().getEnvironment().get(envOciContainerRunPrivilegedContainer);\r\n    return Boolean.parseBoolean(runPrivilegedContainerEnvVar);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getCsiClients",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, CsiAdaptorProtocol> getCsiClients()\n{\r\n    return csiClients;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "initiateCsiClients",
  "errType" : [ "IOException|YarnException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void initiateCsiClients(Configuration config) throws ContainerExecutionException\n{\r\n    String[] driverNames = CsiConfigUtils.getCsiDriverNames(config);\r\n    if (driverNames != null && driverNames.length > 0) {\r\n        for (String driverName : driverNames) {\r\n            try {\r\n                InetSocketAddress adaptorServiceAddress = CsiConfigUtils.getCsiAdaptorAddressForDriver(driverName, config);\r\n                LOG.info(\"Initializing a csi-adaptor-client for csi-adaptor {},\" + \" csi-driver {}\", adaptorServiceAddress.toString(), driverName);\r\n                CsiAdaptorProtocolPBClientImpl client = new CsiAdaptorProtocolPBClientImpl(1L, adaptorServiceAddress, config);\r\n                csiClients.put(driverName, client);\r\n            } catch (IOException | YarnException e1) {\r\n                throw new ContainerExecutionException(e1.getMessage());\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "formatOciEnvKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String formatOciEnvKey(String runtimeTypeUpper, String envKeySuffix)\n{\r\n    return String.format(RUNTIME_PREFIX, runtimeTypeUpper, envKeySuffix);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "setScriptRunner",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setScriptRunner(Function<String, Optional<String>> scriptRunner)\n{\r\n    this.scriptRunner = scriptRunner;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "getCurrentFpgaInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<FpgaDevice> getCurrentFpgaInfo()\n{\r\n    return currentFpgaInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "setResourceHanderPlugin",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setResourceHanderPlugin(AbstractFpgaVendorPlugin vendorPlugin)\n{\r\n    this.plugin = vendorPlugin;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "diagnose",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean diagnose()\n{\r\n    return this.plugin.diagnose(MAX_EXEC_TIMEOUT_MS);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "initialize",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void initialize(Configuration config) throws YarnException\n{\r\n    setConf(config);\r\n    this.plugin.initPlugin(config);\r\n    LOG.info(\"Trying to diagnose FPGA information ...\");\r\n    if (!diagnose()) {\r\n        LOG.warn(\"Failed to pass FPGA devices diagnose\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "discover",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "List<FpgaDevice> discover() throws ResourceHandlerException\n{\r\n    List<FpgaDevice> list;\r\n    String allowed = getConf().get(YarnConfiguration.NM_FPGA_ALLOWED_DEVICES);\r\n    String availableDevices = getConf().get(YarnConfiguration.NM_FPGA_AVAILABLE_DEVICES);\r\n    String discoveryScript = getConf().get(YarnConfiguration.NM_FPGA_DEVICE_DISCOVERY_SCRIPT);\r\n    FPGADiscoveryStrategy discoveryStrategy;\r\n    if (availableDevices != null) {\r\n        discoveryStrategy = new SettingsBasedFPGADiscoveryStrategy(plugin.getFpgaType(), availableDevices);\r\n    } else if (discoveryScript != null) {\r\n        discoveryStrategy = new ScriptBasedFPGADiscoveryStrategy(plugin.getFpgaType(), scriptRunner, discoveryScript);\r\n    } else {\r\n        discoveryStrategy = new AoclOutputBasedDiscoveryStrategy(plugin);\r\n    }\r\n    list = discoveryStrategy.discover();\r\n    if (allowed == null || allowed.equalsIgnoreCase(YarnConfiguration.AUTOMATICALLY_DISCOVER_GPU_DEVICES)) {\r\n        currentFpgaInfo = ImmutableList.copyOf(list);\r\n        return list;\r\n    } else if (allowed.matches(\"(\\\\d,)*\\\\d\")) {\r\n        Set<String> minors = Sets.newHashSet(allowed.split(\",\"));\r\n        list = list.stream().filter(dev -> minors.contains(String.valueOf(dev.getMinor()))).collect(Collectors.toList());\r\n        currentFpgaInfo = ImmutableList.copyOf(list);\r\n        if (list.size() != minors.size()) {\r\n            LOG.warn(\"We continue although there're mistakes in user's configuration \" + YarnConfiguration.NM_FPGA_ALLOWED_DEVICES + \"user configured:\" + allowed + \", while the real:\" + list.toString());\r\n        }\r\n    } else {\r\n        throw new ResourceHandlerException(\"Invalid value configured for \" + YarnConfiguration.NM_FPGA_ALLOWED_DEVICES + \":\\\"\" + allowed + \"\\\"\");\r\n    }\r\n    return list;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "runScript",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 14,
  "sourceCodeText" : "Optional<String> runScript(String path)\n{\r\n    if (path == null || path.trim().isEmpty()) {\r\n        LOG.error(\"Undefined script\");\r\n        return Optional.empty();\r\n    }\r\n    File f = new File(path);\r\n    if (!f.exists()) {\r\n        LOG.error(\"Script does not exist\");\r\n        return Optional.empty();\r\n    }\r\n    if (!FileUtil.canExecute(f)) {\r\n        LOG.error(\"Script is not executable\");\r\n        return Optional.empty();\r\n    }\r\n    ShellCommandExecutor shell = new ShellCommandExecutor(new String[] { path }, null, null, MAX_EXEC_TIMEOUT_MS);\r\n    try {\r\n        shell.execute();\r\n        String output = shell.getOutput();\r\n        return Optional.of(output);\r\n    } catch (IOException e) {\r\n        LOG.error(\"Cannot execute script\", e);\r\n        return Optional.empty();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\application",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getUser()\n{\r\n    return user.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\application",
  "methodName" : "getAppId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationId getAppId()\n{\r\n    return appId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\application",
  "methodName" : "getApplicationState",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ApplicationState getApplicationState()\n{\r\n    this.readLock.lock();\r\n    try {\r\n        return this.stateMachine.getCurrentState();\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\application",
  "methodName" : "getContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Map<ContainerId, Container> getContainers()\n{\r\n    this.readLock.lock();\r\n    try {\r\n        return this.containers;\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\application",
  "methodName" : "setAppLogInitedTimestamp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAppLogInitedTimestamp(long appLogInitedTimestamp)\n{\r\n    this.applicationLogInitedTimestamp = appLogInitedTimestamp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\application",
  "methodName" : "buildAppProto",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "ContainerManagerApplicationProto buildAppProto(ApplicationImpl app) throws IOException\n{\r\n    ContainerManagerApplicationProto.Builder builder = ContainerManagerApplicationProto.newBuilder();\r\n    builder.setId(((ApplicationIdPBImpl) app.appId).getProto());\r\n    builder.setUser(app.getUser());\r\n    if (app.logAggregationContext != null) {\r\n        builder.setLogAggregationContext(((LogAggregationContextPBImpl) app.logAggregationContext).getProto());\r\n    }\r\n    builder.clearCredentials();\r\n    if (app.credentials != null) {\r\n        DataOutputBuffer dob = new DataOutputBuffer();\r\n        app.credentials.writeTokenStorageToStream(dob);\r\n        builder.setCredentials(ByteString.copyFrom(dob.getData()));\r\n    }\r\n    builder.clearAcls();\r\n    if (app.applicationACLs != null) {\r\n        for (Map.Entry<ApplicationAccessType, String> acl : app.applicationACLs.entrySet()) {\r\n            YarnProtos.ApplicationACLMapProto p = YarnProtos.ApplicationACLMapProto.newBuilder().setAccessType(ProtoUtils.convertToProtoFormat(acl.getKey())).setAcl(acl.getValue()).build();\r\n            builder.addAcls(p);\r\n        }\r\n    }\r\n    builder.setAppLogAggregationInitedTime(app.applicationLogInitedTimestamp);\r\n    builder.clearFlowContext();\r\n    if (app.flowContext != null && app.flowContext.getFlowName() != null && app.flowContext.getFlowVersion() != null) {\r\n        FlowContextProto fcp = FlowContextProto.newBuilder().setFlowName(app.flowContext.getFlowName()).setFlowVersion(app.flowContext.getFlowVersion()).setFlowRunId(app.flowContext.getFlowRunId()).build();\r\n        builder.setFlowContext(fcp);\r\n    }\r\n    return builder.build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\application",
  "methodName" : "handleAppFinishWithContainersCleanedup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void handleAppFinishWithContainersCleanedup()\n{\r\n    this.dispatcher.getEventHandler().handle(new ApplicationLocalizationEvent(LocalizationEventType.DESTROY_APPLICATION_RESOURCES, this));\r\n    this.dispatcher.getEventHandler().handle(new AuxServicesEvent(AuxServicesEventType.APPLICATION_STOP, appId));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\application",
  "methodName" : "handle",
  "errType" : [ "InvalidStateTransitionException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void handle(ApplicationEvent event)\n{\r\n    this.writeLock.lock();\r\n    try {\r\n        ApplicationId applicationID = event.getApplicationID();\r\n        LOG.debug(\"Processing {} of type {}\", applicationID, event.getType());\r\n        ApplicationState oldState = stateMachine.getCurrentState();\r\n        ApplicationState newState = null;\r\n        try {\r\n            newState = stateMachine.doTransition(event.getType(), event);\r\n        } catch (InvalidStateTransitionException e) {\r\n            LOG.error(\"Can't handle this event at current state\", e);\r\n        }\r\n        if (newState != null && oldState != newState) {\r\n            LOG.info(\"Application \" + applicationID + \" transitioned from \" + oldState + \" to \" + newState);\r\n        }\r\n    } finally {\r\n        this.writeLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\application",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return appId.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\application",
  "methodName" : "getLogAggregationContext",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "LogAggregationContext getLogAggregationContext()\n{\r\n    this.readLock.lock();\r\n    try {\r\n        return this.logAggregationContext;\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\application",
  "methodName" : "getFlowName",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getFlowName()\n{\r\n    return flowContext == null ? null : flowContext.getFlowName();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\application",
  "methodName" : "getFlowVersion",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getFlowVersion()\n{\r\n    return flowContext == null ? null : flowContext.getFlowVersion();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\application",
  "methodName" : "getFlowRunId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getFlowRunId()\n{\r\n    return flowContext == null ? 0L : flowContext.getFlowRunId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\application",
  "methodName" : "setFlowContext",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setFlowContext(FlowContext fc)\n{\r\n    this.flowContext = fc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\deviceplugin",
  "methodName" : "getVolumeDriver",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getVolumeDriver()\n{\r\n    return volumeDriver;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\deviceplugin",
  "methodName" : "getVolumeName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getVolumeName()\n{\r\n    return volumeName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\deviceplugin",
  "methodName" : "getVolumeOperation",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getVolumeOperation()\n{\r\n    return volumeOperation;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\deviceplugin",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "boolean equals(Object o)\n{\r\n    if (this == o) {\r\n        return true;\r\n    }\r\n    if (o == null || getClass() != o.getClass()) {\r\n        return false;\r\n    }\r\n    VolumeSpec other = (VolumeSpec) o;\r\n    return Objects.equals(volumeDriver, other.getVolumeDriver()) && Objects.equals(volumeName, other.getVolumeName()) && Objects.equals(volumeOperation, other.getVolumeOperation());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\deviceplugin",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return Objects.hash(volumeDriver, volumeName, volumeOperation);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\deviceplugin",
  "methodName" : "compareTo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int compareTo(Object o)\n{\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "buildParameters",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String buildParameters(float sampleRate, int minThreshold)\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(SAMPLE_RATE).append(\":\").append(sampleRate).append(\",\").append(MIN_THRESHOLD).append(\":\").append(minThreshold);\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "parseParameters",
  "errType" : [ "NumberFormatException", "NumberFormatException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void parseParameters(String parameters)\n{\r\n    Collection<String> params = StringUtils.getStringCollection(parameters);\r\n    for (String param : params) {\r\n        String[] property = StringUtils.getStrings(param, \":\");\r\n        if (property == null || property.length != 2) {\r\n            continue;\r\n        }\r\n        if (property[0].equals(SAMPLE_RATE)) {\r\n            try {\r\n                float sampleRate = Float.parseFloat(property[1]);\r\n                if (sampleRate >= 0.0 && sampleRate <= 1.0) {\r\n                    this.sampleRate = sampleRate;\r\n                } else {\r\n                    LOG.warn(\"The format isn't valid. Sample rate falls back to the \" + \"default value \" + DEFAULT_SAMPLE_RATE);\r\n                }\r\n            } catch (NumberFormatException nfe) {\r\n                LOG.warn(\"The format isn't valid. Sample rate falls back to the \" + \"default value \" + DEFAULT_SAMPLE_RATE);\r\n            }\r\n        } else if (property[0].equals(MIN_THRESHOLD)) {\r\n            try {\r\n                int minThreshold = Integer.parseInt(property[1]);\r\n                if (minThreshold >= 0) {\r\n                    this.minThreshold = minThreshold;\r\n                } else {\r\n                    LOG.warn(\"The format isn't valid. Min threshold falls back to \" + \"the default value \" + DEFAULT_SAMPLE_MIN_THRESHOLD);\r\n                }\r\n            } catch (NumberFormatException nfe) {\r\n                LOG.warn(\"The format isn't valid. Min threshold falls back to the \" + \"default value \" + DEFAULT_SAMPLE_MIN_THRESHOLD);\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "shouldDoLogAggregation",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean shouldDoLogAggregation(ContainerLogContext logContext)\n{\r\n    if (logContext.getContainerType() == ContainerType.APPLICATION_MASTER || logContext.getExitCode() != 0) {\r\n        return true;\r\n    }\r\n    if ((logContext.getContainerId().getContainerId() & ContainerId.CONTAINER_ID_BITMASK) < minThreshold + 2) {\r\n        return true;\r\n    }\r\n    return (sampleRate != 0 && logContext.getContainerId().hashCode() % (1 / sampleRate) == 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getContainerId()\n{\r\n    return containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "setContainerId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setContainerId(String containerId)\n{\r\n    this.containerId = containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean equals(Object obj)\n{\r\n    if (!(obj instanceof AssignedGpuDevice)) {\r\n        return false;\r\n    }\r\n    AssignedGpuDevice other = (AssignedGpuDevice) obj;\r\n    return index == other.index && minorNumber == other.minorNumber && containerId.equals(other.containerId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "compareTo",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int compareTo(Object obj)\n{\r\n    if ((!(obj instanceof AssignedGpuDevice))) {\r\n        return -1;\r\n    }\r\n    AssignedGpuDevice other = (AssignedGpuDevice) obj;\r\n    int result = Integer.compare(index, other.index);\r\n    if (0 != result) {\r\n        return result;\r\n    }\r\n    result = Integer.compare(minorNumber, other.minorNumber);\r\n    if (0 != result) {\r\n        return result;\r\n    }\r\n    return containerId.compareTo(other.containerId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    final int prime = 47;\r\n    return prime * (prime * index + minorNumber) + containerId.hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "getOverallGpuUtilization",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Float getOverallGpuUtilization()\n{\r\n    return overallGpuUtilization;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "setOverallGpuUtilization",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setOverallGpuUtilization(Float overallGpuUtilization)\n{\r\n    this.overallGpuUtilization = overallGpuUtilization;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\sharedcache",
  "methodName" : "call",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 21,
  "sourceCodeText" : "Boolean call() throws Exception\n{\r\n    Path tempPath = null;\r\n    try {\r\n        if (!verifyAccess()) {\r\n            LOG.warn(\"User \" + user + \" is not authorized to upload file \" + localPath.getName());\r\n            return false;\r\n        }\r\n        Path actualPath = getActualPath();\r\n        String checksumVal = computeChecksum(actualPath);\r\n        Path directoryPath = new Path(SharedCacheUtil.getCacheEntryPath(nestedLevel, sharedCacheRootDir, checksumVal));\r\n        fs.mkdirs(directoryPath, DIRECTORY_PERMISSION);\r\n        tempPath = new Path(directoryPath, getTemporaryFileName(actualPath));\r\n        if (!uploadFile(actualPath, tempPath)) {\r\n            LOG.warn(\"Could not copy the file to the shared cache at \" + tempPath);\r\n            return false;\r\n        }\r\n        fs.setPermission(tempPath, FILE_PERMISSION);\r\n        Path finalPath = new Path(directoryPath, actualPath.getName());\r\n        if (!fs.rename(tempPath, finalPath)) {\r\n            LOG.warn(\"The file already exists under \" + finalPath + \". Ignoring this attempt.\");\r\n            deleteTempFile(tempPath);\r\n            return false;\r\n        }\r\n        if (!notifySharedCacheManager(checksumVal, actualPath.getName())) {\r\n            fs.delete(finalPath, false);\r\n            return false;\r\n        }\r\n        short replication = (short) conf.getInt(YarnConfiguration.SHARED_CACHE_NM_UPLOADER_REPLICATION_FACTOR, YarnConfiguration.DEFAULT_SHARED_CACHE_NM_UPLOADER_REPLICATION_FACTOR);\r\n        fs.setReplication(finalPath, replication);\r\n        LOG.info(\"File \" + actualPath.getName() + \" was uploaded to the shared cache at \" + finalPath);\r\n        return true;\r\n    } catch (IOException e) {\r\n        LOG.warn(\"Exception while uploading the file \" + localPath.getName(), e);\r\n        deleteTempFile(tempPath);\r\n        throw e;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\sharedcache",
  "methodName" : "getActualPath",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Path getActualPath() throws IOException\n{\r\n    Path path = localPath;\r\n    FileStatus status = localFs.getFileStatus(path);\r\n    if (status != null && status.isDirectory()) {\r\n        path = new Path(path, path.getName());\r\n    }\r\n    return path;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\sharedcache",
  "methodName" : "deleteTempFile",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void deleteTempFile(Path tempPath)\n{\r\n    try {\r\n        if (tempPath != null) {\r\n            fs.delete(tempPath, false);\r\n        }\r\n    } catch (IOException ioe) {\r\n        LOG.debug(\"Exception received while deleting temp files\", ioe);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\sharedcache",
  "methodName" : "verifyAccess",
  "errType" : [ "URISyntaxException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "boolean verifyAccess() throws IOException\n{\r\n    if (resource.getVisibility() == LocalResourceVisibility.PUBLIC) {\r\n        return true;\r\n    }\r\n    final Path remotePath;\r\n    try {\r\n        remotePath = resource.getResource().toPath();\r\n    } catch (URISyntaxException e) {\r\n        throw new IOException(\"Invalid resource\", e);\r\n    }\r\n    FileSystem remoteFs = remotePath.getFileSystem(conf);\r\n    FileStatus status = remoteFs.getFileStatus(remotePath);\r\n    if (status.getModificationTime() != resource.getTimestamp()) {\r\n        LOG.warn(\"The remote file \" + remotePath + \" has changed since it's localized; will not consider it for upload\");\r\n        return false;\r\n    }\r\n    if (status.getOwner().equals(user)) {\r\n        return true;\r\n    }\r\n    return fileIsPublic(remotePath, remoteFs, status);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\sharedcache",
  "methodName" : "fileIsPublic",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean fileIsPublic(final Path remotePath, FileSystem remoteFs, FileStatus status) throws IOException\n{\r\n    return FSDownload.isPublic(remoteFs, remotePath, status, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\sharedcache",
  "methodName" : "uploadFile",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean uploadFile(Path sourcePath, Path tempPath) throws IOException\n{\r\n    return FileUtil.copy(localFs, sourcePath, fs, tempPath, false, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\sharedcache",
  "methodName" : "computeChecksum",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String computeChecksum(Path path) throws IOException\n{\r\n    InputStream is = localFs.open(path);\r\n    try {\r\n        return checksum.computeChecksum(is);\r\n    } finally {\r\n        try {\r\n            is.close();\r\n        } catch (IOException ignore) {\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\sharedcache",
  "methodName" : "getTemporaryFileName",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getTemporaryFileName(Path path)\n{\r\n    return path.getName() + \"-\" + ThreadLocalRandom.current().nextLong();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\sharedcache",
  "methodName" : "notifySharedCacheManager",
  "errType" : [ "YarnException", "UndeclaredThrowableException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "boolean notifySharedCacheManager(String checksumVal, String fileName) throws IOException\n{\r\n    try {\r\n        SCMUploaderNotifyRequest request = recordFactory.newRecordInstance(SCMUploaderNotifyRequest.class);\r\n        request.setResourceKey(checksumVal);\r\n        request.setFilename(fileName);\r\n        return scmClient.notify(request).getAccepted();\r\n    } catch (YarnException e) {\r\n        throw new IOException(e);\r\n    } catch (UndeclaredThrowableException e) {\r\n        throw new IOException(e.getCause() == null ? e : e.getCause());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "setTimerTask",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setTimerTask(TimerTask timerTask)\n{\r\n    task = timerTask;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "getTimerTask",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimerTask getTimerTask()\n{\r\n    return task;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    if (task == null) {\r\n        throw new Exception(\"Health reporting task hasn't been set!\");\r\n    }\r\n    timer = new Timer(\"HealthReporterService-Timer\", true);\r\n    long delay = 0;\r\n    if (runBeforeStartup) {\r\n        delay = intervalMs;\r\n        task.run();\r\n    }\r\n    timer.scheduleAtFixedRate(task, delay, intervalMs);\r\n    super.serviceStart();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    if (timer != null) {\r\n        timer.cancel();\r\n    }\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "isHealthy",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isHealthy()\n{\r\n    return isHealthy;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "setHealthy",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setHealthy(boolean healthy)\n{\r\n    this.isHealthy = healthy;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "getHealthReport",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getHealthReport()\n{\r\n    return healthReport;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "setHealthReport",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setHealthReport(String report)\n{\r\n    this.healthReport = report;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "getLastHealthReportTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getLastHealthReportTime()\n{\r\n    return lastReportedTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "setLastReportedTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setLastReportedTime(long lastReportedTime)\n{\r\n    this.lastReportedTime = lastReportedTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "setHealthyWithoutReport",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setHealthyWithoutReport()\n{\r\n    this.setHealthy(true);\r\n    this.setHealthReport(\"\");\r\n    this.setLastReportedTime(System.currentTimeMillis());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "setUnhealthyWithReport",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setUnhealthyWithReport(String output)\n{\r\n    LOG.info(\"Health status being set as: \\\"\" + output + \"\\\".\");\r\n    this.setHealthy(false);\r\n    this.setHealthReport(output);\r\n    this.setLastReportedTime(System.currentTimeMillis());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "getNodeStatusUpdater",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeStatusUpdater getNodeStatusUpdater()\n{\r\n    return nodeStatusUpdater;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "setNodeStatusUpdater",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNodeStatusUpdater(NodeStatusUpdater nodeStatusUpdater)\n{\r\n    this.nodeStatusUpdater = nodeStatusUpdater;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws IOException\n{\r\n    initStorage(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void serviceStart() throws IOException\n{\r\n    startStorage();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void serviceStop() throws IOException\n{\r\n    closeStorage();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "canRecover",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean canRecover()\n{\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "isNewlyCreated",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isNewlyCreated()\n{\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadApplicationsState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RecoveredApplicationsState loadApplicationsState() throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeApplication",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeApplication(ApplicationId appId, ContainerManagerApplicationProto p) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeApplication",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void removeApplication(ApplicationId appId) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "getContainerStateIterator",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RecoveryIterator<RecoveredContainerState> getContainerStateIterator() throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeContainer(ContainerId containerId, int containerVersion, long startTime, StartContainerRequest startRequest) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerQueued",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeContainerQueued(ContainerId containerId) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerPaused",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeContainerPaused(ContainerId containerId) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeContainerPaused",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void removeContainerPaused(ContainerId containerId) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerLaunched",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeContainerLaunched(ContainerId containerId) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerUpdateToken",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeContainerUpdateToken(ContainerId containerId, ContainerTokenIdentifier containerTokenIdentifier) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerCompleted",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeContainerCompleted(ContainerId containerId, int exitCode) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerKilled",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeContainerKilled(ContainerId containerId) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerDiagnostics",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeContainerDiagnostics(ContainerId containerId, StringBuilder diagnostics) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerRemainingRetryAttempts",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeContainerRemainingRetryAttempts(ContainerId containerId, int remainingRetryAttempts) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerRestartTimes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeContainerRestartTimes(ContainerId containerId, List<Long> restartTimes) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerWorkDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeContainerWorkDir(ContainerId containerId, String workDir) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerLogDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeContainerLogDir(ContainerId containerId, String logDir) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void removeContainer(ContainerId containerId) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadLocalizationState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RecoveredLocalizationState loadLocalizationState() throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "startResourceLocalization",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void startResourceLocalization(String user, ApplicationId appId, LocalResourceProto proto, Path localPath) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "finishResourceLocalization",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void finishResourceLocalization(String user, ApplicationId appId, LocalizedResourceProto proto) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeLocalizedResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void removeLocalizedResource(String user, ApplicationId appId, Path localPath) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadDeletionServiceState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RecoveredDeletionServiceState loadDeletionServiceState() throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeDeletionTask",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeDeletionTask(int taskId, DeletionServiceDeleteTaskProto taskProto) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeDeletionTask",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void removeDeletionTask(int taskId) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadNMTokensState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RecoveredNMTokensState loadNMTokensState() throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeNMTokenCurrentMasterKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeNMTokenCurrentMasterKey(MasterKey key) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeNMTokenPreviousMasterKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeNMTokenPreviousMasterKey(MasterKey key) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeNMTokenApplicationMasterKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeNMTokenApplicationMasterKey(ApplicationAttemptId attempt, MasterKey key) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeNMTokenApplicationMasterKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void removeNMTokenApplicationMasterKey(ApplicationAttemptId attempt) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadContainerTokensState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RecoveredContainerTokensState loadContainerTokensState() throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerTokenCurrentMasterKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeContainerTokenCurrentMasterKey(MasterKey key) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerTokenPreviousMasterKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeContainerTokenPreviousMasterKey(MasterKey key) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerToken",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeContainerToken(ContainerId containerId, Long expirationTime) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeContainerToken",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void removeContainerToken(ContainerId containerId) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadLogDeleterState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RecoveredLogDeleterState loadLogDeleterState() throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeLogDeleter",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeLogDeleter(ApplicationId appId, LogDeleterProto proto) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeLogDeleter",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void removeLogDeleter(ApplicationId appId) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadAMRMProxyState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RecoveredAMRMProxyState loadAMRMProxyState() throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeAMRMProxyCurrentMasterKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeAMRMProxyCurrentMasterKey(MasterKey key) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeAMRMProxyNextMasterKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeAMRMProxyNextMasterKey(MasterKey key) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeAMRMProxyAppContextEntry",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeAMRMProxyAppContextEntry(ApplicationAttemptId attempt, String key, byte[] data) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeAMRMProxyAppContextEntry",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void removeAMRMProxyAppContextEntry(ApplicationAttemptId attempt, String key) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeAMRMProxyAppContext",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void removeAMRMProxyAppContext(ApplicationAttemptId attempt) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeAssignedResources",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeAssignedResources(Container container, String resourceType, List<Serializable> assignedResources) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "initStorage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void initStorage(Configuration conf) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "startStorage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void startStorage() throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "closeStorage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void closeStorage() throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "updateContainerResourceMapping",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void updateContainerResourceMapping(Container container, String resourceType, List<Serializable> assignedResources)\n{\r\n    ResourceMappings.AssignedResources newAssigned = new ResourceMappings.AssignedResources();\r\n    newAssigned.updateAssignedResources(assignedResources);\r\n    container.getResourceMappings().addAssignedResources(resourceType, newAssigned);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getDiagnostic",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDiagnostic()\n{\r\n    return this.diagnostic;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getContainerExitStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getContainerExitStatus()\n{\r\n    return this.exitStatus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    reporters.add(exceptionReporter);\r\n    addHealthReporter(dirsHandler);\r\n    String[] configuredScripts = conf.getTrimmedStrings(YarnConfiguration.NM_HEALTH_CHECK_SCRIPTS, YarnConfiguration.DEFAULT_NM_HEALTH_CHECK_SCRIPTS);\r\n    if (configuredScripts.length > MAX_SCRIPTS) {\r\n        throw new IllegalArgumentException(\"Due to performance reasons \" + \"running more than \" + MAX_SCRIPTS + \"scripts is not allowed.\");\r\n    }\r\n    for (String configuredScript : configuredScripts) {\r\n        addHealthReporter(NodeHealthScriptRunner.newInstance(configuredScript, conf));\r\n    }\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "addHealthReporter",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void addHealthReporter(Service service) throws Exception\n{\r\n    if (service != null) {\r\n        if (getServices().stream().noneMatch(x -> x.getName().equals(service.getName()))) {\r\n            if (!(service instanceof HealthReporter)) {\r\n                throw new Exception(\"Attempted to add service to \" + \"NodeHealthCheckerService that does not implement \" + \"HealthReporter.\");\r\n            }\r\n            reporters.add((HealthReporter) service);\r\n            addService(service);\r\n        } else {\r\n            LOG.debug(\"Omitting duplicate service: {}.\", service.getName());\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "getHealthReport",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getHealthReport()\n{\r\n    ArrayList<String> reports = reporters.stream().map(reporter -> Strings.emptyToNull(reporter.getHealthReport())).collect(Collectors.toCollection(ArrayList::new));\r\n    return Joiner.on(SEPARATOR).skipNulls().join(reports);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "isHealthy",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isHealthy()\n{\r\n    return reporters.stream().allMatch(HealthReporter::isHealthy);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "getLastHealthReportTime",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getLastHealthReportTime()\n{\r\n    Optional<Long> max = reporters.stream().map(HealthReporter::getLastHealthReportTime).max(Long::compareTo);\r\n    return max.orElse(0L);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "getDiskHandler",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LocalDirsHandlerService getDiskHandler()\n{\r\n    return dirsHandler;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "reportException",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void reportException(Exception exception)\n{\r\n    exceptionReporter.reportException(exception);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "isForReInit",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isForReInit()\n{\r\n    return forReInit;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "getAllAllowedDevices",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, Set<Device>> getAllAllowedDevices()\n{\r\n    return allAllowedDevices;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "getAllUsedDevices",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, Map<Device, ContainerId>> getAllUsedDevices()\n{\r\n    return allUsedDevices;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "getDevicePluginSchedulers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, DevicePluginScheduler> getDevicePluginSchedulers()\n{\r\n    return devicePluginSchedulers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "getAllocatedDevices",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Set<Device> getAllocatedDevices(String resourceName, ContainerId cId)\n{\r\n    Set<Device> assigned = new TreeSet<>();\r\n    Map<Device, ContainerId> assignedMap = this.getAllUsedDevices().get(resourceName);\r\n    for (Map.Entry<Device, ContainerId> entry : assignedMap.entrySet()) {\r\n        if (entry.getValue().equals(cId)) {\r\n            assigned.add(entry.getKey());\r\n        }\r\n    }\r\n    return assigned;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "addDeviceSet",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void addDeviceSet(String resourceName, Set<Device> deviceSet)\n{\r\n    LOG.info(\"Adding new resource: \" + \"type:\" + resourceName + \",\" + deviceSet);\r\n    allAllowedDevices.put(resourceName, new TreeSet<>(deviceSet));\r\n    allUsedDevices.put(resourceName, new TreeMap<>());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "assignDevices",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "DeviceAllocation assignDevices(String resourceName, Container container) throws ResourceHandlerException\n{\r\n    DeviceAllocation allocation = internalAssignDevices(resourceName, container);\r\n    final int timeoutMsecs = 120 * WAIT_MS_PER_LOOP;\r\n    int timeWaiting = 0;\r\n    while (allocation == null) {\r\n        if (timeWaiting >= timeoutMsecs) {\r\n            break;\r\n        }\r\n        try {\r\n            LOG.info(\"Container : \" + container.getContainerId() + \" is waiting for free \" + resourceName + \" devices.\");\r\n            Thread.sleep(WAIT_MS_PER_LOOP);\r\n            timeWaiting += WAIT_MS_PER_LOOP;\r\n            allocation = internalAssignDevices(resourceName, container);\r\n        } catch (InterruptedException e) {\r\n            break;\r\n        }\r\n    }\r\n    if (allocation == null) {\r\n        String message = \"Could not get valid \" + resourceName + \" device for container '\" + container.getContainerId() + \"' as some other containers might not releasing them.\";\r\n        LOG.warn(message);\r\n        throw new ResourceHandlerException(message);\r\n    }\r\n    return allocation;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "internalAssignDevices",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "DeviceAllocation internalAssignDevices(String resourceName, Container container) throws ResourceHandlerException\n{\r\n    Resource requestedResource = container.getResource();\r\n    ContainerId containerId = container.getContainerId();\r\n    int requestedDeviceCount = getRequestedDeviceCount(resourceName, requestedResource);\r\n    LOG.debug(\"Try allocating {} {}\", requestedDeviceCount, resourceName);\r\n    if (requestedDeviceCount > 0) {\r\n        if (requestedDeviceCount > getAvailableDevices(resourceName)) {\r\n            if (requestedDeviceCount <= getReleasingDevices(resourceName) + getAvailableDevices(resourceName)) {\r\n                return null;\r\n            }\r\n        }\r\n        int availableDeviceCount = getAvailableDevices(resourceName);\r\n        if (requestedDeviceCount > availableDeviceCount) {\r\n            throw new ResourceHandlerException(\"Failed to find enough \" + resourceName + \", requestor=\" + containerId + \", #Requested=\" + requestedDeviceCount + \", #available=\" + availableDeviceCount);\r\n        }\r\n        Set<Device> assignedDevices = new TreeSet<>();\r\n        Map<Device, ContainerId> usedDevices = allUsedDevices.get(resourceName);\r\n        Set<Device> allowedDevices = allAllowedDevices.get(resourceName);\r\n        DevicePluginScheduler dps = devicePluginSchedulers.get(resourceName);\r\n        pickAndDoSchedule(allowedDevices, usedDevices, assignedDevices, container, requestedDeviceCount, resourceName, dps);\r\n        if (!assignedDevices.isEmpty()) {\r\n            try {\r\n                nmContext.getNMStateStore().storeAssignedResources(container, resourceName, new ArrayList<>(assignedDevices));\r\n            } catch (IOException e) {\r\n                cleanupAssignedDevices(resourceName, containerId);\r\n                throw new ResourceHandlerException(e);\r\n            }\r\n        }\r\n        return new DeviceAllocation(resourceName, assignedDevices, Sets.differenceInTreeSets(allowedDevices, assignedDevices));\r\n    }\r\n    return new DeviceAllocation(resourceName, null, allAllowedDevices.get(resourceName));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "recoverAssignedDevices",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void recoverAssignedDevices(String resourceName, ContainerId containerId) throws ResourceHandlerException\n{\r\n    Container c = nmContext.getContainers().get(containerId);\r\n    Map<Device, ContainerId> usedDevices = allUsedDevices.get(resourceName);\r\n    Set<Device> allowedDevices = allAllowedDevices.get(resourceName);\r\n    if (null == c) {\r\n        throw new ResourceHandlerException(\"This shouldn't happen, cannot find container with id=\" + containerId);\r\n    }\r\n    for (Serializable deviceSerializable : c.getResourceMappings().getAssignedResources(resourceName)) {\r\n        if (!(deviceSerializable instanceof Device)) {\r\n            throw new ResourceHandlerException(\"Trying to recover device id, however it\" + \" is not Device instance, this shouldn't happen\");\r\n        }\r\n        Device device = (Device) deviceSerializable;\r\n        if (!allowedDevices.contains(device)) {\r\n            throw new ResourceHandlerException(\"Try to recover device = \" + device + \" however it is not in allowed device list:\" + StringUtils.join(\",\", allowedDevices));\r\n        }\r\n        if (usedDevices.containsKey(device)) {\r\n            throw new ResourceHandlerException(\"Try to recover device id = \" + device + \" however it is already assigned to container=\" + usedDevices.get(device) + \", please double check what happened.\");\r\n        }\r\n        usedDevices.put(device, containerId);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "cleanupAssignedDevices",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void cleanupAssignedDevices(String resourceName, ContainerId containerId)\n{\r\n    Iterator<Map.Entry<Device, ContainerId>> iter = allUsedDevices.get(resourceName).entrySet().iterator();\r\n    Map.Entry<Device, ContainerId> entry;\r\n    while (iter.hasNext()) {\r\n        entry = iter.next();\r\n        if (entry.getValue().equals(containerId)) {\r\n            LOG.debug(\"Recycle devices: {}, type: {} from {}\", entry.getKey(), resourceName, containerId);\r\n            iter.remove();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "getRequestedDeviceCount",
  "errType" : [ "ResourceNotFoundException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getRequestedDeviceCount(String resName, Resource requestedResource)\n{\r\n    try {\r\n        return Long.valueOf(requestedResource.getResourceValue(resName)).intValue();\r\n    } catch (ResourceNotFoundException e) {\r\n        return 0;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "getAvailableDevices",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int getAvailableDevices(String resourceName)\n{\r\n    return allAllowedDevices.get(resourceName).size() - allUsedDevices.get(resourceName).size();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "getReleasingDevices",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "long getReleasingDevices(String resourceName)\n{\r\n    long releasingDevices = 0;\r\n    Map<Device, ContainerId> used = allUsedDevices.get(resourceName);\r\n    for (ContainerId containerId : ImmutableSet.copyOf(used.values())) {\r\n        Container container = nmContext.getContainers().get(containerId);\r\n        if (container != null) {\r\n            if (container.isContainerInFinalStates()) {\r\n                releasingDevices = releasingDevices + container.getResource().getResourceInformation(resourceName).getValue();\r\n            }\r\n        }\r\n    }\r\n    return releasingDevices;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "pickAndDoSchedule",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void pickAndDoSchedule(Set<Device> allowed, Map<Device, ContainerId> used, Set<Device> assigned, Container c, int count, String resourceName, DevicePluginScheduler dps) throws ResourceHandlerException\n{\r\n    ContainerId containerId = c.getContainerId();\r\n    Map<String, String> env = c.getLaunchContext().getEnvironment();\r\n    if (null == dps) {\r\n        LOG.debug(\"Customized device plugin scheduler is preferred \" + \"but not implemented, use default logic\");\r\n        defaultScheduleAction(allowed, used, assigned, containerId, count);\r\n    } else {\r\n        if (LOG.isDebugEnabled()) {\r\n            LOG.debug(\"Customized device plugin implemented,\" + \"use customized logic\");\r\n            LOG.debug(\"Try to schedule \" + count + \"(\" + resourceName + \") using \" + dps.getClass());\r\n        }\r\n        Set<Device> dpsAllocated = dps.allocateDevices(Sets.differenceInTreeSets(allowed, used.keySet()), count, ImmutableMap.copyOf(env));\r\n        if (dpsAllocated.size() != count) {\r\n            throw new ResourceHandlerException(dps.getClass() + \" should allocate \" + count + \" of \" + resourceName + \", but actual: \" + assigned.size());\r\n        }\r\n        assigned.addAll(dpsAllocated);\r\n        for (Device device : assigned) {\r\n            used.put(device, containerId);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "defaultScheduleAction",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void defaultScheduleAction(Set<Device> allowed, Map<Device, ContainerId> used, Set<Device> assigned, ContainerId containerId, int count)\n{\r\n    LOG.debug(\"Using default scheduler. Allowed:\" + allowed + \",Used:\" + used + \", containerId:\" + containerId);\r\n    for (Device device : allowed) {\r\n        if (!used.containsKey(device)) {\r\n            used.put(device, containerId);\r\n            assigned.add(device);\r\n            if (assigned.size() == count) {\r\n                return;\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "addDevicePluginScheduler",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addDevicePluginScheduler(String resourceName, DevicePluginScheduler s)\n{\r\n    this.devicePluginSchedulers.put(resourceName, Objects.requireNonNull(s));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "preHead",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void preHead(Page.HTML<__> html)\n{\r\n    String redirectUrl = $(REDIRECT_URL);\r\n    if (redirectUrl == null || redirectUrl.isEmpty()) {\r\n        set(TITLE, join(\"Logs for \", $(CONTAINER_ID)));\r\n    } else {\r\n        if (redirectUrl.equals(\"false\")) {\r\n            set(TITLE, join(\"Failed redirect for \", $(CONTAINER_ID)));\r\n        }\r\n    }\r\n    set(ACCORDION_ID, \"nav\");\r\n    set(initID(ACCORDION, \"nav\"), \"{autoHeight:false, active:0}\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "content",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<? extends SubView> content()\n{\r\n    return ContainersLogsBlock.class;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getNmPrivateContainerTokens",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Path getNmPrivateContainerTokens()\n{\r\n    return this.nmPrivateContainerTokens;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getNmAddr",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "InetSocketAddress getNmAddr()\n{\r\n    return this.nmAddr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUser()\n{\r\n    return this.user;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getAppId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getAppId()\n{\r\n    return this.appId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getLocId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getLocId()\n{\r\n    return this.locId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getDirsHandler",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LocalDirsHandlerService getDirsHandler()\n{\r\n    return this.dirsHandler;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "canRecover",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean canRecover()\n{\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadApplicationsState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RecoveredApplicationsState loadApplicationsState() throws IOException\n{\r\n    throw new UnsupportedOperationException(\"Recovery not supported by this state store\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeApplication",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeApplication(ApplicationId appId, ContainerManagerApplicationProto p) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeApplication",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void removeApplication(ApplicationId appId) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "getContainerStateIterator",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RecoveryIterator<RecoveredContainerState> getContainerStateIterator() throws IOException\n{\r\n    throw new UnsupportedOperationException(\"Recovery not supported by this state store\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeContainer(ContainerId containerId, int version, long startTime, StartContainerRequest startRequest)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerQueued",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeContainerQueued(ContainerId containerId) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerPaused",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeContainerPaused(ContainerId containerId) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeContainerPaused",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void removeContainerPaused(ContainerId containerId) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerDiagnostics",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeContainerDiagnostics(ContainerId containerId, StringBuilder diagnostics) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerLaunched",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeContainerLaunched(ContainerId containerId) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerUpdateToken",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeContainerUpdateToken(ContainerId containerId, ContainerTokenIdentifier containerTokenIdentifier) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerKilled",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeContainerKilled(ContainerId containerId) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerCompleted",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeContainerCompleted(ContainerId containerId, int exitCode) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerRemainingRetryAttempts",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeContainerRemainingRetryAttempts(ContainerId containerId, int remainingRetryAttempts) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerRestartTimes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeContainerRestartTimes(ContainerId containerId, List<Long> restartTimes) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerWorkDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeContainerWorkDir(ContainerId containerId, String workDir) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerLogDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeContainerLogDir(ContainerId containerId, String logDir) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void removeContainer(ContainerId containerId) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadLocalizationState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RecoveredLocalizationState loadLocalizationState() throws IOException\n{\r\n    throw new UnsupportedOperationException(\"Recovery not supported by this state store\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "startResourceLocalization",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void startResourceLocalization(String user, ApplicationId appId, LocalResourceProto proto, Path localPath) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "finishResourceLocalization",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void finishResourceLocalization(String user, ApplicationId appId, LocalizedResourceProto proto) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeLocalizedResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void removeLocalizedResource(String user, ApplicationId appId, Path localPath) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadDeletionServiceState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RecoveredDeletionServiceState loadDeletionServiceState() throws IOException\n{\r\n    throw new UnsupportedOperationException(\"Recovery not supported by this state store\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeDeletionTask",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeDeletionTask(int taskId, DeletionServiceDeleteTaskProto taskProto) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeDeletionTask",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void removeDeletionTask(int taskId) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadNMTokensState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RecoveredNMTokensState loadNMTokensState() throws IOException\n{\r\n    throw new UnsupportedOperationException(\"Recovery not supported by this state store\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeNMTokenCurrentMasterKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeNMTokenCurrentMasterKey(MasterKey key) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeNMTokenPreviousMasterKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeNMTokenPreviousMasterKey(MasterKey key) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeNMTokenApplicationMasterKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeNMTokenApplicationMasterKey(ApplicationAttemptId attempt, MasterKey key) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeNMTokenApplicationMasterKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void removeNMTokenApplicationMasterKey(ApplicationAttemptId attempt) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadContainerTokensState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RecoveredContainerTokensState loadContainerTokensState() throws IOException\n{\r\n    throw new UnsupportedOperationException(\"Recovery not supported by this state store\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerTokenCurrentMasterKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeContainerTokenCurrentMasterKey(MasterKey key) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerTokenPreviousMasterKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeContainerTokenPreviousMasterKey(MasterKey key) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerToken",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeContainerToken(ContainerId containerId, Long expirationTime) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeContainerToken",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void removeContainerToken(ContainerId containerId) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadLogDeleterState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RecoveredLogDeleterState loadLogDeleterState() throws IOException\n{\r\n    throw new UnsupportedOperationException(\"Recovery not supported by this state store\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeLogDeleter",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeLogDeleter(ApplicationId appId, LogDeleterProto proto) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeLogDeleter",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void removeLogDeleter(ApplicationId appId) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadAMRMProxyState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RecoveredAMRMProxyState loadAMRMProxyState() throws IOException\n{\r\n    throw new UnsupportedOperationException(\"Recovery not supported by this state store\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeAMRMProxyCurrentMasterKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeAMRMProxyCurrentMasterKey(MasterKey key) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeAMRMProxyNextMasterKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeAMRMProxyNextMasterKey(MasterKey key) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeAMRMProxyAppContextEntry",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeAMRMProxyAppContextEntry(ApplicationAttemptId attempt, String key, byte[] data) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeAMRMProxyAppContextEntry",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void removeAMRMProxyAppContextEntry(ApplicationAttemptId attempt, String key) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeAMRMProxyAppContext",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void removeAMRMProxyAppContext(ApplicationAttemptId attempt) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeAssignedResources",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void storeAssignedResources(Container container, String resourceType, List<Serializable> assignedResources) throws IOException\n{\r\n    updateContainerResourceMapping(container, resourceType, assignedResources);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "initStorage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void initStorage(Configuration conf) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "startStorage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void startStorage() throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "closeStorage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void closeStorage() throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "commonPreHead",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void commonPreHead(HTML<__> html)\n{\r\n    super.commonPreHead(html);\r\n    setTitle(\"NodeManager information\");\r\n    set(initID(ACCORDION, \"nav\"), \"{autoHeight:false, active:1}\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "content",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<? extends SubView> content()\n{\r\n    return NodeBlock.class;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "expandEnvironment",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "String expandEnvironment(String var, Path containerLogDir)\n{\r\n    var = var.replace(ApplicationConstants.LOG_DIR_EXPANSION_VAR, containerLogDir.toString());\r\n    var = var.replace(ApplicationConstants.CLASS_PATH_SEPARATOR, File.pathSeparator);\r\n    if (Shell.WINDOWS) {\r\n        var = var.replaceAll(\"(\\\\{\\\\{)|(\\\\}\\\\})\", \"%\");\r\n    } else {\r\n        var = var.replace(ApplicationConstants.PARAMETER_EXPANSION_LEFT, \"$\");\r\n        var = var.replace(ApplicationConstants.PARAMETER_EXPANSION_RIGHT, \"\");\r\n    }\r\n    return var;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "expandAllEnvironmentVars",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void expandAllEnvironmentVars(Map<String, String> environment, Path containerLogDir)\n{\r\n    for (Entry<String, String> entry : environment.entrySet()) {\r\n        String value = entry.getValue();\r\n        value = expandEnvironment(value, containerLogDir);\r\n        entry.setValue(value);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "addKeystoreVars",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void addKeystoreVars(Map<String, String> environment, Path containerWorkDir)\n{\r\n    environment.put(ApplicationConstants.KEYSTORE_FILE_LOCATION_ENV_NAME, new Path(containerWorkDir, ContainerLaunch.KEYSTORE_FILE).toUri().getPath());\r\n    environment.put(ApplicationConstants.KEYSTORE_PASSWORD_ENV_NAME, new String(container.getCredentials().getSecretKey(AMSecretKeys.YARN_APPLICATION_AM_KEYSTORE_PASSWORD), StandardCharsets.UTF_8));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "addTruststoreVars",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void addTruststoreVars(Map<String, String> environment, Path containerWorkDir)\n{\r\n    environment.put(ApplicationConstants.TRUSTSTORE_FILE_LOCATION_ENV_NAME, new Path(containerWorkDir, ContainerLaunch.TRUSTSTORE_FILE).toUri().getPath());\r\n    environment.put(ApplicationConstants.TRUSTSTORE_PASSWORD_ENV_NAME, new String(container.getCredentials().getSecretKey(AMSecretKeys.YARN_APPLICATION_AM_TRUSTSTORE_PASSWORD), StandardCharsets.UTF_8));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "call",
  "errType" : [ "ConfigurationException", "Throwable" ],
  "containingMethodsNum" : 65,
  "sourceCodeText" : "Integer call()\n{\r\n    if (!validateContainerState()) {\r\n        return 0;\r\n    }\r\n    final ContainerLaunchContext launchContext = container.getLaunchContext();\r\n    ContainerId containerID = container.getContainerId();\r\n    String containerIdStr = containerID.toString();\r\n    final List<String> command = launchContext.getCommands();\r\n    int ret = -1;\r\n    Path containerLogDir;\r\n    try {\r\n        Map<Path, List<String>> localResources = getLocalizedResources();\r\n        final String user = container.getUser();\r\n        List<String> newCmds = new ArrayList<String>(command.size());\r\n        String appIdStr = app.getAppId().toString();\r\n        String relativeContainerLogDir = ContainerLaunch.getRelativeContainerLogDir(appIdStr, containerIdStr);\r\n        containerLogDir = dirsHandler.getLogPathForWrite(relativeContainerLogDir, false);\r\n        recordContainerLogDir(containerID, containerLogDir.toString());\r\n        for (String str : command) {\r\n            newCmds.add(expandEnvironment(str, containerLogDir));\r\n        }\r\n        launchContext.setCommands(newCmds);\r\n        Map<String, String> environment = launchContext.getEnvironment();\r\n        LinkedHashSet<String> nmEnvVars = new LinkedHashSet<String>();\r\n        FileContext lfs = FileContext.getLocalFSFileContext();\r\n        Path nmPrivateContainerScriptPath = dirsHandler.getLocalPathForWrite(getContainerPrivateDir(appIdStr, containerIdStr) + Path.SEPARATOR + CONTAINER_SCRIPT);\r\n        Path nmPrivateTokensPath = dirsHandler.getLocalPathForWrite(getContainerPrivateDir(appIdStr, containerIdStr) + Path.SEPARATOR + String.format(TOKEN_FILE_NAME_FMT, containerIdStr));\r\n        Path nmPrivateKeystorePath = dirsHandler.getLocalPathForWrite(getContainerPrivateDir(appIdStr, containerIdStr) + Path.SEPARATOR + KEYSTORE_FILE);\r\n        Path nmPrivateTruststorePath = dirsHandler.getLocalPathForWrite(getContainerPrivateDir(appIdStr, containerIdStr) + Path.SEPARATOR + TRUSTSTORE_FILE);\r\n        Path nmPrivateClasspathJarDir = dirsHandler.getLocalPathForWrite(getContainerPrivateDir(appIdStr, containerIdStr));\r\n        Path containerWorkDir = deriveContainerWorkDir();\r\n        recordContainerWorkDir(containerID, containerWorkDir.toString());\r\n        Path csiVolumesRoot = deriveCsiVolumesRootDir();\r\n        recordContainerCsiVolumesRootDir(containerID, csiVolumesRoot.toString());\r\n        String pidFileSubpath = getPidFileSubpath(appIdStr, containerIdStr);\r\n        pidFilePath = dirsHandler.getLocalPathForWrite(pidFileSubpath);\r\n        List<String> localDirs = dirsHandler.getLocalDirs();\r\n        List<String> localDirsForRead = dirsHandler.getLocalDirsForRead();\r\n        List<String> logDirs = dirsHandler.getLogDirs();\r\n        List<String> filecacheDirs = getNMFilecacheDirs(localDirsForRead);\r\n        List<String> userLocalDirs = getUserLocalDirs(localDirs);\r\n        List<String> containerLocalDirs = getContainerLocalDirs(localDirs);\r\n        List<String> containerLogDirs = getContainerLogDirs(logDirs);\r\n        List<String> userFilecacheDirs = getUserFilecacheDirs(localDirsForRead);\r\n        List<String> applicationLocalDirs = getApplicationLocalDirs(localDirs, appIdStr);\r\n        if (!dirsHandler.areDisksHealthy()) {\r\n            ret = ContainerExitStatus.DISKS_FAILED;\r\n            throw new IOException(\"Most of the disks failed. \" + dirsHandler.getDisksHealthReport(false));\r\n        }\r\n        List<Path> appDirs = new ArrayList<Path>(localDirs.size());\r\n        for (String localDir : localDirs) {\r\n            Path usersdir = new Path(localDir, ContainerLocalizer.USERCACHE);\r\n            Path userdir = new Path(usersdir, user);\r\n            Path appsdir = new Path(userdir, ContainerLocalizer.APPCACHE);\r\n            appDirs.add(new Path(appsdir, appIdStr));\r\n        }\r\n        byte[] keystore = container.getCredentials().getSecretKey(AMSecretKeys.YARN_APPLICATION_AM_KEYSTORE);\r\n        if (keystore != null) {\r\n            try (DataOutputStream keystoreOutStream = lfs.create(nmPrivateKeystorePath, EnumSet.of(CREATE, OVERWRITE))) {\r\n                keystoreOutStream.write(keystore);\r\n            }\r\n        } else {\r\n            nmPrivateKeystorePath = null;\r\n        }\r\n        byte[] truststore = container.getCredentials().getSecretKey(AMSecretKeys.YARN_APPLICATION_AM_TRUSTSTORE);\r\n        if (truststore != null) {\r\n            try (DataOutputStream truststoreOutStream = lfs.create(nmPrivateTruststorePath, EnumSet.of(CREATE, OVERWRITE))) {\r\n                truststoreOutStream.write(truststore);\r\n            }\r\n        } else {\r\n            nmPrivateTruststorePath = null;\r\n        }\r\n        addToEnvMap(environment, nmEnvVars, ApplicationConstants.CONTAINER_TOKEN_FILE_ENV_NAME, new Path(containerWorkDir, FINAL_CONTAINER_TOKENS_FILE).toUri().getPath());\r\n        try (DataOutputStream containerScriptOutStream = lfs.create(nmPrivateContainerScriptPath, EnumSet.of(CREATE, OVERWRITE))) {\r\n            sanitizeEnv(environment, containerWorkDir, appDirs, userLocalDirs, containerLogDirs, localResources, nmPrivateClasspathJarDir, nmEnvVars);\r\n            expandAllEnvironmentVars(environment, containerLogDir);\r\n            if (keystore != null) {\r\n                addKeystoreVars(environment, containerWorkDir);\r\n            }\r\n            if (truststore != null) {\r\n                addTruststoreVars(environment, containerWorkDir);\r\n            }\r\n            prepareContainer(localResources, containerLocalDirs);\r\n            exec.writeLaunchEnv(containerScriptOutStream, environment, localResources, launchContext.getCommands(), containerLogDir, user, nmEnvVars);\r\n        }\r\n        try (DataOutputStream tokensOutStream = lfs.create(nmPrivateTokensPath, EnumSet.of(CREATE, OVERWRITE))) {\r\n            Credentials creds = container.getCredentials();\r\n            creds.writeTokenStorageToStream(tokensOutStream);\r\n        }\r\n        ret = launchContainer(new ContainerStartContext.Builder().setContainer(container).setLocalizedResources(localResources).setNmPrivateContainerScriptPath(nmPrivateContainerScriptPath).setNmPrivateTokensPath(nmPrivateTokensPath).setNmPrivateKeystorePath(nmPrivateKeystorePath).setNmPrivateTruststorePath(nmPrivateTruststorePath).setUser(user).setAppId(appIdStr).setContainerWorkDir(containerWorkDir).setContainerCsiVolumesRootDir(csiVolumesRoot).setLocalDirs(localDirs).setLogDirs(logDirs).setFilecacheDirs(filecacheDirs).setUserLocalDirs(userLocalDirs).setContainerLocalDirs(containerLocalDirs).setContainerLogDirs(containerLogDirs).setUserFilecacheDirs(userFilecacheDirs).setApplicationLocalDirs(applicationLocalDirs).build());\r\n    } catch (ConfigurationException e) {\r\n        LOG.error(\"Failed to launch container due to configuration error.\", e);\r\n        dispatcher.getEventHandler().handle(new ContainerExitEvent(containerID, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret, e.getMessage()));\r\n        context.getNodeStatusUpdater().reportException(e);\r\n        return ret;\r\n    } catch (Throwable e) {\r\n        LOG.warn(\"Failed to launch container.\", e);\r\n        dispatcher.getEventHandler().handle(new ContainerExitEvent(containerID, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret, e.getMessage()));\r\n        return ret;\r\n    } finally {\r\n        setContainerCompletedStatus(ret);\r\n    }\r\n    handleContainerExitCode(ret, containerLogDir);\r\n    return ret;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 5,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "deriveCsiVolumesRootDir",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Path deriveCsiVolumesRootDir() throws IOException\n{\r\n    final String containerVolumePath = ContainerLocalizer.USERCACHE + Path.SEPARATOR + container.getUser() + Path.SEPARATOR + ContainerLocalizer.FILECACHE + Path.SEPARATOR + ContainerLocalizer.CSI_VOLIUME_MOUNTS_ROOT + Path.SEPARATOR + app.getAppId().toString() + Path.SEPARATOR + container.getContainerId().toString();\r\n    return dirsHandler.getLocalPathForWrite(containerVolumePath, LocalDirAllocator.SIZE_UNKNOWN, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "deriveContainerWorkDir",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Path deriveContainerWorkDir() throws IOException\n{\r\n    final String containerWorkDirPath = ContainerLocalizer.USERCACHE + Path.SEPARATOR + container.getUser() + Path.SEPARATOR + ContainerLocalizer.APPCACHE + Path.SEPARATOR + app.getAppId().toString() + Path.SEPARATOR + container.getContainerId().toString();\r\n    final Path containerWorkDir = dirsHandler.getLocalPathForWrite(containerWorkDirPath, LocalDirAllocator.SIZE_UNKNOWN, false);\r\n    return containerWorkDir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "prepareContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void prepareContainer(Map<Path, List<String>> localResources, List<String> containerLocalDirs) throws IOException\n{\r\n    exec.prepareContainer(new ContainerPrepareContext.Builder().setContainer(container).setLocalizedResources(localResources).setUser(container.getUser()).setContainerLocalDirs(containerLocalDirs).setCommands(container.getLaunchContext().getCommands()).build());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "validateContainerState",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean validateContainerState()\n{\r\n    if (container.getContainerState() == ContainerState.KILLING) {\r\n        dispatcher.getEventHandler().handle(new ContainerExitEvent(container.getContainerId(), ContainerEventType.CONTAINER_KILLED_ON_REQUEST, Shell.WINDOWS ? ExitCode.FORCE_KILLED.getExitCode() : ExitCode.TERMINATED.getExitCode(), \"Container terminated before launch.\"));\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "getContainerLogDirs",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "List<String> getContainerLogDirs(List<String> logDirs)\n{\r\n    List<String> containerLogDirs = new ArrayList<>(logDirs.size());\r\n    String appIdStr = app.getAppId().toString();\r\n    String containerIdStr = container.getContainerId().toString();\r\n    String relativeContainerLogDir = ContainerLaunch.getRelativeContainerLogDir(appIdStr, containerIdStr);\r\n    for (String logDir : logDirs) {\r\n        containerLogDirs.add(logDir + Path.SEPARATOR + relativeContainerLogDir);\r\n    }\r\n    return containerLogDirs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "getContainerLocalDirs",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "List<String> getContainerLocalDirs(List<String> localDirs)\n{\r\n    List<String> containerLocalDirs = new ArrayList<>(localDirs.size());\r\n    String user = container.getUser();\r\n    String appIdStr = app.getAppId().toString();\r\n    String relativeContainerLocalDir = ContainerLocalizer.USERCACHE + Path.SEPARATOR + user + Path.SEPARATOR + ContainerLocalizer.APPCACHE + Path.SEPARATOR + appIdStr + Path.SEPARATOR;\r\n    for (String localDir : localDirs) {\r\n        containerLocalDirs.add(localDir + Path.SEPARATOR + relativeContainerLocalDir);\r\n    }\r\n    return containerLocalDirs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "getUserLocalDirs",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "List<String> getUserLocalDirs(List<String> localDirs)\n{\r\n    List<String> userLocalDirs = new ArrayList<>(localDirs.size());\r\n    String user = container.getUser();\r\n    for (String localDir : localDirs) {\r\n        String userLocalDir = localDir + Path.SEPARATOR + ContainerLocalizer.USERCACHE + Path.SEPARATOR + user + Path.SEPARATOR;\r\n        userLocalDirs.add(userLocalDir);\r\n    }\r\n    return userLocalDirs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "getNMFilecacheDirs",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<String> getNMFilecacheDirs(List<String> localDirs)\n{\r\n    List<String> filecacheDirs = new ArrayList<>(localDirs.size());\r\n    for (String localDir : localDirs) {\r\n        String filecacheDir = localDir + Path.SEPARATOR + ContainerLocalizer.FILECACHE;\r\n        filecacheDirs.add(filecacheDir);\r\n    }\r\n    return filecacheDirs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "getUserFilecacheDirs",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "List<String> getUserFilecacheDirs(List<String> localDirs)\n{\r\n    List<String> userFilecacheDirs = new ArrayList<>(localDirs.size());\r\n    String user = container.getUser();\r\n    for (String localDir : localDirs) {\r\n        String userFilecacheDir = localDir + Path.SEPARATOR + ContainerLocalizer.USERCACHE + Path.SEPARATOR + user + Path.SEPARATOR + ContainerLocalizer.FILECACHE;\r\n        userFilecacheDirs.add(userFilecacheDir);\r\n    }\r\n    return userFilecacheDirs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "getApplicationLocalDirs",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "List<String> getApplicationLocalDirs(List<String> localDirs, String appIdStr)\n{\r\n    List<String> applicationLocalDirs = new ArrayList<>(localDirs.size());\r\n    String user = container.getUser();\r\n    for (String localDir : localDirs) {\r\n        String appLocalDir = localDir + Path.SEPARATOR + ContainerLocalizer.USERCACHE + Path.SEPARATOR + user + Path.SEPARATOR + ContainerLocalizer.APPCACHE + Path.SEPARATOR + appIdStr;\r\n        applicationLocalDirs.add(appLocalDir);\r\n    }\r\n    return applicationLocalDirs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "getLocalizedResources",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Map<Path, List<String>> getLocalizedResources() throws YarnException\n{\r\n    Map<Path, List<String>> localResources = container.getLocalizedResources();\r\n    if (localResources == null) {\r\n        throw RPCUtil.getRemoteException(\"Unable to get local resources when Container \" + container + \" is at \" + container.getContainerState());\r\n    }\r\n    return localResources;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "launchContainer",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "int launchContainer(ContainerStartContext ctx) throws IOException, ConfigurationException\n{\r\n    int launchPrep = prepareForLaunch(ctx);\r\n    if (launchPrep == 0) {\r\n        launchLock.lock();\r\n        try {\r\n            return exec.launchContainer(ctx);\r\n        } finally {\r\n            launchLock.unlock();\r\n        }\r\n    }\r\n    return launchPrep;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "relaunchContainer",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "int relaunchContainer(ContainerStartContext ctx) throws IOException, ConfigurationException\n{\r\n    int launchPrep = prepareForLaunch(ctx);\r\n    if (launchPrep == 0) {\r\n        launchLock.lock();\r\n        try {\r\n            return exec.relaunchContainer(ctx);\r\n        } finally {\r\n            launchLock.unlock();\r\n        }\r\n    }\r\n    return launchPrep;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "reapContainer",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void reapContainer() throws IOException\n{\r\n    launchLock.lock();\r\n    try {\r\n        boolean result = exec.reapContainer(new ContainerReapContext.Builder().setContainer(container).setUser(container.getUser()).build());\r\n        if (!result) {\r\n            throw new IOException(\"Reap container failed for container \" + container.getContainerId());\r\n        }\r\n        cleanupContainerFiles(getContainerWorkDir());\r\n    } finally {\r\n        launchLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "prepareForLaunch",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "int prepareForLaunch(ContainerStartContext ctx) throws IOException\n{\r\n    ContainerId containerId = container.getContainerId();\r\n    if (container.isMarkedForKilling()) {\r\n        LOG.info(\"Container \" + containerId + \" not launched as it has already \" + \"been marked for Killing\");\r\n        this.killedBeforeStart = true;\r\n        return ExitCode.TERMINATED.getExitCode();\r\n    }\r\n    dispatcher.getEventHandler().handle(new ContainerEvent(containerId, ContainerEventType.CONTAINER_LAUNCHED));\r\n    context.getNMStateStore().storeContainerLaunched(containerId);\r\n    if (!containerAlreadyLaunched.compareAndSet(false, true)) {\r\n        LOG.info(\"Container \" + containerId + \" not launched as \" + \"cleanup already called\");\r\n        return ExitCode.TERMINATED.getExitCode();\r\n    } else {\r\n        exec.activateContainer(containerId, pidFilePath);\r\n    }\r\n    return ExitCode.SUCCESS.getExitCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "setContainerCompletedStatus",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void setContainerCompletedStatus(int exitCode)\n{\r\n    ContainerId containerId = container.getContainerId();\r\n    completed.set(true);\r\n    exec.deactivateContainer(containerId);\r\n    try {\r\n        if (!container.shouldRetry(exitCode)) {\r\n            context.getNMStateStore().storeContainerCompleted(containerId, exitCode);\r\n        }\r\n    } catch (IOException e) {\r\n        LOG.error(\"Unable to set exit code for container \" + containerId);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "handleContainerExitCode",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void handleContainerExitCode(int exitCode, Path containerLogDir)\n{\r\n    ContainerId containerId = container.getContainerId();\r\n    LOG.debug(\"Container {} completed with exit code {}\", containerId, exitCode);\r\n    StringBuilder diagnosticInfo = new StringBuilder(\"Container exited with a non-zero exit code \");\r\n    diagnosticInfo.append(exitCode);\r\n    diagnosticInfo.append(\". \");\r\n    if (exitCode == ExitCode.FORCE_KILLED.getExitCode() || exitCode == ExitCode.TERMINATED.getExitCode()) {\r\n        dispatcher.getEventHandler().handle(new ContainerExitEvent(containerId, ContainerEventType.CONTAINER_KILLED_ON_REQUEST, exitCode, diagnosticInfo.toString()));\r\n    } else if (exitCode != 0) {\r\n        handleContainerExitWithFailure(containerId, exitCode, containerLogDir, diagnosticInfo);\r\n    } else {\r\n        LOG.info(\"Container \" + containerId + \" succeeded \");\r\n        dispatcher.getEventHandler().handle(new ContainerEvent(containerId, ContainerEventType.CONTAINER_EXITED_WITH_SUCCESS));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "handleContainerExitWithFailure",
  "errType" : [ "IOException", "IOException" ],
  "containingMethodsNum" : 27,
  "sourceCodeText" : "void handleContainerExitWithFailure(ContainerId containerID, int ret, Path containerLogDir, StringBuilder diagnosticInfo)\n{\r\n    LOG.warn(\"Container launch failed : \" + diagnosticInfo.toString());\r\n    FileSystem fileSystem = null;\r\n    long tailSizeInBytes = conf.getLong(YarnConfiguration.NM_CONTAINER_STDERR_BYTES, YarnConfiguration.DEFAULT_NM_CONTAINER_STDERR_BYTES);\r\n    try {\r\n        fileSystem = FileSystem.getLocal(conf).getRaw();\r\n        FileStatus preLaunchErrorFileStatus = fileSystem.getFileStatus(new Path(containerLogDir, ContainerLaunch.CONTAINER_PRE_LAUNCH_STDERR));\r\n        Path errorFile = preLaunchErrorFileStatus.getPath();\r\n        long fileSize = preLaunchErrorFileStatus.getLen();\r\n        diagnosticInfo.append(\"Error file: \").append(ContainerLaunch.CONTAINER_PRE_LAUNCH_STDERR).append(\".\\n\");\r\n        ;\r\n        byte[] tailBuffer = tailFile(errorFile, fileSize, tailSizeInBytes);\r\n        diagnosticInfo.append(\"Last \").append(tailSizeInBytes).append(\" bytes of \").append(errorFile.getName()).append(\" :\\n\").append(new String(tailBuffer, StandardCharsets.UTF_8));\r\n    } catch (IOException e) {\r\n        LOG.error(\"Failed to get tail of the container's prelaunch error log file\", e);\r\n    }\r\n    String errorFileNamePattern = conf.get(YarnConfiguration.NM_CONTAINER_STDERR_PATTERN, YarnConfiguration.DEFAULT_NM_CONTAINER_STDERR_PATTERN);\r\n    try {\r\n        if (fileSystem == null) {\r\n            fileSystem = FileSystem.getLocal(conf).getRaw();\r\n        }\r\n        FileStatus[] errorFileStatuses = fileSystem.globStatus(new Path(containerLogDir, errorFileNamePattern));\r\n        if (errorFileStatuses != null && errorFileStatuses.length != 0) {\r\n            Path errorFile = errorFileStatuses[0].getPath();\r\n            long fileSize = errorFileStatuses[0].getLen();\r\n            if (errorFileStatuses.length > 1) {\r\n                String[] errorFileNames = new String[errorFileStatuses.length];\r\n                long latestModifiedTime = errorFileStatuses[0].getModificationTime();\r\n                errorFileNames[0] = errorFileStatuses[0].getPath().getName();\r\n                for (int i = 1; i < errorFileStatuses.length; i++) {\r\n                    errorFileNames[i] = errorFileStatuses[i].getPath().getName();\r\n                    if (errorFileStatuses[i].getModificationTime() > latestModifiedTime) {\r\n                        latestModifiedTime = errorFileStatuses[i].getModificationTime();\r\n                        errorFile = errorFileStatuses[i].getPath();\r\n                        fileSize = errorFileStatuses[i].getLen();\r\n                    }\r\n                }\r\n                diagnosticInfo.append(\"Error files: \").append(StringUtils.join(\", \", errorFileNames)).append(\".\\n\");\r\n            }\r\n            byte[] tailBuffer = tailFile(errorFile, fileSize, tailSizeInBytes);\r\n            String tailBufferMsg = new String(tailBuffer, StandardCharsets.UTF_8);\r\n            diagnosticInfo.append(\"Last \").append(tailSizeInBytes).append(\" bytes of \").append(errorFile.getName()).append(\" :\\n\").append(tailBufferMsg).append(\"\\n\").append(analysesErrorMsgOfContainerExitWithFailure(tailBufferMsg));\r\n        }\r\n    } catch (IOException e) {\r\n        LOG.error(\"Failed to get tail of the container's error log file\", e);\r\n    }\r\n    this.dispatcher.getEventHandler().handle(new ContainerExitEvent(containerID, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret, diagnosticInfo.toString()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "tailFile",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "byte[] tailFile(Path filePath, long fileSize, long tailSizeInBytes) throws IOException\n{\r\n    FSDataInputStream errorFileIS = null;\r\n    FileSystem fileSystem = FileSystem.getLocal(conf).getRaw();\r\n    try {\r\n        long startPosition = (fileSize < tailSizeInBytes) ? 0 : fileSize - tailSizeInBytes;\r\n        int bufferSize = (int) ((fileSize < tailSizeInBytes) ? fileSize : tailSizeInBytes);\r\n        byte[] tailBuffer = new byte[bufferSize];\r\n        errorFileIS = fileSystem.open(filePath);\r\n        errorFileIS.readFully(startPosition, tailBuffer);\r\n        return tailBuffer;\r\n    } finally {\r\n        IOUtils.cleanupWithLogger(LOG, errorFileIS);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "analysesErrorMsgOfContainerExitWithFailure",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String analysesErrorMsgOfContainerExitWithFailure(String errorMsg)\n{\r\n    StringBuilder analysis = new StringBuilder();\r\n    if (errorMsg.indexOf(\"Error: Could not find or load main class\" + \" org.apache.hadoop.mapreduce\") != -1) {\r\n        analysis.append(\"Please check whether your <HADOOP_HOME>/etc/hadoop/mapred-site.xml \" + \"contains the below configuration:\\n\");\r\n        analysis.append(\"<property>\\n\").append(\"  <name>yarn.app.mapreduce.am.env</name>\\n\").append(\"  <value>HADOOP_MAPRED_HOME=${full path of your hadoop \" + \"distribution directory}</value>\\n\").append(\"</property>\\n<property>\\n\").append(\"  <name>mapreduce.map.env</name>\\n\").append(\"  <value>HADOOP_MAPRED_HOME=${full path of your hadoop \" + \"distribution directory}</value>\\n\").append(\"</property>\\n<property>\\n\").append(\"  <name>mapreduce.reduce.env</name>\\n\").append(\"  <value>HADOOP_MAPRED_HOME=${full path of your hadoop \" + \"distribution directory}</value>\\n\").append(\"</property>\\n\");\r\n    }\r\n    return analysis.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "getPidFileSubpath",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getPidFileSubpath(String appIdStr, String containerIdStr)\n{\r\n    return getContainerPrivateDir(appIdStr, containerIdStr) + Path.SEPARATOR + String.format(ContainerLaunch.PID_FILE_NAME_FMT, containerIdStr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "signalContainer",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void signalContainer(SignalContainerCommand command) throws IOException\n{\r\n    ContainerId containerId = container.getContainerTokenIdentifier().getContainerID();\r\n    String containerIdStr = containerId.toString();\r\n    String user = container.getUser();\r\n    Signal signal = translateCommandToSignal(command);\r\n    if (signal.equals(Signal.NULL)) {\r\n        LOG.info(\"ignore signal command \" + command);\r\n        return;\r\n    }\r\n    LOG.info(\"Sending signal \" + command + \" to container \" + containerIdStr);\r\n    boolean alreadyLaunched = !containerAlreadyLaunched.compareAndSet(false, true);\r\n    if (!alreadyLaunched) {\r\n        LOG.info(\"Container \" + containerIdStr + \" not launched.\" + \" Not sending the signal\");\r\n        return;\r\n    }\r\n    LOG.debug(\"Getting pid for container {} to send signal to from pid\" + \" file {}\", containerIdStr, (pidFilePath != null ? pidFilePath.toString() : \"null\"));\r\n    try {\r\n        String processId = getContainerPid();\r\n        if (processId != null) {\r\n            LOG.debug(\"Sending signal to pid {} as user {} for container {}\", processId, user, containerIdStr);\r\n            boolean result = exec.signalContainer(new ContainerSignalContext.Builder().setContainer(container).setUser(user).setPid(processId).setSignal(signal).build());\r\n            String diagnostics = \"Sent signal \" + command + \" (\" + signal + \") to pid \" + processId + \" as user \" + user + \" for container \" + containerIdStr + \", result=\" + (result ? \"success\" : \"failed\");\r\n            LOG.info(diagnostics);\r\n            dispatcher.getEventHandler().handle(new ContainerDiagnosticsUpdateEvent(containerId, diagnostics));\r\n        }\r\n    } catch (Exception e) {\r\n        String message = \"Exception when sending signal to container \" + containerIdStr + \": \" + StringUtils.stringifyException(e);\r\n        LOG.warn(message);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "translateCommandToSignal",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Signal translateCommandToSignal(SignalContainerCommand command)\n{\r\n    Signal signal = Signal.NULL;\r\n    switch(command) {\r\n        case OUTPUT_THREAD_DUMP:\r\n            signal = Shell.WINDOWS ? Signal.NULL : Signal.QUIT;\r\n            break;\r\n        case GRACEFUL_SHUTDOWN:\r\n            signal = Signal.TERM;\r\n            break;\r\n        case FORCEFUL_SHUTDOWN:\r\n            signal = Signal.KILL;\r\n            break;\r\n    }\r\n    return signal;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "pauseContainer",
  "errType" : [ "Exception", "IOException" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void pauseContainer() throws IOException\n{\r\n    ContainerId containerId = container.getContainerId();\r\n    String containerIdStr = containerId.toString();\r\n    LOG.info(\"Pausing the container \" + containerIdStr);\r\n    if (!shouldPauseContainer.compareAndSet(false, true)) {\r\n        LOG.info(\"Container \" + containerId + \" not paused as \" + \"resume already called\");\r\n        return;\r\n    }\r\n    try {\r\n        exec.pauseContainer(container);\r\n        dispatcher.getEventHandler().handle(new ContainerEvent(containerId, ContainerEventType.CONTAINER_PAUSED));\r\n        try {\r\n            this.context.getNMStateStore().storeContainerPaused(container.getContainerId());\r\n        } catch (IOException e) {\r\n            LOG.warn(\"Could not store container [\" + container.getContainerId() + \"] state. The Container has been paused.\", e);\r\n        }\r\n    } catch (Exception e) {\r\n        String message = \"Exception when trying to pause container \" + containerIdStr + \": \" + StringUtils.stringifyException(e);\r\n        LOG.info(message);\r\n        container.handle(new ContainerKillEvent(container.getContainerId(), ContainerExitStatus.PREEMPTED, \"Container preempted as there was \" + \" an exception in pausing it.\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "resumeContainer",
  "errType" : [ "Exception", "IOException" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void resumeContainer() throws IOException\n{\r\n    ContainerId containerId = container.getContainerId();\r\n    String containerIdStr = containerId.toString();\r\n    LOG.info(\"Resuming the container \" + containerIdStr);\r\n    boolean alreadyPaused = !shouldPauseContainer.compareAndSet(false, true);\r\n    if (!alreadyPaused) {\r\n        LOG.info(\"Container \" + containerIdStr + \" not paused.\" + \" No resume necessary\");\r\n        return;\r\n    }\r\n    try {\r\n        exec.resumeContainer(container);\r\n        dispatcher.getEventHandler().handle(new ContainerEvent(containerId, ContainerEventType.CONTAINER_RESUMED));\r\n        try {\r\n            this.context.getNMStateStore().removeContainerPaused(container.getContainerId());\r\n        } catch (IOException e) {\r\n            LOG.warn(\"Could not store container [\" + container.getContainerId() + \"] state. The Container has been resumed.\", e);\r\n        }\r\n    } catch (Exception e) {\r\n        String message = \"Exception when trying to resume container \" + containerIdStr + \": \" + StringUtils.stringifyException(e);\r\n        LOG.info(message);\r\n        container.handle(new ContainerKillEvent(container.getContainerId(), ContainerExitStatus.PREEMPTED, \"Container preempted as there was \" + \" an exception in pausing it.\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "getContainerPid",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "String getContainerPid() throws Exception\n{\r\n    if (pidFilePath == null) {\r\n        return null;\r\n    }\r\n    String containerIdStr = container.getContainerId().toString();\r\n    String processId;\r\n    LOG.debug(\"Accessing pid for container {} from pid file {}\", containerIdStr, pidFilePath);\r\n    int sleepCounter = 0;\r\n    final int sleepInterval = 100;\r\n    while (true) {\r\n        processId = ProcessIdFileReader.getProcessId(pidFilePath);\r\n        if (processId != null) {\r\n            LOG.debug(\"Got pid {} for container {}\", processId, containerIdStr);\r\n            break;\r\n        } else if ((sleepCounter * sleepInterval) > maxKillWaitTime) {\r\n            LOG.info(\"Could not get pid for \" + containerIdStr + \". Waited for \" + maxKillWaitTime + \" ms.\");\r\n            break;\r\n        } else {\r\n            ++sleepCounter;\r\n            Thread.sleep(sleepInterval);\r\n        }\r\n    }\r\n    return processId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "getRelativeContainerLogDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getRelativeContainerLogDir(String appIdStr, String containerIdStr)\n{\r\n    return appIdStr + Path.SEPARATOR + containerIdStr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "getContainerPrivateDir",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getContainerPrivateDir(String appIdStr, String containerIdStr)\n{\r\n    return getAppPrivateDir(appIdStr) + Path.SEPARATOR + containerIdStr + Path.SEPARATOR;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "getAppPrivateDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getAppPrivateDir(String appIdStr)\n{\r\n    return ResourceLocalizationService.NM_PRIVATE_DIR + Path.SEPARATOR + appIdStr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "getContext",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Context getContext()\n{\r\n    return context;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "addToEnvMap",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void addToEnvMap(Map<String, String> envMap, Set<String> envSet, String envName, String envValue)\n{\r\n    envMap.put(envName, envValue);\r\n    envSet.add(envName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "sanitizeEnv",
  "errType" : null,
  "containingMethodsNum" : 30,
  "sourceCodeText" : "void sanitizeEnv(Map<String, String> environment, Path pwd, List<Path> appDirs, List<String> userLocalDirs, List<String> containerLogDirs, Map<Path, List<String>> resources, Path nmPrivateClasspathJarDir, Set<String> nmVars) throws IOException\n{\r\n    boolean overrideDisable = Boolean.parseBoolean(environment.get(Environment.YARN_CONTAINER_RUNTIME_DOCKER_RUN_OVERRIDE_DISABLE.name()));\r\n    if (overrideDisable) {\r\n        environment.remove(\"WORK_DIR\");\r\n        return;\r\n    }\r\n    addToEnvMap(environment, nmVars, Environment.CONTAINER_ID.name(), container.getContainerId().toString());\r\n    addToEnvMap(environment, nmVars, Environment.NM_PORT.name(), String.valueOf(this.context.getNodeId().getPort()));\r\n    addToEnvMap(environment, nmVars, Environment.NM_HOST.name(), this.context.getNodeId().getHost());\r\n    addToEnvMap(environment, nmVars, Environment.NM_HTTP_PORT.name(), String.valueOf(this.context.getHttpPort()));\r\n    addToEnvMap(environment, nmVars, Environment.LOCAL_DIRS.name(), StringUtils.join(\",\", appDirs));\r\n    addToEnvMap(environment, nmVars, Environment.LOCAL_USER_DIRS.name(), StringUtils.join(\",\", userLocalDirs));\r\n    addToEnvMap(environment, nmVars, Environment.LOG_DIRS.name(), StringUtils.join(\",\", containerLogDirs));\r\n    addToEnvMap(environment, nmVars, Environment.USER.name(), container.getUser());\r\n    addToEnvMap(environment, nmVars, Environment.LOGNAME.name(), container.getUser());\r\n    addToEnvMap(environment, nmVars, Environment.HOME.name(), conf.get(YarnConfiguration.NM_USER_HOME_DIR, YarnConfiguration.DEFAULT_NM_USER_HOME_DIR));\r\n    addToEnvMap(environment, nmVars, Environment.PWD.name(), pwd.toString());\r\n    addToEnvMap(environment, nmVars, Environment.LOCALIZATION_COUNTERS.name(), container.localizationCountersAsString());\r\n    if (!Shell.WINDOWS) {\r\n        addToEnvMap(environment, nmVars, \"JVM_PID\", \"$$\");\r\n    }\r\n    String defEnvStr = conf.get(YarnConfiguration.DEFAULT_NM_ADMIN_USER_ENV);\r\n    Apps.setEnvFromInputProperty(environment, YarnConfiguration.NM_ADMIN_USER_ENV, defEnvStr, conf, File.pathSeparator);\r\n    if (!Shell.WINDOWS) {\r\n        String forcePath = conf.get(YarnConfiguration.NM_ADMIN_FORCE_PATH, YarnConfiguration.DEFAULT_NM_ADMIN_FORCE_PATH);\r\n        if (!forcePath.isEmpty()) {\r\n            String userPath = environment.get(Environment.PATH.name());\r\n            environment.remove(Environment.PATH.name());\r\n            if (userPath == null || userPath.isEmpty()) {\r\n                Apps.addToEnvironment(environment, Environment.PATH.name(), forcePath, File.pathSeparator);\r\n                Apps.addToEnvironment(environment, Environment.PATH.name(), \"$PATH\", File.pathSeparator);\r\n            } else {\r\n                Apps.addToEnvironment(environment, Environment.PATH.name(), forcePath, File.pathSeparator);\r\n                Apps.addToEnvironment(environment, Environment.PATH.name(), userPath, File.pathSeparator);\r\n            }\r\n        }\r\n    }\r\n    if (Shell.WINDOWS) {\r\n        sanitizeWindowsEnv(environment, pwd, resources, nmPrivateClasspathJarDir);\r\n    }\r\n    for (Map.Entry<String, ByteBuffer> meta : containerManager.getAuxServiceMetaData().entrySet()) {\r\n        AuxiliaryServiceHelper.setServiceDataIntoEnv(meta.getKey(), meta.getValue(), environment);\r\n        nmVars.add(AuxiliaryServiceHelper.getPrefixServiceName(meta.getKey()));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "sanitizeWindowsEnv",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void sanitizeWindowsEnv(Map<String, String> environment, Path pwd, Map<Path, List<String>> resources, Path nmPrivateClasspathJarDir) throws IOException\n{\r\n    String inputClassPath = environment.get(Environment.CLASSPATH.name());\r\n    if (inputClassPath != null && !inputClassPath.isEmpty()) {\r\n        boolean preferLocalizedJars = Boolean.parseBoolean(environment.get(Environment.CLASSPATH_PREPEND_DISTCACHE.name()));\r\n        boolean needsSeparator = false;\r\n        StringBuilder newClassPath = new StringBuilder();\r\n        if (!preferLocalizedJars) {\r\n            newClassPath.append(inputClassPath);\r\n            needsSeparator = true;\r\n        }\r\n        for (Map.Entry<Path, List<String>> entry : resources.entrySet()) {\r\n            boolean targetIsDirectory = new File(entry.getKey().toUri().getPath()).isDirectory();\r\n            for (String linkName : entry.getValue()) {\r\n                if (needsSeparator) {\r\n                    newClassPath.append(File.pathSeparator);\r\n                } else {\r\n                    needsSeparator = true;\r\n                }\r\n                newClassPath.append(pwd.toString()).append(Path.SEPARATOR).append(linkName);\r\n                if (targetIsDirectory) {\r\n                    newClassPath.append(Path.SEPARATOR);\r\n                }\r\n            }\r\n        }\r\n        if (preferLocalizedJars) {\r\n            if (needsSeparator) {\r\n                newClassPath.append(File.pathSeparator);\r\n            }\r\n            newClassPath.append(inputClassPath);\r\n        }\r\n        Map<String, String> mergedEnv = new HashMap<String, String>(System.getenv());\r\n        mergedEnv.putAll(environment);\r\n        Path jarDir;\r\n        if (exec instanceof WindowsSecureContainerExecutor) {\r\n            jarDir = nmPrivateClasspathJarDir;\r\n        } else {\r\n            jarDir = pwd;\r\n        }\r\n        String[] jarCp = FileUtil.createJarWithClassPath(newClassPath.toString(), jarDir, pwd, mergedEnv);\r\n        Path localizedClassPathJar = exec.localizeClasspathJar(new Path(jarCp[0]), pwd, container.getUser());\r\n        String replacementClassPath = localizedClassPathJar.toString() + jarCp[1];\r\n        environment.put(Environment.CLASSPATH.name(), replacementClassPath);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "getExitCodeFile",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getExitCodeFile(String pidFile)\n{\r\n    return pidFile + EXIT_CODE_FILE_SUFFIX;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "recordContainerLogDir",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void recordContainerLogDir(ContainerId containerId, String logDir) throws IOException\n{\r\n    container.setLogDir(logDir);\r\n    if (container.isRetryContextSet()) {\r\n        context.getNMStateStore().storeContainerLogDir(containerId, logDir);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "recordContainerWorkDir",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void recordContainerWorkDir(ContainerId containerId, String workDir) throws IOException\n{\r\n    container.setWorkDir(workDir);\r\n    if (container.isRetryContextSet()) {\r\n        context.getNMStateStore().storeContainerWorkDir(containerId, workDir);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "recordContainerCsiVolumesRootDir",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void recordContainerCsiVolumesRootDir(ContainerId containerId, String volumesRoot) throws IOException\n{\r\n    container.setCsiVolumesRootDir(volumesRoot);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "getContainerWorkDir",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path getContainerWorkDir() throws IOException\n{\r\n    String containerWorkDir = container.getWorkDir();\r\n    if (containerWorkDir == null || !dirsHandler.isGoodLocalDir(containerWorkDir)) {\r\n        throw new IOException(\"Could not find a good work dir \" + containerWorkDir + \" for container \" + container);\r\n    }\r\n    return new Path(containerWorkDir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "cleanupContainerFiles",
  "errType" : [ "IOException|InterruptedException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void cleanupContainerFiles(Path containerWorkDir)\n{\r\n    LOG.debug(\"cleanup container {} files\", containerWorkDir);\r\n    deleteAsUser(new Path(containerWorkDir, CONTAINER_SCRIPT));\r\n    deleteAsUser(new Path(containerWorkDir, FINAL_CONTAINER_TOKENS_FILE));\r\n    deleteAsUser(new Path(containerWorkDir, SYSFS_DIR));\r\n    try {\r\n        exec.cleanupBeforeRelaunch(container);\r\n    } catch (IOException | InterruptedException e) {\r\n        LOG.warn(\"{} exec failed to cleanup\", container.getContainerId(), e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "deleteAsUser",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void deleteAsUser(Path path)\n{\r\n    try {\r\n        exec.deleteAsUser(new DeletionAsUserContext.Builder().setUser(container.getUser()).setSubDir(path).build());\r\n    } catch (Exception e) {\r\n        LOG.warn(\"Failed to delete \" + path, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "getPidFilePath",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Path getPidFilePath()\n{\r\n    return pidFilePath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "markLaunched",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean markLaunched()\n{\r\n    return containerAlreadyLaunched.compareAndSet(false, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "isLaunchCompleted",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isLaunchCompleted()\n{\r\n    return completed.get();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\security",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void write(DataOutput out) throws IOException\n{\r\n    out.writeInt(1);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\security",
  "methodName" : "readFields",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void readFields(DataInput in) throws IOException\n{\r\n    in.readInt();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\security",
  "methodName" : "getKind",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Text getKind()\n{\r\n    return KIND;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\security",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "UserGroupInformation getUser()\n{\r\n    return UserGroupInformation.createRemoteUser(\"testing\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "getGpuDeviceInformation",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GpuDeviceInformation getGpuDeviceInformation(String pathOfGpuBinary) throws IOException, YarnException\n{\r\n    GpuDeviceInformationParser parser = new GpuDeviceInformationParser();\r\n    if (pathOfGpuBinary == null) {\r\n        throw new YarnException(\"Failed to find GPU discovery executable, please double check \" + YarnConfiguration.NM_GPU_PATH_TO_EXEC + \" setting.\");\r\n    }\r\n    String output = Shell.execCommand(new HashMap<>(), new String[] { pathOfGpuBinary, \"-x\", \"-q\" }, MAX_EXEC_TIMEOUT_MS);\r\n    return parser.parseXml(output);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    long taskInterval = conf.getLong(YarnConfiguration.NM_NODE_LABELS_PROVIDER_FETCH_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_NODE_LABELS_PROVIDER_FETCH_INTERVAL_MS);\r\n    this.setIntervalTime(taskInterval);\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "updateNodeLabelsFromConfig",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void updateNodeLabelsFromConfig(Configuration conf) throws IOException\n{\r\n    String configuredNodePartition = conf.get(YarnConfiguration.NM_PROVIDER_CONFIGURED_NODE_PARTITION, null);\r\n    setDescriptors(convertToNodeLabelSet(configuredNodePartition));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "createTimerTask",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimerTask createTimerTask()\n{\r\n    return new ConfigurationMonitorTimerTask();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "cleanUp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void cleanUp() throws Exception\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "setConf",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setConf(Configuration conf)\n{\r\n    this.conf = conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "getConf",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Configuration getConf()\n{\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void init(LinuxContainerExecutor lce)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "preExecute",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void preExecute(ContainerId containerId, Resource containerResource)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "postExecute",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void postExecute(ContainerId containerId)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "getResourcesOption",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getResourcesOption(ContainerId containerId)\n{\r\n    return \"cgroups=none\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "LocalizerStatusProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.resources != null) {\r\n        addResourcesToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = LocalizerStatusProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getLocalizerId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getLocalizerId()\n{\r\n    LocalizerStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasLocalizerId()) {\r\n        return null;\r\n    }\r\n    return (p.getLocalizerId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getResources",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<LocalResourceStatus> getResources()\n{\r\n    initResources();\r\n    return this.resources;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setLocalizerId",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setLocalizerId(String localizerId)\n{\r\n    maybeInitBuilder();\r\n    if (localizerId == null) {\r\n        builder.clearLocalizerId();\r\n        return;\r\n    }\r\n    builder.setLocalizerId(localizerId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initResources",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initResources()\n{\r\n    if (this.resources != null) {\r\n        return;\r\n    }\r\n    LocalizerStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<LocalResourceStatusProto> list = p.getResourcesList();\r\n    this.resources = new ArrayList<LocalResourceStatus>();\r\n    for (LocalResourceStatusProto c : list) {\r\n        this.resources.add(convertFromProtoFormat(c));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addResourcesToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addResourcesToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearResources();\r\n    if (this.resources == null)\r\n        return;\r\n    Iterable<LocalResourceStatusProto> iterable = new Iterable<LocalResourceStatusProto>() {\r\n\r\n        @Override\r\n        public Iterator<LocalResourceStatusProto> iterator() {\r\n            return new Iterator<LocalResourceStatusProto>() {\r\n\r\n                Iterator<LocalResourceStatus> iter = resources.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public LocalResourceStatusProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllResources(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addAllResources",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void addAllResources(List<LocalResourceStatus> resources)\n{\r\n    if (resources == null)\r\n        return;\r\n    initResources();\r\n    this.resources.addAll(resources);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getResourceStatus",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "LocalResourceStatus getResourceStatus(int index)\n{\r\n    initResources();\r\n    return this.resources.get(index);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addResourceStatus",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void addResourceStatus(LocalResourceStatus resource)\n{\r\n    initResources();\r\n    this.resources.add(resource);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "removeResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void removeResource(int index)\n{\r\n    initResources();\r\n    this.resources.remove(index);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "clearResources",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void clearResources()\n{\r\n    initResources();\r\n    this.resources.clear();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LocalResourceStatus convertFromProtoFormat(LocalResourceStatusProto p)\n{\r\n    return new LocalResourceStatusPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LocalResourceStatusProto convertToProtoFormat(LocalResourceStatus s)\n{\r\n    return ((LocalResourceStatusPBImpl) s).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "call",
  "errType" : [ "InterruptedException|InterruptedIOException", "IOException", "IOException" ],
  "containingMethodsNum" : 20,
  "sourceCodeText" : "Integer call()\n{\r\n    int retCode = ContainerExecutor.ExitCode.LOST.getExitCode();\r\n    ContainerId containerId = container.getContainerId();\r\n    String appIdStr = containerId.getApplicationAttemptId().getApplicationId().toString();\r\n    String containerIdStr = containerId.toString();\r\n    dispatcher.getEventHandler().handle(new ContainerEvent(containerId, ContainerEventType.RECOVER_PAUSED_CONTAINER));\r\n    boolean notInterrupted = true;\r\n    try {\r\n        File pidFile = locatePidFile(appIdStr, containerIdStr);\r\n        if (pidFile != null) {\r\n            String pidPathStr = pidFile.getPath();\r\n            pidFilePath = new Path(pidPathStr);\r\n            exec.activateContainer(containerId, pidFilePath);\r\n            retCode = exec.reacquireContainer(new ContainerReacquisitionContext.Builder().setContainer(container).setUser(container.getUser()).setContainerId(containerId).build());\r\n        } else {\r\n            LOG.warn(\"Unable to locate pid file for container \" + containerIdStr);\r\n        }\r\n    } catch (InterruptedException | InterruptedIOException e) {\r\n        LOG.warn(\"Interrupted while waiting for exit code from \" + containerId);\r\n        notInterrupted = false;\r\n    } catch (IOException e) {\r\n        LOG.error(\"Unable to kill the paused container \" + containerIdStr, e);\r\n    } finally {\r\n        if (notInterrupted) {\r\n            this.completed.set(true);\r\n            exec.deactivateContainer(containerId);\r\n            try {\r\n                getContext().getNMStateStore().storeContainerCompleted(containerId, retCode);\r\n            } catch (IOException e) {\r\n                LOG.error(\"Unable to set exit code for container \" + containerId);\r\n            }\r\n        }\r\n    }\r\n    if (retCode != 0) {\r\n        LOG.warn(\"Recovered container exited with a non-zero exit code \" + retCode);\r\n        this.dispatcher.getEventHandler().handle(new ContainerExitEvent(containerId, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, retCode, \"Container exited with a non-zero exit code \" + retCode));\r\n        return retCode;\r\n    }\r\n    LOG.info(\"Recovered container \" + containerId + \" succeeded\");\r\n    dispatcher.getEventHandler().handle(new ContainerEvent(containerId, ContainerEventType.CONTAINER_EXITED_WITH_SUCCESS));\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "locatePidFile",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "File locatePidFile(String appIdStr, String containerIdStr)\n{\r\n    String pidSubpath = getPidFileSubpath(appIdStr, containerIdStr);\r\n    for (String dir : getContext().getLocalDirsHandler().getLocalDirsForRead()) {\r\n        File pidFile = new File(dir, pidSubpath);\r\n        if (pidFile.exists()) {\r\n            return pidFile;\r\n        }\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "updateConfiguredResource",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void updateConfiguredResource(Resource res) throws YarnException\n{\r\n    LOG.info(resourceName + \" plugin update resource \");\r\n    Set<Device> devices = null;\r\n    try {\r\n        devices = devicePlugin.getDevices();\r\n    } catch (Exception e) {\r\n        throw new YarnException(\"Exception thrown from plugin's getDevices\" + e.getMessage());\r\n    }\r\n    if (null == devices) {\r\n        LOG.warn(resourceName + \" plugin failed to discover resource ( null value got).\");\r\n        return;\r\n    }\r\n    res.setResourceValue(resourceName, devices.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "addResources",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void addResources(LocalResourcesTracker newTracker)\n{\r\n    for (LocalizedResource resource : newTracker) {\r\n        currentSize += resource.getSize();\r\n        if (resource.getRefCount() > 0) {\r\n            continue;\r\n        }\r\n        resourceMap.put(resource, newTracker);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "cleanCache",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "LocalCacheCleanerStats cleanCache()\n{\r\n    LocalCacheCleanerStats stats = new LocalCacheCleanerStats(currentSize);\r\n    for (Iterator<Map.Entry<LocalizedResource, LocalResourcesTracker>> i = resourceMap.entrySet().iterator(); currentSize - stats.totalDelSize > targetSize && i.hasNext(); ) {\r\n        Map.Entry<LocalizedResource, LocalResourcesTracker> rsrc = i.next();\r\n        LocalizedResource resource = rsrc.getKey();\r\n        LocalResourcesTracker tracker = rsrc.getValue();\r\n        if (tracker.remove(resource, delService)) {\r\n            stats.incDelSize(tracker.getUser(), resource.getSize());\r\n        }\r\n    }\r\n    this.resourceMap.clear();\r\n    return stats;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\runc",
  "methodName" : "getSchemaVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getSchemaVersion()\n{\r\n    return schemaVersion;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\runc",
  "methodName" : "getMediaType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getMediaType()\n{\r\n    return mediaType;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\runc",
  "methodName" : "getConfig",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Blob getConfig()\n{\r\n    return config;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\runc",
  "methodName" : "getLayers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ArrayList<Blob> getLayers()\n{\r\n    return layers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\runc",
  "methodName" : "getAnnotations",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, String> getAnnotations()\n{\r\n    return annotations;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\runc",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"schemaVersion: \" + schemaVersion + \"\\n\");\r\n    sb.append(\"mediaType: \" + mediaType + \"\\n\");\r\n    sb.append(config.toString());\r\n    for (Blob b : layers) {\r\n        sb.append(b.toString());\r\n    }\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "getUsedMemoryMiB",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Long getUsedMemoryMiB()\n{\r\n    return usedMemoryMiB;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "setUsedMemoryMiB",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setUsedMemoryMiB(Long usedMemoryMiB)\n{\r\n    this.usedMemoryMiB = usedMemoryMiB;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "getAvailMemoryMiB",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Long getAvailMemoryMiB()\n{\r\n    return availMemoryMiB;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "setAvailMemoryMiB",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAvailMemoryMiB(Long availMemoryMiB)\n{\r\n    this.availMemoryMiB = availMemoryMiB;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "getTotalMemoryMiB",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getTotalMemoryMiB()\n{\r\n    if (usedMemoryMiB == -1 && availMemoryMiB == -1) {\r\n        return -1;\r\n    }\r\n    return usedMemoryMiB + availMemoryMiB;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getManager",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "NetworkTagMappingManager getManager(Configuration conf)\n{\r\n    Class<? extends NetworkTagMappingManager> managerClass = conf.getClass(YarnConfiguration.NM_NETWORK_TAG_MAPPING_MANAGER, NetworkTagMappingJsonManager.class, NetworkTagMappingManager.class);\r\n    LOG.info(\"Using NetworkTagMappingManager implementation - \" + managerClass);\r\n    return ReflectionUtils.newInstance(managerClass, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "shouldDoLogAggregation",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean shouldDoLogAggregation(ContainerLogContext logContext)\n{\r\n    return logContext.getExitCode() != 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "configureRetryContext",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "ContainerRetryContext configureRetryContext(Configuration conf, ContainerLaunchContext launchContext, ContainerId containerId)\n{\r\n    ContainerRetryContext context;\r\n    if (launchContext != null && launchContext.getContainerRetryContext() != null) {\r\n        context = launchContext.getContainerRetryContext();\r\n    } else {\r\n        context = ContainerRetryContext.NEVER_RETRY_CONTEXT;\r\n    }\r\n    int minimumRestartInterval = conf.getInt(YarnConfiguration.NM_CONTAINER_RETRY_MINIMUM_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_CONTAINER_RETRY_MINIMUM_INTERVAL_MS);\r\n    if (context.getRetryPolicy() != ContainerRetryPolicy.NEVER_RETRY && context.getRetryInterval() < minimumRestartInterval) {\r\n        LOG.info(\"Set restart interval to minimum value \" + minimumRestartInterval + \"ms for container \" + containerId);\r\n        context.setRetryInterval(minimumRestartInterval);\r\n    }\r\n    return context;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getCurrentState",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "org.apache.hadoop.yarn.api.records.ContainerState getCurrentState()\n{\r\n    switch(stateMachine.getCurrentState()) {\r\n        case NEW:\r\n        case LOCALIZING:\r\n        case LOCALIZATION_FAILED:\r\n        case SCHEDULED:\r\n        case PAUSED:\r\n        case RESUMING:\r\n        case RUNNING:\r\n        case RELAUNCHING:\r\n        case REINITIALIZING:\r\n        case REINITIALIZING_AWAITING_KILL:\r\n        case EXITED_WITH_SUCCESS:\r\n        case EXITED_WITH_FAILURE:\r\n        case KILLING:\r\n        case CONTAINER_CLEANEDUP_AFTER_KILL:\r\n        case CONTAINER_RESOURCES_CLEANINGUP:\r\n        case PAUSING:\r\n            return org.apache.hadoop.yarn.api.records.ContainerState.RUNNING;\r\n        case DONE:\r\n        default:\r\n            return org.apache.hadoop.yarn.api.records.ContainerState.COMPLETE;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getContainerSubState",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerSubState getContainerSubState()\n{\r\n    switch(stateMachine.getCurrentState()) {\r\n        case NEW:\r\n        case LOCALIZING:\r\n        case SCHEDULED:\r\n        case REINITIALIZING_AWAITING_KILL:\r\n        case RELAUNCHING:\r\n            return ContainerSubState.SCHEDULED;\r\n        case REINITIALIZING:\r\n        case PAUSING:\r\n        case KILLING:\r\n        case RUNNING:\r\n            return ContainerSubState.RUNNING;\r\n        case PAUSED:\r\n        case RESUMING:\r\n            return ContainerSubState.PAUSED;\r\n        case LOCALIZATION_FAILED:\r\n        case EXITED_WITH_SUCCESS:\r\n        case EXITED_WITH_FAILURE:\r\n        case CONTAINER_CLEANEDUP_AFTER_KILL:\r\n        case CONTAINER_RESOURCES_CLEANINGUP:\r\n            return ContainerSubState.COMPLETING;\r\n        case DONE:\r\n        default:\r\n            return ContainerSubState.DONE;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getNMTimelinePublisher",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NMTimelinePublisher getNMTimelinePublisher()\n{\r\n    return context.getNMTimelinePublisher();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getUser()\n{\r\n    this.readLock.lock();\r\n    try {\r\n        return this.user;\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getLocalizedResources",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Map<Path, List<String>> getLocalizedResources()\n{\r\n    this.readLock.lock();\r\n    try {\r\n        if (ContainerState.SCHEDULED == getContainerState() || ContainerState.RELAUNCHING == getContainerState()) {\r\n            return resourceSet.getLocalizedResources();\r\n        } else {\r\n            return null;\r\n        }\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getCredentials",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Credentials getCredentials()\n{\r\n    this.readLock.lock();\r\n    try {\r\n        return credentials;\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getContainerState",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ContainerState getContainerState()\n{\r\n    this.readLock.lock();\r\n    try {\r\n        return stateMachine.getCurrentState();\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getLaunchContext",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerLaunchContext getLaunchContext()\n{\r\n    this.readLock.lock();\r\n    try {\r\n        return launchContext;\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "cloneAndGetContainerStatus",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "ContainerStatus cloneAndGetContainerStatus()\n{\r\n    this.readLock.lock();\r\n    try {\r\n        ContainerStatus status = BuilderUtils.newContainerStatus(this.containerId, getCurrentState(), diagnostics.toString(), exitCode, getResource(), this.containerTokenIdentifier.getExecutionType());\r\n        status.setIPs(StringUtils.isEmpty(ips) ? null : Arrays.asList(ips.split(\",\")));\r\n        status.setHost(host);\r\n        status.setContainerSubState(getContainerSubState());\r\n        status.setExposedPorts(exposedPorts);\r\n        return status;\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getNMContainerStatus",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "NMContainerStatus getNMContainerStatus()\n{\r\n    this.readLock.lock();\r\n    try {\r\n        NMContainerStatus status = NMContainerStatus.newInstance(this.containerId, this.version, getCurrentState(), getResource(), diagnostics.toString(), exitCode, containerTokenIdentifier.getPriority(), containerTokenIdentifier.getCreationTime(), containerTokenIdentifier.getNodeLabelExpression(), containerTokenIdentifier.getExecutionType(), containerTokenIdentifier.getAllocationRequestId());\r\n        status.setAllocationTags(containerTokenIdentifier.getAllcationTags());\r\n        return status;\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerId getContainerId()\n{\r\n    return this.containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getContainerStartTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getContainerStartTime()\n{\r\n    return this.startTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getContainerLaunchTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getContainerLaunchTime()\n{\r\n    return this.containerLaunchStartTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getResource",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource getResource()\n{\r\n    return Resources.clone(this.containerTokenIdentifier.getResource());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getContainerTokenIdentifier",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerTokenIdentifier getContainerTokenIdentifier()\n{\r\n    this.readLock.lock();\r\n    try {\r\n        return this.containerTokenIdentifier;\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "setContainerTokenIdentifier",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setContainerTokenIdentifier(ContainerTokenIdentifier token)\n{\r\n    this.writeLock.lock();\r\n    try {\r\n        this.containerTokenIdentifier = token;\r\n    } finally {\r\n        this.writeLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getWorkDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getWorkDir()\n{\r\n    return workDir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "setWorkDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setWorkDir(String workDir)\n{\r\n    this.workDir = workDir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getCsiVolumesRootDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getCsiVolumesRootDir()\n{\r\n    return csiVolumesRootDir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "setCsiVolumesRootDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setCsiVolumesRootDir(String volumesRootDir)\n{\r\n    this.csiVolumesRootDir = volumesRootDir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "clearIpAndHost",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void clearIpAndHost()\n{\r\n    LOG.info(\"{} clearing ip and host\", containerId);\r\n    this.ips = null;\r\n    this.host = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "setIpAndHost",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setIpAndHost(String[] ipAndHost)\n{\r\n    this.writeLock.lock();\r\n    try {\r\n        this.ips = ipAndHost[0];\r\n        this.host = ipAndHost[1];\r\n    } finally {\r\n        this.writeLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getLogDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getLogDir()\n{\r\n    return logDir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "setLogDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setLogDir(String logDir)\n{\r\n    this.logDir = logDir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getResourceSet",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourceSet getResourceSet()\n{\r\n    return this.resourceSet;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "sendFinishedEvents",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void sendFinishedEvents()\n{\r\n    @SuppressWarnings(\"rawtypes\")\r\n    EventHandler eventHandler = dispatcher.getEventHandler();\r\n    ContainerStatus containerStatus = cloneAndGetContainerStatus();\r\n    eventHandler.handle(new ApplicationContainerFinishedEvent(containerStatus, startTime));\r\n    eventHandler.handle(new ContainerSchedulerEvent(this, ContainerSchedulerEventType.CONTAINER_COMPLETED));\r\n    eventHandler.handle(new ContainerStopMonitoringEvent(containerId));\r\n    eventHandler.handle(new LogHandlerContainerFinishedEvent(containerId, containerTokenIdentifier.getContainerType(), exitCode));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "sendLaunchEvent",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void sendLaunchEvent()\n{\r\n    if (ContainerState.PAUSED == getContainerState()) {\r\n        dispatcher.getEventHandler().handle(new ContainerResumeEvent(containerId, \"Container Resumed as some resources freed up\"));\r\n    } else {\r\n        ContainersLauncherEventType launcherEvent = ContainersLauncherEventType.LAUNCH_CONTAINER;\r\n        if (recoveredStatus == RecoveredContainerStatus.LAUNCHED) {\r\n            launcherEvent = ContainersLauncherEventType.RECOVER_CONTAINER;\r\n        } else if (recoveredStatus == RecoveredContainerStatus.PAUSED) {\r\n            launcherEvent = ContainersLauncherEventType.RECOVER_PAUSED_CONTAINER;\r\n        }\r\n        containerLaunchStartTime = clock.getTime();\r\n        dispatcher.getEventHandler().handle(new ContainersLauncherEvent(this, launcherEvent));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "sendScheduleEvent",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void sendScheduleEvent()\n{\r\n    if (recoveredStatus == RecoveredContainerStatus.PAUSED) {\r\n        ContainersLauncherEventType launcherEvent;\r\n        launcherEvent = ContainersLauncherEventType.RECOVER_PAUSED_CONTAINER;\r\n        dispatcher.getEventHandler().handle(new ContainersLauncherEvent(this, launcherEvent));\r\n    } else {\r\n        dispatcher.getEventHandler().handle(new ContainerSchedulerEvent(this, ContainerSchedulerEventType.SCHEDULE_CONTAINER));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "sendKillEvent",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void sendKillEvent(int exitStatus, String description)\n{\r\n    this.isMarkeForKilling = true;\r\n    dispatcher.getEventHandler().handle(new ContainerKillEvent(containerId, exitStatus, description));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "sendPauseEvent",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void sendPauseEvent(String description)\n{\r\n    dispatcher.getEventHandler().handle(new ContainerPauseEvent(containerId, description));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "sendRelaunchEvent",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void sendRelaunchEvent()\n{\r\n    ContainersLauncherEventType launcherEvent = ContainersLauncherEventType.RELAUNCH_CONTAINER;\r\n    dispatcher.getEventHandler().handle(new ContainersLauncherEvent(this, launcherEvent));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "sendContainerMonitorStartEvent",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void sendContainerMonitorStartEvent()\n{\r\n    long launchDuration = clock.getTime() - containerLaunchStartTime;\r\n    metrics.addContainerLaunchDuration(launchDuration);\r\n    long pmemBytes = getResource().getMemorySize() * 1024 * 1024L;\r\n    float pmemRatio = daemonConf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO, YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\r\n    long vmemBytes = (long) (pmemRatio * pmemBytes);\r\n    int cpuVcores = getResource().getVirtualCores();\r\n    long localizationDuration = containerLaunchStartTime - containerLocalizationStartTime;\r\n    dispatcher.getEventHandler().handle(new ContainerStartMonitoringEvent(containerId, vmemBytes, pmemBytes, cpuVcores, launchDuration, localizationDuration));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "addDiagnostics",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void addDiagnostics(String... diags)\n{\r\n    for (String s : diags) {\r\n        this.diagnostics.append(\"[\" + dateFormat.format(new Date()) + \"]\" + s);\r\n    }\r\n    if (diagnostics.length() > diagnosticsMaxSize) {\r\n        diagnostics.delete(0, diagnostics.length() - diagnosticsMaxSize);\r\n    }\r\n    try {\r\n        stateStore.storeContainerDiagnostics(containerId, diagnostics);\r\n    } catch (IOException e) {\r\n        LOG.warn(\"Unable to update diagnostics in state store for \" + containerId, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "cleanup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void cleanup()\n{\r\n    Map<LocalResourceVisibility, Collection<LocalResourceRequest>> rsrc = resourceSet.getAllResourcesByVisibility();\r\n    dispatcher.getEventHandler().handle(new ContainerLocalizationCleanupEvent(this, rsrc));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "isRetryContextSet",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isRetryContextSet()\n{\r\n    return containerRetryContext.getRetryPolicy() != ContainerRetryPolicy.NEVER_RETRY;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "shouldRetry",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean shouldRetry(int errorCode)\n{\r\n    if (errorCode == ExitCode.SUCCESS.getExitCode() || errorCode == ExitCode.FORCE_KILLED.getExitCode() || errorCode == ExitCode.TERMINATED.getExitCode()) {\r\n        return false;\r\n    }\r\n    return retryPolicy.shouldRetry(windowRetryContext, errorCode);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "handle",
  "errType" : [ "InvalidStateTransitionException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void handle(ContainerEvent event)\n{\r\n    this.writeLock.lock();\r\n    try {\r\n        ContainerId containerID = event.getContainerID();\r\n        LOG.debug(\"Processing {} of type {}\", containerID, event.getType());\r\n        ContainerState oldState = stateMachine.getCurrentState();\r\n        ContainerState newState = null;\r\n        try {\r\n            newState = stateMachine.doTransition(event.getType(), event);\r\n        } catch (InvalidStateTransitionException e) {\r\n            LOG.error(\"Can't handle this event at current state: Current: [\" + oldState + \"], eventType: [\" + event.getType() + \"],\" + \" container: [\" + containerID + \"]\", e);\r\n        }\r\n        if (newState != null && oldState != newState) {\r\n            LOG.info(\"Container \" + containerID + \" transitioned from \" + oldState + \" to \" + newState);\r\n        }\r\n    } finally {\r\n        this.writeLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String toString()\n{\r\n    this.readLock.lock();\r\n    try {\r\n        return this.containerId.toString();\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "hasDefaultExitCode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean hasDefaultExitCode()\n{\r\n    return (this.exitCode == ContainerExitStatus.INVALID);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "shouldBeUploadedToSharedCache",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean shouldBeUploadedToSharedCache(ContainerImpl container, LocalResourceRequest resource)\n{\r\n    return container.resourceSet.getResourcesUploadPolicies().get(resource);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "setIsPaused",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setIsPaused(boolean paused)\n{\r\n    if (this.wasPaused && !paused) {\r\n        this.metrics.endPausedContainer();\r\n    }\r\n    this.wasPaused = paused;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getContainerRetryContext",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerRetryContext getContainerRetryContext()\n{\r\n    return containerRetryContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getPriority",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Priority getPriority()\n{\r\n    return containerTokenIdentifier.getPriority();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "isRunning",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isRunning()\n{\r\n    return getContainerState() == ContainerState.RUNNING;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "setIsReInitializing",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setIsReInitializing(boolean isReInitializing)\n{\r\n    if (this.isReInitializing && !isReInitializing) {\r\n        metrics.endReInitingContainer();\r\n    }\r\n    this.isReInitializing = isReInitializing;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "isReInitializing",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isReInitializing()\n{\r\n    return this.isReInitializing;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "isMarkedForKilling",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isMarkedForKilling()\n{\r\n    return this.isMarkeForKilling;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "canRollback",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean canRollback()\n{\r\n    return (this.reInitContext != null) && (this.reInitContext.canRollback());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "commitUpgrade",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void commitUpgrade()\n{\r\n    this.reInitContext = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "isRecovering",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isRecovering()\n{\r\n    boolean isRecovering = (recoveredStatus != RecoveredContainerStatus.REQUESTED && getContainerState() == ContainerState.NEW);\r\n    return isRecovering;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getResourceMappings",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourceMappings getResourceMappings()\n{\r\n    return resourceMappings;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "storeRetryContext",
  "errType" : [ "IOException", "IOException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void storeRetryContext()\n{\r\n    if (windowRetryContext.getRestartTimes() != null && !windowRetryContext.getRestartTimes().isEmpty()) {\r\n        try {\r\n            stateStore.storeContainerRestartTimes(containerId, windowRetryContext.getRestartTimes());\r\n        } catch (IOException e) {\r\n            LOG.warn(\"Unable to update finishTimeForRetryAttempts in state store for \" + containerId, e);\r\n        }\r\n    }\r\n    try {\r\n        stateStore.storeContainerRemainingRetryAttempts(containerId, windowRetryContext.getRemainingRetries());\r\n    } catch (IOException e) {\r\n        LOG.warn(\"Unable to update remainingRetryAttempts in state store for \" + containerId, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getRetryPolicy",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SlidingWindowRetryPolicy getRetryPolicy()\n{\r\n    return retryPolicy;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "isContainerInFinalStates",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isContainerInFinalStates()\n{\r\n    ContainerState state = getContainerState();\r\n    return state == ContainerState.KILLING || state == ContainerState.DONE || state == ContainerState.LOCALIZATION_FAILED || state == ContainerState.CONTAINER_RESOURCES_CLEANINGUP || state == ContainerState.CONTAINER_CLEANEDUP_AFTER_KILL || state == ContainerState.EXITED_WITH_FAILURE || state == ContainerState.EXITED_WITH_SUCCESS;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "setExposedPorts",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setExposedPorts(String ports)\n{\r\n    this.exposedPorts = ports;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getLocalizationStatuses",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "List<LocalizationStatus> getLocalizationStatuses()\n{\r\n    this.readLock.lock();\r\n    try {\r\n        return resourceSet.getLocalizationStatuses();\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "setContainerRuntimeData",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setContainerRuntimeData(Object containerRuntimeData)\n{\r\n    this.containerRuntimeData = containerRuntimeData;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getContainerRuntimeData",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "T getContainerRuntimeData(Class<T> runtimeClass) throws ContainerExecutionException\n{\r\n    if (!runtimeClass.isInstance(containerRuntimeData)) {\r\n        throw new ContainerExecutionException(\"Runtime class \" + containerRuntimeData.getClass().getCanonicalName() + \" is invalid. Expected class \" + runtimeClass.getCanonicalName());\r\n    }\r\n    return runtimeClass.cast(containerRuntimeData);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "localizationCountersAsString",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String localizationCountersAsString()\n{\r\n    StringBuilder result = new StringBuilder(String.valueOf(localizationCounts[0]));\r\n    for (int i = 1; i < localizationCounts.length; i++) {\r\n        result.append(',').append(localizationCounts[i]);\r\n    }\r\n    return result.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "content",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<? extends SubView> content()\n{\r\n    return ErrorsAndWarningsBlock.class;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "preHead",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void preHead(HtmlPage.Page.HTML<__> html)\n{\r\n    commonPreHead(html);\r\n    String title = \"Errors and Warnings in the NodeManager\";\r\n    setTitle(title);\r\n    String tableId = \"messages\";\r\n    set(DATATABLES_ID, tableId);\r\n    set(initID(DATATABLES, tableId), tablesInit());\r\n    setTableStyles(html, tableId, \".message {width:50em}\", \".count {width:8em}\", \".lasttime {width:16em}\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "tablesInit",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "String tablesInit()\n{\r\n    StringBuilder b = tableInit().append(\", aoColumnDefs: [\");\r\n    b.append(\"{'sType': 'string', 'aTargets': [ 0 ]}\");\r\n    b.append(\", {'sType': 'string', 'bSearchable': true, 'aTargets': [ 1 ]}\");\r\n    b.append(\", {'sType': 'numeric', 'bSearchable': false, 'aTargets': [ 2 ]}\");\r\n    b.append(\", {'sType': 'date', 'aTargets': [ 3 ] }]\");\r\n    b.append(\", aaSorting: [[3, 'desc']]}\");\r\n    return b.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\runc",
  "methodName" : "getVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getVersion()\n{\r\n    return version;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\runc",
  "methodName" : "getRunAsUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getRunAsUser()\n{\r\n    return runAsUser;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\runc",
  "methodName" : "getUsername",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUsername()\n{\r\n    return username;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\runc",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getContainerId()\n{\r\n    return containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\runc",
  "methodName" : "getApplicationId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getApplicationId()\n{\r\n    return applicationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\runc",
  "methodName" : "getPidFile",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getPidFile()\n{\r\n    return pidFile;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\runc",
  "methodName" : "getContainerScriptPath",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getContainerScriptPath()\n{\r\n    return containerScriptPath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\runc",
  "methodName" : "getContainerCredentialsPath",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getContainerCredentialsPath()\n{\r\n    return containerCredentialsPath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\runc",
  "methodName" : "getHttps",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getHttps()\n{\r\n    return https;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\runc",
  "methodName" : "getKeystorePath",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getKeystorePath()\n{\r\n    return keystorePath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\runc",
  "methodName" : "getTruststorePath",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getTruststorePath()\n{\r\n    return truststorePath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\runc",
  "methodName" : "getLocalDirs",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<String> getLocalDirs()\n{\r\n    return localDirs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\runc",
  "methodName" : "getLogDirs",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<String> getLogDirs()\n{\r\n    return logDirs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\runc",
  "methodName" : "getLayers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<OCILayer> getLayers()\n{\r\n    return layers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\runc",
  "methodName" : "getReapLayerKeepCount",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getReapLayerKeepCount()\n{\r\n    return reapLayerKeepCount;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\runc",
  "methodName" : "getOciRuntimeConfig",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "OCIRuntimeConfig getOciRuntimeConfig()\n{\r\n    return ociRuntimeConfig;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\timelineservice",
  "methodName" : "getApplicationId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationId getApplicationId()\n{\r\n    return appId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "getMaxOppQueueLengthFromConf",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int getMaxOppQueueLengthFromConf(final Context context)\n{\r\n    if (context == null || context.getConf() == null) {\r\n        return YarnConfiguration.DEFAULT_NM_OPPORTUNISTIC_CONTAINERS_MAX_QUEUE_LENGTH;\r\n    }\r\n    return context.getConf().getInt(YarnConfiguration.NM_OPPORTUNISTIC_CONTAINERS_MAX_QUEUE_LENGTH, YarnConfiguration.DEFAULT_NM_OPPORTUNISTIC_CONTAINERS_MAX_QUEUE_LENGTH);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "getOppContainersQueuePolicyFromConf",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "OpportunisticContainersQueuePolicy getOppContainersQueuePolicyFromConf(final Context context)\n{\r\n    final OpportunisticContainersQueuePolicy queuePolicy;\r\n    if (context == null || context.getConf() == null) {\r\n        queuePolicy = OpportunisticContainersQueuePolicy.DEFAULT;\r\n    } else {\r\n        queuePolicy = context.getConf().getEnum(YarnConfiguration.NM_OPPORTUNISTIC_CONTAINERS_QUEUE_POLICY, OpportunisticContainersQueuePolicy.DEFAULT);\r\n    }\r\n    return queuePolicy;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    super.serviceInit(conf);\r\n    if (resourceHandlerChain == null) {\r\n        resourceHandlerChain = ResourceHandlerModule.getConfiguredResourceHandlerChain(conf, context);\r\n    }\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(\"Resource handler chain enabled = \" + (resourceHandlerChain != null));\r\n    }\r\n    this.usePauseEventForPreemption = conf.getBoolean(YarnConfiguration.NM_CONTAINER_QUEUING_USE_PAUSE_FOR_PREEMPTION, YarnConfiguration.DEFAULT_NM_CONTAINER_QUEUING_USE_PAUSE_FOR_PREEMPTION);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "handle",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void handle(ContainerSchedulerEvent event)\n{\r\n    switch(event.getType()) {\r\n        case SCHEDULE_CONTAINER:\r\n            scheduleContainer(event.getContainer());\r\n            break;\r\n        case CONTAINER_PAUSED:\r\n        case CONTAINER_COMPLETED:\r\n            onResourcesReclaimed(event.getContainer());\r\n            break;\r\n        case UPDATE_CONTAINER:\r\n            if (event instanceof UpdateContainerSchedulerEvent) {\r\n                onUpdateContainer((UpdateContainerSchedulerEvent) event);\r\n            } else {\r\n                LOG.error(\"Unknown event type on UpdateCOntainer: \" + event.getType());\r\n            }\r\n            break;\r\n        case SHED_QUEUED_CONTAINERS:\r\n            shedQueuedOpportunisticContainers();\r\n            break;\r\n        case RECOVERY_COMPLETED:\r\n            startPendingContainers(forceStartGuaranteedContainers);\r\n            metrics.setQueuedContainers(queuedOpportunisticContainers.size(), queuedGuaranteedContainers.size());\r\n            break;\r\n        default:\r\n            LOG.error(\"Unknown event arrived at ContainerScheduler: \" + event.toString());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "onUpdateContainer",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void onUpdateContainer(UpdateContainerSchedulerEvent updateEvent)\n{\r\n    ContainerId containerId = updateEvent.getContainer().getContainerId();\r\n    if (updateEvent.isResourceChange()) {\r\n        if (runningContainers.containsKey(containerId)) {\r\n            this.utilizationTracker.subtractContainerResource(new ContainerImpl(getConfig(), null, null, null, null, updateEvent.getOriginalToken(), context));\r\n            this.utilizationTracker.addContainerResources(updateEvent.getContainer());\r\n            getContainersMonitor().handle(new ChangeMonitoringContainerResourceEvent(containerId, updateEvent.getUpdatedToken().getResource()));\r\n        }\r\n    }\r\n    if (updateEvent.isExecTypeUpdate()) {\r\n        if (updateEvent.isIncrease()) {\r\n            if (queuedOpportunisticContainers.remove(containerId) != null) {\r\n                queuedGuaranteedContainers.put(containerId, updateEvent.getContainer());\r\n                reclaimOpportunisticContainerResources(updateEvent.getContainer());\r\n            }\r\n        } else {\r\n            if (queuedGuaranteedContainers.remove(containerId) != null) {\r\n                queuedOpportunisticContainers.put(containerId, updateEvent.getContainer());\r\n            }\r\n        }\r\n        try {\r\n            resourceHandlerChain.updateContainer(updateEvent.getContainer());\r\n        } catch (Exception ex) {\r\n            LOG.warn(String.format(\"Could not update resources on \" + \"continer update of %s\", containerId), ex);\r\n        }\r\n        startPendingContainers(forceStartGuaranteedContainers);\r\n        metrics.setQueuedContainers(queuedOpportunisticContainers.size(), queuedGuaranteedContainers.size());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "recoverActiveContainer",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void recoverActiveContainer(Container container, RecoveredContainerState rcs)\n{\r\n    ExecutionType execType = container.getContainerTokenIdentifier().getExecutionType();\r\n    if (rcs.getStatus() == RecoveredContainerStatus.QUEUED || rcs.getStatus() == RecoveredContainerStatus.PAUSED) {\r\n        if (execType == ExecutionType.GUARANTEED) {\r\n            queuedGuaranteedContainers.put(container.getContainerId(), container);\r\n        } else if (execType == ExecutionType.OPPORTUNISTIC) {\r\n            queuedOpportunisticContainers.put(container.getContainerId(), container);\r\n        } else {\r\n            LOG.error(\"UnKnown execution type received \" + container.getContainerId() + \", execType \" + execType);\r\n        }\r\n        metrics.setQueuedContainers(queuedOpportunisticContainers.size(), queuedGuaranteedContainers.size());\r\n    } else if (rcs.getStatus() == RecoveredContainerStatus.LAUNCHED) {\r\n        runningContainers.put(container.getContainerId(), container);\r\n        utilizationTracker.addContainerResources(container);\r\n    }\r\n    if (rcs.getStatus() != RecoveredContainerStatus.COMPLETED && rcs.getCapability() != null) {\r\n        metrics.launchedContainer();\r\n        metrics.allocateContainer(rcs.getCapability());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "getNumQueuedContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int getNumQueuedContainers()\n{\r\n    return this.queuedGuaranteedContainers.size() + this.queuedOpportunisticContainers.size();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "getOpportunisticQueueCapacity",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getOpportunisticQueueCapacity()\n{\r\n    return this.maxOppQueueLength;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "getNumQueuedGuaranteedContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getNumQueuedGuaranteedContainers()\n{\r\n    return this.queuedGuaranteedContainers.size();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "getNumQueuedOpportunisticContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getNumQueuedOpportunisticContainers()\n{\r\n    return this.queuedOpportunisticContainers.size();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "getNumRunningContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getNumRunningContainers()\n{\r\n    return this.runningContainers.size();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "setUsePauseEventForPreemption",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setUsePauseEventForPreemption(boolean usePauseEventForPreemption)\n{\r\n    this.usePauseEventForPreemption = usePauseEventForPreemption;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "getOpportunisticContainersStatus",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "OpportunisticContainersStatus getOpportunisticContainersStatus()\n{\r\n    this.opportunisticContainersStatus.setQueuedOpportContainers(getNumQueuedOpportunisticContainers());\r\n    this.opportunisticContainersStatus.setWaitQueueLength(getNumQueuedContainers());\r\n    this.opportunisticContainersStatus.setOpportMemoryUsed(metrics.getAllocatedOpportunisticGB());\r\n    this.opportunisticContainersStatus.setOpportCoresUsed(metrics.getAllocatedOpportunisticVCores());\r\n    this.opportunisticContainersStatus.setRunningOpportContainers(metrics.getRunningOpportunisticContainers());\r\n    this.opportunisticContainersStatus.setOpportQueueCapacity(getOpportunisticQueueCapacity());\r\n    return this.opportunisticContainersStatus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "onResourcesReclaimed",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void onResourcesReclaimed(Container container)\n{\r\n    oppContainersToKill.remove(container.getContainerId());\r\n    Container queued = queuedOpportunisticContainers.remove(container.getContainerId());\r\n    if (queued == null) {\r\n        queuedGuaranteedContainers.remove(container.getContainerId());\r\n    }\r\n    if (container.getContainerState() == ContainerState.PAUSED) {\r\n        if (container.getContainerTokenIdentifier().getExecutionType() == ExecutionType.GUARANTEED) {\r\n            queuedGuaranteedContainers.put(container.getContainerId(), container);\r\n        } else {\r\n            queuedOpportunisticContainers.put(container.getContainerId(), container);\r\n        }\r\n    }\r\n    Container completedContainer = runningContainers.remove(container.getContainerId());\r\n    boolean resourceReleased = completedContainer != null;\r\n    if (resourceReleased) {\r\n        this.utilizationTracker.subtractContainerResource(container);\r\n        if (container.getContainerTokenIdentifier().getExecutionType() == ExecutionType.OPPORTUNISTIC) {\r\n            this.metrics.completeOpportunisticContainer(container.getResource());\r\n        }\r\n        startPendingContainers(forceStartGuaranteedContainers);\r\n    }\r\n    this.metrics.setQueuedContainers(queuedOpportunisticContainers.size(), queuedGuaranteedContainers.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "startPendingContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void startPendingContainers(boolean forceStartGContainers)\n{\r\n    boolean resourcesAvailable = startContainers(queuedGuaranteedContainers.values(), forceStartGContainers);\r\n    if (resourcesAvailable) {\r\n        startContainers(queuedOpportunisticContainers.values(), false);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "startContainers",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "boolean startContainers(Collection<Container> containersToBeStarted, boolean force)\n{\r\n    Iterator<Container> cIter = containersToBeStarted.iterator();\r\n    boolean resourcesAvailable = true;\r\n    while (cIter.hasNext() && resourcesAvailable) {\r\n        Container container = cIter.next();\r\n        if (tryStartContainer(container, force)) {\r\n            cIter.remove();\r\n        } else {\r\n            resourcesAvailable = false;\r\n        }\r\n    }\r\n    return resourcesAvailable;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "tryStartContainer",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean tryStartContainer(Container container, boolean force)\n{\r\n    boolean containerStarted = false;\r\n    if (force || resourceAvailableToStartContainer(container)) {\r\n        startContainer(container);\r\n        containerStarted = true;\r\n    }\r\n    return containerStarted;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "resourceAvailableToStartContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean resourceAvailableToStartContainer(Container container)\n{\r\n    return this.utilizationTracker.hasResourcesAvailable(container);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "resourceAvailableToQueueOppContainer",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "boolean resourceAvailableToQueueOppContainer(Container newOppContainer)\n{\r\n    final Resource cumulativeResource = Resource.newInstance(Resources.none());\r\n    for (final Container container : queuedGuaranteedContainers.values()) {\r\n        Resources.addTo(cumulativeResource, container.getResource());\r\n    }\r\n    for (final Container container : queuedOpportunisticContainers.values()) {\r\n        Resources.addTo(cumulativeResource, container.getResource());\r\n    }\r\n    Resources.addTo(cumulativeResource, newOppContainer.getResource());\r\n    return this.utilizationTracker.hasResourcesAvailable(cumulativeResource);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "enqueueContainer",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "boolean enqueueContainer(Container container)\n{\r\n    boolean isGuaranteedContainer = container.getContainerTokenIdentifier().getExecutionType() == ExecutionType.GUARANTEED;\r\n    boolean isQueued;\r\n    if (isGuaranteedContainer) {\r\n        queuedGuaranteedContainers.put(container.getContainerId(), container);\r\n        isQueued = true;\r\n    } else {\r\n        switch(oppContainersQueuePolicy) {\r\n            case BY_RESOURCES:\r\n                isQueued = resourceAvailableToQueueOppContainer(container);\r\n                break;\r\n            case BY_QUEUE_LEN:\r\n            default:\r\n                if (maxOppQueueLength <= 0) {\r\n                    isQueued = false;\r\n                } else {\r\n                    isQueued = queuedOpportunisticContainers.size() < maxOppQueueLength;\r\n                }\r\n        }\r\n        if (isQueued) {\r\n            LOG.info(\"Opportunistic container {} will be queued at the NM.\", container.getContainerId());\r\n            queuedOpportunisticContainers.put(container.getContainerId(), container);\r\n            isQueued = true;\r\n        } else {\r\n            LOG.info(\"Opportunistic container [{}] will not be queued at the NM\" + \"since max queue length [{}] has been reached\", container.getContainerId(), maxOppQueueLength);\r\n            container.sendKillEvent(ContainerExitStatus.KILLED_BY_CONTAINER_SCHEDULER, \"Opportunistic container queue is full.\");\r\n        }\r\n    }\r\n    if (isQueued) {\r\n        try {\r\n            this.context.getNMStateStore().storeContainerQueued(container.getContainerId());\r\n        } catch (IOException e) {\r\n            LOG.warn(\"Could not store container [\" + container.getContainerId() + \"] state. The Container has been queued.\", e);\r\n        }\r\n    }\r\n    return isQueued;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "scheduleContainer",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void scheduleContainer(Container container)\n{\r\n    boolean isGuaranteedContainer = container.getContainerTokenIdentifier().getExecutionType() == ExecutionType.GUARANTEED;\r\n    if (isGuaranteedContainer) {\r\n        enqueueContainer(container);\r\n        startPendingContainers(forceStartGuaranteedContainers);\r\n        if (queuedGuaranteedContainers.containsKey(container.getContainerId())) {\r\n            reclaimOpportunisticContainerResources(container);\r\n        }\r\n    } else {\r\n        startPendingContainers(false);\r\n        boolean containerQueued = enqueueContainer(container);\r\n        if (containerQueued) {\r\n            startPendingContainers(false);\r\n        }\r\n    }\r\n    metrics.setQueuedContainers(queuedOpportunisticContainers.size(), queuedGuaranteedContainers.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "reclaimOpportunisticContainerResources",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void reclaimOpportunisticContainerResources(Container container)\n{\r\n    List<Container> extraOppContainersToReclaim = pickOpportunisticContainersToReclaimResources(container.getContainerId());\r\n    for (Container contToReclaim : extraOppContainersToReclaim) {\r\n        String preemptionAction = usePauseEventForPreemption == true ? \"paused\" : \"killed\";\r\n        LOG.info(\"Container {} will be {} to start the \" + \"execution of guaranteed container {}.\", contToReclaim.getContainerId(), preemptionAction, container.getContainerId());\r\n        if (usePauseEventForPreemption) {\r\n            contToReclaim.sendPauseEvent(\"Container Paused to make room for Guaranteed Container\");\r\n        } else {\r\n            contToReclaim.sendKillEvent(ContainerExitStatus.KILLED_BY_CONTAINER_SCHEDULER, \"Container Killed to make room for Guaranteed Container.\");\r\n        }\r\n        oppContainersToKill.put(contToReclaim.getContainerId(), contToReclaim);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "startContainer",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void startContainer(Container container)\n{\r\n    LOG.info(\"Starting container [\" + container.getContainerId() + \"]\");\r\n    if (!runningContainers.containsKey(container.getContainerId())) {\r\n        runningContainers.put(container.getContainerId(), container);\r\n        this.utilizationTracker.addContainerResources(container);\r\n    }\r\n    if (container.getContainerTokenIdentifier().getExecutionType() == ExecutionType.OPPORTUNISTIC) {\r\n        this.metrics.startOpportunisticContainer(container.getResource());\r\n    }\r\n    container.sendLaunchEvent();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "pickOpportunisticContainersToReclaimResources",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "List<Container> pickOpportunisticContainersToReclaimResources(ContainerId containerToStartId)\n{\r\n    List<Container> extraOpportContainersToKill = new ArrayList<>();\r\n    ResourceUtilization resourcesToFreeUp = resourcesToFreeUp(containerToStartId);\r\n    Iterator<Container> lifoIterator = new LinkedList<>(runningContainers.values()).descendingIterator();\r\n    while (lifoIterator.hasNext() && !hasSufficientResources(resourcesToFreeUp)) {\r\n        Container runningCont = lifoIterator.next();\r\n        if (runningCont.getContainerTokenIdentifier().getExecutionType() == ExecutionType.OPPORTUNISTIC) {\r\n            if (oppContainersToKill.containsKey(runningCont.getContainerId())) {\r\n                continue;\r\n            }\r\n            extraOpportContainersToKill.add(runningCont);\r\n            ContainersMonitor.decreaseResourceUtilization(getContainersMonitor(), resourcesToFreeUp, runningCont.getResource());\r\n        }\r\n    }\r\n    if (!hasSufficientResources(resourcesToFreeUp)) {\r\n        LOG.warn(\"There are no sufficient resources to start guaranteed [{}]\" + \"at the moment. Opportunistic containers are in the process of\" + \"being killed to make room.\", containerToStartId);\r\n    }\r\n    return extraOpportContainersToKill;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "hasSufficientResources",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean hasSufficientResources(ResourceUtilization resourcesToFreeUp)\n{\r\n    return resourcesToFreeUp.getPhysicalMemory() <= 0 && resourcesToFreeUp.getVirtualMemory() <= 0 && resourcesToFreeUp.getCPU() <= 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "resourcesToFreeUp",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "ResourceUtilization resourcesToFreeUp(ContainerId containerToStartId)\n{\r\n    ResourceUtilization resourceAllocationToFreeUp = ResourceUtilization.newInstance(this.utilizationTracker.getCurrentUtilization());\r\n    for (Container container : queuedGuaranteedContainers.values()) {\r\n        ContainersMonitor.increaseResourceUtilization(getContainersMonitor(), resourceAllocationToFreeUp, container.getResource());\r\n        if (container.getContainerId().equals(containerToStartId)) {\r\n            break;\r\n        }\r\n    }\r\n    for (Container container : oppContainersToKill.values()) {\r\n        ContainersMonitor.decreaseResourceUtilization(getContainersMonitor(), resourceAllocationToFreeUp, container.getResource());\r\n    }\r\n    getContainersMonitor().subtractNodeResourcesFromResourceUtilization(resourceAllocationToFreeUp);\r\n    return resourceAllocationToFreeUp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "updateQueuingLimit",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void updateQueuingLimit(ContainerQueuingLimit limit)\n{\r\n    this.queuingLimit.setMaxQueueLength(limit.getMaxQueueLength());\r\n    if ((queuingLimit.getMaxQueueLength() > -1) && (queuingLimit.getMaxQueueLength() < queuedOpportunisticContainers.size())) {\r\n        dispatcher.getEventHandler().handle(new ContainerSchedulerEvent(null, ContainerSchedulerEventType.SHED_QUEUED_CONTAINERS));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "shedQueuedOpportunisticContainers",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void shedQueuedOpportunisticContainers()\n{\r\n    int numAllowed = this.queuingLimit.getMaxQueueLength();\r\n    Iterator<Container> containerIter = queuedOpportunisticContainers.values().iterator();\r\n    while (containerIter.hasNext()) {\r\n        Container container = containerIter.next();\r\n        if (container.getContainerState() != ContainerState.PAUSED) {\r\n            if (numAllowed <= 0) {\r\n                container.sendKillEvent(ContainerExitStatus.KILLED_BY_CONTAINER_SCHEDULER, \"Container De-queued to meet NM queuing limits.\");\r\n                containerIter.remove();\r\n                LOG.info(\"Opportunistic container {} will be killed to meet NM queuing\" + \" limits.\", container.getContainerId());\r\n            }\r\n            numAllowed--;\r\n        }\r\n    }\r\n    this.metrics.setQueuedContainers(queuedOpportunisticContainers.size(), queuedGuaranteedContainers.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "getContainersMonitor",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainersMonitor getContainersMonitor()\n{\r\n    return this.context.getContainerManager().getContainersMonitor();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "getCurrentUtilization",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceUtilization getCurrentUtilization()\n{\r\n    return this.utilizationTracker.getCurrentUtilization();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\runc",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void serviceInit(Configuration configuration)\n{\r\n    this.conf = configuration;\r\n    String toplevelDir = conf.get(NM_RUNC_IMAGE_TOPLEVEL_DIR, DEFAULT_NM_RUNC_IMAGE_TOPLEVEL_DIR);\r\n    this.layersDir = toplevelDir + \"/layers/\";\r\n    this.configDir = toplevelDir + \"/config/\";\r\n    CacheLoader<Path, FileStatus> cacheLoader = new CacheLoader<Path, FileStatus>() {\r\n\r\n        @Override\r\n        public FileStatus load(@Nonnull Path path) throws Exception {\r\n            return statBlob(path);\r\n        }\r\n    };\r\n    int statCacheSize = conf.getInt(NM_RUNC_STAT_CACHE_SIZE, DEFAULT_RUNC_STAT_CACHE_SIZE);\r\n    int statCacheTimeout = conf.getInt(NM_RUNC_STAT_CACHE_TIMEOUT, DEFAULT_NM_RUNC_STAT_CACHE_TIMEOUT);\r\n    this.statCache = CacheBuilder.newBuilder().maximumSize(statCacheSize).refreshAfterWrite(statCacheTimeout, TimeUnit.SECONDS).build(cacheLoader);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\runc",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void serviceStart() throws IOException\n{\r\n    Path path = new Path(layersDir);\r\n    this.fs = path.getFileSystem(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\runc",
  "methodName" : "getLayerResources",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "List<LocalResource> getLayerResources(ImageManifest manifest) throws IOException\n{\r\n    List<LocalResource> localRsrcs = new ArrayList<>();\r\n    for (ImageManifest.Blob blob : manifest.getLayers()) {\r\n        LocalResource rsrc = getResource(blob, layersDir, LAYER_TAR_GZIP_MEDIA_TYPE, LAYER_HASH_ALGORITHM, \".sqsh\");\r\n        localRsrcs.add(rsrc);\r\n    }\r\n    return localRsrcs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\runc",
  "methodName" : "getConfigResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "LocalResource getConfigResource(ImageManifest manifest) throws IOException\n{\r\n    ImageManifest.Blob config = manifest.getConfig();\r\n    return getResource(config, configDir, CONFIG_MEDIA_TYPE, CONFIG_HASH_ALGORITHM, \"\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\runc",
  "methodName" : "getResource",
  "errType" : [ "ExecutionException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "LocalResource getResource(ImageManifest.Blob blob, String dir, String expectedMediaType, String expectedHashAlgorithm, String resourceSuffix) throws IOException\n{\r\n    String mediaType = blob.getMediaType();\r\n    if (!mediaType.equals(expectedMediaType)) {\r\n        throw new IOException(\"Invalid blob mediaType: \" + mediaType);\r\n    }\r\n    String[] blobDigest = blob.getDigest().split(\":\", 2);\r\n    String algorithm = blobDigest[0];\r\n    if (!algorithm.equals(expectedHashAlgorithm)) {\r\n        throw new IOException(\"Invalid blob digest algorithm: \" + algorithm);\r\n    }\r\n    String hash = blobDigest[1];\r\n    if (!hash.matches(ALPHA_NUMERIC) || hash.length() != SHA256_HASH_LENGTH) {\r\n        throw new IOException(\"Malformed blob digest: \" + hash);\r\n    }\r\n    long size = blob.getSize();\r\n    Path path = new Path(dir, hash + resourceSuffix);\r\n    LocalResource rsrc;\r\n    try {\r\n        FileStatus stat = statCache.get(path);\r\n        long timestamp = stat.getModificationTime();\r\n        URL url = URL.fromPath(path);\r\n        rsrc = LocalResource.newInstance(url, LocalResourceType.FILE, LocalResourceVisibility.PUBLIC, size, timestamp);\r\n    } catch (ExecutionException e) {\r\n        throw new IOException(e);\r\n    }\r\n    return rsrc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\runc",
  "methodName" : "statBlob",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FileStatus statBlob(Path path) throws IOException\n{\r\n    return fs.getFileStatus(path);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "copyFile",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void copyFile(Path src, Path dst, String owner) throws IOException\n{\r\n    lfs.util().copy(src, dst, false, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "setScriptExecutable",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setScriptExecutable(Path script, String owner) throws IOException\n{\r\n    lfs.setPermission(script, ContainerExecutor.TASK_LAUNCH_SCRIPT_PERMISSION);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void init(Context nmContext) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "startLocalizer",
  "errType" : null,
  "containingMethodsNum" : 22,
  "sourceCodeText" : "void startLocalizer(LocalizerStartContext ctx) throws IOException, InterruptedException\n{\r\n    Path nmPrivateContainerTokensPath = ctx.getNmPrivateContainerTokens();\r\n    InetSocketAddress nmAddr = ctx.getNmAddr();\r\n    String user = ctx.getUser();\r\n    String appId = ctx.getAppId();\r\n    String locId = ctx.getLocId();\r\n    LocalDirsHandlerService dirsHandler = ctx.getDirsHandler();\r\n    List<String> localDirs = dirsHandler.getLocalDirs();\r\n    List<String> logDirs = dirsHandler.getLogDirs();\r\n    createUserLocalDirs(localDirs, user);\r\n    createUserCacheDirs(localDirs, user);\r\n    createAppDirs(localDirs, user, appId);\r\n    createAppLogDirs(appId, logDirs, user);\r\n    Path appStorageDir = getWorkingDir(localDirs, user, appId);\r\n    String tokenFn = String.format(TOKEN_FILE_NAME_FMT, locId);\r\n    Path tokenDst = new Path(appStorageDir, tokenFn);\r\n    copyFile(nmPrivateContainerTokensPath, tokenDst, user);\r\n    LOG.info(\"Copying from {} to {}\", nmPrivateContainerTokensPath, tokenDst);\r\n    FileContext localizerFc = FileContext.getFileContext(lfs.getDefaultFileSystem(), getConf());\r\n    localizerFc.setUMask(lfs.getUMask());\r\n    localizerFc.setWorkingDirectory(appStorageDir);\r\n    LOG.info(\"Localizer CWD set to {} = {}\", appStorageDir, localizerFc.getWorkingDirectory());\r\n    ContainerLocalizer localizer = createContainerLocalizer(user, appId, locId, tokenFn, localDirs, localizerFc);\r\n    localizer.runLocalization(nmAddr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createContainerLocalizer",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerLocalizer createContainerLocalizer(String user, String appId, String locId, String tokenFileName, List<String> localDirs, FileContext localizerFc) throws IOException\n{\r\n    ContainerLocalizer localizer = new ContainerLocalizer(localizerFc, user, appId, locId, tokenFileName, getPaths(localDirs), RecordFactoryProvider.getRecordFactory(getConf()));\r\n    return localizer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "launchContainer",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 48,
  "sourceCodeText" : "int launchContainer(ContainerStartContext ctx) throws IOException, ConfigurationException\n{\r\n    Container container = ctx.getContainer();\r\n    Path nmPrivateContainerScriptPath = ctx.getNmPrivateContainerScriptPath();\r\n    Path nmPrivateTokensPath = ctx.getNmPrivateTokensPath();\r\n    Path nmPrivateKeystorePath = ctx.getNmPrivateKeystorePath();\r\n    Path nmPrivateTruststorePath = ctx.getNmPrivateTruststorePath();\r\n    String user = ctx.getUser();\r\n    Path containerWorkDir = ctx.getContainerWorkDir();\r\n    List<String> localDirs = ctx.getLocalDirs();\r\n    List<String> logDirs = ctx.getLogDirs();\r\n    FsPermission dirPerm = new FsPermission(APPDIR_PERM);\r\n    ContainerId containerId = container.getContainerId();\r\n    String containerIdStr = containerId.toString();\r\n    String appIdStr = containerId.getApplicationAttemptId().getApplicationId().toString();\r\n    for (String sLocalDir : localDirs) {\r\n        Path usersdir = new Path(sLocalDir, ContainerLocalizer.USERCACHE);\r\n        Path userdir = new Path(usersdir, user);\r\n        Path appCacheDir = new Path(userdir, ContainerLocalizer.APPCACHE);\r\n        Path appDir = new Path(appCacheDir, appIdStr);\r\n        Path containerDir = new Path(appDir, containerIdStr);\r\n        createDir(containerDir, dirPerm, true, user);\r\n    }\r\n    createContainerLogDirs(appIdStr, containerIdStr, logDirs, user);\r\n    Path tmpDir = new Path(containerWorkDir, YarnConfiguration.DEFAULT_CONTAINER_TEMP_DIR);\r\n    createDir(tmpDir, dirPerm, false, user);\r\n    Path tokenDst = new Path(containerWorkDir, ContainerLaunch.FINAL_CONTAINER_TOKENS_FILE);\r\n    copyFile(nmPrivateTokensPath, tokenDst, user);\r\n    if (nmPrivateKeystorePath != null) {\r\n        Path keystoreDst = new Path(containerWorkDir, ContainerLaunch.KEYSTORE_FILE);\r\n        copyFile(nmPrivateKeystorePath, keystoreDst, user);\r\n    }\r\n    if (nmPrivateTruststorePath != null) {\r\n        Path truststoreDst = new Path(containerWorkDir, ContainerLaunch.TRUSTSTORE_FILE);\r\n        copyFile(nmPrivateTruststorePath, truststoreDst, user);\r\n    }\r\n    Path launchDst = new Path(containerWorkDir, ContainerLaunch.CONTAINER_SCRIPT);\r\n    copyFile(nmPrivateContainerScriptPath, launchDst, user);\r\n    LocalWrapperScriptBuilder sb = getLocalWrapperScriptBuilder(containerIdStr, containerWorkDir);\r\n    if (Shell.WINDOWS && sb.getWrapperScriptPath().toString().length() > WIN_MAX_PATH) {\r\n        throw new IOException(String.format(\"Cannot launch container using script at path %s, because it exceeds \" + \"the maximum supported path length of %d characters.  Consider \" + \"configuring shorter directories in %s.\", sb.getWrapperScriptPath(), WIN_MAX_PATH, YarnConfiguration.NM_LOCAL_DIRS));\r\n    }\r\n    Path pidFile = getPidFilePath(containerId);\r\n    if (pidFile != null) {\r\n        sb.writeLocalWrapperScript(launchDst, pidFile);\r\n    } else {\r\n        LOG.info(\"Container {} pid file not set. Returning terminated error\", containerIdStr);\r\n        return ExitCode.TERMINATED.getExitCode();\r\n    }\r\n    Shell.CommandExecutor shExec = null;\r\n    try {\r\n        setScriptExecutable(launchDst, user);\r\n        setScriptExecutable(sb.getWrapperScriptPath(), user);\r\n        shExec = buildCommandExecutor(sb.getWrapperScriptPath().toString(), containerIdStr, user, pidFile, container.getResource(), new File(containerWorkDir.toUri().getPath()), container.getLaunchContext().getEnvironment());\r\n        if (isContainerActive(containerId)) {\r\n            shExec.execute();\r\n        } else {\r\n            LOG.info(\"Container {} was marked as inactive. \" + \"Returning terminated error\", containerIdStr);\r\n            return ExitCode.TERMINATED.getExitCode();\r\n        }\r\n    } catch (IOException e) {\r\n        if (null == shExec) {\r\n            return -1;\r\n        }\r\n        int exitCode = shExec.getExitCode();\r\n        LOG.warn(\"Exit code from container {} is : {}\", containerId, exitCode);\r\n        if (exitCode != ExitCode.FORCE_KILLED.getExitCode() && exitCode != ExitCode.TERMINATED.getExitCode()) {\r\n            LOG.warn(\"Exception from container-launch with container ID: {}\" + \" and exit code: {}\", containerId, exitCode, e);\r\n            StringBuilder builder = new StringBuilder();\r\n            builder.append(\"Exception from container-launch.\\n\").append(\"Container id: \").append(containerId).append(\"\\n\").append(\"Exit code: \").append(exitCode).append(\"\\n\");\r\n            if (!Optional.ofNullable(e.getMessage()).orElse(\"\").isEmpty()) {\r\n                builder.append(\"Exception message: \").append(e.getMessage()).append(\"\\n\");\r\n            }\r\n            if (!shExec.getOutput().isEmpty()) {\r\n                builder.append(\"Shell output: \").append(shExec.getOutput()).append(\"\\n\");\r\n            }\r\n            String diagnostics = builder.toString();\r\n            logOutput(diagnostics);\r\n            container.handle(new ContainerDiagnosticsUpdateEvent(containerId, diagnostics));\r\n        } else {\r\n            container.handle(new ContainerDiagnosticsUpdateEvent(containerId, \"Container killed on request. Exit code is \" + exitCode));\r\n        }\r\n        return exitCode;\r\n    } finally {\r\n        if (shExec != null)\r\n            shExec.close();\r\n    }\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "relaunchContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int relaunchContainer(ContainerStartContext ctx) throws IOException, ConfigurationException\n{\r\n    return launchContainer(ctx);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "buildCommandExecutor",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "CommandExecutor buildCommandExecutor(String wrapperScriptPath, String containerIdStr, String user, Path pidFile, Resource resource, File workDir, Map<String, String> environment)\n{\r\n    String[] command = getRunCommand(wrapperScriptPath, containerIdStr, user, pidFile, this.getConf(), resource);\r\n    LOG.info(\"launchContainer: {}\", Arrays.toString(command));\r\n    return new ShellCommandExecutor(command, workDir, environment, 0L, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getLocalWrapperScriptBuilder",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LocalWrapperScriptBuilder getLocalWrapperScriptBuilder(String containerIdStr, Path containerWorkDir)\n{\r\n    return Shell.WINDOWS ? new WindowsLocalWrapperScriptBuilder(containerIdStr, containerWorkDir) : new UnixLocalWrapperScriptBuilder(containerWorkDir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "signalContainer",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "boolean signalContainer(ContainerSignalContext ctx) throws IOException\n{\r\n    String user = ctx.getUser();\r\n    String pid = ctx.getPid();\r\n    Signal signal = ctx.getSignal();\r\n    LOG.debug(\"Sending signal {} to pid {} as user {}\", signal.getValue(), pid, user);\r\n    if (!containerIsAlive(pid)) {\r\n        return false;\r\n    }\r\n    try {\r\n        killContainer(pid, signal);\r\n    } catch (IOException e) {\r\n        if (!containerIsAlive(pid)) {\r\n            return false;\r\n        }\r\n        throw e;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "reapContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean reapContainer(ContainerReapContext ctx)\n{\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "isContainerAlive",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isContainerAlive(ContainerLivenessContext ctx) throws IOException\n{\r\n    String pid = ctx.getPid();\r\n    return containerIsAlive(pid);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "containerIsAlive",
  "errType" : [ "ExitCodeException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean containerIsAlive(String pid) throws IOException\n{\r\n    try {\r\n        new ShellCommandExecutor(Shell.getCheckProcessIsAliveCommand(pid)).execute();\r\n        return true;\r\n    } catch (ExitCodeException e) {\r\n        return false;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "killContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void killContainer(String pid, Signal signal) throws IOException\n{\r\n    new ShellCommandExecutor(Shell.getSignalKillCommand(signal.getValue(), pid)).execute();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "deleteAsUser",
  "errType" : [ "FileNotFoundException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void deleteAsUser(DeletionAsUserContext ctx) throws IOException, InterruptedException\n{\r\n    Path subDir = ctx.getSubDir();\r\n    List<Path> baseDirs = ctx.getBasedirs();\r\n    if (baseDirs == null || baseDirs.size() == 0) {\r\n        LOG.info(\"Deleting absolute path : {}\", subDir);\r\n        if (!lfs.delete(subDir, true)) {\r\n            LOG.warn(\"delete returned false for path: [{}]\", subDir);\r\n        }\r\n        return;\r\n    }\r\n    for (Path baseDir : baseDirs) {\r\n        Path del = subDir == null ? baseDir : new Path(baseDir, subDir);\r\n        LOG.info(\"Deleting path : {}\", del);\r\n        try {\r\n            if (!lfs.delete(del, true)) {\r\n                LOG.warn(\"delete returned false for path: [{}]\", del);\r\n            }\r\n        } catch (FileNotFoundException e) {\r\n            continue;\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "symLink",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void symLink(String target, String symlink) throws IOException\n{\r\n    FileUtil.symLink(target, symlink);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getDiskFreeSpace",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getDiskFreeSpace(Path base) throws IOException\n{\r\n    return lfs.getFsStatus(base).getRemaining();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getApplicationDir",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getApplicationDir(Path base, String user, String appId)\n{\r\n    return new Path(getAppcacheDir(base, user), appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getUserCacheDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Path getUserCacheDir(Path base, String user)\n{\r\n    return new Path(new Path(base, ContainerLocalizer.USERCACHE), user);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getAppcacheDir",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getAppcacheDir(Path base, String user)\n{\r\n    return new Path(getUserCacheDir(base, user), ContainerLocalizer.APPCACHE);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getFileCacheDir",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getFileCacheDir(Path base, String user)\n{\r\n    return new Path(getUserCacheDir(base, user), ContainerLocalizer.FILECACHE);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getWorkingDir",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "Path getWorkingDir(List<String> localDirs, String user, String appId) throws IOException\n{\r\n    long totalAvailable = 0L;\r\n    long[] availableOnDisk = new long[localDirs.size()];\r\n    int i = 0;\r\n    for (String localDir : localDirs) {\r\n        Path curBase = getApplicationDir(new Path(localDir), user, appId);\r\n        long space = 0L;\r\n        try {\r\n            space = getDiskFreeSpace(curBase);\r\n        } catch (IOException e) {\r\n            LOG.warn(\"Unable to get Free Space for {}\", curBase, e);\r\n        }\r\n        availableOnDisk[i++] = space;\r\n        totalAvailable += space;\r\n    }\r\n    if (totalAvailable <= 0L) {\r\n        throw new IOException(\"Not able to find a working directory for \" + user);\r\n    }\r\n    long randomPosition = RandomUtils.nextLong() % totalAvailable;\r\n    int dir = pickDirectory(randomPosition, availableOnDisk);\r\n    return getApplicationDir(new Path(localDirs.get(dir)), user, appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "pickDirectory",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int pickDirectory(long randomPosition, final long[] availableOnDisk)\n{\r\n    int dir = 0;\r\n    while (availableOnDisk[dir] == 0L) {\r\n        dir++;\r\n    }\r\n    while (randomPosition >= availableOnDisk[dir]) {\r\n        randomPosition -= availableOnDisk[dir++];\r\n    }\r\n    return dir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createDir",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void createDir(Path dirPath, FsPermission perms, boolean createParent, String user) throws IOException\n{\r\n    lfs.mkdir(dirPath, perms, createParent);\r\n    if (!perms.equals(perms.applyUMask(lfs.getUMask()))) {\r\n        lfs.setPermission(dirPath, perms);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createUserLocalDirs",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void createUserLocalDirs(List<String> localDirs, String user) throws IOException\n{\r\n    boolean userDirStatus = false;\r\n    FsPermission userperms = new FsPermission(USER_PERM);\r\n    for (String localDir : localDirs) {\r\n        try {\r\n            createDir(getUserCacheDir(new Path(localDir), user), userperms, true, user);\r\n        } catch (IOException e) {\r\n            LOG.warn(\"Unable to create the user directory : {}\", localDir, e);\r\n            continue;\r\n        }\r\n        userDirStatus = true;\r\n    }\r\n    if (!userDirStatus) {\r\n        throw new IOException(\"Not able to initialize user directories \" + \"in any of the configured local directories for user \" + user);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createUserCacheDirs",
  "errType" : [ "IOException", "IOException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void createUserCacheDirs(List<String> localDirs, String user) throws IOException\n{\r\n    LOG.info(\"Initializing user {}\", user);\r\n    boolean appcacheDirStatus = false;\r\n    boolean distributedCacheDirStatus = false;\r\n    FsPermission appCachePerms = new FsPermission(APPCACHE_PERM);\r\n    FsPermission fileperms = new FsPermission(FILECACHE_PERM);\r\n    for (String localDir : localDirs) {\r\n        Path localDirPath = new Path(localDir);\r\n        final Path appDir = getAppcacheDir(localDirPath, user);\r\n        try {\r\n            createDir(appDir, appCachePerms, true, user);\r\n            appcacheDirStatus = true;\r\n        } catch (IOException e) {\r\n            LOG.warn(\"Unable to create app cache directory : {}\", appDir, e);\r\n        }\r\n        final Path distDir = getFileCacheDir(localDirPath, user);\r\n        try {\r\n            createDir(distDir, fileperms, true, user);\r\n            distributedCacheDirStatus = true;\r\n        } catch (IOException e) {\r\n            LOG.warn(\"Unable to create file cache directory : {}\", distDir, e);\r\n        }\r\n    }\r\n    if (!appcacheDirStatus) {\r\n        throw new IOException(\"Not able to initialize app-cache directories \" + \"in any of the configured local directories for user \" + user);\r\n    }\r\n    if (!distributedCacheDirStatus) {\r\n        throw new IOException(\"Not able to initialize distributed-cache directories \" + \"in any of the configured local directories for user \" + user);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createAppDirs",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void createAppDirs(List<String> localDirs, String user, String appId) throws IOException\n{\r\n    boolean initAppDirStatus = false;\r\n    FsPermission appperms = new FsPermission(APPDIR_PERM);\r\n    for (String localDir : localDirs) {\r\n        Path fullAppDir = getApplicationDir(new Path(localDir), user, appId);\r\n        try {\r\n            createDir(fullAppDir, appperms, true, user);\r\n            initAppDirStatus = true;\r\n        } catch (IOException e) {\r\n            LOG.warn(\"Unable to create app directory {}\", fullAppDir, e);\r\n        }\r\n    }\r\n    if (!initAppDirStatus) {\r\n        throw new IOException(\"Not able to initialize app directories \" + \"in any of the configured local directories for app \" + appId.toString());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createAppLogDirs",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void createAppLogDirs(String appId, List<String> logDirs, String user) throws IOException\n{\r\n    boolean appLogDirStatus = false;\r\n    FsPermission appLogDirPerms = new FsPermission(getLogDirPermissions());\r\n    for (String rootLogDir : logDirs) {\r\n        Path appLogDir = new Path(rootLogDir, appId);\r\n        try {\r\n            createDir(appLogDir, appLogDirPerms, true, user);\r\n        } catch (IOException e) {\r\n            LOG.warn(\"Unable to create the app-log directory : {}\", appLogDir, e);\r\n            continue;\r\n        }\r\n        appLogDirStatus = true;\r\n    }\r\n    if (!appLogDirStatus) {\r\n        throw new IOException(\"Not able to initialize app-log directories \" + \"in any of the configured local directories for app \" + appId);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createContainerLogDirs",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void createContainerLogDirs(String appId, String containerId, List<String> logDirs, String user) throws IOException\n{\r\n    boolean containerLogDirStatus = false;\r\n    FsPermission containerLogDirPerms = new FsPermission(getLogDirPermissions());\r\n    for (String rootLogDir : logDirs) {\r\n        Path appLogDir = new Path(rootLogDir, appId);\r\n        Path containerLogDir = new Path(appLogDir, containerId);\r\n        try {\r\n            createDir(containerLogDir, containerLogDirPerms, true, user);\r\n        } catch (IOException e) {\r\n            LOG.warn(\"Unable to create the container-log directory : {}\", appLogDir, e);\r\n            continue;\r\n        }\r\n        containerLogDirStatus = true;\r\n    }\r\n    if (!containerLogDirStatus) {\r\n        throw new IOException(\"Not able to initialize container-log directories \" + \"in any of the configured local directories for container \" + containerId);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getLogDirPermissions",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getLogDirPermissions()\n{\r\n    if (this.logDirPermissions == null) {\r\n        this.logDirPermissions = getConf().get(YarnConfiguration.NM_DEFAULT_CONTAINER_EXECUTOR_LOG_DIRS_PERMISSIONS, YarnConfiguration.NM_DEFAULT_CONTAINER_EXECUTOR_LOG_DIRS_PERMISSIONS_DEFAULT);\r\n    }\r\n    return this.logDirPermissions;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "clearLogDirPermissions",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void clearLogDirPermissions()\n{\r\n    this.logDirPermissions = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "execContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "IOStreamPair execContainer(ContainerExecContext ctx) throws ContainerExecutionException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getPaths",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "List<Path> getPaths(List<String> dirs)\n{\r\n    List<Path> paths = new ArrayList<>(dirs.size());\r\n    for (int i = 0; i < dirs.size(); i++) {\r\n        paths.add(new Path(dirs.get(i)));\r\n    }\r\n    return paths;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "updateYarnSysFS",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void updateYarnSysFS(Context ctx, String user, String appId, String spec) throws IOException\n{\r\n    throw new ServiceStateException(\"Implementation unavailable\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "bootstrap",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "List<PrivilegedOperation> bootstrap(Configuration conf) throws ResourceHandlerException\n{\r\n    this.cGroupsHandler.initializeCGroupController(MEMORY);\r\n    enforce = conf.getBoolean(YarnConfiguration.NM_MEMORY_RESOURCE_ENFORCED, YarnConfiguration.DEFAULT_NM_MEMORY_RESOURCE_ENFORCED);\r\n    swappiness = conf.getInt(YarnConfiguration.NM_MEMORY_RESOURCE_CGROUPS_SWAPPINESS, YarnConfiguration.DEFAULT_NM_MEMORY_RESOURCE_CGROUPS_SWAPPINESS);\r\n    if (swappiness < 0 || swappiness > 100) {\r\n        throw new ResourceHandlerException(\"Illegal value '\" + swappiness + \"' for \" + YarnConfiguration.NM_MEMORY_RESOURCE_CGROUPS_SWAPPINESS + \". Value must be between 0 and 100.\");\r\n    }\r\n    float softLimitPerc = conf.getFloat(YarnConfiguration.NM_MEMORY_RESOURCE_CGROUPS_SOFT_LIMIT_PERCENTAGE, YarnConfiguration.DEFAULT_NM_MEMORY_RESOURCE_CGROUPS_SOFT_LIMIT_PERCENTAGE);\r\n    softLimit = softLimitPerc / 100.0f;\r\n    if (softLimitPerc < 0.0f || softLimitPerc > 100.0f) {\r\n        throw new ResourceHandlerException(\"Illegal value '\" + softLimitPerc + \"' \" + YarnConfiguration.NM_MEMORY_RESOURCE_CGROUPS_SOFT_LIMIT_PERCENTAGE + \". Value must be between 0 and 100.\");\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getSwappiness",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getSwappiness()\n{\r\n    return swappiness;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "reacquireContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<PrivilegedOperation> reacquireContainer(ContainerId containerId) throws ResourceHandlerException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "updateContainer",
  "errType" : [ "ResourceHandlerException" ],
  "containingMethodsNum" : 14,
  "sourceCodeText" : "List<PrivilegedOperation> updateContainer(Container container) throws ResourceHandlerException\n{\r\n    String cgroupId = container.getContainerId().toString();\r\n    File cgroup = new File(cGroupsHandler.getPathForCGroup(MEMORY, cgroupId));\r\n    if (cgroup.exists()) {\r\n        long containerSoftLimit = (long) (container.getResource().getMemorySize() * this.softLimit);\r\n        long containerHardLimit = container.getResource().getMemorySize();\r\n        if (enforce) {\r\n            try {\r\n                cGroupsHandler.updateCGroupParam(MEMORY, cgroupId, CGroupsHandler.CGROUP_PARAM_MEMORY_HARD_LIMIT_BYTES, String.valueOf(containerHardLimit) + \"M\");\r\n                ContainerTokenIdentifier id = container.getContainerTokenIdentifier();\r\n                if (id != null && id.getExecutionType() == ExecutionType.OPPORTUNISTIC) {\r\n                    cGroupsHandler.updateCGroupParam(MEMORY, cgroupId, CGroupsHandler.CGROUP_PARAM_MEMORY_SOFT_LIMIT_BYTES, String.valueOf(OPPORTUNISTIC_SOFT_LIMIT) + \"M\");\r\n                    cGroupsHandler.updateCGroupParam(MEMORY, cgroupId, CGroupsHandler.CGROUP_PARAM_MEMORY_SWAPPINESS, String.valueOf(OPPORTUNISTIC_SWAPPINESS));\r\n                } else {\r\n                    cGroupsHandler.updateCGroupParam(MEMORY, cgroupId, CGroupsHandler.CGROUP_PARAM_MEMORY_SOFT_LIMIT_BYTES, String.valueOf(containerSoftLimit) + \"M\");\r\n                    cGroupsHandler.updateCGroupParam(MEMORY, cgroupId, CGroupsHandler.CGROUP_PARAM_MEMORY_SWAPPINESS, String.valueOf(swappiness));\r\n                }\r\n            } catch (ResourceHandlerException re) {\r\n                cGroupsHandler.deleteCGroup(MEMORY, cgroupId);\r\n                LOG.warn(\"Could not update cgroup for container\", re);\r\n                throw re;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "preStart",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "List<PrivilegedOperation> preStart(Container container) throws ResourceHandlerException\n{\r\n    String cgroupId = container.getContainerId().toString();\r\n    cGroupsHandler.createCGroup(MEMORY, cgroupId);\r\n    updateContainer(container);\r\n    List<PrivilegedOperation> ret = new ArrayList<>();\r\n    ret.add(new PrivilegedOperation(PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP, PrivilegedOperation.CGROUP_ARG_PREFIX + cGroupsHandler.getPathForCGroupTasks(MEMORY, cgroupId)));\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "postComplete",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<PrivilegedOperation> postComplete(ContainerId containerId) throws ResourceHandlerException\n{\r\n    cGroupsHandler.deleteCGroup(MEMORY, containerId.toString());\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "teardown",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<PrivilegedOperation> teardown() throws ResourceHandlerException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return CGroupsMemoryResourceHandlerImpl.class.getName();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "getSingleImageStatus",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "DockerImagesCommand getSingleImageStatus(String imageName)\n{\r\n    Preconditions.checkNotNull(imageName, \"imageName\");\r\n    super.addCommandArguments(\"image\", imageName);\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "bootstrap",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<PrivilegedOperation> bootstrap(Configuration conf) throws ResourceHandlerException\n{\r\n    return bootstrap(ResourceCalculatorPlugin.getResourceCalculatorPlugin(null, conf), conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "bootstrap",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "List<PrivilegedOperation> bootstrap(ResourceCalculatorPlugin plugin, Configuration conf) throws ResourceHandlerException\n{\r\n    this.strictResourceUsageMode = conf.getBoolean(YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE, YarnConfiguration.DEFAULT_NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE);\r\n    this.cGroupsHandler.initializeCGroupController(CPU);\r\n    nodeVCores = NodeManagerHardwareUtils.getVCores(plugin, conf);\r\n    yarnProcessors = NodeManagerHardwareUtils.getContainersCPUs(plugin, conf);\r\n    int systemProcessors = NodeManagerHardwareUtils.getNodeCPUs(plugin, conf);\r\n    boolean existingCpuLimits;\r\n    try {\r\n        existingCpuLimits = cpuLimitsExist(cGroupsHandler.getPathForCGroup(CPU, \"\"));\r\n    } catch (IOException ie) {\r\n        throw new ResourceHandlerException(ie);\r\n    }\r\n    if (systemProcessors != (int) yarnProcessors) {\r\n        LOG.info(\"YARN containers restricted to \" + yarnProcessors + \" cores\");\r\n        int[] limits = getOverallLimits(yarnProcessors);\r\n        cGroupsHandler.updateCGroupParam(CPU, \"\", CGroupsHandler.CGROUP_CPU_PERIOD_US, String.valueOf(limits[0]));\r\n        cGroupsHandler.updateCGroupParam(CPU, \"\", CGroupsHandler.CGROUP_CPU_QUOTA_US, String.valueOf(limits[1]));\r\n    } else if (existingCpuLimits) {\r\n        LOG.info(\"Removing CPU constraints for YARN containers.\");\r\n        cGroupsHandler.updateCGroupParam(CPU, \"\", CGroupsHandler.CGROUP_CPU_QUOTA_US, String.valueOf(-1));\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "cpuLimitsExist",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean cpuLimitsExist(String path) throws IOException\n{\r\n    File quotaFile = new File(path, CPU.getName() + \".\" + CGroupsHandler.CGROUP_CPU_QUOTA_US);\r\n    if (quotaFile.exists()) {\r\n        String contents = FileUtils.readFileToString(quotaFile, \"UTF-8\");\r\n        int quotaUS = Integer.parseInt(contents.trim());\r\n        if (quotaUS != -1) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getOverallLimits",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int[] getOverallLimits(float yarnProcessors)\n{\r\n    int[] ret = new int[2];\r\n    if (yarnProcessors < 0.01f) {\r\n        throw new IllegalArgumentException(\"Number of processors can't be <= 0.\");\r\n    }\r\n    int quotaUS = MAX_QUOTA_US;\r\n    int periodUS = (int) (MAX_QUOTA_US / yarnProcessors);\r\n    if (yarnProcessors < 1.0f) {\r\n        periodUS = MAX_QUOTA_US;\r\n        quotaUS = (int) (periodUS * yarnProcessors);\r\n        if (quotaUS < MIN_PERIOD_US) {\r\n            LOG.warn(\"The quota calculated for the cgroup was too low.\" + \" The minimum value is \" + MIN_PERIOD_US + \", calculated value is \" + quotaUS + \". Setting quota to minimum value.\");\r\n            quotaUS = MIN_PERIOD_US;\r\n        }\r\n    }\r\n    if (periodUS < MIN_PERIOD_US) {\r\n        LOG.warn(\"The period calculated for the cgroup was too low.\" + \" The minimum value is \" + MIN_PERIOD_US + \", calculated value is \" + periodUS + \". Using all available CPU.\");\r\n        periodUS = MAX_QUOTA_US;\r\n        quotaUS = -1;\r\n    }\r\n    ret[0] = periodUS;\r\n    ret[1] = quotaUS;\r\n    return ret;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "preStart",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "List<PrivilegedOperation> preStart(Container container) throws ResourceHandlerException\n{\r\n    String cgroupId = container.getContainerId().toString();\r\n    cGroupsHandler.createCGroup(CPU, cgroupId);\r\n    updateContainer(container);\r\n    List<PrivilegedOperation> ret = new ArrayList<>();\r\n    ret.add(new PrivilegedOperation(PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP, PrivilegedOperation.CGROUP_ARG_PREFIX + cGroupsHandler.getPathForCGroupTasks(CPU, cgroupId)));\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "reacquireContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<PrivilegedOperation> reacquireContainer(ContainerId containerId) throws ResourceHandlerException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "updateContainer",
  "errType" : [ "ResourceHandlerException" ],
  "containingMethodsNum" : 14,
  "sourceCodeText" : "List<PrivilegedOperation> updateContainer(Container container) throws ResourceHandlerException\n{\r\n    Resource containerResource = container.getResource();\r\n    String cgroupId = container.getContainerId().toString();\r\n    File cgroup = new File(cGroupsHandler.getPathForCGroup(CPU, cgroupId));\r\n    if (cgroup.exists()) {\r\n        try {\r\n            int containerVCores = containerResource.getVirtualCores();\r\n            ContainerTokenIdentifier id = container.getContainerTokenIdentifier();\r\n            if (id != null && id.getExecutionType() == ExecutionType.OPPORTUNISTIC) {\r\n                cGroupsHandler.updateCGroupParam(CPU, cgroupId, CGroupsHandler.CGROUP_CPU_SHARES, String.valueOf(CPU_DEFAULT_WEIGHT_OPPORTUNISTIC));\r\n            } else {\r\n                int cpuShares = CPU_DEFAULT_WEIGHT * containerVCores;\r\n                cGroupsHandler.updateCGroupParam(CPU, cgroupId, CGroupsHandler.CGROUP_CPU_SHARES, String.valueOf(cpuShares));\r\n            }\r\n            if (strictResourceUsageMode) {\r\n                if (nodeVCores != containerVCores) {\r\n                    float containerCPU = (containerVCores * yarnProcessors) / (float) nodeVCores;\r\n                    int[] limits = getOverallLimits(containerCPU);\r\n                    cGroupsHandler.updateCGroupParam(CPU, cgroupId, CGroupsHandler.CGROUP_CPU_PERIOD_US, String.valueOf(limits[0]));\r\n                    cGroupsHandler.updateCGroupParam(CPU, cgroupId, CGroupsHandler.CGROUP_CPU_QUOTA_US, String.valueOf(limits[1]));\r\n                }\r\n            }\r\n        } catch (ResourceHandlerException re) {\r\n            cGroupsHandler.deleteCGroup(CPU, cgroupId);\r\n            LOG.warn(\"Could not update cgroup for container\", re);\r\n            throw re;\r\n        }\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "postComplete",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<PrivilegedOperation> postComplete(ContainerId containerId) throws ResourceHandlerException\n{\r\n    cGroupsHandler.deleteCGroup(CPU, containerId.toString());\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "teardown",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<PrivilegedOperation> teardown() throws ResourceHandlerException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return CGroupsCpuResourceHandlerImpl.class.getName();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
} ]