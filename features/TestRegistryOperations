[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\operations",
  "methodName" : "testPutGetServiceEntry",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testPutGetServiceEntry() throws Throwable\n{\r\n    ServiceRecord written = putExampleServiceEntry(ENTRY_PATH, 0, PersistencePolicies.APPLICATION);\r\n    ServiceRecord resolved = operations.resolve(ENTRY_PATH);\r\n    validateEntry(resolved);\r\n    assertMatches(written, resolved);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\operations",
  "methodName" : "testDeleteServiceEntry",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testDeleteServiceEntry() throws Throwable\n{\r\n    putExampleServiceEntry(ENTRY_PATH, 0);\r\n    operations.delete(ENTRY_PATH, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\operations",
  "methodName" : "testDeleteNonexistentEntry",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testDeleteNonexistentEntry() throws Throwable\n{\r\n    operations.delete(ENTRY_PATH, false);\r\n    operations.delete(ENTRY_PATH, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\operations",
  "methodName" : "testStat",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testStat() throws Throwable\n{\r\n    putExampleServiceEntry(ENTRY_PATH, 0);\r\n    RegistryPathStatus stat = operations.stat(ENTRY_PATH);\r\n    assertTrue(stat.size > 0);\r\n    assertTrue(stat.time > 0);\r\n    assertEquals(NAME, stat.path);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\operations",
  "methodName" : "testLsParent",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testLsParent() throws Throwable\n{\r\n    ServiceRecord written = putExampleServiceEntry(ENTRY_PATH, 0);\r\n    RegistryPathStatus stat = operations.stat(ENTRY_PATH);\r\n    List<String> children = operations.list(PARENT_PATH);\r\n    assertEquals(1, children.size());\r\n    assertEquals(NAME, children.get(0));\r\n    Map<String, RegistryPathStatus> childStats = RegistryUtils.statChildren(operations, PARENT_PATH);\r\n    assertEquals(1, childStats.size());\r\n    assertEquals(stat, childStats.get(NAME));\r\n    Map<String, ServiceRecord> records = RegistryUtils.extractServiceRecords(operations, PARENT_PATH, childStats.values());\r\n    assertEquals(1, records.size());\r\n    ServiceRecord record = records.get(ENTRY_PATH);\r\n    RegistryTypeUtils.validateServiceRecord(ENTRY_PATH, record);\r\n    assertMatches(written, record);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\operations",
  "methodName" : "testDeleteNonEmpty",
  "errType" : [ "PathIsNotEmptyDirectoryException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testDeleteNonEmpty() throws Throwable\n{\r\n    putExampleServiceEntry(ENTRY_PATH, 0);\r\n    try {\r\n        operations.delete(PARENT_PATH, false);\r\n        fail(\"Expected a failure\");\r\n    } catch (PathIsNotEmptyDirectoryException expected) {\r\n    }\r\n    operations.delete(PARENT_PATH, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\operations",
  "methodName" : "testStatEmptyPath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testStatEmptyPath() throws Throwable\n{\r\n    operations.stat(ENTRY_PATH);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\operations",
  "methodName" : "testLsEmptyPath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testLsEmptyPath() throws Throwable\n{\r\n    operations.list(PARENT_PATH);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\operations",
  "methodName" : "testResolveEmptyPath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testResolveEmptyPath() throws Throwable\n{\r\n    operations.resolve(ENTRY_PATH);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\operations",
  "methodName" : "testMkdirNoParent",
  "errType" : [ "PathNotFoundException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testMkdirNoParent() throws Throwable\n{\r\n    String path = ENTRY_PATH + \"/missing\";\r\n    try {\r\n        operations.mknode(path, false);\r\n        RegistryPathStatus stat = operations.stat(path);\r\n        fail(\"Got a status \" + stat);\r\n    } catch (PathNotFoundException expected) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\operations",
  "methodName" : "testDoubleMkdir",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testDoubleMkdir() throws Throwable\n{\r\n    operations.mknode(USERPATH, false);\r\n    String path = USERPATH + \"newentry\";\r\n    assertTrue(operations.mknode(path, false));\r\n    operations.stat(path);\r\n    assertFalse(operations.mknode(path, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\operations",
  "methodName" : "testPutNoParent",
  "errType" : [ "PathNotFoundException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testPutNoParent() throws Throwable\n{\r\n    ServiceRecord record = new ServiceRecord();\r\n    record.set(YarnRegistryAttributes.YARN_ID, \"testPutNoParent\");\r\n    String path = \"/path/without/parent\";\r\n    try {\r\n        operations.bind(path, record, 0);\r\n        RegistryPathStatus stat = operations.stat(path);\r\n        fail(\"Got a status \" + stat);\r\n    } catch (PathNotFoundException expected) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\operations",
  "methodName" : "testPutMinimalRecord",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testPutMinimalRecord() throws Throwable\n{\r\n    String path = \"/path/with/minimal\";\r\n    operations.mknode(path, true);\r\n    ServiceRecord record = new ServiceRecord();\r\n    operations.bind(path, record, BindFlags.OVERWRITE);\r\n    ServiceRecord resolve = operations.resolve(path);\r\n    assertMatches(record, resolve);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\operations",
  "methodName" : "testPutNoParent2",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testPutNoParent2() throws Throwable\n{\r\n    ServiceRecord record = new ServiceRecord();\r\n    record.set(YarnRegistryAttributes.YARN_ID, \"testPutNoParent\");\r\n    String path = \"/path/without/parent\";\r\n    operations.bind(path, record, 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\operations",
  "methodName" : "testStatDirectory",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testStatDirectory() throws Throwable\n{\r\n    String empty = \"/empty\";\r\n    operations.mknode(empty, false);\r\n    operations.stat(empty);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\operations",
  "methodName" : "testStatRootPath",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testStatRootPath() throws Throwable\n{\r\n    operations.mknode(\"/\", false);\r\n    operations.stat(\"/\");\r\n    operations.list(\"/\");\r\n    operations.list(\"/\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\operations",
  "methodName" : "testStatOneLevelDown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testStatOneLevelDown() throws Throwable\n{\r\n    operations.mknode(\"/subdir\", true);\r\n    operations.stat(\"/subdir\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\operations",
  "methodName" : "testLsRootPath",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testLsRootPath() throws Throwable\n{\r\n    String empty = \"/\";\r\n    operations.mknode(empty, false);\r\n    operations.stat(empty);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\operations",
  "methodName" : "testResolvePathThatHasNoEntry",
  "errType" : [ "NoRecordException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testResolvePathThatHasNoEntry() throws Throwable\n{\r\n    String empty = \"/empty2\";\r\n    operations.mknode(empty, false);\r\n    try {\r\n        ServiceRecord record = operations.resolve(empty);\r\n        fail(\"expected an exception, got \" + record);\r\n    } catch (NoRecordException expected) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\operations",
  "methodName" : "testOverwrite",
  "errType" : [ "FileAlreadyExistsException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testOverwrite() throws Throwable\n{\r\n    ServiceRecord written = putExampleServiceEntry(ENTRY_PATH, 0);\r\n    ServiceRecord resolved1 = operations.resolve(ENTRY_PATH);\r\n    resolved1.description = \"resolved1\";\r\n    try {\r\n        operations.bind(ENTRY_PATH, resolved1, 0);\r\n        fail(\"overwrite succeeded when it should have failed\");\r\n    } catch (FileAlreadyExistsException expected) {\r\n    }\r\n    ServiceRecord resolved2 = operations.resolve(ENTRY_PATH);\r\n    assertMatches(written, resolved2);\r\n    operations.bind(ENTRY_PATH, resolved1, BindFlags.OVERWRITE);\r\n    ServiceRecord resolved3 = operations.resolve(ENTRY_PATH);\r\n    assertMatches(resolved1, resolved3);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\operations",
  "methodName" : "testPutGetContainerPersistenceServiceEntry",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testPutGetContainerPersistenceServiceEntry() throws Throwable\n{\r\n    String path = ENTRY_PATH;\r\n    ServiceRecord written = buildExampleServiceEntry(PersistencePolicies.CONTAINER);\r\n    operations.mknode(RegistryPathUtils.parentOf(path), true);\r\n    operations.bind(path, written, BindFlags.CREATE);\r\n    ServiceRecord resolved = operations.resolve(path);\r\n    validateEntry(resolved);\r\n    assertMatches(written, resolved);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\operations",
  "methodName" : "testAddingWriteAccessIsNoOpEntry",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testAddingWriteAccessIsNoOpEntry() throws Throwable\n{\r\n    assertFalse(operations.addWriteAccessor(\"id\", \"pass\"));\r\n    operations.clearWriteAccessors();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\operations",
  "methodName" : "testListListFully",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testListListFully() throws Throwable\n{\r\n    ServiceRecord r1 = new ServiceRecord();\r\n    ServiceRecord r2 = createRecord(\"i\", PersistencePolicies.PERMANENT, \"r2\");\r\n    String path = USERPATH + SC_HADOOP + \"/listing\";\r\n    operations.mknode(path, true);\r\n    String r1path = path + \"/r1\";\r\n    operations.bind(r1path, r1, 0);\r\n    String r2path = path + \"/r2\";\r\n    operations.bind(r2path, r2, 0);\r\n    RegistryPathStatus r1stat = operations.stat(r1path);\r\n    assertEquals(\"r1\", r1stat.path);\r\n    RegistryPathStatus r2stat = operations.stat(r2path);\r\n    assertEquals(\"r2\", r2stat.path);\r\n    assertNotEquals(r1stat, r2stat);\r\n    List<String> list = operations.list(path);\r\n    assertEquals(\"Wrong no. of children\", 2, list.size());\r\n    Map<String, String> names = new HashMap<String, String>();\r\n    String entries = \"\";\r\n    for (String child : list) {\r\n        names.put(child, child);\r\n        entries += child + \" \";\r\n    }\r\n    assertTrue(\"No 'r1' in \" + entries, names.containsKey(\"r1\"));\r\n    assertTrue(\"No 'r2' in \" + entries, names.containsKey(\"r2\"));\r\n    Map<String, RegistryPathStatus> stats = RegistryUtils.statChildren(operations, path);\r\n    assertEquals(\"Wrong no. of children\", 2, stats.size());\r\n    assertEquals(r1stat, stats.get(\"r1\"));\r\n    assertEquals(r2stat, stats.get(\"r2\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\operations",
  "methodName" : "testComplexUsernames",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testComplexUsernames() throws Throwable\n{\r\n    operations.mknode(\"/users/user with spaces\", true);\r\n    operations.mknode(\"/users/user-with_underscores\", true);\r\n    operations.mknode(\"/users/000000\", true);\r\n    operations.mknode(\"/users/-storm\", true);\r\n    operations.mknode(\"/users/windows\\\\ user\", true);\r\n    String home = RegistryUtils.homePathForUser(\"\\u0413PA\\u0414_3\");\r\n    operations.mknode(home, true);\r\n    operations.mknode(RegistryUtils.servicePath(home, \"service.class\", \"service 4_5\"), true);\r\n    operations.mknode(RegistryUtils.homePathForUser(\"hbase@HADOOP.APACHE.ORG\"), true);\r\n    operations.mknode(RegistryUtils.homePathForUser(\"hbase/localhost@HADOOP.APACHE.ORG\"), true);\r\n    home = RegistryUtils.homePathForUser(\"ADMINISTRATOR/127.0.0.1\");\r\n    assertTrue(\"No 'administrator' in \" + home, home.contains(\"administrator\"));\r\n    operations.mknode(home, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "createClientConfig",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "javax.security.auth.login.Configuration createClientConfig(String principal, File keytab)\n{\r\n    return new KerberosConfiguration(principal, keytab, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "createServerConfig",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "javax.security.auth.login.Configuration createServerConfig(String principal, File keytab)\n{\r\n    return new KerberosConfiguration(principal, keytab, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "getAppConfigurationEntry",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "AppConfigurationEntry[] getAppConfigurationEntry(String name)\n{\r\n    Map<String, String> options = new HashMap<String, String>();\r\n    if (IBM_JAVA) {\r\n        options.put(\"useKeytab\", keytab.startsWith(\"file://\") ? keytab : \"file://\" + keytab);\r\n        options.put(\"principal\", principal);\r\n        options.put(\"refreshKrb5Config\", \"true\");\r\n        options.put(\"credsType\", \"both\");\r\n    } else {\r\n        options.put(\"keyTab\", keytab);\r\n        options.put(\"principal\", principal);\r\n        options.put(\"useKeyTab\", \"true\");\r\n        options.put(\"storeKey\", \"true\");\r\n        options.put(\"doNotPrompt\", \"true\");\r\n        options.put(\"useTicketCache\", \"true\");\r\n        options.put(\"renewTGT\", \"true\");\r\n        options.put(\"refreshKrb5Config\", \"true\");\r\n        options.put(\"isInitiator\", Boolean.toString(isInitiator));\r\n    }\r\n    String ticketCache = System.getenv(\"KRB5CCNAME\");\r\n    if (ticketCache != null) {\r\n        if (IBM_JAVA) {\r\n            System.setProperty(\"KRB5CCNAME\", ticketCache);\r\n            options.put(\"useDefaultCcache\", \"true\");\r\n            options.put(\"renewTGT\", \"true\");\r\n        } else {\r\n            options.put(\"ticketCache\", ticketCache);\r\n        }\r\n    }\r\n    options.put(\"debug\", \"true\");\r\n    return new AppConfigurationEntry[] { new AppConfigurationEntry(KerberosUtil.getKrb5LoginModuleName(), AppConfigurationEntry.LoginModuleControlFlag.REQUIRED, options) };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String toString()\n{\r\n    return \"KerberosConfiguration with principal \" + principal;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "testHasRealm",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testHasRealm() throws Throwable\n{\r\n    assertNotNull(getRealm());\r\n    LOG.info(\"ZK principal = {}\", getPrincipalAndRealm(ZOOKEEPER_LOCALHOST));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "testJaasFileSetup",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testJaasFileSetup() throws Throwable\n{\r\n    assertNotNull(\"jaasFile\", jaasFile);\r\n    String confFilename = System.getProperty(Environment.JAAS_CONF_KEY);\r\n    assertEquals(jaasFile.getAbsolutePath(), confFilename);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "testJaasFileBinding",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testJaasFileBinding() throws Throwable\n{\r\n    assertNotNull(\"jaasFile\", jaasFile);\r\n    RegistrySecurity.bindJVMtoJAASFile(jaasFile);\r\n    String confFilename = System.getProperty(Environment.JAAS_CONF_KEY);\r\n    assertEquals(jaasFile.getAbsolutePath(), confFilename);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "testClientLogin",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testClientLogin() throws Throwable\n{\r\n    LoginContext client = login(ALICE_LOCALHOST, ALICE_CLIENT_CONTEXT, keytab_alice);\r\n    try {\r\n        logLoginDetails(ALICE_LOCALHOST, client);\r\n        String confFilename = System.getProperty(Environment.JAAS_CONF_KEY);\r\n        assertNotNull(\"Unset: \" + Environment.JAAS_CONF_KEY, confFilename);\r\n        String config = FileUtils.readFileToString(new File(confFilename), StandardCharsets.UTF_8);\r\n        LOG.info(\"{}=\\n{}\", confFilename, config);\r\n        RegistrySecurity.setZKSaslClientProperties(ALICE, ALICE_CLIENT_CONTEXT);\r\n    } finally {\r\n        client.logout();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "testZKServerContextLogin",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testZKServerContextLogin() throws Throwable\n{\r\n    LoginContext client = login(ZOOKEEPER_LOCALHOST, ZOOKEEPER_SERVER_CONTEXT, keytab_zk);\r\n    logLoginDetails(ZOOKEEPER_LOCALHOST, client);\r\n    client.logout();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "testServerLogin",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testServerLogin() throws Throwable\n{\r\n    LoginContext loginContext = createLoginContextZookeeperLocalhost();\r\n    loginContext.login();\r\n    loginContext.logout();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "createLoginContextZookeeperLocalhost",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "LoginContext createLoginContextZookeeperLocalhost() throws LoginException\n{\r\n    String principalAndRealm = getPrincipalAndRealm(ZOOKEEPER_LOCALHOST);\r\n    Set<Principal> principals = new HashSet<Principal>();\r\n    principals.add(new KerberosPrincipal(ZOOKEEPER_LOCALHOST));\r\n    Subject subject = new Subject(false, principals, new HashSet<Object>(), new HashSet<Object>());\r\n    return new LoginContext(\"\", subject, null, KerberosConfiguration.createServerConfig(ZOOKEEPER_LOCALHOST, keytab_zk));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "testKerberosAuth",
  "errType" : null,
  "containingMethodsNum" : 32,
  "sourceCodeText" : "void testKerberosAuth() throws Throwable\n{\r\n    File krb5conf = getKdc().getKrb5conf();\r\n    String krbConfig = FileUtils.readFileToString(krb5conf, StandardCharsets.UTF_8);\r\n    LOG.info(\"krb5.conf at {}:\\n{}\", krb5conf, krbConfig);\r\n    Subject subject = new Subject();\r\n    Class<?> kerb5LoginClass = Class.forName(KerberosUtil.getKrb5LoginModuleName());\r\n    Constructor<?> kerb5LoginConstr = kerb5LoginClass.getConstructor();\r\n    Object kerb5LoginObject = kerb5LoginConstr.newInstance();\r\n    final Map<String, String> options = new HashMap<String, String>();\r\n    options.put(\"debug\", \"true\");\r\n    if (IBM_JAVA) {\r\n        options.put(\"useKeytab\", keytab_alice.getAbsolutePath().startsWith(\"file://\") ? keytab_alice.getAbsolutePath() : \"file://\" + keytab_alice.getAbsolutePath());\r\n        options.put(\"principal\", ALICE_LOCALHOST);\r\n        options.put(\"refreshKrb5Config\", \"true\");\r\n        options.put(\"credsType\", \"both\");\r\n        String ticketCache = System.getenv(\"KRB5CCNAME\");\r\n        if (ticketCache != null) {\r\n            System.setProperty(\"KRB5CCNAME\", ticketCache);\r\n            options.put(\"useDefaultCcache\", \"true\");\r\n            options.put(\"renewTGT\", \"true\");\r\n        }\r\n    } else {\r\n        options.put(\"keyTab\", keytab_alice.getAbsolutePath());\r\n        options.put(\"principal\", ALICE_LOCALHOST);\r\n        options.put(\"doNotPrompt\", \"true\");\r\n        options.put(\"isInitiator\", \"true\");\r\n        options.put(\"refreshKrb5Config\", \"true\");\r\n        options.put(\"renewTGT\", \"true\");\r\n        options.put(\"storeKey\", \"true\");\r\n        options.put(\"useKeyTab\", \"true\");\r\n        options.put(\"useTicketCache\", \"true\");\r\n    }\r\n    Method methodInitialize = kerb5LoginObject.getClass().getMethod(\"initialize\", Subject.class, CallbackHandler.class, Map.class, Map.class);\r\n    methodInitialize.invoke(kerb5LoginObject, subject, null, new HashMap<String, String>(), options);\r\n    Method methodLogin = kerb5LoginObject.getClass().getMethod(\"login\");\r\n    boolean loginOk = (Boolean) methodLogin.invoke(kerb5LoginObject);\r\n    assertTrue(\"Failed to login\", loginOk);\r\n    Method methodCommit = kerb5LoginObject.getClass().getMethod(\"commit\");\r\n    boolean commitOk = (Boolean) methodCommit.invoke(kerb5LoginObject);\r\n    assertTrue(\"Failed to Commit\", commitOk);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "testDefaultRealmValid",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testDefaultRealmValid() throws Throwable\n{\r\n    String defaultRealm = KerberosUtil.getDefaultRealm();\r\n    assertNotEmpty(\"No default Kerberos Realm\", defaultRealm);\r\n    LOG.info(\"Default Realm '{}'\", defaultRealm);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "testKerberosRulesValid",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testKerberosRulesValid() throws Throwable\n{\r\n    assertTrue(\"!KerberosName.hasRulesBeenSet()\", KerberosName.hasRulesBeenSet());\r\n    String rules = KerberosName.getRules();\r\n    assertEquals(kerberosRule, rules);\r\n    LOG.info(rules);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "testValidKerberosName",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testValidKerberosName() throws Throwable\n{\r\n    KerberosName.setRuleMechanism(MECHANISM_HADOOP);\r\n    new HadoopKerberosName(ZOOKEEPER).getShortName();\r\n    KerberosName.setRuleMechanism(MECHANISM_MIT);\r\n    new HadoopKerberosName(ZOOKEEPER).getShortName();\r\n    new HadoopKerberosName(ZOOKEEPER_LOCALHOST).getShortName();\r\n    new HadoopKerberosName(ZOOKEEPER_REALM).getShortName();\r\n    new HadoopKerberosName(ZOOKEEPER_LOCALHOST_REALM).getShortName();\r\n    KerberosName.setRuleMechanism(DEFAULT_MECHANISM);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "testUGILogin",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testUGILogin() throws Throwable\n{\r\n    UserGroupInformation ugi = loginUGI(ZOOKEEPER, keytab_zk);\r\n    RegistrySecurity.UgiInfo ugiInfo = new RegistrySecurity.UgiInfo(ugi);\r\n    LOG.info(\"logged in as: {}\", ugiInfo);\r\n    assertTrue(\"security is not enabled: \" + ugiInfo, UserGroupInformation.isSecurityEnabled());\r\n    assertTrue(\"login is keytab based: \" + ugiInfo, ugi.isFromKeytab());\r\n    ACL acl = ugi.doAs(new PrivilegedExceptionAction<ACL>() {\r\n\r\n        @Override\r\n        public ACL run() throws Exception {\r\n            return registrySecurity.createSaslACLFromCurrentUser(0);\r\n        }\r\n    });\r\n    assertEquals(ZOOKEEPER_REALM, acl.getId().getId());\r\n    assertEquals(ZookeeperConfigOptions.SCHEME_SASL, acl.getId().getScheme());\r\n    registrySecurity.addSystemACL(acl);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "startCurator",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void startCurator() throws IOException\n{\r\n    createCuratorService();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "stopCurator",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void stopCurator()\n{\r\n    ServiceOperations.stop(curatorService);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "createCuratorService",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void createCuratorService() throws IOException\n{\r\n    curatorService = new CuratorService(\"curatorService\");\r\n    curatorService.init(createRegistryConfiguration());\r\n    curatorService.start();\r\n    rootACL = RegistrySecurity.WorldReadWriteACL;\r\n    curatorService.maybeCreate(\"\", CreateMode.PERSISTENT, rootACL, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "testLs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testLs() throws Throwable\n{\r\n    curatorService.zkList(\"/\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "testLsNotFound",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testLsNotFound() throws Throwable\n{\r\n    List<String> ls = curatorService.zkList(MISSING);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "testExists",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testExists() throws Throwable\n{\r\n    assertTrue(curatorService.zkPathExists(\"/\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "testExistsMissing",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testExistsMissing() throws Throwable\n{\r\n    assertFalse(curatorService.zkPathExists(MISSING));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "testVerifyExists",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testVerifyExists() throws Throwable\n{\r\n    pathMustExist(\"/\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "testVerifyExistsMissing",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testVerifyExistsMissing() throws Throwable\n{\r\n    pathMustExist(\"/file-not-found\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "testMkdirs",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testMkdirs() throws Throwable\n{\r\n    mkPath(\"/p1\", CreateMode.PERSISTENT);\r\n    pathMustExist(\"/p1\");\r\n    mkPath(\"/p1/p2\", CreateMode.EPHEMERAL);\r\n    pathMustExist(\"/p1/p2\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "mkPath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mkPath(String path, CreateMode mode) throws IOException\n{\r\n    curatorService.zkMkPath(path, mode, false, RegistrySecurity.WorldReadWriteACL);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "pathMustExist",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void pathMustExist(String path) throws IOException\n{\r\n    curatorService.zkPathMustExist(path);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "testMkdirChild",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testMkdirChild() throws Throwable\n{\r\n    mkPath(\"/testMkdirChild/child\", CreateMode.PERSISTENT);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "testMaybeCreate",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testMaybeCreate() throws Throwable\n{\r\n    assertTrue(curatorService.maybeCreate(\"/p3\", CreateMode.PERSISTENT, RegistrySecurity.WorldReadWriteACL, false));\r\n    assertFalse(curatorService.maybeCreate(\"/p3\", CreateMode.PERSISTENT, RegistrySecurity.WorldReadWriteACL, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "testRM",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testRM() throws Throwable\n{\r\n    mkPath(\"/rm\", CreateMode.PERSISTENT);\r\n    curatorService.zkDelete(\"/rm\", false, null);\r\n    verifyNotExists(\"/rm\");\r\n    curatorService.zkDelete(\"/rm\", false, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "testRMNonRf",
  "errType" : [ "PathIsNotEmptyDirectoryException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testRMNonRf() throws Throwable\n{\r\n    mkPath(\"/rm\", CreateMode.PERSISTENT);\r\n    mkPath(\"/rm/child\", CreateMode.PERSISTENT);\r\n    try {\r\n        curatorService.zkDelete(\"/rm\", false, null);\r\n        fail(\"expected a failure\");\r\n    } catch (PathIsNotEmptyDirectoryException expected) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "testRMRf",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testRMRf() throws Throwable\n{\r\n    mkPath(\"/rm\", CreateMode.PERSISTENT);\r\n    mkPath(\"/rm/child\", CreateMode.PERSISTENT);\r\n    curatorService.zkDelete(\"/rm\", true, null);\r\n    verifyNotExists(\"/rm\");\r\n    curatorService.zkDelete(\"/rm\", true, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "testBackgroundDelete",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testBackgroundDelete() throws Throwable\n{\r\n    mkPath(\"/rm\", CreateMode.PERSISTENT);\r\n    mkPath(\"/rm/child\", CreateMode.PERSISTENT);\r\n    CuratorEventCatcher events = new CuratorEventCatcher();\r\n    curatorService.zkDelete(\"/rm\", true, events);\r\n    CuratorEvent taken = events.take();\r\n    LOG.info(\"took {}\", taken);\r\n    assertEquals(1, events.getCount());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "testCreate",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testCreate() throws Throwable\n{\r\n    curatorService.zkCreate(\"/testcreate\", CreateMode.PERSISTENT, getTestBuffer(), rootACL);\r\n    pathMustExist(\"/testcreate\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "testCreateTwice",
  "errType" : [ "FileAlreadyExistsException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testCreateTwice() throws Throwable\n{\r\n    byte[] buffer = getTestBuffer();\r\n    curatorService.zkCreate(\"/testcreatetwice\", CreateMode.PERSISTENT, buffer, rootACL);\r\n    try {\r\n        curatorService.zkCreate(\"/testcreatetwice\", CreateMode.PERSISTENT, buffer, rootACL);\r\n        fail();\r\n    } catch (FileAlreadyExistsException e) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "testCreateUpdate",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testCreateUpdate() throws Throwable\n{\r\n    byte[] buffer = getTestBuffer();\r\n    curatorService.zkCreate(\"/testcreateupdate\", CreateMode.PERSISTENT, buffer, rootACL);\r\n    curatorService.zkUpdate(\"/testcreateupdate\", buffer);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "testUpdateMissing",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testUpdateMissing() throws Throwable\n{\r\n    curatorService.zkUpdate(\"/testupdatemissing\", getTestBuffer());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "testUpdateDirectory",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testUpdateDirectory() throws Throwable\n{\r\n    mkPath(\"/testupdatedirectory\", CreateMode.PERSISTENT);\r\n    curatorService.zkUpdate(\"/testupdatedirectory\", getTestBuffer());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "testUpdateDirectorywithChild",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testUpdateDirectorywithChild() throws Throwable\n{\r\n    mkPath(\"/testupdatedirectorywithchild\", CreateMode.PERSISTENT);\r\n    mkPath(\"/testupdatedirectorywithchild/child\", CreateMode.PERSISTENT);\r\n    curatorService.zkUpdate(\"/testupdatedirectorywithchild\", getTestBuffer());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "testUseZKServiceForBinding",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testUseZKServiceForBinding() throws Throwable\n{\r\n    CuratorService cs2 = new CuratorService(\"curator\", zookeeper);\r\n    cs2.init(new Configuration());\r\n    cs2.start();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "getTestBuffer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "byte[] getTestBuffer()\n{\r\n    byte[] buffer = new byte[1];\r\n    buffer[0] = '0';\r\n    return buffer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "verifyNotExists",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void verifyNotExists(String path) throws IOException\n{\r\n    if (curatorService.zkPathExists(path)) {\r\n        fail(\"Path should not exist: \" + path);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "beforeTestSecureZKService",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void beforeTestSecureZKService() throws Throwable\n{\r\n    enableKerberosDebugging();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "afterTestSecureZKService",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void afterTestSecureZKService() throws Throwable\n{\r\n    disableKerberosDebugging();\r\n    RegistrySecurity.clearZKSaslClientProperties();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "testCreateSecureZK",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testCreateSecureZK() throws Throwable\n{\r\n    startSecureZK();\r\n    secureZK.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "testInsecureClientToZK",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testInsecureClientToZK() throws Throwable\n{\r\n    startSecureZK();\r\n    userZookeeperToCreateRoot();\r\n    RegistrySecurity.clearZKSaslClientProperties();\r\n    CuratorService curatorService = startCuratorServiceInstance(\"insecure client\", false);\r\n    curatorService.zkList(\"/\");\r\n    curatorService.zkMkPath(\"\", CreateMode.PERSISTENT, false, RegistrySecurity.WorldReadWriteACL);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "testZookeeperCanWrite",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testZookeeperCanWrite() throws Throwable\n{\r\n    System.setProperty(\"curator-log-events\", \"true\");\r\n    startSecureZK();\r\n    CuratorService curator = null;\r\n    LoginContext login = login(ZOOKEEPER_LOCALHOST, ZOOKEEPER_CLIENT_CONTEXT, keytab_zk);\r\n    try {\r\n        logLoginDetails(ZOOKEEPER, login);\r\n        RegistrySecurity.setZKSaslClientProperties(ZOOKEEPER, ZOOKEEPER_CLIENT_CONTEXT);\r\n        curator = startCuratorServiceInstance(\"ZK\", true);\r\n        LOG.info(curator.toString());\r\n        addToTeardown(curator);\r\n        curator.zkMkPath(\"/\", CreateMode.PERSISTENT, false, RegistrySecurity.WorldReadWriteACL);\r\n        curator.zkList(\"/\");\r\n        curator.zkMkPath(\"/zookeeper\", CreateMode.PERSISTENT, false, RegistrySecurity.WorldReadWriteACL);\r\n    } finally {\r\n        logout(login);\r\n        ServiceOperations.stop(curator);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "testSystemPropertyOverwrite",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testSystemPropertyOverwrite()\n{\r\n    System.setProperty(PROP_ZK_SASL_CLIENT_USERNAME, \"\");\r\n    System.setProperty(PROP_ZK_SASL_CLIENT_CONTEXT, \"\");\r\n    RegistrySecurity.setZKSaslClientProperties(ZOOKEEPER, ZOOKEEPER_CLIENT_CONTEXT);\r\n    assertEquals(ZOOKEEPER, System.getProperty(PROP_ZK_SASL_CLIENT_USERNAME));\r\n    assertEquals(ZOOKEEPER_CLIENT_CONTEXT, System.getProperty(PROP_ZK_SASL_CLIENT_CONTEXT));\r\n    String userName = \"user1\";\r\n    String context = \"context1\";\r\n    System.setProperty(PROP_ZK_SASL_CLIENT_USERNAME, userName);\r\n    System.setProperty(PROP_ZK_SASL_CLIENT_CONTEXT, context);\r\n    RegistrySecurity.setZKSaslClientProperties(ZOOKEEPER, ZOOKEEPER_CLIENT_CONTEXT);\r\n    assertEquals(userName, System.getProperty(PROP_ZK_SASL_CLIENT_USERNAME));\r\n    assertEquals(context, System.getProperty(PROP_ZK_SASL_CLIENT_CONTEXT));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "startCuratorServiceInstance",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "CuratorService startCuratorServiceInstance(String name, boolean secure)\n{\r\n    Configuration clientConf = new Configuration();\r\n    clientConf.set(KEY_REGISTRY_ZK_ROOT, \"/\");\r\n    clientConf.setBoolean(KEY_REGISTRY_SECURE, secure);\r\n    describe(LOG, \"Starting Curator service\");\r\n    CuratorService curatorService = new CuratorService(name, secureZK);\r\n    curatorService.init(clientConf);\r\n    curatorService.start();\r\n    LOG.info(\"Curator Binding {}\", curatorService.bindingDiagnosticDetails());\r\n    return curatorService;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "userZookeeperToCreateRoot",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void userZookeeperToCreateRoot() throws Throwable\n{\r\n    System.setProperty(\"curator-log-events\", \"true\");\r\n    CuratorService curator = null;\r\n    LoginContext login = login(ZOOKEEPER_LOCALHOST, ZOOKEEPER_CLIENT_CONTEXT, keytab_zk);\r\n    try {\r\n        logLoginDetails(ZOOKEEPER, login);\r\n        RegistrySecurity.setZKSaslClientProperties(ZOOKEEPER, ZOOKEEPER_CLIENT_CONTEXT);\r\n        curator = startCuratorServiceInstance(\"ZK\", true);\r\n        LOG.info(curator.toString());\r\n        addToTeardown(curator);\r\n        curator.zkMkPath(\"/\", CreateMode.PERSISTENT, false, RegistrySecurity.WorldReadWriteACL);\r\n        ZKPathDumper pathDumper = curator.dumpPath(true);\r\n        LOG.info(pathDumper.toString());\r\n    } finally {\r\n        logout(login);\r\n        ServiceOperations.stop(curator);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "destroyZKServer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void destroyZKServer() throws IOException\n{\r\n    ServiceOperations.stop(zookeeper);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "testTempDirSupport",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testTempDirSupport() throws Throwable\n{\r\n    Configuration conf = new RegistryConfiguration();\r\n    zookeeper = new MicroZookeeperService(\"t1\");\r\n    zookeeper.init(conf);\r\n    zookeeper.start();\r\n    zookeeper.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\binding",
  "methodName" : "testFormatAscii",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testFormatAscii() throws Throwable\n{\r\n    String in = \"hostname01101101-1\";\r\n    assertConverted(in, in);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\binding",
  "methodName" : "testFormatEuroSymbol",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testFormatEuroSymbol() throws Throwable\n{\r\n    assertConverted(\"xn--lzg\", EURO);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\binding",
  "methodName" : "testFormatIdempotent",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testFormatIdempotent() throws Throwable\n{\r\n    assertConverted(\"xn--lzg\", RegistryPathUtils.encodeForRegistry(EURO));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\binding",
  "methodName" : "testFormatCyrillicSpaced",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testFormatCyrillicSpaced() throws Throwable\n{\r\n    assertConverted(\"xn--pa 3-k4di\", \"\\u0413PA\\u0414 3\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\binding",
  "methodName" : "assertConverted",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void assertConverted(String expected, String in)\n{\r\n    String out = RegistryPathUtils.encodeForRegistry(in);\r\n    assertEquals(\"Conversion of \" + in, expected, out);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\binding",
  "methodName" : "testPaths",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testPaths() throws Throwable\n{\r\n    assertCreatedPathEquals(\"/\", \"/\", \"\");\r\n    assertCreatedPathEquals(\"/\", \"\", \"\");\r\n    assertCreatedPathEquals(\"/\", \"\", \"/\");\r\n    assertCreatedPathEquals(\"/\", \"/\", \"/\");\r\n    assertCreatedPathEquals(\"/a\", \"/a\", \"\");\r\n    assertCreatedPathEquals(\"/a\", \"/\", \"a\");\r\n    assertCreatedPathEquals(\"/a/b\", \"/a\", \"b\");\r\n    assertCreatedPathEquals(\"/a/b\", \"/a/\", \"b\");\r\n    assertCreatedPathEquals(\"/a/b\", \"/a\", \"/b\");\r\n    assertCreatedPathEquals(\"/a/b\", \"/a\", \"/b/\");\r\n    assertCreatedPathEquals(\"/a\", \"/a\", \"/\");\r\n    assertCreatedPathEquals(\"/alice\", \"/\", \"/alice\");\r\n    assertCreatedPathEquals(\"/alice\", \"/alice\", \"/\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\binding",
  "methodName" : "testGetUserFromPath",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testGetUserFromPath() throws Exception\n{\r\n    assertEquals(\"bob\", RegistryPathUtils.getUsername(\"/registry/users/bob/services/yarn-service/test1/\"));\r\n    assertEquals(\"bob-dev\", RegistryPathUtils.getUsername(\"/registry/users/bob-dev/services/yarn-service/test1\"));\r\n    assertEquals(\"bob.dev\", RegistryPathUtils.getUsername(\"/registry/users/bob.dev/services/yarn-service/test1\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\binding",
  "methodName" : "testComplexPaths",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testComplexPaths() throws Throwable\n{\r\n    assertCreatedPathEquals(\"/\", \"\", \"\");\r\n    assertCreatedPathEquals(\"/yarn/registry/users/hadoop/org-apache-hadoop\", \"/yarn/registry\", \"users/hadoop/org-apache-hadoop/\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\binding",
  "methodName" : "assertCreatedPathEquals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void assertCreatedPathEquals(String expected, String base, String path) throws IOException\n{\r\n    String fullPath = createFullPath(base, path);\r\n    assertEquals(\"\\\"\" + base + \"\\\" + \\\"\" + path + \"\\\" =\\\"\" + fullPath + \"\\\"\", expected, fullPath);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\binding",
  "methodName" : "testSplittingEmpty",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testSplittingEmpty() throws Throwable\n{\r\n    assertEquals(0, split(\"\").size());\r\n    assertEquals(0, split(\"/\").size());\r\n    assertEquals(0, split(\"///\").size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\binding",
  "methodName" : "testSplitting",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testSplitting() throws Throwable\n{\r\n    assertEquals(1, split(\"/a\").size());\r\n    assertEquals(0, split(\"/\").size());\r\n    assertEquals(3, split(\"/a/b/c\").size());\r\n    assertEquals(3, split(\"/a/b/c/\").size());\r\n    assertEquals(3, split(\"a/b/c\").size());\r\n    assertEquals(3, split(\"/a/b//c\").size());\r\n    assertEquals(3, split(\"//a/b/c/\").size());\r\n    List<String> split = split(\"//a/b/c/\");\r\n    assertEquals(\"a\", split.get(0));\r\n    assertEquals(\"b\", split.get(1));\r\n    assertEquals(\"c\", split.get(2));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\binding",
  "methodName" : "testParentOf",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testParentOf() throws Throwable\n{\r\n    assertEquals(\"/\", parentOf(\"/a\"));\r\n    assertEquals(\"/\", parentOf(\"/a/\"));\r\n    assertEquals(\"/a\", parentOf(\"/a/b\"));\r\n    assertEquals(\"/a/b\", parentOf(\"/a/b/c\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\binding",
  "methodName" : "testLastPathEntry",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testLastPathEntry() throws Throwable\n{\r\n    assertEquals(\"\", lastPathEntry(\"/\"));\r\n    assertEquals(\"\", lastPathEntry(\"//\"));\r\n    assertEquals(\"c\", lastPathEntry(\"/a/b/c\"));\r\n    assertEquals(\"c\", lastPathEntry(\"/a/b/c/\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\binding",
  "methodName" : "testParentOfRoot",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testParentOfRoot() throws Throwable\n{\r\n    parentOf(\"/\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\binding",
  "methodName" : "testValidPaths",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testValidPaths() throws Throwable\n{\r\n    assertValidPath(\"/\");\r\n    assertValidPath(\"/a/b/c\");\r\n    assertValidPath(\"/users/drwho/org-apache-hadoop/registry/appid-55-55\");\r\n    assertValidPath(\"/a50\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\binding",
  "methodName" : "testInvalidPaths",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testInvalidPaths() throws Throwable\n{\r\n    assertInvalidPath(\"/a_b\");\r\n    assertInvalidPath(\"/UpperAndLowerCase\");\r\n    assertInvalidPath(\"/space in string\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\binding",
  "methodName" : "assertValidPath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void assertValidPath(String path) throws InvalidPathnameException\n{\r\n    validateZKPath(path);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\binding",
  "methodName" : "assertInvalidPath",
  "errType" : [ "InvalidPathnameException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void assertInvalidPath(String path) throws InvalidPathnameException\n{\r\n    try {\r\n        validateElementsAsDNS(path);\r\n        fail(\"path considered valid: \" + path);\r\n    } catch (InvalidPathnameException expected) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "testGetReverseZoneNetworkAddress",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetReverseZoneNetworkAddress() throws Exception\n{\r\n    assertEquals(\"172.17.4.0\", ReverseZoneUtils.getReverseZoneNetworkAddress(NET, RANGE, INDEX));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "testSplitIp",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testSplitIp() throws Exception\n{\r\n    long[] splitIp = ReverseZoneUtils.splitIp(NET);\r\n    assertEquals(172, splitIp[0]);\r\n    assertEquals(17, splitIp[1]);\r\n    assertEquals(4, splitIp[2]);\r\n    assertEquals(0, splitIp[3]);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "testThrowIllegalArgumentExceptionIfIndexIsNegative",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testThrowIllegalArgumentExceptionIfIndexIsNegative() throws Exception\n{\r\n    exception.expect(IllegalArgumentException.class);\r\n    ReverseZoneUtils.getReverseZoneNetworkAddress(NET, RANGE, -1);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "testThrowUnknownHostExceptionIfIpIsInvalid",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testThrowUnknownHostExceptionIfIpIsInvalid() throws Exception\n{\r\n    exception.expect(UnknownHostException.class);\r\n    ReverseZoneUtils.getReverseZoneNetworkAddress(\"213124.21231.14123.13\", RANGE, INDEX);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "testThrowIllegalArgumentExceptionIfRangeIsNegative",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testThrowIllegalArgumentExceptionIfRangeIsNegative() throws Exception\n{\r\n    exception.expect(IllegalArgumentException.class);\r\n    ReverseZoneUtils.getReverseZoneNetworkAddress(NET, -1, INDEX);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "testVariousRangeAndIndexValues",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testVariousRangeAndIndexValues() throws Exception\n{\r\n    assertEquals(\"172.17.9.0\", ReverseZoneUtils.getReverseZoneNetworkAddress(NET, 256, 5));\r\n    assertEquals(\"172.17.4.128\", ReverseZoneUtils.getReverseZoneNetworkAddress(NET, 128, 1));\r\n    assertEquals(\"172.18.0.0\", ReverseZoneUtils.getReverseZoneNetworkAddress(NET, 256, 252));\r\n    assertEquals(\"172.17.12.0\", ReverseZoneUtils.getReverseZoneNetworkAddress(NET, 1024, 2));\r\n    assertEquals(\"172.17.4.0\", ReverseZoneUtils.getReverseZoneNetworkAddress(NET, 0, 1));\r\n    assertEquals(\"172.17.4.0\", ReverseZoneUtils.getReverseZoneNetworkAddress(NET, 1, 0));\r\n    assertEquals(\"172.17.4.1\", ReverseZoneUtils.getReverseZoneNetworkAddress(NET, 1, 1));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry",
  "methodName" : "setupRegistry",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setupRegistry() throws IOException\n{\r\n    registry = new RegistryAdminService(\"yarnRegistry\");\r\n    operations = registry;\r\n    registry.init(createRegistryConfiguration());\r\n    registry.start();\r\n    operations.delete(\"/\", true);\r\n    registry.createRootRegistryPaths();\r\n    addToTeardown(registry);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry",
  "methodName" : "putExampleServiceEntry",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ServiceRecord putExampleServiceEntry(String path, int createFlags) throws IOException, URISyntaxException\n{\r\n    return putExampleServiceEntry(path, createFlags, PersistencePolicies.PERMANENT);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry",
  "methodName" : "putExampleServiceEntry",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ServiceRecord putExampleServiceEntry(String path, int createFlags, String persistence) throws IOException, URISyntaxException\n{\r\n    ServiceRecord record = buildExampleServiceEntry(persistence);\r\n    registry.mknode(RegistryPathUtils.parentOf(path), true);\r\n    operations.bind(path, record, createFlags);\r\n    return record;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry",
  "methodName" : "assertPathExists",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void assertPathExists(String path) throws IOException\n{\r\n    operations.stat(path);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry",
  "methodName" : "assertPathNotFound",
  "errType" : [ "PathNotFoundException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void assertPathNotFound(String path) throws IOException\n{\r\n    try {\r\n        operations.stat(path);\r\n        fail(\"Path unexpectedly found: \" + path);\r\n    } catch (PathNotFoundException e) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry",
  "methodName" : "assertResolves",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void assertResolves(String path) throws IOException\n{\r\n    operations.resolve(path);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\integration",
  "methodName" : "assertSelected",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void assertSelected(boolean outcome, RegistryAdminService.NodeSelector selector)\n{\r\n    boolean select = selector.shouldSelect(\"/\", status, record);\r\n    assertEquals(selector.toString(), outcome, select);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\integration",
  "methodName" : "testByContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testByContainer() throws Throwable\n{\r\n    assertSelected(false, new SelectByYarnPersistence(\"1\", PersistencePolicies.CONTAINER));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\integration",
  "methodName" : "testByApp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testByApp() throws Throwable\n{\r\n    assertSelected(true, new SelectByYarnPersistence(\"1\", PersistencePolicies.APPLICATION));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\integration",
  "methodName" : "testByAppName",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testByAppName() throws Throwable\n{\r\n    assertSelected(false, new SelectByYarnPersistence(\"2\", PersistencePolicies.APPLICATION));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\binding",
  "methodName" : "setupClass",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setupClass()\n{\r\n    marshal = new RegistryUtils.ServiceRecordMarshal();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\binding",
  "methodName" : "testRoundTrip",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testRoundTrip() throws Throwable\n{\r\n    String persistence = PersistencePolicies.PERMANENT;\r\n    ServiceRecord record = createRecord(persistence);\r\n    record.set(\"customkey\", \"customvalue\");\r\n    record.set(\"customkey2\", \"customvalue2\");\r\n    RegistryTypeUtils.validateServiceRecord(\"\", record);\r\n    LOG.info(marshal.toJson(record));\r\n    byte[] bytes = marshal.toBytes(record);\r\n    ServiceRecord r2 = marshal.fromBytes(\"\", bytes);\r\n    assertMatches(record, r2);\r\n    RegistryTypeUtils.validateServiceRecord(\"\", r2);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\binding",
  "methodName" : "testUnmarshallNoData",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testUnmarshallNoData() throws Throwable\n{\r\n    marshal.fromBytes(\"src\", new byte[] {});\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\binding",
  "methodName" : "testUnmarshallNotEnoughData",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testUnmarshallNotEnoughData() throws Throwable\n{\r\n    marshal.fromBytes(\"src\", new byte[] { '{', '}' }, ServiceRecord.RECORD_TYPE);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\binding",
  "methodName" : "testUnmarshallNoBody",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testUnmarshallNoBody() throws Throwable\n{\r\n    byte[] bytes = \"this is not valid JSON at all and should fail\".getBytes();\r\n    marshal.fromBytes(\"src\", bytes);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\binding",
  "methodName" : "testUnmarshallWrongType",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testUnmarshallWrongType() throws Throwable\n{\r\n    byte[] bytes = \"{'type':''}\".getBytes();\r\n    ServiceRecord serviceRecord = marshal.fromBytes(\"marshalling\", bytes);\r\n    RegistryTypeUtils.validateServiceRecord(\"validating\", serviceRecord);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\binding",
  "methodName" : "testUnmarshallWrongLongType",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testUnmarshallWrongLongType() throws Throwable\n{\r\n    ServiceRecord record = new ServiceRecord();\r\n    record.type = \"ThisRecordHasALongButNonMatchingType\";\r\n    byte[] bytes = marshal.toBytes(record);\r\n    ServiceRecord serviceRecord = marshal.fromBytes(\"marshalling\", bytes, ServiceRecord.RECORD_TYPE);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\binding",
  "methodName" : "testUnmarshallNoType",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testUnmarshallNoType() throws Throwable\n{\r\n    ServiceRecord record = new ServiceRecord();\r\n    record.type = \"NoRecord\";\r\n    byte[] bytes = marshal.toBytes(record);\r\n    ServiceRecord serviceRecord = marshal.fromBytes(\"marshalling\", bytes, ServiceRecord.RECORD_TYPE);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\binding",
  "methodName" : "testRecordValidationWrongType",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testRecordValidationWrongType() throws Throwable\n{\r\n    ServiceRecord record = new ServiceRecord();\r\n    record.type = \"NotAServiceRecordType\";\r\n    RegistryTypeUtils.validateServiceRecord(\"validating\", record);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\binding",
  "methodName" : "testUnknownFieldsRoundTrip",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testUnknownFieldsRoundTrip() throws Throwable\n{\r\n    ServiceRecord record = createRecord(PersistencePolicies.APPLICATION_ATTEMPT);\r\n    record.set(\"key\", \"value\");\r\n    record.set(\"intval\", \"2\");\r\n    assertEquals(\"value\", record.get(\"key\"));\r\n    assertEquals(\"2\", record.get(\"intval\"));\r\n    assertNull(record.get(\"null\"));\r\n    assertEquals(\"defval\", record.get(\"null\", \"defval\"));\r\n    byte[] bytes = marshal.toBytes(record);\r\n    ServiceRecord r2 = marshal.fromBytes(\"\", bytes);\r\n    assertEquals(\"value\", r2.get(\"key\"));\r\n    assertEquals(\"2\", r2.get(\"intval\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\binding",
  "methodName" : "testFieldPropagationInCopy",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testFieldPropagationInCopy() throws Throwable\n{\r\n    ServiceRecord record = createRecord(PersistencePolicies.APPLICATION_ATTEMPT);\r\n    record.set(\"key\", \"value\");\r\n    record.set(\"intval\", \"2\");\r\n    ServiceRecord that = new ServiceRecord(record);\r\n    assertMatches(record, that);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "beforeSecureRegistryTestClass",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void beforeSecureRegistryTestClass() throws Exception\n{\r\n    registrySecurity = new RegistrySecurity(\"registrySecurity\");\r\n    registrySecurity.init(CONF);\r\n    setupKDCAndPrincipals();\r\n    RegistrySecurity.clearJaasSystemProperties();\r\n    RegistrySecurity.bindJVMtoJAASFile(jaasFile);\r\n    initHadoopSecurity();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "afterSecureRegistryTestClass",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void afterSecureRegistryTestClass() throws Exception\n{\r\n    describe(LOG, \"teardown of class\");\r\n    classTeardown.close();\r\n    teardownKDC();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "nameThread",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void nameThread()\n{\r\n    Thread.currentThread().setName(\"JUnit\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "beforeSecureRegistryTest",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void beforeSecureRegistryTest()\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "afterSecureRegistryTest",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void afterSecureRegistryTest() throws IOException\n{\r\n    describe(LOG, \"teardown of instance\");\r\n    teardown.close();\r\n    stopSecureZK();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "addToClassTeardown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addToClassTeardown(Service svc)\n{\r\n    classTeardown.addService(svc);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "addToTeardown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addToTeardown(Service svc)\n{\r\n    teardown.addService(svc);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "teardownKDC",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void teardownKDC() throws Exception\n{\r\n    if (kdc != null) {\r\n        kdc.stop();\r\n        kdc = null;\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "setupKDCAndPrincipals",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void setupKDCAndPrincipals() throws Exception\n{\r\n    File target = new File(System.getProperty(\"test.dir\", \"target\"));\r\n    kdcWorkDir = new File(target, \"kdc\");\r\n    kdcWorkDir.mkdirs();\r\n    if (!kdcWorkDir.mkdirs()) {\r\n        assertTrue(kdcWorkDir.isDirectory());\r\n    }\r\n    kdcConf = MiniKdc.createConf();\r\n    kdcConf.setProperty(MiniKdc.DEBUG, \"true\");\r\n    kdc = new MiniKdc(kdcConf, kdcWorkDir);\r\n    kdc.start();\r\n    keytab_zk = createKeytab(ZOOKEEPER, \"zookeeper.keytab\");\r\n    keytab_alice = createKeytab(ALICE, \"alice.keytab\");\r\n    keytab_bob = createKeytab(BOB, \"bob.keytab\");\r\n    zkServerPrincipal = Shell.WINDOWS ? ZOOKEEPER_1270001 : ZOOKEEPER_LOCALHOST;\r\n    StringBuilder jaas = new StringBuilder(1024);\r\n    jaas.append(registrySecurity.createJAASEntry(ZOOKEEPER_CLIENT_CONTEXT, ZOOKEEPER, keytab_zk));\r\n    jaas.append(registrySecurity.createJAASEntry(ZOOKEEPER_SERVER_CONTEXT, zkServerPrincipal, keytab_zk));\r\n    jaas.append(registrySecurity.createJAASEntry(ALICE_CLIENT_CONTEXT, ALICE_LOCALHOST, keytab_alice));\r\n    jaas.append(registrySecurity.createJAASEntry(BOB_CLIENT_CONTEXT, BOB_LOCALHOST, keytab_bob));\r\n    jaasFile = new File(kdcWorkDir, \"jaas.txt\");\r\n    FileUtils.write(jaasFile, jaas.toString(), StandardCharsets.UTF_8);\r\n    LOG.info(\"\\n\" + jaas);\r\n    RegistrySecurity.bindJVMtoJAASFile(jaasFile);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "initHadoopSecurity",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initHadoopSecurity()\n{\r\n    UserGroupInformation.setConfiguration(CONF);\r\n    KerberosName.setRules(kerberosRule);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "stopSecureZK",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void stopSecureZK()\n{\r\n    ServiceOperations.stop(secureZK);\r\n    secureZK = null;\r\n    logout(zookeeperLogin);\r\n    zookeeperLogin = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "getKdc",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "MiniKdc getKdc()\n{\r\n    return kdc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "getKdcWorkDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "File getKdcWorkDir()\n{\r\n    return kdcWorkDir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "getKdcConf",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Properties getKdcConf()\n{\r\n    return kdcConf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "createSecureZKInstance",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "MicroZookeeperService createSecureZKInstance(String name) throws Exception\n{\r\n    String context = ZOOKEEPER_SERVER_CONTEXT;\r\n    Configuration conf = new Configuration();\r\n    File testdir = new File(System.getProperty(\"test.dir\", \"target\"));\r\n    File workDir = new File(testdir, name);\r\n    if (!workDir.mkdirs()) {\r\n        assertTrue(workDir.isDirectory());\r\n    }\r\n    System.setProperty(ZookeeperConfigOptions.PROP_ZK_SERVER_MAINTAIN_CONNECTION_DESPITE_SASL_FAILURE, \"false\");\r\n    RegistrySecurity.validateContext(context);\r\n    conf.set(MicroZookeeperServiceKeys.KEY_REGISTRY_ZKSERVICE_JAAS_CONTEXT, context);\r\n    MicroZookeeperService secureZK = new MicroZookeeperService(name);\r\n    secureZK.init(conf);\r\n    LOG.info(secureZK.getDiagnostics());\r\n    return secureZK;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "createKeytab",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "File createKeytab(String principal, String filename) throws Exception\n{\r\n    assertNotEmpty(\"empty principal\", principal);\r\n    assertNotEmpty(\"empty host\", filename);\r\n    assertNotNull(\"Null KDC\", kdc);\r\n    File keytab = new File(kdcWorkDir, filename);\r\n    kdc.createPrincipal(keytab, principal, principal + \"/localhost\", principal + \"/127.0.0.1\");\r\n    return keytab;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "getPrincipalAndRealm",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getPrincipalAndRealm(String principal)\n{\r\n    return principal + \"@\" + getRealm();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "getRealm",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getRealm()\n{\r\n    return kdc.getRealm();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "login",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "LoginContext login(String principal, String context, File keytab) throws LoginException, FileNotFoundException\n{\r\n    LOG.info(\"Logging in as {} in context {} with keytab {}\", principal, context, keytab);\r\n    if (!keytab.exists()) {\r\n        throw new FileNotFoundException(keytab.getAbsolutePath());\r\n    }\r\n    Set<Principal> principals = new HashSet<Principal>();\r\n    principals.add(new KerberosPrincipal(principal));\r\n    Subject subject = new Subject(false, principals, new HashSet<Object>(), new HashSet<Object>());\r\n    LoginContext login;\r\n    login = new LoginContext(context, subject, null, KerberosConfiguration.createClientConfig(principal, keytab));\r\n    login.login();\r\n    return login;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "startSecureZK",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void startSecureZK() throws Exception\n{\r\n    assertNull(\"Zookeeper is already running\", secureZK);\r\n    zookeeperLogin = login(zkServerPrincipal, ZOOKEEPER_SERVER_CONTEXT, keytab_zk);\r\n    secureZK = createSecureZKInstance(\"test-\" + methodName.getMethodName());\r\n    secureZK.start();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry",
  "methodName" : "assertValidZKPath",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void assertValidZKPath(String path)\n{\r\n    try {\r\n        PathUtils.validatePath(path);\r\n    } catch (IllegalArgumentException e) {\r\n        throw new IllegalArgumentException(\"Invalid Path \" + path + \": \" + e, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry",
  "methodName" : "assertNotEmpty",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void assertNotEmpty(String message, String check)\n{\r\n    if (StringUtils.isEmpty(check)) {\r\n        fail(message);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry",
  "methodName" : "assertNotEmpty",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void assertNotEmpty(String check)\n{\r\n    if (StringUtils.isEmpty(check)) {\r\n        fail(\"Empty string\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry",
  "methodName" : "logLoginDetails",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void logLoginDetails(String name, LoginContext loginContext)\n{\r\n    assertNotNull(\"Null login context\", loginContext);\r\n    Subject subject = loginContext.getSubject();\r\n    LOG.info(\"Logged in as {}:\\n {}\", name, subject);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry",
  "methodName" : "enableKerberosDebugging",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void enableKerberosDebugging()\n{\r\n    System.setProperty(AbstractSecureRegistryTest.SUN_SECURITY_KRB5_DEBUG, \"true\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry",
  "methodName" : "disableKerberosDebugging",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void disableKerberosDebugging()\n{\r\n    System.setProperty(AbstractSecureRegistryTest.SUN_SECURITY_KRB5_DEBUG, \"false\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry",
  "methodName" : "validateEntry",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void validateEntry(ServiceRecord record)\n{\r\n    assertNotNull(\"null service record\", record);\r\n    List<Endpoint> endpoints = record.external;\r\n    assertEquals(2, endpoints.size());\r\n    Endpoint webhdfs = findEndpoint(record, API_WEBHDFS, true, 1, 1);\r\n    assertEquals(API_WEBHDFS, webhdfs.api);\r\n    assertEquals(AddressTypes.ADDRESS_URI, webhdfs.addressType);\r\n    assertEquals(ProtocolTypes.PROTOCOL_REST, webhdfs.protocolType);\r\n    List<Map<String, String>> addressList = webhdfs.addresses;\r\n    Map<String, String> url = addressList.get(0);\r\n    String addr = url.get(\"uri\");\r\n    assertTrue(addr.contains(\"http\"));\r\n    assertTrue(addr.contains(\":8020\"));\r\n    Endpoint nnipc = findEndpoint(record, NNIPC, false, 1, 2);\r\n    assertEquals(\"wrong protocol in \" + nnipc, ProtocolTypes.PROTOCOL_THRIFT, nnipc.protocolType);\r\n    Endpoint ipc2 = findEndpoint(record, IPC2, false, 1, 2);\r\n    assertNotNull(ipc2);\r\n    Endpoint web = findEndpoint(record, HTTP_API, true, 1, 1);\r\n    assertEquals(1, web.addresses.size());\r\n    assertEquals(1, web.addresses.get(0).size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry",
  "methodName" : "assertMatches",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void assertMatches(Endpoint endpoint, String addressType, String protocolType, String api)\n{\r\n    assertNotNull(endpoint);\r\n    assertEquals(addressType, endpoint.addressType);\r\n    assertEquals(protocolType, endpoint.protocolType);\r\n    assertEquals(api, endpoint.api);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry",
  "methodName" : "assertMatches",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void assertMatches(ServiceRecord source, ServiceRecord resolved)\n{\r\n    assertNotNull(\"Null source record \", source);\r\n    assertNotNull(\"Null resolved record \", resolved);\r\n    assertEquals(source.description, resolved.description);\r\n    Map<String, String> srcAttrs = source.attributes();\r\n    Map<String, String> resolvedAttrs = resolved.attributes();\r\n    String sourceAsString = source.toString();\r\n    String resolvedAsString = resolved.toString();\r\n    assertEquals(\"Wrong count of attrs in \\n\" + sourceAsString + \"\\nfrom\\n\" + resolvedAsString, srcAttrs.size(), resolvedAttrs.size());\r\n    for (Map.Entry<String, String> entry : srcAttrs.entrySet()) {\r\n        String attr = entry.getKey();\r\n        assertEquals(\"attribute \" + attr, entry.getValue(), resolved.get(attr));\r\n    }\r\n    assertEquals(\"wrong external endpoint count\", source.external.size(), resolved.external.size());\r\n    assertEquals(\"wrong external endpoint count\", source.internal.size(), resolved.internal.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry",
  "methodName" : "findEndpoint",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "Endpoint findEndpoint(ServiceRecord record, String api, boolean external, int addressElements, int addressTupleSize)\n{\r\n    Endpoint epr = external ? record.getExternalEndpoint(api) : record.getInternalEndpoint(api);\r\n    if (epr != null) {\r\n        assertEquals(\"wrong # of addresses\", addressElements, epr.addresses.size());\r\n        assertEquals(\"wrong # of elements in an address tuple\", addressTupleSize, epr.addresses.get(0).size());\r\n        return epr;\r\n    }\r\n    List<Endpoint> endpoints = external ? record.external : record.internal;\r\n    StringBuilder builder = new StringBuilder();\r\n    for (Endpoint endpoint : endpoints) {\r\n        builder.append(\"\\\"\").append(endpoint).append(\"\\\" \");\r\n    }\r\n    fail(\"Did not find \" + api + \" in endpoints \" + builder);\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry",
  "methodName" : "logRecord",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void logRecord(String name, ServiceRecord record) throws IOException\n{\r\n    LOG.info(\" {} = \\n{}\\n\", name, recordMarshal.toJson(record));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry",
  "methodName" : "buildExampleServiceEntry",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ServiceRecord buildExampleServiceEntry(String persistence) throws IOException, URISyntaxException\n{\r\n    ServiceRecord record = new ServiceRecord();\r\n    record.set(YarnRegistryAttributes.YARN_ID, \"example-0001\");\r\n    record.set(YarnRegistryAttributes.YARN_PERSISTENCE, persistence);\r\n    addSampleEndpoints(record, \"namenode\");\r\n    return record;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry",
  "methodName" : "addSampleEndpoints",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void addSampleEndpoints(ServiceRecord entry, String hostname) throws URISyntaxException\n{\r\n    assertNotNull(hostname);\r\n    entry.addExternalEndpoint(webEndpoint(HTTP_API, new URI(\"http\", hostname + \":80\", \"/\")));\r\n    entry.addExternalEndpoint(restEndpoint(API_WEBHDFS, new URI(\"http\", hostname + \":8020\", \"/\")));\r\n    Endpoint endpoint = ipcEndpoint(API_HDFS, null);\r\n    endpoint.addresses.add(RegistryTypeUtils.hostnamePortPair(hostname, 8030));\r\n    entry.addInternalEndpoint(endpoint);\r\n    InetSocketAddress localhost = new InetSocketAddress(\"localhost\", 8050);\r\n    entry.addInternalEndpoint(inetAddrEndpoint(NNIPC, ProtocolTypes.PROTOCOL_THRIFT, \"localhost\", 8050));\r\n    entry.addInternalEndpoint(RegistryTypeUtils.ipcEndpoint(IPC2, localhost));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry",
  "methodName" : "describe",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void describe(Logger log, String text, Object... args)\n{\r\n    log.info(\"\\n=======================================\");\r\n    log.info(text, args);\r\n    log.info(\"=======================================\\n\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry",
  "methodName" : "logout",
  "errType" : [ "LoginException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "LoginContext logout(LoginContext login)\n{\r\n    try {\r\n        if (login != null) {\r\n            LOG.debug(\"Logging out login context {}\", login.toString());\r\n            login.logout();\r\n        }\r\n    } catch (LoginException e) {\r\n        LOG.warn(\"Exception logging out: {}\", e, e);\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry",
  "methodName" : "loginUGI",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "UserGroupInformation loginUGI(String user, File keytab) throws IOException\n{\r\n    LOG.info(\"Logging in as {} from {}\", user, keytab);\r\n    return UserGroupInformation.loginUserFromKeytabAndReturnUGI(user, keytab.getAbsolutePath());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry",
  "methodName" : "createRecord",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ServiceRecord createRecord(String persistence)\n{\r\n    return createRecord(\"01\", persistence, \"description\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry",
  "methodName" : "createRecord",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ServiceRecord createRecord(String id, String persistence, String description)\n{\r\n    ServiceRecord serviceRecord = new ServiceRecord();\r\n    serviceRecord.set(YarnRegistryAttributes.YARN_ID, id);\r\n    serviceRecord.description = description;\r\n    serviceRecord.set(YarnRegistryAttributes.YARN_PERSISTENCE, persistence);\r\n    return serviceRecord;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry",
  "methodName" : "createRecord",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ServiceRecord createRecord(String id, String persistence, String description, String data)\n{\r\n    return createRecord(id, persistence, description);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry",
  "methodName" : "addToTeardown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addToTeardown(Service svc)\n{\r\n    servicesToTeardown.addService(svc);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry",
  "methodName" : "teardownServices",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void teardownServices() throws IOException\n{\r\n    describe(LOG, \"teardown of static services\");\r\n    servicesToTeardown.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry",
  "methodName" : "createZKServer",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void createZKServer() throws Exception\n{\r\n    File zkDir = new File(\"target/zookeeper\");\r\n    FileUtils.deleteDirectory(zkDir);\r\n    assertTrue(zkDir.mkdirs());\r\n    zookeeper = new MicroZookeeperService(\"InMemoryZKService\");\r\n    Configuration conf = new RegistryConfiguration();\r\n    conf.set(MicroZookeeperServiceKeys.KEY_ZKSERVICE_DIR, zkDir.getAbsolutePath());\r\n    zookeeper.init(conf);\r\n    zookeeper.start();\r\n    addToTeardown(zookeeper);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry",
  "methodName" : "nameThread",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void nameThread()\n{\r\n    Thread.currentThread().setName(\"JUnit\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry",
  "methodName" : "getConnectString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getConnectString()\n{\r\n    return zookeeper.getConnectionString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry",
  "methodName" : "createRegistryConfiguration",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Configuration createRegistryConfiguration()\n{\r\n    Configuration conf = new RegistryConfiguration();\r\n    conf.setInt(RegistryConstants.KEY_REGISTRY_ZK_CONNECTION_TIMEOUT, 1000);\r\n    conf.setInt(RegistryConstants.KEY_REGISTRY_ZK_RETRY_INTERVAL, 500);\r\n    conf.setInt(RegistryConstants.KEY_REGISTRY_ZK_RETRY_TIMES, 10);\r\n    conf.setInt(RegistryConstants.KEY_REGISTRY_ZK_RETRY_CEILING, 10);\r\n    conf.set(RegistryConstants.KEY_REGISTRY_ZK_QUORUM, zookeeper.getConnectionString());\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "processResult",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void processResult(CuratorFramework client, CuratorEvent event) throws Exception\n{\r\n    LOG.info(\"received {}\", event);\r\n    eventCounter.incrementAndGet();\r\n    events.put(event);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "getCount",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getCount()\n{\r\n    return eventCounter.get();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "take",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "CuratorEvent take() throws InterruptedException\n{\r\n    return events.take();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "setupTestRegistrySecurityHelper",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setupTestRegistrySecurityHelper() throws IOException\n{\r\n    Configuration conf = new Configuration();\r\n    conf.setBoolean(KEY_REGISTRY_SECURE, true);\r\n    conf.set(KEY_REGISTRY_KERBEROS_REALM, \"KERBEROS\");\r\n    registrySecurity = new RegistrySecurity(\"\");\r\n    registrySecurity.init(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "testACLSplitRealmed",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testACLSplitRealmed() throws Throwable\n{\r\n    List<String> pairs = registrySecurity.splitAclPairs(SASL_YARN_EXAMPLE_COM + \", \" + SASL_MAPRED_EXAMPLE_COM, \"\");\r\n    assertEquals(SASL_YARN_EXAMPLE_COM, pairs.get(0));\r\n    assertEquals(SASL_MAPRED_EXAMPLE_COM, pairs.get(1));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "testBuildAclsRealmed",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testBuildAclsRealmed() throws Throwable\n{\r\n    List<ACL> acls = registrySecurity.buildACLs(SASL_YARN_EXAMPLE_COM + \", \" + SASL_MAPRED_EXAMPLE_COM, \"\", ZooDefs.Perms.ALL);\r\n    assertEquals(YARN_EXAMPLE_COM, acls.get(0).getId().getId());\r\n    assertEquals(MAPRED_EXAMPLE_COM, acls.get(1).getId().getId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "testACLDefaultRealm",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testACLDefaultRealm() throws Throwable\n{\r\n    List<String> pairs = registrySecurity.splitAclPairs(SASL_YARN_SHORT + \", \" + SASL_MAPRED_SHORT, REALM_EXAMPLE_COM);\r\n    assertEquals(SASL_YARN_EXAMPLE_COM, pairs.get(0));\r\n    assertEquals(SASL_MAPRED_EXAMPLE_COM, pairs.get(1));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "testBuildAclsDefaultRealm",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testBuildAclsDefaultRealm() throws Throwable\n{\r\n    List<ACL> acls = registrySecurity.buildACLs(SASL_YARN_SHORT + \", \" + SASL_MAPRED_SHORT, REALM_EXAMPLE_COM, ZooDefs.Perms.ALL);\r\n    assertEquals(YARN_EXAMPLE_COM, acls.get(0).getId().getId());\r\n    assertEquals(MAPRED_EXAMPLE_COM, acls.get(1).getId().getId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "testACLSplitNullRealm",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testACLSplitNullRealm() throws Throwable\n{\r\n    List<String> pairs = registrySecurity.splitAclPairs(SASL_YARN_SHORT + \", \" + SASL_MAPRED_SHORT, \"\");\r\n    assertEquals(SASL_YARN_SHORT, pairs.get(0));\r\n    assertEquals(SASL_MAPRED_SHORT, pairs.get(1));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "testBuildAclsNullRealm",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testBuildAclsNullRealm() throws Throwable\n{\r\n    registrySecurity.buildACLs(SASL_YARN_SHORT + \", \" + SASL_MAPRED_SHORT, \"\", ZooDefs.Perms.ALL);\r\n    fail(\"\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "testACLDefaultRealmOnlySASL",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testACLDefaultRealmOnlySASL() throws Throwable\n{\r\n    List<String> pairs = registrySecurity.splitAclPairs(SASL_YARN_SHORT + \", \" + DIGEST_F0AF, REALM_EXAMPLE_COM);\r\n    assertEquals(SASL_YARN_EXAMPLE_COM, pairs.get(0));\r\n    assertEquals(DIGEST_F0AF, pairs.get(1));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "testACLSplitMixed",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testACLSplitMixed() throws Throwable\n{\r\n    List<String> pairs = registrySecurity.splitAclPairs(SASL_YARN_SHORT + \", \" + SASL_MAPRED_APACHE + \", ,,\" + DIGEST_F0AF, REALM_EXAMPLE_COM);\r\n    assertEquals(SASL_YARN_EXAMPLE_COM, pairs.get(0));\r\n    assertEquals(SASL_MAPRED_APACHE, pairs.get(1));\r\n    assertEquals(DIGEST_F0AF, pairs.get(2));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "testDefaultAClsValid",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testDefaultAClsValid() throws Throwable\n{\r\n    registrySecurity.buildACLs(RegistryConstants.DEFAULT_REGISTRY_SYSTEM_ACCOUNTS, REALM_EXAMPLE_COM, ZooDefs.Perms.ALL);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "testDefaultRealm",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testDefaultRealm() throws Throwable\n{\r\n    String realm = RegistrySecurity.getDefaultRealmInJVM();\r\n    LOG.info(\"Realm {}\", realm);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "testUGIProperties",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testUGIProperties() throws Throwable\n{\r\n    UserGroupInformation user = UserGroupInformation.getCurrentUser();\r\n    ACL acl = registrySecurity.createACLForUser(user, ZooDefs.Perms.ALL);\r\n    assertFalse(RegistrySecurity.ALL_READWRITE_ACCESS.equals(acl));\r\n    LOG.info(\"User {} has ACL {}\", user, acl);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\secure",
  "methodName" : "testSecurityImpliesKerberos",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testSecurityImpliesKerberos() throws Throwable\n{\r\n    Configuration conf = new Configuration();\r\n    conf.setBoolean(\"hadoop.security.authentication\", true);\r\n    conf.setBoolean(KEY_REGISTRY_SECURE, true);\r\n    conf.set(KEY_REGISTRY_KERBEROS_REALM, \"KERBEROS\");\r\n    RegistrySecurity security = new RegistrySecurity(\"registry security\");\r\n    try {\r\n        security.init(conf);\r\n    } catch (Exception e) {\r\n        assertTrue(\"did not find \" + RegistrySecurity.E_NO_KERBEROS + \" in \" + e, e.toString().contains(RegistrySecurity.E_NO_KERBEROS));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "initRegistry",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void initRegistry() throws IOException\n{\r\n    Assert.assertNotNull(registry);\r\n    registry.init(new Configuration());\r\n    fs = registry.getFs();\r\n    fs.delete(new Path(\"test\"), true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "createTestDir",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void createTestDir() throws IOException\n{\r\n    fs.mkdirs(new Path(\"test\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "cleanTestDir",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void cleanTestDir() throws IOException\n{\r\n    fs.delete(new Path(\"test\"), true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "testMkNodeNonRecursive",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testMkNodeNonRecursive() throws InvalidPathnameException, PathNotFoundException, IOException\n{\r\n    boolean result = false;\r\n    System.out.println(\"Make node with parent already made, nonrecursive\");\r\n    result = registry.mknode(\"test/registryTestNode\", false);\r\n    Assert.assertTrue(result);\r\n    Assert.assertTrue(fs.exists(new Path(\"test/registryTestNode\")));\r\n    try {\r\n        System.out.println(\"Try to make node with no parent, nonrecursive\");\r\n        registry.mknode(\"test/parent/registryTestNode\", false);\r\n        Assert.fail(\"Should not have created node\");\r\n    } catch (IOException e) {\r\n    }\r\n    Assert.assertFalse(fs.exists(new Path(\"test/parent/registryTestNode\")));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "testMkNodeRecursive",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testMkNodeRecursive() throws IOException\n{\r\n    boolean result = false;\r\n    System.out.println(\"Make node with parent already made, recursive\");\r\n    result = registry.mknode(\"test/registryTestNode\", true);\r\n    Assert.assertTrue(result);\r\n    Assert.assertTrue(fs.exists(new Path(\"test/registryTestNode\")));\r\n    result = false;\r\n    System.out.println(\"Try to make node with no parent, recursive\");\r\n    result = registry.mknode(\"test/parent/registryTestNode\", true);\r\n    Assert.assertTrue(result);\r\n    Assert.assertTrue(fs.exists(new Path(\"test/parent/registryTestNode\")));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "testMkNodeAlreadyExists",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testMkNodeAlreadyExists() throws IOException\n{\r\n    System.out.println(\"pre-create test path\");\r\n    fs.mkdirs(new Path(\"test/registryTestNode\"));\r\n    System.out.println(\"Try to mknode existing path -- should be noop and return false\");\r\n    Assert.assertFalse(registry.mknode(\"test/registryTestNode\", true));\r\n    Assert.assertFalse(registry.mknode(\"test/registryTestNode\", false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "testBindParentPath",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testBindParentPath() throws InvalidPathnameException, PathNotFoundException, FileAlreadyExistsException, IOException\n{\r\n    ServiceRecord record = createRecord(\"0\");\r\n    System.out.println(\"pre-create test path\");\r\n    fs.mkdirs(new Path(\"test/parent1/registryTestNode\"));\r\n    registry.bind(\"test/parent1/registryTestNode\", record, 1);\r\n    Assert.assertTrue(fs.exists(new Path(\"test/parent1/registryTestNode/_record\")));\r\n    registry.bind(\"test/parent2/registryTestNode\", record, 1);\r\n    Assert.assertTrue(fs.exists(new Path(\"test/parent2/registryTestNode\")));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "testBindAlreadyExists",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testBindAlreadyExists() throws IOException\n{\r\n    ServiceRecord record1 = createRecord(\"1\");\r\n    ServiceRecord record2 = createRecord(\"2\");\r\n    System.out.println(\"Bind record1\");\r\n    registry.bind(\"test/registryTestNode\", record1, 1);\r\n    Assert.assertTrue(fs.exists(new Path(\"test/registryTestNode/_record\")));\r\n    System.out.println(\"Bind record2, overwrite = 1\");\r\n    registry.bind(\"test/registryTestNode\", record2, 1);\r\n    Assert.assertTrue(fs.exists(new Path(\"test/registryTestNode/_record\")));\r\n    ServiceRecord readRecord = registry.resolve(\"test/registryTestNode\");\r\n    Assert.assertTrue(readRecord.equals(record2));\r\n    System.out.println(\"Bind record3, overwrite = 0\");\r\n    try {\r\n        registry.bind(\"test/registryTestNode\", record1, 0);\r\n        Assert.fail(\"Should not overwrite record\");\r\n    } catch (IOException e) {\r\n    }\r\n    readRecord = registry.resolve(\"test/registryTestNode\");\r\n    Assert.assertTrue(readRecord.equals(record2));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "testResolve",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testResolve() throws IOException\n{\r\n    ServiceRecord record = createRecord(\"0\");\r\n    registry.bind(\"test/registryTestNode\", record, 1);\r\n    Assert.assertTrue(fs.exists(new Path(\"test/registryTestNode/_record\")));\r\n    System.out.println(\"Read record that exists\");\r\n    ServiceRecord readRecord = registry.resolve(\"test/registryTestNode\");\r\n    Assert.assertNotNull(readRecord);\r\n    Assert.assertTrue(record.equals(readRecord));\r\n    System.out.println(\"Try to read record that does not exist\");\r\n    try {\r\n        readRecord = registry.resolve(\"test/nonExistentNode\");\r\n        Assert.fail(\"Should throw an error, record does not exist\");\r\n    } catch (IOException e) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "testExists",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testExists() throws IOException\n{\r\n    System.out.println(\"pre-create test path\");\r\n    fs.mkdirs(new Path(\"test/registryTestNode\"));\r\n    System.out.println(\"Check for existing node\");\r\n    boolean exists = registry.exists(\"test/registryTestNode\");\r\n    Assert.assertTrue(exists);\r\n    System.out.println(\"Check for  non-existing node\");\r\n    exists = registry.exists(\"test/nonExistentNode\");\r\n    Assert.assertFalse(exists);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "testDeleteDirsOnly",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testDeleteDirsOnly() throws IOException\n{\r\n    System.out.println(\"pre-create test path with children\");\r\n    fs.mkdirs(new Path(\"test/registryTestNode\"));\r\n    fs.mkdirs(new Path(\"test/registryTestNode/child1\"));\r\n    fs.mkdirs(new Path(\"test/registryTestNode/child2\"));\r\n    try {\r\n        registry.delete(\"test/registryTestNode\", false);\r\n        Assert.fail(\"Deleted dir wich children, nonrecursive flag set\");\r\n    } catch (IOException e) {\r\n    }\r\n    Assert.assertTrue(fs.exists(new Path(\"test/registryTestNode\")));\r\n    Assert.assertTrue(fs.exists(new Path(\"test/registryTestNode/child1\")));\r\n    Assert.assertTrue(fs.exists(new Path(\"test/registryTestNode/child2\")));\r\n    System.out.println(\"Delete leaf path 'test/registryTestNode/child2'\");\r\n    registry.delete(\"test/registryTestNode/child2\", false);\r\n    Assert.assertTrue(fs.exists(new Path(\"test/registryTestNode\")));\r\n    Assert.assertTrue(fs.exists(new Path(\"test/registryTestNode/child1\")));\r\n    Assert.assertFalse(fs.exists(new Path(\"test/registryTestNode/child2\")));\r\n    System.out.println(\"Recursively delete non-leaf path 'test/registryTestNode'\");\r\n    registry.delete(\"test/registryTestNode\", true);\r\n    Assert.assertFalse(fs.exists(new Path(\"test/registryTestNode\")));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "testDeleteWithRecords",
  "errType" : [ "PathIsNotEmptyDirectoryException", "PathIsNotEmptyDirectoryException" ],
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testDeleteWithRecords() throws IOException\n{\r\n    System.out.println(\"pre-create test path with children and mocked records\");\r\n    fs.mkdirs(new Path(\"test/registryTestNode\"));\r\n    fs.mkdirs(new Path(\"test/registryTestNode/child1\"));\r\n    fs.mkdirs(new Path(\"test/registryTestNode/child2\"));\r\n    fs.create(new Path(\"test/registryTestNode/_record\")).close();\r\n    fs.create(new Path(\"test/registryTestNode/child1/_record\")).close();\r\n    System.out.println(\"Delete dir with child nodes and record file\");\r\n    try {\r\n        registry.delete(\"test/registryTestNode\", false);\r\n        Assert.fail(\"Nonrecursive delete of non-empty dir\");\r\n    } catch (PathIsNotEmptyDirectoryException e) {\r\n    }\r\n    Assert.assertTrue(fs.exists(new Path(\"test/registryTestNode/_record\")));\r\n    Assert.assertTrue(fs.exists(new Path(\"test/registryTestNode/child1/_record\")));\r\n    Assert.assertTrue(fs.exists(new Path(\"test/registryTestNode/child2\")));\r\n    System.out.println(\"Delete dir with record file and no child dirs\");\r\n    registry.delete(\"test/registryTestNode/child1\", false);\r\n    Assert.assertFalse(fs.exists(new Path(\"test/registryTestNode/child1\")));\r\n    Assert.assertTrue(fs.exists(new Path(\"test/registryTestNode/child2\")));\r\n    System.out.println(\"Delete dir with child dir and no record file\");\r\n    try {\r\n        registry.delete(\"test/registryTestNode\", false);\r\n        Assert.fail(\"Nonrecursive delete of non-empty dir\");\r\n    } catch (PathIsNotEmptyDirectoryException e) {\r\n    }\r\n    Assert.assertTrue(fs.exists(new Path(\"test/registryTestNode/child2\")));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "testList",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testList() throws IOException\n{\r\n    System.out.println(\"pre-create test path with children and mocked records\");\r\n    fs.mkdirs(new Path(\"test/registryTestNode\"));\r\n    fs.mkdirs(new Path(\"test/registryTestNode/child1\"));\r\n    fs.mkdirs(new Path(\"test/registryTestNode/child2\"));\r\n    fs.create(new Path(\"test/registryTestNode/_record\")).close();\r\n    fs.create(new Path(\"test/registryTestNode/child1/_record\")).close();\r\n    List<String> ls = null;\r\n    ls = registry.list(\"test/registryTestNode\");\r\n    Assert.assertNotNull(ls);\r\n    Assert.assertEquals(2, ls.size());\r\n    System.out.println(ls);\r\n    Assert.assertTrue(ls.contains(\"child1\"));\r\n    Assert.assertTrue(ls.contains(\"child2\"));\r\n    ls = null;\r\n    ls = registry.list(\"test/registryTestNode/child1\");\r\n    Assert.assertNotNull(ls);\r\n    Assert.assertTrue(ls.isEmpty());\r\n    ls = null;\r\n    ls = registry.list(\"test/registryTestNode/child2\");\r\n    Assert.assertNotNull(ls);\r\n    Assert.assertTrue(ls.isEmpty());\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\impl",
  "methodName" : "createRecord",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ServiceRecord createRecord(String id)\n{\r\n    System.out.println(\"Creating mock service record\");\r\n    ServiceRecord record = new ServiceRecord();\r\n    record.set(YarnRegistryAttributes.YARN_ID, id);\r\n    record.description = \"testRecord\";\r\n    return record;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "createConfiguration",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Configuration createConfiguration()\n{\r\n    Configuration conf = super.createConfiguration();\r\n    conf.setBoolean(RegistryConstants.KEY_DNSSEC_ENABLED, true);\r\n    conf.set(RegistryConstants.KEY_DNSSEC_PUBLIC_KEY, \"AwEAAe1Jev0Az1khlQCvf0nud1/CNHQwwPEu8BNchZthdDxKPVn29yrD \" + \"CHoAWjwiGsOSw3SzIPrawSbHzyJsjn0oLBhGrH6QedFGnydoxjNsw3m/ \" + \"SCmOjR/a7LGBAMDFKqFioi4gOyuN66svBeY+/5uw72+0ei9AQ20gqf6q \" + \"l9Ozs5bV\");\r\n    conf.set(RegistryConstants.KEY_DNSSEC_PRIVATE_KEY_FILE, getClass().getResource(\"/test.private\").getFile());\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "isSecure",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isSecure()\n{\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "initialize",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void initialize() throws Exception\n{\r\n    setRegistryDNS(new RegistryDNS(\"TestRegistry\"));\r\n    Configuration conf = createConfiguration();\r\n    getRegistryDNS().setDomainName(conf);\r\n    getRegistryDNS().initializeZones(conf);\r\n    setMarshal(new RegistryUtils.ServiceRecordMarshal());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "createConfiguration",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Configuration createConfiguration()\n{\r\n    Configuration conf = new Configuration();\r\n    conf.set(RegistryConstants.KEY_DNS_DOMAIN, \"dev.test\");\r\n    conf.set(RegistryConstants.KEY_DNS_ZONE_SUBNET, \"172.17.0\");\r\n    conf.setTimeDuration(RegistryConstants.KEY_DNS_TTL, 30L, TimeUnit.SECONDS);\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "isSecure",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isSecure()\n{\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "closeRegistry",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void closeRegistry() throws Exception\n{\r\n    getRegistryDNS().stopExecutor();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "testAppRegistration",
  "errType" : null,
  "containingMethodsNum" : 23,
  "sourceCodeText" : "void testAppRegistration() throws Exception\n{\r\n    ServiceRecord record = getMarshal().fromBytes(\"somepath\", APPLICATION_RECORD.getBytes());\r\n    getRegistryDNS().register(\"/registry/users/root/services/org-apache-slider/test1/\", record);\r\n    List<Record> recs = assertDNSQuery(\"test1.root.dev.test.\");\r\n    assertEquals(\"wrong result\", \"192.168.1.5\", ((ARecord) recs.get(0)).getAddress().getHostAddress());\r\n    recs = assertDNSQuery(\"management-api.test1.root.dev.test.\", 2);\r\n    assertEquals(\"wrong target name\", \"test1.root.dev.test.\", ((CNAMERecord) recs.get(0)).getTarget().toString());\r\n    assertTrue(\"not an ARecord\", recs.get(isSecure() ? 2 : 1) instanceof ARecord);\r\n    recs = assertDNSQuery(\"appmaster-ipc-api.test1.root.dev.test.\", Type.SRV, 1);\r\n    assertTrue(\"not an SRV record\", recs.get(0) instanceof SRVRecord);\r\n    assertEquals(\"wrong port\", 1026, ((SRVRecord) recs.get(0)).getPort());\r\n    recs = assertDNSQuery(\"appmaster-ipc-api.test1.root.dev.test.\", 2);\r\n    assertEquals(\"wrong target name\", \"test1.root.dev.test.\", ((CNAMERecord) recs.get(0)).getTarget().toString());\r\n    assertTrue(\"not an ARecord\", recs.get(isSecure() ? 2 : 1) instanceof ARecord);\r\n    recs = assertDNSQuery(\"http-api.test1.root.dev.test.\", 2);\r\n    assertEquals(\"wrong target name\", \"test1.root.dev.test.\", ((CNAMERecord) recs.get(0)).getTarget().toString());\r\n    assertTrue(\"not an ARecord\", recs.get(isSecure() ? 2 : 1) instanceof ARecord);\r\n    recs = assertDNSQuery(\"http-api.test1.root.dev.test.\", Type.SRV, 1);\r\n    assertTrue(\"not an SRV record\", recs.get(0) instanceof SRVRecord);\r\n    assertEquals(\"wrong port\", 1027, ((SRVRecord) recs.get(0)).getPort());\r\n    assertDNSQuery(\"test1.root.dev.test.\", Type.TXT, 3);\r\n    assertDNSQuery(\"appmaster-ipc-api.test1.root.dev.test.\", Type.TXT, 1);\r\n    assertDNSQuery(\"http-api.test1.root.dev.test.\", Type.TXT, 1);\r\n    assertDNSQuery(\"management-api.test1.root.dev.test.\", Type.TXT, 1);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "testContainerRegistration",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testContainerRegistration() throws Exception\n{\r\n    ServiceRecord record = getMarshal().fromBytes(\"somepath\", CONTAINER_RECORD.getBytes());\r\n    getRegistryDNS().register(\"/registry/users/root/services/org-apache-slider/test1/components/\" + \"ctr-e50-1451931954322-0016-01-000002\", record);\r\n    List<Record> recs = assertDNSQuery(\"ctr-e50-1451931954322-0016-01-000002.dev.test.\");\r\n    assertEquals(\"wrong result\", \"172.17.0.19\", ((ARecord) recs.get(0)).getAddress().getHostAddress());\r\n    recs = assertDNSQuery(\"httpd-1.test1.root.dev.test.\", 1);\r\n    assertTrue(\"not an ARecord\", recs.get(0) instanceof ARecord);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "testContainerRegistrationPersistanceAbsent",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testContainerRegistrationPersistanceAbsent() throws Exception\n{\r\n    ServiceRecord record = marshal.fromBytes(\"somepath\", CONTAINER_RECORD_YARN_PERSISTANCE_ABSENT.getBytes());\r\n    registryDNS.register(\"/registry/users/root/services/org-apache-slider/test1/components/\" + \"ctr-e50-1451931954322-0016-01-000003\", record);\r\n    Name name = Name.fromString(\"ctr-e50-1451931954322-0016-01-000002.dev.test.\");\r\n    Record question = Record.newRecord(name, Type.A, DClass.IN);\r\n    Message query = Message.newQuery(question);\r\n    byte[] responseBytes = registryDNS.generateReply(query, null);\r\n    Message response = new Message(responseBytes);\r\n    assertEquals(\"Excepting NXDOMAIN as Record must not have regsisterd wrong\", Rcode.NXDOMAIN, response.getRcode());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "testRecordTTL",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testRecordTTL() throws Exception\n{\r\n    ServiceRecord record = getMarshal().fromBytes(\"somepath\", CONTAINER_RECORD.getBytes());\r\n    getRegistryDNS().register(\"/registry/users/root/services/org-apache-slider/test1/components/\" + \"ctr-e50-1451931954322-0016-01-000002\", record);\r\n    List<Record> recs = assertDNSQuery(\"ctr-e50-1451931954322-0016-01-000002.dev.test.\");\r\n    assertEquals(\"wrong result\", \"172.17.0.19\", ((ARecord) recs.get(0)).getAddress().getHostAddress());\r\n    assertEquals(\"wrong ttl\", 30L, recs.get(0).getTTL());\r\n    recs = assertDNSQuery(\"httpd-1.test1.root.dev.test.\", 1);\r\n    assertTrue(\"not an ARecord\", recs.get(0) instanceof ARecord);\r\n    assertEquals(\"wrong ttl\", 30L, recs.get(0).getTTL());\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "testReverseLookup",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testReverseLookup() throws Exception\n{\r\n    ServiceRecord record = getMarshal().fromBytes(\"somepath\", CONTAINER_RECORD.getBytes());\r\n    getRegistryDNS().register(\"/registry/users/root/services/org-apache-slider/test1/components/\" + \"ctr-e50-1451931954322-0016-01-000002\", record);\r\n    List<Record> recs = assertDNSQuery(\"19.0.17.172.in-addr.arpa.\", Type.PTR, 1);\r\n    assertEquals(\"wrong result\", \"httpd-1.test1.root.dev.test.\", ((PTRRecord) recs.get(0)).getTarget().toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "testReverseLookupInLargeNetwork",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testReverseLookupInLargeNetwork() throws Exception\n{\r\n    setRegistryDNS(new RegistryDNS(\"TestRegistry\"));\r\n    Configuration conf = createConfiguration();\r\n    conf.set(RegistryConstants.KEY_DNS_DOMAIN, \"dev.test\");\r\n    conf.set(KEY_DNS_ZONE_SUBNET, \"172.17.0.0\");\r\n    conf.set(KEY_DNS_ZONE_MASK, \"255.255.224.0\");\r\n    conf.setTimeDuration(RegistryConstants.KEY_DNS_TTL, 30L, TimeUnit.SECONDS);\r\n    getRegistryDNS().setDomainName(conf);\r\n    getRegistryDNS().initializeZones(conf);\r\n    ServiceRecord record = getMarshal().fromBytes(\"somepath\", CONTAINER_RECORD.getBytes());\r\n    getRegistryDNS().register(\"/registry/users/root/services/org-apache-slider/test1/components/\" + \"ctr-e50-1451931954322-0016-01-000002\", record);\r\n    List<Record> recs = assertDNSQuery(\"19.0.17.172.in-addr.arpa.\", Type.PTR, 1);\r\n    assertEquals(\"wrong result\", \"httpd-1.test1.root.dev.test.\", ((PTRRecord) recs.get(0)).getTarget().toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "testMissingReverseLookup",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testMissingReverseLookup() throws Exception\n{\r\n    ServiceRecord record = getMarshal().fromBytes(\"somepath\", CONTAINER_RECORD.getBytes());\r\n    getRegistryDNS().register(\"/registry/users/root/services/org-apache-slider/test1/components/\" + \"ctr-e50-1451931954322-0016-01-000002\", record);\r\n    Name name = Name.fromString(\"19.1.17.172.in-addr.arpa.\");\r\n    Record question = Record.newRecord(name, Type.PTR, DClass.IN);\r\n    Message query = Message.newQuery(question);\r\n    OPTRecord optRecord = new OPTRecord(4096, 0, 0, Flags.DO, null);\r\n    query.addRecord(optRecord, Section.ADDITIONAL);\r\n    byte[] responseBytes = getRegistryDNS().generateReply(query, null);\r\n    Message response = new Message(responseBytes);\r\n    assertEquals(\"Missing record should be: \", Rcode.NXDOMAIN, response.getRcode());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "testNoContainerIP",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testNoContainerIP() throws Exception\n{\r\n    ServiceRecord record = getMarshal().fromBytes(\"somepath\", CONTAINER_RECORD_NO_IP.getBytes());\r\n    getRegistryDNS().register(\"/registry/users/root/services/org-apache-slider/test1/components/\" + \"ctr-e50-1451931954322-0016-01-000002\", record);\r\n    Name name = Name.fromString(\"ctr-e50-1451931954322-0016-01-000002.dev.test.\");\r\n    Record question = Record.newRecord(name, Type.A, DClass.IN);\r\n    Message query = Message.newQuery(question);\r\n    byte[] responseBytes = getRegistryDNS().generateReply(query, null);\r\n    Message response = new Message(responseBytes);\r\n    assertEquals(\"wrong status\", Rcode.NXDOMAIN, response.getRcode());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "assertDNSQuery",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<Record> assertDNSQuery(String lookup) throws IOException\n{\r\n    return assertDNSQuery(lookup, Type.A, 1);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "assertDNSQuery",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<Record> assertDNSQuery(String lookup, int numRecs) throws IOException\n{\r\n    return assertDNSQuery(lookup, Type.A, numRecs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "assertDNSQuery",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "List<Record> assertDNSQuery(String lookup, int type, int numRecs) throws IOException\n{\r\n    Name name = Name.fromString(lookup);\r\n    Record question = Record.newRecord(name, type, DClass.IN);\r\n    Message query = Message.newQuery(question);\r\n    OPTRecord optRecord = new OPTRecord(4096, 0, 0, Flags.DO, null);\r\n    query.addRecord(optRecord, Section.ADDITIONAL);\r\n    byte[] responseBytes = getRegistryDNS().generateReply(query, null);\r\n    Message response = new Message(responseBytes);\r\n    assertEquals(\"not successful\", Rcode.NOERROR, response.getRcode());\r\n    assertNotNull(\"Null response\", response);\r\n    assertEquals(\"Questions do not match\", query.getQuestion(), response.getQuestion());\r\n    List<Record> recs = response.getSection(Section.ANSWER);\r\n    assertEquals(\"wrong number of answer records\", isSecure() ? numRecs * 2 : numRecs, recs.size());\r\n    if (isSecure()) {\r\n        boolean signed = false;\r\n        for (Record record : recs) {\r\n            signed = record.getType() == Type.RRSIG;\r\n            if (signed) {\r\n                break;\r\n            }\r\n        }\r\n        assertTrue(\"No signatures found\", signed);\r\n    }\r\n    return recs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "assertDNSQueryNotNull",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "List<Record> assertDNSQueryNotNull(String lookup, int type, int answerCount) throws IOException\n{\r\n    Name name = Name.fromString(lookup);\r\n    Record question = Record.newRecord(name, type, DClass.IN);\r\n    Message query = Message.newQuery(question);\r\n    OPTRecord optRecord = new OPTRecord(4096, 0, 0, Flags.DO, null);\r\n    query.addRecord(optRecord, Section.ADDITIONAL);\r\n    byte[] responseBytes = getRegistryDNS().generateReply(query, null);\r\n    Message response = new Message(responseBytes);\r\n    assertEquals(\"not successful\", Rcode.NOERROR, response.getRcode());\r\n    assertNotNull(\"Null response\", response);\r\n    assertEquals(\"Questions do not match\", query.getQuestion(), response.getQuestion());\r\n    List<Record> recs = response.getSection(Section.ANSWER);\r\n    assertEquals(answerCount, recs.size());\r\n    assertEquals(type, recs.get(0).getType());\r\n    return recs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "testDNSKEYRecord",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testDNSKEYRecord() throws Exception\n{\r\n    String publicK = \"AwEAAe1Jev0Az1khlQCvf0nud1/CNHQwwPEu8BNchZthdDxKPVn29yrD \" + \"CHoAWjwiGsOSw3SzIPrawSbHzyJsjn0oLBhGrH6QedFGnydoxjNsw3m/ \" + \"SCmOjR/a7LGBAMDFKqFioi4gOyuN66svBeY+/5uw72+0ei9AQ20gqf6q \" + \"l9Ozs5bV\";\r\n    DNSKEYRecord dnskeyRecord = new DNSKEYRecord(Name.fromString(\"dev.test.\"), DClass.IN, 0, DNSKEYRecord.Flags.ZONE_KEY, DNSKEYRecord.Protocol.DNSSEC, DNSSEC.Algorithm.RSASHA256, Base64.decodeBase64(publicK.getBytes()));\r\n    assertNotNull(dnskeyRecord);\r\n    RSAPrivateKeySpec privateSpec = new RSAPrivateKeySpec(new BigInteger(1, Base64.decodeBase64(\"7Ul6/QDPWSGVAK9/Se53X8I0dDDA8S7wE1yFm2F0PEo9Wfb3KsMIegBaPCIaw5LDd\" + \"LMg+trBJsfPImyOfSgsGEasfpB50UafJ2jGM2zDeb9IKY6NH9rssYEAwMUq\" + \"oWKiLiA7K43rqy8F5j7/m7Dvb7R6L0BDbSCp/qqX07OzltU=\")), new BigInteger(1, Base64.decodeBase64(\"MgbQ6DBYhskeufNGGdct0cGG/4wb0X183ggenwCv2dopDyOTPq+5xMb4Pz9Ndzgk/\" + \"yCY7mpaWIu9rttGOzrR+LBRR30VobPpMK1bMnzu2C0x08oYAguVwZB79DLC\" + \"705qmZpiaaFB+LnhG7VtpPiOBm3UzZxdrBfeq/qaKrXid60=\")));\r\n    KeyFactory factory = KeyFactory.getInstance(\"RSA\");\r\n    PrivateKey priv = factory.generatePrivate(privateSpec);\r\n    ARecord aRecord = new ARecord(Name.fromString(\"some.test.\"), DClass.IN, 0, InetAddress.getByName(\"192.168.0.1\"));\r\n    Instant inception = Instant.now();\r\n    Instant expiration = inception.plus(365, ChronoUnit.DAYS);\r\n    RRset rrset = new RRset(aRecord);\r\n    RRSIGRecord rrsigRecord = DNSSEC.sign(rrset, dnskeyRecord, priv, inception, expiration);\r\n    DNSSEC.verify(rrset, rrsigRecord, dnskeyRecord);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "testIpv4toIpv6",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testIpv4toIpv6() throws Exception\n{\r\n    InetAddress address = BaseServiceRecordProcessor.getIpv6Address(InetAddress.getByName(\"172.17.0.19\"));\r\n    assertTrue(\"not an ipv6 address\", address instanceof Inet6Address);\r\n    assertEquals(\"wrong IP\", \"172.17.0.19\", InetAddress.getByAddress(address.getAddress()).getHostAddress());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "testAAAALookup",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testAAAALookup() throws Exception\n{\r\n    ServiceRecord record = getMarshal().fromBytes(\"somepath\", CONTAINER_RECORD.getBytes());\r\n    getRegistryDNS().register(\"/registry/users/root/services/org-apache-slider/test1/components/\" + \"ctr-e50-1451931954322-0016-01-000002\", record);\r\n    List<Record> recs = assertDNSQuery(\"ctr-e50-1451931954322-0016-01-000002.dev.test.\", Type.AAAA, 1);\r\n    assertEquals(\"wrong result\", \"172.17.0.19\", ((AAAARecord) recs.get(0)).getAddress().getHostAddress());\r\n    recs = assertDNSQuery(\"httpd-1.test1.root.dev.test.\", Type.AAAA, 1);\r\n    assertTrue(\"not an ARecord\", recs.get(0) instanceof AAAARecord);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "testNegativeLookup",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testNegativeLookup() throws Exception\n{\r\n    ServiceRecord record = getMarshal().fromBytes(\"somepath\", CONTAINER_RECORD.getBytes());\r\n    getRegistryDNS().register(\"/registry/users/root/services/org-apache-slider/test1/components/\" + \"ctr-e50-1451931954322-0016-01-000002\", record);\r\n    Name name = Name.fromString(\"missing.dev.test.\");\r\n    Record question = Record.newRecord(name, Type.A, DClass.IN);\r\n    Message query = Message.newQuery(question);\r\n    byte[] responseBytes = getRegistryDNS().generateReply(query, null);\r\n    Message response = new Message(responseBytes);\r\n    assertEquals(\"not successful\", Rcode.NXDOMAIN, response.getRcode());\r\n    assertNotNull(\"Null response\", response);\r\n    assertEquals(\"Questions do not match\", query.getQuestion(), response.getQuestion());\r\n    List<Record> sectionArray = response.getSection(Section.AUTHORITY);\r\n    assertEquals(\"Wrong number of recs in AUTHORITY\", isSecure() ? 2 : 1, sectionArray.size());\r\n    boolean soaFound = false;\r\n    for (Record rec : sectionArray) {\r\n        soaFound = rec.getType() == Type.SOA;\r\n        if (soaFound) {\r\n            break;\r\n        }\r\n    }\r\n    assertTrue(\"wrong record type\", soaFound);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "testReadMasterFile",
  "errType" : null,
  "containingMethodsNum" : 26,
  "sourceCodeText" : "void testReadMasterFile() throws Exception\n{\r\n    setRegistryDNS(new RegistryDNS(\"TestRegistry\"));\r\n    Configuration conf = new Configuration();\r\n    conf.set(RegistryConstants.KEY_DNS_DOMAIN, \"dev.test\");\r\n    conf.set(RegistryConstants.KEY_DNS_ZONE_SUBNET, \"172.17.0\");\r\n    conf.setTimeDuration(RegistryConstants.KEY_DNS_TTL, 30L, TimeUnit.SECONDS);\r\n    conf.set(RegistryConstants.KEY_DNS_ZONES_DIR, getClass().getResource(\"/\").getFile());\r\n    if (isSecure()) {\r\n        conf.setBoolean(RegistryConstants.KEY_DNSSEC_ENABLED, true);\r\n        conf.set(RegistryConstants.KEY_DNSSEC_PUBLIC_KEY, \"AwEAAe1Jev0Az1khlQCvf0nud1/CNHQwwPEu8BNchZthdDxKPVn29yrD \" + \"CHoAWjwiGsOSw3SzIPrawSbHzyJsjn0oLBhGrH6QedFGnydoxjNsw3m/ \" + \"SCmOjR/a7LGBAMDFKqFioi4gOyuN66svBeY+/5uw72+0ei9AQ20gqf6q \" + \"l9Ozs5bV\");\r\n        conf.set(RegistryConstants.KEY_DNSSEC_PRIVATE_KEY_FILE, getClass().getResource(\"/test.private\").getFile());\r\n    }\r\n    getRegistryDNS().setDomainName(conf);\r\n    getRegistryDNS().initializeZones(conf);\r\n    ServiceRecord record = getMarshal().fromBytes(\"somepath\", CONTAINER_RECORD.getBytes());\r\n    getRegistryDNS().register(\"/registry/users/root/services/org-apache-slider/test1/components/\" + \"ctr-e50-1451931954322-0016-01-000002\", record);\r\n    List<Record> recs = assertDNSQuery(\"ctr-e50-1451931954322-0016-01-000002.dev.test.\");\r\n    assertEquals(\"wrong result\", \"172.17.0.19\", ((ARecord) recs.get(0)).getAddress().getHostAddress());\r\n    recs = assertDNSQuery(\"httpd-1.test1.root.dev.test.\", 1);\r\n    assertTrue(\"not an ARecord\", recs.get(0) instanceof ARecord);\r\n    recs = assertDNSQuery(\"19.0.17.172.in-addr.arpa.\", Type.PTR, 1);\r\n    assertEquals(\"wrong result\", \"httpd-1.test1.root.dev.test.\", ((PTRRecord) recs.get(0)).getTarget().toString());\r\n    Name name = Name.fromString(\"5.0.17.172.in-addr.arpa.\");\r\n    Record question = Record.newRecord(name, Type.PTR, DClass.IN);\r\n    Message query = Message.newQuery(question);\r\n    OPTRecord optRecord = new OPTRecord(4096, 0, 0, Flags.DO, null);\r\n    query.addRecord(optRecord, Section.ADDITIONAL);\r\n    byte[] responseBytes = getRegistryDNS().generateReply(query, null);\r\n    Message response = new Message(responseBytes);\r\n    recs = response.getSection(Section.ANSWER);\r\n    assertEquals(\"wrong result\", \"cn005.dev.test.\", ((PTRRecord) recs.get(0)).getTarget().toString());\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "testReverseZoneNames",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testReverseZoneNames() throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    conf.set(KEY_DNS_ZONE_SUBNET, \"172.26.32.0\");\r\n    conf.set(KEY_DNS_ZONE_MASK, \"255.255.224.0\");\r\n    Name name = getRegistryDNS().getReverseZoneName(conf);\r\n    assertEquals(\"wrong name\", \"26.172.in-addr.arpa.\", name.toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "testSplitReverseZoneNames",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testSplitReverseZoneNames() throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    registryDNS = new RegistryDNS(\"TestRegistry\");\r\n    conf.set(RegistryConstants.KEY_DNS_DOMAIN, \"example.com\");\r\n    conf.set(KEY_DNS_SPLIT_REVERSE_ZONE, \"true\");\r\n    conf.set(KEY_DNS_SPLIT_REVERSE_ZONE_RANGE, \"256\");\r\n    conf.set(KEY_DNS_ZONE_SUBNET, \"172.26.32.0\");\r\n    conf.set(KEY_DNS_ZONE_MASK, \"255.255.224.0\");\r\n    conf.setTimeDuration(RegistryConstants.KEY_DNS_TTL, 30L, TimeUnit.SECONDS);\r\n    conf.set(RegistryConstants.KEY_DNS_ZONES_DIR, getClass().getResource(\"/\").getFile());\r\n    if (isSecure()) {\r\n        conf.setBoolean(RegistryConstants.KEY_DNSSEC_ENABLED, true);\r\n        conf.set(RegistryConstants.KEY_DNSSEC_PUBLIC_KEY, \"AwEAAe1Jev0Az1khlQCvf0nud1/CNHQwwPEu8BNchZthdDxKPVn29yrD \" + \"CHoAWjwiGsOSw3SzIPrawSbHzyJsjn0oLBhGrH6QedFGnydoxjNsw3m/ \" + \"SCmOjR/a7LGBAMDFKqFioi4gOyuN66svBeY+/5uw72+0ei9AQ20gqf6q \" + \"l9Ozs5bV\");\r\n        conf.set(RegistryConstants.KEY_DNSSEC_PRIVATE_KEY_FILE, getClass().getResource(\"/test.private\").getFile());\r\n    }\r\n    registryDNS.setDomainName(conf);\r\n    registryDNS.setDNSSECEnabled(conf);\r\n    registryDNS.addSplitReverseZones(conf, 4);\r\n    assertEquals(4, registryDNS.getZoneCount());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "testExampleDotCom",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testExampleDotCom() throws Exception\n{\r\n    Name name = Name.fromString(\"example.com.\");\r\n    Record[] records = getRegistryDNS().getRecords(name, Type.SOA);\r\n    assertNotNull(\"example.com exists:\", records);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "testExternalCNAMERecord",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testExternalCNAMERecord() throws Exception\n{\r\n    setRegistryDNS(new RegistryDNS(\"TestRegistry\"));\r\n    Configuration conf = new Configuration();\r\n    conf.set(RegistryConstants.KEY_DNS_DOMAIN, \"dev.test\");\r\n    conf.set(RegistryConstants.KEY_DNS_ZONE_SUBNET, \"172.17.0\");\r\n    conf.setTimeDuration(RegistryConstants.KEY_DNS_TTL, 30L, TimeUnit.SECONDS);\r\n    conf.set(RegistryConstants.KEY_DNS_ZONES_DIR, getClass().getResource(\"/\").getFile());\r\n    getRegistryDNS().setDomainName(conf);\r\n    getRegistryDNS().initializeZones(conf);\r\n    assertDNSQueryNotNull(\"mail.yahoo.com.\", Type.CNAME, 1);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "testRootLookup",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testRootLookup() throws Exception\n{\r\n    setRegistryDNS(new RegistryDNS(\"TestRegistry\"));\r\n    Configuration conf = new Configuration();\r\n    conf.set(RegistryConstants.KEY_DNS_DOMAIN, \"dev.test\");\r\n    conf.set(RegistryConstants.KEY_DNS_ZONE_SUBNET, \"172.17.0\");\r\n    conf.setTimeDuration(RegistryConstants.KEY_DNS_TTL, 30L, TimeUnit.SECONDS);\r\n    conf.set(RegistryConstants.KEY_DNS_ZONES_DIR, getClass().getResource(\"/\").getFile());\r\n    getRegistryDNS().setDomainName(conf);\r\n    getRegistryDNS().initializeZones(conf);\r\n    assertDNSQueryNotNull(\".\", Type.NS, 13);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "testMultiARecord",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testMultiARecord() throws Exception\n{\r\n    ServiceRecord record = getMarshal().fromBytes(\"somepath\", CONTAINER_RECORD.getBytes());\r\n    ServiceRecord record2 = getMarshal().fromBytes(\"somepath\", CONTAINER_RECORD2.getBytes());\r\n    getRegistryDNS().register(\"/registry/users/root/services/org-apache-slider/test1/components/\" + \"ctr-e50-1451931954322-0016-01-000002\", record);\r\n    getRegistryDNS().register(\"/registry/users/root/services/org-apache-slider/test1/components/\" + \"ctr-e50-1451931954322-0016-01-000003\", record2);\r\n    List<Record> recs = assertDNSQuery(\"httpd.test1.root.dev.test.\", 2);\r\n    assertTrue(\"not an ARecord\", recs.get(0) instanceof ARecord);\r\n    assertTrue(\"not an ARecord\", recs.get(1) instanceof ARecord);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "testUpstreamFault",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testUpstreamFault() throws Exception\n{\r\n    Name name = Name.fromString(\"19.0.17.172.in-addr.arpa.\");\r\n    Record[] recs = getRegistryDNS().getRecords(name, Type.CNAME);\r\n    assertNull(\"Record is not null\", recs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "getRegistryDNS",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RegistryDNS getRegistryDNS()\n{\r\n    return registryDNS;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "setRegistryDNS",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setRegistryDNS(RegistryDNS registryDNS)\n{\r\n    this.registryDNS = registryDNS;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "getMarshal",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RegistryUtils.ServiceRecordMarshal getMarshal()\n{\r\n    return marshal;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\server\\dns",
  "methodName" : "setMarshal",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setMarshal(RegistryUtils.ServiceRecordMarshal marshal)\n{\r\n    this.marshal = marshal;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\binding",
  "methodName" : "testUsernameExtractionEnvVarOverrride",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testUsernameExtractionEnvVarOverrride() throws Throwable\n{\r\n    String whoami = RegistryUtils.getCurrentUsernameUnencoded(\"drwho\");\r\n    assertEquals(\"drwho\", whoami);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\binding",
  "methodName" : "testUsernameExtractionCurrentuser",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testUsernameExtractionCurrentuser() throws Throwable\n{\r\n    String whoami = RegistryUtils.getCurrentUsernameUnencoded(\"\");\r\n    String ugiUser = UserGroupInformation.getCurrentUser().getShortUserName();\r\n    assertEquals(ugiUser, whoami);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\client\\binding",
  "methodName" : "testShortenUsername",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testShortenUsername() throws Throwable\n{\r\n    assertEquals(\"hbase\", RegistryUtils.convertUsername(\"hbase@HADOOP.APACHE.ORG\"));\r\n    assertEquals(\"hbase\", RegistryUtils.convertUsername(\"hbase/localhost@HADOOP.APACHE.ORG\"));\r\n    assertEquals(\"hbase\", RegistryUtils.convertUsername(\"hbase\"));\r\n    assertEquals(\"hbase user\", RegistryUtils.convertUsername(\"hbase user\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\cli",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    sysOutStream = new ByteArrayOutputStream();\r\n    sysOut = new PrintStream(sysOutStream);\r\n    sysErrStream = new ByteArrayOutputStream();\r\n    sysErr = new PrintStream(sysErrStream);\r\n    System.setOut(sysOut);\r\n    cli = new RegistryCli(operations, createRegistryConfiguration(), sysOut, sysErr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\cli",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    cli.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\cli",
  "methodName" : "assertResult",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void assertResult(RegistryCli cli, int code, String... args) throws Exception\n{\r\n    int result = cli.run(args);\r\n    assertEquals(code, result);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\cli",
  "methodName" : "testBadCommands",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testBadCommands() throws Exception\n{\r\n    assertResult(cli, -1, new String[] {});\r\n    assertResult(cli, -1, \"foo\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\cli",
  "methodName" : "testInvalidNumArgs",
  "errType" : null,
  "containingMethodsNum" : 25,
  "sourceCodeText" : "void testInvalidNumArgs() throws Exception\n{\r\n    assertResult(cli, -1, \"ls\");\r\n    assertResult(cli, -1, \"ls\", \"/path\", \"/extraPath\");\r\n    assertResult(cli, -1, \"resolve\");\r\n    assertResult(cli, -1, \"resolve\", \"/path\", \"/extraPath\");\r\n    assertResult(cli, -1, \"mknode\");\r\n    assertResult(cli, -1, \"mknode\", \"/path\", \"/extraPath\");\r\n    assertResult(cli, -1, \"rm\");\r\n    assertResult(cli, -1, \"rm\", \"/path\", \"/extraPath\");\r\n    assertResult(cli, -1, \"bind\");\r\n    assertResult(cli, -1, \"bind\", \"foo\");\r\n    assertResult(cli, -1, \"bind\", \"-inet\", \"foo\");\r\n    assertResult(cli, -1, \"bind\", \"-inet\", \"-api\", \"-p\", \"378\", \"-h\", \"host\", \"/foo\");\r\n    assertResult(cli, -1, \"bind\", \"-inet\", \"-api\", \"Api\", \"-p\", \"-h\", \"host\", \"/foo\");\r\n    assertResult(cli, -1, \"bind\", \"-inet\", \"-api\", \"Api\", \"-p\", \"378\", \"-h\", \"/foo\");\r\n    assertResult(cli, -1, \"bind\", \"-inet\", \"-api\", \"Api\", \"-p\", \"378\", \"-h\", \"host\");\r\n    assertResult(cli, -1, \"bind\", \"-api\", \"Api\", \"-p\", \"378\", \"-h\", \"host\", \"/foo\");\r\n    assertResult(cli, -1, \"bind\", \"-webui\", \"foo\");\r\n    assertResult(cli, -1, \"bind\", \"-webui\", \"-api\", \"Api\", \"/foo\");\r\n    assertResult(cli, -1, \"bind\", \"-webui\", \"uriString\", \"-api\", \"/foo\");\r\n    assertResult(cli, -1, \"bind\", \"-webui\", \"uriString\", \"-api\", \"Api\");\r\n    assertResult(cli, -1, \"bind\", \"-rest\", \"foo\");\r\n    assertResult(cli, -1, \"bind\", \"-rest\", \"uriString\", \"-api\", \"Api\");\r\n    assertResult(cli, -1, \"bind\", \"-rest\", \"-api\", \"Api\", \"/foo\");\r\n    assertResult(cli, -1, \"bind\", \"-rest\", \"uriString\", \"-api\", \"/foo\");\r\n    assertResult(cli, -1, \"bind\", \"uriString\", \"-api\", \"Api\", \"/foo\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\cli",
  "methodName" : "testBadArgType",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testBadArgType() throws Exception\n{\r\n    assertResult(cli, -1, \"bind\", \"-inet\", \"-api\", \"Api\", \"-p\", \"fooPort\", \"-h\", \"host\", \"/dir\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\cli",
  "methodName" : "testBadPath",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testBadPath() throws Exception\n{\r\n    assertResult(cli, -1, \"ls\", \"NonSlashPath\");\r\n    assertResult(cli, -1, \"ls\", \"//\");\r\n    assertResult(cli, -1, \"resolve\", \"NonSlashPath\");\r\n    assertResult(cli, -1, \"resolve\", \"//\");\r\n    assertResult(cli, -1, \"mknode\", \"NonSlashPath\");\r\n    assertResult(cli, -1, \"mknode\", \"//\");\r\n    assertResult(cli, -1, \"rm\", \"NonSlashPath\");\r\n    assertResult(cli, -1, \"rm\", \"//\");\r\n    assertResult(cli, -1, \"bind\", \"-inet\", \"-api\", \"Api\", \"-p\", \"378\", \"-h\", \"host\", \"NonSlashPath\");\r\n    assertResult(cli, -1, \"bind\", \"-inet\", \"-api\", \"Api\", \"-p\", \"378\", \"-h\", \"host\", \"//\");\r\n    assertResult(cli, -1, \"bind\", \"-webui\", \"uriString\", \"-api\", \"Api\", \"NonSlashPath\");\r\n    assertResult(cli, -1, \"bind\", \"-webui\", \"uriString\", \"-api\", \"Api\", \"//\");\r\n    assertResult(cli, -1, \"bind\", \"-rest\", \"uriString\", \"-api\", \"Api\", \"NonSlashPath\");\r\n    assertResult(cli, -1, \"bind\", \"-rest\", \"uriString\", \"-api\", \"Api\", \"//\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\cli",
  "methodName" : "testNotExistingPaths",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testNotExistingPaths() throws Exception\n{\r\n    assertResult(cli, -1, \"ls\", \"/nonexisting_path\");\r\n    assertResult(cli, -1, \"ls\", \"/NonExistingDir/nonexisting_path\");\r\n    assertResult(cli, -1, \"resolve\", \"/nonexisting_path\");\r\n    assertResult(cli, -1, \"resolve\", \"/NonExistingDir/nonexisting_path\");\r\n    assertResult(cli, -1, \"bind\", \"-inet\", \"-api\", \"Api\", \"-p\", \"378\", \"-h\", \"host\", \"/NonExistingDir/nonexisting_path\");\r\n    assertResult(cli, -1, \"bind\", \"-webui\", \"uriString\", \"-api\", \"Api\", \"/NonExistingDir/nonexisting_path\");\r\n    assertResult(cli, -1, \"bind\", \"-rest\", \"uriString\", \"-api\", \"Api\", \"/NonExistingDir/nonexisting_path\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-registry\\src\\test\\java\\org\\apache\\hadoop\\registry\\cli",
  "methodName" : "testValidCommands",
  "errType" : null,
  "containingMethodsNum" : 47,
  "sourceCodeText" : "void testValidCommands() throws Exception\n{\r\n    assertResult(cli, 0, \"bind\", \"-inet\", \"-api\", \"Api\", \"-p\", \"378\", \"-h\", \"host\", \"/foo\");\r\n    assertResult(cli, 0, \"resolve\", \"/foo\");\r\n    assertResult(cli, 0, \"rm\", \"/foo\");\r\n    assertResult(cli, -1, \"resolve\", \"/foo\");\r\n    assertResult(cli, 0, \"bind\", \"-webui\", \"uriString\", \"-api\", \"Api\", \"/foo\");\r\n    assertResult(cli, 0, \"resolve\", \"/foo\");\r\n    assertResult(cli, 0, \"rm\", \"/foo\");\r\n    assertResult(cli, -1, \"resolve\", \"/foo\");\r\n    assertResult(cli, 0, \"bind\", \"-rest\", \"uriString\", \"-api\", \"Api\", \"/foo\");\r\n    assertResult(cli, 0, \"resolve\", \"/foo\");\r\n    assertResult(cli, 0, \"rm\", \"/foo\");\r\n    assertResult(cli, -1, \"resolve\", \"/foo\");\r\n    assertResult(cli, 0, \"mknode\", \"/subdir\");\r\n    assertResult(cli, -1, \"resolve\", \"/subdir\");\r\n    assertResult(cli, 0, \"bind\", \"-inet\", \"-api\", \"Api\", \"-p\", \"378\", \"-h\", \"host\", \"/subdir/foo\");\r\n    assertResult(cli, 0, \"resolve\", \"/subdir/foo\");\r\n    assertResult(cli, 0, \"rm\", \"/subdir/foo\");\r\n    assertResult(cli, -1, \"resolve\", \"/subdir/foo\");\r\n    assertResult(cli, 0, \"bind\", \"-webui\", \"uriString\", \"-api\", \"Api\", \"/subdir/foo\");\r\n    assertResult(cli, 0, \"resolve\", \"/subdir/foo\");\r\n    assertResult(cli, 0, \"rm\", \"/subdir/foo\");\r\n    assertResult(cli, -1, \"resolve\", \"/subdir/foo\");\r\n    assertResult(cli, 0, \"bind\", \"-rest\", \"uriString\", \"-api\", \"Api\", \"/subdir/foo\");\r\n    assertResult(cli, 0, \"resolve\", \"/subdir/foo\");\r\n    assertResult(cli, 0, \"rm\", \"/subdir/foo\");\r\n    assertResult(cli, -1, \"resolve\", \"/subdir/foo\");\r\n    assertResult(cli, 0, \"rm\", \"/subdir\");\r\n    assertResult(cli, -1, \"resolve\", \"/subdir\");\r\n    assertResult(cli, 0, \"mknode\", \"/dir\");\r\n    assertResult(cli, -1, \"resolve\", \"/dir\");\r\n    assertResult(cli, 0, \"bind\", \"-inet\", \"-api\", \"Api\", \"-p\", \"378\", \"-h\", \"host\", \"/dir\");\r\n    assertResult(cli, 0, \"resolve\", \"/dir\");\r\n    assertResult(cli, 0, \"rm\", \"/dir\");\r\n    assertResult(cli, -1, \"resolve\", \"/dir\");\r\n    assertResult(cli, 0, \"mknode\", \"/dir\");\r\n    assertResult(cli, -1, \"resolve\", \"/dir\");\r\n    assertResult(cli, 0, \"bind\", \"-webui\", \"uriString\", \"-api\", \"Api\", \"/dir\");\r\n    assertResult(cli, 0, \"resolve\", \"/dir\");\r\n    assertResult(cli, 0, \"rm\", \"/dir\");\r\n    assertResult(cli, -1, \"resolve\", \"/dir\");\r\n    assertResult(cli, 0, \"mknode\", \"/dir\");\r\n    assertResult(cli, -1, \"resolve\", \"/dir\");\r\n    assertResult(cli, 0, \"bind\", \"-rest\", \"uriString\", \"-api\", \"Api\", \"/dir\");\r\n    assertResult(cli, 0, \"resolve\", \"/dir\");\r\n    assertResult(cli, 0, \"rm\", \"/dir\");\r\n    assertResult(cli, -1, \"resolve\", \"/dir\");\r\n    assertResult(cli, 0, \"rm\", \"/Nonexitent\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
} ]