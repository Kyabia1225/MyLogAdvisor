[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-minikdc\\src\\test\\java\\org\\apache\\hadoop\\minikdc",
  "methodName" : "createMiniKdcConf",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void createMiniKdcConf()\n{\r\n    super.createMiniKdcConf();\r\n    Properties properties = getConf();\r\n    properties.setProperty(MiniKdc.ORG_NAME, \"APACHE\");\r\n    properties.setProperty(MiniKdc.ORG_DOMAIN, \"COM\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-minikdc\\src\\test\\java\\org\\apache\\hadoop\\minikdc",
  "methodName" : "testMiniKdcStart",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testMiniKdcStart()\n{\r\n    MiniKdc kdc = getKdc();\r\n    Assert.assertNotSame(0, kdc.getPort());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-minikdc\\src\\test\\java\\org\\apache\\hadoop\\minikdc",
  "methodName" : "testKeytabGen",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testKeytabGen() throws Exception\n{\r\n    MiniKdc kdc = getKdc();\r\n    File workDir = getWorkDir();\r\n    kdc.createPrincipal(new File(workDir, \"keytab\"), \"foo/bar\", \"bar/foo\");\r\n    List<PrincipalName> principalNameList = Keytab.loadKeytab(new File(workDir, \"keytab\")).getPrincipals();\r\n    Set<String> principals = new HashSet<String>();\r\n    for (PrincipalName principalName : principalNameList) {\r\n        principals.add(principalName.getName());\r\n    }\r\n    Assert.assertEquals(new HashSet<String>(Arrays.asList(\"foo/bar@\" + kdc.getRealm(), \"bar/foo@\" + kdc.getRealm())), principals);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-minikdc\\src\\test\\java\\org\\apache\\hadoop\\minikdc",
  "methodName" : "testKerberosLogin",
  "errType" : null,
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void testKerberosLogin() throws Exception\n{\r\n    MiniKdc kdc = getKdc();\r\n    File workDir = getWorkDir();\r\n    LoginContext loginContext = null;\r\n    try {\r\n        String principal = \"foo\";\r\n        File keytab = new File(workDir, \"foo.keytab\");\r\n        kdc.createPrincipal(keytab, principal);\r\n        Set<Principal> principals = new HashSet<Principal>();\r\n        principals.add(new KerberosPrincipal(principal));\r\n        Subject subject = new Subject(false, principals, new HashSet<Object>(), new HashSet<Object>());\r\n        loginContext = new LoginContext(\"\", subject, null, KerberosConfiguration.createClientConfig(principal, keytab));\r\n        loginContext.login();\r\n        subject = loginContext.getSubject();\r\n        Assert.assertEquals(1, subject.getPrincipals().size());\r\n        Assert.assertEquals(KerberosPrincipal.class, subject.getPrincipals().iterator().next().getClass());\r\n        Assert.assertEquals(principal + \"@\" + kdc.getRealm(), subject.getPrincipals().iterator().next().getName());\r\n        loginContext.logout();\r\n        subject = new Subject(false, principals, new HashSet<Object>(), new HashSet<Object>());\r\n        loginContext = new LoginContext(\"\", subject, null, KerberosConfiguration.createServerConfig(principal, keytab));\r\n        loginContext.login();\r\n        subject = loginContext.getSubject();\r\n        Assert.assertEquals(1, subject.getPrincipals().size());\r\n        Assert.assertEquals(KerberosPrincipal.class, subject.getPrincipals().iterator().next().getClass());\r\n        Assert.assertEquals(principal + \"@\" + kdc.getRealm(), subject.getPrincipals().iterator().next().getName());\r\n        loginContext.logout();\r\n    } finally {\r\n        if (loginContext != null && loginContext.getSubject() != null && !loginContext.getSubject().getPrivateCredentials().isEmpty()) {\r\n            loginContext.logout();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
} ]