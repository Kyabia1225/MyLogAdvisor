[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceInit(Configuration configuration) throws Exception\n{\r\n    yarnClient = YarnClient.createYarnClient();\r\n    addService(yarnClient);\r\n    super.serviceInit(configuration);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "getRMWebAddress",
  "errType" : [ "Exception", "IOException" ],
  "containingMethodsNum" : 24,
  "sourceCodeText" : "String getRMWebAddress() throws IOException\n{\r\n    Configuration conf = getConfig();\r\n    String scheme = \"http://\";\r\n    String path = \"/app/v1/services/version\";\r\n    String rmAddress = conf.get(\"yarn.resourcemanager.webapp.address\");\r\n    if (YarnConfiguration.useHttps(conf)) {\r\n        scheme = \"https://\";\r\n        rmAddress = conf.get(\"yarn.resourcemanager.webapp.https.address\");\r\n    }\r\n    if (HAUtil.isHAEnabled(conf)) {\r\n        boolean useKerberos = UserGroupInformation.isSecurityEnabled();\r\n        List<String> rmServers = getRMHAWebAddresses(conf);\r\n        StringBuilder diagnosticsMsg = new StringBuilder();\r\n        for (String host : rmServers) {\r\n            try {\r\n                Client client = Client.create();\r\n                client.setFollowRedirects(false);\r\n                StringBuilder sb = new StringBuilder();\r\n                sb.append(scheme).append(host).append(path);\r\n                if (!useKerberos) {\r\n                    try {\r\n                        String username = UserGroupInformation.getCurrentUser().getShortUserName();\r\n                        sb.append(\"?user.name=\").append(username);\r\n                    } catch (IOException e) {\r\n                        LOG.debug(\"Fail to resolve username: {}\", e);\r\n                    }\r\n                }\r\n                Builder builder = client.resource(sb.toString()).type(MediaType.APPLICATION_JSON);\r\n                if (useKerberos) {\r\n                    String[] server = host.split(\":\");\r\n                    String challenge = YarnClientUtils.generateToken(server[0]);\r\n                    builder.header(HttpHeaders.AUTHORIZATION, \"Negotiate \" + challenge);\r\n                    LOG.debug(\"Authorization: Negotiate {}\", challenge);\r\n                }\r\n                ClientResponse test = builder.get(ClientResponse.class);\r\n                if (test.getStatus() == 200) {\r\n                    return scheme + host;\r\n                }\r\n            } catch (Exception e) {\r\n                LOG.info(\"Fail to connect to: \" + host);\r\n                LOG.debug(\"Root cause: \", e);\r\n                diagnosticsMsg.append(\"Error connecting to \" + host + \" due to \" + e.getMessage() + \"\\n\");\r\n            }\r\n        }\r\n        throw new IOException(diagnosticsMsg.toString());\r\n    }\r\n    return scheme + rmAddress;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "getRMHAWebAddresses",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<String> getRMHAWebAddresses(Configuration conf)\n{\r\n    return RMHAUtils.getRMHAWebappAddresses(new YarnConfiguration(conf));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "getServicePath",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "String getServicePath(String appName) throws IOException\n{\r\n    String url = getRMWebAddress();\r\n    StringBuilder api = new StringBuilder();\r\n    api.append(url).append(\"/app/v1/services\");\r\n    if (appName != null) {\r\n        api.append(\"/\").append(appName);\r\n    }\r\n    appendUserNameIfRequired(api);\r\n    return api.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "getInstancesPath",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "String getInstancesPath(String appName) throws IOException\n{\r\n    Preconditions.checkNotNull(appName);\r\n    String url = getRMWebAddress();\r\n    StringBuilder api = new StringBuilder();\r\n    api.append(url).append(\"/app/v1/services/\").append(appName).append(\"/\").append(RestApiConstants.COMP_INSTANCES);\r\n    appendUserNameIfRequired(api);\r\n    return api.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "getInstancePath",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "String getInstancePath(String appName, List<String> components, String version, List<String> containerStates) throws IOException\n{\r\n    UriBuilder builder = UriBuilder.fromUri(getInstancesPath(appName));\r\n    if (components != null && !components.isEmpty()) {\r\n        components.forEach(compName -> builder.queryParam(RestApiConstants.PARAM_COMP_NAME, compName));\r\n    }\r\n    if (!Strings.isNullOrEmpty(version)) {\r\n        builder.queryParam(RestApiConstants.PARAM_VERSION, version);\r\n    }\r\n    if (containerStates != null && !containerStates.isEmpty()) {\r\n        containerStates.forEach(state -> builder.queryParam(RestApiConstants.PARAM_CONTAINER_STATE, state));\r\n    }\r\n    return builder.build().toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "getComponentsPath",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "String getComponentsPath(String appName) throws IOException\n{\r\n    Preconditions.checkNotNull(appName);\r\n    String url = getRMWebAddress();\r\n    StringBuilder api = new StringBuilder();\r\n    api.append(url).append(\"/app/v1/services/\").append(appName).append(\"/\").append(RestApiConstants.COMPONENTS);\r\n    appendUserNameIfRequired(api);\r\n    return api.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "appendUserNameIfRequired",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void appendUserNameIfRequired(StringBuilder builder) throws IOException\n{\r\n    Configuration conf = getConfig();\r\n    if (conf.get(\"hadoop.http.authentication.type\").equalsIgnoreCase(\"simple\")) {\r\n        String username = UserGroupInformation.getCurrentUser().getShortUserName();\r\n        builder.append(\"?user.name=\").append(UrlEncoded.encodeString(username));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "getApiClient",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Builder getApiClient() throws IOException\n{\r\n    return getApiClient(getServicePath(null));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "getApiClient",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "Builder getApiClient(String requestPath) throws IOException\n{\r\n    Client client = Client.create(getClientConfig());\r\n    client.setChunkedEncodingSize(null);\r\n    Builder builder = client.resource(requestPath).type(MediaType.APPLICATION_JSON);\r\n    if (UserGroupInformation.isSecurityEnabled()) {\r\n        try {\r\n            URI url = new URI(requestPath);\r\n            String challenge = YarnClientUtils.generateToken(url.getHost());\r\n            builder.header(HttpHeaders.AUTHORIZATION, \"Negotiate \" + challenge);\r\n        } catch (Exception e) {\r\n            throw new IOException(e);\r\n        }\r\n    }\r\n    return builder.accept(\"application/json;charset=utf-8\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "getClientConfig",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ClientConfig getClientConfig()\n{\r\n    ClientConfig config = new DefaultClientConfig();\r\n    config.getProperties().put(ClientConfig.PROPERTY_CHUNKED_ENCODING_SIZE, 0);\r\n    config.getProperties().put(ClientConfig.PROPERTY_BUFFER_RESPONSE_ENTITY_ON_EXCEPTION, true);\r\n    return config;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "processResponse",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "int processResponse(ClientResponse response)\n{\r\n    response.bufferEntity();\r\n    String output;\r\n    if (response.getStatus() == 401) {\r\n        LOG.error(\"Authentication required\");\r\n        return EXIT_EXCEPTION_THROWN;\r\n    }\r\n    if (response.getStatus() == 503) {\r\n        LOG.error(\"YARN Service is unavailable or disabled.\");\r\n        return EXIT_EXCEPTION_THROWN;\r\n    }\r\n    try {\r\n        ServiceStatus ss = response.getEntity(ServiceStatus.class);\r\n        output = ss.getDiagnostics();\r\n    } catch (Throwable t) {\r\n        output = response.getEntity(String.class);\r\n    }\r\n    if (output == null) {\r\n        output = response.getEntity(String.class);\r\n    }\r\n    if (response.getStatus() <= 299) {\r\n        LOG.info(output);\r\n        return EXIT_SUCCESS;\r\n    } else {\r\n        LOG.error(output);\r\n        return EXIT_EXCEPTION_THROWN;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "loadAppJsonFromLocalFS",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "Service loadAppJsonFromLocalFS(String fileName, String serviceName, Long lifetime, String queue) throws IOException, YarnException\n{\r\n    File file = new File(fileName);\r\n    if (!file.exists() && fileName.equals(file.getName())) {\r\n        String examplesDirStr = System.getenv(\"YARN_SERVICE_EXAMPLES_DIR\");\r\n        String[] examplesDirs;\r\n        if (examplesDirStr == null) {\r\n            String yarnHome = System.getenv(ApplicationConstants.Environment.HADOOP_YARN_HOME.key());\r\n            examplesDirs = new String[] { yarnHome + \"/share/hadoop/yarn/yarn-service-examples\", yarnHome + \"/yarn-service-examples\" };\r\n        } else {\r\n            examplesDirs = StringUtils.split(examplesDirStr, \":\");\r\n        }\r\n        for (String dir : examplesDirs) {\r\n            file = new File(MessageFormat.format(\"{0}/{1}/{2}.json\", dir, fileName, fileName));\r\n            if (file.exists()) {\r\n                break;\r\n            }\r\n            file = new File(MessageFormat.format(\"{0}/{1}.json\", dir, fileName));\r\n            if (file.exists()) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    if (!file.exists()) {\r\n        throw new YarnException(\"File or example could not be found: \" + fileName);\r\n    }\r\n    Path filePath = new Path(file.getAbsolutePath());\r\n    LOG.info(\"Loading service definition from local FS: \" + filePath);\r\n    Service service = jsonSerDeser.load(FileSystem.getLocal(getConfig()), filePath);\r\n    if (!StringUtils.isEmpty(serviceName)) {\r\n        service.setName(serviceName);\r\n    }\r\n    if (lifetime != null && lifetime > 0) {\r\n        service.setLifetime(lifetime);\r\n    }\r\n    if (!StringUtils.isEmpty(queue)) {\r\n        service.setQueue(queue);\r\n    }\r\n    return service;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "actionLaunch",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "int actionLaunch(String fileName, String appName, Long lifetime, String queue) throws IOException, YarnException\n{\r\n    int result = EXIT_SUCCESS;\r\n    try {\r\n        Service service = loadAppJsonFromLocalFS(fileName, appName, lifetime, queue);\r\n        String buffer = jsonSerDeser.toJson(service);\r\n        ClientResponse response = getApiClient().post(ClientResponse.class, buffer);\r\n        result = processResponse(response);\r\n    } catch (Exception e) {\r\n        LOG.error(\"Fail to launch application: \", e);\r\n        result = EXIT_EXCEPTION_THROWN;\r\n    }\r\n    return result;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "actionStop",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "int actionStop(String appName) throws IOException, YarnException\n{\r\n    int result = EXIT_SUCCESS;\r\n    try {\r\n        Service service = new Service();\r\n        service.setName(appName);\r\n        service.setState(ServiceState.STOPPED);\r\n        String buffer = jsonSerDeser.toJson(service);\r\n        ClientResponse response = getApiClient(getServicePath(appName)).put(ClientResponse.class, buffer);\r\n        result = processResponse(response);\r\n    } catch (Exception e) {\r\n        LOG.error(\"Fail to stop application: \", e);\r\n        result = EXIT_EXCEPTION_THROWN;\r\n    }\r\n    return result;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "actionStart",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "int actionStart(String appName) throws IOException, YarnException\n{\r\n    int result = EXIT_SUCCESS;\r\n    try {\r\n        Service service = new Service();\r\n        service.setName(appName);\r\n        service.setState(ServiceState.STARTED);\r\n        String buffer = jsonSerDeser.toJson(service);\r\n        ClientResponse response = getApiClient(getServicePath(appName)).put(ClientResponse.class, buffer);\r\n        result = processResponse(response);\r\n    } catch (Exception e) {\r\n        LOG.error(\"Fail to start application: \", e);\r\n        result = EXIT_EXCEPTION_THROWN;\r\n    }\r\n    return result;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "actionSave",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "int actionSave(String fileName, String appName, Long lifetime, String queue) throws IOException, YarnException\n{\r\n    int result = EXIT_SUCCESS;\r\n    try {\r\n        Service service = loadAppJsonFromLocalFS(fileName, appName, lifetime, queue);\r\n        service.setState(ServiceState.STOPPED);\r\n        String buffer = jsonSerDeser.toJson(service);\r\n        ClientResponse response = getApiClient().post(ClientResponse.class, buffer);\r\n        result = processResponse(response);\r\n    } catch (Exception e) {\r\n        LOG.error(\"Fail to save application: \", e);\r\n        result = EXIT_EXCEPTION_THROWN;\r\n    }\r\n    return result;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "actionDestroy",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int actionDestroy(String appName) throws IOException, YarnException\n{\r\n    int result = EXIT_SUCCESS;\r\n    try {\r\n        ClientResponse response = getApiClient(getServicePath(appName)).delete(ClientResponse.class);\r\n        result = processResponse(response);\r\n    } catch (Exception e) {\r\n        LOG.error(\"Fail to destroy application: \", e);\r\n        result = EXIT_EXCEPTION_THROWN;\r\n    }\r\n    return result;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "actionFlex",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "int actionFlex(String appName, Map<String, String> componentCounts) throws IOException, YarnException\n{\r\n    int result = EXIT_SUCCESS;\r\n    try {\r\n        Service service = new Service();\r\n        service.setName(appName);\r\n        service.setState(ServiceState.FLEX);\r\n        for (Map.Entry<String, String> entry : componentCounts.entrySet()) {\r\n            Component component = new Component();\r\n            component.setName(entry.getKey());\r\n            Long numberOfContainers = Long.parseLong(entry.getValue());\r\n            component.setNumberOfContainers(numberOfContainers);\r\n            service.addComponent(component);\r\n        }\r\n        String buffer = jsonSerDeser.toJson(service);\r\n        ClientResponse response = getApiClient(getServicePath(appName)).put(ClientResponse.class, buffer);\r\n        result = processResponse(response);\r\n    } catch (Exception e) {\r\n        LOG.error(\"Fail to flex application: \", e);\r\n        result = EXIT_EXCEPTION_THROWN;\r\n    }\r\n    return result;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "enableFastLaunch",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "int enableFastLaunch(String destinationFolder) throws IOException, YarnException\n{\r\n    ServiceClient sc = new ServiceClient();\r\n    sc.init(getConfig());\r\n    sc.start();\r\n    int result = sc.enableFastLaunch(destinationFolder);\r\n    sc.close();\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "getStatusString",
  "errType" : [ "IllegalArgumentException", "Exception" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "String getStatusString(String appIdOrName) throws IOException, YarnException\n{\r\n    String output = \"\";\r\n    String appName;\r\n    try {\r\n        ApplicationId appId = ApplicationId.fromString(appIdOrName);\r\n        ApplicationReport appReport = yarnClient.getApplicationReport(appId);\r\n        appName = appReport.getName();\r\n    } catch (IllegalArgumentException e) {\r\n        appName = appIdOrName;\r\n        ServiceApiUtil.validateNameFormat(appName, getConfig());\r\n    }\r\n    try {\r\n        ClientResponse response = getApiClient(getServicePath(appName)).get(ClientResponse.class);\r\n        if (response.getStatus() == 404) {\r\n            StringBuilder sb = new StringBuilder();\r\n            sb.append(\" Service \").append(appName).append(\" not found\");\r\n            return sb.toString();\r\n        }\r\n        if (response.getStatus() != 200) {\r\n            StringBuilder sb = new StringBuilder();\r\n            sb.append(appName).append(\" Failed : HTTP error code : \").append(response.getStatus());\r\n            return sb.toString();\r\n        }\r\n        output = response.getEntity(String.class);\r\n    } catch (Exception e) {\r\n        LOG.error(\"Fail to check application status: \", e);\r\n    }\r\n    return output;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "actionUpgradeExpress",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "int actionUpgradeExpress(String appName, File path) throws IOException, YarnException\n{\r\n    int result;\r\n    try {\r\n        Service service = loadAppJsonFromLocalFS(path.getAbsolutePath(), appName, null, null);\r\n        service.setState(ServiceState.EXPRESS_UPGRADING);\r\n        String buffer = jsonSerDeser.toJson(service);\r\n        LOG.info(\"Upgrade in progress. Please wait..\");\r\n        ClientResponse response = getApiClient(getServicePath(appName)).put(ClientResponse.class, buffer);\r\n        result = processResponse(response);\r\n    } catch (Exception e) {\r\n        LOG.error(\"Failed to upgrade application: \", e);\r\n        result = EXIT_EXCEPTION_THROWN;\r\n    }\r\n    return result;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "initiateUpgrade",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "int initiateUpgrade(String appName, String fileName, boolean autoFinalize) throws IOException, YarnException\n{\r\n    int result;\r\n    try {\r\n        Service service = loadAppJsonFromLocalFS(fileName, appName, null, null);\r\n        if (autoFinalize) {\r\n            service.setState(ServiceState.UPGRADING_AUTO_FINALIZE);\r\n        } else {\r\n            service.setState(ServiceState.UPGRADING);\r\n        }\r\n        String buffer = jsonSerDeser.toJson(service);\r\n        ClientResponse response = getApiClient(getServicePath(appName)).put(ClientResponse.class, buffer);\r\n        result = processResponse(response);\r\n    } catch (Exception e) {\r\n        LOG.error(\"Failed to upgrade application: \", e);\r\n        result = EXIT_EXCEPTION_THROWN;\r\n    }\r\n    return result;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "actionUpgradeInstances",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "int actionUpgradeInstances(String appName, List<String> compInstances) throws IOException, YarnException\n{\r\n    int result;\r\n    Container[] toUpgrade = new Container[compInstances.size()];\r\n    try {\r\n        int idx = 0;\r\n        for (String instanceName : compInstances) {\r\n            Container container = new Container();\r\n            container.setComponentInstanceName(instanceName);\r\n            container.setState(ContainerState.UPGRADING);\r\n            toUpgrade[idx++] = container;\r\n        }\r\n        String buffer = ServiceApiUtil.CONTAINER_JSON_SERDE.toJson(toUpgrade);\r\n        ClientResponse response = getApiClient(getInstancesPath(appName)).put(ClientResponse.class, buffer);\r\n        result = processResponse(response);\r\n    } catch (Exception e) {\r\n        LOG.error(\"Failed to upgrade component instance: \", e);\r\n        result = EXIT_EXCEPTION_THROWN;\r\n    }\r\n    return result;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "actionUpgradeComponents",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "int actionUpgradeComponents(String appName, List<String> components) throws IOException, YarnException\n{\r\n    int result;\r\n    Component[] toUpgrade = new Component[components.size()];\r\n    try {\r\n        int idx = 0;\r\n        for (String compName : components) {\r\n            Component component = new Component();\r\n            component.setName(compName);\r\n            component.setState(ComponentState.UPGRADING);\r\n            toUpgrade[idx++] = component;\r\n        }\r\n        String buffer = ServiceApiUtil.COMP_JSON_SERDE.toJson(toUpgrade);\r\n        ClientResponse response = getApiClient(getComponentsPath(appName)).put(ClientResponse.class, buffer);\r\n        result = processResponse(response);\r\n    } catch (Exception e) {\r\n        LOG.error(\"Failed to upgrade components: \", e);\r\n        result = EXIT_EXCEPTION_THROWN;\r\n    }\r\n    return result;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "actionCleanUp",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "int actionCleanUp(String appName, String userName) throws IOException, YarnException, InterruptedException\n{\r\n    UserGroupInformation proxyUser;\r\n    UserGroupInformation ugi;\r\n    if (UserGroupInformation.isSecurityEnabled()) {\r\n        proxyUser = UserGroupInformation.getLoginUser();\r\n        ugi = UserGroupInformation.createProxyUser(userName, proxyUser);\r\n    } else {\r\n        ugi = UserGroupInformation.createRemoteUser(userName);\r\n    }\r\n    return ugi.doAs((PrivilegedExceptionAction<Integer>) () -> {\r\n        ServiceClient sc = new ServiceClient();\r\n        try {\r\n            sc.init(getConfig());\r\n            sc.start();\r\n            int result = sc.actionCleanUp(appName, userName);\r\n            return result;\r\n        } finally {\r\n            sc.close();\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "getInstances",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "String getInstances(String appName, List<String> components, String version, List<String> containerStates) throws IOException, YarnException\n{\r\n    try {\r\n        String uri = getInstancePath(appName, components, version, containerStates);\r\n        ClientResponse response = getApiClient(uri).get(ClientResponse.class);\r\n        if (response.getStatus() != 200) {\r\n            StringBuilder sb = new StringBuilder();\r\n            sb.append(\"Failed: HTTP error code: \").append(response.getStatus()).append(\" ErrorMsg: \").append(response.getEntity(String.class));\r\n            return sb.toString();\r\n        }\r\n        return response.getEntity(String.class);\r\n    } catch (Exception e) {\r\n        LOG.error(\"Fail to get containers {}\", e);\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "actionCancelUpgrade",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "int actionCancelUpgrade(String appName) throws IOException, YarnException\n{\r\n    int result;\r\n    try {\r\n        Service service = new Service();\r\n        service.setName(appName);\r\n        service.setState(ServiceState.CANCEL_UPGRADING);\r\n        String buffer = jsonSerDeser.toJson(service);\r\n        LOG.info(\"Cancel upgrade in progress. Please wait..\");\r\n        ClientResponse response = getApiClient(getServicePath(appName)).put(ClientResponse.class, buffer);\r\n        result = processResponse(response);\r\n    } catch (Exception e) {\r\n        LOG.error(\"Failed to cancel upgrade: \", e);\r\n        result = EXIT_EXCEPTION_THROWN;\r\n    }\r\n    return result;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "actionDecommissionInstances",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "int actionDecommissionInstances(String appName, List<String> componentInstances) throws IOException, YarnException\n{\r\n    int result = EXIT_SUCCESS;\r\n    try {\r\n        Service service = new Service();\r\n        service.setName(appName);\r\n        for (String instance : componentInstances) {\r\n            String componentName = ServiceApiUtil.parseComponentName(instance);\r\n            Component component = service.getComponent(componentName);\r\n            if (component == null) {\r\n                component = new Component();\r\n                component.setName(componentName);\r\n                service.addComponent(component);\r\n            }\r\n            component.addDecommissionedInstance(instance);\r\n        }\r\n        String buffer = jsonSerDeser.toJson(service);\r\n        ClientResponse response = getApiClient(getServicePath(appName)).put(ClientResponse.class, buffer);\r\n        result = processResponse(response);\r\n    } catch (Exception e) {\r\n        LOG.error(\"Fail to decommission instance: \", e);\r\n        result = EXIT_EXCEPTION_THROWN;\r\n    }\r\n    return result;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\webapp",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void init()\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\webapp",
  "methodName" : "getVersion",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Response getVersion()\n{\r\n    String version = VersionInfo.getBuildVersion();\r\n    LOG.info(version);\r\n    return Response.ok(\"{ \\\"hadoop_version\\\": \\\"\" + version + \"\\\"}\").build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\webapp",
  "methodName" : "createService",
  "errType" : [ "AccessControlException", "IllegalArgumentException", "IOException|InterruptedException", "UndeclaredThrowableException" ],
  "containingMethodsNum" : 22,
  "sourceCodeText" : "Response createService(@Context HttpServletRequest request, Service service)\n{\r\n    ServiceStatus serviceStatus = new ServiceStatus();\r\n    try {\r\n        UserGroupInformation ugi = getProxyUser(request);\r\n        LOG.info(\"POST: createService = {} user = {}\", service, ugi);\r\n        if (service.getState() == ServiceState.STOPPED) {\r\n            ugi.doAs(new PrivilegedExceptionAction<Void>() {\r\n\r\n                @Override\r\n                public Void run() throws YarnException, IOException {\r\n                    ServiceClient sc = getServiceClient();\r\n                    try {\r\n                        sc.init(YARN_CONFIG);\r\n                        sc.start();\r\n                        sc.actionBuild(service);\r\n                    } finally {\r\n                        sc.close();\r\n                    }\r\n                    return null;\r\n                }\r\n            });\r\n            serviceStatus.setDiagnostics(\"Service \" + service.getName() + \" version \" + service.getVersion() + \" saved.\");\r\n        } else {\r\n            ApplicationId applicationId = ugi.doAs(new PrivilegedExceptionAction<ApplicationId>() {\r\n\r\n                @Override\r\n                public ApplicationId run() throws IOException, YarnException {\r\n                    ServiceClient sc = getServiceClient();\r\n                    try {\r\n                        sc.init(YARN_CONFIG);\r\n                        sc.start();\r\n                        ApplicationId applicationId = sc.actionCreate(service);\r\n                        return applicationId;\r\n                    } finally {\r\n                        sc.close();\r\n                    }\r\n                }\r\n            });\r\n            serviceStatus.setDiagnostics(\"Application ID: \" + applicationId);\r\n        }\r\n        serviceStatus.setState(ACCEPTED);\r\n        serviceStatus.setUri(CONTEXT_ROOT + SERVICE_ROOT_PATH + \"/\" + service.getName());\r\n        return formatResponse(Status.ACCEPTED, serviceStatus);\r\n    } catch (AccessControlException e) {\r\n        serviceStatus.setDiagnostics(e.getMessage());\r\n        return formatResponse(Status.FORBIDDEN, e.getCause().getMessage());\r\n    } catch (IllegalArgumentException e) {\r\n        return formatResponse(Status.BAD_REQUEST, e.getMessage());\r\n    } catch (IOException | InterruptedException e) {\r\n        String message = \"Failed to create service \" + service.getName() + \": {}\";\r\n        LOG.error(message, e);\r\n        return formatResponse(Status.INTERNAL_SERVER_ERROR, e.getMessage());\r\n    } catch (UndeclaredThrowableException e) {\r\n        String message = \"Failed to create service \" + service.getName() + \": {}\";\r\n        LOG.error(message, e);\r\n        if (e.getCause().getMessage().contains(\"already exists\")) {\r\n            message = \"Service name \" + service.getName() + \" is already taken.\";\r\n        } else {\r\n            message = e.getCause().getMessage();\r\n        }\r\n        return formatResponse(Status.INTERNAL_SERVER_ERROR, message);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 3,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\webapp",
  "methodName" : "getService",
  "errType" : [ "AccessControlException", "IllegalArgumentException", "FileNotFoundException", "IOException|InterruptedException", "UndeclaredThrowableException" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "Response getService(@Context HttpServletRequest request, @PathParam(SERVICE_NAME) String appName)\n{\r\n    ServiceStatus serviceStatus = new ServiceStatus();\r\n    try {\r\n        if (appName == null) {\r\n            throw new IllegalArgumentException(\"Service name cannot be null.\");\r\n        }\r\n        UserGroupInformation ugi = getProxyUser(request);\r\n        LOG.info(\"GET: getService for appName = {} user = {}\", appName, ugi);\r\n        Service app = getServiceFromClient(ugi, appName);\r\n        return Response.ok(app).build();\r\n    } catch (AccessControlException e) {\r\n        return formatResponse(Status.FORBIDDEN, e.getMessage());\r\n    } catch (IllegalArgumentException e) {\r\n        serviceStatus.setDiagnostics(e.getMessage());\r\n        serviceStatus.setCode(ERROR_CODE_APP_NAME_INVALID);\r\n        return Response.status(Status.NOT_FOUND).entity(serviceStatus).build();\r\n    } catch (FileNotFoundException e) {\r\n        serviceStatus.setDiagnostics(\"Service \" + appName + \" not found\");\r\n        serviceStatus.setCode(ERROR_CODE_APP_NAME_INVALID);\r\n        return Response.status(Status.NOT_FOUND).entity(serviceStatus).build();\r\n    } catch (IOException | InterruptedException e) {\r\n        LOG.error(\"Get service failed: {}\", e);\r\n        return formatResponse(Status.INTERNAL_SERVER_ERROR, e.getMessage());\r\n    } catch (UndeclaredThrowableException e) {\r\n        LOG.error(\"Get service failed: {}\", e);\r\n        return formatResponse(Status.INTERNAL_SERVER_ERROR, e.getCause().getMessage());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\webapp",
  "methodName" : "deleteService",
  "errType" : [ "AccessControlException", "IllegalArgumentException", "UndeclaredThrowableException", "YarnException|FileNotFoundException", "Exception" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "Response deleteService(@Context HttpServletRequest request, @PathParam(SERVICE_NAME) String appName)\n{\r\n    try {\r\n        if (appName == null) {\r\n            throw new IllegalArgumentException(\"Service name can not be null.\");\r\n        }\r\n        UserGroupInformation ugi = getProxyUser(request);\r\n        LOG.info(\"DELETE: deleteService for appName = {} user = {}\", appName, ugi);\r\n        return stopService(appName, true, ugi);\r\n    } catch (AccessControlException e) {\r\n        return formatResponse(Status.FORBIDDEN, e.getMessage());\r\n    } catch (IllegalArgumentException e) {\r\n        return formatResponse(Status.BAD_REQUEST, e.getMessage());\r\n    } catch (UndeclaredThrowableException e) {\r\n        LOG.error(\"Fail to stop service: {}\", e);\r\n        return formatResponse(Status.BAD_REQUEST, e.getCause().getMessage());\r\n    } catch (YarnException | FileNotFoundException e) {\r\n        return formatResponse(Status.NOT_FOUND, e.getMessage());\r\n    } catch (Exception e) {\r\n        LOG.error(\"Fail to stop service: {}\", e);\r\n        return formatResponse(Status.INTERNAL_SERVER_ERROR, e.getMessage());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\webapp",
  "methodName" : "stopService",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "Response stopService(String appName, boolean destroy, final UserGroupInformation ugi) throws Exception\n{\r\n    int result = ugi.doAs(new PrivilegedExceptionAction<Integer>() {\r\n\r\n        @Override\r\n        public Integer run() throws Exception {\r\n            int result = 0;\r\n            ServiceClient sc = getServiceClient();\r\n            try {\r\n                sc.init(YARN_CONFIG);\r\n                sc.start();\r\n                Exception stopException = null;\r\n                try {\r\n                    result = sc.actionStop(appName, destroy);\r\n                    if (result == EXIT_SUCCESS) {\r\n                        LOG.info(\"Successfully stopped service {}\", appName);\r\n                    }\r\n                } catch (Exception e) {\r\n                    LOG.info(\"Got exception stopping service\", e);\r\n                    stopException = e;\r\n                }\r\n                if (destroy) {\r\n                    result = sc.actionDestroy(appName);\r\n                    if (result == EXIT_SUCCESS) {\r\n                        LOG.info(\"Successfully deleted service {}\", appName);\r\n                    }\r\n                } else {\r\n                    if (stopException != null) {\r\n                        throw stopException;\r\n                    }\r\n                }\r\n            } finally {\r\n                sc.close();\r\n            }\r\n            return result;\r\n        }\r\n    });\r\n    ServiceStatus serviceStatus = new ServiceStatus();\r\n    if (destroy) {\r\n        if (result == EXIT_SUCCESS) {\r\n            serviceStatus.setDiagnostics(\"Successfully destroyed service \" + appName);\r\n        } else {\r\n            if (result == EXIT_NOT_FOUND) {\r\n                serviceStatus.setDiagnostics(\"Service \" + appName + \" doesn't exist\");\r\n                return formatResponse(Status.BAD_REQUEST, serviceStatus);\r\n            } else {\r\n                serviceStatus.setDiagnostics(\"Service \" + appName + \" error cleaning up \" + \"registry\");\r\n                return formatResponse(Status.INTERNAL_SERVER_ERROR, serviceStatus);\r\n            }\r\n        }\r\n    } else {\r\n        if (result == EXIT_COMMAND_ARGUMENT_ERROR) {\r\n            serviceStatus.setDiagnostics(\"Service \" + appName + \" is already stopped\");\r\n            return formatResponse(Status.BAD_REQUEST, serviceStatus);\r\n        } else {\r\n            serviceStatus.setDiagnostics(\"Successfully stopped service \" + appName);\r\n        }\r\n    }\r\n    return formatResponse(Status.OK, serviceStatus);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\webapp",
  "methodName" : "updateComponents",
  "errType" : [ "AccessControlException", "YarnException", "IOException|InterruptedException", "UndeclaredThrowableException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "Response updateComponents(@Context HttpServletRequest request, @PathParam(SERVICE_NAME) String serviceName, List<Component> requestComponents)\n{\r\n    try {\r\n        if (requestComponents == null || requestComponents.isEmpty()) {\r\n            throw new YarnException(\"No components provided.\");\r\n        }\r\n        UserGroupInformation ugi = getProxyUser(request);\r\n        Set<String> compNamesToUpgrade = new HashSet<>();\r\n        requestComponents.forEach(reqComp -> {\r\n            if (reqComp.getState() != null && reqComp.getState().equals(ComponentState.UPGRADING)) {\r\n                compNamesToUpgrade.add(reqComp.getName());\r\n            }\r\n        });\r\n        LOG.info(\"PUT: upgrade components {} for service {} \" + \"user = {}\", compNamesToUpgrade, serviceName, ugi);\r\n        return processComponentsUpgrade(ugi, serviceName, compNamesToUpgrade);\r\n    } catch (AccessControlException e) {\r\n        return formatResponse(Response.Status.FORBIDDEN, e.getMessage());\r\n    } catch (YarnException e) {\r\n        return formatResponse(Response.Status.BAD_REQUEST, e.getMessage());\r\n    } catch (IOException | InterruptedException e) {\r\n        return formatResponse(Response.Status.INTERNAL_SERVER_ERROR, e.getMessage());\r\n    } catch (UndeclaredThrowableException e) {\r\n        return formatResponse(Response.Status.INTERNAL_SERVER_ERROR, e.getCause().getMessage());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\webapp",
  "methodName" : "updateComponent",
  "errType" : [ "AccessControlException", "YarnException", "IOException|InterruptedException", "UndeclaredThrowableException" ],
  "containingMethodsNum" : 18,
  "sourceCodeText" : "Response updateComponent(@Context HttpServletRequest request, @PathParam(SERVICE_NAME) String appName, @PathParam(COMPONENT_NAME) String componentName, Component component)\n{\r\n    try {\r\n        if (component == null) {\r\n            throw new YarnException(\"No component data provided\");\r\n        }\r\n        if (component.getName() != null && !component.getName().equals(componentName)) {\r\n            String msg = \"Component name in the request object (\" + component.getName() + \") does not match that in the URI path (\" + componentName + \")\";\r\n            throw new YarnException(msg);\r\n        }\r\n        UserGroupInformation ugi = getProxyUser(request);\r\n        if (component.getState() != null && component.getState().equals(ComponentState.UPGRADING)) {\r\n            LOG.info(\"PUT: upgrade component {} for service {} \" + \"user = {}\", component.getName(), appName, ugi);\r\n            return processComponentsUpgrade(ugi, appName, Sets.newHashSet(componentName));\r\n        }\r\n        if (component.getNumberOfContainers() == null) {\r\n            throw new YarnException(\"No container count provided\");\r\n        }\r\n        if (component.getNumberOfContainers() < 0) {\r\n            String message = \"Invalid number of containers specified \" + component.getNumberOfContainers();\r\n            throw new YarnException(message);\r\n        }\r\n        Map<String, Long> original = ugi.doAs(new PrivilegedExceptionAction<Map<String, Long>>() {\r\n\r\n            @Override\r\n            public Map<String, Long> run() throws YarnException, IOException {\r\n                ServiceClient sc = new ServiceClient();\r\n                try {\r\n                    sc.init(YARN_CONFIG);\r\n                    sc.start();\r\n                    Map<String, Long> original = sc.flexByRestService(appName, Collections.singletonMap(componentName, component.getNumberOfContainers()));\r\n                    return original;\r\n                } finally {\r\n                    sc.close();\r\n                }\r\n            }\r\n        });\r\n        ServiceStatus status = new ServiceStatus();\r\n        status.setDiagnostics(\"Updating component (\" + componentName + \") size from \" + original.get(componentName) + \" to \" + component.getNumberOfContainers());\r\n        return formatResponse(Status.OK, status);\r\n    } catch (AccessControlException e) {\r\n        return formatResponse(Status.FORBIDDEN, e.getMessage());\r\n    } catch (YarnException e) {\r\n        return formatResponse(Status.BAD_REQUEST, e.getMessage());\r\n    } catch (IOException | InterruptedException e) {\r\n        return formatResponse(Status.INTERNAL_SERVER_ERROR, e.getMessage());\r\n    } catch (UndeclaredThrowableException e) {\r\n        return formatResponse(Status.INTERNAL_SERVER_ERROR, e.getCause().getMessage());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\webapp",
  "methodName" : "updateService",
  "errType" : [ "UndeclaredThrowableException", "AccessControlException", "FileNotFoundException", "YarnException", "Exception" ],
  "containingMethodsNum" : 35,
  "sourceCodeText" : "Response updateService(@Context HttpServletRequest request, @PathParam(SERVICE_NAME) String appName, Service updateServiceData)\n{\r\n    try {\r\n        UserGroupInformation ugi = getProxyUser(request);\r\n        LOG.info(\"PUT: updateService for app = {} with data = {} user = {}\", appName, updateServiceData, ugi);\r\n        updateServiceData.setName(appName);\r\n        if (updateServiceData.getState() != null && updateServiceData.getState() == ServiceState.FLEX) {\r\n            return flexService(updateServiceData, ugi);\r\n        }\r\n        if (updateServiceData.getState() != null && updateServiceData.getState() == ServiceState.STOPPED) {\r\n            return stopService(appName, false, ugi);\r\n        }\r\n        if (updateServiceData.getState() != null && updateServiceData.getState() == ServiceState.STARTED) {\r\n            return startService(appName, ugi);\r\n        }\r\n        if (updateServiceData.getState() != null && (updateServiceData.getState() == ServiceState.UPGRADING || updateServiceData.getState() == ServiceState.UPGRADING_AUTO_FINALIZE) || updateServiceData.getState() == ServiceState.EXPRESS_UPGRADING) {\r\n            return upgradeService(updateServiceData, ugi);\r\n        }\r\n        if (updateServiceData.getState() != null && updateServiceData.getState() == CANCEL_UPGRADING) {\r\n            return cancelUpgradeService(appName, ugi);\r\n        }\r\n        if (updateServiceData.getLifetime() != null && updateServiceData.getLifetime() > 0) {\r\n            return updateLifetime(appName, updateServiceData, ugi);\r\n        }\r\n        for (Component c : updateServiceData.getComponents()) {\r\n            if (c.getDecommissionedInstances().size() > 0) {\r\n                return decommissionInstances(updateServiceData, ugi);\r\n            }\r\n        }\r\n    } catch (UndeclaredThrowableException e) {\r\n        return formatResponse(Status.BAD_REQUEST, e.getCause().getMessage());\r\n    } catch (AccessControlException e) {\r\n        return formatResponse(Status.FORBIDDEN, e.getMessage());\r\n    } catch (FileNotFoundException e) {\r\n        String message = \"Application is not found app: \" + appName;\r\n        LOG.error(message, e);\r\n        return formatResponse(Status.NOT_FOUND, e.getMessage());\r\n    } catch (YarnException e) {\r\n        LOG.error(e.getMessage(), e);\r\n        return formatResponse(Status.NOT_FOUND, e.getMessage());\r\n    } catch (Exception e) {\r\n        String message = \"Error while performing operation for app: \" + appName;\r\n        LOG.error(message, e);\r\n        return formatResponse(Status.INTERNAL_SERVER_ERROR, e.getMessage());\r\n    }\r\n    return Response.status(Status.NO_CONTENT).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\webapp",
  "methodName" : "updateComponentInstance",
  "errType" : [ "AccessControlException", "YarnException", "IOException|InterruptedException", "UndeclaredThrowableException" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "Response updateComponentInstance(@Context HttpServletRequest request, @PathParam(SERVICE_NAME) String serviceName, @PathParam(COMPONENT_NAME) String componentName, @PathParam(COMP_INSTANCE_NAME) String compInstanceName, Container reqContainer)\n{\r\n    try {\r\n        UserGroupInformation ugi = getProxyUser(request);\r\n        LOG.info(\"PUT: update component instance {} for component = {}\" + \" service = {} user = {}\", compInstanceName, componentName, serviceName, ugi);\r\n        if (reqContainer == null) {\r\n            throw new YarnException(\"No container data provided.\");\r\n        }\r\n        Service service = getServiceFromClient(ugi, serviceName);\r\n        Component component = service.getComponent(componentName);\r\n        if (component == null) {\r\n            throw new YarnException(String.format(\"The component name in the URI path (%s) is invalid.\", componentName));\r\n        }\r\n        Container liveContainer = component.getComponentInstance(compInstanceName);\r\n        if (liveContainer == null) {\r\n            throw new YarnException(String.format(\"The component (%s) does not have a component instance (%s).\", componentName, compInstanceName));\r\n        }\r\n        if (reqContainer.getState() != null && reqContainer.getState().equals(ContainerState.UPGRADING)) {\r\n            return processContainersUpgrade(ugi, service, Lists.newArrayList(liveContainer));\r\n        }\r\n    } catch (AccessControlException e) {\r\n        return formatResponse(Response.Status.FORBIDDEN, e.getMessage());\r\n    } catch (YarnException e) {\r\n        return formatResponse(Response.Status.BAD_REQUEST, e.getMessage());\r\n    } catch (IOException | InterruptedException e) {\r\n        return formatResponse(Response.Status.INTERNAL_SERVER_ERROR, e.getMessage());\r\n    } catch (UndeclaredThrowableException e) {\r\n        return formatResponse(Response.Status.INTERNAL_SERVER_ERROR, e.getCause().getMessage());\r\n    }\r\n    return Response.status(Status.NO_CONTENT).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\webapp",
  "methodName" : "updateComponentInstances",
  "errType" : [ "AccessControlException", "YarnException", "IOException|InterruptedException", "UndeclaredThrowableException" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "Response updateComponentInstances(@Context HttpServletRequest request, @PathParam(SERVICE_NAME) String serviceName, List<Container> requestContainers)\n{\r\n    try {\r\n        if (requestContainers == null || requestContainers.isEmpty()) {\r\n            throw new YarnException(\"No containers provided.\");\r\n        }\r\n        UserGroupInformation ugi = getProxyUser(request);\r\n        List<String> toUpgrade = new ArrayList<>();\r\n        for (Container reqContainer : requestContainers) {\r\n            if (reqContainer.getState() != null && reqContainer.getState().equals(ContainerState.UPGRADING)) {\r\n                toUpgrade.add(reqContainer.getComponentInstanceName());\r\n            }\r\n        }\r\n        if (!toUpgrade.isEmpty()) {\r\n            Service service = getServiceFromClient(ugi, serviceName);\r\n            LOG.info(\"PUT: upgrade component instances {} for service = {} \" + \"user = {}\", toUpgrade, serviceName, ugi);\r\n            List<Container> liveContainers = ServiceApiUtil.getLiveContainers(service, toUpgrade);\r\n            return processContainersUpgrade(ugi, service, liveContainers);\r\n        }\r\n    } catch (AccessControlException e) {\r\n        return formatResponse(Response.Status.FORBIDDEN, e.getMessage());\r\n    } catch (YarnException e) {\r\n        return formatResponse(Response.Status.BAD_REQUEST, e.getMessage());\r\n    } catch (IOException | InterruptedException e) {\r\n        return formatResponse(Response.Status.INTERNAL_SERVER_ERROR, e.getMessage());\r\n    } catch (UndeclaredThrowableException e) {\r\n        return formatResponse(Response.Status.INTERNAL_SERVER_ERROR, e.getCause().getMessage());\r\n    }\r\n    return Response.status(Status.NO_CONTENT).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\webapp",
  "methodName" : "getComponentInstances",
  "errType" : [ "IllegalArgumentException", "AccessControlException", "IOException|InterruptedException", "UndeclaredThrowableException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "Response getComponentInstances(@Context HttpServletRequest request, @PathParam(SERVICE_NAME) String serviceName, @QueryParam(PARAM_COMP_NAME) List<String> componentNames, @QueryParam(PARAM_VERSION) String version, @QueryParam(PARAM_CONTAINER_STATE) List<String> containerStates)\n{\r\n    try {\r\n        UserGroupInformation ugi = getProxyUser(request);\r\n        LOG.info(\"GET: component instances for service = {}, compNames in {}, \" + \"version = {}, containerStates in {}, user = {}\", serviceName, Objects.toString(componentNames, \"[]\"), Objects.toString(version, \"\"), Objects.toString(containerStates, \"[]\"), ugi);\r\n        List<ContainerState> containerStatesDe = containerStates.stream().map(ContainerState::valueOf).collect(Collectors.toList());\r\n        return Response.ok(getContainers(ugi, serviceName, componentNames, version, containerStatesDe)).build();\r\n    } catch (IllegalArgumentException iae) {\r\n        return formatResponse(Status.BAD_REQUEST, \"valid container states are: \" + Arrays.toString(ContainerState.values()));\r\n    } catch (AccessControlException e) {\r\n        return formatResponse(Response.Status.FORBIDDEN, e.getMessage());\r\n    } catch (IOException | InterruptedException e) {\r\n        return formatResponse(Response.Status.INTERNAL_SERVER_ERROR, e.getMessage());\r\n    } catch (UndeclaredThrowableException e) {\r\n        return formatResponse(Response.Status.INTERNAL_SERVER_ERROR, e.getCause().getMessage());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\webapp",
  "methodName" : "flexService",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "Response flexService(Service service, UserGroupInformation ugi) throws IOException, InterruptedException\n{\r\n    String appName = service.getName();\r\n    Response response = Response.status(Status.BAD_REQUEST).build();\r\n    Map<String, String> componentCountStrings = new HashMap<String, String>();\r\n    for (Component c : service.getComponents()) {\r\n        componentCountStrings.put(c.getName(), c.getNumberOfContainers().toString());\r\n    }\r\n    Integer result = ugi.doAs(new PrivilegedExceptionAction<Integer>() {\r\n\r\n        @Override\r\n        public Integer run() throws YarnException, IOException {\r\n            int result = 0;\r\n            ServiceClient sc = new ServiceClient();\r\n            try {\r\n                sc.init(YARN_CONFIG);\r\n                sc.start();\r\n                result = sc.actionFlex(appName, componentCountStrings);\r\n                return Integer.valueOf(result);\r\n            } finally {\r\n                sc.close();\r\n            }\r\n        }\r\n    });\r\n    if (result == EXIT_SUCCESS) {\r\n        String message = \"Service \" + appName + \" is successfully flexed.\";\r\n        LOG.info(message);\r\n        ServiceStatus status = new ServiceStatus();\r\n        status.setDiagnostics(message);\r\n        status.setState(ServiceState.ACCEPTED);\r\n        response = formatResponse(Status.ACCEPTED, status);\r\n    }\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\webapp",
  "methodName" : "updateLifetime",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Response updateLifetime(String appName, Service updateAppData, final UserGroupInformation ugi) throws IOException, InterruptedException\n{\r\n    String newLifeTime = ugi.doAs(new PrivilegedExceptionAction<String>() {\r\n\r\n        @Override\r\n        public String run() throws YarnException, IOException {\r\n            ServiceClient sc = getServiceClient();\r\n            try {\r\n                sc.init(YARN_CONFIG);\r\n                sc.start();\r\n                String newLifeTime = sc.updateLifetime(appName, updateAppData.getLifetime());\r\n                return newLifeTime;\r\n            } finally {\r\n                sc.close();\r\n            }\r\n        }\r\n    });\r\n    ServiceStatus status = new ServiceStatus();\r\n    status.setDiagnostics(\"Service (\" + appName + \")'s lifeTime is updated to \" + newLifeTime + \", \" + updateAppData.getLifetime() + \" seconds remaining\");\r\n    return formatResponse(Status.OK, status);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\webapp",
  "methodName" : "startService",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Response startService(String appName, final UserGroupInformation ugi) throws IOException, InterruptedException\n{\r\n    ApplicationId appId = ugi.doAs(new PrivilegedExceptionAction<ApplicationId>() {\r\n\r\n        @Override\r\n        public ApplicationId run() throws YarnException, IOException {\r\n            ServiceClient sc = getServiceClient();\r\n            try {\r\n                sc.init(YARN_CONFIG);\r\n                sc.start();\r\n                ApplicationId appId = sc.actionStartAndGetId(appName);\r\n                return appId;\r\n            } finally {\r\n                sc.close();\r\n            }\r\n        }\r\n    });\r\n    LOG.info(\"Successfully started service \" + appName);\r\n    ServiceStatus status = new ServiceStatus();\r\n    status.setDiagnostics(\"Service \" + appName + \" is successfully started with ApplicationId: \" + appId);\r\n    status.setState(ServiceState.ACCEPTED);\r\n    return formatResponse(Status.OK, status);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\webapp",
  "methodName" : "upgradeService",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Response upgradeService(Service service, final UserGroupInformation ugi) throws IOException, InterruptedException\n{\r\n    ServiceStatus status = new ServiceStatus();\r\n    ugi.doAs((PrivilegedExceptionAction<Void>) () -> {\r\n        ServiceClient sc = getServiceClient();\r\n        try {\r\n            sc.init(YARN_CONFIG);\r\n            sc.start();\r\n            if (service.getState().equals(ServiceState.EXPRESS_UPGRADING)) {\r\n                sc.actionUpgradeExpress(service);\r\n            } else {\r\n                sc.initiateUpgrade(service);\r\n            }\r\n        } finally {\r\n            sc.close();\r\n        }\r\n        return null;\r\n    });\r\n    LOG.info(\"Service {} version {} upgrade initialized\", service.getName(), service.getVersion());\r\n    status.setDiagnostics(\"Service \" + service.getName() + \" version \" + service.getVersion() + \" saved.\");\r\n    status.setState(ServiceState.ACCEPTED);\r\n    return formatResponse(Status.ACCEPTED, status);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\webapp",
  "methodName" : "cancelUpgradeService",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "Response cancelUpgradeService(String serviceName, final UserGroupInformation ugi) throws IOException, InterruptedException\n{\r\n    int result = ugi.doAs((PrivilegedExceptionAction<Integer>) () -> {\r\n        ServiceClient sc = getServiceClient();\r\n        try {\r\n            sc.init(YARN_CONFIG);\r\n            sc.start();\r\n            int exitCode = sc.actionCancelUpgrade(serviceName);\r\n            return exitCode;\r\n        } finally {\r\n            sc.close();\r\n        }\r\n    });\r\n    if (result == EXIT_SUCCESS) {\r\n        ServiceStatus status = new ServiceStatus();\r\n        LOG.info(\"Service {} cancelling upgrade\", serviceName);\r\n        status.setDiagnostics(\"Service \" + serviceName + \" cancelling upgrade.\");\r\n        status.setState(ServiceState.ACCEPTED);\r\n        return formatResponse(Status.ACCEPTED, status);\r\n    }\r\n    return Response.status(Status.BAD_REQUEST).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\webapp",
  "methodName" : "processComponentsUpgrade",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "Response processComponentsUpgrade(UserGroupInformation ugi, String serviceName, Set<String> compNames) throws YarnException, IOException, InterruptedException\n{\r\n    Service service = getServiceFromClient(ugi, serviceName);\r\n    if (!service.getState().equals(ServiceState.UPGRADING) && !service.getState().equals(ServiceState.UPGRADING_AUTO_FINALIZE)) {\r\n        throw new YarnException(String.format(\"The upgrade of service %s has not been initiated.\", service.getName()));\r\n    }\r\n    List<Container> containersToUpgrade = ServiceApiUtil.validateAndResolveCompsUpgrade(service, compNames);\r\n    Integer result = invokeContainersUpgrade(ugi, service, containersToUpgrade);\r\n    if (result == EXIT_SUCCESS) {\r\n        ServiceStatus status = new ServiceStatus();\r\n        status.setDiagnostics(\"Upgrading components \" + Joiner.on(',').join(compNames) + \".\");\r\n        return formatResponse(Response.Status.ACCEPTED, status);\r\n    }\r\n    return Response.status(Response.Status.NO_CONTENT).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\webapp",
  "methodName" : "processContainersUpgrade",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "Response processContainersUpgrade(UserGroupInformation ugi, Service service, List<Container> containers) throws YarnException, IOException, InterruptedException\n{\r\n    if (!service.getState().equals(ServiceState.UPGRADING) && !service.getState().equals(ServiceState.UPGRADING_AUTO_FINALIZE)) {\r\n        throw new YarnException(String.format(\"The upgrade of service %s has not been initiated.\", service.getName()));\r\n    }\r\n    ServiceApiUtil.validateInstancesUpgrade(containers);\r\n    Integer result = invokeContainersUpgrade(ugi, service, containers);\r\n    if (result == EXIT_SUCCESS) {\r\n        ServiceStatus status = new ServiceStatus();\r\n        status.setDiagnostics(\"Upgrading component instances \" + containers.stream().map(Container::getId).collect(Collectors.joining(\",\")) + \".\");\r\n        return formatResponse(Response.Status.ACCEPTED, status);\r\n    }\r\n    return Response.status(Response.Status.NO_CONTENT).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\webapp",
  "methodName" : "invokeContainersUpgrade",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int invokeContainersUpgrade(UserGroupInformation ugi, Service service, List<Container> containers) throws IOException, InterruptedException\n{\r\n    return ugi.doAs((PrivilegedExceptionAction<Integer>) () -> {\r\n        int result1;\r\n        ServiceClient sc = getServiceClient();\r\n        try {\r\n            sc.init(YARN_CONFIG);\r\n            sc.start();\r\n            result1 = sc.actionUpgrade(service, containers);\r\n        } finally {\r\n            sc.close();\r\n        }\r\n        return result1;\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\webapp",
  "methodName" : "decommissionInstances",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "Response decommissionInstances(Service service, UserGroupInformation ugi) throws IOException, InterruptedException\n{\r\n    String appName = service.getName();\r\n    Response response = Response.status(Status.BAD_REQUEST).build();\r\n    List<String> instances = new ArrayList<>();\r\n    for (Component c : service.getComponents()) {\r\n        instances.addAll(c.getDecommissionedInstances());\r\n    }\r\n    Integer result = ugi.doAs(new PrivilegedExceptionAction<Integer>() {\r\n\r\n        @Override\r\n        public Integer run() throws YarnException, IOException {\r\n            int result = 0;\r\n            ServiceClient sc = new ServiceClient();\r\n            try {\r\n                sc.init(YARN_CONFIG);\r\n                sc.start();\r\n                result = sc.actionDecommissionInstances(appName, instances);\r\n                return Integer.valueOf(result);\r\n            } finally {\r\n                sc.close();\r\n            }\r\n        }\r\n    });\r\n    if (result == EXIT_SUCCESS) {\r\n        String message = \"Service \" + appName + \" has successfully \" + \"decommissioned instances.\";\r\n        LOG.info(message);\r\n        ServiceStatus status = new ServiceStatus();\r\n        status.setDiagnostics(message);\r\n        status.setState(ServiceState.ACCEPTED);\r\n        response = formatResponse(Status.ACCEPTED, status);\r\n    }\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\webapp",
  "methodName" : "getServiceFromClient",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Service getServiceFromClient(UserGroupInformation ugi, String serviceName) throws IOException, InterruptedException\n{\r\n    return ugi.doAs((PrivilegedExceptionAction<Service>) () -> {\r\n        ServiceClient sc = getServiceClient();\r\n        try {\r\n            sc.init(YARN_CONFIG);\r\n            sc.start();\r\n            Service app1 = sc.getStatus(serviceName);\r\n            return app1;\r\n        } finally {\r\n            sc.close();\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\webapp",
  "methodName" : "getContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ComponentContainers[] getContainers(UserGroupInformation ugi, String serviceName, List<String> componentNames, String version, List<ContainerState> containerStates) throws IOException, InterruptedException\n{\r\n    return ugi.doAs((PrivilegedExceptionAction<ComponentContainers[]>) () -> {\r\n        ComponentContainers[] result;\r\n        ServiceClient sc = getServiceClient();\r\n        try {\r\n            sc.init(YARN_CONFIG);\r\n            sc.start();\r\n            result = sc.getContainers(serviceName, componentNames, version, containerStates);\r\n            return result;\r\n        } finally {\r\n            sc.close();\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\webapp",
  "methodName" : "setServiceClient",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setServiceClient(ServiceClient mockServerClient)\n{\r\n    serviceClientUnitTest = mockServerClient;\r\n    unitTest = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\webapp",
  "methodName" : "getServiceClient",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ServiceClient getServiceClient()\n{\r\n    if (unitTest) {\r\n        return serviceClientUnitTest;\r\n    } else {\r\n        return new ServiceClient();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\webapp",
  "methodName" : "getProxyUser",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "UserGroupInformation getProxyUser(HttpServletRequest request) throws AccessControlException\n{\r\n    UserGroupInformation proxyUser;\r\n    UserGroupInformation ugi;\r\n    String remoteUser = request.getRemoteUser();\r\n    try {\r\n        if (UserGroupInformation.isSecurityEnabled()) {\r\n            proxyUser = UserGroupInformation.getLoginUser();\r\n            ugi = UserGroupInformation.createProxyUser(remoteUser, proxyUser);\r\n        } else {\r\n            ugi = UserGroupInformation.createRemoteUser(remoteUser);\r\n        }\r\n        return ugi;\r\n    } catch (IOException e) {\r\n        throw new AccessControlException(e.getCause());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\webapp",
  "methodName" : "formatResponse",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Response formatResponse(Status status, String message)\n{\r\n    ServiceStatus entity = new ServiceStatus();\r\n    entity.setDiagnostics(message);\r\n    return formatResponse(status, entity);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\webapp",
  "methodName" : "formatResponse",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response formatResponse(Status status, ServiceStatus entity)\n{\r\n    return Response.status(status).entity(entity).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\webapp",
  "methodName" : "main",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void main(String[] args) throws IOException\n{\r\n    ApiServerWebApp apiWebApp = new ApiServerWebApp();\r\n    try {\r\n        apiWebApp.init(new YarnConfiguration());\r\n        apiWebApp.serviceStart();\r\n    } catch (Exception e) {\r\n        logger.error(\"Got exception starting\", e);\r\n        apiWebApp.close();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\webapp",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    bindAddress = getConfig().getSocketAddr(API_SERVER_ADDRESS, DEFAULT_API_SERVER_ADDRESS, DEFAULT_API_SERVER_PORT);\r\n    logger.info(\"YARN API server running on \" + bindAddress);\r\n    if (UserGroupInformation.isSecurityEnabled()) {\r\n        doSecureLogin(getConfig());\r\n    }\r\n    startWebApp();\r\n    super.serviceStart();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\webapp",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    if (apiServer != null) {\r\n        apiServer.stop();\r\n    }\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\webapp",
  "methodName" : "doSecureLogin",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void doSecureLogin(org.apache.hadoop.conf.Configuration conf) throws IOException\n{\r\n    SecurityUtil.login(conf, YarnConfiguration.RM_KEYTAB, YarnConfiguration.RM_PRINCIPAL, bindAddress.getHostName());\r\n    addFilters(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\webapp",
  "methodName" : "addFilters",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void addFilters(org.apache.hadoop.conf.Configuration conf)\n{\r\n    boolean hasHadoopAuthFilterInitializer = false;\r\n    String filterInitializerConfKey = \"hadoop.http.filter.initializers\";\r\n    Class<?>[] initializersClasses = conf.getClasses(filterInitializerConfKey);\r\n    List<String> targets = new ArrayList<String>();\r\n    if (initializersClasses != null) {\r\n        for (Class<?> initializer : initializersClasses) {\r\n            if (initializer.getName().equals(AuthenticationFilterInitializer.class.getName())) {\r\n                hasHadoopAuthFilterInitializer = true;\r\n                break;\r\n            }\r\n            targets.add(initializer.getName());\r\n        }\r\n    }\r\n    if (!hasHadoopAuthFilterInitializer) {\r\n        targets.add(AuthenticationFilterInitializer.class.getName());\r\n        conf.set(filterInitializerConfKey, StringUtils.join(\",\", targets));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\webapp",
  "methodName" : "startWebApp",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void startWebApp() throws IOException\n{\r\n    URI uri = URI.create(\"http://\" + NetUtils.getHostPortString(bindAddress));\r\n    apiServer = new HttpServer2.Builder().setName(\"api-server\").setConf(getConfig()).setSecurityEnabled(UserGroupInformation.isSecurityEnabled()).setUsernameConfKey(RM_WEBAPP_SPNEGO_USER_NAME_KEY).setKeytabConfKey(RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY).addEndpoint(uri).build();\r\n    String apiPackages = ApiServer.class.getPackage().getName() + SEP + GenericExceptionHandler.class.getPackage().getName() + SEP + YarnJacksonJaxbJsonProvider.class.getPackage().getName();\r\n    apiServer.addJerseyResourcePackage(apiPackages, \"/*\");\r\n    try {\r\n        logger.info(\"Service starting up. Logging start...\");\r\n        apiServer.start();\r\n        logger.info(\"Server status = {}\", apiServer.toString());\r\n        for (Configuration conf : apiServer.getWebAppContext().getConfigurations()) {\r\n            logger.info(\"Configurations = {}\", conf);\r\n        }\r\n        logger.info(\"Context Path = {}\", Collections.singletonList(apiServer.getWebAppContext().getContextPath()));\r\n        logger.info(\"ResourceBase = {}\", Collections.singletonList(apiServer.getWebAppContext().getResourceBase()));\r\n        logger.info(\"War = {}\", Collections.singletonList(apiServer.getWebAppContext().getWar()));\r\n    } catch (Exception ex) {\r\n        logger.error(\"Hadoop HttpServer2 App **failed**\", ex);\r\n        throw ex;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    String dirPath = conf.get(YarnServiceConf.YARN_SERVICES_SYSTEM_SERVICE_DIRECTORY);\r\n    if (dirPath != null) {\r\n        systemServiceDir = new Path(dirPath);\r\n        LOG.info(\"System Service Directory is configured to {}\", systemServiceDir);\r\n        fs = systemServiceDir.getFileSystem(conf);\r\n        this.loginUGI = UserGroupInformation.isSecurityEnabled() ? UserGroupInformation.getLoginUser() : UserGroupInformation.getCurrentUser();\r\n        LOG.info(\"UserGroupInformation initialized to {}\", loginUGI);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    scanForUserServices();\r\n    launchUserService(syncUserServices);\r\n    serviceLaucher = new Thread(createRunnable());\r\n    serviceLaucher.setName(\"System service launcher\");\r\n    serviceLaucher.start();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "serviceStop",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    LOG.info(\"Stopping {}\", getName());\r\n    stopExecutors.set(true);\r\n    if (serviceLaucher != null) {\r\n        serviceLaucher.interrupt();\r\n        try {\r\n            serviceLaucher.join();\r\n        } catch (InterruptedException ie) {\r\n            LOG.warn(\"Interrupted Exception while stopping\", ie);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "createRunnable",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Runnable createRunnable()\n{\r\n    return new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r\n            launchUserService(asyncUserServices);\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "launchUserService",
  "errType" : [ "InterruptedException", "Exception", "IOException", "IOException|UndeclaredThrowableException" ],
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void launchUserService(Map<String, Set<Service>> userServices)\n{\r\n    for (Map.Entry<String, Set<Service>> entry : userServices.entrySet()) {\r\n        String user = entry.getKey();\r\n        Set<Service> services = entry.getValue();\r\n        if (services.isEmpty()) {\r\n            continue;\r\n        }\r\n        ServiceClient serviceClient = null;\r\n        try {\r\n            UserGroupInformation userUgi = getProxyUser(user);\r\n            serviceClient = createServiceClient(userUgi);\r\n            for (Service service : services) {\r\n                LOG.info(\"POST: createService = {} user = {}\", service, userUgi);\r\n                try {\r\n                    launchServices(userUgi, serviceClient, service);\r\n                } catch (IOException | UndeclaredThrowableException e) {\r\n                    if (e.getCause() != null) {\r\n                        LOG.warn(e.getCause().getMessage());\r\n                    } else {\r\n                        String message = \"Failed to create service \" + service.getName() + \" : \";\r\n                        LOG.error(message, e);\r\n                    }\r\n                }\r\n            }\r\n        } catch (InterruptedException e) {\r\n            LOG.warn(\"System service launcher thread interrupted\", e);\r\n            break;\r\n        } catch (Exception e) {\r\n            LOG.error(\"Error while submitting services for user \" + user, e);\r\n        } finally {\r\n            if (serviceClient != null) {\r\n                try {\r\n                    serviceClient.close();\r\n                } catch (IOException e) {\r\n                    LOG.warn(\"Error while closing serviceClient for user {}\", user);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "createServiceClient",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ServiceClient createServiceClient(UserGroupInformation userUgi) throws IOException, InterruptedException\n{\r\n    ServiceClient serviceClient = userUgi.doAs(new PrivilegedExceptionAction<ServiceClient>() {\r\n\r\n        @Override\r\n        public ServiceClient run() throws IOException, YarnException {\r\n            ServiceClient sc = getServiceClient();\r\n            sc.init(getConfig());\r\n            sc.start();\r\n            return sc;\r\n        }\r\n    });\r\n    return serviceClient;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "launchServices",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void launchServices(UserGroupInformation userUgi, ServiceClient serviceClient, Service service) throws IOException, InterruptedException\n{\r\n    if (service.getState() == ServiceState.STOPPED) {\r\n        userUgi.doAs(new PrivilegedExceptionAction<Void>() {\r\n\r\n            @Override\r\n            public Void run() throws IOException, YarnException {\r\n                serviceClient.actionBuild(service);\r\n                return null;\r\n            }\r\n        });\r\n        LOG.info(\"Service {} version {} saved.\", service.getName(), service.getVersion());\r\n    } else {\r\n        ApplicationId applicationId = userUgi.doAs(new PrivilegedExceptionAction<ApplicationId>() {\r\n\r\n            @Override\r\n            public ApplicationId run() throws IOException, YarnException {\r\n                boolean tryStart = true;\r\n                try {\r\n                    serviceClient.actionBuild(service);\r\n                } catch (Exception e) {\r\n                    if (e instanceof SliderException && ((SliderException) e).getExitCode() == SliderExitCodes.EXIT_INSTANCE_EXISTS) {\r\n                        LOG.info(\"Service {} already exists, will attempt to start \" + \"service\", service.getName());\r\n                    } else {\r\n                        tryStart = false;\r\n                        LOG.info(\"Got exception saving {}, will not attempt to \" + \"start service\", service.getName(), e);\r\n                    }\r\n                }\r\n                if (tryStart) {\r\n                    return serviceClient.actionStartAndGetId(service.getName());\r\n                } else {\r\n                    return null;\r\n                }\r\n            }\r\n        });\r\n        if (applicationId != null) {\r\n            LOG.info(\"Service {} submitted with Application ID: {}\", service.getName(), applicationId);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "getServiceClient",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ServiceClient getServiceClient()\n{\r\n    return new ServiceClient();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "getProxyUser",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "UserGroupInformation getProxyUser(String user)\n{\r\n    UserGroupInformation ugi;\r\n    if (UserGroupInformation.isSecurityEnabled()) {\r\n        ugi = UserGroupInformation.createProxyUser(user, loginUGI);\r\n    } else {\r\n        ugi = UserGroupInformation.createRemoteUser(user);\r\n    }\r\n    return ugi;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "scanForUserServices",
  "errType" : [ "FileNotFoundException" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void scanForUserServices() throws IOException\n{\r\n    if (systemServiceDir == null) {\r\n        return;\r\n    }\r\n    try {\r\n        LOG.info(\"Scan for launch type on {}\", systemServiceDir);\r\n        RemoteIterator<FileStatus> iterLaunchType = list(systemServiceDir);\r\n        while (iterLaunchType.hasNext()) {\r\n            FileStatus launchType = iterLaunchType.next();\r\n            if (!launchType.isDirectory()) {\r\n                LOG.debug(\"Scanner skips for unknown file {}\", launchType.getPath());\r\n                continue;\r\n            }\r\n            if (launchType.getPath().getName().equals(SYNC)) {\r\n                scanForUserServiceDefinition(launchType.getPath(), syncUserServices);\r\n            } else if (launchType.getPath().getName().equals(ASYNC)) {\r\n                scanForUserServiceDefinition(launchType.getPath(), asyncUserServices);\r\n            } else {\r\n                badDirSkipCounter++;\r\n                LOG.debug(\"Scanner skips for unknown dir {}.\", launchType.getPath());\r\n            }\r\n        }\r\n    } catch (FileNotFoundException e) {\r\n        LOG.warn(\"System service directory {} doesn't not exist.\", systemServiceDir);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "scanForUserServiceDefinition",
  "errType" : null,
  "containingMethodsNum" : 25,
  "sourceCodeText" : "void scanForUserServiceDefinition(Path userDirPath, Map<String, Set<Service>> userServices) throws IOException\n{\r\n    LOG.info(\"Scan for users on {}\", userDirPath);\r\n    RemoteIterator<FileStatus> iterUsers = list(userDirPath);\r\n    while (iterUsers.hasNext()) {\r\n        FileStatus userDir = iterUsers.next();\r\n        if (!userDir.isDirectory()) {\r\n            LOG.info(\"Service definition {} doesn't belong to any user. Ignoring.. \", userDir.getPath().getName());\r\n            continue;\r\n        }\r\n        String userName = userDir.getPath().getName();\r\n        LOG.info(\"Scanning service definitions for user {}.\", userName);\r\n        RemoteIterator<FileStatus> iterServices = list(userDir.getPath());\r\n        while (iterServices.hasNext()) {\r\n            FileStatus serviceCache = iterServices.next();\r\n            String filename = serviceCache.getPath().getName();\r\n            if (!serviceCache.isFile()) {\r\n                LOG.info(\"Scanner skips for unknown dir {}\", filename);\r\n                continue;\r\n            }\r\n            if (!filename.endsWith(YARN_FILE_SUFFIX)) {\r\n                LOG.info(\"Scanner skips for unknown file extension, filename = {}\", filename);\r\n                badFileNameExtensionSkipCounter++;\r\n                continue;\r\n            }\r\n            Service service = getServiceDefinition(serviceCache.getPath());\r\n            if (service != null) {\r\n                Set<Service> services = userServices.get(userName);\r\n                if (services == null) {\r\n                    services = new HashSet<>();\r\n                    userServices.put(userName, services);\r\n                }\r\n                if (!services.add(service)) {\r\n                    int count = ignoredUserServices.containsKey(userName) ? ignoredUserServices.get(userName) : 0;\r\n                    ignoredUserServices.put(userName, count + 1);\r\n                    LOG.warn(\"Ignoring service {} for the user {} as it is already present,\" + \" filename = {}\", service.getName(), userName, filename);\r\n                } else {\r\n                    LOG.info(\"Added service {} for the user {}, filename = {}\", service.getName(), userName, filename);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "getServiceDefinition",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Service getServiceDefinition(Path filePath)\n{\r\n    Service service = null;\r\n    try {\r\n        LOG.debug(\"Loading service definition from FS: {}\", filePath);\r\n        service = jsonSerDeser.load(fs, filePath);\r\n    } catch (IOException e) {\r\n        LOG.info(\"Error while loading service definition from FS: {}\", e);\r\n    }\r\n    return service;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "list",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RemoteIterator<FileStatus> list(Path path) throws IOException\n{\r\n    return new StoppableRemoteIterator(fs.listStatusIterator(path));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "getIgnoredUserServices",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, Integer> getIgnoredUserServices()\n{\r\n    return ignoredUserServices;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "getSyncUserServices",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, Set<Service>> getSyncUserServices()\n{\r\n    return syncUserServices;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "getBadFileNameExtensionSkipCounter",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getBadFileNameExtensionSkipCounter()\n{\r\n    return badFileNameExtensionSkipCounter;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "getBadDirSkipCounter",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getBadDirSkipCounter()\n{\r\n    return badDirSkipCounter;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
} ]