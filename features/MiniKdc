[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-minikdc\\src\\main\\java\\org\\apache\\hadoop\\minikdc",
  "methodName" : "main",
  "errType" : null,
  "containingMethodsNum" : 31,
  "sourceCodeText" : "void main(String[] args) throws Exception\n{\r\n    if (args.length < 4) {\r\n        System.out.println(\"Arguments: <WORKDIR> <MINIKDCPROPERTIES> \" + \"<KEYTABFILE> [<PRINCIPALS>]+\");\r\n        System.exit(1);\r\n    }\r\n    File workDir = new File(args[0]);\r\n    if (!workDir.exists()) {\r\n        throw new RuntimeException(\"Specified work directory does not exists: \" + workDir.getAbsolutePath());\r\n    }\r\n    Properties conf = createConf();\r\n    File file = new File(args[1]);\r\n    if (!file.exists()) {\r\n        throw new RuntimeException(\"Specified configuration does not exists: \" + file.getAbsolutePath());\r\n    }\r\n    Properties userConf = new Properties();\r\n    InputStreamReader r = null;\r\n    try {\r\n        r = new InputStreamReader(new FileInputStream(file), StandardCharsets.UTF_8);\r\n        userConf.load(r);\r\n    } finally {\r\n        if (r != null) {\r\n            r.close();\r\n        }\r\n    }\r\n    for (Map.Entry<?, ?> entry : userConf.entrySet()) {\r\n        conf.put(entry.getKey(), entry.getValue());\r\n    }\r\n    final MiniKdc miniKdc = new MiniKdc(conf, workDir);\r\n    miniKdc.start();\r\n    File krb5conf = new File(workDir, \"krb5.conf\");\r\n    if (miniKdc.getKrb5conf().renameTo(krb5conf)) {\r\n        File keytabFile = new File(args[2]).getAbsoluteFile();\r\n        String[] principals = new String[args.length - 3];\r\n        System.arraycopy(args, 3, principals, 0, args.length - 3);\r\n        miniKdc.createPrincipal(keytabFile, principals);\r\n        System.out.println();\r\n        System.out.println(\"Standalone MiniKdc Running\");\r\n        System.out.println(\"---------------------------------------------------\");\r\n        System.out.println(\"  Realm           : \" + miniKdc.getRealm());\r\n        System.out.println(\"  Running at      : \" + miniKdc.getHost() + \":\" + miniKdc.getHost());\r\n        System.out.println(\"  krb5conf        : \" + krb5conf);\r\n        System.out.println();\r\n        System.out.println(\"  created keytab  : \" + keytabFile);\r\n        System.out.println(\"  with principals : \" + Arrays.asList(principals));\r\n        System.out.println();\r\n        System.out.println(\" Do <CTRL-C> or kill <PID> to stop it\");\r\n        System.out.println(\"---------------------------------------------------\");\r\n        System.out.println();\r\n        Runtime.getRuntime().addShutdownHook(new Thread() {\r\n\r\n            @Override\r\n            public void run() {\r\n                miniKdc.stop();\r\n            }\r\n        });\r\n    } else {\r\n        throw new RuntimeException(\"Cannot rename KDC's krb5conf to \" + krb5conf.getAbsolutePath());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-minikdc\\src\\main\\java\\org\\apache\\hadoop\\minikdc",
  "methodName" : "createConf",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Properties createConf()\n{\r\n    return (Properties) DEFAULT_CONFIG.clone();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-minikdc\\src\\main\\java\\org\\apache\\hadoop\\minikdc",
  "methodName" : "setTransport",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setTransport(String transport)\n{\r\n    this.transport = transport;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-minikdc\\src\\main\\java\\org\\apache\\hadoop\\minikdc",
  "methodName" : "getPort",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getPort()\n{\r\n    return port;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-minikdc\\src\\main\\java\\org\\apache\\hadoop\\minikdc",
  "methodName" : "getHost",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getHost()\n{\r\n    return conf.getProperty(KDC_BIND_ADDRESS);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-minikdc\\src\\main\\java\\org\\apache\\hadoop\\minikdc",
  "methodName" : "getRealm",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getRealm()\n{\r\n    return realm;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-minikdc\\src\\main\\java\\org\\apache\\hadoop\\minikdc",
  "methodName" : "getKrb5conf",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "File getKrb5conf()\n{\r\n    krb5conf = new File(System.getProperty(JAVA_SECURITY_KRB5_CONF));\r\n    return krb5conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-minikdc\\src\\main\\java\\org\\apache\\hadoop\\minikdc",
  "methodName" : "start",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void start() throws Exception\n{\r\n    if (simpleKdc != null) {\r\n        throw new RuntimeException(\"Already started\");\r\n    }\r\n    simpleKdc = new SimpleKdcServer();\r\n    prepareKdcServer();\r\n    simpleKdc.init();\r\n    resetDefaultRealm();\r\n    simpleKdc.start();\r\n    LOG.info(\"MiniKdc started.\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-minikdc\\src\\main\\java\\org\\apache\\hadoop\\minikdc",
  "methodName" : "resetDefaultRealm",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void resetDefaultRealm() throws IOException\n{\r\n    InputStream templateResource = new FileInputStream(getKrb5conf().getAbsolutePath());\r\n    String content = IOUtil.readInput(templateResource);\r\n    content = content.replaceAll(\"default_realm = .*\\n\", \"default_realm = \" + getRealm() + \"\\n\");\r\n    IOUtil.writeFile(content, getKrb5conf());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-minikdc\\src\\main\\java\\org\\apache\\hadoop\\minikdc",
  "methodName" : "prepareKdcServer",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void prepareKdcServer() throws Exception\n{\r\n    simpleKdc.setWorkDir(workDir);\r\n    simpleKdc.setKdcHost(getHost());\r\n    simpleKdc.setKdcRealm(realm);\r\n    if (transport == null) {\r\n        transport = conf.getProperty(TRANSPORT);\r\n    }\r\n    if (port == 0) {\r\n        port = NetworkUtil.getServerPort();\r\n    }\r\n    if (transport != null) {\r\n        if (transport.trim().equals(\"TCP\")) {\r\n            simpleKdc.setKdcTcpPort(port);\r\n            simpleKdc.setAllowUdp(false);\r\n        } else if (transport.trim().equals(\"UDP\")) {\r\n            simpleKdc.setKdcUdpPort(port);\r\n            simpleKdc.setAllowTcp(false);\r\n        } else {\r\n            throw new IllegalArgumentException(\"Invalid transport: \" + transport);\r\n        }\r\n    } else {\r\n        throw new IllegalArgumentException(\"Need to set transport!\");\r\n    }\r\n    simpleKdc.getKdcConfig().setString(KdcConfigKey.KDC_SERVICE_NAME, conf.getProperty(INSTANCE));\r\n    if (conf.getProperty(DEBUG) != null) {\r\n        krb5Debug = getAndSet(SUN_SECURITY_KRB5_DEBUG, conf.getProperty(DEBUG));\r\n    }\r\n    if (conf.getProperty(MIN_TICKET_LIFETIME) != null) {\r\n        simpleKdc.getKdcConfig().setLong(KdcConfigKey.MINIMUM_TICKET_LIFETIME, Long.parseLong(conf.getProperty(MIN_TICKET_LIFETIME)));\r\n    }\r\n    if (conf.getProperty(MAX_TICKET_LIFETIME) != null) {\r\n        simpleKdc.getKdcConfig().setLong(KdcConfigKey.MAXIMUM_TICKET_LIFETIME, Long.parseLong(conf.getProperty(MiniKdc.MAX_TICKET_LIFETIME)));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-minikdc\\src\\main\\java\\org\\apache\\hadoop\\minikdc",
  "methodName" : "stop",
  "errType" : [ "KrbException", "InterruptedException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void stop()\n{\r\n    if (simpleKdc != null) {\r\n        try {\r\n            simpleKdc.stop();\r\n        } catch (KrbException e) {\r\n            e.printStackTrace();\r\n        } finally {\r\n            if (conf.getProperty(DEBUG) != null) {\r\n                System.setProperty(SUN_SECURITY_KRB5_DEBUG, Boolean.toString(krb5Debug));\r\n            }\r\n        }\r\n    }\r\n    delete(workDir);\r\n    try {\r\n        Thread.sleep(1000);\r\n    } catch (InterruptedException e) {\r\n        e.printStackTrace();\r\n    }\r\n    LOG.info(\"MiniKdc stopped.\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-minikdc\\src\\main\\java\\org\\apache\\hadoop\\minikdc",
  "methodName" : "delete",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void delete(File f)\n{\r\n    if (f.isFile()) {\r\n        if (!f.delete()) {\r\n            LOG.warn(\"WARNING: cannot delete file \" + f.getAbsolutePath());\r\n        }\r\n    } else {\r\n        File[] fileList = f.listFiles();\r\n        if (fileList != null) {\r\n            for (File c : fileList) {\r\n                delete(c);\r\n            }\r\n        }\r\n        if (!f.delete()) {\r\n            LOG.warn(\"WARNING: cannot delete directory \" + f.getAbsolutePath());\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-minikdc\\src\\main\\java\\org\\apache\\hadoop\\minikdc",
  "methodName" : "createPrincipal",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void createPrincipal(String principal, String password) throws Exception\n{\r\n    simpleKdc.createPrincipal(principal, password);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-minikdc\\src\\main\\java\\org\\apache\\hadoop\\minikdc",
  "methodName" : "createPrincipal",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void createPrincipal(File keytabFile, String... principals) throws Exception\n{\r\n    simpleKdc.createPrincipals(principals);\r\n    if (keytabFile.exists() && !keytabFile.delete()) {\r\n        LOG.error(\"Failed to delete keytab file: \" + keytabFile);\r\n    }\r\n    for (String principal : principals) {\r\n        simpleKdc.getKadmin().exportKeytab(keytabFile, principal);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-minikdc\\src\\main\\java\\org\\apache\\hadoop\\minikdc",
  "methodName" : "getAndSet",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean getAndSet(String sysprop, String debug)\n{\r\n    boolean old = Boolean.getBoolean(sysprop);\r\n    System.setProperty(sysprop, debug);\r\n    return old;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-minikdc\\src\\main\\java\\org\\apache\\hadoop\\minikdc",
  "methodName" : "startMiniKdc",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void startMiniKdc() throws Exception\n{\r\n    createTestDir();\r\n    createMiniKdcConf();\r\n    kdc = new MiniKdc(conf, workDir);\r\n    kdc.start();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-minikdc\\src\\main\\java\\org\\apache\\hadoop\\minikdc",
  "methodName" : "createTestDir",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void createTestDir()\n{\r\n    workDir = new File(System.getProperty(\"test.dir\", \"target\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-minikdc\\src\\main\\java\\org\\apache\\hadoop\\minikdc",
  "methodName" : "createMiniKdcConf",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void createMiniKdcConf()\n{\r\n    conf = MiniKdc.createConf();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-minikdc\\src\\main\\java\\org\\apache\\hadoop\\minikdc",
  "methodName" : "stopMiniKdc",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void stopMiniKdc()\n{\r\n    if (kdc != null) {\r\n        kdc.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-minikdc\\src\\main\\java\\org\\apache\\hadoop\\minikdc",
  "methodName" : "getKdc",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "MiniKdc getKdc()\n{\r\n    return kdc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-minikdc\\src\\main\\java\\org\\apache\\hadoop\\minikdc",
  "methodName" : "getWorkDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "File getWorkDir()\n{\r\n    return workDir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-minikdc\\src\\main\\java\\org\\apache\\hadoop\\minikdc",
  "methodName" : "getConf",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Properties getConf()\n{\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
} ]