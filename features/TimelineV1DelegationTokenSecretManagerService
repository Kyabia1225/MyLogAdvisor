[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\security",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_RECOVERY_ENABLED, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_RECOVERY_ENABLED)) {\r\n        stateStore = createStateStore(conf);\r\n        stateStore.init(conf);\r\n    }\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\security",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    if (stateStore != null) {\r\n        stateStore.start();\r\n        TimelineServiceState state = stateStore.loadState();\r\n        ((TimelineV1DelegationTokenSecretManager) getTimelineDelegationTokenSecretManager()).recover(state);\r\n    }\r\n    super.serviceStart();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\security",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    if (stateStore != null) {\r\n        stateStore.stop();\r\n    }\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\security",
  "methodName" : "createTimelineDelegationTokenSecretManager",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AbstractDelegationTokenSecretManager<TimelineDelegationTokenIdentifier> createTimelineDelegationTokenSecretManager(long secretKeyInterval, long tokenMaxLifetime, long tokenRenewInterval, long tokenRemovalScanInterval)\n{\r\n    return new TimelineV1DelegationTokenSecretManager(secretKeyInterval, tokenMaxLifetime, tokenRenewInterval, tokenRemovalScanInterval, stateStore);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\security",
  "methodName" : "createStateStore",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineStateStore createStateStore(Configuration conf)\n{\r\n    return ReflectionUtils.newInstance(conf.getClass(YarnConfiguration.TIMELINE_SERVICE_STATE_STORE_CLASS, LeveldbTimelineStateStore.class, TimelineStateStore.class), conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getServiceStopped",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean getServiceStopped()\n{\r\n    return serviceStopped;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    serviceStopped = true;\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getEntities",
  "errType" : null,
  "containingMethodsNum" : 23,
  "sourceCodeText" : "TimelineEntities getEntities(String entityType, Long limit, Long windowStart, Long windowEnd, String fromId, Long fromTs, NameValuePair primaryFilter, Collection<NameValuePair> secondaryFilters, EnumSet<Field> fields, CheckAcl checkAcl) throws IOException\n{\r\n    if (getServiceStopped()) {\r\n        LOG.info(\"Service stopped, return null for the storage\");\r\n        return null;\r\n    }\r\n    if (limit == null) {\r\n        limit = DEFAULT_LIMIT;\r\n    }\r\n    if (windowStart == null) {\r\n        windowStart = Long.MIN_VALUE;\r\n    }\r\n    if (windowEnd == null) {\r\n        windowEnd = Long.MAX_VALUE;\r\n    }\r\n    if (fields == null) {\r\n        fields = EnumSet.allOf(Field.class);\r\n    }\r\n    TimelineEntity firstEntity = null;\r\n    if (fromId != null) {\r\n        firstEntity = entities.get(new EntityIdentifier(fromId, entityType));\r\n        if (firstEntity == null) {\r\n            return new TimelineEntities();\r\n        }\r\n    }\r\n    List<TimelineEntity> entitiesSelected = new ArrayList<TimelineEntity>();\r\n    try (CloseableIterator<TimelineEntity> entityIterator = firstEntity == null ? entities.valueSetIterator() : entities.valueSetIterator(firstEntity)) {\r\n        while (entityIterator.hasNext()) {\r\n            TimelineEntity entity = entityIterator.next();\r\n            if (entitiesSelected.size() >= limit) {\r\n                break;\r\n            }\r\n            if (!entity.getEntityType().equals(entityType)) {\r\n                continue;\r\n            }\r\n            if (entity.getStartTime() <= windowStart) {\r\n                continue;\r\n            }\r\n            if (entity.getStartTime() > windowEnd) {\r\n                continue;\r\n            }\r\n            if (fromTs != null && entityInsertTimes.get(new EntityIdentifier(entity.getEntityId(), entity.getEntityType())) > fromTs) {\r\n                continue;\r\n            }\r\n            if (primaryFilter != null && !KeyValueBasedTimelineStoreUtils.matchPrimaryFilter(entity.getPrimaryFilters(), primaryFilter)) {\r\n                continue;\r\n            }\r\n            if (secondaryFilters != null) {\r\n                boolean flag = true;\r\n                for (NameValuePair secondaryFilter : secondaryFilters) {\r\n                    if (secondaryFilter != null && !KeyValueBasedTimelineStoreUtils.matchPrimaryFilter(entity.getPrimaryFilters(), secondaryFilter) && !KeyValueBasedTimelineStoreUtils.matchFilter(entity.getOtherInfo(), secondaryFilter)) {\r\n                        flag = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!flag) {\r\n                    continue;\r\n                }\r\n            }\r\n            if (entity.getDomainId() == null) {\r\n                entity.setDomainId(DEFAULT_DOMAIN_ID);\r\n            }\r\n            if (checkAcl == null || checkAcl.check(entity)) {\r\n                entitiesSelected.add(entity);\r\n            }\r\n        }\r\n    }\r\n    List<TimelineEntity> entitiesToReturn = new ArrayList<TimelineEntity>();\r\n    for (TimelineEntity entitySelected : entitiesSelected) {\r\n        entitiesToReturn.add(KeyValueBasedTimelineStoreUtils.maskFields(entitySelected, fields));\r\n    }\r\n    Collections.sort(entitiesToReturn);\r\n    TimelineEntities entitiesWrapper = new TimelineEntities();\r\n    entitiesWrapper.setEntities(entitiesToReturn);\r\n    return entitiesWrapper;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getEntity",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "TimelineEntity getEntity(String entityId, String entityType, EnumSet<Field> fieldsToRetrieve)\n{\r\n    if (getServiceStopped()) {\r\n        LOG.info(\"Service stopped, return null for the storage\");\r\n        return null;\r\n    }\r\n    if (fieldsToRetrieve == null) {\r\n        fieldsToRetrieve = EnumSet.allOf(Field.class);\r\n    }\r\n    TimelineEntity entity = entities.get(new EntityIdentifier(entityId, entityType));\r\n    if (entity == null) {\r\n        return null;\r\n    } else {\r\n        return KeyValueBasedTimelineStoreUtils.maskFields(entity, fieldsToRetrieve);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getEntityTimelines",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "TimelineEvents getEntityTimelines(String entityType, SortedSet<String> entityIds, Long limit, Long windowStart, Long windowEnd, Set<String> eventTypes)\n{\r\n    if (getServiceStopped()) {\r\n        LOG.info(\"Service stopped, return null for the storage\");\r\n        return null;\r\n    }\r\n    TimelineEvents allEvents = new TimelineEvents();\r\n    if (entityIds == null) {\r\n        return allEvents;\r\n    }\r\n    if (limit == null) {\r\n        limit = DEFAULT_LIMIT;\r\n    }\r\n    if (windowStart == null) {\r\n        windowStart = Long.MIN_VALUE;\r\n    }\r\n    if (windowEnd == null) {\r\n        windowEnd = Long.MAX_VALUE;\r\n    }\r\n    for (String entityId : entityIds) {\r\n        EntityIdentifier entityID = new EntityIdentifier(entityId, entityType);\r\n        TimelineEntity entity = entities.get(entityID);\r\n        if (entity == null) {\r\n            continue;\r\n        }\r\n        EventsOfOneEntity events = new EventsOfOneEntity();\r\n        events.setEntityId(entityId);\r\n        events.setEntityType(entityType);\r\n        for (TimelineEvent event : entity.getEvents()) {\r\n            if (events.getEvents().size() >= limit) {\r\n                break;\r\n            }\r\n            if (event.getTimestamp() <= windowStart) {\r\n                continue;\r\n            }\r\n            if (event.getTimestamp() > windowEnd) {\r\n                continue;\r\n            }\r\n            if (eventTypes != null && !eventTypes.contains(event.getEventType())) {\r\n                continue;\r\n            }\r\n            events.addEvent(event);\r\n        }\r\n        allEvents.addEvent(events);\r\n    }\r\n    return allEvents;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getDomain",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "TimelineDomain getDomain(String domainId) throws IOException\n{\r\n    if (getServiceStopped()) {\r\n        LOG.info(\"Service stopped, return null for the storage\");\r\n        return null;\r\n    }\r\n    TimelineDomain domain = domainById.get(domainId);\r\n    if (domain == null) {\r\n        return null;\r\n    } else {\r\n        return KeyValueBasedTimelineStoreUtils.createTimelineDomain(domain.getId(), domain.getDescription(), domain.getOwner(), domain.getReaders(), domain.getWriters(), domain.getCreatedTime(), domain.getModifiedTime());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getDomains",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "TimelineDomains getDomains(String owner) throws IOException\n{\r\n    if (getServiceStopped()) {\r\n        LOG.info(\"Service stopped, return null for the storage\");\r\n        return null;\r\n    }\r\n    List<TimelineDomain> domains = new ArrayList<TimelineDomain>();\r\n    Set<TimelineDomain> domainsOfOneOwner = domainsByOwner.get(owner);\r\n    if (domainsOfOneOwner == null) {\r\n        return new TimelineDomains();\r\n    }\r\n    for (TimelineDomain domain : domainsByOwner.get(owner)) {\r\n        TimelineDomain domainToReturn = KeyValueBasedTimelineStoreUtils.createTimelineDomain(domain.getId(), domain.getDescription(), domain.getOwner(), domain.getReaders(), domain.getWriters(), domain.getCreatedTime(), domain.getModifiedTime());\r\n        domains.add(domainToReturn);\r\n    }\r\n    Collections.sort(domains, new Comparator<TimelineDomain>() {\r\n\r\n        @Override\r\n        public int compare(TimelineDomain domain1, TimelineDomain domain2) {\r\n            int result = domain2.getCreatedTime().compareTo(domain1.getCreatedTime());\r\n            if (result == 0) {\r\n                return domain2.getModifiedTime().compareTo(domain1.getModifiedTime());\r\n            } else {\r\n                return result;\r\n            }\r\n        }\r\n    });\r\n    TimelineDomains domainsToReturn = new TimelineDomains();\r\n    domainsToReturn.addDomains(domains);\r\n    return domainsToReturn;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "put",
  "errType" : null,
  "containingMethodsNum" : 68,
  "sourceCodeText" : "TimelinePutResponse put(TimelineEntities data)\n{\r\n    TimelinePutResponse response = new TimelinePutResponse();\r\n    if (getServiceStopped()) {\r\n        LOG.info(\"Service stopped, return null for the storage\");\r\n        TimelinePutError error = new TimelinePutError();\r\n        error.setErrorCode(TimelinePutError.IO_EXCEPTION);\r\n        response.addError(error);\r\n        return response;\r\n    }\r\n    for (TimelineEntity entity : data.getEntities()) {\r\n        EntityIdentifier entityId = new EntityIdentifier(entity.getEntityId(), entity.getEntityType());\r\n        TimelineEntity existingEntity = entities.get(entityId);\r\n        boolean needsPut = false;\r\n        if (existingEntity == null) {\r\n            existingEntity = new TimelineEntity();\r\n            existingEntity.setEntityId(entity.getEntityId());\r\n            existingEntity.setEntityType(entity.getEntityType());\r\n            existingEntity.setStartTime(entity.getStartTime());\r\n            if (entity.getDomainId() == null || entity.getDomainId().length() == 0) {\r\n                TimelinePutError error = new TimelinePutError();\r\n                error.setEntityId(entityId.getId());\r\n                error.setEntityType(entityId.getType());\r\n                error.setErrorCode(TimelinePutError.NO_DOMAIN);\r\n                response.addError(error);\r\n                continue;\r\n            }\r\n            existingEntity.setDomainId(entity.getDomainId());\r\n            entityInsertTimes.put(entityId, System.currentTimeMillis());\r\n            needsPut = true;\r\n        }\r\n        if (entity.getEvents() != null) {\r\n            if (existingEntity.getEvents() == null) {\r\n                existingEntity.setEvents(entity.getEvents());\r\n            } else {\r\n                existingEntity.addEvents(entity.getEvents());\r\n            }\r\n            Collections.sort(existingEntity.getEvents());\r\n            needsPut = true;\r\n        }\r\n        if (existingEntity.getStartTime() == null) {\r\n            if (existingEntity.getEvents() == null || existingEntity.getEvents().isEmpty()) {\r\n                TimelinePutError error = new TimelinePutError();\r\n                error.setEntityId(entityId.getId());\r\n                error.setEntityType(entityId.getType());\r\n                error.setErrorCode(TimelinePutError.NO_START_TIME);\r\n                response.addError(error);\r\n                entities.remove(entityId);\r\n                entityInsertTimes.remove(entityId);\r\n                continue;\r\n            } else {\r\n                Long min = Long.MAX_VALUE;\r\n                for (TimelineEvent e : entity.getEvents()) {\r\n                    if (min > e.getTimestamp()) {\r\n                        min = e.getTimestamp();\r\n                    }\r\n                }\r\n                existingEntity.setStartTime(min);\r\n                needsPut = true;\r\n            }\r\n        }\r\n        if (entity.getPrimaryFilters() != null) {\r\n            if (existingEntity.getPrimaryFilters() == null) {\r\n                existingEntity.setPrimaryFilters(new HashMap<String, Set<Object>>());\r\n            }\r\n            for (Entry<String, Set<Object>> pf : entity.getPrimaryFilters().entrySet()) {\r\n                for (Object pfo : pf.getValue()) {\r\n                    existingEntity.addPrimaryFilter(pf.getKey(), KeyValueBasedTimelineStoreUtils.compactNumber(pfo));\r\n                    needsPut = true;\r\n                }\r\n            }\r\n        }\r\n        if (entity.getOtherInfo() != null) {\r\n            if (existingEntity.getOtherInfo() == null) {\r\n                existingEntity.setOtherInfo(new HashMap<String, Object>());\r\n            }\r\n            for (Entry<String, Object> info : entity.getOtherInfo().entrySet()) {\r\n                existingEntity.addOtherInfo(info.getKey(), KeyValueBasedTimelineStoreUtils.compactNumber(info.getValue()));\r\n                needsPut = true;\r\n            }\r\n        }\r\n        if (needsPut) {\r\n            entities.put(entityId, existingEntity);\r\n        }\r\n        if (entity.getRelatedEntities() == null) {\r\n            continue;\r\n        }\r\n        for (Entry<String, Set<String>> partRelatedEntities : entity.getRelatedEntities().entrySet()) {\r\n            if (partRelatedEntities == null) {\r\n                continue;\r\n            }\r\n            for (String idStr : partRelatedEntities.getValue()) {\r\n                EntityIdentifier relatedEntityId = new EntityIdentifier(idStr, partRelatedEntities.getKey());\r\n                TimelineEntity relatedEntity = entities.get(relatedEntityId);\r\n                if (relatedEntity != null) {\r\n                    if (relatedEntity.getDomainId().equals(existingEntity.getDomainId())) {\r\n                        relatedEntity.addRelatedEntity(existingEntity.getEntityType(), existingEntity.getEntityId());\r\n                        entities.put(relatedEntityId, relatedEntity);\r\n                    } else {\r\n                        TimelinePutError error = new TimelinePutError();\r\n                        error.setEntityType(existingEntity.getEntityType());\r\n                        error.setEntityId(existingEntity.getEntityId());\r\n                        error.setErrorCode(TimelinePutError.FORBIDDEN_RELATION);\r\n                        response.addError(error);\r\n                    }\r\n                } else {\r\n                    relatedEntity = new TimelineEntity();\r\n                    relatedEntity.setEntityId(relatedEntityId.getId());\r\n                    relatedEntity.setEntityType(relatedEntityId.getType());\r\n                    relatedEntity.setStartTime(existingEntity.getStartTime());\r\n                    relatedEntity.addRelatedEntity(existingEntity.getEntityType(), existingEntity.getEntityId());\r\n                    relatedEntity.setDomainId(existingEntity.getDomainId());\r\n                    entities.put(relatedEntityId, relatedEntity);\r\n                    entityInsertTimes.put(relatedEntityId, System.currentTimeMillis());\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "put",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void put(TimelineDomain domain) throws IOException\n{\r\n    if (getServiceStopped()) {\r\n        LOG.info(\"Service stopped, return null for the storage\");\r\n        return;\r\n    }\r\n    TimelineDomain domainToReplace = domainById.get(domain.getId());\r\n    Long currentTimestamp = System.currentTimeMillis();\r\n    TimelineDomain domainToStore = KeyValueBasedTimelineStoreUtils.createTimelineDomain(domain.getId(), domain.getDescription(), domain.getOwner(), domain.getReaders(), domain.getWriters(), (domainToReplace == null ? currentTimestamp : domainToReplace.getCreatedTime()), currentTimestamp);\r\n    domainById.put(domainToStore.getId(), domainToStore);\r\n    Set<TimelineDomain> domainsByOneOwner = domainsByOwner.get(domainToStore.getOwner());\r\n    if (domainsByOneOwner == null) {\r\n        domainsByOneOwner = new HashSet<TimelineDomain>();\r\n        domainsByOwner.put(domainToStore.getOwner(), domainsByOneOwner);\r\n    }\r\n    if (domainToReplace != null) {\r\n        domainsByOneOwner.remove(domainToReplace);\r\n    }\r\n    domainsByOneOwner.add(domainToStore);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "about",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "TimelineAbout about(@Context HttpServletRequest req, @Context HttpServletResponse res)\n{\r\n    init(res);\r\n    return TimelineUtils.createTimelineAbout(\"Timeline API\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "getEntities",
  "errType" : [ "NumberFormatException", "IllegalArgumentException", "Exception" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "TimelineEntities getEntities(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"entityType\") String entityType, @QueryParam(\"primaryFilter\") String primaryFilter, @QueryParam(\"secondaryFilter\") String secondaryFilter, @QueryParam(\"windowStart\") String windowStart, @QueryParam(\"windowEnd\") String windowEnd, @QueryParam(\"fromId\") String fromId, @QueryParam(\"fromTs\") String fromTs, @QueryParam(\"limit\") String limit, @QueryParam(\"fields\") String fields)\n{\r\n    init(res);\r\n    try {\r\n        return timelineDataManager.getEntities(parseStr(entityType), parsePairStr(primaryFilter, \":\"), parsePairsStr(secondaryFilter, \",\", \":\"), parseLongStr(windowStart), parseLongStr(windowEnd), parseStr(fromId), parseLongStr(fromTs), parseLongStr(limit), parseFieldsStr(fields, \",\"), getUser(req));\r\n    } catch (NumberFormatException e) {\r\n        throw new BadRequestException(\"windowStart, windowEnd, fromTs or limit is not a numeric value: \" + e);\r\n    } catch (IllegalArgumentException e) {\r\n        throw new BadRequestException(\"requested invalid field: \" + e);\r\n    } catch (Exception e) {\r\n        LOG.error(\"Error getting entities\", e);\r\n        throw new WebApplicationException(e, Response.Status.INTERNAL_SERVER_ERROR);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "getEntity",
  "errType" : [ "YarnException", "IllegalArgumentException", "Exception" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "TimelineEntity getEntity(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"entityType\") String entityType, @PathParam(\"entityId\") String entityId, @QueryParam(\"fields\") String fields)\n{\r\n    init(res);\r\n    TimelineEntity entity = null;\r\n    try {\r\n        entity = timelineDataManager.getEntity(parseStr(entityType), parseStr(entityId), parseFieldsStr(fields, \",\"), getUser(req));\r\n    } catch (YarnException e) {\r\n        LOG.info(e.getMessage(), e);\r\n        throw new ForbiddenException(e);\r\n    } catch (IllegalArgumentException e) {\r\n        throw new BadRequestException(e);\r\n    } catch (Exception e) {\r\n        LOG.error(\"Error getting entity\", e);\r\n        throw new WebApplicationException(e, Response.Status.INTERNAL_SERVER_ERROR);\r\n    }\r\n    if (entity == null) {\r\n        throw new NotFoundException(\"Timeline entity \" + new EntityIdentifier(parseStr(entityId), parseStr(entityType)) + \" is not found\");\r\n    }\r\n    return entity;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "getEvents",
  "errType" : [ "NumberFormatException", "Exception" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "TimelineEvents getEvents(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"entityType\") String entityType, @QueryParam(\"entityId\") String entityId, @QueryParam(\"eventType\") String eventType, @QueryParam(\"windowStart\") String windowStart, @QueryParam(\"windowEnd\") String windowEnd, @QueryParam(\"limit\") String limit)\n{\r\n    init(res);\r\n    try {\r\n        return timelineDataManager.getEvents(parseStr(entityType), parseArrayStr(entityId, \",\"), parseArrayStr(eventType, \",\"), parseLongStr(windowStart), parseLongStr(windowEnd), parseLongStr(limit), getUser(req));\r\n    } catch (NumberFormatException e) {\r\n        throw (BadRequestException) new BadRequestException(\"windowStart, windowEnd or limit is not a numeric value.\").initCause(e);\r\n    } catch (Exception e) {\r\n        LOG.error(\"Error getting entity timelines\", e);\r\n        throw new WebApplicationException(e, Response.Status.INTERNAL_SERVER_ERROR);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "postEntities",
  "errType" : [ "BadRequestException", "Exception" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "TimelinePutResponse postEntities(@Context HttpServletRequest req, @Context HttpServletResponse res, TimelineEntities entities)\n{\r\n    init(res);\r\n    UserGroupInformation callerUGI = getUser(req);\r\n    if (callerUGI == null) {\r\n        String msg = \"The owner of the posted timeline entities is not set\";\r\n        LOG.error(msg);\r\n        throw new ForbiddenException(msg);\r\n    }\r\n    try {\r\n        return timelineDataManager.postEntities(entities, callerUGI);\r\n    } catch (BadRequestException bre) {\r\n        throw bre;\r\n    } catch (Exception e) {\r\n        LOG.error(\"Error putting entities\", e);\r\n        throw new WebApplicationException(e, Response.Status.INTERNAL_SERVER_ERROR);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "putDomain",
  "errType" : [ "YarnException", "RuntimeException", "IOException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "TimelinePutResponse putDomain(@Context HttpServletRequest req, @Context HttpServletResponse res, TimelineDomain domain)\n{\r\n    init(res);\r\n    UserGroupInformation callerUGI = getUser(req);\r\n    if (callerUGI == null) {\r\n        String msg = \"The owner of the posted timeline domain is not set\";\r\n        LOG.error(msg);\r\n        throw new ForbiddenException(msg);\r\n    }\r\n    domain.setOwner(callerUGI.getShortUserName());\r\n    try {\r\n        timelineDataManager.putDomain(domain, callerUGI);\r\n    } catch (YarnException e) {\r\n        LOG.error(e.getMessage(), e);\r\n        throw new ForbiddenException(e);\r\n    } catch (RuntimeException e) {\r\n        LOG.error(\"Error putting domain\", e);\r\n        throw new WebApplicationException(e, Response.Status.INTERNAL_SERVER_ERROR);\r\n    } catch (IOException e) {\r\n        LOG.error(\"Error putting domain\", e);\r\n        throw new WebApplicationException(e, Response.Status.INTERNAL_SERVER_ERROR);\r\n    }\r\n    return new TimelinePutResponse();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "getDomain",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "TimelineDomain getDomain(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"domainId\") String domainId)\n{\r\n    init(res);\r\n    domainId = parseStr(domainId);\r\n    if (domainId == null || domainId.length() == 0) {\r\n        throw new BadRequestException(\"Domain ID is not specified.\");\r\n    }\r\n    TimelineDomain domain = null;\r\n    try {\r\n        domain = timelineDataManager.getDomain(parseStr(domainId), getUser(req));\r\n    } catch (Exception e) {\r\n        LOG.error(\"Error getting domain\", e);\r\n        throw new WebApplicationException(e, Response.Status.INTERNAL_SERVER_ERROR);\r\n    }\r\n    if (domain == null) {\r\n        throw new NotFoundException(\"Timeline domain [\" + domainId + \"] is not found\");\r\n    }\r\n    return domain;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "getDomains",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "TimelineDomains getDomains(@Context HttpServletRequest req, @Context HttpServletResponse res, @QueryParam(\"owner\") String owner)\n{\r\n    init(res);\r\n    owner = parseStr(owner);\r\n    UserGroupInformation callerUGI = getUser(req);\r\n    if (owner == null || owner.length() == 0) {\r\n        if (callerUGI == null) {\r\n            throw new BadRequestException(\"Domain owner is not specified.\");\r\n        } else {\r\n            owner = callerUGI.getShortUserName();\r\n        }\r\n    }\r\n    try {\r\n        return timelineDataManager.getDomains(owner, callerUGI);\r\n    } catch (Exception e) {\r\n        LOG.error(\"Error getting domains\", e);\r\n        throw new WebApplicationException(e, Response.Status.INTERNAL_SERVER_ERROR);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void init(HttpServletResponse response)\n{\r\n    response.setContentType(null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "UserGroupInformation getUser(HttpServletRequest req)\n{\r\n    String remoteUser = req.getRemoteUser();\r\n    UserGroupInformation callerUGI = null;\r\n    if (remoteUser != null) {\r\n        callerUGI = UserGroupInformation.createRemoteUser(remoteUser);\r\n    }\r\n    return callerUGI;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "parseArrayStr",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SortedSet<String> parseArrayStr(String str, String delimiter)\n{\r\n    if (str == null) {\r\n        return null;\r\n    }\r\n    SortedSet<String> strSet = new TreeSet<String>();\r\n    String[] strs = str.split(delimiter);\r\n    for (String aStr : strs) {\r\n        strSet.add(aStr.trim());\r\n    }\r\n    return strSet;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "parsePairStr",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "NameValuePair parsePairStr(String str, String delimiter)\n{\r\n    if (str == null) {\r\n        return null;\r\n    }\r\n    String[] strs = str.split(delimiter, 2);\r\n    try {\r\n        return new NameValuePair(strs[0].trim(), GenericObjectMapper.OBJECT_READER.readValue(strs[1].trim()));\r\n    } catch (Exception e) {\r\n        return new NameValuePair(strs[0].trim(), strs[1].trim());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "parsePairsStr",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Collection<NameValuePair> parsePairsStr(String str, String aDelimiter, String pDelimiter)\n{\r\n    if (str == null) {\r\n        return null;\r\n    }\r\n    String[] strs = str.split(aDelimiter);\r\n    Set<NameValuePair> pairs = new HashSet<NameValuePair>();\r\n    for (String aStr : strs) {\r\n        pairs.add(parsePairStr(aStr, pDelimiter));\r\n    }\r\n    return pairs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "parseFieldsStr",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "EnumSet<Field> parseFieldsStr(String str, String delimiter)\n{\r\n    if (str == null) {\r\n        return null;\r\n    }\r\n    String[] strs = str.split(delimiter);\r\n    List<Field> fieldList = new ArrayList<Field>();\r\n    for (String s : strs) {\r\n        s = StringUtils.toUpperCase(s.trim());\r\n        if (s.equals(\"EVENTS\")) {\r\n            fieldList.add(Field.EVENTS);\r\n        } else if (s.equals(\"LASTEVENTONLY\")) {\r\n            fieldList.add(Field.LAST_EVENT_ONLY);\r\n        } else if (s.equals(\"RELATEDENTITIES\")) {\r\n            fieldList.add(Field.RELATED_ENTITIES);\r\n        } else if (s.equals(\"PRIMARYFILTERS\")) {\r\n            fieldList.add(Field.PRIMARY_FILTERS);\r\n        } else if (s.equals(\"OTHERINFO\")) {\r\n            fieldList.add(Field.OTHER_INFO);\r\n        } else {\r\n            throw new IllegalArgumentException(\"Requested nonexistent field \" + s);\r\n        }\r\n    }\r\n    if (fieldList.size() == 0) {\r\n        return null;\r\n    }\r\n    Field f1 = fieldList.remove(fieldList.size() - 1);\r\n    if (fieldList.size() == 0) {\r\n        return EnumSet.of(f1);\r\n    } else {\r\n        return EnumSet.of(f1, fieldList.toArray(new Field[fieldList.size()]));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "parseLongStr",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Long parseLongStr(String str)\n{\r\n    return str == null ? null : Long.parseLong(str.trim());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "parseStr",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String parseStr(String str)\n{\r\n    return str == null ? null : str.trim();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "ApplicationAttemptStartData newInstance(ApplicationAttemptId appAttemptId, String host, int rpcPort, ContainerId masterContainerId)\n{\r\n    ApplicationAttemptStartData appAttemptSD = Records.newRecord(ApplicationAttemptStartData.class);\r\n    appAttemptSD.setApplicationAttemptId(appAttemptId);\r\n    appAttemptSD.setHost(host);\r\n    appAttemptSD.setRPCPort(rpcPort);\r\n    appAttemptSD.setMasterContainerId(masterContainerId);\r\n    return appAttemptSD;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getApplicationAttemptId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationAttemptId getApplicationAttemptId()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setApplicationAttemptId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setApplicationAttemptId(ApplicationAttemptId applicationAttemptId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getHost",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getHost()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setHost",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setHost(String host)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getRPCPort",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getRPCPort()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setRPCPort",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setRPCPort(int rpcPort)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getMasterContainerId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerId getMasterContainerId()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setMasterContainerId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setMasterContainerId(ContainerId masterContainerId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "ContainerStartData newInstance(ContainerId containerId, Resource allocatedResource, NodeId assignedNode, Priority priority, long startTime)\n{\r\n    ContainerStartData containerSD = Records.newRecord(ContainerStartData.class);\r\n    containerSD.setContainerId(containerId);\r\n    containerSD.setAllocatedResource(allocatedResource);\r\n    containerSD.setAssignedNode(assignedNode);\r\n    containerSD.setPriority(priority);\r\n    containerSD.setStartTime(startTime);\r\n    return containerSD;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerId getContainerId()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setContainerId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setContainerId(ContainerId containerId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getAllocatedResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Resource getAllocatedResource()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setAllocatedResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAllocatedResource(Resource resource)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getAssignedNode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeId getAssignedNode()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setAssignedNode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAssignedNode(NodeId nodeId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getPriority",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Priority getPriority()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setPriority",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setPriority(Priority priority)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getStartTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getStartTime()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setStartTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setStartTime(long startTime)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "ApplicationAttemptFinishData newInstance(ApplicationAttemptId appAttemptId, String diagnosticsInfo, String trackingURL, FinalApplicationStatus finalApplicationStatus, YarnApplicationAttemptState yarnApplicationAttemptState)\n{\r\n    ApplicationAttemptFinishData appAttemptFD = Records.newRecord(ApplicationAttemptFinishData.class);\r\n    appAttemptFD.setApplicationAttemptId(appAttemptId);\r\n    appAttemptFD.setDiagnosticsInfo(diagnosticsInfo);\r\n    appAttemptFD.setTrackingURL(trackingURL);\r\n    appAttemptFD.setFinalApplicationStatus(finalApplicationStatus);\r\n    appAttemptFD.setYarnApplicationAttemptState(yarnApplicationAttemptState);\r\n    return appAttemptFD;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getApplicationAttemptId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationAttemptId getApplicationAttemptId()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setApplicationAttemptId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setApplicationAttemptId(ApplicationAttemptId applicationAttemptId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getTrackingURL",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getTrackingURL()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setTrackingURL",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setTrackingURL(String trackingURL)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getDiagnosticsInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDiagnosticsInfo()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setDiagnosticsInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDiagnosticsInfo(String diagnosticsInfo)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getFinalApplicationStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "FinalApplicationStatus getFinalApplicationStatus()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setFinalApplicationStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setFinalApplicationStatus(FinalApplicationStatus finalApplicationStatus)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getYarnApplicationAttemptState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "YarnApplicationAttemptState getYarnApplicationAttemptState()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setYarnApplicationAttemptState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setYarnApplicationAttemptState(YarnApplicationAttemptState yarnApplicationAttemptState)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "ApplicationAttemptHistoryData newInstance(ApplicationAttemptId appAttemptId, String host, int rpcPort, ContainerId masterContainerId, String diagnosticsInfo, String trackingURL, FinalApplicationStatus finalApplicationStatus, YarnApplicationAttemptState yarnApplicationAttemptState)\n{\r\n    ApplicationAttemptHistoryData appAttemptHD = new ApplicationAttemptHistoryData();\r\n    appAttemptHD.setApplicationAttemptId(appAttemptId);\r\n    appAttemptHD.setHost(host);\r\n    appAttemptHD.setRPCPort(rpcPort);\r\n    appAttemptHD.setMasterContainerId(masterContainerId);\r\n    appAttemptHD.setDiagnosticsInfo(diagnosticsInfo);\r\n    appAttemptHD.setTrackingURL(trackingURL);\r\n    appAttemptHD.setFinalApplicationStatus(finalApplicationStatus);\r\n    appAttemptHD.setYarnApplicationAttemptState(yarnApplicationAttemptState);\r\n    return appAttemptHD;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getApplicationAttemptId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationAttemptId getApplicationAttemptId()\n{\r\n    return applicationAttemptId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setApplicationAttemptId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setApplicationAttemptId(ApplicationAttemptId applicationAttemptId)\n{\r\n    this.applicationAttemptId = applicationAttemptId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getHost",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getHost()\n{\r\n    return host;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setHost",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setHost(String host)\n{\r\n    this.host = host;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getRPCPort",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getRPCPort()\n{\r\n    return rpcPort;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setRPCPort",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setRPCPort(int rpcPort)\n{\r\n    this.rpcPort = rpcPort;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getTrackingURL",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getTrackingURL()\n{\r\n    return trackingURL;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setTrackingURL",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setTrackingURL(String trackingURL)\n{\r\n    this.trackingURL = trackingURL;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getDiagnosticsInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDiagnosticsInfo()\n{\r\n    return diagnosticsInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setDiagnosticsInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDiagnosticsInfo(String diagnosticsInfo)\n{\r\n    this.diagnosticsInfo = diagnosticsInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getFinalApplicationStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "FinalApplicationStatus getFinalApplicationStatus()\n{\r\n    return finalApplicationStatus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setFinalApplicationStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setFinalApplicationStatus(FinalApplicationStatus finalApplicationStatus)\n{\r\n    this.finalApplicationStatus = finalApplicationStatus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getMasterContainerId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerId getMasterContainerId()\n{\r\n    return masterContainerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setMasterContainerId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setMasterContainerId(ContainerId masterContainerId)\n{\r\n    this.masterContainerId = masterContainerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getYarnApplicationAttemptState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "YarnApplicationAttemptState getYarnApplicationAttemptState()\n{\r\n    return yarnApplicationAttemptState;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setYarnApplicationAttemptState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setYarnApplicationAttemptState(YarnApplicationAttemptState yarnApplicationAttemptState)\n{\r\n    this.yarnApplicationAttemptState = yarnApplicationAttemptState;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerId getContainerId()\n{\r\n    if (this.containerId != null) {\r\n        return this.containerId;\r\n    }\r\n    ContainerStartDataProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasContainerId()) {\r\n        return null;\r\n    }\r\n    this.containerId = convertFromProtoFormat(p.getContainerId());\r\n    return this.containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "setContainerId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setContainerId(ContainerId containerId)\n{\r\n    maybeInitBuilder();\r\n    if (containerId == null) {\r\n        builder.clearContainerId();\r\n    }\r\n    this.containerId = containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "getAllocatedResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Resource getAllocatedResource()\n{\r\n    if (this.resource != null) {\r\n        return this.resource;\r\n    }\r\n    ContainerStartDataProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasAllocatedResource()) {\r\n        return null;\r\n    }\r\n    this.resource = convertFromProtoFormat(p.getAllocatedResource());\r\n    return this.resource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "setAllocatedResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAllocatedResource(Resource resource)\n{\r\n    maybeInitBuilder();\r\n    if (resource == null) {\r\n        builder.clearAllocatedResource();\r\n    }\r\n    this.resource = resource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "getAssignedNode",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NodeId getAssignedNode()\n{\r\n    if (this.nodeId != null) {\r\n        return this.nodeId;\r\n    }\r\n    ContainerStartDataProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasAssignedNodeId()) {\r\n        return null;\r\n    }\r\n    this.nodeId = convertFromProtoFormat(p.getAssignedNodeId());\r\n    return this.nodeId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "setAssignedNode",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAssignedNode(NodeId nodeId)\n{\r\n    maybeInitBuilder();\r\n    if (nodeId == null) {\r\n        builder.clearAssignedNodeId();\r\n    }\r\n    this.nodeId = nodeId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "getPriority",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Priority getPriority()\n{\r\n    if (this.priority != null) {\r\n        return this.priority;\r\n    }\r\n    ContainerStartDataProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasPriority()) {\r\n        return null;\r\n    }\r\n    this.priority = convertFromProtoFormat(p.getPriority());\r\n    return this.priority;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "setPriority",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setPriority(Priority priority)\n{\r\n    maybeInitBuilder();\r\n    if (priority == null) {\r\n        builder.clearPriority();\r\n    }\r\n    this.priority = priority;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "getStartTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getStartTime()\n{\r\n    ContainerStartDataProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getStartTime();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "setStartTime",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setStartTime(long startTime)\n{\r\n    maybeInitBuilder();\r\n    builder.setStartTime(startTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerStartDataProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.containerId != null && !((ContainerIdPBImpl) this.containerId).getProto().equals(builder.getContainerId())) {\r\n        builder.setContainerId(convertToProtoFormat(this.containerId));\r\n    }\r\n    if (this.resource != null) {\r\n        builder.setAllocatedResource(convertToProtoFormat(this.resource));\r\n    }\r\n    if (this.nodeId != null && !((NodeIdPBImpl) this.nodeId).getProto().equals(builder.getAssignedNodeId())) {\r\n        builder.setAssignedNodeId(convertToProtoFormat(this.nodeId));\r\n    }\r\n    if (this.priority != null && !((PriorityPBImpl) this.priority).getProto().equals(builder.getPriority())) {\r\n        builder.setPriority(convertToProtoFormat(this.priority));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ContainerStartDataProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerIdProto convertToProtoFormat(ContainerId containerId)\n{\r\n    return ((ContainerIdPBImpl) containerId).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerIdPBImpl convertFromProtoFormat(ContainerIdProto containerId)\n{\r\n    return new ContainerIdPBImpl(containerId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceProto convertToProtoFormat(Resource resource)\n{\r\n    return ProtoUtils.convertToProtoFormat(resource);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourcePBImpl convertFromProtoFormat(ResourceProto resource)\n{\r\n    return new ResourcePBImpl(resource);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeIdProto convertToProtoFormat(NodeId nodeId)\n{\r\n    return ((NodeIdPBImpl) nodeId).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeIdPBImpl convertFromProtoFormat(NodeIdProto nodeId)\n{\r\n    return new NodeIdPBImpl(nodeId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "PriorityProto convertToProtoFormat(Priority priority)\n{\r\n    return ((PriorityPBImpl) priority).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PriorityPBImpl convertFromProtoFormat(PriorityProto priority)\n{\r\n    return new PriorityPBImpl(priority);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "newContext",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "JAXBContext newContext(Class[] classes, Map<String, Object> properties) throws Exception\n{\r\n    Class spFactory = Class.forName(\"com.sun.xml.bind.v2.ContextFactory\");\r\n    Method m = spFactory.getMethod(\"createContext\", Class[].class, Map.class);\r\n    return (JAXBContext) m.invoke((Object) null, classes, properties);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "createContext",
  "errType" : [ "Exception", "Exception" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "JAXBContext createContext(Class[] classes, Map<String, Object> properties) throws Exception\n{\r\n    for (Class c : classes) {\r\n        if (IGNORE_SET.contains(c)) {\r\n            je.setStackTrace(stackTrace);\r\n            throw je;\r\n        }\r\n        if (!CLASS_SET.contains(c)) {\r\n            try {\r\n                return newContext(classes, properties);\r\n            } catch (Exception e) {\r\n                LOG.warn(\"Error while Creating JAXBContext\", e);\r\n                throw e;\r\n            }\r\n        }\r\n    }\r\n    try {\r\n        synchronized (ContextFactory.class) {\r\n            if (cacheContext == null) {\r\n                cacheContext = newContext(CTYPES, properties);\r\n            }\r\n        }\r\n    } catch (Exception e) {\r\n        LOG.warn(\"Error while Creating JAXBContext\", e);\r\n        throw e;\r\n    }\r\n    return cacheContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "createContext",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "JAXBContext createContext(String contextPath, ClassLoader classLoader, Map<String, Object> properties) throws Exception\n{\r\n    Class spFactory = Class.forName(\"com.sun.xml.bind.v2.ContextFactory\");\r\n    Method m = spFactory.getMethod(\"createContext\", String.class, ClassLoader.class, Map.class);\r\n    return (JAXBContext) m.invoke(null, contextPath, classLoader, properties);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "getApplicationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationId getApplicationId()\n{\r\n    if (this.applicationId != null) {\r\n        return this.applicationId;\r\n    }\r\n    ApplicationStartDataProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasApplicationId()) {\r\n        return null;\r\n    }\r\n    this.applicationId = convertFromProtoFormat(p.getApplicationId());\r\n    return this.applicationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "setApplicationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setApplicationId(ApplicationId applicationId)\n{\r\n    maybeInitBuilder();\r\n    if (applicationId == null) {\r\n        builder.clearApplicationId();\r\n    }\r\n    this.applicationId = applicationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "getApplicationName",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getApplicationName()\n{\r\n    ApplicationStartDataProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasApplicationName()) {\r\n        return null;\r\n    }\r\n    return p.getApplicationName();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "setApplicationName",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setApplicationName(String applicationName)\n{\r\n    maybeInitBuilder();\r\n    if (applicationName == null) {\r\n        builder.clearApplicationName();\r\n        return;\r\n    }\r\n    builder.setApplicationName(applicationName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "getApplicationType",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getApplicationType()\n{\r\n    ApplicationStartDataProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasApplicationType()) {\r\n        return null;\r\n    }\r\n    return p.getApplicationType();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "setApplicationType",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setApplicationType(String applicationType)\n{\r\n    maybeInitBuilder();\r\n    if (applicationType == null) {\r\n        builder.clearApplicationType();\r\n        return;\r\n    }\r\n    builder.setApplicationType(applicationType);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getUser()\n{\r\n    ApplicationStartDataProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasUser()) {\r\n        return null;\r\n    }\r\n    return p.getUser();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "setUser",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setUser(String user)\n{\r\n    maybeInitBuilder();\r\n    if (user == null) {\r\n        builder.clearUser();\r\n        return;\r\n    }\r\n    builder.setUser(user);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "getQueue",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getQueue()\n{\r\n    ApplicationStartDataProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasQueue()) {\r\n        return null;\r\n    }\r\n    return p.getQueue();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "setQueue",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setQueue(String queue)\n{\r\n    maybeInitBuilder();\r\n    if (queue == null) {\r\n        builder.clearQueue();\r\n        return;\r\n    }\r\n    builder.setQueue(queue);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "getSubmitTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getSubmitTime()\n{\r\n    ApplicationStartDataProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getSubmitTime();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "setSubmitTime",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setSubmitTime(long submitTime)\n{\r\n    maybeInitBuilder();\r\n    builder.setSubmitTime(submitTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "getStartTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getStartTime()\n{\r\n    ApplicationStartDataProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getStartTime();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "setStartTime",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setStartTime(long startTime)\n{\r\n    maybeInitBuilder();\r\n    builder.setStartTime(startTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationStartDataProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.applicationId != null && !((ApplicationIdPBImpl) this.applicationId).getProto().equals(builder.getApplicationId())) {\r\n        builder.setApplicationId(convertToProtoFormat(this.applicationId));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ApplicationStartDataProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationIdProto convertToProtoFormat(ApplicationId applicationId)\n{\r\n    return ((ApplicationIdPBImpl) applicationId).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationIdPBImpl convertFromProtoFormat(ApplicationIdProto applicationId)\n{\r\n    return new ApplicationIdPBImpl(applicationId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\util",
  "methodName" : "prefixMatches",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean prefixMatches(byte[] prefix, int prefixlen, byte[] b)\n{\r\n    if (b.length < prefixlen) {\r\n        return false;\r\n    }\r\n    return WritableComparator.compareBytes(prefix, 0, prefixlen, b, 0, prefixlen) == 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\util",
  "methodName" : "loadOrRepairLevelDb",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "DB loadOrRepairLevelDb(JniDBFactory factory, Path dbPath, Options options) throws IOException\n{\r\n    DB db;\r\n    try {\r\n        db = factory.open(new File(dbPath.toString()), options);\r\n    } catch (IOException ioe) {\r\n        File dbFile = new File(dbPath.toString());\r\n        File dbBackupPath = new File(dbPath.toString() + BACKUP_EXT + Time.monotonicNow());\r\n        LOG.warn(\"Incurred exception while loading LevelDb database. Backing \" + \"up at \" + dbBackupPath, ioe);\r\n        FileUtils.copyDirectory(dbFile, dbBackupPath);\r\n        factory.repair(dbFile, options);\r\n        db = factory.open(dbFile, options);\r\n    }\r\n    return db;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "applicationStarted",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void applicationStarted(ApplicationStartData appStart) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "applicationFinished",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void applicationFinished(ApplicationFinishData appFinish) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "applicationAttemptStarted",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void applicationAttemptStarted(ApplicationAttemptStartData appAttemptStart) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "applicationAttemptFinished",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void applicationAttemptFinished(ApplicationAttemptFinishData appAttemptFinish) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "containerStarted",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void containerStarted(ContainerStartData containerStart) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "containerFinished",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void containerFinished(ContainerFinishData containerFinish) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getApplication",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationHistoryData getApplication(ApplicationId appId) throws IOException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getAllApplications",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<ApplicationId, ApplicationHistoryData> getAllApplications() throws IOException\n{\r\n    return Collections.emptyMap();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getApplicationAttempts",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<ApplicationAttemptId, ApplicationAttemptHistoryData> getApplicationAttempts(ApplicationId appId) throws IOException\n{\r\n    return Collections.emptyMap();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getApplicationAttempt",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationAttemptHistoryData getApplicationAttempt(ApplicationAttemptId appAttemptId) throws IOException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerHistoryData getContainer(ContainerId containerId) throws IOException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getAMContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerHistoryData getAMContainer(ApplicationAttemptId appAttemptId) throws IOException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<ContainerId, ContainerHistoryData> getContainers(ApplicationAttemptId appAttemptId) throws IOException\n{\r\n    return Collections.emptyMap();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws IOException\n{\r\n    initStorage(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void serviceStart() throws IOException\n{\r\n    startStorage();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void serviceStop() throws IOException\n{\r\n    closeStorage();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "initStorage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void initStorage(Configuration conf) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "startStorage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void startStorage() throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "closeStorage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void closeStorage() throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "loadState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineServiceState loadState() throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "storeToken",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeToken(TimelineDelegationTokenIdentifier tokenId, Long renewDate) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "updateToken",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void updateToken(TimelineDelegationTokenIdentifier tokenId, Long renewDate) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "removeToken",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void removeToken(TimelineDelegationTokenIdentifier tokenId) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "storeTokenMasterKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void storeTokenMasterKey(DelegationKey key) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "removeTokenMasterKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void removeTokenMasterKey(DelegationKey key) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getName()\n{\r\n    return name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getValue",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Object getValue()\n{\r\n    return value;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String toString()\n{\r\n    return \"{ name: \" + name + \", value: \" + value + \" }\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\security\\authorize",
  "methodName" : "getServices",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Service[] getServices()\n{\r\n    return new Service[] { new Service(YarnConfiguration.YARN_SECURITY_SERVICE_AUTHORIZATION_APPLICATIONHISTORY_PROTOCOL, ApplicationHistoryProtocolPB.class) };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getId()\n{\r\n    return id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getType()\n{\r\n    return type;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "compareTo",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int compareTo(EntityIdentifier other)\n{\r\n    int c = type.compareTo(other.type);\r\n    if (c != 0)\r\n        return c;\r\n    return id.compareTo(other.id);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int hashCode()\n{\r\n    final int prime = 31;\r\n    int result = 1;\r\n    result = prime * result + ((id == null) ? 0 : id.hashCode());\r\n    result = prime * result + ((type == null) ? 0 : type.hashCode());\r\n    return result;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean equals(Object obj)\n{\r\n    if (this == obj)\r\n        return true;\r\n    if (obj == null)\r\n        return false;\r\n    if (getClass() != obj.getClass())\r\n        return false;\r\n    EntityIdentifier other = (EntityIdentifier) obj;\r\n    if (id == null) {\r\n        if (other.id != null)\r\n            return false;\r\n    } else if (!id.equals(other.id))\r\n        return false;\r\n    if (type == null) {\r\n        if (other.type != null)\r\n            return false;\r\n    } else if (!type.equals(other.type))\r\n        return false;\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String toString()\n{\r\n    return \"{ id: \" + id + \", type: \" + type + \" }\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "getApplicationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationId getApplicationId()\n{\r\n    if (this.applicationId != null) {\r\n        return this.applicationId;\r\n    }\r\n    ApplicationFinishDataProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasApplicationId()) {\r\n        return null;\r\n    }\r\n    this.applicationId = convertFromProtoFormat(p.getApplicationId());\r\n    return this.applicationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "setApplicationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setApplicationId(ApplicationId applicationId)\n{\r\n    maybeInitBuilder();\r\n    if (applicationId == null) {\r\n        builder.clearApplicationId();\r\n    }\r\n    this.applicationId = applicationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "getFinishTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getFinishTime()\n{\r\n    ApplicationFinishDataProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getFinishTime();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "setFinishTime",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setFinishTime(long finishTime)\n{\r\n    maybeInitBuilder();\r\n    builder.setFinishTime(finishTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "getDiagnosticsInfo",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getDiagnosticsInfo()\n{\r\n    ApplicationFinishDataProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasDiagnosticsInfo()) {\r\n        return null;\r\n    }\r\n    return p.getDiagnosticsInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "setDiagnosticsInfo",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setDiagnosticsInfo(String diagnosticsInfo)\n{\r\n    maybeInitBuilder();\r\n    if (diagnosticsInfo == null) {\r\n        builder.clearDiagnosticsInfo();\r\n        return;\r\n    }\r\n    builder.setDiagnosticsInfo(diagnosticsInfo);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "getFinalApplicationStatus",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "FinalApplicationStatus getFinalApplicationStatus()\n{\r\n    ApplicationFinishDataProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasFinalApplicationStatus()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getFinalApplicationStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "setFinalApplicationStatus",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setFinalApplicationStatus(FinalApplicationStatus finalApplicationStatus)\n{\r\n    maybeInitBuilder();\r\n    if (finalApplicationStatus == null) {\r\n        builder.clearFinalApplicationStatus();\r\n        return;\r\n    }\r\n    builder.setFinalApplicationStatus(convertToProtoFormat(finalApplicationStatus));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "getYarnApplicationState",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "YarnApplicationState getYarnApplicationState()\n{\r\n    ApplicationFinishDataProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasYarnApplicationState()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getYarnApplicationState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "setYarnApplicationState",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setYarnApplicationState(YarnApplicationState state)\n{\r\n    maybeInitBuilder();\r\n    if (state == null) {\r\n        builder.clearYarnApplicationState();\r\n        return;\r\n    }\r\n    builder.setYarnApplicationState(convertToProtoFormat(state));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationFinishDataProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.applicationId != null && !((ApplicationIdPBImpl) this.applicationId).getProto().equals(builder.getApplicationId())) {\r\n        builder.setApplicationId(convertToProtoFormat(this.applicationId));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ApplicationFinishDataProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationIdProto convertToProtoFormat(ApplicationId applicationId)\n{\r\n    return ((ApplicationIdPBImpl) applicationId).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationIdPBImpl convertFromProtoFormat(ApplicationIdProto applicationId)\n{\r\n    return new ApplicationIdPBImpl(applicationId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FinalApplicationStatus convertFromProtoFormat(FinalApplicationStatusProto finalApplicationStatus)\n{\r\n    return ProtoUtils.convertFromProtoFormat(finalApplicationStatus);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FinalApplicationStatusProto convertToProtoFormat(FinalApplicationStatus finalApplicationStatus)\n{\r\n    return ProtoUtils.convertToProtoFormat(finalApplicationStatus);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnApplicationStateProto convertToProtoFormat(YarnApplicationState state)\n{\r\n    return ProtoUtils.convertToProtoFormat(state);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnApplicationState convertFromProtoFormat(YarnApplicationStateProto yarnApplicationState)\n{\r\n    return ProtoUtils.convertFromProtoFormat(yarnApplicationState);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "setFactory",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setFactory(JniDBFactory fact)\n{\r\n    this.factory = fact;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 36,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    Preconditions.checkArgument(conf.getLong(TIMELINE_SERVICE_TTL_MS, DEFAULT_TIMELINE_SERVICE_TTL_MS) > 0, \"%s property value should be greater than zero\", TIMELINE_SERVICE_TTL_MS);\r\n    Preconditions.checkArgument(conf.getLong(TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS, DEFAULT_TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS) > 0, \"%s property value should be greater than zero\", TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS);\r\n    Preconditions.checkArgument(conf.getLong(TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE, DEFAULT_TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE) >= 0, \"%s property value should be greater than or equal to zero\", TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE);\r\n    Preconditions.checkArgument(conf.getLong(TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE, DEFAULT_TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE) > 0, \" %s property value should be greater than zero\", TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE);\r\n    Preconditions.checkArgument(conf.getLong(TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE, DEFAULT_TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE) > 0, \"%s property value should be greater than zero\", TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE);\r\n    Preconditions.checkArgument(conf.getLong(TIMELINE_SERVICE_LEVELDB_MAX_OPEN_FILES, DEFAULT_TIMELINE_SERVICE_LEVELDB_MAX_OPEN_FILES) > 0, \"%s property value should be greater than zero\", TIMELINE_SERVICE_LEVELDB_MAX_OPEN_FILES);\r\n    Preconditions.checkArgument(conf.getLong(TIMELINE_SERVICE_LEVELDB_WRITE_BUFFER_SIZE, DEFAULT_TIMELINE_SERVICE_LEVELDB_WRITE_BUFFER_SIZE) > 0, \"%s property value should be greater than zero\", TIMELINE_SERVICE_LEVELDB_WRITE_BUFFER_SIZE);\r\n    Options options = new Options();\r\n    options.createIfMissing(true);\r\n    options.cacheSize(conf.getLong(TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE, DEFAULT_TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE));\r\n    if (factory == null) {\r\n        factory = new JniDBFactory();\r\n    }\r\n    Path dbPath = new Path(conf.get(TIMELINE_SERVICE_LEVELDB_PATH), FILENAME);\r\n    Path domainDBPath = new Path(dbPath, DOMAIN);\r\n    Path starttimeDBPath = new Path(dbPath, STARTTIME);\r\n    Path ownerDBPath = new Path(dbPath, OWNER);\r\n    try (FileSystem localFS = FileSystem.getLocal(conf)) {\r\n        if (!localFS.exists(dbPath)) {\r\n            if (!localFS.mkdirs(dbPath)) {\r\n                throw new IOException(\"Couldn't create directory for leveldb \" + \"timeline store \" + dbPath);\r\n            }\r\n            localFS.setPermission(dbPath, LEVELDB_DIR_UMASK);\r\n        }\r\n        if (!localFS.exists(domainDBPath)) {\r\n            if (!localFS.mkdirs(domainDBPath)) {\r\n                throw new IOException(\"Couldn't create directory for leveldb \" + \"timeline store \" + domainDBPath);\r\n            }\r\n            localFS.setPermission(domainDBPath, LEVELDB_DIR_UMASK);\r\n        }\r\n        if (!localFS.exists(starttimeDBPath)) {\r\n            if (!localFS.mkdirs(starttimeDBPath)) {\r\n                throw new IOException(\"Couldn't create directory for leveldb \" + \"timeline store \" + starttimeDBPath);\r\n            }\r\n            localFS.setPermission(starttimeDBPath, LEVELDB_DIR_UMASK);\r\n        }\r\n        if (!localFS.exists(ownerDBPath)) {\r\n            if (!localFS.mkdirs(ownerDBPath)) {\r\n                throw new IOException(\"Couldn't create directory for leveldb \" + \"timeline store \" + ownerDBPath);\r\n            }\r\n            localFS.setPermission(ownerDBPath, LEVELDB_DIR_UMASK);\r\n        }\r\n    }\r\n    options.maxOpenFiles(conf.getInt(TIMELINE_SERVICE_LEVELDB_MAX_OPEN_FILES, DEFAULT_TIMELINE_SERVICE_LEVELDB_MAX_OPEN_FILES));\r\n    options.writeBufferSize(conf.getInt(TIMELINE_SERVICE_LEVELDB_WRITE_BUFFER_SIZE, DEFAULT_TIMELINE_SERVICE_LEVELDB_WRITE_BUFFER_SIZE));\r\n    LOG.info(\"Using leveldb path \" + dbPath);\r\n    domaindb = LeveldbUtils.loadOrRepairLevelDb(factory, domainDBPath, options);\r\n    entitydb = new RollingLevelDB(ENTITY);\r\n    entitydb.init(conf);\r\n    indexdb = new RollingLevelDB(INDEX);\r\n    indexdb.init(conf);\r\n    starttimedb = LeveldbUtils.loadOrRepairLevelDb(factory, starttimeDBPath, options);\r\n    ownerdb = LeveldbUtils.loadOrRepairLevelDb(factory, ownerDBPath, options);\r\n    checkVersion();\r\n    startTimeWriteCache = Collections.synchronizedMap(new LRUMap(getStartTimeWriteCacheSize(conf)));\r\n    startTimeReadCache = Collections.synchronizedMap(new LRUMap(getStartTimeReadCacheSize(conf)));\r\n    writeBatchSize = conf.getInt(TIMELINE_SERVICE_LEVELDB_WRITE_BATCH_SIZE, DEFAULT_TIMELINE_SERVICE_LEVELDB_WRITE_BATCH_SIZE);\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    if (getConfig().getBoolean(TIMELINE_SERVICE_TTL_ENABLE, true)) {\r\n        deletionThread = new EntityDeletionThread(getConfig());\r\n        deletionThread.start();\r\n    }\r\n    super.serviceStart();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "serviceStop",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    if (deletionThread != null) {\r\n        deletionThread.interrupt();\r\n        LOG.info(\"Waiting for deletion thread to complete its current action\");\r\n        try {\r\n            deletionThread.join();\r\n        } catch (InterruptedException e) {\r\n            LOG.warn(\"Interrupted while waiting for deletion thread to complete,\" + \" closing db now\", e);\r\n        }\r\n    }\r\n    IOUtils.cleanupWithLogger(LOG, domaindb);\r\n    IOUtils.cleanupWithLogger(LOG, starttimedb);\r\n    IOUtils.cleanupWithLogger(LOG, ownerdb);\r\n    entitydb.stop();\r\n    indexdb.stop();\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getEntity",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "TimelineEntity getEntity(String entityId, String entityType, EnumSet<Field> fields) throws IOException\n{\r\n    Long revStartTime = getStartTimeLong(entityId, entityType);\r\n    if (revStartTime == null) {\r\n        LOG.debug(\"Could not find start time for {} {} \", entityType, entityId);\r\n        return null;\r\n    }\r\n    byte[] prefix = KeyBuilder.newInstance().add(entityType).add(writeReverseOrderedLong(revStartTime)).add(entityId).getBytesForLookup();\r\n    DB db = entitydb.getDBForStartTime(revStartTime);\r\n    if (db == null) {\r\n        LOG.debug(\"Could not find db for {} {} \", entityType, entityId);\r\n        return null;\r\n    }\r\n    try (DBIterator iterator = db.iterator()) {\r\n        iterator.seek(prefix);\r\n        return getEntity(entityId, entityType, revStartTime, fields, iterator, prefix, prefix.length);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getEntity",
  "errType" : [ "Exception", "Exception" ],
  "containingMethodsNum" : 31,
  "sourceCodeText" : "TimelineEntity getEntity(String entityId, String entityType, Long startTime, EnumSet<Field> fields, DBIterator iterator, byte[] prefix, int prefixlen) throws IOException\n{\r\n    if (fields == null) {\r\n        fields = EnumSet.allOf(Field.class);\r\n    }\r\n    TimelineEntity entity = new TimelineEntity();\r\n    boolean events = false;\r\n    boolean lastEvent = false;\r\n    if (fields.contains(Field.EVENTS)) {\r\n        events = true;\r\n    } else if (fields.contains(Field.LAST_EVENT_ONLY)) {\r\n        lastEvent = true;\r\n    } else {\r\n        entity.setEvents(null);\r\n    }\r\n    boolean relatedEntities = false;\r\n    if (fields.contains(Field.RELATED_ENTITIES)) {\r\n        relatedEntities = true;\r\n    } else {\r\n        entity.setRelatedEntities(null);\r\n    }\r\n    boolean primaryFilters = false;\r\n    if (fields.contains(Field.PRIMARY_FILTERS)) {\r\n        primaryFilters = true;\r\n    } else {\r\n        entity.setPrimaryFilters(null);\r\n    }\r\n    boolean otherInfo = false;\r\n    if (fields.contains(Field.OTHER_INFO)) {\r\n        otherInfo = true;\r\n    } else {\r\n        entity.setOtherInfo(null);\r\n    }\r\n    for (; iterator.hasNext(); iterator.next()) {\r\n        byte[] key = iterator.peekNext().getKey();\r\n        if (!prefixMatches(prefix, prefixlen, key)) {\r\n            break;\r\n        }\r\n        if (key.length == prefixlen) {\r\n            continue;\r\n        }\r\n        if (key[prefixlen] == PRIMARY_FILTERS_COLUMN[0]) {\r\n            if (primaryFilters) {\r\n                addPrimaryFilter(entity, key, prefixlen + PRIMARY_FILTERS_COLUMN.length);\r\n            }\r\n        } else if (key[prefixlen] == OTHER_INFO_COLUMN[0]) {\r\n            if (otherInfo) {\r\n                Object o = null;\r\n                String keyStr = parseRemainingKey(key, prefixlen + OTHER_INFO_COLUMN.length);\r\n                try {\r\n                    o = fstConf.asObject(iterator.peekNext().getValue());\r\n                    entity.addOtherInfo(keyStr, o);\r\n                } catch (Exception ignore) {\r\n                    try {\r\n                        o = fstConf224.asObject(iterator.peekNext().getValue());\r\n                        entity.addOtherInfo(keyStr, o);\r\n                    } catch (Exception e) {\r\n                        LOG.warn(\"Error while decoding \" + entityId + \":otherInfo:\" + keyStr, e);\r\n                    }\r\n                }\r\n            }\r\n        } else if (key[prefixlen] == RELATED_ENTITIES_COLUMN[0]) {\r\n            if (relatedEntities) {\r\n                addRelatedEntity(entity, key, prefixlen + RELATED_ENTITIES_COLUMN.length);\r\n            }\r\n        } else if (key[prefixlen] == EVENTS_COLUMN[0]) {\r\n            if (events || (lastEvent && entity.getEvents().size() == 0)) {\r\n                TimelineEvent event = getEntityEvent(null, key, prefixlen + EVENTS_COLUMN.length, iterator.peekNext().getValue());\r\n                if (event != null) {\r\n                    entity.addEvent(event);\r\n                }\r\n            }\r\n        } else if (key[prefixlen] == DOMAIN_ID_COLUMN[0]) {\r\n            byte[] v = iterator.peekNext().getValue();\r\n            String domainId = new String(v, UTF_8);\r\n            entity.setDomainId(domainId);\r\n        } else {\r\n            LOG.warn(String.format(\"Found unexpected column for entity %s of \" + \"type %s (0x%02x)\", entityId, entityType, key[prefixlen]));\r\n        }\r\n    }\r\n    entity.setEntityId(entityId);\r\n    entity.setEntityType(entityType);\r\n    entity.setStartTime(startTime);\r\n    return entity;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getEntityTimelines",
  "errType" : null,
  "containingMethodsNum" : 29,
  "sourceCodeText" : "TimelineEvents getEntityTimelines(String entityType, SortedSet<String> entityIds, Long limit, Long windowStart, Long windowEnd, Set<String> eventType) throws IOException\n{\r\n    TimelineEvents events = new TimelineEvents();\r\n    if (entityIds == null || entityIds.isEmpty()) {\r\n        return events;\r\n    }\r\n    Map<byte[], List<EntityIdentifier>> startTimeMap = new TreeMap<byte[], List<EntityIdentifier>>(new Comparator<byte[]>() {\r\n\r\n        @Override\r\n        public int compare(byte[] o1, byte[] o2) {\r\n            return WritableComparator.compareBytes(o1, 0, o1.length, o2, 0, o2.length);\r\n        }\r\n    });\r\n    for (String entityId : entityIds) {\r\n        byte[] startTime = getStartTime(entityId, entityType);\r\n        if (startTime != null) {\r\n            List<EntityIdentifier> entities = startTimeMap.get(startTime);\r\n            if (entities == null) {\r\n                entities = new ArrayList<EntityIdentifier>();\r\n                startTimeMap.put(startTime, entities);\r\n            }\r\n            entities.add(new EntityIdentifier(entityId, entityType));\r\n        }\r\n    }\r\n    for (Entry<byte[], List<EntityIdentifier>> entry : startTimeMap.entrySet()) {\r\n        byte[] revStartTime = entry.getKey();\r\n        for (EntityIdentifier entityIdentifier : entry.getValue()) {\r\n            EventsOfOneEntity entity = new EventsOfOneEntity();\r\n            entity.setEntityId(entityIdentifier.getId());\r\n            entity.setEntityType(entityType);\r\n            events.addEvent(entity);\r\n            KeyBuilder kb = KeyBuilder.newInstance().add(entityType).add(revStartTime).add(entityIdentifier.getId()).add(EVENTS_COLUMN);\r\n            byte[] prefix = kb.getBytesForLookup();\r\n            if (windowEnd == null) {\r\n                windowEnd = Long.MAX_VALUE;\r\n            }\r\n            byte[] revts = writeReverseOrderedLong(windowEnd);\r\n            kb.add(revts);\r\n            byte[] first = kb.getBytesForLookup();\r\n            byte[] last = null;\r\n            if (windowStart != null) {\r\n                last = KeyBuilder.newInstance().add(prefix).add(writeReverseOrderedLong(windowStart)).getBytesForLookup();\r\n            }\r\n            if (limit == null) {\r\n                limit = DEFAULT_LIMIT;\r\n            }\r\n            DB db = entitydb.getDBForStartTime(readReverseOrderedLong(revStartTime, 0));\r\n            if (db == null) {\r\n                continue;\r\n            }\r\n            try (DBIterator iterator = db.iterator()) {\r\n                for (iterator.seek(first); entity.getEvents().size() < limit && iterator.hasNext(); iterator.next()) {\r\n                    byte[] key = iterator.peekNext().getKey();\r\n                    if (!prefixMatches(prefix, prefix.length, key) || (last != null && WritableComparator.compareBytes(key, 0, key.length, last, 0, last.length) > 0)) {\r\n                        break;\r\n                    }\r\n                    TimelineEvent event = getEntityEvent(eventType, key, prefix.length, iterator.peekNext().getValue());\r\n                    if (event != null) {\r\n                        entity.addEvent(event);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return events;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getEntities",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "TimelineEntities getEntities(String entityType, Long limit, Long windowStart, Long windowEnd, String fromId, Long fromTs, NameValuePair primaryFilter, Collection<NameValuePair> secondaryFilters, EnumSet<Field> fields, CheckAcl checkAcl) throws IOException\n{\r\n    if (primaryFilter == null) {\r\n        return getEntityByTime(EMPTY_BYTES, entityType, limit, windowStart, windowEnd, fromId, fromTs, secondaryFilters, fields, checkAcl, false);\r\n    } else {\r\n        byte[] base = KeyBuilder.newInstance().add(primaryFilter.getName()).add(fstConf.asByteArray(primaryFilter.getValue()), true).getBytesForLookup();\r\n        return getEntityByTime(base, entityType, limit, windowStart, windowEnd, fromId, fromTs, secondaryFilters, fields, checkAcl, true);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getEntityByTime",
  "errType" : null,
  "containingMethodsNum" : 43,
  "sourceCodeText" : "TimelineEntities getEntityByTime(byte[] base, String entityType, Long limit, Long starttime, Long endtime, String fromId, Long fromTs, Collection<NameValuePair> secondaryFilters, EnumSet<Field> fields, CheckAcl checkAcl, boolean usingPrimaryFilter) throws IOException\n{\r\n    KeyBuilder kb = KeyBuilder.newInstance().add(base).add(entityType);\r\n    byte[] prefix = kb.getBytesForLookup();\r\n    if (endtime == null) {\r\n        endtime = Long.MAX_VALUE;\r\n    }\r\n    if (fields == null) {\r\n        fields = EnumSet.allOf(Field.class);\r\n    }\r\n    long firstStartTime = Long.MAX_VALUE;\r\n    byte[] first = null;\r\n    if (fromId != null) {\r\n        Long fromIdStartTime = getStartTimeLong(fromId, entityType);\r\n        if (fromIdStartTime == null) {\r\n            return new TimelineEntities();\r\n        }\r\n        if (fromIdStartTime <= endtime) {\r\n            firstStartTime = fromIdStartTime;\r\n            first = kb.add(writeReverseOrderedLong(fromIdStartTime)).add(fromId).getBytesForLookup();\r\n        }\r\n    }\r\n    if (first == null) {\r\n        firstStartTime = endtime;\r\n        first = kb.add(writeReverseOrderedLong(endtime)).getBytesForLookup();\r\n    }\r\n    byte[] last = null;\r\n    if (starttime != null) {\r\n        last = KeyBuilder.newInstance().add(base).add(entityType).add(writeReverseOrderedLong(starttime)).getBytesForLookup();\r\n    }\r\n    if (limit == null) {\r\n        limit = DEFAULT_LIMIT;\r\n    }\r\n    TimelineEntities entities = new TimelineEntities();\r\n    RollingLevelDB rollingdb = null;\r\n    if (usingPrimaryFilter) {\r\n        rollingdb = indexdb;\r\n    } else {\r\n        rollingdb = entitydb;\r\n    }\r\n    DB db = rollingdb.getDBForStartTime(firstStartTime);\r\n    while (entities.getEntities().size() < limit && db != null) {\r\n        try (DBIterator iterator = db.iterator()) {\r\n            iterator.seek(first);\r\n            while (entities.getEntities().size() < limit && iterator.hasNext()) {\r\n                byte[] key = iterator.peekNext().getKey();\r\n                if (!prefixMatches(prefix, prefix.length, key) || (last != null && WritableComparator.compareBytes(key, 0, key.length, last, 0, last.length) > 0)) {\r\n                    break;\r\n                }\r\n                KeyParser kp = new KeyParser(key, prefix.length);\r\n                Long startTime = kp.getNextLong();\r\n                String entityId = kp.getNextString();\r\n                if (fromTs != null) {\r\n                    long insertTime = readReverseOrderedLong(iterator.peekNext().getValue(), 0);\r\n                    if (insertTime > fromTs) {\r\n                        byte[] firstKey = key;\r\n                        while (iterator.hasNext()) {\r\n                            key = iterator.peekNext().getKey();\r\n                            iterator.next();\r\n                            if (!prefixMatches(firstKey, kp.getOffset(), key)) {\r\n                                break;\r\n                            }\r\n                        }\r\n                        continue;\r\n                    }\r\n                }\r\n                EnumSet<Field> queryFields = EnumSet.copyOf(fields);\r\n                boolean addPrimaryFilters = false;\r\n                boolean addOtherInfo = false;\r\n                if (secondaryFilters != null && secondaryFilters.size() > 0) {\r\n                    if (!queryFields.contains(Field.PRIMARY_FILTERS)) {\r\n                        queryFields.add(Field.PRIMARY_FILTERS);\r\n                        addPrimaryFilters = true;\r\n                    }\r\n                    if (!queryFields.contains(Field.OTHER_INFO)) {\r\n                        queryFields.add(Field.OTHER_INFO);\r\n                        addOtherInfo = true;\r\n                    }\r\n                }\r\n                TimelineEntity entity = null;\r\n                if (usingPrimaryFilter) {\r\n                    entity = getEntity(entityId, entityType, queryFields);\r\n                    iterator.next();\r\n                } else {\r\n                    entity = getEntity(entityId, entityType, startTime, queryFields, iterator, key, kp.getOffset());\r\n                }\r\n                if (entity != null) {\r\n                    boolean filterPassed = true;\r\n                    if (secondaryFilters != null) {\r\n                        for (NameValuePair filter : secondaryFilters) {\r\n                            Object v = entity.getOtherInfo().get(filter.getName());\r\n                            if (v == null) {\r\n                                Set<Object> vs = entity.getPrimaryFilters().get(filter.getName());\r\n                                if (vs == null || !vs.contains(filter.getValue())) {\r\n                                    filterPassed = false;\r\n                                    break;\r\n                                }\r\n                            } else if (!v.equals(filter.getValue())) {\r\n                                filterPassed = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (filterPassed) {\r\n                        if (entity.getDomainId() == null) {\r\n                            entity.setDomainId(DEFAULT_DOMAIN_ID);\r\n                        }\r\n                        if (checkAcl == null || checkAcl.check(entity)) {\r\n                            if (addPrimaryFilters) {\r\n                                entity.setPrimaryFilters(null);\r\n                            }\r\n                            if (addOtherInfo) {\r\n                                entity.setOtherInfo(null);\r\n                            }\r\n                            entities.addEntity(entity);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            db = rollingdb.getPreviousDB(db);\r\n        }\r\n    }\r\n    return entities;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "putEntities",
  "errType" : [ "IOException", "IOException" ],
  "containingMethodsNum" : 104,
  "sourceCodeText" : "long putEntities(TreeMap<Long, RollingWriteBatch> entityUpdates, TreeMap<Long, RollingWriteBatch> indexUpdates, TimelineEntity entity, TimelinePutResponse response)\n{\r\n    long putCount = 0;\r\n    List<EntityIdentifier> relatedEntitiesWithoutStartTimes = new ArrayList<EntityIdentifier>();\r\n    byte[] revStartTime = null;\r\n    Map<String, Set<Object>> primaryFilters = null;\r\n    try {\r\n        List<TimelineEvent> events = entity.getEvents();\r\n        Long startTime = getAndSetStartTime(entity.getEntityId(), entity.getEntityType(), entity.getStartTime(), events);\r\n        if (startTime == null) {\r\n            TimelinePutError error = new TimelinePutError();\r\n            error.setEntityId(entity.getEntityId());\r\n            error.setEntityType(entity.getEntityType());\r\n            error.setErrorCode(TimelinePutError.NO_START_TIME);\r\n            response.addError(error);\r\n            return putCount;\r\n        }\r\n        if (StringUtils.isEmpty(entity.getDomainId())) {\r\n            TimelinePutError error = new TimelinePutError();\r\n            error.setEntityId(entity.getEntityId());\r\n            error.setEntityType(entity.getEntityType());\r\n            error.setErrorCode(TimelinePutError.NO_DOMAIN);\r\n            response.addError(error);\r\n            return putCount;\r\n        }\r\n        revStartTime = writeReverseOrderedLong(startTime);\r\n        long roundedStartTime = entitydb.computeCurrentCheckMillis(startTime);\r\n        RollingWriteBatch rollingWriteBatch = entityUpdates.get(roundedStartTime);\r\n        if (rollingWriteBatch == null) {\r\n            DB db = entitydb.getDBForStartTime(startTime);\r\n            if (db != null) {\r\n                WriteBatch writeBatch = db.createWriteBatch();\r\n                rollingWriteBatch = new RollingWriteBatch(db, writeBatch);\r\n                entityUpdates.put(roundedStartTime, rollingWriteBatch);\r\n            }\r\n        }\r\n        if (rollingWriteBatch == null) {\r\n            TimelinePutError error = new TimelinePutError();\r\n            error.setEntityId(entity.getEntityId());\r\n            error.setEntityType(entity.getEntityType());\r\n            error.setErrorCode(TimelinePutError.EXPIRED_ENTITY);\r\n            response.addError(error);\r\n            return putCount;\r\n        }\r\n        WriteBatch writeBatch = rollingWriteBatch.getWriteBatch();\r\n        byte[] entityIdBytes = entity.getEntityId().getBytes(UTF_8);\r\n        byte[] entityTypeBytes = entity.getEntityType().getBytes(UTF_8);\r\n        byte[] domainIdBytes = entity.getDomainId().getBytes(UTF_8);\r\n        byte[] markerKey = KeyBuilder.newInstance(3).add(entityTypeBytes, true).add(revStartTime).add(entityIdBytes, true).getBytesForLookup();\r\n        writeBatch.put(markerKey, EMPTY_BYTES);\r\n        ++putCount;\r\n        byte[] domainkey = KeyBuilder.newInstance(4).add(entityTypeBytes, true).add(revStartTime).add(entityIdBytes, true).add(DOMAIN_ID_COLUMN).getBytes();\r\n        writeBatch.put(domainkey, domainIdBytes);\r\n        ++putCount;\r\n        if (events != null) {\r\n            for (TimelineEvent event : events) {\r\n                byte[] revts = writeReverseOrderedLong(event.getTimestamp());\r\n                byte[] key = KeyBuilder.newInstance().add(entityTypeBytes, true).add(revStartTime).add(entityIdBytes, true).add(EVENTS_COLUMN).add(revts).add(event.getEventType().getBytes(UTF_8)).getBytes();\r\n                byte[] value = fstConf.asByteArray(event.getEventInfo());\r\n                writeBatch.put(key, value);\r\n                ++putCount;\r\n            }\r\n        }\r\n        primaryFilters = entity.getPrimaryFilters();\r\n        if (primaryFilters != null) {\r\n            for (Entry<String, Set<Object>> primaryFilter : primaryFilters.entrySet()) {\r\n                for (Object primaryFilterValue : primaryFilter.getValue()) {\r\n                    byte[] key = KeyBuilder.newInstance(6).add(entityTypeBytes, true).add(revStartTime).add(entityIdBytes, true).add(PRIMARY_FILTERS_COLUMN).add(primaryFilter.getKey()).add(fstConf.asByteArray(primaryFilterValue)).getBytes();\r\n                    writeBatch.put(key, EMPTY_BYTES);\r\n                    ++putCount;\r\n                }\r\n            }\r\n        }\r\n        Map<String, Object> otherInfo = entity.getOtherInfo();\r\n        if (otherInfo != null) {\r\n            for (Entry<String, Object> info : otherInfo.entrySet()) {\r\n                byte[] key = KeyBuilder.newInstance(5).add(entityTypeBytes, true).add(revStartTime).add(entityIdBytes, true).add(OTHER_INFO_COLUMN).add(info.getKey()).getBytes();\r\n                byte[] value = fstConf.asByteArray(info.getValue());\r\n                writeBatch.put(key, value);\r\n                ++putCount;\r\n            }\r\n        }\r\n        Map<String, Set<String>> relatedEntities = entity.getRelatedEntities();\r\n        if (relatedEntities != null) {\r\n            for (Entry<String, Set<String>> relatedEntityList : relatedEntities.entrySet()) {\r\n                String relatedEntityType = relatedEntityList.getKey();\r\n                for (String relatedEntityId : relatedEntityList.getValue()) {\r\n                    Long relatedStartTimeLong = getStartTimeLong(relatedEntityId, relatedEntityType);\r\n                    if (relatedStartTimeLong == null) {\r\n                        relatedEntitiesWithoutStartTimes.add(new EntityIdentifier(relatedEntityId, relatedEntityType));\r\n                        continue;\r\n                    }\r\n                    byte[] relatedEntityStartTime = writeReverseOrderedLong(relatedStartTimeLong);\r\n                    long relatedRoundedStartTime = entitydb.computeCurrentCheckMillis(relatedStartTimeLong);\r\n                    RollingWriteBatch relatedRollingWriteBatch = entityUpdates.get(relatedRoundedStartTime);\r\n                    if (relatedRollingWriteBatch == null) {\r\n                        DB db = entitydb.getDBForStartTime(relatedStartTimeLong);\r\n                        if (db != null) {\r\n                            WriteBatch relatedWriteBatch = db.createWriteBatch();\r\n                            relatedRollingWriteBatch = new RollingWriteBatch(db, relatedWriteBatch);\r\n                            entityUpdates.put(relatedRoundedStartTime, relatedRollingWriteBatch);\r\n                        }\r\n                    }\r\n                    if (relatedRollingWriteBatch == null) {\r\n                        TimelinePutError error = new TimelinePutError();\r\n                        error.setEntityId(entity.getEntityId());\r\n                        error.setEntityType(entity.getEntityType());\r\n                        error.setErrorCode(TimelinePutError.EXPIRED_ENTITY);\r\n                        response.addError(error);\r\n                        continue;\r\n                    }\r\n                    byte[] relatedDomainIdBytes = relatedRollingWriteBatch.getDB().get(createDomainIdKey(relatedEntityId, relatedEntityType, relatedEntityStartTime));\r\n                    String domainId = null;\r\n                    if (relatedDomainIdBytes == null) {\r\n                        domainId = TimelineDataManager.DEFAULT_DOMAIN_ID;\r\n                    } else {\r\n                        domainId = new String(relatedDomainIdBytes, UTF_8);\r\n                    }\r\n                    if (!domainId.equals(entity.getDomainId())) {\r\n                        TimelinePutError error = new TimelinePutError();\r\n                        error.setEntityId(entity.getEntityId());\r\n                        error.setEntityType(entity.getEntityType());\r\n                        error.setErrorCode(TimelinePutError.FORBIDDEN_RELATION);\r\n                        response.addError(error);\r\n                        continue;\r\n                    }\r\n                    byte[] key = createRelatedEntityKey(relatedEntityId, relatedEntityType, relatedEntityStartTime, entity.getEntityId(), entity.getEntityType());\r\n                    WriteBatch relatedWriteBatch = relatedRollingWriteBatch.getWriteBatch();\r\n                    relatedWriteBatch.put(key, EMPTY_BYTES);\r\n                    ++putCount;\r\n                }\r\n            }\r\n        }\r\n        RollingWriteBatch indexRollingWriteBatch = indexUpdates.get(roundedStartTime);\r\n        if (indexRollingWriteBatch == null) {\r\n            DB db = indexdb.getDBForStartTime(startTime);\r\n            if (db != null) {\r\n                WriteBatch indexWriteBatch = db.createWriteBatch();\r\n                indexRollingWriteBatch = new RollingWriteBatch(db, indexWriteBatch);\r\n                indexUpdates.put(roundedStartTime, indexRollingWriteBatch);\r\n            }\r\n        }\r\n        if (indexRollingWriteBatch == null) {\r\n            TimelinePutError error = new TimelinePutError();\r\n            error.setEntityId(entity.getEntityId());\r\n            error.setEntityType(entity.getEntityType());\r\n            error.setErrorCode(TimelinePutError.EXPIRED_ENTITY);\r\n            response.addError(error);\r\n            return putCount;\r\n        }\r\n        WriteBatch indexWriteBatch = indexRollingWriteBatch.getWriteBatch();\r\n        putCount += writePrimaryFilterEntries(indexWriteBatch, primaryFilters, markerKey, EMPTY_BYTES);\r\n    } catch (IOException e) {\r\n        LOG.error(\"Error putting entity \" + entity.getEntityId() + \" of type \" + entity.getEntityType(), e);\r\n        TimelinePutError error = new TimelinePutError();\r\n        error.setEntityId(entity.getEntityId());\r\n        error.setEntityType(entity.getEntityType());\r\n        error.setErrorCode(TimelinePutError.IO_EXCEPTION);\r\n        response.addError(error);\r\n    }\r\n    for (EntityIdentifier relatedEntity : relatedEntitiesWithoutStartTimes) {\r\n        try {\r\n            Long relatedEntityStartAndInsertTime = getAndSetStartTime(relatedEntity.getId(), relatedEntity.getType(), readReverseOrderedLong(revStartTime, 0), null);\r\n            if (relatedEntityStartAndInsertTime == null) {\r\n                throw new IOException(\"Error setting start time for related entity\");\r\n            }\r\n            long relatedStartTimeLong = relatedEntityStartAndInsertTime;\r\n            long relatedRoundedStartTime = entitydb.computeCurrentCheckMillis(relatedStartTimeLong);\r\n            RollingWriteBatch relatedRollingWriteBatch = entityUpdates.get(relatedRoundedStartTime);\r\n            if (relatedRollingWriteBatch == null) {\r\n                DB db = entitydb.getDBForStartTime(relatedStartTimeLong);\r\n                if (db != null) {\r\n                    WriteBatch relatedWriteBatch = db.createWriteBatch();\r\n                    relatedRollingWriteBatch = new RollingWriteBatch(db, relatedWriteBatch);\r\n                    entityUpdates.put(relatedRoundedStartTime, relatedRollingWriteBatch);\r\n                }\r\n            }\r\n            if (relatedRollingWriteBatch == null) {\r\n                TimelinePutError error = new TimelinePutError();\r\n                error.setEntityId(entity.getEntityId());\r\n                error.setEntityType(entity.getEntityType());\r\n                error.setErrorCode(TimelinePutError.EXPIRED_ENTITY);\r\n                response.addError(error);\r\n                continue;\r\n            }\r\n            WriteBatch relatedWriteBatch = relatedRollingWriteBatch.getWriteBatch();\r\n            byte[] relatedEntityStartTime = writeReverseOrderedLong(relatedEntityStartAndInsertTime);\r\n            byte[] key = createDomainIdKey(relatedEntity.getId(), relatedEntity.getType(), relatedEntityStartTime);\r\n            relatedWriteBatch.put(key, entity.getDomainId().getBytes(UTF_8));\r\n            ++putCount;\r\n            relatedWriteBatch.put(createRelatedEntityKey(relatedEntity.getId(), relatedEntity.getType(), relatedEntityStartTime, entity.getEntityId(), entity.getEntityType()), EMPTY_BYTES);\r\n            ++putCount;\r\n            relatedWriteBatch.put(createEntityMarkerKey(relatedEntity.getId(), relatedEntity.getType(), relatedEntityStartTime), EMPTY_BYTES);\r\n            ++putCount;\r\n        } catch (IOException e) {\r\n            LOG.error(\"Error putting related entity \" + relatedEntity.getId() + \" of type \" + relatedEntity.getType() + \" for entity \" + entity.getEntityId() + \" of type \" + entity.getEntityType(), e);\r\n            TimelinePutError error = new TimelinePutError();\r\n            error.setEntityId(entity.getEntityId());\r\n            error.setEntityType(entity.getEntityType());\r\n            error.setErrorCode(TimelinePutError.IO_EXCEPTION);\r\n            response.addError(error);\r\n        }\r\n    }\r\n    return putCount;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "writePrimaryFilterEntries",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "long writePrimaryFilterEntries(WriteBatch writeBatch, Map<String, Set<Object>> primaryFilters, byte[] key, byte[] value) throws IOException\n{\r\n    long putCount = 0;\r\n    if (primaryFilters != null) {\r\n        for (Entry<String, Set<Object>> pf : primaryFilters.entrySet()) {\r\n            for (Object pfval : pf.getValue()) {\r\n                writeBatch.put(addPrimaryFilterToKey(pf.getKey(), pfval, key), value);\r\n                ++putCount;\r\n            }\r\n        }\r\n    }\r\n    return putCount;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "put",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "TimelinePutResponse put(TimelineEntities entities)\n{\r\n    LOG.debug(\"Starting put\");\r\n    TimelinePutResponse response = new TimelinePutResponse();\r\n    TreeMap<Long, RollingWriteBatch> entityUpdates = new TreeMap<Long, RollingWriteBatch>();\r\n    TreeMap<Long, RollingWriteBatch> indexUpdates = new TreeMap<Long, RollingWriteBatch>();\r\n    long entityCount = 0;\r\n    long indexCount = 0;\r\n    try {\r\n        for (TimelineEntity entity : entities.getEntities()) {\r\n            entityCount += putEntities(entityUpdates, indexUpdates, entity, response);\r\n        }\r\n        for (RollingWriteBatch entityUpdate : entityUpdates.values()) {\r\n            entityUpdate.write();\r\n        }\r\n        for (RollingWriteBatch indexUpdate : indexUpdates.values()) {\r\n            indexUpdate.write();\r\n        }\r\n    } finally {\r\n        for (RollingWriteBatch entityRollingWriteBatch : entityUpdates.values()) {\r\n            entityRollingWriteBatch.close();\r\n        }\r\n        for (RollingWriteBatch indexRollingWriteBatch : indexUpdates.values()) {\r\n            indexRollingWriteBatch.close();\r\n        }\r\n    }\r\n    LOG.debug(\"Put {} new leveldb entity entries and {} new leveldb index\" + \" entries from {} timeline entities\", entityCount, indexCount, entities.getEntities().size());\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getStartTime",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "byte[] getStartTime(String entityId, String entityType) throws IOException\n{\r\n    Long l = getStartTimeLong(entityId, entityType);\r\n    return l == null ? null : writeReverseOrderedLong(l);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getStartTimeLong",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "Long getStartTimeLong(String entityId, String entityType) throws IOException\n{\r\n    EntityIdentifier entity = new EntityIdentifier(entityId, entityType);\r\n    if (startTimeReadCache.containsKey(entity)) {\r\n        return startTimeReadCache.get(entity);\r\n    } else {\r\n        byte[] b = createStartTimeLookupKey(entity.getId(), entity.getType());\r\n        byte[] v = starttimedb.get(b);\r\n        if (v == null) {\r\n            return null;\r\n        } else {\r\n            Long l = readReverseOrderedLong(v, 0);\r\n            startTimeReadCache.put(entity, l);\r\n            return l;\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getAndSetStartTime",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Long getAndSetStartTime(String entityId, String entityType, Long startTime, List<TimelineEvent> events) throws IOException\n{\r\n    EntityIdentifier entity = new EntityIdentifier(entityId, entityType);\r\n    Long time = startTimeWriteCache.get(entity);\r\n    if (time != null) {\r\n        return time;\r\n    }\r\n    if (startTime == null && events != null) {\r\n        startTime = Long.MAX_VALUE;\r\n        for (TimelineEvent e : events) {\r\n            if (e.getTimestamp() < startTime) {\r\n                startTime = e.getTimestamp();\r\n            }\r\n        }\r\n    }\r\n    return checkStartTimeInDb(entity, startTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "checkStartTimeInDb",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "Long checkStartTimeInDb(EntityIdentifier entity, Long suggestedStartTime) throws IOException\n{\r\n    Long startAndInsertTime = null;\r\n    byte[] b = createStartTimeLookupKey(entity.getId(), entity.getType());\r\n    synchronized (this) {\r\n        byte[] v = starttimedb.get(b);\r\n        if (v == null) {\r\n            if (suggestedStartTime == null) {\r\n                return null;\r\n            }\r\n            startAndInsertTime = suggestedStartTime;\r\n            starttimedb.put(b, writeReverseOrderedLong(suggestedStartTime));\r\n        } else {\r\n            startAndInsertTime = readReverseOrderedLong(v, 0);\r\n        }\r\n    }\r\n    startTimeWriteCache.put(entity, startAndInsertTime);\r\n    startTimeReadCache.put(entity, startAndInsertTime);\r\n    return startAndInsertTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "createStartTimeLookupKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "byte[] createStartTimeLookupKey(String entityId, String entityType) throws IOException\n{\r\n    return KeyBuilder.newInstance().add(entityType).add(entityId).getBytes();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "createEntityMarkerKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "byte[] createEntityMarkerKey(String entityId, String entityType, byte[] revStartTime) throws IOException\n{\r\n    return KeyBuilder.newInstance().add(entityType).add(revStartTime).add(entityId).getBytesForLookup();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "addPrimaryFilterToKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "byte[] addPrimaryFilterToKey(String primaryFilterName, Object primaryFilterValue, byte[] key) throws IOException\n{\r\n    return KeyBuilder.newInstance().add(primaryFilterName).add(fstConf.asByteArray(primaryFilterValue), true).add(key).getBytes();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getEntityEvent",
  "errType" : [ "Exception", "Exception" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "TimelineEvent getEntityEvent(Set<String> eventTypes, byte[] key, int offset, byte[] value) throws IOException\n{\r\n    KeyParser kp = new KeyParser(key, offset);\r\n    long ts = kp.getNextLong();\r\n    String tstype = kp.getNextString();\r\n    if (eventTypes == null || eventTypes.contains(tstype)) {\r\n        TimelineEvent event = new TimelineEvent();\r\n        event.setTimestamp(ts);\r\n        event.setEventType(tstype);\r\n        Object o = null;\r\n        try {\r\n            o = fstConf.asObject(value);\r\n        } catch (Exception ignore) {\r\n            try {\r\n                o = fstConf224.asObject(value);\r\n            } catch (Exception e) {\r\n                LOG.warn(\"Error while decoding \" + tstype, e);\r\n            }\r\n        }\r\n        if (o == null) {\r\n            event.setEventInfo(null);\r\n        } else if (o instanceof Map) {\r\n            @SuppressWarnings(\"unchecked\")\r\n            Map<String, Object> m = (Map<String, Object>) o;\r\n            event.setEventInfo(m);\r\n        } else {\r\n            throw new IOException(\"Couldn't deserialize event info map\");\r\n        }\r\n        return event;\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "addPrimaryFilter",
  "errType" : [ "Exception", "Exception" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void addPrimaryFilter(TimelineEntity entity, byte[] key, int offset) throws IOException\n{\r\n    KeyParser kp = new KeyParser(key, offset);\r\n    String name = kp.getNextString();\r\n    byte[] bytes = kp.getRemainingBytes();\r\n    Object value = null;\r\n    try {\r\n        value = fstConf.asObject(bytes);\r\n        entity.addPrimaryFilter(name, value);\r\n    } catch (Exception ignore) {\r\n        try {\r\n            value = fstConf224.asObject(bytes);\r\n            entity.addPrimaryFilter(name, value);\r\n        } catch (Exception e) {\r\n            LOG.warn(\"Error while decoding \" + name, e);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "parseRemainingKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String parseRemainingKey(byte[] b, int offset)\n{\r\n    return new String(b, offset, b.length - offset, UTF_8);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "createRelatedEntityKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "byte[] createRelatedEntityKey(String entityId, String entityType, byte[] revStartTime, String relatedEntityId, String relatedEntityType) throws IOException\n{\r\n    return KeyBuilder.newInstance().add(entityType).add(revStartTime).add(entityId).add(RELATED_ENTITIES_COLUMN).add(relatedEntityType).add(relatedEntityId).getBytes();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "addRelatedEntity",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void addRelatedEntity(TimelineEntity entity, byte[] key, int offset) throws IOException\n{\r\n    KeyParser kp = new KeyParser(key, offset);\r\n    String type = kp.getNextString();\r\n    String id = kp.getNextString();\r\n    entity.addRelatedEntity(type, id);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "createDomainIdKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "byte[] createDomainIdKey(String entityId, String entityType, byte[] revStartTime) throws IOException\n{\r\n    return KeyBuilder.newInstance().add(entityType).add(revStartTime).add(entityId).add(DOMAIN_ID_COLUMN).getBytes();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "clearStartTimeCache",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void clearStartTimeCache()\n{\r\n    startTimeWriteCache.clear();\r\n    startTimeReadCache.clear();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getStartTimeReadCacheSize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getStartTimeReadCacheSize(Configuration conf)\n{\r\n    return conf.getInt(TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE, DEFAULT_TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getStartTimeWriteCacheSize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getStartTimeWriteCacheSize(Configuration conf)\n{\r\n    return conf.getInt(TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE, DEFAULT_TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "evictOldStartTimes",
  "errType" : null,
  "containingMethodsNum" : 21,
  "sourceCodeText" : "long evictOldStartTimes(long minStartTime) throws IOException\n{\r\n    LOG.info(\"Searching for start times to evict earlier than \" + minStartTime);\r\n    long batchSize = 0;\r\n    long totalCount = 0;\r\n    long startTimesCount = 0;\r\n    WriteBatch writeBatch = null;\r\n    ReadOptions readOptions = new ReadOptions();\r\n    readOptions.fillCache(false);\r\n    try (DBIterator iterator = starttimedb.iterator(readOptions)) {\r\n        iterator.seekToFirst();\r\n        writeBatch = starttimedb.createWriteBatch();\r\n        while (iterator.hasNext()) {\r\n            Map.Entry<byte[], byte[]> current = iterator.next();\r\n            byte[] entityKey = current.getKey();\r\n            byte[] entityValue = current.getValue();\r\n            long startTime = readReverseOrderedLong(entityValue, 0);\r\n            if (startTime < minStartTime) {\r\n                ++batchSize;\r\n                ++startTimesCount;\r\n                writeBatch.delete(entityKey);\r\n                if (batchSize >= writeBatchSize) {\r\n                    LOG.debug(\"Preparing to delete a batch of {} old start times\", batchSize);\r\n                    starttimedb.write(writeBatch);\r\n                    LOG.debug(\"Deleted batch of {}. Total start times deleted\" + \" so far this cycle: {}\", batchSize, startTimesCount);\r\n                    IOUtils.cleanupWithLogger(LOG, writeBatch);\r\n                    writeBatch = starttimedb.createWriteBatch();\r\n                    batchSize = 0;\r\n                }\r\n            }\r\n            ++totalCount;\r\n        }\r\n        LOG.debug(\"Preparing to delete a batch of {} old start times\", batchSize);\r\n        starttimedb.write(writeBatch);\r\n        LOG.debug(\"Deleted batch of {}. Total start times deleted so far\" + \" this cycle: {}\", batchSize, startTimesCount);\r\n        LOG.info(\"Deleted \" + startTimesCount + \"/\" + totalCount + \" start time entities earlier than \" + minStartTime);\r\n    } finally {\r\n        IOUtils.cleanupWithLogger(LOG, writeBatch);\r\n    }\r\n    return startTimesCount;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "discardOldEntities",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void discardOldEntities(long timestamp) throws IOException, InterruptedException\n{\r\n    long totalCount = 0;\r\n    long t1 = System.currentTimeMillis();\r\n    try {\r\n        totalCount += evictOldStartTimes(timestamp);\r\n        indexdb.evictOldDBs();\r\n        entitydb.evictOldDBs();\r\n    } finally {\r\n        long t2 = System.currentTimeMillis();\r\n        LOG.info(\"Discarded \" + totalCount + \" entities for timestamp \" + timestamp + \" and earlier in \" + (t2 - t1) / 1000.0 + \" seconds\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "loadVersion",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Version loadVersion() throws IOException\n{\r\n    byte[] data = starttimedb.get(bytes(TIMELINE_STORE_VERSION_KEY));\r\n    if (data == null || data.length == 0) {\r\n        return Version.newInstance(1, 0);\r\n    }\r\n    Version version = new VersionPBImpl(VersionProto.parseFrom(data));\r\n    return version;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "storeVersion",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void storeVersion(Version state) throws IOException\n{\r\n    dbStoreVersion(state);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "dbStoreVersion",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void dbStoreVersion(Version state) throws IOException\n{\r\n    String key = TIMELINE_STORE_VERSION_KEY;\r\n    byte[] data = ((VersionPBImpl) state).getProto().toByteArray();\r\n    try {\r\n        starttimedb.put(bytes(key), data);\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getCurrentVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Version getCurrentVersion()\n{\r\n    return CURRENT_VERSION_INFO;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "checkVersion",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void checkVersion() throws IOException\n{\r\n    Version loadedVersion = loadVersion();\r\n    LOG.info(\"Loaded timeline store version info \" + loadedVersion);\r\n    if (loadedVersion.equals(getCurrentVersion())) {\r\n        return;\r\n    }\r\n    if (loadedVersion.isCompatibleTo(getCurrentVersion())) {\r\n        LOG.info(\"Storing timeline store version info \" + getCurrentVersion());\r\n        dbStoreVersion(CURRENT_VERSION_INFO);\r\n    } else {\r\n        String incompatibleMessage = \"Incompatible version for timeline store: \" + \"expecting version \" + getCurrentVersion() + \", but loading version \" + loadedVersion;\r\n        LOG.error(incompatibleMessage);\r\n        throw new IOException(incompatibleMessage);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "put",
  "errType" : null,
  "containingMethodsNum" : 44,
  "sourceCodeText" : "void put(TimelineDomain domain) throws IOException\n{\r\n    try (WriteBatch domainWriteBatch = domaindb.createWriteBatch();\r\n        WriteBatch ownerWriteBatch = ownerdb.createWriteBatch()) {\r\n        if (domain.getId() == null || domain.getId().length() == 0) {\r\n            throw new IllegalArgumentException(\"Domain doesn't have an ID\");\r\n        }\r\n        if (domain.getOwner() == null || domain.getOwner().length() == 0) {\r\n            throw new IllegalArgumentException(\"Domain doesn't have an owner.\");\r\n        }\r\n        byte[] domainEntryKey = createDomainEntryKey(domain.getId(), DESCRIPTION_COLUMN);\r\n        byte[] ownerLookupEntryKey = createOwnerLookupKey(domain.getOwner(), domain.getId(), DESCRIPTION_COLUMN);\r\n        if (domain.getDescription() != null) {\r\n            domainWriteBatch.put(domainEntryKey, domain.getDescription().getBytes(UTF_8));\r\n            ownerWriteBatch.put(ownerLookupEntryKey, domain.getDescription().getBytes(UTF_8));\r\n        } else {\r\n            domainWriteBatch.put(domainEntryKey, EMPTY_BYTES);\r\n            ownerWriteBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\r\n        }\r\n        domainEntryKey = createDomainEntryKey(domain.getId(), OWNER_COLUMN);\r\n        ownerLookupEntryKey = createOwnerLookupKey(domain.getOwner(), domain.getId(), OWNER_COLUMN);\r\n        domainWriteBatch.put(domainEntryKey, domain.getOwner().getBytes(UTF_8));\r\n        ownerWriteBatch.put(ownerLookupEntryKey, domain.getOwner().getBytes(UTF_8));\r\n        domainEntryKey = createDomainEntryKey(domain.getId(), READER_COLUMN);\r\n        ownerLookupEntryKey = createOwnerLookupKey(domain.getOwner(), domain.getId(), READER_COLUMN);\r\n        if (domain.getReaders() != null && domain.getReaders().length() > 0) {\r\n            domainWriteBatch.put(domainEntryKey, domain.getReaders().getBytes(UTF_8));\r\n            ownerWriteBatch.put(ownerLookupEntryKey, domain.getReaders().getBytes(UTF_8));\r\n        } else {\r\n            domainWriteBatch.put(domainEntryKey, EMPTY_BYTES);\r\n            ownerWriteBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\r\n        }\r\n        domainEntryKey = createDomainEntryKey(domain.getId(), WRITER_COLUMN);\r\n        ownerLookupEntryKey = createOwnerLookupKey(domain.getOwner(), domain.getId(), WRITER_COLUMN);\r\n        if (domain.getWriters() != null && domain.getWriters().length() > 0) {\r\n            domainWriteBatch.put(domainEntryKey, domain.getWriters().getBytes(UTF_8));\r\n            ownerWriteBatch.put(ownerLookupEntryKey, domain.getWriters().getBytes(UTF_8));\r\n        } else {\r\n            domainWriteBatch.put(domainEntryKey, EMPTY_BYTES);\r\n            ownerWriteBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\r\n        }\r\n        domainEntryKey = createDomainEntryKey(domain.getId(), TIMESTAMP_COLUMN);\r\n        ownerLookupEntryKey = createOwnerLookupKey(domain.getOwner(), domain.getId(), TIMESTAMP_COLUMN);\r\n        long currentTimestamp = System.currentTimeMillis();\r\n        byte[] timestamps = domaindb.get(domainEntryKey);\r\n        if (timestamps == null) {\r\n            timestamps = new byte[16];\r\n            writeReverseOrderedLong(currentTimestamp, timestamps, 0);\r\n            writeReverseOrderedLong(currentTimestamp, timestamps, 8);\r\n        } else {\r\n            writeReverseOrderedLong(currentTimestamp, timestamps, 8);\r\n        }\r\n        domainWriteBatch.put(domainEntryKey, timestamps);\r\n        ownerWriteBatch.put(ownerLookupEntryKey, timestamps);\r\n        domaindb.write(domainWriteBatch);\r\n        ownerdb.write(ownerWriteBatch);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "createDomainEntryKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "byte[] createDomainEntryKey(String domainId, byte[] columnName) throws IOException\n{\r\n    return KeyBuilder.newInstance().add(domainId).add(columnName).getBytes();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "createOwnerLookupKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "byte[] createOwnerLookupKey(String owner, String domainId, byte[] columnName) throws IOException\n{\r\n    return KeyBuilder.newInstance().add(owner).add(domainId).add(columnName).getBytes();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getDomain",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "TimelineDomain getDomain(String domainId) throws IOException\n{\r\n    try (DBIterator iterator = domaindb.iterator()) {\r\n        byte[] prefix = KeyBuilder.newInstance().add(domainId).getBytesForLookup();\r\n        iterator.seek(prefix);\r\n        return getTimelineDomain(iterator, domainId, prefix);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getDomains",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "TimelineDomains getDomains(String owner) throws IOException\n{\r\n    try (DBIterator iterator = ownerdb.iterator()) {\r\n        byte[] prefix = KeyBuilder.newInstance().add(owner).getBytesForLookup();\r\n        iterator.seek(prefix);\r\n        List<TimelineDomain> domains = new ArrayList<TimelineDomain>();\r\n        while (iterator.hasNext()) {\r\n            byte[] key = iterator.peekNext().getKey();\r\n            if (!prefixMatches(prefix, prefix.length, key)) {\r\n                break;\r\n            }\r\n            KeyParser kp = new KeyParser(key, prefix.length);\r\n            String domainId = kp.getNextString();\r\n            byte[] prefixExt = KeyBuilder.newInstance().add(owner).add(domainId).getBytesForLookup();\r\n            TimelineDomain domainToReturn = getTimelineDomain(iterator, domainId, prefixExt);\r\n            if (domainToReturn != null) {\r\n                domains.add(domainToReturn);\r\n            }\r\n        }\r\n        Collections.sort(domains, new Comparator<TimelineDomain>() {\r\n\r\n            @Override\r\n            public int compare(TimelineDomain domain1, TimelineDomain domain2) {\r\n                int result = domain2.getCreatedTime().compareTo(domain1.getCreatedTime());\r\n                if (result == 0) {\r\n                    return domain2.getModifiedTime().compareTo(domain1.getModifiedTime());\r\n                } else {\r\n                    return result;\r\n                }\r\n            }\r\n        });\r\n        TimelineDomains domainsToReturn = new TimelineDomains();\r\n        domainsToReturn.addDomains(domains);\r\n        return domainsToReturn;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getTimelineDomain",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "TimelineDomain getTimelineDomain(DBIterator iterator, String domainId, byte[] prefix) throws IOException\n{\r\n    TimelineDomain domain = new TimelineDomain();\r\n    domain.setId(domainId);\r\n    boolean noRows = true;\r\n    for (; iterator.hasNext(); iterator.next()) {\r\n        byte[] key = iterator.peekNext().getKey();\r\n        if (!prefixMatches(prefix, prefix.length, key)) {\r\n            break;\r\n        }\r\n        if (noRows) {\r\n            noRows = false;\r\n        }\r\n        byte[] value = iterator.peekNext().getValue();\r\n        if (value != null && value.length > 0) {\r\n            if (key[prefix.length] == DESCRIPTION_COLUMN[0]) {\r\n                domain.setDescription(new String(value, UTF_8));\r\n            } else if (key[prefix.length] == OWNER_COLUMN[0]) {\r\n                domain.setOwner(new String(value, UTF_8));\r\n            } else if (key[prefix.length] == READER_COLUMN[0]) {\r\n                domain.setReaders(new String(value, UTF_8));\r\n            } else if (key[prefix.length] == WRITER_COLUMN[0]) {\r\n                domain.setWriters(new String(value, UTF_8));\r\n            } else if (key[prefix.length] == TIMESTAMP_COLUMN[0]) {\r\n                domain.setCreatedTime(readReverseOrderedLong(value, 0));\r\n                domain.setModifiedTime(readReverseOrderedLong(value, 8));\r\n            } else {\r\n                LOG.error(\"Unrecognized domain column: \" + key[prefix.length]);\r\n            }\r\n        }\r\n    }\r\n    if (noRows) {\r\n        return null;\r\n    } else {\r\n        return domain;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "preHead",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void preHead(Page.HTML<__> html)\n{\r\n    commonPreHead(html);\r\n    String containerId = $(YarnWebParams.CONTAINER_ID);\r\n    set(TITLE, containerId.isEmpty() ? \"Bad request: missing container ID\" : join(\"Container \", $(YarnWebParams.CONTAINER_ID)));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "content",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<? extends SubView> content()\n{\r\n    return ContainerBlock.class;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getName()\n{\r\n    return name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "currentTimeMillis",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long currentTimeMillis()\n{\r\n    return System.currentTimeMillis();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getNextRollingTimeMillis",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getNextRollingTimeMillis()\n{\r\n    return nextRollingCheckMillis;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getTimeToLive",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getTimeToLive()\n{\r\n    return ttl;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getTimeToLiveEnabled",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean getTimeToLiveEnabled()\n{\r\n    return ttlEnabled;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "setNextRollingTimeMillis",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setNextRollingTimeMillis(final long timestamp)\n{\r\n    this.nextRollingCheckMillis = timestamp;\r\n    LOG.info(\"Next rolling time for \" + getName() + \" is \" + fdf.format(nextRollingCheckMillis));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void init(final Configuration config) throws Exception\n{\r\n    LOG.info(\"Initializing RollingLevelDB for \" + getName());\r\n    this.conf = config;\r\n    this.ttl = conf.getLong(YarnConfiguration.TIMELINE_SERVICE_TTL_MS, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_TTL_MS);\r\n    this.ttlEnabled = conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_TTL_ENABLE, true);\r\n    this.rollingDBPath = new Path(conf.get(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_PATH), RollingLevelDBTimelineStore.FILENAME);\r\n    initFileSystem();\r\n    initRollingPeriod();\r\n    initHistoricalDBs();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "initFileSystem",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initFileSystem() throws IOException\n{\r\n    lfs = FileSystem.getLocal(conf);\r\n    boolean success = lfs.mkdirs(rollingDBPath, RollingLevelDBTimelineStore.LEVELDB_DIR_UMASK);\r\n    if (!success) {\r\n        throw new IOException(\"Failed to create leveldb root directory \" + rollingDBPath);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "initRollingPeriod",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void initRollingPeriod()\n{\r\n    final String lcRollingPeriod = conf.get(YarnConfiguration.TIMELINE_SERVICE_ROLLING_PERIOD, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ROLLING_PERIOD);\r\n    this.rollingPeriod = RollingPeriod.valueOf(lcRollingPeriod.toUpperCase(Locale.ENGLISH));\r\n    fdf = FastDateFormat.getInstance(rollingPeriod.dateFormat(), TimeZone.getTimeZone(\"GMT\"));\r\n    sdf = new SimpleDateFormat(rollingPeriod.dateFormat());\r\n    sdf.setTimeZone(fdf.getTimeZone());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "initHistoricalDBs",
  "errType" : [ "ParseException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void initHistoricalDBs() throws IOException\n{\r\n    Path rollingDBGlobPath = new Path(rollingDBPath, getName() + \".*\");\r\n    FileStatus[] statuses = lfs.globStatus(rollingDBGlobPath);\r\n    for (FileStatus status : statuses) {\r\n        String dbName = FilenameUtils.getExtension(status.getPath().toString());\r\n        try {\r\n            Long dbStartTime = sdf.parse(dbName).getTime();\r\n            initRollingLevelDB(dbStartTime, status.getPath());\r\n        } catch (ParseException pe) {\r\n            LOG.warn(\"Failed to initialize rolling leveldb \" + dbName + \" for \" + getName());\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "initRollingLevelDB",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void initRollingLevelDB(Long dbStartTime, Path rollingInstanceDBPath)\n{\r\n    if (rollingdbs.containsKey(dbStartTime)) {\r\n        return;\r\n    }\r\n    Options options = new Options();\r\n    options.createIfMissing(true);\r\n    options.cacheSize(conf.getLong(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE));\r\n    options.maxOpenFiles(conf.getInt(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_MAX_OPEN_FILES, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_MAX_OPEN_FILES));\r\n    options.writeBufferSize(conf.getInt(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_WRITE_BUFFER_SIZE, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_WRITE_BUFFER_SIZE));\r\n    LOG.info(\"Initializing rolling leveldb instance :\" + rollingInstanceDBPath + \" for start time: \" + dbStartTime);\r\n    DB db = null;\r\n    try {\r\n        db = factory.open(new File(rollingInstanceDBPath.toUri().getPath()), options);\r\n        rollingdbs.put(dbStartTime, db);\r\n        String dbName = fdf.format(dbStartTime);\r\n        LOG.info(\"Added rolling leveldb instance \" + dbName + \" to \" + getName());\r\n    } catch (IOException ioe) {\r\n        LOG.warn(\"Failed to open rolling leveldb instance :\" + new File(rollingInstanceDBPath.toUri().getPath()), ioe);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getPreviousDB",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "DB getPreviousDB(DB db)\n{\r\n    Iterator<DB> iterator = rollingdbs.values().iterator();\r\n    DB prev = null;\r\n    while (iterator.hasNext()) {\r\n        DB cur = iterator.next();\r\n        if (cur == db) {\r\n            break;\r\n        }\r\n        prev = cur;\r\n    }\r\n    return prev;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getStartTimeFor",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "long getStartTimeFor(DB db)\n{\r\n    long startTime = -1;\r\n    for (Map.Entry<Long, DB> entry : rollingdbs.entrySet()) {\r\n        if (entry.getValue() == db) {\r\n            startTime = entry.getKey();\r\n        }\r\n    }\r\n    return startTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getDBForStartTime",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "DB getDBForStartTime(long startTime)\n{\r\n    startTime = Math.min(startTime, currentTimeMillis());\r\n    if (startTime >= getNextRollingTimeMillis()) {\r\n        roll(startTime);\r\n    }\r\n    Entry<Long, DB> entry = rollingdbs.floorEntry(startTime);\r\n    if (entry == null) {\r\n        return null;\r\n    }\r\n    return entry.getValue();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "roll",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void roll(long startTime)\n{\r\n    LOG.info(\"Rolling new DB instance for \" + getName());\r\n    long currentStartTime = computeCurrentCheckMillis(startTime);\r\n    setNextRollingTimeMillis(computeNextCheckMillis(currentStartTime));\r\n    String currentRollingDBInstance = fdf.format(currentStartTime);\r\n    String currentRollingDBName = getName() + \".\" + currentRollingDBInstance;\r\n    Path currentRollingDBPath = new Path(rollingDBPath, currentRollingDBName);\r\n    if (getTimeToLiveEnabled()) {\r\n        scheduleOldDBsForEviction();\r\n    }\r\n    initRollingLevelDB(currentStartTime, currentRollingDBPath);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "scheduleOldDBsForEviction",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void scheduleOldDBsForEviction()\n{\r\n    long evictionThreshold = computeCurrentCheckMillis(currentTimeMillis() - getTimeToLive());\r\n    LOG.info(\"Scheduling \" + getName() + \" DBs older than \" + fdf.format(evictionThreshold) + \" for eviction\");\r\n    Iterator<Entry<Long, DB>> iterator = rollingdbs.entrySet().iterator();\r\n    while (iterator.hasNext()) {\r\n        Entry<Long, DB> entry = iterator.next();\r\n        if (entry.getKey() < evictionThreshold) {\r\n            LOG.info(\"Scheduling \" + getName() + \" eviction for \" + fdf.format(entry.getKey()));\r\n            iterator.remove();\r\n            rollingdbsToEvict.put(entry.getKey(), entry.getValue());\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "evictOldDBs",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void evictOldDBs()\n{\r\n    LOG.info(\"Evicting \" + getName() + \" DBs scheduled for eviction\");\r\n    Iterator<Entry<Long, DB>> iterator = rollingdbsToEvict.entrySet().iterator();\r\n    while (iterator.hasNext()) {\r\n        Entry<Long, DB> entry = iterator.next();\r\n        IOUtils.cleanupWithLogger(LOG, entry.getValue());\r\n        String dbName = fdf.format(entry.getKey());\r\n        Path path = new Path(rollingDBPath, getName() + \".\" + dbName);\r\n        try {\r\n            LOG.info(\"Removing old db directory contents in \" + path);\r\n            lfs.delete(path, true);\r\n        } catch (IOException ioe) {\r\n            LOG.warn(\"Failed to evict old db \" + path, ioe);\r\n        }\r\n        iterator.remove();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "stop",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void stop() throws Exception\n{\r\n    for (DB db : rollingdbs.values()) {\r\n        IOUtils.cleanupWithLogger(LOG, db);\r\n    }\r\n    IOUtils.cleanupWithLogger(LOG, lfs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "computeNextCheckMillis",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long computeNextCheckMillis(long now)\n{\r\n    return computeCheckMillis(now, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "computeCurrentCheckMillis",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long computeCurrentCheckMillis(long now)\n{\r\n    return computeCheckMillis(now, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "computeCheckMillis",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "long computeCheckMillis(long now, boolean next)\n{\r\n    cal.setTimeInMillis(now);\r\n    cal.set(Calendar.SECOND, 0);\r\n    cal.set(Calendar.MILLISECOND, 0);\r\n    if (rollingPeriod == RollingPeriod.DAILY) {\r\n        cal.set(Calendar.HOUR_OF_DAY, 0);\r\n        cal.set(Calendar.MINUTE, 0);\r\n        if (next) {\r\n            cal.add(Calendar.DATE, 1);\r\n        }\r\n    } else if (rollingPeriod == RollingPeriod.HALF_DAILY) {\r\n        int hour = (cal.get(Calendar.HOUR) / 12) * 12;\r\n        cal.set(Calendar.HOUR, hour);\r\n        cal.set(Calendar.MINUTE, 0);\r\n        if (next) {\r\n            cal.add(Calendar.HOUR_OF_DAY, 12);\r\n        }\r\n    } else if (rollingPeriod == RollingPeriod.QUARTER_DAILY) {\r\n        int hour = (cal.get(Calendar.HOUR) / 6) * 6;\r\n        cal.set(Calendar.HOUR, hour);\r\n        cal.set(Calendar.MINUTE, 0);\r\n        if (next) {\r\n            cal.add(Calendar.HOUR_OF_DAY, 6);\r\n        }\r\n    } else if (rollingPeriod == RollingPeriod.HOURLY) {\r\n        cal.set(Calendar.MINUTE, 0);\r\n        if (next) {\r\n            cal.add(Calendar.HOUR_OF_DAY, 1);\r\n        }\r\n    } else if (rollingPeriod == RollingPeriod.MINUTELY) {\r\n        int minute = (cal.get(Calendar.MINUTE) / 5) * 5;\r\n        cal.set(Calendar.MINUTE, minute);\r\n        if (next) {\r\n            cal.add(Calendar.MINUTE, 5);\r\n        }\r\n    }\r\n    return cal.getTimeInMillis();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\security",
  "methodName" : "setTimelineStore",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setTimelineStore(TimelineStore store)\n{\r\n    this.store = store;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\security",
  "methodName" : "loadDomainFromTimelineStore",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "AccessControlListExt loadDomainFromTimelineStore(String domainId) throws IOException\n{\r\n    if (store == null) {\r\n        return null;\r\n    }\r\n    TimelineDomain domain = store.getDomain(domainId);\r\n    if (domain == null) {\r\n        return null;\r\n    } else {\r\n        return putDomainIntoCache(domain);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\security",
  "methodName" : "replaceIfExist",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void replaceIfExist(TimelineDomain domain)\n{\r\n    if (aclExts.containsKey(domain.getId())) {\r\n        putDomainIntoCache(domain);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\security",
  "methodName" : "putDomainIntoCache",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "AccessControlListExt putDomainIntoCache(TimelineDomain domain)\n{\r\n    Map<ApplicationAccessType, AccessControlList> acls = new HashMap<ApplicationAccessType, AccessControlList>(2);\r\n    acls.put(ApplicationAccessType.VIEW_APP, new AccessControlList(StringHelper.cjoin(domain.getReaders())));\r\n    acls.put(ApplicationAccessType.MODIFY_APP, new AccessControlList(StringHelper.cjoin(domain.getWriters())));\r\n    AccessControlListExt aclExt = new AccessControlListExt(domain.getOwner(), acls);\r\n    aclExts.put(domain.getId(), aclExt);\r\n    return aclExt;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\security",
  "methodName" : "checkAccess",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "boolean checkAccess(UserGroupInformation callerUGI, ApplicationAccessType applicationAccessType, TimelineEntity entity) throws YarnException, IOException\n{\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(\"Verifying the access of \" + (callerUGI == null ? null : callerUGI.getShortUserName()) + \" on the timeline entity \" + new EntityIdentifier(entity.getEntityId(), entity.getEntityType()));\r\n    }\r\n    if (!adminAclsManager.areACLsEnabled()) {\r\n        return true;\r\n    }\r\n    AccessControlListExt aclExt = aclExts.get(entity.getDomainId());\r\n    if (aclExt == null) {\r\n        aclExt = loadDomainFromTimelineStore(entity.getDomainId());\r\n    }\r\n    if (aclExt == null) {\r\n        throw new YarnException(\"Domain information of the timeline entity \" + new EntityIdentifier(entity.getEntityId(), entity.getEntityType()) + \" doesn't exist.\");\r\n    }\r\n    String owner = aclExt.owner;\r\n    AccessControlList domainACL = aclExt.acls.get(applicationAccessType);\r\n    if (domainACL == null) {\r\n        LOG.debug(\"ACL not found for access-type {} for domain {} owned by {}.\" + \" Using default [{}]\", applicationAccessType, entity.getDomainId(), owner, YarnConfiguration.DEFAULT_YARN_APP_ACL);\r\n        domainACL = new AccessControlList(YarnConfiguration.DEFAULT_YARN_APP_ACL);\r\n    }\r\n    if (callerUGI != null && (adminAclsManager.isAdmin(callerUGI) || callerUGI.getShortUserName().equals(owner) || domainACL.isUserAllowed(callerUGI))) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\security",
  "methodName" : "checkAccess",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "boolean checkAccess(UserGroupInformation callerUGI, TimelineDomain domain) throws YarnException, IOException\n{\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(\"Verifying the access of \" + (callerUGI == null ? null : callerUGI.getShortUserName()) + \" on the timeline domain \" + domain);\r\n    }\r\n    if (!adminAclsManager.areACLsEnabled()) {\r\n        return true;\r\n    }\r\n    String owner = domain.getOwner();\r\n    if (owner == null || owner.length() == 0) {\r\n        throw new YarnException(\"Owner information of the timeline domain \" + domain.getId() + \" is corrupted.\");\r\n    }\r\n    if (callerUGI != null && (adminAclsManager.isAdmin(callerUGI) || callerUGI.getShortUserName().equals(owner))) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\security",
  "methodName" : "setAdminACLsManager",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AdminACLsManager setAdminACLsManager(AdminACLsManager adminAclsManager)\n{\r\n    AdminACLsManager oldAdminACLsManager = this.adminAclsManager;\r\n    this.adminAclsManager = adminAclsManager;\r\n    return oldAdminACLsManager;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "getApplicationHistoryClientService",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationHistoryClientService getApplicationHistoryClientService()\n{\r\n    return historyClientService;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "getTimelineDataManager",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineDataManager getTimelineDataManager()\n{\r\n    return timelineDataManager;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void setup()\n{\r\n    bind(YarnJacksonJaxbJsonProvider.class);\r\n    bind(AHSWebServices.class);\r\n    bind(TimelineWebServices.class);\r\n    bind(GenericExceptionHandler.class);\r\n    bind(ApplicationBaseProtocol.class).toInstance(historyClientService);\r\n    bind(TimelineDataManager.class).toInstance(timelineDataManager);\r\n    route(\"/\", AHSController.class);\r\n    route(\"/about\", AHSController.class, \"about\");\r\n    route(pajoin(\"/apps\", APP_STATE), AHSController.class);\r\n    route(pajoin(\"/app\", APPLICATION_ID), AHSController.class, \"app\");\r\n    route(pajoin(\"/appattempt\", APPLICATION_ATTEMPT_ID), AHSController.class, \"appattempt\");\r\n    route(pajoin(\"/container\", CONTAINER_ID), AHSController.class, \"container\");\r\n    route(pajoin(\"/logs\", NM_NODENAME, CONTAINER_ID, ENTITY_STRING, APP_OWNER, CONTAINER_LOG_TYPE), AHSController.class, \"logs\");\r\n    route(\"/errors-and-warnings\", AHSController.class, \"errorsAndWarnings\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    Configuration conf = getConfig();\r\n    YarnRPC rpc = YarnRPC.create(conf);\r\n    InetSocketAddress address = conf.getSocketAddr(YarnConfiguration.TIMELINE_SERVICE_BIND_HOST, YarnConfiguration.TIMELINE_SERVICE_ADDRESS, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ADDRESS, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_PORT);\r\n    Preconditions.checkArgument(conf.getInt(YarnConfiguration.TIMELINE_SERVICE_HANDLER_THREAD_COUNT, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_THREAD_COUNT) > 0, \"%s property value should be greater than zero\", YarnConfiguration.TIMELINE_SERVICE_HANDLER_THREAD_COUNT);\r\n    server = rpc.getServer(ApplicationHistoryProtocol.class, this, address, conf, null, conf.getInt(YarnConfiguration.TIMELINE_SERVICE_HANDLER_THREAD_COUNT, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_THREAD_COUNT));\r\n    if (conf.getBoolean(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, false)) {\r\n        refreshServiceAcls(conf, new TimelinePolicyProvider());\r\n    }\r\n    server.start();\r\n    this.bindAddress = conf.updateConnectAddr(YarnConfiguration.TIMELINE_SERVICE_BIND_HOST, YarnConfiguration.TIMELINE_SERVICE_ADDRESS, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ADDRESS, server.getListenerAddress());\r\n    LOG.info(\"Instantiated ApplicationHistoryClientService at \" + this.bindAddress);\r\n    super.serviceStart();\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    if (server != null) {\r\n        server.stop();\r\n    }\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getBindAddress",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "InetSocketAddress getBindAddress()\n{\r\n    return this.bindAddress;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "refreshServiceAcls",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void refreshServiceAcls(Configuration configuration, PolicyProvider policyProvider)\n{\r\n    this.server.refreshServiceAcl(configuration, policyProvider);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "cancelDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "CancelDelegationTokenResponse cancelDelegationToken(CancelDelegationTokenRequest request) throws YarnException, IOException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getApplicationAttemptReport",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetApplicationAttemptReportResponse getApplicationAttemptReport(GetApplicationAttemptReportRequest request) throws YarnException, IOException\n{\r\n    ApplicationAttemptId appAttemptId = request.getApplicationAttemptId();\r\n    try {\r\n        GetApplicationAttemptReportResponse response = GetApplicationAttemptReportResponse.newInstance(history.getApplicationAttempt(appAttemptId));\r\n        return response;\r\n    } catch (IOException e) {\r\n        LOG.error(e.getMessage(), e);\r\n        throw e;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getApplicationAttempts",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetApplicationAttemptsResponse getApplicationAttempts(GetApplicationAttemptsRequest request) throws YarnException, IOException\n{\r\n    GetApplicationAttemptsResponse response = GetApplicationAttemptsResponse.newInstance(new ArrayList<ApplicationAttemptReport>(history.getApplicationAttempts(request.getApplicationId()).values()));\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getApplicationReport",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetApplicationReportResponse getApplicationReport(GetApplicationReportRequest request) throws YarnException, IOException\n{\r\n    ApplicationId applicationId = request.getApplicationId();\r\n    try {\r\n        GetApplicationReportResponse response = GetApplicationReportResponse.newInstance(history.getApplication(applicationId));\r\n        return response;\r\n    } catch (IOException e) {\r\n        LOG.error(e.getMessage(), e);\r\n        throw e;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getApplications",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "GetApplicationsResponse getApplications(GetApplicationsRequest request) throws YarnException, IOException\n{\r\n    long startedBegin = request.getStartRange() == null ? 0L : request.getStartRange().getMinimum();\r\n    long startedEnd = request.getStartRange() == null ? Long.MAX_VALUE : request.getStartRange().getMaximum();\r\n    GetApplicationsResponse response = GetApplicationsResponse.newInstance(new ArrayList<ApplicationReport>(history.getApplications(request.getLimit(), startedBegin, startedEnd).values()));\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getContainerReport",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetContainerReportResponse getContainerReport(GetContainerReportRequest request) throws YarnException, IOException\n{\r\n    ContainerId containerId = request.getContainerId();\r\n    try {\r\n        GetContainerReportResponse response = GetContainerReportResponse.newInstance(history.getContainer(containerId));\r\n        return response;\r\n    } catch (IOException e) {\r\n        LOG.error(e.getMessage(), e);\r\n        throw e;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetContainersResponse getContainers(GetContainersRequest request) throws YarnException, IOException\n{\r\n    GetContainersResponse response = GetContainersResponse.newInstance(new ArrayList<ContainerReport>(history.getContainers(request.getApplicationAttemptId()).values()));\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "GetDelegationTokenResponse getDelegationToken(GetDelegationTokenRequest request) throws YarnException, IOException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "renewDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RenewDelegationTokenResponse renewDelegationToken(RenewDelegationTokenRequest request) throws YarnException, IOException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "setFactory",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setFactory(JniDBFactory fact)\n{\r\n    this.factory = fact;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    Preconditions.checkArgument(conf.getLong(YarnConfiguration.TIMELINE_SERVICE_TTL_MS, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_TTL_MS) > 0, \"%s property value should be greater than zero\", YarnConfiguration.TIMELINE_SERVICE_TTL_MS);\r\n    Preconditions.checkArgument(conf.getLong(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS) > 0, \"%s property value should be greater than zero\", YarnConfiguration.TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS);\r\n    Preconditions.checkArgument(conf.getLong(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE) >= 0, \"%s property value should be greater than or equal to zero\", YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE);\r\n    Preconditions.checkArgument(conf.getLong(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE) > 0, \" %s property value should be greater than zero\", YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE);\r\n    Preconditions.checkArgument(conf.getLong(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE) > 0, \"%s property value should be greater than zero\", YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE);\r\n    Options options = new Options();\r\n    options.createIfMissing(true);\r\n    options.cacheSize(conf.getLong(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE));\r\n    if (factory == null) {\r\n        factory = new JniDBFactory();\r\n    }\r\n    Path dbPath = new Path(conf.get(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_PATH), FILENAME);\r\n    FileSystem localFS = null;\r\n    try {\r\n        localFS = FileSystem.getLocal(conf);\r\n        if (!localFS.exists(dbPath)) {\r\n            if (!localFS.mkdirs(dbPath)) {\r\n                throw new IOException(\"Couldn't create directory for leveldb \" + \"timeline store \" + dbPath);\r\n            }\r\n            localFS.setPermission(dbPath, LEVELDB_DIR_UMASK);\r\n        }\r\n    } finally {\r\n        IOUtils.cleanupWithLogger(LOG, localFS);\r\n    }\r\n    LOG.info(\"Using leveldb path \" + dbPath);\r\n    db = LeveldbUtils.loadOrRepairLevelDb(factory, dbPath, options);\r\n    checkVersion();\r\n    startTimeWriteCache = Collections.synchronizedMap(new LRUMap(getStartTimeWriteCacheSize(conf)));\r\n    startTimeReadCache = Collections.synchronizedMap(new LRUMap(getStartTimeReadCacheSize(conf)));\r\n    if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_TTL_ENABLE, true)) {\r\n        deletionThread = new EntityDeletionThread(conf);\r\n        deletionThread.start();\r\n    }\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "serviceStop",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    if (deletionThread != null) {\r\n        deletionThread.interrupt();\r\n        LOG.info(\"Waiting for deletion thread to complete its current action\");\r\n        try {\r\n            deletionThread.join();\r\n        } catch (InterruptedException e) {\r\n            LOG.warn(\"Interrupted while waiting for deletion thread to complete,\" + \" closing db now\", e);\r\n        }\r\n    }\r\n    IOUtils.cleanupWithLogger(LOG, db);\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getEntity",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "TimelineEntity getEntity(String entityId, String entityType, EnumSet<Field> fields) throws IOException\n{\r\n    Long revStartTime = getStartTimeLong(entityId, entityType);\r\n    if (revStartTime == null) {\r\n        return null;\r\n    }\r\n    byte[] prefix = KeyBuilder.newInstance().add(ENTITY_ENTRY_PREFIX).add(entityType).add(writeReverseOrderedLong(revStartTime)).add(entityId).getBytesForLookup();\r\n    LeveldbIterator iterator = null;\r\n    try {\r\n        iterator = new LeveldbIterator(db);\r\n        iterator.seek(prefix);\r\n        if (fields == null) {\r\n            fields = EnumSet.allOf(Field.class);\r\n        }\r\n        return getEntity(entityId, entityType, revStartTime, fields, iterator, prefix, prefix.length);\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    } finally {\r\n        IOUtils.cleanupWithLogger(LOG, iterator);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getEntity",
  "errType" : null,
  "containingMethodsNum" : 26,
  "sourceCodeText" : "TimelineEntity getEntity(String entityId, String entityType, Long startTime, EnumSet<Field> fields, LeveldbIterator iterator, byte[] prefix, int prefixlen) throws IOException\n{\r\n    TimelineEntity entity = new TimelineEntity();\r\n    boolean events = false;\r\n    boolean lastEvent = false;\r\n    if (fields.contains(Field.EVENTS)) {\r\n        events = true;\r\n    } else if (fields.contains(Field.LAST_EVENT_ONLY)) {\r\n        lastEvent = true;\r\n    } else {\r\n        entity.setEvents(null);\r\n    }\r\n    boolean relatedEntities = false;\r\n    if (fields.contains(Field.RELATED_ENTITIES)) {\r\n        relatedEntities = true;\r\n    } else {\r\n        entity.setRelatedEntities(null);\r\n    }\r\n    boolean primaryFilters = false;\r\n    if (fields.contains(Field.PRIMARY_FILTERS)) {\r\n        primaryFilters = true;\r\n    } else {\r\n        entity.setPrimaryFilters(null);\r\n    }\r\n    boolean otherInfo = false;\r\n    if (fields.contains(Field.OTHER_INFO)) {\r\n        otherInfo = true;\r\n    } else {\r\n        entity.setOtherInfo(null);\r\n    }\r\n    for (; iterator.hasNext(); iterator.next()) {\r\n        byte[] key = iterator.peekNext().getKey();\r\n        if (!prefixMatches(prefix, prefixlen, key)) {\r\n            break;\r\n        }\r\n        if (key.length == prefixlen) {\r\n            continue;\r\n        }\r\n        if (key[prefixlen] == PRIMARY_FILTERS_COLUMN[0]) {\r\n            if (primaryFilters) {\r\n                addPrimaryFilter(entity, key, prefixlen + PRIMARY_FILTERS_COLUMN.length);\r\n            }\r\n        } else if (key[prefixlen] == OTHER_INFO_COLUMN[0]) {\r\n            if (otherInfo) {\r\n                entity.addOtherInfo(parseRemainingKey(key, prefixlen + OTHER_INFO_COLUMN.length), GenericObjectMapper.read(iterator.peekNext().getValue()));\r\n            }\r\n        } else if (key[prefixlen] == RELATED_ENTITIES_COLUMN[0]) {\r\n            if (relatedEntities) {\r\n                addRelatedEntity(entity, key, prefixlen + RELATED_ENTITIES_COLUMN.length);\r\n            }\r\n        } else if (key[prefixlen] == EVENTS_COLUMN[0]) {\r\n            if (events || (lastEvent && entity.getEvents().size() == 0)) {\r\n                TimelineEvent event = getEntityEvent(null, key, prefixlen + EVENTS_COLUMN.length, iterator.peekNext().getValue());\r\n                if (event != null) {\r\n                    entity.addEvent(event);\r\n                }\r\n            }\r\n        } else if (key[prefixlen] == DOMAIN_ID_COLUMN[0]) {\r\n            byte[] v = iterator.peekNext().getValue();\r\n            String domainId = new String(v, Charset.forName(\"UTF-8\"));\r\n            entity.setDomainId(domainId);\r\n        } else {\r\n            if (key[prefixlen] != INVISIBLE_REVERSE_RELATED_ENTITIES_COLUMN[0]) {\r\n                LOG.warn(String.format(\"Found unexpected column for entity %s of \" + \"type %s (0x%02x)\", entityId, entityType, key[prefixlen]));\r\n            }\r\n        }\r\n    }\r\n    entity.setEntityId(entityId);\r\n    entity.setEntityType(entityType);\r\n    entity.setStartTime(startTime);\r\n    return entity;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getEntityTimelines",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 28,
  "sourceCodeText" : "TimelineEvents getEntityTimelines(String entityType, SortedSet<String> entityIds, Long limit, Long windowStart, Long windowEnd, Set<String> eventType) throws IOException\n{\r\n    TimelineEvents events = new TimelineEvents();\r\n    if (entityIds == null || entityIds.isEmpty()) {\r\n        return events;\r\n    }\r\n    Map<byte[], List<EntityIdentifier>> startTimeMap = new TreeMap<byte[], List<EntityIdentifier>>(new Comparator<byte[]>() {\r\n\r\n        @Override\r\n        public int compare(byte[] o1, byte[] o2) {\r\n            return WritableComparator.compareBytes(o1, 0, o1.length, o2, 0, o2.length);\r\n        }\r\n    });\r\n    LeveldbIterator iterator = null;\r\n    try {\r\n        for (String entityId : entityIds) {\r\n            byte[] startTime = getStartTime(entityId, entityType);\r\n            if (startTime != null) {\r\n                List<EntityIdentifier> entities = startTimeMap.get(startTime);\r\n                if (entities == null) {\r\n                    entities = new ArrayList<EntityIdentifier>();\r\n                    startTimeMap.put(startTime, entities);\r\n                }\r\n                entities.add(new EntityIdentifier(entityId, entityType));\r\n            }\r\n        }\r\n        for (Entry<byte[], List<EntityIdentifier>> entry : startTimeMap.entrySet()) {\r\n            byte[] revStartTime = entry.getKey();\r\n            for (EntityIdentifier entityIdentifier : entry.getValue()) {\r\n                EventsOfOneEntity entity = new EventsOfOneEntity();\r\n                entity.setEntityId(entityIdentifier.getId());\r\n                entity.setEntityType(entityType);\r\n                events.addEvent(entity);\r\n                KeyBuilder kb = KeyBuilder.newInstance().add(ENTITY_ENTRY_PREFIX).add(entityType).add(revStartTime).add(entityIdentifier.getId()).add(EVENTS_COLUMN);\r\n                byte[] prefix = kb.getBytesForLookup();\r\n                if (windowEnd == null) {\r\n                    windowEnd = Long.MAX_VALUE;\r\n                }\r\n                byte[] revts = writeReverseOrderedLong(windowEnd);\r\n                kb.add(revts);\r\n                byte[] first = kb.getBytesForLookup();\r\n                byte[] last = null;\r\n                if (windowStart != null) {\r\n                    last = KeyBuilder.newInstance().add(prefix).add(writeReverseOrderedLong(windowStart)).getBytesForLookup();\r\n                }\r\n                if (limit == null) {\r\n                    limit = DEFAULT_LIMIT;\r\n                }\r\n                iterator = new LeveldbIterator(db);\r\n                for (iterator.seek(first); entity.getEvents().size() < limit && iterator.hasNext(); iterator.next()) {\r\n                    byte[] key = iterator.peekNext().getKey();\r\n                    if (!prefixMatches(prefix, prefix.length, key) || (last != null && WritableComparator.compareBytes(key, 0, key.length, last, 0, last.length) > 0)) {\r\n                        break;\r\n                    }\r\n                    TimelineEvent event = getEntityEvent(eventType, key, prefix.length, iterator.peekNext().getValue());\r\n                    if (event != null) {\r\n                        entity.addEvent(event);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    } finally {\r\n        IOUtils.cleanupWithLogger(LOG, iterator);\r\n    }\r\n    return events;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getEntities",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "TimelineEntities getEntities(String entityType, Long limit, Long windowStart, Long windowEnd, String fromId, Long fromTs, NameValuePair primaryFilter, Collection<NameValuePair> secondaryFilters, EnumSet<Field> fields, CheckAcl checkAcl) throws IOException\n{\r\n    if (primaryFilter == null) {\r\n        return getEntityByTime(ENTITY_ENTRY_PREFIX, entityType, limit, windowStart, windowEnd, fromId, fromTs, secondaryFilters, fields, checkAcl);\r\n    } else {\r\n        byte[] base = KeyBuilder.newInstance().add(INDEXED_ENTRY_PREFIX).add(primaryFilter.getName()).add(GenericObjectMapper.write(primaryFilter.getValue()), true).add(ENTITY_ENTRY_PREFIX).getBytesForLookup();\r\n        return getEntityByTime(base, entityType, limit, windowStart, windowEnd, fromId, fromTs, secondaryFilters, fields, checkAcl);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getEntityByTime",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 37,
  "sourceCodeText" : "TimelineEntities getEntityByTime(byte[] base, String entityType, Long limit, Long starttime, Long endtime, String fromId, Long fromTs, Collection<NameValuePair> secondaryFilters, EnumSet<Field> fields, CheckAcl checkAcl) throws IOException\n{\r\n    if (fields == null) {\r\n        fields = EnumSet.allOf(Field.class);\r\n    }\r\n    boolean addPrimaryFilters = false;\r\n    boolean addOtherInfo = false;\r\n    if (secondaryFilters != null && secondaryFilters.size() > 0) {\r\n        if (!fields.contains(Field.PRIMARY_FILTERS)) {\r\n            fields.add(Field.PRIMARY_FILTERS);\r\n            addPrimaryFilters = true;\r\n        }\r\n        if (!fields.contains(Field.OTHER_INFO)) {\r\n            fields.add(Field.OTHER_INFO);\r\n            addOtherInfo = true;\r\n        }\r\n    }\r\n    LeveldbIterator iterator = null;\r\n    try {\r\n        KeyBuilder kb = KeyBuilder.newInstance().add(base).add(entityType);\r\n        byte[] prefix = kb.getBytesForLookup();\r\n        if (endtime == null) {\r\n            endtime = Long.MAX_VALUE;\r\n        }\r\n        byte[] first = null;\r\n        if (fromId != null) {\r\n            Long fromIdStartTime = getStartTimeLong(fromId, entityType);\r\n            if (fromIdStartTime == null) {\r\n                return new TimelineEntities();\r\n            }\r\n            if (fromIdStartTime <= endtime) {\r\n                first = kb.add(writeReverseOrderedLong(fromIdStartTime)).add(fromId).getBytesForLookup();\r\n            }\r\n        }\r\n        if (first == null) {\r\n            first = kb.add(writeReverseOrderedLong(endtime)).getBytesForLookup();\r\n        }\r\n        byte[] last = null;\r\n        if (starttime != null) {\r\n            last = KeyBuilder.newInstance().add(base).add(entityType).add(writeReverseOrderedLong(starttime)).getBytesForLookup();\r\n        }\r\n        if (limit == null) {\r\n            limit = DEFAULT_LIMIT;\r\n        }\r\n        TimelineEntities entities = new TimelineEntities();\r\n        iterator = new LeveldbIterator(db);\r\n        iterator.seek(first);\r\n        while (entities.getEntities().size() < limit && iterator.hasNext()) {\r\n            byte[] key = iterator.peekNext().getKey();\r\n            if (!prefixMatches(prefix, prefix.length, key) || (last != null && WritableComparator.compareBytes(key, 0, key.length, last, 0, last.length) > 0)) {\r\n                break;\r\n            }\r\n            KeyParser kp = new KeyParser(key, prefix.length);\r\n            Long startTime = kp.getNextLong();\r\n            String entityId = kp.getNextString();\r\n            if (fromTs != null) {\r\n                long insertTime = readReverseOrderedLong(iterator.peekNext().getValue(), 0);\r\n                if (insertTime > fromTs) {\r\n                    byte[] firstKey = key;\r\n                    while (iterator.hasNext() && prefixMatches(firstKey, kp.getOffset(), key)) {\r\n                        iterator.next();\r\n                        key = iterator.peekNext().getKey();\r\n                    }\r\n                    continue;\r\n                }\r\n            }\r\n            TimelineEntity entity = getEntity(entityId, entityType, startTime, fields, iterator, key, kp.getOffset());\r\n            boolean filterPassed = true;\r\n            if (secondaryFilters != null) {\r\n                for (NameValuePair filter : secondaryFilters) {\r\n                    Object v = entity.getOtherInfo().get(filter.getName());\r\n                    if (v == null) {\r\n                        Set<Object> vs = entity.getPrimaryFilters().get(filter.getName());\r\n                        if (vs == null || !vs.contains(filter.getValue())) {\r\n                            filterPassed = false;\r\n                            break;\r\n                        }\r\n                    } else if (!v.equals(filter.getValue())) {\r\n                        filterPassed = false;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (filterPassed) {\r\n                if (entity.getDomainId() == null) {\r\n                    entity.setDomainId(DEFAULT_DOMAIN_ID);\r\n                }\r\n                if (checkAcl == null || checkAcl.check(entity)) {\r\n                    if (addPrimaryFilters) {\r\n                        entity.setPrimaryFilters(null);\r\n                    }\r\n                    if (addOtherInfo) {\r\n                        entity.setOtherInfo(null);\r\n                    }\r\n                    entities.addEntity(entity);\r\n                }\r\n            }\r\n        }\r\n        return entities;\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    } finally {\r\n        IOUtils.cleanupWithLogger(LOG, iterator);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "handleError",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void handleError(TimelineEntity entity, TimelinePutResponse response, final int errorCode)\n{\r\n    TimelinePutError error = new TimelinePutError();\r\n    error.setEntityId(entity.getEntityId());\r\n    error.setEntityType(entity.getEntityType());\r\n    error.setErrorCode(errorCode);\r\n    response.addError(error);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "put",
  "errType" : [ "DBException", "IOException", "DBException", "IOException" ],
  "containingMethodsNum" : 74,
  "sourceCodeText" : "void put(TimelineEntity entity, TimelinePutResponse response, boolean allowEmptyDomainId)\n{\r\n    LockMap.CountingReentrantLock<EntityIdentifier> lock = writeLocks.getLock(new EntityIdentifier(entity.getEntityId(), entity.getEntityType()));\r\n    lock.lock();\r\n    WriteBatch writeBatch = null;\r\n    List<EntityIdentifier> relatedEntitiesWithoutStartTimes = new ArrayList<EntityIdentifier>();\r\n    byte[] revStartTime = null;\r\n    Map<String, Set<Object>> primaryFilters = null;\r\n    try {\r\n        writeBatch = db.createWriteBatch();\r\n        List<TimelineEvent> events = entity.getEvents();\r\n        StartAndInsertTime startAndInsertTime = getAndSetStartTime(entity.getEntityId(), entity.getEntityType(), entity.getStartTime(), events);\r\n        if (startAndInsertTime == null) {\r\n            handleError(entity, response, TimelinePutError.NO_START_TIME);\r\n            return;\r\n        }\r\n        revStartTime = writeReverseOrderedLong(startAndInsertTime.startTime);\r\n        primaryFilters = entity.getPrimaryFilters();\r\n        byte[] markerKey = createEntityMarkerKey(entity.getEntityId(), entity.getEntityType(), revStartTime);\r\n        byte[] markerValue = writeReverseOrderedLong(startAndInsertTime.insertTime);\r\n        writeBatch.put(markerKey, markerValue);\r\n        writePrimaryFilterEntries(writeBatch, primaryFilters, markerKey, markerValue);\r\n        if (events != null && !events.isEmpty()) {\r\n            for (TimelineEvent event : events) {\r\n                byte[] revts = writeReverseOrderedLong(event.getTimestamp());\r\n                byte[] key = createEntityEventKey(entity.getEntityId(), entity.getEntityType(), revStartTime, revts, event.getEventType());\r\n                byte[] value = GenericObjectMapper.write(event.getEventInfo());\r\n                writeBatch.put(key, value);\r\n                writePrimaryFilterEntries(writeBatch, primaryFilters, key, value);\r\n            }\r\n        }\r\n        Map<String, Set<String>> relatedEntities = entity.getRelatedEntities();\r\n        if (relatedEntities != null && !relatedEntities.isEmpty()) {\r\n            for (Entry<String, Set<String>> relatedEntityList : relatedEntities.entrySet()) {\r\n                String relatedEntityType = relatedEntityList.getKey();\r\n                for (String relatedEntityId : relatedEntityList.getValue()) {\r\n                    byte[] key = createReverseRelatedEntityKey(entity.getEntityId(), entity.getEntityType(), revStartTime, relatedEntityId, relatedEntityType);\r\n                    writeBatch.put(key, EMPTY_BYTES);\r\n                    byte[] relatedEntityStartTime = getStartTime(relatedEntityId, relatedEntityType);\r\n                    if (relatedEntityStartTime == null) {\r\n                        relatedEntitiesWithoutStartTimes.add(new EntityIdentifier(relatedEntityId, relatedEntityType));\r\n                        continue;\r\n                    } else {\r\n                        byte[] domainIdBytes = db.get(createDomainIdKey(relatedEntityId, relatedEntityType, relatedEntityStartTime));\r\n                        String domainId = null;\r\n                        if (domainIdBytes == null) {\r\n                            domainId = TimelineDataManager.DEFAULT_DOMAIN_ID;\r\n                        } else {\r\n                            domainId = new String(domainIdBytes, Charset.forName(\"UTF-8\"));\r\n                        }\r\n                        if (!domainId.equals(entity.getDomainId())) {\r\n                            handleError(entity, response, TimelinePutError.FORBIDDEN_RELATION);\r\n                            continue;\r\n                        }\r\n                    }\r\n                    key = createRelatedEntityKey(relatedEntityId, relatedEntityType, relatedEntityStartTime, entity.getEntityId(), entity.getEntityType());\r\n                    writeBatch.put(key, EMPTY_BYTES);\r\n                }\r\n            }\r\n        }\r\n        if (primaryFilters != null && !primaryFilters.isEmpty()) {\r\n            for (Entry<String, Set<Object>> primaryFilter : primaryFilters.entrySet()) {\r\n                for (Object primaryFilterValue : primaryFilter.getValue()) {\r\n                    byte[] key = createPrimaryFilterKey(entity.getEntityId(), entity.getEntityType(), revStartTime, primaryFilter.getKey(), primaryFilterValue);\r\n                    writeBatch.put(key, EMPTY_BYTES);\r\n                    writePrimaryFilterEntries(writeBatch, primaryFilters, key, EMPTY_BYTES);\r\n                }\r\n            }\r\n        }\r\n        Map<String, Object> otherInfo = entity.getOtherInfo();\r\n        if (otherInfo != null && !otherInfo.isEmpty()) {\r\n            for (Entry<String, Object> i : otherInfo.entrySet()) {\r\n                byte[] key = createOtherInfoKey(entity.getEntityId(), entity.getEntityType(), revStartTime, i.getKey());\r\n                byte[] value = GenericObjectMapper.write(i.getValue());\r\n                writeBatch.put(key, value);\r\n                writePrimaryFilterEntries(writeBatch, primaryFilters, key, value);\r\n            }\r\n        }\r\n        byte[] key = createDomainIdKey(entity.getEntityId(), entity.getEntityType(), revStartTime);\r\n        if (entity.getDomainId() == null || entity.getDomainId().length() == 0) {\r\n            if (!allowEmptyDomainId) {\r\n                handleError(entity, response, TimelinePutError.NO_DOMAIN);\r\n                return;\r\n            }\r\n        } else {\r\n            writeBatch.put(key, entity.getDomainId().getBytes(Charset.forName(\"UTF-8\")));\r\n            writePrimaryFilterEntries(writeBatch, primaryFilters, key, entity.getDomainId().getBytes(Charset.forName(\"UTF-8\")));\r\n        }\r\n        db.write(writeBatch);\r\n    } catch (DBException de) {\r\n        LOG.error(\"Error putting entity \" + entity.getEntityId() + \" of type \" + entity.getEntityType(), de);\r\n        handleError(entity, response, TimelinePutError.IO_EXCEPTION);\r\n    } catch (IOException e) {\r\n        LOG.error(\"Error putting entity \" + entity.getEntityId() + \" of type \" + entity.getEntityType(), e);\r\n        handleError(entity, response, TimelinePutError.IO_EXCEPTION);\r\n    } finally {\r\n        lock.unlock();\r\n        writeLocks.returnLock(lock);\r\n        IOUtils.cleanupWithLogger(LOG, writeBatch);\r\n    }\r\n    for (EntityIdentifier relatedEntity : relatedEntitiesWithoutStartTimes) {\r\n        lock = writeLocks.getLock(relatedEntity);\r\n        lock.lock();\r\n        try {\r\n            StartAndInsertTime relatedEntityStartAndInsertTime = getAndSetStartTime(relatedEntity.getId(), relatedEntity.getType(), readReverseOrderedLong(revStartTime, 0), null);\r\n            if (relatedEntityStartAndInsertTime == null) {\r\n                throw new IOException(\"Error setting start time for related entity\");\r\n            }\r\n            byte[] relatedEntityStartTime = writeReverseOrderedLong(relatedEntityStartAndInsertTime.startTime);\r\n            byte[] key = createDomainIdKey(relatedEntity.getId(), relatedEntity.getType(), relatedEntityStartTime);\r\n            db.put(key, entity.getDomainId().getBytes(Charset.forName(\"UTF-8\")));\r\n            db.put(createRelatedEntityKey(relatedEntity.getId(), relatedEntity.getType(), relatedEntityStartTime, entity.getEntityId(), entity.getEntityType()), EMPTY_BYTES);\r\n            db.put(createEntityMarkerKey(relatedEntity.getId(), relatedEntity.getType(), relatedEntityStartTime), writeReverseOrderedLong(relatedEntityStartAndInsertTime.insertTime));\r\n        } catch (DBException de) {\r\n            LOG.error(\"Error putting related entity \" + relatedEntity.getId() + \" of type \" + relatedEntity.getType() + \" for entity \" + entity.getEntityId() + \" of type \" + entity.getEntityType(), de);\r\n            handleError(entity, response, TimelinePutError.IO_EXCEPTION);\r\n        } catch (IOException e) {\r\n            LOG.error(\"Error putting related entity \" + relatedEntity.getId() + \" of type \" + relatedEntity.getType() + \" for entity \" + entity.getEntityId() + \" of type \" + entity.getEntityType(), e);\r\n            handleError(entity, response, TimelinePutError.IO_EXCEPTION);\r\n        } finally {\r\n            lock.unlock();\r\n            writeLocks.returnLock(lock);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "writePrimaryFilterEntries",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void writePrimaryFilterEntries(WriteBatch writeBatch, Map<String, Set<Object>> primaryFilters, byte[] key, byte[] value) throws IOException\n{\r\n    if (primaryFilters != null && !primaryFilters.isEmpty()) {\r\n        for (Entry<String, Set<Object>> pf : primaryFilters.entrySet()) {\r\n            for (Object pfval : pf.getValue()) {\r\n                writeBatch.put(addPrimaryFilterToKey(pf.getKey(), pfval, key), value);\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "put",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "TimelinePutResponse put(TimelineEntities entities)\n{\r\n    deleteLock.readLock().lock();\r\n    try {\r\n        TimelinePutResponse response = new TimelinePutResponse();\r\n        for (TimelineEntity entity : entities.getEntities()) {\r\n            put(entity, response, false);\r\n        }\r\n        return response;\r\n    } finally {\r\n        deleteLock.readLock().unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "putWithNoDomainId",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "TimelinePutResponse putWithNoDomainId(TimelineEntities entities)\n{\r\n    deleteLock.readLock().lock();\r\n    try {\r\n        TimelinePutResponse response = new TimelinePutResponse();\r\n        for (TimelineEntity entity : entities.getEntities()) {\r\n            put(entity, response, true);\r\n        }\r\n        return response;\r\n    } finally {\r\n        deleteLock.readLock().unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getStartTime",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "byte[] getStartTime(String entityId, String entityType) throws IOException\n{\r\n    Long l = getStartTimeLong(entityId, entityType);\r\n    return l == null ? null : writeReverseOrderedLong(l);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getStartTimeLong",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "Long getStartTimeLong(String entityId, String entityType) throws IOException\n{\r\n    EntityIdentifier entity = new EntityIdentifier(entityId, entityType);\r\n    try {\r\n        if (startTimeReadCache.containsKey(entity)) {\r\n            return startTimeReadCache.get(entity);\r\n        } else {\r\n            byte[] b = createStartTimeLookupKey(entity.getId(), entity.getType());\r\n            byte[] v = db.get(b);\r\n            if (v == null) {\r\n                return null;\r\n            } else {\r\n                Long l = readReverseOrderedLong(v, 0);\r\n                startTimeReadCache.put(entity, l);\r\n                return l;\r\n            }\r\n        }\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getAndSetStartTime",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "StartAndInsertTime getAndSetStartTime(String entityId, String entityType, Long startTime, List<TimelineEvent> events) throws IOException\n{\r\n    EntityIdentifier entity = new EntityIdentifier(entityId, entityType);\r\n    if (startTime == null) {\r\n        if (startTimeWriteCache.containsKey(entity)) {\r\n            return startTimeWriteCache.get(entity);\r\n        } else {\r\n            if (events != null) {\r\n                Long min = Long.MAX_VALUE;\r\n                for (TimelineEvent e : events) {\r\n                    if (min > e.getTimestamp()) {\r\n                        min = e.getTimestamp();\r\n                    }\r\n                }\r\n                startTime = min;\r\n            }\r\n            return checkStartTimeInDb(entity, startTime);\r\n        }\r\n    } else {\r\n        if (startTimeWriteCache.containsKey(entity)) {\r\n            return startTimeWriteCache.get(entity);\r\n        } else {\r\n            return checkStartTimeInDb(entity, startTime);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "checkStartTimeInDb",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "StartAndInsertTime checkStartTimeInDb(EntityIdentifier entity, Long suggestedStartTime) throws IOException\n{\r\n    StartAndInsertTime startAndInsertTime = null;\r\n    byte[] b = createStartTimeLookupKey(entity.getId(), entity.getType());\r\n    try {\r\n        byte[] v = db.get(b);\r\n        if (v == null) {\r\n            if (suggestedStartTime == null) {\r\n                return null;\r\n            }\r\n            startAndInsertTime = new StartAndInsertTime(suggestedStartTime, System.currentTimeMillis());\r\n            v = new byte[16];\r\n            writeReverseOrderedLong(suggestedStartTime, v, 0);\r\n            writeReverseOrderedLong(startAndInsertTime.insertTime, v, 8);\r\n            WriteOptions writeOptions = new WriteOptions();\r\n            writeOptions.sync(true);\r\n            db.put(b, v, writeOptions);\r\n        } else {\r\n            startAndInsertTime = new StartAndInsertTime(readReverseOrderedLong(v, 0), readReverseOrderedLong(v, 8));\r\n        }\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    }\r\n    startTimeWriteCache.put(entity, startAndInsertTime);\r\n    startTimeReadCache.put(entity, startAndInsertTime.startTime);\r\n    return startAndInsertTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "createStartTimeLookupKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "byte[] createStartTimeLookupKey(String entityId, String entityType) throws IOException\n{\r\n    return KeyBuilder.newInstance().add(START_TIME_LOOKUP_PREFIX).add(entityType).add(entityId).getBytes();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "createEntityMarkerKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "byte[] createEntityMarkerKey(String entityId, String entityType, byte[] revStartTime) throws IOException\n{\r\n    return KeyBuilder.newInstance().add(ENTITY_ENTRY_PREFIX).add(entityType).add(revStartTime).add(entityId).getBytesForLookup();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "addPrimaryFilterToKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "byte[] addPrimaryFilterToKey(String primaryFilterName, Object primaryFilterValue, byte[] key) throws IOException\n{\r\n    return KeyBuilder.newInstance().add(INDEXED_ENTRY_PREFIX).add(primaryFilterName).add(GenericObjectMapper.write(primaryFilterValue), true).add(key).getBytes();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "createEntityEventKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "byte[] createEntityEventKey(String entityId, String entityType, byte[] revStartTime, byte[] revEventTimestamp, String eventType) throws IOException\n{\r\n    return KeyBuilder.newInstance().add(ENTITY_ENTRY_PREFIX).add(entityType).add(revStartTime).add(entityId).add(EVENTS_COLUMN).add(revEventTimestamp).add(eventType).getBytes();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getEntityEvent",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "TimelineEvent getEntityEvent(Set<String> eventTypes, byte[] key, int offset, byte[] value) throws IOException\n{\r\n    KeyParser kp = new KeyParser(key, offset);\r\n    long ts = kp.getNextLong();\r\n    String tstype = kp.getNextString();\r\n    if (eventTypes == null || eventTypes.contains(tstype)) {\r\n        TimelineEvent event = new TimelineEvent();\r\n        event.setTimestamp(ts);\r\n        event.setEventType(tstype);\r\n        Object o = GenericObjectMapper.read(value);\r\n        if (o == null) {\r\n            event.setEventInfo(null);\r\n        } else if (o instanceof Map) {\r\n            @SuppressWarnings(\"unchecked\")\r\n            Map<String, Object> m = (Map<String, Object>) o;\r\n            event.setEventInfo(m);\r\n        } else {\r\n            throw new IOException(\"Couldn't deserialize event info map\");\r\n        }\r\n        return event;\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "createPrimaryFilterKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "byte[] createPrimaryFilterKey(String entityId, String entityType, byte[] revStartTime, String name, Object value) throws IOException\n{\r\n    return KeyBuilder.newInstance().add(ENTITY_ENTRY_PREFIX).add(entityType).add(revStartTime).add(entityId).add(PRIMARY_FILTERS_COLUMN).add(name).add(GenericObjectMapper.write(value)).getBytes();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "addPrimaryFilter",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void addPrimaryFilter(TimelineEntity entity, byte[] key, int offset) throws IOException\n{\r\n    KeyParser kp = new KeyParser(key, offset);\r\n    String name = kp.getNextString();\r\n    Object value = GenericObjectMapper.read(key, kp.getOffset());\r\n    entity.addPrimaryFilter(name, value);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "createOtherInfoKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "byte[] createOtherInfoKey(String entityId, String entityType, byte[] revStartTime, String name) throws IOException\n{\r\n    return KeyBuilder.newInstance().add(ENTITY_ENTRY_PREFIX).add(entityType).add(revStartTime).add(entityId).add(OTHER_INFO_COLUMN).add(name).getBytes();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "parseRemainingKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String parseRemainingKey(byte[] b, int offset)\n{\r\n    return new String(b, offset, b.length - offset, Charset.forName(\"UTF-8\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "createRelatedEntityKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "byte[] createRelatedEntityKey(String entityId, String entityType, byte[] revStartTime, String relatedEntityId, String relatedEntityType) throws IOException\n{\r\n    return KeyBuilder.newInstance().add(ENTITY_ENTRY_PREFIX).add(entityType).add(revStartTime).add(entityId).add(RELATED_ENTITIES_COLUMN).add(relatedEntityType).add(relatedEntityId).getBytes();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "addRelatedEntity",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void addRelatedEntity(TimelineEntity entity, byte[] key, int offset) throws IOException\n{\r\n    KeyParser kp = new KeyParser(key, offset);\r\n    String type = kp.getNextString();\r\n    String id = kp.getNextString();\r\n    entity.addRelatedEntity(type, id);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "createReverseRelatedEntityKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "byte[] createReverseRelatedEntityKey(String entityId, String entityType, byte[] revStartTime, String relatedEntityId, String relatedEntityType) throws IOException\n{\r\n    return KeyBuilder.newInstance().add(ENTITY_ENTRY_PREFIX).add(entityType).add(revStartTime).add(entityId).add(INVISIBLE_REVERSE_RELATED_ENTITIES_COLUMN).add(relatedEntityType).add(relatedEntityId).getBytes();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "createDomainIdKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "byte[] createDomainIdKey(String entityId, String entityType, byte[] revStartTime) throws IOException\n{\r\n    return KeyBuilder.newInstance().add(ENTITY_ENTRY_PREFIX).add(entityType).add(revStartTime).add(entityId).add(DOMAIN_ID_COLUMN).getBytes();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "clearStartTimeCache",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void clearStartTimeCache()\n{\r\n    startTimeWriteCache.clear();\r\n    startTimeReadCache.clear();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getStartTimeReadCacheSize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getStartTimeReadCacheSize(Configuration conf)\n{\r\n    return conf.getInt(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getStartTimeWriteCacheSize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getStartTimeWriteCacheSize(Configuration conf)\n{\r\n    return conf.getInt(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getEntityTypes",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "List<String> getEntityTypes() throws IOException\n{\r\n    LeveldbIterator iterator = null;\r\n    try {\r\n        iterator = getDbIterator(false);\r\n        List<String> entityTypes = new ArrayList<String>();\r\n        iterator.seek(ENTITY_ENTRY_PREFIX);\r\n        while (iterator.hasNext()) {\r\n            byte[] key = iterator.peekNext().getKey();\r\n            if (key[0] != ENTITY_ENTRY_PREFIX[0]) {\r\n                break;\r\n            }\r\n            KeyParser kp = new KeyParser(key, ENTITY_ENTRY_PREFIX.length);\r\n            String entityType = kp.getNextString();\r\n            entityTypes.add(entityType);\r\n            byte[] lookupKey = KeyBuilder.newInstance().add(ENTITY_ENTRY_PREFIX).add(entityType).getBytesForLookup();\r\n            if (lookupKey[lookupKey.length - 1] != 0x0) {\r\n                throw new IOException(\"Found unexpected end byte in lookup key\");\r\n            }\r\n            lookupKey[lookupKey.length - 1] = 0x1;\r\n            iterator.seek(lookupKey);\r\n        }\r\n        return entityTypes;\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    } finally {\r\n        IOUtils.cleanupWithLogger(LOG, iterator);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "deleteKeysWithPrefix",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void deleteKeysWithPrefix(WriteBatch writeBatch, byte[] prefix, LeveldbIterator iterator)\n{\r\n    for (iterator.seek(prefix); iterator.hasNext(); iterator.next()) {\r\n        byte[] key = iterator.peekNext().getKey();\r\n        if (!prefixMatches(prefix, prefix.length, key)) {\r\n            break;\r\n        }\r\n        writeBatch.delete(key);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "deleteNextEntity",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 39,
  "sourceCodeText" : "boolean deleteNextEntity(String entityType, byte[] reverseTimestamp, LeveldbIterator iterator, LeveldbIterator pfIterator, boolean seeked) throws IOException\n{\r\n    WriteBatch writeBatch = null;\r\n    try {\r\n        KeyBuilder kb = KeyBuilder.newInstance().add(ENTITY_ENTRY_PREFIX).add(entityType);\r\n        byte[] typePrefix = kb.getBytesForLookup();\r\n        kb.add(reverseTimestamp);\r\n        if (!seeked) {\r\n            iterator.seek(kb.getBytesForLookup());\r\n        }\r\n        if (!iterator.hasNext()) {\r\n            return false;\r\n        }\r\n        byte[] entityKey = iterator.peekNext().getKey();\r\n        if (!prefixMatches(typePrefix, typePrefix.length, entityKey)) {\r\n            return false;\r\n        }\r\n        KeyParser kp = new KeyParser(entityKey, typePrefix.length + 8);\r\n        String entityId = kp.getNextString();\r\n        int prefixlen = kp.getOffset();\r\n        byte[] deletePrefix = new byte[prefixlen];\r\n        System.arraycopy(entityKey, 0, deletePrefix, 0, prefixlen);\r\n        writeBatch = db.createWriteBatch();\r\n        LOG.debug(\"Deleting entity type:{} id:{}\", entityType, entityId);\r\n        writeBatch.delete(createStartTimeLookupKey(entityId, entityType));\r\n        EntityIdentifier entityIdentifier = new EntityIdentifier(entityId, entityType);\r\n        startTimeReadCache.remove(entityIdentifier);\r\n        startTimeWriteCache.remove(entityIdentifier);\r\n        for (; iterator.hasNext(); iterator.next()) {\r\n            byte[] key = iterator.peekNext().getKey();\r\n            if (!prefixMatches(entityKey, prefixlen, key)) {\r\n                break;\r\n            }\r\n            writeBatch.delete(key);\r\n            if (key.length == prefixlen) {\r\n                continue;\r\n            }\r\n            if (key[prefixlen] == PRIMARY_FILTERS_COLUMN[0]) {\r\n                kp = new KeyParser(key, prefixlen + PRIMARY_FILTERS_COLUMN.length);\r\n                String name = kp.getNextString();\r\n                Object value = GenericObjectMapper.read(key, kp.getOffset());\r\n                deleteKeysWithPrefix(writeBatch, addPrimaryFilterToKey(name, value, deletePrefix), pfIterator);\r\n                LOG.debug(\"Deleting entity type:{} id:{} primary filter entry {} {}\", entityType, entityId, name, value);\r\n            } else if (key[prefixlen] == RELATED_ENTITIES_COLUMN[0]) {\r\n                kp = new KeyParser(key, prefixlen + RELATED_ENTITIES_COLUMN.length);\r\n                String type = kp.getNextString();\r\n                String id = kp.getNextString();\r\n                byte[] relatedEntityStartTime = getStartTime(id, type);\r\n                if (relatedEntityStartTime == null) {\r\n                    LOG.warn(\"Found no start time for \" + \"related entity \" + id + \" of type \" + type + \" while \" + \"deleting \" + entityId + \" of type \" + entityType);\r\n                    continue;\r\n                }\r\n                writeBatch.delete(createReverseRelatedEntityKey(id, type, relatedEntityStartTime, entityId, entityType));\r\n                LOG.debug(\"Deleting entity type:{} id:{} from invisible reverse\" + \" related entity entry of type:{} id:{}\", entityType, entityId, type, id);\r\n            } else if (key[prefixlen] == INVISIBLE_REVERSE_RELATED_ENTITIES_COLUMN[0]) {\r\n                kp = new KeyParser(key, prefixlen + INVISIBLE_REVERSE_RELATED_ENTITIES_COLUMN.length);\r\n                String type = kp.getNextString();\r\n                String id = kp.getNextString();\r\n                byte[] relatedEntityStartTime = getStartTime(id, type);\r\n                if (relatedEntityStartTime == null) {\r\n                    LOG.warn(\"Found no start time for reverse \" + \"related entity \" + id + \" of type \" + type + \" while \" + \"deleting \" + entityId + \" of type \" + entityType);\r\n                    continue;\r\n                }\r\n                writeBatch.delete(createRelatedEntityKey(id, type, relatedEntityStartTime, entityId, entityType));\r\n                LOG.debug(\"Deleting entity type:{} id:{} from related entity entry\" + \" of type:{} id:{}\", entityType, entityId, type, id);\r\n            }\r\n        }\r\n        WriteOptions writeOptions = new WriteOptions();\r\n        writeOptions.sync(true);\r\n        db.write(writeBatch, writeOptions);\r\n        return true;\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    } finally {\r\n        IOUtils.cleanupWithLogger(LOG, writeBatch);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "discardOldEntities",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void discardOldEntities(long timestamp) throws IOException, InterruptedException\n{\r\n    byte[] reverseTimestamp = writeReverseOrderedLong(timestamp);\r\n    long totalCount = 0;\r\n    long t1 = System.currentTimeMillis();\r\n    try {\r\n        List<String> entityTypes = getEntityTypes();\r\n        for (String entityType : entityTypes) {\r\n            LeveldbIterator iterator = null;\r\n            LeveldbIterator pfIterator = null;\r\n            long typeCount = 0;\r\n            deleteLock.writeLock().lock();\r\n            try {\r\n                iterator = getDbIterator(false);\r\n                pfIterator = getDbIterator(false);\r\n                if (deletionThread != null && deletionThread.isInterrupted()) {\r\n                    throw new InterruptedException();\r\n                }\r\n                boolean seeked = false;\r\n                while (deleteNextEntity(entityType, reverseTimestamp, iterator, pfIterator, seeked)) {\r\n                    typeCount++;\r\n                    totalCount++;\r\n                    seeked = true;\r\n                    if (deletionThread != null && deletionThread.isInterrupted()) {\r\n                        throw new InterruptedException();\r\n                    }\r\n                }\r\n            } catch (IOException e) {\r\n                LOG.error(\"Got IOException while deleting entities for type \" + entityType + \", continuing to next type\", e);\r\n            } finally {\r\n                IOUtils.cleanupWithLogger(LOG, iterator, pfIterator);\r\n                deleteLock.writeLock().unlock();\r\n                if (typeCount > 0) {\r\n                    LOG.info(\"Deleted \" + typeCount + \" entities of type \" + entityType);\r\n                }\r\n            }\r\n        }\r\n    } finally {\r\n        long t2 = System.currentTimeMillis();\r\n        LOG.info(\"Discarded \" + totalCount + \" entities for timestamp \" + timestamp + \" and earlier in \" + (t2 - t1) / 1000.0 + \" seconds\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getDbIterator",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LeveldbIterator getDbIterator(boolean fillCache)\n{\r\n    ReadOptions readOptions = new ReadOptions();\r\n    readOptions.fillCache(fillCache);\r\n    return new LeveldbIterator(db, readOptions);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "loadVersion",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Version loadVersion() throws IOException\n{\r\n    try {\r\n        byte[] data = db.get(bytes(TIMELINE_STORE_VERSION_KEY));\r\n        if (data == null || data.length == 0) {\r\n            return getCurrentVersion();\r\n        }\r\n        Version version = new VersionPBImpl(VersionProto.parseFrom(data));\r\n        return version;\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "storeVersion",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void storeVersion(Version state) throws IOException\n{\r\n    dbStoreVersion(state);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "dbStoreVersion",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void dbStoreVersion(Version state) throws IOException\n{\r\n    String key = TIMELINE_STORE_VERSION_KEY;\r\n    byte[] data = ((VersionPBImpl) state).getProto().toByteArray();\r\n    try {\r\n        db.put(bytes(key), data);\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getCurrentVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Version getCurrentVersion()\n{\r\n    return CURRENT_VERSION_INFO;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "checkVersion",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void checkVersion() throws IOException\n{\r\n    Version loadedVersion = loadVersion();\r\n    LOG.info(\"Loaded timeline store version info \" + loadedVersion);\r\n    if (loadedVersion.equals(getCurrentVersion())) {\r\n        return;\r\n    }\r\n    if (loadedVersion.isCompatibleTo(getCurrentVersion())) {\r\n        LOG.info(\"Storing timeline store version info \" + getCurrentVersion());\r\n        dbStoreVersion(CURRENT_VERSION_INFO);\r\n    } else {\r\n        String incompatibleMessage = \"Incompatible version for timeline store: expecting version \" + getCurrentVersion() + \", but loading version \" + loadedVersion;\r\n        LOG.error(incompatibleMessage);\r\n        throw new IOException(incompatibleMessage);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "put",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 43,
  "sourceCodeText" : "void put(TimelineDomain domain) throws IOException\n{\r\n    WriteBatch writeBatch = null;\r\n    try {\r\n        writeBatch = db.createWriteBatch();\r\n        if (domain.getId() == null || domain.getId().length() == 0) {\r\n            throw new IllegalArgumentException(\"Domain doesn't have an ID\");\r\n        }\r\n        if (domain.getOwner() == null || domain.getOwner().length() == 0) {\r\n            throw new IllegalArgumentException(\"Domain doesn't have an owner.\");\r\n        }\r\n        byte[] domainEntryKey = createDomainEntryKey(domain.getId(), DESCRIPTION_COLUMN);\r\n        byte[] ownerLookupEntryKey = createOwnerLookupKey(domain.getOwner(), domain.getId(), DESCRIPTION_COLUMN);\r\n        if (domain.getDescription() != null) {\r\n            writeBatch.put(domainEntryKey, domain.getDescription().getBytes(Charset.forName(\"UTF-8\")));\r\n            writeBatch.put(ownerLookupEntryKey, domain.getDescription().getBytes(Charset.forName(\"UTF-8\")));\r\n        } else {\r\n            writeBatch.put(domainEntryKey, EMPTY_BYTES);\r\n            writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\r\n        }\r\n        domainEntryKey = createDomainEntryKey(domain.getId(), OWNER_COLUMN);\r\n        ownerLookupEntryKey = createOwnerLookupKey(domain.getOwner(), domain.getId(), OWNER_COLUMN);\r\n        writeBatch.put(domainEntryKey, domain.getOwner().getBytes(Charset.forName(\"UTF-8\")));\r\n        writeBatch.put(ownerLookupEntryKey, domain.getOwner().getBytes(Charset.forName(\"UTF-8\")));\r\n        domainEntryKey = createDomainEntryKey(domain.getId(), READER_COLUMN);\r\n        ownerLookupEntryKey = createOwnerLookupKey(domain.getOwner(), domain.getId(), READER_COLUMN);\r\n        if (domain.getReaders() != null && domain.getReaders().length() > 0) {\r\n            writeBatch.put(domainEntryKey, domain.getReaders().getBytes(Charset.forName(\"UTF-8\")));\r\n            writeBatch.put(ownerLookupEntryKey, domain.getReaders().getBytes(Charset.forName(\"UTF-8\")));\r\n        } else {\r\n            writeBatch.put(domainEntryKey, EMPTY_BYTES);\r\n            writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\r\n        }\r\n        domainEntryKey = createDomainEntryKey(domain.getId(), WRITER_COLUMN);\r\n        ownerLookupEntryKey = createOwnerLookupKey(domain.getOwner(), domain.getId(), WRITER_COLUMN);\r\n        if (domain.getWriters() != null && domain.getWriters().length() > 0) {\r\n            writeBatch.put(domainEntryKey, domain.getWriters().getBytes(Charset.forName(\"UTF-8\")));\r\n            writeBatch.put(ownerLookupEntryKey, domain.getWriters().getBytes(Charset.forName(\"UTF-8\")));\r\n        } else {\r\n            writeBatch.put(domainEntryKey, EMPTY_BYTES);\r\n            writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\r\n        }\r\n        domainEntryKey = createDomainEntryKey(domain.getId(), TIMESTAMP_COLUMN);\r\n        ownerLookupEntryKey = createOwnerLookupKey(domain.getOwner(), domain.getId(), TIMESTAMP_COLUMN);\r\n        long currentTimestamp = System.currentTimeMillis();\r\n        byte[] timestamps = db.get(domainEntryKey);\r\n        if (timestamps == null) {\r\n            timestamps = new byte[16];\r\n            writeReverseOrderedLong(currentTimestamp, timestamps, 0);\r\n            writeReverseOrderedLong(currentTimestamp, timestamps, 8);\r\n        } else {\r\n            writeReverseOrderedLong(currentTimestamp, timestamps, 8);\r\n        }\r\n        writeBatch.put(domainEntryKey, timestamps);\r\n        writeBatch.put(ownerLookupEntryKey, timestamps);\r\n        db.write(writeBatch);\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    } finally {\r\n        IOUtils.cleanupWithLogger(LOG, writeBatch);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "createDomainEntryKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "byte[] createDomainEntryKey(String domainId, byte[] columnName) throws IOException\n{\r\n    return KeyBuilder.newInstance().add(DOMAIN_ENTRY_PREFIX).add(domainId).add(columnName).getBytes();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "createOwnerLookupKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "byte[] createOwnerLookupKey(String owner, String domainId, byte[] columnName) throws IOException\n{\r\n    return KeyBuilder.newInstance().add(OWNER_LOOKUP_PREFIX).add(owner).add(domainId).add(columnName).getBytes();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getDomain",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "TimelineDomain getDomain(String domainId) throws IOException\n{\r\n    LeveldbIterator iterator = null;\r\n    try {\r\n        byte[] prefix = KeyBuilder.newInstance().add(DOMAIN_ENTRY_PREFIX).add(domainId).getBytesForLookup();\r\n        iterator = new LeveldbIterator(db);\r\n        iterator.seek(prefix);\r\n        return getTimelineDomain(iterator, domainId, prefix);\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    } finally {\r\n        IOUtils.cleanupWithLogger(LOG, iterator);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getDomains",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "TimelineDomains getDomains(String owner) throws IOException\n{\r\n    LeveldbIterator iterator = null;\r\n    try {\r\n        byte[] prefix = KeyBuilder.newInstance().add(OWNER_LOOKUP_PREFIX).add(owner).getBytesForLookup();\r\n        List<TimelineDomain> domains = new ArrayList<TimelineDomain>();\r\n        for (iterator = new LeveldbIterator(db), iterator.seek(prefix); iterator.hasNext(); ) {\r\n            byte[] key = iterator.peekNext().getKey();\r\n            if (!prefixMatches(prefix, prefix.length, key)) {\r\n                break;\r\n            }\r\n            KeyParser kp = new KeyParser(key, prefix.length);\r\n            String domainId = kp.getNextString();\r\n            byte[] prefixExt = KeyBuilder.newInstance().add(OWNER_LOOKUP_PREFIX).add(owner).add(domainId).getBytesForLookup();\r\n            TimelineDomain domainToReturn = getTimelineDomain(iterator, domainId, prefixExt);\r\n            if (domainToReturn != null) {\r\n                domains.add(domainToReturn);\r\n            }\r\n        }\r\n        Collections.sort(domains, new Comparator<TimelineDomain>() {\r\n\r\n            @Override\r\n            public int compare(TimelineDomain domain1, TimelineDomain domain2) {\r\n                int result = domain2.getCreatedTime().compareTo(domain1.getCreatedTime());\r\n                if (result == 0) {\r\n                    return domain2.getModifiedTime().compareTo(domain1.getModifiedTime());\r\n                } else {\r\n                    return result;\r\n                }\r\n            }\r\n        });\r\n        TimelineDomains domainsToReturn = new TimelineDomains();\r\n        domainsToReturn.addDomains(domains);\r\n        return domainsToReturn;\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    } finally {\r\n        IOUtils.cleanupWithLogger(LOG, iterator);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getTimelineDomain",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "TimelineDomain getTimelineDomain(LeveldbIterator iterator, String domainId, byte[] prefix) throws IOException\n{\r\n    TimelineDomain domain = new TimelineDomain();\r\n    domain.setId(domainId);\r\n    boolean noRows = true;\r\n    for (; iterator.hasNext(); iterator.next()) {\r\n        byte[] key = iterator.peekNext().getKey();\r\n        if (!prefixMatches(prefix, prefix.length, key)) {\r\n            break;\r\n        }\r\n        if (noRows) {\r\n            noRows = false;\r\n        }\r\n        byte[] value = iterator.peekNext().getValue();\r\n        if (value != null && value.length > 0) {\r\n            if (key[prefix.length] == DESCRIPTION_COLUMN[0]) {\r\n                domain.setDescription(new String(value, Charset.forName(\"UTF-8\")));\r\n            } else if (key[prefix.length] == OWNER_COLUMN[0]) {\r\n                domain.setOwner(new String(value, Charset.forName(\"UTF-8\")));\r\n            } else if (key[prefix.length] == READER_COLUMN[0]) {\r\n                domain.setReaders(new String(value, Charset.forName(\"UTF-8\")));\r\n            } else if (key[prefix.length] == WRITER_COLUMN[0]) {\r\n                domain.setWriters(new String(value, Charset.forName(\"UTF-8\")));\r\n            } else if (key[prefix.length] == TIMESTAMP_COLUMN[0]) {\r\n                domain.setCreatedTime(readReverseOrderedLong(value, 0));\r\n                domain.setModifiedTime(readReverseOrderedLong(value, 8));\r\n            } else {\r\n                LOG.error(\"Unrecognized domain column: \" + key[prefix.length]);\r\n            }\r\n        }\r\n    }\r\n    if (noRows) {\r\n        return null;\r\n    } else {\r\n        return domain;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "totalOps",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "long totalOps()\n{\r\n    return getEntitiesOps.value() + getEntityOps.value() + getEventsOps.value() + postEntitiesOps.value() + putDomainOps.value() + getDomainOps.value() + getDomainsOps.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "create",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "TimelineDataManagerMetrics create()\n{\r\n    if (instance == null) {\r\n        MetricsSystem ms = DefaultMetricsSystem.instance();\r\n        instance = ms.register(new TimelineDataManagerMetrics());\r\n    }\r\n    return instance;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "incrGetEntitiesOps",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void incrGetEntitiesOps()\n{\r\n    getEntitiesOps.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "incrGetEntitiesTotal",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void incrGetEntitiesTotal(long delta)\n{\r\n    getEntitiesTotal.incr(delta);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "addGetEntitiesTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addGetEntitiesTime(long msec)\n{\r\n    getEntitiesTime.add(msec);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "incrGetEntityOps",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void incrGetEntityOps()\n{\r\n    getEntityOps.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "addGetEntityTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addGetEntityTime(long msec)\n{\r\n    getEntityTime.add(msec);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "incrGetEventsOps",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void incrGetEventsOps()\n{\r\n    getEventsOps.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "incrGetEventsTotal",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void incrGetEventsTotal(long delta)\n{\r\n    getEventsTotal.incr(delta);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "addGetEventsTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addGetEventsTime(long msec)\n{\r\n    getEventsTime.add(msec);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "incrPostEntitiesOps",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void incrPostEntitiesOps()\n{\r\n    postEntitiesOps.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "incrPostEntitiesTotal",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void incrPostEntitiesTotal(long delta)\n{\r\n    postEntitiesTotal.incr(delta);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "addPostEntitiesTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addPostEntitiesTime(long msec)\n{\r\n    postEntitiesTime.add(msec);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "incrPutDomainOps",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void incrPutDomainOps()\n{\r\n    putDomainOps.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "addPutDomainTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addPutDomainTime(long msec)\n{\r\n    putDomainTime.add(msec);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "incrGetDomainOps",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void incrGetDomainOps()\n{\r\n    getDomainOps.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "addGetDomainTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addGetDomainTime(long msec)\n{\r\n    getDomainTime.add(msec);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "incrGetDomainsOps",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void incrGetDomainsOps()\n{\r\n    getDomainsOps.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "incrGetDomainsTotal",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void incrGetDomainsTotal(long delta)\n{\r\n    getDomainsTotal.incr(delta);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "addGetDomainsTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addGetDomainsTime(long msec)\n{\r\n    getDomainsTime.add(msec);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "serviceInit",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    try {\r\n        doSecureLogin(conf);\r\n    } catch (IOException ie) {\r\n        throw new YarnRuntimeException(\"Failed to login\", ie);\r\n    }\r\n    timelineStore = createTimelineStore(conf);\r\n    addIfService(timelineStore);\r\n    secretManagerService = createTimelineDelegationTokenSecretManagerService(conf);\r\n    addService(secretManagerService);\r\n    timelineDataManager = createTimelineDataManager(conf);\r\n    addService(timelineDataManager);\r\n    aclsManager = createApplicationACLsManager(conf);\r\n    historyManager = createApplicationHistoryManager(conf);\r\n    ahsClientService = createApplicationHistoryClientService(historyManager);\r\n    addService(ahsClientService);\r\n    addService((Service) historyManager);\r\n    DefaultMetricsSystem.initialize(\"ApplicationHistoryServer\");\r\n    JvmMetrics jm = JvmMetrics.initSingleton(\"ApplicationHistoryServer\", null);\r\n    pauseMonitor = new JvmPauseMonitor();\r\n    addService(pauseMonitor);\r\n    jm.setPauseMonitor(pauseMonitor);\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    super.serviceStart();\r\n    startWebApp();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    if (webApp != null) {\r\n        webApp.stop();\r\n    }\r\n    DefaultMetricsSystem.shutdown();\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getClientService",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationHistoryClientService getClientService()\n{\r\n    return this.ahsClientService;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getListenerAddress",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "InetSocketAddress getListenerAddress()\n{\r\n    return this.webApp.httpServer().getConnectorAddress(0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getPort",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getPort()\n{\r\n    return this.getListenerAddress().getPort();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getTimelineStore",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineStore getTimelineStore()\n{\r\n    return timelineStore;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getApplicationHistoryManager",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationHistoryManager getApplicationHistoryManager()\n{\r\n    return this.historyManager;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "launchAppHistoryServer",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "ApplicationHistoryServer launchAppHistoryServer(String[] args)\n{\r\n    Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\r\n    StringUtils.startupShutdownMessage(ApplicationHistoryServer.class, args, LOG);\r\n    ApplicationHistoryServer appHistoryServer = null;\r\n    try {\r\n        appHistoryServer = new ApplicationHistoryServer();\r\n        ShutdownHookManager.get().addShutdownHook(new CompositeServiceShutdownHook(appHistoryServer), SHUTDOWN_HOOK_PRIORITY);\r\n        YarnConfiguration conf = new YarnConfiguration();\r\n        new GenericOptionsParser(conf, args);\r\n        appHistoryServer.init(conf);\r\n        appHistoryServer.start();\r\n    } catch (Throwable t) {\r\n        LOG.error(\"Error starting ApplicationHistoryServer\", t);\r\n        ExitUtil.terminate(-1, \"Error starting ApplicationHistoryServer\");\r\n    }\r\n    return appHistoryServer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "main",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void main(String[] args)\n{\r\n    launchAppHistoryServer(args);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "createApplicationHistoryClientService",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationHistoryClientService createApplicationHistoryClientService(ApplicationHistoryManager historyManager)\n{\r\n    return new ApplicationHistoryClientService(historyManager);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "createApplicationACLsManager",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationACLsManager createApplicationACLsManager(Configuration conf)\n{\r\n    return new ApplicationACLsManager(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "createApplicationHistoryManager",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "ApplicationHistoryManager createApplicationHistoryManager(Configuration conf)\n{\r\n    if (conf.get(YarnConfiguration.APPLICATION_HISTORY_STORE) == null || conf.get(YarnConfiguration.APPLICATION_HISTORY_STORE).length() == 0 || conf.get(YarnConfiguration.APPLICATION_HISTORY_STORE).equals(NullApplicationHistoryStore.class.getName())) {\r\n        return new ApplicationHistoryManagerOnTimelineStore(timelineDataManager, aclsManager);\r\n    } else {\r\n        LOG.warn(\"The filesystem based application history store is deprecated.\");\r\n        return new ApplicationHistoryManagerImpl();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "createTimelineStore",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineStore createTimelineStore(Configuration conf)\n{\r\n    return ReflectionUtils.newInstance(conf.getClass(YarnConfiguration.TIMELINE_SERVICE_STORE, LeveldbTimelineStore.class, TimelineStore.class), conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "createTimelineDelegationTokenSecretManagerService",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineV1DelegationTokenSecretManagerService createTimelineDelegationTokenSecretManagerService(Configuration conf)\n{\r\n    return new TimelineV1DelegationTokenSecretManagerService();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "createTimelineDataManager",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineDataManager createTimelineDataManager(Configuration conf)\n{\r\n    TimelineACLsManager aclsMgr = new TimelineACLsManager(conf);\r\n    aclsMgr.setTimelineStore(timelineStore);\r\n    return new TimelineDataManager(timelineStore, aclsMgr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "startWebApp",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 29,
  "sourceCodeText" : "void startWebApp()\n{\r\n    Configuration conf = getConfig();\r\n    String initializers = conf.get(\"hadoop.http.filter.initializers\", \"\");\r\n    Set<String> defaultInitializers = new LinkedHashSet<String>();\r\n    if (!initializers.contains(CrossOriginFilterInitializer.class.getName())) {\r\n        if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED, YarnConfiguration.TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED_DEFAULT)) {\r\n            if (initializers.contains(HttpCrossOriginFilterInitializer.class.getName())) {\r\n                initializers = initializers.replaceAll(HttpCrossOriginFilterInitializer.class.getName(), CrossOriginFilterInitializer.class.getName());\r\n            } else {\r\n                defaultInitializers.add(CrossOriginFilterInitializer.class.getName());\r\n            }\r\n        }\r\n    }\r\n    TimelineServerUtils.addTimelineAuthFilter(initializers, defaultInitializers, secretManagerService);\r\n    TimelineServerUtils.setTimelineFilters(conf, initializers, defaultInitializers);\r\n    String bindAddress = WebAppUtils.getWebAppBindURL(conf, YarnConfiguration.TIMELINE_SERVICE_BIND_HOST, WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\r\n    try {\r\n        AHSWebApp ahsWebApp = new AHSWebApp(timelineDataManager, ahsClientService);\r\n        webApp = WebApps.$for(\"applicationhistory\", ApplicationHistoryClientService.class, ahsClientService, \"ws\").with(conf).withAttribute(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS, conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS)).withCSRFProtection(YarnConfiguration.TIMELINE_CSRF_PREFIX).withXFSProtection(YarnConfiguration.TIMELINE_XFS_PREFIX).at(bindAddress).build(ahsWebApp);\r\n        HttpServer2 httpServer = webApp.httpServer();\r\n        String[] names = conf.getTrimmedStrings(YarnConfiguration.TIMELINE_SERVICE_UI_NAMES);\r\n        WebAppContext webAppContext = httpServer.getWebAppContext();\r\n        for (String name : names) {\r\n            String webPath = conf.get(YarnConfiguration.TIMELINE_SERVICE_UI_WEB_PATH_PREFIX + name);\r\n            String onDiskPath = conf.get(YarnConfiguration.TIMELINE_SERVICE_UI_ON_DISK_PATH_PREFIX + name);\r\n            WebAppContext uiWebAppContext = new WebAppContext();\r\n            uiWebAppContext.setContextPath(webPath);\r\n            if (onDiskPath.endsWith(\".war\")) {\r\n                uiWebAppContext.setWar(onDiskPath);\r\n            } else {\r\n                uiWebAppContext.setResourceBase(onDiskPath);\r\n            }\r\n            final String[] ALL_URLS = { \"/*\" };\r\n            FilterHolder[] filterHolders = webAppContext.getServletHandler().getFilters();\r\n            for (FilterHolder filterHolder : filterHolders) {\r\n                if (!\"guice\".equals(filterHolder.getName())) {\r\n                    HttpServer2.defineFilter(uiWebAppContext, filterHolder.getName(), filterHolder.getClassName(), filterHolder.getInitParameters(), ALL_URLS);\r\n                }\r\n            }\r\n            LOG.info(\"Hosting \" + name + \" from \" + onDiskPath + \" at \" + webPath);\r\n            httpServer.addHandlerAtFront(uiWebAppContext);\r\n        }\r\n        httpServer.start();\r\n        conf.updateConnectAddr(YarnConfiguration.TIMELINE_SERVICE_BIND_HOST, YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS, this.getListenerAddress());\r\n        LOG.info(\"Instantiating AHSWebApp at \" + getPort());\r\n    } catch (Exception e) {\r\n        String msg = \"AHSWebApp failed to start.\";\r\n        LOG.error(msg, e);\r\n        throw new YarnRuntimeException(msg, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "doSecureLogin",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void doSecureLogin(Configuration conf) throws IOException\n{\r\n    InetSocketAddress socAddr = getBindAddress(conf);\r\n    SecurityUtil.login(conf, YarnConfiguration.TIMELINE_SERVICE_KEYTAB, YarnConfiguration.TIMELINE_SERVICE_PRINCIPAL, socAddr.getHostName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getBindAddress",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "InetSocketAddress getBindAddress(Configuration conf)\n{\r\n    return conf.getSocketAddr(YarnConfiguration.TIMELINE_SERVICE_ADDRESS, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ADDRESS, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_PORT);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getFileSystem",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FileSystem getFileSystem(Path path, Configuration conf) throws Exception\n{\r\n    return path.getFileSystem(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "serviceStart",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    Configuration conf = getConfig();\r\n    Path fsWorkingPath = new Path(conf.get(YarnConfiguration.FS_APPLICATION_HISTORY_STORE_URI, conf.get(\"hadoop.tmp.dir\") + \"/yarn/timeline/generic-history\"));\r\n    rootDirPath = new Path(fsWorkingPath, ROOT_DIR_NAME);\r\n    try {\r\n        fs = getFileSystem(fsWorkingPath, conf);\r\n        fs.mkdirs(rootDirPath, ROOT_DIR_UMASK);\r\n    } catch (IOException e) {\r\n        LOG.error(\"Error when initializing FileSystemHistoryStorage\", e);\r\n        throw e;\r\n    }\r\n    super.serviceStart();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    try {\r\n        for (Entry<ApplicationId, HistoryFileWriter> entry : outstandingWriters.entrySet()) {\r\n            entry.getValue().close();\r\n        }\r\n        outstandingWriters.clear();\r\n    } finally {\r\n        IOUtils.cleanupWithLogger(LOG, fs);\r\n    }\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getApplication",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 16,
  "sourceCodeText" : "ApplicationHistoryData getApplication(ApplicationId appId) throws IOException\n{\r\n    HistoryFileReader hfReader = getHistoryFileReader(appId);\r\n    try {\r\n        boolean readStartData = false;\r\n        boolean readFinishData = false;\r\n        ApplicationHistoryData historyData = ApplicationHistoryData.newInstance(appId, null, null, null, null, Long.MIN_VALUE, Long.MIN_VALUE, Long.MAX_VALUE, null, FinalApplicationStatus.UNDEFINED, null);\r\n        while ((!readStartData || !readFinishData) && hfReader.hasNext()) {\r\n            HistoryFileReader.Entry entry = hfReader.next();\r\n            if (entry.key.id.equals(appId.toString())) {\r\n                if (entry.key.suffix.equals(START_DATA_SUFFIX)) {\r\n                    ApplicationStartData startData = parseApplicationStartData(entry.value);\r\n                    mergeApplicationHistoryData(historyData, startData);\r\n                    readStartData = true;\r\n                } else if (entry.key.suffix.equals(FINISH_DATA_SUFFIX)) {\r\n                    ApplicationFinishData finishData = parseApplicationFinishData(entry.value);\r\n                    mergeApplicationHistoryData(historyData, finishData);\r\n                    readFinishData = true;\r\n                }\r\n            }\r\n        }\r\n        if (!readStartData && !readFinishData) {\r\n            return null;\r\n        }\r\n        if (!readStartData) {\r\n            LOG.warn(\"Start information is missing for application \" + appId);\r\n        }\r\n        if (!readFinishData) {\r\n            LOG.warn(\"Finish information is missing for application \" + appId);\r\n        }\r\n        LOG.info(\"Completed reading history information of application \" + appId);\r\n        return historyData;\r\n    } catch (IOException e) {\r\n        LOG.error(\"Error when reading history file of application \" + appId, e);\r\n        throw e;\r\n    } finally {\r\n        hfReader.close();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getAllApplications",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Map<ApplicationId, ApplicationHistoryData> getAllApplications() throws IOException\n{\r\n    Map<ApplicationId, ApplicationHistoryData> historyDataMap = new HashMap<ApplicationId, ApplicationHistoryData>();\r\n    FileStatus[] files = fs.listStatus(rootDirPath);\r\n    for (FileStatus file : files) {\r\n        ApplicationId appId = ApplicationId.fromString(file.getPath().getName());\r\n        try {\r\n            ApplicationHistoryData historyData = getApplication(appId);\r\n            if (historyData != null) {\r\n                historyDataMap.put(appId, historyData);\r\n            }\r\n        } catch (IOException e) {\r\n            LOG.error(\"History information of application \" + appId + \" is not included into the result due to the exception\", e);\r\n        }\r\n    }\r\n    return historyDataMap;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getApplicationAttempts",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 16,
  "sourceCodeText" : "Map<ApplicationAttemptId, ApplicationAttemptHistoryData> getApplicationAttempts(ApplicationId appId) throws IOException\n{\r\n    Map<ApplicationAttemptId, ApplicationAttemptHistoryData> historyDataMap = new HashMap<ApplicationAttemptId, ApplicationAttemptHistoryData>();\r\n    HistoryFileReader hfReader = getHistoryFileReader(appId);\r\n    try {\r\n        while (hfReader.hasNext()) {\r\n            HistoryFileReader.Entry entry = hfReader.next();\r\n            if (entry.key.id.startsWith(ConverterUtils.APPLICATION_ATTEMPT_PREFIX)) {\r\n                ApplicationAttemptId appAttemptId = ApplicationAttemptId.fromString(entry.key.id);\r\n                if (appAttemptId.getApplicationId().equals(appId)) {\r\n                    ApplicationAttemptHistoryData historyData = historyDataMap.get(appAttemptId);\r\n                    if (historyData == null) {\r\n                        historyData = ApplicationAttemptHistoryData.newInstance(appAttemptId, null, -1, null, null, null, FinalApplicationStatus.UNDEFINED, null);\r\n                        historyDataMap.put(appAttemptId, historyData);\r\n                    }\r\n                    if (entry.key.suffix.equals(START_DATA_SUFFIX)) {\r\n                        mergeApplicationAttemptHistoryData(historyData, parseApplicationAttemptStartData(entry.value));\r\n                    } else if (entry.key.suffix.equals(FINISH_DATA_SUFFIX)) {\r\n                        mergeApplicationAttemptHistoryData(historyData, parseApplicationAttemptFinishData(entry.value));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        LOG.info(\"Completed reading history information of all application\" + \" attempts of application \" + appId);\r\n    } catch (IOException e) {\r\n        LOG.info(\"Error when reading history information of some application\" + \" attempts of application \" + appId);\r\n    } finally {\r\n        hfReader.close();\r\n    }\r\n    return historyDataMap;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getApplicationAttempt",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 16,
  "sourceCodeText" : "ApplicationAttemptHistoryData getApplicationAttempt(ApplicationAttemptId appAttemptId) throws IOException\n{\r\n    HistoryFileReader hfReader = getHistoryFileReader(appAttemptId.getApplicationId());\r\n    try {\r\n        boolean readStartData = false;\r\n        boolean readFinishData = false;\r\n        ApplicationAttemptHistoryData historyData = ApplicationAttemptHistoryData.newInstance(appAttemptId, null, -1, null, null, null, FinalApplicationStatus.UNDEFINED, null);\r\n        while ((!readStartData || !readFinishData) && hfReader.hasNext()) {\r\n            HistoryFileReader.Entry entry = hfReader.next();\r\n            if (entry.key.id.equals(appAttemptId.toString())) {\r\n                if (entry.key.suffix.equals(START_DATA_SUFFIX)) {\r\n                    ApplicationAttemptStartData startData = parseApplicationAttemptStartData(entry.value);\r\n                    mergeApplicationAttemptHistoryData(historyData, startData);\r\n                    readStartData = true;\r\n                } else if (entry.key.suffix.equals(FINISH_DATA_SUFFIX)) {\r\n                    ApplicationAttemptFinishData finishData = parseApplicationAttemptFinishData(entry.value);\r\n                    mergeApplicationAttemptHistoryData(historyData, finishData);\r\n                    readFinishData = true;\r\n                }\r\n            }\r\n        }\r\n        if (!readStartData && !readFinishData) {\r\n            return null;\r\n        }\r\n        if (!readStartData) {\r\n            LOG.warn(\"Start information is missing for application attempt \" + appAttemptId);\r\n        }\r\n        if (!readFinishData) {\r\n            LOG.warn(\"Finish information is missing for application attempt \" + appAttemptId);\r\n        }\r\n        LOG.info(\"Completed reading history information of application attempt \" + appAttemptId);\r\n        return historyData;\r\n    } catch (IOException e) {\r\n        LOG.error(\"Error when reading history file of application attempt\" + appAttemptId, e);\r\n        throw e;\r\n    } finally {\r\n        hfReader.close();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getContainer",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 16,
  "sourceCodeText" : "ContainerHistoryData getContainer(ContainerId containerId) throws IOException\n{\r\n    HistoryFileReader hfReader = getHistoryFileReader(containerId.getApplicationAttemptId().getApplicationId());\r\n    try {\r\n        boolean readStartData = false;\r\n        boolean readFinishData = false;\r\n        ContainerHistoryData historyData = ContainerHistoryData.newInstance(containerId, null, null, null, Long.MIN_VALUE, Long.MAX_VALUE, null, Integer.MAX_VALUE, null);\r\n        while ((!readStartData || !readFinishData) && hfReader.hasNext()) {\r\n            HistoryFileReader.Entry entry = hfReader.next();\r\n            if (entry.key.id.equals(containerId.toString())) {\r\n                if (entry.key.suffix.equals(START_DATA_SUFFIX)) {\r\n                    ContainerStartData startData = parseContainerStartData(entry.value);\r\n                    mergeContainerHistoryData(historyData, startData);\r\n                    readStartData = true;\r\n                } else if (entry.key.suffix.equals(FINISH_DATA_SUFFIX)) {\r\n                    ContainerFinishData finishData = parseContainerFinishData(entry.value);\r\n                    mergeContainerHistoryData(historyData, finishData);\r\n                    readFinishData = true;\r\n                }\r\n            }\r\n        }\r\n        if (!readStartData && !readFinishData) {\r\n            return null;\r\n        }\r\n        if (!readStartData) {\r\n            LOG.warn(\"Start information is missing for container \" + containerId);\r\n        }\r\n        if (!readFinishData) {\r\n            LOG.warn(\"Finish information is missing for container \" + containerId);\r\n        }\r\n        LOG.info(\"Completed reading history information of container \" + containerId);\r\n        return historyData;\r\n    } catch (IOException e) {\r\n        LOG.error(\"Error when reading history file of container \" + containerId, e);\r\n        throw e;\r\n    } finally {\r\n        hfReader.close();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getAMContainer",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ContainerHistoryData getAMContainer(ApplicationAttemptId appAttemptId) throws IOException\n{\r\n    ApplicationAttemptHistoryData attemptHistoryData = getApplicationAttempt(appAttemptId);\r\n    if (attemptHistoryData == null || attemptHistoryData.getMasterContainerId() == null) {\r\n        return null;\r\n    }\r\n    return getContainer(attemptHistoryData.getMasterContainerId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getContainers",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 16,
  "sourceCodeText" : "Map<ContainerId, ContainerHistoryData> getContainers(ApplicationAttemptId appAttemptId) throws IOException\n{\r\n    Map<ContainerId, ContainerHistoryData> historyDataMap = new HashMap<ContainerId, ContainerHistoryData>();\r\n    HistoryFileReader hfReader = getHistoryFileReader(appAttemptId.getApplicationId());\r\n    try {\r\n        while (hfReader.hasNext()) {\r\n            HistoryFileReader.Entry entry = hfReader.next();\r\n            if (entry.key.id.startsWith(ConverterUtils.CONTAINER_PREFIX)) {\r\n                ContainerId containerId = ContainerId.fromString(entry.key.id);\r\n                if (containerId.getApplicationAttemptId().equals(appAttemptId)) {\r\n                    ContainerHistoryData historyData = historyDataMap.get(containerId);\r\n                    if (historyData == null) {\r\n                        historyData = ContainerHistoryData.newInstance(containerId, null, null, null, Long.MIN_VALUE, Long.MAX_VALUE, null, Integer.MAX_VALUE, null);\r\n                        historyDataMap.put(containerId, historyData);\r\n                    }\r\n                    if (entry.key.suffix.equals(START_DATA_SUFFIX)) {\r\n                        mergeContainerHistoryData(historyData, parseContainerStartData(entry.value));\r\n                    } else if (entry.key.suffix.equals(FINISH_DATA_SUFFIX)) {\r\n                        mergeContainerHistoryData(historyData, parseContainerFinishData(entry.value));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        LOG.info(\"Completed reading history information of all containers\" + \" of application attempt \" + appAttemptId);\r\n    } catch (IOException e) {\r\n        LOG.info(\"Error when reading history information of some containers\" + \" of application attempt \" + appAttemptId);\r\n    } finally {\r\n        hfReader.close();\r\n    }\r\n    return historyDataMap;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "applicationStarted",
  "errType" : [ "IOException", "IOException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void applicationStarted(ApplicationStartData appStart) throws IOException\n{\r\n    HistoryFileWriter hfWriter = outstandingWriters.get(appStart.getApplicationId());\r\n    if (hfWriter == null) {\r\n        Path applicationHistoryFile = new Path(rootDirPath, appStart.getApplicationId().toString());\r\n        try {\r\n            hfWriter = new HistoryFileWriter(applicationHistoryFile);\r\n            LOG.info(\"Opened history file of application \" + appStart.getApplicationId());\r\n        } catch (IOException e) {\r\n            LOG.error(\"Error when openning history file of application \" + appStart.getApplicationId(), e);\r\n            throw e;\r\n        }\r\n        outstandingWriters.put(appStart.getApplicationId(), hfWriter);\r\n    } else {\r\n        throw new IOException(\"History file of application \" + appStart.getApplicationId() + \" is already opened\");\r\n    }\r\n    assert appStart instanceof ApplicationStartDataPBImpl;\r\n    try {\r\n        hfWriter.writeHistoryData(new HistoryDataKey(appStart.getApplicationId().toString(), START_DATA_SUFFIX), ((ApplicationStartDataPBImpl) appStart).getProto().toByteArray());\r\n        LOG.info(\"Start information of application \" + appStart.getApplicationId() + \" is written\");\r\n    } catch (IOException e) {\r\n        LOG.error(\"Error when writing start information of application \" + appStart.getApplicationId(), e);\r\n        throw e;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "applicationFinished",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void applicationFinished(ApplicationFinishData appFinish) throws IOException\n{\r\n    HistoryFileWriter hfWriter = getHistoryFileWriter(appFinish.getApplicationId());\r\n    assert appFinish instanceof ApplicationFinishDataPBImpl;\r\n    try {\r\n        hfWriter.writeHistoryData(new HistoryDataKey(appFinish.getApplicationId().toString(), FINISH_DATA_SUFFIX), ((ApplicationFinishDataPBImpl) appFinish).getProto().toByteArray());\r\n        LOG.info(\"Finish information of application \" + appFinish.getApplicationId() + \" is written\");\r\n    } catch (IOException e) {\r\n        LOG.error(\"Error when writing finish information of application \" + appFinish.getApplicationId(), e);\r\n        throw e;\r\n    } finally {\r\n        hfWriter.close();\r\n        outstandingWriters.remove(appFinish.getApplicationId());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "applicationAttemptStarted",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void applicationAttemptStarted(ApplicationAttemptStartData appAttemptStart) throws IOException\n{\r\n    HistoryFileWriter hfWriter = getHistoryFileWriter(appAttemptStart.getApplicationAttemptId().getApplicationId());\r\n    assert appAttemptStart instanceof ApplicationAttemptStartDataPBImpl;\r\n    try {\r\n        hfWriter.writeHistoryData(new HistoryDataKey(appAttemptStart.getApplicationAttemptId().toString(), START_DATA_SUFFIX), ((ApplicationAttemptStartDataPBImpl) appAttemptStart).getProto().toByteArray());\r\n        LOG.info(\"Start information of application attempt \" + appAttemptStart.getApplicationAttemptId() + \" is written\");\r\n    } catch (IOException e) {\r\n        LOG.error(\"Error when writing start information of application attempt \" + appAttemptStart.getApplicationAttemptId(), e);\r\n        throw e;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "applicationAttemptFinished",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void applicationAttemptFinished(ApplicationAttemptFinishData appAttemptFinish) throws IOException\n{\r\n    HistoryFileWriter hfWriter = getHistoryFileWriter(appAttemptFinish.getApplicationAttemptId().getApplicationId());\r\n    assert appAttemptFinish instanceof ApplicationAttemptFinishDataPBImpl;\r\n    try {\r\n        hfWriter.writeHistoryData(new HistoryDataKey(appAttemptFinish.getApplicationAttemptId().toString(), FINISH_DATA_SUFFIX), ((ApplicationAttemptFinishDataPBImpl) appAttemptFinish).getProto().toByteArray());\r\n        LOG.info(\"Finish information of application attempt \" + appAttemptFinish.getApplicationAttemptId() + \" is written\");\r\n    } catch (IOException e) {\r\n        LOG.error(\"Error when writing finish information of application attempt \" + appAttemptFinish.getApplicationAttemptId(), e);\r\n        throw e;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "containerStarted",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void containerStarted(ContainerStartData containerStart) throws IOException\n{\r\n    HistoryFileWriter hfWriter = getHistoryFileWriter(containerStart.getContainerId().getApplicationAttemptId().getApplicationId());\r\n    assert containerStart instanceof ContainerStartDataPBImpl;\r\n    try {\r\n        hfWriter.writeHistoryData(new HistoryDataKey(containerStart.getContainerId().toString(), START_DATA_SUFFIX), ((ContainerStartDataPBImpl) containerStart).getProto().toByteArray());\r\n        LOG.info(\"Start information of container \" + containerStart.getContainerId() + \" is written\");\r\n    } catch (IOException e) {\r\n        LOG.error(\"Error when writing start information of container \" + containerStart.getContainerId(), e);\r\n        throw e;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "containerFinished",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void containerFinished(ContainerFinishData containerFinish) throws IOException\n{\r\n    HistoryFileWriter hfWriter = getHistoryFileWriter(containerFinish.getContainerId().getApplicationAttemptId().getApplicationId());\r\n    assert containerFinish instanceof ContainerFinishDataPBImpl;\r\n    try {\r\n        hfWriter.writeHistoryData(new HistoryDataKey(containerFinish.getContainerId().toString(), FINISH_DATA_SUFFIX), ((ContainerFinishDataPBImpl) containerFinish).getProto().toByteArray());\r\n        LOG.info(\"Finish information of container \" + containerFinish.getContainerId() + \" is written\");\r\n    } catch (IOException e) {\r\n        LOG.error(\"Error when writing finish information of container \" + containerFinish.getContainerId(), e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "parseApplicationStartData",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationStartData parseApplicationStartData(byte[] value) throws InvalidProtocolBufferException\n{\r\n    return new ApplicationStartDataPBImpl(ApplicationStartDataProto.parseFrom(value));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "parseApplicationFinishData",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationFinishData parseApplicationFinishData(byte[] value) throws InvalidProtocolBufferException\n{\r\n    return new ApplicationFinishDataPBImpl(ApplicationFinishDataProto.parseFrom(value));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "parseApplicationAttemptStartData",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationAttemptStartData parseApplicationAttemptStartData(byte[] value) throws InvalidProtocolBufferException\n{\r\n    return new ApplicationAttemptStartDataPBImpl(ApplicationAttemptStartDataProto.parseFrom(value));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "parseApplicationAttemptFinishData",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationAttemptFinishData parseApplicationAttemptFinishData(byte[] value) throws InvalidProtocolBufferException\n{\r\n    return new ApplicationAttemptFinishDataPBImpl(ApplicationAttemptFinishDataProto.parseFrom(value));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "parseContainerStartData",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerStartData parseContainerStartData(byte[] value) throws InvalidProtocolBufferException\n{\r\n    return new ContainerStartDataPBImpl(ContainerStartDataProto.parseFrom(value));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "parseContainerFinishData",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerFinishData parseContainerFinishData(byte[] value) throws InvalidProtocolBufferException\n{\r\n    return new ContainerFinishDataPBImpl(ContainerFinishDataProto.parseFrom(value));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "mergeApplicationHistoryData",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void mergeApplicationHistoryData(ApplicationHistoryData historyData, ApplicationStartData startData)\n{\r\n    historyData.setApplicationName(startData.getApplicationName());\r\n    historyData.setApplicationType(startData.getApplicationType());\r\n    historyData.setQueue(startData.getQueue());\r\n    historyData.setUser(startData.getUser());\r\n    historyData.setSubmitTime(startData.getSubmitTime());\r\n    historyData.setStartTime(startData.getStartTime());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "mergeApplicationHistoryData",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void mergeApplicationHistoryData(ApplicationHistoryData historyData, ApplicationFinishData finishData)\n{\r\n    historyData.setFinishTime(finishData.getFinishTime());\r\n    historyData.setDiagnosticsInfo(finishData.getDiagnosticsInfo());\r\n    historyData.setFinalApplicationStatus(finishData.getFinalApplicationStatus());\r\n    historyData.setYarnApplicationState(finishData.getYarnApplicationState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "mergeApplicationAttemptHistoryData",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeApplicationAttemptHistoryData(ApplicationAttemptHistoryData historyData, ApplicationAttemptStartData startData)\n{\r\n    historyData.setHost(startData.getHost());\r\n    historyData.setRPCPort(startData.getRPCPort());\r\n    historyData.setMasterContainerId(startData.getMasterContainerId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "mergeApplicationAttemptHistoryData",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void mergeApplicationAttemptHistoryData(ApplicationAttemptHistoryData historyData, ApplicationAttemptFinishData finishData)\n{\r\n    historyData.setDiagnosticsInfo(finishData.getDiagnosticsInfo());\r\n    historyData.setTrackingURL(finishData.getTrackingURL());\r\n    historyData.setFinalApplicationStatus(finishData.getFinalApplicationStatus());\r\n    historyData.setYarnApplicationAttemptState(finishData.getYarnApplicationAttemptState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "mergeContainerHistoryData",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void mergeContainerHistoryData(ContainerHistoryData historyData, ContainerStartData startData)\n{\r\n    historyData.setAllocatedResource(startData.getAllocatedResource());\r\n    historyData.setAssignedNode(startData.getAssignedNode());\r\n    historyData.setPriority(startData.getPriority());\r\n    historyData.setStartTime(startData.getStartTime());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "mergeContainerHistoryData",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void mergeContainerHistoryData(ContainerHistoryData historyData, ContainerFinishData finishData)\n{\r\n    historyData.setFinishTime(finishData.getFinishTime());\r\n    historyData.setDiagnosticsInfo(finishData.getDiagnosticsInfo());\r\n    historyData.setContainerExitStatus(finishData.getContainerExitStatus());\r\n    historyData.setContainerState(finishData.getContainerState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getHistoryFileWriter",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "HistoryFileWriter getHistoryFileWriter(ApplicationId appId) throws IOException\n{\r\n    HistoryFileWriter hfWriter = outstandingWriters.get(appId);\r\n    if (hfWriter == null) {\r\n        throw new IOException(\"History file of application \" + appId + \" is not opened\");\r\n    }\r\n    return hfWriter;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getHistoryFileReader",
  "errType" : [ "FileNotFoundException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "HistoryFileReader getHistoryFileReader(ApplicationId appId) throws IOException\n{\r\n    Path applicationHistoryFile = new Path(rootDirPath, appId.toString());\r\n    try {\r\n        fs.getFileStatus(applicationHistoryFile);\r\n    } catch (FileNotFoundException e) {\r\n        throw (FileNotFoundException) new FileNotFoundException(\"History file for\" + \" application \" + appId + \" is not found: \" + e).initCause(e);\r\n    }\r\n    if (outstandingWriters.containsKey(appId)) {\r\n        throw new IOException(\"History file for application \" + appId + \" is under writing\");\r\n    }\r\n    return new HistoryFileReader(applicationHistoryFile);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery\\records",
  "methodName" : "readFields",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void readFields(DataInput in) throws IOException\n{\r\n    builder.mergeFrom((DataInputStream) in);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery\\records",
  "methodName" : "toByteArray",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "byte[] toByteArray() throws IOException\n{\r\n    return builder.build().toByteArray();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery\\records",
  "methodName" : "getTokenIdentifier",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "TimelineDelegationTokenIdentifier getTokenIdentifier() throws IOException\n{\r\n    ByteArrayInputStream in = new ByteArrayInputStream(builder.getTokenIdentifier().toByteArray());\r\n    TimelineDelegationTokenIdentifier identifer = new TimelineDelegationTokenIdentifier();\r\n    identifer.readFields(new DataInputStream(in));\r\n    return identifer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery\\records",
  "methodName" : "getRenewDate",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getRenewDate()\n{\r\n    return builder.getRenewDate();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerId getContainerId()\n{\r\n    if (this.containerId != null) {\r\n        return this.containerId;\r\n    }\r\n    ContainerFinishDataProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasContainerId()) {\r\n        return null;\r\n    }\r\n    this.containerId = convertFromProtoFormat(p.getContainerId());\r\n    return this.containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "setContainerId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setContainerId(ContainerId containerId)\n{\r\n    maybeInitBuilder();\r\n    if (containerId == null) {\r\n        builder.clearContainerId();\r\n    }\r\n    this.containerId = containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "getFinishTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getFinishTime()\n{\r\n    ContainerFinishDataProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getFinishTime();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "setFinishTime",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setFinishTime(long finishTime)\n{\r\n    maybeInitBuilder();\r\n    builder.setFinishTime(finishTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "getDiagnosticsInfo",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getDiagnosticsInfo()\n{\r\n    ContainerFinishDataProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasDiagnosticsInfo()) {\r\n        return null;\r\n    }\r\n    return p.getDiagnosticsInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "setDiagnosticsInfo",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setDiagnosticsInfo(String diagnosticsInfo)\n{\r\n    maybeInitBuilder();\r\n    if (diagnosticsInfo == null) {\r\n        builder.clearDiagnosticsInfo();\r\n        return;\r\n    }\r\n    builder.setDiagnosticsInfo(diagnosticsInfo);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "getContainerExitStatus",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getContainerExitStatus()\n{\r\n    ContainerFinishDataProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getContainerExitStatus();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "getContainerState",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerState getContainerState()\n{\r\n    ContainerFinishDataProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasContainerState()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getContainerState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "setContainerState",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setContainerState(ContainerState state)\n{\r\n    maybeInitBuilder();\r\n    if (state == null) {\r\n        builder.clearContainerState();\r\n        return;\r\n    }\r\n    builder.setContainerState(convertToProtoFormat(state));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "setContainerExitStatus",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setContainerExitStatus(int containerExitStatus)\n{\r\n    maybeInitBuilder();\r\n    builder.setContainerExitStatus(containerExitStatus);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerFinishDataProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.containerId != null && !((ContainerIdPBImpl) this.containerId).getProto().equals(builder.getContainerId())) {\r\n        builder.setContainerId(convertToProtoFormat(this.containerId));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ContainerFinishDataProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerIdProto convertToProtoFormat(ContainerId containerId)\n{\r\n    return ((ContainerIdPBImpl) containerId).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerIdPBImpl convertFromProtoFormat(ContainerIdProto containerId)\n{\r\n    return new ContainerIdPBImpl(containerId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerStateProto convertToProtoFormat(ContainerState state)\n{\r\n    return ProtoUtils.convertToProtoFormat(state);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerState convertFromProtoFormat(ContainerStateProto containerState)\n{\r\n    return ProtoUtils.convertFromProtoFormat(containerState);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "preHead",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void preHead(Page.HTML<__> html)\n{\r\n    String logEntity = $(ENTITY_STRING);\r\n    if (logEntity == null || logEntity.isEmpty()) {\r\n        logEntity = $(CONTAINER_ID);\r\n    }\r\n    if (logEntity == null || logEntity.isEmpty()) {\r\n        logEntity = \"UNKNOWN\";\r\n    }\r\n    commonPreHead(html);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "content",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<? extends SubView> content()\n{\r\n    return AggregatedLogsBlock.class;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "initStorage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void initStorage(Configuration conf) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "startStorage",
  "errType" : [ "NativeDB.DBException", "DBException", "DBException" ],
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void startStorage() throws IOException\n{\r\n    Options options = new Options();\r\n    Path dbPath = new Path(getConfig().get(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_STATE_STORE_PATH), DB_NAME);\r\n    FileSystem localFS = null;\r\n    try {\r\n        localFS = FileSystem.getLocal(getConfig());\r\n        if (!localFS.exists(dbPath)) {\r\n            if (!localFS.mkdirs(dbPath)) {\r\n                throw new IOException(\"Couldn't create directory for leveldb \" + \"timeline store \" + dbPath);\r\n            }\r\n            localFS.setPermission(dbPath, LEVELDB_DIR_UMASK);\r\n        }\r\n    } finally {\r\n        IOUtils.cleanupWithLogger(LOG, localFS);\r\n    }\r\n    JniDBFactory factory = new JniDBFactory();\r\n    try {\r\n        options.createIfMissing(false);\r\n        db = factory.open(new File(dbPath.toString()), options);\r\n        LOG.info(\"Loading the existing database at th path: \" + dbPath.toString());\r\n        checkVersion();\r\n    } catch (NativeDB.DBException e) {\r\n        if (e.isNotFound() || e.getMessage().contains(\" does not exist \")) {\r\n            try {\r\n                options.createIfMissing(true);\r\n                db = factory.open(new File(dbPath.toString()), options);\r\n                LOG.info(\"Creating a new database at th path: \" + dbPath.toString());\r\n                storeVersion(CURRENT_VERSION_INFO);\r\n            } catch (DBException ex) {\r\n                throw new IOException(ex);\r\n            }\r\n        } else {\r\n            throw new IOException(e);\r\n        }\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "closeStorage",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void closeStorage() throws IOException\n{\r\n    IOUtils.cleanupWithLogger(LOG, db);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "loadState",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "TimelineServiceState loadState() throws IOException\n{\r\n    LOG.info(\"Loading timeline service state from leveldb\");\r\n    TimelineServiceState state = new TimelineServiceState();\r\n    int numKeys = loadTokenMasterKeys(state);\r\n    int numTokens = loadTokens(state);\r\n    loadLatestSequenceNumber(state);\r\n    LOG.info(\"Loaded \" + numKeys + \" master keys and \" + numTokens + \" tokens from leveldb, and latest sequence number is \" + state.getLatestSequenceNumber());\r\n    return state;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "storeToken",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void storeToken(TimelineDelegationTokenIdentifier tokenId, Long renewDate) throws IOException\n{\r\n    DataOutputStream ds = null;\r\n    WriteBatch batch = null;\r\n    try {\r\n        byte[] k = createTokenEntryKey(tokenId.getSequenceNumber());\r\n        if (db.get(k) != null) {\r\n            throw new IOException(tokenId + \" already exists\");\r\n        }\r\n        byte[] v = buildTokenData(tokenId, renewDate);\r\n        ByteArrayOutputStream bs = new ByteArrayOutputStream();\r\n        ds = new DataOutputStream(bs);\r\n        ds.writeInt(tokenId.getSequenceNumber());\r\n        batch = db.createWriteBatch();\r\n        batch.put(k, v);\r\n        batch.put(LATEST_SEQUENCE_NUMBER_KEY, bs.toByteArray());\r\n        db.write(batch);\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    } finally {\r\n        IOUtils.cleanupWithLogger(LOG, ds);\r\n        IOUtils.cleanupWithLogger(LOG, batch);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "updateToken",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void updateToken(TimelineDelegationTokenIdentifier tokenId, Long renewDate) throws IOException\n{\r\n    try {\r\n        byte[] k = createTokenEntryKey(tokenId.getSequenceNumber());\r\n        if (db.get(k) == null) {\r\n            throw new IOException(tokenId + \" doesn't exist\");\r\n        }\r\n        byte[] v = buildTokenData(tokenId, renewDate);\r\n        db.put(k, v);\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "removeToken",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void removeToken(TimelineDelegationTokenIdentifier tokenId) throws IOException\n{\r\n    try {\r\n        byte[] key = createTokenEntryKey(tokenId.getSequenceNumber());\r\n        db.delete(key);\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "storeTokenMasterKey",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void storeTokenMasterKey(DelegationKey key) throws IOException\n{\r\n    try {\r\n        byte[] k = createTokenMasterKeyEntryKey(key.getKeyId());\r\n        if (db.get(k) != null) {\r\n            throw new IOException(key + \" already exists\");\r\n        }\r\n        byte[] v = buildTokenMasterKeyData(key);\r\n        db.put(k, v);\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "removeTokenMasterKey",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void removeTokenMasterKey(DelegationKey key) throws IOException\n{\r\n    try {\r\n        byte[] k = createTokenMasterKeyEntryKey(key.getKeyId());\r\n        db.delete(k);\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "buildTokenData",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "byte[] buildTokenData(TimelineDelegationTokenIdentifier tokenId, Long renewDate) throws IOException\n{\r\n    TimelineDelegationTokenIdentifierData data = new TimelineDelegationTokenIdentifierData(tokenId, renewDate);\r\n    return data.toByteArray();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "buildTokenMasterKeyData",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "byte[] buildTokenMasterKeyData(DelegationKey key) throws IOException\n{\r\n    ByteArrayOutputStream memStream = new ByteArrayOutputStream();\r\n    DataOutputStream dataStream = new DataOutputStream(memStream);\r\n    try {\r\n        key.write(dataStream);\r\n        dataStream.close();\r\n    } finally {\r\n        IOUtils.cleanupWithLogger(LOG, dataStream);\r\n    }\r\n    return memStream.toByteArray();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "loadTokenMasterKeyData",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void loadTokenMasterKeyData(TimelineServiceState state, byte[] keyData) throws IOException\n{\r\n    DelegationKey key = new DelegationKey();\r\n    DataInputStream in = new DataInputStream(new ByteArrayInputStream(keyData));\r\n    try {\r\n        key.readFields(in);\r\n    } finally {\r\n        IOUtils.cleanupWithLogger(LOG, in);\r\n    }\r\n    state.tokenMasterKeyState.add(key);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "loadTokenData",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void loadTokenData(TimelineServiceState state, byte[] tokenData) throws IOException\n{\r\n    TimelineDelegationTokenIdentifierData data = new TimelineDelegationTokenIdentifierData();\r\n    DataInputStream in = new DataInputStream(new ByteArrayInputStream(tokenData));\r\n    try {\r\n        data.readFields(in);\r\n    } finally {\r\n        IOUtils.cleanupWithLogger(LOG, in);\r\n    }\r\n    state.tokenState.put(data.getTokenIdentifier(), data.getRenewDate());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "loadTokenMasterKeys",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "int loadTokenMasterKeys(TimelineServiceState state) throws IOException\n{\r\n    byte[] base = KeyBuilder.newInstance().add(TOKEN_MASTER_KEY_ENTRY_PREFIX).getBytesForLookup();\r\n    int numKeys = 0;\r\n    LeveldbIterator iterator = null;\r\n    try {\r\n        for (iterator = new LeveldbIterator(db), iterator.seek(base); iterator.hasNext(); iterator.next()) {\r\n            byte[] k = iterator.peekNext().getKey();\r\n            if (!prefixMatches(base, base.length, k)) {\r\n                break;\r\n            }\r\n            byte[] v = iterator.peekNext().getValue();\r\n            loadTokenMasterKeyData(state, v);\r\n            ++numKeys;\r\n        }\r\n    } finally {\r\n        IOUtils.cleanupWithLogger(LOG, iterator);\r\n    }\r\n    return numKeys;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "loadTokens",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "int loadTokens(TimelineServiceState state) throws IOException\n{\r\n    byte[] base = KeyBuilder.newInstance().add(TOKEN_ENTRY_PREFIX).getBytesForLookup();\r\n    int numTokens = 0;\r\n    LeveldbIterator iterator = null;\r\n    try {\r\n        for (iterator = new LeveldbIterator(db), iterator.seek(base); iterator.hasNext(); iterator.next()) {\r\n            byte[] k = iterator.peekNext().getKey();\r\n            if (!prefixMatches(base, base.length, k)) {\r\n                break;\r\n            }\r\n            byte[] v = iterator.peekNext().getValue();\r\n            loadTokenData(state, v);\r\n            ++numTokens;\r\n        }\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    } finally {\r\n        IOUtils.cleanupWithLogger(LOG, iterator);\r\n    }\r\n    return numTokens;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "loadLatestSequenceNumber",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void loadLatestSequenceNumber(TimelineServiceState state) throws IOException\n{\r\n    byte[] data = null;\r\n    try {\r\n        data = db.get(LATEST_SEQUENCE_NUMBER_KEY);\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    }\r\n    if (data != null) {\r\n        DataInputStream in = new DataInputStream(new ByteArrayInputStream(data));\r\n        try {\r\n            state.latestSequenceNumber = in.readInt();\r\n        } finally {\r\n            IOUtils.cleanupWithLogger(LOG, in);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "createTokenEntryKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "byte[] createTokenEntryKey(int seqNum) throws IOException\n{\r\n    return KeyBuilder.newInstance().add(TOKEN_ENTRY_PREFIX).add(Integer.toString(seqNum)).getBytes();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "createTokenMasterKeyEntryKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "byte[] createTokenMasterKeyEntryKey(int keyId) throws IOException\n{\r\n    return KeyBuilder.newInstance().add(TOKEN_MASTER_KEY_ENTRY_PREFIX).add(Integer.toString(keyId)).getBytes();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "loadVersion",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Version loadVersion() throws IOException\n{\r\n    try {\r\n        byte[] data = db.get(TIMELINE_STATE_STORE_VERSION_KEY);\r\n        if (data == null || data.length == 0) {\r\n            return getCurrentVersion();\r\n        }\r\n        Version version = new VersionPBImpl(YarnServerCommonProtos.VersionProto.parseFrom(data));\r\n        return version;\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "storeVersion",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void storeVersion(Version state) throws IOException\n{\r\n    byte[] data = ((VersionPBImpl) state).getProto().toByteArray();\r\n    try {\r\n        db.put(TIMELINE_STATE_STORE_VERSION_KEY, data);\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "getCurrentVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Version getCurrentVersion()\n{\r\n    return CURRENT_VERSION_INFO;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "checkVersion",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void checkVersion() throws IOException\n{\r\n    Version loadedVersion = loadVersion();\r\n    LOG.info(\"Loaded timeline state store version info \" + loadedVersion);\r\n    if (loadedVersion.equals(getCurrentVersion())) {\r\n        return;\r\n    }\r\n    if (loadedVersion.isCompatibleTo(getCurrentVersion())) {\r\n        LOG.info(\"Storing timeline state store version info \" + getCurrentVersion());\r\n        storeVersion(CURRENT_VERSION_INFO);\r\n    } else {\r\n        String incompatibleMessage = \"Incompatible version for timeline state store: expecting version \" + getCurrentVersion() + \", but loading version \" + loadedVersion;\r\n        LOG.error(incompatibleMessage);\r\n        throw new IOException(incompatibleMessage);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "preHead",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void preHead(Page.HTML<__> html)\n{\r\n    commonPreHead(html);\r\n    set(DATATABLES_ID, \"apps\");\r\n    set(initID(DATATABLES, \"apps\"), WebPageUtils.appsTableInit(false));\r\n    setTableStyles(html, \"apps\", \".queue {width:6em}\", \".ui {width:8em}\");\r\n    String reqState = $(APP_STATE);\r\n    reqState = (reqState == null || reqState.isEmpty() ? \"All\" : reqState);\r\n    setTitle(sjoin(reqState, \"Applications\"));\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "commonPreHead",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void commonPreHead(Page.HTML<__> html)\n{\r\n    set(ACCORDION_ID, \"nav\");\r\n    set(initID(ACCORDION, \"nav\"), \"{autoHeight:false, active:0}\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "nav",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<? extends SubView> nav()\n{\r\n    return NavBlock.class;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "content",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<? extends SubView> content()\n{\r\n    return AppsBlock.class;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "ContainerHistoryData newInstance(ContainerId containerId, Resource allocatedResource, NodeId assignedNode, Priority priority, long startTime, long finishTime, String diagnosticsInfo, int containerExitCode, ContainerState containerState)\n{\r\n    ContainerHistoryData containerHD = new ContainerHistoryData();\r\n    containerHD.setContainerId(containerId);\r\n    containerHD.setAllocatedResource(allocatedResource);\r\n    containerHD.setAssignedNode(assignedNode);\r\n    containerHD.setPriority(priority);\r\n    containerHD.setStartTime(startTime);\r\n    containerHD.setFinishTime(finishTime);\r\n    containerHD.setDiagnosticsInfo(diagnosticsInfo);\r\n    containerHD.setContainerExitStatus(containerExitCode);\r\n    containerHD.setContainerState(containerState);\r\n    return containerHD;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerId getContainerId()\n{\r\n    return containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setContainerId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setContainerId(ContainerId containerId)\n{\r\n    this.containerId = containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getAllocatedResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Resource getAllocatedResource()\n{\r\n    return allocatedResource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setAllocatedResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAllocatedResource(Resource resource)\n{\r\n    this.allocatedResource = resource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getAssignedNode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeId getAssignedNode()\n{\r\n    return assignedNode;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setAssignedNode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAssignedNode(NodeId nodeId)\n{\r\n    this.assignedNode = nodeId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getPriority",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Priority getPriority()\n{\r\n    return priority;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setPriority",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setPriority(Priority priority)\n{\r\n    this.priority = priority;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getStartTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getStartTime()\n{\r\n    return startTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setStartTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setStartTime(long startTime)\n{\r\n    this.startTime = startTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getFinishTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getFinishTime()\n{\r\n    return finishTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setFinishTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setFinishTime(long finishTime)\n{\r\n    this.finishTime = finishTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getDiagnosticsInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDiagnosticsInfo()\n{\r\n    return diagnosticsInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setDiagnosticsInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDiagnosticsInfo(String diagnosticsInfo)\n{\r\n    this.diagnosticsInfo = diagnosticsInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getContainerExitStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getContainerExitStatus()\n{\r\n    return containerExitStatus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setContainerExitStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setContainerExitStatus(int containerExitStatus)\n{\r\n    this.containerExitStatus = containerExitStatus;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getContainerState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerState getContainerState()\n{\r\n    return containerState;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setContainerState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setContainerState(ContainerState containerState)\n{\r\n    this.containerState = containerState;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getExposedPorts",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, List<Map<String, String>>> getExposedPorts()\n{\r\n    return exposedPorts;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setExposedPorts",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setExposedPorts(Map<String, List<Map<String, String>>> ports)\n{\r\n    this.exposedPorts = ports;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "getApplicationAttemptId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationAttemptId getApplicationAttemptId()\n{\r\n    if (this.applicationAttemptId != null) {\r\n        return this.applicationAttemptId;\r\n    }\r\n    ApplicationAttemptFinishDataProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasApplicationAttemptId()) {\r\n        return null;\r\n    }\r\n    this.applicationAttemptId = convertFromProtoFormat(p.getApplicationAttemptId());\r\n    return this.applicationAttemptId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "setApplicationAttemptId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setApplicationAttemptId(ApplicationAttemptId applicationAttemptId)\n{\r\n    maybeInitBuilder();\r\n    if (applicationAttemptId == null) {\r\n        builder.clearApplicationAttemptId();\r\n    }\r\n    this.applicationAttemptId = applicationAttemptId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "getTrackingURL",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getTrackingURL()\n{\r\n    ApplicationAttemptFinishDataProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasTrackingUrl()) {\r\n        return null;\r\n    }\r\n    return p.getTrackingUrl();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "setTrackingURL",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setTrackingURL(String trackingURL)\n{\r\n    maybeInitBuilder();\r\n    if (trackingURL == null) {\r\n        builder.clearTrackingUrl();\r\n        return;\r\n    }\r\n    builder.setTrackingUrl(trackingURL);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "getDiagnosticsInfo",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getDiagnosticsInfo()\n{\r\n    ApplicationAttemptFinishDataProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasDiagnosticsInfo()) {\r\n        return null;\r\n    }\r\n    return p.getDiagnosticsInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "setDiagnosticsInfo",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setDiagnosticsInfo(String diagnosticsInfo)\n{\r\n    maybeInitBuilder();\r\n    if (diagnosticsInfo == null) {\r\n        builder.clearDiagnosticsInfo();\r\n        return;\r\n    }\r\n    builder.setDiagnosticsInfo(diagnosticsInfo);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "getFinalApplicationStatus",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "FinalApplicationStatus getFinalApplicationStatus()\n{\r\n    ApplicationAttemptFinishDataProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasFinalApplicationStatus()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getFinalApplicationStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "setFinalApplicationStatus",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setFinalApplicationStatus(FinalApplicationStatus finalApplicationStatus)\n{\r\n    maybeInitBuilder();\r\n    if (finalApplicationStatus == null) {\r\n        builder.clearFinalApplicationStatus();\r\n        return;\r\n    }\r\n    builder.setFinalApplicationStatus(convertToProtoFormat(finalApplicationStatus));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "getYarnApplicationAttemptState",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "YarnApplicationAttemptState getYarnApplicationAttemptState()\n{\r\n    ApplicationAttemptFinishDataProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasYarnApplicationAttemptState()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getYarnApplicationAttemptState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "setYarnApplicationAttemptState",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setYarnApplicationAttemptState(YarnApplicationAttemptState state)\n{\r\n    maybeInitBuilder();\r\n    if (state == null) {\r\n        builder.clearYarnApplicationAttemptState();\r\n        return;\r\n    }\r\n    builder.setYarnApplicationAttemptState(convertToProtoFormat(state));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationAttemptFinishDataProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.applicationAttemptId != null && !((ApplicationAttemptIdPBImpl) this.applicationAttemptId).getProto().equals(builder.getApplicationAttemptId())) {\r\n        builder.setApplicationAttemptId(convertToProtoFormat(this.applicationAttemptId));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ApplicationAttemptFinishDataProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationAttemptIdPBImpl convertFromProtoFormat(ApplicationAttemptIdProto applicationAttemptId)\n{\r\n    return new ApplicationAttemptIdPBImpl(applicationAttemptId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationAttemptIdProto convertToProtoFormat(ApplicationAttemptId applicationAttemptId)\n{\r\n    return ((ApplicationAttemptIdPBImpl) applicationAttemptId).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FinalApplicationStatus convertFromProtoFormat(FinalApplicationStatusProto finalApplicationStatus)\n{\r\n    return ProtoUtils.convertFromProtoFormat(finalApplicationStatus);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FinalApplicationStatusProto convertToProtoFormat(FinalApplicationStatus finalApplicationStatus)\n{\r\n    return ProtoUtils.convertToProtoFormat(finalApplicationStatus);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnApplicationAttemptStateProto convertToProtoFormat(YarnApplicationAttemptState state)\n{\r\n    return ProtoUtils.convertToProtoFormat(state);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnApplicationAttemptState convertFromProtoFormat(YarnApplicationAttemptStateProto yarnApplicationAttemptState)\n{\r\n    return ProtoUtils.convertFromProtoFormat(yarnApplicationAttemptState);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "content",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<? extends SubView> content()\n{\r\n    return ErrorsAndWarningsBlock.class;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "preHead",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void preHead(Page.HTML<__> html)\n{\r\n    commonPreHead(html);\r\n    String title = \"Errors and Warnings in the Application History Server\";\r\n    setTitle(title);\r\n    String tableId = \"messages\";\r\n    set(DATATABLES_ID, tableId);\r\n    set(initID(DATATABLES, tableId), tablesInit());\r\n    setTableStyles(html, tableId, \".message {width:50em}\", \".count {width:8em}\", \".lasttime {width:16em}\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "tablesInit",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String tablesInit()\n{\r\n    StringBuilder b = tableInit().append(\", aoColumnDefs: [\");\r\n    b.append(\"{'sType': 'string', 'aTargets': [ 0 ]}\").append(\", {'sType': 'string', 'bSearchable': true, 'aTargets': [ 1 ]}\").append(\", {'sType': 'numeric', 'bSearchable': false, 'aTargets': [ 2 ]}\").append(\", {'sType': 'date', 'aTargets': [ 3 ] }]\").append(\", aaSorting: [[3, 'desc']]}\");\r\n    return b.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "getApplicationAttemptId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationAttemptId getApplicationAttemptId()\n{\r\n    if (this.applicationAttemptId != null) {\r\n        return this.applicationAttemptId;\r\n    }\r\n    ApplicationAttemptStartDataProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasApplicationAttemptId()) {\r\n        return null;\r\n    }\r\n    this.applicationAttemptId = convertFromProtoFormat(p.getApplicationAttemptId());\r\n    return this.applicationAttemptId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "setApplicationAttemptId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setApplicationAttemptId(ApplicationAttemptId applicationAttemptId)\n{\r\n    maybeInitBuilder();\r\n    if (applicationAttemptId == null) {\r\n        builder.clearApplicationAttemptId();\r\n    }\r\n    this.applicationAttemptId = applicationAttemptId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "getHost",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getHost()\n{\r\n    ApplicationAttemptStartDataProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasHost()) {\r\n        return null;\r\n    }\r\n    return p.getHost();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "setHost",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setHost(String host)\n{\r\n    maybeInitBuilder();\r\n    if (host == null) {\r\n        builder.clearHost();\r\n        return;\r\n    }\r\n    builder.setHost(host);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "getRPCPort",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getRPCPort()\n{\r\n    ApplicationAttemptStartDataProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getRpcPort();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "setRPCPort",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setRPCPort(int rpcPort)\n{\r\n    maybeInitBuilder();\r\n    builder.setRpcPort(rpcPort);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "getMasterContainerId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerId getMasterContainerId()\n{\r\n    if (this.masterContainerId != null) {\r\n        return this.masterContainerId;\r\n    }\r\n    ApplicationAttemptStartDataProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasApplicationAttemptId()) {\r\n        return null;\r\n    }\r\n    this.masterContainerId = convertFromProtoFormat(p.getMasterContainerId());\r\n    return this.masterContainerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "setMasterContainerId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setMasterContainerId(ContainerId masterContainerId)\n{\r\n    maybeInitBuilder();\r\n    if (masterContainerId == null) {\r\n        builder.clearMasterContainerId();\r\n    }\r\n    this.masterContainerId = masterContainerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationAttemptStartDataProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.applicationAttemptId != null && !((ApplicationAttemptIdPBImpl) this.applicationAttemptId).getProto().equals(builder.getApplicationAttemptId())) {\r\n        builder.setApplicationAttemptId(convertToProtoFormat(this.applicationAttemptId));\r\n    }\r\n    if (this.masterContainerId != null && !((ContainerIdPBImpl) this.masterContainerId).getProto().equals(builder.getMasterContainerId())) {\r\n        builder.setMasterContainerId(convertToProtoFormat(this.masterContainerId));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ApplicationAttemptStartDataProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationAttemptIdPBImpl convertFromProtoFormat(ApplicationAttemptIdProto applicationAttemptId)\n{\r\n    return new ApplicationAttemptIdPBImpl(applicationAttemptId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationAttemptIdProto convertToProtoFormat(ApplicationAttemptId applicationAttemptId)\n{\r\n    return ((ApplicationAttemptIdPBImpl) applicationAttemptId).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerIdPBImpl convertFromProtoFormat(ContainerIdProto containerId)\n{\r\n    return new ContainerIdPBImpl(containerId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerIdProto convertToProtoFormat(ContainerId masterContainerId)\n{\r\n    return ((ContainerIdPBImpl) masterContainerId).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "preHead",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void preHead(Page.HTML<__> html)\n{\r\n    commonPreHead(html);\r\n    String appAttemptId = $(YarnWebParams.APPLICATION_ATTEMPT_ID);\r\n    set(TITLE, appAttemptId.isEmpty() ? \"Bad request: missing application attempt ID\" : join(\"Application Attempt \", $(YarnWebParams.APPLICATION_ATTEMPT_ID)));\r\n    set(DATATABLES_ID, \"containers\");\r\n    set(initID(DATATABLES, \"containers\"), WebPageUtils.containersTableInit());\r\n    setTableStyles(html, \"containers\", \".queue {width:6em}\", \".ui {width:8em}\");\r\n    set(YarnWebParams.WEB_UI_TYPE, YarnWebParams.APP_HISTORY_WEB_UI);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "content",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<? extends SubView> content()\n{\r\n    return AppAttemptBlock.class;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "getContainersTableColumnDefs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getContainersTableColumnDefs()\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    return sb.append(\"[\\n\").append(\"{'sType':'natural', 'aTargets': [0]\").append(\", 'mRender': parseHadoopID }]\").toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    serverHttpAddress = WebAppUtils.getHttpSchemePrefix(conf) + WebAppUtils.getAHSWebAppURLWithoutScheme(conf);\r\n    maxLoadedApplications = conf.getLong(YarnConfiguration.APPLICATION_HISTORY_MAX_APPS, YarnConfiguration.DEFAULT_APPLICATION_HISTORY_MAX_APPS);\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getApplication",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationReport getApplication(ApplicationId appId) throws YarnException, IOException\n{\r\n    return getApplication(appId, ApplicationReportField.ALL).appReport;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getApplications",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "Map<ApplicationId, ApplicationReport> getApplications(long appsNum, long appStartedTimeBegin, long appStartedTimeEnd) throws YarnException, IOException\n{\r\n    TimelineEntities entities = timelineDataManager.getEntities(ApplicationMetricsConstants.ENTITY_TYPE, null, null, appStartedTimeBegin, appStartedTimeEnd, null, null, appsNum == Long.MAX_VALUE ? this.maxLoadedApplications : appsNum, EnumSet.allOf(Field.class), UserGroupInformation.getLoginUser());\r\n    Map<ApplicationId, ApplicationReport> apps = new LinkedHashMap<ApplicationId, ApplicationReport>();\r\n    if (entities != null && entities.getEntities() != null) {\r\n        for (TimelineEntity entity : entities.getEntities()) {\r\n            try {\r\n                ApplicationReportExt app = generateApplicationReport(entity, ApplicationReportField.ALL);\r\n                apps.put(app.appReport.getApplicationId(), app.appReport);\r\n            } catch (Exception e) {\r\n                LOG.error(\"Error on generating application report for \" + entity.getEntityId(), e);\r\n            }\r\n        }\r\n    }\r\n    return apps;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getApplicationAttempts",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "Map<ApplicationAttemptId, ApplicationAttemptReport> getApplicationAttempts(ApplicationId appId) throws YarnException, IOException\n{\r\n    ApplicationReportExt app = getApplication(appId, ApplicationReportField.USER_AND_ACLS);\r\n    checkAccess(app);\r\n    TimelineEntities entities = timelineDataManager.getEntities(AppAttemptMetricsConstants.ENTITY_TYPE, new NameValuePair(AppAttemptMetricsConstants.PARENT_PRIMARY_FILTER, appId.toString()), null, null, null, null, null, Long.MAX_VALUE, EnumSet.allOf(Field.class), UserGroupInformation.getLoginUser());\r\n    Map<ApplicationAttemptId, ApplicationAttemptReport> appAttempts = new LinkedHashMap<ApplicationAttemptId, ApplicationAttemptReport>();\r\n    for (TimelineEntity entity : entities.getEntities()) {\r\n        ApplicationAttemptReport appAttempt = convertToApplicationAttemptReport(entity);\r\n        appAttempts.put(appAttempt.getApplicationAttemptId(), appAttempt);\r\n    }\r\n    return appAttempts;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getApplicationAttempt",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationAttemptReport getApplicationAttempt(ApplicationAttemptId appAttemptId) throws YarnException, IOException\n{\r\n    return getApplicationAttempt(appAttemptId, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getApplicationAttempt",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "ApplicationAttemptReport getApplicationAttempt(ApplicationAttemptId appAttemptId, boolean checkACLs) throws YarnException, IOException\n{\r\n    if (checkACLs) {\r\n        ApplicationReportExt app = getApplication(appAttemptId.getApplicationId(), ApplicationReportField.USER_AND_ACLS);\r\n        checkAccess(app);\r\n    }\r\n    TimelineEntity entity = timelineDataManager.getEntity(AppAttemptMetricsConstants.ENTITY_TYPE, appAttemptId.toString(), EnumSet.allOf(Field.class), UserGroupInformation.getLoginUser());\r\n    if (entity == null) {\r\n        throw new ApplicationAttemptNotFoundException(\"The entity for application attempt \" + appAttemptId + \" doesn't exist in the timeline store\");\r\n    } else {\r\n        return convertToApplicationAttemptReport(entity);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getContainer",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "ContainerReport getContainer(ContainerId containerId) throws YarnException, IOException\n{\r\n    ApplicationReportExt app = getApplication(containerId.getApplicationAttemptId().getApplicationId(), ApplicationReportField.USER_AND_ACLS);\r\n    checkAccess(app);\r\n    TimelineEntity entity = timelineDataManager.getEntity(ContainerMetricsConstants.ENTITY_TYPE, containerId.toString(), EnumSet.allOf(Field.class), UserGroupInformation.getLoginUser());\r\n    if (entity == null) {\r\n        throw new ContainerNotFoundException(\"The entity for container \" + containerId + \" doesn't exist in the timeline store\");\r\n    } else {\r\n        return convertToContainerReport(entity, serverHttpAddress, app.appReport.getUser());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getAMContainer",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerReport getAMContainer(ApplicationAttemptId appAttemptId) throws YarnException, IOException\n{\r\n    ApplicationAttemptReport appAttempt = getApplicationAttempt(appAttemptId, false);\r\n    return getContainer(appAttempt.getAMContainerId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getContainers",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "Map<ContainerId, ContainerReport> getContainers(ApplicationAttemptId appAttemptId) throws YarnException, IOException\n{\r\n    ApplicationReportExt app = getApplication(appAttemptId.getApplicationId(), ApplicationReportField.USER_AND_ACLS);\r\n    checkAccess(app);\r\n    TimelineEntities entities = timelineDataManager.getEntities(ContainerMetricsConstants.ENTITY_TYPE, new NameValuePair(ContainerMetricsConstants.PARENT_PRIMARIY_FILTER, appAttemptId.toString()), null, null, null, null, null, Long.MAX_VALUE, EnumSet.allOf(Field.class), UserGroupInformation.getLoginUser());\r\n    Map<ContainerId, ContainerReport> containers = new LinkedHashMap<ContainerId, ContainerReport>();\r\n    if (entities != null && entities.getEntities() != null) {\r\n        for (TimelineEntity entity : entities.getEntities()) {\r\n            ContainerReport container = convertToContainerReport(entity, serverHttpAddress, app.appReport.getUser());\r\n            containers.put(container.getContainerId(), container);\r\n        }\r\n    }\r\n    return containers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "convertToApplicationReport",
  "errType" : null,
  "containingMethodsNum" : 66,
  "sourceCodeText" : "ApplicationReportExt convertToApplicationReport(TimelineEntity entity, ApplicationReportField field)\n{\r\n    String user = null;\r\n    String queue = null;\r\n    String name = null;\r\n    String type = null;\r\n    boolean unmanagedApplication = false;\r\n    long createdTime = 0;\r\n    long launchTime = 0;\r\n    long submittedTime = 0;\r\n    long finishedTime = 0;\r\n    float progress = 0.0f;\r\n    int applicationPriority = 0;\r\n    ApplicationAttemptId latestApplicationAttemptId = null;\r\n    String diagnosticsInfo = null;\r\n    FinalApplicationStatus finalStatus = FinalApplicationStatus.UNDEFINED;\r\n    YarnApplicationState state = YarnApplicationState.ACCEPTED;\r\n    ApplicationResourceUsageReport appResources = null;\r\n    Set<String> appTags = null;\r\n    Map<ApplicationAccessType, String> appViewACLs = new HashMap<ApplicationAccessType, String>();\r\n    String appNodeLabelExpression = null;\r\n    String amNodeLabelExpression = null;\r\n    Map<String, Object> entityInfo = entity.getOtherInfo();\r\n    if (entityInfo != null) {\r\n        if (entityInfo.containsKey(ApplicationMetricsConstants.USER_ENTITY_INFO)) {\r\n            user = entityInfo.get(ApplicationMetricsConstants.USER_ENTITY_INFO).toString();\r\n        }\r\n        if (entityInfo.containsKey(ApplicationMetricsConstants.APP_VIEW_ACLS_ENTITY_INFO)) {\r\n            String appViewACLsStr = entityInfo.get(ApplicationMetricsConstants.APP_VIEW_ACLS_ENTITY_INFO).toString();\r\n            if (appViewACLsStr.length() > 0) {\r\n                appViewACLs.put(ApplicationAccessType.VIEW_APP, appViewACLsStr);\r\n            }\r\n        }\r\n        if (field == ApplicationReportField.USER_AND_ACLS) {\r\n            return new ApplicationReportExt(ApplicationReport.newInstance(ApplicationId.fromString(entity.getEntityId()), latestApplicationAttemptId, user, queue, name, null, -1, null, state, diagnosticsInfo, null, createdTime, submittedTime, 0, finishedTime, finalStatus, null, null, progress, type, null, appTags, unmanagedApplication, Priority.newInstance(applicationPriority), appNodeLabelExpression, amNodeLabelExpression), appViewACLs);\r\n        }\r\n        if (entityInfo.containsKey(ApplicationMetricsConstants.QUEUE_ENTITY_INFO)) {\r\n            queue = entityInfo.get(ApplicationMetricsConstants.QUEUE_ENTITY_INFO).toString();\r\n        }\r\n        if (entityInfo.containsKey(ApplicationMetricsConstants.NAME_ENTITY_INFO)) {\r\n            name = entityInfo.get(ApplicationMetricsConstants.NAME_ENTITY_INFO).toString();\r\n        }\r\n        if (entityInfo.containsKey(ApplicationMetricsConstants.TYPE_ENTITY_INFO)) {\r\n            type = entityInfo.get(ApplicationMetricsConstants.TYPE_ENTITY_INFO).toString();\r\n        }\r\n        if (entityInfo.containsKey(ApplicationMetricsConstants.TYPE_ENTITY_INFO)) {\r\n            type = entityInfo.get(ApplicationMetricsConstants.TYPE_ENTITY_INFO).toString();\r\n        }\r\n        if (entityInfo.containsKey(ApplicationMetricsConstants.UNMANAGED_APPLICATION_ENTITY_INFO)) {\r\n            unmanagedApplication = Boolean.parseBoolean(entityInfo.get(ApplicationMetricsConstants.UNMANAGED_APPLICATION_ENTITY_INFO).toString());\r\n        }\r\n        if (entityInfo.containsKey(ApplicationMetricsConstants.APPLICATION_PRIORITY_INFO)) {\r\n            applicationPriority = Integer.parseInt(entityInfo.get(ApplicationMetricsConstants.APPLICATION_PRIORITY_INFO).toString());\r\n        }\r\n        if (entityInfo.containsKey(ApplicationMetricsConstants.APP_NODE_LABEL_EXPRESSION)) {\r\n            appNodeLabelExpression = entityInfo.get(ApplicationMetricsConstants.APP_NODE_LABEL_EXPRESSION).toString();\r\n        }\r\n        if (entityInfo.containsKey(ApplicationMetricsConstants.AM_NODE_LABEL_EXPRESSION)) {\r\n            amNodeLabelExpression = entityInfo.get(ApplicationMetricsConstants.AM_NODE_LABEL_EXPRESSION).toString();\r\n        }\r\n        submittedTime = parseLong(entityInfo, ApplicationMetricsConstants.SUBMITTED_TIME_ENTITY_INFO);\r\n        if (entityInfo.containsKey(ApplicationMetricsConstants.APP_CPU_METRICS)) {\r\n            long vcoreSeconds = parseLong(entityInfo, ApplicationMetricsConstants.APP_CPU_METRICS);\r\n            long memorySeconds = parseLong(entityInfo, ApplicationMetricsConstants.APP_MEM_METRICS);\r\n            long preemptedMemorySeconds = parseLong(entityInfo, ApplicationMetricsConstants.APP_MEM_PREEMPT_METRICS);\r\n            long preemptedVcoreSeconds = parseLong(entityInfo, ApplicationMetricsConstants.APP_CPU_PREEMPT_METRICS);\r\n            Map<String, Long> resourceSecondsMap = new HashMap<>();\r\n            Map<String, Long> preemptedResoureSecondsMap = new HashMap<>();\r\n            resourceSecondsMap.put(ResourceInformation.MEMORY_MB.getName(), memorySeconds);\r\n            resourceSecondsMap.put(ResourceInformation.VCORES.getName(), vcoreSeconds);\r\n            preemptedResoureSecondsMap.put(ResourceInformation.MEMORY_MB.getName(), preemptedMemorySeconds);\r\n            preemptedResoureSecondsMap.put(ResourceInformation.VCORES.getName(), preemptedVcoreSeconds);\r\n            appResources = ApplicationResourceUsageReport.newInstance(0, 0, null, null, null, resourceSecondsMap, 0, 0, preemptedResoureSecondsMap);\r\n        }\r\n        if (entityInfo.containsKey(ApplicationMetricsConstants.APP_TAGS_INFO)) {\r\n            appTags = new HashSet<String>();\r\n            Object obj = entityInfo.get(ApplicationMetricsConstants.APP_TAGS_INFO);\r\n            if (obj != null && obj instanceof Collection<?>) {\r\n                for (Object o : (Collection<?>) obj) {\r\n                    if (o != null) {\r\n                        appTags.add(o.toString());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    List<TimelineEvent> events = entity.getEvents();\r\n    long updatedTimeStamp = 0L;\r\n    if (events != null) {\r\n        for (TimelineEvent event : events) {\r\n            if (event.getEventType().equals(ApplicationMetricsConstants.CREATED_EVENT_TYPE)) {\r\n                createdTime = event.getTimestamp();\r\n            } else if (event.getEventType().equals(ApplicationMetricsConstants.LAUNCHED_EVENT_TYPE)) {\r\n                launchTime = event.getTimestamp();\r\n            } else if (event.getEventType().equals(ApplicationMetricsConstants.UPDATED_EVENT_TYPE)) {\r\n                if (event.getTimestamp() > updatedTimeStamp) {\r\n                    updatedTimeStamp = event.getTimestamp();\r\n                } else {\r\n                    continue;\r\n                }\r\n                Map<String, Object> eventInfo = event.getEventInfo();\r\n                if (eventInfo == null) {\r\n                    continue;\r\n                }\r\n                applicationPriority = Integer.parseInt(eventInfo.get(ApplicationMetricsConstants.APPLICATION_PRIORITY_INFO).toString());\r\n                queue = eventInfo.get(ApplicationMetricsConstants.QUEUE_ENTITY_INFO).toString();\r\n            } else if (event.getEventType().equals(ApplicationMetricsConstants.STATE_UPDATED_EVENT_TYPE)) {\r\n                Map<String, Object> eventInfo = event.getEventInfo();\r\n                if (eventInfo == null) {\r\n                    continue;\r\n                }\r\n                if (eventInfo.containsKey(ApplicationMetricsConstants.STATE_EVENT_INFO)) {\r\n                    if (!Apps.isApplicationFinalState(state)) {\r\n                        state = YarnApplicationState.valueOf(eventInfo.get(ApplicationMetricsConstants.STATE_EVENT_INFO).toString());\r\n                    }\r\n                }\r\n            } else if (event.getEventType().equals(ApplicationMetricsConstants.FINISHED_EVENT_TYPE)) {\r\n                progress = 1.0F;\r\n                finishedTime = event.getTimestamp();\r\n                Map<String, Object> eventInfo = event.getEventInfo();\r\n                if (eventInfo == null) {\r\n                    continue;\r\n                }\r\n                if (eventInfo.containsKey(ApplicationMetricsConstants.LATEST_APP_ATTEMPT_EVENT_INFO)) {\r\n                    latestApplicationAttemptId = ApplicationAttemptId.fromString(eventInfo.get(ApplicationMetricsConstants.LATEST_APP_ATTEMPT_EVENT_INFO).toString());\r\n                }\r\n                if (eventInfo.containsKey(ApplicationMetricsConstants.DIAGNOSTICS_INFO_EVENT_INFO)) {\r\n                    diagnosticsInfo = eventInfo.get(ApplicationMetricsConstants.DIAGNOSTICS_INFO_EVENT_INFO).toString();\r\n                }\r\n                if (eventInfo.containsKey(ApplicationMetricsConstants.FINAL_STATUS_EVENT_INFO)) {\r\n                    finalStatus = FinalApplicationStatus.valueOf(eventInfo.get(ApplicationMetricsConstants.FINAL_STATUS_EVENT_INFO).toString());\r\n                }\r\n                if (eventInfo.containsKey(ApplicationMetricsConstants.STATE_EVENT_INFO)) {\r\n                    state = YarnApplicationState.valueOf(eventInfo.get(ApplicationMetricsConstants.STATE_EVENT_INFO).toString());\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return new ApplicationReportExt(ApplicationReport.newInstance(ApplicationId.fromString(entity.getEntityId()), latestApplicationAttemptId, user, queue, name, null, -1, null, state, diagnosticsInfo, null, createdTime, submittedTime, launchTime, finishedTime, finalStatus, appResources, null, progress, type, null, appTags, unmanagedApplication, Priority.newInstance(applicationPriority), appNodeLabelExpression, amNodeLabelExpression), appViewACLs);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "parseLong",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long parseLong(Map<String, Object> entityInfo, String infoKey)\n{\r\n    long result = 0;\r\n    Object infoValue = entityInfo.get(infoKey);\r\n    if (infoValue != null) {\r\n        result = Long.parseLong(infoValue.toString());\r\n    }\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "convertToApplicationAttemptReport",
  "errType" : null,
  "containingMethodsNum" : 22,
  "sourceCodeText" : "ApplicationAttemptReport convertToApplicationAttemptReport(TimelineEntity entity)\n{\r\n    String host = null;\r\n    int rpcPort = -1;\r\n    ContainerId amContainerId = null;\r\n    String trackingUrl = null;\r\n    String originalTrackingUrl = null;\r\n    String diagnosticsInfo = null;\r\n    YarnApplicationAttemptState state = null;\r\n    List<TimelineEvent> events = entity.getEvents();\r\n    if (events != null) {\r\n        for (TimelineEvent event : events) {\r\n            if (event.getEventType().equals(AppAttemptMetricsConstants.REGISTERED_EVENT_TYPE)) {\r\n                Map<String, Object> eventInfo = event.getEventInfo();\r\n                if (eventInfo == null) {\r\n                    continue;\r\n                }\r\n                if (eventInfo.containsKey(AppAttemptMetricsConstants.HOST_INFO)) {\r\n                    host = eventInfo.get(AppAttemptMetricsConstants.HOST_INFO).toString();\r\n                }\r\n                if (eventInfo.containsKey(AppAttemptMetricsConstants.RPC_PORT_INFO)) {\r\n                    rpcPort = (Integer) eventInfo.get(AppAttemptMetricsConstants.RPC_PORT_INFO);\r\n                }\r\n                if (eventInfo.containsKey(AppAttemptMetricsConstants.MASTER_CONTAINER_INFO)) {\r\n                    amContainerId = ContainerId.fromString(eventInfo.get(AppAttemptMetricsConstants.MASTER_CONTAINER_INFO).toString());\r\n                }\r\n            } else if (event.getEventType().equals(AppAttemptMetricsConstants.FINISHED_EVENT_TYPE)) {\r\n                Map<String, Object> eventInfo = event.getEventInfo();\r\n                if (eventInfo == null) {\r\n                    continue;\r\n                }\r\n                if (eventInfo.containsKey(AppAttemptMetricsConstants.TRACKING_URL_INFO)) {\r\n                    trackingUrl = eventInfo.get(AppAttemptMetricsConstants.TRACKING_URL_INFO).toString();\r\n                }\r\n                if (eventInfo.containsKey(AppAttemptMetricsConstants.ORIGINAL_TRACKING_URL_INFO)) {\r\n                    originalTrackingUrl = eventInfo.get(AppAttemptMetricsConstants.ORIGINAL_TRACKING_URL_INFO).toString();\r\n                }\r\n                if (eventInfo.containsKey(AppAttemptMetricsConstants.DIAGNOSTICS_INFO)) {\r\n                    diagnosticsInfo = eventInfo.get(AppAttemptMetricsConstants.DIAGNOSTICS_INFO).toString();\r\n                }\r\n                if (eventInfo.containsKey(AppAttemptMetricsConstants.STATE_INFO)) {\r\n                    state = YarnApplicationAttemptState.valueOf(eventInfo.get(AppAttemptMetricsConstants.STATE_INFO).toString());\r\n                }\r\n                if (eventInfo.containsKey(AppAttemptMetricsConstants.MASTER_CONTAINER_INFO)) {\r\n                    amContainerId = ContainerId.fromString(eventInfo.get(AppAttemptMetricsConstants.MASTER_CONTAINER_INFO).toString());\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return ApplicationAttemptReport.newInstance(ApplicationAttemptId.fromString(entity.getEntityId()), host, rpcPort, trackingUrl, originalTrackingUrl, diagnosticsInfo, state, amContainerId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "convertToContainerReport",
  "errType" : null,
  "containingMethodsNum" : 32,
  "sourceCodeText" : "ContainerReport convertToContainerReport(TimelineEntity entity, String serverHttpAddress, String user)\n{\r\n    int allocatedMem = 0;\r\n    int allocatedVcore = 0;\r\n    String allocatedHost = null;\r\n    int allocatedPort = -1;\r\n    int allocatedPriority = 0;\r\n    long createdTime = 0;\r\n    long finishedTime = 0;\r\n    String diagnosticsInfo = null;\r\n    int exitStatus = ContainerExitStatus.INVALID;\r\n    ContainerState state = null;\r\n    String nodeHttpAddress = null;\r\n    Map<String, List<Map<String, String>>> exposedPorts = null;\r\n    Map<String, Object> entityInfo = entity.getOtherInfo();\r\n    if (entityInfo != null) {\r\n        if (entityInfo.containsKey(ContainerMetricsConstants.ALLOCATED_MEMORY_INFO)) {\r\n            allocatedMem = (Integer) entityInfo.get(ContainerMetricsConstants.ALLOCATED_MEMORY_INFO);\r\n        }\r\n        if (entityInfo.containsKey(ContainerMetricsConstants.ALLOCATED_VCORE_INFO)) {\r\n            allocatedVcore = (Integer) entityInfo.get(ContainerMetricsConstants.ALLOCATED_VCORE_INFO);\r\n        }\r\n        if (entityInfo.containsKey(ContainerMetricsConstants.ALLOCATED_HOST_INFO)) {\r\n            allocatedHost = entityInfo.get(ContainerMetricsConstants.ALLOCATED_HOST_INFO).toString();\r\n        }\r\n        if (entityInfo.containsKey(ContainerMetricsConstants.ALLOCATED_PORT_INFO)) {\r\n            allocatedPort = (Integer) entityInfo.get(ContainerMetricsConstants.ALLOCATED_PORT_INFO);\r\n        }\r\n        if (entityInfo.containsKey(ContainerMetricsConstants.ALLOCATED_PRIORITY_INFO)) {\r\n            allocatedPriority = (Integer) entityInfo.get(ContainerMetricsConstants.ALLOCATED_PRIORITY_INFO);\r\n        }\r\n        if (entityInfo.containsKey(ContainerMetricsConstants.ALLOCATED_HOST_HTTP_ADDRESS_INFO)) {\r\n            nodeHttpAddress = (String) entityInfo.get(ContainerMetricsConstants.ALLOCATED_HOST_HTTP_ADDRESS_INFO);\r\n        }\r\n        if (entityInfo.containsKey(ContainerMetricsConstants.ALLOCATED_EXPOSED_PORTS)) {\r\n            exposedPorts = (Map<String, List<Map<String, String>>>) entityInfo.get(ContainerMetricsConstants.ALLOCATED_EXPOSED_PORTS);\r\n        }\r\n    }\r\n    List<TimelineEvent> events = entity.getEvents();\r\n    if (events != null) {\r\n        for (TimelineEvent event : events) {\r\n            if (event.getEventType().equals(ContainerMetricsConstants.CREATED_EVENT_TYPE)) {\r\n                createdTime = event.getTimestamp();\r\n            } else if (event.getEventType().equals(ContainerMetricsConstants.FINISHED_EVENT_TYPE)) {\r\n                finishedTime = event.getTimestamp();\r\n                Map<String, Object> eventInfo = event.getEventInfo();\r\n                if (eventInfo == null) {\r\n                    continue;\r\n                }\r\n                if (eventInfo.containsKey(ContainerMetricsConstants.DIAGNOSTICS_INFO)) {\r\n                    diagnosticsInfo = eventInfo.get(ContainerMetricsConstants.DIAGNOSTICS_INFO).toString();\r\n                }\r\n                if (eventInfo.containsKey(ContainerMetricsConstants.EXIT_STATUS_INFO)) {\r\n                    exitStatus = (Integer) eventInfo.get(ContainerMetricsConstants.EXIT_STATUS_INFO);\r\n                }\r\n                if (eventInfo.containsKey(ContainerMetricsConstants.STATE_INFO)) {\r\n                    state = ContainerState.valueOf(eventInfo.get(ContainerMetricsConstants.STATE_INFO).toString());\r\n                }\r\n            }\r\n        }\r\n    }\r\n    ContainerId containerId = ContainerId.fromString(entity.getEntityId());\r\n    String logUrl = null;\r\n    NodeId allocatedNode = null;\r\n    if (allocatedHost != null) {\r\n        allocatedNode = NodeId.newInstance(allocatedHost, allocatedPort);\r\n        logUrl = WebAppUtils.getAggregatedLogURL(serverHttpAddress, allocatedNode.toString(), containerId.toString(), containerId.toString(), user);\r\n    }\r\n    ContainerReport container = ContainerReport.newInstance(ContainerId.fromString(entity.getEntityId()), Resource.newInstance(allocatedMem, allocatedVcore), allocatedNode, Priority.newInstance(allocatedPriority), createdTime, finishedTime, diagnosticsInfo, logUrl, exitStatus, state, nodeHttpAddress);\r\n    container.setExposedPorts(exposedPorts);\r\n    return container;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "generateApplicationReport",
  "errType" : [ "AuthorizationException|ApplicationAttemptNotFoundException" ],
  "containingMethodsNum" : 24,
  "sourceCodeText" : "ApplicationReportExt generateApplicationReport(TimelineEntity entity, ApplicationReportField field) throws YarnException, IOException\n{\r\n    ApplicationReportExt app = convertToApplicationReport(entity, field);\r\n    if (field == ApplicationReportField.USER_AND_ACLS) {\r\n        return app;\r\n    }\r\n    try {\r\n        checkAccess(app);\r\n        if (app.appReport.getCurrentApplicationAttemptId() != null) {\r\n            ApplicationAttemptReport appAttempt = getApplicationAttempt(app.appReport.getCurrentApplicationAttemptId(), false);\r\n            app.appReport.setHost(appAttempt.getHost());\r\n            app.appReport.setRpcPort(appAttempt.getRpcPort());\r\n            app.appReport.setTrackingUrl(appAttempt.getTrackingUrl());\r\n            app.appReport.setOriginalTrackingUrl(appAttempt.getOriginalTrackingUrl());\r\n        }\r\n    } catch (AuthorizationException | ApplicationAttemptNotFoundException e) {\r\n        if (e instanceof AuthorizationException) {\r\n            LOG.warn(\"Failed to authorize when generating application report for \" + app.appReport.getApplicationId() + \". Use a placeholder for its latest attempt id. \", e);\r\n        } else {\r\n            LOG.info(\"No application attempt found for \" + app.appReport.getApplicationId() + \". Use a placeholder for its latest attempt id. \", e);\r\n        }\r\n        app.appReport.setDiagnostics(null);\r\n        app.appReport.setCurrentApplicationAttemptId(null);\r\n    }\r\n    if (app.appReport.getCurrentApplicationAttemptId() == null) {\r\n        app.appReport.setCurrentApplicationAttemptId(ApplicationAttemptId.newInstance(app.appReport.getApplicationId(), -1));\r\n    }\r\n    if (app.appReport.getHost() == null) {\r\n        app.appReport.setHost(UNAVAILABLE);\r\n    }\r\n    if (app.appReport.getRpcPort() < 0) {\r\n        app.appReport.setRpcPort(-1);\r\n    }\r\n    if (app.appReport.getTrackingUrl() == null) {\r\n        app.appReport.setTrackingUrl(UNAVAILABLE);\r\n    }\r\n    if (app.appReport.getOriginalTrackingUrl() == null) {\r\n        app.appReport.setOriginalTrackingUrl(UNAVAILABLE);\r\n    }\r\n    if (app.appReport.getDiagnostics() == null) {\r\n        app.appReport.setDiagnostics(\"\");\r\n    }\r\n    return app;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getApplication",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationReportExt getApplication(ApplicationId appId, ApplicationReportField field) throws YarnException, IOException\n{\r\n    TimelineEntity entity = timelineDataManager.getEntity(ApplicationMetricsConstants.ENTITY_TYPE, appId.toString(), EnumSet.allOf(Field.class), UserGroupInformation.getLoginUser());\r\n    if (entity == null) {\r\n        throw new ApplicationNotFoundException(\"The entity for application \" + appId + \" doesn't exist in the timeline store\");\r\n    } else {\r\n        return generateApplicationReport(entity, field);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "checkAccess",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void checkAccess(ApplicationReportExt app) throws YarnException, IOException\n{\r\n    if (app.appViewACLs != null) {\r\n        aclsManager.addApplication(app.appReport.getApplicationId(), app.appViewACLs);\r\n        try {\r\n            if (!aclsManager.checkAccess(UserGroupInformation.getCurrentUser(), ApplicationAccessType.VIEW_APP, app.appReport.getUser(), app.appReport.getApplicationId())) {\r\n                throw new AuthorizationException(\"User \" + UserGroupInformation.getCurrentUser().getShortUserName() + \" does not have privilege to see this application \" + app.appReport.getApplicationId());\r\n            }\r\n        } finally {\r\n            aclsManager.removeApplication(app.appReport.getApplicationId());\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "ContainerFinishData newInstance(ContainerId containerId, long finishTime, String diagnosticsInfo, int containerExitCode, ContainerState containerState)\n{\r\n    ContainerFinishData containerFD = Records.newRecord(ContainerFinishData.class);\r\n    containerFD.setContainerId(containerId);\r\n    containerFD.setFinishTime(finishTime);\r\n    containerFD.setDiagnosticsInfo(diagnosticsInfo);\r\n    containerFD.setContainerExitStatus(containerExitCode);\r\n    containerFD.setContainerState(containerState);\r\n    return containerFD;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerId getContainerId()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setContainerId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setContainerId(ContainerId containerId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getFinishTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getFinishTime()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setFinishTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setFinishTime(long finishTime)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getDiagnosticsInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDiagnosticsInfo()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setDiagnosticsInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDiagnosticsInfo(String diagnosticsInfo)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getContainerExitStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getContainerExitStatus()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setContainerExitStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setContainerExitStatus(int containerExitStatus)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getContainerState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerState getContainerState()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setContainerState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setContainerState(ContainerState containerState)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    metrics = TimelineDataManagerMetrics.create();\r\n    TimelineDomain domain = store.getDomain(\"DEFAULT\");\r\n    if (domain == null) {\r\n        domain = new TimelineDomain();\r\n        domain.setId(DEFAULT_DOMAIN_ID);\r\n        domain.setDescription(\"System Default Domain\");\r\n        domain.setOwner(UserGroupInformation.getCurrentUser().getShortUserName());\r\n        domain.setReaders(\"*\");\r\n        domain.setWriters(\"*\");\r\n        store.put(domain);\r\n    }\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getEntities",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "TimelineEntities getEntities(String entityType, NameValuePair primaryFilter, Collection<NameValuePair> secondaryFilter, Long windowStart, Long windowEnd, String fromId, Long fromTs, Long limit, EnumSet<Field> fields, UserGroupInformation callerUGI) throws YarnException, IOException\n{\r\n    long startTime = Time.monotonicNow();\r\n    metrics.incrGetEntitiesOps();\r\n    try {\r\n        TimelineEntities entities = doGetEntities(entityType, primaryFilter, secondaryFilter, windowStart, windowEnd, fromId, fromTs, limit, fields, callerUGI);\r\n        metrics.incrGetEntitiesTotal(entities.getEntities().size());\r\n        return entities;\r\n    } finally {\r\n        metrics.addGetEntitiesTime(Time.monotonicNow() - startTime);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "doGetEntities",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineEntities doGetEntities(String entityType, NameValuePair primaryFilter, Collection<NameValuePair> secondaryFilter, Long windowStart, Long windowEnd, String fromId, Long fromTs, Long limit, EnumSet<Field> fields, UserGroupInformation callerUGI) throws YarnException, IOException\n{\r\n    TimelineEntities entities = null;\r\n    entities = store.getEntities(entityType, limit, windowStart, windowEnd, fromId, fromTs, primaryFilter, secondaryFilter, fields, new CheckAclImpl(callerUGI));\r\n    if (entities == null) {\r\n        return new TimelineEntities();\r\n    }\r\n    return entities;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getEntity",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "TimelineEntity getEntity(String entityType, String entityId, EnumSet<Field> fields, UserGroupInformation callerUGI) throws YarnException, IOException\n{\r\n    long startTime = Time.monotonicNow();\r\n    metrics.incrGetEntityOps();\r\n    try {\r\n        return doGetEntity(entityType, entityId, fields, callerUGI);\r\n    } finally {\r\n        metrics.addGetEntityTime(Time.monotonicNow() - startTime);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "doGetEntity",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "TimelineEntity doGetEntity(String entityType, String entityId, EnumSet<Field> fields, UserGroupInformation callerUGI) throws YarnException, IOException\n{\r\n    TimelineEntity entity = null;\r\n    entity = store.getEntity(entityId, entityType, fields);\r\n    if (entity != null) {\r\n        addDefaultDomainIdIfAbsent(entity);\r\n        if (!timelineACLsManager.checkAccess(callerUGI, ApplicationAccessType.VIEW_APP, entity)) {\r\n            final String user = callerUGI != null ? callerUGI.getShortUserName() : null;\r\n            throw new YarnException(user + \" is not allowed to get the timeline entity \" + \"{ id: \" + entity.getEntityId() + \", type: \" + entity.getEntityType() + \" }.\");\r\n        }\r\n    }\r\n    return entity;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getEvents",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "TimelineEvents getEvents(String entityType, SortedSet<String> entityIds, SortedSet<String> eventTypes, Long windowStart, Long windowEnd, Long limit, UserGroupInformation callerUGI) throws YarnException, IOException\n{\r\n    long startTime = Time.monotonicNow();\r\n    metrics.incrGetEventsOps();\r\n    try {\r\n        TimelineEvents events = doGetEvents(entityType, entityIds, eventTypes, windowStart, windowEnd, limit, callerUGI);\r\n        metrics.incrGetEventsTotal(events.getAllEvents().size());\r\n        return events;\r\n    } finally {\r\n        metrics.addGetEventsTime(Time.monotonicNow() - startTime);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "doGetEvents",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "TimelineEvents doGetEvents(String entityType, SortedSet<String> entityIds, SortedSet<String> eventTypes, Long windowStart, Long windowEnd, Long limit, UserGroupInformation callerUGI) throws YarnException, IOException\n{\r\n    TimelineEvents events = null;\r\n    events = store.getEntityTimelines(entityType, entityIds, limit, windowStart, windowEnd, eventTypes);\r\n    if (events != null) {\r\n        Iterator<TimelineEvents.EventsOfOneEntity> eventsItr = events.getAllEvents().iterator();\r\n        while (eventsItr.hasNext()) {\r\n            TimelineEvents.EventsOfOneEntity eventsOfOneEntity = eventsItr.next();\r\n            try {\r\n                TimelineEntity entity = store.getEntity(eventsOfOneEntity.getEntityId(), eventsOfOneEntity.getEntityType(), EnumSet.of(Field.PRIMARY_FILTERS));\r\n                addDefaultDomainIdIfAbsent(entity);\r\n                if (!timelineACLsManager.checkAccess(callerUGI, ApplicationAccessType.VIEW_APP, entity)) {\r\n                    eventsItr.remove();\r\n                }\r\n            } catch (Exception e) {\r\n                LOG.warn(\"Error when verifying access for user \" + callerUGI + \" on the events of the timeline entity \" + new EntityIdentifier(eventsOfOneEntity.getEntityId(), eventsOfOneEntity.getEntityType()), e);\r\n                eventsItr.remove();\r\n            }\r\n        }\r\n    }\r\n    if (events == null) {\r\n        return new TimelineEvents();\r\n    }\r\n    return events;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "postEntities",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "TimelinePutResponse postEntities(TimelineEntities entities, UserGroupInformation callerUGI) throws YarnException, IOException\n{\r\n    long startTime = Time.monotonicNow();\r\n    metrics.incrPostEntitiesOps();\r\n    try {\r\n        return doPostEntities(entities, callerUGI);\r\n    } finally {\r\n        metrics.addPostEntitiesTime(Time.monotonicNow() - startTime);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "doPostEntities",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 26,
  "sourceCodeText" : "TimelinePutResponse doPostEntities(TimelineEntities entities, UserGroupInformation callerUGI) throws YarnException, IOException\n{\r\n    if (entities == null) {\r\n        return new TimelinePutResponse();\r\n    }\r\n    metrics.incrPostEntitiesTotal(entities.getEntities().size());\r\n    TimelineEntities entitiesToPut = new TimelineEntities();\r\n    List<TimelinePutResponse.TimelinePutError> errors = new ArrayList<TimelinePutResponse.TimelinePutError>();\r\n    for (TimelineEntity entity : entities.getEntities()) {\r\n        if (entity.getDomainId() == null || entity.getDomainId().length() == 0) {\r\n            entity.setDomainId(DEFAULT_DOMAIN_ID);\r\n        }\r\n        if (entity.getEntityId() == null || entity.getEntityType() == null) {\r\n            throw new BadRequestException(\"Incomplete entity without entity\" + \" id/type\");\r\n        }\r\n        TimelineEntity existingEntity = null;\r\n        try {\r\n            existingEntity = store.getEntity(entity.getEntityId(), entity.getEntityType(), EnumSet.of(Field.PRIMARY_FILTERS));\r\n            if (existingEntity != null) {\r\n                addDefaultDomainIdIfAbsent(existingEntity);\r\n                if (!existingEntity.getDomainId().equals(entity.getDomainId())) {\r\n                    throw new YarnException(\"The domain of the timeline entity \" + \"{ id: \" + entity.getEntityId() + \", type: \" + entity.getEntityType() + \" } is not allowed to be changed from \" + existingEntity.getDomainId() + \" to \" + entity.getDomainId());\r\n                }\r\n            }\r\n            if (!timelineACLsManager.checkAccess(callerUGI, ApplicationAccessType.MODIFY_APP, entity)) {\r\n                throw new YarnException(callerUGI + \" is not allowed to put the timeline entity \" + \"{ id: \" + entity.getEntityId() + \", type: \" + entity.getEntityType() + \" } into the domain \" + entity.getDomainId() + \".\");\r\n            }\r\n        } catch (Exception e) {\r\n            LOG.warn(\"Skip the timeline entity: { id: \" + entity.getEntityId() + \", type: \" + entity.getEntityType() + \" }\", e);\r\n            TimelinePutResponse.TimelinePutError error = new TimelinePutResponse.TimelinePutError();\r\n            error.setEntityId(entity.getEntityId());\r\n            error.setEntityType(entity.getEntityType());\r\n            error.setErrorCode(TimelinePutResponse.TimelinePutError.ACCESS_DENIED);\r\n            errors.add(error);\r\n            continue;\r\n        }\r\n        entitiesToPut.addEntity(entity);\r\n    }\r\n    TimelinePutResponse response = store.put(entitiesToPut);\r\n    response.addErrors(errors);\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "putDomain",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void putDomain(TimelineDomain domain, UserGroupInformation callerUGI) throws YarnException, IOException\n{\r\n    long startTime = Time.monotonicNow();\r\n    metrics.incrPutDomainOps();\r\n    try {\r\n        doPutDomain(domain, callerUGI);\r\n    } finally {\r\n        metrics.addPutDomainTime(Time.monotonicNow() - startTime);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "doPutDomain",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void doPutDomain(TimelineDomain domain, UserGroupInformation callerUGI) throws YarnException, IOException\n{\r\n    TimelineDomain existingDomain = store.getDomain(domain.getId());\r\n    if (existingDomain != null) {\r\n        if (!timelineACLsManager.checkAccess(callerUGI, existingDomain)) {\r\n            throw new YarnException(callerUGI.getShortUserName() + \" is not allowed to override an existing domain \" + existingDomain.getId());\r\n        }\r\n        domain.setOwner(existingDomain.getOwner());\r\n    }\r\n    store.put(domain);\r\n    if (existingDomain != null) {\r\n        timelineACLsManager.replaceIfExist(domain);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getDomain",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "TimelineDomain getDomain(String domainId, UserGroupInformation callerUGI) throws YarnException, IOException\n{\r\n    long startTime = Time.monotonicNow();\r\n    metrics.incrGetDomainOps();\r\n    try {\r\n        return doGetDomain(domainId, callerUGI);\r\n    } finally {\r\n        metrics.addGetDomainTime(Time.monotonicNow() - startTime);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "doGetDomain",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "TimelineDomain doGetDomain(String domainId, UserGroupInformation callerUGI) throws YarnException, IOException\n{\r\n    TimelineDomain domain = store.getDomain(domainId);\r\n    if (domain != null) {\r\n        if (timelineACLsManager.checkAccess(callerUGI, domain)) {\r\n            return domain;\r\n        }\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getDomains",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "TimelineDomains getDomains(String owner, UserGroupInformation callerUGI) throws YarnException, IOException\n{\r\n    long startTime = Time.monotonicNow();\r\n    metrics.incrGetDomainsOps();\r\n    try {\r\n        TimelineDomains domains = doGetDomains(owner, callerUGI);\r\n        metrics.incrGetDomainsTotal(domains.getDomains().size());\r\n        return domains;\r\n    } finally {\r\n        metrics.addGetDomainsTime(Time.monotonicNow() - startTime);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "doGetDomains",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "TimelineDomains doGetDomains(String owner, UserGroupInformation callerUGI) throws YarnException, IOException\n{\r\n    TimelineDomains domains = store.getDomains(owner);\r\n    boolean hasAccess = true;\r\n    if (domains.getDomains().size() > 0) {\r\n        hasAccess = timelineACLsManager.checkAccess(callerUGI, domains.getDomains().get(0));\r\n    }\r\n    if (hasAccess) {\r\n        return domains;\r\n    } else {\r\n        return new TimelineDomains();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "addDefaultDomainIdIfAbsent",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void addDefaultDomainIdIfAbsent(TimelineEntity entity)\n{\r\n    if (entity.getDomainId() == null) {\r\n        entity.setDomainId(DEFAULT_DOMAIN_ID);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getAllApplications",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<ApplicationId, ApplicationHistoryData> getAllApplications()\n{\r\n    return new HashMap<ApplicationId, ApplicationHistoryData>(applicationData);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getApplication",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationHistoryData getApplication(ApplicationId appId)\n{\r\n    return applicationData.get(appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getApplicationAttempts",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Map<ApplicationAttemptId, ApplicationAttemptHistoryData> getApplicationAttempts(ApplicationId appId)\n{\r\n    ConcurrentMap<ApplicationAttemptId, ApplicationAttemptHistoryData> subMap = applicationAttemptData.get(appId);\r\n    if (subMap == null) {\r\n        return Collections.<ApplicationAttemptId, ApplicationAttemptHistoryData>emptyMap();\r\n    } else {\r\n        return new HashMap<ApplicationAttemptId, ApplicationAttemptHistoryData>(subMap);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getApplicationAttempt",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationAttemptHistoryData getApplicationAttempt(ApplicationAttemptId appAttemptId)\n{\r\n    ConcurrentMap<ApplicationAttemptId, ApplicationAttemptHistoryData> subMap = applicationAttemptData.get(appAttemptId.getApplicationId());\r\n    if (subMap == null) {\r\n        return null;\r\n    } else {\r\n        return subMap.get(appAttemptId);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getAMContainer",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ContainerHistoryData getAMContainer(ApplicationAttemptId appAttemptId)\n{\r\n    ApplicationAttemptHistoryData appAttempt = getApplicationAttempt(appAttemptId);\r\n    if (appAttempt == null || appAttempt.getMasterContainerId() == null) {\r\n        return null;\r\n    } else {\r\n        return getContainer(appAttempt.getMasterContainerId());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getContainer",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerHistoryData getContainer(ContainerId containerId)\n{\r\n    Map<ContainerId, ContainerHistoryData> subMap = containerData.get(containerId.getApplicationAttemptId());\r\n    if (subMap == null) {\r\n        return null;\r\n    } else {\r\n        return subMap.get(containerId);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Map<ContainerId, ContainerHistoryData> getContainers(ApplicationAttemptId appAttemptId) throws IOException\n{\r\n    ConcurrentMap<ContainerId, ContainerHistoryData> subMap = containerData.get(appAttemptId);\r\n    if (subMap == null) {\r\n        return Collections.<ContainerId, ContainerHistoryData>emptyMap();\r\n    } else {\r\n        return new HashMap<ContainerId, ContainerHistoryData>(subMap);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "applicationStarted",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void applicationStarted(ApplicationStartData appStart) throws IOException\n{\r\n    ApplicationHistoryData oldData = applicationData.putIfAbsent(appStart.getApplicationId(), ApplicationHistoryData.newInstance(appStart.getApplicationId(), appStart.getApplicationName(), appStart.getApplicationType(), appStart.getQueue(), appStart.getUser(), appStart.getSubmitTime(), appStart.getStartTime(), Long.MAX_VALUE, null, null, null));\r\n    if (oldData != null) {\r\n        throw new IOException(\"The start information of application \" + appStart.getApplicationId() + \" is already stored.\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "applicationFinished",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void applicationFinished(ApplicationFinishData appFinish) throws IOException\n{\r\n    ApplicationHistoryData data = applicationData.get(appFinish.getApplicationId());\r\n    if (data == null) {\r\n        throw new IOException(\"The finish information of application \" + appFinish.getApplicationId() + \" is stored before the start\" + \" information.\");\r\n    }\r\n    if (data.getYarnApplicationState() != null) {\r\n        throw new IOException(\"The finish information of application \" + appFinish.getApplicationId() + \" is already stored.\");\r\n    }\r\n    data.setFinishTime(appFinish.getFinishTime());\r\n    data.setDiagnosticsInfo(appFinish.getDiagnosticsInfo());\r\n    data.setFinalApplicationStatus(appFinish.getFinalApplicationStatus());\r\n    data.setYarnApplicationState(appFinish.getYarnApplicationState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "applicationAttemptStarted",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void applicationAttemptStarted(ApplicationAttemptStartData appAttemptStart) throws IOException\n{\r\n    ConcurrentMap<ApplicationAttemptId, ApplicationAttemptHistoryData> subMap = getSubMap(appAttemptStart.getApplicationAttemptId().getApplicationId());\r\n    ApplicationAttemptHistoryData oldData = subMap.putIfAbsent(appAttemptStart.getApplicationAttemptId(), ApplicationAttemptHistoryData.newInstance(appAttemptStart.getApplicationAttemptId(), appAttemptStart.getHost(), appAttemptStart.getRPCPort(), appAttemptStart.getMasterContainerId(), null, null, null, null));\r\n    if (oldData != null) {\r\n        throw new IOException(\"The start information of application attempt \" + appAttemptStart.getApplicationAttemptId() + \" is already stored.\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "applicationAttemptFinished",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void applicationAttemptFinished(ApplicationAttemptFinishData appAttemptFinish) throws IOException\n{\r\n    ConcurrentMap<ApplicationAttemptId, ApplicationAttemptHistoryData> subMap = getSubMap(appAttemptFinish.getApplicationAttemptId().getApplicationId());\r\n    ApplicationAttemptHistoryData data = subMap.get(appAttemptFinish.getApplicationAttemptId());\r\n    if (data == null) {\r\n        throw new IOException(\"The finish information of application attempt \" + appAttemptFinish.getApplicationAttemptId() + \" is stored before\" + \" the start information.\");\r\n    }\r\n    if (data.getYarnApplicationAttemptState() != null) {\r\n        throw new IOException(\"The finish information of application attempt \" + appAttemptFinish.getApplicationAttemptId() + \" is already stored.\");\r\n    }\r\n    data.setTrackingURL(appAttemptFinish.getTrackingURL());\r\n    data.setDiagnosticsInfo(appAttemptFinish.getDiagnosticsInfo());\r\n    data.setFinalApplicationStatus(appAttemptFinish.getFinalApplicationStatus());\r\n    data.setYarnApplicationAttemptState(appAttemptFinish.getYarnApplicationAttemptState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getSubMap",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ConcurrentMap<ApplicationAttemptId, ApplicationAttemptHistoryData> getSubMap(ApplicationId appId)\n{\r\n    applicationAttemptData.putIfAbsent(appId, new ConcurrentHashMap<ApplicationAttemptId, ApplicationAttemptHistoryData>());\r\n    return applicationAttemptData.get(appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "containerStarted",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void containerStarted(ContainerStartData containerStart) throws IOException\n{\r\n    ConcurrentMap<ContainerId, ContainerHistoryData> subMap = getSubMap(containerStart.getContainerId().getApplicationAttemptId());\r\n    ContainerHistoryData oldData = subMap.putIfAbsent(containerStart.getContainerId(), ContainerHistoryData.newInstance(containerStart.getContainerId(), containerStart.getAllocatedResource(), containerStart.getAssignedNode(), containerStart.getPriority(), containerStart.getStartTime(), Long.MAX_VALUE, null, Integer.MAX_VALUE, null));\r\n    if (oldData != null) {\r\n        throw new IOException(\"The start information of container \" + containerStart.getContainerId() + \" is already stored.\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "containerFinished",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void containerFinished(ContainerFinishData containerFinish) throws IOException\n{\r\n    ConcurrentMap<ContainerId, ContainerHistoryData> subMap = getSubMap(containerFinish.getContainerId().getApplicationAttemptId());\r\n    ContainerHistoryData data = subMap.get(containerFinish.getContainerId());\r\n    if (data == null) {\r\n        throw new IOException(\"The finish information of container \" + containerFinish.getContainerId() + \" is stored before\" + \" the start information.\");\r\n    }\r\n    if (data.getContainerState() != null) {\r\n        throw new IOException(\"The finish information of container \" + containerFinish.getContainerId() + \" is already stored.\");\r\n    }\r\n    data.setFinishTime(containerFinish.getFinishTime());\r\n    data.setDiagnosticsInfo(containerFinish.getDiagnosticsInfo());\r\n    data.setContainerExitStatus(containerFinish.getContainerExitStatus());\r\n    data.setContainerState(containerFinish.getContainerState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getSubMap",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ConcurrentMap<ContainerId, ContainerHistoryData> getSubMap(ApplicationAttemptId appAttemptId)\n{\r\n    containerData.putIfAbsent(appAttemptId, new ConcurrentHashMap<ContainerId, ContainerHistoryData>());\r\n    return containerData.get(appAttemptId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "getContext",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "JAXBContext getContext(Class<?> objectType)\n{\r\n    return (types.contains(objectType)) ? context : null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "about",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "TimelineAbout about(@Context HttpServletRequest req, @Context HttpServletResponse res)\n{\r\n    initForReadableEndpoints(res);\r\n    return TimelineUtils.createTimelineAbout(\"Generic History Service API\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "get",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AppsInfo get(@Context HttpServletRequest req, @Context HttpServletResponse res)\n{\r\n    return getApps(req, res, null, Collections.<String>emptySet(), null, null, null, null, null, null, null, null, null, Collections.<String>emptySet());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "getApps",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "AppsInfo getApps(@Context HttpServletRequest req, @Context HttpServletResponse res, @QueryParam(\"state\") String stateQuery, @QueryParam(\"states\") Set<String> statesQuery, @QueryParam(\"finalStatus\") String finalStatusQuery, @QueryParam(\"user\") String userQuery, @QueryParam(\"queue\") String queueQuery, @QueryParam(\"limit\") String count, @QueryParam(\"startedTimeBegin\") String startedBegin, @QueryParam(\"startedTimeEnd\") String startedEnd, @QueryParam(\"finishedTimeBegin\") String finishBegin, @QueryParam(\"finishedTimeEnd\") String finishEnd, @QueryParam(\"name\") String name, @QueryParam(\"applicationTypes\") Set<String> applicationTypes)\n{\r\n    initForReadableEndpoints(res);\r\n    validateStates(stateQuery, statesQuery);\r\n    return super.getApps(req, res, stateQuery, statesQuery, finalStatusQuery, userQuery, queueQuery, count, startedBegin, startedEnd, finishBegin, finishEnd, name, applicationTypes);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "getApp",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "AppInfo getApp(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"appid\") String appId)\n{\r\n    initForReadableEndpoints(res);\r\n    return super.getApp(req, res, appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "getAppAttempts",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "AppAttemptsInfo getAppAttempts(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"appid\") String appId)\n{\r\n    initForReadableEndpoints(res);\r\n    return super.getAppAttempts(req, res, appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "getAppAttempt",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "AppAttemptInfo getAppAttempt(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"appid\") String appId, @PathParam(\"appattemptid\") String appAttemptId)\n{\r\n    initForReadableEndpoints(res);\r\n    return super.getAppAttempt(req, res, appId, appAttemptId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "getContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainersInfo getContainers(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"appid\") String appId, @PathParam(\"appattemptid\") String appAttemptId)\n{\r\n    initForReadableEndpoints(res);\r\n    return super.getContainers(req, res, appId, appAttemptId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "getContainer",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerInfo getContainer(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"appid\") String appId, @PathParam(\"appattemptid\") String appAttemptId, @PathParam(\"containerid\") String containerId)\n{\r\n    initForReadableEndpoints(res);\r\n    return super.getContainer(req, res, appId, appAttemptId, containerId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "validateStates",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void validateStates(String stateQuery, Set<String> statesQuery)\n{\r\n    if (stateQuery != null && !stateQuery.isEmpty()) {\r\n        statesQuery.add(stateQuery);\r\n    }\r\n    Set<String> appStates = parseQueries(statesQuery, true);\r\n    for (String appState : appStates) {\r\n        switch(YarnApplicationState.valueOf(StringUtils.toUpperCase(appState))) {\r\n            case FINISHED:\r\n            case FAILED:\r\n            case KILLED:\r\n                continue;\r\n            default:\r\n                throw new BadRequestException(\"Invalid application-state \" + appState + \" specified. It should be a final state\");\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "getContainerLogsInfo",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Response getContainerLogsInfo(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr, @QueryParam(YarnWebServiceParams.NM_ID) String nmId, @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE) @DefaultValue(\"false\") boolean redirectedFromNode, @QueryParam(YarnWebServiceParams.MANUAL_REDIRECTION) @DefaultValue(\"false\") boolean manualRedirection)\n{\r\n    initForReadableEndpoints(res);\r\n    WrappedLogMetaRequest.Builder logMetaRequestBuilder = LogServlet.createRequestFromContainerId(containerIdStr);\r\n    return logServlet.getContainerLogsInfo(req, logMetaRequestBuilder, nmId, redirectedFromNode, null, manualRedirection);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "getContainerLogFile",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response getContainerLogFile(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr, @PathParam(YarnWebServiceParams.CONTAINER_LOG_FILE_NAME) String filename, @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_FORMAT) String format, @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_SIZE) String size, @QueryParam(YarnWebServiceParams.NM_ID) String nmId, @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE) boolean redirectedFromNode, @QueryParam(YarnWebServiceParams.MANUAL_REDIRECTION) @DefaultValue(\"false\") boolean manualRedirection)\n{\r\n    return getLogs(req, res, containerIdStr, filename, format, size, nmId, redirectedFromNode, manualRedirection);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "getLogs",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Response getLogs(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr, @PathParam(YarnWebServiceParams.CONTAINER_LOG_FILE_NAME) String filename, @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_FORMAT) String format, @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_SIZE) String size, @QueryParam(YarnWebServiceParams.NM_ID) String nmId, @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE) @DefaultValue(\"false\") boolean redirectedFromNode, @QueryParam(YarnWebServiceParams.MANUAL_REDIRECTION) @DefaultValue(\"false\") boolean manualRedirection)\n{\r\n    initForReadableEndpoints(res);\r\n    return logServlet.getLogFile(req, containerIdStr, filename, format, size, nmId, redirectedFromNode, null, manualRedirection);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "getLogServlet",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LogServlet getLogServlet()\n{\r\n    return this.logServlet;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "setLogServlet",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setLogServlet(LogServlet logServlet)\n{\r\n    this.logServlet = logServlet;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "ApplicationStartData newInstance(ApplicationId applicationId, String applicationName, String applicationType, String queue, String user, long submitTime, long startTime)\n{\r\n    ApplicationStartData appSD = Records.newRecord(ApplicationStartData.class);\r\n    appSD.setApplicationId(applicationId);\r\n    appSD.setApplicationName(applicationName);\r\n    appSD.setApplicationType(applicationType);\r\n    appSD.setQueue(queue);\r\n    appSD.setUser(user);\r\n    appSD.setSubmitTime(submitTime);\r\n    appSD.setStartTime(startTime);\r\n    return appSD;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getApplicationId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationId getApplicationId()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setApplicationId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setApplicationId(ApplicationId applicationId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getApplicationName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getApplicationName()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setApplicationName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setApplicationName(String applicationName)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getApplicationType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getApplicationType()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setApplicationType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setApplicationType(String applicationType)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUser()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setUser(String user)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getQueue",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getQueue()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setQueue",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setQueue(String queue)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getSubmitTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getSubmitTime()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setSubmitTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setSubmitTime(long submitTime)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getStartTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getStartTime()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setStartTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setStartTime(long startTime)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "render",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void render(Block html)\n{\r\n    boolean addErrorsAndWarningsLink = false;\r\n    if (isLog4jLogger(NavBlock.class)) {\r\n        Log4jWarningErrorMetricsAppender appender = Log4jWarningErrorMetricsAppender.findAppender();\r\n        if (appender != null) {\r\n            addErrorsAndWarningsLink = true;\r\n        }\r\n    }\r\n    Hamlet.DIV<Hamlet> nav = html.div(\"#nav\").h3(\"Application History\").ul().li().a(url(\"about\"), \"About\").__().li().a(url(\"apps\"), \"Applications\").ul().li().a(url(\"apps\", YarnApplicationState.FINISHED.toString()), YarnApplicationState.FINISHED.toString()).__().li().a(url(\"apps\", YarnApplicationState.FAILED.toString()), YarnApplicationState.FAILED.toString()).__().li().a(url(\"apps\", YarnApplicationState.KILLED.toString()), YarnApplicationState.KILLED.toString()).__().__().__().__();\r\n    Hamlet.UL<Hamlet.DIV<Hamlet>> tools = WebPageUtils.appendToolSection(nav, conf);\r\n    if (tools == null) {\r\n        return;\r\n    }\r\n    if (addErrorsAndWarningsLink) {\r\n        tools.li().a(url(\"errors-and-warnings\"), \"Errors/Warnings\").__();\r\n    }\r\n    tools.__().__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "ApplicationHistoryData newInstance(ApplicationId applicationId, String applicationName, String applicationType, String queue, String user, long submitTime, long startTime, long finishTime, String diagnosticsInfo, FinalApplicationStatus finalApplicationStatus, YarnApplicationState yarnApplicationState)\n{\r\n    ApplicationHistoryData appHD = new ApplicationHistoryData();\r\n    appHD.setApplicationId(applicationId);\r\n    appHD.setApplicationName(applicationName);\r\n    appHD.setApplicationType(applicationType);\r\n    appHD.setQueue(queue);\r\n    appHD.setUser(user);\r\n    appHD.setSubmitTime(submitTime);\r\n    appHD.setStartTime(startTime);\r\n    appHD.setFinishTime(finishTime);\r\n    appHD.setDiagnosticsInfo(diagnosticsInfo);\r\n    appHD.setFinalApplicationStatus(finalApplicationStatus);\r\n    appHD.setYarnApplicationState(yarnApplicationState);\r\n    return appHD;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getApplicationId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationId getApplicationId()\n{\r\n    return applicationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setApplicationId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setApplicationId(ApplicationId applicationId)\n{\r\n    this.applicationId = applicationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getApplicationName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getApplicationName()\n{\r\n    return applicationName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setApplicationName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setApplicationName(String applicationName)\n{\r\n    this.applicationName = applicationName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getApplicationType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getApplicationType()\n{\r\n    return applicationType;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setApplicationType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setApplicationType(String applicationType)\n{\r\n    this.applicationType = applicationType;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUser()\n{\r\n    return user;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setUser(String user)\n{\r\n    this.user = user;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getQueue",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getQueue()\n{\r\n    return queue;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setQueue",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setQueue(String queue)\n{\r\n    this.queue = queue;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getSubmitTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getSubmitTime()\n{\r\n    return submitTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setSubmitTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setSubmitTime(long submitTime)\n{\r\n    this.submitTime = submitTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getStartTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getStartTime()\n{\r\n    return startTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setStartTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setStartTime(long startTime)\n{\r\n    this.startTime = startTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getFinishTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getFinishTime()\n{\r\n    return finishTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setFinishTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setFinishTime(long finishTime)\n{\r\n    this.finishTime = finishTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getDiagnosticsInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDiagnosticsInfo()\n{\r\n    return diagnosticsInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setDiagnosticsInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDiagnosticsInfo(String diagnosticsInfo)\n{\r\n    this.diagnosticsInfo = diagnosticsInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getFinalApplicationStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "FinalApplicationStatus getFinalApplicationStatus()\n{\r\n    return finalApplicationStatus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setFinalApplicationStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setFinalApplicationStatus(FinalApplicationStatus finalApplicationStatus)\n{\r\n    this.finalApplicationStatus = finalApplicationStatus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getYarnApplicationState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "YarnApplicationState getYarnApplicationState()\n{\r\n    return this.yarnApplicationState;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setYarnApplicationState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setYarnApplicationState(YarnApplicationState yarnApplicationState)\n{\r\n    this.yarnApplicationState = yarnApplicationState;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "initStorage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void initStorage(Configuration conf) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "startStorage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void startStorage() throws IOException\n{\r\n    state = new TimelineServiceState();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "closeStorage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void closeStorage() throws IOException\n{\r\n    state = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "loadState",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "TimelineServiceState loadState() throws IOException\n{\r\n    TimelineServiceState result = new TimelineServiceState();\r\n    result.tokenState.putAll(state.tokenState);\r\n    result.tokenMasterKeyState.addAll(state.tokenMasterKeyState);\r\n    result.latestSequenceNumber = state.latestSequenceNumber;\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "storeToken",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void storeToken(TimelineDelegationTokenIdentifier tokenId, Long renewDate) throws IOException\n{\r\n    if (state.tokenState.containsKey(tokenId)) {\r\n        throw new IOException(\"token \" + tokenId + \" was stored twice\");\r\n    }\r\n    state.tokenState.put(tokenId, renewDate);\r\n    state.latestSequenceNumber = tokenId.getSequenceNumber();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "updateToken",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void updateToken(TimelineDelegationTokenIdentifier tokenId, Long renewDate) throws IOException\n{\r\n    if (!state.tokenState.containsKey(tokenId)) {\r\n        throw new IOException(\"token \" + tokenId + \" not in store\");\r\n    }\r\n    state.tokenState.put(tokenId, renewDate);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "removeToken",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void removeToken(TimelineDelegationTokenIdentifier tokenId) throws IOException\n{\r\n    state.tokenState.remove(tokenId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "storeTokenMasterKey",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void storeTokenMasterKey(DelegationKey key) throws IOException\n{\r\n    if (state.tokenMasterKeyState.contains(key)) {\r\n        throw new IOException(\"token master key \" + key + \" was stored twice\");\r\n    }\r\n    state.tokenMasterKeyState.add(key);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "removeTokenMasterKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void removeTokenMasterKey(DelegationKey key) throws IOException\n{\r\n    state.tokenMasterKeyState.remove(key);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "getPrefix",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getPrefix()\n{\r\n    return PREFIX;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "initFilter",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void initFilter(FilterContainer container, Configuration conf)\n{\r\n    Map<String, String> filterParameters = getFilterParameters(conf, HttpCrossOriginFilterInitializer.PREFIX);\r\n    filterParameters.putAll(getFilterParameters(conf, getPrefix()));\r\n    container.addGlobalFilter(\"Cross Origin Filter\", CrossOriginFilter.class.getName(), filterParameters);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "preHead",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void preHead(Page.HTML<__> html)\n{\r\n    commonPreHead(html);\r\n    set(TITLE, \"Timeline Server - Generic History Service\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "content",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<? extends SubView> content()\n{\r\n    return AboutBlock.class;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "index",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void index()\n{\r\n    setTitle(\"Application History\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "about",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void about()\n{\r\n    render(AboutPage.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "app",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void app()\n{\r\n    render(AppPage.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "appattempt",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void appattempt()\n{\r\n    render(AppAttemptPage.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "container",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void container()\n{\r\n    render(ContainerPage.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "logs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void logs()\n{\r\n    render(AHSLogsPage.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "errorsAndWarnings",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void errorsAndWarnings()\n{\r\n    render(AHSErrorsAndWarningsPage.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    LOG.info(\"ApplicationHistory Init\");\r\n    historyStore = createApplicationHistoryStore(conf);\r\n    historyStore.init(conf);\r\n    serverHttpAddress = WebAppUtils.getHttpSchemePrefix(conf) + WebAppUtils.getAHSWebAppURLWithoutScheme(conf);\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    LOG.info(\"Starting ApplicationHistory\");\r\n    historyStore.start();\r\n    super.serviceStart();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    LOG.info(\"Stopping ApplicationHistory\");\r\n    historyStore.stop();\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "createApplicationHistoryStore",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationHistoryStore createApplicationHistoryStore(Configuration conf)\n{\r\n    return ReflectionUtils.newInstance(conf.getClass(YarnConfiguration.APPLICATION_HISTORY_STORE, FileSystemApplicationHistoryStore.class, ApplicationHistoryStore.class), conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getAMContainer",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerReport getAMContainer(ApplicationAttemptId appAttemptId) throws IOException\n{\r\n    ApplicationReport app = getApplication(appAttemptId.getApplicationId());\r\n    return convertToContainerReport(historyStore.getAMContainer(appAttemptId), app == null ? null : app.getUser());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getApplications",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Map<ApplicationId, ApplicationReport> getApplications(long appsNum, long appStartedTimeBegin, long appStartedTimeEnd) throws IOException\n{\r\n    Map<ApplicationId, ApplicationHistoryData> histData = historyStore.getAllApplications();\r\n    HashMap<ApplicationId, ApplicationReport> applicationsReport = new HashMap<ApplicationId, ApplicationReport>();\r\n    int count = 0;\r\n    for (Entry<ApplicationId, ApplicationHistoryData> entry : histData.entrySet()) {\r\n        if (count == appsNum) {\r\n            break;\r\n        }\r\n        long appStartTime = entry.getValue().getStartTime();\r\n        if (appStartTime < appStartedTimeBegin || appStartTime > appStartedTimeEnd) {\r\n            continue;\r\n        }\r\n        applicationsReport.put(entry.getKey(), convertToApplicationReport(entry.getValue()));\r\n        count++;\r\n    }\r\n    return applicationsReport;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getApplication",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationReport getApplication(ApplicationId appId) throws IOException\n{\r\n    return convertToApplicationReport(historyStore.getApplication(appId));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "convertToApplicationReport",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "ApplicationReport convertToApplicationReport(ApplicationHistoryData appHistory) throws IOException\n{\r\n    ApplicationAttemptId currentApplicationAttemptId = null;\r\n    String trackingUrl = UNAVAILABLE;\r\n    String host = UNAVAILABLE;\r\n    int rpcPort = -1;\r\n    ApplicationAttemptHistoryData lastAttempt = getLastAttempt(appHistory.getApplicationId());\r\n    if (lastAttempt != null) {\r\n        currentApplicationAttemptId = lastAttempt.getApplicationAttemptId();\r\n        trackingUrl = lastAttempt.getTrackingURL();\r\n        host = lastAttempt.getHost();\r\n        rpcPort = lastAttempt.getRPCPort();\r\n    }\r\n    return ApplicationReport.newInstance(appHistory.getApplicationId(), currentApplicationAttemptId, appHistory.getUser(), appHistory.getQueue(), appHistory.getApplicationName(), host, rpcPort, null, appHistory.getYarnApplicationState(), appHistory.getDiagnosticsInfo(), trackingUrl, appHistory.getStartTime(), appHistory.getSubmitTime(), 0, appHistory.getFinishTime(), appHistory.getFinalApplicationStatus(), null, \"\", 100, appHistory.getApplicationType(), null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getLastAttempt",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "ApplicationAttemptHistoryData getLastAttempt(ApplicationId appId) throws IOException\n{\r\n    Map<ApplicationAttemptId, ApplicationAttemptHistoryData> attempts = historyStore.getApplicationAttempts(appId);\r\n    ApplicationAttemptId prevMaxAttemptId = null;\r\n    for (ApplicationAttemptId attemptId : attempts.keySet()) {\r\n        if (prevMaxAttemptId == null) {\r\n            prevMaxAttemptId = attemptId;\r\n        } else {\r\n            if (prevMaxAttemptId.getAttemptId() < attemptId.getAttemptId()) {\r\n                prevMaxAttemptId = attemptId;\r\n            }\r\n        }\r\n    }\r\n    return attempts.get(prevMaxAttemptId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "convertToApplicationAttemptReport",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationAttemptReport convertToApplicationAttemptReport(ApplicationAttemptHistoryData appAttemptHistory)\n{\r\n    return ApplicationAttemptReport.newInstance(appAttemptHistory.getApplicationAttemptId(), appAttemptHistory.getHost(), appAttemptHistory.getRPCPort(), appAttemptHistory.getTrackingURL(), null, appAttemptHistory.getDiagnosticsInfo(), appAttemptHistory.getYarnApplicationAttemptState(), appAttemptHistory.getMasterContainerId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getApplicationAttempt",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationAttemptReport getApplicationAttempt(ApplicationAttemptId appAttemptId) throws IOException\n{\r\n    return convertToApplicationAttemptReport(historyStore.getApplicationAttempt(appAttemptId));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getApplicationAttempts",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Map<ApplicationAttemptId, ApplicationAttemptReport> getApplicationAttempts(ApplicationId appId) throws IOException\n{\r\n    Map<ApplicationAttemptId, ApplicationAttemptHistoryData> histData = historyStore.getApplicationAttempts(appId);\r\n    HashMap<ApplicationAttemptId, ApplicationAttemptReport> applicationAttemptsReport = new HashMap<ApplicationAttemptId, ApplicationAttemptReport>();\r\n    for (Entry<ApplicationAttemptId, ApplicationAttemptHistoryData> entry : histData.entrySet()) {\r\n        applicationAttemptsReport.put(entry.getKey(), convertToApplicationAttemptReport(entry.getValue()));\r\n    }\r\n    return applicationAttemptsReport;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getContainer",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerReport getContainer(ContainerId containerId) throws IOException\n{\r\n    ApplicationReport app = getApplication(containerId.getApplicationAttemptId().getApplicationId());\r\n    return convertToContainerReport(historyStore.getContainer(containerId), app == null ? null : app.getUser());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "convertToContainerReport",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ContainerReport convertToContainerReport(ContainerHistoryData containerHistory, String user)\n{\r\n    String logUrl = WebAppUtils.getAggregatedLogURL(serverHttpAddress, containerHistory.getAssignedNode().toString(), containerHistory.getContainerId().toString(), containerHistory.getContainerId().toString(), user);\r\n    ContainerReport container = ContainerReport.newInstance(containerHistory.getContainerId(), containerHistory.getAllocatedResource(), containerHistory.getAssignedNode(), containerHistory.getPriority(), containerHistory.getStartTime(), containerHistory.getFinishTime(), containerHistory.getDiagnosticsInfo(), logUrl, containerHistory.getContainerExitStatus(), containerHistory.getContainerState(), null);\r\n    container.setExposedPorts(containerHistory.getExposedPorts());\r\n    return container;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getContainers",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Map<ContainerId, ContainerReport> getContainers(ApplicationAttemptId appAttemptId) throws IOException\n{\r\n    ApplicationReport app = getApplication(appAttemptId.getApplicationId());\r\n    Map<ContainerId, ContainerHistoryData> histData = historyStore.getContainers(appAttemptId);\r\n    HashMap<ContainerId, ContainerReport> containersReport = new HashMap<ContainerId, ContainerReport>();\r\n    for (Entry<ContainerId, ContainerHistoryData> entry : histData.entrySet()) {\r\n        containersReport.put(entry.getKey(), convertToContainerReport(entry.getValue(), app == null ? null : app.getUser()));\r\n    }\r\n    return containersReport;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "getHistoryStore",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationHistoryStore getHistoryStore()\n{\r\n    return this.historyStore;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "preHead",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void preHead(Page.HTML<__> html)\n{\r\n    commonPreHead(html);\r\n    String appId = $(YarnWebParams.APPLICATION_ID);\r\n    set(TITLE, appId.isEmpty() ? \"Bad request: missing application ID\" : join(\"Application \", $(YarnWebParams.APPLICATION_ID)));\r\n    set(DATATABLES_ID, \"attempts ResourceRequests\");\r\n    set(initID(DATATABLES, \"attempts\"), WebPageUtils.attemptsTableInit());\r\n    setTableStyles(html, \"attempts\", \".queue {width:6em}\", \".ui {width:8em}\");\r\n    setTableStyles(html, \"ResourceRequests\");\r\n    set(YarnWebParams.WEB_UI_TYPE, YarnWebParams.APP_HISTORY_WEB_UI);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "content",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<? extends SubView> content()\n{\r\n    return AppBlock.class;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "getAttemptsTableColumnDefs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getAttemptsTableColumnDefs()\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    return sb.append(\"[\\n\").append(\"{'sType':'natural', 'aTargets': [0]\").append(\", 'mRender': parseHadoopID }\").append(\"\\n, {'sType':'numeric', 'aTargets': [1]\").append(\", 'mRender': renderHadoopDate }]\").toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "byte[] write(Object o) throws IOException\n{\r\n    if (o == null) {\r\n        return EMPTY_BYTES;\r\n    }\r\n    return OBJECT_WRITER.writeValueAsBytes(o);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "read",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Object read(byte[] b) throws IOException\n{\r\n    return read(b, 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "read",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Object read(byte[] b, int offset) throws IOException\n{\r\n    if (b == null || b.length == 0) {\r\n        return null;\r\n    }\r\n    return OBJECT_READER.readValue(b, offset, b.length - offset);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "writeReverseOrderedLong",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "byte[] writeReverseOrderedLong(long l)\n{\r\n    byte[] b = new byte[8];\r\n    return writeReverseOrderedLong(l, b, 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "writeReverseOrderedLong",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "byte[] writeReverseOrderedLong(long l, byte[] b, int offset)\n{\r\n    b[offset] = (byte) (0x7f ^ ((l >> 56) & 0xff));\r\n    for (int i = offset + 1; i < offset + 7; i++) {\r\n        b[i] = (byte) (0xff ^ ((l >> 8 * (7 - i)) & 0xff));\r\n    }\r\n    b[offset + 7] = (byte) (0xff ^ (l & 0xff));\r\n    return b;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "readReverseOrderedLong",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long readReverseOrderedLong(byte[] b, int offset)\n{\r\n    long l = b[offset] & 0xff;\r\n    for (int i = 1; i < 8; i++) {\r\n        l = l << 8;\r\n        l = l | (b[offset + i] & 0xff);\r\n    }\r\n    return l ^ 0x7fffffffffffffffl;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "ApplicationFinishData newInstance(ApplicationId applicationId, long finishTime, String diagnosticsInfo, FinalApplicationStatus finalApplicationStatus, YarnApplicationState yarnApplicationState)\n{\r\n    ApplicationFinishData appFD = Records.newRecord(ApplicationFinishData.class);\r\n    appFD.setApplicationId(applicationId);\r\n    appFD.setFinishTime(finishTime);\r\n    appFD.setDiagnosticsInfo(diagnosticsInfo);\r\n    appFD.setFinalApplicationStatus(finalApplicationStatus);\r\n    appFD.setYarnApplicationState(yarnApplicationState);\r\n    return appFD;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getApplicationId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationId getApplicationId()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setApplicationId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setApplicationId(ApplicationId applicationId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getFinishTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getFinishTime()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setFinishTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setFinishTime(long finishTime)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getDiagnosticsInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDiagnosticsInfo()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setDiagnosticsInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDiagnosticsInfo(String diagnosticsInfo)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getFinalApplicationStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "FinalApplicationStatus getFinalApplicationStatus()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setFinalApplicationStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setFinalApplicationStatus(FinalApplicationStatus finalApplicationStatus)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "getYarnApplicationState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "YarnApplicationState getYarnApplicationState()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\records",
  "methodName" : "setYarnApplicationState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setYarnApplicationState(YarnApplicationState yarnApplicationState)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "render",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void render(Block html)\n{\r\n    TimelineAbout tsInfo = TimelineUtils.createTimelineAbout(\"Timeline Server - Generic History Service UI\");\r\n    info(\"Timeline Server Overview\").__(\"Timeline Server Version:\", tsInfo.getTimelineServiceBuildVersion() + \" on \" + tsInfo.getTimelineServiceVersionBuiltOn()).__(\"Hadoop Version:\", tsInfo.getHadoopBuildVersion() + \" on \" + tsInfo.getHadoopVersionBuiltOn());\r\n    html.__(InfoBlock.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
} ]