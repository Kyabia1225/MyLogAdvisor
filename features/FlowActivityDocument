[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowactivity",
  "methodName" : "merge",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void merge(FlowActivityDocument flowActivityDocument)\n{\r\n    if (flowActivityDocument.getDayTimestamp() > 0) {\r\n        this.dayTimestamp = flowActivityDocument.getDayTimestamp();\r\n    }\r\n    this.flowName = flowActivityDocument.getFlowName();\r\n    this.user = flowActivityDocument.getUser();\r\n    this.id = flowActivityDocument.getId();\r\n    this.flowActivities.addAll(flowActivityDocument.getFlowActivities());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowactivity",
  "methodName" : "getId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getId()\n{\r\n    return id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowactivity",
  "methodName" : "setId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setId(String id)\n{\r\n    this.id = id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowactivity",
  "methodName" : "getType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getType()\n{\r\n    return type;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowactivity",
  "methodName" : "addFlowActivity",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addFlowActivity(String flowActivityName, String flowVersion, long flowRunId)\n{\r\n    flowActivities.add(new FlowActivitySubDoc(flowActivityName, flowVersion, flowRunId));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowactivity",
  "methodName" : "getFlowActivities",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Set<FlowActivitySubDoc> getFlowActivities()\n{\r\n    return flowActivities;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowactivity",
  "methodName" : "setFlowActivities",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setFlowActivities(Set<FlowActivitySubDoc> flowActivities)\n{\r\n    this.flowActivities = flowActivities;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowactivity",
  "methodName" : "getCreatedTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getCreatedTime()\n{\r\n    return TimeUnit.SECONDS.toMillis(dayTimestamp);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowactivity",
  "methodName" : "setCreatedTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setCreatedTime(long time)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowactivity",
  "methodName" : "getDayTimestamp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getDayTimestamp()\n{\r\n    return dayTimestamp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowactivity",
  "methodName" : "setDayTimestamp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDayTimestamp(long dayTimestamp)\n{\r\n    this.dayTimestamp = dayTimestamp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowactivity",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUser()\n{\r\n    return user;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowactivity",
  "methodName" : "setUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setUser(String user)\n{\r\n    this.user = user;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowactivity",
  "methodName" : "getFlowName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getFlowName()\n{\r\n    return flowName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowactivity",
  "methodName" : "setFlowName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setFlowName(String flowName)\n{\r\n    this.flowName = flowName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "validateCosmosDBConf",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void validateCosmosDBConf(Configuration conf) throws YarnException\n{\r\n    if (conf == null) {\r\n        throw new NullPointerException(\"Configuration cannot be null\");\r\n    }\r\n    if (isNullOrEmpty(conf.get(TIMELINE_SERVICE_COSMOSDB_ENDPOINT), conf.get(TIMELINE_SERVICE_COSMOSDB_MASTER_KEY))) {\r\n        throw new YarnException(\"One or more CosmosDB configuration property is\" + \" missing in yarn-site.xml\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "getStoreVendor",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DocumentStoreVendor getStoreVendor(Configuration conf)\n{\r\n    return DocumentStoreVendor.getStoreType(conf.get(TIMELINE_STORE_TYPE, DocumentStoreVendor.COSMOS_DB.name()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "fetchEvent",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "TimelineEvent fetchEvent(TimelineEntity timelineEntity, String eventType)\n{\r\n    for (TimelineEvent event : timelineEntity.getEvents()) {\r\n        if (event.getId().equals(eventType)) {\r\n            return event;\r\n        }\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "isNullOrEmpty",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isNullOrEmpty(String... values)\n{\r\n    if (values == null || values.length == 0) {\r\n        return true;\r\n    }\r\n    for (String value : values) {\r\n        if (value == null || value.isEmpty()) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "createCosmosDBAsyncClient",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AsyncDocumentClient createCosmosDBAsyncClient(Configuration conf)\n{\r\n    return new AsyncDocumentClient.Builder().withServiceEndpoint(DocumentStoreUtils.getCosmosDBEndpoint(conf)).withMasterKeyOrResourceToken(DocumentStoreUtils.getCosmosDBMasterKey(conf)).withConnectionPolicy(ConnectionPolicy.GetDefault()).withConsistencyLevel(ConsistencyLevel.Session).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "getTopOfTheDayTimestamp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getTopOfTheDayTimestamp(long timeStamp)\n{\r\n    return timeStamp - (timeStamp % MILLIS_ONE_DAY);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "constructTimelineEntityDocId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String constructTimelineEntityDocId(TimelineCollectorContext collectorContext, String type)\n{\r\n    return String.format(\"%s!%s!%s!%d!%s!%s\", collectorContext.getClusterId(), collectorContext.getUserId(), collectorContext.getFlowName(), collectorContext.getFlowRunId(), collectorContext.getAppId(), type);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "constructTimelineEntityDocId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String constructTimelineEntityDocId(TimelineCollectorContext collectorContext, String type, String id)\n{\r\n    return String.format(\"%s!%s!%s!%d!%s!%s!%s\", collectorContext.getClusterId(), collectorContext.getUserId(), collectorContext.getFlowName(), collectorContext.getFlowRunId(), collectorContext.getAppId(), type, id);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "constructFlowRunDocId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String constructFlowRunDocId(TimelineCollectorContext collectorContext)\n{\r\n    return String.format(\"%s!%s!%s!%s\", collectorContext.getClusterId(), collectorContext.getUserId(), collectorContext.getFlowName(), collectorContext.getFlowRunId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "constructFlowActivityDocId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String constructFlowActivityDocId(TimelineCollectorContext collectorContext, long eventTimestamp)\n{\r\n    return String.format(\"%s!%s!%s!%s\", collectorContext.getClusterId(), getTopOfTheDayTimestamp(eventTimestamp), collectorContext.getUserId(), collectorContext.getFlowName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "getCosmosDBEndpoint",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getCosmosDBEndpoint(Configuration conf)\n{\r\n    return conf.get(TIMELINE_SERVICE_COSMOSDB_ENDPOINT);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "getCosmosDBMasterKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getCosmosDBMasterKey(Configuration conf)\n{\r\n    return conf.get(TIMELINE_SERVICE_COSMOSDB_MASTER_KEY);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "getCosmosDBDatabaseName",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getCosmosDBDatabaseName(Configuration conf)\n{\r\n    return conf.get(TIMELINE_SERVICE_DOCUMENTSTORE_DATABASE_NAME, getDefaultTimelineServiceDBName(conf));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "getDefaultTimelineServiceDBName",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getDefaultTimelineServiceDBName(Configuration conf)\n{\r\n    return getClusterId(conf) + \"_\" + DEFAULT_TIMELINE_SERVICE_DOCUMENTSTORE_DATABASE_NAME;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "getClusterId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getClusterId(Configuration conf)\n{\r\n    return conf.get(YarnConfiguration.RM_CLUSTER_ID, YarnConfiguration.DEFAULT_RM_CLUSTER_ID);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "isTimeInRange",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isTimeInRange(long time, long timeBegin, long timeEnd)\n{\r\n    return (time >= timeBegin) && (time <= timeEnd);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "isFilterNotMatching",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "boolean isFilterNotMatching(TimelineEntityFilters filters, TimelineEntity timelineEntity) throws IOException\n{\r\n    if (timelineEntity.getCreatedTime() != null && !isTimeInRange(timelineEntity.getCreatedTime(), filters.getCreatedTimeBegin(), filters.getCreatedTimeEnd())) {\r\n        return true;\r\n    }\r\n    if (filters.getRelatesTo() != null && !filters.getRelatesTo().getFilterList().isEmpty() && !TimelineStorageUtils.matchRelatesTo(timelineEntity, filters.getRelatesTo())) {\r\n        return true;\r\n    }\r\n    if (filters.getIsRelatedTo() != null && !filters.getIsRelatedTo().getFilterList().isEmpty() && !TimelineStorageUtils.matchIsRelatedTo(timelineEntity, filters.getIsRelatedTo())) {\r\n        return true;\r\n    }\r\n    if (filters.getInfoFilters() != null && !filters.getInfoFilters().getFilterList().isEmpty() && !TimelineStorageUtils.matchInfoFilters(timelineEntity, filters.getInfoFilters())) {\r\n        return true;\r\n    }\r\n    if (filters.getConfigFilters() != null && !filters.getConfigFilters().getFilterList().isEmpty() && !TimelineStorageUtils.matchConfigFilters(timelineEntity, filters.getConfigFilters())) {\r\n        return true;\r\n    }\r\n    if (filters.getMetricFilters() != null && !filters.getMetricFilters().getFilterList().isEmpty() && !TimelineStorageUtils.matchMetricFilters(timelineEntity, filters.getMetricFilters())) {\r\n        return true;\r\n    }\r\n    return filters.getEventFilters() != null && !filters.getEventFilters().getFilterList().isEmpty() && !TimelineStorageUtils.matchEventFilters(timelineEntity, filters.getEventFilters());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "createEntityToBeReturned",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "TimelineEntity createEntityToBeReturned(TimelineEntityDocument timelineEntityDocument, TimelineDataToRetrieve dataToRetrieve)\n{\r\n    TimelineEntity entityToBeReturned = createTimelineEntity(timelineEntityDocument.getType(), timelineEntityDocument.fetchTimelineEntity());\r\n    entityToBeReturned.setIdentifier(new TimelineEntity.Identifier(timelineEntityDocument.getType(), timelineEntityDocument.getId()));\r\n    entityToBeReturned.setCreatedTime(timelineEntityDocument.getCreatedTime());\r\n    entityToBeReturned.setInfo(timelineEntityDocument.getInfo());\r\n    if (dataToRetrieve.getFieldsToRetrieve() != null) {\r\n        fillFields(entityToBeReturned, timelineEntityDocument, dataToRetrieve);\r\n    }\r\n    return entityToBeReturned;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "createEntityToBeReturned",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "TimelineEntity createEntityToBeReturned(TimelineEntityDocument timelineEntityDocument, TimelineFilterList confsToRetrieve, TimelineFilterList metricsToRetrieve)\n{\r\n    TimelineEntity timelineEntity = timelineEntityDocument.fetchTimelineEntity();\r\n    if (confsToRetrieve != null) {\r\n        timelineEntity.setConfigs(DocumentStoreUtils.applyConfigFilter(confsToRetrieve, timelineEntity.getConfigs()));\r\n    }\r\n    if (metricsToRetrieve != null) {\r\n        timelineEntity.setMetrics(DocumentStoreUtils.transformMetrics(metricsToRetrieve, timelineEntityDocument.getMetrics()));\r\n    }\r\n    return timelineEntity;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "createTimelineEntity",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "TimelineEntity createTimelineEntity(String type, TimelineEntity timelineEntity)\n{\r\n    switch(TimelineEntityType.valueOf(type)) {\r\n        case YARN_APPLICATION:\r\n            return new ApplicationEntity();\r\n        case YARN_FLOW_RUN:\r\n            return new FlowRunEntity();\r\n        case YARN_FLOW_ACTIVITY:\r\n            FlowActivityEntity flowActivityEntity = (FlowActivityEntity) timelineEntity;\r\n            FlowActivityEntity newFlowActivity = new FlowActivityEntity();\r\n            newFlowActivity.addFlowRuns(flowActivityEntity.getFlowRuns());\r\n            return newFlowActivity;\r\n        default:\r\n            return new TimelineEntity();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "fillFields",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void fillFields(TimelineEntity finalEntity, TimelineEntityDocument entityDoc, TimelineDataToRetrieve dataToRetrieve)\n{\r\n    EnumSet<TimelineReader.Field> fieldsToRetrieve = dataToRetrieve.getFieldsToRetrieve();\r\n    if (fieldsToRetrieve.contains(TimelineReader.Field.ALL)) {\r\n        fieldsToRetrieve = EnumSet.allOf(TimelineReader.Field.class);\r\n    }\r\n    for (TimelineReader.Field field : fieldsToRetrieve) {\r\n        switch(field) {\r\n            case CONFIGS:\r\n                finalEntity.setConfigs(applyConfigFilter(dataToRetrieve.getConfsToRetrieve(), entityDoc.getConfigs()));\r\n                break;\r\n            case METRICS:\r\n                finalEntity.setMetrics(transformMetrics(dataToRetrieve.getMetricsToRetrieve(), entityDoc.getMetrics()));\r\n                break;\r\n            case INFO:\r\n                finalEntity.setInfo(entityDoc.getInfo());\r\n                break;\r\n            case IS_RELATED_TO:\r\n                finalEntity.setIsRelatedToEntities(entityDoc.getIsRelatedToEntities());\r\n                break;\r\n            case RELATES_TO:\r\n                finalEntity.setIsRelatedToEntities(entityDoc.getIsRelatedToEntities());\r\n                break;\r\n            case EVENTS:\r\n                finalEntity.setEvents(transformEvents(entityDoc.getEvents().values()));\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "transformEvents",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NavigableSet<TimelineEvent> transformEvents(Collection<Set<TimelineEventSubDoc>> eventSetColl)\n{\r\n    NavigableSet<TimelineEvent> timelineEvents = new TreeSet<>();\r\n    for (Set<TimelineEventSubDoc> eventSubDocs : eventSetColl) {\r\n        for (TimelineEventSubDoc eventSubDoc : eventSubDocs) {\r\n            timelineEvents.add(eventSubDoc.fetchTimelineEvent());\r\n        }\r\n    }\r\n    return timelineEvents;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "transformMetrics",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Set<TimelineMetric> transformMetrics(TimelineFilterList metricsToRetrieve, Map<String, Set<TimelineMetricSubDoc>> metrics)\n{\r\n    if (metricsToRetrieve == null || hasDataToBeRetrieve(metricsToRetrieve, metrics.keySet())) {\r\n        Set<TimelineMetric> metricSet = new HashSet<>();\r\n        for (Set<TimelineMetricSubDoc> metricSubDocs : metrics.values()) {\r\n            for (TimelineMetricSubDoc metricSubDoc : metricSubDocs) {\r\n                metricSet.add(metricSubDoc.fetchTimelineMetric());\r\n            }\r\n        }\r\n        return metricSet;\r\n    }\r\n    return new HashSet<>();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "applyConfigFilter",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<String, String> applyConfigFilter(TimelineFilterList configsToRetrieve, Map<String, String> configs)\n{\r\n    if (configsToRetrieve == null || hasDataToBeRetrieve(configsToRetrieve, configs.keySet())) {\r\n        return configs;\r\n    }\r\n    return new HashMap<>();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "hasDataToBeRetrieve",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "boolean hasDataToBeRetrieve(TimelineFilterList timelineFilters, Set<String> dataSet)\n{\r\n    Set<String> dataToBeRetrieved = new HashSet<>();\r\n    TimelinePrefixFilter timelinePrefixFilter;\r\n    for (TimelineFilter timelineFilter : timelineFilters.getFilterList()) {\r\n        timelinePrefixFilter = (TimelinePrefixFilter) timelineFilter;\r\n        dataToBeRetrieved.add(timelinePrefixFilter.getPrefix());\r\n    }\r\n    switch(timelineFilters.getOperator()) {\r\n        case OR:\r\n            if (dataToBeRetrieved.size() == 0 || !Collections.disjoint(dataSet, dataToBeRetrieved)) {\r\n                return true;\r\n            }\r\n        case AND:\r\n            if (dataToBeRetrieved.size() == 0 || dataSet.containsAll(dataToBeRetrieved)) {\r\n                return true;\r\n            }\r\n        default:\r\n            return false;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowrun",
  "methodName" : "transformMetrics",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void transformMetrics(Set<TimelineMetric> timelineMetrics)\n{\r\n    for (TimelineMetric metric : timelineMetrics) {\r\n        TimelineMetricSubDoc metricSubDoc = new TimelineMetricSubDoc(metric);\r\n        this.metrics.put(metric.getId(), metricSubDoc);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowrun",
  "methodName" : "merge",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void merge(FlowRunDocument flowRunDoc)\n{\r\n    if (flowRunDoc.getMinStartTime() > 0) {\r\n        this.minStartTime = flowRunDoc.getMinStartTime();\r\n    }\r\n    if (flowRunDoc.getMaxEndTime() > 0) {\r\n        this.maxEndTime = flowRunDoc.getMaxEndTime();\r\n    }\r\n    this.clusterId = flowRunDoc.getClusterId();\r\n    this.flowName = flowRunDoc.getFlowName();\r\n    this.id = flowRunDoc.getId();\r\n    this.username = flowRunDoc.getUsername();\r\n    this.flowVersion = flowRunDoc.getFlowVersion();\r\n    this.flowRunId = flowRunDoc.getFlowRunId();\r\n    aggregateMetrics(flowRunDoc.getMetrics());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowrun",
  "methodName" : "aggregateMetrics",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void aggregateMetrics(Map<String, TimelineMetricSubDoc> metricSubDocMap)\n{\r\n    for (Map.Entry<String, TimelineMetricSubDoc> metricEntry : metricSubDocMap.entrySet()) {\r\n        final String metricId = metricEntry.getKey();\r\n        final TimelineMetricSubDoc metricValue = metricEntry.getValue();\r\n        if (this.metrics.containsKey(metricId)) {\r\n            TimelineMetric incomingMetric = metricValue.fetchTimelineMetric();\r\n            TimelineMetric baseMetric = this.metrics.get(metricId).fetchTimelineMetric();\r\n            if (incomingMetric.getValues().size() > 0) {\r\n                baseMetric = aggregate(incomingMetric, baseMetric);\r\n                this.metrics.put(metricId, new TimelineMetricSubDoc(baseMetric));\r\n            } else {\r\n                LOG.debug(\"No incoming metric to aggregate for : {}\", baseMetric.getId());\r\n            }\r\n        } else {\r\n            this.metrics.put(metricId, metricValue);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowrun",
  "methodName" : "aggregate",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "TimelineMetric aggregate(TimelineMetric incomingMetric, TimelineMetric baseMetric)\n{\r\n    switch(baseMetric.getRealtimeAggregationOp()) {\r\n        case SUM:\r\n            baseMetric = TimelineMetricOperation.SUM.aggregate(incomingMetric, baseMetric, null);\r\n            break;\r\n        case AVG:\r\n            baseMetric = TimelineMetricOperation.AVG.aggregate(incomingMetric, baseMetric, null);\r\n            break;\r\n        case MAX:\r\n            baseMetric = TimelineMetricOperation.MAX.aggregate(incomingMetric, baseMetric, null);\r\n            break;\r\n        case REPLACE:\r\n            baseMetric = TimelineMetricOperation.REPLACE.aggregate(incomingMetric, baseMetric, null);\r\n        default:\r\n            LOG.warn(\"Unknown TimelineMetricOperation: {}\", baseMetric.getRealtimeAggregationOp());\r\n    }\r\n    return baseMetric;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowrun",
  "methodName" : "getId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getId()\n{\r\n    return id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowrun",
  "methodName" : "setId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setId(String id)\n{\r\n    this.id = id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowrun",
  "methodName" : "getClusterId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getClusterId()\n{\r\n    return clusterId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowrun",
  "methodName" : "setClusterId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setClusterId(String clusterId)\n{\r\n    this.clusterId = clusterId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowrun",
  "methodName" : "getUsername",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUsername()\n{\r\n    return username;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowrun",
  "methodName" : "setUsername",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setUsername(String username)\n{\r\n    this.username = username;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowrun",
  "methodName" : "getFlowName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getFlowName()\n{\r\n    return flowName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowrun",
  "methodName" : "setFlowName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setFlowName(String flowName)\n{\r\n    this.flowName = flowName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowrun",
  "methodName" : "getFlowRunId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Long getFlowRunId()\n{\r\n    return flowRunId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowrun",
  "methodName" : "setFlowRunId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setFlowRunId(Long flowRunId)\n{\r\n    this.flowRunId = flowRunId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowrun",
  "methodName" : "getMetrics",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, TimelineMetricSubDoc> getMetrics()\n{\r\n    return metrics;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowrun",
  "methodName" : "setMetrics",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setMetrics(Map<String, TimelineMetricSubDoc> metrics)\n{\r\n    this.metrics.putAll(metrics);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowrun",
  "methodName" : "fetchTimelineMetrics",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Set<TimelineMetric> fetchTimelineMetrics()\n{\r\n    Set<TimelineMetric> metricSet = new HashSet<>();\r\n    for (TimelineMetricSubDoc metricSubDoc : metrics.values()) {\r\n        metricSet.add(metricSubDoc.fetchTimelineMetric());\r\n    }\r\n    return metricSet;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowrun",
  "methodName" : "getMinStartTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getMinStartTime()\n{\r\n    return minStartTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowrun",
  "methodName" : "setMinStartTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setMinStartTime(long minStartTime)\n{\r\n    this.minStartTime = minStartTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowrun",
  "methodName" : "getMaxEndTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getMaxEndTime()\n{\r\n    return maxEndTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowrun",
  "methodName" : "setMaxEndTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setMaxEndTime(long maxEndTime)\n{\r\n    this.maxEndTime = maxEndTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowrun",
  "methodName" : "getType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getType()\n{\r\n    return type;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowrun",
  "methodName" : "getCreatedTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getCreatedTime()\n{\r\n    return minStartTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowrun",
  "methodName" : "setCreatedTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setCreatedTime(long createdTime)\n{\r\n    if (minStartTime == 0) {\r\n        minStartTime = createdTime;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowrun",
  "methodName" : "getFlowVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getFlowVersion()\n{\r\n    return flowVersion;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowrun",
  "methodName" : "setFlowVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setFlowVersion(String flowVersion)\n{\r\n    this.flowVersion = flowVersion;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowactivity",
  "methodName" : "getFlowName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getFlowName()\n{\r\n    return flowName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowactivity",
  "methodName" : "getFlowVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getFlowVersion()\n{\r\n    return flowVersion;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowactivity",
  "methodName" : "getFlowRunId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getFlowRunId()\n{\r\n    return flowRunId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowactivity",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    int result = flowVersion.hashCode();\r\n    result = (int) (31 * result + flowRunId);\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\flowactivity",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object o)\n{\r\n    if (this == o) {\r\n        return true;\r\n    }\r\n    if (!(o instanceof FlowActivitySubDoc)) {\r\n        return false;\r\n    }\r\n    FlowActivitySubDoc m = (FlowActivitySubDoc) o;\r\n    if (!flowVersion.equalsIgnoreCase(m.getFlowVersion())) {\r\n        return false;\r\n    }\r\n    return flowRunId == m.getFlowRunId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "timelineMetrics",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void timelineMetrics(Set<TimelineMetric> timelineMetrics)\n{\r\n    for (TimelineMetric timelineMetric : timelineMetrics) {\r\n        if (this.metrics.containsKey(timelineMetric.getId())) {\r\n            this.metrics.get(timelineMetric.getId()).add(new TimelineMetricSubDoc(timelineMetric));\r\n        } else {\r\n            Set<TimelineMetricSubDoc> metricSet = new HashSet<>();\r\n            metricSet.add(new TimelineMetricSubDoc(timelineMetric));\r\n            this.metrics.put(timelineMetric.getId(), metricSet);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "transformEvents",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void transformEvents(Set<TimelineEvent> timelineEvents)\n{\r\n    for (TimelineEvent timelineEvent : timelineEvents) {\r\n        if (this.events.containsKey(timelineEvent.getId())) {\r\n            this.events.get(timelineEvent.getId()).add(new TimelineEventSubDoc(timelineEvent));\r\n        } else {\r\n            Set<TimelineEventSubDoc> eventSet = new HashSet<>();\r\n            eventSet.add(new TimelineEventSubDoc(timelineEvent));\r\n            this.events.put(timelineEvent.getId(), eventSet);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "merge",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void merge(TimelineEntityDocument newTimelineDocument)\n{\r\n    if (newTimelineDocument.getCreatedTime() > 0) {\r\n        timelineEntity.setCreatedTime(newTimelineDocument.getCreatedTime());\r\n    }\r\n    setMetrics(newTimelineDocument.getMetrics());\r\n    setEvents(newTimelineDocument.getEvents());\r\n    timelineEntity.getInfo().putAll(newTimelineDocument.getInfo());\r\n    timelineEntity.getConfigs().putAll(newTimelineDocument.getConfigs());\r\n    timelineEntity.getIsRelatedToEntities().putAll(newTimelineDocument.getIsRelatedToEntities());\r\n    timelineEntity.getRelatesToEntities().putAll(newTimelineDocument.getRelatesToEntities());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "getId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getId()\n{\r\n    return timelineEntity.getId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "setId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setId(String key)\n{\r\n    timelineEntity.setId(key);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "getType",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getType()\n{\r\n    return timelineEntity.getType();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "setType",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setType(String type)\n{\r\n    timelineEntity.setType(type);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "getInfo",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Map<String, Object> getInfo()\n{\r\n    timelineEntity.getInfo().put(TimelineReaderUtils.FROMID_KEY, getId());\r\n    return timelineEntity.getInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "setInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setInfo(Map<String, Object> info)\n{\r\n    timelineEntity.setInfo(info);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "getMetrics",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, Set<TimelineMetricSubDoc>> getMetrics()\n{\r\n    return metrics;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "setMetrics",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void setMetrics(Map<String, Set<TimelineMetricSubDoc>> metrics)\n{\r\n    for (Map.Entry<String, Set<TimelineMetricSubDoc>> metricEntry : metrics.entrySet()) {\r\n        final String metricId = metricEntry.getKey();\r\n        final Set<TimelineMetricSubDoc> metricValue = metricEntry.getValue();\r\n        for (TimelineMetricSubDoc metricSubDoc : metricValue) {\r\n            timelineEntity.addMetric(metricSubDoc.fetchTimelineMetric());\r\n        }\r\n        if (this.metrics.containsKey(metricId)) {\r\n            this.metrics.get(metricId).addAll(metricValue);\r\n        } else {\r\n            this.metrics.put(metricId, new HashSet<>(metricValue));\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "getEvents",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, Set<TimelineEventSubDoc>> getEvents()\n{\r\n    return events;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "setEvents",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void setEvents(Map<String, Set<TimelineEventSubDoc>> events)\n{\r\n    for (Map.Entry<String, Set<TimelineEventSubDoc>> eventEntry : events.entrySet()) {\r\n        final String eventId = eventEntry.getKey();\r\n        final Set<TimelineEventSubDoc> eventValue = eventEntry.getValue();\r\n        for (TimelineEventSubDoc eventSubDoc : eventValue) {\r\n            timelineEntity.addEvent(eventSubDoc.fetchTimelineEvent());\r\n        }\r\n        if (this.events.containsKey(eventId)) {\r\n            this.events.get(eventId).addAll(events.get(eventId));\r\n        } else {\r\n            this.events.put(eventId, new HashSet<>(eventValue));\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "getConfigs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<String, String> getConfigs()\n{\r\n    return timelineEntity.getConfigs();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "setConfigs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setConfigs(Map<String, String> configs)\n{\r\n    timelineEntity.setConfigs(configs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "getIsRelatedToEntities",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<String, Set<String>> getIsRelatedToEntities()\n{\r\n    return timelineEntity.getIsRelatedToEntities();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "setIsRelatedToEntities",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setIsRelatedToEntities(Map<String, Set<String>> isRelatedToEntities)\n{\r\n    timelineEntity.setIsRelatedToEntities(isRelatedToEntities);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "getRelatesToEntities",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<String, Set<String>> getRelatesToEntities()\n{\r\n    return timelineEntity.getRelatesToEntities();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "setRelatesToEntities",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setRelatesToEntities(Map<String, Set<String>> relatesToEntities)\n{\r\n    timelineEntity.setRelatesToEntities(relatesToEntities);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "getFlowVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getFlowVersion()\n{\r\n    return flowVersion;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "setFlowVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setFlowVersion(String flowVersion)\n{\r\n    this.flowVersion = flowVersion;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "setIdentifier",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setIdentifier(TimelineEntity.Identifier identifier)\n{\r\n    timelineEntity.setIdentifier(identifier);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "setIdPrefix",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setIdPrefix(long idPrefix)\n{\r\n    timelineEntity.setIdPrefix(idPrefix);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "getSubApplicationUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getSubApplicationUser()\n{\r\n    return subApplicationUser;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "setSubApplicationUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setSubApplicationUser(String subApplicationUser)\n{\r\n    this.subApplicationUser = subApplicationUser;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "getCreatedTime",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getCreatedTime()\n{\r\n    if (timelineEntity.getCreatedTime() == null) {\r\n        return 0;\r\n    }\r\n    return timelineEntity.getCreatedTime();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "setCreatedTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setCreatedTime(long createdTime)\n{\r\n    timelineEntity.setCreatedTime(createdTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "getContext",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineContext getContext()\n{\r\n    return context;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "setContext",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setContext(TimelineContext context)\n{\r\n    this.context = context;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "fetchTimelineEntity",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineEntity fetchTimelineEntity()\n{\r\n    return timelineEntity;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\writer",
  "methodName" : "writeDocument",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void writeDocument(Document timelineDocument)\n{\r\n    long startTime = Time.monotonicNow();\r\n    synchronized (documentsBuffer) {\r\n        if (documentsBuffer.size() == maxBufferSize) {\r\n            final Map<String, Document> flushedBuffer = copyToFlushBuffer();\r\n            documentsBufferFullFlusher.execute(() -> flush(flushedBuffer));\r\n        }\r\n        Document prevDocument = documentsBuffer.get(timelineDocument.getId());\r\n        if (prevDocument != null) {\r\n            prevDocument.merge(timelineDocument);\r\n        } else {\r\n            prevDocument = timelineDocument;\r\n        }\r\n        documentsBuffer.put(prevDocument.getId(), prevDocument);\r\n    }\r\n    METRICS.addAsyncPutEntitiesLatency(Time.monotonicNow() - startTime, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\writer",
  "methodName" : "copyToFlushBuffer",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Map<String, Document> copyToFlushBuffer()\n{\r\n    Map<String, Document> flushBuffer = new HashMap<>();\r\n    synchronized (documentsBuffer) {\r\n        if (documentsBuffer.size() > 0) {\r\n            flushBuffer.putAll(documentsBuffer);\r\n            documentsBuffer.clear();\r\n        }\r\n    }\r\n    return flushBuffer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\writer",
  "methodName" : "flush",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void flush(Map<String, Document> flushBuffer)\n{\r\n    for (Document document : flushBuffer.values()) {\r\n        documentStoreWriter.writeDocument(document, collectionType);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\writer",
  "methodName" : "flush",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void flush()\n{\r\n    flush(copyToFlushBuffer());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\writer",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void close() throws Exception\n{\r\n    scheduledDocumentsFlusher.shutdown();\r\n    documentsBufferFullFlusher.shutdown();\r\n    flush();\r\n    scheduledDocumentsFlusher.awaitTermination(AWAIT_TIMEOUT_SECS, TimeUnit.SECONDS);\r\n    documentsBufferFullFlusher.awaitTermination(AWAIT_TIMEOUT_SECS, TimeUnit.SECONDS);\r\n    documentStoreWriter.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\lib",
  "methodName" : "createDocumentStoreWriter",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "DocumentStoreWriter<Document> createDocumentStoreWriter(Configuration conf) throws YarnException\n{\r\n    final DocumentStoreVendor storeType = getStoreVendor(conf);\r\n    switch(storeType) {\r\n        case COSMOS_DB:\r\n            DocumentStoreUtils.validateCosmosDBConf(conf);\r\n            return new CosmosDBDocumentStoreWriter<>(conf);\r\n        default:\r\n            throw new DocumentStoreNotSupportedException(\"Unable to create DocumentStoreWriter for type : \" + storeType);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\lib",
  "methodName" : "createDocumentStoreReader",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "DocumentStoreReader<Document> createDocumentStoreReader(Configuration conf) throws YarnException\n{\r\n    final DocumentStoreVendor storeType = getStoreVendor(conf);\r\n    switch(storeType) {\r\n        case COSMOS_DB:\r\n            DocumentStoreUtils.validateCosmosDBConf(conf);\r\n            return new CosmosDBDocumentStoreReader<>(conf);\r\n        default:\r\n            throw new DocumentStoreNotSupportedException(\"Unable to create DocumentStoreReader for type : \" + storeType);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "getRealtimeAggregationOp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineMetricOperation getRealtimeAggregationOp()\n{\r\n    return timelineMetric.getRealtimeAggregationOp();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "setRealtimeAggregationOp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setRealtimeAggregationOp(final TimelineMetricOperation op)\n{\r\n    timelineMetric.setRealtimeAggregationOp(op);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "getId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getId()\n{\r\n    return timelineMetric.getId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "setId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setId(String metricId)\n{\r\n    timelineMetric.setId(metricId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "setSingleDataTimestamp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setSingleDataTimestamp(long singleDataTimestamp)\n{\r\n    this.singleDataTimestamp = singleDataTimestamp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "getSingleDataTimestamp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getSingleDataTimestamp()\n{\r\n    if (timelineMetric.getType() == TimelineMetric.Type.SINGLE_VALUE) {\r\n        return singleDataTimestamp;\r\n    }\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "getSingleDataValue",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Number getSingleDataValue()\n{\r\n    if (timelineMetric.getType() == TimelineMetric.Type.SINGLE_VALUE) {\r\n        return singleDataValue;\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "setSingleDataValue",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setSingleDataValue(Number singleDataValue)\n{\r\n    this.singleDataValue = singleDataValue;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "getValues",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<Long, Number> getValues()\n{\r\n    return timelineMetric.getValues();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "setValues",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setValues(Map<Long, Number> vals)\n{\r\n    timelineMetric.setValues(vals);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "getValuesJAXB",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TreeMap<Long, Number> getValuesJAXB()\n{\r\n    return timelineMetric.getValuesJAXB();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "getType",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineMetric.Type getType()\n{\r\n    return timelineMetric.getType();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "setType",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setType(TimelineMetric.Type metricType)\n{\r\n    timelineMetric.setType(metricType);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "isValid",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isValid()\n{\r\n    return (timelineMetric.getId() != null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int hashCode()\n{\r\n    int result = timelineMetric.getId().hashCode();\r\n    result = 31 * result + timelineMetric.getType().hashCode();\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean equals(Object obj)\n{\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (!(obj instanceof TimelineMetricSubDoc)) {\r\n        return false;\r\n    }\r\n    TimelineMetricSubDoc otherTimelineMetric = (TimelineMetricSubDoc) obj;\r\n    if (!this.timelineMetric.getId().equals(otherTimelineMetric.getId())) {\r\n        return false;\r\n    }\r\n    return this.timelineMetric.getType() == otherTimelineMetric.getType();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "fetchTimelineMetric",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineMetric fetchTimelineMetric()\n{\r\n    return timelineMetric;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "createTimelineSchema",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void createTimelineSchema(String[] args)\n{\r\n    try {\r\n        Configuration conf = new YarnConfiguration();\r\n        LOG.info(\"Creating database and collections for DocumentStore : {}\", DocumentStoreUtils.getStoreVendor(conf));\r\n        try (DocumentStoreWriter documentStoreWriter = DocumentStoreFactory.createDocumentStoreWriter(conf)) {\r\n            documentStoreWriter.createDatabase();\r\n            documentStoreWriter.createCollection(CollectionType.APPLICATION.getCollectionName());\r\n            documentStoreWriter.createCollection(CollectionType.ENTITY.getCollectionName());\r\n            documentStoreWriter.createCollection(CollectionType.FLOW_ACTIVITY.getCollectionName());\r\n            documentStoreWriter.createCollection(CollectionType.FLOW_RUN.getCollectionName());\r\n        }\r\n    } catch (Exception e) {\r\n        LOG.error(\"Error while creating Timeline Collections\", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "getId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getId()\n{\r\n    return timelineEvent.getId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "setId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setId(String eventId)\n{\r\n    timelineEvent.setId(eventId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "isValid",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isValid()\n{\r\n    return timelineEvent.isValid();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "getTimestamp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getTimestamp()\n{\r\n    return timelineEvent.getTimestamp();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "setTimestamp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setTimestamp(long ts)\n{\r\n    timelineEvent.setTimestamp(ts);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "getInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<String, Object> getInfo()\n{\r\n    return timelineEvent.getInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "setInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setInfo(Map<String, Object> info)\n{\r\n    timelineEvent.setInfo(TimelineServiceHelper.mapCastToHashMap(info));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return 31 * timelineEvent.getId().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean equals(Object obj)\n{\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (!(obj instanceof TimelineEventSubDoc)) {\r\n        return false;\r\n    }\r\n    TimelineEventSubDoc otherTimelineEvent = (TimelineEventSubDoc) obj;\r\n    return this.timelineEvent.getId().equals(otherTimelineEvent.getId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection\\document\\entity",
  "methodName" : "fetchTimelineEvent",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineEvent fetchTimelineEvent()\n{\r\n    return timelineEvent;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    DocumentStoreVendor storeType = DocumentStoreUtils.getStoreVendor(conf);\r\n    LOG.info(\"Initializing Document Store Reader for : \" + storeType);\r\n    collectionReader = new TimelineCollectionReader(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    super.serviceStop();\r\n    LOG.info(\"Stopping Document Timeline Store reader...\");\r\n    collectionReader.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "getEntity",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "TimelineEntity getEntity(TimelineReaderContext context, TimelineDataToRetrieve dataToRetrieve) throws IOException\n{\r\n    TimelineEntityDocument timelineEntityDoc;\r\n    switch(TimelineEntityType.valueOf(context.getEntityType())) {\r\n        case YARN_FLOW_ACTIVITY:\r\n        case YARN_FLOW_RUN:\r\n            timelineEntityDoc = collectionReader.readDocument(context);\r\n            return DocumentStoreUtils.createEntityToBeReturned(timelineEntityDoc, dataToRetrieve.getConfsToRetrieve(), dataToRetrieve.getMetricsToRetrieve());\r\n        default:\r\n            timelineEntityDoc = collectionReader.readDocument(context);\r\n    }\r\n    return DocumentStoreUtils.createEntityToBeReturned(timelineEntityDoc, dataToRetrieve);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "getEntities",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Set<TimelineEntity> getEntities(TimelineReaderContext context, TimelineEntityFilters filters, TimelineDataToRetrieve dataToRetrieve) throws IOException\n{\r\n    List<TimelineEntityDocument> entityDocs = collectionReader.readDocuments(context, filters.getLimit());\r\n    return applyFilters(filters, dataToRetrieve, entityDocs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "getEntityTypes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<String> getEntityTypes(TimelineReaderContext context)\n{\r\n    return collectionReader.fetchEntityTypes(context);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "getHealthStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineHealth getHealthStatus()\n{\r\n    if (collectionReader != null) {\r\n        return new TimelineHealth(TimelineHealth.TimelineHealthStatus.RUNNING, \"\");\r\n    } else {\r\n        return new TimelineHealth(TimelineHealth.TimelineHealthStatus.READER_CONNECTION_FAILURE, \"Timeline store reader not initialized.\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "applyFilters",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Set<TimelineEntity> applyFilters(TimelineEntityFilters filters, TimelineDataToRetrieve dataToRetrieve, List<TimelineEntityDocument> entityDocs) throws IOException\n{\r\n    Set<TimelineEntity> timelineEntities = new HashSet<>();\r\n    for (TimelineEntityDocument entityDoc : entityDocs) {\r\n        final TimelineEntity timelineEntity = entityDoc.fetchTimelineEntity();\r\n        if (DocumentStoreUtils.isFilterNotMatching(filters, timelineEntity)) {\r\n            continue;\r\n        }\r\n        TimelineEntity entityToBeReturned = DocumentStoreUtils.createEntityToBeReturned(entityDoc, dataToRetrieve);\r\n        timelineEntities.add(entityToBeReturned);\r\n    }\r\n    return timelineEntities;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\reader\\cosmosdb",
  "methodName" : "initCosmosDBClient",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void initCosmosDBClient(Configuration conf)\n{\r\n    if (client == null) {\r\n        LOG.info(\"Creating Cosmos DB Reader Async Client...\");\r\n        client = DocumentStoreUtils.createCosmosDBAsyncClient(conf);\r\n        addShutdownHook();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\reader\\cosmosdb",
  "methodName" : "readDocumentList",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<TimelineDoc> readDocumentList(String collectionName, TimelineReaderContext context, final Class<TimelineDoc> timelineDocClass, long size) throws NoDocumentFoundException\n{\r\n    final List<TimelineDoc> result = queryDocuments(collectionName, context, timelineDocClass, size);\r\n    if (result.size() > 0) {\r\n        return result;\r\n    }\r\n    throw new NoDocumentFoundException(\"No documents were found while \" + \"querying Collection : \" + collectionName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\reader\\cosmosdb",
  "methodName" : "fetchEntityTypes",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Set<String> fetchEntityTypes(String collectionName, TimelineReaderContext context)\n{\r\n    StringBuilder queryStrBuilder = new StringBuilder();\r\n    queryStrBuilder.append(String.format(SELECT_DISTINCT_TYPES_FROM_COLLECTION, collectionName));\r\n    String sqlQuery = addPredicates(context, collectionName, queryStrBuilder);\r\n    LOG.debug(\"Querying Collection : {} , with query {}\", collectionName, sqlQuery);\r\n    return Sets.newHashSet(client.queryDocuments(String.format(COLLECTION_LINK, databaseName, collectionName), sqlQuery, new FeedOptions()).map(FeedResponse::getResults).concatMap(Observable::from).map(document -> String.valueOf(document.get(ENTITY_TYPE_COLUMN))).toList().subscribeOn(schedulerForBlockingWork).toBlocking().single());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\reader\\cosmosdb",
  "methodName" : "readDocument",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "TimelineDoc readDocument(String collectionName, TimelineReaderContext context, final Class<TimelineDoc> timelineDocClass) throws NoDocumentFoundException\n{\r\n    final List<TimelineDoc> result = queryDocuments(collectionName, context, timelineDocClass, DEFAULT_DOCUMENTS_SIZE);\r\n    if (result.size() > 0) {\r\n        return result.get(0);\r\n    }\r\n    throw new NoDocumentFoundException(\"No documents were found while \" + \"querying Collection : \" + collectionName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\reader\\cosmosdb",
  "methodName" : "queryDocuments",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "List<TimelineDoc> queryDocuments(String collectionName, TimelineReaderContext context, final Class<TimelineDoc> docClass, final long maxDocumentsSize)\n{\r\n    final String sqlQuery = buildQueryWithPredicates(context, collectionName, maxDocumentsSize);\r\n    LOG.debug(\"Querying Collection : {} , with query {}\", collectionName, sqlQuery);\r\n    return client.queryDocuments(String.format(COLLECTION_LINK, databaseName, collectionName), sqlQuery, new FeedOptions()).map(FeedResponse::getResults).concatMap(Observable::from).map(document -> {\r\n        TimelineDoc resultDoc = document.toObject(docClass);\r\n        if (resultDoc.getCreatedTime() == 0 && document.getTimestamp() != null) {\r\n            resultDoc.setCreatedTime(document.getTimestamp().getTime());\r\n        }\r\n        return resultDoc;\r\n    }).toList().subscribeOn(schedulerForBlockingWork).toBlocking().single();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\reader\\cosmosdb",
  "methodName" : "buildQueryWithPredicates",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String buildQueryWithPredicates(TimelineReaderContext context, String collectionName, long size)\n{\r\n    StringBuilder queryStrBuilder = new StringBuilder();\r\n    if (size == -1) {\r\n        queryStrBuilder.append(String.format(SELECT_ALL_FROM_COLLECTION, collectionName));\r\n    } else {\r\n        queryStrBuilder.append(String.format(SELECT_TOP_FROM_COLLECTION, size, collectionName));\r\n    }\r\n    return addPredicates(context, collectionName, queryStrBuilder);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\reader\\cosmosdb",
  "methodName" : "addPredicates",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "String addPredicates(TimelineReaderContext context, String collectionName, StringBuilder queryStrBuilder)\n{\r\n    boolean hasPredicate = false;\r\n    queryStrBuilder.append(WHERE_CLAUSE);\r\n    if (!DocumentStoreUtils.isNullOrEmpty(context.getClusterId())) {\r\n        hasPredicate = true;\r\n        queryStrBuilder.append(String.format(CONTAINS_FUNC_FOR_ID, context.getClusterId()));\r\n    }\r\n    if (!DocumentStoreUtils.isNullOrEmpty(context.getUserId())) {\r\n        hasPredicate = true;\r\n        queryStrBuilder.append(AND_OPERATOR).append(String.format(CONTAINS_FUNC_FOR_ID, context.getUserId()));\r\n    }\r\n    if (!DocumentStoreUtils.isNullOrEmpty(context.getFlowName())) {\r\n        hasPredicate = true;\r\n        queryStrBuilder.append(AND_OPERATOR).append(String.format(CONTAINS_FUNC_FOR_ID, context.getFlowName()));\r\n    }\r\n    if (!DocumentStoreUtils.isNullOrEmpty(context.getAppId())) {\r\n        hasPredicate = true;\r\n        queryStrBuilder.append(AND_OPERATOR).append(String.format(CONTAINS_FUNC_FOR_ID, context.getAppId()));\r\n    }\r\n    if (!DocumentStoreUtils.isNullOrEmpty(context.getEntityId())) {\r\n        hasPredicate = true;\r\n        queryStrBuilder.append(AND_OPERATOR).append(String.format(CONTAINS_FUNC_FOR_ID, context.getEntityId()));\r\n    }\r\n    if (context.getFlowRunId() != null) {\r\n        hasPredicate = true;\r\n        queryStrBuilder.append(AND_OPERATOR).append(String.format(CONTAINS_FUNC_FOR_ID, context.getFlowRunId()));\r\n    }\r\n    if (!DocumentStoreUtils.isNullOrEmpty(context.getEntityType())) {\r\n        hasPredicate = true;\r\n        queryStrBuilder.append(AND_OPERATOR).append(String.format(CONTAINS_FUNC_FOR_TYPE, context.getEntityType()));\r\n    }\r\n    if (hasPredicate) {\r\n        queryStrBuilder.append(ORDER_BY_CLAUSE);\r\n        LOG.debug(\"CosmosDB Sql Query with predicates : {}\", queryStrBuilder);\r\n        return queryStrBuilder.toString();\r\n    }\r\n    throw new IllegalArgumentException(\"The TimelineReaderContext does not \" + \"have enough information to query documents for Collection : \" + collectionName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\reader\\cosmosdb",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void close()\n{\r\n    if (client != null) {\r\n        LOG.info(\"Closing Cosmos DB Reader Async Client...\");\r\n        client.close();\r\n        client = null;\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\reader\\cosmosdb",
  "methodName" : "addShutdownHook",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addShutdownHook()\n{\r\n    Runtime.getRuntime().addShutdownHook(new Thread(() -> {\r\n        if (executorService != null) {\r\n            executorService.shutdown();\r\n        }\r\n    }));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    storeType = DocumentStoreUtils.getStoreVendor(conf);\r\n    LOG.info(\"Initializing Document Store Writer for : \" + storeType);\r\n    super.serviceInit(conf);\r\n    this.appCollWriter = new TimelineCollectionWriter<>(CollectionType.APPLICATION, conf);\r\n    this.entityCollWriter = new TimelineCollectionWriter<>(CollectionType.ENTITY, conf);\r\n    this.flowActivityCollWriter = new TimelineCollectionWriter<>(CollectionType.FLOW_ACTIVITY, conf);\r\n    this.flowRunCollWriter = new TimelineCollectionWriter<>(CollectionType.FLOW_RUN, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    super.serviceStart();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    super.serviceStop();\r\n    appCollWriter.close();\r\n    entityCollWriter.close();\r\n    flowActivityCollWriter.close();\r\n    flowRunCollWriter.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "TimelineWriteResponse write(TimelineCollectorContext context, TimelineEntities data, UserGroupInformation callerUgi)\n{\r\n    LOG.debug(\"Writing Timeline Entity for appID : {}\", context.getAppId());\r\n    TimelineWriteResponse putStatus = new TimelineWriteResponse();\r\n    String subApplicationUser = callerUgi.getShortUserName();\r\n    if (DocumentStoreUtils.isNullOrEmpty(context.getFlowName(), context.getAppId(), context.getClusterId(), context.getUserId())) {\r\n        LOG.warn(\"Found NULL for one of: flowName={} appId={} \" + \"userId={} clusterId={} . Not proceeding on writing to store : \" + storeType);\r\n        return putStatus;\r\n    }\r\n    for (TimelineEntity timelineEntity : data.getEntities()) {\r\n        if (timelineEntity == null) {\r\n            continue;\r\n        }\r\n        TimelineEntityDocument entityDocument;\r\n        if (ApplicationEntity.isApplicationEntity(timelineEntity)) {\r\n            entityDocument = createTimelineEntityDoc(context, subApplicationUser, timelineEntity, true);\r\n            FlowRunDocument flowRunDoc = createFlowRunDoc(context, timelineEntity.getMetrics());\r\n            FlowActivityDocument flowActivityDoc = getFlowActivityDoc(context, timelineEntity, flowRunDoc, entityDocument);\r\n            writeApplicationDoc(entityDocument);\r\n            writeFlowRunDoc(flowRunDoc);\r\n            if (flowActivityDoc != null) {\r\n                storeFlowActivityDoc(flowActivityDoc);\r\n            }\r\n        } else {\r\n            entityDocument = createTimelineEntityDoc(context, subApplicationUser, timelineEntity, false);\r\n            appendSubAppUserIfExists(context, subApplicationUser);\r\n            entityDocument.setCreatedTime(fetchEntityCreationTime(timelineEntity));\r\n            writeEntityDoc(entityDocument);\r\n        }\r\n    }\r\n    return putStatus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineWriteResponse write(TimelineCollectorContext context, TimelineDomain domain) throws IOException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "appendSubAppUserIfExists",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void appendSubAppUserIfExists(TimelineCollectorContext context, String subApplicationUser)\n{\r\n    String userId = context.getUserId();\r\n    if (!userId.equals(subApplicationUser) && !userId.contains(subApplicationUser)) {\r\n        userId = userId.concat(DOC_ID_DELIMITER).concat(subApplicationUser);\r\n        context.setUserId(userId);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "createTimelineEntityDoc",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "TimelineEntityDocument createTimelineEntityDoc(TimelineCollectorContext context, String subApplicationUser, TimelineEntity timelineEntity, boolean isAppEntity)\n{\r\n    TimelineEntityDocument entityDocument = new TimelineEntityDocument(timelineEntity);\r\n    entityDocument.setContext(context);\r\n    entityDocument.setFlowVersion(context.getFlowVersion());\r\n    entityDocument.setSubApplicationUser(subApplicationUser);\r\n    if (isAppEntity) {\r\n        entityDocument.setId(DocumentStoreUtils.constructTimelineEntityDocId(context, timelineEntity.getType()));\r\n    } else {\r\n        entityDocument.setId(DocumentStoreUtils.constructTimelineEntityDocId(context, timelineEntity.getType(), timelineEntity.getId()));\r\n    }\r\n    return entityDocument;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "createFlowRunDoc",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "FlowRunDocument createFlowRunDoc(TimelineCollectorContext context, Set<TimelineMetric> metrics)\n{\r\n    FlowRunDocument flowRunDoc = new FlowRunDocument(context, metrics);\r\n    flowRunDoc.setFlowVersion(context.getFlowVersion());\r\n    flowRunDoc.setId(DocumentStoreUtils.constructFlowRunDocId(context));\r\n    return flowRunDoc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "fetchEntityCreationTime",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "long fetchEntityCreationTime(TimelineEntity timelineEntity)\n{\r\n    TimelineEvent event;\r\n    switch(TimelineEntityType.valueOf(timelineEntity.getType())) {\r\n        case YARN_CONTAINER:\r\n            event = DocumentStoreUtils.fetchEvent(timelineEntity, ContainerMetricsConstants.CREATED_EVENT_TYPE);\r\n            if (event != null) {\r\n                return event.getTimestamp();\r\n            }\r\n            break;\r\n        case YARN_APPLICATION_ATTEMPT:\r\n            event = DocumentStoreUtils.fetchEvent(timelineEntity, AppAttemptMetricsConstants.REGISTERED_EVENT_TYPE);\r\n            if (event != null) {\r\n                return event.getTimestamp();\r\n            }\r\n            break;\r\n        default:\r\n    }\r\n    if (timelineEntity.getCreatedTime() == null) {\r\n        return 0;\r\n    }\r\n    return timelineEntity.getCreatedTime();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "getFlowActivityDoc",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "FlowActivityDocument getFlowActivityDoc(TimelineCollectorContext context, TimelineEntity timelineEntity, FlowRunDocument flowRunDoc, TimelineEntityDocument entityDocument)\n{\r\n    FlowActivityDocument flowActivityDoc = null;\r\n    TimelineEvent event = DocumentStoreUtils.fetchEvent(timelineEntity, ApplicationMetricsConstants.CREATED_EVENT_TYPE);\r\n    if (event != null) {\r\n        entityDocument.setCreatedTime(event.getTimestamp());\r\n        flowRunDoc.setMinStartTime(event.getTimestamp());\r\n        flowActivityDoc = createFlowActivityDoc(context, context.getFlowName(), context.getFlowVersion(), context.getFlowRunId(), event);\r\n    }\r\n    event = DocumentStoreUtils.fetchEvent(timelineEntity, ApplicationMetricsConstants.FINISHED_EVENT_TYPE);\r\n    if (event != null) {\r\n        flowRunDoc.setMaxEndTime(event.getTimestamp());\r\n        if (flowActivityDoc == null) {\r\n            flowActivityDoc = createFlowActivityDoc(context, context.getFlowName(), context.getFlowVersion(), context.getFlowRunId(), event);\r\n        }\r\n    }\r\n    return flowActivityDoc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "createFlowActivityDoc",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "FlowActivityDocument createFlowActivityDoc(TimelineCollectorContext context, String flowName, String flowVersion, long flowRunId, TimelineEvent event)\n{\r\n    FlowActivityDocument flowActivityDoc = new FlowActivityDocument(flowName, flowVersion, flowRunId);\r\n    flowActivityDoc.setDayTimestamp(DocumentStoreUtils.getTopOfTheDayTimestamp(event.getTimestamp()));\r\n    flowActivityDoc.setFlowName(flowName);\r\n    flowActivityDoc.setUser(context.getUserId());\r\n    flowActivityDoc.setId(DocumentStoreUtils.constructFlowActivityDocId(context, event.getTimestamp()));\r\n    return flowActivityDoc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "writeFlowRunDoc",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void writeFlowRunDoc(FlowRunDocument flowRunDoc)\n{\r\n    flowRunCollWriter.writeDocument(flowRunDoc);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "storeFlowActivityDoc",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void storeFlowActivityDoc(FlowActivityDocument flowActivityDoc)\n{\r\n    flowActivityCollWriter.writeDocument(flowActivityDoc);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "writeEntityDoc",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void writeEntityDoc(TimelineEntityDocument entityDocument)\n{\r\n    entityCollWriter.writeDocument(entityDocument);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "writeApplicationDoc",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void writeApplicationDoc(TimelineEntityDocument entityDocument)\n{\r\n    appCollWriter.writeDocument(entityDocument);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "aggregate",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineWriteResponse aggregate(TimelineEntity data, TimelineAggregationTrack track)\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "flush",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void flush()\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\reader",
  "methodName" : "readDocument",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "TimelineEntityDocument readDocument(TimelineReaderContext context) throws IOException\n{\r\n    LOG.debug(\"Fetching document for entity type {}\", context.getEntityType());\r\n    switch(TimelineEntityType.valueOf(context.getEntityType())) {\r\n        case YARN_APPLICATION:\r\n            return genericEntityDocReader.readDocument(CollectionType.APPLICATION.getCollectionName(), context, TimelineEntityDocument.class);\r\n        case YARN_FLOW_RUN:\r\n            FlowRunDocument flowRunDoc = flowRunDocReader.readDocument(CollectionType.FLOW_RUN.getCollectionName(), context, FlowRunDocument.class);\r\n            FlowRunEntity flowRun = createFlowRunEntity(flowRunDoc);\r\n            return new TimelineEntityDocument(flowRun);\r\n        case YARN_FLOW_ACTIVITY:\r\n            FlowActivityDocument flowActivityDoc = flowActivityDocReader.readDocument(CollectionType.FLOW_RUN.getCollectionName(), context, FlowActivityDocument.class);\r\n            FlowActivityEntity flowActivity = createFlowActivityEntity(context, flowActivityDoc);\r\n            return new TimelineEntityDocument(flowActivity);\r\n        default:\r\n            return genericEntityDocReader.readDocument(CollectionType.ENTITY.getCollectionName(), context, TimelineEntityDocument.class);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\reader",
  "methodName" : "readDocuments",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "List<TimelineEntityDocument> readDocuments(TimelineReaderContext context, long documentsSize) throws IOException\n{\r\n    List<TimelineEntityDocument> entityDocs = new ArrayList<>();\r\n    LOG.debug(\"Fetching documents for entity type {}\", context.getEntityType());\r\n    switch(TimelineEntityType.valueOf(context.getEntityType())) {\r\n        case YARN_APPLICATION:\r\n            return genericEntityDocReader.readDocumentList(CollectionType.APPLICATION.getCollectionName(), context, TimelineEntityDocument.class, documentsSize);\r\n        case YARN_FLOW_RUN:\r\n            List<FlowRunDocument> flowRunDocs = flowRunDocReader.readDocumentList(CollectionType.FLOW_RUN.getCollectionName(), context, FlowRunDocument.class, documentsSize);\r\n            for (FlowRunDocument flowRunDoc : flowRunDocs) {\r\n                entityDocs.add(new TimelineEntityDocument(createFlowRunEntity(flowRunDoc)));\r\n            }\r\n            return entityDocs;\r\n        case YARN_FLOW_ACTIVITY:\r\n            List<FlowActivityDocument> flowActivityDocs = flowActivityDocReader.readDocumentList(CollectionType.FLOW_ACTIVITY.getCollectionName(), context, FlowActivityDocument.class, documentsSize);\r\n            for (FlowActivityDocument flowActivityDoc : flowActivityDocs) {\r\n                entityDocs.add(new TimelineEntityDocument(createFlowActivityEntity(context, flowActivityDoc)));\r\n            }\r\n            return entityDocs;\r\n        default:\r\n            return genericEntityDocReader.readDocumentList(CollectionType.ENTITY.getCollectionName(), context, TimelineEntityDocument.class, documentsSize);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\reader",
  "methodName" : "fetchEntityTypes",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Set<String> fetchEntityTypes(TimelineReaderContext context)\n{\r\n    LOG.debug(\"Fetching all entity-types for appId : {}\", context.getAppId());\r\n    return genericEntityDocReader.fetchEntityTypes(CollectionType.ENTITY.getCollectionName(), context);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\reader",
  "methodName" : "createFlowActivityEntity",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "FlowActivityEntity createFlowActivityEntity(TimelineReaderContext context, FlowActivityDocument flowActivityDoc)\n{\r\n    FlowActivityEntity flowActivity = new FlowActivityEntity(context.getClusterId(), flowActivityDoc.getDayTimestamp(), flowActivityDoc.getUser(), flowActivityDoc.getFlowName());\r\n    flowActivity.setId(flowActivityDoc.getId());\r\n    for (FlowActivitySubDoc activity : flowActivityDoc.getFlowActivities()) {\r\n        FlowRunEntity flowRunEntity = new FlowRunEntity();\r\n        flowRunEntity.setUser(flowActivityDoc.getUser());\r\n        flowRunEntity.setName(activity.getFlowName());\r\n        flowRunEntity.setRunId(activity.getFlowRunId());\r\n        flowRunEntity.setVersion(activity.getFlowVersion());\r\n        flowRunEntity.setId(flowRunEntity.getId());\r\n        flowActivity.addFlowRun(flowRunEntity);\r\n    }\r\n    flowActivity.getInfo().put(TimelineReaderUtils.FROMID_KEY, flowActivityDoc.getId());\r\n    flowActivity.setCreatedTime(flowActivityDoc.getDayTimestamp());\r\n    return flowActivity;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\reader",
  "methodName" : "createFlowRunEntity",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "FlowRunEntity createFlowRunEntity(FlowRunDocument flowRunDoc)\n{\r\n    FlowRunEntity flowRun = new FlowRunEntity();\r\n    flowRun.setRunId(flowRunDoc.getFlowRunId());\r\n    flowRun.setUser(flowRunDoc.getUsername());\r\n    flowRun.setName(flowRunDoc.getFlowName());\r\n    if (flowRunDoc.getMinStartTime() > 0) {\r\n        flowRun.setStartTime(flowRunDoc.getMinStartTime());\r\n    }\r\n    if (flowRunDoc.getMaxEndTime() > 0) {\r\n        flowRun.setMaxEndTime(flowRunDoc.getMaxEndTime());\r\n    }\r\n    if (!DocumentStoreUtils.isNullOrEmpty(flowRunDoc.getFlowVersion())) {\r\n        flowRun.setVersion(flowRunDoc.getFlowVersion());\r\n    }\r\n    flowRun.setMetrics(flowRunDoc.fetchTimelineMetrics());\r\n    flowRun.setId(flowRunDoc.getId());\r\n    flowRun.getInfo().put(TimelineReaderUtils.FROMID_KEY, flowRunDoc.getId());\r\n    return flowRun;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\reader",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void close() throws Exception\n{\r\n    genericEntityDocReader.close();\r\n    flowRunDocReader.close();\r\n    flowActivityDocReader.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\writer\\cosmosdb",
  "methodName" : "initCosmosDBClient",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void initCosmosDBClient(Configuration conf)\n{\r\n    if (client == null) {\r\n        LOG.info(\"Creating Cosmos DB Writer Async Client...\");\r\n        client = DocumentStoreUtils.createCosmosDBAsyncClient(conf);\r\n        addShutdownHook();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\writer\\cosmosdb",
  "methodName" : "createDatabase",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void createDatabase()\n{\r\n    Observable<ResourceResponse<Database>> databaseReadObs = client.readDatabase(String.format(DATABASE_LINK, databaseName), null);\r\n    Observable<ResourceResponse<Database>> databaseExistenceObs = databaseReadObs.doOnNext(databaseResourceResponse -> LOG.info(\"Database {} already exists.\", databaseName)).onErrorResumeNext(throwable -> {\r\n        if (throwable instanceof DocumentClientException) {\r\n            DocumentClientException de = (DocumentClientException) throwable;\r\n            if (de.getStatusCode() == 404) {\r\n                LOG.info(\"Creating new Database : {}\", databaseName);\r\n                Database dbDefinition = new Database();\r\n                dbDefinition.setId(databaseName);\r\n                return client.createDatabase(dbDefinition, null);\r\n            }\r\n        }\r\n        LOG.error(\"Reading database : {} if it exists failed.\", databaseName, throwable);\r\n        return Observable.error(throwable);\r\n    });\r\n    databaseExistenceObs.toCompletable().await();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\writer\\cosmosdb",
  "methodName" : "createCollection",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void createCollection(final String collectionName)\n{\r\n    LOG.info(\"Creating Timeline Collection : {} for Database : {}\", collectionName, databaseName);\r\n    client.queryCollections(String.format(DATABASE_LINK, databaseName), new SqlQuerySpec(QUERY_COLLECTION_IF_EXISTS, new SqlParameterCollection(new SqlParameter(ID, collectionName))), null).single().flatMap((Func1<FeedResponse<DocumentCollection>, Observable<?>>) page -> {\r\n        if (page.getResults().isEmpty()) {\r\n            DocumentCollection collection = new DocumentCollection();\r\n            collection.setId(collectionName);\r\n            LOG.info(\"Creating collection {}\", collectionName);\r\n            return client.createCollection(String.format(DATABASE_LINK, databaseName), collection, null);\r\n        } else {\r\n            LOG.info(\"Collection {} already exists.\", collectionName);\r\n            return Observable.empty();\r\n        }\r\n    }).doOnError(throwable -> LOG.error(\"Unable to create collection : {}\", collectionName, throwable)).toCompletable().await();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\writer\\cosmosdb",
  "methodName" : "writeDocument",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void writeDocument(final TimelineDoc timelineDoc, final CollectionType collectionType)\n{\r\n    LOG.debug(\"Upserting document under collection : {} with  entity type : \" + \"{} under Database {}\", databaseName, timelineDoc.getType(), collectionType.getCollectionName());\r\n    boolean succeeded = false;\r\n    long startTime = Time.monotonicNow();\r\n    try {\r\n        upsertDocument(collectionType, timelineDoc);\r\n        succeeded = true;\r\n    } catch (Exception e) {\r\n        LOG.error(\"Unable to perform upsert for Document Id : {} under \" + \"Collection : {} under Database {}\", timelineDoc.getId(), collectionType.getCollectionName(), databaseName, e);\r\n    } finally {\r\n        long latency = Time.monotonicNow() - startTime;\r\n        METRICS.addPutEntitiesLatency(latency, succeeded);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\writer\\cosmosdb",
  "methodName" : "upsertDocument",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void upsertDocument(final CollectionType collectionType, final TimelineDoc timelineDoc)\n{\r\n    final String collectionLink = String.format(COLLECTION_LINK, databaseName, collectionType.getCollectionName());\r\n    RequestOptions requestOptions = new RequestOptions();\r\n    AccessCondition accessCondition = new AccessCondition();\r\n    StringBuilder eTagStrBuilder = new StringBuilder();\r\n    final TimelineDoc updatedTimelineDoc = applyUpdatesOnPrevDoc(collectionType, timelineDoc, eTagStrBuilder);\r\n    accessCondition.setCondition(eTagStrBuilder.toString());\r\n    accessCondition.setType(AccessConditionType.IfMatch);\r\n    requestOptions.setAccessCondition(accessCondition);\r\n    ResourceResponse<Document> resourceResponse = client.upsertDocument(collectionLink, updatedTimelineDoc, requestOptions, true).subscribeOn(schedulerForBlockingWork).doOnError(throwable -> LOG.error(\"Error while upserting Collection : {} \" + \"with Doc Id : {} under Database : {}\", collectionType.getCollectionName(), updatedTimelineDoc.getId(), databaseName, throwable)).toBlocking().single();\r\n    if (resourceResponse.getStatusCode() == 409) {\r\n        LOG.warn(\"There was a conflict while upserting, hence retrying...\", resourceResponse);\r\n        upsertDocument(collectionType, updatedTimelineDoc);\r\n    } else if (resourceResponse.getStatusCode() >= 200 && resourceResponse.getStatusCode() < 300) {\r\n        LOG.debug(\"Successfully wrote doc with id : {} and type : {} under \" + \"Database : {}\", timelineDoc.getId(), timelineDoc.getType(), databaseName);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\writer\\cosmosdb",
  "methodName" : "applyUpdatesOnPrevDoc",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "TimelineDoc applyUpdatesOnPrevDoc(CollectionType collectionType, TimelineDoc timelineDoc, StringBuilder eTagStrBuilder)\n{\r\n    TimelineDoc prevDocument = fetchLatestDoc(collectionType, timelineDoc.getId(), eTagStrBuilder);\r\n    if (prevDocument != null) {\r\n        prevDocument.merge(timelineDoc);\r\n        timelineDoc = prevDocument;\r\n    }\r\n    return timelineDoc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\writer\\cosmosdb",
  "methodName" : "fetchLatestDoc",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "TimelineDoc fetchLatestDoc(final CollectionType collectionType, final String documentId, StringBuilder eTagStrBuilder)\n{\r\n    final String documentLink = String.format(DOCUMENT_LINK, databaseName, collectionType.getCollectionName(), documentId);\r\n    try {\r\n        Document latestDocument = client.readDocument(documentLink, new RequestOptions()).toBlocking().single().getResource();\r\n        TimelineDoc timelineDoc;\r\n        switch(collectionType) {\r\n            case FLOW_RUN:\r\n                timelineDoc = (TimelineDoc) latestDocument.toObject(FlowRunDocument.class);\r\n                break;\r\n            case FLOW_ACTIVITY:\r\n                timelineDoc = (TimelineDoc) latestDocument.toObject(FlowActivityDocument.class);\r\n                break;\r\n            default:\r\n                timelineDoc = (TimelineDoc) latestDocument.toObject(TimelineEntityDocument.class);\r\n        }\r\n        eTagStrBuilder.append(latestDocument.getETag());\r\n        return timelineDoc;\r\n    } catch (Exception e) {\r\n        LOG.debug(\"No previous Document found with id : {} for Collection\" + \" : {} under Database : {}\", documentId, collectionType.getCollectionName(), databaseName);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\writer\\cosmosdb",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void close()\n{\r\n    if (client != null) {\r\n        LOG.info(\"Closing Cosmos DB Writer Async Client...\");\r\n        client.close();\r\n        client = null;\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\writer\\cosmosdb",
  "methodName" : "addShutdownHook",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addShutdownHook()\n{\r\n    Runtime.getRuntime().addShutdownHook(new Thread(() -> {\r\n        if (executorService != null) {\r\n            executorService.shutdown();\r\n        }\r\n    }));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
} ]