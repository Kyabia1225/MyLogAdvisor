[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "run",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "int run(String[] args) throws Exception\n{\r\n    CommandLineParser parser = new GnuParser();\r\n    CommandLine command = parser.parse(FedBalanceOptions.CLI_OPTIONS, args, true);\r\n    String[] leftOverArgs = command.getArgs();\r\n    if (leftOverArgs == null || leftOverArgs.length < 1) {\r\n        printUsage();\r\n        return -1;\r\n    }\r\n    String cmd = leftOverArgs[0];\r\n    if (cmd.equals(SUBMIT_COMMAND)) {\r\n        if (leftOverArgs.length < 3) {\r\n            printUsage();\r\n            return -1;\r\n        }\r\n        String inputSrc = leftOverArgs[1];\r\n        String inputDst = leftOverArgs[2];\r\n        return submit(command, inputSrc, inputDst);\r\n    } else if (cmd.equals(CONTINUE_COMMAND)) {\r\n        return continueJob();\r\n    } else {\r\n        printUsage();\r\n        return -1;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "continueJob",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "int continueJob() throws InterruptedException\n{\r\n    BalanceProcedureScheduler scheduler = new BalanceProcedureScheduler(getConf());\r\n    try {\r\n        scheduler.init(true);\r\n        while (true) {\r\n            Collection<BalanceJob> jobs = scheduler.getAllJobs();\r\n            int unfinished = 0;\r\n            for (BalanceJob job : jobs) {\r\n                if (!job.isJobDone()) {\r\n                    unfinished++;\r\n                }\r\n                LOG.info(job.toString());\r\n            }\r\n            if (unfinished == 0) {\r\n                break;\r\n            }\r\n            Thread.sleep(TimeUnit.SECONDS.toMillis(10));\r\n        }\r\n    } catch (IOException e) {\r\n        LOG.error(\"Continue balance job failed.\", e);\r\n        return -1;\r\n    } finally {\r\n        scheduler.shutDown();\r\n    }\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "submit",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 25,
  "sourceCodeText" : "int submit(CommandLine command, String inputSrc, String inputDst) throws IOException\n{\r\n    Builder builder = new Builder(inputSrc, inputDst);\r\n    builder.setForceCloseOpen(command.hasOption(FORCE_CLOSE_OPEN.getOpt()));\r\n    if (command.hasOption(MAP.getOpt())) {\r\n        builder.setMap(Integer.parseInt(command.getOptionValue(MAP.getOpt())));\r\n    }\r\n    if (command.hasOption(BANDWIDTH.getOpt())) {\r\n        builder.setBandWidth(Integer.parseInt(command.getOptionValue(BANDWIDTH.getOpt())));\r\n    }\r\n    if (command.hasOption(DELAY_DURATION.getOpt())) {\r\n        builder.setDelayDuration(Long.parseLong(command.getOptionValue(DELAY_DURATION.getOpt())));\r\n    }\r\n    if (command.hasOption(DIFF_THRESHOLD.getOpt())) {\r\n        builder.setDiffThreshold(Integer.parseInt(command.getOptionValue(DIFF_THRESHOLD.getOpt())));\r\n    }\r\n    if (command.hasOption(TRASH.getOpt())) {\r\n        String val = command.getOptionValue(TRASH.getOpt());\r\n        if (val.equalsIgnoreCase(\"skip\")) {\r\n            builder.setTrashOpt(TrashOption.SKIP);\r\n        } else if (val.equalsIgnoreCase(\"trash\")) {\r\n            builder.setTrashOpt(TrashOption.TRASH);\r\n        } else if (val.equalsIgnoreCase(\"delete\")) {\r\n            builder.setTrashOpt(TrashOption.DELETE);\r\n        } else {\r\n            printUsage();\r\n            return -1;\r\n        }\r\n    }\r\n    BalanceProcedureScheduler scheduler = new BalanceProcedureScheduler(getConf());\r\n    scheduler.init(false);\r\n    try {\r\n        BalanceJob balanceJob = builder.build();\r\n        scheduler.submit(balanceJob);\r\n        scheduler.waitUntilDone(balanceJob);\r\n    } catch (IOException e) {\r\n        LOG.error(\"Submit balance job failed.\", e);\r\n        return -1;\r\n    } finally {\r\n        scheduler.shutDown();\r\n    }\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "printUsage",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void printUsage()\n{\r\n    HelpFormatter formatter = new HelpFormatter();\r\n    formatter.printHelp(\"fedbalance OPTIONS [submit|continue] <src> <target>\\n\\nOPTIONS\", CLI_OPTIONS);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "getDefaultConf",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Configuration getDefaultConf()\n{\r\n    Configuration config = new Configuration();\r\n    config.addResource(FED_BALANCE_DEFAULT_XML);\r\n    config.addResource(FED_BALANCE_SITE_XML);\r\n    return config;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "main",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void main(String[] argv)\n{\r\n    Configuration conf = getDefaultConf();\r\n    FedBalance fedBalance = new FedBalance();\r\n    fedBalance.setConf(conf);\r\n    int exitCode;\r\n    try {\r\n        exitCode = ToolRunner.run(fedBalance, argv);\r\n    } catch (Exception e) {\r\n        LOG.warn(\"Couldn't complete FedBalance operation.\", e);\r\n        exitCode = -1;\r\n    }\r\n    System.exit(exitCode);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void init(boolean recoverJobs) throws IOException\n{\r\n    this.runningQueue = new LinkedBlockingQueue<>();\r\n    this.delayQueue = new DelayQueue<>();\r\n    this.recoverQueue = new LinkedBlockingQueue<>();\r\n    this.jobSet = new ConcurrentHashMap<>();\r\n    this.roosterThread = new Rooster();\r\n    this.roosterThread.setDaemon(true);\r\n    roosterThread.start();\r\n    this.recoverThread = new Recover();\r\n    this.recoverThread.setDaemon(true);\r\n    recoverThread.start();\r\n    int workerNum = conf.getInt(WORK_THREAD_NUM, WORK_THREAD_NUM_DEFAULT);\r\n    workersPool = new ThreadPoolExecutor(workerNum, workerNum * 2, 1, TimeUnit.MILLISECONDS, new LinkedBlockingDeque<>());\r\n    this.readerThread = new Reader();\r\n    this.readerThread.start();\r\n    journal = new BalanceJournalInfoHDFS();\r\n    journal.setConf(conf);\r\n    if (recoverJobs) {\r\n        recoverAllJobs();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "submit",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void submit(BalanceJob job) throws IOException\n{\r\n    if (!running.get()) {\r\n        throw new IOException(\"Scheduler is shutdown.\");\r\n    }\r\n    String jobId = allocateJobId();\r\n    job.setId(jobId);\r\n    job.setScheduler(this);\r\n    journal.saveJob(job);\r\n    jobSet.put(job, job);\r\n    runningQueue.add(job);\r\n    LOG.info(\"Add new job={}\", job);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "remove",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "BalanceJob remove(BalanceJob job)\n{\r\n    BalanceJob inner = findJob(job);\r\n    if (inner == null) {\r\n        return null;\r\n    } else if (job.isJobDone()) {\r\n        synchronized (this) {\r\n            return jobSet.remove(inner);\r\n        }\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "findJob",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "BalanceJob findJob(BalanceJob job)\n{\r\n    BalanceJob found = null;\r\n    for (BalanceJob j : jobSet.keySet()) {\r\n        if (j.getId().equals(job.getId())) {\r\n            found = j;\r\n            break;\r\n        }\r\n    }\r\n    return found;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "getAllJobs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Collection<BalanceJob> getAllJobs()\n{\r\n    return jobSet.values();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "waitUntilDone",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void waitUntilDone(BalanceJob job)\n{\r\n    BalanceJob found = findJob(job);\r\n    if (found == null || found.isJobDone()) {\r\n        return;\r\n    }\r\n    while (!found.isJobDone()) {\r\n        try {\r\n            found.waitJobDone();\r\n        } catch (InterruptedException e) {\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "delay",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void delay(BalanceJob job, long delayInMilliseconds)\n{\r\n    delayQueue.add(new DelayWrapper(job, delayInMilliseconds));\r\n    LOG.info(\"Need delay {}ms. Add to delayQueue. job={}\", delayInMilliseconds, job);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "jobDone",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "boolean jobDone(BalanceJob job)\n{\r\n    try {\r\n        journal.clear(job);\r\n        if (job.shouldRemoveAfterDone()) {\r\n            jobSet.remove(job);\r\n        }\r\n        return true;\r\n    } catch (IOException e) {\r\n        LOG.warn(\"Clear journal failed, add to recoverQueue. job=\" + job, e);\r\n        recoverQueue.add(job);\r\n        return false;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "writeJournal",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean writeJournal(BalanceJob job)\n{\r\n    try {\r\n        journal.saveJob(job);\r\n        return true;\r\n    } catch (Exception e) {\r\n        LOG.warn(\"Save procedure failed, add to recoverQueue. job=\" + job, e);\r\n        recoverQueue.add(job);\r\n        return false;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "isRunning",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isRunning()\n{\r\n    return running.get();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "shutDown",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void shutDown()\n{\r\n    if (!running.get()) {\r\n        return;\r\n    }\r\n    running.set(false);\r\n    readerThread.interrupt();\r\n    roosterThread.interrupt();\r\n    recoverThread.interrupt();\r\n    workersPool.shutdownNow();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "shutDownAndWait",
  "errType" : [ "InterruptedException", "InterruptedException", "InterruptedException", "InterruptedException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void shutDownAndWait(int timeout)\n{\r\n    shutDown();\r\n    while (readerThread.isAlive()) {\r\n        try {\r\n            readerThread.join();\r\n        } catch (InterruptedException e) {\r\n        }\r\n    }\r\n    while (roosterThread.isAlive()) {\r\n        try {\r\n            roosterThread.join();\r\n        } catch (InterruptedException e) {\r\n        }\r\n    }\r\n    while (recoverThread.isAlive()) {\r\n        try {\r\n            recoverThread.join();\r\n        } catch (InterruptedException e) {\r\n        }\r\n    }\r\n    while (!workersPool.isTerminated()) {\r\n        try {\r\n            workersPool.awaitTermination(timeout, TimeUnit.SECONDS);\r\n        } catch (InterruptedException e) {\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 4,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "recoverAllJobs",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void recoverAllJobs() throws IOException\n{\r\n    BalanceJob[] jobs = journal.listAllJobs();\r\n    for (BalanceJob job : jobs) {\r\n        recoverQueue.add(job);\r\n        jobSet.put(job, job);\r\n        LOG.info(\"Recover federation balance job {}.\", job);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "allocateJobId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String allocateJobId()\n{\r\n    return \"job-\" + UUID.randomUUID();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "setJournal",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setJournal(BalanceJournal journal)\n{\r\n    this.journal = journal;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "getConf",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Configuration getConf()\n{\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "getSrc",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Path getSrc()\n{\r\n    return src;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "getDst",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Path getDst()\n{\r\n    return dst;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "getMount",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getMount()\n{\r\n    return mount;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "getForceCloseOpenFiles",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean getForceCloseOpenFiles()\n{\r\n    return forceCloseOpenFiles;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "getUseMountReadOnly",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean getUseMountReadOnly()\n{\r\n    return useMountReadOnly;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "getMapNum",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getMapNum()\n{\r\n    return mapNum;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "getBandwidthLimit",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getBandwidthLimit()\n{\r\n    return bandwidthLimit;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "getDiffThreshold",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getDiffThreshold()\n{\r\n    return diffThreshold;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "getTrashOpt",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TrashOption getTrashOpt()\n{\r\n    return trashOpt;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void write(DataOutput out) throws IOException\n{\r\n    conf.write(out);\r\n    Text.writeString(out, src.toString());\r\n    Text.writeString(out, dst.toString());\r\n    Text.writeString(out, mount);\r\n    out.writeBoolean(forceCloseOpenFiles);\r\n    out.writeBoolean(useMountReadOnly);\r\n    out.writeInt(mapNum);\r\n    out.writeInt(bandwidthLimit);\r\n    out.writeInt(trashOpt.ordinal());\r\n    out.writeLong(delayDuration);\r\n    out.writeInt(diffThreshold);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "readFields",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void readFields(DataInput in) throws IOException\n{\r\n    conf = new Configuration(false);\r\n    conf.readFields(in);\r\n    src = new Path(Text.readString(in));\r\n    dst = new Path(Text.readString(in));\r\n    mount = Text.readString(in);\r\n    forceCloseOpenFiles = in.readBoolean();\r\n    useMountReadOnly = in.readBoolean();\r\n    mapNum = in.readInt();\r\n    bandwidthLimit = in.readInt();\r\n    trashOpt = TrashOption.values()[in.readInt()];\r\n    delayDuration = in.readLong();\r\n    diffThreshold = in.readInt();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean equals(Object obj)\n{\r\n    if (obj == null) {\r\n        return false;\r\n    }\r\n    if (obj == this) {\r\n        return true;\r\n    }\r\n    if (obj.getClass() != getClass()) {\r\n        return false;\r\n    }\r\n    FedBalanceContext bc = (FedBalanceContext) obj;\r\n    return new EqualsBuilder().append(src, bc.src).append(dst, bc.dst).append(mount, bc.mount).append(forceCloseOpenFiles, bc.forceCloseOpenFiles).append(useMountReadOnly, bc.useMountReadOnly).append(mapNum, bc.mapNum).append(bandwidthLimit, bc.bandwidthLimit).append(trashOpt, bc.trashOpt).append(delayDuration, bc.delayDuration).append(diffThreshold, bc.diffThreshold).isEquals();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return new HashCodeBuilder(17, 37).append(src).append(dst).append(mount).append(forceCloseOpenFiles).append(useMountReadOnly).append(mapNum).append(bandwidthLimit).append(trashOpt).append(delayDuration).append(diffThreshold).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder builder = new StringBuilder();\r\n    builder.append(\"Move \").append(src).append(\" to \").append(dst);\r\n    if (useMountReadOnly) {\r\n        builder.append(\" using router mode, mount point=\").append(mount).append(\".\");\r\n    } else {\r\n        builder.append(\" using normal federation mode.\");\r\n    }\r\n    builder.append(\" Submit distcp job with map=\").append(mapNum).append(\" and bandwidth=\").append(bandwidthLimit).append(\".\");\r\n    builder.append(\" When the diff count is no greater than \").append(diffThreshold);\r\n    if (forceCloseOpenFiles) {\r\n        builder.append(\", force close all open files.\");\r\n    } else {\r\n        builder.append(\", wait until there is no open files.\");\r\n    }\r\n    switch(trashOpt) {\r\n        case DELETE:\r\n            builder.append(\" Delete the src after the job is complete.\");\r\n            break;\r\n        case TRASH:\r\n            builder.append(\" Move the src to trash after the job is complete.\");\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    builder.append(\" Delay duration is \").append(delayDuration).append(\"ms.\");\r\n    return builder.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "execute",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean execute() throws RetryException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "delayMillisBeforeRetry",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long delayMillisBeforeRetry()\n{\r\n    return delayDuration;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "isSchedulerShutdown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isSchedulerShutdown()\n{\r\n    return job.isSchedulerShutdown();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "setNextProcedure",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNextProcedure(String nextProcedure)\n{\r\n    this.nextProcedure = nextProcedure;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "setJob",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setJob(BalanceJob job)\n{\r\n    this.job = job;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "nextProcedure",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String nextProcedure()\n{\r\n    return nextProcedure;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "name",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String name()\n{\r\n    return name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void write(DataOutput out) throws IOException\n{\r\n    if (nextProcedure == null) {\r\n        Text.writeString(out, NEXT_PROCEDURE_NONE);\r\n    } else {\r\n        Text.writeString(out, nextProcedure);\r\n    }\r\n    Text.writeString(out, name);\r\n    new LongWritable(delayDuration).write(out);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "readFields",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void readFields(DataInput in) throws IOException\n{\r\n    nextProcedure = Text.readString(in);\r\n    name = Text.readString(in);\r\n    delayDuration = readLong(in);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "readLong",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long readLong(DataInput in) throws IOException\n{\r\n    LongWritable delayWritable = new LongWritable();\r\n    delayWritable.readFields(in);\r\n    return delayWritable.get();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return new HashCodeBuilder(17, 37).append(nextProcedure).append(name).append(delayDuration).toHashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean equals(Object obj)\n{\r\n    if (obj == null) {\r\n        return false;\r\n    }\r\n    if (obj == this) {\r\n        return true;\r\n    }\r\n    if (obj.getClass() != getClass()) {\r\n        return false;\r\n    }\r\n    BalanceProcedure rhs = (BalanceProcedure) obj;\r\n    return new EqualsBuilder().append(nextProcedure, rhs.nextProcedure).append(name, rhs.name).append(delayDuration, rhs.delayDuration).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return name + \":\" + this.getClass().getName();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "saveJob",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void saveJob(BalanceJob job) throws IOException\n{\r\n    Path jobFile = getNewStateJobPath(job);\r\n    Path tmpJobFile = new Path(jobFile + TMP_TAIL);\r\n    FSDataOutputStream out = null;\r\n    try {\r\n        FileSystem fs = FileSystem.get(workUri, conf);\r\n        out = fs.create(tmpJobFile);\r\n        job.write(new DataOutputStream(out));\r\n        out.close();\r\n        out = null;\r\n        fs.rename(tmpJobFile, jobFile);\r\n    } finally {\r\n        IOUtils.closeStream(out);\r\n    }\r\n    LOG.debug(\"Save journal of job={}\", job);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "recoverJob",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void recoverJob(BalanceJob job) throws IOException\n{\r\n    FSDataInputStream in = null;\r\n    try {\r\n        Path logPath = getLatestStateJobPath(job);\r\n        FileSystem fs = FileSystem.get(workUri, conf);\r\n        in = fs.open(logPath);\r\n        job.readFields(in);\r\n        LOG.debug(\"Recover job={} from journal.\", job);\r\n    } finally {\r\n        if (in != null) {\r\n            in.close();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "listAllJobs",
  "errType" : [ "FileNotFoundException" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "BalanceJob[] listAllJobs() throws IOException\n{\r\n    FileSystem fs = FileSystem.get(workUri, conf);\r\n    Path workPath = new Path(workUri.getPath());\r\n    FileStatus[] statuses;\r\n    try {\r\n        statuses = fs.listStatus(workPath);\r\n    } catch (FileNotFoundException e) {\r\n        LOG.debug(\"Create work path {}\", workPath);\r\n        fs.mkdirs(workPath);\r\n        return new BalanceJob[0];\r\n    }\r\n    BalanceJob[] jobs = new BalanceJob[statuses.length];\r\n    StringBuilder builder = new StringBuilder();\r\n    builder.append(\"List all jobs from journal [\");\r\n    for (int i = 0; i < statuses.length; i++) {\r\n        if (statuses[i].isDirectory()) {\r\n            jobs[i] = new BalanceJob.Builder<>().build();\r\n            jobs[i].setId(statuses[i].getPath().getName());\r\n            builder.append(jobs[i]);\r\n            if (i < statuses.length - 1) {\r\n                builder.append(\", \");\r\n            }\r\n        }\r\n    }\r\n    builder.append(\"]\");\r\n    LOG.debug(builder.toString());\r\n    return jobs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "clear",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void clear(BalanceJob job) throws IOException\n{\r\n    Path jobBase = getJobBaseDir(job);\r\n    FileSystem fs = FileSystem.get(workUri, conf);\r\n    if (fs.exists(jobBase)) {\r\n        fs.delete(jobBase, true);\r\n    }\r\n    LOG.debug(\"Clear journal of job=\" + job);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "setConf",
  "errType" : [ "URISyntaxException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setConf(Configuration conf)\n{\r\n    try {\r\n        this.workUri = new URI(conf.get(SCHEDULER_JOURNAL_URI));\r\n    } catch (URISyntaxException e) {\r\n        throw new IllegalArgumentException(\"URI resolution failed.\", e);\r\n    }\r\n    this.conf = conf;\r\n    this.generator = new IdGenerator(Time.monotonicNow());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "getConf",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Configuration getConf()\n{\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "getJobBaseDir",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path getJobBaseDir(BalanceJob job)\n{\r\n    String jobId = job.getId();\r\n    return new Path(workUri.getPath(), jobId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "getNewStateJobPath",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path getNewStateJobPath(BalanceJob job)\n{\r\n    Path basePath = getJobBaseDir(job);\r\n    Path logPath = new Path(basePath, JOB_PREFIX + generator.nextValue());\r\n    return logPath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "getLatestStateJobPath",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "Path getLatestStateJobPath(BalanceJob job) throws IOException\n{\r\n    Path latestFile = null;\r\n    Path basePath = getJobBaseDir(job);\r\n    FileSystem fs = FileSystem.get(workUri, conf);\r\n    RemoteIterator<LocatedFileStatus> iterator = fs.listFiles(basePath, false);\r\n    while (iterator.hasNext()) {\r\n        FileStatus status = iterator.next();\r\n        String fileName = status.getPath().getName();\r\n        if (fileName.startsWith(JOB_PREFIX) && !fileName.contains(TMP_TAIL)) {\r\n            if (latestFile == null) {\r\n                latestFile = status.getPath();\r\n            } else if (latestFile.getName().compareTo(fileName) <= 0) {\r\n                latestFile = status.getPath();\r\n            }\r\n        }\r\n    }\r\n    return latestFile;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "enableForTest",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void enableForTest()\n{\r\n    enabledForTest = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "disableForTest",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void disableForTest()\n{\r\n    enabledForTest = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "execute",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "boolean execute() throws RetryException, IOException\n{\r\n    LOG.info(\"Stage={}\", stage.name());\r\n    switch(stage) {\r\n        case PRE_CHECK:\r\n            preCheck();\r\n            return false;\r\n        case INIT_DISTCP:\r\n            initDistCp();\r\n            return false;\r\n        case DIFF_DISTCP:\r\n            diffDistCp();\r\n            return false;\r\n        case DISABLE_WRITE:\r\n            disableWrite(context);\r\n            return false;\r\n        case FINAL_DISTCP:\r\n            finalDistCp();\r\n            return false;\r\n        case FINISH:\r\n            finish();\r\n            return true;\r\n        default:\r\n            throw new IOException(\"Unexpected stage=\" + stage);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "preCheck",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void preCheck() throws IOException\n{\r\n    FileStatus status = srcFs.getFileStatus(src);\r\n    if (!status.isDirectory()) {\r\n        throw new IOException(src + \" should be a directory.\");\r\n    }\r\n    if (dstFs.exists(dst)) {\r\n        throw new IOException(dst + \" already exists.\");\r\n    }\r\n    if (srcFs.exists(new Path(src, HdfsConstants.DOT_SNAPSHOT_DIR))) {\r\n        throw new IOException(src + \" shouldn't enable snapshot.\");\r\n    }\r\n    updateStage(Stage.INIT_DISTCP);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "initDistCp",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void initDistCp() throws IOException, RetryException\n{\r\n    RunningJobStatus job = getCurrentJob();\r\n    if (job != null) {\r\n        if (job.isComplete()) {\r\n            jobId = null;\r\n            if (job.isSuccessful()) {\r\n                updateStage(Stage.DIFF_DISTCP);\r\n                return;\r\n            } else {\r\n                LOG.warn(\"DistCp failed. Failure={}\", job.getFailureInfo());\r\n            }\r\n        } else {\r\n            throw new RetryException();\r\n        }\r\n    } else {\r\n        pathCheckBeforeInitDistcp();\r\n        srcFs.createSnapshot(src, CURRENT_SNAPSHOT_NAME);\r\n        jobId = submitDistCpJob(src.toString() + HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR_SEPARATOR + CURRENT_SNAPSHOT_NAME, dst.toString(), false);\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "diffDistCp",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void diffDistCp() throws IOException, RetryException\n{\r\n    RunningJobStatus job = getCurrentJob();\r\n    if (job != null) {\r\n        if (job.isComplete()) {\r\n            jobId = null;\r\n            if (job.isSuccessful()) {\r\n                LOG.info(\"DistCp succeeded. jobId={}\", job.getJobID());\r\n            } else {\r\n                throw new IOException(\"DistCp failed. jobId=\" + job.getJobID() + \" failure=\" + job.getFailureInfo());\r\n            }\r\n        } else {\r\n            throw new RetryException();\r\n        }\r\n    } else if (diffDistCpStageDone()) {\r\n        updateStage(Stage.DISABLE_WRITE);\r\n    } else {\r\n        submitDiffDistCp();\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "disableWrite",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void disableWrite(FedBalanceContext fbcontext) throws IOException\n{\r\n    FileStatus status = srcFs.getFileStatus(src);\r\n    fPerm = status.getPermission();\r\n    acl = srcFs.getAclStatus(src);\r\n    srcFs.setPermission(src, FsPermission.createImmutable((short) 0));\r\n    updateStage(Stage.FINAL_DISTCP);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "enableWrite",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void enableWrite() throws IOException\n{\r\n    restorePermission();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "restorePermission",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void restorePermission() throws IOException\n{\r\n    dstFs.removeAcl(dst);\r\n    if (acl != null) {\r\n        dstFs.modifyAclEntries(dst, acl.getEntries());\r\n    }\r\n    if (fPerm != null) {\r\n        dstFs.setPermission(dst, fPerm);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "finalDistCp",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void finalDistCp() throws IOException, RetryException\n{\r\n    closeAllOpenFiles(srcFs, src);\r\n    RunningJobStatus job = getCurrentJob();\r\n    if (job != null) {\r\n        if (job.isComplete()) {\r\n            jobId = null;\r\n            if (job.isSuccessful()) {\r\n                updateStage(Stage.FINISH);\r\n                return;\r\n            } else {\r\n                throw new IOException(\"Final DistCp failed. Failure: \" + job.getFailureInfo());\r\n            }\r\n        } else {\r\n            throw new RetryException();\r\n        }\r\n    } else {\r\n        submitDiffDistCp();\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "finish",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void finish() throws IOException\n{\r\n    enableWrite();\r\n    if (srcFs.exists(src)) {\r\n        cleanupSnapshot(srcFs, src);\r\n    }\r\n    if (dstFs.exists(dst)) {\r\n        cleanupSnapshot(dstFs, dst);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "getStage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Stage getStage()\n{\r\n    return stage;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "updateStage",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void updateStage(Stage value)\n{\r\n    String oldStage = stage == null ? \"null\" : stage.name();\r\n    String newStage = value == null ? \"null\" : value.name();\r\n    LOG.info(\"Stage updated from {} to {}.\", oldStage, newStage);\r\n    stage = value;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "submitDiffDistCp",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void submitDiffDistCp() throws IOException\n{\r\n    enableSnapshot(dstFs, dst);\r\n    deleteSnapshot(srcFs, src, LAST_SNAPSHOT_NAME);\r\n    deleteSnapshot(dstFs, dst, LAST_SNAPSHOT_NAME);\r\n    dstFs.createSnapshot(dst, LAST_SNAPSHOT_NAME);\r\n    srcFs.renameSnapshot(src, CURRENT_SNAPSHOT_NAME, LAST_SNAPSHOT_NAME);\r\n    srcFs.createSnapshot(src, CURRENT_SNAPSHOT_NAME);\r\n    jobId = submitDistCpJob(src.toString(), dst.toString(), true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "closeAllOpenFiles",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void closeAllOpenFiles(DistributedFileSystem dfs, Path path) throws IOException\n{\r\n    String pathStr = path.toUri().getPath();\r\n    while (true) {\r\n        RemoteIterator<OpenFileEntry> iterator = dfs.listOpenFiles(EnumSet.of(OpenFilesType.ALL_OPEN_FILES), pathStr);\r\n        if (!iterator.hasNext()) {\r\n            break;\r\n        }\r\n        while (iterator.hasNext()) {\r\n            OpenFileEntry e = iterator.next();\r\n            try {\r\n                srcFs.recoverLease(new Path(e.getFilePath()));\r\n            } catch (IOException re) {\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "diffDistCpStageDone",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean diffDistCpStageDone() throws IOException, RetryException\n{\r\n    int diffSize = getDiffSize();\r\n    if (diffSize <= diffThreshold) {\r\n        if (forceCloseOpenFiles || !verifyOpenFiles()) {\r\n            return true;\r\n        } else {\r\n            throw new RetryException();\r\n        }\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "getDiffSize",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int getDiffSize() throws IOException\n{\r\n    SnapshotDiffReport diffReport = srcFs.getSnapshotDiffReport(src, CURRENT_SNAPSHOT_NAME, \"\");\r\n    return diffReport.getDiffList().size();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "verifyOpenFiles",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean verifyOpenFiles() throws IOException\n{\r\n    RemoteIterator<OpenFileEntry> iterator = srcFs.listOpenFiles(EnumSet.of(OpenFilesType.ALL_OPEN_FILES), src.toString());\r\n    return iterator.hasNext();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "getCurrentJob",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RunningJobStatus getCurrentJob() throws IOException\n{\r\n    if (jobId != null) {\r\n        if (enabledForTest) {\r\n            return getCurrentLocalJob();\r\n        } else {\r\n            RunningJob latestJob = client.getJob(JobID.forName(jobId));\r\n            return latestJob == null ? null : new YarnRunningJobStatus(latestJob);\r\n        }\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "getCurrentLocalJob",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LocalJobStatus getCurrentLocalJob() throws IOException\n{\r\n    if (localJob != null) {\r\n        Job latestJob;\r\n        try {\r\n            latestJob = localJob.getCluster().getJob(JobID.forName(jobId));\r\n        } catch (InterruptedException e) {\r\n            throw new IOException(e);\r\n        }\r\n        return latestJob == null ? null : new LocalJobStatus(latestJob);\r\n    } else {\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "pathCheckBeforeInitDistcp",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void pathCheckBeforeInitDistcp() throws IOException\n{\r\n    if (dstFs.exists(dst)) {\r\n        throw new IOException(\"The dst path=\" + dst + \" already exists. The admin\" + \" should delete it before submitting the initial distcp job.\");\r\n    }\r\n    Path snapshotPath = new Path(src, HdfsConstants.DOT_SNAPSHOT_DIR_SEPARATOR + CURRENT_SNAPSHOT_NAME);\r\n    if (srcFs.exists(snapshotPath)) {\r\n        throw new IOException(\"The src snapshot=\" + snapshotPath + \" already exists. The admin should delete the snapshot before\" + \" submitting the initial distcp.\");\r\n    }\r\n    srcFs.allowSnapshot(src);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "submitDistCpJob",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 14,
  "sourceCodeText" : "String submitDistCpJob(String srcParam, String dstParam, boolean useSnapshotDiff) throws IOException\n{\r\n    List<String> command = new ArrayList<>();\r\n    command.addAll(Arrays.asList(new String[] { \"-async\", \"-update\", \"-append\", \"-pruxgpcab\" }));\r\n    if (useSnapshotDiff) {\r\n        command.add(\"-diff\");\r\n        command.add(LAST_SNAPSHOT_NAME);\r\n        command.add(CURRENT_SNAPSHOT_NAME);\r\n    }\r\n    command.add(\"-m\");\r\n    command.add(mapNum + \"\");\r\n    command.add(\"-bandwidth\");\r\n    command.add(bandWidth + \"\");\r\n    command.add(srcParam);\r\n    command.add(dstParam);\r\n    Configuration config = new Configuration(conf);\r\n    DistCp distCp;\r\n    try {\r\n        distCp = new DistCp(config, OptionsParser.parse(command.toArray(new String[] {})));\r\n        Job job = distCp.createAndSubmitJob();\r\n        LOG.info(\"Submit distcp job={}\", job);\r\n        if (enabledForTest) {\r\n            localJob = job;\r\n        }\r\n        return job.getJobID().toString();\r\n    } catch (Exception e) {\r\n        throw new IOException(\"Submit job failed.\", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void write(DataOutput out) throws IOException\n{\r\n    super.write(out);\r\n    context.write(out);\r\n    if (jobId == null) {\r\n        out.writeBoolean(false);\r\n    } else {\r\n        out.writeBoolean(true);\r\n        Text.writeString(out, jobId);\r\n    }\r\n    out.writeInt(stage.ordinal());\r\n    if (fPerm == null) {\r\n        out.writeBoolean(false);\r\n    } else {\r\n        out.writeBoolean(true);\r\n        out.writeShort(fPerm.toShort());\r\n    }\r\n    if (acl == null) {\r\n        out.writeBoolean(false);\r\n    } else {\r\n        out.writeBoolean(true);\r\n        ByteArrayOutputStream bout = new ByteArrayOutputStream();\r\n        PBHelperClient.convert(acl).writeDelimitedTo(bout);\r\n        byte[] data = bout.toByteArray();\r\n        out.writeInt(data.length);\r\n        out.write(data);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "readFields",
  "errType" : null,
  "containingMethodsNum" : 22,
  "sourceCodeText" : "void readFields(DataInput in) throws IOException\n{\r\n    super.readFields(in);\r\n    context = new FedBalanceContext();\r\n    context.readFields(in);\r\n    src = context.getSrc();\r\n    dst = context.getDst();\r\n    conf = context.getConf();\r\n    if (in.readBoolean()) {\r\n        jobId = Text.readString(in);\r\n    }\r\n    stage = Stage.values()[in.readInt()];\r\n    if (in.readBoolean()) {\r\n        fPerm = FsPermission.read(in);\r\n    }\r\n    if (in.readBoolean()) {\r\n        int len = in.readInt();\r\n        byte[] data = new byte[len];\r\n        in.readFully(data);\r\n        ByteArrayInputStream bin = new ByteArrayInputStream(data);\r\n        AclProtos.GetAclStatusResponseProto proto = AclProtos.GetAclStatusResponseProto.parseDelimitedFrom(bin);\r\n        acl = PBHelperClient.convert(proto);\r\n    }\r\n    srcFs = (DistributedFileSystem) context.getSrc().getFileSystem(conf);\r\n    dstFs = (DistributedFileSystem) context.getDst().getFileSystem(conf);\r\n    mapNum = context.getMapNum();\r\n    bandWidth = context.getBandwidthLimit();\r\n    forceCloseOpenFiles = context.getForceCloseOpenFiles();\r\n    useMountReadOnly = context.getUseMountReadOnly();\r\n    this.client = new JobClient(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "enableSnapshot",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void enableSnapshot(DistributedFileSystem dfs, Path path) throws IOException\n{\r\n    if (!dfs.exists(new Path(path, HdfsConstants.DOT_SNAPSHOT_DIR))) {\r\n        dfs.allowSnapshot(path);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "deleteSnapshot",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void deleteSnapshot(DistributedFileSystem dfs, Path path, String snapshotName) throws IOException\n{\r\n    Path snapshot = new Path(path, HdfsConstants.DOT_SNAPSHOT_DIR_SEPARATOR + snapshotName);\r\n    if (dfs.exists(snapshot)) {\r\n        dfs.deleteSnapshot(path, snapshotName);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "cleanupSnapshot",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void cleanupSnapshot(DistributedFileSystem dfs, Path path) throws IOException\n{\r\n    if (dfs.exists(new Path(path, HdfsConstants.DOT_SNAPSHOT_DIR))) {\r\n        FileStatus[] status = dfs.listStatus(new Path(path, HdfsConstants.DOT_SNAPSHOT_DIR));\r\n        for (FileStatus s : status) {\r\n            deleteSnapshot(dfs, path, s.getPath().getName());\r\n        }\r\n        dfs.disallowSnapshot(path);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "execute",
  "errType" : [ "BalanceProcedure.RetryException", "Exception", "Throwable" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void execute()\n{\r\n    boolean quit = false;\r\n    try {\r\n        while (!jobDone && !quit && scheduler.isRunning()) {\r\n            if (curProcedure == null) {\r\n                finish(null);\r\n                quit = true;\r\n            } else {\r\n                if (curProcedure == firstProcedure || lastProcedure != curProcedure) {\r\n                    LOG.info(\"Start procedure {}, last procedure is {}\", curProcedure.name(), lastProcedure == null ? null : lastProcedure.name());\r\n                }\r\n                if (curProcedure.execute()) {\r\n                    lastProcedure = curProcedure;\r\n                    curProcedure = next();\r\n                }\r\n                if (!scheduler.writeJournal(this)) {\r\n                    quit = true;\r\n                    LOG.debug(\"Write journal failed. Quit and wait for recovery.\");\r\n                }\r\n            }\r\n        }\r\n    } catch (BalanceProcedure.RetryException tre) {\r\n        scheduler.delay(this, curProcedure.delayMillisBeforeRetry());\r\n    } catch (Exception e) {\r\n        finish(e);\r\n    } catch (Throwable t) {\r\n        IOException err = new IOException(\"Got throwable error.\", t);\r\n        finish(err);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "next",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "T next()\n{\r\n    if (curProcedure == null) {\r\n        return firstProcedure;\r\n    } else {\r\n        return procedureTable.get(curProcedure.nextProcedure());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "finish",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void finish(Exception exception)\n{\r\n    assert !jobDone;\r\n    if (scheduler.jobDone(this)) {\r\n        jobDone = true;\r\n        error = exception;\r\n        notifyAll();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "setScheduler",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setScheduler(BalanceProcedureScheduler scheduler)\n{\r\n    this.scheduler = scheduler;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "setId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setId(String id)\n{\r\n    this.id = id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "getId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getId()\n{\r\n    return this.id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "shouldRemoveAfterDone",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean shouldRemoveAfterDone()\n{\r\n    return removeAfterDone;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "setLastProcedure",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setLastProcedure(T lastProcedure)\n{\r\n    this.lastProcedure = lastProcedure;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "setCurrentProcedure",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setCurrentProcedure(T currentProcedure)\n{\r\n    this.curProcedure = currentProcedure;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "isJobDone",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isJobDone()\n{\r\n    return jobDone;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "waitJobDone",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void waitJobDone() throws InterruptedException\n{\r\n    while (!jobDone) {\r\n        wait();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "getError",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Exception getError()\n{\r\n    return error;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void write(DataOutput out) throws IOException\n{\r\n    if (id == null) {\r\n        throw new IOException(\"BalanceJob with id=null can not be serialized.\");\r\n    }\r\n    Text.writeString(out, id);\r\n    int taskTableSize = procedureTable.size();\r\n    out.writeInt(taskTableSize);\r\n    for (T p : procedureTable.values()) {\r\n        Text.writeString(out, p.getClass().getName());\r\n        p.write(out);\r\n    }\r\n    if (firstProcedure != null) {\r\n        Text.writeString(out, firstProcedure.name());\r\n    } else {\r\n        Text.writeString(out, NEXT_PROCEDURE_NONE);\r\n    }\r\n    if (curProcedure != null) {\r\n        Text.writeString(out, curProcedure.name());\r\n    } else {\r\n        Text.writeString(out, NEXT_PROCEDURE_NONE);\r\n    }\r\n    if (lastProcedure != null) {\r\n        Text.writeString(out, lastProcedure.name());\r\n    } else {\r\n        Text.writeString(out, NEXT_PROCEDURE_NONE);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "readFields",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void readFields(DataInput in) throws IOException\n{\r\n    this.id = Text.readString(in);\r\n    procedureTable = new HashMap<>();\r\n    int taskTableSize = in.readInt();\r\n    for (int i = 0; i < taskTableSize; i++) {\r\n        String className = Text.readString(in);\r\n        try {\r\n            T p = (T) ReflectionUtils.newInstance(Class.forName(className), null);\r\n            p.readFields(in);\r\n            procedureTable.put(p.name(), p);\r\n        } catch (Exception e) {\r\n            LOG.error(\"Failed reading Procedure.\", e);\r\n            throw new IOException(e);\r\n        }\r\n    }\r\n    String firstProcedureName = Text.readString(in);\r\n    if (firstProcedureName.equals(NEXT_PROCEDURE_NONE)) {\r\n        firstProcedure = null;\r\n    } else {\r\n        firstProcedure = procedureTable.get(firstProcedureName);\r\n    }\r\n    String currentProcedureName = Text.readString(in);\r\n    if (currentProcedureName.equals(NEXT_PROCEDURE_NONE)) {\r\n        curProcedure = null;\r\n    } else {\r\n        curProcedure = procedureTable.get(currentProcedureName);\r\n    }\r\n    String lastProcedureName = Text.readString(in);\r\n    if (lastProcedureName.equals(NEXT_PROCEDURE_NONE)) {\r\n        lastProcedure = null;\r\n    } else {\r\n        lastProcedure = procedureTable.get(lastProcedureName);\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean equals(Object obj)\n{\r\n    if (obj == null) {\r\n        return false;\r\n    }\r\n    if (obj == this) {\r\n        return true;\r\n    }\r\n    if (obj.getClass() != getClass()) {\r\n        return false;\r\n    }\r\n    BalanceJob bj = (BalanceJob) obj;\r\n    return new EqualsBuilder().append(id, bj.id).append(procedureTable, bj.procedureTable).append(firstProcedure, bj.firstProcedure).isEquals();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return new HashCodeBuilder(17, 37).append(id).append(procedureTable).toHashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String toString()\n{\r\n    return \"{jobId=\" + id + \"}\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "getDetailMessage",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "String getDetailMessage()\n{\r\n    StringBuilder builder = new StringBuilder();\r\n    builder.append(\"id=\").append(id);\r\n    if (firstProcedure != null) {\r\n        builder.append(\",firstProcedure=\").append(firstProcedure);\r\n    }\r\n    if (curProcedure != null) {\r\n        builder.append(\",currentProcedure=\").append(curProcedure);\r\n    }\r\n    builder.append(\",jobDone=\").append(jobDone);\r\n    if (error != null) {\r\n        builder.append(\",error=\").append(error.getMessage());\r\n    }\r\n    return builder.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "isSchedulerShutdown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isSchedulerShutdown()\n{\r\n    return !scheduler.isRunning();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "getProcedureTable",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, T> getProcedureTable()\n{\r\n    return procedureTable;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "getCurProcedure",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "T getCurProcedure()\n{\r\n    return curProcedure;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "execute",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean execute() throws IOException\n{\r\n    moveToTrash();\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "moveToTrash",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void moveToTrash() throws IOException\n{\r\n    Path src = context.getSrc();\r\n    if (srcFs.exists(src)) {\r\n        TrashOption trashOption = context.getTrashOpt();\r\n        switch(trashOption) {\r\n            case TRASH:\r\n                conf.setFloat(FS_TRASH_INTERVAL_KEY, 60);\r\n                if (!Trash.moveToAppropriateTrash(srcFs, src, conf)) {\r\n                    throw new IOException(\"Failed move \" + src + \" to trash.\");\r\n                }\r\n                break;\r\n            case DELETE:\r\n                if (!srcFs.delete(src, true)) {\r\n                    throw new IOException(\"Failed delete \" + src);\r\n                }\r\n                LOG.info(\"{} is deleted.\", src);\r\n                break;\r\n            case SKIP:\r\n                break;\r\n            default:\r\n                throw new IOException(\"Unexpected trash option=\" + trashOption);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "getContext",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "FedBalanceContext getContext()\n{\r\n    return context;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void write(DataOutput out) throws IOException\n{\r\n    super.write(out);\r\n    context.write(out);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\main\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "readFields",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void readFields(DataInput in) throws IOException\n{\r\n    super.readFields(in);\r\n    context = new FedBalanceContext();\r\n    context.readFields(in);\r\n    conf = context.getConf();\r\n    srcFs = (DistributedFileSystem) context.getSrc().getFileSystem(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
} ]