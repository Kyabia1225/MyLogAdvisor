[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void init(Configuration conf)\n{\r\n    if (!initialized) {\r\n        super.init(conf);\r\n        initialized = true;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "stop",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void stop()\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "forceStop",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void forceStop()\n{\r\n    expectedInstances.clear();\r\n    stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getConfig",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Configuration getConfig()\n{\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "actionCreate",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ApplicationId actionCreate(Service service) throws IOException\n{\r\n    ServiceApiUtil.validateAndResolveService(service, new SliderFileSystem(conf), getConfig());\r\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    serviceAppId.put(service.getName(), appId);\r\n    return appId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getStatus",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Service getStatus(String appName) throws FileNotFoundException\n{\r\n    if (\"jenkins\".equals(appName)) {\r\n        return goodServiceStatus;\r\n    } else {\r\n        throw new FileNotFoundException(\"Service \" + appName + \" not found\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "actionStartAndGetId",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ApplicationId actionStartAndGetId(String serviceName) throws YarnException, IOException\n{\r\n    if (serviceName != null && serviceName.equals(\"jenkins\")) {\r\n        ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n        serviceAppId.put(serviceName, appId);\r\n        return appId;\r\n    } else {\r\n        throw new ApplicationNotFoundException(\"\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "actionStop",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int actionStop(String serviceName, boolean waitForAppStopped) throws YarnException, IOException\n{\r\n    if (serviceName == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    if (serviceName.equals(\"jenkins\")) {\r\n        return EXIT_SUCCESS;\r\n    } else if (serviceName.equals(\"jenkins-second-stop\")) {\r\n        return EXIT_COMMAND_ARGUMENT_ERROR;\r\n    } else {\r\n        throw new ApplicationNotFoundException(\"\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "actionDestroy",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "int actionDestroy(String serviceName)\n{\r\n    if (serviceName != null) {\r\n        if (serviceName.equals(\"jenkins\")) {\r\n            return EXIT_SUCCESS;\r\n        } else if (serviceName.equals(\"jenkins-already-stopped\")) {\r\n            return EXIT_SUCCESS;\r\n        } else if (serviceName.equals(\"jenkins-doesn't-exist\")) {\r\n            return EXIT_NOT_FOUND;\r\n        } else if (serviceName.equals(\"jenkins-error-cleaning-registry\")) {\r\n            return EXIT_OTHER_FAILURE;\r\n        }\r\n    }\r\n    throw new IllegalArgumentException();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "initiateUpgrade",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int initiateUpgrade(Service service) throws YarnException, IOException\n{\r\n    if (service.getName() != null && service.getName().equals(\"jenkins\")) {\r\n        return EXIT_SUCCESS;\r\n    } else {\r\n        throw new IllegalArgumentException();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "actionUpgrade",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "int actionUpgrade(Service service, List<Container> compInstances) throws IOException, YarnException\n{\r\n    if (service.getName() != null && service.getName().equals(\"jenkins\") && compInstances != null) {\r\n        Set<String> actualInstances = compInstances.stream().map(Container::getComponentInstanceName).collect(Collectors.toSet());\r\n        if (actualInstances.equals(expectedInstances)) {\r\n            return EXIT_SUCCESS;\r\n        }\r\n    }\r\n    throw new IllegalArgumentException();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getGoodServiceStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Service getGoodServiceStatus()\n{\r\n    return goodServiceStatus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "setExpectedInstances",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setExpectedInstances(Set<String> instances)\n{\r\n    if (instances != null) {\r\n        expectedInstances.addAll(instances);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "buildGoodService",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "Service buildGoodService()\n{\r\n    Service service = new Service();\r\n    service.setName(\"jenkins\");\r\n    service.setVersion(\"v1\");\r\n    Artifact artifact = new Artifact();\r\n    artifact.setType(Artifact.TypeEnum.DOCKER);\r\n    artifact.setId(\"jenkins:latest\");\r\n    Resource resource = new Resource();\r\n    resource.setCpus(1);\r\n    resource.setMemory(\"2048\");\r\n    List<Component> components = new ArrayList<>();\r\n    for (int i = 0; i < 2; i++) {\r\n        Component c = new Component();\r\n        c.setName(\"jenkins\" + i);\r\n        c.setNumberOfContainers(2L);\r\n        c.setArtifact(artifact);\r\n        c.setLaunchCommand(\"\");\r\n        c.setResource(resource);\r\n        components.add(c);\r\n    }\r\n    service.setComponents(components);\r\n    return service;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "buildLiveGoodService",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "Service buildLiveGoodService()\n{\r\n    Service service = buildGoodService();\r\n    Component comp = service.getComponents().iterator().next();\r\n    List<Container> containers = new ArrayList<>();\r\n    for (int i = 0; i < comp.getNumberOfContainers(); i++) {\r\n        Container container = new Container();\r\n        container.setComponentInstanceName(comp.getName() + \"-\" + (i + 1));\r\n        container.setState(ContainerState.READY);\r\n        containers.add(container);\r\n    }\r\n    comp.setContainers(containers);\r\n    return service;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getAppId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationId getAppId(String serviceName) throws IOException, YarnException\n{\r\n    return serviceAppId.get(serviceName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    server = new Server(8088);\r\n    ((QueuedThreadPool) server.getThreadPool()).setMaxThreads(20);\r\n    ServletContextHandler context = new ServletContextHandler();\r\n    context.setContextPath(\"/app\");\r\n    server.setHandler(context);\r\n    context.addServlet(new ServletHolder(TestServlet.class), \"/*\");\r\n    ((ServerConnector) server.getConnectors()[0]).setHost(\"localhost\");\r\n    server.start();\r\n    Configuration conf = new Configuration();\r\n    conf.set(\"yarn.resourcemanager.webapp.address\", \"localhost:8088\");\r\n    asc = new ApiServiceClient();\r\n    asc.serviceInit(conf);\r\n    Configuration conf2 = new Configuration();\r\n    conf2.set(\"yarn.resourcemanager.webapp.address\", \"localhost:8089\");\r\n    badAsc = new ApiServiceClient();\r\n    badAsc.serviceInit(conf2);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    server.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testGetRMWebAddress",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testGetRMWebAddress() throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, true);\r\n    conf.set(YarnConfiguration.RM_HA_IDS, \"rm1\");\r\n    conf.set(YarnConfiguration.RM_HA_ID, \"rm1\");\r\n    conf.set(\"yarn.resourcemanager.webapp.address.rm1\", \"localhost:0\");\r\n    ApiServiceClient asc1 = new ApiServiceClient(conf);\r\n    boolean exceptionCaught = false;\r\n    String diagnosticsMsg = null;\r\n    try {\r\n        String rmWebAddress = asc1.getRMWebAddress();\r\n    } catch (IOException e) {\r\n        exceptionCaught = true;\r\n        diagnosticsMsg = e.getMessage();\r\n    }\r\n    assertTrue(\"ApiServiceClient failed to throw exception\", exceptionCaught);\r\n    assertTrue(\"Exception Message does not match\", diagnosticsMsg.contains(\"Error connecting to localhost:0\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testLaunch",
  "errType" : [ "IOException|YarnException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testLaunch()\n{\r\n    String fileName = \"target/test-classes/example-app.json\";\r\n    String appName = \"example-app\";\r\n    long lifetime = 3600L;\r\n    String queue = \"default\";\r\n    try {\r\n        int result = asc.actionLaunch(fileName, appName, lifetime, queue);\r\n        assertEquals(EXIT_SUCCESS, result);\r\n    } catch (IOException | YarnException e) {\r\n        fail();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testBadLaunch",
  "errType" : [ "IOException|YarnException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testBadLaunch()\n{\r\n    String fileName = \"unknown_file\";\r\n    String appName = \"unknown_app\";\r\n    long lifetime = 3600L;\r\n    String queue = \"default\";\r\n    try {\r\n        int result = badAsc.actionLaunch(fileName, appName, lifetime, queue);\r\n        assertEquals(EXIT_EXCEPTION_THROWN, result);\r\n    } catch (IOException | YarnException e) {\r\n        fail();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testStatus",
  "errType" : [ "IOException|YarnException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testStatus()\n{\r\n    String appName = \"nonexistent-app\";\r\n    try {\r\n        String result = asc.getStatusString(appName);\r\n        assertEquals(\"Status reponse don't match\", \" Service \" + appName + \" not found\", result);\r\n    } catch (IOException | YarnException e) {\r\n        fail();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testStop",
  "errType" : [ "IOException|YarnException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testStop()\n{\r\n    String appName = \"example-app\";\r\n    try {\r\n        int result = asc.actionStop(appName);\r\n        assertEquals(EXIT_SUCCESS, result);\r\n    } catch (IOException | YarnException e) {\r\n        fail();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testBadStop",
  "errType" : [ "IOException|YarnException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testBadStop()\n{\r\n    String appName = \"unknown_app\";\r\n    try {\r\n        int result = badAsc.actionStop(appName);\r\n        assertEquals(EXIT_EXCEPTION_THROWN, result);\r\n    } catch (IOException | YarnException e) {\r\n        fail();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testStart",
  "errType" : [ "IOException|YarnException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testStart()\n{\r\n    String appName = \"example-app\";\r\n    try {\r\n        int result = asc.actionStart(appName);\r\n        assertEquals(EXIT_SUCCESS, result);\r\n    } catch (IOException | YarnException e) {\r\n        fail();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testBadStart",
  "errType" : [ "IOException|YarnException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testBadStart()\n{\r\n    String appName = \"unknown_app\";\r\n    try {\r\n        int result = badAsc.actionStart(appName);\r\n        assertEquals(EXIT_EXCEPTION_THROWN, result);\r\n    } catch (IOException | YarnException e) {\r\n        fail();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testSave",
  "errType" : [ "IOException|YarnException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testSave()\n{\r\n    String fileName = \"target/test-classes/example-app.json\";\r\n    String appName = \"example-app\";\r\n    long lifetime = 3600L;\r\n    String queue = \"default\";\r\n    try {\r\n        int result = asc.actionSave(fileName, appName, lifetime, queue);\r\n        assertEquals(EXIT_SUCCESS, result);\r\n    } catch (IOException | YarnException e) {\r\n        fail();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testBadSave",
  "errType" : [ "IOException|YarnException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testBadSave()\n{\r\n    String fileName = \"unknown_file\";\r\n    String appName = \"unknown_app\";\r\n    long lifetime = 3600L;\r\n    String queue = \"default\";\r\n    try {\r\n        int result = badAsc.actionSave(fileName, appName, lifetime, queue);\r\n        assertEquals(EXIT_EXCEPTION_THROWN, result);\r\n    } catch (IOException | YarnException e) {\r\n        fail();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testFlex",
  "errType" : [ "IOException|YarnException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testFlex()\n{\r\n    String appName = \"example-app\";\r\n    HashMap<String, String> componentCounts = new HashMap<String, String>();\r\n    try {\r\n        int result = asc.actionFlex(appName, componentCounts);\r\n        assertEquals(EXIT_SUCCESS, result);\r\n    } catch (IOException | YarnException e) {\r\n        fail();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testBadFlex",
  "errType" : [ "IOException|YarnException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testBadFlex()\n{\r\n    String appName = \"unknown_app\";\r\n    HashMap<String, String> componentCounts = new HashMap<String, String>();\r\n    try {\r\n        int result = badAsc.actionFlex(appName, componentCounts);\r\n        assertEquals(EXIT_EXCEPTION_THROWN, result);\r\n    } catch (IOException | YarnException e) {\r\n        fail();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testDestroy",
  "errType" : [ "IOException|YarnException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testDestroy()\n{\r\n    String appName = \"example-app\";\r\n    try {\r\n        int result = asc.actionDestroy(appName);\r\n        assertEquals(EXIT_SUCCESS, result);\r\n    } catch (IOException | YarnException e) {\r\n        fail();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testBadDestroy",
  "errType" : [ "IOException|YarnException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testBadDestroy()\n{\r\n    String appName = \"unknown_app\";\r\n    try {\r\n        int result = badAsc.actionDestroy(appName);\r\n        assertEquals(EXIT_EXCEPTION_THROWN, result);\r\n    } catch (IOException | YarnException e) {\r\n        fail();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testInitiateServiceUpgrade",
  "errType" : [ "IOException|YarnException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testInitiateServiceUpgrade()\n{\r\n    String appName = \"example-app\";\r\n    String upgradeFileName = \"target/test-classes/example-app.json\";\r\n    try {\r\n        int result = asc.initiateUpgrade(appName, upgradeFileName, false);\r\n        assertEquals(EXIT_SUCCESS, result);\r\n    } catch (IOException | YarnException e) {\r\n        fail();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testInstancesUpgrade",
  "errType" : [ "IOException|YarnException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testInstancesUpgrade()\n{\r\n    String appName = \"example-app\";\r\n    try {\r\n        int result = asc.actionUpgradeInstances(appName, Lists.newArrayList(\"comp-1\", \"comp-2\"));\r\n        assertEquals(EXIT_SUCCESS, result);\r\n    } catch (IOException | YarnException e) {\r\n        fail();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testComponentsUpgrade",
  "errType" : [ "IOException|YarnException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testComponentsUpgrade()\n{\r\n    String appName = \"example-app\";\r\n    try {\r\n        int result = asc.actionUpgradeComponents(appName, Lists.newArrayList(\"comp\"));\r\n        assertEquals(EXIT_SUCCESS, result);\r\n    } catch (IOException | YarnException e) {\r\n        fail();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testNoneSecureApiClient",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testNoneSecureApiClient() throws IOException\n{\r\n    String url = asc.getServicePath(\"/foobar\");\r\n    assertTrue(\"User.name flag is missing in service path.\", url.contains(\"user.name\"));\r\n    assertTrue(\"User.name flag is not matching JVM user.\", url.contains(System.getProperty(\"user.name\")));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    keytabFile = new File(getWorkDir(), \"keytab\");\r\n    getKdc().createPrincipal(keytabFile, clientPrincipal, server1Principal, server2Principal);\r\n    SecurityUtil.setAuthenticationMethod(AuthenticationMethod.KERBEROS, testConf);\r\n    UserGroupInformation.setConfiguration(testConf);\r\n    UserGroupInformation.setShouldRenewImmediatelyForTests(true);\r\n    props = new HashMap<String, String>();\r\n    props.put(Sasl.QOP, QualityOfProtection.AUTHENTICATION.saslQop);\r\n    server = new Server(8088);\r\n    ((QueuedThreadPool) server.getThreadPool()).setMaxThreads(20);\r\n    ServletContextHandler context = new ServletContextHandler();\r\n    context.setContextPath(\"/app\");\r\n    server.setHandler(context);\r\n    context.addServlet(new ServletHolder(TestServlet.class), \"/*\");\r\n    ((ServerConnector) server.getConnectors()[0]).setHost(\"localhost\");\r\n    server.start();\r\n    List<String> rmServers = new ArrayList<String>();\r\n    rmServers.add(\"localhost:8088\");\r\n    testConf.set(\"yarn.resourcemanager.webapp.address\", \"localhost:8088\");\r\n    testConf.setBoolean(YarnConfiguration.RM_HA_ENABLED, true);\r\n    asc = new ApiServiceClient() {\r\n\r\n        @Override\r\n        List<String> getRMHAWebAddresses(Configuration conf) {\r\n            return rmServers;\r\n        }\r\n    };\r\n    asc.serviceInit(testConf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    server.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testHttpSpnegoChallenge",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testHttpSpnegoChallenge() throws Exception\n{\r\n    UserGroupInformation.loginUserFromKeytab(clientPrincipal, keytabFile.getCanonicalPath());\r\n    String challenge = YarnClientUtils.generateToken(\"localhost\");\r\n    assertNotNull(challenge);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testAuthorizationHeader",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testAuthorizationHeader() throws Exception\n{\r\n    UserGroupInformation.loginUserFromKeytab(clientPrincipal, keytabFile.getCanonicalPath());\r\n    String rmAddress = asc.getRMWebAddress();\r\n    if (TestServlet.isHeaderExist()) {\r\n        assertEquals(rmAddress, \"http://localhost:8088\");\r\n    } else {\r\n        fail(\"Did not see Authorization header.\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    request = Mockito.mock(HttpServletRequest.class);\r\n    Mockito.when(request.getRemoteUser()).thenReturn(System.getProperty(\"user.name\"));\r\n    mockServerClient = new ServiceClientTest();\r\n    Configuration conf = new Configuration();\r\n    conf.set(\"yarn.api-service.service.client.class\", ServiceClientTest.class.getName());\r\n    apiServer = new ApiServer(conf);\r\n    apiServer.setServiceClient(mockServerClient);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "teardown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void teardown()\n{\r\n    mockServerClient.forceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testPathAnnotation",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testPathAnnotation()\n{\r\n    assertNotNull(this.apiServer.getClass().getAnnotation(Path.class));\r\n    assertTrue(\"The controller has the annotation Path\", this.apiServer.getClass().isAnnotationPresent(Path.class));\r\n    final Path path = this.apiServer.getClass().getAnnotation(Path.class);\r\n    assertEquals(\"The path has /v1 annotation\", \"/v1\", path.value());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testGetVersion",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testGetVersion()\n{\r\n    final Response actual = apiServer.getVersion();\r\n    assertEquals(\"Version number is\", Response.ok().build().getStatus(), actual.getStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testBadCreateService",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testBadCreateService()\n{\r\n    Service service = new Service();\r\n    final Response actual = apiServer.createService(request, service);\r\n    assertEquals(\"Create service is \", Response.status(Status.BAD_REQUEST).build().getStatus(), actual.getStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testGoodCreateService",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testGoodCreateService() throws Exception\n{\r\n    String json = \"{\\\"auths\\\": \" + \"{\\\"https://index.docker.io/v1/\\\": \" + \"{\\\"auth\\\": \\\"foobarbaz\\\"},\" + \"\\\"registry.example.com\\\": \" + \"{\\\"auth\\\": \\\"bazbarfoo\\\"}}}\";\r\n    File dockerTmpDir = new File(\"target\", \"docker-tmp\");\r\n    FileUtils.deleteQuietly(dockerTmpDir);\r\n    dockerTmpDir.mkdirs();\r\n    String dockerConfig = dockerTmpDir + \"/config.json\";\r\n    BufferedWriter bw = new BufferedWriter(new FileWriter(dockerConfig));\r\n    bw.write(json);\r\n    bw.close();\r\n    Service service = ServiceClientTest.buildGoodService();\r\n    final Response actual = apiServer.createService(request, service);\r\n    assertEquals(\"Create service is \", Response.status(Status.ACCEPTED).build().getStatus(), actual.getStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testInternalServerErrorDockerClientConfigMissingCreateService",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testInternalServerErrorDockerClientConfigMissingCreateService()\n{\r\n    Service service = new Service();\r\n    service.setName(\"jenkins\");\r\n    service.setVersion(\"v1\");\r\n    service.setDockerClientConfig(\"/does/not/exist/config.json\");\r\n    Artifact artifact = new Artifact();\r\n    artifact.setType(TypeEnum.DOCKER);\r\n    artifact.setId(\"jenkins:latest\");\r\n    Resource resource = new Resource();\r\n    resource.setCpus(1);\r\n    resource.setMemory(\"2048\");\r\n    List<Component> components = new ArrayList<>();\r\n    Component c = new Component();\r\n    c.setName(\"jenkins\");\r\n    c.setNumberOfContainers(1L);\r\n    c.setArtifact(artifact);\r\n    c.setLaunchCommand(\"\");\r\n    c.setResource(resource);\r\n    components.add(c);\r\n    service.setComponents(components);\r\n    final Response actual = apiServer.createService(request, service);\r\n    assertEquals(\"Create service is \", Response.status(Status.BAD_REQUEST).build().getStatus(), actual.getStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testBadGetService",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testBadGetService()\n{\r\n    final String serviceName = \"nonexistent-jenkins\";\r\n    final Response actual = apiServer.getService(request, serviceName);\r\n    assertEquals(\"Get service is \", Response.status(Status.NOT_FOUND).build().getStatus(), actual.getStatus());\r\n    ServiceStatus serviceStatus = (ServiceStatus) actual.getEntity();\r\n    assertEquals(\"Response code don't match\", RestApiConstants.ERROR_CODE_APP_NAME_INVALID, serviceStatus.getCode());\r\n    assertEquals(\"Response diagnostics don't match\", \"Service \" + serviceName + \" not found\", serviceStatus.getDiagnostics());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testBadGetService2",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testBadGetService2()\n{\r\n    final Response actual = apiServer.getService(request, null);\r\n    assertEquals(\"Get service is \", Response.status(Status.NOT_FOUND).build().getStatus(), actual.getStatus());\r\n    ServiceStatus serviceStatus = (ServiceStatus) actual.getEntity();\r\n    assertEquals(\"Response code don't match\", RestApiConstants.ERROR_CODE_APP_NAME_INVALID, serviceStatus.getCode());\r\n    assertEquals(\"Response diagnostics don't match\", \"Service name cannot be null.\", serviceStatus.getDiagnostics());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testGoodGetService",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testGoodGetService()\n{\r\n    final Response actual = apiServer.getService(request, \"jenkins\");\r\n    assertEquals(\"Get service is \", Response.status(Status.OK).build().getStatus(), actual.getStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testBadDeleteService",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testBadDeleteService()\n{\r\n    final Response actual = apiServer.deleteService(request, \"no-jenkins\");\r\n    assertEquals(\"Delete service is \", Response.status(Status.BAD_REQUEST).build().getStatus(), actual.getStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testBadDeleteService2",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testBadDeleteService2()\n{\r\n    final Response actual = apiServer.deleteService(request, null);\r\n    assertEquals(\"Delete service is \", Response.status(Status.BAD_REQUEST).build().getStatus(), actual.getStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testBadDeleteService3",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testBadDeleteService3()\n{\r\n    final Response actual = apiServer.deleteService(request, \"jenkins-doesn't-exist\");\r\n    assertEquals(\"Delete service is \", Response.status(Status.BAD_REQUEST).build().getStatus(), actual.getStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testBadDeleteService4",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testBadDeleteService4()\n{\r\n    final Response actual = apiServer.deleteService(request, \"jenkins-error-cleaning-registry\");\r\n    assertEquals(\"Delete service is \", Response.status(Status.INTERNAL_SERVER_ERROR).build().getStatus(), actual.getStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testGoodDeleteService",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testGoodDeleteService()\n{\r\n    final Response actual = apiServer.deleteService(request, \"jenkins\");\r\n    assertEquals(\"Delete service is \", Response.status(Status.OK).build().getStatus(), actual.getStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testDeleteStoppedService",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testDeleteStoppedService()\n{\r\n    final Response actual = apiServer.deleteService(request, \"jenkins-already-stopped\");\r\n    assertEquals(\"Delete service is \", Response.status(Status.OK).build().getStatus(), actual.getStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testDecreaseContainerAndStop",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testDecreaseContainerAndStop()\n{\r\n    Service service = new Service();\r\n    service.setState(ServiceState.STOPPED);\r\n    service.setName(\"jenkins\");\r\n    Artifact artifact = new Artifact();\r\n    artifact.setType(TypeEnum.DOCKER);\r\n    artifact.setId(\"jenkins:latest\");\r\n    Resource resource = new Resource();\r\n    resource.setCpus(1);\r\n    resource.setMemory(\"2048\");\r\n    List<Component> components = new ArrayList<Component>();\r\n    Component c = new Component();\r\n    c.setName(\"jenkins\");\r\n    c.setNumberOfContainers(0L);\r\n    c.setArtifact(artifact);\r\n    c.setLaunchCommand(\"\");\r\n    c.setResource(resource);\r\n    components.add(c);\r\n    service.setComponents(components);\r\n    final Response actual = apiServer.updateService(request, \"jenkins\", service);\r\n    assertEquals(\"update service is \", Response.status(Status.OK).build().getStatus(), actual.getStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testBadDecreaseContainerAndStop",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testBadDecreaseContainerAndStop()\n{\r\n    Service service = new Service();\r\n    service.setState(ServiceState.STOPPED);\r\n    service.setName(\"no-jenkins\");\r\n    Artifact artifact = new Artifact();\r\n    artifact.setType(TypeEnum.DOCKER);\r\n    artifact.setId(\"jenkins:latest\");\r\n    Resource resource = new Resource();\r\n    resource.setCpus(1);\r\n    resource.setMemory(\"2048\");\r\n    List<Component> components = new ArrayList<Component>();\r\n    Component c = new Component();\r\n    c.setName(\"no-jenkins\");\r\n    c.setNumberOfContainers(-1L);\r\n    c.setArtifact(artifact);\r\n    c.setLaunchCommand(\"\");\r\n    c.setResource(resource);\r\n    components.add(c);\r\n    service.setComponents(components);\r\n    System.out.println(\"before stop\");\r\n    final Response actual = apiServer.updateService(request, \"no-jenkins\", service);\r\n    assertEquals(\"flex service is \", Response.status(Status.BAD_REQUEST).build().getStatus(), actual.getStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testIncreaseContainersAndStart",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testIncreaseContainersAndStart()\n{\r\n    Service service = new Service();\r\n    service.setState(ServiceState.STARTED);\r\n    service.setName(\"jenkins\");\r\n    Artifact artifact = new Artifact();\r\n    artifact.setType(TypeEnum.DOCKER);\r\n    artifact.setId(\"jenkins:latest\");\r\n    Resource resource = new Resource();\r\n    resource.setCpus(1);\r\n    resource.setMemory(\"2048\");\r\n    List<Component> components = new ArrayList<Component>();\r\n    Component c = new Component();\r\n    c.setName(\"jenkins\");\r\n    c.setNumberOfContainers(2L);\r\n    c.setArtifact(artifact);\r\n    c.setLaunchCommand(\"\");\r\n    c.setResource(resource);\r\n    components.add(c);\r\n    service.setComponents(components);\r\n    final Response actual = apiServer.updateService(request, \"jenkins\", service);\r\n    assertEquals(\"flex service is \", Response.status(Status.OK).build().getStatus(), actual.getStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testBadStartServices",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testBadStartServices()\n{\r\n    Service service = new Service();\r\n    service.setState(ServiceState.STARTED);\r\n    service.setName(\"no-jenkins\");\r\n    Artifact artifact = new Artifact();\r\n    artifact.setType(TypeEnum.DOCKER);\r\n    artifact.setId(\"jenkins:latest\");\r\n    Resource resource = new Resource();\r\n    resource.setCpus(1);\r\n    resource.setMemory(\"2048\");\r\n    List<Component> components = new ArrayList<Component>();\r\n    Component c = new Component();\r\n    c.setName(\"jenkins\");\r\n    c.setNumberOfContainers(2L);\r\n    c.setArtifact(artifact);\r\n    c.setLaunchCommand(\"\");\r\n    c.setResource(resource);\r\n    components.add(c);\r\n    service.setComponents(components);\r\n    final Response actual = apiServer.updateService(request, \"no-jenkins\", service);\r\n    assertEquals(\"start service is \", Response.status(Status.BAD_REQUEST).build().getStatus(), actual.getStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testGoodStartServices",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testGoodStartServices()\n{\r\n    Service service = new Service();\r\n    service.setState(ServiceState.STARTED);\r\n    service.setName(\"jenkins\");\r\n    Artifact artifact = new Artifact();\r\n    artifact.setType(TypeEnum.DOCKER);\r\n    artifact.setId(\"jenkins:latest\");\r\n    Resource resource = new Resource();\r\n    resource.setCpus(1);\r\n    resource.setMemory(\"2048\");\r\n    List<Component> components = new ArrayList<Component>();\r\n    Component c = new Component();\r\n    c.setName(\"jenkins\");\r\n    c.setNumberOfContainers(2L);\r\n    c.setArtifact(artifact);\r\n    c.setLaunchCommand(\"\");\r\n    c.setResource(resource);\r\n    components.add(c);\r\n    service.setComponents(components);\r\n    final Response actual = apiServer.updateService(request, \"jenkins\", service);\r\n    assertEquals(\"start service is \", Response.status(Status.OK).build().getStatus(), actual.getStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testBadStopServices",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testBadStopServices()\n{\r\n    Service service = new Service();\r\n    service.setState(ServiceState.STOPPED);\r\n    service.setName(\"no-jenkins\");\r\n    Artifact artifact = new Artifact();\r\n    artifact.setType(TypeEnum.DOCKER);\r\n    artifact.setId(\"jenkins:latest\");\r\n    Resource resource = new Resource();\r\n    resource.setCpus(1);\r\n    resource.setMemory(\"2048\");\r\n    List<Component> components = new ArrayList<Component>();\r\n    Component c = new Component();\r\n    c.setName(\"no-jenkins\");\r\n    c.setNumberOfContainers(-1L);\r\n    c.setArtifact(artifact);\r\n    c.setLaunchCommand(\"\");\r\n    c.setResource(resource);\r\n    components.add(c);\r\n    service.setComponents(components);\r\n    System.out.println(\"before stop\");\r\n    final Response actual = apiServer.updateService(request, \"no-jenkins\", service);\r\n    assertEquals(\"stop service is \", Response.status(Status.BAD_REQUEST).build().getStatus(), actual.getStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testGoodStopServices",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testGoodStopServices()\n{\r\n    Service service = new Service();\r\n    service.setState(ServiceState.STOPPED);\r\n    service.setName(\"jenkins\");\r\n    System.out.println(\"before stop\");\r\n    final Response actual = apiServer.updateService(request, \"jenkins\", service);\r\n    assertEquals(\"stop service is \", Response.status(Status.OK).build().getStatus(), actual.getStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testBadSecondStopServices",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testBadSecondStopServices() throws Exception\n{\r\n    Service service = new Service();\r\n    service.setState(ServiceState.STOPPED);\r\n    service.setName(\"jenkins-second-stop\");\r\n    System.out.println(\"before second stop\");\r\n    final Response actual = apiServer.updateService(request, \"jenkins-second-stop\", service);\r\n    assertEquals(\"stop service should have thrown 400 Bad Request: \", Response.status(Status.BAD_REQUEST).build().getStatus(), actual.getStatus());\r\n    ServiceStatus serviceStatus = (ServiceStatus) actual.getEntity();\r\n    assertEquals(\"Stop service should have failed with service already stopped\", \"Service jenkins-second-stop is already stopped\", serviceStatus.getDiagnostics());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testUpdateService",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testUpdateService()\n{\r\n    Service service = new Service();\r\n    service.setState(ServiceState.STARTED);\r\n    service.setName(\"no-jenkins\");\r\n    Artifact artifact = new Artifact();\r\n    artifact.setType(TypeEnum.DOCKER);\r\n    artifact.setId(\"jenkins:latest\");\r\n    Resource resource = new Resource();\r\n    resource.setCpus(1);\r\n    resource.setMemory(\"2048\");\r\n    List<Component> components = new ArrayList<Component>();\r\n    Component c = new Component();\r\n    c.setName(\"no-jenkins\");\r\n    c.setNumberOfContainers(-1L);\r\n    c.setArtifact(artifact);\r\n    c.setLaunchCommand(\"\");\r\n    c.setResource(resource);\r\n    components.add(c);\r\n    service.setComponents(components);\r\n    System.out.println(\"before stop\");\r\n    final Response actual = apiServer.updateService(request, \"no-jenkins\", service);\r\n    assertEquals(\"update service is \", Response.status(Status.BAD_REQUEST).build().getStatus(), actual.getStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testUpdateComponent",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testUpdateComponent()\n{\r\n    Response actual = apiServer.updateComponent(request, \"jenkins\", \"jenkins-master\", null);\r\n    ServiceStatus serviceStatus = (ServiceStatus) actual.getEntity();\r\n    assertEquals(\"Update component should have failed with 400 bad request\", Response.status(Status.BAD_REQUEST).build().getStatus(), actual.getStatus());\r\n    assertEquals(\"Update component should have failed with no data error\", \"No component data provided\", serviceStatus.getDiagnostics());\r\n    Component comp = new Component();\r\n    actual = apiServer.updateComponent(request, \"jenkins\", \"jenkins-master\", comp);\r\n    serviceStatus = (ServiceStatus) actual.getEntity();\r\n    assertEquals(\"Update component should have failed with 400 bad request\", Response.status(Status.BAD_REQUEST).build().getStatus(), actual.getStatus());\r\n    assertEquals(\"Update component should have failed with no count error\", \"No container count provided\", serviceStatus.getDiagnostics());\r\n    comp.setNumberOfContainers(-1L);\r\n    actual = apiServer.updateComponent(request, \"jenkins\", \"jenkins-master\", comp);\r\n    serviceStatus = (ServiceStatus) actual.getEntity();\r\n    assertEquals(\"Update component should have failed with 400 bad request\", Response.status(Status.BAD_REQUEST).build().getStatus(), actual.getStatus());\r\n    assertEquals(\"Update component should have failed with no count error\", \"Invalid number of containers specified -1\", serviceStatus.getDiagnostics());\r\n    comp.setName(\"jenkins-slave\");\r\n    comp.setNumberOfContainers(1L);\r\n    actual = apiServer.updateComponent(request, \"jenkins\", \"jenkins-master\", comp);\r\n    serviceStatus = (ServiceStatus) actual.getEntity();\r\n    assertEquals(\"Update component should have failed with 400 bad request\", Response.status(Status.BAD_REQUEST).build().getStatus(), actual.getStatus());\r\n    assertEquals(\"Update component should have failed with component name mismatch \" + \"error\", \"Component name in the request object (jenkins-slave) does not match \" + \"that in the URI path (jenkins-master)\", serviceStatus.getDiagnostics());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testInitiateUpgrade",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testInitiateUpgrade()\n{\r\n    Service goodService = ServiceClientTest.buildLiveGoodService();\r\n    goodService.setVersion(\"v2\");\r\n    goodService.setState(ServiceState.UPGRADING);\r\n    final Response actual = apiServer.updateService(request, goodService.getName(), goodService);\r\n    assertEquals(\"Initiate upgrade is \", Response.status(Status.ACCEPTED).build().getStatus(), actual.getStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testUpgradeSingleInstance",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testUpgradeSingleInstance()\n{\r\n    Service goodService = ServiceClientTest.buildLiveGoodService();\r\n    Component comp = goodService.getComponents().iterator().next();\r\n    Container container = comp.getContainers().iterator().next();\r\n    container.setState(ContainerState.UPGRADING);\r\n    Service serviceStatus = mockServerClient.getGoodServiceStatus();\r\n    serviceStatus.setState(ServiceState.UPGRADING);\r\n    Container liveContainer = serviceStatus.getComponents().iterator().next().getContainers().iterator().next();\r\n    liveContainer.setState(ContainerState.NEEDS_UPGRADE);\r\n    mockServerClient.setExpectedInstances(Sets.newHashSet(liveContainer.getComponentInstanceName()));\r\n    final Response actual = apiServer.updateComponentInstance(request, goodService.getName(), comp.getName(), container.getComponentInstanceName(), container);\r\n    assertEquals(\"Instance upgrade is \", Response.status(Status.ACCEPTED).build().getStatus(), actual.getStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testUpgradeMultipleInstances",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testUpgradeMultipleInstances()\n{\r\n    Service goodService = ServiceClientTest.buildLiveGoodService();\r\n    Component comp = goodService.getComponents().iterator().next();\r\n    comp.getContainers().forEach(container -> container.setState(ContainerState.UPGRADING));\r\n    Service serviceStatus = mockServerClient.getGoodServiceStatus();\r\n    serviceStatus.setState(ServiceState.UPGRADING);\r\n    Set<String> expectedInstances = new HashSet<>();\r\n    serviceStatus.getComponents().iterator().next().getContainers().forEach(container -> {\r\n        container.setState(ContainerState.NEEDS_UPGRADE);\r\n        expectedInstances.add(container.getComponentInstanceName());\r\n    });\r\n    mockServerClient.setExpectedInstances(expectedInstances);\r\n    final Response actual = apiServer.updateComponentInstances(request, goodService.getName(), comp.getContainers());\r\n    assertEquals(\"Instance upgrade is \", Response.status(Status.ACCEPTED).build().getStatus(), actual.getStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testUpgradeComponent",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testUpgradeComponent()\n{\r\n    Service goodService = ServiceClientTest.buildLiveGoodService();\r\n    Component comp = goodService.getComponents().iterator().next();\r\n    comp.setState(ComponentState.UPGRADING);\r\n    Service serviceStatus = mockServerClient.getGoodServiceStatus();\r\n    serviceStatus.setState(ServiceState.UPGRADING);\r\n    Component liveComp = serviceStatus.getComponent(comp.getName());\r\n    liveComp.setState(ComponentState.NEEDS_UPGRADE);\r\n    Set<String> expectedInstances = new HashSet<>();\r\n    liveComp.getContainers().forEach(container -> {\r\n        expectedInstances.add(container.getComponentInstanceName());\r\n        container.setState(ContainerState.NEEDS_UPGRADE);\r\n    });\r\n    mockServerClient.setExpectedInstances(expectedInstances);\r\n    final Response actual = apiServer.updateComponent(request, goodService.getName(), comp.getName(), comp);\r\n    assertEquals(\"Component upgrade is \", Response.status(Status.ACCEPTED).build().getStatus(), actual.getStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testUpgradeMultipleComps",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testUpgradeMultipleComps()\n{\r\n    Service goodService = ServiceClientTest.buildLiveGoodService();\r\n    goodService.getComponents().forEach(comp -> comp.setState(ComponentState.UPGRADING));\r\n    Service serviceStatus = mockServerClient.getGoodServiceStatus();\r\n    serviceStatus.setState(ServiceState.UPGRADING);\r\n    Set<String> expectedInstances = new HashSet<>();\r\n    serviceStatus.getComponents().forEach(liveComp -> {\r\n        liveComp.setState(ComponentState.NEEDS_UPGRADE);\r\n        liveComp.getContainers().forEach(liveContainer -> {\r\n            expectedInstances.add(liveContainer.getComponentInstanceName());\r\n            liveContainer.setState(ContainerState.NEEDS_UPGRADE);\r\n        });\r\n    });\r\n    mockServerClient.setExpectedInstances(expectedInstances);\r\n    final Response actual = apiServer.updateComponents(request, goodService.getName(), goodService.getComponents());\r\n    assertEquals(\"Component upgrade is \", Response.status(Status.ACCEPTED).build().getStatus(), actual.getStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    File tmpYarnDir = new File(\"target\", \"tmp\");\r\n    FileUtils.deleteQuietly(tmpYarnDir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown() throws IOException\n{\r\n    shutdown();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testRegistryCleanedOnLifetimeExceeded",
  "errType" : [ "YarnException|IOException" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testRegistryCleanedOnLifetimeExceeded() throws Exception\n{\r\n    setupInternal(NUM_NMS);\r\n    ServiceClient client = createClient(getConf());\r\n    Service exampleApp = createExampleApplication();\r\n    exampleApp.setLifetime(30L);\r\n    client.actionCreate(exampleApp);\r\n    waitForServiceToBeStable(client, exampleApp);\r\n    String serviceZKPath = RegistryUtils.servicePath(RegistryUtils.currentUser(), YarnServiceConstants.APP_TYPE, exampleApp.getName());\r\n    Assert.assertTrue(\"Registry ZK service path doesn't exist\", getCuratorService().zkPathExists(serviceZKPath));\r\n    ApplicationId exampleAppId = ApplicationId.fromString(exampleApp.getId());\r\n    GenericTestUtils.waitFor(() -> {\r\n        try {\r\n            ApplicationReport ar = client.getYarnClient().getApplicationReport(exampleAppId);\r\n            return ar.getYarnApplicationState() == YarnApplicationState.KILLED;\r\n        } catch (YarnException | IOException e) {\r\n            throw new RuntimeException(\"while waiting\", e);\r\n        }\r\n    }, 2000, 200000);\r\n    Assert.assertFalse(\"Registry ZK service path still exists after killed\", getCuratorService().zkPathExists(serviceZKPath));\r\n    LOG.info(\"Destroy the service\");\r\n    Assert.assertEquals(0, client.actionDestroy(exampleApp.getName()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setup()\n{\r\n    File file = new File(getClass().getClassLoader().getResource(resourcePath).getFile());\r\n    conf = new Configuration();\r\n    conf.set(YarnServiceConf.YARN_SERVICES_SYSTEM_SERVICE_DIRECTORY, file.getAbsolutePath());\r\n    systemService = new SystemServiceManagerImpl() {\r\n\r\n        @Override\r\n        ServiceClient getServiceClient() {\r\n            return new TestServiceClient();\r\n        }\r\n    };\r\n    systemService.init(conf);\r\n    constructUserService(users[0], \"example-app1\");\r\n    constructUserService(users[1], \"example-app1\", \"example-app2\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown()\n{\r\n    systemService.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testSystemServiceSubmission",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testSystemServiceSubmission() throws Exception\n{\r\n    systemService.start();\r\n    Map<String, Integer> ignoredUserServices = systemService.getIgnoredUserServices();\r\n    Assert.assertEquals(1, ignoredUserServices.size());\r\n    Assert.assertTrue(\"User user1 doesn't exist.\", ignoredUserServices.containsKey(users[0]));\r\n    int count = ignoredUserServices.get(users[0]);\r\n    Assert.assertEquals(1, count);\r\n    Assert.assertEquals(1, systemService.getBadFileNameExtensionSkipCounter());\r\n    Assert.assertEquals(1, systemService.getBadDirSkipCounter());\r\n    Map<String, Set<Service>> userServices = systemService.getSyncUserServices();\r\n    Assert.assertEquals(loadedServices.size(), userServices.size());\r\n    verifyForScannedUserServices(userServices);\r\n    verifyForLaunchedUserServices();\r\n    systemService.launchUserService(userServices);\r\n    verifyForLaunchedUserServices();\r\n    submittedServices.clear();\r\n    systemService.launchUserService(userServices);\r\n    verifyForLaunchedUserServices();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "verifyForScannedUserServices",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void verifyForScannedUserServices(Map<String, Set<Service>> userServices)\n{\r\n    for (String user : users) {\r\n        Set<Service> services = userServices.get(user);\r\n        Set<String> serviceNames = loadedServices.get(user);\r\n        Assert.assertEquals(serviceNames.size(), services.size());\r\n        Iterator<Service> iterator = services.iterator();\r\n        while (iterator.hasNext()) {\r\n            Service next = iterator.next();\r\n            Assert.assertTrue(\"Service name doesn't exist in expected userService \" + serviceNames, serviceNames.contains(next.getName()));\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "constructUserService",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void constructUserService(String user, String... serviceNames)\n{\r\n    Set<String> service = loadedServices.get(user);\r\n    if (service == null) {\r\n        service = new HashSet<>();\r\n        for (String serviceName : serviceNames) {\r\n            service.add(serviceName);\r\n        }\r\n        loadedServices.put(user, service);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "verifyForLaunchedUserServices",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void verifyForLaunchedUserServices()\n{\r\n    Assert.assertEquals(loadedServices.size(), submittedServices.size());\r\n    for (Map.Entry<String, Set<String>> entry : submittedServices.entrySet()) {\r\n        String user = entry.getKey();\r\n        Set<String> serviceSet = entry.getValue();\r\n        Assert.assertTrue(loadedServices.containsKey(user));\r\n        Set<String> services = loadedServices.get(user);\r\n        Assert.assertEquals(services.size(), serviceSet.size());\r\n        Assert.assertTrue(services.containsAll(serviceSet));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testFileSystemCloseWhenCleanUpService",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testFileSystemCloseWhenCleanUpService() throws Exception\n{\r\n    FileSystem fs = null;\r\n    Path path = new Path(\"/tmp/servicedir\");\r\n    HdfsConfiguration hdfsConfig = new HdfsConfiguration();\r\n    MiniDFSCluster hdfsCluster = new MiniDFSCluster.Builder(hdfsConfig).numDataNodes(1).build();\r\n    fs = hdfsCluster.getFileSystem();\r\n    if (!fs.exists(path)) {\r\n        fs.mkdirs(path);\r\n    }\r\n    SystemServiceManagerImpl serviceManager = new SystemServiceManagerImpl();\r\n    hdfsConfig.set(YarnServiceConf.YARN_SERVICES_SYSTEM_SERVICE_DIRECTORY, path.toString());\r\n    serviceManager.init(hdfsConfig);\r\n    hdfsConfig.set(\"hadoop.registry.zk.connection.timeout.ms\", \"100\");\r\n    hdfsConfig.set(\"hadoop.registry.zk.retry.times\", \"1\");\r\n    ApiServiceClient asc = new ApiServiceClient();\r\n    asc.serviceInit(hdfsConfig);\r\n    asc.actionCleanUp(\"testapp\", \"testuser\");\r\n    try {\r\n        serviceManager.start();\r\n    } catch (Exception e) {\r\n        if (e.getMessage().contains(\"Filesystem closed\")) {\r\n            fail(\"SystemServiceManagerImpl failed to handle \" + \"FileSystem close\");\r\n        } else {\r\n            fail(\"Should not get any exceptions\");\r\n        }\r\n    } finally {\r\n        serviceManager.stop();\r\n        fs = hdfsCluster.getFileSystem();\r\n        if (fs.exists(path)) {\r\n            fs.delete(path, true);\r\n        }\r\n        if (hdfsCluster != null) {\r\n            hdfsCluster.shutdown();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
} ]