[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "setupClass",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void setupClass() throws Exception\n{\r\n    config.setBoolean(YarnConfiguration.TIMELINE_SERVICE_TTL_ENABLE, false);\r\n    config.set(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_SUMMARY_ENTITY_TYPES, \"YARN_APPLICATION,YARN_APPLICATION_ATTEMPT,YARN_CONTAINER\");\r\n    config.setInt(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_APP_CACHE_SIZE, CACHE_TEST_CACHE_SIZE);\r\n    config.set(MiniDFSCluster.HDFS_MINIDFS_BASEDIR, TEST_ROOT_DIR.toString());\r\n    HdfsConfiguration hdfsConfig = new HdfsConfiguration();\r\n    hdfsCluster = new MiniDFSCluster.Builder(hdfsConfig).numDataNodes(1).build();\r\n    fs = hdfsCluster.getFileSystem();\r\n    fc = FileContext.getFileContext(hdfsCluster.getURI(0), config);\r\n    sampleAppIds = new ArrayList<>(CACHE_TEST_CACHE_SIZE + 1);\r\n    for (int i = 0; i < CACHE_TEST_CACHE_SIZE + 1; i++) {\r\n        ApplicationId appId = ApplicationId.fromString(ConverterUtils.APPLICATION_PREFIX + \"_\" + SAMPLE_APP_PREFIX_CACHE_TEST + i);\r\n        sampleAppIds.add(appId);\r\n    }\r\n    testActiveDirPath = getTestRootPath(\"active\");\r\n    mainTestAppId = sampleAppIds.get(0);\r\n    mainTestAppDirPath = new Path(testActiveDirPath, mainTestAppId.toString());\r\n    mainEntityLogFileName = EntityGroupFSTimelineStore.ENTITY_LOG_PREFIX + EntityGroupPlugInForTest.getStandardTimelineGroupId(mainTestAppId);\r\n    testDoneDirPath = getTestRootPath(\"done\");\r\n    config.set(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_DONE_DIR, testDoneDirPath.toString());\r\n    config.set(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_ACTIVE_DIR, testActiveDirPath.toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    for (ApplicationId appId : sampleAppIds) {\r\n        Path attemotDirPath = new Path(new Path(testActiveDirPath, appId.toString()), getAttemptDirName(appId));\r\n        createTestFiles(appId, attemotDirPath);\r\n    }\r\n    store = new EntityGroupFSTimelineStore();\r\n    if (currTestName.getMethodName().contains(\"Plugin\")) {\r\n        rootDir = GenericTestUtils.getTestDir(getClass().getSimpleName());\r\n        if (!rootDir.exists()) {\r\n            rootDir.mkdirs();\r\n        }\r\n        testJar = null;\r\n        testJar = JarFinder.makeClassLoaderTestJar(this.getClass(), rootDir, \"test-runjar.jar\", 2048, EntityGroupPlugInForTest.class.getName());\r\n        config.set(YarnConfiguration.TIMELINE_SERVICE_ENTITY_GROUP_PLUGIN_CLASSPATH, testJar.getAbsolutePath());\r\n        String systemClasses = \"-org.apache.hadoop.\" + \",\" + ApplicationClassLoader.SYSTEM_CLASSES_DEFAULT;\r\n        config.set(YarnConfiguration.TIMELINE_SERVICE_ENTITY_GROUP_PLUGIN_SYSTEM_CLASSES, systemClasses);\r\n        config.set(YarnConfiguration.TIMELINE_SERVICE_ENTITY_GROUP_PLUGIN_CLASSES, EntityGroupPlugInForTest.class.getName());\r\n    }\r\n    store.init(config);\r\n    store.setFs(fs);\r\n    store.start();\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    store.stop();\r\n    for (ApplicationId appId : sampleAppIds) {\r\n        fs.delete(new Path(testActiveDirPath, appId.toString()), true);\r\n    }\r\n    if (testJar != null) {\r\n        testJar.delete();\r\n        rootDir.delete();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "tearDownClass",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void tearDownClass() throws Exception\n{\r\n    hdfsCluster.shutdown();\r\n    FileContext fileContext = FileContext.getLocalFSFileContext();\r\n    fileContext.delete(new Path(config.get(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_PATH)), true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testAppLogsScanLogs",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testAppLogsScanLogs() throws Exception\n{\r\n    EntityGroupFSTimelineStore.AppLogs appLogs = store.new AppLogs(mainTestAppId, mainTestAppDirPath, AppState.COMPLETED);\r\n    appLogs.scanForLogs();\r\n    List<LogInfo> summaryLogs = appLogs.getSummaryLogs();\r\n    List<LogInfo> detailLogs = appLogs.getDetailLogs();\r\n    assertEquals(2, summaryLogs.size());\r\n    assertEquals(1, detailLogs.size());\r\n    for (LogInfo log : summaryLogs) {\r\n        String fileName = log.getFilename();\r\n        assertTrue(fileName.equals(TEST_SUMMARY_LOG_FILE_NAME) || fileName.equals(TEST_DOMAIN_LOG_FILE_NAME));\r\n    }\r\n    for (LogInfo log : detailLogs) {\r\n        String fileName = log.getFilename();\r\n        assertEquals(fileName, mainEntityLogFileName);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testAppLogsDomainLogLastlyScanned",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testAppLogsDomainLogLastlyScanned() throws Exception\n{\r\n    EntityGroupFSTimelineStore.AppLogs appLogs = store.new AppLogs(mainTestAppId, mainTestAppDirPath, AppState.COMPLETED);\r\n    Path attemptDirPath = new Path(new Path(testActiveDirPath, mainTestAppId.toString()), getAttemptDirName(mainTestAppId));\r\n    fs.delete(new Path(attemptDirPath, TEST_DOMAIN_LOG_FILE_NAME), false);\r\n    appLogs.scanForLogs();\r\n    List<LogInfo> summaryLogs = appLogs.getSummaryLogs();\r\n    assertEquals(1, summaryLogs.size());\r\n    assertEquals(TEST_SUMMARY_LOG_FILE_NAME, summaryLogs.get(0).getFilename());\r\n    FSDataOutputStream out = fs.create(new Path(attemptDirPath, TEST_DOMAIN_LOG_FILE_NAME));\r\n    out.close();\r\n    appLogs.scanForLogs();\r\n    assertEquals(2, summaryLogs.size());\r\n    assertEquals(TEST_DOMAIN_LOG_FILE_NAME, summaryLogs.get(0).getFilename());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testMoveToDone",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testMoveToDone() throws Exception\n{\r\n    EntityGroupFSTimelineStore.AppLogs appLogs = store.new AppLogs(mainTestAppId, mainTestAppDirPath, AppState.COMPLETED);\r\n    Path pathBefore = appLogs.getAppDirPath();\r\n    appLogs.moveToDone();\r\n    Path pathAfter = appLogs.getAppDirPath();\r\n    assertNotEquals(pathBefore, pathAfter);\r\n    assertTrue(pathAfter.toString().contains(testDoneDirPath.toString()));\r\n    fs.delete(pathAfter, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testParseSummaryLogs",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testParseSummaryLogs() throws Exception\n{\r\n    TimelineDataManager tdm = PluginStoreTestUtils.getTdmWithMemStore(config);\r\n    MutableCounterLong scanned = store.metrics.getEntitiesReadToSummary();\r\n    long beforeScan = scanned.value();\r\n    EntityGroupFSTimelineStore.AppLogs appLogs = store.new AppLogs(mainTestAppId, mainTestAppDirPath, AppState.COMPLETED);\r\n    appLogs.scanForLogs();\r\n    appLogs.parseSummaryLogs(tdm);\r\n    PluginStoreTestUtils.verifyTestEntities(tdm);\r\n    assertEquals(beforeScan + 2L, scanned.value());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testWithAnonymousUser",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testWithAnonymousUser() throws Exception\n{\r\n    try {\r\n        TimelineDataManager tdm = PluginStoreTestUtils.getTdmWithMemStore(config);\r\n        EntityGroupFSTimelineStore.AppLogs appLogs = store.new AppLogs(mainTestAppId, mainTestAppDirPath, AppState.COMPLETED);\r\n        FileStatus fileStatus = mock(FileStatus.class);\r\n        when(fileStatus.getOwner()).thenReturn(null);\r\n        appLogs.scanForLogs();\r\n        appLogs.parseSummaryLogs(tdm);\r\n        PluginStoreTestUtils.verifyTestEntities(tdm);\r\n    } catch (IllegalArgumentException ie) {\r\n        Assert.fail(\"No exception needs to be thrown as anonymous user is configured\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testCleanLogs",
  "errType" : null,
  "containingMethodsNum" : 38,
  "sourceCodeText" : "void testCleanLogs() throws Exception\n{\r\n    String appDirName = mainTestAppId.toString();\r\n    String attemptDirName = ApplicationAttemptId.appAttemptIdStrPrefix + appDirName + \"_1\";\r\n    Path irrelevantFilePath = new Path(testDoneDirPath, \"irrelevant.log\");\r\n    FSDataOutputStream stream = fs.create(irrelevantFilePath);\r\n    stream.close();\r\n    Path irrelevantDirPath = new Path(testDoneDirPath, \"irrelevant\");\r\n    fs.mkdirs(irrelevantDirPath);\r\n    Path doneAppHomeDir = new Path(new Path(new Path(testDoneDirPath, Long.toString(mainTestAppId.getClusterTimestamp())), \"0000\"), \"001\");\r\n    Path appDirClean = new Path(doneAppHomeDir, appDirName);\r\n    Path attemptDirClean = new Path(appDirClean, attemptDirName);\r\n    fs.mkdirs(attemptDirClean);\r\n    Path filePath = new Path(attemptDirClean, \"test.log\");\r\n    stream = fs.create(filePath);\r\n    stream.close();\r\n    Path appDirHoldByFile = new Path(doneAppHomeDir, appDirName + \"1\");\r\n    Path attemptDirHoldByFile = new Path(appDirHoldByFile, attemptDirName);\r\n    fs.mkdirs(attemptDirHoldByFile);\r\n    Path filePathHold = new Path(attemptDirHoldByFile, \"test1.log\");\r\n    stream = fs.create(filePathHold);\r\n    stream.close();\r\n    Path appDirHoldByDir = new Path(doneAppHomeDir, appDirName + \"2\");\r\n    Path attemptDirHoldByDir = new Path(appDirHoldByDir, attemptDirName);\r\n    fs.mkdirs(attemptDirHoldByDir);\r\n    Path dirPathHold = new Path(attemptDirHoldByDir, \"hold\");\r\n    fs.mkdirs(dirPathHold);\r\n    Path appDirEmpty = new Path(doneAppHomeDir, appDirName + \"3\");\r\n    Path attemptDirEmpty = new Path(appDirEmpty, attemptDirName);\r\n    fs.mkdirs(attemptDirEmpty);\r\n    Path dirPathEmpty = new Path(attemptDirEmpty, \"empty\");\r\n    fs.mkdirs(dirPathEmpty);\r\n    MutableCounterLong dirsCleaned = store.metrics.getLogsDirsCleaned();\r\n    long before = dirsCleaned.value();\r\n    store.cleanLogs(testDoneDirPath, 10000);\r\n    assertTrue(fs.exists(irrelevantDirPath));\r\n    assertTrue(fs.exists(irrelevantFilePath));\r\n    assertTrue(fs.exists(filePath));\r\n    assertTrue(fs.exists(filePathHold));\r\n    assertTrue(fs.exists(dirPathHold));\r\n    assertTrue(fs.exists(dirPathEmpty));\r\n    Thread.sleep(2000);\r\n    stream = fs.append(filePathHold);\r\n    stream.writeBytes(\"append\");\r\n    stream.close();\r\n    fs.mkdirs(new Path(dirPathHold, \"holdByMe\"));\r\n    store.cleanLogs(testDoneDirPath, 1000);\r\n    assertTrue(fs.exists(irrelevantDirPath));\r\n    assertTrue(fs.exists(irrelevantFilePath));\r\n    assertTrue(fs.exists(filePathHold));\r\n    assertTrue(fs.exists(dirPathHold));\r\n    assertTrue(fs.exists(doneAppHomeDir));\r\n    assertFalse(fs.exists(appDirClean));\r\n    assertFalse(fs.exists(appDirEmpty));\r\n    assertEquals(before + 2L, dirsCleaned.value());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testCleanBuckets",
  "errType" : null,
  "containingMethodsNum" : 23,
  "sourceCodeText" : "void testCleanBuckets() throws Exception\n{\r\n    Path clusterTimeStampDir1 = new Path(testDoneDirPath, Long.toString(sampleAppIds.get(0).getClusterTimestamp()));\r\n    Path appDir1 = new Path(new Path(new Path(clusterTimeStampDir1, \"0000\"), \"000\"), sampleAppIds.get(0).toString());\r\n    Path appDir2 = new Path(new Path(new Path(clusterTimeStampDir1, \"0000\"), \"001\"), sampleAppIds.get(1).toString());\r\n    Path appDir3 = new Path(new Path(new Path(clusterTimeStampDir1, \"0000\"), \"002\"), sampleAppIds.get(2).toString());\r\n    Path appDir4 = new Path(new Path(new Path(clusterTimeStampDir1, \"0001\"), \"000\"), sampleAppIds.get(3).toString());\r\n    Path clusterTimeStampDir2 = new Path(testDoneDirPath, \"1235\");\r\n    Path clusterTimeStampDir3 = new Path(testDoneDirPath, \"irrevelant\");\r\n    Path appDir5 = new Path(new Path(new Path(clusterTimeStampDir3, \"0000\"), \"000\"), sampleAppIds.get(4).toString());\r\n    fs.mkdirs(appDir1);\r\n    fs.mkdirs(appDir2);\r\n    fs.mkdirs(appDir3);\r\n    fs.mkdirs(appDir4);\r\n    fs.mkdirs(clusterTimeStampDir2);\r\n    fs.mkdirs(appDir5);\r\n    Thread.sleep(2000);\r\n    store.cleanLogs(testDoneDirPath, 1000);\r\n    assertTrue(fs.exists(clusterTimeStampDir1));\r\n    assertFalse(fs.exists(appDir1));\r\n    assertFalse(fs.exists(appDir2));\r\n    assertFalse(fs.exists(appDir3));\r\n    assertFalse(fs.exists(appDir4));\r\n    assertFalse(fs.exists(clusterTimeStampDir2));\r\n    assertTrue(fs.exists(appDir5));\r\n    store.cleanLogs(testDoneDirPath, 1000);\r\n    assertFalse(fs.exists(clusterTimeStampDir1));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testNullCheckGetEntityTimelines",
  "errType" : [ "NullPointerException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testNullCheckGetEntityTimelines() throws Exception\n{\r\n    try {\r\n        store.getEntityTimelines(\"YARN_APPLICATION\", null, null, null, null, null);\r\n    } catch (NullPointerException e) {\r\n        Assert.fail(\"NPE when getEntityTimelines called with Null EntityIds\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testPluginRead",
  "errType" : null,
  "containingMethodsNum" : 25,
  "sourceCodeText" : "void testPluginRead() throws Exception\n{\r\n    assertEquals(EntityGroupPlugInForTest.class.getName(), store.getConfig().get(YarnConfiguration.TIMELINE_SERVICE_ENTITY_GROUP_PLUGIN_CLASSES));\r\n    List<TimelineEntityGroupPlugin> currPlugins = store.getPlugins();\r\n    for (TimelineEntityGroupPlugin plugin : currPlugins) {\r\n        ClassLoader pluginClassLoader = plugin.getClass().getClassLoader();\r\n        assertTrue(\"Should set up ApplicationClassLoader\", pluginClassLoader instanceof ApplicationClassLoader);\r\n        URL[] paths = ((URLClassLoader) pluginClassLoader).getURLs();\r\n        boolean foundJAR = false;\r\n        for (URL path : paths) {\r\n            if (path.toString().contains(testJar.getAbsolutePath())) {\r\n                foundJAR = true;\r\n            }\r\n        }\r\n        assertTrue(\"Not found path \" + testJar.getAbsolutePath() + \" for plugin \" + plugin.getClass().getName(), foundJAR);\r\n    }\r\n    EntityGroupFSTimelineStore.AppLogs appLogs = store.new AppLogs(mainTestAppId, mainTestAppDirPath, AppState.COMPLETED);\r\n    EntityCacheItem cacheItem = new EntityCacheItem(EntityGroupPlugInForTest.getStandardTimelineGroupId(mainTestAppId), config);\r\n    cacheItem.setAppLogs(appLogs);\r\n    store.setCachedLogs(EntityGroupPlugInForTest.getStandardTimelineGroupId(mainTestAppId), cacheItem);\r\n    MutableCounterLong detailLogEntityRead = store.metrics.getGetEntityToDetailOps();\r\n    MutableStat cacheRefresh = store.metrics.getCacheRefresh();\r\n    long numEntityReadBefore = detailLogEntityRead.value();\r\n    long cacheRefreshBefore = cacheRefresh.lastStat().numSamples();\r\n    TimelineDataManager tdm = PluginStoreTestUtils.getTdmWithStore(config, store);\r\n    TimelineEntity entity3 = tdm.getEntity(\"type_3\", mainTestAppId.toString(), EnumSet.allOf(TimelineReader.Field.class), UserGroupInformation.getLoginUser());\r\n    assertNotNull(entity3);\r\n    assertEquals(entityNew.getStartTime(), entity3.getStartTime());\r\n    NameValuePair primaryFilter = new NameValuePair(EntityGroupPlugInForTest.APP_ID_FILTER_NAME, mainTestAppId.toString());\r\n    TimelineEntities entities = tdm.getEntities(\"type_3\", primaryFilter, null, null, null, null, null, null, EnumSet.allOf(TimelineReader.Field.class), UserGroupInformation.getLoginUser());\r\n    assertEquals(1, entities.getEntities().size());\r\n    for (TimelineEntity entity : entities.getEntities()) {\r\n        assertEquals(entityNew.getStartTime(), entity.getStartTime());\r\n    }\r\n    assertEquals(numEntityReadBefore + 2L, detailLogEntityRead.value());\r\n    assertEquals(cacheRefreshBefore + 1L, cacheRefresh.lastStat().numSamples());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testSummaryRead",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testSummaryRead() throws Exception\n{\r\n    EntityGroupFSTimelineStore.AppLogs appLogs = store.new AppLogs(mainTestAppId, mainTestAppDirPath, AppState.COMPLETED);\r\n    MutableCounterLong summaryLogEntityRead = store.metrics.getGetEntityToSummaryOps();\r\n    long numEntityReadBefore = summaryLogEntityRead.value();\r\n    TimelineDataManager tdm = PluginStoreTestUtils.getTdmWithStore(config, store);\r\n    appLogs.scanForLogs();\r\n    appLogs.parseSummaryLogs(tdm);\r\n    PluginStoreTestUtils.verifyTestEntities(tdm);\r\n    TimelineEntities entities = tdm.getEntities(\"type_1\", null, null, null, null, null, null, null, EnumSet.allOf(TimelineReader.Field.class), UserGroupInformation.getLoginUser());\r\n    assertThat(entities.getEntities()).hasSize(1);\r\n    for (TimelineEntity entity : entities.getEntities()) {\r\n        assertEquals((Long) 123L, entity.getStartTime());\r\n    }\r\n    assertEquals(numEntityReadBefore + 5L, summaryLogEntityRead.value());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetEntityPluginRead",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testGetEntityPluginRead() throws Exception\n{\r\n    EntityGroupFSTimelineStore store = null;\r\n    ApplicationId appId = ApplicationId.fromString(\"application_1501509265053_0001\");\r\n    String user = UserGroupInformation.getCurrentUser().getShortUserName();\r\n    Path userBase = new Path(testActiveDirPath, user);\r\n    Path userAppRoot = new Path(userBase, appId.toString());\r\n    Path attemotDirPath = new Path(userAppRoot, getAttemptDirName(appId));\r\n    try {\r\n        store = createAndStartTimelineStore(AppState.ACTIVE);\r\n        String logFileName = EntityGroupFSTimelineStore.ENTITY_LOG_PREFIX + EntityGroupPlugInForTest.getStandardTimelineGroupId(appId);\r\n        createTestFiles(appId, attemotDirPath, logFileName);\r\n        TimelineEntity entity = store.getEntity(entityNew.getEntityId(), entityNew.getEntityType(), EnumSet.allOf(Field.class));\r\n        assertNotNull(entity);\r\n        assertEquals(entityNew.getEntityId(), entity.getEntityId());\r\n        assertEquals(entityNew.getEntityType(), entity.getEntityType());\r\n    } finally {\r\n        if (store != null) {\r\n            store.stop();\r\n        }\r\n        fs.delete(userBase, true);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testScanActiveLogsWithInvalidFile",
  "errType" : [ "StackOverflowError" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testScanActiveLogsWithInvalidFile() throws Exception\n{\r\n    Path invalidFile = new Path(testActiveDirPath, \"invalidfile\");\r\n    try {\r\n        if (!fs.exists(invalidFile)) {\r\n            fs.createNewFile(invalidFile);\r\n        }\r\n        store.scanActiveLogs();\r\n    } catch (StackOverflowError error) {\r\n        Assert.fail(\"EntityLogScanner crashed with StackOverflowError\");\r\n    } finally {\r\n        if (fs.exists(invalidFile)) {\r\n            fs.delete(invalidFile, false);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testScanActiveLogsAndMoveToDonePluginRead",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testScanActiveLogsAndMoveToDonePluginRead() throws Exception\n{\r\n    EntityGroupFSTimelineStore store = null;\r\n    ApplicationId appId = ApplicationId.fromString(\"application_1501509265053_0002\");\r\n    String user = UserGroupInformation.getCurrentUser().getShortUserName();\r\n    Path userBase = new Path(testActiveDirPath, user);\r\n    Path userAppRoot = new Path(userBase, appId.toString());\r\n    Path attemotDirPath = new Path(userAppRoot, getAttemptDirName(appId));\r\n    try {\r\n        store = createAndStartTimelineStore(AppState.COMPLETED);\r\n        String logFileName = EntityGroupFSTimelineStore.ENTITY_LOG_PREFIX + EntityGroupPlugInForTest.getStandardTimelineGroupId(appId);\r\n        createTestFiles(appId, attemotDirPath, logFileName);\r\n        store.scanActiveLogs();\r\n        TimelineEntity entity = store.getEntity(entityNew.getEntityId(), entityNew.getEntityType(), EnumSet.allOf(Field.class));\r\n        assertNotNull(entity);\r\n        assertEquals(entityNew.getEntityId(), entity.getEntityId());\r\n        assertEquals(entityNew.getEntityType(), entity.getEntityType());\r\n    } finally {\r\n        if (store != null) {\r\n            store.stop();\r\n        }\r\n        fs.delete(userBase, true);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testIfAnyDuplicateEntities",
  "errType" : null,
  "containingMethodsNum" : 32,
  "sourceCodeText" : "void testIfAnyDuplicateEntities() throws Exception\n{\r\n    ApplicationId appId = ApplicationId.fromString(\"application_1501509265053_0002\");\r\n    String user = UserGroupInformation.getCurrentUser().getShortUserName();\r\n    Path activeDirPath = getTestRootPath(\"active1\");\r\n    Path doneDirPath = getTestRootPath(\"done1\");\r\n    Path userBase = new Path(activeDirPath, user);\r\n    Path userAppRoot = new Path(userBase, appId.toString());\r\n    Path attemptDirPath = new Path(userAppRoot, getAttemptDirName(appId));\r\n    String logFileName = EntityGroupFSTimelineStore.ENTITY_LOG_PREFIX + EntityGroupPlugInForTest.getStandardTimelineGroupId(appId);\r\n    createTestFiles(appId, attemptDirPath, logFileName);\r\n    store.stop();\r\n    EntityGroupFSTimelineStore newStore = new EntityGroupFSTimelineStore() {\r\n\r\n        @Override\r\n        protected AppState getAppState(ApplicationId appId) throws IOException {\r\n            return AppState.ACTIVE;\r\n        }\r\n    };\r\n    try {\r\n        Configuration newConfig = new YarnConfiguration(config);\r\n        newConfig.set(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_SUMMARY_STORE, TestTimelineStore.class.getName());\r\n        newConfig.set(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_DONE_DIR, doneDirPath.toString());\r\n        newConfig.set(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_ACTIVE_DIR, activeDirPath.toString());\r\n        newStore.init(newConfig);\r\n        newStore.setFs(fs);\r\n        newStore.start();\r\n        newStore.scanActiveLogs();\r\n        GenericTestUtils.waitFor(new Supplier<Boolean>() {\r\n\r\n            @Override\r\n            public Boolean get() {\r\n                return TestTimelineStore.getEntitiesCount() == 2;\r\n            }\r\n        }, 100, 10000);\r\n        assertEquals(\"Wrong Initial Entities Count\", 2, TestTimelineStore.getEntitiesCount());\r\n        TimelineEntities entities = PluginStoreTestUtils.generateTestEntities();\r\n        FSDataOutputStream outStream = fs.append(new Path(attemptDirPath, TEST_SUMMARY_LOG_FILE_NAME));\r\n        JsonGenerator jsonGenerator = new JsonFactory().createGenerator((OutputStream) outStream);\r\n        jsonGenerator.setPrettyPrinter(new MinimalPrettyPrinter(\"\\n\"));\r\n        ObjectMapper objMapper = new ObjectMapper();\r\n        objMapper.setAnnotationIntrospector(new JaxbAnnotationIntrospector(TypeFactory.defaultInstance()));\r\n        objMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\r\n        for (TimelineEntity entity : entities.getEntities()) {\r\n            objMapper.writeValue(jsonGenerator, entity);\r\n        }\r\n        outStream.close();\r\n        newStore.scanActiveLogs();\r\n        GenericTestUtils.waitFor(new Supplier<Boolean>() {\r\n\r\n            @Override\r\n            public Boolean get() {\r\n                return TestTimelineStore.getEntitiesCount() == 4;\r\n            }\r\n        }, 100, 10000);\r\n        assertEquals(\"Duplicate Entities present\", 4, TestTimelineStore.getEntitiesCount());\r\n    } finally {\r\n        if (newStore != null) {\r\n            newStore.stop();\r\n        }\r\n        fs.delete(userAppRoot, true);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testStateStoreAndRecovery",
  "errType" : [ "IOException", "IOException" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testStateStoreAndRecovery() throws Exception\n{\r\n    EntityGroupFSTimelineStore.AppLogs appLogs = store.new AppLogs(mainTestAppId, mainTestAppDirPath, AppState.COMPLETED);\r\n    appLogs.scanForLogs();\r\n    List<LogInfo> summaryLogs = appLogs.getSummaryLogs();\r\n    List<EntityGroupFSTimelineStore.AppLogs> logsList = new ArrayList<>();\r\n    logsList.add(appLogs);\r\n    Path checkpointFile = new Path(fs.getHomeDirectory(), \"atscheckpoint\");\r\n    try (DataOutputStream dataOutputStream = fs.create(checkpointFile)) {\r\n        store.storeLogFiles(logsList, dataOutputStream);\r\n    } catch (IOException e) {\r\n        Assert.fail(\"Failed to store the log files\");\r\n    }\r\n    try (DataInputStream dataInputStream = fs.open(checkpointFile)) {\r\n        HashMap<String, Pair<Long, Long>> logFiles = store.recoverLogFiles(dataInputStream);\r\n        assertEquals(summaryLogs.size(), logFiles.size());\r\n        for (LogInfo logInfo : summaryLogs) {\r\n            String logFileName = logInfo.getAttemptDirName() + Path.SEPARATOR + logInfo.getFilename();\r\n            Pair<Long, Long> pair = logFiles.get(logFileName);\r\n            assertNotNull(\"Failed to recover \" + logFileName, pair);\r\n            assertTrue(\"LastProcessedTime is not same\", logInfo.getLastProcessedTime() == pair.getLeft());\r\n            assertTrue(\"Offset is not same\", logInfo.getOffset() == pair.getRight());\r\n        }\r\n    } catch (IOException e) {\r\n        Assert.fail(\"Failed to recover the log files\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "createAndStartTimelineStore",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "EntityGroupFSTimelineStore createAndStartTimelineStore(AppState appstate)\n{\r\n    store.stop();\r\n    EntityGroupFSTimelineStore newStore = new EntityGroupFSTimelineStore() {\r\n\r\n        @Override\r\n        protected AppState getAppState(ApplicationId appId) throws IOException {\r\n            return appstate;\r\n        }\r\n    };\r\n    newStore.init(config);\r\n    newStore.setFs(fs);\r\n    newStore.start();\r\n    return newStore;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "createTestFiles",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void createTestFiles(ApplicationId appId, Path attemptDirPath) throws IOException\n{\r\n    createTestFiles(appId, attemptDirPath, mainEntityLogFileName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "createTestFiles",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void createTestFiles(ApplicationId appId, Path attemptDirPath, String logPath) throws IOException\n{\r\n    TimelineEntities entities = PluginStoreTestUtils.generateTestEntities();\r\n    PluginStoreTestUtils.writeEntities(entities, new Path(attemptDirPath, TEST_SUMMARY_LOG_FILE_NAME), fs);\r\n    Map<String, Set<Object>> primaryFilters = new HashMap<>();\r\n    Set<Object> appSet = new HashSet<Object>();\r\n    appSet.add(appId.toString());\r\n    primaryFilters.put(EntityGroupPlugInForTest.APP_ID_FILTER_NAME, appSet);\r\n    entityNew = PluginStoreTestUtils.createEntity(appId.toString(), \"type_3\", 789L, null, null, primaryFilters, null, \"domain_id_1\");\r\n    TimelineEntities entityList = new TimelineEntities();\r\n    entityList.addEntity(entityNew);\r\n    PluginStoreTestUtils.writeEntities(entityList, new Path(attemptDirPath, logPath), fs);\r\n    FSDataOutputStream out = fs.create(new Path(attemptDirPath, TEST_DOMAIN_LOG_FILE_NAME));\r\n    out.close();\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getTestRootPath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getTestRootPath(String pathString)\n{\r\n    return fileContextTestHelper.getTestRootPath(fc, pathString);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getAttemptDirName",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getAttemptDirName(ApplicationId appId)\n{\r\n    return ApplicationAttemptId.appAttemptIdStrPrefix + appId.toString() + \"_1\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "prepareFileSystemForPluginStore",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "FileSystem prepareFileSystemForPluginStore(FileSystem fs) throws IOException\n{\r\n    Path activeDir = new Path(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_ACTIVE_DIR_DEFAULT);\r\n    Path doneDir = new Path(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_DONE_DIR_DEFAULT);\r\n    fs.mkdirs(activeDir);\r\n    fs.mkdirs(doneDir);\r\n    return fs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "prepareConfiguration",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "YarnConfiguration prepareConfiguration(YarnConfiguration conf, MiniDFSCluster dfsCluster)\n{\r\n    conf.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY, dfsCluster.getURI().toString());\r\n    conf.setFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION, 1.5f);\r\n    conf.setLong(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_SCAN_INTERVAL_SECONDS, 1);\r\n    conf.set(YarnConfiguration.TIMELINE_SERVICE_STORE, EntityGroupFSTimelineStore.class.getName());\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "createLogFile",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FSDataOutputStream createLogFile(Path logPath, FileSystem fs) throws IOException\n{\r\n    FSDataOutputStream stream;\r\n    stream = fs.create(logPath, true);\r\n    return stream;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "createObjectMapper",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ObjectMapper createObjectMapper()\n{\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.setAnnotationIntrospector(new JaxbAnnotationIntrospector(TypeFactory.defaultInstance()));\r\n    mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\r\n    return mapper;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "generateTestEntities",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "TimelineEntities generateTestEntities()\n{\r\n    TimelineEntities entities = new TimelineEntities();\r\n    Map<String, Set<Object>> primaryFilters = new HashMap<String, Set<Object>>();\r\n    Set<Object> l1 = new HashSet<Object>();\r\n    l1.add(\"username\");\r\n    Set<Object> l2 = new HashSet<Object>();\r\n    l2.add(Integer.MAX_VALUE);\r\n    Set<Object> l3 = new HashSet<Object>();\r\n    l3.add(\"123abc\");\r\n    Set<Object> l4 = new HashSet<Object>();\r\n    l4.add((long) Integer.MAX_VALUE + 1l);\r\n    primaryFilters.put(\"user\", l1);\r\n    primaryFilters.put(\"appname\", l2);\r\n    primaryFilters.put(\"other\", l3);\r\n    primaryFilters.put(\"long\", l4);\r\n    Map<String, Object> secondaryFilters = new HashMap<String, Object>();\r\n    secondaryFilters.put(\"startTime\", 123456);\r\n    secondaryFilters.put(\"status\", \"RUNNING\");\r\n    Map<String, Object> otherInfo1 = new HashMap<String, Object>();\r\n    otherInfo1.put(\"info1\", \"val1\");\r\n    otherInfo1.putAll(secondaryFilters);\r\n    String entityId1 = \"id_1\";\r\n    String entityType1 = \"type_1\";\r\n    String entityId2 = \"id_2\";\r\n    String entityType2 = \"type_2\";\r\n    Map<String, Set<String>> relatedEntities = new HashMap<String, Set<String>>();\r\n    relatedEntities.put(entityType2, Collections.singleton(entityId2));\r\n    TimelineEvent ev3 = createEvent(789l, \"launch_event\", null);\r\n    TimelineEvent ev4 = createEvent(0l, \"init_event\", null);\r\n    List<TimelineEvent> events = new ArrayList<TimelineEvent>();\r\n    events.add(ev3);\r\n    events.add(ev4);\r\n    entities.addEntity(createEntity(entityId2, entityType2, 456l, events, null, null, null, \"domain_id_1\"));\r\n    TimelineEvent ev1 = createEvent(123l, \"start_event\", null);\r\n    entities.addEntity(createEntity(entityId1, entityType1, 123l, Collections.singletonList(ev1), relatedEntities, primaryFilters, otherInfo1, \"domain_id_1\"));\r\n    return entities;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "verifyTestEntities",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void verifyTestEntities(TimelineDataManager tdm) throws YarnException, IOException\n{\r\n    TimelineEntity entity1 = tdm.getEntity(\"type_1\", \"id_1\", EnumSet.allOf(TimelineReader.Field.class), UserGroupInformation.getLoginUser());\r\n    TimelineEntity entity2 = tdm.getEntity(\"type_2\", \"id_2\", EnumSet.allOf(TimelineReader.Field.class), UserGroupInformation.getLoginUser());\r\n    assertNotNull(entity1);\r\n    assertNotNull(entity2);\r\n    assertEquals(\"Failed to read out entity 1\", (Long) 123l, entity1.getStartTime());\r\n    assertEquals(\"Failed to read out entity 2\", (Long) 456l, entity2.getStartTime());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "createEntity",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "TimelineEntity createEntity(String entityId, String entityType, Long startTime, List<TimelineEvent> events, Map<String, Set<String>> relatedEntities, Map<String, Set<Object>> primaryFilters, Map<String, Object> otherInfo, String domainId)\n{\r\n    TimelineEntity entity = new TimelineEntity();\r\n    entity.setEntityId(entityId);\r\n    entity.setEntityType(entityType);\r\n    entity.setStartTime(startTime);\r\n    entity.setEvents(events);\r\n    if (relatedEntities != null) {\r\n        for (Map.Entry<String, Set<String>> e : relatedEntities.entrySet()) {\r\n            for (String v : e.getValue()) {\r\n                entity.addRelatedEntity(e.getKey(), v);\r\n            }\r\n        }\r\n    } else {\r\n        entity.setRelatedEntities(null);\r\n    }\r\n    entity.setPrimaryFilters(primaryFilters);\r\n    entity.setOtherInfo(otherInfo);\r\n    entity.setDomainId(domainId);\r\n    return entity;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "createEvent",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "TimelineEvent createEvent(long timestamp, String type, Map<String, Object> info)\n{\r\n    TimelineEvent event = new TimelineEvent();\r\n    event.setTimestamp(timestamp);\r\n    event.setEventType(type);\r\n    event.setEventInfo(info);\r\n    return event;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "writeEntities",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void writeEntities(TimelineEntities entities, Path logPath, FileSystem fs) throws IOException\n{\r\n    FSDataOutputStream outStream = createLogFile(logPath, fs);\r\n    JsonGenerator jsonGenerator = new JsonFactory().createGenerator((OutputStream) outStream);\r\n    jsonGenerator.setPrettyPrinter(new MinimalPrettyPrinter(\"\\n\"));\r\n    ObjectMapper objMapper = createObjectMapper();\r\n    for (TimelineEntity entity : entities.getEntities()) {\r\n        objMapper.writeValue(jsonGenerator, entity);\r\n    }\r\n    outStream.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getTdmWithStore",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineDataManager getTdmWithStore(Configuration config, TimelineStore store)\n{\r\n    TimelineACLsManager aclManager = new TimelineACLsManager(config);\r\n    TimelineDataManager tdm = new TimelineDataManager(store, aclManager);\r\n    tdm.init(config);\r\n    return tdm;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getTdmWithMemStore",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineDataManager getTdmWithMemStore(Configuration config)\n{\r\n    TimelineStore store = new MemoryTimelineStore(\"MemoryStore.test\");\r\n    TimelineDataManager tdm = getTdmWithStore(config, store);\r\n    return tdm;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    store = new LevelDBCacheTimelineStore(\"app1\");\r\n    store.init(new YarnConfiguration());\r\n    store.start();\r\n    loadTestEntityData();\r\n    loadVerificationEntityData();\r\n    loadTestDomainData();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    store.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getTimelineStore",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineStore getTimelineStore()\n{\r\n    return store;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testDefaultConstructor",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testDefaultConstructor()\n{\r\n    TimelineStore store = null;\r\n    try {\r\n        store = ReflectionUtils.newInstance(LevelDBCacheTimelineStore.class, new YarnConfiguration());\r\n    } finally {\r\n        assertNotNull(\"LevelDBCacheTimelineStore failed to instantiate\", store);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetSingleEntity",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetSingleEntity() throws IOException\n{\r\n    super.testGetSingleEntity();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetEntities",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetEntities() throws IOException\n{\r\n    super.testGetEntities();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetEntitiesWithFromId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetEntitiesWithFromId() throws IOException\n{\r\n    super.testGetEntitiesWithFromId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetEntitiesWithFromTs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetEntitiesWithFromTs() throws IOException\n{\r\n    super.testGetEntitiesWithFromTs();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetEntitiesWithPrimaryFilters",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetEntitiesWithPrimaryFilters() throws IOException\n{\r\n    super.testGetEntitiesWithPrimaryFilters();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetEntitiesWithSecondaryFilters",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetEntitiesWithSecondaryFilters() throws IOException\n{\r\n    super.testGetEntitiesWithSecondaryFilters();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetEvents",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetEvents() throws IOException\n{\r\n    super.testGetEvents();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetDomain",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetDomain() throws IOException\n{\r\n    super.testGetDomain();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetDomains",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetDomains() throws IOException\n{\r\n    super.testGetDomains();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getTimelineEntityGroupId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Set<TimelineEntityGroupId> getTimelineEntityGroupId(String entityType, NameValuePair primaryFilter, Collection<NameValuePair> secondaryFilters)\n{\r\n    ApplicationId appId = ApplicationId.fromString(primaryFilter.getValue().toString());\r\n    return Sets.newHashSet(getStandardTimelineGroupId(appId));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getTimelineEntityGroupId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Set<TimelineEntityGroupId> getTimelineEntityGroupId(String entityId, String entityType)\n{\r\n    ApplicationId appId = ApplicationId.fromString(entityId);\r\n    return Sets.newHashSet(getStandardTimelineGroupId(appId));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getTimelineEntityGroupId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<TimelineEntityGroupId> getTimelineEntityGroupId(String entityType, SortedSet<String> entityIds, Set<String> eventTypes)\n{\r\n    return Sets.newHashSet();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getStandardTimelineGroupId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineEntityGroupId getStandardTimelineGroupId(ApplicationId appId)\n{\r\n    return TimelineEntityGroupId.newInstance(appId, \"test\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    config.set(MiniDFSCluster.HDFS_MINIDFS_BASEDIR, TEST_ROOT_DIR.toString());\r\n    HdfsConfiguration hdfsConfig = new HdfsConfiguration();\r\n    hdfsCluster = new MiniDFSCluster.Builder(hdfsConfig).numDataNodes(1).build();\r\n    fs = hdfsCluster.getFileSystem();\r\n    fc = FileContext.getFileContext(hdfsCluster.getURI(0), config);\r\n    Path testAppDirPath = getTestRootPath(TEST_ATTEMPT_DIR_NAME);\r\n    fs.mkdirs(testAppDirPath, new FsPermission(FILE_LOG_DIR_PERMISSIONS));\r\n    objMapper = PluginStoreTestUtils.createObjectMapper();\r\n    TimelineEntities testEntities = PluginStoreTestUtils.generateTestEntities();\r\n    writeEntitiesLeaveOpen(testEntities, new Path(testAppDirPath, TEST_ENTITY_FILE_NAME));\r\n    testDomain = new TimelineDomain();\r\n    testDomain.setId(\"domain_1\");\r\n    testDomain.setReaders(UserGroupInformation.getLoginUser().getUserName());\r\n    testDomain.setOwner(UserGroupInformation.getLoginUser().getUserName());\r\n    testDomain.setDescription(\"description\");\r\n    writeDomainLeaveOpen(testDomain, new Path(testAppDirPath, TEST_DOMAIN_FILE_NAME));\r\n    writeBrokenFile(new Path(testAppDirPath, TEST_BROKEN_FILE_NAME));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    jsonGenerator.close();\r\n    outStream.close();\r\n    outStreamDomain.close();\r\n    hdfsCluster.shutdown();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testMatchesGroupId",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testMatchesGroupId() throws Exception\n{\r\n    String testGroupId = \"app1_group1\";\r\n    EntityLogInfo testLogInfo = new EntityLogInfo(TEST_ATTEMPT_DIR_NAME, \"app1_group1\", UserGroupInformation.getLoginUser().getUserName());\r\n    assertTrue(testLogInfo.matchesGroupId(testGroupId));\r\n    testLogInfo = new EntityLogInfo(TEST_ATTEMPT_DIR_NAME, \"test_app1_group1\", UserGroupInformation.getLoginUser().getUserName());\r\n    assertTrue(testLogInfo.matchesGroupId(testGroupId));\r\n    testLogInfo = new EntityLogInfo(TEST_ATTEMPT_DIR_NAME, \"app2_group1\", UserGroupInformation.getLoginUser().getUserName());\r\n    assertFalse(testLogInfo.matchesGroupId(testGroupId));\r\n    testLogInfo = new EntityLogInfo(TEST_ATTEMPT_DIR_NAME, \"app1_group2\", UserGroupInformation.getLoginUser().getUserName());\r\n    assertFalse(testLogInfo.matchesGroupId(testGroupId));\r\n    testLogInfo = new EntityLogInfo(TEST_ATTEMPT_DIR_NAME, \"app1_group12\", UserGroupInformation.getLoginUser().getUserName());\r\n    assertFalse(testLogInfo.matchesGroupId(testGroupId));\r\n    testLogInfo = new EntityLogInfo(TEST_ATTEMPT_DIR_NAME, \"app1_group1_2\", UserGroupInformation.getLoginUser().getUserName());\r\n    assertTrue(testLogInfo.matchesGroupId(testGroupId));\r\n    testLogInfo = new EntityLogInfo(TEST_ATTEMPT_DIR_NAME, \"app1_group1.dat\", UserGroupInformation.getLoginUser().getUserName());\r\n    assertTrue(testLogInfo.matchesGroupId(testGroupId));\r\n    testLogInfo = new EntityLogInfo(TEST_ATTEMPT_DIR_NAME, \"app2\", UserGroupInformation.getLoginUser().getUserName());\r\n    assertFalse(testLogInfo.matchesGroupId(testGroupId));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testParseEntity",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testParseEntity() throws Exception\n{\r\n    TimelineDataManager tdm = PluginStoreTestUtils.getTdmWithMemStore(config);\r\n    EntityLogInfo testLogInfo = new EntityLogInfo(TEST_ATTEMPT_DIR_NAME, TEST_ENTITY_FILE_NAME, UserGroupInformation.getLoginUser().getUserName());\r\n    testLogInfo.parseForStore(tdm, getTestRootPath(), true, jsonFactory, objMapper, fs);\r\n    PluginStoreTestUtils.verifyTestEntities(tdm);\r\n    tdm.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testParseBrokenEntity",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testParseBrokenEntity() throws Exception\n{\r\n    TimelineDataManager tdm = PluginStoreTestUtils.getTdmWithMemStore(config);\r\n    EntityLogInfo testLogInfo = new EntityLogInfo(TEST_ATTEMPT_DIR_NAME, TEST_BROKEN_FILE_NAME, UserGroupInformation.getLoginUser().getUserName());\r\n    DomainLogInfo domainLogInfo = new DomainLogInfo(TEST_ATTEMPT_DIR_NAME, TEST_BROKEN_FILE_NAME, UserGroupInformation.getLoginUser().getUserName());\r\n    testLogInfo.parseForStore(tdm, getTestRootPath(), true, jsonFactory, objMapper, fs);\r\n    domainLogInfo.parseForStore(tdm, getTestRootPath(), true, jsonFactory, objMapper, fs);\r\n    tdm.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testParseDomain",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testParseDomain() throws Exception\n{\r\n    TimelineDataManager tdm = PluginStoreTestUtils.getTdmWithMemStore(config);\r\n    DomainLogInfo domainLogInfo = new DomainLogInfo(TEST_ATTEMPT_DIR_NAME, TEST_DOMAIN_FILE_NAME, UserGroupInformation.getLoginUser().getUserName());\r\n    domainLogInfo.parseForStore(tdm, getTestRootPath(), true, jsonFactory, objMapper, fs);\r\n    TimelineDomain resultDomain = tdm.getDomain(\"domain_1\", UserGroupInformation.getLoginUser());\r\n    assertNotNull(resultDomain);\r\n    assertEquals(testDomain.getReaders(), resultDomain.getReaders());\r\n    assertEquals(testDomain.getOwner(), resultDomain.getOwner());\r\n    assertEquals(testDomain.getDescription(), resultDomain.getDescription());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "writeBrokenFile",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void writeBrokenFile(Path logPath) throws IOException\n{\r\n    FSDataOutputStream out = null;\r\n    try {\r\n        String broken = \"{ broken { [[]} broken\";\r\n        out = PluginStoreTestUtils.createLogFile(logPath, fs);\r\n        out.write(broken.getBytes(Charset.forName(\"UTF-8\")));\r\n        out.close();\r\n        out = null;\r\n    } finally {\r\n        if (out != null) {\r\n            out.close();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "writeEntitiesLeaveOpen",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void writeEntitiesLeaveOpen(TimelineEntities entities, Path logPath) throws IOException\n{\r\n    if (outStream == null) {\r\n        outStream = PluginStoreTestUtils.createLogFile(logPath, fs);\r\n        jsonGenerator = new JsonFactory().createGenerator((OutputStream) outStream);\r\n        jsonGenerator.setPrettyPrinter(new MinimalPrettyPrinter(\"\\n\"));\r\n    }\r\n    for (TimelineEntity entity : entities.getEntities()) {\r\n        objMapper.writeValue(jsonGenerator, entity);\r\n    }\r\n    outStream.hflush();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "writeDomainLeaveOpen",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void writeDomainLeaveOpen(TimelineDomain domain, Path logPath) throws IOException\n{\r\n    if (outStreamDomain == null) {\r\n        outStreamDomain = PluginStoreTestUtils.createLogFile(logPath, fs);\r\n    }\r\n    JsonGenerator jsonGeneratorLocal = new JsonFactory().createGenerator((OutputStream) outStreamDomain);\r\n    jsonGeneratorLocal.setPrettyPrinter(new MinimalPrettyPrinter(\"\\n\"));\r\n    objMapper.writeValue(jsonGeneratorLocal, domain);\r\n    outStreamDomain.hflush();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getTestRootPath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getTestRootPath()\n{\r\n    return fileContextTestHelper.getTestRootPath(fc);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getTestRootPath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getTestRootPath(String pathString)\n{\r\n    return fileContextTestHelper.getTestRootPath(fc, pathString);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testLifecycleAndOverride",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testLifecycleAndOverride() throws Throwable\n{\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    try (NoRMStore store = new NoRMStore()) {\r\n        store.init(conf);\r\n        store.start();\r\n        Assert.assertEquals(EntityGroupFSTimelineStore.AppState.ACTIVE, store.getAppState(ApplicationId.newInstance(1, 1)));\r\n        store.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
} ]