[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "checkSizeAndFlushIfNecessary",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void checkSizeAndFlushIfNecessary(int length) throws IOException\n{\r\n    if (buffer.position() > 0 && buffer.remaining() < length) {\r\n        flush();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void write(int v) throws IOException\n{\r\n    checkSizeAndFlushIfNecessary(1);\r\n    buffer.put((byte) v);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "shortOfSpace",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean shortOfSpace(int dataLength) throws IOException\n{\r\n    if (buffer.remaining() < dataLength) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void write(byte[] b, int off, int len) throws IOException\n{\r\n    int remain = len;\r\n    int offset = off;\r\n    while (remain > 0) {\r\n        int currentFlush = 0;\r\n        if (buffer.remaining() > 0) {\r\n            currentFlush = Math.min(buffer.remaining(), remain);\r\n            buffer.put(b, offset, currentFlush);\r\n            remain -= currentFlush;\r\n            offset += currentFlush;\r\n        } else {\r\n            flush();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "flush",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void flush() throws IOException\n{\r\n    target.sendData();\r\n    buffer.position(0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void close() throws IOException\n{\r\n    if (hasUnFlushedData()) {\r\n        flush();\r\n    }\r\n    target.finishSendData();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "writeBoolean",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void writeBoolean(boolean v) throws IOException\n{\r\n    checkSizeAndFlushIfNecessary(1);\r\n    buffer.put(v ? TRUE : FALSE);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "writeByte",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void writeByte(int v) throws IOException\n{\r\n    checkSizeAndFlushIfNecessary(1);\r\n    buffer.put((byte) v);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "writeShort",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void writeShort(int v) throws IOException\n{\r\n    checkSizeAndFlushIfNecessary(2);\r\n    buffer.putShort((short) v);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "writeChar",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void writeChar(int v) throws IOException\n{\r\n    checkSizeAndFlushIfNecessary(2);\r\n    buffer.put((byte) ((v >>> 8) & 0xFF));\r\n    buffer.put((byte) ((v >>> 0) & 0xFF));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "writeInt",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void writeInt(int v) throws IOException\n{\r\n    checkSizeAndFlushIfNecessary(4);\r\n    buffer.putInt(v);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "writeLong",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void writeLong(long v) throws IOException\n{\r\n    checkSizeAndFlushIfNecessary(8);\r\n    buffer.putLong(v);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "writeFloat",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void writeFloat(float v) throws IOException\n{\r\n    checkSizeAndFlushIfNecessary(4);\r\n    writeInt(Float.floatToIntBits(v));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "writeDouble",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void writeDouble(double v) throws IOException\n{\r\n    checkSizeAndFlushIfNecessary(8);\r\n    writeLong(Double.doubleToLongBits(v));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "writeBytes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void writeBytes(String s) throws IOException\n{\r\n    javaWriter.writeBytes(s);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "writeChars",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void writeChars(String s) throws IOException\n{\r\n    javaWriter.writeChars(s);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "writeUTF",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void writeUTF(String str) throws IOException\n{\r\n    javaWriter.writeUTF(str);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "hasUnFlushedData",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean hasUnFlushedData()\n{\r\n    return buffer.position() > 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\handlers",
  "methodName" : "getKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "DataInputBuffer getKey() throws IOException\n{\r\n    return keyBuffer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\handlers",
  "methodName" : "getValue",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "DataInputBuffer getValue() throws IOException\n{\r\n    return valueBuffer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\handlers",
  "methodName" : "reset",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void reset()\n{\r\n    noMoreData = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\handlers",
  "methodName" : "next",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "boolean next() throws IOException\n{\r\n    if (closed) {\r\n        return false;\r\n    }\r\n    if (noMoreData) {\r\n        return false;\r\n    }\r\n    final int asideRemain = asideBuffer.remaining();\r\n    final int inputRemain = inputBuffer.remaining();\r\n    if (asideRemain == 0 && inputRemain == 0) {\r\n        input.loadData();\r\n    }\r\n    if (asideBuffer.remaining() > 0) {\r\n        return nextKeyValue(asideBuffer);\r\n    } else if (inputBuffer.remaining() > 0) {\r\n        return nextKeyValue(inputBuffer);\r\n    } else {\r\n        noMoreData = true;\r\n        return false;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\handlers",
  "methodName" : "nextKeyValue",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "boolean nextKeyValue(InputBuffer buffer) throws IOException\n{\r\n    if (closed) {\r\n        return false;\r\n    }\r\n    nativeReader.reset(buffer);\r\n    final int keyLength = nativeReader.readInt();\r\n    if (keyBytes.length < keyLength) {\r\n        keyBytes = new byte[keyLength];\r\n    }\r\n    final int valueLength = nativeReader.readInt();\r\n    if (valueBytes.length < valueLength) {\r\n        valueBytes = new byte[valueLength];\r\n    }\r\n    IOUtils.readFully(nativeReader, keyBytes, 0, keyLength);\r\n    IOUtils.readFully(nativeReader, valueBytes, 0, valueLength);\r\n    keyBuffer.reset(keyBytes, keyLength);\r\n    valueBuffer.reset(valueBytes, valueLength);\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\handlers",
  "methodName" : "receiveData",
  "errType" : null,
  "containingMethodsNum" : 21,
  "sourceCodeText" : "boolean receiveData() throws IOException\n{\r\n    if (closed) {\r\n        return false;\r\n    }\r\n    final ByteBuffer input = inputBuffer.getByteBuffer();\r\n    if (null != asideBuffer && asideBuffer.length() > 0) {\r\n        if (asideBuffer.remaining() > 0) {\r\n            final byte[] output = asideBuffer.getByteBuffer().array();\r\n            final int write = Math.min(asideBuffer.remaining(), input.remaining());\r\n            input.get(output, asideBuffer.position(), write);\r\n            asideBuffer.position(asideBuffer.position() + write);\r\n        }\r\n        if (asideBuffer.remaining() == 0) {\r\n            asideBuffer.position(0);\r\n        }\r\n    }\r\n    if (input.remaining() == 0) {\r\n        return true;\r\n    }\r\n    if (input.remaining() < KV_HEADER_LENGTH) {\r\n        throw new IOException(\"incomplete data, input length is: \" + input.remaining());\r\n    }\r\n    final int position = input.position();\r\n    final int keyLength = input.getInt();\r\n    final int valueLength = input.getInt();\r\n    input.position(position);\r\n    final int kvLength = keyLength + valueLength + KV_HEADER_LENGTH;\r\n    final int remaining = input.remaining();\r\n    if (kvLength > remaining) {\r\n        if (null == asideBuffer || asideBuffer.capacity() < kvLength) {\r\n            asideBuffer = new InputBuffer(BufferType.HEAP_BUFFER, kvLength);\r\n        }\r\n        asideBuffer.rewind(0, kvLength);\r\n        input.get(asideBuffer.array(), 0, remaining);\r\n        asideBuffer.position(remaining);\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\handlers",
  "methodName" : "getProgress",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Progress getProgress()\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\handlers",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void close() throws IOException\n{\r\n    if (closed) {\r\n        return;\r\n    }\r\n    if (null != nativeReader) {\r\n        nativeReader.close();\r\n    }\r\n    closed = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\handlers",
  "methodName" : "create",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "ICombineHandler create(TaskContext context) throws IOException, ClassNotFoundException\n{\r\n    final JobConf conf = new JobConf(context.getConf());\r\n    conf.set(Constants.SERIALIZATION_FRAMEWORK, String.valueOf(SerializationFramework.WRITABLE_SERIALIZATION.getType()));\r\n    String combinerClazz = conf.get(Constants.MAPRED_COMBINER_CLASS);\r\n    if (null == combinerClazz) {\r\n        combinerClazz = conf.get(MRJobConfig.COMBINE_CLASS_ATTR);\r\n    }\r\n    if (null == combinerClazz) {\r\n        return null;\r\n    } else {\r\n        LOG.info(\"NativeTask Combiner is enabled, class = \" + combinerClazz);\r\n    }\r\n    final Counter combineInputCounter = context.getTaskReporter().getCounter(TaskCounter.COMBINE_INPUT_RECORDS);\r\n    final CombinerRunner<K, V> combinerRunner = CombinerRunner.create(conf, context.getTaskAttemptId(), combineInputCounter, context.getTaskReporter(), null);\r\n    final INativeHandler nativeHandler = NativeBatchProcessor.create(NAME, conf, DataChannel.INOUT);\r\n    @SuppressWarnings(\"unchecked\")\r\n    final BufferPusher<K, V> pusher = new BufferPusher<K, V>((Class<K>) context.getInputKeyClass(), (Class<V>) context.getInputValueClass(), nativeHandler);\r\n    final BufferPuller puller = new BufferPuller(nativeHandler);\r\n    return new CombinerHandler<K, V>(nativeHandler, combinerRunner, puller, pusher);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\handlers",
  "methodName" : "onCall",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReadWriteBuffer onCall(Command command, ReadWriteBuffer parameter) throws IOException\n{\r\n    if (null == command) {\r\n        return null;\r\n    }\r\n    if (command.equals(COMBINE)) {\r\n        combine();\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\handlers",
  "methodName" : "combine",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void combine() throws IOException\n{\r\n    try {\r\n        puller.reset();\r\n        combinerRunner.combine(puller, kvPusher);\r\n        kvPusher.flush();\r\n        return;\r\n    } catch (Exception e) {\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\handlers",
  "methodName" : "getId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getId()\n{\r\n    return nativeHandler.getNativeHandler();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\handlers",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void close() throws IOException\n{\r\n    if (closed) {\r\n        return;\r\n    }\r\n    if (null != puller) {\r\n        puller.close();\r\n    }\r\n    if (null != kvPusher) {\r\n        kvPusher.close();\r\n    }\r\n    if (null != nativeHandler) {\r\n        nativeHandler.close();\r\n    }\r\n    closed = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "toLong",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long toLong(byte[] bytes, int offset)\n{\r\n    return Longs.fromBytes(bytes[offset], bytes[offset + 1], bytes[offset + 2], bytes[offset + 3], bytes[offset + 4], bytes[offset + 5], bytes[offset + 6], bytes[offset + 7]);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "toInt",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int toInt(byte[] bytes, int offset)\n{\r\n    return Ints.fromBytes(bytes[offset], bytes[offset + 1], bytes[offset + 2], bytes[offset + 3]);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "toFloat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "float toFloat(byte[] bytes)\n{\r\n    return toFloat(bytes, 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "toFloat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "float toFloat(byte[] bytes, int offset)\n{\r\n    return Float.intBitsToFloat(toInt(bytes, offset));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "toDouble",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "double toDouble(final byte[] bytes)\n{\r\n    return toDouble(bytes, 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "toDouble",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "double toDouble(final byte[] bytes, final int offset)\n{\r\n    return Double.longBitsToDouble(toLong(bytes, offset));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "toStringBinary",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toStringBinary(final byte[] b)\n{\r\n    if (b == null)\r\n        return \"null\";\r\n    return toStringBinary(b, 0, b.length);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "toStringBinary",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "String toStringBinary(final byte[] b, int off, int len)\n{\r\n    StringBuilder result = new StringBuilder();\r\n    if (off >= b.length)\r\n        return result.toString();\r\n    if (off + len > b.length)\r\n        len = b.length - off;\r\n    for (int i = off; i < off + len; ++i) {\r\n        int ch = b[i] & 0xFF;\r\n        if ((ch >= '0' && ch <= '9') || (ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z') || \" `~!@#$%^&*()-_=+[]{}|;:'\\\",.<>/?\".indexOf(ch) >= 0) {\r\n            result.append((char) ch);\r\n        } else {\r\n            result.append(\"\\\\x\");\r\n            result.append(HEX_CHARS[(ch >> 4) & 0x0F]);\r\n            result.append(HEX_CHARS[ch & 0x0F]);\r\n        }\r\n    }\r\n    return result.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "toBytes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "byte[] toBytes(final boolean b)\n{\r\n    return new byte[] { b ? (byte) -1 : (byte) 0 };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "toBytes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "byte[] toBytes(final float f)\n{\r\n    return Ints.toByteArray(Float.floatToRawIntBits(f));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "toBytes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "byte[] toBytes(final double d)\n{\r\n    return Longs.toByteArray(Double.doubleToRawLongBits(d));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\serde",
  "methodName" : "getLength",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getLength(Writable w) throws IOException\n{\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\serde",
  "methodName" : "getLength",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getLength(Text w) throws IOException\n{\r\n    return w.getLength();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\serde",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void serialize(Text w, DataOutput out) throws IOException\n{\r\n    out.write(w.getBytes(), 0, w.getLength());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\serde",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void deserialize(DataInput in, int length, Text w) throws IOException\n{\r\n    w.readWithKnownLength(in, length);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "shortOfSpace",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean shortOfSpace(int length) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "hasUnFlushedData",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean hasUnFlushedData()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void init() throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "name",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String name()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "registerKey",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void registerKey(String keyClassName, Class<?> key) throws IOException\n{\r\n    serialization.register(keyClassName, key);\r\n    keyClassNames.add(keyClassName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "support",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean support(String keyClassName, INativeSerializer<?> serializer, JobConf job)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "define",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean define(Class<?> keyComparator)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\serde",
  "methodName" : "getLength",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getLength(Writable w) throws IOException\n{\r\n    return 8;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\handlers",
  "methodName" : "collect",
  "errType" : null,
  "containingMethodsNum" : 25,
  "sourceCodeText" : "boolean collect(InputBuffer buffer) throws IOException\n{\r\n    if (closed) {\r\n        return false;\r\n    }\r\n    final ByteBuffer input = buffer.getByteBuffer();\r\n    if (null != asideBuffer && asideBuffer.length() > 0) {\r\n        if (asideBuffer.remaining() > 0) {\r\n            final byte[] output = asideBuffer.getByteBuffer().array();\r\n            final int write = Math.min(asideBuffer.remaining(), input.remaining());\r\n            input.get(output, asideBuffer.position(), write);\r\n            asideBuffer.position(asideBuffer.position() + write);\r\n        }\r\n        if (asideBuffer.remaining() == 0 && asideBuffer.position() > 0) {\r\n            asideBuffer.position(0);\r\n            write(asideBuffer);\r\n            asideBuffer.rewind(0, 0);\r\n        }\r\n    }\r\n    if (input.remaining() == 0) {\r\n        return true;\r\n    }\r\n    if (input.remaining() < KV_HEADER_LENGTH) {\r\n        throw new IOException(\"incomplete data, input length is: \" + input.remaining());\r\n    }\r\n    final int position = input.position();\r\n    final int keyLength = input.getInt();\r\n    final int valueLength = input.getInt();\r\n    input.position(position);\r\n    final int kvLength = keyLength + valueLength + KV_HEADER_LENGTH;\r\n    final int remaining = input.remaining();\r\n    if (kvLength > remaining) {\r\n        if (null == asideBuffer || asideBuffer.capacity() < kvLength) {\r\n            asideBuffer = new InputBuffer(BufferType.HEAP_BUFFER, kvLength);\r\n        }\r\n        asideBuffer.rewind(0, kvLength);\r\n        input.get(asideBuffer.array(), 0, remaining);\r\n        asideBuffer.position(remaining);\r\n    } else {\r\n        write(buffer);\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\handlers",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean write(InputBuffer input) throws IOException\n{\r\n    if (closed) {\r\n        return false;\r\n    }\r\n    int totalRead = 0;\r\n    final int remain = input.remaining();\r\n    this.nativeReader.reset(input);\r\n    while (remain > totalRead) {\r\n        final int read = deserializer.deserializeKV(nativeReader, tmpOutputKey, tmpOutputValue);\r\n        if (read != 0) {\r\n            totalRead += read;\r\n            writer.write((OK) (tmpOutputKey.v), (OV) (tmpOutputValue.v));\r\n        }\r\n    }\r\n    if (remain != totalRead) {\r\n        throw new IOException(\"We expect to read \" + remain + \", but we actually read: \" + totalRead);\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\handlers",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void close() throws IOException\n{\r\n    if (closed) {\r\n        return;\r\n    }\r\n    if (null != writer) {\r\n        writer.close(null);\r\n    }\r\n    if (null != nativeReader) {\r\n        nativeReader.close();\r\n    }\r\n    closed = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\serde",
  "methodName" : "getLength",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getLength(Writable w) throws IOException\n{\r\n    return 1;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\handlers",
  "methodName" : "collect",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void collect(K key, V value, int partition) throws IOException\n{\r\n    tmpInputKey.reset(key);\r\n    tmpInputValue.reset(value);\r\n    serializer.serializePartitionKV(out, partition, tmpInputKey, tmpInputValue);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\handlers",
  "methodName" : "collect",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void collect(K key, V value) throws IOException\n{\r\n    if (closed) {\r\n        return;\r\n    }\r\n    tmpInputKey.reset(key);\r\n    tmpInputValue.reset(value);\r\n    serializer.serializeKV(out, tmpInputKey, tmpInputValue);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\handlers",
  "methodName" : "flush",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void flush() throws IOException\n{\r\n    if (null != out) {\r\n        if (out.hasUnFlushedData()) {\r\n            out.flush();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\handlers",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void close() throws IOException\n{\r\n    if (closed) {\r\n        return;\r\n    }\r\n    if (null != out) {\r\n        out.close();\r\n    }\r\n    closed = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "collect",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void collect(K key, V value, int partition) throws IOException, InterruptedException\n{\r\n    handler.collect(key, value, partition);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void close() throws IOException, InterruptedException\n{\r\n    handler.close();\r\n    if (null != updater) {\r\n        updater.stop();\r\n        NativeRuntime.reportStatus(context.getReporter());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "flush",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void flush() throws IOException, InterruptedException, ClassNotFoundException\n{\r\n    handler.flush();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "init",
  "errType" : [ "IOException", "IOException" ],
  "containingMethodsNum" : 39,
  "sourceCodeText" : "void init(Context context) throws IOException, ClassNotFoundException\n{\r\n    this.context = context;\r\n    this.job = context.getJobConf();\r\n    Platforms.init(job);\r\n    if (job.getNumReduceTasks() == 0) {\r\n        String message = \"There is no reducer, no need to use native output collector\";\r\n        LOG.error(message);\r\n        throw new InvalidJobConfException(message);\r\n    }\r\n    Class<?> comparatorClass = job.getClass(MRJobConfig.KEY_COMPARATOR, null, RawComparator.class);\r\n    if (comparatorClass != null && !Platforms.define(comparatorClass)) {\r\n        String message = \"Native output collector doesn't support customized java comparator \" + job.get(MRJobConfig.KEY_COMPARATOR);\r\n        LOG.error(message);\r\n        throw new InvalidJobConfException(message);\r\n    }\r\n    if (!QuickSort.class.getName().equals(job.get(Constants.MAP_SORT_CLASS))) {\r\n        String message = \"Native-Task doesn't support sort class \" + job.get(Constants.MAP_SORT_CLASS);\r\n        LOG.error(message);\r\n        throw new InvalidJobConfException(message);\r\n    }\r\n    if (job.getBoolean(MRConfig.SHUFFLE_SSL_ENABLED_KEY, false) == true) {\r\n        String message = \"Native-Task doesn't support secure shuffle\";\r\n        LOG.error(message);\r\n        throw new InvalidJobConfException(message);\r\n    }\r\n    final Class<?> keyCls = job.getMapOutputKeyClass();\r\n    try {\r\n        @SuppressWarnings(\"rawtypes\")\r\n        final INativeSerializer serializer = NativeSerialization.getInstance().getSerializer(keyCls);\r\n        if (null == serializer) {\r\n            String message = \"Key type not supported. Cannot find serializer for \" + keyCls.getName();\r\n            LOG.error(message);\r\n            throw new InvalidJobConfException(message);\r\n        } else if (!Platforms.support(keyCls.getName(), serializer, job)) {\r\n            String message = \"Native output collector doesn't support this key, \" + \"this key is not comparable in native: \" + keyCls.getName();\r\n            LOG.error(message);\r\n            throw new InvalidJobConfException(message);\r\n        }\r\n    } catch (final IOException e) {\r\n        String message = \"Cannot find serializer for \" + keyCls.getName();\r\n        LOG.error(message);\r\n        throw new IOException(message);\r\n    }\r\n    final boolean ret = NativeRuntime.isNativeLibraryLoaded();\r\n    if (ret) {\r\n        if (job.getBoolean(MRJobConfig.MAP_OUTPUT_COMPRESS, false)) {\r\n            String codec = job.get(MRJobConfig.MAP_OUTPUT_COMPRESS_CODEC);\r\n            if (!NativeRuntime.supportsCompressionCodec(codec.getBytes(Charsets.UTF_8))) {\r\n                String message = \"Native output collector doesn't support compression codec \" + codec;\r\n                LOG.error(message);\r\n                throw new InvalidJobConfException(message);\r\n            }\r\n        }\r\n        NativeRuntime.configure(job);\r\n        final long updateInterval = job.getLong(Constants.NATIVE_STATUS_UPDATE_INTERVAL, Constants.NATIVE_STATUS_UPDATE_INTERVAL_DEFVAL);\r\n        updater = new StatusReportChecker(context.getReporter(), updateInterval);\r\n        updater.start();\r\n    } else {\r\n        String message = \"NativeRuntime cannot be loaded, please check that \" + \"libnativetask.so is in hadoop library dir\";\r\n        LOG.error(message);\r\n        throw new InvalidJobConfException(message);\r\n    }\r\n    this.handler = null;\r\n    try {\r\n        final Class<K> oKClass = (Class<K>) job.getMapOutputKeyClass();\r\n        final Class<K> oVClass = (Class<K>) job.getMapOutputValueClass();\r\n        final TaskAttemptID id = context.getMapTask().getTaskID();\r\n        final TaskContext taskContext = new TaskContext(job, null, null, oKClass, oVClass, context.getReporter(), id);\r\n        handler = NativeCollectorOnlyHandler.create(taskContext);\r\n    } catch (final IOException e) {\r\n        String message = \"Native output collector cannot be loaded;\";\r\n        LOG.error(message);\r\n        throw new IOException(message, e);\r\n    }\r\n    LOG.info(\"Native output collector can be successfully enabled!\");\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\serde",
  "methodName" : "getLength",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int getLength(Writable w) throws IOException\n{\r\n    buffered = null;\r\n    bufferedLength = -1;\r\n    outBuffer.reset();\r\n    w.write(outData);\r\n    bufferedLength = outBuffer.size();\r\n    buffered = w;\r\n    return bufferedLength;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\serde",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void serialize(Writable w, DataOutput out) throws IOException\n{\r\n    w.write(out);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\serde",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void deserialize(DataInput in, int length, Writable w) throws IOException\n{\r\n    w.readFields(in);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "getInputKeyClass",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<?> getInputKeyClass()\n{\r\n    return iKClass;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "setInputKeyClass",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setInputKeyClass(Class<?> klass)\n{\r\n    this.iKClass = klass;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "getInputValueClass",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<?> getInputValueClass()\n{\r\n    return iVClass;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "setInputValueClass",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setInputValueClass(Class<?> klass)\n{\r\n    this.iVClass = klass;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "getOutputKeyClass",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<?> getOutputKeyClass()\n{\r\n    return this.oKClass;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "setOutputKeyClass",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setOutputKeyClass(Class<?> klass)\n{\r\n    this.oKClass = klass;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "getOutputValueClass",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<?> getOutputValueClass()\n{\r\n    return this.oVClass;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "setOutputValueClass",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setOutputValueClass(Class<?> klass)\n{\r\n    this.oVClass = klass;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "getTaskReporter",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TaskReporter getTaskReporter()\n{\r\n    return this.reporter;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "getTaskAttemptId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TaskAttemptID getTaskAttemptId()\n{\r\n    return this.taskAttemptID;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "getConf",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "JobConf getConf()\n{\r\n    return this.conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "copyOf",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TaskContext copyOf()\n{\r\n    return new TaskContext(conf, iKClass, iVClass, oKClass, oVClass, reporter, taskAttemptID);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void init(Configuration conf) throws IOException\n{\r\n    NativeSerialization.getInstance().reset();\r\n    synchronized (platforms) {\r\n        for (Platform platform : platforms) {\r\n            platform.init();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "support",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean support(String keyClassName, INativeSerializer<?> serializer, JobConf job)\n{\r\n    synchronized (platforms) {\r\n        for (Platform platform : platforms) {\r\n            if (platform.support(keyClassName, serializer, job)) {\r\n                LOG.debug(\"platform \" + platform.name() + \" support key class\" + keyClassName);\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "define",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean define(Class<?> keyComparator)\n{\r\n    synchronized (platforms) {\r\n        for (Platform platform : platforms) {\r\n            if (platform.define(keyComparator)) {\r\n                LOG.debug(\"platform \" + platform.name() + \" define comparator \" + keyComparator.getName());\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "id",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int id()\n{\r\n    return this.id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "description",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String description()\n{\r\n    return this.description;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other instanceof Command) {\r\n        return this.id == ((Command) other).id;\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int hashCode()\n{\r\n    return id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "run",
  "errType" : [ "InterruptedException", "IOException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void run()\n{\r\n    while (true) {\r\n        try {\r\n            Thread.sleep(interval);\r\n        } catch (final InterruptedException e) {\r\n            if (LOG.isDebugEnabled()) {\r\n                LOG.debug(\"StatusUpdater thread exiting \" + \"since it got interrupted\");\r\n            }\r\n            break;\r\n        }\r\n        try {\r\n            NativeRuntime.reportStatus(reporter);\r\n        } catch (final IOException e) {\r\n            LOG.warn(\"Update native status got exception\", e);\r\n            reporter.setStatus(e.toString());\r\n            break;\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "initUsedCounters",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void initUsedCounters()\n{\r\n    reporter.getCounter(TaskCounter.MAP_INPUT_RECORDS);\r\n    reporter.getCounter(TaskCounter.MAP_OUTPUT_RECORDS);\r\n    reporter.getCounter(FileInputFormatCounter.BYTES_READ);\r\n    reporter.getCounter(TaskCounter.MAP_OUTPUT_BYTES);\r\n    reporter.getCounter(TaskCounter.MAP_OUTPUT_MATERIALIZED_BYTES);\r\n    reporter.getCounter(TaskCounter.COMBINE_INPUT_RECORDS);\r\n    reporter.getCounter(TaskCounter.COMBINE_OUTPUT_RECORDS);\r\n    reporter.getCounter(TaskCounter.SPILLED_RECORDS);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "start",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void start()\n{\r\n    if (checker == null) {\r\n        initUsedCounters();\r\n        checker = new Thread(this);\r\n        checker.setDaemon(true);\r\n        checker.start();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "stop",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void stop() throws InterruptedException\n{\r\n    if (checker != null) {\r\n        checker.interrupt();\r\n        checker.join();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "getOutputFile",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path getOutputFile() throws IOException\n{\r\n    String path = String.format(OUTPUT_FILE_FORMAT_STRING, TASKTRACKER_OUTPUT);\r\n    return lDirAlloc.getLocalPathToRead(path, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "getOutputFileForWrite",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path getOutputFileForWrite(long size) throws IOException\n{\r\n    String path = String.format(OUTPUT_FILE_FORMAT_STRING, TASKTRACKER_OUTPUT);\r\n    return lDirAlloc.getLocalPathForWrite(path, size, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "getOutputIndexFile",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path getOutputIndexFile() throws IOException\n{\r\n    String path = String.format(OUTPUT_FILE_INDEX_FORMAT_STRING, TASKTRACKER_OUTPUT);\r\n    return lDirAlloc.getLocalPathToRead(path, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "getOutputIndexFileForWrite",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path getOutputIndexFileForWrite(long size) throws IOException\n{\r\n    String path = String.format(OUTPUT_FILE_INDEX_FORMAT_STRING, TASKTRACKER_OUTPUT);\r\n    return lDirAlloc.getLocalPathForWrite(path, size, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "getSpillFile",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path getSpillFile(int spillNumber) throws IOException\n{\r\n    String path = String.format(SPILL_FILE_FORMAT_STRING, TASKTRACKER_OUTPUT, spillNumber);\r\n    return lDirAlloc.getLocalPathToRead(path, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "getSpillFileForWrite",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path getSpillFileForWrite(int spillNumber, long size) throws IOException\n{\r\n    String path = String.format(SPILL_FILE_FORMAT_STRING, TASKTRACKER_OUTPUT, spillNumber);\r\n    return lDirAlloc.getLocalPathForWrite(path, size, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "getSpillIndexFile",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path getSpillIndexFile(int spillNumber) throws IOException\n{\r\n    String path = String.format(SPILL_INDEX_FILE_FORMAT_STRING, TASKTRACKER_OUTPUT, spillNumber);\r\n    return lDirAlloc.getLocalPathToRead(path, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "getSpillIndexFileForWrite",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path getSpillIndexFileForWrite(int spillNumber, long size) throws IOException\n{\r\n    String path = String.format(SPILL_INDEX_FILE_FORMAT_STRING, TASKTRACKER_OUTPUT, spillNumber);\r\n    return lDirAlloc.getLocalPathForWrite(path, size, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "getInputFile",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getInputFile(int mapId) throws IOException\n{\r\n    return lDirAlloc.getLocalPathToRead(String.format(REDUCE_INPUT_FILE_FORMAT_STRING, TASKTRACKER_OUTPUT, Integer.valueOf(mapId)), conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "getInputFileForWrite",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getInputFileForWrite(TaskID mapId, long size, Configuration conf) throws IOException\n{\r\n    return lDirAlloc.getLocalPathForWrite(String.format(REDUCE_INPUT_FILE_FORMAT_STRING, TASKTRACKER_OUTPUT, mapId.getId()), size, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "removeAll",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void removeAll() throws IOException\n{\r\n    conf.deleteLocalFiles(TASKTRACKER_OUTPUT);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "getOutputName",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getOutputName(int partition)\n{\r\n    return String.format(\"part-%05d\", partition);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\serde",
  "methodName" : "getLength",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getLength(Writable w) throws IOException\n{\r\n    return 8;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "reset",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void reset(InputBuffer buffer)\n{\r\n    this.byteBuffer = buffer.getByteBuffer();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "read",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int read() throws IOException\n{\r\n    return byteBuffer.get();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "read",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int read(byte[] b, int off, int len) throws IOException\n{\r\n    byteBuffer.get(b, off, len);\r\n    return len;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "readFully",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void readFully(byte[] b) throws IOException\n{\r\n    byteBuffer.get(b, 0, b.length);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "readFully",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void readFully(byte[] b, int off, int len) throws IOException\n{\r\n    byteBuffer.get(b, off, len);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "skipBytes",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int skipBytes(int n) throws IOException\n{\r\n    final int remains = byteBuffer.remaining();\r\n    final int skip = (remains < n) ? remains : n;\r\n    final int current = byteBuffer.position();\r\n    byteBuffer.position(current + skip);\r\n    return skip;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "readBoolean",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean readBoolean() throws IOException\n{\r\n    return (byteBuffer.get() == 1) ? true : false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "readByte",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "byte readByte() throws IOException\n{\r\n    return byteBuffer.get();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "readUnsignedByte",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int readUnsignedByte() throws IOException\n{\r\n    final int ch = byteBuffer.get();\r\n    if (ch < 0) {\r\n        throw new EOFException();\r\n    }\r\n    return ch;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "readShort",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "short readShort() throws IOException\n{\r\n    return byteBuffer.getShort();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "readUnsignedShort",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int readUnsignedShort() throws IOException\n{\r\n    return byteBuffer.getShort();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "readChar",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "char readChar() throws IOException\n{\r\n    return byteBuffer.getChar();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "readInt",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int readInt() throws IOException\n{\r\n    return byteBuffer.getInt();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "readLong",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long readLong() throws IOException\n{\r\n    return byteBuffer.getLong();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "readFloat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "float readFloat() throws IOException\n{\r\n    return byteBuffer.getFloat();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "readDouble",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "double readDouble() throws IOException\n{\r\n    return byteBuffer.getDouble();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "readLine",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String readLine() throws IOException\n{\r\n    return javaReader.readLine();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "readUTF",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String readUTF() throws IOException\n{\r\n    return javaReader.readUTF();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void close() throws IOException\n{\r\n    super.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "hasUnReadData",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean hasUnReadData()\n{\r\n    return null != byteBuffer && byteBuffer.hasRemaining();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "getOutputFile",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path getOutputFile() throws IOException\n{\r\n    String path = String.format(OUTPUT_FILE_FORMAT_STRING, TASKTRACKER_OUTPUT, id);\r\n    return lDirAlloc.getLocalPathToRead(path, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "getOutputFileForWrite",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path getOutputFileForWrite(long size) throws IOException\n{\r\n    String path = String.format(OUTPUT_FILE_FORMAT_STRING, TASKTRACKER_OUTPUT, id);\r\n    return lDirAlloc.getLocalPathForWrite(path, size, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "getOutputIndexFile",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path getOutputIndexFile() throws IOException\n{\r\n    String path = String.format(OUTPUT_FILE_INDEX_FORMAT_STRING, TASKTRACKER_OUTPUT, id);\r\n    return lDirAlloc.getLocalPathToRead(path, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "getOutputIndexFileForWrite",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path getOutputIndexFileForWrite(long size) throws IOException\n{\r\n    String path = String.format(OUTPUT_FILE_INDEX_FORMAT_STRING, TASKTRACKER_OUTPUT, id);\r\n    return lDirAlloc.getLocalPathForWrite(path, size, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "getSpillFile",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path getSpillFile(int spillNumber) throws IOException\n{\r\n    String path = String.format(SPILL_FILE_FORMAT_STRING, id, TASKTRACKER_OUTPUT, spillNumber);\r\n    return lDirAlloc.getLocalPathToRead(path, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "getSpillFileForWrite",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path getSpillFileForWrite(int spillNumber, long size) throws IOException\n{\r\n    String path = String.format(SPILL_FILE_FORMAT_STRING, id, TASKTRACKER_OUTPUT, spillNumber);\r\n    return lDirAlloc.getLocalPathForWrite(path, size, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "getSpillIndexFile",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path getSpillIndexFile(int spillNumber) throws IOException\n{\r\n    String path = String.format(SPILL_INDEX_FILE_FORMAT_STRING, id, TASKTRACKER_OUTPUT, spillNumber);\r\n    return lDirAlloc.getLocalPathToRead(path, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "getSpillIndexFileForWrite",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path getSpillIndexFileForWrite(int spillNumber, long size) throws IOException\n{\r\n    String path = String.format(SPILL_INDEX_FILE_FORMAT_STRING, id, TASKTRACKER_OUTPUT, spillNumber);\r\n    return lDirAlloc.getLocalPathForWrite(path, size, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "getInputFile",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getInputFile(int mapId) throws IOException\n{\r\n    return lDirAlloc.getLocalPathToRead(String.format(REDUCE_INPUT_FILE_FORMAT_STRING, TASKTRACKER_OUTPUT, Integer.valueOf(mapId)), conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "getInputFileForWrite",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getInputFileForWrite(TaskID mapId, long size, Configuration conf) throws IOException\n{\r\n    return lDirAlloc.getLocalPathForWrite(String.format(REDUCE_INPUT_FILE_FORMAT_STRING, TASKTRACKER_OUTPUT, mapId.getId()), size, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "removeAll",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void removeAll() throws IOException\n{\r\n    conf.deleteLocalFiles(TASKTRACKER_OUTPUT);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "getOutputName",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getOutputName(int partition)\n{\r\n    return String.format(\"part-%05d\", partition);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "readFields",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void readFields(DataInputBuffer key) throws IOException\n{\r\n    if (null != key) {\r\n        this.v.readFields(key);\r\n        this.length = INVALID_LENGTH;\r\n    } else {\r\n        throw new IOException(\"input key is null\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "reset",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void reset(T w)\n{\r\n    this.v = (Writable) w;\r\n    this.length = INVALID_LENGTH;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "hasUnReadData",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean hasUnReadData()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "getType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "BufferType getType()\n{\r\n    return this.type;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "getByteBuffer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ByteBuffer getByteBuffer()\n{\r\n    return this.byteBuffer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "length",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int length()\n{\r\n    return byteBuffer.position();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "rewind",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void rewind()\n{\r\n    byteBuffer.position(0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "limit",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int limit()\n{\r\n    return byteBuffer.limit();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "toBytes",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "byte[][] toBytes(Configuration conf)\n{\r\n    List<byte[]> nativeConfigs = new ArrayList<byte[]>();\r\n    for (Map.Entry<String, String> e : conf) {\r\n        nativeConfigs.add(e.getKey().getBytes(Charsets.UTF_8));\r\n        nativeConfigs.add(e.getValue().getBytes(Charsets.UTF_8));\r\n    }\r\n    return nativeConfigs.toArray(new byte[nativeConfigs.size()][]);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "booleansToString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String booleansToString(boolean[] value)\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    for (boolean b : value) {\r\n        sb.append(b ? 1 : 0);\r\n    }\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\handlers",
  "methodName" : "load",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "int load() throws IOException\n{\r\n    if (closed) {\r\n        return 0;\r\n    }\r\n    if (null == outputBuffer) {\r\n        throw new IOException(\"output buffer not set\");\r\n    }\r\n    this.nativeWriter = new ByteBufferDataWriter(target);\r\n    outputBuffer.rewind();\r\n    int written = 0;\r\n    boolean firstKV = true;\r\n    if (inputKVBufferd) {\r\n        written += serializer.serializeKV(nativeWriter, tmpInputKey, tmpInputValue);\r\n        inputKVBufferd = false;\r\n        firstKV = false;\r\n    }\r\n    while (rIter.next()) {\r\n        inputKVBufferd = false;\r\n        tmpInputKey.readFields(rIter.getKey());\r\n        tmpInputValue.readFields(rIter.getValue());\r\n        serializer.updateLength(tmpInputKey, tmpInputValue);\r\n        final int kvSize = tmpInputKey.length + tmpInputValue.length + KV_HEADER_LENGTH;\r\n        if (!firstKV && nativeWriter.shortOfSpace(kvSize)) {\r\n            inputKVBufferd = true;\r\n            break;\r\n        } else {\r\n            written += serializer.serializeKV(nativeWriter, tmpInputKey, tmpInputValue);\r\n            firstKV = false;\r\n        }\r\n    }\r\n    if (nativeWriter.hasUnFlushedData()) {\r\n        nativeWriter.flush();\r\n    }\r\n    return written;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\handlers",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void close() throws IOException\n{\r\n    if (closed) {\r\n        return;\r\n    }\r\n    if (null != rIter) {\r\n        rIter.close();\r\n    }\r\n    if (null != nativeWriter) {\r\n        nativeWriter.close();\r\n    }\r\n    closed = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void init() throws IOException\n{\r\n    registerKey(NullWritable.class.getName(), NullWritableSerializer.class);\r\n    registerKey(Text.class.getName(), TextSerializer.class);\r\n    registerKey(LongWritable.class.getName(), LongWritableSerializer.class);\r\n    registerKey(IntWritable.class.getName(), IntWritableSerializer.class);\r\n    registerKey(Writable.class.getName(), DefaultSerializer.class);\r\n    registerKey(BytesWritable.class.getName(), BytesWritableSerializer.class);\r\n    registerKey(BooleanWritable.class.getName(), BoolWritableSerializer.class);\r\n    registerKey(ByteWritable.class.getName(), ByteWritableSerializer.class);\r\n    registerKey(FloatWritable.class.getName(), FloatWritableSerializer.class);\r\n    registerKey(DoubleWritable.class.getName(), DoubleWritableSerializer.class);\r\n    registerKey(VIntWritable.class.getName(), VIntWritableSerializer.class);\r\n    registerKey(VLongWritable.class.getName(), VLongWritableSerializer.class);\r\n    LOG.info(\"Hadoop platform inited\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "support",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean support(String keyClassName, INativeSerializer<?> serializer, JobConf job)\n{\r\n    if (keyClassNames.contains(keyClassName) && serializer instanceof INativeComparable) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "define",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean define(Class<?> comparatorClass)\n{\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "name",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String name()\n{\r\n    return \"Hadoop\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\serde",
  "methodName" : "getLength",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getLength(Writable w) throws IOException\n{\r\n    return 4;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "assertNativeLibraryLoaded",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void assertNativeLibraryLoaded()\n{\r\n    if (!nativeLibraryLoaded) {\r\n        throw new RuntimeException(\"Native runtime library not loaded\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "isNativeLibraryLoaded",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isNativeLibraryLoaded()\n{\r\n    return nativeLibraryLoaded;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "configure",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void configure(Configuration jobConf)\n{\r\n    assertNativeLibraryLoaded();\r\n    conf = new Configuration(jobConf);\r\n    conf.set(Constants.NATIVE_HADOOP_VERSION, VersionInfo.getVersion());\r\n    JNIConfigure(ConfigUtil.toBytes(conf));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "createNativeObject",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "long createNativeObject(String clazz)\n{\r\n    assertNativeLibraryLoaded();\r\n    final long ret = JNICreateNativeObject(clazz.getBytes(Charsets.UTF_8));\r\n    if (ret == 0) {\r\n        LOG.warn(\"Can't create NativeObject for class \" + clazz + \", probably not exist.\");\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "registerLibrary",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "long registerLibrary(String libraryName, String clazz)\n{\r\n    assertNativeLibraryLoaded();\r\n    final long ret = JNIRegisterModule(libraryName.getBytes(Charsets.UTF_8), clazz.getBytes(Charsets.UTF_8));\r\n    if (ret != 0) {\r\n        LOG.warn(\"Can't create NativeObject for class \" + clazz + \", probably not exist.\");\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "releaseNativeObject",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void releaseNativeObject(long addr)\n{\r\n    assertNativeLibraryLoaded();\r\n    JNIReleaseNativeObject(addr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "reportStatus",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void reportStatus(TaskReporter reporter) throws IOException\n{\r\n    assertNativeLibraryLoaded();\r\n    synchronized (reporter) {\r\n        final byte[] statusBytes = JNIUpdateStatus();\r\n        final DataInputBuffer ib = new DataInputBuffer();\r\n        ib.reset(statusBytes, statusBytes.length);\r\n        final FloatWritable progress = new FloatWritable();\r\n        progress.readFields(ib);\r\n        reporter.setProgress(progress.get());\r\n        final Text status = new Text();\r\n        status.readFields(ib);\r\n        if (status.getLength() > 0) {\r\n            reporter.setStatus(status.toString());\r\n        }\r\n        final IntWritable numCounters = new IntWritable();\r\n        numCounters.readFields(ib);\r\n        if (numCounters.get() == 0) {\r\n            return;\r\n        }\r\n        final Text group = new Text();\r\n        final Text name = new Text();\r\n        final LongWritable amount = new LongWritable();\r\n        for (int i = 0; i < numCounters.get(); i++) {\r\n            group.readFields(ib);\r\n            name.readFields(ib);\r\n            amount.readFields(ib);\r\n            reporter.incrCounter(group.toString(), name.toString(), amount.get());\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "supportsCompressionCodec",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean supportsCompressionCodec(byte[] codec)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "JNIConfigure",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void JNIConfigure(byte[][] configs)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "JNICreateNativeObject",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long JNICreateNativeObject(byte[] clazz)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "JNICreateDefaultNativeObject",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long JNICreateDefaultNativeObject(byte[] type)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "JNIReleaseNativeObject",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void JNIReleaseNativeObject(long addr)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "JNIUpdateStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "byte[] JNIUpdateStatus()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "JNIRelease",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void JNIRelease()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "JNIRegisterModule",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int JNIRegisterModule(byte[] path, byte[] name)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "reset",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void reset(byte[] newBuff)\n{\r\n    _buff = newBuff;\r\n    _writePoint = 0;\r\n    _readPoint = 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "setReadPoint",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setReadPoint(int pos)\n{\r\n    _readPoint = pos;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "setWritePoint",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setWritePoint(int pos)\n{\r\n    _writePoint = pos;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "getBuff",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "byte[] getBuff()\n{\r\n    return _buff;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "getWritePoint",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getWritePoint()\n{\r\n    return _writePoint;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "getReadPoint",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getReadPoint()\n{\r\n    return _readPoint;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "writeInt",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void writeInt(int v)\n{\r\n    checkWriteSpaceAndResizeIfNecessary(4);\r\n    _buff[_writePoint + 0] = (byte) ((v >>> 0) & 0xFF);\r\n    _buff[_writePoint + 1] = (byte) ((v >>> 8) & 0xFF);\r\n    _buff[_writePoint + 2] = (byte) ((v >>> 16) & 0xFF);\r\n    _buff[_writePoint + 3] = (byte) ((v >>> 24) & 0xFF);\r\n    _writePoint += 4;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "writeLong",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void writeLong(long v)\n{\r\n    checkWriteSpaceAndResizeIfNecessary(8);\r\n    _buff[_writePoint + 0] = (byte) (v >>> 0);\r\n    _buff[_writePoint + 1] = (byte) (v >>> 8);\r\n    _buff[_writePoint + 2] = (byte) (v >>> 16);\r\n    _buff[_writePoint + 3] = (byte) (v >>> 24);\r\n    _buff[_writePoint + 4] = (byte) (v >>> 32);\r\n    _buff[_writePoint + 5] = (byte) (v >>> 40);\r\n    _buff[_writePoint + 6] = (byte) (v >>> 48);\r\n    _buff[_writePoint + 7] = (byte) (v >>> 56);\r\n    _writePoint += 8;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "writeBytes",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void writeBytes(byte[] b, int off, int len)\n{\r\n    writeInt(len);\r\n    checkWriteSpaceAndResizeIfNecessary(len);\r\n    System.arraycopy(b, off, _buff, _writePoint, len);\r\n    _writePoint += len;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "readInt",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int readInt()\n{\r\n    final int ch4 = 0xff & (_buff[_readPoint + 0]);\r\n    final int ch3 = 0xff & (_buff[_readPoint + 1]);\r\n    final int ch2 = 0xff & (_buff[_readPoint + 2]);\r\n    final int ch1 = 0xff & (_buff[_readPoint + 3]);\r\n    _readPoint += 4;\r\n    return ((ch1 << 24) + (ch2 << 16) + (ch3 << 8) + (ch4 << 0));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "readLong",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long readLong()\n{\r\n    final long result = ((_buff[_readPoint + 0] & 255) << 0) + ((_buff[_readPoint + 1] & 255) << 8) + ((_buff[_readPoint + 2] & 255) << 16) + ((long) (_buff[_readPoint + 3] & 255) << 24) + ((long) (_buff[_readPoint + 4] & 255) << 32) + ((long) (_buff[_readPoint + 5] & 255) << 40) + ((long) (_buff[_readPoint + 6] & 255) << 48) + (((long) _buff[_readPoint + 7] << 56));\r\n    _readPoint += 8;\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "readBytes",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "byte[] readBytes()\n{\r\n    final int length = readInt();\r\n    final byte[] result = new byte[length];\r\n    System.arraycopy(_buff, _readPoint, result, 0, length);\r\n    _readPoint += length;\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "writeString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void writeString(String str)\n{\r\n    final byte[] bytes = str.getBytes(Charsets.UTF_8);\r\n    writeBytes(bytes, 0, bytes.length);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "readString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String readString()\n{\r\n    final byte[] bytes = readBytes();\r\n    return new String(bytes, Charsets.UTF_8);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "checkWriteSpaceAndResizeIfNecessary",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void checkWriteSpaceAndResizeIfNecessary(int toBeWritten)\n{\r\n    if (_buff.length - _writePoint >= toBeWritten) {\r\n        return;\r\n    }\r\n    final int newLength = (toBeWritten + _writePoint > CACHE_LINE_SIZE) ? (toBeWritten + _writePoint) : CACHE_LINE_SIZE;\r\n    final byte[] newBuff = new byte[newLength];\r\n    System.arraycopy(_buff, 0, newBuff, 0, _writePoint);\r\n    _buff = newBuff;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "getType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "BufferType getType()\n{\r\n    return this.type;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "getByteBuffer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ByteBuffer getByteBuffer()\n{\r\n    return this.byteBuffer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "length",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int length()\n{\r\n    if (null == byteBuffer) {\r\n        return 0;\r\n    }\r\n    return byteBuffer.limit();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "rewind",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void rewind(int startOffset, int length)\n{\r\n    if (null == byteBuffer) {\r\n        return;\r\n    }\r\n    byteBuffer.position(startOffset);\r\n    byteBuffer.limit(length);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "remaining",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int remaining()\n{\r\n    if (null == byteBuffer) {\r\n        return 0;\r\n    }\r\n    return byteBuffer.remaining();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "position",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int position()\n{\r\n    if (null == byteBuffer) {\r\n        return 0;\r\n    }\r\n    return byteBuffer.position();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "position",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int position(int pos)\n{\r\n    if (null == byteBuffer) {\r\n        return 0;\r\n    }\r\n    byteBuffer.position(pos);\r\n    return pos;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "capacity",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int capacity()\n{\r\n    if (null == byteBuffer) {\r\n        return 0;\r\n    }\r\n    return byteBuffer.capacity();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "array",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "byte[] array()\n{\r\n    if (null == byteBuffer) {\r\n        return null;\r\n    }\r\n    return byteBuffer.array();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\buffer",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void close()\n{\r\n    if (byteBuffer != null && byteBuffer.isDirect()) {\r\n        bufferPool.returnBuffer(byteBuffer);\r\n        byteBuffer = null;\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\serde",
  "methodName" : "accept",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean accept(Class<?> c)\n{\r\n    return Writable.class.isAssignableFrom(c);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\serde",
  "methodName" : "getSerializer",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "INativeSerializer<Writable> getSerializer(Class<?> c) throws IOException\n{\r\n    if (null == c) {\r\n        return null;\r\n    }\r\n    if (!Writable.class.isAssignableFrom(c)) {\r\n        throw new IOException(\"Cannot serialize type \" + c.getName() + \", we only accept subclass of Writable\");\r\n    }\r\n    final String name = c.getName();\r\n    final Class<?> serializer = map.get(name);\r\n    if (null != serializer) {\r\n        try {\r\n            return (INativeSerializer<Writable>) serializer.newInstance();\r\n        } catch (final Exception e) {\r\n            throw new IOException(e);\r\n        }\r\n    }\r\n    return new DefaultSerializer();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\serde",
  "methodName" : "register",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void register(String klass, Class<?> serializer) throws IOException\n{\r\n    if (null == klass || null == serializer) {\r\n        throw new IOException(\"invalid arguments, klass or serializer is null\");\r\n    }\r\n    if (!INativeSerializer.class.isAssignableFrom(serializer)) {\r\n        throw new IOException(\"Serializer is not assigable from INativeSerializer\");\r\n    }\r\n    final Class<?> storedSerializer = map.get(klass);\r\n    if (null == storedSerializer) {\r\n        map.put(klass, serializer);\r\n        return;\r\n    } else {\r\n        if (!storedSerializer.getName().equals(serializer.getName())) {\r\n            throw new IOException(\"Error! Serializer already registered, existing: \" + storedSerializer.getName() + \", new: \" + serializer.getName());\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\serde",
  "methodName" : "reset",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void reset()\n{\r\n    map.clear();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\serde",
  "methodName" : "getInstance",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NativeSerialization getInstance()\n{\r\n    return instance;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "create",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "INativeHandler create(String nativeHandlerName, Configuration conf, DataChannel channel) throws IOException\n{\r\n    final int bufferSize = conf.getInt(Constants.NATIVE_PROCESSOR_BUFFER_KB, 1024) * 1024;\r\n    LOG.info(\"NativeHandler: direct buffer size: \" + bufferSize);\r\n    OutputBuffer out = null;\r\n    InputBuffer in = null;\r\n    switch(channel) {\r\n        case IN:\r\n            in = new InputBuffer(BufferType.DIRECT_BUFFER, bufferSize);\r\n            break;\r\n        case OUT:\r\n            out = new OutputBuffer(BufferType.DIRECT_BUFFER, bufferSize);\r\n            break;\r\n        case INOUT:\r\n            in = new InputBuffer(BufferType.DIRECT_BUFFER, bufferSize);\r\n            out = new OutputBuffer(BufferType.DIRECT_BUFFER, bufferSize);\r\n            break;\r\n        case NONE:\r\n    }\r\n    final INativeHandler handler = new NativeBatchProcessor(nativeHandlerName, in, out);\r\n    handler.init(conf);\r\n    return handler;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "setCommandDispatcher",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setCommandDispatcher(CommandDispatcher handler)\n{\r\n    this.commandDispatcher = handler;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void init(Configuration conf) throws IOException\n{\r\n    this.nativeHandlerAddr = NativeRuntime.createNativeObject(nativeHandlerName);\r\n    if (this.nativeHandlerAddr == 0) {\r\n        throw new RuntimeException(\"Native object create failed, class: \" + nativeHandlerName);\r\n    }\r\n    setupHandler(nativeHandlerAddr, ConfigUtil.toBytes(conf));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void close() throws IOException\n{\r\n    if (nativeHandlerAddr != 0) {\r\n        NativeRuntime.releaseNativeObject(nativeHandlerAddr);\r\n        nativeHandlerAddr = 0;\r\n    }\r\n    IOUtils.cleanupWithLogger(LOG, in);\r\n    in = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "getNativeHandler",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getNativeHandler()\n{\r\n    return nativeHandlerAddr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "call",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReadWriteBuffer call(Command command, ReadWriteBuffer parameter) throws IOException\n{\r\n    final byte[] bytes = nativeCommand(nativeHandlerAddr, command.id(), null == parameter ? null : parameter.getBuff());\r\n    final ReadWriteBuffer result = new ReadWriteBuffer(bytes);\r\n    result.setWritePoint(bytes.length);\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "sendData",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void sendData() throws IOException\n{\r\n    nativeProcessInput(nativeHandlerAddr, rawOutputBuffer.position());\r\n    rawOutputBuffer.position(0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "finishSendData",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void finishSendData() throws IOException\n{\r\n    if (null == rawOutputBuffer || isInputFinished) {\r\n        return;\r\n    }\r\n    sendData();\r\n    nativeFinish(nativeHandlerAddr);\r\n    isInputFinished = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "sendCommandToJava",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "byte[] sendCommandToJava(int command, byte[] data) throws IOException\n{\r\n    try {\r\n        final Command cmd = new Command(command);\r\n        ReadWriteBuffer param = null;\r\n        if (null != data) {\r\n            param = new ReadWriteBuffer();\r\n            param.reset(data);\r\n            param.setWritePoint(data.length);\r\n        }\r\n        if (null != commandDispatcher) {\r\n            ReadWriteBuffer result = null;\r\n            result = commandDispatcher.onCall(cmd, param);\r\n            if (null != result) {\r\n                return result.getBuff();\r\n            } else {\r\n                return null;\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "flushOutput",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void flushOutput(int length) throws IOException\n{\r\n    if (null != rawInputBuffer) {\r\n        rawInputBuffer.position(0);\r\n        rawInputBuffer.limit(length);\r\n        if (null != dataReceiver) {\r\n            try {\r\n                dataReceiver.receiveData();\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n                throw e;\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "InitIDs",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void InitIDs()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "setupHandler",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setupHandler(long nativeHandlerAddr, byte[][] configs)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "nativeProcessInput",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void nativeProcessInput(long handler, int length)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "nativeFinish",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void nativeFinish(long handler)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "nativeCommand",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "byte[] nativeCommand(long handler, int cmd, byte[] parameter)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "nativeLoadData",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void nativeLoadData(long handler)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "finishOutput",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void finishOutput()\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "getInputBuffer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "InputBuffer getInputBuffer()\n{\r\n    return this.in;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "getOutputBuffer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "OutputBuffer getOutputBuffer()\n{\r\n    return this.out;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "loadData",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void loadData() throws IOException\n{\r\n    nativeLoadData(nativeHandlerAddr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "setDataReceiver",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDataReceiver(DataReceiver handler)\n{\r\n    this.dataReceiver = handler;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask",
  "methodName" : "name",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String name()\n{\r\n    return nativeHandlerName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\util",
  "methodName" : "createNativeTaskOutput",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "NativeTaskOutput createNativeTaskOutput(Configuration conf, String id)\n{\r\n    Class<?> clazz = conf.getClass(OutputUtil.NATIVE_TASK_OUTPUT_MANAGER, NativeTaskOutputFiles.class);\r\n    LOG.info(OutputUtil.NATIVE_TASK_OUTPUT_MANAGER + \" = \" + clazz.getName());\r\n    try {\r\n        Constructor<?> ctor = clazz.getConstructor(Configuration.class, String.class);\r\n        ctor.setAccessible(true);\r\n        NativeTaskOutput instance = (NativeTaskOutput) ctor.newInstance(conf, id);\r\n        return instance;\r\n    } catch (Exception e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\serde",
  "methodName" : "getLength",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getLength(Writable w) throws IOException\n{\r\n    return 1;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\serde",
  "methodName" : "getLength",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getLength(Writable w) throws IOException\n{\r\n    return 4;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\handlers",
  "methodName" : "create",
  "errType" : [ "ClassNotFoundException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "NativeCollectorOnlyHandler<K, V> create(TaskContext context) throws IOException\n{\r\n    ICombineHandler combinerHandler = null;\r\n    try {\r\n        final TaskContext combineContext = context.copyOf();\r\n        combineContext.setInputKeyClass(context.getOutputKeyClass());\r\n        combineContext.setInputValueClass(context.getOutputValueClass());\r\n        combinerHandler = CombinerHandler.create(combineContext);\r\n    } catch (final ClassNotFoundException e) {\r\n        throw new IOException(e);\r\n    }\r\n    if (null != combinerHandler) {\r\n        LOG.info(\"[NativeCollectorOnlyHandler] combiner is not null\");\r\n    }\r\n    final INativeHandler nativeHandler = NativeBatchProcessor.create(NAME, context.getConf(), DataChannel.OUT);\r\n    final BufferPusher<K, V> kvPusher = new BufferPusher<K, V>((Class<K>) context.getOutputKeyClass(), (Class<V>) context.getOutputValueClass(), nativeHandler);\r\n    return new NativeCollectorOnlyHandler<K, V>(context, nativeHandler, kvPusher, combinerHandler);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\handlers",
  "methodName" : "collect",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void collect(K key, V value, int partition) throws IOException\n{\r\n    kvPusher.collect(key, value, partition);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\handlers",
  "methodName" : "flush",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void flush() throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\handlers",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void close() throws IOException\n{\r\n    if (closed) {\r\n        return;\r\n    }\r\n    if (null != kvPusher) {\r\n        kvPusher.close();\r\n    }\r\n    if (null != combinerHandler) {\r\n        combinerHandler.close();\r\n    }\r\n    if (null != nativeHandler) {\r\n        nativeHandler.close();\r\n    }\r\n    closed = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\handlers",
  "methodName" : "onCall",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "ReadWriteBuffer onCall(Command command, ReadWriteBuffer parameter) throws IOException\n{\r\n    Path p = null;\r\n    if (null == command) {\r\n        return null;\r\n    }\r\n    if (command.equals(GET_OUTPUT_PATH)) {\r\n        p = output.getOutputFileForWrite(-1);\r\n    } else if (command.equals(GET_OUTPUT_INDEX_PATH)) {\r\n        p = output.getOutputIndexFileForWrite(-1);\r\n    } else if (command.equals(GET_SPILL_PATH)) {\r\n        p = output.getSpillFileForWrite(spillNumber++, -1);\r\n    } else if (command.equals(GET_COMBINE_HANDLER)) {\r\n        if (null == combinerHandler) {\r\n            return null;\r\n        }\r\n        final ReadWriteBuffer result = new ReadWriteBuffer(8);\r\n        result.writeLong(combinerHandler.getId());\r\n        return result;\r\n    } else {\r\n        throw new IOException(\"Illegal command: \" + command.toString());\r\n    }\r\n    if (p != null) {\r\n        final ReadWriteBuffer result = new ReadWriteBuffer();\r\n        result.writeString(p.toUri().getPath());\r\n        return result;\r\n    } else {\r\n        throw new IOException(\"MapOutputFile can't allocate spill/output file\");\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\serde",
  "methodName" : "updateLength",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void updateLength(SizedWritable<?> key, SizedWritable<?> value) throws IOException\n{\r\n    key.length = keySerializer.getLength(key.v);\r\n    value.length = valueSerializer.getLength(value.v);\r\n    return;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\serde",
  "methodName" : "serializeKV",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int serializeKV(DataOutputStream out, SizedWritable<?> key, SizedWritable<?> value) throws IOException\n{\r\n    return serializePartitionKV(out, -1, key, value);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\serde",
  "methodName" : "serializePartitionKV",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "int serializePartitionKV(DataOutputStream out, int partitionId, SizedWritable<?> key, SizedWritable<?> value) throws IOException\n{\r\n    if (key.length == SizedWritable.INVALID_LENGTH || value.length == SizedWritable.INVALID_LENGTH) {\r\n        updateLength(key, value);\r\n    }\r\n    final int keyLength = key.length;\r\n    final int valueLength = value.length;\r\n    int bytesWritten = KV_HEAD_LENGTH + keyLength + valueLength;\r\n    if (partitionId != -1) {\r\n        bytesWritten += Constants.SIZEOF_PARTITION_LENGTH;\r\n    }\r\n    if (out.hasUnFlushedData() && out.shortOfSpace(bytesWritten)) {\r\n        out.flush();\r\n    }\r\n    if (partitionId != -1) {\r\n        out.writeInt(partitionId);\r\n    }\r\n    out.writeInt(keyLength);\r\n    out.writeInt(valueLength);\r\n    keySerializer.serialize(key.v, out);\r\n    valueSerializer.serialize(value.v, out);\r\n    return bytesWritten;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\serde",
  "methodName" : "deserializeKV",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "int deserializeKV(DataInputStream in, SizedWritable<?> key, SizedWritable<?> value) throws IOException\n{\r\n    if (!in.hasUnReadData()) {\r\n        return 0;\r\n    }\r\n    key.length = in.readInt();\r\n    value.length = in.readInt();\r\n    keySerializer.deserialize(in, key.length, key.v);\r\n    valueSerializer.deserialize(in, value.length, value.v);\r\n    return key.length + value.length + KV_HEAD_LENGTH;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\serde",
  "methodName" : "getLength",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getLength(BytesWritable w) throws IOException\n{\r\n    return w.getLength();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\serde",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void serialize(BytesWritable w, DataOutput out) throws IOException\n{\r\n    out.write(w.getBytes(), 0, w.getLength());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-mapreduce-project\\hadoop-mapreduce-client\\hadoop-mapreduce-client-nativetask\\src\\main\\java\\org\\apache\\hadoop\\mapred\\nativetask\\serde",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void deserialize(DataInput in, int length, BytesWritable w) throws IOException\n{\r\n    w.setSize(length);\r\n    in.readFully(w.getBytes(), 0, length);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
} ]