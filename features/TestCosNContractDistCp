[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-cloud-storage-project\\hadoop-cos\\src\\test\\java\\org\\apache\\hadoop\\fs\\cosn\\contract",
  "methodName" : "createContract",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AbstractFSContract createContract(Configuration conf)\n{\r\n    return new CosNContract(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-cloud-storage-project\\hadoop-cos\\src\\test\\java\\org\\apache\\hadoop\\fs\\cosn\\contract",
  "methodName" : "createConfiguration",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Configuration createConfiguration()\n{\r\n    Configuration newConf = super.createConfiguration();\r\n    newConf.setInt(CosNConfigKeys.COSN_BLOCK_SIZE_KEY, MULTIPART_SETTING);\r\n    newConf.setLong(CosNConfigKeys.COSN_UPLOAD_BUFFER_SIZE_KEY, UPLOAD_BUFFER_POOL_SIZE);\r\n    newConf.setInt(CosNConfigKeys.UPLOAD_THREAD_POOL_SIZE_KEY, UPLOAD_THREAD_POOL_SIZE);\r\n    newConf.setInt(CosNConfigKeys.COPY_THREAD_POOL_SIZE_KEY, COPY_THREAD_POOL_SIZE);\r\n    return newConf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-cloud-storage-project\\hadoop-cos\\src\\test\\java\\org\\apache\\hadoop\\fs\\cosn",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    Configuration configuration = new Configuration();\r\n    configuration.setInt(CosNConfigKeys.COSN_BLOCK_SIZE_KEY, 2 * Unit.MB);\r\n    configuration.setLong(CosNConfigKeys.COSN_UPLOAD_BUFFER_SIZE_KEY, CosNConfigKeys.DEFAULT_UPLOAD_BUFFER_SIZE);\r\n    this.fs = CosNTestUtils.createTestFileSystem(configuration);\r\n    this.testRootDir = new Path(\"/test\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-cloud-storage-project\\hadoop-cos\\src\\test\\java\\org\\apache\\hadoop\\fs\\cosn",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-cloud-storage-project\\hadoop-cos\\src\\test\\java\\org\\apache\\hadoop\\fs\\cosn",
  "methodName" : "testEmptyFileUpload",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testEmptyFileUpload() throws IOException\n{\r\n    ContractTestUtils.createAndVerifyFile(this.fs, this.testRootDir, 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-cloud-storage-project\\hadoop-cos\\src\\test\\java\\org\\apache\\hadoop\\fs\\cosn",
  "methodName" : "testSingleFileUpload",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testSingleFileUpload() throws IOException\n{\r\n    ContractTestUtils.createAndVerifyFile(this.fs, this.testRootDir, 1 * Unit.MB - 1);\r\n    ContractTestUtils.createAndVerifyFile(this.fs, this.testRootDir, 1 * Unit.MB);\r\n    ContractTestUtils.createAndVerifyFile(this.fs, this.testRootDir, 2 * Unit.MB - 1);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-cloud-storage-project\\hadoop-cos\\src\\test\\java\\org\\apache\\hadoop\\fs\\cosn",
  "methodName" : "testLargeFileUpload",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testLargeFileUpload() throws IOException\n{\r\n    ContractTestUtils.createAndVerifyFile(this.fs, this.testRootDir, 2 * Unit.MB);\r\n    ContractTestUtils.createAndVerifyFile(this.fs, this.testRootDir, 2 * Unit.MB + 1);\r\n    ContractTestUtils.createAndVerifyFile(this.fs, this.testRootDir, 100 * Unit.MB);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-cloud-storage-project\\hadoop-cos\\src\\test\\java\\org\\apache\\hadoop\\fs\\cosn\\contract",
  "methodName" : "createContract",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AbstractFSContract createContract(Configuration conf)\n{\r\n    return new CosNContract(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-cloud-storage-project\\hadoop-cos\\src\\test\\java\\org\\apache\\hadoop\\fs\\cosn\\contract",
  "methodName" : "createContract",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AbstractFSContract createContract(Configuration configuration)\n{\r\n    return new CosNContract(configuration);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-cloud-storage-project\\hadoop-cos\\src\\test\\java\\org\\apache\\hadoop\\fs\\cosn\\contract",
  "methodName" : "createContract",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AbstractFSContract createContract(Configuration configuration)\n{\r\n    return new CosNContract(configuration);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-cloud-storage-project\\hadoop-cos\\src\\test\\java\\org\\apache\\hadoop\\fs\\cosn\\contract",
  "methodName" : "createContract",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AbstractFSContract createContract(Configuration configuration)\n{\r\n    return new CosNContract(configuration);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-cloud-storage-project\\hadoop-cos\\src\\test\\java\\org\\apache\\hadoop\\fs\\cosn",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setUp() throws IOException\n{\r\n    Configuration configuration = new Configuration();\r\n    this.fs = CosNTestUtils.createTestFileSystem(configuration);\r\n    this.testRootDir = CosNTestUtils.createTestPath(new Path(\"/test\"));\r\n    LOG.info(\"test root dir: \" + this.testRootDir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-cloud-storage-project\\hadoop-cos\\src\\test\\java\\org\\apache\\hadoop\\fs\\cosn",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown() throws IOException\n{\r\n    if (null != this.fs) {\r\n        this.fs.delete(this.testRootDir, true);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-cloud-storage-project\\hadoop-cos\\src\\test\\java\\org\\apache\\hadoop\\fs\\cosn",
  "methodName" : "testSeek",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testSeek() throws Exception\n{\r\n    Path seekTestFilePath = new Path(this.testRootDir + \"/\" + \"seekTestFile\");\r\n    long fileSize = 5 * Unit.MB;\r\n    ContractTestUtils.generateTestFile(this.fs, seekTestFilePath, fileSize, 256, 255);\r\n    LOG.info(\"5MB file for seek test has created.\");\r\n    FSDataInputStream inputStream = this.fs.open(seekTestFilePath);\r\n    int seekTimes = 5;\r\n    for (int i = 0; i != seekTimes; i++) {\r\n        long pos = fileSize / (seekTimes - i) - 1;\r\n        inputStream.seek(pos);\r\n        assertTrue(\"expected position at: \" + pos + \", but got: \" + inputStream.getPos(), inputStream.getPos() == pos);\r\n        LOG.info(\"completed seeking at pos: \" + inputStream.getPos());\r\n    }\r\n    LOG.info(\"begin to random position seeking test...\");\r\n    Random random = new Random();\r\n    for (int i = 0; i < seekTimes; i++) {\r\n        long pos = Math.abs(random.nextLong()) % fileSize;\r\n        LOG.info(\"seeking for pos: \" + pos);\r\n        inputStream.seek(pos);\r\n        assertTrue(\"expected position at: \" + pos + \", but got: \" + inputStream.getPos(), inputStream.getPos() == pos);\r\n        LOG.info(\"completed seeking at pos: \" + inputStream.getPos());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-cloud-storage-project\\hadoop-cos\\src\\test\\java\\org\\apache\\hadoop\\fs\\cosn",
  "methodName" : "testGetPos",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testGetPos() throws Exception\n{\r\n    Path seekTestFilePath = new Path(this.testRootDir + \"/\" + \"seekTestFile\");\r\n    long fileSize = 5 * Unit.MB;\r\n    ContractTestUtils.generateTestFile(this.fs, seekTestFilePath, fileSize, 256, 255);\r\n    LOG.info(\"5MB file for getPos test has created.\");\r\n    FSDataInputStream inputStream = this.fs.open(seekTestFilePath);\r\n    Random random = new Random();\r\n    long pos = Math.abs(random.nextLong()) % fileSize;\r\n    inputStream.seek(pos);\r\n    assertTrue(\"expected position at: \" + pos + \", but got: \" + inputStream.getPos(), inputStream.getPos() == pos);\r\n    LOG.info(\"completed get pos tests.\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-cloud-storage-project\\hadoop-cos\\src\\test\\java\\org\\apache\\hadoop\\fs\\cosn",
  "methodName" : "testSeekToNewSource",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testSeekToNewSource() throws Exception\n{\r\n    LOG.info(\"Currently it is not supported to \" + \"seek the offset in a new source.\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-cloud-storage-project\\hadoop-cos\\src\\test\\java\\org\\apache\\hadoop\\fs\\cosn",
  "methodName" : "testRead",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testRead() throws Exception\n{\r\n    final int bufLen = 256;\r\n    Path readTestFilePath = new Path(this.testRootDir + \"/\" + \"testReadSmallFile.txt\");\r\n    long fileSize = 5 * Unit.MB;\r\n    ContractTestUtils.generateTestFile(this.fs, readTestFilePath, fileSize, 256, 255);\r\n    LOG.info(\"read test file: \" + readTestFilePath + \" has created.\");\r\n    FSDataInputStream inputStream = this.fs.open(readTestFilePath);\r\n    byte[] buf = new byte[bufLen];\r\n    long bytesRead = 0;\r\n    while (bytesRead < fileSize) {\r\n        int bytes = 0;\r\n        if (fileSize - bytesRead < bufLen) {\r\n            int remaining = (int) (fileSize - bytesRead);\r\n            bytes = inputStream.read(buf, 0, remaining);\r\n        } else {\r\n            bytes = inputStream.read(buf, 0, bufLen);\r\n        }\r\n        bytesRead += bytes;\r\n        if (bytesRead % (1 * Unit.MB) == 0) {\r\n            int available = inputStream.available();\r\n            assertTrue(\"expected remaining: \" + (fileSize - bytesRead) + \" but got: \" + available, (fileSize - bytesRead) == available);\r\n            LOG.info(\"Bytes read: \" + Math.round((double) bytesRead / Unit.MB) + \"MB\");\r\n        }\r\n    }\r\n    assertTrue(inputStream.available() == 0);\r\n    IOUtils.closeStream(inputStream);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-cloud-storage-project\\hadoop-cos\\src\\test\\java\\org\\apache\\hadoop\\fs\\cosn",
  "methodName" : "createTestFileSystem",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "CosNFileSystem createTestFileSystem(Configuration configuration) throws IOException\n{\r\n    String fsName = configuration.getTrimmed(CosNTestConfigKey.TEST_COS_FILESYSTEM_CONF_KEY, CosNTestConfigKey.DEFAULT_TEST_COS_FILESYSTEM_CONF_VALUE);\r\n    boolean liveTest = StringUtils.isNotEmpty(fsName);\r\n    URI testUri;\r\n    if (liveTest) {\r\n        testUri = URI.create(fsName);\r\n        liveTest = testUri.getScheme().equals(CosNFileSystem.SCHEME);\r\n    } else {\r\n        throw new AssumptionViolatedException(\"no test file system in \" + fsName);\r\n    }\r\n    CosNFileSystem cosFs = new CosNFileSystem();\r\n    cosFs.initialize(testUri, configuration);\r\n    return cosFs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-cloud-storage-project\\hadoop-cos\\src\\test\\java\\org\\apache\\hadoop\\fs\\cosn",
  "methodName" : "createTestPath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path createTestPath(Path defVal)\n{\r\n    String testUniqueForkId = System.getProperty(CosNTestConfigKey.TEST_UNIQUE_FORK_ID_KEY);\r\n    return testUniqueForkId == null ? defVal : new Path(\"/\" + testUniqueForkId, \"test\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-cloud-storage-project\\hadoop-cos\\src\\test\\java\\org\\apache\\hadoop\\fs\\cosn\\contract",
  "methodName" : "createContract",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AbstractFSContract createContract(Configuration configuration)\n{\r\n    return new CosNContract(configuration);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-cloud-storage-project\\hadoop-cos\\src\\test\\java\\org\\apache\\hadoop\\fs\\cosn\\contract",
  "methodName" : "getScheme",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getScheme()\n{\r\n    return CosNFileSystem.SCHEME;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-cloud-storage-project\\hadoop-cos\\src\\test\\java\\org\\apache\\hadoop\\fs\\cosn\\contract",
  "methodName" : "getTestPath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getTestPath()\n{\r\n    return CosNTestUtils.createTestPath(super.getTestPath());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-cloud-storage-project\\hadoop-cos\\src\\test\\java\\org\\apache\\hadoop\\fs\\cosn\\contract",
  "methodName" : "createContract",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AbstractFSContract createContract(Configuration configuration)\n{\r\n    return new CosNContract(configuration);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-cloud-storage-project\\hadoop-cos\\src\\test\\java\\org\\apache\\hadoop\\fs\\cosn",
  "methodName" : "testSimpleCredentialsProvider",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testSimpleCredentialsProvider() throws Throwable\n{\r\n    Configuration configuration = new Configuration();\r\n    configuration.set(CosNConfigKeys.COSN_SECRET_ID_KEY, testCosNSecretId);\r\n    configuration.set(CosNConfigKeys.COSN_SECRET_KEY_KEY, testCosNSecretKey);\r\n    validateCredentials(this.fsUri, configuration);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-cloud-storage-project\\hadoop-cos\\src\\test\\java\\org\\apache\\hadoop\\fs\\cosn",
  "methodName" : "testEnvironmentCredentialsProvider",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testEnvironmentCredentialsProvider() throws Throwable\n{\r\n    Configuration configuration = new Configuration();\r\n    configuration.set(CosNConfigKeys.COSN_CREDENTIALS_PROVIDER, \"org.apache.hadoop.fs.cosn.EnvironmentVariableCredentialsProvider\");\r\n    System.setProperty(Constants.COSN_SECRET_ID_ENV, testCosNEnvSecretId);\r\n    System.setProperty(Constants.COSN_SECRET_KEY_ENV, testCosNEnvSecretKey);\r\n    validateCredentials(this.fsUri, configuration);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-cloud-storage-project\\hadoop-cos\\src\\test\\java\\org\\apache\\hadoop\\fs\\cosn",
  "methodName" : "validateCredentials",
  "errType" : null,
  "containingMethodsNum" : 23,
  "sourceCodeText" : "void validateCredentials(URI uri, Configuration configuration) throws IOException\n{\r\n    if (null != configuration) {\r\n        COSCredentialsProvider credentialsProvider = CosNUtils.createCosCredentialsProviderSet(uri, configuration);\r\n        COSCredentials cosCredentials = credentialsProvider.getCredentials();\r\n        assertNotNull(\"The cos credentials obtained is null.\", cosCredentials);\r\n        if (configuration.get(CosNConfigKeys.COSN_CREDENTIALS_PROVIDER).compareToIgnoreCase(\"org.apache.hadoop.fs.cosn.EnvironmentVariableCredentialsProvider\") == 0) {\r\n            if (null == cosCredentials.getCOSAccessKeyId() || cosCredentials.getCOSAccessKeyId().isEmpty() || null == cosCredentials.getCOSSecretKey() || cosCredentials.getCOSSecretKey().isEmpty()) {\r\n                String failMessage = String.format(\"Test EnvironmentVariableCredentialsProvider failed. The \" + \"expected is [secretId: %s, secretKey: %s], but got null or\" + \" empty.\", testCosNEnvSecretId, testCosNEnvSecretKey);\r\n                fail(failMessage);\r\n            }\r\n            if (cosCredentials.getCOSAccessKeyId().compareTo(testCosNEnvSecretId) != 0 || cosCredentials.getCOSSecretKey().compareTo(testCosNEnvSecretKey) != 0) {\r\n                String failMessage = String.format(\"Test \" + \"EnvironmentVariableCredentialsProvider failed. \" + \"The expected is [secretId: %s, secretKey: %s], but got is \" + \"[secretId:%s, secretKey:%s].\", testCosNEnvSecretId, testCosNEnvSecretKey, cosCredentials.getCOSAccessKeyId(), cosCredentials.getCOSSecretKey());\r\n            }\r\n        } else {\r\n            if (null == cosCredentials.getCOSAccessKeyId() || cosCredentials.getCOSAccessKeyId().isEmpty() || null == cosCredentials.getCOSSecretKey() || cosCredentials.getCOSSecretKey().isEmpty()) {\r\n                String failMessage = String.format(\"Test COSCredentials failed. The \" + \"expected is [secretId: %s, secretKey: %s], but got null or\" + \" empty.\", testCosNSecretId, testCosNSecretKey);\r\n                fail(failMessage);\r\n            }\r\n            if (cosCredentials.getCOSAccessKeyId().compareTo(testCosNSecretId) != 0 || cosCredentials.getCOSSecretKey().compareTo(testCosNSecretKey) != 0) {\r\n                String failMessage = String.format(\"Test \" + \"EnvironmentVariableCredentialsProvider failed. \" + \"The expected is [secretId: %s, secretKey: %s], but got is \" + \"[secretId:%s, secretKey:%s].\", testCosNSecretId, testCosNSecretKey, cosCredentials.getCOSAccessKeyId(), cosCredentials.getCOSSecretKey());\r\n                fail(failMessage);\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-cloud-storage-project\\hadoop-cos\\src\\test\\java\\org\\apache\\hadoop\\fs\\cosn\\contract",
  "methodName" : "createContract",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AbstractFSContract createContract(Configuration configuration)\n{\r\n    return new CosNContract(configuration);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-cloud-storage-project\\hadoop-cos\\src\\test\\java\\org\\apache\\hadoop\\fs\\cosn\\contract",
  "methodName" : "createContract",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AbstractFSContract createContract(Configuration configuration)\n{\r\n    return new CosNContract(configuration);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
} ]