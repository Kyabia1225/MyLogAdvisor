[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    this.clientBindAddress = getBindAddress(conf);\r\n    this.cacheDepth = SharedCacheUtil.getCacheDepth(conf);\r\n    this.cacheRoot = conf.get(YarnConfiguration.SHARED_CACHE_ROOT, YarnConfiguration.DEFAULT_SHARED_CACHE_ROOT);\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "getBindAddress",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "InetSocketAddress getBindAddress(Configuration conf)\n{\r\n    return conf.getSocketAddr(YarnConfiguration.SCM_CLIENT_SERVER_ADDRESS, YarnConfiguration.DEFAULT_SCM_CLIENT_SERVER_ADDRESS, YarnConfiguration.DEFAULT_SCM_CLIENT_SERVER_PORT);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    Configuration conf = getConfig();\r\n    this.metrics = ClientSCMMetrics.getInstance();\r\n    YarnRPC rpc = YarnRPC.create(conf);\r\n    this.server = rpc.getServer(ClientSCMProtocol.class, this, clientBindAddress, conf, null, conf.getInt(YarnConfiguration.SCM_CLIENT_SERVER_THREAD_COUNT, YarnConfiguration.DEFAULT_SCM_CLIENT_SERVER_THREAD_COUNT));\r\n    this.server.start();\r\n    clientBindAddress = conf.updateConnectAddr(YarnConfiguration.SCM_CLIENT_SERVER_ADDRESS, server.getListenerAddress());\r\n    super.serviceStart();\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    if (this.server != null) {\r\n        this.server.stop();\r\n    }\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "use",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "UseSharedCacheResourceResponse use(UseSharedCacheResourceRequest request) throws YarnException, IOException\n{\r\n    UseSharedCacheResourceResponse response = recordFactory.newRecordInstance(UseSharedCacheResourceResponse.class);\r\n    UserGroupInformation callerUGI;\r\n    try {\r\n        callerUGI = UserGroupInformation.getCurrentUser();\r\n    } catch (IOException ie) {\r\n        LOG.info(\"Error getting UGI \", ie);\r\n        throw RPCUtil.getRemoteException(ie);\r\n    }\r\n    String fileName = this.store.addResourceReference(request.getResourceKey(), new SharedCacheResourceReference(request.getAppId(), callerUGI.getShortUserName()));\r\n    if (fileName != null) {\r\n        response.setPath(getCacheEntryFilePath(request.getResourceKey(), fileName));\r\n        this.metrics.incCacheHitCount();\r\n    } else {\r\n        this.metrics.incCacheMissCount();\r\n    }\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "release",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "ReleaseSharedCacheResourceResponse release(ReleaseSharedCacheResourceRequest request) throws YarnException, IOException\n{\r\n    ReleaseSharedCacheResourceResponse response = recordFactory.newRecordInstance(ReleaseSharedCacheResourceResponse.class);\r\n    UserGroupInformation callerUGI;\r\n    try {\r\n        callerUGI = UserGroupInformation.getCurrentUser();\r\n    } catch (IOException ie) {\r\n        LOG.info(\"Error getting UGI \", ie);\r\n        throw RPCUtil.getRemoteException(ie);\r\n    }\r\n    boolean removed = this.store.removeResourceReference(request.getResourceKey(), new SharedCacheResourceReference(request.getAppId(), callerUGI.getShortUserName()), true);\r\n    if (removed) {\r\n        this.metrics.incCacheRelease();\r\n    }\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "getCacheEntryFilePath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getCacheEntryFilePath(String checksum, String filename)\n{\r\n    return SharedCacheUtil.getCacheEntryPath(this.cacheDepth, this.cacheRoot, checksum) + Path.SEPARATOR_CHAR + filename;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\webapp",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    this.bindAddress = getBindAddress(conf);\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\webapp",
  "methodName" : "getBindAddress",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getBindAddress(Configuration conf)\n{\r\n    return conf.get(YarnConfiguration.SCM_WEBAPP_ADDRESS, YarnConfiguration.DEFAULT_SCM_WEBAPP_ADDRESS);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\webapp",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    SCMWebApp scmWebApp = new SCMWebApp(scm);\r\n    this.webApp = WebApps.$for(\"sharedcache\").at(bindAddress).start(scmWebApp);\r\n    LOG.info(\"Instantiated \" + SCMWebApp.class.getName() + \" at \" + bindAddress);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\webapp",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    if (this.webApp != null) {\r\n        this.webApp.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\metrics",
  "methodName" : "getInstance",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SharedCacheUploaderMetrics getInstance()\n{\r\n    return INSTANCE;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\metrics",
  "methodName" : "create",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SharedCacheUploaderMetrics create()\n{\r\n    MetricsSystem ms = DefaultMetricsSystem.instance();\r\n    SharedCacheUploaderMetrics metrics = new SharedCacheUploaderMetrics();\r\n    ms.register(\"SharedCacheUploaderRequests\", null, metrics);\r\n    return metrics;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\metrics",
  "methodName" : "incAcceptedUploads",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void incAcceptedUploads()\n{\r\n    acceptedUploads.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\metrics",
  "methodName" : "incRejectedUploads",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void incRejectedUploads()\n{\r\n    rejectedUploads.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\metrics",
  "methodName" : "getAcceptedUploads",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getAcceptedUploads()\n{\r\n    return acceptedUploads.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\metrics",
  "methodName" : "getRejectUploads",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getRejectUploads()\n{\r\n    return rejectedUploads.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    addService(client);\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "isApplicationActive",
  "errType" : [ "ApplicationNotFoundException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isApplicationActive(ApplicationId id) throws YarnException\n{\r\n    ApplicationReport report = null;\r\n    try {\r\n        report = client.getApplicationReport(id);\r\n    } catch (ApplicationNotFoundException e) {\r\n        return false;\r\n    } catch (IOException e) {\r\n        throw new YarnException(e);\r\n    }\r\n    if (report == null) {\r\n        return false;\r\n    }\r\n    return ACTIVE_STATES.contains(report.getYarnApplicationState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "getActiveApplications",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Collection<ApplicationId> getActiveApplications() throws YarnException\n{\r\n    try {\r\n        List<ApplicationId> activeApps = new ArrayList<ApplicationId>();\r\n        List<ApplicationReport> apps = client.getApplications(ACTIVE_STATES);\r\n        for (ApplicationReport app : apps) {\r\n            activeApps.add(app.getApplicationId());\r\n        }\r\n        return activeApps;\r\n    } catch (IOException e) {\r\n        throw new YarnException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "create",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "CleanerTask create(Configuration conf, SCMStore store, CleanerMetrics metrics, Lock cleanerTaskLock)\n{\r\n    try {\r\n        String location = conf.get(YarnConfiguration.SHARED_CACHE_ROOT, YarnConfiguration.DEFAULT_SHARED_CACHE_ROOT);\r\n        long sleepTime = conf.getLong(YarnConfiguration.SCM_CLEANER_RESOURCE_SLEEP_MS, YarnConfiguration.DEFAULT_SCM_CLEANER_RESOURCE_SLEEP_MS);\r\n        int nestedLevel = SharedCacheUtil.getCacheDepth(conf);\r\n        FileSystem fs = FileSystem.get(conf);\r\n        return new CleanerTask(location, sleepTime, nestedLevel, fs, store, metrics, cleanerTaskLock);\r\n    } catch (IOException e) {\r\n        LOG.error(\"Unable to obtain the filesystem for the cleaner service\", e);\r\n        throw new ExceptionInInitializerError(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "run",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void run()\n{\r\n    if (!this.cleanerTaskLock.tryLock()) {\r\n        LOG.warn(\"A cleaner task is already running. \" + \"This scheduled cleaner task will do nothing.\");\r\n        return;\r\n    }\r\n    try {\r\n        if (!fs.exists(root)) {\r\n            LOG.error(\"The shared cache root \" + location + \" was not found. \" + \"The cleaner task will do nothing.\");\r\n            return;\r\n        }\r\n        process();\r\n    } catch (Throwable e) {\r\n        LOG.error(\"Unexpected exception while initializing the cleaner task. \" + \"This task will do nothing,\", e);\r\n    } finally {\r\n        this.cleanerTaskLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "process",
  "errType" : [ "IOException", "InterruptedException" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void process()\n{\r\n    metrics.reportCleaningStart();\r\n    try {\r\n        String pattern = SharedCacheUtil.getCacheEntryGlobPattern(nestedLevel);\r\n        FileStatus[] resources = fs.globStatus(new Path(root, pattern));\r\n        int numResources = resources == null ? 0 : resources.length;\r\n        LOG.info(\"Processing \" + numResources + \" resources in the shared cache\");\r\n        long beginMs = System.currentTimeMillis();\r\n        if (resources != null) {\r\n            for (FileStatus resource : resources) {\r\n                if (Thread.currentThread().isInterrupted()) {\r\n                    LOG.warn(\"The cleaner task was interrupted. Aborting.\");\r\n                    break;\r\n                }\r\n                if (resource.isDirectory()) {\r\n                    processSingleResource(resource);\r\n                } else {\r\n                    LOG.warn(\"Invalid file at path \" + resource.getPath().toString() + \" when a directory was expected\");\r\n                }\r\n                if (sleepTime > 0) {\r\n                    Thread.sleep(sleepTime);\r\n                }\r\n            }\r\n        }\r\n        long endMs = System.currentTimeMillis();\r\n        long durationMs = endMs - beginMs;\r\n        LOG.info(\"Processed \" + numResources + \" resource(s) in \" + durationMs + \" ms.\");\r\n    } catch (IOException e1) {\r\n        LOG.error(\"Unable to complete the cleaner task\", e1);\r\n    } catch (InterruptedException e2) {\r\n        Thread.currentThread().interrupt();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "getRootPath",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Path getRootPath()\n{\r\n    return root;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "processSingleResource",
  "errType" : [ "YarnException", "IOException", "IOException" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void processSingleResource(FileStatus resource)\n{\r\n    Path path = resource.getPath();\r\n    ResourceStatus resourceStatus = ResourceStatus.INIT;\r\n    if (path.toString().endsWith(RENAMED_SUFFIX)) {\r\n        LOG.info(\"Found a renamed directory that was left undeleted at \" + path.toString() + \". Deleting.\");\r\n        try {\r\n            if (fs.delete(path, true)) {\r\n                resourceStatus = ResourceStatus.DELETED;\r\n            }\r\n        } catch (IOException e) {\r\n            LOG.error(\"Error while processing a shared cache resource: \" + path, e);\r\n        }\r\n    } else {\r\n        String key = path.getName();\r\n        try {\r\n            store.cleanResourceReferences(key);\r\n        } catch (YarnException e) {\r\n            LOG.error(\"Exception thrown while removing dead appIds.\", e);\r\n        }\r\n        if (store.isResourceEvictable(key, resource)) {\r\n            try {\r\n                if (store.removeResource(key)) {\r\n                    boolean deleted = removeResourceFromCacheFileSystem(path);\r\n                    if (deleted) {\r\n                        resourceStatus = ResourceStatus.DELETED;\r\n                    } else {\r\n                        LOG.error(\"Failed to remove path from the file system.\" + \" Skipping this resource: \" + path);\r\n                        resourceStatus = ResourceStatus.ERROR;\r\n                    }\r\n                } else {\r\n                    resourceStatus = ResourceStatus.PROCESSED;\r\n                }\r\n            } catch (IOException e) {\r\n                LOG.error(\"Failed to remove path from the file system. Skipping this resource: \" + path, e);\r\n                resourceStatus = ResourceStatus.ERROR;\r\n            }\r\n        } else {\r\n            resourceStatus = ResourceStatus.PROCESSED;\r\n        }\r\n    }\r\n    switch(resourceStatus) {\r\n        case DELETED:\r\n            metrics.reportAFileDelete();\r\n            break;\r\n        case PROCESSED:\r\n            metrics.reportAFileProcess();\r\n            break;\r\n        case ERROR:\r\n            metrics.reportAFileError();\r\n            break;\r\n        default:\r\n            LOG.error(\"Cleaner encountered an invalid status (\" + resourceStatus + \") while processing resource: \" + path.getName());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "removeResourceFromCacheFileSystem",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "boolean removeResourceFromCacheFileSystem(Path path) throws IOException\n{\r\n    Path renamedPath = new Path(path.toString() + RENAMED_SUFFIX);\r\n    if (fs.rename(path, renamedPath)) {\r\n        LOG.info(\"Deleting \" + path.toString());\r\n        return fs.delete(renamedPath, true);\r\n    } else {\r\n        LOG.error(\"We were not able to rename the directory to \" + renamedPath.toString() + \". We will leave it intact.\");\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "getAppId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationId getAppId()\n{\r\n    return this.appId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "getShortUserName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getShortUserName()\n{\r\n    return this.shortUserName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int hashCode()\n{\r\n    final int prime = 31;\r\n    int result = 1;\r\n    result = prime * result + ((appId == null) ? 0 : appId.hashCode());\r\n    result = prime * result + ((shortUserName == null) ? 0 : shortUserName.hashCode());\r\n    return result;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean equals(Object obj)\n{\r\n    if (this == obj)\r\n        return true;\r\n    if (obj == null)\r\n        return false;\r\n    if (getClass() != obj.getClass())\r\n        return false;\r\n    SharedCacheResourceReference other = (SharedCacheResourceReference) obj;\r\n    if (appId == null) {\r\n        if (other.appId != null)\r\n            return false;\r\n    } else if (!appId.equals(other.appId))\r\n        return false;\r\n    if (shortUserName == null) {\r\n        if (other.shortUserName != null)\r\n            return false;\r\n    } else if (!shortUserName.equals(other.shortUserName))\r\n        return false;\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\webapp",
  "methodName" : "preHead",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void preHead(Page.HTML<__> html)\n{\r\n    set(ACCORDION_ID, \"nav\");\r\n    set(initID(ACCORDION, \"nav\"), \"{autoHeight:false, active:0}\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\webapp",
  "methodName" : "content",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<? extends SubView> content()\n{\r\n    return SCMOverviewBlock.class;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\webapp",
  "methodName" : "nav",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<? extends SubView> nav()\n{\r\n    return SCMOverviewNavBlock.class;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\metrics",
  "methodName" : "getInstance",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ClientSCMMetrics getInstance()\n{\r\n    return INSTANCE;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\metrics",
  "methodName" : "create",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ClientSCMMetrics create()\n{\r\n    MetricsSystem ms = DefaultMetricsSystem.instance();\r\n    ClientSCMMetrics metrics = new ClientSCMMetrics();\r\n    ms.register(\"clientRequests\", null, metrics);\r\n    return metrics;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\metrics",
  "methodName" : "incCacheHitCount",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void incCacheHitCount()\n{\r\n    cacheHits.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\metrics",
  "methodName" : "incCacheMissCount",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void incCacheMissCount()\n{\r\n    cacheMisses.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\metrics",
  "methodName" : "incCacheRelease",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void incCacheRelease()\n{\r\n    cacheReleases.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\metrics",
  "methodName" : "getCacheHits",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getCacheHits()\n{\r\n    return cacheHits.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\metrics",
  "methodName" : "getCacheMisses",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getCacheMisses()\n{\r\n    return cacheMisses.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\metrics",
  "methodName" : "getCacheReleases",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getCacheReleases()\n{\r\n    return cacheReleases.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\webapp",
  "methodName" : "index",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void index()\n{\r\n    setTitle(\"Shared Cache Manager\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\webapp",
  "methodName" : "overview",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void overview()\n{\r\n    render(SCMOverviewPage.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    if (this.appChecker == null) {\r\n        this.appChecker = createAppCheckerService(conf);\r\n    }\r\n    addService(appChecker);\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "addResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String addResource(String key, String fileName)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "removeResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean removeResource(String key)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "addResourceReference",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String addResourceReference(String key, SharedCacheResourceReference ref)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "getResourceReferences",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Collection<SharedCacheResourceReference> getResourceReferences(String key)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "removeResourceReference",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean removeResourceReference(String key, SharedCacheResourceReference ref, boolean updateAccessTime)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "removeResourceReferences",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void removeResourceReferences(String key, Collection<SharedCacheResourceReference> refs, boolean updateAccessTime)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "cleanResourceReferences",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void cleanResourceReferences(String key) throws YarnException\n{\r\n    Collection<SharedCacheResourceReference> refs = getResourceReferences(key);\r\n    if (!refs.isEmpty()) {\r\n        Set<SharedCacheResourceReference> refsToRemove = new HashSet<SharedCacheResourceReference>();\r\n        for (SharedCacheResourceReference r : refs) {\r\n            if (!appChecker.isApplicationActive(r.getAppId())) {\r\n                refsToRemove.add(r);\r\n            }\r\n        }\r\n        if (refsToRemove.size() > 0) {\r\n            removeResourceReferences(key, refsToRemove, false);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "isResourceEvictable",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isResourceEvictable(String key, FileStatus file)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "createAppCheckerService",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "AppChecker createAppCheckerService(Configuration conf)\n{\r\n    Class<? extends AppChecker> defaultCheckerClass;\r\n    try {\r\n        defaultCheckerClass = (Class<? extends AppChecker>) Class.forName(YarnConfiguration.DEFAULT_SCM_APP_CHECKER_CLASS);\r\n    } catch (Exception e) {\r\n        throw new YarnRuntimeException(\"Invalid default scm app checker class\" + YarnConfiguration.DEFAULT_SCM_APP_CHECKER_CLASS, e);\r\n    }\r\n    AppChecker checker = ReflectionUtils.newInstance(conf.getClass(YarnConfiguration.SCM_APP_CHECKER_CLASS, defaultCheckerClass, AppChecker.class), conf);\r\n    return checker;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "intern",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String intern(String key)\n{\r\n    return StringInterner.weakIntern(key);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    this.startTime = System.currentTimeMillis();\r\n    this.initialDelayMin = getInitialDelay(conf);\r\n    this.checkPeriodMin = getCheckPeriod(conf);\r\n    this.stalenessMinutes = getStalenessPeriod(conf);\r\n    bootstrap(conf);\r\n    ThreadFactory tf = new ThreadFactoryBuilder().setNameFormat(\"InMemorySCMStore\").build();\r\n    scheduler = HadoopExecutors.newSingleThreadScheduledExecutor(tf);\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    super.serviceStart();\r\n    LOG.info(\"Getting the active app list to initialize the in-memory scm store\");\r\n    synchronized (initialAppsLock) {\r\n        initialApps = appChecker.getActiveApplications();\r\n    }\r\n    LOG.info(initialApps.size() + \" apps recorded as active at this time\");\r\n    Runnable task = new AppCheckTask(appChecker);\r\n    scheduler.scheduleAtFixedRate(task, initialDelayMin, checkPeriodMin, TimeUnit.MINUTES);\r\n    LOG.info(\"Scheduled the in-memory scm store app check task to run every \" + checkPeriodMin + \" minutes.\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "serviceStop",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    LOG.info(\"Stopping the \" + InMemorySCMStore.class.getSimpleName() + \" service.\");\r\n    if (scheduler != null) {\r\n        LOG.info(\"Shutting down the background thread.\");\r\n        scheduler.shutdownNow();\r\n        try {\r\n            if (!scheduler.awaitTermination(10, TimeUnit.SECONDS)) {\r\n                LOG.warn(\"Gave up waiting for the app check task to shutdown.\");\r\n            }\r\n        } catch (InterruptedException e) {\r\n            LOG.warn(\"The InMemorySCMStore was interrupted while shutting down the \" + \"app check task.\", e);\r\n        }\r\n        LOG.info(\"The background thread stopped.\");\r\n    }\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "bootstrap",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void bootstrap(Configuration conf) throws IOException\n{\r\n    Map<String, String> initialCachedResources = getInitialCachedResources(FileSystem.get(conf), conf);\r\n    LOG.info(\"Bootstrapping from \" + initialCachedResources.size() + \" cache resources located in the file system\");\r\n    Iterator<Map.Entry<String, String>> it = initialCachedResources.entrySet().iterator();\r\n    while (it.hasNext()) {\r\n        Map.Entry<String, String> e = it.next();\r\n        String key = intern(e.getKey());\r\n        String fileName = e.getValue();\r\n        SharedCacheResource resource = new SharedCacheResource(fileName);\r\n        cachedResources.put(key, resource);\r\n        it.remove();\r\n    }\r\n    LOG.info(\"Bootstrapping complete\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "getInitialCachedResources",
  "errType" : [ "FileNotFoundException" ],
  "containingMethodsNum" : 18,
  "sourceCodeText" : "Map<String, String> getInitialCachedResources(FileSystem fs, Configuration conf) throws IOException\n{\r\n    String location = conf.get(YarnConfiguration.SHARED_CACHE_ROOT, YarnConfiguration.DEFAULT_SHARED_CACHE_ROOT);\r\n    Path root = new Path(location);\r\n    try {\r\n        fs.getFileStatus(root);\r\n    } catch (FileNotFoundException e) {\r\n        String message = \"The shared cache root directory \" + location + \" was not found\";\r\n        LOG.error(message);\r\n        throw (IOException) new FileNotFoundException(message).initCause(e);\r\n    }\r\n    int nestedLevel = SharedCacheUtil.getCacheDepth(conf);\r\n    String pattern = SharedCacheUtil.getCacheEntryGlobPattern(nestedLevel + 1);\r\n    LOG.info(\"Querying for all individual cached resource files\");\r\n    FileStatus[] entries = fs.globStatus(new Path(root, pattern));\r\n    int numEntries = entries == null ? 0 : entries.length;\r\n    LOG.info(\"Found \" + numEntries + \" files: processing for one resource per \" + \"key\");\r\n    Map<String, String> initialCachedEntries = new HashMap<String, String>();\r\n    if (entries != null) {\r\n        for (FileStatus entry : entries) {\r\n            Path file = entry.getPath();\r\n            String fileName = file.getName();\r\n            if (entry.isFile()) {\r\n                Path parent = file.getParent();\r\n                if (parent != null) {\r\n                    String key = parent.getName();\r\n                    if (initialCachedEntries.containsKey(key)) {\r\n                        LOG.warn(\"Key \" + key + \" is already mapped to file \" + initialCachedEntries.get(key) + \"; file \" + fileName + \" will not be added\");\r\n                    } else {\r\n                        initialCachedEntries.put(key, fileName);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    LOG.info(\"A total of \" + initialCachedEntries.size() + \" files are now mapped\");\r\n    return initialCachedEntries;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "addResource",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String addResource(String key, String fileName)\n{\r\n    String interned = intern(key);\r\n    synchronized (interned) {\r\n        SharedCacheResource resource = cachedResources.get(interned);\r\n        if (resource == null) {\r\n            resource = new SharedCacheResource(fileName);\r\n            cachedResources.put(interned, resource);\r\n        }\r\n        return resource.getFileName();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "addResourceReference",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "String addResourceReference(String key, SharedCacheResourceReference ref)\n{\r\n    String interned = intern(key);\r\n    synchronized (interned) {\r\n        SharedCacheResource resource = cachedResources.get(interned);\r\n        if (resource == null) {\r\n            return null;\r\n        }\r\n        resource.addReference(ref);\r\n        resource.updateAccessTime();\r\n        return resource.getFileName();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "getResourceReferences",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Collection<SharedCacheResourceReference> getResourceReferences(String key)\n{\r\n    String interned = intern(key);\r\n    synchronized (interned) {\r\n        SharedCacheResource resource = cachedResources.get(interned);\r\n        if (resource == null) {\r\n            return Collections.emptySet();\r\n        }\r\n        Set<SharedCacheResourceReference> refs = new HashSet<SharedCacheResourceReference>(resource.getResourceReferences());\r\n        return Collections.unmodifiableSet(refs);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "removeResourceReference",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "boolean removeResourceReference(String key, SharedCacheResourceReference ref, boolean updateAccessTime)\n{\r\n    String interned = intern(key);\r\n    synchronized (interned) {\r\n        boolean removed = false;\r\n        SharedCacheResource resource = cachedResources.get(interned);\r\n        if (resource != null) {\r\n            Set<SharedCacheResourceReference> resourceRefs = resource.getResourceReferences();\r\n            removed = resourceRefs.remove(ref);\r\n            if (updateAccessTime) {\r\n                resource.updateAccessTime();\r\n            }\r\n        }\r\n        return removed;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "removeResourceReferences",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void removeResourceReferences(String key, Collection<SharedCacheResourceReference> refs, boolean updateAccessTime)\n{\r\n    String interned = intern(key);\r\n    synchronized (interned) {\r\n        SharedCacheResource resource = cachedResources.get(interned);\r\n        if (resource != null) {\r\n            Set<SharedCacheResourceReference> resourceRefs = resource.getResourceReferences();\r\n            resourceRefs.removeAll(refs);\r\n            if (updateAccessTime) {\r\n                resource.updateAccessTime();\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "cleanResourceReferences",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void cleanResourceReferences(String key) throws YarnException\n{\r\n    String interned = intern(key);\r\n    synchronized (interned) {\r\n        super.cleanResourceReferences(key);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "removeResource",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean removeResource(String key)\n{\r\n    String interned = intern(key);\r\n    synchronized (interned) {\r\n        SharedCacheResource resource = cachedResources.get(interned);\r\n        if (resource == null) {\r\n            return true;\r\n        }\r\n        if (!resource.getResourceReferences().isEmpty()) {\r\n            return false;\r\n        }\r\n        cachedResources.remove(interned);\r\n        return true;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "getAccessTime",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "long getAccessTime(String key)\n{\r\n    String interned = intern(key);\r\n    synchronized (interned) {\r\n        SharedCacheResource resource = cachedResources.get(interned);\r\n        return resource == null ? -1 : resource.getAccessTime();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "isResourceEvictable",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "boolean isResourceEvictable(String key, FileStatus file)\n{\r\n    synchronized (initialAppsLock) {\r\n        if (initialApps.size() > 0) {\r\n            return false;\r\n        }\r\n    }\r\n    long staleTime = System.currentTimeMillis() - TimeUnit.MINUTES.toMillis(this.stalenessMinutes);\r\n    long accessTime = getAccessTime(key);\r\n    if (accessTime == -1) {\r\n        long modTime = file.getModificationTime();\r\n        long lastUse = modTime < this.startTime ? this.startTime : modTime;\r\n        return lastUse < staleTime;\r\n    } else {\r\n        return accessTime < staleTime;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "getStalenessPeriod",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getStalenessPeriod(Configuration conf)\n{\r\n    int stalenessMinutes = conf.getInt(YarnConfiguration.IN_MEMORY_STALENESS_PERIOD_MINS, YarnConfiguration.DEFAULT_IN_MEMORY_STALENESS_PERIOD_MINS);\r\n    if (stalenessMinutes <= 0) {\r\n        throw new HadoopIllegalArgumentException(\"Non-positive staleness value: \" + stalenessMinutes + \". The staleness value must be greater than zero.\");\r\n    }\r\n    return stalenessMinutes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "getInitialDelay",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getInitialDelay(Configuration conf)\n{\r\n    int initialMinutes = conf.getInt(YarnConfiguration.IN_MEMORY_INITIAL_DELAY_MINS, YarnConfiguration.DEFAULT_IN_MEMORY_INITIAL_DELAY_MINS);\r\n    if (initialMinutes <= 0) {\r\n        throw new HadoopIllegalArgumentException(\"Non-positive initial delay value: \" + initialMinutes + \". The initial delay value must be greater than zero.\");\r\n    }\r\n    return initialMinutes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "getCheckPeriod",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getCheckPeriod(Configuration conf)\n{\r\n    int checkMinutes = conf.getInt(YarnConfiguration.IN_MEMORY_CHECK_PERIOD_MINS, YarnConfiguration.DEFAULT_IN_MEMORY_CHECK_PERIOD_MINS);\r\n    if (checkMinutes <= 0) {\r\n        throw new HadoopIllegalArgumentException(\"Non-positive check period value: \" + checkMinutes + \". The check period value must be greater than zero.\");\r\n    }\r\n    return checkMinutes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    this.conf = conf;\r\n    ThreadFactory tf = new ThreadFactoryBuilder().setNameFormat(\"Shared cache cleaner\").build();\r\n    scheduledExecutor = HadoopExecutors.newScheduledThreadPool(2, tf);\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    if (!writeGlobalCleanerPidFile()) {\r\n        throw new YarnException(\"The global cleaner pid file already exists! \" + \"It appears there is another CleanerService running in the cluster\");\r\n    }\r\n    this.metrics = CleanerMetrics.getInstance();\r\n    super.serviceStart();\r\n    Runnable task = CleanerTask.create(conf, store, metrics, cleanerTaskLock);\r\n    long periodInMinutes = getPeriod(conf);\r\n    scheduledExecutor.scheduleAtFixedRate(task, getInitialDelay(conf), periodInMinutes, TimeUnit.MINUTES);\r\n    LOG.info(\"Scheduled the shared cache cleaner task to run every \" + periodInMinutes + \" minutes.\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "serviceStop",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    LOG.info(\"Shutting down the background thread.\");\r\n    scheduledExecutor.shutdownNow();\r\n    try {\r\n        if (scheduledExecutor.awaitTermination(10, TimeUnit.SECONDS)) {\r\n            LOG.info(\"The background thread stopped.\");\r\n        } else {\r\n            LOG.warn(\"Gave up waiting for the cleaner task to shutdown.\");\r\n        }\r\n    } catch (InterruptedException e) {\r\n        LOG.warn(\"The cleaner service was interrupted while shutting down the task.\", e);\r\n    }\r\n    removeGlobalCleanerPidFile();\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "runCleanerTask",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void runCleanerTask()\n{\r\n    Runnable task = CleanerTask.create(conf, store, metrics, cleanerTaskLock);\r\n    this.scheduledExecutor.execute(task);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "writeGlobalCleanerPidFile",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "boolean writeGlobalCleanerPidFile() throws YarnException\n{\r\n    String root = conf.get(YarnConfiguration.SHARED_CACHE_ROOT, YarnConfiguration.DEFAULT_SHARED_CACHE_ROOT);\r\n    Path pidPath = new Path(root, GLOBAL_CLEANER_PID);\r\n    try {\r\n        FileSystem fs = FileSystem.get(this.conf);\r\n        if (fs.exists(pidPath)) {\r\n            return false;\r\n        }\r\n        FSDataOutputStream os = fs.create(pidPath, false);\r\n        final String ID = ManagementFactory.getRuntimeMXBean().getName();\r\n        os.writeUTF(ID);\r\n        os.close();\r\n        fs.deleteOnExit(pidPath);\r\n    } catch (IOException e) {\r\n        throw new YarnException(e);\r\n    }\r\n    LOG.info(\"Created the global cleaner pid file at \" + pidPath.toString());\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "removeGlobalCleanerPidFile",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void removeGlobalCleanerPidFile()\n{\r\n    try {\r\n        FileSystem fs = FileSystem.get(this.conf);\r\n        String root = conf.get(YarnConfiguration.SHARED_CACHE_ROOT, YarnConfiguration.DEFAULT_SHARED_CACHE_ROOT);\r\n        Path pidPath = new Path(root, GLOBAL_CLEANER_PID);\r\n        fs.delete(pidPath, false);\r\n        LOG.info(\"Removed the global cleaner pid file at \" + pidPath.toString());\r\n    } catch (IOException e) {\r\n        LOG.error(\"Unable to remove the global cleaner pid file! The file may need \" + \"to be removed manually.\", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "getInitialDelay",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getInitialDelay(Configuration conf)\n{\r\n    int initialDelayInMinutes = conf.getInt(YarnConfiguration.SCM_CLEANER_INITIAL_DELAY_MINS, YarnConfiguration.DEFAULT_SCM_CLEANER_INITIAL_DELAY_MINS);\r\n    if (initialDelayInMinutes < 0) {\r\n        throw new HadoopIllegalArgumentException(\"Negative initial delay value: \" + initialDelayInMinutes + \". The initial delay must be greater than zero.\");\r\n    }\r\n    return initialDelayInMinutes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "getPeriod",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getPeriod(Configuration conf)\n{\r\n    int periodInMinutes = conf.getInt(YarnConfiguration.SCM_CLEANER_PERIOD_MINS, YarnConfiguration.DEFAULT_SCM_CLEANER_PERIOD_MINS);\r\n    if (periodInMinutes <= 0) {\r\n        throw new HadoopIllegalArgumentException(\"Non-positive period value: \" + periodInMinutes + \". The cleaner period must be greater than or equal to zero.\");\r\n    }\r\n    return periodInMinutes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    this.clientBindAddress = getBindAddress(conf);\r\n    authorizer = YarnAuthorizationProvider.getInstance(conf);\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "getBindAddress",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "InetSocketAddress getBindAddress(Configuration conf)\n{\r\n    return conf.getSocketAddr(YarnConfiguration.SCM_ADMIN_ADDRESS, YarnConfiguration.DEFAULT_SCM_ADMIN_ADDRESS, YarnConfiguration.DEFAULT_SCM_ADMIN_PORT);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    Configuration conf = getConfig();\r\n    YarnRPC rpc = YarnRPC.create(conf);\r\n    this.server = rpc.getServer(SCMAdminProtocol.class, this, clientBindAddress, conf, null, conf.getInt(YarnConfiguration.SCM_ADMIN_CLIENT_THREAD_COUNT, YarnConfiguration.DEFAULT_SCM_ADMIN_CLIENT_THREAD_COUNT));\r\n    this.server.start();\r\n    clientBindAddress = conf.updateConnectAddr(YarnConfiguration.SCM_ADMIN_ADDRESS, server.getListenerAddress());\r\n    super.serviceStart();\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    if (this.server != null) {\r\n        this.server.stop();\r\n    }\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "checkAcls",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void checkAcls(String method) throws YarnException\n{\r\n    UserGroupInformation user;\r\n    try {\r\n        user = UserGroupInformation.getCurrentUser();\r\n    } catch (IOException ioe) {\r\n        LOG.warn(\"Couldn't get current user\", ioe);\r\n        throw RPCUtil.getRemoteException(ioe);\r\n    }\r\n    if (!authorizer.isAdmin(user)) {\r\n        LOG.warn(\"User \" + user.getShortUserName() + \" doesn't have permission\" + \" to call '\" + method + \"'\");\r\n        throw RPCUtil.getRemoteException(new AccessControlException(\"User \" + user.getShortUserName() + \" doesn't have permission\" + \" to call '\" + method + \"'\"));\r\n    }\r\n    LOG.info(\"SCM Admin: \" + method + \" invoked by user \" + user.getShortUserName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "runCleanerTask",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "RunSharedCacheCleanerTaskResponse runCleanerTask(RunSharedCacheCleanerTaskRequest request) throws YarnException\n{\r\n    checkAcls(\"runCleanerTask\");\r\n    RunSharedCacheCleanerTaskResponse response = recordFactory.newRecordInstance(RunSharedCacheCleanerTaskResponse.class);\r\n    this.cleanerService.runCleanerTask();\r\n    response.setAccepted(true);\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "isApplicationActive",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isApplicationActive(ApplicationId id) throws YarnException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "getActiveApplications",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Collection<ApplicationId> getActiveApplications() throws YarnException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\webapp",
  "methodName" : "getTotalDeletedFiles",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getTotalDeletedFiles()\n{\r\n    return totalDeletedFiles;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\webapp",
  "methodName" : "getTotalProcessedFiles",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getTotalProcessedFiles()\n{\r\n    return totalProcessedFiles;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\webapp",
  "methodName" : "getCacheHits",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getCacheHits()\n{\r\n    return cacheHits;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\webapp",
  "methodName" : "getCacheMisses",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getCacheMisses()\n{\r\n    return cacheMisses;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\webapp",
  "methodName" : "getCacheReleases",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getCacheReleases()\n{\r\n    return cacheReleases;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\webapp",
  "methodName" : "getAcceptedUploads",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getAcceptedUploads()\n{\r\n    return acceptedUploads;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\webapp",
  "methodName" : "getRejectUploads",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getRejectUploads()\n{\r\n    return rejectedUploads;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    this.store = createSCMStoreService(conf);\r\n    addService(store);\r\n    CleanerService cs = createCleanerService(store);\r\n    addService(cs);\r\n    SharedCacheUploaderService nms = createNMCacheUploaderSCMProtocolService(store);\r\n    addService(nms);\r\n    ClientProtocolService cps = createClientProtocolService(store);\r\n    addService(cps);\r\n    SCMAdminProtocolService saps = createSCMAdminProtocolService(cs);\r\n    addService(saps);\r\n    SCMWebServer webUI = createSCMWebServer(this);\r\n    addService(webUI);\r\n    DefaultMetricsSystem.initialize(\"SharedCacheManager\");\r\n    JvmMetrics.initSingleton(\"SharedCacheManager\", null);\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "createSCMStoreService",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SCMStore createSCMStoreService(Configuration conf)\n{\r\n    Class<? extends SCMStore> defaultStoreClass;\r\n    try {\r\n        defaultStoreClass = (Class<? extends SCMStore>) Class.forName(YarnConfiguration.DEFAULT_SCM_STORE_CLASS);\r\n    } catch (Exception e) {\r\n        throw new YarnRuntimeException(\"Invalid default scm store class\" + YarnConfiguration.DEFAULT_SCM_STORE_CLASS, e);\r\n    }\r\n    SCMStore store = ReflectionUtils.newInstance(conf.getClass(YarnConfiguration.SCM_STORE_CLASS, defaultStoreClass, SCMStore.class), conf);\r\n    return store;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "createCleanerService",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "CleanerService createCleanerService(SCMStore store)\n{\r\n    return new CleanerService(store);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "createNMCacheUploaderSCMProtocolService",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SharedCacheUploaderService createNMCacheUploaderSCMProtocolService(SCMStore store)\n{\r\n    return new SharedCacheUploaderService(store);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "createClientProtocolService",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ClientProtocolService createClientProtocolService(SCMStore store)\n{\r\n    return new ClientProtocolService(store);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "createSCMAdminProtocolService",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SCMAdminProtocolService createSCMAdminProtocolService(CleanerService cleanerService)\n{\r\n    return new SCMAdminProtocolService(cleanerService);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "createSCMWebServer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SCMWebServer createSCMWebServer(SharedCacheManager scm)\n{\r\n    return new SCMWebServer(scm);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    DefaultMetricsSystem.shutdown();\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "getSCMStore",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SCMStore getSCMStore()\n{\r\n    return this.store;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "main",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void main(String[] args)\n{\r\n    Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\r\n    StringUtils.startupShutdownMessage(SharedCacheManager.class, args, LOG);\r\n    try {\r\n        Configuration conf = new YarnConfiguration();\r\n        SharedCacheManager sharedCacheManager = new SharedCacheManager();\r\n        ShutdownHookManager.get().addShutdownHook(new CompositeServiceShutdownHook(sharedCacheManager), SHUTDOWN_HOOK_PRIORITY);\r\n        sharedCacheManager.init(conf);\r\n        sharedCacheManager.start();\r\n    } catch (Throwable t) {\r\n        LOG.error(\"Error starting SharedCacheManager\", t);\r\n        System.exit(-1);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    this.bindAddress = getBindAddress(conf);\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "getBindAddress",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "InetSocketAddress getBindAddress(Configuration conf)\n{\r\n    return conf.getSocketAddr(YarnConfiguration.SCM_UPLOADER_SERVER_ADDRESS, YarnConfiguration.DEFAULT_SCM_UPLOADER_SERVER_ADDRESS, YarnConfiguration.DEFAULT_SCM_UPLOADER_SERVER_PORT);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    Configuration conf = getConfig();\r\n    this.metrics = SharedCacheUploaderMetrics.getInstance();\r\n    YarnRPC rpc = YarnRPC.create(conf);\r\n    this.server = rpc.getServer(SCMUploaderProtocol.class, this, bindAddress, conf, null, conf.getInt(YarnConfiguration.SCM_UPLOADER_SERVER_THREAD_COUNT, YarnConfiguration.DEFAULT_SCM_UPLOADER_SERVER_THREAD_COUNT));\r\n    this.server.start();\r\n    bindAddress = conf.updateConnectAddr(YarnConfiguration.SCM_UPLOADER_SERVER_ADDRESS, server.getListenerAddress());\r\n    super.serviceStart();\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    if (this.server != null) {\r\n        this.server.stop();\r\n        this.server = null;\r\n    }\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "notify",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "SCMUploaderNotifyResponse notify(SCMUploaderNotifyRequest request) throws YarnException, IOException\n{\r\n    SCMUploaderNotifyResponse response = recordFactory.newRecordInstance(SCMUploaderNotifyResponse.class);\r\n    String filename = store.addResource(request.getResourceKey(), request.getFileName());\r\n    boolean accepted = filename.equals(request.getFileName());\r\n    if (accepted) {\r\n        this.metrics.incAcceptedUploads();\r\n    } else {\r\n        this.metrics.incRejectedUploads();\r\n    }\r\n    response.setAccepted(accepted);\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager",
  "methodName" : "canUpload",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SCMUploaderCanUploadResponse canUpload(SCMUploaderCanUploadRequest request) throws YarnException, IOException\n{\r\n    SCMUploaderCanUploadResponse response = recordFactory.newRecordInstance(SCMUploaderCanUploadResponse.class);\r\n    response.setUploadable(true);\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\metrics",
  "methodName" : "getInstance",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "CleanerMetrics getInstance()\n{\r\n    return INSTANCE;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\metrics",
  "methodName" : "getTotalDeletedFiles",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getTotalDeletedFiles()\n{\r\n    return totalDeletedFiles.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\metrics",
  "methodName" : "getDeletedFiles",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getDeletedFiles()\n{\r\n    return deletedFiles.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\metrics",
  "methodName" : "getTotalProcessedFiles",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getTotalProcessedFiles()\n{\r\n    return totalProcessedFiles.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\metrics",
  "methodName" : "getProcessedFiles",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getProcessedFiles()\n{\r\n    return processedFiles.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\metrics",
  "methodName" : "getTotalFileErrors",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getTotalFileErrors()\n{\r\n    return totalFileErrors.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\metrics",
  "methodName" : "getFileErrors",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getFileErrors()\n{\r\n    return fileErrors.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\metrics",
  "methodName" : "create",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "CleanerMetrics create()\n{\r\n    MetricsSystem ms = DefaultMetricsSystem.instance();\r\n    CleanerMetrics metricObject = new CleanerMetrics();\r\n    MetricsSourceBuilder sb = MetricsAnnotations.newSourceBuilder(metricObject);\r\n    final MetricsSource s = sb.build();\r\n    ms.register(\"cleaner\", \"The cleaner service of truly shared cache\", s);\r\n    metricObject.metricSource = s;\r\n    return metricObject;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\metrics",
  "methodName" : "reportAFileDelete",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void reportAFileDelete()\n{\r\n    totalProcessedFiles.incr();\r\n    processedFiles.incr();\r\n    totalDeletedFiles.incr();\r\n    deletedFiles.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\metrics",
  "methodName" : "reportAFileProcess",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void reportAFileProcess()\n{\r\n    totalProcessedFiles.incr();\r\n    processedFiles.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\metrics",
  "methodName" : "reportAFileError",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void reportAFileError()\n{\r\n    totalProcessedFiles.incr();\r\n    processedFiles.incr();\r\n    totalFileErrors.incr();\r\n    fileErrors.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\metrics",
  "methodName" : "reportCleaningStart",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void reportCleaningStart()\n{\r\n    processedFiles.set(0);\r\n    deletedFiles.set(0);\r\n    fileErrors.set(0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "getAccessTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getAccessTime()\n{\r\n    return accessTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "updateAccessTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void updateAccessTime()\n{\r\n    accessTime = System.currentTimeMillis();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "getFileName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getFileName()\n{\r\n    return this.fileName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "getResourceReferences",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Set<SharedCacheResourceReference> getResourceReferences()\n{\r\n    return this.refs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-sharedcachemanager\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcachemanager\\store",
  "methodName" : "addReference",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean addReference(SharedCacheResourceReference ref)\n{\r\n    return this.refs.add(ref);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
} ]