[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "createUnmanagedAMPoolManager",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "UnmanagedAMPoolManager createUnmanagedAMPoolManager(ExecutorService threadPool)\n{\r\n    return new TestableUnmanagedAMPoolManager(threadPool);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "createHomeHeartbeartHandler",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AMHeartbeatRequestHandler createHomeHeartbeartHandler(Configuration conf, ApplicationId appId, AMRMClientRelayer rmProxyRelayer)\n{\r\n    return new TestableAMRequestHandlerThread(conf, appId, rmProxyRelayer);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "createHomeRMProxy",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "T createHomeRMProxy(AMRMProxyApplicationContext appContext, Class<T> protocol, UserGroupInformation user)\n{\r\n    synchronized (this) {\r\n        if (mockRm == null) {\r\n            mockRm = new MockResourceManagerFacade(new YarnConfiguration(super.getConf()), 0);\r\n        }\r\n    }\r\n    return (T) mockRm;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "createSecondaryRMProxy",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "T createSecondaryRMProxy(Class<T> proxyClass, Configuration conf, String subClusterId) throws IOException\n{\r\n    synchronized (this.secondaryResourceManagers) {\r\n        if (this.secondaryResourceManagers.containsKey(subClusterId)) {\r\n            return (T) this.secondaryResourceManagers.get(subClusterId);\r\n        } else {\r\n            MockResourceManagerFacade rm = new MockResourceManagerFacade(new Configuration(conf), runningIndex.addAndGet(10000));\r\n            this.secondaryResourceManagers.put(subClusterId, rm);\r\n            return (T) rm;\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "setShouldReRegisterNext",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setShouldReRegisterNext()\n{\r\n    if (mockRm != null) {\r\n        mockRm.setShouldReRegisterNext();\r\n    }\r\n    for (MockResourceManagerFacade subCluster : secondaryResourceManagers.values()) {\r\n        subCluster.setShouldReRegisterNext();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getHomeRM",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "MockResourceManagerFacade getHomeRM()\n{\r\n    return mockRm;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getSecondaryRMs",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ConcurrentHashMap<String, MockResourceManagerFacade> getSecondaryRMs()\n{\r\n    return secondaryResourceManagers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getSecondaryRM",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "MockResourceManagerFacade getSecondaryRM(String scId)\n{\r\n    return secondaryResourceManagers.get(scId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "drainAllAsyncQueue",
  "errType" : [ "InterruptedException", "InterruptedException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void drainAllAsyncQueue(boolean waitForAsyncHBThreadFinish) throws YarnException\n{\r\n    LOG.info(\"waiting to drain home heartbeat handler\");\r\n    if (waitForAsyncHBThreadFinish) {\r\n        getHomeHeartbeartHandler().drainHeartbeatThread();\r\n    } else {\r\n        while (getHomeHeartbeartHandler().getRequestQueueSize() > 0) {\r\n            try {\r\n                Thread.sleep(10);\r\n            } catch (InterruptedException e) {\r\n            }\r\n        }\r\n    }\r\n    LOG.info(\"waiting to drain UAM heartbeat handlers\");\r\n    UnmanagedAMPoolManager uamPool = getUnmanagedAMPool();\r\n    if (waitForAsyncHBThreadFinish) {\r\n        getUnmanagedAMPool().drainUAMHeartbeats();\r\n    } else {\r\n        while (true) {\r\n            boolean done = true;\r\n            for (String scId : uamPool.getAllUAMIds()) {\r\n                if (uamPool.getRequestQueueSize(scId) > 0) {\r\n                    done = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (done) {\r\n                break;\r\n            }\r\n            try {\r\n                Thread.sleep(10);\r\n            } catch (InterruptedException e) {\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getUGIWithToken",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "UserGroupInformation getUGIWithToken(ApplicationAttemptId appAttemptId)\n{\r\n    UserGroupInformation ugi = UserGroupInformation.createRemoteUser(appAttemptId.toString());\r\n    AMRMTokenIdentifier token = new AMRMTokenIdentifier(appAttemptId, 1);\r\n    ugi.addTokenIdentifier(token);\r\n    return ugi;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\privileged",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setup()\n{\r\n    localDataDir = System.getProperty(\"test.build.data\");\r\n    customExecutorPath = localDataDir + \"/bin/container-executor\";\r\n    emptyConf = new YarnConfiguration();\r\n    confWithExecutorPath = new YarnConfiguration();\r\n    confWithExecutorPath.set(YarnConfiguration.NM_LINUX_CONTAINER_EXECUTOR_PATH, customExecutorPath);\r\n    cGroupTasksNone = \"none\";\r\n    cGroupTasksInvalid = \"invalid_string\";\r\n    cGroupTasks1 = \"cpu/hadoop_yarn/container_01/tasks\";\r\n    cGroupTasks2 = \"net_cls/hadoop_yarn/container_01/tasks\";\r\n    cGroupTasks3 = \"blkio/hadoop_yarn/container_01/tasks\";\r\n    opDisallowed = new PrivilegedOperation(PrivilegedOperation.OperationType.DELETE_AS_USER);\r\n    opTasksNone = new PrivilegedOperation(PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP, PrivilegedOperation.CGROUP_ARG_PREFIX + cGroupTasksNone);\r\n    opTasksInvalid = new PrivilegedOperation(PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP, cGroupTasksInvalid);\r\n    opTasks1 = new PrivilegedOperation(PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP, PrivilegedOperation.CGROUP_ARG_PREFIX + cGroupTasks1);\r\n    opTasks2 = new PrivilegedOperation(PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP, PrivilegedOperation.CGROUP_ARG_PREFIX + cGroupTasks2);\r\n    opTasks3 = new PrivilegedOperation(PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP, PrivilegedOperation.CGROUP_ARG_PREFIX + cGroupTasks3);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\privileged",
  "methodName" : "testExecutorPath",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testExecutorPath()\n{\r\n    String containerExePath = PrivilegedOperationExecutor.getContainerExecutorExecutablePath(nullConf);\r\n    String yarnHomeEnvVar = System.getenv(\"HADOOP_YARN_HOME\");\r\n    String yarnHome = yarnHomeEnvVar != null ? yarnHomeEnvVar : new File(\"\").getAbsolutePath();\r\n    String expectedPath = yarnHome + \"/bin/container-executor\";\r\n    Assert.assertEquals(expectedPath, containerExePath);\r\n    containerExePath = PrivilegedOperationExecutor.getContainerExecutorExecutablePath(emptyConf);\r\n    Assert.assertEquals(expectedPath, containerExePath);\r\n    expectedPath = customExecutorPath;\r\n    containerExePath = PrivilegedOperationExecutor.getContainerExecutorExecutablePath(confWithExecutorPath);\r\n    Assert.assertEquals(expectedPath, containerExePath);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\privileged",
  "methodName" : "testExecutionCommand",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testExecutionCommand()\n{\r\n    PrivilegedOperationExecutor exec = PrivilegedOperationExecutor.getInstance(confWithExecutorPath);\r\n    PrivilegedOperation op = new PrivilegedOperation(PrivilegedOperation.OperationType.TC_MODIFY_STATE);\r\n    String[] cmdArray = exec.getPrivilegedOperationExecutionCommand(null, op);\r\n    Assert.assertEquals(2, cmdArray.length);\r\n    Assert.assertEquals(customExecutorPath, cmdArray[0]);\r\n    Assert.assertEquals(op.getOperationType().getOption(), cmdArray[1]);\r\n    String[] additionalArgs = { \"cmd_file_1\", \"cmd_file_2\", \"cmd_file_3\" };\r\n    op.appendArgs(additionalArgs);\r\n    cmdArray = exec.getPrivilegedOperationExecutionCommand(null, op);\r\n    Assert.assertEquals(2 + additionalArgs.length, cmdArray.length);\r\n    Assert.assertEquals(customExecutorPath, cmdArray[0]);\r\n    Assert.assertEquals(op.getOperationType().getOption(), cmdArray[1]);\r\n    for (int i = 0; i < additionalArgs.length; ++i) {\r\n        Assert.assertEquals(additionalArgs[i], cmdArray[2 + i]);\r\n    }\r\n    List<String> prefixCommands = Arrays.asList(\"nice\", \"-10\");\r\n    cmdArray = exec.getPrivilegedOperationExecutionCommand(prefixCommands, op);\r\n    int prefixLength = prefixCommands.size();\r\n    Assert.assertEquals(prefixLength + 2 + additionalArgs.length, cmdArray.length);\r\n    for (int i = 0; i < prefixLength; ++i) {\r\n        Assert.assertEquals(prefixCommands.get(i), cmdArray[i]);\r\n    }\r\n    Assert.assertEquals(customExecutorPath, cmdArray[prefixLength]);\r\n    Assert.assertEquals(op.getOperationType().getOption(), cmdArray[prefixLength + 1]);\r\n    for (int i = 0; i < additionalArgs.length; ++i) {\r\n        Assert.assertEquals(additionalArgs[i], cmdArray[prefixLength + 2 + i]);\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\privileged",
  "methodName" : "testSquashCGroupOperationsWithInvalidOperations",
  "errType" : [ "PrivilegedOperationException", "PrivilegedOperationException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testSquashCGroupOperationsWithInvalidOperations()\n{\r\n    List<PrivilegedOperation> ops = new ArrayList<>();\r\n    ops.add(opTasksNone);\r\n    ops.add(opDisallowed);\r\n    try {\r\n        PrivilegedOperationExecutor.squashCGroupOperations(ops);\r\n        Assert.fail(\"Expected squash operation to fail with an exception!\");\r\n    } catch (PrivilegedOperationException e) {\r\n        LOG.info(\"Caught expected exception : \" + e);\r\n    }\r\n    ops.clear();\r\n    ops.add(opTasksNone);\r\n    ops.add(opTasksInvalid);\r\n    try {\r\n        PrivilegedOperationExecutor.squashCGroupOperations(ops);\r\n        Assert.fail(\"Expected squash operation to fail with an exception!\");\r\n    } catch (PrivilegedOperationException e) {\r\n        LOG.info(\"Caught expected exception : \" + e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\privileged",
  "methodName" : "testSquashCGroupOperationsWithValidOperations",
  "errType" : [ "PrivilegedOperationException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testSquashCGroupOperationsWithValidOperations()\n{\r\n    List<PrivilegedOperation> ops = new ArrayList<>();\r\n    ops.clear();\r\n    ops.add(opTasks1);\r\n    ops.add(opTasksNone);\r\n    ops.add(opTasks2);\r\n    ops.add(opTasks3);\r\n    try {\r\n        PrivilegedOperation op = PrivilegedOperationExecutor.squashCGroupOperations(ops);\r\n        String expected = new StringBuffer(PrivilegedOperation.CGROUP_ARG_PREFIX).append(cGroupTasks1).append(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR).append(cGroupTasks2).append(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR).append(cGroupTasks3).toString();\r\n        Assert.assertEquals(1, op.getArguments().size());\r\n        Assert.assertEquals(expected, op.getArguments().get(0));\r\n    } catch (PrivilegedOperationException e) {\r\n        LOG.info(\"Caught unexpected exception : \" + e);\r\n        Assert.fail(\"Caught unexpected exception: \" + e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setup()\n{\r\n    dockerKillCommand = new DockerKillCommand(CONTAINER_NAME);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testGetCommandOption",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetCommandOption()\n{\r\n    assertEquals(\"kill\", dockerKillCommand.getCommandOption());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testSetGracePeriod",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testSetGracePeriod()\n{\r\n    dockerKillCommand.setSignal(SIGNAL);\r\n    assertEquals(\"kill\", StringUtils.join(\",\", dockerKillCommand.getDockerCommandWithArguments().get(\"docker-command\")));\r\n    assertEquals(\"foo\", StringUtils.join(\",\", dockerKillCommand.getDockerCommandWithArguments().get(\"name\")));\r\n    assertEquals(\"SIGUSR2\", StringUtils.join(\",\", dockerKillCommand.getDockerCommandWithArguments().get(\"signal\")));\r\n    assertEquals(3, dockerKillCommand.getDockerCommandWithArguments().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\loghandler",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void setup()\n{\r\n    mockDelService = mock(DeletionService.class);\r\n    conf = new YarnConfiguration();\r\n    dispatcher = createDispatcher(conf);\r\n    appEventHandler = new ApplicationEventHandler();\r\n    dispatcher.register(ApplicationEventType.class, appEventHandler);\r\n    appId = BuilderUtils.newApplicationId(1234, 1);\r\n    appAttemptId = BuilderUtils.newApplicationAttemptId(appId, 1);\r\n    container11 = BuilderUtils.newContainerId(appAttemptId, 1);\r\n    dirsHandler = new LocalDirsHandlerService();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\loghandler",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void tearDown() throws IOException\n{\r\n    dirsHandler.stop();\r\n    dirsHandler.close();\r\n    dispatcher.await();\r\n    dispatcher.stop();\r\n    dispatcher.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\loghandler",
  "methodName" : "testLogDeletion",
  "errType" : null,
  "containingMethodsNum" : 27,
  "sourceCodeText" : "void testLogDeletion() throws IOException\n{\r\n    File[] localLogDirs = getLocalLogDirFiles(this.getClass().getName(), 2);\r\n    String localLogDirsString = localLogDirs[0].getAbsolutePath() + \",\" + localLogDirs[1].getAbsolutePath();\r\n    conf.set(YarnConfiguration.NM_LOG_DIRS, localLogDirsString);\r\n    conf.setBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED, false);\r\n    conf.setLong(YarnConfiguration.NM_LOG_RETAIN_SECONDS, 0l);\r\n    dirsHandler.init(conf);\r\n    NonAggregatingLogHandler rawLogHandler = new NonAggregatingLogHandler(dispatcher, mockDelService, dirsHandler, new NMNullStateStoreService());\r\n    NonAggregatingLogHandler logHandler = spy(rawLogHandler);\r\n    AbstractFileSystem spylfs = spy(FileContext.getLocalFSFileContext().getDefaultFileSystem());\r\n    FileContext lfs = FileContext.getFileContext(spylfs, conf);\r\n    doReturn(lfs).when(logHandler).getLocalFileContext(isA(Configuration.class));\r\n    FsPermission defaultPermission = FsPermission.getDirDefault().applyUMask(lfs.getUMask());\r\n    final FileStatus fs = new FileStatus(0, true, 1, 0, System.currentTimeMillis(), 0, defaultPermission, \"\", \"\", new Path(localLogDirs[0].getAbsolutePath()));\r\n    doReturn(fs).when(spylfs).getFileStatus(isA(Path.class));\r\n    logHandler.init(conf);\r\n    logHandler.start();\r\n    logHandler.handle(new LogHandlerAppStartedEvent(appId, user, null, null));\r\n    logHandler.handle(new LogHandlerContainerFinishedEvent(container11, ContainerType.APPLICATION_MASTER, 0));\r\n    logHandler.handle(new LogHandlerAppFinishedEvent(appId));\r\n    Path[] localAppLogDirs = new Path[2];\r\n    localAppLogDirs[0] = new Path(localLogDirs[0].getAbsolutePath(), appId.toString());\r\n    localAppLogDirs[1] = new Path(localLogDirs[1].getAbsolutePath(), appId.toString());\r\n    testDeletionServiceCall(mockDelService, user, 5000, localAppLogDirs);\r\n    logHandler.close();\r\n    for (int i = 0; i < localLogDirs.length; i++) {\r\n        FileUtils.deleteDirectory(localLogDirs[i]);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\loghandler",
  "methodName" : "testDelayedDelete",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testDelayedDelete() throws IOException\n{\r\n    File[] localLogDirs = getLocalLogDirFiles(this.getClass().getName(), 2);\r\n    String localLogDirsString = localLogDirs[0].getAbsolutePath() + \",\" + localLogDirs[1].getAbsolutePath();\r\n    conf.set(YarnConfiguration.NM_LOG_DIRS, localLogDirsString);\r\n    conf.setBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED, false);\r\n    conf.setLong(YarnConfiguration.NM_LOG_RETAIN_SECONDS, YarnConfiguration.DEFAULT_NM_LOG_RETAIN_SECONDS);\r\n    dirsHandler.init(conf);\r\n    NonAggregatingLogHandler logHandler = new NonAggregatingLogHandlerWithMockExecutor(dispatcher, mockDelService, dirsHandler);\r\n    logHandler.init(conf);\r\n    logHandler.start();\r\n    logHandler.handle(new LogHandlerAppStartedEvent(appId, user, null, null));\r\n    logHandler.handle(new LogHandlerContainerFinishedEvent(container11, ContainerType.APPLICATION_MASTER, 0));\r\n    logHandler.handle(new LogHandlerAppFinishedEvent(appId));\r\n    Path[] localAppLogDirs = new Path[2];\r\n    localAppLogDirs[0] = new Path(localLogDirs[0].getAbsolutePath(), appId.toString());\r\n    localAppLogDirs[1] = new Path(localLogDirs[1].getAbsolutePath(), appId.toString());\r\n    ScheduledThreadPoolExecutor mockSched = ((NonAggregatingLogHandlerWithMockExecutor) logHandler).mockSched;\r\n    verify(mockSched).schedule(any(Runnable.class), eq(10800l), eq(TimeUnit.SECONDS));\r\n    logHandler.close();\r\n    for (int i = 0; i < localLogDirs.length; i++) {\r\n        FileUtils.deleteDirectory(localLogDirs[i]);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\loghandler",
  "methodName" : "testStop",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testStop() throws Exception\n{\r\n    NonAggregatingLogHandler aggregatingLogHandler = new NonAggregatingLogHandler(null, null, null, new NMNullStateStoreService());\r\n    aggregatingLogHandler.stop();\r\n    NonAggregatingLogHandlerWithMockExecutor logHandler = new NonAggregatingLogHandlerWithMockExecutor(null, null, null);\r\n    logHandler.init(new Configuration());\r\n    logHandler.stop();\r\n    verify(logHandler.mockSched).shutdown();\r\n    verify(logHandler.mockSched).awaitTermination(eq(10l), eq(TimeUnit.SECONDS));\r\n    verify(logHandler.mockSched).shutdownNow();\r\n    logHandler.close();\r\n    aggregatingLogHandler.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\loghandler",
  "methodName" : "testHandlingApplicationFinishedEvent",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testHandlingApplicationFinishedEvent() throws IOException\n{\r\n    DeletionService delService = new DeletionService(null);\r\n    NonAggregatingLogHandler aggregatingLogHandler = new NonAggregatingLogHandler(new InlineDispatcher(), delService, dirsHandler, new NMNullStateStoreService());\r\n    dirsHandler.init(conf);\r\n    dirsHandler.start();\r\n    delService.init(conf);\r\n    delService.start();\r\n    aggregatingLogHandler.init(conf);\r\n    aggregatingLogHandler.start();\r\n    aggregatingLogHandler.handle(new LogHandlerAppFinishedEvent(appId));\r\n    aggregatingLogHandler.stop();\r\n    aggregatingLogHandler.handle(new LogHandlerAppFinishedEvent(appId));\r\n    aggregatingLogHandler.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\loghandler",
  "methodName" : "createDispatcher",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "DrainDispatcher createDispatcher(Configuration conf)\n{\r\n    DrainDispatcher dispatcher = new DrainDispatcher();\r\n    dispatcher.init(conf);\r\n    dispatcher.start();\r\n    return dispatcher;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\loghandler",
  "methodName" : "testFailedDirLogDeletion",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testFailedDirLogDeletion() throws Exception\n{\r\n    File[] localLogDirs = getLocalLogDirFiles(this.getClass().getName(), 7);\r\n    final List<String> localLogDirPaths = new ArrayList<String>(localLogDirs.length);\r\n    for (int i = 0; i < localLogDirs.length; i++) {\r\n        localLogDirPaths.add(localLogDirs[i].getAbsolutePath());\r\n    }\r\n    String localLogDirsString = StringUtils.join(localLogDirPaths, \",\");\r\n    conf.set(YarnConfiguration.NM_LOG_DIRS, localLogDirsString);\r\n    conf.setBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED, false);\r\n    conf.setLong(YarnConfiguration.NM_LOG_RETAIN_SECONDS, 0l);\r\n    LocalDirsHandlerService mockDirsHandler = mock(LocalDirsHandlerService.class);\r\n    NonAggregatingLogHandler rawLogHandler = new NonAggregatingLogHandler(dispatcher, mockDelService, mockDirsHandler, new NMNullStateStoreService());\r\n    NonAggregatingLogHandler logHandler = spy(rawLogHandler);\r\n    AbstractFileSystem spylfs = spy(FileContext.getLocalFSFileContext().getDefaultFileSystem());\r\n    FileContext lfs = FileContext.getFileContext(spylfs, conf);\r\n    doReturn(lfs).when(logHandler).getLocalFileContext(isA(Configuration.class));\r\n    logHandler.init(conf);\r\n    logHandler.start();\r\n    runMockedFailedDirs(logHandler, appId, user, mockDelService, mockDirsHandler, conf, spylfs, lfs, localLogDirs);\r\n    logHandler.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\loghandler",
  "methodName" : "testRecovery",
  "errType" : null,
  "containingMethodsNum" : 35,
  "sourceCodeText" : "void testRecovery() throws Exception\n{\r\n    File[] localLogDirs = getLocalLogDirFiles(this.getClass().getName(), 2);\r\n    String localLogDirsString = localLogDirs[0].getAbsolutePath() + \",\" + localLogDirs[1].getAbsolutePath();\r\n    conf.set(YarnConfiguration.NM_LOG_DIRS, localLogDirsString);\r\n    conf.setBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED, false);\r\n    conf.setLong(YarnConfiguration.NM_LOG_RETAIN_SECONDS, YarnConfiguration.DEFAULT_NM_LOG_RETAIN_SECONDS);\r\n    dirsHandler.init(conf);\r\n    appEventHandler.resetLogHandlingEvent();\r\n    assertFalse(appEventHandler.receiveLogHandlingFinishEvent());\r\n    NMStateStoreService stateStore = new NMMemoryStateStoreService();\r\n    stateStore.init(conf);\r\n    stateStore.start();\r\n    NonAggregatingLogHandlerWithMockExecutor logHandler = new NonAggregatingLogHandlerWithMockExecutor(dispatcher, mockDelService, dirsHandler, stateStore);\r\n    logHandler.init(conf);\r\n    logHandler.start();\r\n    logHandler.handle(new LogHandlerAppStartedEvent(appId, user, null, null));\r\n    logHandler.handle(new LogHandlerContainerFinishedEvent(container11, ContainerType.APPLICATION_MASTER, 0));\r\n    logHandler.handle(new LogHandlerAppFinishedEvent(appId));\r\n    logHandler.close();\r\n    logHandler = new NonAggregatingLogHandlerWithMockExecutor(dispatcher, mockDelService, dirsHandler, stateStore);\r\n    logHandler.init(conf);\r\n    logHandler.start();\r\n    ArgumentCaptor<Runnable> schedArg = ArgumentCaptor.forClass(Runnable.class);\r\n    verify(logHandler.mockSched).schedule(schedArg.capture(), anyLong(), eq(TimeUnit.MILLISECONDS));\r\n    schedArg.getValue().run();\r\n    logHandler.close();\r\n    logHandler = new NonAggregatingLogHandlerWithMockExecutor(dispatcher, mockDelService, dirsHandler, stateStore);\r\n    logHandler.init(conf);\r\n    logHandler.start();\r\n    verify(logHandler.mockSched, never()).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class));\r\n    this.dispatcher.await();\r\n    assertTrue(appEventHandler.receiveLogHandlingFinishEvent());\r\n    appEventHandler.resetLogHandlingEvent();\r\n    assertFalse(appEventHandler.receiveLogHandlingFailedEvent());\r\n    logHandler.handle(new LogHandlerAppFinishedEvent(appId));\r\n    this.dispatcher.await();\r\n    assertTrue(appEventHandler.receiveLogHandlingFailedEvent());\r\n    assertFalse(appEventHandler.receiveLogHandlingFinishEvent());\r\n    logHandler.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\loghandler",
  "methodName" : "runMockedFailedDirs",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void runMockedFailedDirs(LogHandler logHandler, ApplicationId appId, String user, DeletionService mockDelService, LocalDirsHandlerService dirsHandler, Configuration conf, AbstractFileSystem spylfs, FileContext lfs, File[] localLogDirs) throws Exception\n{\r\n    Map<ApplicationAccessType, String> appAcls = new HashMap<ApplicationAccessType, String>();\r\n    if (localLogDirs.length < 7) {\r\n        throw new IllegalArgumentException(\"Argument localLogDirs must be at least of length 7\");\r\n    }\r\n    Path[] localAppLogDirPaths = new Path[localLogDirs.length];\r\n    for (int i = 0; i < localAppLogDirPaths.length; i++) {\r\n        localAppLogDirPaths[i] = new Path(localLogDirs[i].getAbsolutePath(), appId.toString());\r\n    }\r\n    final List<String> localLogDirPaths = new ArrayList<String>(localLogDirs.length);\r\n    for (int i = 0; i < localLogDirs.length; i++) {\r\n        localLogDirPaths.add(localLogDirs[i].getAbsolutePath());\r\n    }\r\n    FsPermission defaultPermission = FsPermission.getDirDefault().applyUMask(lfs.getUMask());\r\n    final FileStatus fs = new FileStatus(0, true, 1, 0, System.currentTimeMillis(), 0, defaultPermission, \"\", \"\", new Path(localLogDirs[0].getAbsolutePath()));\r\n    doReturn(fs).when(spylfs).getFileStatus(isA(Path.class));\r\n    doReturn(localLogDirPaths).when(dirsHandler).getLogDirsForCleanup();\r\n    logHandler.handle(new LogHandlerAppStartedEvent(appId, user, null, appAcls));\r\n    Mockito.doThrow(new FileNotFoundException()).when(spylfs).getFileStatus(eq(localAppLogDirPaths[0]));\r\n    doReturn(fs).when(spylfs).getFileStatus(eq(localAppLogDirPaths[1]));\r\n    Mockito.doThrow(new AccessControlException()).when(spylfs).getFileStatus(eq(localAppLogDirPaths[2]));\r\n    doReturn(fs).when(spylfs).getFileStatus(eq(localAppLogDirPaths[3]));\r\n    Mockito.doThrow(new IOException()).when(spylfs).getFileStatus(eq(localAppLogDirPaths[4]));\r\n    Mockito.doThrow(new UnsupportedFileSystemException(\"test\")).when(spylfs).getFileStatus(eq(localAppLogDirPaths[5]));\r\n    doReturn(fs).when(spylfs).getFileStatus(eq(localAppLogDirPaths[6]));\r\n    logHandler.handle(new LogHandlerAppFinishedEvent(appId));\r\n    testDeletionServiceCall(mockDelService, user, 5000, localAppLogDirPaths[1], localAppLogDirPaths[3], localAppLogDirPaths[6]);\r\n    return;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\loghandler",
  "methodName" : "testDeletionServiceCall",
  "errType" : [ "WantedButNotInvoked", "InterruptedException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testDeletionServiceCall(DeletionService delService, String user, long timeout, Path... matchPaths)\n{\r\n    long verifyStartTime = System.currentTimeMillis();\r\n    WantedButNotInvoked notInvokedException = null;\r\n    boolean matched = false;\r\n    while (!matched && System.currentTimeMillis() < verifyStartTime + timeout) {\r\n        try {\r\n            verify(delService, times(1)).delete(argThat(new FileDeletionMatcher(delService, user, null, Arrays.asList(matchPaths))));\r\n            matched = true;\r\n        } catch (WantedButNotInvoked e) {\r\n            notInvokedException = e;\r\n            try {\r\n                Thread.sleep(50l);\r\n            } catch (InterruptedException i) {\r\n            }\r\n        }\r\n    }\r\n    if (!matched) {\r\n        throw notInvokedException;\r\n    }\r\n    return;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\loghandler",
  "methodName" : "getLocalLogDirFiles",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "File[] getLocalLogDirFiles(String name, int number)\n{\r\n    File[] dirs = new File[number];\r\n    for (int i = 0; i < dirs.length; i++) {\r\n        dirs[i] = new File(\"target\", name + \"-localLogDir\" + i).getAbsoluteFile();\r\n    }\r\n    return dirs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void setup()\n{\r\n    privilegedOperationExecutorMock = mock(PrivilegedOperationExecutor.class);\r\n    cGroupsHandlerMock = mock(CGroupsHandler.class);\r\n    trafficControllerMock = mock(TrafficController.class);\r\n    conf = new YarnConfiguration();\r\n    tmpPath = new StringBuffer(System.getProperty(\"test.build.data\")).append('/').append(\"hadoop.tmp.dir\").toString();\r\n    device = YarnConfiguration.DEFAULT_NM_NETWORK_RESOURCE_INTERFACE;\r\n    containerIdMock = mock(ContainerId.class);\r\n    containerMock = mock(Container.class);\r\n    when(containerIdMock.toString()).thenReturn(TEST_CONTAINER_ID_STR);\r\n    when(containerMock.getContainerId()).thenReturn(containerIdMock);\r\n    conf.setInt(YarnConfiguration.NM_NETWORK_RESOURCE_OUTBOUND_BANDWIDTH_MBIT, ROOT_BANDWIDTH_MBIT);\r\n    conf.setInt(YarnConfiguration.NM_NETWORK_RESOURCE_OUTBOUND_BANDWIDTH_YARN_MBIT, YARN_BANDWIDTH_MBIT);\r\n    conf.set(\"hadoop.tmp.dir\", tmpPath);\r\n    conf.setBoolean(YarnConfiguration.NM_RECOVERY_ENABLED, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testBootstrap",
  "errType" : [ "ResourceHandlerException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testBootstrap()\n{\r\n    TrafficControlBandwidthHandlerImpl handlerImpl = new TrafficControlBandwidthHandlerImpl(privilegedOperationExecutorMock, cGroupsHandlerMock, trafficControllerMock);\r\n    try {\r\n        handlerImpl.bootstrap(conf);\r\n        verify(cGroupsHandlerMock).initializeCGroupController(eq(CGroupsHandler.CGroupController.NET_CLS));\r\n        verifyNoMoreInteractions(cGroupsHandlerMock);\r\n        verify(trafficControllerMock).bootstrap(eq(device), eq(ROOT_BANDWIDTH_MBIT), eq(YARN_BANDWIDTH_MBIT));\r\n        verifyNoMoreInteractions(trafficControllerMock);\r\n    } catch (ResourceHandlerException e) {\r\n        LOG.error(\"Unexpected exception: \" + e);\r\n        Assert.fail(\"Caught unexpected ResourceHandlerException!\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testLifeCycle",
  "errType" : [ "ResourceHandlerException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testLifeCycle()\n{\r\n    TrafficController trafficControllerSpy = spy(new TrafficController(conf, privilegedOperationExecutorMock));\r\n    TrafficControlBandwidthHandlerImpl handlerImpl = new TrafficControlBandwidthHandlerImpl(privilegedOperationExecutorMock, cGroupsHandlerMock, trafficControllerSpy);\r\n    try {\r\n        handlerImpl.bootstrap(conf);\r\n        testPreStart(trafficControllerSpy, handlerImpl);\r\n        testPostComplete(trafficControllerSpy, handlerImpl);\r\n    } catch (ResourceHandlerException e) {\r\n        LOG.error(\"Unexpected exception: \" + e);\r\n        Assert.fail(\"Caught unexpected ResourceHandlerException!\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testPreStart",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testPreStart(TrafficController trafficControllerSpy, TrafficControlBandwidthHandlerImpl handlerImpl) throws ResourceHandlerException\n{\r\n    reset(privilegedOperationExecutorMock);\r\n    doReturn(TEST_CLASSID).when(trafficControllerSpy).getNextClassId();\r\n    doReturn(TEST_CLASSID_STR).when(trafficControllerSpy).getStringForNetClsClassId(TEST_CLASSID);\r\n    when(cGroupsHandlerMock.getPathForCGroupTasks(CGroupsHandler.CGroupController.NET_CLS, TEST_CONTAINER_ID_STR)).thenReturn(TEST_TASKS_FILE);\r\n    List<PrivilegedOperation> ops = handlerImpl.preStart(containerMock);\r\n    verify(cGroupsHandlerMock).createCGroup(eq(CGroupsHandler.CGroupController.NET_CLS), eq(TEST_CONTAINER_ID_STR));\r\n    verify(cGroupsHandlerMock).updateCGroupParam(eq(CGroupsHandler.CGroupController.NET_CLS), eq(TEST_CONTAINER_ID_STR), eq(CGroupsHandler.CGROUP_PARAM_CLASSID), eq(TEST_CLASSID_STR));\r\n    Assert.assertEquals(2, ops.size());\r\n    PrivilegedOperation addPidOp = ops.get(0);\r\n    String expectedAddPidOpArg = PrivilegedOperation.CGROUP_ARG_PREFIX + TEST_TASKS_FILE;\r\n    List<String> addPidOpArgs = addPidOp.getArguments();\r\n    Assert.assertEquals(PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP, addPidOp.getOperationType());\r\n    Assert.assertEquals(1, addPidOpArgs.size());\r\n    Assert.assertEquals(expectedAddPidOpArg, addPidOpArgs.get(0));\r\n    PrivilegedOperation tcModifyOp = ops.get(1);\r\n    List<String> tcModifyOpArgs = tcModifyOp.getArguments();\r\n    Assert.assertEquals(PrivilegedOperation.OperationType.TC_MODIFY_STATE, tcModifyOp.getOperationType());\r\n    Assert.assertEquals(1, tcModifyOpArgs.size());\r\n    Assert.assertTrue(new File(tcModifyOpArgs.get(0)).exists());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testPostComplete",
  "errType" : [ "PrivilegedOperationException" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testPostComplete(TrafficController trafficControllerSpy, TrafficControlBandwidthHandlerImpl handlerImpl) throws ResourceHandlerException\n{\r\n    reset(privilegedOperationExecutorMock);\r\n    List<PrivilegedOperation> ops = handlerImpl.postComplete(containerIdMock);\r\n    verify(cGroupsHandlerMock).deleteCGroup(eq(CGroupsHandler.CGroupController.NET_CLS), eq(TEST_CONTAINER_ID_STR));\r\n    try {\r\n        ArgumentCaptor<PrivilegedOperation> opCaptor = ArgumentCaptor.forClass(PrivilegedOperation.class);\r\n        verify(privilegedOperationExecutorMock).executePrivilegedOperation(opCaptor.capture(), eq(false));\r\n        List<String> args = opCaptor.getValue().getArguments();\r\n        Assert.assertEquals(PrivilegedOperation.OperationType.TC_MODIFY_STATE, opCaptor.getValue().getOperationType());\r\n        Assert.assertEquals(1, args.size());\r\n        Assert.assertTrue(new File(args.get(0)).exists());\r\n        verify(trafficControllerSpy).releaseClassId(TEST_CLASSID);\r\n    } catch (PrivilegedOperationException e) {\r\n        LOG.error(\"Caught exception: \" + e);\r\n        Assert.fail(\"Unexpected PrivilegedOperationException from mock!\");\r\n    }\r\n    Assert.assertNull(ops);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "teardown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void teardown()\n{\r\n    FileUtil.fullyDelete(new File(tmpPath));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setup()\n{\r\n    dockerStopCommand = new DockerStopCommand(CONTAINER_NAME);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testGetCommandOption",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetCommandOption()\n{\r\n    assertEquals(\"stop\", dockerStopCommand.getCommandOption());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testSetGracePeriod",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testSetGracePeriod() throws Exception\n{\r\n    dockerStopCommand.setGracePeriod(GRACE_PERIOD);\r\n    assertEquals(\"stop\", StringUtils.join(\",\", dockerStopCommand.getDockerCommandWithArguments().get(\"docker-command\")));\r\n    assertEquals(\"foo\", StringUtils.join(\",\", dockerStopCommand.getDockerCommandWithArguments().get(\"name\")));\r\n    assertEquals(\"10\", StringUtils.join(\",\", dockerStopCommand.getDockerCommandWithArguments().get(\"time\")));\r\n    assertEquals(3, dockerStopCommand.getDockerCommandWithArguments().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testRelaunchContextWithoutHTTPS",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testRelaunchContextWithoutHTTPS() throws Exception\n{\r\n    testRelaunchContext(false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testRelaunchContextWithHTTPS",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testRelaunchContextWithHTTPS() throws Exception\n{\r\n    testRelaunchContext(true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testRelaunchContext",
  "errType" : null,
  "containingMethodsNum" : 46,
  "sourceCodeText" : "void testRelaunchContext(boolean https) throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    Context mockContext = mock(Context.class);\r\n    doReturn(new NMNullStateStoreService()).when(mockContext).getNMStateStore();\r\n    ApplicationId appId = ApplicationId.newInstance(1, 1);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId cid = ContainerId.newContainerId(appAttemptId, 1);\r\n    Application mockApp = mock(Application.class);\r\n    doReturn(appId).when(mockApp).getAppId();\r\n    Container mockContainer = mock(Container.class);\r\n    doReturn(\"somebody\").when(mockContainer).getUser();\r\n    doReturn(cid).when(mockContainer).getContainerId();\r\n    doReturn(\"/foo\").when(mockContainer).getWorkDir();\r\n    doReturn(\"/bar\").when(mockContainer).getLogDir();\r\n    Credentials mockCredentials = mock(Credentials.class);\r\n    when(mockContainer.getCredentials()).thenReturn(mockCredentials);\r\n    if (https) {\r\n        when(mockCredentials.getSecretKey(AMSecretKeys.YARN_APPLICATION_AM_KEYSTORE)).thenReturn(\"keystore\".getBytes());\r\n        when(mockCredentials.getSecretKey(AMSecretKeys.YARN_APPLICATION_AM_TRUSTSTORE)).thenReturn(\"truststore\".getBytes());\r\n    }\r\n    LocalDirsHandlerService mockDirsHandler = mock(LocalDirsHandlerService.class);\r\n    doReturn(true).when(mockDirsHandler).isGoodLocalDir(any(String.class));\r\n    doReturn(true).when(mockDirsHandler).isGoodLogDir(anyString());\r\n    doReturn(true).when(mockDirsHandler).areDisksHealthy();\r\n    doReturn(new Path(\"/some/file\")).when(mockDirsHandler).getLocalPathForRead(anyString());\r\n    Dispatcher dispatcher = new InlineDispatcher();\r\n    ContainerExecutor mockExecutor = mock(ContainerExecutor.class);\r\n    ContainerRelaunch cr = new ContainerRelaunch(mockContext, conf, dispatcher, mockExecutor, mockApp, mockContainer, mockDirsHandler, null);\r\n    int result = cr.call();\r\n    assertEquals(\"relaunch failed\", 0, result);\r\n    ArgumentCaptor<ContainerStartContext> captor = ArgumentCaptor.forClass(ContainerStartContext.class);\r\n    verify(mockExecutor).relaunchContainer(captor.capture());\r\n    ContainerStartContext csc = captor.getValue();\r\n    assertNotNull(\"app ID null\", csc.getAppId());\r\n    assertNotNull(\"container null\", csc.getContainer());\r\n    assertNotNull(\"container local dirs null\", csc.getContainerLocalDirs());\r\n    assertNotNull(\"container log dirs null\", csc.getContainerLogDirs());\r\n    assertNotNull(\"work dir null\", csc.getContainerWorkDir());\r\n    assertNotNull(\"filecache dirs null\", csc.getFilecacheDirs());\r\n    assertNotNull(\"local dirs null\", csc.getLocalDirs());\r\n    assertNotNull(\"localized resources null\", csc.getLocalizedResources());\r\n    assertNotNull(\"log dirs null\", csc.getLogDirs());\r\n    assertNotNull(\"script path null\", csc.getNmPrivateContainerScriptPath());\r\n    assertNotNull(\"tokens path null\", csc.getNmPrivateTokensPath());\r\n    if (https) {\r\n        assertNotNull(\"keystore path null\", csc.getNmPrivateKeystorePath());\r\n        assertNotNull(\"truststore path null\", csc.getNmPrivateTruststorePath());\r\n    } else {\r\n        assertNull(\"keystore path not null\", csc.getNmPrivateKeystorePath());\r\n        assertNull(\"truststore path not null\", csc.getNmPrivateTruststorePath());\r\n    }\r\n    assertNotNull(\"user null\", csc.getUser());\r\n    assertNotNull(\"user local dirs null\", csc.getUserLocalDirs());\r\n    assertNotNull(\"user filecache dirs null\", csc.getUserFilecacheDirs());\r\n    assertNotNull(\"application local dirs null\", csc.getApplicationLocalDirs());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createNMConfig",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnConfiguration createNMConfig() throws IOException\n{\r\n    return createNMConfig(ServerSocketUtil.getPort(49170, 10));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createNMConfig",
  "errType" : [ "UnknownHostException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "YarnConfiguration createNMConfig(int port) throws IOException\n{\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    String localhostAddress = null;\r\n    try {\r\n        localhostAddress = InetAddress.getByName(\"localhost\").getCanonicalHostName();\r\n    } catch (UnknownHostException e) {\r\n        Assert.fail(\"Unable to get localhost address: \" + e.getMessage());\r\n    }\r\n    conf.setInt(YarnConfiguration.NM_PMEM_MB, 5 * 1024);\r\n    conf.set(YarnConfiguration.NM_ADDRESS, localhostAddress + \":\" + port);\r\n    conf.set(YarnConfiguration.NM_LOCALIZER_ADDRESS, localhostAddress + \":\" + ServerSocketUtil.getPort(49160, 10));\r\n    conf.set(YarnConfiguration.NM_LOG_DIRS, logsDir.getAbsolutePath());\r\n    conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR, remoteLogsDir.getAbsolutePath());\r\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, nmLocalDir.getAbsolutePath());\r\n    conf.setLong(YarnConfiguration.NM_LOG_RETAIN_SECONDS, 1);\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setUp() throws IOException\n{\r\n    nmLocalDir.mkdirs();\r\n    tmpDir.mkdirs();\r\n    logsDir.mkdirs();\r\n    remoteLogsDir.mkdirs();\r\n    conf = createNMConfig();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "test",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void test()\n{\r\n    testPbServerFactory();\r\n    testPbClientFactory();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testPbServerFactory",
  "errType" : [ "YarnRuntimeException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testPbServerFactory()\n{\r\n    InetSocketAddress addr = new InetSocketAddress(0);\r\n    Configuration conf = new Configuration();\r\n    LocalizationProtocol instance = new LocalizationProtocolTestImpl();\r\n    Server server = null;\r\n    try {\r\n        server = RpcServerFactoryPBImpl.get().getServer(LocalizationProtocol.class, instance, addr, conf, null, 1);\r\n        server.start();\r\n    } catch (YarnRuntimeException e) {\r\n        e.printStackTrace();\r\n        Assert.fail(\"Failed to create server\");\r\n    } finally {\r\n        if (server != null) {\r\n            server.stop();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testPbClientFactory",
  "errType" : [ "YarnRuntimeException", "YarnRuntimeException" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testPbClientFactory()\n{\r\n    InetSocketAddress addr = new InetSocketAddress(0);\r\n    System.err.println(addr.getHostName() + addr.getPort());\r\n    Configuration conf = new Configuration();\r\n    LocalizationProtocol instance = new LocalizationProtocolTestImpl();\r\n    Server server = null;\r\n    try {\r\n        server = RpcServerFactoryPBImpl.get().getServer(LocalizationProtocol.class, instance, addr, conf, null, 1);\r\n        server.start();\r\n        System.err.println(server.getListenerAddress());\r\n        System.err.println(NetUtils.getConnectAddress(server));\r\n        try {\r\n            LocalizationProtocol client = (LocalizationProtocol) RpcClientFactoryPBImpl.get().getClient(LocalizationProtocol.class, 1, NetUtils.getConnectAddress(server), conf);\r\n            Assert.assertNotNull(client);\r\n        } catch (YarnRuntimeException e) {\r\n            e.printStackTrace();\r\n            Assert.fail(\"Failed to create client\");\r\n        }\r\n    } catch (YarnRuntimeException e) {\r\n        e.printStackTrace();\r\n        Assert.fail(\"Failed to create server\");\r\n    } finally {\r\n        server.stop();\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "updateProcessTree",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void updateProcessTree()\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getProcessTreeDump",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getProcessTreeDump()\n{\r\n    return \"\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getCumulativeCpuTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getCumulativeCpuTime()\n{\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "checkPidPgrpidForMatch",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean checkPidPgrpidForMatch()\n{\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getRssMemorySize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getRssMemorySize(int olderThanAge)\n{\r\n    long rssMemory = this.rssMemorySize;\r\n    if (rssMemory == memorySize) {\r\n        this.rssMemorySize = ResourceCalculatorProcessTree.UNAVAILABLE;\r\n    }\r\n    if (rssMemory == ResourceCalculatorProcessTree.UNAVAILABLE) {\r\n        this.rssMemorySize = 2 * memorySize;\r\n    }\r\n    return rssMemory;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getVirtualMemorySize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getVirtualMemorySize(int olderThanAge)\n{\r\n    long virtualMemory = this.virtualMemorySize;\r\n    if (virtualMemory == ResourceCalculatorProcessTree.UNAVAILABLE) {\r\n        this.virtualMemorySize = 3 * memorySize;\r\n    }\r\n    return virtualMemory;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getCpuUsagePercent",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "float getCpuUsagePercent()\n{\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "testNullPath",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testNullPath()\n{\r\n    String pid = null;\r\n    try {\r\n        pid = ProcessIdFileReader.getProcessId(null);\r\n        fail(\"Expected an error to be thrown for null path\");\r\n    } catch (Exception e) {\r\n    }\r\n    assert (pid == null);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "testSimpleGet",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testSimpleGet() throws IOException\n{\r\n    String rootDir = new File(System.getProperty(\"test.build.data\", \"/tmp\")).getAbsolutePath();\r\n    File testFile = null;\r\n    String expectedProcessId = Shell.WINDOWS ? \"container_1353742680940_0002_01_000001\" : \"56789\";\r\n    try {\r\n        testFile = new File(rootDir, \"temp.txt\");\r\n        PrintWriter fileWriter = new PrintWriter(testFile);\r\n        fileWriter.println(expectedProcessId);\r\n        fileWriter.close();\r\n        String processId = null;\r\n        processId = ProcessIdFileReader.getProcessId(new Path(rootDir + Path.SEPARATOR + \"temp.txt\"));\r\n        Assert.assertEquals(expectedProcessId, processId);\r\n    } finally {\r\n        if (testFile != null && testFile.exists()) {\r\n            testFile.delete();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "testComplexGet",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testComplexGet() throws IOException\n{\r\n    String rootDir = new File(System.getProperty(\"test.build.data\", \"/tmp\")).getAbsolutePath();\r\n    File testFile = null;\r\n    String processIdInFile = Shell.WINDOWS ? \" container_1353742680940_0002_01_000001 \" : \" 23 \";\r\n    String expectedProcessId = processIdInFile.trim();\r\n    try {\r\n        testFile = new File(rootDir, \"temp.txt\");\r\n        PrintWriter fileWriter = new PrintWriter(testFile);\r\n        fileWriter.println(\"   \");\r\n        fileWriter.println(\"\");\r\n        fileWriter.println(\"abc\");\r\n        fileWriter.println(\"-123\");\r\n        fileWriter.println(\"-123 \");\r\n        fileWriter.println(processIdInFile);\r\n        fileWriter.println(\"6236\");\r\n        fileWriter.close();\r\n        String processId = null;\r\n        processId = ProcessIdFileReader.getProcessId(new Path(rootDir + Path.SEPARATOR + \"temp.txt\"));\r\n        Assert.assertEquals(expectedProcessId, processId);\r\n    } finally {\r\n        if (testFile != null && testFile.exists()) {\r\n            testFile.delete();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "deleteMockParamFile",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void deleteMockParamFile()\n{\r\n    if (mockParamFile.exists()) {\r\n        mockParamFile.delete();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "readMockParams",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "List<String> readMockParams() throws IOException\n{\r\n    LinkedList<String> ret = new LinkedList<String>();\r\n    LineNumberReader reader = new LineNumberReader(new FileReader(mockParamFile));\r\n    String line;\r\n    while ((line = reader.readLine()) != null) {\r\n        ret.add(line);\r\n    }\r\n    reader.close();\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "setupMockExecutor",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void setupMockExecutor(String executorName, Configuration conf) throws IOException, URISyntaxException\n{\r\n    URI executorPath = getClass().getClassLoader().getResource(executorName).toURI();\r\n    Files.copy(Paths.get(executorPath), Paths.get(tmpMockExecutor), REPLACE_EXISTING);\r\n    File executor = new File(tmpMockExecutor);\r\n    if (!FileUtil.canExecute(executor)) {\r\n        FileUtil.setExecutable(executor, true);\r\n    }\r\n    String executorAbsolutePath = executor.getAbsolutePath();\r\n    conf.set(YarnConfiguration.NM_LINUX_CONTAINER_EXECUTOR_PATH, executorAbsolutePath);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void setup() throws IOException, ContainerExecutionException, URISyntaxException\n{\r\n    assumeNotWindows();\r\n    tmpMockExecutor = System.getProperty(\"test.build.data\") + \"/tmp-mock-container-executor\";\r\n    Configuration conf = new YarnConfiguration();\r\n    LinuxContainerRuntime linuxContainerRuntime;\r\n    LinuxContainerRuntime mockLinuxContainerRuntime;\r\n    conf.set(YarnConfiguration.NM_LOG_DIRS, \"src/test/resources\");\r\n    setupMockExecutor(MOCK_EXECUTOR, conf);\r\n    linuxContainerRuntime = new DefaultLinuxContainerRuntime(PrivilegedOperationExecutor.getInstance(conf));\r\n    mockPrivilegedExec = Mockito.mock(PrivilegedOperationExecutor.class);\r\n    mockLinuxContainerRuntime = new DefaultLinuxContainerRuntime(mockPrivilegedExec);\r\n    dirsHandler = new LocalDirsHandlerService();\r\n    dirsHandler.init(conf);\r\n    linuxContainerRuntime.initialize(conf, null);\r\n    mockExec = new LinuxContainerExecutor(linuxContainerRuntime);\r\n    mockExec.setConf(conf);\r\n    mockExecMockRuntime = new LinuxContainerExecutor(mockLinuxContainerRuntime);\r\n    mockExecMockRuntime.setConf(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown()\n{\r\n    deleteMockParamFile();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testContainerLaunchWithoutHTTPS",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testContainerLaunchWithoutHTTPS() throws IOException, ConfigurationException\n{\r\n    testContainerLaunch(false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testContainerLaunchWithHTTPS",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testContainerLaunchWithHTTPS() throws IOException, ConfigurationException\n{\r\n    testContainerLaunch(true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testContainerLaunch",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testContainerLaunch(boolean https) throws IOException, ConfigurationException\n{\r\n    String appSubmitter = \"nobody\";\r\n    String cmd = String.valueOf(PrivilegedOperation.RunAsUserCommand.LAUNCH_CONTAINER.getValue());\r\n    String appId = \"APP_ID\";\r\n    String containerId = \"CONTAINER_ID\";\r\n    Container container = mock(Container.class);\r\n    ContainerId cId = mock(ContainerId.class);\r\n    ContainerLaunchContext context = mock(ContainerLaunchContext.class);\r\n    HashMap<String, String> env = new HashMap<String, String>();\r\n    when(container.getContainerId()).thenReturn(cId);\r\n    when(container.getLaunchContext()).thenReturn(context);\r\n    when(cId.toString()).thenReturn(containerId);\r\n    when(context.getEnvironment()).thenReturn(env);\r\n    Path scriptPath = new Path(\"file:///bin/echo\");\r\n    Path tokensPath = new Path(\"file:///dev/null\");\r\n    Path keystorePath = new Path(\"file:///dev/null\");\r\n    Path truststorePath = new Path(\"file:///dev/null\");\r\n    Path workDir = new Path(\"/tmp\");\r\n    Path pidFile = new Path(workDir, \"pid.txt\");\r\n    mockExec.activateContainer(cId, pidFile);\r\n    ContainerStartContext.Builder ctxBuilder = new ContainerStartContext.Builder().setContainer(container).setNmPrivateContainerScriptPath(scriptPath).setNmPrivateTokensPath(tokensPath).setUser(appSubmitter).setAppId(appId).setContainerWorkDir(workDir).setLocalDirs(dirsHandler.getLocalDirs()).setLogDirs(dirsHandler.getLogDirs()).setFilecacheDirs(new ArrayList<>()).setUserLocalDirs(new ArrayList<>()).setContainerLocalDirs(new ArrayList<>()).setContainerLogDirs(new ArrayList<>()).setUserFilecacheDirs(new ArrayList<>()).setApplicationLocalDirs(new ArrayList<>());\r\n    if (https) {\r\n        ctxBuilder.setNmPrivateKeystorePath(keystorePath);\r\n        ctxBuilder.setNmPrivateTruststorePath(truststorePath);\r\n    }\r\n    int ret = mockExec.launchContainer(ctxBuilder.build());\r\n    assertEquals(0, ret);\r\n    if (https) {\r\n        assertEquals(Arrays.asList(YarnConfiguration.DEFAULT_NM_NONSECURE_MODE_LOCAL_USER, appSubmitter, cmd, appId, containerId, workDir.toString(), scriptPath.toUri().getPath(), tokensPath.toUri().getPath(), \"--https\", keystorePath.toUri().getPath(), truststorePath.toUri().getPath(), pidFile.toString(), StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR, dirsHandler.getLocalDirs()), StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR, dirsHandler.getLogDirs()), \"cgroups=none\"), readMockParams());\r\n    } else {\r\n        assertEquals(Arrays.asList(YarnConfiguration.DEFAULT_NM_NONSECURE_MODE_LOCAL_USER, appSubmitter, cmd, appId, containerId, workDir.toString(), scriptPath.toUri().getPath(), tokensPath.toUri().getPath(), \"--http\", pidFile.toString(), StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR, dirsHandler.getLocalDirs()), StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR, dirsHandler.getLogDirs()), \"cgroups=none\"), readMockParams());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testContainerLaunchWithPriority",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testContainerLaunchWithPriority() throws IOException, ConfigurationException, URISyntaxException\n{\r\n    Configuration conf = new Configuration();\r\n    setupMockExecutor(MOCK_EXECUTOR, conf);\r\n    conf.setInt(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY, 2);\r\n    mockExec.setConf(conf);\r\n    List<String> command = new ArrayList<String>();\r\n    mockExec.addSchedPriorityCommand(command);\r\n    assertEquals(\"first should be nice\", \"nice\", command.get(0));\r\n    assertEquals(\"second should be -n\", \"-n\", command.get(1));\r\n    assertEquals(\"third should be the priority\", Integer.toString(2), command.get(2));\r\n    testContainerLaunchWithoutHTTPS();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testLaunchCommandWithoutPriority",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testLaunchCommandWithoutPriority() throws IOException\n{\r\n    List<String> command = new ArrayList<String>();\r\n    mockExec.addSchedPriorityCommand(command);\r\n    assertEquals(\"addSchedPriority should be empty\", 0, command.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testStartLocalizer",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 26,
  "sourceCodeText" : "void testStartLocalizer() throws IOException\n{\r\n    InetSocketAddress address = InetSocketAddress.createUnresolved(\"localhost\", 8040);\r\n    Path nmPrivateCTokensPath = new Path(\"file:///bin/nmPrivateCTokensPath\");\r\n    try {\r\n        mockExec.startLocalizer(new LocalizerStartContext.Builder().setNmPrivateContainerTokens(nmPrivateCTokensPath).setNmAddr(address).setUser(\"test\").setAppId(\"application_0\").setLocId(\"12345\").setDirsHandler(dirsHandler).build());\r\n        List<String> result = readMockParams();\r\n        assertThat(result).hasSize(26);\r\n        assertThat(result.get(0)).isEqualTo(YarnConfiguration.DEFAULT_NM_NONSECURE_MODE_LOCAL_USER);\r\n        assertThat(result.get(1)).isEqualTo(\"test\");\r\n        assertThat(result.get(2)).isEqualTo(\"0\");\r\n        assertThat(result.get(3)).isEqualTo(\"application_0\");\r\n        assertThat(result.get(4)).isEqualTo(\"12345\");\r\n        assertThat(result.get(5)).isEqualTo(\"/bin/nmPrivateCTokensPath\");\r\n        assertThat(result.get(9)).isEqualTo(\"-classpath\");\r\n        assertThat(result.get(12)).isEqualTo(\"-Xmx256m\");\r\n        assertThat(result.get(13)).isEqualTo(\"-Dlog4j.configuration=container-log4j.properties\");\r\n        assertThat(result.get(14)).isEqualTo(String.format(\"-Dyarn.app.container.log.dir=%s/application_0/12345\", mockExec.getConf().get(YarnConfiguration.NM_LOG_DIRS)));\r\n        assertThat(result.get(15)).isEqualTo(\"-Dyarn.app.container.log.filesize=0\");\r\n        assertThat(result.get(16)).isEqualTo(\"-Dhadoop.root.logger=INFO,CLA\");\r\n        assertThat(result.get(17)).isEqualTo(\"-Dhadoop.root.logfile=container-localizer-syslog\");\r\n        assertThat(result.get(18)).isEqualTo(\"org.apache.hadoop.yarn.server.\" + \"nodemanager.containermanager.localizer.ContainerLocalizer\");\r\n        assertThat(result.get(19)).isEqualTo(\"test\");\r\n        assertThat(result.get(20)).isEqualTo(\"application_0\");\r\n        assertThat(result.get(21)).isEqualTo(\"12345\");\r\n        assertThat(result.get(22)).isEqualTo(\"localhost\");\r\n        assertThat(result.get(23)).isEqualTo(\"8040\");\r\n        assertThat(result.get(24)).isEqualTo(\"nmPrivateCTokensPath\");\r\n    } catch (InterruptedException e) {\r\n        LOG.error(\"Error:\" + e.getMessage(), e);\r\n        Assert.fail();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testContainerLaunchError",
  "errType" : [ "ConfigurationException" ],
  "containingMethodsNum" : 25,
  "sourceCodeText" : "void testContainerLaunchError() throws IOException, ContainerExecutionException, URISyntaxException\n{\r\n    final String[] expecetedMessage = { \"badcommand\", \"Exit code: 24\" };\r\n    final String[] executor = { MOCK_EXECUTOR_WITH_ERROR, MOCK_EXECUTOR_WITH_CONFIG_ERROR };\r\n    for (int i = 0; i < expecetedMessage.length; ++i) {\r\n        final int j = i;\r\n        Configuration conf = new Configuration();\r\n        setupMockExecutor(executor[j], conf);\r\n        conf.set(YarnConfiguration.NM_LOCAL_DIRS, \"file:///bin/echo\");\r\n        conf.set(YarnConfiguration.NM_LOG_DIRS, \"file:///dev/null\");\r\n        LinuxContainerExecutor exec;\r\n        LinuxContainerRuntime linuxContainerRuntime = new DefaultLinuxContainerRuntime(PrivilegedOperationExecutor.getInstance(conf));\r\n        linuxContainerRuntime.initialize(conf, null);\r\n        exec = new LinuxContainerExecutor(linuxContainerRuntime);\r\n        mockExec = spy(exec);\r\n        doAnswer(new Answer() {\r\n\r\n            @Override\r\n            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {\r\n                String diagnostics = (String) invocationOnMock.getArguments()[0];\r\n                assertTrue(\"Invalid Diagnostics message: \" + diagnostics, diagnostics.contains(expecetedMessage[j]));\r\n                return null;\r\n            }\r\n        }).when(mockExec).logOutput(any(String.class));\r\n        dirsHandler = new LocalDirsHandlerService();\r\n        dirsHandler.init(conf);\r\n        mockExec.setConf(conf);\r\n        String appSubmitter = \"nobody\";\r\n        String cmd = String.valueOf(PrivilegedOperation.RunAsUserCommand.LAUNCH_CONTAINER.getValue());\r\n        String appId = \"APP_ID\";\r\n        String containerId = \"CONTAINER_ID\";\r\n        Container container = mock(Container.class);\r\n        ContainerId cId = mock(ContainerId.class);\r\n        ContainerLaunchContext context = mock(ContainerLaunchContext.class);\r\n        HashMap<String, String> env = new HashMap<String, String>();\r\n        when(container.getContainerId()).thenReturn(cId);\r\n        when(container.getLaunchContext()).thenReturn(context);\r\n        doAnswer(new Answer() {\r\n\r\n            @Override\r\n            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {\r\n                ContainerDiagnosticsUpdateEvent event = (ContainerDiagnosticsUpdateEvent) invocationOnMock.getArguments()[0];\r\n                assertTrue(\"Invalid Diagnostics message: \" + event.getDiagnosticsUpdate(), event.getDiagnosticsUpdate().contains(expecetedMessage[j]));\r\n                return null;\r\n            }\r\n        }).when(container).handle(any(ContainerDiagnosticsUpdateEvent.class));\r\n        when(cId.toString()).thenReturn(containerId);\r\n        when(context.getEnvironment()).thenReturn(env);\r\n        Path scriptPath = new Path(\"file:///bin/echo\");\r\n        Path tokensPath = new Path(\"file:///dev/null\");\r\n        Path workDir = new Path(\"/tmp\");\r\n        Path pidFile = new Path(workDir, \"pid.txt\");\r\n        mockExec.activateContainer(cId, pidFile);\r\n        try {\r\n            int ret = mockExec.launchContainer(new ContainerStartContext.Builder().setContainer(container).setNmPrivateContainerScriptPath(scriptPath).setNmPrivateTokensPath(tokensPath).setUser(appSubmitter).setAppId(appId).setContainerWorkDir(workDir).setLocalDirs(dirsHandler.getLocalDirs()).setLogDirs(dirsHandler.getLogDirs()).setFilecacheDirs(new ArrayList<>()).setUserLocalDirs(new ArrayList<>()).setContainerLocalDirs(new ArrayList<>()).setContainerLogDirs(new ArrayList<>()).setUserFilecacheDirs(new ArrayList<>()).setApplicationLocalDirs(new ArrayList<>()).build());\r\n            Assert.assertNotSame(0, ret);\r\n            assertEquals(Arrays.asList(YarnConfiguration.DEFAULT_NM_NONSECURE_MODE_LOCAL_USER, appSubmitter, cmd, appId, containerId, workDir.toString(), \"/bin/echo\", \"/dev/null\", \"--http\", pidFile.toString(), StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR, dirsHandler.getLocalDirs()), StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR, dirsHandler.getLogDirs()), \"cgroups=none\"), readMockParams());\r\n            assertNotEquals(\"Expected YarnRuntimeException\", MOCK_EXECUTOR_WITH_CONFIG_ERROR, executor[i]);\r\n        } catch (ConfigurationException ex) {\r\n            assertEquals(MOCK_EXECUTOR_WITH_CONFIG_ERROR, executor[i]);\r\n            Assert.assertEquals(\"Linux Container Executor reached unrecoverable \" + \"exception\", ex.getMessage());\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testInit",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testInit() throws Exception\n{\r\n    mockExec.init(mock(Context.class));\r\n    assertEquals(Arrays.asList(\"--checksetup\"), readMockParams());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testContainerKill",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testContainerKill() throws IOException\n{\r\n    String appSubmitter = \"nobody\";\r\n    String cmd = String.valueOf(PrivilegedOperation.RunAsUserCommand.SIGNAL_CONTAINER.getValue());\r\n    ContainerExecutor.Signal signal = ContainerExecutor.Signal.QUIT;\r\n    String sigVal = String.valueOf(signal.getValue());\r\n    Container container = mock(Container.class);\r\n    ContainerId cId = mock(ContainerId.class);\r\n    ContainerLaunchContext context = mock(ContainerLaunchContext.class);\r\n    when(container.getContainerId()).thenReturn(cId);\r\n    when(container.getLaunchContext()).thenReturn(context);\r\n    mockExec.signalContainer(new ContainerSignalContext.Builder().setContainer(container).setUser(appSubmitter).setPid(\"1000\").setSignal(signal).build());\r\n    assertEquals(Arrays.asList(YarnConfiguration.DEFAULT_NM_NONSECURE_MODE_LOCAL_USER, appSubmitter, cmd, \"1000\", sigVal), readMockParams());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testDeleteAsUser",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testDeleteAsUser() throws IOException, URISyntaxException\n{\r\n    String appSubmitter = \"nobody\";\r\n    String cmd = String.valueOf(PrivilegedOperation.RunAsUserCommand.DELETE_AS_USER.getValue());\r\n    Path dir = new Path(\"/tmp/testdir\");\r\n    Path testFile = new Path(\"testfile\");\r\n    Path baseDir0 = new Path(\"/grid/0/BaseDir\");\r\n    Path baseDir1 = new Path(\"/grid/1/BaseDir\");\r\n    mockExec.deleteAsUser(new DeletionAsUserContext.Builder().setUser(appSubmitter).setSubDir(dir).build());\r\n    assertEquals(Arrays.asList(YarnConfiguration.DEFAULT_NM_NONSECURE_MODE_LOCAL_USER, appSubmitter, cmd, \"/tmp/testdir\"), readMockParams());\r\n    mockExec.deleteAsUser(new DeletionAsUserContext.Builder().setUser(appSubmitter).build());\r\n    assertEquals(Arrays.asList(YarnConfiguration.DEFAULT_NM_NONSECURE_MODE_LOCAL_USER, appSubmitter, cmd, \"\"), readMockParams());\r\n    mockExec.deleteAsUser(new DeletionAsUserContext.Builder().setUser(appSubmitter).setSubDir(testFile).setBasedirs(baseDir0, baseDir1).build());\r\n    assertEquals(Arrays.asList(YarnConfiguration.DEFAULT_NM_NONSECURE_MODE_LOCAL_USER, appSubmitter, cmd, testFile.toString(), baseDir0.toString(), baseDir1.toString()), readMockParams());\r\n    mockExec.deleteAsUser(new DeletionAsUserContext.Builder().setUser(appSubmitter).setBasedirs(baseDir0, baseDir1).build());\r\n    assertEquals(Arrays.asList(YarnConfiguration.DEFAULT_NM_NONSECURE_MODE_LOCAL_USER, appSubmitter, cmd, \"\", baseDir0.toString(), baseDir1.toString()), readMockParams());\r\n    ;\r\n    Configuration conf = new Configuration();\r\n    setupMockExecutor(MOCK_EXECUTOR, conf);\r\n    mockExec.setConf(conf);\r\n    mockExec.deleteAsUser(new DeletionAsUserContext.Builder().setUser(appSubmitter).setSubDir(dir).build());\r\n    assertEquals(Arrays.asList(YarnConfiguration.DEFAULT_NM_NONSECURE_MODE_LOCAL_USER, appSubmitter, cmd, \"/tmp/testdir\"), readMockParams());\r\n    mockExec.deleteAsUser(new DeletionAsUserContext.Builder().setUser(appSubmitter).build());\r\n    assertEquals(Arrays.asList(YarnConfiguration.DEFAULT_NM_NONSECURE_MODE_LOCAL_USER, appSubmitter, cmd, \"\"), readMockParams());\r\n    mockExec.deleteAsUser(new DeletionAsUserContext.Builder().setUser(appSubmitter).setSubDir(testFile).setBasedirs(baseDir0, baseDir1).build());\r\n    assertEquals(Arrays.asList(YarnConfiguration.DEFAULT_NM_NONSECURE_MODE_LOCAL_USER, appSubmitter, cmd, testFile.toString(), baseDir0.toString(), baseDir1.toString()), readMockParams());\r\n    mockExec.deleteAsUser(new DeletionAsUserContext.Builder().setUser(appSubmitter).setBasedirs(baseDir0, baseDir1).build());\r\n    assertEquals(Arrays.asList(YarnConfiguration.DEFAULT_NM_NONSECURE_MODE_LOCAL_USER, appSubmitter, cmd, \"\", baseDir0.toString(), baseDir1.toString()), readMockParams());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testNoExitCodeFromPrivilegedOperation",
  "errType" : [ "IOException", "IOException" ],
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void testNoExitCodeFromPrivilegedOperation() throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    final PrivilegedOperationExecutor spyPrivilegedExecutor = spy(PrivilegedOperationExecutor.getInstance(conf));\r\n    doThrow(new PrivilegedOperationException(\"interrupted\")).when(spyPrivilegedExecutor).executePrivilegedOperation(any(), any(PrivilegedOperation.class), any(), any(), anyBoolean(), anyBoolean());\r\n    LinuxContainerRuntime runtime = new DefaultLinuxContainerRuntime(spyPrivilegedExecutor);\r\n    runtime.initialize(conf, null);\r\n    mockExec = new LinuxContainerExecutor(runtime);\r\n    mockExec.setConf(conf);\r\n    LinuxContainerExecutor lce = new LinuxContainerExecutor(runtime) {\r\n\r\n        @Override\r\n        protected PrivilegedOperationExecutor getPrivilegedOperationExecutor() {\r\n            return spyPrivilegedExecutor;\r\n        }\r\n    };\r\n    lce.setConf(conf);\r\n    InetSocketAddress address = InetSocketAddress.createUnresolved(\"localhost\", 8040);\r\n    Path nmPrivateCTokensPath = new Path(\"file:///bin/nmPrivateCTokensPath\");\r\n    LocalDirsHandlerService dirService = new LocalDirsHandlerService();\r\n    dirService.init(conf);\r\n    String appSubmitter = \"nobody\";\r\n    ApplicationId appId = ApplicationId.newInstance(1, 1);\r\n    ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId cid = ContainerId.newContainerId(attemptId, 1);\r\n    HashMap<String, String> env = new HashMap<>();\r\n    Container container = mock(Container.class);\r\n    ContainerLaunchContext context = mock(ContainerLaunchContext.class);\r\n    when(container.getContainerId()).thenReturn(cid);\r\n    when(container.getLaunchContext()).thenReturn(context);\r\n    when(context.getEnvironment()).thenReturn(env);\r\n    Path workDir = new Path(\"/tmp\");\r\n    try {\r\n        lce.startLocalizer(new LocalizerStartContext.Builder().setNmPrivateContainerTokens(nmPrivateCTokensPath).setNmAddr(address).setUser(appSubmitter).setAppId(appId.toString()).setLocId(\"12345\").setDirsHandler(dirService).build());\r\n        Assert.fail(\"startLocalizer should have thrown an exception\");\r\n    } catch (IOException e) {\r\n        assertTrue(\"Unexpected exception \" + e, e.getMessage().contains(\"exitCode\"));\r\n    }\r\n    lce.activateContainer(cid, new Path(workDir, \"pid.txt\"));\r\n    lce.launchContainer(new ContainerStartContext.Builder().setContainer(container).setNmPrivateContainerScriptPath(new Path(\"file:///bin/echo\")).setNmPrivateTokensPath(new Path(\"file:///dev/null\")).setUser(appSubmitter).setAppId(appId.toString()).setContainerWorkDir(workDir).setLocalDirs(dirsHandler.getLocalDirs()).setLogDirs(dirsHandler.getLogDirs()).setFilecacheDirs(new ArrayList<>()).setUserLocalDirs(new ArrayList<>()).setContainerLocalDirs(new ArrayList<>()).setContainerLogDirs(new ArrayList<>()).setUserFilecacheDirs(new ArrayList<>()).setApplicationLocalDirs(new ArrayList<>()).build());\r\n    lce.deleteAsUser(new DeletionAsUserContext.Builder().setUser(appSubmitter).setSubDir(new Path(\"/tmp/testdir\")).build());\r\n    try {\r\n        lce.mountCgroups(new ArrayList<String>(), \"hierarchy\");\r\n        Assert.fail(\"mountCgroups should have thrown an exception\");\r\n    } catch (IOException e) {\r\n        assertTrue(\"Unexpected exception \" + e, e.getMessage().contains(\"exit code\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testContainerLaunchEnvironment",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testContainerLaunchEnvironment() throws IOException, ConfigurationException, PrivilegedOperationException\n{\r\n    String appSubmitter = \"nobody\";\r\n    String appId = \"APP_ID\";\r\n    String containerId = \"CONTAINER_ID\";\r\n    Container container = mock(Container.class);\r\n    ContainerId cId = mock(ContainerId.class);\r\n    ContainerLaunchContext context = mock(ContainerLaunchContext.class);\r\n    HashMap<String, String> env = new HashMap<String, String>();\r\n    env.put(\"FROM_CLIENT\", \"1\");\r\n    when(container.getContainerId()).thenReturn(cId);\r\n    when(container.getLaunchContext()).thenReturn(context);\r\n    when(cId.toString()).thenReturn(containerId);\r\n    when(context.getEnvironment()).thenReturn(env);\r\n    Path scriptPath = new Path(\"file:///bin/echo\");\r\n    Path tokensPath = new Path(\"file:///dev/null\");\r\n    Path workDir = new Path(\"/tmp\");\r\n    Path pidFile = new Path(workDir, \"pid.txt\");\r\n    mockExecMockRuntime.activateContainer(cId, pidFile);\r\n    mockExecMockRuntime.launchContainer(new ContainerStartContext.Builder().setContainer(container).setNmPrivateContainerScriptPath(scriptPath).setNmPrivateTokensPath(tokensPath).setUser(appSubmitter).setAppId(appId).setContainerWorkDir(workDir).setLocalDirs(dirsHandler.getLocalDirs()).setLogDirs(dirsHandler.getLogDirs()).setFilecacheDirs(new ArrayList<>()).setUserLocalDirs(new ArrayList<>()).setContainerLocalDirs(new ArrayList<>()).setContainerLogDirs(new ArrayList<>()).setUserFilecacheDirs(new ArrayList<>()).setApplicationLocalDirs(new ArrayList<>()).build());\r\n    ArgumentCaptor<PrivilegedOperation> opCaptor = ArgumentCaptor.forClass(PrivilegedOperation.class);\r\n    verify(mockPrivilegedExec, times(1)).executePrivilegedOperation(any(), opCaptor.capture(), any(), eq(null), eq(false), eq(false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "cleanUp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void cleanUp() throws IOException\n{\r\n    FileUtils.deleteDirectory(new File(basedir.toUri().getRawPath()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testMain",
  "errType" : null,
  "containingMethodsNum" : 26,
  "sourceCodeText" : "void testMain() throws Exception\n{\r\n    ContainerLocalizerWrapper wrapper = new ContainerLocalizerWrapper();\r\n    ContainerLocalizer localizer = wrapper.setupContainerLocalizerForTest();\r\n    Random random = wrapper.random;\r\n    List<Path> localDirs = wrapper.localDirs;\r\n    Path tokenPath = wrapper.tokenPath;\r\n    LocalizationProtocol nmProxy = wrapper.nmProxy;\r\n    AbstractFileSystem spylfs = wrapper.spylfs;\r\n    mockOutDownloads(localizer);\r\n    List<Path> privCacheList = new ArrayList<Path>();\r\n    List<Path> appCacheList = new ArrayList<Path>();\r\n    for (Path p : localDirs) {\r\n        Path base = new Path(new Path(p, ContainerLocalizer.USERCACHE), appUser);\r\n        Path privcache = new Path(base, ContainerLocalizer.FILECACHE);\r\n        privCacheList.add(privcache);\r\n        Path appDir = new Path(base, new Path(ContainerLocalizer.APPCACHE, appId));\r\n        Path appcache = new Path(appDir, ContainerLocalizer.FILECACHE);\r\n        appCacheList.add(appcache);\r\n    }\r\n    ResourceLocalizationSpec rsrcA = getMockRsrc(random, LocalResourceVisibility.PRIVATE, privCacheList.get(0));\r\n    ResourceLocalizationSpec rsrcB = getMockRsrc(random, LocalResourceVisibility.PRIVATE, privCacheList.get(0));\r\n    ResourceLocalizationSpec rsrcC = getMockRsrc(random, LocalResourceVisibility.APPLICATION, appCacheList.get(0));\r\n    ResourceLocalizationSpec rsrcD = getMockRsrc(random, LocalResourceVisibility.PRIVATE, privCacheList.get(0));\r\n    when(nmProxy.heartbeat(isA(LocalizerStatus.class))).thenReturn(new MockLocalizerHeartbeatResponse(LocalizerAction.LIVE, Collections.singletonList(rsrcA))).thenReturn(new MockLocalizerHeartbeatResponse(LocalizerAction.LIVE, Collections.singletonList(rsrcB))).thenReturn(new MockLocalizerHeartbeatResponse(LocalizerAction.LIVE, Collections.singletonList(rsrcC))).thenReturn(new MockLocalizerHeartbeatResponse(LocalizerAction.LIVE, Collections.singletonList(rsrcD))).thenReturn(new MockLocalizerHeartbeatResponse(LocalizerAction.LIVE, Collections.<ResourceLocalizationSpec>emptyList())).thenReturn(new MockLocalizerHeartbeatResponse(LocalizerAction.DIE, null));\r\n    LocalResource tRsrcA = rsrcA.getResource();\r\n    LocalResource tRsrcB = rsrcB.getResource();\r\n    LocalResource tRsrcC = rsrcC.getResource();\r\n    LocalResource tRsrcD = rsrcD.getResource();\r\n    doReturn(new FakeDownload(rsrcA.getResource().getResource().getFile(), true)).when(localizer).download(isA(Path.class), eq(tRsrcA), isA(UserGroupInformation.class));\r\n    doReturn(new FakeDownload(rsrcB.getResource().getResource().getFile(), true)).when(localizer).download(isA(Path.class), eq(tRsrcB), isA(UserGroupInformation.class));\r\n    doReturn(new FakeDownload(rsrcC.getResource().getResource().getFile(), true)).when(localizer).download(isA(Path.class), eq(tRsrcC), isA(UserGroupInformation.class));\r\n    doReturn(new FakeDownload(rsrcD.getResource().getResource().getFile(), true)).when(localizer).download(isA(Path.class), eq(tRsrcD), isA(UserGroupInformation.class));\r\n    localizer.runLocalization(nmAddr);\r\n    for (Path p : localDirs) {\r\n        Path base = new Path(new Path(p, ContainerLocalizer.USERCACHE), appUser);\r\n        Path privcache = new Path(base, ContainerLocalizer.FILECACHE);\r\n        verify(spylfs).mkdir(eq(privcache), eq(CACHE_DIR_PERM), eq(false));\r\n        Path appDir = new Path(base, new Path(ContainerLocalizer.APPCACHE, appId));\r\n        Path appcache = new Path(appDir, ContainerLocalizer.FILECACHE);\r\n        verify(spylfs).mkdir(eq(appcache), eq(CACHE_DIR_PERM), eq(false));\r\n    }\r\n    verify(spylfs).open(tokenPath);\r\n    verify(nmProxy).heartbeat(argThat(new HBMatches(rsrcA.getResource())));\r\n    verify(nmProxy).heartbeat(argThat(new HBMatches(rsrcB.getResource())));\r\n    verify(nmProxy).heartbeat(argThat(new HBMatches(rsrcC.getResource())));\r\n    verify(nmProxy).heartbeat(argThat(new HBMatches(rsrcD.getResource())));\r\n    verify(nmProxy, never()).heartbeat(argThat(status -> !containerId.equals(status.getLocalizerId())));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testMainFailure",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testMainFailure() throws Exception\n{\r\n    ContainerLocalizerWrapper wrapper = new ContainerLocalizerWrapper();\r\n    ContainerLocalizer localizer = wrapper.setupContainerLocalizerForTest();\r\n    LocalizationProtocol nmProxy = wrapper.nmProxy;\r\n    mockOutDownloads(localizer);\r\n    when(nmProxy.heartbeat(isA(LocalizerStatus.class))).thenThrow(new YarnException(\"Sigh, no token!\"));\r\n    try {\r\n        localizer.runLocalization(nmAddr);\r\n        Assert.fail(\"Localization succeeded unexpectedly!\");\r\n    } catch (IOException e) {\r\n        Assert.assertTrue(e.getMessage().contains(\"Sigh, no token!\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testDiskCheckFailure",
  "errType" : [ "DiskErrorException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testDiskCheckFailure() throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    conf.set(YarnConfiguration.DISK_VALIDATOR, \"read-write\");\r\n    FileContext lfs = FileContext.getLocalFSFileContext(conf);\r\n    Path fileCacheDir = lfs.makeQualified(new Path(basedir, \"filecache\"));\r\n    lfs.mkdir(fileCacheDir, FsPermission.getDefault(), true);\r\n    RecordFactory recordFactory = mock(RecordFactory.class);\r\n    ContainerLocalizer localizer = new ContainerLocalizer(lfs, UserGroupInformation.getCurrentUser().getUserName(), \"application_01\", \"container_01\", String.format(ContainerExecutor.TOKEN_FILE_NAME_FMT, \"container_01\"), new ArrayList<>(), recordFactory) {\r\n\r\n        @Override\r\n        Configuration initConfiguration() {\r\n            return conf;\r\n        }\r\n    };\r\n    LocalResource rsrc = mock(LocalResource.class);\r\n    Path destDirPath = new Path(fileCacheDir, \"11\");\r\n    try {\r\n        localizer.download(destDirPath, rsrc, UserGroupInformation.getCurrentUser());\r\n    } catch (DiskErrorException ex) {\r\n        fail(ex.getCause().toString());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testLocalizerTokenIsGettingRemoved",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testLocalizerTokenIsGettingRemoved() throws Exception\n{\r\n    ContainerLocalizerWrapper wrapper = new ContainerLocalizerWrapper();\r\n    ContainerLocalizer localizer = wrapper.setupContainerLocalizerForTest();\r\n    Path tokenPath = wrapper.tokenPath;\r\n    AbstractFileSystem spylfs = wrapper.spylfs;\r\n    mockOutDownloads(localizer);\r\n    doNothing().when(localizer).localizeFiles(any(LocalizationProtocol.class), any(CompletionService.class), any(UserGroupInformation.class));\r\n    localizer.runLocalization(nmAddr);\r\n    verify(spylfs, times(1)).delete(tokenPath, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testContainerLocalizerClosesFilesystems",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testContainerLocalizerClosesFilesystems() throws Exception\n{\r\n    ContainerLocalizerWrapper wrapper = new ContainerLocalizerWrapper();\r\n    ContainerLocalizer localizer = wrapper.setupContainerLocalizerForTest();\r\n    mockOutDownloads(localizer);\r\n    doNothing().when(localizer).localizeFiles(any(LocalizationProtocol.class), any(CompletionService.class), any(UserGroupInformation.class));\r\n    verify(localizer, never()).closeFileSystems(any(UserGroupInformation.class));\r\n    localizer.runLocalization(nmAddr);\r\n    verify(localizer).closeFileSystems(any(UserGroupInformation.class));\r\n    localizer = wrapper.setupContainerLocalizerForTest();\r\n    doThrow(new YarnRuntimeException(\"Forced Failure\")).when(localizer).localizeFiles(any(LocalizationProtocol.class), any(CompletionService.class), any(UserGroupInformation.class));\r\n    verify(localizer, never()).closeFileSystems(any(UserGroupInformation.class));\r\n    try {\r\n        localizer.runLocalization(nmAddr);\r\n        Assert.fail(\"Localization succeeded unexpectedly!\");\r\n    } catch (IOException e) {\r\n        verify(localizer).closeFileSystems(any(UserGroupInformation.class));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testMultipleLocalizers",
  "errType" : [ "Exception", "Exception" ],
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void testMultipleLocalizers() throws Exception\n{\r\n    FakeContainerLocalizerWrapper testA = new FakeContainerLocalizerWrapper();\r\n    FakeContainerLocalizerWrapper testB = new FakeContainerLocalizerWrapper();\r\n    FakeContainerLocalizer localizerA = testA.init();\r\n    FakeContainerLocalizer localizerB = testB.init();\r\n    Thread threadA = new Thread() {\r\n\r\n        @Override\r\n        public void run() {\r\n            try {\r\n                localizerA.runLocalization(nmAddr);\r\n            } catch (Exception e) {\r\n                LOG.warn(e.toString());\r\n            }\r\n        }\r\n    };\r\n    Thread threadB = new Thread() {\r\n\r\n        @Override\r\n        public void run() {\r\n            try {\r\n                localizerB.runLocalization(nmAddr);\r\n            } catch (Exception e) {\r\n                LOG.warn(e.toString());\r\n            }\r\n        }\r\n    };\r\n    ShellCommandExecutor shexcA = null;\r\n    ShellCommandExecutor shexcB = null;\r\n    try {\r\n        threadA.start();\r\n        threadB.start();\r\n        GenericTestUtils.waitFor(new Supplier<Boolean>() {\r\n\r\n            @Override\r\n            public Boolean get() {\r\n                FakeContainerLocalizer.FakeLongDownload downloader = localizerA.getDownloader();\r\n                return downloader != null && downloader.getShexc() != null && downloader.getShexc().getProcess() != null;\r\n            }\r\n        }, 10, 30000);\r\n        GenericTestUtils.waitFor(new Supplier<Boolean>() {\r\n\r\n            @Override\r\n            public Boolean get() {\r\n                FakeContainerLocalizer.FakeLongDownload downloader = localizerB.getDownloader();\r\n                return downloader != null && downloader.getShexc() != null && downloader.getShexc().getProcess() != null;\r\n            }\r\n        }, 10, 30000);\r\n        shexcA = localizerA.getDownloader().getShexc();\r\n        shexcB = localizerB.getDownloader().getShexc();\r\n        assertTrue(\"Localizer A process not running, but should be\", shexcA.getProcess().isAlive());\r\n        assertTrue(\"Localizer B process not running, but should be\", shexcB.getProcess().isAlive());\r\n        testA.heartbeatResponse++;\r\n        testB.heartbeatResponse++;\r\n        testA.heartbeatResponse++;\r\n        threadA.join();\r\n        shexcA.getProcess().waitFor(10000, TimeUnit.MILLISECONDS);\r\n        assertFalse(\"Localizer A process is still running, but shouldn't be\", shexcA.getProcess().isAlive());\r\n        assertTrue(\"Localizer B process not running, but should be\", shexcB.getProcess().isAlive());\r\n    } finally {\r\n        shexcA.getProcess().destroy();\r\n        shexcB.getProcess().destroy();\r\n        shexcA.getProcess().waitFor(10000, TimeUnit.MILLISECONDS);\r\n        shexcB.getProcess().waitFor(10000, TimeUnit.MILLISECONDS);\r\n        threadA.join();\r\n        testB.heartbeatResponse++;\r\n        threadB.join();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 3,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "mockOutDownloads",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void mockOutDownloads(ContainerLocalizer localizer)\n{\r\n    ExecutorService syncExec = mock(ExecutorService.class);\r\n    CompletionService<Path> cs = mock(CompletionService.class);\r\n    when(cs.submit(isA(Callable.class))).thenAnswer(new Answer<Future<Path>>() {\r\n\r\n        @Override\r\n        public Future<Path> answer(InvocationOnMock invoc) throws Throwable {\r\n            Future<Path> done = mock(Future.class);\r\n            when(done.isDone()).thenReturn(true);\r\n            FakeDownload d = (FakeDownload) invoc.getArguments()[0];\r\n            when(done.get()).thenReturn(d.call());\r\n            return done;\r\n        }\r\n    });\r\n    doReturn(syncExec).when(localizer).createDownloadThreadPool();\r\n    doReturn(cs).when(localizer).createCompletionService(syncExec);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getMockLocalizerRecordFactory",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "RecordFactory getMockLocalizerRecordFactory()\n{\r\n    RecordFactory mockRF = mock(RecordFactory.class);\r\n    when(mockRF.newRecordInstance(same(LocalResourceStatus.class))).thenAnswer(new Answer<LocalResourceStatus>() {\r\n\r\n        @Override\r\n        public LocalResourceStatus answer(InvocationOnMock invoc) throws Throwable {\r\n            return new MockLocalResourceStatus();\r\n        }\r\n    });\r\n    when(mockRF.newRecordInstance(same(LocalizerStatus.class))).thenAnswer(new Answer<LocalizerStatus>() {\r\n\r\n        @Override\r\n        public LocalizerStatus answer(InvocationOnMock invoc) throws Throwable {\r\n            return new MockLocalizerStatus();\r\n        }\r\n    });\r\n    return mockRF;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getMockRsrc",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "ResourceLocalizationSpec getMockRsrc(Random r, LocalResourceVisibility vis, Path p)\n{\r\n    ResourceLocalizationSpec resourceLocalizationSpec = mock(ResourceLocalizationSpec.class);\r\n    LocalResource rsrc = mock(LocalResource.class);\r\n    String name = Long.toHexString(r.nextLong());\r\n    URL uri = mock(org.apache.hadoop.yarn.api.records.URL.class);\r\n    when(uri.getScheme()).thenReturn(\"file\");\r\n    when(uri.getHost()).thenReturn(null);\r\n    when(uri.getFile()).thenReturn(\"/local/\" + vis + \"/\" + name);\r\n    when(rsrc.getResource()).thenReturn(uri);\r\n    when(rsrc.getSize()).thenReturn(r.nextInt(1024) + 1024L);\r\n    when(rsrc.getTimestamp()).thenReturn(r.nextInt(1024) + 2048L);\r\n    when(rsrc.getType()).thenReturn(LocalResourceType.FILE);\r\n    when(rsrc.getVisibility()).thenReturn(vis);\r\n    when(resourceLocalizationSpec.getResource()).thenReturn(rsrc);\r\n    when(resourceLocalizationSpec.getDestinationDirectory()).thenReturn(URL.fromPath(p));\r\n    return resourceLocalizationSpec;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "createFakeCredentials",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "DataInputBuffer createFakeCredentials(Random r, int nTok) throws IOException\n{\r\n    Credentials creds = new Credentials();\r\n    byte[] password = new byte[20];\r\n    Text kind = new Text();\r\n    Text service = new Text();\r\n    Text alias = new Text();\r\n    for (int i = 0; i < nTok; ++i) {\r\n        byte[] identifier = (\"idef\" + i).getBytes();\r\n        r.nextBytes(password);\r\n        kind.set(\"kind\" + i);\r\n        service.set(\"service\" + i);\r\n        alias.set(\"token\" + i);\r\n        Token token = new Token(identifier, password, kind, service);\r\n        creds.addToken(alias, token);\r\n    }\r\n    DataOutputBuffer buf = new DataOutputBuffer();\r\n    creds.writeTokenStorageToStream(buf);\r\n    DataInputBuffer ret = new DataInputBuffer();\r\n    ret.reset(buf.getData(), 0, buf.getLength());\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testUserCacheDirPermission",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testUserCacheDirPermission() throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    conf.set(CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY, \"077\");\r\n    FileContext lfs = FileContext.getLocalFSFileContext(conf);\r\n    Path fileCacheDir = lfs.makeQualified(new Path(basedir, \"filecache\"));\r\n    lfs.mkdir(fileCacheDir, FsPermission.getDefault(), true);\r\n    RecordFactory recordFactory = mock(RecordFactory.class);\r\n    ContainerLocalizer localizer = new ContainerLocalizer(lfs, UserGroupInformation.getCurrentUser().getUserName(), \"application_01\", \"container_01\", String.format(ContainerExecutor.TOKEN_FILE_NAME_FMT, \"container_01\"), new ArrayList<>(), recordFactory);\r\n    LocalResource rsrc = mock(LocalResource.class);\r\n    when(rsrc.getVisibility()).thenReturn(LocalResourceVisibility.PRIVATE);\r\n    Path destDirPath = new Path(fileCacheDir, \"0/0/85\");\r\n    FsPermission wrongPerm = new FsPermission((short) 0700);\r\n    lfs.mkdir(destDirPath.getParent().getParent(), wrongPerm, false);\r\n    lfs.mkdir(destDirPath.getParent(), wrongPerm, false);\r\n    localizer.download(destDirPath, rsrc, UserGroupInformation.getCurrentUser());\r\n    Assert.assertEquals(\"Cache directory permissions filecache/0/0 is incorrect\", USERCACHE_DIR_PERM, lfs.getFileStatus(destDirPath.getParent()).getPermission());\r\n    Assert.assertEquals(\"Cache directory permissions filecache/0 is incorrect\", USERCACHE_DIR_PERM, lfs.getFileStatus(destDirPath.getParent().getParent()).getPermission());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setup() throws IOException\n{\r\n    conf.set(YarnConfiguration.NM_OPPORTUNISTIC_CONTAINERS_QUEUE_POLICY, OpportunisticContainersQueuePolicy.BY_RESOURCES.name());\r\n    super.setup();\r\n    containerManager.start();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "isContainerInSuccessfulState",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isContainerInSuccessfulState(final ContainerStatus containerStatus)\n{\r\n    final org.apache.hadoop.yarn.api.records.ContainerState state = containerStatus.getState();\r\n    final ContainerSubState subState = containerStatus.getContainerSubState();\r\n    switch(subState) {\r\n        case RUNNING:\r\n        case COMPLETING:\r\n            return true;\r\n        case DONE:\r\n            return state == org.apache.hadoop.yarn.api.records.ContainerState.COMPLETE;\r\n        default:\r\n            return false;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "verifyRunAndKilledContainers",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void verifyRunAndKilledContainers(final List<ContainerId> statList, final int numExpectedContainers, final Set<ContainerId> runContainers, final Set<ContainerId> killedContainers) throws TimeoutException, InterruptedException\n{\r\n    GenericTestUtils.waitFor(() -> {\r\n        GetContainerStatusesRequest statRequest = GetContainerStatusesRequest.newInstance(statList);\r\n        final List<ContainerStatus> containerStatuses;\r\n        try {\r\n            containerStatuses = containerManager.getContainerStatuses(statRequest).getContainerStatuses();\r\n        } catch (final Exception e) {\r\n            return false;\r\n        }\r\n        if (numExpectedContainers != containerStatuses.size()) {\r\n            return false;\r\n        }\r\n        for (final ContainerStatus status : containerStatuses) {\r\n            if (runContainers.contains(status.getContainerId())) {\r\n                if (!isContainerInSuccessfulState(status)) {\r\n                    return false;\r\n                }\r\n            } else if (killedContainers.contains(status.getContainerId())) {\r\n                if (!status.getDiagnostics().contains(\"Opportunistic container queue is full\")) {\r\n                    return false;\r\n                }\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }, 1000, 10000);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "verifyNothingQueued",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void verifyNothingQueued()\n{\r\n    ContainerScheduler containerScheduler = containerManager.getContainerScheduler();\r\n    Assert.assertEquals(0, containerScheduler.getNumQueuedContainers());\r\n    Assert.assertEquals(0, containerScheduler.getNumQueuedGuaranteedContainers());\r\n    Assert.assertEquals(0, containerScheduler.getNumQueuedOpportunisticContainers());\r\n    Assert.assertEquals(0, metrics.getQueuedOpportunisticContainers());\r\n    Assert.assertEquals(0, metrics.getQueuedGuaranteedContainers());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "testKillOpportunisticWhenNoResourcesAvailable",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testKillOpportunisticWhenNoResourcesAvailable() throws Exception\n{\r\n    List<StartContainerRequest> startContainerRequests = new ArrayList<>();\r\n    startContainerRequests.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), createContainerToken(createContainerId(0), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(2048, 1), context.getContainerTokenSecretManager(), null, ExecutionType.GUARANTEED)));\r\n    startContainerRequests.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), createContainerToken(createContainerId(1), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(2048, 1), context.getContainerTokenSecretManager(), null, ExecutionType.OPPORTUNISTIC)));\r\n    StartContainersRequest allRequests = StartContainersRequest.newInstance(startContainerRequests);\r\n    containerManager.startContainers(allRequests);\r\n    BaseContainerManagerTest.waitForNMContainerState(containerManager, createContainerId(0), ContainerState.RUNNING, 40);\r\n    BaseContainerManagerTest.waitForNMContainerState(containerManager, createContainerId(1), ContainerState.DONE, 40);\r\n    List<ContainerId> statList = ImmutableList.of(createContainerId(0), createContainerId(1));\r\n    verifyRunAndKilledContainers(statList, 2, Collections.singleton(createContainerId(0)), Collections.singleton(createContainerId(1)));\r\n    verifyNothingQueued();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "testOpportunisticRunsWhenResourcesAvailable",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testOpportunisticRunsWhenResourcesAvailable() throws Exception\n{\r\n    List<StartContainerRequest> startContainerRequests = new ArrayList<>();\r\n    final int numContainers = 8;\r\n    final int numContainersQueued = 4;\r\n    final Set<ContainerId> runContainers = new HashSet<>();\r\n    final Set<ContainerId> killedContainers = new HashSet<>();\r\n    for (int i = 0; i < numContainers; i++) {\r\n        startContainerRequests.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), createContainerToken(createContainerId(i), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(512, 1), context.getContainerTokenSecretManager(), null, ExecutionType.OPPORTUNISTIC)));\r\n    }\r\n    StartContainersRequest allRequests = StartContainersRequest.newInstance(startContainerRequests);\r\n    containerManager.startContainers(allRequests);\r\n    for (int i = 0; i < numContainersQueued; i++) {\r\n        final ContainerId containerId = createContainerId(i);\r\n        BaseContainerManagerTest.waitForNMContainerState(containerManager, containerId, ContainerState.RUNNING, 40);\r\n        runContainers.add(containerId);\r\n    }\r\n    for (int i = numContainersQueued; i < numContainers; i++) {\r\n        final ContainerId containerId = createContainerId(i);\r\n        BaseContainerManagerTest.waitForNMContainerState(containerManager, createContainerId(i), ContainerState.DONE, 40);\r\n        killedContainers.add(containerId);\r\n    }\r\n    Thread.sleep(5000);\r\n    List<ContainerId> statList = new ArrayList<>();\r\n    for (int i = 0; i < numContainers; i++) {\r\n        statList.add(createContainerId(i));\r\n    }\r\n    verifyRunAndKilledContainers(statList, numContainers, runContainers, killedContainers);\r\n    verifyNothingQueued();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "createNodeHealthCheckerService",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeHealthCheckerService createNodeHealthCheckerService()\n{\r\n    LocalDirsHandlerService dirsHandler = new LocalDirsHandlerService();\r\n    return new NodeHealthCheckerService(dirsHandler);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "startNMWebAppServer",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "int startNMWebAppServer(String webAddr)\n{\r\n    Configuration conf = new Configuration();\r\n    Context nmContext = new NodeManager.NMContext(null, null, null, null, null, false, conf);\r\n    ResourceView resourceView = new ResourceView() {\r\n\r\n        @Override\r\n        public long getVmemAllocatedForContainers() {\r\n            return 0;\r\n        }\r\n\r\n        @Override\r\n        public long getPmemAllocatedForContainers() {\r\n            return 0;\r\n        }\r\n\r\n        @Override\r\n        public long getVCoresAllocatedForContainers() {\r\n            return 0;\r\n        }\r\n\r\n        @Override\r\n        public boolean isVmemCheckEnabled() {\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        public boolean isPmemCheckEnabled() {\r\n            return true;\r\n        }\r\n    };\r\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, TESTROOTDIR.getAbsolutePath());\r\n    conf.set(YarnConfiguration.NM_LOG_DIRS, TESTLOGDIR.getAbsolutePath());\r\n    healthChecker = createNodeHealthCheckerService();\r\n    healthChecker.init(conf);\r\n    LocalDirsHandlerService dirsHandler = healthChecker.getDiskHandler();\r\n    conf.set(YarnConfiguration.NM_WEBAPP_ADDRESS, webAddr);\r\n    server = new WebServer(nmContext, resourceView, new ApplicationACLsManager(conf), dirsHandler);\r\n    server.init(conf);\r\n    server.start();\r\n    return server.getPort();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setUp()\n{\r\n    port = startNMWebAppServer(\"0.0.0.0:0\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDown() throws IOException\n{\r\n    server.close();\r\n    healthChecker.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testWebTerminal",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testWebTerminal()\n{\r\n    Client client = Client.create();\r\n    Builder builder = client.resource(\"http://127.0.0.1:\" + port + \"/terminal/terminal.template\").accept(\"text/html\");\r\n    ClientResponse response = builder.get(ClientResponse.class);\r\n    assertEquals(MediaType.TEXT_HTML + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getLocalizerAction",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LocalizerAction getLocalizerAction()\n{\r\n    return action;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "setLocalizerAction",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setLocalizerAction(LocalizerAction action)\n{\r\n    this.action = action;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getResourceSpecs",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<ResourceLocalizationSpec> getResourceSpecs()\n{\r\n    return resourceSpecs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "setResourceSpecs",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setResourceSpecs(List<ResourceLocalizationSpec> resourceSpecs)\n{\r\n    this.resourceSpecs = resourceSpecs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setup()\n{\r\n    privilegedOperationExecutorMock = mock(PrivilegedOperationExecutor.class);\r\n    conf = new YarnConfiguration();\r\n    tmpPath = new StringBuffer(System.getProperty(\"test.build.data\")).append('/').append(\"hadoop.tmp.dir\").toString();\r\n    conf.set(\"hadoop.tmp.dir\", tmpPath);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "verifyTrafficControlOperation",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void verifyTrafficControlOperation(PrivilegedOperation op, PrivilegedOperation.OperationType expectedOpType, List<String> expectedTcCmds) throws IOException\n{\r\n    Assert.assertEquals(expectedOpType, op.getOperationType());\r\n    List<String> args = op.getArguments();\r\n    Assert.assertEquals(1, args.size());\r\n    File tcCmdsFile = new File(args.get(0));\r\n    Assert.assertTrue(tcCmdsFile.exists());\r\n    List<String> tcCmds = Files.readAllLines(tcCmdsFile.toPath(), Charset.forName(\"UTF-8\"));\r\n    Assert.assertEquals(expectedTcCmds.size(), tcCmds.size());\r\n    for (int i = 0; i < tcCmds.size(); ++i) {\r\n        Assert.assertEquals(expectedTcCmds.get(i), tcCmds.get(i));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testBootstrapRecoveryDisabled",
  "errType" : [ "ResourceHandlerException|PrivilegedOperationException|IOException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testBootstrapRecoveryDisabled()\n{\r\n    conf.setBoolean(YarnConfiguration.NM_RECOVERY_ENABLED, false);\r\n    TrafficController trafficController = new TrafficController(conf, privilegedOperationExecutorMock);\r\n    try {\r\n        trafficController.bootstrap(DEVICE, ROOT_BANDWIDTH_MBIT, YARN_BANDWIDTH_MBIT);\r\n        ArgumentCaptor<PrivilegedOperation> opCaptor = ArgumentCaptor.forClass(PrivilegedOperation.class);\r\n        verify(privilegedOperationExecutorMock, times(2)).executePrivilegedOperation(opCaptor.capture(), eq(false));\r\n        List<PrivilegedOperation> ops = opCaptor.getAllValues();\r\n        verifyTrafficControlOperation(ops.get(0), PrivilegedOperation.OperationType.TC_MODIFY_STATE, Arrays.asList(WIPE_STATE_CMD));\r\n        verifyTrafficControlOperation(ops.get(1), PrivilegedOperation.OperationType.TC_MODIFY_STATE, Arrays.asList(ADD_ROOT_QDISC_CMD, ADD_CGROUP_FILTER_CMD, ADD_ROOT_CLASS_CMD, ADD_DEFAULT_CLASS_CMD, ADD_YARN_CLASS_CMD));\r\n    } catch (ResourceHandlerException | PrivilegedOperationException | IOException e) {\r\n        LOG.error(\"Unexpected exception: \" + e);\r\n        Assert.fail(\"Caught unexpected exception: \" + e.getClass().getSimpleName());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testBootstrapRecoveryEnabled",
  "errType" : [ "ResourceHandlerException|PrivilegedOperationException|IOException" ],
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testBootstrapRecoveryEnabled()\n{\r\n    conf.setBoolean(YarnConfiguration.NM_RECOVERY_ENABLED, true);\r\n    TrafficController trafficController = new TrafficController(conf, privilegedOperationExecutorMock);\r\n    try {\r\n        when(privilegedOperationExecutorMock.executePrivilegedOperation(any(PrivilegedOperation.class), eq(true))).thenReturn(DEFAULT_TC_STATE_EXAMPLE);\r\n        trafficController.bootstrap(DEVICE, ROOT_BANDWIDTH_MBIT, YARN_BANDWIDTH_MBIT);\r\n        ArgumentCaptor<PrivilegedOperation> readOpCaptor = ArgumentCaptor.forClass(PrivilegedOperation.class);\r\n        verify(privilegedOperationExecutorMock, times(1)).executePrivilegedOperation(readOpCaptor.capture(), eq(true));\r\n        List<PrivilegedOperation> readOps = readOpCaptor.getAllValues();\r\n        verifyTrafficControlOperation(readOps.get(0), PrivilegedOperation.OperationType.TC_READ_STATE, Arrays.asList(READ_QDISC_CMD, READ_FILTER_CMD, READ_CLASS_CMD));\r\n        ArgumentCaptor<PrivilegedOperation> writeOpCaptor = ArgumentCaptor.forClass(PrivilegedOperation.class);\r\n        verify(privilegedOperationExecutorMock, times(2)).executePrivilegedOperation(writeOpCaptor.capture(), eq(false));\r\n        List<PrivilegedOperation> writeOps = writeOpCaptor.getAllValues();\r\n        verifyTrafficControlOperation(writeOps.get(0), PrivilegedOperation.OperationType.TC_MODIFY_STATE, Arrays.asList(WIPE_STATE_CMD));\r\n        verifyTrafficControlOperation(writeOps.get(1), PrivilegedOperation.OperationType.TC_MODIFY_STATE, Arrays.asList(ADD_ROOT_QDISC_CMD, ADD_CGROUP_FILTER_CMD, ADD_ROOT_CLASS_CMD, ADD_DEFAULT_CLASS_CMD, ADD_YARN_CLASS_CMD));\r\n    } catch (ResourceHandlerException | PrivilegedOperationException | IOException e) {\r\n        LOG.error(\"Unexpected exception: \" + e);\r\n        Assert.fail(\"Caught unexpected exception: \" + e.getClass().getSimpleName());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testInvalidBuilder",
  "errType" : [ "ResourceHandlerException", "ResourceHandlerException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testInvalidBuilder()\n{\r\n    conf.setBoolean(YarnConfiguration.NM_RECOVERY_ENABLED, false);\r\n    TrafficController trafficController = new TrafficController(conf, privilegedOperationExecutorMock);\r\n    try {\r\n        trafficController.bootstrap(DEVICE, ROOT_BANDWIDTH_MBIT, YARN_BANDWIDTH_MBIT);\r\n        try {\r\n            TrafficController.BatchBuilder invalidBuilder = trafficController.new BatchBuilder(PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP);\r\n            Assert.fail(\"Invalid builder check failed!\");\r\n        } catch (ResourceHandlerException e) {\r\n        }\r\n    } catch (ResourceHandlerException e) {\r\n        LOG.error(\"Unexpected exception: \" + e);\r\n        Assert.fail(\"Caught unexpected exception: \" + e.getClass().getSimpleName());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testClassIdFileContentParsing",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testClassIdFileContentParsing()\n{\r\n    conf.setBoolean(YarnConfiguration.NM_RECOVERY_ENABLED, false);\r\n    TrafficController trafficController = new TrafficController(conf, privilegedOperationExecutorMock);\r\n    int parsedClassId = trafficController.getClassIdFromFileContents(TEST_CLASS_ID_DECIMAL_STR);\r\n    Assert.assertEquals(TEST_CLASS_ID, parsedClassId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testContainerOperations",
  "errType" : [ "ResourceHandlerException|IOException" ],
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testContainerOperations()\n{\r\n    conf.setBoolean(YarnConfiguration.NM_RECOVERY_ENABLED, false);\r\n    TrafficController trafficController = new TrafficController(conf, privilegedOperationExecutorMock);\r\n    try {\r\n        trafficController.bootstrap(DEVICE, ROOT_BANDWIDTH_MBIT, YARN_BANDWIDTH_MBIT);\r\n        int classId = trafficController.getNextClassId();\r\n        Assert.assertTrue(classId >= MIN_CONTAINER_CLASS_ID);\r\n        Assert.assertEquals(String.format(FORMAT_CONTAINER_CLASS_STR, classId), trafficController.getStringForNetClsClassId(classId));\r\n        TrafficController.BatchBuilder builder = trafficController.new BatchBuilder(PrivilegedOperation.OperationType.TC_MODIFY_STATE).addContainerClass(classId, CONTAINER_BANDWIDTH_MBIT, false);\r\n        PrivilegedOperation addClassOp = builder.commitBatchToTempFile();\r\n        String expectedAddClassCmd = String.format(FORMAT_ADD_CONTAINER_CLASS_TO_DEVICE, classId, YARN_BANDWIDTH_MBIT);\r\n        verifyTrafficControlOperation(addClassOp, PrivilegedOperation.OperationType.TC_MODIFY_STATE, Arrays.asList(expectedAddClassCmd));\r\n        TrafficController.BatchBuilder strictModeBuilder = trafficController.new BatchBuilder(PrivilegedOperation.OperationType.TC_MODIFY_STATE).addContainerClass(classId, CONTAINER_BANDWIDTH_MBIT, true);\r\n        PrivilegedOperation addClassStrictModeOp = strictModeBuilder.commitBatchToTempFile();\r\n        String expectedAddClassStrictModeCmd = String.format(FORMAT_ADD_CONTAINER_CLASS_TO_DEVICE, classId, CONTAINER_BANDWIDTH_MBIT);\r\n        verifyTrafficControlOperation(addClassStrictModeOp, PrivilegedOperation.OperationType.TC_MODIFY_STATE, Arrays.asList(expectedAddClassStrictModeCmd));\r\n        TrafficController.BatchBuilder deleteBuilder = trafficController.new BatchBuilder(PrivilegedOperation.OperationType.TC_MODIFY_STATE).deleteContainerClass(classId);\r\n        PrivilegedOperation deleteClassOp = deleteBuilder.commitBatchToTempFile();\r\n        String expectedDeleteClassCmd = String.format(FORAMT_DELETE_CONTAINER_CLASS_FROM_DEVICE, classId);\r\n        verifyTrafficControlOperation(deleteClassOp, PrivilegedOperation.OperationType.TC_MODIFY_STATE, Arrays.asList(expectedDeleteClassCmd));\r\n    } catch (ResourceHandlerException | IOException e) {\r\n        LOG.error(\"Unexpected exception: \" + e);\r\n        Assert.fail(\"Caught unexpected exception: \" + e.getClass().getSimpleName());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "teardown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void teardown()\n{\r\n    FileUtil.fullyDelete(new File(tmpPath));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "testParse",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testParse() throws IOException, YarnException\n{\r\n    File f = new File(\"src/test/resources/nvidia-smi-sample-output.xml\");\r\n    String s = FileUtils.readFileToString(f, UTF_8);\r\n    GpuDeviceInformationParser parser = new GpuDeviceInformationParser();\r\n    GpuDeviceInformation info = parser.parseXml(s);\r\n    assertEquals(\"375.66\", info.getDriverVersion());\r\n    assertEquals(2, info.getGpus().size());\r\n    assertFirstGpu(info.getGpus().get(0));\r\n    assertSecondGpu(info.getGpus().get(1));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "testParseExcerpt",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testParseExcerpt() throws IOException, YarnException\n{\r\n    File f = new File(\"src/test/resources/nvidia-smi-output-excerpt.xml\");\r\n    String s = FileUtils.readFileToString(f, UTF_8);\r\n    GpuDeviceInformationParser parser = new GpuDeviceInformationParser();\r\n    GpuDeviceInformation info = parser.parseXml(s);\r\n    assertEquals(\"375.66\", info.getDriverVersion());\r\n    assertEquals(2, info.getGpus().size());\r\n    assertFirstGpu(info.getGpus().get(0));\r\n    assertSecondGpu(info.getGpus().get(1));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "testParseConsecutivelyWithSameParser",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testParseConsecutivelyWithSameParser() throws IOException, YarnException\n{\r\n    File f = new File(\"src/test/resources/nvidia-smi-sample-output.xml\");\r\n    String s = FileUtils.readFileToString(f, UTF_8);\r\n    for (int i = 0; i < 3; i++) {\r\n        GpuDeviceInformationParser parser = new GpuDeviceInformationParser();\r\n        GpuDeviceInformation info = parser.parseXml(s);\r\n        assertEquals(\"375.66\", info.getDriverVersion());\r\n        assertEquals(2, info.getGpus().size());\r\n        assertFirstGpu(info.getGpus().get(0));\r\n        assertSecondGpu(info.getGpus().get(1));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "testParseEmptyString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testParseEmptyString() throws YarnException\n{\r\n    expected.expect(YarnException.class);\r\n    GpuDeviceInformationParser parser = new GpuDeviceInformationParser();\r\n    parser.parseXml(\"\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "testParseInvalidRootElement",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testParseInvalidRootElement() throws YarnException\n{\r\n    expected.expect(YarnException.class);\r\n    GpuDeviceInformationParser parser = new GpuDeviceInformationParser();\r\n    parser.parseXml(\"<nvidia_smiiiii></nvidia_smiiiii\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "testParseMissingTags",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testParseMissingTags() throws IOException, YarnException\n{\r\n    File f = new File(\"src/test/resources/nvidia-smi-output-missing-tags.xml\");\r\n    String s = FileUtils.readFileToString(f, UTF_8);\r\n    GpuDeviceInformationParser parser = new GpuDeviceInformationParser();\r\n    GpuDeviceInformation info = parser.parseXml(s);\r\n    assertEquals(\"375.66\", info.getDriverVersion());\r\n    assertEquals(1, info.getGpus().size());\r\n    PerGpuDeviceInformation gpu = info.getGpus().get(0);\r\n    assertEquals(\"N/A\", gpu.getProductName());\r\n    assertEquals(\"N/A\", gpu.getUuid());\r\n    assertEquals(-1, gpu.getMinorNumber());\r\n    assertNull(gpu.getGpuMemoryUsage());\r\n    assertNull(gpu.getTemperature());\r\n    assertNull(gpu.getGpuUtilizations());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "testParseMissingInnerTags",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testParseMissingInnerTags() throws IOException, YarnException\n{\r\n    File f = new File(\"src/test/resources/nvidia-smi-output-missing-tags2.xml\");\r\n    String s = FileUtils.readFileToString(f, UTF_8);\r\n    GpuDeviceInformationParser parser = new GpuDeviceInformationParser();\r\n    GpuDeviceInformation info = parser.parseXml(s);\r\n    assertEquals(\"375.66\", info.getDriverVersion());\r\n    assertEquals(2, info.getGpus().size());\r\n    PerGpuDeviceInformation gpu = info.getGpus().get(0);\r\n    assertEquals(\"Tesla P100-PCIE-12GB\", gpu.getProductName());\r\n    assertEquals(\"GPU-28604e81-21ec-cc48-6759-bf2648b22e16\", gpu.getUuid());\r\n    assertEquals(0, gpu.getMinorNumber());\r\n    assertEquals(-1, gpu.getGpuMemoryUsage().getTotalMemoryMiB());\r\n    assertEquals(-1, (long) gpu.getGpuMemoryUsage().getUsedMemoryMiB());\r\n    assertEquals(-1, (long) gpu.getGpuMemoryUsage().getAvailMemoryMiB());\r\n    assertEquals(0f, gpu.getGpuUtilizations().getOverallGpuUtilization(), DELTA);\r\n    assertEquals(Float.MIN_VALUE, gpu.getTemperature().getCurrentGpuTemp(), DELTA);\r\n    assertEquals(Float.MIN_VALUE, gpu.getTemperature().getMaxGpuTemp(), DELTA);\r\n    assertEquals(Float.MIN_VALUE, gpu.getTemperature().getSlowThresholdGpuTemp(), DELTA);\r\n    assertSecondGpu(info.getGpus().get(1));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "assertFirstGpu",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void assertFirstGpu(PerGpuDeviceInformation gpu)\n{\r\n    assertEquals(\"Tesla P100-PCIE-12GB\", gpu.getProductName());\r\n    assertEquals(\"GPU-28604e81-21ec-cc48-6759-bf2648b22e16\", gpu.getUuid());\r\n    assertEquals(0, gpu.getMinorNumber());\r\n    assertEquals(11567, gpu.getGpuMemoryUsage().getTotalMemoryMiB());\r\n    assertEquals(11400, (long) gpu.getGpuMemoryUsage().getUsedMemoryMiB());\r\n    assertEquals(167, (long) gpu.getGpuMemoryUsage().getAvailMemoryMiB());\r\n    assertEquals(33.4f, gpu.getGpuUtilizations().getOverallGpuUtilization(), DELTA);\r\n    assertEquals(31f, gpu.getTemperature().getCurrentGpuTemp(), DELTA);\r\n    assertEquals(80f, gpu.getTemperature().getMaxGpuTemp(), DELTA);\r\n    assertEquals(88f, gpu.getTemperature().getSlowThresholdGpuTemp(), DELTA);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp\\dao\\gpu",
  "methodName" : "assertSecondGpu",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void assertSecondGpu(PerGpuDeviceInformation gpu)\n{\r\n    assertEquals(\"Tesla P100-PCIE-12GB_2\", gpu.getProductName());\r\n    assertEquals(\"GPU-46915a82-3fd2-8e11-ae26-a80b607c04f3\", gpu.getUuid());\r\n    assertEquals(1, gpu.getMinorNumber());\r\n    assertEquals(12290, gpu.getGpuMemoryUsage().getTotalMemoryMiB());\r\n    assertEquals(11800, (long) gpu.getGpuMemoryUsage().getUsedMemoryMiB());\r\n    assertEquals(490, (long) gpu.getGpuMemoryUsage().getAvailMemoryMiB());\r\n    assertEquals(10.3f, gpu.getGpuUtilizations().getOverallGpuUtilization(), DELTA);\r\n    assertEquals(34f, gpu.getTemperature().getCurrentGpuTemp(), DELTA);\r\n    assertEquals(85f, gpu.getTemperature().getMaxGpuTemp(), DELTA);\r\n    assertEquals(82f, gpu.getTemperature().getSlowThresholdGpuTemp(), DELTA);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "run",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void run()\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setup() throws UnsupportedFileSystemException\n{\r\n    localFS = FileContext.getLocalFSFileContext();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDown() throws IOException, InterruptedException\n{\r\n    localFS.delete(new Path(basedir.getPath()), true);\r\n    if (nm != null) {\r\n        nm.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testClearLocalDirWhenNodeReboot",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 35,
  "sourceCodeText" : "void testClearLocalDirWhenNodeReboot() throws IOException, YarnException, InterruptedException\n{\r\n    nm = new MyNodeManager();\r\n    nm.start();\r\n    final ContainerManagementProtocol containerManager = nm.getContainerManager();\r\n    createFiles(nmLocalDir.getAbsolutePath(), ContainerLocalizer.FILECACHE, 100);\r\n    localResourceDir.mkdirs();\r\n    ContainerLaunchContext containerLaunchContext = Records.newRecord(ContainerLaunchContext.class);\r\n    ContainerId cId = createContainerId();\r\n    URL localResourceUri = URL.fromPath(localFS.makeQualified(new Path(localResourceDir.getAbsolutePath())));\r\n    LocalResource localResource = LocalResource.newInstance(localResourceUri, LocalResourceType.FILE, LocalResourceVisibility.APPLICATION, -1, localResourceDir.lastModified());\r\n    String destinationFile = \"dest_file\";\r\n    Map<String, LocalResource> localResources = new HashMap<String, LocalResource>();\r\n    localResources.put(destinationFile, localResource);\r\n    containerLaunchContext.setLocalResources(localResources);\r\n    List<String> commands = new ArrayList<String>();\r\n    containerLaunchContext.setCommands(commands);\r\n    NodeId nodeId = nm.getNMContext().getNodeId();\r\n    StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, TestContainerManager.createContainerToken(cId, 0, nodeId, destinationFile, nm.getNMContext().getContainerTokenSecretManager()));\r\n    List<StartContainerRequest> list = new ArrayList<StartContainerRequest>();\r\n    list.add(scRequest);\r\n    final StartContainersRequest allRequests = StartContainersRequest.newInstance(list);\r\n    final UserGroupInformation currentUser = UserGroupInformation.createRemoteUser(cId.getApplicationAttemptId().toString());\r\n    NMTokenIdentifier nmIdentifier = new NMTokenIdentifier(cId.getApplicationAttemptId(), nodeId, user, 123);\r\n    currentUser.addTokenIdentifier(nmIdentifier);\r\n    currentUser.doAs(new PrivilegedExceptionAction<Void>() {\r\n\r\n        @Override\r\n        public Void run() throws YarnException, IOException {\r\n            nm.getContainerManager().startContainers(allRequests);\r\n            return null;\r\n        }\r\n    });\r\n    List<ContainerId> containerIds = new ArrayList<ContainerId>();\r\n    containerIds.add(cId);\r\n    GetContainerStatusesRequest request = GetContainerStatusesRequest.newInstance(containerIds);\r\n    Container container = nm.getNMContext().getContainers().get(request.getContainerIds().get(0));\r\n    final int MAX_TRIES = 20;\r\n    int numTries = 0;\r\n    while (!container.getContainerState().equals(ContainerState.DONE) && numTries <= MAX_TRIES) {\r\n        try {\r\n            Thread.sleep(500);\r\n        } catch (InterruptedException ex) {\r\n        }\r\n        numTries++;\r\n    }\r\n    Assert.assertEquals(ContainerState.DONE, container.getContainerState());\r\n    Assert.assertTrue(\"The container should create a subDir named currentUser: \" + user + \"under localDir/usercache\", numOfLocalDirs(nmLocalDir.getAbsolutePath(), ContainerLocalizer.USERCACHE) > 0);\r\n    Assert.assertTrue(\"There should be files or Dirs under nm_private when \" + \"container is launched\", numOfLocalDirs(nmLocalDir.getAbsolutePath(), ResourceLocalizationService.NM_PRIVATE_DIR) > 0);\r\n    restartNM(MAX_TRIES);\r\n    checkNumOfLocalDirs();\r\n    verify(delService, times(1)).delete(argThat(new FileDeletionMatcher(delService, null, new Path(ResourceLocalizationService.NM_PRIVATE_DIR + \"_DEL_\"), null)));\r\n    verify(delService, times(1)).delete(argThat(new FileDeletionMatcher(delService, null, new Path(ContainerLocalizer.FILECACHE + \"_DEL_\"), null)));\r\n    verify(delService, times(1)).delete(argThat(new FileDeletionMatcher(delService, user, null, Arrays.asList(new Path(destinationFile)))));\r\n    verify(delService, times(1)).delete(argThat(new FileDeletionMatcher(delService, null, new Path(ContainerLocalizer.USERCACHE + \"_DEL_\"), new ArrayList<Path>())));\r\n    restartNM(MAX_TRIES);\r\n    checkNumOfLocalDirs();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "restartNM",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void restartNM(int maxTries) throws IOException\n{\r\n    nm.stop();\r\n    nm = new MyNodeManager();\r\n    nm.start();\r\n    int numTries = 0;\r\n    while ((numOfLocalDirs(nmLocalDir.getAbsolutePath(), ContainerLocalizer.USERCACHE) > 0 || numOfLocalDirs(nmLocalDir.getAbsolutePath(), ContainerLocalizer.FILECACHE) > 0 || numOfLocalDirs(nmLocalDir.getAbsolutePath(), ResourceLocalizationService.NM_PRIVATE_DIR) > 0) && numTries < maxTries) {\r\n        try {\r\n            Thread.sleep(500);\r\n        } catch (InterruptedException ex) {\r\n        }\r\n        numTries++;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "checkNumOfLocalDirs",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void checkNumOfLocalDirs() throws IOException\n{\r\n    Assert.assertTrue(\"After NM reboots, all local files should be deleted\", numOfLocalDirs(nmLocalDir.getAbsolutePath(), ContainerLocalizer.USERCACHE) == 0 && numOfLocalDirs(nmLocalDir.getAbsolutePath(), ContainerLocalizer.FILECACHE) == 0 && numOfLocalDirs(nmLocalDir.getAbsolutePath(), ResourceLocalizationService.NM_PRIVATE_DIR) == 0);\r\n    Assert.assertTrue(\"After NM reboots, usercache_DEL_* directory should be deleted\", numOfUsercacheDELDirs(nmLocalDir.getAbsolutePath()) == 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "numOfLocalDirs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int numOfLocalDirs(String localDir, String localSubDir)\n{\r\n    File[] listOfFiles = new File(localDir, localSubDir).listFiles();\r\n    if (listOfFiles == null) {\r\n        return 0;\r\n    } else {\r\n        return listOfFiles.length;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "numOfUsercacheDELDirs",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "int numOfUsercacheDELDirs(String localDir) throws IOException\n{\r\n    int count = 0;\r\n    RemoteIterator<FileStatus> fileStatus = localFS.listStatus(new Path(localDir));\r\n    while (fileStatus.hasNext()) {\r\n        FileStatus status = fileStatus.next();\r\n        if (status.getPath().getName().matches(\".*\" + ContainerLocalizer.USERCACHE + \"_DEL_.*\")) {\r\n            count++;\r\n        }\r\n    }\r\n    return count;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createFiles",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void createFiles(String dir, String subDir, int numOfFiles)\n{\r\n    for (int i = 0; i < numOfFiles; i++) {\r\n        File newFile = new File(dir + \"/\" + subDir, \"file_\" + (i + 1));\r\n        try {\r\n            newFile.createNewFile();\r\n        } catch (IOException e) {\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createContainerId",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ContainerId createContainerId()\n{\r\n    ApplicationId appId = ApplicationId.newInstance(0, 0);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId containerId = ContainerId.newContainerId(appAttemptId, 0);\r\n    return containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setup()\n{\r\n    conf = new Configuration();\r\n    mapper = new ObjectMapper();\r\n    File tmpDir = new File(tmpPath);\r\n    tmpDir.mkdirs();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "cleanUp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void cleanUp() throws IOException\n{\r\n    File tmpDir = new File(tmpPath);\r\n    FileUtils.deleteDirectory(tmpDir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testLocalGetHashFromImageTag",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testLocalGetHashFromImageTag() throws IOException\n{\r\n    BufferedReader mockLocalBufferedReader = mock(BufferedReader.class);\r\n    BufferedReader mockHdfsBufferedReader = mock(BufferedReader.class);\r\n    String commentImage = \"commentimage:latest\";\r\n    String commentImageHash = \"142fff813433c1faa8796388db3a1fa1e899ba08c9e42ad2e33c42696d0f15d2\";\r\n    String fakeImageLatest = \"fakeimage:latest\";\r\n    String fakeImageCurrent = \"fakeimage:current\";\r\n    String fakeImageHash = \"f75903872eb2963e158502ef07f2e56d3a2e90a012b4afe3440461b54142a567\";\r\n    String busyboxImage = \"repo/busybox:123\";\r\n    String busyboxHash = \"c6912b9911deceec6c43ebb4c31c96374a8ebb3de4cd75f377dba6c07707de6e\";\r\n    String commentLine = \"#\" + commentImage + commentImageHash + \"#2nd comment\";\r\n    String busyboxLine = busyboxImage + \":\" + busyboxHash + \"#comment\";\r\n    String fakeImageLine = fakeImageLatest + \",\" + fakeImageCurrent + \":\" + fakeImageHash + \"#fakeimage comment\";\r\n    when(mockLocalBufferedReader.readLine()).thenReturn(commentLine, fakeImageLine, busyboxLine, null);\r\n    mockImageTagToManifestPlugin = new MockImageTagToManifestPlugin(mockLocalBufferedReader, mockHdfsBufferedReader);\r\n    mockImageTagToManifestPlugin.loadImageToHashFiles();\r\n    String returnedFakeImageHash = mockImageTagToManifestPlugin.getHashFromImageTag(fakeImageLatest);\r\n    String returnedBusyboxHash = mockImageTagToManifestPlugin.getHashFromImageTag(busyboxImage);\r\n    String returnedCommentHash = mockImageTagToManifestPlugin.getHashFromImageTag(commentImage);\r\n    Assert.assertEquals(fakeImageHash, returnedFakeImageHash);\r\n    Assert.assertEquals(busyboxHash, returnedBusyboxHash);\r\n    Assert.assertEquals(commentImage, returnedCommentHash);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testHdfsGetHashFromImageTag",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testHdfsGetHashFromImageTag() throws IOException\n{\r\n    BufferedReader mockLocalBufferedReader = mock(BufferedReader.class);\r\n    BufferedReader mockHdfsBufferedReader = mock(BufferedReader.class);\r\n    String commentImage = \"commentimage:latest\";\r\n    String commentImageHash = \"142fff813433c1faa8796388db3a1fa1e899ba08c9e42ad2e33c42696d0f15d2\";\r\n    String fakeImageLatest = \"fakeimage:latest\";\r\n    String fakeImageCurrent = \"fakeimage:current\";\r\n    String fakeImageHash = \"f75903872eb2963e158502ef07f2e56d3a2e90a012b4afe3440461b54142a567\";\r\n    String busyboxImage = \"repo/busybox:123\";\r\n    String busyboxHash = \"c6912b9911deceec6c43ebb4c31c96374a8ebb3de4cd75f377dba6c07707de6e\";\r\n    String commentLine = \"#\" + commentImage + commentImageHash + \"#2nd comment\";\r\n    String busyboxLine = busyboxImage + \":\" + busyboxHash + \"#comment\";\r\n    String fakeImageLine = fakeImageLatest + \",\" + fakeImageCurrent + \":\" + fakeImageHash + \"#fakeimage comment\";\r\n    when(mockHdfsBufferedReader.readLine()).thenReturn(commentLine, fakeImageLine, busyboxLine, null);\r\n    mockImageTagToManifestPlugin = new MockImageTagToManifestPlugin(mockLocalBufferedReader, mockHdfsBufferedReader);\r\n    mockImageTagToManifestPlugin.loadImageToHashFiles();\r\n    String returnedFakeImageHash = mockImageTagToManifestPlugin.getHashFromImageTag(fakeImageLatest);\r\n    String returnedBusyboxHash = mockImageTagToManifestPlugin.getHashFromImageTag(busyboxImage);\r\n    String returnedCommentHash = mockImageTagToManifestPlugin.getHashFromImageTag(commentImage);\r\n    Assert.assertEquals(fakeImageHash, returnedFakeImageHash);\r\n    Assert.assertEquals(busyboxHash, returnedBusyboxHash);\r\n    Assert.assertEquals(commentImage, returnedCommentHash);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testGetManifestFromImageTag",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testGetManifestFromImageTag() throws IOException\n{\r\n    String manifestPath = tmpPath + \"/manifests\";\r\n    File manifestDir = new File(manifestPath);\r\n    manifestDir.mkdirs();\r\n    conf.set(NM_LOCAL_RUNC_IMAGE_TAG_TO_HASH_FILE, \"local-image-tag-to-hash\");\r\n    conf.set(NM_HDFS_RUNC_IMAGE_TAG_TO_HASH_FILE, \"hdfs-image-tag-to-hash\");\r\n    conf.set(NM_RUNC_IMAGE_TOPLEVEL_DIR, tmpPath);\r\n    String manifestHash = \"d0e8c542d28e8e868848aeb58beecb31079eb7ada1293c4bc2eded08daed605a\";\r\n    PrintWriter printWriter = new PrintWriter(manifestPath + \"/\" + manifestHash);\r\n    printWriter.println(manifestJson);\r\n    printWriter.close();\r\n    BufferedReader mockLocalBufferedReader = mock(BufferedReader.class);\r\n    BufferedReader mockHdfsBufferedReader = mock(BufferedReader.class);\r\n    mockImageTagToManifestPlugin = new MockImageTagToManifestPlugin(mockLocalBufferedReader, mockHdfsBufferedReader) {\r\n\r\n        @Override\r\n        public String getHashFromImageTag(String imageTag) {\r\n            return manifestHash;\r\n        }\r\n    };\r\n    mockImageTagToManifestPlugin.init(conf);\r\n    ImageManifest manifest = mockImageTagToManifestPlugin.getManifestFromImageTag(\"image\");\r\n    ImageManifest expectedManifest = mapper.readValue(manifestJson, ImageManifest.class);\r\n    Assert.assertEquals(expectedManifest.toString(), manifest.toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "testGetContainerCPU",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 22,
  "sourceCodeText" : "void testGetContainerCPU()\n{\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    float ret;\r\n    final int numProcessors = 8;\r\n    final int numCores = 4;\r\n    ResourceCalculatorPlugin plugin = Mockito.mock(ResourceCalculatorPlugin.class);\r\n    Mockito.doReturn(numProcessors).when(plugin).getNumProcessors();\r\n    Mockito.doReturn(numCores).when(plugin).getNumCores();\r\n    conf.setInt(YarnConfiguration.NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT, 0);\r\n    boolean catchFlag = false;\r\n    try {\r\n        NodeManagerHardwareUtils.getContainersCPUs(plugin, conf);\r\n        Assert.fail(\"getContainerCores should have thrown exception\");\r\n    } catch (IllegalArgumentException ie) {\r\n        catchFlag = true;\r\n    }\r\n    Assert.assertTrue(catchFlag);\r\n    conf.setInt(YarnConfiguration.NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT, 100);\r\n    ret = NodeManagerHardwareUtils.getContainersCPUs(plugin, conf);\r\n    Assert.assertEquals(4, (int) ret);\r\n    conf.setInt(YarnConfiguration.NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT, 50);\r\n    ret = NodeManagerHardwareUtils.getContainersCPUs(plugin, conf);\r\n    Assert.assertEquals(2, (int) ret);\r\n    conf.setInt(YarnConfiguration.NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT, 75);\r\n    ret = NodeManagerHardwareUtils.getContainersCPUs(plugin, conf);\r\n    Assert.assertEquals(3, (int) ret);\r\n    conf.setInt(YarnConfiguration.NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT, 85);\r\n    ret = NodeManagerHardwareUtils.getContainersCPUs(plugin, conf);\r\n    Assert.assertEquals(3.4, ret, 0.1);\r\n    conf.setInt(YarnConfiguration.NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT, 110);\r\n    ret = NodeManagerHardwareUtils.getContainersCPUs(plugin, conf);\r\n    Assert.assertEquals(4, (int) ret);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "testGetVCores",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testGetVCores()\n{\r\n    ResourceCalculatorPlugin plugin = new TestResourceCalculatorPlugin();\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.setFloat(YarnConfiguration.NM_PCORES_VCORES_MULTIPLIER, 1.25f);\r\n    int ret = NodeManagerHardwareUtils.getVCores(plugin, conf);\r\n    Assert.assertEquals(YarnConfiguration.DEFAULT_NM_VCORES, ret);\r\n    conf.setBoolean(YarnConfiguration.NM_ENABLE_HARDWARE_CAPABILITY_DETECTION, true);\r\n    ret = NodeManagerHardwareUtils.getVCores(plugin, conf);\r\n    Assert.assertEquals(5, ret);\r\n    conf.setBoolean(YarnConfiguration.NM_COUNT_LOGICAL_PROCESSORS_AS_CORES, true);\r\n    ret = NodeManagerHardwareUtils.getVCores(plugin, conf);\r\n    Assert.assertEquals(10, ret);\r\n    conf.setInt(YarnConfiguration.NM_VCORES, 10);\r\n    ret = NodeManagerHardwareUtils.getVCores(plugin, conf);\r\n    Assert.assertEquals(10, ret);\r\n    YarnConfiguration conf1 = new YarnConfiguration();\r\n    conf1.setBoolean(YarnConfiguration.NM_ENABLE_HARDWARE_CAPABILITY_DETECTION, false);\r\n    conf.setInt(YarnConfiguration.NM_VCORES, 10);\r\n    ret = NodeManagerHardwareUtils.getVCores(plugin, conf);\r\n    Assert.assertEquals(10, ret);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "testGetContainerMemoryMB",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testGetContainerMemoryMB() throws Exception\n{\r\n    ResourceCalculatorPlugin plugin = new TestResourceCalculatorPlugin();\r\n    long physicalMemMB = plugin.getPhysicalMemorySize() / (1024 * 1024);\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.NM_ENABLE_HARDWARE_CAPABILITY_DETECTION, true);\r\n    long mem = NodeManagerHardwareUtils.getContainerMemoryMB(null, conf);\r\n    Assert.assertEquals(YarnConfiguration.DEFAULT_NM_PMEM_MB, mem);\r\n    mem = NodeManagerHardwareUtils.getContainerMemoryMB(plugin, conf);\r\n    int hadoopHeapSizeMB = (int) (Runtime.getRuntime().maxMemory() / (1024 * 1024));\r\n    int calculatedMemMB = (int) (0.8 * (physicalMemMB - (2 * hadoopHeapSizeMB)));\r\n    Assert.assertEquals(calculatedMemMB, mem);\r\n    conf.setInt(YarnConfiguration.NM_PMEM_MB, 1024);\r\n    mem = NodeManagerHardwareUtils.getContainerMemoryMB(conf);\r\n    Assert.assertEquals(1024, mem);\r\n    conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.NM_ENABLE_HARDWARE_CAPABILITY_DETECTION, false);\r\n    mem = NodeManagerHardwareUtils.getContainerMemoryMB(conf);\r\n    Assert.assertEquals(YarnConfiguration.DEFAULT_NM_PMEM_MB, mem);\r\n    conf.setInt(YarnConfiguration.NM_PMEM_MB, 10 * 1024);\r\n    mem = NodeManagerHardwareUtils.getContainerMemoryMB(conf);\r\n    Assert.assertEquals(10 * 1024, mem);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "onWebSocketText",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void onWebSocketText(String message)\n{\r\n    LOG.info(\"Message received from server:\" + message);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "onWebSocketConnect",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void onWebSocketConnect(Session session)\n{\r\n    LOG.info(\"Connected to server\");\r\n    this.session = session;\r\n    latch.countDown();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "onWebSocketClose",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void onWebSocketClose(int statusCode, String reason)\n{\r\n    session.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "onWebSocketError",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void onWebSocketError(Throwable cause)\n{\r\n    super.onWebSocketError(cause);\r\n    cause.printStackTrace(System.err);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "sendMessage",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void sendMessage(String str)\n{\r\n    try {\r\n        session.getRemote().sendString(str);\r\n    } catch (IOException e) {\r\n        LOG.error(\"Failed to sent message to server\", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getLatch",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "CountDownLatch getLatch()\n{\r\n    return latch;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "setLatch",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setLatch(CountDownLatch latch)\n{\r\n    this.latch = latch;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setUp()\n{\r\n    dockerStartCommand = new DockerStartCommand(CONTAINER_NAME);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testGetCommandOption",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetCommandOption()\n{\r\n    assertEquals(\"start\", dockerStartCommand.getCommandOption());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testGetCommandWithArguments",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testGetCommandWithArguments()\n{\r\n    assertEquals(\"start\", StringUtils.join(\",\", dockerStartCommand.getDockerCommandWithArguments().get(\"docker-command\")));\r\n    assertEquals(\"foo\", StringUtils.join(\",\", dockerStartCommand.getDockerCommandWithArguments().get(\"name\")));\r\n    assertEquals(2, dockerStartCommand.getDockerCommandWithArguments().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setup()\n{\r\n    privilegedOperationExecutorMock = mock(PrivilegedOperationExecutor.class);\r\n    tmpPath = System.getProperty(\"test.build.data\") + \"/cgroups\";\r\n    File tmpDir = new File(tmpPath);\r\n    FileUtils.deleteQuietly(tmpDir);\r\n    assertTrue(tmpDir.mkdirs());\r\n    hierarchy = \"test-hadoop-yarn\";\r\n    controller = CGroupsHandler.CGroupController.NET_CLS;\r\n    controllerPath = new File(new File(tmpPath, controller.getName()), hierarchy).getAbsolutePath();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "teardown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void teardown()\n{\r\n    FileUtil.fullyDelete(new File(tmpPath));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "createMountConfiguration",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "YarnConfiguration createMountConfiguration()\n{\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.set(YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_HIERARCHY, hierarchy);\r\n    conf.setBoolean(YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_MOUNT, true);\r\n    conf.set(YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_MOUNT_PATH, tmpPath);\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "createNoMountConfiguration",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Configuration createNoMountConfiguration(String myHierarchy)\n{\r\n    Configuration confNoMount = new Configuration();\r\n    confNoMount.set(YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_HIERARCHY, myHierarchy);\r\n    confNoMount.setBoolean(YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_MOUNT, false);\r\n    return confNoMount;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "createEmptyCgroups",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "File createEmptyCgroups() throws IOException\n{\r\n    File emptyMtab = new File(tmpPath, \"mtab\");\r\n    assertTrue(\"New file should have been created\", emptyMtab.createNewFile());\r\n    return emptyMtab;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "createPremountedCgroups",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "File createPremountedCgroups(File parentDir, boolean cpuAcct) throws IOException\n{\r\n    String cpuMtabContentMissing = \"none \" + parentDir.getAbsolutePath() + \"/cp cgroup rw,relatime,cpu 0 0\\n\";\r\n    File cpuCgroup = new File(parentDir, \"cpu\");\r\n    String cpuMtabContent = \"none \" + cpuCgroup.getAbsolutePath() + \" cgroup rw,relatime,cpu\" + (cpuAcct ? \",cpuacct\" : \"\") + \" 0 0\\n\";\r\n    assertTrue(\"Directory should be created\", cpuCgroup.mkdirs());\r\n    File blkioCgroup = new File(parentDir, \"blkio\");\r\n    String blkioMtabContent = \"none \" + blkioCgroup.getAbsolutePath() + \" cgroup rw,relatime,blkio 0 0\\n\";\r\n    assertTrue(\"Directory should be created\", blkioCgroup.mkdirs());\r\n    File mockMtab = new File(parentDir, UUID.randomUUID().toString());\r\n    if (!mockMtab.exists()) {\r\n        if (!mockMtab.createNewFile()) {\r\n            String message = \"Could not create file \" + mockMtab.getAbsolutePath();\r\n            throw new IOException(message);\r\n        }\r\n    }\r\n    FileWriter mtabWriter = new FileWriter(mockMtab.getAbsoluteFile());\r\n    mtabWriter.write(cpuMtabContentMissing);\r\n    mtabWriter.write(cpuMtabContent);\r\n    mtabWriter.write(blkioMtabContent);\r\n    mtabWriter.close();\r\n    mockMtab.deleteOnExit();\r\n    return mockMtab;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testMountController",
  "errType" : [ "ResourceHandlerException", "PrivilegedOperationException" ],
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testMountController() throws IOException\n{\r\n    File parentDir = new File(tmpPath);\r\n    File cgroup = new File(parentDir, controller.getName());\r\n    assertTrue(\"cgroup dir should be cerated\", cgroup.mkdirs());\r\n    verifyZeroInteractions(privilegedOperationExecutorMock);\r\n    File emptyMtab = createEmptyCgroups();\r\n    try {\r\n        CGroupsHandler cGroupsHandler = new CGroupsHandlerImpl(createMountConfiguration(), privilegedOperationExecutorMock, emptyMtab.getAbsolutePath());\r\n        PrivilegedOperation expectedOp = new PrivilegedOperation(PrivilegedOperation.OperationType.MOUNT_CGROUPS);\r\n        String controllerKV = controller.getName() + \"=\" + tmpPath + Path.SEPARATOR + controller.getName();\r\n        expectedOp.appendArgs(hierarchy, controllerKV);\r\n        cGroupsHandler.initializeCGroupController(controller);\r\n        try {\r\n            ArgumentCaptor<PrivilegedOperation> opCaptor = ArgumentCaptor.forClass(PrivilegedOperation.class);\r\n            verify(privilegedOperationExecutorMock).executePrivilegedOperation(opCaptor.capture(), eq(false));\r\n            Assert.assertEquals(expectedOp, opCaptor.getValue());\r\n            verifyNoMoreInteractions(privilegedOperationExecutorMock);\r\n            cGroupsHandler.initializeCGroupController(controller);\r\n            verifyNoMoreInteractions(privilegedOperationExecutorMock);\r\n        } catch (PrivilegedOperationException e) {\r\n            LOG.error(\"Caught exception: \" + e);\r\n            assertTrue(\"Unexpected PrivilegedOperationException from mock!\", false);\r\n        }\r\n    } catch (ResourceHandlerException e) {\r\n        LOG.error(\"Caught exception: \" + e);\r\n        assertTrue(\"Unexpected ResourceHandler Exception!\", false);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testCGroupPaths",
  "errType" : [ "ResourceHandlerException" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testCGroupPaths() throws IOException\n{\r\n    verifyZeroInteractions(privilegedOperationExecutorMock);\r\n    CGroupsHandler cGroupsHandler = null;\r\n    File mtab = createEmptyCgroups();\r\n    assertTrue(\"Sample subsystem should be created\", new File(controllerPath).mkdirs());\r\n    try {\r\n        cGroupsHandler = new CGroupsHandlerImpl(createMountConfiguration(), privilegedOperationExecutorMock, mtab.getAbsolutePath());\r\n        cGroupsHandler.initializeCGroupController(controller);\r\n    } catch (ResourceHandlerException e) {\r\n        LOG.error(\"Caught exception: \" + e);\r\n        assertTrue(\"Unexpected ResourceHandlerException when mounting controller!\", false);\r\n    }\r\n    String testCGroup = \"container_01\";\r\n    String expectedPath = controllerPath + Path.SEPARATOR + testCGroup;\r\n    String path = cGroupsHandler.getPathForCGroup(controller, testCGroup);\r\n    Assert.assertEquals(expectedPath, path);\r\n    String expectedPathTasks = expectedPath + Path.SEPARATOR + CGroupsHandler.CGROUP_PROCS_FILE;\r\n    path = cGroupsHandler.getPathForCGroupTasks(controller, testCGroup);\r\n    Assert.assertEquals(expectedPathTasks, path);\r\n    String param = CGroupsHandler.CGROUP_PARAM_CLASSID;\r\n    String expectedPathParam = expectedPath + Path.SEPARATOR + controller.getName() + \".\" + param;\r\n    path = cGroupsHandler.getPathForCGroupParam(controller, testCGroup, param);\r\n    Assert.assertEquals(expectedPathParam, path);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testCGroupOperations",
  "errType" : [ "ResourceHandlerException", "ResourceHandlerException", "IOException" ],
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testCGroupOperations() throws IOException\n{\r\n    verifyZeroInteractions(privilegedOperationExecutorMock);\r\n    CGroupsHandler cGroupsHandler = null;\r\n    File mtab = createEmptyCgroups();\r\n    assertTrue(\"Sample subsystem should be created\", new File(controllerPath).mkdirs());\r\n    try {\r\n        cGroupsHandler = new CGroupsHandlerImpl(createMountConfiguration(), privilegedOperationExecutorMock, mtab.getAbsolutePath());\r\n        cGroupsHandler.initializeCGroupController(controller);\r\n    } catch (ResourceHandlerException e) {\r\n        LOG.error(\"Caught exception: \" + e);\r\n        assertTrue(\"Unexpected ResourceHandlerException when mounting controller!\", false);\r\n    }\r\n    String testCGroup = \"container_01\";\r\n    String expectedPath = controllerPath + Path.SEPARATOR + testCGroup;\r\n    try {\r\n        String path = cGroupsHandler.createCGroup(controller, testCGroup);\r\n        assertTrue(new File(expectedPath).exists());\r\n        Assert.assertEquals(expectedPath, path);\r\n        String param = \"test_param\";\r\n        String paramValue = \"test_param_value\";\r\n        cGroupsHandler.updateCGroupParam(controller, testCGroup, param, paramValue);\r\n        String paramPath = expectedPath + Path.SEPARATOR + controller.getName() + \".\" + param;\r\n        File paramFile = new File(paramPath);\r\n        assertTrue(paramFile.exists());\r\n        try {\r\n            Assert.assertEquals(paramValue, new String(Files.readAllBytes(paramFile.toPath())));\r\n        } catch (IOException e) {\r\n            LOG.error(\"Caught exception: \" + e);\r\n            Assert.fail(\"Unexpected IOException trying to read cgroup param!\");\r\n        }\r\n        Assert.assertEquals(paramValue, cGroupsHandler.getCGroupParam(controller, testCGroup, param));\r\n    } catch (ResourceHandlerException e) {\r\n        LOG.error(\"Caught exception: \" + e);\r\n        Assert.fail(\"Unexpected ResourceHandlerException during cgroup operations!\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testMtabParsing",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testMtabParsing() throws Exception\n{\r\n    File parentDir = new File(tmpPath);\r\n    File mockMtabFile = createPremountedCgroups(parentDir, false);\r\n    Map<String, Set<String>> newMtab = CGroupsHandlerImpl.parseMtab(mockMtabFile.getAbsolutePath());\r\n    Map<CGroupsHandler.CGroupController, String> controllerPaths = CGroupsHandlerImpl.initializeControllerPathsFromMtab(newMtab);\r\n    Assert.assertEquals(2, controllerPaths.size());\r\n    assertTrue(controllerPaths.containsKey(CGroupsHandler.CGroupController.CPU));\r\n    assertTrue(controllerPaths.containsKey(CGroupsHandler.CGroupController.BLKIO));\r\n    String cpuDir = controllerPaths.get(CGroupsHandler.CGroupController.CPU);\r\n    String blkioDir = controllerPaths.get(CGroupsHandler.CGroupController.BLKIO);\r\n    Assert.assertEquals(parentDir.getAbsolutePath() + \"/cpu\", cpuDir);\r\n    Assert.assertEquals(parentDir.getAbsolutePath() + \"/blkio\", blkioDir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testPreMountedControllerInitialization",
  "errType" : [ "Exception", "Exception", "Exception", "Exception" ],
  "containingMethodsNum" : 38,
  "sourceCodeText" : "void testPreMountedControllerInitialization(String myHierarchy) throws Exception\n{\r\n    File parentDir = new File(tmpPath);\r\n    File mtab = createPremountedCgroups(parentDir, false);\r\n    File mountPoint = new File(parentDir, \"cpu\");\r\n    Configuration confNoMount = createNoMountConfiguration(myHierarchy);\r\n    CGroupsHandlerImpl cGroupsHandler = new CGroupsHandlerImpl(confNoMount, privilegedOperationExecutorMock, mtab.getAbsolutePath());\r\n    File cpuCgroupMountDir = new File(cGroupsHandler.getPathForCGroup(CGroupsHandler.CGroupController.CPU, \"\"));\r\n    if (!cpuCgroupMountDir.equals(mountPoint)) {\r\n        assertTrue(\"Directory should be deleted\", !cpuCgroupMountDir.exists());\r\n    }\r\n    cGroupsHandler.initializeCGroupController(CGroupsHandler.CGroupController.CPU);\r\n    assertTrue(\"Cgroups not writable\", cpuCgroupMountDir.exists() && cpuCgroupMountDir.canWrite());\r\n    assertTrue(cpuCgroupMountDir.setWritable(false));\r\n    try {\r\n        cGroupsHandler.initializeCGroupController(CGroupsHandler.CGroupController.CPU);\r\n        Assert.fail(\"An inaccessible path should result in an exception\");\r\n    } catch (Exception e) {\r\n        assertTrue(\"Unexpected exception \" + e.getClass().toString(), e instanceof ResourceHandlerException);\r\n    } finally {\r\n        assertTrue(\"Could not revert writable permission\", cpuCgroupMountDir.setWritable(true));\r\n    }\r\n    if (!cpuCgroupMountDir.equals(mountPoint)) {\r\n        assertTrue(\"Could not delete cgroups\", cpuCgroupMountDir.delete());\r\n        assertTrue(\"Directory should be deleted\", !cpuCgroupMountDir.exists());\r\n    }\r\n    assertTrue(mountPoint.setWritable(false));\r\n    try {\r\n        cGroupsHandler.initializeCGroupController(CGroupsHandler.CGroupController.CPU);\r\n        Assert.fail(\"An inaccessible path should result in an exception\");\r\n    } catch (Exception e) {\r\n        assertTrue(\"Unexpected exception \" + e.getClass().toString(), e instanceof ResourceHandlerException);\r\n    } finally {\r\n        assertTrue(\"Could not revert writable permission\", mountPoint.setWritable(true));\r\n    }\r\n    if (!cpuCgroupMountDir.equals(mountPoint)) {\r\n        Assert.assertFalse(\"Could not delete cgroups\", cpuCgroupMountDir.delete());\r\n        assertTrue(\"Directory should be deleted\", !cpuCgroupMountDir.exists());\r\n        SecurityManager manager = System.getSecurityManager();\r\n        System.setSecurityManager(new MockSecurityManagerDenyWrite());\r\n        try {\r\n            cGroupsHandler.initializeCGroupController(CGroupsHandler.CGroupController.CPU);\r\n            Assert.fail(\"An inaccessible path should result in an exception\");\r\n        } catch (Exception e) {\r\n            assertTrue(\"Unexpected exception \" + e.getClass().toString(), e instanceof ResourceHandlerException);\r\n        } finally {\r\n            System.setSecurityManager(manager);\r\n        }\r\n    }\r\n    if (!cpuCgroupMountDir.equals(mountPoint)) {\r\n        Assert.assertFalse(\"Could not delete cgroups\", cpuCgroupMountDir.delete());\r\n        assertTrue(\"Directory should be deleted\", !cpuCgroupMountDir.exists());\r\n    }\r\n    FileUtils.deleteQuietly(mountPoint);\r\n    assertTrue(\"cgroups mount point should be deleted\", !mountPoint.exists());\r\n    try {\r\n        cGroupsHandler.initializeCGroupController(CGroupsHandler.CGroupController.CPU);\r\n        Assert.fail(\"An inaccessible path should result in an exception\");\r\n    } catch (Exception e) {\r\n        assertTrue(\"Unexpected exception \" + e.getClass().toString(), e instanceof ResourceHandlerException);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 4,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testSelectCgroup",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testSelectCgroup() throws Exception\n{\r\n    File cpu = new File(tmpPath, \"cpu\");\r\n    File cpuNoExist = new File(tmpPath, \"cpuNoExist\");\r\n    File memory = new File(tmpPath, \"memory\");\r\n    try {\r\n        CGroupsHandlerImpl handler = new CGroupsHandlerImpl(createNoMountConfiguration(tmpPath), privilegedOperationExecutorMock);\r\n        Map<String, Set<String>> cgroups = new LinkedHashMap<>();\r\n        Assert.assertTrue(\"temp dir should be created\", cpu.mkdirs());\r\n        Assert.assertTrue(\"temp dir should be created\", memory.mkdirs());\r\n        Assert.assertFalse(\"temp dir should not be created\", cpuNoExist.exists());\r\n        cgroups.put(memory.getAbsolutePath(), Collections.singleton(\"memory\"));\r\n        cgroups.put(cpuNoExist.getAbsolutePath(), Collections.singleton(\"cpu\"));\r\n        cgroups.put(cpu.getAbsolutePath(), Collections.singleton(\"cpu\"));\r\n        String selectedCPU = handler.findControllerInMtab(\"cpu\", cgroups);\r\n        Assert.assertEquals(\"Wrong CPU mount point selected\", cpu.getAbsolutePath(), selectedCPU);\r\n    } finally {\r\n        FileUtils.deleteQuietly(cpu);\r\n        FileUtils.deleteQuietly(memory);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testPreMountedControllerEmpty",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testPreMountedControllerEmpty() throws Exception\n{\r\n    testPreMountedControllerInitialization(\"\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testPreMountedControllerRoot",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testPreMountedControllerRoot() throws Exception\n{\r\n    testPreMountedControllerInitialization(\"/\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testRemount",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testRemount() throws Exception\n{\r\n    File parentDir = new File(tmpPath);\r\n    final String oldMountPointDir = \"oldmount\";\r\n    final String newMountPointDir = \"newmount\";\r\n    File oldMountPoint = new File(parentDir, oldMountPointDir);\r\n    File mtab = createPremountedCgroups(oldMountPoint, true);\r\n    File newMountPoint = new File(parentDir, newMountPointDir);\r\n    assertTrue(\"Could not create dirs\", new File(newMountPoint, \"cpu\").mkdirs());\r\n    Configuration confMount = createMountConfiguration();\r\n    confMount.set(YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_MOUNT_PATH, parentDir.getAbsolutePath() + Path.SEPARATOR + newMountPointDir);\r\n    CGroupsHandlerImpl cGroupsHandler = new CGroupsHandlerImpl(confMount, privilegedOperationExecutorMock, mtab.getAbsolutePath());\r\n    cGroupsHandler.initializeCGroupController(CGroupsHandler.CGroupController.CPU);\r\n    ArgumentCaptor<PrivilegedOperation> opCaptor = ArgumentCaptor.forClass(PrivilegedOperation.class);\r\n    verify(privilegedOperationExecutorMock).executePrivilegedOperation(opCaptor.capture(), eq(false));\r\n    File hierarchyFile = new File(new File(newMountPoint, \"cpu\"), this.hierarchy);\r\n    assertTrue(\"Yarn cgroup should exist\", hierarchyFile.exists());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testManualCgroupSetting",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testManualCgroupSetting() throws ResourceHandlerException\n{\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.set(YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_MOUNT_PATH, tmpPath);\r\n    conf.set(YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_HIERARCHY, \"/hadoop-yarn\");\r\n    File cpu = new File(new File(tmpPath, \"cpuacct,cpu\"), \"/hadoop-yarn\");\r\n    try {\r\n        Assert.assertTrue(\"temp dir should be created\", cpu.mkdirs());\r\n        CGroupsHandlerImpl cGroupsHandler = new CGroupsHandlerImpl(conf, null);\r\n        cGroupsHandler.initializeCGroupController(CGroupsHandler.CGroupController.CPU);\r\n        Assert.assertEquals(\"CPU CGRoup path was not set\", cpu.getAbsolutePath(), new File(cGroupsHandler.getPathForCGroup(CGroupsHandler.CGroupController.CPU, \"\")).getAbsolutePath());\r\n    } finally {\r\n        FileUtils.deleteQuietly(cpu);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testCgroupsHierarchySetting",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testCgroupsHierarchySetting() throws ResourceHandlerException\n{\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.set(YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_MOUNT_PATH, tmpPath);\r\n    conf.set(YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_HIERARCHY, \"/hadoop-yarn\");\r\n    CGroupsHandlerImpl cGroupsHandler = new CGroupsHandlerImpl(conf, null);\r\n    String expectedRelativePath = \"hadoop-yarn/c1\";\r\n    Assert.assertEquals(expectedRelativePath, cGroupsHandler.getRelativePathForCGroup(\"c1\"));\r\n    conf.set(YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_HIERARCHY, \"hadoop-yarn\");\r\n    cGroupsHandler = new CGroupsHandlerImpl(conf, null);\r\n    Assert.assertEquals(expectedRelativePath, cGroupsHandler.getRelativePathForCGroup(\"c1\"));\r\n    conf.set(YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_HIERARCHY, \"hadoop-yarn/\");\r\n    cGroupsHandler = new CGroupsHandlerImpl(conf, null);\r\n    Assert.assertEquals(expectedRelativePath, cGroupsHandler.getRelativePathForCGroup(\"c1\"));\r\n    conf.set(YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_HIERARCHY, \"//hadoop-yarn//\");\r\n    cGroupsHandler = new CGroupsHandlerImpl(conf, null);\r\n    Assert.assertEquals(expectedRelativePath, cGroupsHandler.getRelativePathForCGroup(\"c1\"));\r\n    expectedRelativePath = \"hadoop-yarn/root/c1\";\r\n    conf.set(YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_HIERARCHY, \"//hadoop-yarn/root//\");\r\n    cGroupsHandler = new CGroupsHandlerImpl(conf, null);\r\n    Assert.assertEquals(expectedRelativePath, cGroupsHandler.getRelativePathForCGroup(\"c1\"));\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setup()\n{\r\n    testRootDir.mkdirs();\r\n    nodeLabelsProvider = new ScriptBasedNodeLabelsProvider();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    if (testRootDir.exists()) {\r\n        FileContext.getLocalFSFileContext().delete(new Path(testRootDir.getAbsolutePath()), true);\r\n    }\r\n    if (nodeLabelsProvider != null) {\r\n        nodeLabelsProvider.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "getConfForNodeLabelScript",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Configuration getConfForNodeLabelScript()\n{\r\n    Configuration conf = new Configuration();\r\n    conf.set(YarnConfiguration.NM_SCRIPT_BASED_NODE_LABELS_PROVIDER_PATH, nodeLabelsScriptFile.getAbsolutePath());\r\n    conf.setLong(YarnConfiguration.NM_NODE_LABELS_PROVIDER_FETCH_INTERVAL_MS, 1 * 60 * 60 * 1000l);\r\n    conf.setLong(YarnConfiguration.NM_NODE_LABELS_PROVIDER_FETCH_TIMEOUT_MS, 1000);\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "writeNodeLabelsScriptFile",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void writeNodeLabelsScriptFile(String scriptStr, boolean setExecutable) throws IOException\n{\r\n    PrintWriter pw = null;\r\n    try {\r\n        FileUtil.setWritable(nodeLabelsScriptFile, true);\r\n        FileUtil.setReadable(nodeLabelsScriptFile, true);\r\n        pw = new PrintWriter(new FileOutputStream(nodeLabelsScriptFile));\r\n        pw.println(scriptStr);\r\n        pw.flush();\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n        Assert.fail();\r\n    } finally {\r\n        if (null != pw) {\r\n            pw.close();\r\n        }\r\n    }\r\n    FileUtil.setExecutable(nodeLabelsScriptFile, setExecutable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "testNodeLabelsScriptRunnerCreation",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testNodeLabelsScriptRunnerCreation() throws IOException\n{\r\n    ScriptBasedNodeLabelsProvider nodeLabelsProvider = new ScriptBasedNodeLabelsProvider();\r\n    initilizeServiceFailTest(\"Expected to fail fast when no script is configured and \" + \"ScriptBasedNodeLabelsProvider service is inited\", nodeLabelsProvider);\r\n    nodeLabelsProvider = new ScriptBasedNodeLabelsProvider();\r\n    Configuration conf = new Configuration();\r\n    conf.set(YarnConfiguration.NM_SCRIPT_BASED_NODE_LABELS_PROVIDER_PATH, \"\");\r\n    initilizeServiceFailTest(\"Expected to fail fast when script path configuration is blank\" + \"and ScriptBasedNodeLabelsProvider service is inited.\", nodeLabelsProvider);\r\n    nodeLabelsProvider = new ScriptBasedNodeLabelsProvider();\r\n    writeNodeLabelsScriptFile(\"\", false);\r\n    initilizeServiceFailTest(\"Expected to fail fast when script is not executable\" + \"and ScriptBasedNodeLabelsProvider service is inited.\", nodeLabelsProvider);\r\n    nodeLabelsProvider = new ScriptBasedNodeLabelsProvider();\r\n    writeNodeLabelsScriptFile(\"\", true);\r\n    nodeLabelsProvider.init(getConfForNodeLabelScript());\r\n    nodeLabelsProvider.start();\r\n    Assert.assertNotNull(\"Node Label Script runner should be started when script\" + \" is executable\", nodeLabelsProvider.getTimerTask());\r\n    nodeLabelsProvider.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "initilizeServiceFailTest",
  "errType" : [ "ServiceStateException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void initilizeServiceFailTest(String message, ScriptBasedNodeLabelsProvider nodeLabelsProvider)\n{\r\n    try {\r\n        nodeLabelsProvider.init(new Configuration());\r\n        Assert.fail(message);\r\n    } catch (ServiceStateException ex) {\r\n        Assert.assertEquals(\"IOException was expected\", IOException.class, ex.getCause().getClass());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "testConfigForNoTimer",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testConfigForNoTimer() throws Exception\n{\r\n    Configuration conf = getConfForNodeLabelScript();\r\n    conf.setLong(YarnConfiguration.NM_NODE_LABELS_PROVIDER_FETCH_INTERVAL_MS, AbstractNodeDescriptorsProvider.DISABLE_NODE_DESCRIPTORS_PROVIDER_FETCH_TIMER);\r\n    String normalScript = \"echo NODE_PARTITION:X86\";\r\n    writeNodeLabelsScriptFile(normalScript, true);\r\n    nodeLabelsProvider.init(conf);\r\n    nodeLabelsProvider.start();\r\n    Assert.assertNull(\"Timer is not expected to be created when interval is configured as -1\", nodeLabelsProvider.getScheduler());\r\n    assertNLCollectionEquals(toNodeLabelSet(\"X86\"), nodeLabelsProvider.getDescriptors());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "testNodeLabelsScript",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testNodeLabelsScript() throws Exception\n{\r\n    String scriptWithoutLabels = \"\";\r\n    String normalScript = \"echo NODE_PARTITION:Windows\";\r\n    String scrptWithMultipleLinesHavingNodeLabels = \"echo NODE_PARTITION:RAM\\n echo NODE_PARTITION:JDK1_6\";\r\n    String timeOutScript = Shell.WINDOWS ? \"@echo off\\nping -n 4 127.0.0.1 >nul\\n\" + \"echo NODE_PARTITION:ALL\" : \"sleep 4\\necho NODE_PARTITION:ALL\";\r\n    writeNodeLabelsScriptFile(scriptWithoutLabels, true);\r\n    nodeLabelsProvider.init(getConfForNodeLabelScript());\r\n    nodeLabelsProvider.start();\r\n    Thread.sleep(500l);\r\n    TimerTask timerTask = nodeLabelsProvider.getTimerTask();\r\n    timerTask.run();\r\n    Assert.assertNull(\"Node Label Script runner should return null when script doesnt \" + \"give any Labels output\", nodeLabelsProvider.getDescriptors());\r\n    writeNodeLabelsScriptFile(normalScript, true);\r\n    timerTask.run();\r\n    assertNLCollectionEquals(toNodeLabelSet(\"Windows\"), nodeLabelsProvider.getDescriptors());\r\n    writeNodeLabelsScriptFile(scrptWithMultipleLinesHavingNodeLabels, true);\r\n    timerTask.run();\r\n    assertNLCollectionEquals(toNodeLabelSet(\"JDK1_6\"), nodeLabelsProvider.getDescriptors());\r\n    writeNodeLabelsScriptFile(timeOutScript, true);\r\n    timerTask.run();\r\n    Assert.assertNotEquals(\"Node Labels should not be set after timeout \", toNodeLabelSet(\"ALL\"), nodeLabelsProvider.getDescriptors());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\timelineservice",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    conf = new Configuration();\r\n    conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, true);\r\n    conf.setFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION, 2.0f);\r\n    conf.setLong(YarnConfiguration.ATS_APP_COLLECTOR_LINGER_PERIOD_IN_MS, 3000L);\r\n    conf.setBoolean(YarnConfiguration.NM_PUBLISH_CONTAINER_EVENTS_ENABLED, true);\r\n    timelineClient = new DummyTimelineClient(null);\r\n    Context context = createMockContext();\r\n    dispatcher = new DrainDispatcher();\r\n    publisher = new NMTimelinePublisher(context) {\r\n\r\n        public void createTimelineClient(ApplicationId appId) {\r\n            if (!getAppToClientMap().containsKey(appId)) {\r\n                timelineClient.init(getConfig());\r\n                timelineClient.start();\r\n                getAppToClientMap().put(appId, timelineClient);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        protected AsyncDispatcher createDispatcher() {\r\n            return dispatcher;\r\n        }\r\n    };\r\n    publisher.init(conf);\r\n    publisher.start();\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\timelineservice",
  "methodName" : "createMockContext",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "Context createMockContext()\n{\r\n    Context context = mock(Context.class);\r\n    when(context.getNodeId()).thenReturn(NodeId.newInstance(\"localhost\", 0));\r\n    ConcurrentMap<ContainerId, Container> containers = new ConcurrentHashMap<>();\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId cId = ContainerId.newContainerId(appAttemptId, 1);\r\n    Container container = mock(Container.class);\r\n    when(container.getContainerStartTime()).thenReturn(System.currentTimeMillis());\r\n    containers.putIfAbsent(cId, container);\r\n    when(context.getContainers()).thenReturn(containers);\r\n    return context;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\timelineservice",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    if (publisher != null) {\r\n        publisher.stop();\r\n    }\r\n    if (timelineClient != null) {\r\n        timelineClient.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\timelineservice",
  "methodName" : "testPublishContainerFinish",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testPublishContainerFinish() throws Exception\n{\r\n    ApplicationId appId = ApplicationId.newInstance(0, 2);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId cId = ContainerId.newContainerId(appAttemptId, 1);\r\n    String diag = \"test-diagnostics\";\r\n    int exitStatus = 0;\r\n    ContainerStatus cStatus = mock(ContainerStatus.class);\r\n    when(cStatus.getContainerId()).thenReturn(cId);\r\n    when(cStatus.getDiagnostics()).thenReturn(diag);\r\n    when(cStatus.getExitStatus()).thenReturn(exitStatus);\r\n    long timeStamp = System.currentTimeMillis();\r\n    ApplicationContainerFinishedEvent finishedEvent = new ApplicationContainerFinishedEvent(cStatus, timeStamp);\r\n    publisher.createTimelineClient(appId);\r\n    publisher.publishApplicationEvent(finishedEvent);\r\n    publisher.stopTimelineClient(appId);\r\n    dispatcher.await();\r\n    ContainerEntity cEntity = new ContainerEntity();\r\n    cEntity.setId(cId.toString());\r\n    TimelineEntity[] lastPublishedEntities = timelineClient.getLastPublishedEntities();\r\n    Assert.assertNotNull(lastPublishedEntities);\r\n    Assert.assertEquals(1, lastPublishedEntities.length);\r\n    TimelineEntity entity = lastPublishedEntities[0];\r\n    Assert.assertTrue(cEntity.equals(entity));\r\n    Assert.assertEquals(diag, entity.getInfo().get(ContainerMetricsConstants.DIAGNOSTICS_INFO));\r\n    Assert.assertEquals(exitStatus, entity.getInfo().get(ContainerMetricsConstants.EXIT_STATUS_INFO));\r\n    Assert.assertEquals(TimelineServiceHelper.invertLong(cId.getContainerId()), entity.getIdPrefix());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\timelineservice",
  "methodName" : "testPublishContainerPausedEvent",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testPublishContainerPausedEvent()\n{\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId cId = ContainerId.newContainerId(appAttemptId, 1);\r\n    ContainerEvent containerEvent = new ContainerPauseEvent(cId, \"test pause\");\r\n    publisher.createTimelineClient(appId);\r\n    publisher.publishContainerEvent(containerEvent);\r\n    publisher.stopTimelineClient(appId);\r\n    dispatcher.await();\r\n    ContainerEntity cEntity = new ContainerEntity();\r\n    cEntity.setId(cId.toString());\r\n    TimelineEntity[] lastPublishedEntities = timelineClient.getLastPublishedEntities();\r\n    Assert.assertNotNull(lastPublishedEntities);\r\n    Assert.assertEquals(1, lastPublishedEntities.length);\r\n    TimelineEntity entity = lastPublishedEntities[0];\r\n    Assert.assertEquals(cEntity, entity);\r\n    NavigableSet<TimelineEvent> events = entity.getEvents();\r\n    Assert.assertEquals(1, events.size());\r\n    Assert.assertEquals(ContainerMetricsConstants.PAUSED_EVENT_TYPE, events.iterator().next().getId());\r\n    Map<String, Object> info = entity.getInfo();\r\n    Assert.assertTrue(info.containsKey(ContainerMetricsConstants.DIAGNOSTICS_INFO));\r\n    Assert.assertEquals(\"test pause\", info.get(ContainerMetricsConstants.DIAGNOSTICS_INFO));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\timelineservice",
  "methodName" : "testPublishContainerResumedEvent",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testPublishContainerResumedEvent()\n{\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId cId = ContainerId.newContainerId(appAttemptId, 1);\r\n    ContainerEvent containerEvent = new ContainerResumeEvent(cId, \"test resume\");\r\n    publisher.createTimelineClient(appId);\r\n    publisher.publishContainerEvent(containerEvent);\r\n    publisher.stopTimelineClient(appId);\r\n    dispatcher.await();\r\n    ContainerEntity cEntity = new ContainerEntity();\r\n    cEntity.setId(cId.toString());\r\n    TimelineEntity[] lastPublishedEntities = timelineClient.getLastPublishedEntities();\r\n    Assert.assertNotNull(lastPublishedEntities);\r\n    Assert.assertEquals(1, lastPublishedEntities.length);\r\n    TimelineEntity entity = lastPublishedEntities[0];\r\n    Assert.assertEquals(cEntity, entity);\r\n    NavigableSet<TimelineEvent> events = entity.getEvents();\r\n    Assert.assertEquals(1, events.size());\r\n    Assert.assertEquals(ContainerMetricsConstants.RESUMED_EVENT_TYPE, events.iterator().next().getId());\r\n    Map<String, Object> info = entity.getInfo();\r\n    Assert.assertTrue(info.containsKey(ContainerMetricsConstants.DIAGNOSTICS_INFO));\r\n    Assert.assertEquals(\"test resume\", info.get(ContainerMetricsConstants.DIAGNOSTICS_INFO));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\timelineservice",
  "methodName" : "testPublishContainerKilledEvent",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testPublishContainerKilledEvent()\n{\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId cId = ContainerId.newContainerId(appAttemptId, 1);\r\n    ContainerEvent containerEvent = new ContainerKillEvent(cId, 1, \"test kill\");\r\n    publisher.createTimelineClient(appId);\r\n    publisher.publishContainerEvent(containerEvent);\r\n    publisher.stopTimelineClient(appId);\r\n    dispatcher.await();\r\n    ContainerEntity cEntity = new ContainerEntity();\r\n    cEntity.setId(cId.toString());\r\n    TimelineEntity[] lastPublishedEntities = timelineClient.getLastPublishedEntities();\r\n    Assert.assertNotNull(lastPublishedEntities);\r\n    Assert.assertEquals(1, lastPublishedEntities.length);\r\n    TimelineEntity entity = lastPublishedEntities[0];\r\n    Assert.assertEquals(cEntity, entity);\r\n    NavigableSet<TimelineEvent> events = entity.getEvents();\r\n    Assert.assertEquals(1, events.size());\r\n    Assert.assertEquals(ContainerMetricsConstants.KILLED_EVENT_TYPE, events.iterator().next().getId());\r\n    Map<String, Object> info = entity.getInfo();\r\n    Assert.assertTrue(info.containsKey(ContainerMetricsConstants.DIAGNOSTICS_INFO));\r\n    Assert.assertEquals(\"test kill\", info.get(ContainerMetricsConstants.DIAGNOSTICS_INFO));\r\n    Assert.assertTrue(info.containsKey(ContainerMetricsConstants.EXIT_STATUS_INFO));\r\n    Assert.assertEquals(1, info.get(ContainerMetricsConstants.EXIT_STATUS_INFO));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\timelineservice",
  "methodName" : "testContainerResourceUsage",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testContainerResourceUsage()\n{\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    publisher.createTimelineClient(appId);\r\n    Container aContainer = mock(Container.class);\r\n    when(aContainer.getContainerId()).thenReturn(ContainerId.newContainerId(ApplicationAttemptId.newInstance(appId, 1), 0L));\r\n    long idPrefix = TimelineServiceHelper.invertLong(aContainer.getContainerId().getContainerId());\r\n    publisher.reportContainerResourceUsage(aContainer, 1024L, 8F);\r\n    verifyPublishedResourceUsageMetrics(timelineClient, 1024L, 8, idPrefix);\r\n    timelineClient.reset();\r\n    publisher.reportContainerResourceUsage(aContainer, 1024L, 0.8F);\r\n    verifyPublishedResourceUsageMetrics(timelineClient, 1024L, 1, idPrefix);\r\n    timelineClient.reset();\r\n    publisher.reportContainerResourceUsage(aContainer, 1024L, 0.49F);\r\n    verifyPublishedResourceUsageMetrics(timelineClient, 1024L, 0, idPrefix);\r\n    timelineClient.reset();\r\n    publisher.reportContainerResourceUsage(aContainer, 1024L, (float) ResourceCalculatorProcessTree.UNAVAILABLE);\r\n    verifyPublishedResourceUsageMetrics(timelineClient, 1024L, ResourceCalculatorProcessTree.UNAVAILABLE, idPrefix);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\timelineservice",
  "methodName" : "verifyPublishedResourceUsageMetrics",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void verifyPublishedResourceUsageMetrics(DummyTimelineClient dummyTimelineClient, long memoryUsage, int cpuUsage, long idPrefix)\n{\r\n    TimelineEntity[] entities = null;\r\n    for (int i = 0; i < 10; i++) {\r\n        entities = dummyTimelineClient.getLastPublishedEntities();\r\n        if (entities != null) {\r\n            break;\r\n        }\r\n        try {\r\n            Thread.sleep(150L);\r\n        } catch (InterruptedException e) {\r\n            Thread.currentThread().interrupt();\r\n        }\r\n    }\r\n    int numberOfResourceMetrics = 0;\r\n    numberOfResourceMetrics += (memoryUsage == ResourceCalculatorProcessTree.UNAVAILABLE) ? 0 : 1;\r\n    numberOfResourceMetrics += (cpuUsage == ResourceCalculatorProcessTree.UNAVAILABLE) ? 0 : 1;\r\n    assertNotNull(\"entities are expected to be published\", entities);\r\n    assertEquals(\"Expected number of metrics notpublished\", numberOfResourceMetrics, entities[0].getMetrics().size());\r\n    assertEquals(idPrefix, entities[0].getIdPrefix());\r\n    Iterator<TimelineMetric> metrics = entities[0].getMetrics().iterator();\r\n    while (metrics.hasNext()) {\r\n        TimelineMetric metric = metrics.next();\r\n        Iterator<Entry<Long, Number>> entrySet;\r\n        switch(metric.getId()) {\r\n            case CPU_ID:\r\n                if (cpuUsage == ResourceCalculatorProcessTree.UNAVAILABLE) {\r\n                    Assert.fail(\"Not Expecting CPU Metric to be published\");\r\n                }\r\n                entrySet = metric.getValues().entrySet().iterator();\r\n                assertEquals(\"CPU usage metric not matching\", cpuUsage, entrySet.next().getValue());\r\n                break;\r\n            case MEMORY_ID:\r\n                if (memoryUsage == ResourceCalculatorProcessTree.UNAVAILABLE) {\r\n                    Assert.fail(\"Not Expecting Memory Metric to be published\");\r\n                }\r\n                entrySet = metric.getValues().entrySet().iterator();\r\n                assertEquals(\"Memory usage metric not matching\", memoryUsage, entrySet.next().getValue());\r\n                break;\r\n            default:\r\n                Assert.fail(\"Invalid Resource Usage metric\");\r\n                break;\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setup()\n{\r\n    mockCGroupsHandler = mock(CGroupsHandler.class);\r\n    cGroupsBlkioResourceHandlerImpl = new CGroupsBlkioResourceHandlerImpl(mockCGroupsHandler);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testBootstrap",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testBootstrap() throws Exception\n{\r\n    Configuration conf = new YarnConfiguration();\r\n    List<PrivilegedOperation> ret = cGroupsBlkioResourceHandlerImpl.bootstrap(conf);\r\n    verify(mockCGroupsHandler, times(1)).initializeCGroupController(CGroupsHandler.CGroupController.BLKIO);\r\n    Assert.assertNull(ret);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testPreStart",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testPreStart() throws Exception\n{\r\n    String id = \"container_01_01\";\r\n    String path = \"test-path/\" + id;\r\n    ContainerId mockContainerId = mock(ContainerId.class);\r\n    when(mockContainerId.toString()).thenReturn(id);\r\n    Container mockContainer = mock(Container.class);\r\n    when(mockContainer.getContainerId()).thenReturn(mockContainerId);\r\n    when(mockCGroupsHandler.getPathForCGroupTasks(CGroupsHandler.CGroupController.BLKIO, id)).thenReturn(path);\r\n    List<PrivilegedOperation> ret = cGroupsBlkioResourceHandlerImpl.preStart(mockContainer);\r\n    verify(mockCGroupsHandler, times(1)).createCGroup(CGroupsHandler.CGroupController.BLKIO, id);\r\n    verify(mockCGroupsHandler, times(1)).updateCGroupParam(CGroupsHandler.CGroupController.BLKIO, id, CGroupsHandler.CGROUP_PARAM_BLKIO_WEIGHT, CGroupsBlkioResourceHandlerImpl.DEFAULT_WEIGHT);\r\n    Assert.assertNotNull(ret);\r\n    Assert.assertEquals(1, ret.size());\r\n    PrivilegedOperation op = ret.get(0);\r\n    Assert.assertEquals(PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP, op.getOperationType());\r\n    List<String> args = op.getArguments();\r\n    Assert.assertEquals(1, args.size());\r\n    Assert.assertEquals(PrivilegedOperation.CGROUP_ARG_PREFIX + path, args.get(0));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testReacquireContainer",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testReacquireContainer() throws Exception\n{\r\n    ContainerId containerIdMock = mock(ContainerId.class);\r\n    Assert.assertNull(cGroupsBlkioResourceHandlerImpl.reacquireContainer(containerIdMock));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testPostComplete",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testPostComplete() throws Exception\n{\r\n    String id = \"container_01_01\";\r\n    ContainerId mockContainerId = mock(ContainerId.class);\r\n    when(mockContainerId.toString()).thenReturn(id);\r\n    Assert.assertNull(cGroupsBlkioResourceHandlerImpl.postComplete(mockContainerId));\r\n    verify(mockCGroupsHandler, times(1)).deleteCGroup(CGroupsHandler.CGroupController.BLKIO, id);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testTeardown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testTeardown() throws Exception\n{\r\n    Assert.assertNull(cGroupsBlkioResourceHandlerImpl.teardown());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setup()\n{\r\n    clock = new ControlledClock();\r\n    retryPolicy = new SlidingWindowRetryPolicy(clock);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testNeverRetry",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testNeverRetry()\n{\r\n    ContainerRetryContext retryContext = ContainerRetryContext.NEVER_RETRY_CONTEXT;\r\n    SlidingWindowRetryPolicy.RetryContext windowContext = new SlidingWindowRetryPolicy.RetryContext(retryContext);\r\n    Assert.assertFalse(\"never retry\", retryPolicy.shouldRetry(windowContext, 12));\r\n    Assert.assertEquals(\"remaining retries\", 0, windowContext.getRemainingRetries());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testAlwaysRetry",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testAlwaysRetry()\n{\r\n    ContainerRetryContext retryContext = ContainerRetryContext.newInstance(ContainerRetryPolicy.RETRY_ON_ALL_ERRORS, null, -1, 0, 10);\r\n    SlidingWindowRetryPolicy.RetryContext windowContext = new SlidingWindowRetryPolicy.RetryContext(retryContext);\r\n    Assert.assertTrue(\"always retry\", retryPolicy.shouldRetry(windowContext, 12));\r\n    Assert.assertEquals(\"remaining retries\", ContainerRetryContext.RETRY_FOREVER, windowContext.getRemainingRetries());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testFailuresValidityInterval",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testFailuresValidityInterval()\n{\r\n    ContainerRetryContext retryContext = ContainerRetryContext.newInstance(ContainerRetryPolicy.RETRY_ON_ALL_ERRORS, null, 1, 0, 10);\r\n    SlidingWindowRetryPolicy.RetryContext windowRetryContext = new SlidingWindowRetryPolicy.RetryContext(retryContext);\r\n    Assert.assertTrue(\"retry 1\", retryPolicy.shouldRetry(windowRetryContext, 12));\r\n    retryPolicy.updateRetryContext(windowRetryContext);\r\n    Assert.assertEquals(\"remaining retries\", 1, windowRetryContext.getRemainingRetries());\r\n    clock.setTime(20);\r\n    Assert.assertTrue(\"retry 2\", retryPolicy.shouldRetry(windowRetryContext, 12));\r\n    retryPolicy.updateRetryContext(windowRetryContext);\r\n    Assert.assertEquals(\"remaining retries\", 1, windowRetryContext.getRemainingRetries());\r\n    clock.setTime(40);\r\n    Assert.assertTrue(\"retry 3\", retryPolicy.shouldRetry(windowRetryContext, 12));\r\n    retryPolicy.updateRetryContext(windowRetryContext);\r\n    Assert.assertEquals(\"remaining retries\", 1, windowRetryContext.getRemainingRetries());\r\n    clock.setTime(45);\r\n    Assert.assertFalse(\"retry failed\", retryPolicy.shouldRetry(windowRetryContext, 12));\r\n    retryPolicy.updateRetryContext(windowRetryContext);\r\n    Assert.assertEquals(\"remaining retries\", 0, windowRetryContext.getRemainingRetries());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setup() throws IOException\n{\r\n    testDir.mkdirs();\r\n    testFile.createNewFile();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "teardown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void teardown()\n{\r\n    FileUtil.fullyDelete(testDir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testDirStructure",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testDirStructure() throws Exception\n{\r\n    Configuration conf = new YarnConfiguration();\r\n    String localDir1 = new File(\"file:///\" + testDir, \"localDir1\").getPath();\r\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, localDir1);\r\n    String logDir1 = new File(\"file:///\" + testDir, \"logDir1\").getPath();\r\n    conf.set(YarnConfiguration.NM_LOG_DIRS, logDir1);\r\n    LocalDirsHandlerService dirSvc = new LocalDirsHandlerService();\r\n    dirSvc.init(conf);\r\n    Assert.assertEquals(1, dirSvc.getLocalDirs().size());\r\n    dirSvc.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testValidPathsDirHandlerService",
  "errType" : [ "YarnRuntimeException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testValidPathsDirHandlerService() throws Exception\n{\r\n    Configuration conf = new YarnConfiguration();\r\n    String localDir1 = new File(\"file:///\" + testDir, \"localDir1\").getPath();\r\n    String localDir2 = new File(\"hdfs:///\" + testDir, \"localDir2\").getPath();\r\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, localDir1 + \",\" + localDir2);\r\n    String logDir1 = new File(\"file:///\" + testDir, \"logDir1\").getPath();\r\n    conf.set(YarnConfiguration.NM_LOG_DIRS, logDir1);\r\n    LocalDirsHandlerService dirSvc = new LocalDirsHandlerService();\r\n    try {\r\n        dirSvc.init(conf);\r\n        Assert.fail(\"Service should have thrown an exception due to wrong URI\");\r\n    } catch (YarnRuntimeException e) {\r\n    }\r\n    Assert.assertEquals(\"Service should not be inited\", STATE.STOPPED, dirSvc.getServiceState());\r\n    dirSvc.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testGetFullDirs",
  "errType" : null,
  "containingMethodsNum" : 48,
  "sourceCodeText" : "void testGetFullDirs() throws Exception\n{\r\n    Configuration conf = new YarnConfiguration();\r\n    conf.set(CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY, \"077\");\r\n    FileContext localFs = FileContext.getLocalFSFileContext(conf);\r\n    String localDir1 = new File(testDir, \"localDir1\").getPath();\r\n    String localDir2 = new File(testDir, \"localDir2\").getPath();\r\n    String logDir1 = new File(testDir, \"logDir1\").getPath();\r\n    String logDir2 = new File(testDir, \"logDir2\").getPath();\r\n    Path localDir1Path = new Path(localDir1);\r\n    Path logDir1Path = new Path(logDir1);\r\n    FsPermission dirPermissions = new FsPermission((short) 0410);\r\n    localFs.mkdir(localDir1Path, dirPermissions, true);\r\n    localFs.mkdir(logDir1Path, dirPermissions, true);\r\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, localDir1 + \",\" + localDir2);\r\n    conf.set(YarnConfiguration.NM_LOG_DIRS, logDir1 + \",\" + logDir2);\r\n    conf.setFloat(YarnConfiguration.NM_MAX_PER_DISK_UTILIZATION_PERCENTAGE, 0.0f);\r\n    NodeManagerMetrics nm = NodeManagerMetrics.create();\r\n    LocalDirsHandlerService dirSvc = new LocalDirsHandlerService(nm);\r\n    dirSvc.init(conf);\r\n    Assert.assertEquals(0, dirSvc.getLocalDirs().size());\r\n    Assert.assertEquals(0, dirSvc.getLogDirs().size());\r\n    Assert.assertEquals(1, dirSvc.getDiskFullLocalDirs().size());\r\n    Assert.assertEquals(1, dirSvc.getDiskFullLogDirs().size());\r\n    Assert.assertEquals(2, nm.getBadLocalDirs());\r\n    Assert.assertEquals(2, nm.getBadLogDirs());\r\n    Assert.assertEquals(0, nm.getGoodLocalDirsDiskUtilizationPerc());\r\n    Assert.assertEquals(0, nm.getGoodLogDirsDiskUtilizationPerc());\r\n    Assert.assertEquals(\"\", dirSvc.getConfig().get(LocalDirsHandlerService.NM_GOOD_LOCAL_DIRS));\r\n    Assert.assertEquals(\"\", dirSvc.getConfig().get(LocalDirsHandlerService.NM_GOOD_LOG_DIRS));\r\n    Assert.assertEquals(localDir1 + \",\" + localDir2, dirSvc.getConfig().get(YarnConfiguration.NM_LOCAL_DIRS));\r\n    Assert.assertEquals(logDir1 + \",\" + logDir2, dirSvc.getConfig().get(YarnConfiguration.NM_LOG_DIRS));\r\n    conf.setFloat(YarnConfiguration.NM_MAX_PER_DISK_UTILIZATION_PERCENTAGE, 100.0f);\r\n    nm = NodeManagerMetrics.create();\r\n    dirSvc = new LocalDirsHandlerService(nm);\r\n    dirSvc.init(conf);\r\n    Assert.assertEquals(1, dirSvc.getLocalDirs().size());\r\n    Assert.assertEquals(1, dirSvc.getLogDirs().size());\r\n    Assert.assertEquals(0, dirSvc.getDiskFullLocalDirs().size());\r\n    Assert.assertEquals(0, dirSvc.getDiskFullLogDirs().size());\r\n    File dir = new File(localDir1);\r\n    int utilizationPerc = (int) ((dir.getTotalSpace() - dir.getUsableSpace()) * 100 / dir.getTotalSpace());\r\n    Assert.assertEquals(1, nm.getBadLocalDirs());\r\n    Assert.assertEquals(1, nm.getBadLogDirs());\r\n    Assert.assertEquals(utilizationPerc, nm.getGoodLocalDirsDiskUtilizationPerc());\r\n    Assert.assertEquals(utilizationPerc, nm.getGoodLogDirsDiskUtilizationPerc());\r\n    Assert.assertEquals(new Path(localDir2).toString(), dirSvc.getConfig().get(LocalDirsHandlerService.NM_GOOD_LOCAL_DIRS));\r\n    Assert.assertEquals(new Path(logDir2).toString(), dirSvc.getConfig().get(LocalDirsHandlerService.NM_GOOD_LOG_DIRS));\r\n    Assert.assertEquals(localDir1 + \",\" + localDir2, dirSvc.getConfig().get(YarnConfiguration.NM_LOCAL_DIRS));\r\n    Assert.assertEquals(logDir1 + \",\" + logDir2, dirSvc.getConfig().get(YarnConfiguration.NM_LOG_DIRS));\r\n    FileUtils.deleteDirectory(new File(localDir1));\r\n    FileUtils.deleteDirectory(new File(localDir2));\r\n    FileUtils.deleteDirectory(new File(logDir1));\r\n    FileUtils.deleteDirectory(new File(logDir2));\r\n    dirSvc.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "setup",
  "errType" : [ "ResourceHandlerException" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void setup() throws IOException, YarnException\n{\r\n    Assume.assumeTrue(SystemUtils.IS_OS_LINUX);\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.set(YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_HIERARCHY, \"TestCompareResourceCalculators\");\r\n    conf.setBoolean(YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_MOUNT, false);\r\n    conf.setStrings(YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_MOUNT_PATH, \"/sys/fs/cgroup\");\r\n    conf.setBoolean(YarnConfiguration.NM_CPU_RESOURCE_ENABLED, true);\r\n    ResourceHandlerChain module = null;\r\n    try {\r\n        module = ResourceHandlerModule.getConfiguredResourceHandlerChain(conf, mock(Context.class));\r\n    } catch (ResourceHandlerException e) {\r\n        throw new YarnException(\"Cannot access cgroups\", e);\r\n    }\r\n    Assume.assumeNotNull(module);\r\n    Assume.assumeNotNull(ResourceHandlerModule.getCGroupsHandler().getControllerPath(CGroupsHandler.CGroupController.CPU));\r\n    Assume.assumeNotNull(ResourceHandlerModule.getCGroupsHandler().getControllerPath(CGroupsHandler.CGroupController.MEMORY));\r\n    Random random = new Random(System.currentTimeMillis());\r\n    cgroup = Long.toString(random.nextLong());\r\n    cgroupCPU = ResourceHandlerModule.getCGroupsHandler().getPathForCGroup(CGroupsHandler.CGroupController.CPU, cgroup);\r\n    cgroupMemory = ResourceHandlerModule.getCGroupsHandler().getPathForCGroup(CGroupsHandler.CGroupController.MEMORY, cgroup);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown() throws YarnException\n{\r\n    stopTestProcess();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testCompareResults",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testCompareResults() throws YarnException, InterruptedException, IOException\n{\r\n    startTestProcess();\r\n    ProcfsBasedProcessTree legacyCalculator = new ProcfsBasedProcessTree(Long.toString(getPid()));\r\n    CGroupsResourceCalculator cgroupsCalculator = new CGroupsResourceCalculator(Long.toString(getPid()));\r\n    cgroupsCalculator.setCGroupFilePaths();\r\n    for (int i = 0; i < 5; ++i) {\r\n        Thread.sleep(3000);\r\n        compareMetrics(legacyCalculator, cgroupsCalculator);\r\n    }\r\n    stopTestProcess();\r\n    ensureCleanedUp(legacyCalculator, cgroupsCalculator);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "ensureCleanedUp",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void ensureCleanedUp(ResourceCalculatorProcessTree metric1, ResourceCalculatorProcessTree metric2)\n{\r\n    metric1.updateProcessTree();\r\n    metric2.updateProcessTree();\r\n    long pmem1 = metric1.getRssMemorySize(0);\r\n    long pmem2 = metric2.getRssMemorySize(0);\r\n    System.out.println(pmem1 + \" \" + pmem2);\r\n    Assert.assertTrue(\"pmem should be invalid \" + pmem1 + \" \" + pmem2, pmem1 == ResourceCalculatorProcessTree.UNAVAILABLE && pmem2 == ResourceCalculatorProcessTree.UNAVAILABLE);\r\n    long vmem1 = metric1.getRssMemorySize(0);\r\n    long vmem2 = metric2.getRssMemorySize(0);\r\n    System.out.println(vmem1 + \" \" + vmem2);\r\n    Assert.assertTrue(\"vmem Error outside range \" + vmem1 + \" \" + vmem2, vmem1 == ResourceCalculatorProcessTree.UNAVAILABLE && vmem2 == ResourceCalculatorProcessTree.UNAVAILABLE);\r\n    float cpu1 = metric1.getCpuUsagePercent();\r\n    float cpu2 = metric2.getCpuUsagePercent();\r\n    Assert.assertTrue(\"CPU% Error outside range \" + cpu1 + \" \" + cpu2, cpu1 == 0 && cpu2 == 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "compareMetrics",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void compareMetrics(ResourceCalculatorProcessTree metric1, ResourceCalculatorProcessTree metric2)\n{\r\n    metric1.updateProcessTree();\r\n    metric2.updateProcessTree();\r\n    long pmem1 = metric1.getRssMemorySize(0);\r\n    long pmem2 = metric2.getRssMemorySize(0);\r\n    System.out.println(pmem1 + \" \" + (pmem2 - SHMEM_KB * 1024));\r\n    Assert.assertTrue(\"pmem Error outside range \" + pmem1 + \" \" + pmem2, Math.abs(pmem1 - (pmem2 - SHMEM_KB * 1024)) < 5000000);\r\n    long vmem1 = metric1.getRssMemorySize(0);\r\n    long vmem2 = metric2.getRssMemorySize(0);\r\n    System.out.println(vmem1 + \" \" + (vmem2 - SHMEM_KB * 1024));\r\n    Assert.assertTrue(\"vmem Error outside range \" + vmem1 + \" \" + vmem2, Math.abs(vmem1 - (vmem2 - SHMEM_KB * 1024)) < 5000000);\r\n    float cpu1 = metric1.getCpuUsagePercent();\r\n    float cpu2 = metric2.getCpuUsagePercent();\r\n    if (cpu1 > 0) {\r\n        Assert.assertTrue(\"CPU% Error outside range \" + cpu1 + \" \" + cpu2, Math.abs(cpu2 - cpu1) < 10);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "startTestProcess",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void startTestProcess() throws IOException\n{\r\n    ProcessBuilder builder = new ProcessBuilder();\r\n    String script = \"mkdir -p \" + cgroupCPU + \";\" + \"echo $$ >\" + cgroupCPU + \"/tasks;\" + \"mkdir -p \" + cgroupMemory + \";\" + \"echo $$ >\" + cgroupMemory + \"/tasks;\" + \"dd if=/dev/zero of=/dev/shm/\" + cgroup + \" bs=1k count=\" + SHMEM_KB + \";\" + \"dd if=/dev/zero of=/dev/null bs=1k &\" + \"echo $! >/tmp/\\\" + cgroup + \\\".pid;\" + \"sleep 10000;\" + \"echo kill $(jobs -p);\";\r\n    builder.command(\"bash\", \"-c\", script);\r\n    builder.redirectError(new File(\"/tmp/a.txt\"));\r\n    builder.redirectOutput(new File(\"/tmp/b.txt\"));\r\n    target = builder.start();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "stopTestProcess",
  "errType" : [ "IOException|InterruptedException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void stopTestProcess() throws YarnException\n{\r\n    if (target != null) {\r\n        target.destroyForcibly();\r\n        target = null;\r\n    }\r\n    try {\r\n        ProcessBuilder builder = new ProcessBuilder();\r\n        String script = \"rm -f /dev/shm/\" + cgroup + \";\" + \"cat \" + cgroupCPU + \"/tasks | xargs kill;\" + \"rm -f /tmp/\" + cgroup + \".pid;\" + \"sleep 4;\" + \"rmdir \" + cgroupCPU + \";\" + \"rmdir \" + cgroupMemory + \";\";\r\n        builder.command(\"bash\", \"-c\", script);\r\n        Process cleanup = builder.start();\r\n        cleanup.waitFor();\r\n    } catch (IOException | InterruptedException e) {\r\n        throw new YarnException(\"Could not clean up\", e);\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getPid",
  "errType" : [ "NoSuchFieldException|IllegalAccessException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "long getPid() throws YarnException\n{\r\n    Class processClass = target.getClass();\r\n    if (processClass.getName().equals(\"java.lang.UNIXProcess\")) {\r\n        try {\r\n            Field pidField = processClass.getDeclaredField(\"pid\");\r\n            pidField.setAccessible(true);\r\n            long pid = pidField.getLong(target);\r\n            pidField.setAccessible(false);\r\n            return pid;\r\n        } catch (NoSuchFieldException | IllegalAccessException e) {\r\n            throw new YarnException(\"Reflection error\", e);\r\n        }\r\n    } else {\r\n        throw new YarnException(\"Not Unix \" + processClass.getName());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void setup() throws IOException\n{\r\n    super.setup();\r\n    ((NMContext) context).setNodeId(nodeId);\r\n    dispatcher = createDispatcher();\r\n    appEventHandler = mock(EventHandler.class);\r\n    dispatcher.register(ApplicationEventType.class, appEventHandler);\r\n    UserGroupInformation.setConfiguration(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void tearDown() throws IOException, InterruptedException\n{\r\n    super.tearDown();\r\n    createContainerExecutor().deleteAsUser(new DeletionAsUserContext.Builder().setUser(user).setSubDir(new Path(remoteRootLogDir.getAbsolutePath())).setBasedirs(new Path[] {}).build());\r\n    dispatcher.await();\r\n    dispatcher.stop();\r\n    dispatcher.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "verifyLocalFileDeletion",
  "errType" : null,
  "containingMethodsNum" : 29,
  "sourceCodeText" : "void verifyLocalFileDeletion(LogAggregationService logAggregationService) throws Exception\n{\r\n    logAggregationService.init(this.conf);\r\n    logAggregationService.start();\r\n    ApplicationId application1 = BuilderUtils.newApplicationId(1234, 1);\r\n    File app1LogDir = new File(localLogDir, application1.toString());\r\n    app1LogDir.mkdir();\r\n    logAggregationService.handle(new LogHandlerAppStartedEvent(application1, this.user, null, this.acls));\r\n    ApplicationAttemptId appAttemptId = BuilderUtils.newApplicationAttemptId(application1, 1);\r\n    ContainerId container11 = ContainerId.newContainerId(appAttemptId, 1);\r\n    writeContainerLogs(app1LogDir, container11, new String[] { \"stdout\", \"stderr\", \"syslog\" }, EMPTY_FILES);\r\n    logAggregationService.handle(new LogHandlerContainerFinishedEvent(container11, ContainerType.APPLICATION_MASTER, 0));\r\n    logAggregationService.handle(new LogHandlerAppFinishedEvent(application1));\r\n    logAggregationService.stop();\r\n    assertEquals(0, logAggregationService.getNumAggregators());\r\n    verify(logAggregationService).closeFileSystems(any(UserGroupInformation.class));\r\n    List<Path> dirList = new ArrayList<>();\r\n    dirList.add(new Path(app1LogDir.toURI()));\r\n    verify(delSrvc, times(2)).delete(argThat(new FileDeletionMatcher(delSrvc, user, null, dirList)));\r\n    String containerIdStr = container11.toString();\r\n    File containerLogDir = new File(app1LogDir, containerIdStr);\r\n    int count = 0;\r\n    int maxAttempts = 50;\r\n    for (String fileType : new String[] { \"stdout\", \"stderr\", \"syslog\" }) {\r\n        File f = new File(containerLogDir, fileType);\r\n        count = 0;\r\n        while ((f.exists()) && (count < maxAttempts)) {\r\n            count++;\r\n            Thread.sleep(100);\r\n        }\r\n        Assert.assertFalse(\"File [\" + f + \"] was not deleted\", f.exists());\r\n    }\r\n    count = 0;\r\n    while ((app1LogDir.exists()) && (count < maxAttempts)) {\r\n        count++;\r\n        Thread.sleep(100);\r\n    }\r\n    Assert.assertFalse(\"Directory [\" + app1LogDir + \"] was not deleted\", app1LogDir.exists());\r\n    Path logFilePath = logAggregationService.getLogAggregationFileController(conf).getRemoteNodeLogFileForApp(application1, this.user, nodeId);\r\n    Assert.assertTrue(\"Log file [\" + logFilePath + \"] not found\", new File(logFilePath.toUri().getPath()).exists());\r\n    dispatcher.await();\r\n    ApplicationEvent[] expectedEvents = new ApplicationEvent[] { new ApplicationEvent(appAttemptId.getApplicationId(), ApplicationEventType.APPLICATION_LOG_HANDLING_INITED), new ApplicationEvent(appAttemptId.getApplicationId(), ApplicationEventType.APPLICATION_LOG_HANDLING_FINISHED) };\r\n    checkEvents(appEventHandler, expectedEvents, true, \"getType\", \"getApplicationID\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testLocalFileDeletionAfterUpload",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testLocalFileDeletionAfterUpload() throws Exception\n{\r\n    this.delSrvc = new DeletionService(createContainerExecutor());\r\n    delSrvc = spy(delSrvc);\r\n    this.delSrvc.init(conf);\r\n    this.conf.set(YarnConfiguration.NM_LOG_DIRS, localLogDir.getAbsolutePath());\r\n    this.conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR, this.remoteRootLogDir.getAbsolutePath());\r\n    LogAggregationService logAggregationService = spy(new LogAggregationService(dispatcher, this.context, this.delSrvc, super.dirsHandler));\r\n    verifyLocalFileDeletion(logAggregationService);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testLocalFileDeletionOnDiskFull",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testLocalFileDeletionOnDiskFull() throws Exception\n{\r\n    this.delSrvc = new DeletionService(createContainerExecutor());\r\n    delSrvc = spy(delSrvc);\r\n    this.delSrvc.init(conf);\r\n    this.conf.set(YarnConfiguration.NM_LOG_DIRS, localLogDir.getAbsolutePath());\r\n    this.conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR, this.remoteRootLogDir.getAbsolutePath());\r\n    List<String> logDirs = super.dirsHandler.getLogDirs();\r\n    LocalDirsHandlerService dirsHandler = spy(super.dirsHandler);\r\n    when(dirsHandler.getLogDirs()).thenReturn(new ArrayList<String>());\r\n    when(dirsHandler.getLogDirsForRead()).thenReturn(logDirs);\r\n    LogAggregationService logAggregationService = spy(new LogAggregationService(dispatcher, this.context, this.delSrvc, dirsHandler));\r\n    verifyLocalFileDeletion(logAggregationService);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testNoLogsUploadedOnAppFinish",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testNoLogsUploadedOnAppFinish() throws Exception\n{\r\n    this.delSrvc = new DeletionService(createContainerExecutor());\r\n    delSrvc = spy(delSrvc);\r\n    this.delSrvc.init(conf);\r\n    this.conf.set(YarnConfiguration.NM_LOG_DIRS, localLogDir.getAbsolutePath());\r\n    this.conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR, this.remoteRootLogDir.getAbsolutePath());\r\n    LogAggregationService logAggregationService = new LogAggregationService(dispatcher, this.context, this.delSrvc, super.dirsHandler);\r\n    logAggregationService.init(this.conf);\r\n    logAggregationService.start();\r\n    ApplicationId app = BuilderUtils.newApplicationId(1234, 1);\r\n    File appLogDir = new File(localLogDir, app.toString());\r\n    appLogDir.mkdir();\r\n    LogAggregationContext context = LogAggregationContext.newInstance(\"HOST*\", \"sys*\");\r\n    logAggregationService.handle(new LogHandlerAppStartedEvent(app, this.user, null, this.acls, context));\r\n    ApplicationAttemptId appAttemptId = BuilderUtils.newApplicationAttemptId(app, 1);\r\n    ContainerId cont = ContainerId.newContainerId(appAttemptId, 1);\r\n    writeContainerLogs(appLogDir, cont, new String[] { \"stdout\", \"stderr\", \"syslog\" }, EMPTY_FILES);\r\n    logAggregationService.handle(new LogHandlerContainerFinishedEvent(cont, ContainerType.APPLICATION_MASTER, 0));\r\n    logAggregationService.handle(new LogHandlerAppFinishedEvent(app));\r\n    logAggregationService.stop();\r\n    delSrvc.stop();\r\n    FileDeletionTask deletionTask = new FileDeletionTask(delSrvc, user, null, null);\r\n    verify(delSrvc, times(0)).delete(deletionTask);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testNoContainerOnNode",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testNoContainerOnNode() throws Exception\n{\r\n    this.conf.set(YarnConfiguration.NM_LOG_DIRS, localLogDir.getAbsolutePath());\r\n    this.conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR, this.remoteRootLogDir.getAbsolutePath());\r\n    LogAggregationService logAggregationService = new LogAggregationService(dispatcher, this.context, this.delSrvc, super.dirsHandler);\r\n    logAggregationService.init(this.conf);\r\n    logAggregationService.start();\r\n    ApplicationId application1 = BuilderUtils.newApplicationId(1234, 1);\r\n    File app1LogDir = new File(localLogDir, application1.toString());\r\n    app1LogDir.mkdir();\r\n    logAggregationService.handle(new LogHandlerAppStartedEvent(application1, this.user, null, this.acls));\r\n    logAggregationService.handle(new LogHandlerAppFinishedEvent(application1));\r\n    logAggregationService.stop();\r\n    assertEquals(0, logAggregationService.getNumAggregators());\r\n    LogAggregationFileController format1 = logAggregationService.getLogAggregationFileController(conf);\r\n    Assert.assertFalse(new File(format1.getRemoteNodeLogFileForApp(application1, this.user, this.nodeId).toUri().getPath()).exists());\r\n    dispatcher.await();\r\n    ApplicationEvent[] expectedEvents = new ApplicationEvent[] { new ApplicationEvent(application1, ApplicationEventType.APPLICATION_LOG_HANDLING_INITED), new ApplicationEvent(application1, ApplicationEventType.APPLICATION_LOG_HANDLING_FINISHED) };\r\n    checkEvents(appEventHandler, expectedEvents, true, \"getType\", \"getApplicationID\");\r\n    logAggregationService.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testMultipleAppsLogAggregation",
  "errType" : null,
  "containingMethodsNum" : 57,
  "sourceCodeText" : "void testMultipleAppsLogAggregation() throws Exception\n{\r\n    this.conf.set(YarnConfiguration.NM_LOG_DIRS, localLogDir.getAbsolutePath());\r\n    this.conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR, this.remoteRootLogDir.getAbsolutePath());\r\n    String[] fileNames = new String[] { \"stdout\", \"stderr\", \"syslog\" };\r\n    LogAggregationService logAggregationService = new LogAggregationService(dispatcher, this.context, this.delSrvc, super.dirsHandler);\r\n    logAggregationService.init(this.conf);\r\n    logAggregationService.start();\r\n    ApplicationId application1 = BuilderUtils.newApplicationId(1234, 1);\r\n    File app1LogDir = new File(localLogDir, application1.toString());\r\n    app1LogDir.mkdir();\r\n    logAggregationService.handle(new LogHandlerAppStartedEvent(application1, this.user, null, this.acls));\r\n    ApplicationAttemptId appAttemptId1 = BuilderUtils.newApplicationAttemptId(application1, 1);\r\n    ContainerId container11 = ContainerId.newContainerId(appAttemptId1, 1);\r\n    writeContainerLogs(app1LogDir, container11, fileNames, EMPTY_FILES);\r\n    logAggregationService.handle(new LogHandlerContainerFinishedEvent(container11, ContainerType.APPLICATION_MASTER, 0));\r\n    ApplicationId application2 = BuilderUtils.newApplicationId(1234, 2);\r\n    ApplicationAttemptId appAttemptId2 = BuilderUtils.newApplicationAttemptId(application2, 1);\r\n    File app2LogDir = new File(localLogDir, application2.toString());\r\n    app2LogDir.mkdir();\r\n    LogAggregationContext contextWithAMOnly = Records.newRecord(LogAggregationContext.class);\r\n    contextWithAMOnly.setLogAggregationPolicyClassName(AMOnlyLogAggregationPolicy.class.getName());\r\n    logAggregationService.handle(new LogHandlerAppStartedEvent(application2, this.user, null, this.acls, contextWithAMOnly));\r\n    ContainerId container21 = ContainerId.newContainerId(appAttemptId2, 1);\r\n    writeContainerLogs(app2LogDir, container21, fileNames, EMPTY_FILES);\r\n    logAggregationService.handle(new LogHandlerContainerFinishedEvent(container21, ContainerType.APPLICATION_MASTER, 0));\r\n    ContainerId container12 = ContainerId.newContainerId(appAttemptId1, 2);\r\n    writeContainerLogs(app1LogDir, container12, fileNames, EMPTY_FILES);\r\n    logAggregationService.handle(new LogHandlerContainerFinishedEvent(container12, ContainerType.TASK, 0));\r\n    ApplicationId application3 = BuilderUtils.newApplicationId(1234, 3);\r\n    ApplicationAttemptId appAttemptId3 = BuilderUtils.newApplicationAttemptId(application3, 1);\r\n    File app3LogDir = new File(localLogDir, application3.toString());\r\n    app3LogDir.mkdir();\r\n    LogAggregationContext contextWithAMAndFailed = Records.newRecord(LogAggregationContext.class);\r\n    contextWithAMAndFailed.setLogAggregationPolicyClassName(AMOrFailedContainerLogAggregationPolicy.class.getName());\r\n    logAggregationService.handle(new LogHandlerAppStartedEvent(application3, this.user, null, this.acls, contextWithAMAndFailed));\r\n    dispatcher.await();\r\n    ApplicationEvent[] expectedInitEvents = new ApplicationEvent[] { new ApplicationEvent(application1, ApplicationEventType.APPLICATION_LOG_HANDLING_INITED), new ApplicationEvent(application2, ApplicationEventType.APPLICATION_LOG_HANDLING_INITED), new ApplicationEvent(application3, ApplicationEventType.APPLICATION_LOG_HANDLING_INITED) };\r\n    checkEvents(appEventHandler, expectedInitEvents, false, \"getType\", \"getApplicationID\");\r\n    reset(appEventHandler);\r\n    ContainerId container31 = ContainerId.newContainerId(appAttemptId3, 1);\r\n    writeContainerLogs(app3LogDir, container31, fileNames, EMPTY_FILES);\r\n    logAggregationService.handle(new LogHandlerContainerFinishedEvent(container31, ContainerType.APPLICATION_MASTER, 0));\r\n    ContainerId container32 = ContainerId.newContainerId(appAttemptId3, 2);\r\n    writeContainerLogs(app3LogDir, container32, fileNames, EMPTY_FILES);\r\n    logAggregationService.handle(new LogHandlerContainerFinishedEvent(container32, ContainerType.TASK, 1));\r\n    ContainerId container22 = ContainerId.newContainerId(appAttemptId2, 2);\r\n    writeContainerLogs(app2LogDir, container22, fileNames, EMPTY_FILES);\r\n    logAggregationService.handle(new LogHandlerContainerFinishedEvent(container22, ContainerType.TASK, 0));\r\n    ContainerId container33 = ContainerId.newContainerId(appAttemptId3, 3);\r\n    writeContainerLogs(app3LogDir, container33, fileNames, EMPTY_FILES);\r\n    logAggregationService.handle(new LogHandlerContainerFinishedEvent(container33, ContainerType.TASK, 0));\r\n    logAggregationService.handle(new LogHandlerAppFinishedEvent(application2));\r\n    logAggregationService.handle(new LogHandlerAppFinishedEvent(application3));\r\n    logAggregationService.handle(new LogHandlerAppFinishedEvent(application1));\r\n    logAggregationService.stop();\r\n    assertEquals(0, logAggregationService.getNumAggregators());\r\n    verifyContainerLogs(logAggregationService, application1, new ContainerId[] { container11, container12 }, fileNames, 4, false, EMPTY_FILES);\r\n    verifyContainerLogs(logAggregationService, application2, new ContainerId[] { container21 }, fileNames, 4, false, EMPTY_FILES);\r\n    verifyContainerLogs(logAggregationService, application3, new ContainerId[] { container31, container32 }, fileNames, 4, false, EMPTY_FILES);\r\n    dispatcher.await();\r\n    ApplicationEvent[] expectedFinishedEvents = new ApplicationEvent[] { new ApplicationEvent(application1, ApplicationEventType.APPLICATION_LOG_HANDLING_FINISHED), new ApplicationEvent(application2, ApplicationEventType.APPLICATION_LOG_HANDLING_FINISHED), new ApplicationEvent(application3, ApplicationEventType.APPLICATION_LOG_HANDLING_FINISHED) };\r\n    checkEvents(appEventHandler, expectedFinishedEvents, false, \"getType\", \"getApplicationID\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testVerifyAndCreateRemoteDirsFailure",
  "errType" : null,
  "containingMethodsNum" : 22,
  "sourceCodeText" : "void testVerifyAndCreateRemoteDirsFailure() throws Exception\n{\r\n    this.conf.set(YarnConfiguration.NM_LOG_DIRS, localLogDir.getAbsolutePath());\r\n    this.conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR, this.remoteRootLogDir.getAbsolutePath());\r\n    LogAggregationFileControllerFactory factory = new LogAggregationFileControllerFactory(conf);\r\n    LogAggregationFileController logAggregationFileFormat = factory.getFileControllerForWrite();\r\n    LogAggregationFileController spyLogAggregationFileFormat = spy(logAggregationFileFormat);\r\n    YarnRuntimeException e = new YarnRuntimeException(\"KABOOM!\");\r\n    doThrow(e).doNothing().when(spyLogAggregationFileFormat).verifyAndCreateRemoteLogDir();\r\n    LogAggregationService logAggregationService = spy(new LogAggregationService(dispatcher, this.context, this.delSrvc, super.dirsHandler) {\r\n\r\n        @Override\r\n        public LogAggregationFileController getLogAggregationFileController(Configuration conf) {\r\n            return spyLogAggregationFileFormat;\r\n        }\r\n    });\r\n    logAggregationService.init(this.conf);\r\n    logAggregationService.start();\r\n    ApplicationId appId = BuilderUtils.newApplicationId(System.currentTimeMillis(), (int) (Math.random() * 1000));\r\n    LogAggregationContext contextWithAMAndFailed = Records.newRecord(LogAggregationContext.class);\r\n    contextWithAMAndFailed.setLogAggregationPolicyClassName(AMOrFailedContainerLogAggregationPolicy.class.getName());\r\n    logAggregationService.handle(new LogHandlerAppStartedEvent(appId, this.user, null, this.acls, contextWithAMAndFailed));\r\n    dispatcher.await();\r\n    ApplicationEvent[] expectedEvents = new ApplicationEvent[] { new ApplicationEvent(appId, ApplicationEventType.APPLICATION_LOG_HANDLING_FAILED) };\r\n    checkEvents(appEventHandler, expectedEvents, false, \"getType\", \"getApplicationID\", \"getDiagnostic\");\r\n    Mockito.reset(logAggregationService);\r\n    ApplicationId appId2 = BuilderUtils.newApplicationId(System.currentTimeMillis(), (int) (Math.random() * 1000));\r\n    File appLogDir = new File(localLogDir, appId2.toString());\r\n    appLogDir.mkdir();\r\n    logAggregationService.handle(new LogHandlerAppStartedEvent(appId2, this.user, null, this.acls, contextWithAMAndFailed));\r\n    dispatcher.await();\r\n    expectedEvents = new ApplicationEvent[] { new ApplicationEvent(appId, ApplicationEventType.APPLICATION_LOG_HANDLING_FAILED), new ApplicationEvent(appId2, ApplicationEventType.APPLICATION_LOG_HANDLING_INITED) };\r\n    checkEvents(appEventHandler, expectedEvents, false, \"getType\", \"getApplicationID\", \"getDiagnostic\");\r\n    logAggregationService.stop();\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testVerifyAndCreateRemoteDirNonExistence",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testVerifyAndCreateRemoteDirNonExistence() throws Exception\n{\r\n    this.conf.set(YarnConfiguration.NM_LOG_DIRS, localLogDir.getAbsolutePath());\r\n    File aNewFile = new File(String.valueOf(\"tmp\" + System.currentTimeMillis()));\r\n    this.conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR, aNewFile.getAbsolutePath());\r\n    LogAggregationService logAggregationService = spy(new LogAggregationService(dispatcher, this.context, this.delSrvc, super.dirsHandler));\r\n    logAggregationService.init(this.conf);\r\n    logAggregationService.start();\r\n    boolean existsBefore = aNewFile.exists();\r\n    assertTrue(\"The new file already exists!\", !existsBefore);\r\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    LogAggregationContext contextWithAMAndFailed = Records.newRecord(LogAggregationContext.class);\r\n    contextWithAMAndFailed.setLogAggregationPolicyClassName(AMOrFailedContainerLogAggregationPolicy.class.getName());\r\n    logAggregationService.handle(new LogHandlerAppStartedEvent(appId, this.user, null, this.acls, contextWithAMAndFailed));\r\n    dispatcher.await();\r\n    boolean existsAfter = aNewFile.exists();\r\n    assertTrue(\"The new aggregate file is not successfully created\", existsAfter);\r\n    aNewFile.delete();\r\n    logAggregationService.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testRemoteRootLogDirIsCreatedWithCorrectGroupOwner",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testRemoteRootLogDirIsCreatedWithCorrectGroupOwner() throws IOException\n{\r\n    this.conf.set(YarnConfiguration.NM_LOG_DIRS, localLogDir.getAbsolutePath());\r\n    Path aNewFile = new Path(String.valueOf(\"tmp\" + System.currentTimeMillis()));\r\n    this.conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR, aNewFile.getName());\r\n    LogAggregationService logAggregationService = new LogAggregationService(dispatcher, this.context, this.delSrvc, super.dirsHandler);\r\n    logAggregationService.init(this.conf);\r\n    logAggregationService.start();\r\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    LogAggregationContext contextWithAMAndFailed = Records.newRecord(LogAggregationContext.class);\r\n    contextWithAMAndFailed.setLogAggregationPolicyClassName(AMOrFailedContainerLogAggregationPolicy.class.getName());\r\n    logAggregationService.handle(new LogHandlerAppStartedEvent(appId, this.user, null, this.acls, contextWithAMAndFailed));\r\n    dispatcher.await();\r\n    String targetGroup = UserGroupInformation.getLoginUser().getPrimaryGroupName();\r\n    FileSystem fs = FileSystem.get(this.conf);\r\n    FileStatus fileStatus = fs.getFileStatus(aNewFile);\r\n    Assert.assertEquals(\"The new aggregate file is not successfully created\", fileStatus.getGroup(), targetGroup);\r\n    fs.delete(aNewFile, true);\r\n    logAggregationService.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testAppLogDirCreation",
  "errType" : null,
  "containingMethodsNum" : 41,
  "sourceCodeText" : "void testAppLogDirCreation() throws Exception\n{\r\n    final String inputSuffix = \"logs-tfile\";\r\n    this.conf.set(YarnConfiguration.NM_LOG_DIRS, localLogDir.getAbsolutePath());\r\n    this.conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR, this.remoteRootLogDir.getAbsolutePath());\r\n    this.conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR_SUFFIX, \"logs\");\r\n    InlineDispatcher dispatcher = new InlineDispatcher();\r\n    dispatcher.init(this.conf);\r\n    dispatcher.start();\r\n    FileSystem fs = FileSystem.get(this.conf);\r\n    final FileSystem spyFs = spy(FileSystem.get(this.conf));\r\n    final LogAggregationTFileController spyFileFormat = new LogAggregationTFileController() {\r\n\r\n        @Override\r\n        public FileSystem getFileSystem(Configuration conf) throws IOException {\r\n            return spyFs;\r\n        }\r\n    };\r\n    spyFileFormat.initialize(conf, \"TFile\");\r\n    LogAggregationService aggSvc = new LogAggregationService(dispatcher, this.context, this.delSrvc, super.dirsHandler) {\r\n\r\n        @Override\r\n        public LogAggregationFileController getLogAggregationFileController(Configuration conf) {\r\n            return spyFileFormat;\r\n        }\r\n    };\r\n    aggSvc.init(this.conf);\r\n    aggSvc.start();\r\n    ApplicationId appId = BuilderUtils.newApplicationId(1, 1);\r\n    Path userDir = fs.makeQualified(new Path(remoteRootLogDir.getAbsolutePath(), this.user));\r\n    Path bucketDir = fs.makeQualified(LogAggregationUtils.getRemoteBucketDir(new Path(remoteRootLogDir.getAbsolutePath()), this.user, inputSuffix, appId));\r\n    Path suffixDir = bucketDir.getParent();\r\n    Path appDir = fs.makeQualified(LogAggregationUtils.getRemoteAppLogDir(new Path(remoteRootLogDir.getAbsolutePath()), appId, this.user, inputSuffix));\r\n    LogAggregationContext contextWithAllContainers = Records.newRecord(LogAggregationContext.class);\r\n    contextWithAllContainers.setLogAggregationPolicyClassName(AllContainerLogAggregationPolicy.class.getName());\r\n    aggSvc.handle(new LogHandlerAppStartedEvent(appId, this.user, null, this.acls, contextWithAllContainers));\r\n    verify(spyFs).mkdirs(eq(userDir), isA(FsPermission.class));\r\n    verify(spyFs).mkdirs(eq(suffixDir), isA(FsPermission.class));\r\n    verify(spyFs).mkdirs(eq(bucketDir), isA(FsPermission.class));\r\n    verify(spyFs).mkdirs(eq(appDir), isA(FsPermission.class));\r\n    ApplicationId appId2 = BuilderUtils.newApplicationId(1, 2);\r\n    Path appDir2 = fs.makeQualified(LogAggregationUtils.getRemoteAppLogDir(new Path(remoteRootLogDir.getAbsolutePath()), appId2, this.user, inputSuffix));\r\n    aggSvc.handle(new LogHandlerAppStartedEvent(appId2, this.user, null, this.acls, contextWithAllContainers));\r\n    verify(spyFs).mkdirs(eq(appDir2), isA(FsPermission.class));\r\n    ApplicationId appId3 = BuilderUtils.newApplicationId(2, 2);\r\n    Path appDir3 = fs.makeQualified(LogAggregationUtils.getRemoteAppLogDir(new Path(remoteRootLogDir.getAbsolutePath()), appId3, this.user, inputSuffix));\r\n    new File(appDir3.toUri().getPath()).mkdir();\r\n    aggSvc.handle(new LogHandlerAppStartedEvent(appId3, this.user, null, this.acls, contextWithAllContainers));\r\n    verify(spyFs, never()).mkdirs(eq(appDir3), isA(FsPermission.class));\r\n    ApplicationId appId4 = BuilderUtils.newApplicationId(2, 10003);\r\n    Path appDir4 = fs.makeQualified(LogAggregationUtils.getRemoteAppLogDir(new Path(remoteRootLogDir.getAbsolutePath()), appId4, this.user, inputSuffix));\r\n    Path bucketDir4 = appDir4.getParent();\r\n    new File(bucketDir4.toUri().getPath()).mkdir();\r\n    aggSvc.handle(new LogHandlerAppStartedEvent(appId4, this.user, null, this.acls, contextWithAllContainers));\r\n    verify(spyFs, never()).mkdirs(eq(bucketDir4), isA(FsPermission.class));\r\n    verify(spyFs).mkdirs(eq(appDir4), isA(FsPermission.class));\r\n    aggSvc.stop();\r\n    aggSvc.close();\r\n    dispatcher.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testLogAggregationInitAppFailsWithoutKillingNM",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testLogAggregationInitAppFailsWithoutKillingNM() throws Exception\n{\r\n    this.conf.set(YarnConfiguration.NM_LOG_DIRS, localLogDir.getAbsolutePath());\r\n    this.conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR, this.remoteRootLogDir.getAbsolutePath());\r\n    LogAggregationService logAggregationService = spy(new LogAggregationService(dispatcher, this.context, this.delSrvc, super.dirsHandler));\r\n    logAggregationService.init(this.conf);\r\n    logAggregationService.start();\r\n    ApplicationId appId = BuilderUtils.newApplicationId(System.currentTimeMillis(), (int) (Math.random() * 1000));\r\n    doThrow(new YarnRuntimeException(\"KABOOM!\")).when(logAggregationService).initAppAggregator(eq(appId), eq(user), any(), anyMap(), any(LogAggregationContext.class), anyLong());\r\n    LogAggregationContext contextWithAMAndFailed = Records.newRecord(LogAggregationContext.class);\r\n    contextWithAMAndFailed.setLogAggregationPolicyClassName(AMOrFailedContainerLogAggregationPolicy.class.getName());\r\n    logAggregationService.handle(new LogHandlerAppStartedEvent(appId, this.user, null, this.acls, contextWithAMAndFailed));\r\n    dispatcher.await();\r\n    ApplicationEvent[] expectedEvents = new ApplicationEvent[] { new ApplicationEvent(appId, ApplicationEventType.APPLICATION_LOG_HANDLING_FAILED) };\r\n    checkEvents(appEventHandler, expectedEvents, false, \"getType\", \"getApplicationID\", \"getDiagnostic\");\r\n    verify(logAggregationService, never()).closeFileSystems(any(UserGroupInformation.class));\r\n    logAggregationService.handle(new LogHandlerContainerFinishedEvent(BuilderUtils.newContainerId(4, 1, 1, 1), ContainerType.APPLICATION_MASTER, 0));\r\n    dispatcher.await();\r\n    logAggregationService.handle(new LogHandlerAppFinishedEvent(BuilderUtils.newApplicationId(1, 5)));\r\n    dispatcher.await();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testLogAggregationCreateDirsFailsWithoutKillingNM",
  "errType" : null,
  "containingMethodsNum" : 33,
  "sourceCodeText" : "void testLogAggregationCreateDirsFailsWithoutKillingNM() throws Exception\n{\r\n    this.conf.set(YarnConfiguration.NM_LOG_DIRS, localLogDir.getAbsolutePath());\r\n    this.conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR, this.remoteRootLogDir.getAbsolutePath());\r\n    DeletionService spyDelSrvc = spy(this.delSrvc);\r\n    LogAggregationFileControllerFactory factory = new LogAggregationFileControllerFactory(conf);\r\n    LogAggregationFileController logAggregationFileFormat = factory.getFileControllerForWrite();\r\n    LogAggregationFileController spyLogAggregationFileFormat = spy(logAggregationFileFormat);\r\n    Exception e = new YarnRuntimeException(new SecretManager.InvalidToken(\"KABOOM!\"));\r\n    doThrow(e).when(spyLogAggregationFileFormat).createAppDir(any(String.class), any(ApplicationId.class), any(UserGroupInformation.class));\r\n    LogAggregationService logAggregationService = spy(new LogAggregationService(dispatcher, this.context, spyDelSrvc, super.dirsHandler) {\r\n\r\n        @Override\r\n        public LogAggregationFileController getLogAggregationFileController(Configuration conf) {\r\n            return spyLogAggregationFileFormat;\r\n        }\r\n    });\r\n    logAggregationService.init(this.conf);\r\n    logAggregationService.start();\r\n    ApplicationId appId = BuilderUtils.newApplicationId(System.currentTimeMillis(), (int) (Math.random() * 1000));\r\n    File appLogDir = new File(localLogDir, appId.toString());\r\n    appLogDir.mkdir();\r\n    LogAggregationContext contextWithAMAndFailed = Records.newRecord(LogAggregationContext.class);\r\n    contextWithAMAndFailed.setLogAggregationPolicyClassName(AMOrFailedContainerLogAggregationPolicy.class.getName());\r\n    logAggregationService.handle(new LogHandlerAppStartedEvent(appId, this.user, null, this.acls, contextWithAMAndFailed));\r\n    dispatcher.await();\r\n    ApplicationEvent[] expectedEvents = new ApplicationEvent[] { new ApplicationEvent(appId, ApplicationEventType.APPLICATION_LOG_HANDLING_FAILED) };\r\n    checkEvents(appEventHandler, expectedEvents, false, \"getType\", \"getApplicationID\", \"getDiagnostic\");\r\n    assertThat(logAggregationService.getInvalidTokenApps()).hasSize(1);\r\n    logAggregationService.handle(new LogHandlerContainerFinishedEvent(BuilderUtils.newContainerId(4, 1, 1, 1), ContainerType.APPLICATION_MASTER, 0));\r\n    dispatcher.await();\r\n    AppLogAggregator appAgg = logAggregationService.getAppLogAggregators().get(appId);\r\n    Assert.assertFalse(\"Aggregation should be disabled\", appAgg.isAggregationEnabled());\r\n    logAggregationService.handle(new LogHandlerTokenUpdatedEvent());\r\n    dispatcher.await();\r\n    appAgg = logAggregationService.getAppLogAggregators().get(appId);\r\n    Assert.assertFalse(\"Aggregation should be enabled\", appAgg.isAggregationEnabled());\r\n    Assert.assertEquals(0, logAggregationService.getInvalidTokenApps().size());\r\n    logAggregationService.handle(new LogHandlerAppFinishedEvent(BuilderUtils.newApplicationId(1, 5)));\r\n    dispatcher.await();\r\n    logAggregationService.stop();\r\n    assertEquals(0, logAggregationService.getNumAggregators());\r\n    verify(spyDelSrvc).delete(any(FileDeletionTask.class));\r\n    verify(logAggregationService).closeFileSystems(any(UserGroupInformation.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "writeContainerLogs",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void writeContainerLogs(File appLogDir, ContainerId containerId, String[] fileName, String[] emptyFiles) throws IOException\n{\r\n    String containerStr = containerId.toString();\r\n    File containerLogDir = new File(appLogDir, containerStr);\r\n    boolean created = containerLogDir.mkdirs();\r\n    LOG.info(\"Created Dir:\" + containerLogDir.getAbsolutePath() + \" status :\" + created);\r\n    for (String fileType : fileName) {\r\n        Writer writer11 = new FileWriter(new File(containerLogDir, fileType));\r\n        writer11.write(containerStr + \" Hello \" + fileType + \"!\");\r\n        writer11.close();\r\n    }\r\n    for (String emptyFile : emptyFiles) {\r\n        Writer writer11 = new FileWriter(new File(containerLogDir, emptyFile));\r\n        writer11.write(\"\");\r\n        writer11.close();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "verifyContainerLogs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LogFileStatusInLastCycle verifyContainerLogs(LogAggregationService logAggregationService, ApplicationId appId, ContainerId[] expectedContainerIds, String[] logFiles, int numOfLogsPerContainer, boolean multiLogs, String[] zeroLengthFiles) throws IOException\n{\r\n    return verifyContainerLogs(logAggregationService, appId, expectedContainerIds, expectedContainerIds.length, expectedContainerIds.length, logFiles, numOfLogsPerContainer, multiLogs, zeroLengthFiles);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "verifyContainerLogs",
  "errType" : [ "FileNotFoundException", "EOFException" ],
  "containingMethodsNum" : 52,
  "sourceCodeText" : "LogFileStatusInLastCycle verifyContainerLogs(LogAggregationService logAggregationService, ApplicationId appId, ContainerId[] expectedContainerIds, int minNumOfContainers, int maxNumOfContainers, String[] logFiles, int numOfLogsPerContainer, boolean multiLogs, String[] zeroLengthLogFiles) throws IOException\n{\r\n    Path appLogDir = logAggregationService.getLogAggregationFileController(conf).getRemoteAppLogDir(appId, this.user);\r\n    RemoteIterator<FileStatus> nodeFiles = null;\r\n    try {\r\n        Path qualifiedLogDir = FileContext.getFileContext(this.conf).makeQualified(appLogDir);\r\n        nodeFiles = FileContext.getFileContext(qualifiedLogDir.toUri(), this.conf).listStatus(appLogDir);\r\n    } catch (FileNotFoundException fnf) {\r\n        Assert.fail(\"Should have log files\");\r\n    }\r\n    if (numOfLogsPerContainer == 0) {\r\n        Assert.assertTrue(!nodeFiles.hasNext());\r\n        return null;\r\n    }\r\n    Assert.assertTrue(nodeFiles.hasNext());\r\n    FileStatus targetNodeFile = null;\r\n    if (!multiLogs) {\r\n        targetNodeFile = nodeFiles.next();\r\n        Assert.assertTrue(targetNodeFile.getPath().getName().equals(LogAggregationUtils.getNodeString(logAggregationService.getNodeId())));\r\n    } else {\r\n        long fileCreateTime = 0;\r\n        while (nodeFiles.hasNext()) {\r\n            FileStatus nodeFile = nodeFiles.next();\r\n            if (!nodeFile.getPath().getName().contains(LogAggregationUtils.TMP_FILE_SUFFIX)) {\r\n                long time = Long.parseLong(nodeFile.getPath().getName().split(\"_\")[2]);\r\n                if (time > fileCreateTime) {\r\n                    targetNodeFile = nodeFile;\r\n                    fileCreateTime = time;\r\n                }\r\n            }\r\n        }\r\n        String[] fileName = targetNodeFile.getPath().getName().split(\"_\");\r\n        Assert.assertTrue(fileName.length == 3);\r\n        Assert.assertEquals(fileName[0] + \":\" + fileName[1], logAggregationService.getNodeId().toString());\r\n    }\r\n    AggregatedLogFormat.LogReader reader = new AggregatedLogFormat.LogReader(this.conf, targetNodeFile.getPath());\r\n    Assert.assertEquals(this.user, reader.getApplicationOwner());\r\n    verifyAcls(reader.getApplicationAcls());\r\n    List<String> fileTypes = new ArrayList<String>();\r\n    try {\r\n        Map<String, Map<String, String>> logMap = new HashMap<String, Map<String, String>>();\r\n        DataInputStream valueStream;\r\n        LogKey key = new LogKey();\r\n        valueStream = reader.next(key);\r\n        while (valueStream != null) {\r\n            LOG.info(\"Found container \" + key.toString());\r\n            Map<String, String> perContainerMap = new HashMap<String, String>();\r\n            logMap.put(key.toString(), perContainerMap);\r\n            while (true) {\r\n                try {\r\n                    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n                    PrintStream ps = new PrintStream(baos);\r\n                    LogReader.readAContainerLogsForALogType(valueStream, ps);\r\n                    String[] writtenLines = baos.toString().split(System.getProperty(\"line.separator\"));\r\n                    Assert.assertEquals(\"LogType:\", writtenLines[0].substring(0, 8));\r\n                    String fileType = writtenLines[0].substring(8);\r\n                    fileTypes.add(fileType);\r\n                    Assert.assertEquals(\"LogLength:\", writtenLines[1].substring(0, 10));\r\n                    String fileLengthStr = writtenLines[1].substring(10);\r\n                    long fileLength = Long.parseLong(fileLengthStr);\r\n                    Assert.assertEquals(\"Log Contents:\", writtenLines[2].substring(0, 13));\r\n                    String logContents = StringUtils.join(Arrays.copyOfRange(writtenLines, 3, writtenLines.length), \"\\n\");\r\n                    perContainerMap.put(fileType, logContents);\r\n                    LOG.info(\"LogType:\" + fileType);\r\n                    LOG.info(\"LogLength:\" + fileLength);\r\n                    LOG.info(\"Log Contents:\\n\" + perContainerMap.get(fileType));\r\n                } catch (EOFException eof) {\r\n                    break;\r\n                }\r\n            }\r\n            key = new LogKey();\r\n            valueStream = reader.next(key);\r\n        }\r\n        Assert.assertTrue(\"number of containers with logs should be at least \" + minNumOfContainers, logMap.size() >= minNumOfContainers);\r\n        Assert.assertTrue(\"number of containers with logs should be at most \" + minNumOfContainers, logMap.size() <= maxNumOfContainers);\r\n        for (ContainerId cId : expectedContainerIds) {\r\n            String containerStr = cId.toString();\r\n            Map<String, String> thisContainerMap = logMap.remove(containerStr);\r\n            Assert.assertEquals(numOfLogsPerContainer, thisContainerMap.size());\r\n            for (String fileType : logFiles) {\r\n                String expectedValue = containerStr + \" Hello \" + fileType + \"!\\nEnd of LogType:\" + fileType;\r\n                LOG.info(\"Expected log-content : \" + new String(expectedValue));\r\n                String foundValue = thisContainerMap.remove(fileType);\r\n                Assert.assertNotNull(cId + \" \" + fileType + \" not present in aggregated log-file!\", foundValue);\r\n                Assert.assertEquals(expectedValue, foundValue);\r\n            }\r\n            for (String emptyFile : zeroLengthLogFiles) {\r\n                String foundValue = thisContainerMap.remove(emptyFile);\r\n                String expectedValue = \"\\nEnd of LogType:\" + emptyFile;\r\n                Assert.assertEquals(expectedValue, foundValue);\r\n            }\r\n            Assert.assertEquals(0, thisContainerMap.size());\r\n        }\r\n        Assert.assertTrue(\"number of remaining containers should be at least \" + (minNumOfContainers - expectedContainerIds.length), logMap.size() >= minNumOfContainers - expectedContainerIds.length);\r\n        Assert.assertTrue(\"number of remaining containers should be at most \" + (maxNumOfContainers - expectedContainerIds.length), logMap.size() <= maxNumOfContainers - expectedContainerIds.length);\r\n        return new LogFileStatusInLastCycle(targetNodeFile.getPath().getName(), fileTypes);\r\n    } finally {\r\n        reader.close();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 3,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testLogAggregationForRealContainerLaunch",
  "errType" : null,
  "containingMethodsNum" : 28,
  "sourceCodeText" : "void testLogAggregationForRealContainerLaunch() throws IOException, InterruptedException, YarnException\n{\r\n    this.containerManager.start();\r\n    File scriptFile = new File(tmpDir, \"scriptFile.sh\");\r\n    PrintWriter fileWriter = new PrintWriter(scriptFile);\r\n    fileWriter.write(\"\\necho Hello World! Stdout! > \" + new File(localLogDir, \"stdout\"));\r\n    fileWriter.write(\"\\necho Hello World! Stderr! > \" + new File(localLogDir, \"stderr\"));\r\n    fileWriter.write(\"\\necho Hello World! Syslog! > \" + new File(localLogDir, \"syslog\"));\r\n    fileWriter.close();\r\n    ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class);\r\n    ApplicationId appId = ApplicationId.newInstance(0, 0);\r\n    ApplicationAttemptId appAttemptId = BuilderUtils.newApplicationAttemptId(appId, 1);\r\n    ContainerId cId = BuilderUtils.newContainerId(appAttemptId, 0);\r\n    URL resource_alpha = URL.fromPath(localFS.makeQualified(new Path(scriptFile.getAbsolutePath())));\r\n    LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class);\r\n    rsrc_alpha.setResource(resource_alpha);\r\n    rsrc_alpha.setSize(-1);\r\n    rsrc_alpha.setVisibility(LocalResourceVisibility.APPLICATION);\r\n    rsrc_alpha.setType(LocalResourceType.FILE);\r\n    rsrc_alpha.setTimestamp(scriptFile.lastModified());\r\n    String destinationFile = \"dest_file\";\r\n    Map<String, LocalResource> localResources = new HashMap<String, LocalResource>();\r\n    localResources.put(destinationFile, rsrc_alpha);\r\n    containerLaunchContext.setLocalResources(localResources);\r\n    List<String> commands = new ArrayList<String>();\r\n    commands.add(\"/bin/bash\");\r\n    commands.add(scriptFile.getAbsolutePath());\r\n    containerLaunchContext.setCommands(commands);\r\n    StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, TestContainerManager.createContainerToken(cId, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager()));\r\n    List<StartContainerRequest> list = new ArrayList<StartContainerRequest>();\r\n    list.add(scRequest);\r\n    StartContainersRequest allRequests = StartContainersRequest.newInstance(list);\r\n    this.containerManager.startContainers(allRequests);\r\n    BaseContainerManagerTest.waitForContainerState(this.containerManager, cId, ContainerState.COMPLETE);\r\n    this.containerManager.handle(new CMgrCompletedAppsEvent(Arrays.asList(appId), CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN));\r\n    this.containerManager.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "verifyAcls",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void verifyAcls(Map<ApplicationAccessType, String> logAcls)\n{\r\n    Assert.assertEquals(this.acls.size(), logAcls.size());\r\n    for (ApplicationAccessType appAccessType : this.acls.keySet()) {\r\n        Assert.assertEquals(this.acls.get(appAccessType), logAcls.get(appAccessType));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "createDispatcher",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "DrainDispatcher createDispatcher()\n{\r\n    DrainDispatcher dispatcher = new DrainDispatcher();\r\n    dispatcher.init(this.conf);\r\n    dispatcher.start();\r\n    return dispatcher;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "createAppAcls",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Map<ApplicationAccessType, String> createAppAcls()\n{\r\n    Map<ApplicationAccessType, String> appAcls = new HashMap<ApplicationAccessType, String>();\r\n    appAcls.put(ApplicationAccessType.MODIFY_APP, \"user group\");\r\n    appAcls.put(ApplicationAccessType.VIEW_APP, \"*\");\r\n    return appAcls;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testFixedSizeThreadPool",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 22,
  "sourceCodeText" : "void testFixedSizeThreadPool() throws Exception\n{\r\n    int initThreadPoolSize = conf.getInt(YarnConfiguration.NM_LOG_AGGREGATION_THREAD_POOL_SIZE, YarnConfiguration.DEFAULT_NM_LOG_AGGREGATION_THREAD_POOL_SIZE);\r\n    int threadPoolSize = 3;\r\n    conf.setInt(YarnConfiguration.NM_LOG_AGGREGATION_THREAD_POOL_SIZE, threadPoolSize);\r\n    DeletionService delSrvc = mock(DeletionService.class);\r\n    LocalDirsHandlerService dirSvc = mock(LocalDirsHandlerService.class);\r\n    when(dirSvc.getLogDirs()).thenThrow(new RuntimeException());\r\n    LogAggregationService logAggregationService = new LogAggregationService(dispatcher, this.context, delSrvc, dirSvc);\r\n    logAggregationService.init(this.conf);\r\n    logAggregationService.start();\r\n    ExecutorService executorService = logAggregationService.threadPool;\r\n    CountDownLatch latch = new CountDownLatch(threadPoolSize);\r\n    final ReadWriteLock rwLock = new ReentrantReadWriteLock();\r\n    final Lock rLock = rwLock.readLock();\r\n    final Lock wLock = rwLock.writeLock();\r\n    wLock.lock();\r\n    try {\r\n        Runnable runnable = new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                try {\r\n                    latch.countDown();\r\n                    rLock.tryLock(15000, TimeUnit.MILLISECONDS);\r\n                } catch (InterruptedException e) {\r\n                    e.printStackTrace();\r\n                } finally {\r\n                    rLock.unlock();\r\n                }\r\n            }\r\n        };\r\n        for (int i = 0; i < threadPoolSize + 1; i++) {\r\n            executorService.submit(runnable);\r\n        }\r\n        latch.await();\r\n        int runningThread = ((ThreadPoolExecutor) executorService).getActiveCount();\r\n        assertEquals(threadPoolSize, runningThread);\r\n    } finally {\r\n        wLock.unlock();\r\n    }\r\n    logAggregationService.stop();\r\n    logAggregationService.close();\r\n    conf.setInt(YarnConfiguration.NM_LOG_AGGREGATION_THREAD_POOL_SIZE, initThreadPoolSize);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testInvalidThreadPoolSizeNaN",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testInvalidThreadPoolSizeNaN() throws IOException\n{\r\n    testInvalidThreadPoolSizeValue(\"NaN\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testInvalidThreadPoolSizeNegative",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testInvalidThreadPoolSizeNegative() throws IOException\n{\r\n    testInvalidThreadPoolSizeValue(\"-100\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testInvalidThreadPoolSizeXLarge",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testInvalidThreadPoolSizeXLarge() throws IOException\n{\r\n    testInvalidThreadPoolSizeValue(\"11111111111\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testInvalidThreadPoolSizeValue",
  "errType" : [ "NumberFormatException" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testInvalidThreadPoolSizeValue(final String threadPoolSize) throws IOException\n{\r\n    Supplier<Boolean> isInputInvalid = new Supplier<Boolean>() {\r\n\r\n        @Override\r\n        public Boolean get() {\r\n            try {\r\n                int value = Integer.parseInt(threadPoolSize);\r\n                return value <= 0;\r\n            } catch (NumberFormatException ex) {\r\n                return true;\r\n            }\r\n        }\r\n    };\r\n    assertTrue(\"The thread pool size must be invalid to use with this \" + \"method\", isInputInvalid.get());\r\n    int initThreadPoolSize = conf.getInt(YarnConfiguration.NM_LOG_AGGREGATION_THREAD_POOL_SIZE, YarnConfiguration.DEFAULT_NM_LOG_AGGREGATION_THREAD_POOL_SIZE);\r\n    conf.set(YarnConfiguration.NM_LOG_AGGREGATION_THREAD_POOL_SIZE, threadPoolSize);\r\n    DeletionService delSrvc = mock(DeletionService.class);\r\n    LocalDirsHandlerService dirSvc = mock(LocalDirsHandlerService.class);\r\n    when(dirSvc.getLogDirs()).thenThrow(new RuntimeException());\r\n    LogAggregationService logAggregationService = new LogAggregationService(dispatcher, this.context, delSrvc, dirSvc);\r\n    logAggregationService.init(this.conf);\r\n    logAggregationService.start();\r\n    ThreadPoolExecutor executorService = (ThreadPoolExecutor) logAggregationService.threadPool;\r\n    assertEquals(\"The thread pool size should be set to the value of YARN\" + \".DEFAULT_NM_LOG_AGGREGATION_THREAD_POOL_SIZE because the configured \" + \" thread pool size is \" + \"invalid.\", YarnConfiguration.DEFAULT_NM_LOG_AGGREGATION_THREAD_POOL_SIZE, executorService.getMaximumPoolSize());\r\n    logAggregationService.stop();\r\n    logAggregationService.close();\r\n    conf.setInt(YarnConfiguration.NM_LOG_AGGREGATION_THREAD_POOL_SIZE, initThreadPoolSize);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testStopAfterError",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testStopAfterError() throws Exception\n{\r\n    DeletionService delSrvc = mock(DeletionService.class);\r\n    LocalDirsHandlerService mockedDirSvc = mock(LocalDirsHandlerService.class);\r\n    when(mockedDirSvc.getLogDirs()).thenThrow(new RuntimeException());\r\n    LogAggregationService logAggregationService = new LogAggregationService(dispatcher, this.context, delSrvc, mockedDirSvc);\r\n    logAggregationService.init(this.conf);\r\n    logAggregationService.start();\r\n    ApplicationId application1 = BuilderUtils.newApplicationId(1234, 1);\r\n    LogAggregationContext contextWithAllContainers = Records.newRecord(LogAggregationContext.class);\r\n    contextWithAllContainers.setLogAggregationPolicyClassName(AllContainerLogAggregationPolicy.class.getName());\r\n    logAggregationService.handle(new LogHandlerAppStartedEvent(application1, this.user, null, this.acls, contextWithAllContainers));\r\n    logAggregationService.stop();\r\n    assertEquals(0, logAggregationService.getNumAggregators());\r\n    logAggregationService.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testLogAggregatorCleanup",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testLogAggregatorCleanup() throws Exception\n{\r\n    DeletionService delSrvc = mock(DeletionService.class);\r\n    LocalDirsHandlerService mockedDirSvc = mock(LocalDirsHandlerService.class);\r\n    LogAggregationService logAggregationService = new LogAggregationService(dispatcher, this.context, delSrvc, mockedDirSvc);\r\n    logAggregationService.init(this.conf);\r\n    logAggregationService.start();\r\n    ApplicationId application1 = BuilderUtils.newApplicationId(1234, 1);\r\n    logAggregationService.handle(new LogHandlerAppStartedEvent(application1, this.user, null, this.acls));\r\n    logAggregationService.handle(new LogHandlerAppFinishedEvent(application1));\r\n    dispatcher.await();\r\n    int timeToWait = 20 * 1000;\r\n    while (timeToWait > 0 && logAggregationService.getNumAggregators() > 0) {\r\n        Thread.sleep(100);\r\n        timeToWait -= 100;\r\n    }\r\n    Assert.assertEquals(\"Log aggregator failed to cleanup!\", 0, logAggregationService.getNumAggregators());\r\n    logAggregationService.stop();\r\n    logAggregationService.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "checkEvents",
  "errType" : [ "Throwable", "Throwable", "Throwable", "Throwable" ],
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void checkEvents(EventHandler<T> eventHandler, T[] expectedEvents, boolean inOrder, String... methods) throws Exception\n{\r\n    Class<T> genericClass = (Class<T>) expectedEvents.getClass().getComponentType();\r\n    ArgumentCaptor<T> eventCaptor = ArgumentCaptor.forClass(genericClass);\r\n    verify(eventHandler, atLeast(0)).handle(eventCaptor.capture());\r\n    List<T> actualEvents = eventCaptor.getAllValues();\r\n    MultiException failures = new MultiException();\r\n    try {\r\n        assertEquals(\"expected events\", expectedEvents.length, actualEvents.size());\r\n    } catch (Throwable e) {\r\n        failures.add(e);\r\n    }\r\n    if (inOrder) {\r\n        int len = Math.max(expectedEvents.length, actualEvents.size());\r\n        for (int n = 0; n < len; n++) {\r\n            try {\r\n                String expect = (n < expectedEvents.length) ? eventToString(expectedEvents[n], methods) : null;\r\n                String actual = (n < actualEvents.size()) ? eventToString(actualEvents.get(n), methods) : null;\r\n                assertEquals(\"event#\" + n, expect, actual);\r\n            } catch (Throwable e) {\r\n                failures.add(e);\r\n            }\r\n        }\r\n    } else {\r\n        Set<String> expectedSet = new HashSet<String>();\r\n        for (T expectedEvent : expectedEvents) {\r\n            expectedSet.add(eventToString(expectedEvent, methods));\r\n        }\r\n        for (T actualEvent : actualEvents) {\r\n            try {\r\n                String actual = eventToString(actualEvent, methods);\r\n                assertTrue(\"unexpected event: \" + actual, expectedSet.remove(actual));\r\n            } catch (Throwable e) {\r\n                failures.add(e);\r\n            }\r\n        }\r\n        for (String expected : expectedSet) {\r\n            try {\r\n                Assert.fail(\"missing event: \" + expected);\r\n            } catch (Throwable e) {\r\n                failures.add(e);\r\n            }\r\n        }\r\n    }\r\n    failures.ifExceptionThrow();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 4,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "eventToString",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "String eventToString(Event<?> event, String[] methods) throws Exception\n{\r\n    StringBuilder sb = new StringBuilder(\"[ \");\r\n    for (String m : methods) {\r\n        try {\r\n            Method method = event.getClass().getMethod(m);\r\n            String value = method.invoke(event).toString();\r\n            sb.append(method.getName()).append(\"=\").append(value).append(\" \");\r\n        } catch (Exception e) {\r\n        }\r\n    }\r\n    sb.append(\"]\");\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testFailedDirsLocalFileDeletionAfterUpload",
  "errType" : null,
  "containingMethodsNum" : 23,
  "sourceCodeText" : "void testFailedDirsLocalFileDeletionAfterUpload() throws Exception\n{\r\n    DeletionService mockDelService = mock(DeletionService.class);\r\n    File[] localLogDirs = TestNonAggregatingLogHandler.getLocalLogDirFiles(this.getClass().getName(), 7);\r\n    final List<String> localLogDirPaths = new ArrayList<String>(localLogDirs.length);\r\n    for (int i = 0; i < localLogDirs.length; i++) {\r\n        localLogDirPaths.add(localLogDirs[i].getAbsolutePath());\r\n    }\r\n    String localLogDirsString = StringUtils.join(localLogDirPaths, \",\");\r\n    this.conf.set(YarnConfiguration.NM_LOG_DIRS, localLogDirsString);\r\n    this.conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR, this.remoteRootLogDir.getAbsolutePath());\r\n    this.conf.setLong(YarnConfiguration.NM_DISK_HEALTH_CHECK_INTERVAL_MS, 500);\r\n    ApplicationId application1 = BuilderUtils.newApplicationId(1234, 1);\r\n    ApplicationAttemptId appAttemptId = BuilderUtils.newApplicationAttemptId(application1, 1);\r\n    this.dirsHandler = new LocalDirsHandlerService();\r\n    LocalDirsHandlerService mockDirsHandler = mock(LocalDirsHandlerService.class);\r\n    LogAggregationService logAggregationService = spy(new LogAggregationService(dispatcher, this.context, mockDelService, mockDirsHandler));\r\n    AbstractFileSystem spylfs = spy(FileContext.getLocalFSFileContext().getDefaultFileSystem());\r\n    FileContext lfs = FileContext.getFileContext(spylfs, conf);\r\n    doReturn(lfs).when(logAggregationService).getLocalFileContext(isA(Configuration.class));\r\n    logAggregationService.init(this.conf);\r\n    logAggregationService.start();\r\n    TestNonAggregatingLogHandler.runMockedFailedDirs(logAggregationService, application1, user, mockDelService, mockDirsHandler, conf, spylfs, lfs, localLogDirs);\r\n    logAggregationService.stop();\r\n    assertEquals(0, logAggregationService.getNumAggregators());\r\n    verify(logAggregationService).closeFileSystems(any(UserGroupInformation.class));\r\n    ApplicationEvent[] expectedEvents = new ApplicationEvent[] { new ApplicationEvent(appAttemptId.getApplicationId(), ApplicationEventType.APPLICATION_LOG_HANDLING_INITED), new ApplicationEvent(appAttemptId.getApplicationId(), ApplicationEventType.APPLICATION_LOG_HANDLING_FINISHED) };\r\n    checkEvents(appEventHandler, expectedEvents, true, \"getType\", \"getApplicationID\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testLogAggregationServiceWithPatterns",
  "errType" : null,
  "containingMethodsNum" : 70,
  "sourceCodeText" : "void testLogAggregationServiceWithPatterns() throws Exception\n{\r\n    LogAggregationContext logAggregationContextWithIncludePatterns = Records.newRecord(LogAggregationContext.class);\r\n    String includePattern = \"stdout|syslog\";\r\n    logAggregationContextWithIncludePatterns.setIncludePattern(includePattern);\r\n    LogAggregationContext LogAggregationContextWithExcludePatterns = Records.newRecord(LogAggregationContext.class);\r\n    String excludePattern = \"stdout|syslog\";\r\n    LogAggregationContextWithExcludePatterns.setExcludePattern(excludePattern);\r\n    this.conf.set(YarnConfiguration.NM_LOG_DIRS, localLogDir.getAbsolutePath());\r\n    this.conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR, this.remoteRootLogDir.getAbsolutePath());\r\n    ApplicationId application1 = BuilderUtils.newApplicationId(1234, 1);\r\n    ApplicationId application2 = BuilderUtils.newApplicationId(1234, 2);\r\n    ApplicationId application3 = BuilderUtils.newApplicationId(1234, 3);\r\n    ApplicationId application4 = BuilderUtils.newApplicationId(1234, 4);\r\n    Application mockApp = mock(Application.class);\r\n    when(mockApp.getContainers()).thenReturn(new HashMap<ContainerId, Container>());\r\n    this.context.getApplications().put(application1, mockApp);\r\n    this.context.getApplications().put(application2, mockApp);\r\n    this.context.getApplications().put(application3, mockApp);\r\n    this.context.getApplications().put(application4, mockApp);\r\n    LogAggregationService logAggregationService = new LogAggregationService(dispatcher, this.context, this.delSrvc, super.dirsHandler);\r\n    logAggregationService.init(this.conf);\r\n    logAggregationService.start();\r\n    File appLogDir1 = new File(localLogDir, application1.toString());\r\n    appLogDir1.mkdir();\r\n    logAggregationService.handle(new LogHandlerAppStartedEvent(application1, this.user, null, this.acls, logAggregationContextWithIncludePatterns));\r\n    ApplicationAttemptId appAttemptId1 = BuilderUtils.newApplicationAttemptId(application1, 1);\r\n    ContainerId container1 = ContainerId.newContainerId(appAttemptId1, 1);\r\n    writeContainerLogs(appLogDir1, container1, new String[] { \"stdout\", \"stderr\", \"syslog\" }, EMPTY_FILES);\r\n    logAggregationService.handle(new LogHandlerContainerFinishedEvent(container1, ContainerType.APPLICATION_MASTER, 0));\r\n    ApplicationAttemptId appAttemptId2 = BuilderUtils.newApplicationAttemptId(application2, 1);\r\n    File app2LogDir = new File(localLogDir, application2.toString());\r\n    app2LogDir.mkdir();\r\n    LogAggregationContextWithExcludePatterns.setLogAggregationPolicyClassName(AMOnlyLogAggregationPolicy.class.getName());\r\n    logAggregationService.handle(new LogHandlerAppStartedEvent(application2, this.user, null, this.acls, LogAggregationContextWithExcludePatterns));\r\n    ContainerId container2 = ContainerId.newContainerId(appAttemptId2, 1);\r\n    writeContainerLogs(app2LogDir, container2, new String[] { \"stdout\", \"stderr\", \"syslog\" }, EMPTY_FILES);\r\n    logAggregationService.handle(new LogHandlerContainerFinishedEvent(container2, ContainerType.APPLICATION_MASTER, 0));\r\n    LogAggregationContext context1 = Records.newRecord(LogAggregationContext.class);\r\n    context1.setIncludePattern(\".*.log\");\r\n    context1.setExcludePattern(\"sys.log|std.log\");\r\n    ApplicationAttemptId appAttemptId3 = BuilderUtils.newApplicationAttemptId(application3, 1);\r\n    File app3LogDir = new File(localLogDir, application3.toString());\r\n    app3LogDir.mkdir();\r\n    context1.setLogAggregationPolicyClassName(AMOnlyLogAggregationPolicy.class.getName());\r\n    logAggregationService.handle(new LogHandlerAppStartedEvent(application3, this.user, null, this.acls, context1));\r\n    ContainerId container3 = ContainerId.newContainerId(appAttemptId3, 1);\r\n    writeContainerLogs(app3LogDir, container3, new String[] { \"stdout\", \"sys.log\", \"std.log\", \"out.log\", \"err.log\", \"log\" }, EMPTY_FILES);\r\n    logAggregationService.handle(new LogHandlerContainerFinishedEvent(container3, ContainerType.APPLICATION_MASTER, 0));\r\n    LogAggregationContext context2 = Records.newRecord(LogAggregationContext.class);\r\n    context2.setIncludePattern(\"sys.log|std.log\");\r\n    context2.setExcludePattern(\"std.log\");\r\n    ApplicationAttemptId appAttemptId4 = BuilderUtils.newApplicationAttemptId(application4, 1);\r\n    File app4LogDir = new File(localLogDir, application4.toString());\r\n    app4LogDir.mkdir();\r\n    context2.setLogAggregationPolicyClassName(AMOnlyLogAggregationPolicy.class.getName());\r\n    logAggregationService.handle(new LogHandlerAppStartedEvent(application4, this.user, null, this.acls, context2));\r\n    ContainerId container4 = ContainerId.newContainerId(appAttemptId4, 1);\r\n    writeContainerLogs(app4LogDir, container4, new String[] { \"stdout\", \"sys.log\", \"std.log\", \"out.log\", \"err.log\", \"log\" }, EMPTY_FILES);\r\n    logAggregationService.handle(new LogHandlerContainerFinishedEvent(container4, ContainerType.APPLICATION_MASTER, 0));\r\n    dispatcher.await();\r\n    ApplicationEvent[] expectedInitEvents = new ApplicationEvent[] { new ApplicationEvent(application1, ApplicationEventType.APPLICATION_LOG_HANDLING_INITED), new ApplicationEvent(application2, ApplicationEventType.APPLICATION_LOG_HANDLING_INITED), new ApplicationEvent(application3, ApplicationEventType.APPLICATION_LOG_HANDLING_INITED), new ApplicationEvent(application4, ApplicationEventType.APPLICATION_LOG_HANDLING_INITED) };\r\n    checkEvents(appEventHandler, expectedInitEvents, false, \"getType\", \"getApplicationID\");\r\n    reset(appEventHandler);\r\n    logAggregationService.handle(new LogHandlerAppFinishedEvent(application1));\r\n    logAggregationService.handle(new LogHandlerAppFinishedEvent(application2));\r\n    logAggregationService.handle(new LogHandlerAppFinishedEvent(application3));\r\n    logAggregationService.handle(new LogHandlerAppFinishedEvent(application4));\r\n    logAggregationService.stop();\r\n    assertEquals(0, logAggregationService.getNumAggregators());\r\n    String[] logFiles = new String[] { \"stdout\", \"syslog\" };\r\n    verifyContainerLogs(logAggregationService, application1, new ContainerId[] { container1 }, logFiles, 2, false, new String[] {});\r\n    logFiles = new String[] { \"stderr\" };\r\n    verifyContainerLogs(logAggregationService, application2, new ContainerId[] { container2 }, logFiles, 2, false, EMPTY_FILES);\r\n    logFiles = new String[] { \"out.log\", \"err.log\" };\r\n    verifyContainerLogs(logAggregationService, application3, new ContainerId[] { container3 }, logFiles, 2, false, new String[] {});\r\n    logFiles = new String[] { \"sys.log\" };\r\n    verifyContainerLogs(logAggregationService, application4, new ContainerId[] { container4 }, logFiles, 1, false, new String[] {});\r\n    dispatcher.await();\r\n    ApplicationEvent[] expectedFinishedEvents = new ApplicationEvent[] { new ApplicationEvent(application1, ApplicationEventType.APPLICATION_LOG_HANDLING_FINISHED), new ApplicationEvent(application2, ApplicationEventType.APPLICATION_LOG_HANDLING_FINISHED), new ApplicationEvent(application3, ApplicationEventType.APPLICATION_LOG_HANDLING_FINISHED), new ApplicationEvent(application4, ApplicationEventType.APPLICATION_LOG_HANDLING_FINISHED) };\r\n    checkEvents(appEventHandler, expectedFinishedEvents, false, \"getType\", \"getApplicationID\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testLogAggregationServiceWithPatternsAndIntervals",
  "errType" : null,
  "containingMethodsNum" : 31,
  "sourceCodeText" : "void testLogAggregationServiceWithPatternsAndIntervals() throws Exception\n{\r\n    LogAggregationContext logAggregationContext = Records.newRecord(LogAggregationContext.class);\r\n    logAggregationContext.setRolledLogsIncludePattern(\"stdout|zero\");\r\n    logAggregationContext.setIncludePattern(\"std_final|empty_final\");\r\n    this.conf.set(YarnConfiguration.NM_LOG_DIRS, localLogDir.getAbsolutePath());\r\n    this.conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR, this.remoteRootLogDir.toURI().toString());\r\n    this.conf.setLong(YarnConfiguration.NM_LOG_AGGREGATION_ROLL_MONITORING_INTERVAL_SECONDS, 3600);\r\n    this.conf.setLong(YarnConfiguration.DEBUG_NM_DELETE_DELAY_SEC, 3600);\r\n    ApplicationId application = BuilderUtils.newApplicationId(System.currentTimeMillis(), 1);\r\n    ApplicationAttemptId appAttemptId = BuilderUtils.newApplicationAttemptId(application, 1);\r\n    ContainerId container = createContainer(appAttemptId, 1, ContainerType.APPLICATION_MASTER);\r\n    ConcurrentMap<ApplicationId, Application> maps = this.context.getApplications();\r\n    Application app = mock(Application.class);\r\n    maps.put(application, app);\r\n    when(app.getContainers()).thenReturn(this.context.getContainers());\r\n    LogAggregationService logAggregationService = new LogAggregationService(dispatcher, context, this.delSrvc, super.dirsHandler);\r\n    logAggregationService.init(this.conf);\r\n    logAggregationService.start();\r\n    File appLogDir = new File(localLogDir, ConverterUtils.toString(application));\r\n    appLogDir.mkdir();\r\n    logAggregationService.handle(new LogHandlerAppStartedEvent(application, this.user, null, this.acls, logAggregationContext));\r\n    String[] logFilesWithFinalLog = new String[] { \"stdout\", \"std_final\" };\r\n    String[] zeroFiles = new String[] { \"zero\", \"empty_final\" };\r\n    writeContainerLogs(appLogDir, container, logFilesWithFinalLog, zeroFiles);\r\n    AppLogAggregatorImpl aggregator = (AppLogAggregatorImpl) logAggregationService.getAppLogAggregators().get(application);\r\n    aggregator.doLogAggregationOutOfBand();\r\n    Assert.assertTrue(waitAndCheckLogNum(logAggregationService, application, 50, 1, false, null));\r\n    String[] logFiles = new String[] { \"stdout\" };\r\n    verifyContainerLogs(logAggregationService, application, new ContainerId[] { container }, logFiles, 2, true, EMPTY_FILES);\r\n    logAggregationService.handle(new LogHandlerContainerFinishedEvent(container, ContainerType.APPLICATION_MASTER, 0));\r\n    dispatcher.await();\r\n    aggregator.doLogAggregationOutOfBand();\r\n    Assert.assertTrue(waitAndCheckLogNum(logAggregationService, application, 50, 2, false, null));\r\n    String[] logFinalLog = new String[] { \"std_final\" };\r\n    String[] emptyFinalLog = new String[] { \"empty_final\" };\r\n    verifyContainerLogs(logAggregationService, application, new ContainerId[] { container }, logFinalLog, 2, true, emptyFinalLog);\r\n    logAggregationService.handle(new LogHandlerAppFinishedEvent(application));\r\n    logAggregationService.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testNoneContainerPolicy",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testNoneContainerPolicy() throws Exception\n{\r\n    ApplicationId appId = createApplication();\r\n    LogAggregationService logAggregationService = createLogAggregationService(appId, NoneContainerLogAggregationPolicy.class, null);\r\n    String[] logFiles = new String[] { \"stdout\" };\r\n    ContainerId container1 = finishContainer(appId, logAggregationService, ContainerType.APPLICATION_MASTER, 1, 0, logFiles);\r\n    finishApplication(appId, logAggregationService);\r\n    verifyContainerLogs(logAggregationService, appId, new ContainerId[] { container1 }, logFiles, 0, false, EMPTY_FILES);\r\n    verifyLogAggFinishEvent(appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testFailedContainerPolicy",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testFailedContainerPolicy() throws Exception\n{\r\n    ApplicationId appId = createApplication();\r\n    LogAggregationService logAggregationService = createLogAggregationService(appId, FailedContainerLogAggregationPolicy.class, null);\r\n    String[] logFiles = new String[] { \"stdout\" };\r\n    ContainerId container1 = finishContainer(appId, logAggregationService, ContainerType.APPLICATION_MASTER, 1, 1, logFiles);\r\n    finishContainer(appId, logAggregationService, ContainerType.TASK, 2, 0, logFiles);\r\n    finishContainer(appId, logAggregationService, ContainerType.TASK, 3, ContainerExecutor.ExitCode.FORCE_KILLED.getExitCode(), logFiles);\r\n    finishApplication(appId, logAggregationService);\r\n    verifyContainerLogs(logAggregationService, appId, new ContainerId[] { container1 }, logFiles, 2, false, EMPTY_FILES);\r\n    verifyLogAggFinishEvent(appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testLimitSizeContainerLogAggregationPolicy",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testLimitSizeContainerLogAggregationPolicy() throws Exception\n{\r\n    ApplicationId appId = createApplication();\r\n    LogAggregationService logAggregationService = createLogAggregationService(appId, LimitSizeContainerLogAggregationPolicy.class, null);\r\n    String[] logFiles = new String[] { \"stdout\" };\r\n    finishContainer(appId, logAggregationService, ContainerType.APPLICATION_MASTER, 1, ContainerExitStatus.KILLED_FOR_EXCESS_LOGS, logFiles);\r\n    ContainerId container2 = finishContainer(appId, logAggregationService, ContainerType.TASK, 2, 0, logFiles);\r\n    ContainerId container3 = finishContainer(appId, logAggregationService, ContainerType.TASK, 3, ContainerExecutor.ExitCode.FORCE_KILLED.getExitCode(), logFiles);\r\n    finishApplication(appId, logAggregationService);\r\n    verifyContainerLogs(logAggregationService, appId, new ContainerId[] { container2, container3 }, logFiles, 2, false, EMPTY_FILES);\r\n    verifyLogAggFinishEvent(appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testAMOrFailedContainerPolicy",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testAMOrFailedContainerPolicy() throws Exception\n{\r\n    ApplicationId appId = createApplication();\r\n    LogAggregationService logAggregationService = createLogAggregationService(appId, AMOrFailedContainerLogAggregationPolicy.class, null);\r\n    String[] logFiles = new String[] { \"stdout\" };\r\n    ContainerId container1 = finishContainer(appId, logAggregationService, ContainerType.APPLICATION_MASTER, 1, 0, logFiles);\r\n    ContainerId container2 = finishContainer(appId, logAggregationService, ContainerType.TASK, 2, 1, logFiles);\r\n    finishContainer(appId, logAggregationService, ContainerType.TASK, 3, ContainerExecutor.ExitCode.FORCE_KILLED.getExitCode(), logFiles);\r\n    finishApplication(appId, logAggregationService);\r\n    verifyContainerLogs(logAggregationService, appId, new ContainerId[] { container1, container2 }, logFiles, 2, false, EMPTY_FILES);\r\n    verifyLogAggFinishEvent(appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testFailedOrKilledContainerPolicy",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testFailedOrKilledContainerPolicy() throws Exception\n{\r\n    ApplicationId appId = createApplication();\r\n    LogAggregationService logAggregationService = createLogAggregationService(appId, FailedOrKilledContainerLogAggregationPolicy.class, null);\r\n    String[] logFiles = new String[] { \"stdout\" };\r\n    finishContainer(appId, logAggregationService, ContainerType.APPLICATION_MASTER, 1, 0, logFiles);\r\n    ContainerId container2 = finishContainer(appId, logAggregationService, ContainerType.TASK, 2, 1, logFiles);\r\n    ContainerId container3 = finishContainer(appId, logAggregationService, ContainerType.TASK, 3, ContainerExecutor.ExitCode.FORCE_KILLED.getExitCode(), logFiles);\r\n    finishApplication(appId, logAggregationService);\r\n    verifyContainerLogs(logAggregationService, appId, new ContainerId[] { container2, container3 }, logFiles, 2, false, EMPTY_FILES);\r\n    verifyLogAggFinishEvent(appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testLogAggregationAbsentContainer",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testLogAggregationAbsentContainer() throws Exception\n{\r\n    ApplicationId appId = createApplication();\r\n    LogAggregationService logAggregationService = createLogAggregationService(appId, FailedOrKilledContainerLogAggregationPolicy.class, null);\r\n    ApplicationAttemptId appAttemptId1 = BuilderUtils.newApplicationAttemptId(appId, 1);\r\n    ContainerId containerId = BuilderUtils.newContainerId(appAttemptId1, 2l);\r\n    logAggregationService.handle(new LogHandlerContainerFinishedEvent(containerId, ContainerType.APPLICATION_MASTER, 100));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testAMOnlyContainerPolicy",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testAMOnlyContainerPolicy() throws Exception\n{\r\n    ApplicationId appId = createApplication();\r\n    LogAggregationService logAggregationService = createLogAggregationService(appId, AMOnlyLogAggregationPolicy.class, null);\r\n    String[] logFiles = new String[] { \"stdout\" };\r\n    ContainerId container1 = finishContainer(appId, logAggregationService, ContainerType.APPLICATION_MASTER, 1, 0, logFiles);\r\n    finishContainer(appId, logAggregationService, ContainerType.TASK, 2, 1, logFiles);\r\n    finishContainer(appId, logAggregationService, ContainerType.TASK, 3, 0, logFiles);\r\n    finishApplication(appId, logAggregationService);\r\n    verifyContainerLogs(logAggregationService, appId, new ContainerId[] { container1 }, logFiles, 2, false, EMPTY_FILES);\r\n    verifyLogAggFinishEvent(appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testSampleContainerPolicyWithSmallApp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testSampleContainerPolicyWithSmallApp() throws Exception\n{\r\n    setupAndTestSampleContainerPolicy(SampleContainerLogAggregationPolicy.DEFAULT_SAMPLE_MIN_THRESHOLD, SampleContainerLogAggregationPolicy.DEFAULT_SAMPLE_RATE, SampleContainerLogAggregationPolicy.DEFAULT_SAMPLE_MIN_THRESHOLD, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testSampleContainerPolicyWithLargeApp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testSampleContainerPolicyWithLargeApp() throws Exception\n{\r\n    setupAndTestSampleContainerPolicy(SampleContainerLogAggregationPolicy.DEFAULT_SAMPLE_MIN_THRESHOLD * 10, SampleContainerLogAggregationPolicy.DEFAULT_SAMPLE_RATE, SampleContainerLogAggregationPolicy.DEFAULT_SAMPLE_MIN_THRESHOLD, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testSampleContainerPolicyWithZeroSampleRate",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testSampleContainerPolicyWithZeroSampleRate() throws Exception\n{\r\n    setupAndTestSampleContainerPolicy(SampleContainerLogAggregationPolicy.DEFAULT_SAMPLE_MIN_THRESHOLD * 10, 0, SampleContainerLogAggregationPolicy.DEFAULT_SAMPLE_MIN_THRESHOLD, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testSampleContainerPolicyWith100PercentSampleRate",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testSampleContainerPolicyWith100PercentSampleRate() throws Exception\n{\r\n    setupAndTestSampleContainerPolicy(SampleContainerLogAggregationPolicy.DEFAULT_SAMPLE_MIN_THRESHOLD * 10, 1.0f, SampleContainerLogAggregationPolicy.DEFAULT_SAMPLE_MIN_THRESHOLD, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testSampleContainerPolicyWithZeroMinThreshold",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testSampleContainerPolicyWithZeroMinThreshold() throws Exception\n{\r\n    setupAndTestSampleContainerPolicy(SampleContainerLogAggregationPolicy.DEFAULT_SAMPLE_MIN_THRESHOLD * 10, SampleContainerLogAggregationPolicy.DEFAULT_SAMPLE_RATE, 0, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testSampleContainerPolicyWithCustomizedSettings",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testSampleContainerPolicyWithCustomizedSettings() throws Exception\n{\r\n    setupAndTestSampleContainerPolicy(500, 0.5f, 50, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testClusterSampleContainerPolicy",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testClusterSampleContainerPolicy() throws Exception\n{\r\n    setupAndTestSampleContainerPolicy(500, 0.5f, 50, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testDefaultClusterSampleContainerPolicy",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testDefaultClusterSampleContainerPolicy() throws Exception\n{\r\n    setupAndTestSampleContainerPolicy(SampleContainerLogAggregationPolicy.DEFAULT_SAMPLE_MIN_THRESHOLD * 10, SampleContainerLogAggregationPolicy.DEFAULT_SAMPLE_RATE, SampleContainerLogAggregationPolicy.DEFAULT_SAMPLE_MIN_THRESHOLD, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testInvalidPolicyClassName",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testInvalidPolicyClassName() throws Exception\n{\r\n    ApplicationId appId = createApplication();\r\n    LogAggregationService logAggregationService = createLogAggregationService(appId, \"foo\", null, true);\r\n    verifyDefaultPolicy(appId, logAggregationService);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testNullPolicyClassName",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testNullPolicyClassName() throws Exception\n{\r\n    ApplicationId appId = createApplication();\r\n    LogAggregationService logAggregationService = createLogAggregationService(appId, null, null, true);\r\n    verifyDefaultPolicy(appId, logAggregationService);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testDefaultPolicyWithoutLogAggregationContext",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testDefaultPolicyWithoutLogAggregationContext() throws Exception\n{\r\n    ApplicationId appId = createApplication();\r\n    LogAggregationService logAggregationService = createLogAggregationService(appId, null, null, false);\r\n    verifyDefaultPolicy(appId, logAggregationService);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "verifyDefaultPolicy",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void verifyDefaultPolicy(ApplicationId appId, LogAggregationService logAggregationService) throws Exception\n{\r\n    String[] logFiles = new String[] { \"stdout\" };\r\n    ContainerId container1 = finishContainer(appId, logAggregationService, ContainerType.APPLICATION_MASTER, 1, 0, logFiles);\r\n    ContainerId container2 = finishContainer(appId, logAggregationService, ContainerType.TASK, 2, 1, logFiles);\r\n    ContainerId container3 = finishContainer(appId, logAggregationService, ContainerType.TASK, 3, ContainerExecutor.ExitCode.FORCE_KILLED.getExitCode(), logFiles);\r\n    finishApplication(appId, logAggregationService);\r\n    verifyContainerLogs(logAggregationService, appId, new ContainerId[] { container1, container2, container3 }, logFiles, 2, false, EMPTY_FILES);\r\n    verifyLogAggFinishEvent(appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "setupAndTestSampleContainerPolicy",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void setupAndTestSampleContainerPolicy(int successfulContainers, float sampleRate, int minThreshold, boolean enableAtClusterLevel) throws Exception\n{\r\n    ApplicationId appId = createApplication();\r\n    String policyParameters = null;\r\n    if (sampleRate != SampleContainerLogAggregationPolicy.DEFAULT_SAMPLE_RATE || minThreshold != SampleContainerLogAggregationPolicy.DEFAULT_SAMPLE_MIN_THRESHOLD) {\r\n        policyParameters = SampleContainerLogAggregationPolicy.buildParameters(sampleRate, minThreshold);\r\n    }\r\n    if (enableAtClusterLevel) {\r\n        this.conf.set(YarnConfiguration.NM_LOG_AGG_POLICY_CLASS, SampleContainerLogAggregationPolicy.class.getName());\r\n        if (policyParameters != null) {\r\n            this.conf.set(YarnConfiguration.NM_LOG_AGG_POLICY_CLASS_PARAMETERS, policyParameters);\r\n        }\r\n    }\r\n    LogAggregationService logAggregationService = createLogAggregationService(appId, SampleContainerLogAggregationPolicy.class.getName(), policyParameters, !enableAtClusterLevel);\r\n    ArrayList<ContainerId> containerIds = new ArrayList<ContainerId>();\r\n    String[] logFiles = new String[] { \"stdout\" };\r\n    int cid = 1;\r\n    containerIds.add(finishContainer(appId, logAggregationService, ContainerType.APPLICATION_MASTER, cid++, 0, logFiles));\r\n    if (minThreshold > 0) {\r\n        containerIds.addAll(finishContainers(appId, logAggregationService, cid, (successfulContainers > minThreshold) ? minThreshold : successfulContainers, 0, logFiles));\r\n    }\r\n    cid = containerIds.size() + 1;\r\n    if (successfulContainers > minThreshold) {\r\n        List<ContainerId> restOfSuccessfulContainers = finishContainers(appId, logAggregationService, cid, successfulContainers - minThreshold, 0, logFiles);\r\n        cid += successfulContainers - minThreshold;\r\n        if (sampleRate == 1.0) {\r\n            containerIds.addAll(restOfSuccessfulContainers);\r\n        }\r\n    }\r\n    containerIds.add(finishContainer(appId, logAggregationService, ContainerType.TASK, cid++, 1, logFiles));\r\n    containerIds.add(finishContainer(appId, logAggregationService, ContainerType.TASK, cid++, ContainerExecutor.ExitCode.FORCE_KILLED.getExitCode(), logFiles));\r\n    finishApplication(appId, logAggregationService);\r\n    int minOfContainersWithLogs = 3 + minThreshold + (int) ((successfulContainers - minThreshold) * sampleRate / 2);\r\n    int maxOfContainersWithLogs = 3 + minThreshold + (int) ((successfulContainers - minThreshold) * sampleRate * 2);\r\n    verifyContainerLogs(logAggregationService, appId, containerIds.toArray(new ContainerId[containerIds.size()]), minOfContainersWithLogs, maxOfContainersWithLogs, logFiles, 2, false, EMPTY_FILES);\r\n    verifyLogAggFinishEvent(appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "createApplication",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "ApplicationId createApplication()\n{\r\n    this.conf.set(YarnConfiguration.NM_LOG_DIRS, localLogDir.getAbsolutePath());\r\n    this.conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR, this.remoteRootLogDir.getAbsolutePath());\r\n    ApplicationId appId = BuilderUtils.newApplicationId(1234, 1);\r\n    Application mockApp = mock(Application.class);\r\n    when(mockApp.getContainers()).thenReturn(new HashMap<ContainerId, Container>());\r\n    this.context.getApplications().put(appId, mockApp);\r\n    return appId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "createLogAggregationService",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LogAggregationService createLogAggregationService(ApplicationId appId, Class<? extends ContainerLogAggregationPolicy> policy, String parameters)\n{\r\n    return createLogAggregationService(appId, policy.getName(), parameters, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "createLogAggregationService",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "LogAggregationService createLogAggregationService(ApplicationId appId, String className, String parameters, boolean createLogAggContext)\n{\r\n    ConcurrentHashMap<ContainerId, Container> containers = new ConcurrentHashMap<ContainerId, Container>();\r\n    LogAggregationService logAggregationService = new LogAggregationService(dispatcher, this.context, this.delSrvc, super.dirsHandler);\r\n    logAggregationService.init(this.conf);\r\n    logAggregationService.start();\r\n    LogAggregationContext logAggContext = null;\r\n    if (createLogAggContext) {\r\n        logAggContext = Records.newRecord(LogAggregationContext.class);\r\n        logAggContext.setLogAggregationPolicyClassName(className);\r\n        if (parameters != null) {\r\n            logAggContext.setLogAggregationPolicyParameters(parameters);\r\n        }\r\n    }\r\n    logAggregationService.handle(new LogHandlerAppStartedEvent(appId, this.user, null, this.acls, logAggContext));\r\n    dispatcher.await();\r\n    return logAggregationService;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "createContainer",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "ContainerId createContainer(ApplicationAttemptId appAttemptId1, long cId, ContainerType containerType)\n{\r\n    ContainerId containerId = BuilderUtils.newContainerId(appAttemptId1, cId);\r\n    Resource r = BuilderUtils.newResource(1024, 1);\r\n    ContainerTokenIdentifier containerToken = new ContainerTokenIdentifier(containerId, context.getNodeId().toString(), user, r, System.currentTimeMillis() + 100000L, 123, DUMMY_RM_IDENTIFIER, Priority.newInstance(0), 0, null, null, containerType);\r\n    Container container = mock(Container.class);\r\n    context.getContainers().put(containerId, container);\r\n    when(container.getContainerTokenIdentifier()).thenReturn(containerToken);\r\n    when(container.getContainerId()).thenReturn(containerId);\r\n    return containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "finishContainer",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "ContainerId finishContainer(ApplicationId application1, LogAggregationService logAggregationService, ContainerType containerType, long cId, int exitCode, String[] logFiles) throws IOException\n{\r\n    ApplicationAttemptId appAttemptId1 = BuilderUtils.newApplicationAttemptId(application1, 1);\r\n    ContainerId containerId = ContainerId.newContainerId(appAttemptId1, cId);\r\n    File appLogDir1 = new File(localLogDir, application1.toString());\r\n    appLogDir1.mkdir();\r\n    writeContainerLogs(appLogDir1, containerId, logFiles, EMPTY_FILES);\r\n    logAggregationService.handle(new LogHandlerContainerFinishedEvent(containerId, containerType, exitCode));\r\n    return containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "finishContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ContainerId> finishContainers(ApplicationId appId, LogAggregationService logAggregationService, long startingCid, int count, int exitCode, String[] logFiles) throws IOException\n{\r\n    ArrayList<ContainerId> containerIds = new ArrayList<ContainerId>();\r\n    for (long cid = startingCid; cid < startingCid + count; cid++) {\r\n        containerIds.add(finishContainer(appId, logAggregationService, ContainerType.TASK, cid, exitCode, logFiles));\r\n    }\r\n    return containerIds;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "finishApplication",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void finishApplication(ApplicationId appId, LogAggregationService logAggregationService) throws Exception\n{\r\n    dispatcher.await();\r\n    ApplicationEvent[] expectedInitEvents = new ApplicationEvent[] { new ApplicationEvent(appId, ApplicationEventType.APPLICATION_LOG_HANDLING_INITED) };\r\n    checkEvents(appEventHandler, expectedInitEvents, false, \"getType\", \"getApplicationID\");\r\n    reset(new EventHandler[] { appEventHandler });\r\n    logAggregationService.handle(new LogHandlerAppFinishedEvent(appId));\r\n    logAggregationService.stop();\r\n    assertEquals(0, logAggregationService.getNumAggregators());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "verifyLogAggFinishEvent",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void verifyLogAggFinishEvent(ApplicationId appId) throws Exception\n{\r\n    dispatcher.await();\r\n    ApplicationEvent[] expectedFinishedEvents = new ApplicationEvent[] { new ApplicationEvent(appId, ApplicationEventType.APPLICATION_LOG_HANDLING_FINISHED) };\r\n    checkEvents(appEventHandler, expectedFinishedEvents, false, \"getType\", \"getApplicationID\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testLogAggregationServiceWithInterval",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testLogAggregationServiceWithInterval() throws Exception\n{\r\n    testLogAggregationService(false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testLogAggregationServiceWithRetention",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testLogAggregationServiceWithRetention() throws Exception\n{\r\n    testLogAggregationService(true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testLogAggregationService",
  "errType" : null,
  "containingMethodsNum" : 49,
  "sourceCodeText" : "void testLogAggregationService(boolean retentionSizeLimitation) throws Exception\n{\r\n    LogAggregationContext logAggregationContextWithInterval = Records.newRecord(LogAggregationContext.class);\r\n    logAggregationContextWithInterval.setRolledLogsIncludePattern(\".*\");\r\n    logAggregationContextWithInterval.setRolledLogsExcludePattern(\"std_final\");\r\n    this.conf.set(YarnConfiguration.NM_LOG_DIRS, localLogDir.getAbsolutePath());\r\n    this.conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR, this.remoteRootLogDir.toURI().toString());\r\n    this.conf.setLong(YarnConfiguration.NM_LOG_AGGREGATION_ROLL_MONITORING_INTERVAL_SECONDS, 3600);\r\n    if (retentionSizeLimitation) {\r\n        this.conf.setInt(YarnConfiguration.NM_PREFIX + \"log-aggregation.num-log-files-per-app\", 1);\r\n    }\r\n    this.conf.setLong(YarnConfiguration.DEBUG_NM_DELETE_DELAY_SEC, 3600);\r\n    ApplicationId application = BuilderUtils.newApplicationId(System.currentTimeMillis(), 1);\r\n    ApplicationAttemptId appAttemptId = BuilderUtils.newApplicationAttemptId(application, 1);\r\n    ContainerId container = createContainer(appAttemptId, 1, ContainerType.APPLICATION_MASTER);\r\n    ConcurrentMap<ApplicationId, Application> maps = this.context.getApplications();\r\n    Application app = mock(Application.class);\r\n    maps.put(application, app);\r\n    when(app.getContainers()).thenReturn(this.context.getContainers());\r\n    LogAggregationService logAggregationService = new LogAggregationService(dispatcher, context, this.delSrvc, super.dirsHandler);\r\n    logAggregationService.init(this.conf);\r\n    logAggregationService.start();\r\n    File appLogDir = new File(localLogDir, application.toString());\r\n    appLogDir.mkdir();\r\n    logAggregationService.handle(new LogHandlerAppStartedEvent(application, this.user, null, this.acls, logAggregationContextWithInterval));\r\n    LogFileStatusInLastCycle logFileStatusInLastCycle = null;\r\n    String[] logFiles1WithFinalLog = new String[] { \"stdout\", \"stderr\", \"syslog\", \"std_final\" };\r\n    String[] logFiles1 = new String[] { \"stdout\", \"stderr\", \"syslog\" };\r\n    writeContainerLogs(appLogDir, container, logFiles1WithFinalLog, EMPTY_FILES);\r\n    AppLogAggregatorImpl aggregator = (AppLogAggregatorImpl) logAggregationService.getAppLogAggregators().get(application);\r\n    aggregator.doLogAggregationOutOfBand();\r\n    if (retentionSizeLimitation) {\r\n        Assert.assertTrue(waitAndCheckLogNum(logAggregationService, application, 50, 1, true, null));\r\n    } else {\r\n        Assert.assertTrue(waitAndCheckLogNum(logAggregationService, application, 50, 1, false, null));\r\n    }\r\n    logFileStatusInLastCycle = verifyContainerLogs(logAggregationService, application, new ContainerId[] { container }, logFiles1, 4, true, EMPTY_FILES);\r\n    for (String logFile : logFiles1) {\r\n        Assert.assertTrue(logFileStatusInLastCycle.getLogFileTypesInLastCycle().contains(logFile));\r\n    }\r\n    Assert.assertFalse(logFileStatusInLastCycle.getLogFileTypesInLastCycle().contains(\"std_final\"));\r\n    Thread.sleep(2000);\r\n    aggregator.doLogAggregationOutOfBand();\r\n    Assert.assertTrue(\"Only one aggregated log file in Remote file directory expected\", waitAndCheckLogNum(logAggregationService, application, 50, 1, true, null));\r\n    Thread.sleep(2000);\r\n    String[] logFiles2 = new String[] { \"stdout_1\", \"stderr_1\", \"syslog_1\" };\r\n    writeContainerLogs(appLogDir, container, logFiles2, EMPTY_FILES);\r\n    aggregator.doLogAggregationOutOfBand();\r\n    if (retentionSizeLimitation) {\r\n        Assert.assertTrue(waitAndCheckLogNum(logAggregationService, application, 50, 1, true, logFileStatusInLastCycle.getLogFilePathInLastCycle()));\r\n    } else {\r\n        Assert.assertTrue(waitAndCheckLogNum(logAggregationService, application, 50, 2, false, null));\r\n    }\r\n    logFileStatusInLastCycle = verifyContainerLogs(logAggregationService, application, new ContainerId[] { container }, logFiles2, 4, true, EMPTY_FILES);\r\n    for (String logFile : logFiles2) {\r\n        Assert.assertTrue(logFileStatusInLastCycle.getLogFileTypesInLastCycle().contains(logFile));\r\n    }\r\n    Assert.assertFalse(logFileStatusInLastCycle.getLogFileTypesInLastCycle().contains(\"std_final\"));\r\n    Thread.sleep(2000);\r\n    String[] logFiles3 = new String[] { \"stdout_2\", \"stderr_2\", \"syslog_2\" };\r\n    writeContainerLogs(appLogDir, container, logFiles3, EMPTY_FILES);\r\n    logAggregationService.handle(new LogHandlerContainerFinishedEvent(container, ContainerType.APPLICATION_MASTER, 0));\r\n    dispatcher.await();\r\n    logAggregationService.handle(new LogHandlerAppFinishedEvent(application));\r\n    if (retentionSizeLimitation) {\r\n        Assert.assertTrue(waitAndCheckLogNum(logAggregationService, application, 50, 1, true, logFileStatusInLastCycle.getLogFilePathInLastCycle()));\r\n    } else {\r\n        Assert.assertTrue(waitAndCheckLogNum(logAggregationService, application, 50, 3, false, null));\r\n    }\r\n    String[] logFiles3WithFinalLog = new String[] { \"stdout_2\", \"stderr_2\", \"syslog_2\", \"std_final\" };\r\n    verifyContainerLogs(logAggregationService, application, new ContainerId[] { container }, logFiles3WithFinalLog, 5, true, EMPTY_FILES);\r\n    logAggregationService.stop();\r\n    assertEquals(0, logAggregationService.getNumAggregators());\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testAddNewTokenSentFromRMForLogAggregation",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testAddNewTokenSentFromRMForLogAggregation() throws Exception\n{\r\n    Configuration conf = new YarnConfiguration();\r\n    conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION, \"kerberos\");\r\n    UserGroupInformation.setConfiguration(conf);\r\n    ApplicationId application1 = BuilderUtils.newApplicationId(1234, 1);\r\n    Application mockApp = mock(Application.class);\r\n    when(mockApp.getContainers()).thenReturn(new HashMap<ContainerId, Container>());\r\n    this.context.getApplications().put(application1, mockApp);\r\n    @SuppressWarnings(\"resource\")\r\n    LogAggregationService logAggregationService = new LogAggregationService(dispatcher, this.context, this.delSrvc, super.dirsHandler);\r\n    logAggregationService.init(this.conf);\r\n    logAggregationService.start();\r\n    logAggregationService.handle(new LogHandlerAppStartedEvent(application1, this.user, null, this.acls, Records.newRecord(LogAggregationContext.class)));\r\n    Text userText1 = new Text(\"user1\");\r\n    RMDelegationTokenIdentifier dtId1 = new RMDelegationTokenIdentifier(userText1, new Text(\"renewer1\"), userText1);\r\n    final Token<RMDelegationTokenIdentifier> token1 = new Token<RMDelegationTokenIdentifier>(dtId1.getBytes(), \"password1\".getBytes(), dtId1.getKind(), new Text(\"service1\"));\r\n    Credentials credentials = new Credentials();\r\n    credentials.addToken(userText1, token1);\r\n    this.context.getSystemCredentialsForApps().put(application1, credentials);\r\n    logAggregationService.handle(new LogHandlerAppFinishedEvent(application1));\r\n    final UserGroupInformation ugi = ((AppLogAggregatorImpl) logAggregationService.getAppLogAggregators().get(application1)).getUgi();\r\n    GenericTestUtils.waitFor(new Supplier<Boolean>() {\r\n\r\n        public Boolean get() {\r\n            boolean hasNewToken = false;\r\n            for (Token<?> token : ugi.getCredentials().getAllTokens()) {\r\n                if (token.equals(token1)) {\r\n                    hasNewToken = true;\r\n                }\r\n            }\r\n            return hasNewToken;\r\n        }\r\n    }, 1000, 20000);\r\n    logAggregationService.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testSkipUnnecessaryNNOperationsForShortJob",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testSkipUnnecessaryNNOperationsForShortJob() throws Exception\n{\r\n    LogAggregationContext logAggregationContext = Records.newRecord(LogAggregationContext.class);\r\n    logAggregationContext.setLogAggregationPolicyClassName(FailedOrKilledContainerLogAggregationPolicy.class.getName());\r\n    verifySkipUnnecessaryNNOperations(logAggregationContext, 0, 2, 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testSkipUnnecessaryNNOperationsForService",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testSkipUnnecessaryNNOperationsForService() throws Exception\n{\r\n    this.conf.setLong(YarnConfiguration.NM_LOG_AGGREGATION_ROLL_MONITORING_INTERVAL_SECONDS, 3600);\r\n    LogAggregationContext contextWithAMOnly = Records.newRecord(LogAggregationContext.class);\r\n    contextWithAMOnly.setLogAggregationPolicyClassName(AMOnlyLogAggregationPolicy.class.getName());\r\n    contextWithAMOnly.setRolledLogsIncludePattern(\"sys*\");\r\n    contextWithAMOnly.setRolledLogsExcludePattern(\"std_final\");\r\n    verifySkipUnnecessaryNNOperations(contextWithAMOnly, 1, 4, 1);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "verifySkipUnnecessaryNNOperations",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void verifySkipUnnecessaryNNOperations(LogAggregationContext logAggregationContext, int expectedLogAggregationTimes, int expectedAggregationReportNum, int expectedCleanupOldLogsTimes) throws Exception\n{\r\n    LogAggregationService logAggregationService = new LogAggregationService(dispatcher, this.context, this.delSrvc, super.dirsHandler);\r\n    logAggregationService.init(this.conf);\r\n    logAggregationService.start();\r\n    ApplicationId appId = createApplication();\r\n    logAggregationService.handle(new LogHandlerAppStartedEvent(appId, this.user, null, this.acls, logAggregationContext));\r\n    String[] logFiles = new String[] { \"sysout\" };\r\n    finishContainer(appId, logAggregationService, ContainerType.APPLICATION_MASTER, 1, 0, logFiles);\r\n    AppLogAggregatorImpl aggregator = (AppLogAggregatorImpl) logAggregationService.getAppLogAggregators().get(appId);\r\n    aggregator.doLogAggregationOutOfBand();\r\n    Thread.sleep(2000);\r\n    aggregator.doLogAggregationOutOfBand();\r\n    Thread.sleep(2000);\r\n    logAggregationService.handle(new LogHandlerAppFinishedEvent(appId));\r\n    logAggregationService.stop();\r\n    assertEquals(expectedLogAggregationTimes, aggregator.getLogAggregationFileControllerContext().getLogAggregationTimes());\r\n    assertEquals(expectedAggregationReportNum, this.context.getLogAggregationStatusForApps().size());\r\n    assertEquals(expectedCleanupOldLogsTimes, aggregator.getLogAggregationFileControllerContext().getCleanOldLogsTimes());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "numOfLogsAvailable",
  "errType" : [ "FileNotFoundException" ],
  "containingMethodsNum" : 14,
  "sourceCodeText" : "int numOfLogsAvailable(LogAggregationService logAggregationService, ApplicationId appId, boolean sizeLimited, String lastLogFile) throws IOException\n{\r\n    Path appLogDir = logAggregationService.getLogAggregationFileController(conf).getRemoteAppLogDir(appId, this.user);\r\n    RemoteIterator<FileStatus> nodeFiles = null;\r\n    try {\r\n        Path qualifiedLogDir = FileContext.getFileContext(this.conf).makeQualified(appLogDir);\r\n        nodeFiles = FileContext.getFileContext(qualifiedLogDir.toUri(), this.conf).listStatus(appLogDir);\r\n    } catch (FileNotFoundException fnf) {\r\n        LOG.info(\"Context file not vailable: \" + fnf);\r\n        return -1;\r\n    }\r\n    int count = 0;\r\n    while (nodeFiles.hasNext()) {\r\n        FileStatus status = nodeFiles.next();\r\n        String filename = status.getPath().getName();\r\n        if (filename.contains(LogAggregationUtils.TMP_FILE_SUFFIX) || (lastLogFile != null && filename.contains(lastLogFile) && sizeLimited)) {\r\n            LOG.info(\"fileName :\" + filename);\r\n            LOG.info(\"lastLogFile :\" + lastLogFile);\r\n            return -1;\r\n        }\r\n        if (filename.contains(LogAggregationUtils.getNodeString(logAggregationService.getNodeId()))) {\r\n            LOG.info(\"Node list filename :\" + filename);\r\n            count++;\r\n        }\r\n    }\r\n    LOG.info(\"File Count :\" + count);\r\n    return count;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "waitAndCheckLogNum",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean waitAndCheckLogNum(LogAggregationService logAggregationService, ApplicationId application, int maxAttempts, int expectNum, boolean sizeLimited, String lastLogFile) throws IOException, InterruptedException\n{\r\n    int count = 0;\r\n    int logFiles = numOfLogsAvailable(logAggregationService, application, sizeLimited, lastLogFile);\r\n    while ((logFiles != expectNum) && (count <= maxAttempts)) {\r\n        Thread.sleep(500);\r\n        count++;\r\n        logFiles = numOfLogsAvailable(logAggregationService, application, sizeLimited, lastLogFile);\r\n    }\r\n    return (logFiles == expectNum);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testRollingMonitorIntervalDefault",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testRollingMonitorIntervalDefault()\n{\r\n    LogAggregationService logAggregationService = new LogAggregationService(dispatcher, this.context, this.delSrvc, super.dirsHandler);\r\n    logAggregationService.init(this.conf);\r\n    long interval = logAggregationService.getRollingMonitorInterval();\r\n    assertEquals(-1L, interval);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testRollingMonitorIntervalGreaterThanSet",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testRollingMonitorIntervalGreaterThanSet()\n{\r\n    this.conf.set(YarnConfiguration.MIN_LOG_ROLLING_INTERVAL_SECONDS, \"1800\");\r\n    this.conf.set(YarnConfiguration.NM_LOG_AGGREGATION_ROLL_MONITORING_INTERVAL_SECONDS, \"2700\");\r\n    LogAggregationService logAggregationService = new LogAggregationService(dispatcher, this.context, this.delSrvc, super.dirsHandler);\r\n    logAggregationService.init(this.conf);\r\n    long interval = logAggregationService.getRollingMonitorInterval();\r\n    assertEquals(2700L, interval);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testRollingMonitorIntervalLessThanSet",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testRollingMonitorIntervalLessThanSet()\n{\r\n    this.conf.set(YarnConfiguration.MIN_LOG_ROLLING_INTERVAL_SECONDS, \"1800\");\r\n    this.conf.set(YarnConfiguration.NM_LOG_AGGREGATION_ROLL_MONITORING_INTERVAL_SECONDS, \"600\");\r\n    LogAggregationService logAggregationService = new LogAggregationService(dispatcher, this.context, this.delSrvc, super.dirsHandler);\r\n    logAggregationService.init(this.conf);\r\n    long interval = logAggregationService.getRollingMonitorInterval();\r\n    assertEquals(1800L, interval);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setup() throws IOException\n{\r\n    Assume.assumeTrue(\"LCE binary path is not passed. Not running the test\", shouldRunTest());\r\n    super.setup();\r\n    localFS.setPermission(new Path(localDir.getCanonicalPath()), new FsPermission((short) 0777));\r\n    localFS.setPermission(new Path(tmpDir.getCanonicalPath()), new FsPermission((short) 0777));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDown() throws IOException, InterruptedException\n{\r\n    if (shouldRunTest()) {\r\n        super.tearDown();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "shouldRunTest",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean shouldRunTest()\n{\r\n    return System.getProperty(YarnConfiguration.NM_LINUX_CONTAINER_EXECUTOR_PATH) != null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createContainerExecutor",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerExecutor createContainerExecutor()\n{\r\n    super.conf.set(YarnConfiguration.NM_LINUX_CONTAINER_EXECUTOR_PATH, System.getProperty(YarnConfiguration.NM_LINUX_CONTAINER_EXECUTOR_PATH));\r\n    LinuxContainerExecutor linuxContainerExecutor = new LinuxContainerExecutor();\r\n    linuxContainerExecutor.setConf(super.conf);\r\n    return linuxContainerExecutor;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setUp()\n{\r\n    dockerRmCommand = new DockerRmCommand(CONTAINER_NAME, null);\r\n    dockerRmCommandWithCgroupArg = new DockerRmCommand(CONTAINER_NAME, CGROUP_HIERARCHY_NAME);\r\n    dockerRmCommandWithEmptyCgroupArg = new DockerRmCommand(CONTAINER_NAME, \"\");\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testGetCommandOption",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetCommandOption()\n{\r\n    assertEquals(\"rm\", dockerRmCommand.getCommandOption());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testGetCommandWithArguments",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testGetCommandWithArguments()\n{\r\n    assertEquals(\"rm\", StringUtils.join(\",\", dockerRmCommand.getDockerCommandWithArguments().get(\"docker-command\")));\r\n    assertEquals(\"foo\", StringUtils.join(\",\", dockerRmCommand.getDockerCommandWithArguments().get(\"name\")));\r\n    assertEquals(2, dockerRmCommand.getDockerCommandWithArguments().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testGetCommandWithCgroup",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetCommandWithCgroup()\n{\r\n    assertEquals(\"rm\", StringUtils.join(\",\", dockerRmCommandWithCgroupArg.getDockerCommandWithArguments().get(\"docker-command\")));\r\n    assertEquals(\"foo\", StringUtils.join(\",\", dockerRmCommandWithCgroupArg.getDockerCommandWithArguments().get(\"name\")));\r\n    assertEquals(CGROUP_HIERARCHY_NAME, StringUtils.join(\",\", dockerRmCommandWithCgroupArg.getDockerCommandWithArguments().get(\"hierarchy\")));\r\n    assertEquals(3, dockerRmCommandWithCgroupArg.getDockerCommandWithArguments().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testGetCommandWithEmptyCgroup",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testGetCommandWithEmptyCgroup()\n{\r\n    assertEquals(\"rm\", StringUtils.join(\",\", dockerRmCommandWithEmptyCgroupArg.getDockerCommandWithArguments().get(\"docker-command\")));\r\n    assertEquals(\"foo\", StringUtils.join(\",\", dockerRmCommandWithEmptyCgroupArg.getDockerCommandWithArguments().get(\"name\")));\r\n    assertEquals(2, dockerRmCommandWithEmptyCgroupArg.getDockerCommandWithArguments().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "registerNodeManager",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "RegisterNodeManagerResponse registerNodeManager(RegisterNodeManagerRequest request) throws YarnException, IOException\n{\r\n    RegisterNodeManagerResponse response = recordFactory.newRecordInstance(RegisterNodeManagerResponse.class);\r\n    MasterKey masterKey = new MasterKeyPBImpl();\r\n    masterKey.setKeyId(123);\r\n    masterKey.setBytes(ByteBuffer.wrap(new byte[] { new Integer(123).byteValue() }));\r\n    response.setContainerTokenMasterKey(masterKey);\r\n    response.setNMTokenMasterKey(masterKey);\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "nodeHeartbeat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeHeartbeatResponse nodeHeartbeat(NodeHeartbeatRequest request) throws YarnException, IOException\n{\r\n    NodeHeartbeatResponse response = recordFactory.newRecordInstance(NodeHeartbeatResponse.class);\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "unRegisterNodeManager",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "UnRegisterNodeManagerResponse unRegisterNodeManager(UnRegisterNodeManagerRequest request) throws YarnException, IOException\n{\r\n    UnRegisterNodeManagerResponse response = recordFactory.newRecordInstance(UnRegisterNodeManagerResponse.class);\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void init()\n{\r\n    metrics = AMRMProxyMetrics.getMetrics();\r\n    LOG.info(\"Test: aggregate metrics are initialized correctly\");\r\n    Assert.assertEquals(0, metrics.getFailedAppStartRequests());\r\n    Assert.assertEquals(0, metrics.getFailedRegisterAMRequests());\r\n    Assert.assertEquals(0, metrics.getFailedFinishAMRequests());\r\n    Assert.assertEquals(0, metrics.getFailedAllocateRequests());\r\n    Assert.assertEquals(0, metrics.getNumSucceededAppStartRequests());\r\n    Assert.assertEquals(0, metrics.getNumSucceededRegisterAMRequests());\r\n    Assert.assertEquals(0, metrics.getNumSucceededFinishAMRequests());\r\n    Assert.assertEquals(0, metrics.getNumSucceededAllocateRequests());\r\n    LOG.info(\"Test: aggregate metrics are updated correctly\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "testAllocateRequestWithNullValues",
  "errType" : null,
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void testAllocateRequestWithNullValues() throws Exception\n{\r\n    long failedAppStartRequests = metrics.getFailedAppStartRequests();\r\n    long failedRegisterAMRequests = metrics.getFailedRegisterAMRequests();\r\n    long failedFinishAMRequests = metrics.getFailedFinishAMRequests();\r\n    long failedAllocateRequests = metrics.getFailedAllocateRequests();\r\n    long succeededAppStartRequests = metrics.getNumSucceededAppStartRequests();\r\n    long succeededRegisterAMRequests = metrics.getNumSucceededRegisterAMRequests();\r\n    long succeededFinishAMRequests = metrics.getNumSucceededFinishAMRequests();\r\n    long succeededAllocateRequests = metrics.getNumSucceededAllocateRequests();\r\n    int testAppId = 1;\r\n    RegisterApplicationMasterResponse registerResponse = registerApplicationMaster(testAppId);\r\n    Assert.assertNotNull(registerResponse);\r\n    Assert.assertEquals(Integer.toString(testAppId), registerResponse.getQueue());\r\n    AllocateResponse allocateResponse = allocate(testAppId);\r\n    Assert.assertNotNull(allocateResponse);\r\n    FinishApplicationMasterResponse finshResponse = finishApplicationMaster(testAppId, FinalApplicationStatus.SUCCEEDED);\r\n    Assert.assertNotNull(finshResponse);\r\n    Assert.assertEquals(true, finshResponse.getIsUnregistered());\r\n    Assert.assertEquals(failedAppStartRequests, metrics.getFailedAppStartRequests());\r\n    Assert.assertEquals(failedRegisterAMRequests, metrics.getFailedRegisterAMRequests());\r\n    Assert.assertEquals(failedFinishAMRequests, metrics.getFailedFinishAMRequests());\r\n    Assert.assertEquals(failedAllocateRequests, metrics.getFailedAllocateRequests());\r\n    Assert.assertEquals(succeededAppStartRequests, metrics.getNumSucceededAppStartRequests());\r\n    Assert.assertEquals(1 + succeededRegisterAMRequests, metrics.getNumSucceededRegisterAMRequests());\r\n    Assert.assertEquals(1 + succeededFinishAMRequests, metrics.getNumSucceededFinishAMRequests());\r\n    Assert.assertEquals(1 + succeededAllocateRequests, metrics.getNumSucceededAllocateRequests());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "testFinishOneApplicationMasterWithFailure",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void testFinishOneApplicationMasterWithFailure() throws Exception\n{\r\n    long failedAppStartRequests = metrics.getFailedAppStartRequests();\r\n    long failedRegisterAMRequests = metrics.getFailedRegisterAMRequests();\r\n    long failedFinishAMRequests = metrics.getFailedFinishAMRequests();\r\n    long failedAllocateRequests = metrics.getFailedAllocateRequests();\r\n    long succeededAppStartRequests = metrics.getNumSucceededAppStartRequests();\r\n    long succeededRegisterAMRequests = metrics.getNumSucceededRegisterAMRequests();\r\n    long succeededFinishAMRequests = metrics.getNumSucceededFinishAMRequests();\r\n    long succeededAllocateRequests = metrics.getNumSucceededAllocateRequests();\r\n    int testAppId = 1;\r\n    RegisterApplicationMasterResponse registerResponse = registerApplicationMaster(testAppId);\r\n    Assert.assertNotNull(registerResponse);\r\n    Assert.assertEquals(Integer.toString(testAppId), registerResponse.getQueue());\r\n    FinishApplicationMasterResponse finshResponse = finishApplicationMaster(testAppId, FinalApplicationStatus.FAILED);\r\n    Assert.assertNotNull(finshResponse);\r\n    try {\r\n        finishApplicationMaster(testAppId, FinalApplicationStatus.SUCCEEDED);\r\n        Assert.fail(\"The request to finish application master should have failed\");\r\n    } catch (Throwable ex) {\r\n        LOG.info(\"Finish registration failed as expected because it was not \" + \"registered\");\r\n    }\r\n    Assert.assertEquals(failedAppStartRequests, metrics.getFailedAppStartRequests());\r\n    Assert.assertEquals(failedRegisterAMRequests, metrics.getFailedRegisterAMRequests());\r\n    Assert.assertEquals(1 + failedFinishAMRequests, metrics.getFailedFinishAMRequests());\r\n    Assert.assertEquals(failedAllocateRequests, metrics.getFailedAllocateRequests());\r\n    Assert.assertEquals(succeededAppStartRequests, metrics.getNumSucceededAppStartRequests());\r\n    Assert.assertEquals(1 + succeededRegisterAMRequests, metrics.getNumSucceededRegisterAMRequests());\r\n    Assert.assertEquals(1 + succeededFinishAMRequests, metrics.getNumSucceededFinishAMRequests());\r\n    Assert.assertEquals(succeededAllocateRequests, metrics.getNumSucceededAllocateRequests());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testNodeManagerMXBean",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testNodeManagerMXBean() throws Exception\n{\r\n    try (NodeManager nodeManager = new NodeManager()) {\r\n        Configuration conf = new YarnConfiguration();\r\n        UserGroupInformation.setConfiguration(conf);\r\n        nodeManager.init(conf);\r\n        MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\r\n        ObjectName mxbeanName = new ObjectName(\"Hadoop:service=NodeManager,name=NodeManager\");\r\n        boolean securityEnabled = (boolean) mbs.getAttribute(mxbeanName, \"SecurityEnabled\");\r\n        Assert.assertEquals(nodeManager.isSecurityEnabled(), securityEnabled);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "inputForGetEnvDependenciesLinux",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Stream<Arguments> inputForGetEnvDependenciesLinux()\n{\r\n    return Stream.of(Arguments.of(null, asSet()), Arguments.of(\"\", asSet()), Arguments.of(\"A\", asSet()), Arguments.of(\"\\\\$A\", asSet()), Arguments.of(\"$$\", asSet()), Arguments.of(\"$1\", asSet()), Arguments.of(\"handle \\\"'$A'\\\" simple quotes\", asSet()), Arguments.of(\"handle \\\" escaped \\\\\\\" '${A}'\\\" simple quotes\", asSet()), Arguments.of(\"$ crash test for StringArrayOutOfBoundException\", asSet()), Arguments.of(\"${ crash test for StringArrayOutOfBoundException\", asSet()), Arguments.of(\"${# crash test for StringArrayOutOfBoundException\", asSet()), Arguments.of(\"crash test for StringArrayOutOfBoundException $\", asSet()), Arguments.of(\"crash test for StringArrayOutOfBoundException ${\", asSet()), Arguments.of(\"crash test for StringArrayOutOfBoundException ${#\", asSet()), Arguments.of(\"$A\", asSet(\"A\")), Arguments.of(\"${A}\", asSet(\"A\")), Arguments.of(\"${#A[*]}\", asSet(\"A\")), Arguments.of(\"in the $A midlle\", asSet(\"A\")), Arguments.of(\"${A:-$B} var in var\", asSet(\"A\", \"B\")), Arguments.of(\"${A}$B var outside var\", asSet(\"A\", \"B\")), Arguments.of(\"$A:$B:$C:pathlist var\", asSet(\"A\", \"B\", \"C\")), Arguments.of(\"${A}/foo/bar:$B:${C}:pathlist var\", asSet(\"A\", \"B\", \"C\")), Arguments.of(\"${parameter:-word}\", asSet(\"parameter\")), Arguments.of(\"${parameter:=word}\", asSet(\"parameter\")), Arguments.of(\"${parameter:?word}\", asSet(\"parameter\")), Arguments.of(\"${parameter:+word}\", asSet(\"parameter\")), Arguments.of(\"${parameter:71}\", asSet(\"parameter\")), Arguments.of(\"${parameter:71:30}\", asSet(\"parameter\")), Arguments.of(\"!{prefix*}\", asSet()), Arguments.of(\"${!prefix@}\", asSet()), Arguments.of(\"${!name[@]}\", asSet()), Arguments.of(\"${!name[*]}\", asSet()), Arguments.of(\"${#parameter}\", asSet(\"parameter\")), Arguments.of(\"${parameter#word}\", asSet(\"parameter\")), Arguments.of(\"${parameter##word}\", asSet(\"parameter\")), Arguments.of(\"${parameter%word}\", asSet(\"parameter\")), Arguments.of(\"${parameter/pattern/string}\", asSet(\"parameter\")), Arguments.of(\"${parameter^pattern}\", asSet(\"parameter\")), Arguments.of(\"${parameter^^pattern}\", asSet(\"parameter\")), Arguments.of(\"${parameter,pattern}\", asSet(\"parameter\")), Arguments.of(\"${parameter,,pattern}\", asSet(\"parameter\")), Arguments.of(\"${parameter@o}\", asSet(\"parameter\")), Arguments.of(\"${parameter:-${another}}\", asSet(\"parameter\", \"another\")), Arguments.of(\"${FILES:-$(git diff --name-only \\\"${GIT_REVISION}..HEAD\\\"\" + \" | grep \\\"java$\\\" | grep -iv \\\"test\\\")}\", asSet(\"FILES\", \"GIT_REVISION\")), Arguments.of(\"handle '${A}' simple quotes\", asSet(\"A\")), Arguments.of(\"handle '${A} $B ${C:-$D}' simple quotes\", asSet(\"A\", \"B\", \"C\", \"D\")), Arguments.of(\"handle \\\"'${A}'\\\" double and single quotes\", asSet()), Arguments.of(\"handle \\\"'\\\\${A}'\\\" double and single quotes\", asSet()), Arguments.of(\"handle '\\\\${A} \\\\$B \\\\${C:-D}' single quotes\", asSet()), Arguments.of(\"handle \\\"${A}\\\" double quotes\", asSet(\"A\")), Arguments.of(\"handle \\\"${A} $B ${C:-$D}\\\" double quotes\", asSet(\"A\", \"B\", \"C\", \"D\")));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testGetEnvDependenciesLinux",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testGetEnvDependenciesLinux(String input, Set<String> expected)\n{\r\n    ContainerLaunch.ShellScriptBuilder bash = ContainerLaunch.ShellScriptBuilder.create(Shell.OSType.OS_TYPE_LINUX);\r\n    Assert.assertEquals(\"Failed to parse \" + input, expected, bash.getEnvDependencies(input));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "inputForGetEnvDependenciesWin",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Stream<Arguments> inputForGetEnvDependenciesWin()\n{\r\n    return Stream.of(Arguments.of(null, asSet()), Arguments.of(\"\", asSet()), Arguments.of(\"A\", asSet()), Arguments.of(\"%%%%%%\", asSet()), Arguments.of(\"%%A%\", asSet()), Arguments.of(\"%A\", asSet()), Arguments.of(\"%A:\", asSet()), Arguments.of(\"%A%\", asSet(\"A\")), Arguments.of(\"%:%\", asSet(\":\")), Arguments.of(\"%:A%\", asSet()), Arguments.of(\"%%%A%\", asSet(\"A\")), Arguments.of(\"%%C%A%\", asSet(\"A\")), Arguments.of(\"%A:~-1%\", asSet(\"A\")), Arguments.of(\"%A:%\", asSet(\"A\")), Arguments.of(\"%A:whatever:a:b:%\", asSet(\"A\")), Arguments.of(\"%A%B%\", asSet(\"A\")), Arguments.of(\"%A%%%%%B%\", asSet(\"A\")), Arguments.of(\"%A%%B%\", asSet(\"A\", \"B\")), Arguments.of(\"%A%%%%B%\", asSet(\"A\", \"B\")), Arguments.of(\"%A%:%B%:%C%:pathlist var\", asSet(\"A\", \"B\", \"C\")), Arguments.of(\"%A%\\\\\\\\foo\\\\\\\\bar:%B%:%C%:pathlist var\", asSet(\"A\", \"B\", \"C\")));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testGetEnvDependenciesWin",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testGetEnvDependenciesWin(String input, Set<String> expected)\n{\r\n    ContainerLaunch.ShellScriptBuilder win = ContainerLaunch.ShellScriptBuilder.create(Shell.OSType.OS_TYPE_WIN);\r\n    Assert.assertEquals(\"Failed to parse \" + input, expected, win.getEnvDependencies(input));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "asSet",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<String> asSet(String... str)\n{\r\n    return Sets.newHashSet(str);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getYarnResource",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "org.apache.hadoop.yarn.api.records.LocalResource getYarnResource(Path p, long size, long timestamp, LocalResourceType type, LocalResourceVisibility state, String pattern) throws URISyntaxException\n{\r\n    org.apache.hadoop.yarn.api.records.LocalResource ret = RecordFactoryProvider.getRecordFactory(null).newRecordInstance(org.apache.hadoop.yarn.api.records.LocalResource.class);\r\n    ret.setResource(URL.fromURI(p.toUri()));\r\n    ret.setSize(size);\r\n    ret.setTimestamp(timestamp);\r\n    ret.setType(type);\r\n    ret.setVisibility(state);\r\n    ret.setPattern(pattern);\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "checkEqual",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void checkEqual(LocalResourceRequest a, LocalResourceRequest b)\n{\r\n    assertEquals(a, b);\r\n    assertEquals(a.hashCode(), b.hashCode());\r\n    assertEquals(0, a.compareTo(b));\r\n    assertEquals(0, b.compareTo(a));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "checkNotEqual",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void checkNotEqual(LocalResourceRequest a, LocalResourceRequest b)\n{\r\n    assertFalse(a.equals(b));\r\n    assertFalse(b.equals(a));\r\n    assertFalse(a.hashCode() == b.hashCode());\r\n    assertFalse(0 == a.compareTo(b));\r\n    assertFalse(0 == b.compareTo(a));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testResourceEquality",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testResourceEquality() throws URISyntaxException\n{\r\n    Random r = new Random();\r\n    long seed = r.nextLong();\r\n    r.setSeed(seed);\r\n    System.out.println(\"SEED: \" + seed);\r\n    long basetime = r.nextLong() >>> 2;\r\n    org.apache.hadoop.yarn.api.records.LocalResource yA = getYarnResource(new Path(\"http://yak.org:80/foobar\"), -1, basetime, FILE, PUBLIC, null);\r\n    org.apache.hadoop.yarn.api.records.LocalResource yB = getYarnResource(new Path(\"http://yak.org:80/foobar\"), -1, basetime, FILE, PUBLIC, null);\r\n    final LocalResourceRequest a = new LocalResourceRequest(yA);\r\n    LocalResourceRequest b = new LocalResourceRequest(yA);\r\n    checkEqual(a, b);\r\n    b = new LocalResourceRequest(yB);\r\n    checkEqual(a, b);\r\n    yB = getYarnResource(new Path(\"http://yak.org:80/foobar\"), -1, basetime, FILE, PRIVATE, null);\r\n    b = new LocalResourceRequest(yB);\r\n    checkEqual(a, b);\r\n    yB = getYarnResource(new Path(\"http://yak.org:80/foobar\"), 0, basetime, FILE, PRIVATE, null);\r\n    b = new LocalResourceRequest(yB);\r\n    checkEqual(a, b);\r\n    yB = getYarnResource(new Path(\"hdfs://dingo.org:80/foobar\"), 0, basetime, ARCHIVE, PUBLIC, null);\r\n    b = new LocalResourceRequest(yB);\r\n    checkNotEqual(a, b);\r\n    yB = getYarnResource(new Path(\"http://yak.org:80/foobar\"), 0, basetime, ARCHIVE, PUBLIC, null);\r\n    b = new LocalResourceRequest(yB);\r\n    checkNotEqual(a, b);\r\n    yB = getYarnResource(new Path(\"http://yak.org:80/foobar\"), 0, basetime + 1, FILE, PUBLIC, null);\r\n    b = new LocalResourceRequest(yB);\r\n    checkNotEqual(a, b);\r\n    yB = getYarnResource(new Path(\"http://yak.org:80/foobar\"), 0, basetime + 1, FILE, PUBLIC, \"^/foo/.*\");\r\n    b = new LocalResourceRequest(yB);\r\n    checkNotEqual(a, b);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testResourceOrder",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testResourceOrder() throws URISyntaxException\n{\r\n    Random r = new Random();\r\n    long seed = r.nextLong();\r\n    r.setSeed(seed);\r\n    System.out.println(\"SEED: \" + seed);\r\n    long basetime = r.nextLong() >>> 2;\r\n    org.apache.hadoop.yarn.api.records.LocalResource yA = getYarnResource(new Path(\"http://yak.org:80/foobar\"), -1, basetime, FILE, PUBLIC, \"^/foo/.*\");\r\n    final LocalResourceRequest a = new LocalResourceRequest(yA);\r\n    org.apache.hadoop.yarn.api.records.LocalResource yB = getYarnResource(new Path(\"http://yak.org:80/foobaz\"), -1, basetime, FILE, PUBLIC, \"^/foo/.*\");\r\n    LocalResourceRequest b = new LocalResourceRequest(yB);\r\n    assertTrue(0 > a.compareTo(b));\r\n    yB = getYarnResource(new Path(\"http://yak.org:80/foobar\"), -1, basetime + 1, FILE, PUBLIC, \"^/foo/.*\");\r\n    b = new LocalResourceRequest(yB);\r\n    assertTrue(0 > a.compareTo(b));\r\n    yB = getYarnResource(new Path(\"http://yak.org:80/foobar\"), -1, basetime, ARCHIVE, PUBLIC, \"^/foo/.*\");\r\n    b = new LocalResourceRequest(yB);\r\n    assertTrue(0 != a.compareTo(b));\r\n    yB = getYarnResource(new Path(\"http://yak.org:80/foobar\"), -1, basetime, ARCHIVE, PUBLIC, \"^/food/.*\");\r\n    b = new LocalResourceRequest(yB);\r\n    assertTrue(0 != a.compareTo(b));\r\n    yB = getYarnResource(new Path(\"http://yak.org:80/foobar\"), -1, basetime, ARCHIVE, PUBLIC, null);\r\n    b = new LocalResourceRequest(yB);\r\n    assertTrue(0 != a.compareTo(b));\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setup() throws IOException\n{\r\n    env = new HashMap<>();\r\n    envProvider = (String var) -> env.get(var);\r\n    commandExecutorProvider = (String[] cmd) -> mockCommandExecutor;\r\n    defaultScriptOutput = getOutputForDevice(0, \"/dev/ve0\", \"ONLINE\", \"0000:65:00.0\", 243, 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "teardown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void teardown() throws IOException\n{\r\n    if (testFolder != null) {\r\n        File f = new File(testFolder);\r\n        FileUtils.deleteDirectory(f);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "testParseScriptOutput",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testParseScriptOutput() throws ResourceHandlerException, IOException\n{\r\n    setupTestDirectoryWithScript();\r\n    plugin = new NECVEPlugin(envProvider, defaultSearchDirs, udevUtil);\r\n    plugin.setCommandExecutorProvider(commandExecutorProvider);\r\n    when(mockCommandExecutor.getOutput()).thenReturn(defaultScriptOutput);\r\n    Set<Device> devices = plugin.getDevices();\r\n    assertEquals(\"Number of devices\", 1, devices.size());\r\n    Device device = devices.iterator().next();\r\n    assertEquals(\"Device id\", 0, device.getId());\r\n    assertEquals(\"Device path\", \"/dev/ve0\", device.getDevPath());\r\n    assertEquals(\"Bus Id\", \"0000:65:00.0\", device.getBusID());\r\n    assertEquals(\"Status\", \"ONLINE\", device.getStatus());\r\n    assertEquals(\"Major number\", 243, device.getMajorNumber());\r\n    assertEquals(\"Minor number\", 0, device.getMinorNumber());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "testParseMultipleDevices",
  "errType" : null,
  "containingMethodsNum" : 30,
  "sourceCodeText" : "void testParseMultipleDevices() throws ResourceHandlerException, IOException\n{\r\n    setupTestDirectoryWithScript();\r\n    plugin = new NECVEPlugin(envProvider, defaultSearchDirs, udevUtil);\r\n    plugin.setCommandExecutorProvider(commandExecutorProvider);\r\n    defaultScriptOutput += \"\\n\";\r\n    defaultScriptOutput += getOutputForDevice(1, \"/dev/ve1\", \"ONLINE\", \"0000:66:00.0\", 244, 1);\r\n    defaultScriptOutput += \"\\n\";\r\n    defaultScriptOutput += getOutputForDevice(2, \"/dev/ve2\", \"ONLINE\", \"0000:67:00.0\", 245, 2);\r\n    when(mockCommandExecutor.getOutput()).thenReturn(defaultScriptOutput);\r\n    Set<Device> devices = plugin.getDevices();\r\n    assertEquals(\"Number of devices\", 3, devices.size());\r\n    List<Device> devicesList = Lists.newArrayList(devices);\r\n    Collections.sort(devicesList, DEVICE_COMPARATOR);\r\n    Device device0 = devicesList.get(0);\r\n    assertEquals(\"Device id\", 0, device0.getId());\r\n    assertEquals(\"Device path\", \"/dev/ve0\", device0.getDevPath());\r\n    assertEquals(\"Bus Id\", \"0000:65:00.0\", device0.getBusID());\r\n    assertEquals(\"Status\", \"ONLINE\", device0.getStatus());\r\n    assertEquals(\"Major number\", 243, device0.getMajorNumber());\r\n    assertEquals(\"Minor number\", 0, device0.getMinorNumber());\r\n    Device device1 = devicesList.get(1);\r\n    assertEquals(\"Device id\", 1, device1.getId());\r\n    assertEquals(\"Device path\", \"/dev/ve1\", device1.getDevPath());\r\n    assertEquals(\"Bus Id\", \"0000:66:00.0\", device1.getBusID());\r\n    assertEquals(\"Status\", \"ONLINE\", device1.getStatus());\r\n    assertEquals(\"Major number\", 244, device1.getMajorNumber());\r\n    assertEquals(\"Minor number\", 1, device1.getMinorNumber());\r\n    Device device2 = devicesList.get(2);\r\n    assertEquals(\"Device id\", 2, device2.getId());\r\n    assertEquals(\"Device path\", \"/dev/ve2\", device2.getDevPath());\r\n    assertEquals(\"Bus Id\", \"0000:67:00.0\", device2.getBusID());\r\n    assertEquals(\"Status\", \"ONLINE\", device2.getStatus());\r\n    assertEquals(\"Major number\", 245, device2.getMajorNumber());\r\n    assertEquals(\"Minor number\", 2, device2.getMinorNumber());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "testOfflineDeviceIsSkipped",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testOfflineDeviceIsSkipped() throws ResourceHandlerException, IOException\n{\r\n    setupTestDirectoryWithScript();\r\n    plugin = new NECVEPlugin(envProvider, defaultSearchDirs, udevUtil);\r\n    plugin.setCommandExecutorProvider(commandExecutorProvider);\r\n    defaultScriptOutput = getOutputForDevice(0, \"/dev/ve0\", \"OFFLINE\", \"0000:65:00.0\", 243, 0);\r\n    when(mockCommandExecutor.getOutput()).thenReturn(defaultScriptOutput);\r\n    Set<Device> devices = plugin.getDevices();\r\n    assertEquals(\"Number of devices\", 0, devices.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "testUnparseableLineSkipped",
  "errType" : null,
  "containingMethodsNum" : 22,
  "sourceCodeText" : "void testUnparseableLineSkipped() throws ResourceHandlerException, IOException\n{\r\n    setupTestDirectoryWithScript();\r\n    plugin = new NECVEPlugin(envProvider, defaultSearchDirs, udevUtil);\r\n    plugin.setCommandExecutorProvider(commandExecutorProvider);\r\n    defaultScriptOutput += \"\\n\";\r\n    defaultScriptOutput += \"cannot,be,parsed\\n\";\r\n    defaultScriptOutput += getOutputForDevice(1, \"/dev/ve1\", \"ONLINE\", \"0000:66:00.0\", 244, 1);\r\n    when(mockCommandExecutor.getOutput()).thenReturn(defaultScriptOutput);\r\n    Set<Device> devices = plugin.getDevices();\r\n    assertEquals(\"Number of devices\", 2, devices.size());\r\n    List<Device> devicesList = Lists.newArrayList(devices);\r\n    Collections.sort(devicesList, DEVICE_COMPARATOR);\r\n    Device device0 = devicesList.get(0);\r\n    assertEquals(\"Device id\", 0, device0.getId());\r\n    assertEquals(\"Device path\", \"/dev/ve0\", device0.getDevPath());\r\n    assertEquals(\"Bus Id\", \"0000:65:00.0\", device0.getBusID());\r\n    assertEquals(\"Status\", \"ONLINE\", device0.getStatus());\r\n    assertEquals(\"Major number\", 243, device0.getMajorNumber());\r\n    assertEquals(\"Minor number\", 0, device0.getMinorNumber());\r\n    Device device1 = devicesList.get(1);\r\n    assertEquals(\"Device id\", 1, device1.getId());\r\n    assertEquals(\"Device path\", \"/dev/ve1\", device1.getDevPath());\r\n    assertEquals(\"Bus Id\", \"0000:66:00.0\", device1.getBusID());\r\n    assertEquals(\"Status\", \"ONLINE\", device1.getStatus());\r\n    assertEquals(\"Major number\", 244, device1.getMajorNumber());\r\n    assertEquals(\"Minor number\", 1, device1.getMinorNumber());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "testScriptFoundWithDifferentName",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testScriptFoundWithDifferentName() throws ResourceHandlerException, IOException\n{\r\n    setupTestDirectoryWithScript();\r\n    final String dummyScriptName = \"dummy-script.py\";\r\n    Path scriptPath = Paths.get(testFolder, dummyScriptName);\r\n    Files.createFile(scriptPath);\r\n    Files.delete(Paths.get(testFolder, DEFAULT_SCRIPT_NAME));\r\n    env.put(\"NEC_VE_GET_SCRIPT_NAME\", dummyScriptName);\r\n    plugin = new NECVEPlugin(envProvider, defaultSearchDirs, udevUtil);\r\n    verifyBinaryPathSet(scriptPath);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "testScriptFoundWithExplicitPath",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testScriptFoundWithExplicitPath() throws ResourceHandlerException, IOException\n{\r\n    setupTestDirectory(\"_temp_\" + System.currentTimeMillis());\r\n    Path scriptPath = Paths.get(testFolder, DEFAULT_SCRIPT_NAME);\r\n    Files.createFile(scriptPath);\r\n    scriptPath.toFile().setExecutable(true);\r\n    assertTrue(\"Cannot set executable flag\", scriptPath.toFile().canExecute());\r\n    env.put(\"NEC_VE_GET_SCRIPT_PATH\", testFolder + \"/\" + DEFAULT_SCRIPT_NAME);\r\n    plugin = new NECVEPlugin(envProvider, EMPTY_SEARCH_DIRS, udevUtil);\r\n    verifyBinaryPathSet(scriptPath);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "testExplicitPathPointsToDirectory",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testExplicitPathPointsToDirectory() throws ResourceHandlerException, IOException\n{\r\n    setupTestDirectory(\"_temp_\" + System.currentTimeMillis());\r\n    env.put(\"NEC_VE_GET_SCRIPT_PATH\", testFolder);\r\n    plugin = new NECVEPlugin(envProvider, EMPTY_SEARCH_DIRS, udevUtil);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "testExplicitPathIsNotExecutable",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testExplicitPathIsNotExecutable() throws ResourceHandlerException, IOException\n{\r\n    setupTestDirectory(\"_temp_\" + System.currentTimeMillis());\r\n    Path scriptPath = Paths.get(testFolder, DEFAULT_SCRIPT_NAME);\r\n    Files.createFile(scriptPath);\r\n    scriptPath.toFile().setExecutable(false);\r\n    assertFalse(\"File is executable\", scriptPath.toFile().canExecute());\r\n    env.put(\"NEC_VE_GET_SCRIPT_PATH\", testFolder + \"/\" + DEFAULT_SCRIPT_NAME);\r\n    plugin = new NECVEPlugin(envProvider, EMPTY_SEARCH_DIRS, udevUtil);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "testScriptFoundUnderHadoopCommonPath",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testScriptFoundUnderHadoopCommonPath() throws ResourceHandlerException, IOException\n{\r\n    setupTestDirectory(\"_temp_\" + System.currentTimeMillis());\r\n    Path p = Paths.get(testFolder, \"/sbin/DevicePluginScript\");\r\n    Files.createDirectories(p);\r\n    Path scriptPath = Paths.get(testFolder, \"/sbin/DevicePluginScript\", DEFAULT_SCRIPT_NAME);\r\n    Files.createFile(scriptPath);\r\n    env.put(\"HADOOP_COMMON_HOME\", testFolder);\r\n    plugin = new NECVEPlugin(envProvider, EMPTY_SEARCH_DIRS, udevUtil);\r\n    verifyBinaryPathSet(scriptPath);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "testScriptFoundUnderBasicSearchDirs",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testScriptFoundUnderBasicSearchDirs() throws ResourceHandlerException, IOException\n{\r\n    setupTestDirectoryWithScript();\r\n    plugin = new NECVEPlugin(envProvider, defaultSearchDirs, udevUtil);\r\n    Path scriptPath = Paths.get(testFolder, DEFAULT_SCRIPT_NAME);\r\n    verifyBinaryPathSet(scriptPath);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "testAllocateSingleDevice",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testAllocateSingleDevice() throws ResourceHandlerException, IOException\n{\r\n    setupTestDirectoryWithScript();\r\n    plugin = new NECVEPlugin(envProvider, defaultSearchDirs, udevUtil);\r\n    Set<Device> available = new HashSet<>();\r\n    Device device = getTestDevice(0);\r\n    available.add(device);\r\n    Set<Device> allocated = plugin.allocateDevices(available, 1, env);\r\n    assertEquals(\"No. of devices\", 1, allocated.size());\r\n    Device allocatedDevice = allocated.iterator().next();\r\n    assertSame(\"Device\", device, allocatedDevice);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "testAllocateMultipleDevices",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testAllocateMultipleDevices() throws ResourceHandlerException, IOException\n{\r\n    setupTestDirectoryWithScript();\r\n    plugin = new NECVEPlugin(envProvider, defaultSearchDirs, udevUtil);\r\n    Set<Device> available = new HashSet<>();\r\n    Device device0 = getTestDevice(0);\r\n    Device device1 = getTestDevice(1);\r\n    available.add(device0);\r\n    available.add(device1);\r\n    Set<Device> allocated = plugin.allocateDevices(available, 2, env);\r\n    assertEquals(\"No. of devices\", 2, allocated.size());\r\n    assertTrue(\"Device missing\", allocated.contains(device0));\r\n    assertTrue(\"Device missing\", allocated.contains(device1));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "testFindDevicesWithUdev",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testFindDevicesWithUdev() throws ResourceHandlerException, IOException\n{\r\n    @SuppressWarnings(\"unchecked\")\r\n    Function<String, String> mockEnvProvider = mock(Function.class);\r\n    VEDeviceDiscoverer veDeviceDiscoverer = mock(VEDeviceDiscoverer.class);\r\n    when(mockEnvProvider.apply(eq(\"NEC_USE_UDEV\"))).thenReturn(\"true\");\r\n    Device testDevice = getTestDevice(0);\r\n    when(veDeviceDiscoverer.getDevicesFromPath(anyString())).thenReturn(Sets.newHashSet(testDevice));\r\n    plugin = new NECVEPlugin(mockEnvProvider, defaultSearchDirs, udevUtil);\r\n    plugin.setVeDeviceDiscoverer(veDeviceDiscoverer);\r\n    Set<Device> devices = plugin.getDevices();\r\n    assertEquals(\"No. of devices\", 1, devices.size());\r\n    Device device = devices.iterator().next();\r\n    assertSame(\"Device\", device, testDevice);\r\n    verifyZeroInteractions(mockCommandExecutor);\r\n    verify(mockEnvProvider).apply(eq(\"NEC_USE_UDEV\"));\r\n    verifyNoMoreInteractions(mockEnvProvider);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "setupTestDirectoryWithScript",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setupTestDirectoryWithScript() throws IOException\n{\r\n    setupTestDirectory(null);\r\n    Files.createFile(Paths.get(testFolder, DEFAULT_SCRIPT_NAME));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "getOutputForDevice",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getOutputForDevice(int id, String devPath, String state, String busId, int major, int minor)\n{\r\n    return String.format(\"id=%d, dev=%s, state=%s, busId=%s, major=%d, minor=%d\", id, devPath, state, busId, major, minor);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "setupTestDirectory",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setupTestDirectory(String postFix) throws IOException\n{\r\n    String path = \"target/temp/\" + TestNECVEPlugin.class.getName() + (postFix == null ? \"\" : postFix);\r\n    testFolder = new File(path).getAbsolutePath();\r\n    File f = new File(testFolder);\r\n    FileUtils.deleteDirectory(f);\r\n    if (!f.mkdirs()) {\r\n        throw new RuntimeException(\"Could not create directory: \" + f.getAbsolutePath());\r\n    }\r\n    defaultSearchDirs = new String[] { testFolder };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "getTestDevice",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Device getTestDevice(int id)\n{\r\n    Device.Builder builder = Device.Builder.newInstance();\r\n    return builder.setId(id).setDevPath(\"/mock/path\").setMajorNumber(200).setMinorNumber(id).setBusID(\"0000:66:00.0\").setHealthy(true).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "verifyBinaryPathSet",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void verifyBinaryPathSet(Path expectedPath)\n{\r\n    assertEquals(\"Binary path\", expectedPath.toString(), plugin.getBinaryPath());\r\n    verifyZeroInteractions(udevUtil);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 22,
  "sourceCodeText" : "void setup() throws IOException\n{\r\n    localFS.delete(new Path(localDir.getAbsolutePath()), true);\r\n    localFS.delete(new Path(tmpDir.getAbsolutePath()), true);\r\n    localFS.delete(new Path(localLogDir.getAbsolutePath()), true);\r\n    localFS.delete(new Path(remoteLogDir.getAbsolutePath()), true);\r\n    localDir.mkdir();\r\n    tmpDir.mkdir();\r\n    localLogDir.mkdir();\r\n    remoteLogDir.mkdir();\r\n    LOG.info(\"Created localDir in \" + localDir.getAbsolutePath());\r\n    LOG.info(\"Created tmpDir in \" + tmpDir.getAbsolutePath());\r\n    String bindAddress = \"0.0.0.0:\" + ServerSocketUtil.getPort(49160, 10);\r\n    conf.set(YarnConfiguration.NM_ADDRESS, bindAddress);\r\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, localDir.getAbsolutePath());\r\n    conf.set(YarnConfiguration.NM_LOG_DIRS, localLogDir.getAbsolutePath());\r\n    conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR, remoteLogDir.getAbsolutePath());\r\n    conf.setLong(YarnConfiguration.NM_LOG_RETAIN_SECONDS, 1);\r\n    conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, true);\r\n    conf.setFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION, 2.0f);\r\n    delSrvc = createDeletionService();\r\n    delSrvc.init(conf);\r\n    exec = createContainerExecutor();\r\n    dirsHandler = new LocalDirsHandlerService();\r\n    nodeHealthChecker = new NodeHealthCheckerService(dirsHandler);\r\n    nodeHealthChecker.init(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testApplicationRecovery",
  "errType" : null,
  "containingMethodsNum" : 79,
  "sourceCodeText" : "void testApplicationRecovery() throws Exception\n{\r\n    conf.setBoolean(YarnConfiguration.NM_RECOVERY_ENABLED, true);\r\n    conf.setBoolean(YarnConfiguration.NM_RECOVERY_SUPERVISED, true);\r\n    conf.setBoolean(YarnConfiguration.YARN_ACL_ENABLE, true);\r\n    conf.set(YarnConfiguration.YARN_ADMIN_ACL, \"yarn_admin_user\");\r\n    NMStateStoreService stateStore = new NMMemoryStateStoreService();\r\n    stateStore.init(conf);\r\n    stateStore.start();\r\n    Context context = createContext(conf, stateStore);\r\n    ContainerManagerImpl cm = createContainerManager(context);\r\n    cm.init(conf);\r\n    cm.start();\r\n    String appName = \"app_name1\";\r\n    String appUser = \"app_user1\";\r\n    String modUser = \"modify_user1\";\r\n    String viewUser = \"view_user1\";\r\n    String enemyUser = \"enemy_user\";\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId cid = ContainerId.newContainerId(attemptId, 1);\r\n    Map<String, LocalResource> localResources = Collections.emptyMap();\r\n    Map<String, String> containerEnv = new HashMap<>();\r\n    setFlowContext(containerEnv, appName, appId);\r\n    List<String> containerCmds = Collections.emptyList();\r\n    Map<String, ByteBuffer> serviceData = Collections.emptyMap();\r\n    Credentials containerCreds = new Credentials();\r\n    DataOutputBuffer dob = new DataOutputBuffer();\r\n    containerCreds.writeTokenStorageToStream(dob);\r\n    ByteBuffer containerTokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\r\n    Map<ApplicationAccessType, String> acls = new HashMap<ApplicationAccessType, String>();\r\n    acls.put(ApplicationAccessType.MODIFY_APP, modUser);\r\n    acls.put(ApplicationAccessType.VIEW_APP, viewUser);\r\n    ContainerLaunchContext clc = ContainerLaunchContext.newInstance(localResources, containerEnv, containerCmds, serviceData, containerTokens, acls);\r\n    LogAggregationContext logAggregationContext = LogAggregationContext.newInstance(\"includePattern\", \"excludePattern\", \"includePatternInRollingAggregation\", \"excludePatternInRollingAggregation\");\r\n    StartContainersResponse startResponse = startContainer(context, cm, cid, clc, logAggregationContext, ContainerType.TASK);\r\n    assertTrue(startResponse.getFailedRequests().isEmpty());\r\n    assertEquals(1, context.getApplications().size());\r\n    Application app = context.getApplications().get(appId);\r\n    assertNotNull(app);\r\n    waitForAppState(app, ApplicationState.INITING);\r\n    assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(modUser), ApplicationAccessType.MODIFY_APP, appUser, appId));\r\n    assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.MODIFY_APP, appUser, appId));\r\n    assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.VIEW_APP, appUser, appId));\r\n    assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(enemyUser), ApplicationAccessType.VIEW_APP, appUser, appId));\r\n    cm.stop();\r\n    context = createContext(conf, stateStore);\r\n    cm = createContainerManager(context);\r\n    cm.init(conf);\r\n    cm.start();\r\n    assertEquals(1, context.getApplications().size());\r\n    app = context.getApplications().get(appId);\r\n    assertNotNull(app);\r\n    LogAggregationContext recovered = ((ApplicationImpl) app).getLogAggregationContext();\r\n    assertNotNull(recovered);\r\n    assertEquals(logAggregationContext.getIncludePattern(), recovered.getIncludePattern());\r\n    assertEquals(logAggregationContext.getExcludePattern(), recovered.getExcludePattern());\r\n    assertEquals(logAggregationContext.getRolledLogsIncludePattern(), recovered.getRolledLogsIncludePattern());\r\n    assertEquals(logAggregationContext.getRolledLogsExcludePattern(), recovered.getRolledLogsExcludePattern());\r\n    waitForAppState(app, ApplicationState.INITING);\r\n    assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(modUser), ApplicationAccessType.MODIFY_APP, appUser, appId));\r\n    assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.MODIFY_APP, appUser, appId));\r\n    assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.VIEW_APP, appUser, appId));\r\n    assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(enemyUser), ApplicationAccessType.VIEW_APP, appUser, appId));\r\n    List<ApplicationId> finishedApps = new ArrayList<ApplicationId>();\r\n    finishedApps.add(appId);\r\n    app.handle(new ApplicationFinishEvent(appId, \"Application killed by ResourceManager\"));\r\n    waitForAppState(app, ApplicationState.APPLICATION_RESOURCES_CLEANINGUP);\r\n    cm.stop();\r\n    context = createContext(conf, stateStore);\r\n    cm = createContainerManager(context);\r\n    cm.init(conf);\r\n    cm.start();\r\n    assertEquals(1, context.getApplications().size());\r\n    app = context.getApplications().get(appId);\r\n    assertNotNull(app);\r\n    app.handle(new ApplicationFinishEvent(appId, \"Application killed by ResourceManager\"));\r\n    waitForAppState(app, ApplicationState.APPLICATION_RESOURCES_CLEANINGUP);\r\n    assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(modUser), ApplicationAccessType.MODIFY_APP, appUser, appId));\r\n    assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.MODIFY_APP, appUser, appId));\r\n    assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.VIEW_APP, appUser, appId));\r\n    assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(enemyUser), ApplicationAccessType.VIEW_APP, appUser, appId));\r\n    app.handle(new ApplicationEvent(app.getAppId(), ApplicationEventType.APPLICATION_RESOURCES_CLEANEDUP));\r\n    assertThat(app.getApplicationState()).isEqualTo(ApplicationState.FINISHED);\r\n    app.handle(new ApplicationEvent(app.getAppId(), ApplicationEventType.APPLICATION_LOG_HANDLING_FINISHED));\r\n    cm.stop();\r\n    context = createContext(conf, stateStore);\r\n    cm = createContainerManager(context);\r\n    cm.init(conf);\r\n    cm.start();\r\n    assertTrue(context.getApplications().isEmpty());\r\n    cm.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testNMRecoveryForAppFinishedWithLogAggregationFailure",
  "errType" : null,
  "containingMethodsNum" : 48,
  "sourceCodeText" : "void testNMRecoveryForAppFinishedWithLogAggregationFailure() throws Exception\n{\r\n    conf.setBoolean(YarnConfiguration.NM_RECOVERY_ENABLED, true);\r\n    conf.setBoolean(YarnConfiguration.NM_RECOVERY_SUPERVISED, true);\r\n    NMStateStoreService stateStore = new NMMemoryStateStoreService();\r\n    stateStore.init(conf);\r\n    stateStore.start();\r\n    Context context = createContext(conf, stateStore);\r\n    ContainerManagerImpl cm = createContainerManager(context);\r\n    cm.init(conf);\r\n    cm.start();\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId cid = ContainerId.newContainerId(attemptId, 1);\r\n    Map<String, LocalResource> localResources = Collections.emptyMap();\r\n    Map<String, String> containerEnv = new HashMap<>();\r\n    setFlowContext(containerEnv, \"app_name1\", appId);\r\n    List<String> containerCmds = Collections.emptyList();\r\n    Map<String, ByteBuffer> serviceData = Collections.emptyMap();\r\n    ContainerLaunchContext clc = ContainerLaunchContext.newInstance(localResources, containerEnv, containerCmds, serviceData, null, null);\r\n    StartContainersResponse startResponse = startContainer(context, cm, cid, clc, null, ContainerType.TASK);\r\n    assertTrue(startResponse.getFailedRequests().isEmpty());\r\n    assertEquals(1, context.getApplications().size());\r\n    Application app = context.getApplications().get(appId);\r\n    assertNotNull(app);\r\n    waitForAppState(app, ApplicationState.INITING);\r\n    List<ApplicationId> finishedApps = new ArrayList<ApplicationId>();\r\n    finishedApps.add(appId);\r\n    app.handle(new ApplicationFinishEvent(appId, \"Application killed by ResourceManager\"));\r\n    waitForAppState(app, ApplicationState.APPLICATION_RESOURCES_CLEANINGUP);\r\n    app.handle(new ApplicationEvent(app.getAppId(), ApplicationEventType.APPLICATION_RESOURCES_CLEANEDUP));\r\n    assertThat(app.getApplicationState()).isEqualTo(ApplicationState.FINISHED);\r\n    assertEquals(1, context.getApplications().size());\r\n    cm.stop();\r\n    context = createContext(conf, stateStore);\r\n    cm = createContainerManager(context);\r\n    cm.init(conf);\r\n    cm.start();\r\n    assertEquals(1, context.getApplications().size());\r\n    app = context.getApplications().get(appId);\r\n    assertNotNull(app);\r\n    app.handle(new ApplicationFinishEvent(appId, \"Application killed by ResourceManager\"));\r\n    waitForAppState(app, ApplicationState.APPLICATION_RESOURCES_CLEANINGUP);\r\n    app.handle(new ApplicationEvent(app.getAppId(), ApplicationEventType.APPLICATION_RESOURCES_CLEANEDUP));\r\n    assertThat(app.getApplicationState()).isEqualTo(ApplicationState.FINISHED);\r\n    app.handle(new ApplicationEvent(app.getAppId(), ApplicationEventType.APPLICATION_LOG_HANDLING_FAILED));\r\n    cm.stop();\r\n    context = createContext(conf, stateStore);\r\n    cm = createContainerManager(context);\r\n    cm.init(conf);\r\n    cm.start();\r\n    assertTrue(context.getApplications().isEmpty());\r\n    cm.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testNodeManagerMetricsRecovery",
  "errType" : null,
  "containingMethodsNum" : 38,
  "sourceCodeText" : "void testNodeManagerMetricsRecovery() throws Exception\n{\r\n    conf.setBoolean(YarnConfiguration.NM_RECOVERY_ENABLED, true);\r\n    conf.setBoolean(YarnConfiguration.NM_RECOVERY_SUPERVISED, true);\r\n    NMStateStoreService stateStore = new NMMemoryStateStoreService();\r\n    stateStore.init(conf);\r\n    stateStore.start();\r\n    Context context = createContext(conf, stateStore);\r\n    ContainerManagerImpl cm = createContainerManager(context, delSrvc);\r\n    cm.init(conf);\r\n    cm.start();\r\n    metrics.addResource(Resource.newInstance(10240, 8));\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId cid = ContainerId.newContainerId(attemptId, 1);\r\n    Map<String, String> containerEnv = Collections.emptyMap();\r\n    Map<String, ByteBuffer> serviceData = Collections.emptyMap();\r\n    Map<String, LocalResource> localResources = Collections.emptyMap();\r\n    List<String> commands = Arrays.asList(\"sleep 60s\".split(\" \"));\r\n    ContainerLaunchContext clc = ContainerLaunchContext.newInstance(localResources, containerEnv, commands, serviceData, null, null);\r\n    StartContainersResponse startResponse = startContainer(context, cm, cid, clc, null, ContainerType.TASK);\r\n    assertTrue(startResponse.getFailedRequests().isEmpty());\r\n    assertEquals(1, context.getApplications().size());\r\n    Application app = context.getApplications().get(appId);\r\n    assertNotNull(app);\r\n    waitForNMContainerState(cm, cid, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.RUNNING);\r\n    TestNodeManagerMetrics.checkMetrics(1, 0, 0, 0, 0, 1, 1, 1, 9, 1, 7, 0F, 1);\r\n    cm.stop();\r\n    DefaultMetricsSystem.shutdown();\r\n    metrics = NodeManagerMetrics.create();\r\n    metrics.addResource(Resource.newInstance(10240, 8));\r\n    TestNodeManagerMetrics.checkMetrics(0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 8, 0F, 0);\r\n    context = createContext(conf, stateStore);\r\n    cm = createContainerManager(context, delSrvc);\r\n    cm.init(conf);\r\n    cm.start();\r\n    assertEquals(1, context.getApplications().size());\r\n    app = context.getApplications().get(appId);\r\n    assertNotNull(app);\r\n    TestNodeManagerMetrics.checkMetrics(1, 0, 0, 0, 0, 1, 1, 1, 9, 1, 7, 0F, 1);\r\n    cm.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testContainerResizeRecovery",
  "errType" : null,
  "containingMethodsNum" : 32,
  "sourceCodeText" : "void testContainerResizeRecovery() throws Exception\n{\r\n    conf.setBoolean(YarnConfiguration.NM_RECOVERY_ENABLED, true);\r\n    conf.setBoolean(YarnConfiguration.NM_RECOVERY_SUPERVISED, true);\r\n    NMStateStoreService stateStore = new NMMemoryStateStoreService();\r\n    stateStore.init(conf);\r\n    stateStore.start();\r\n    context = createContext(conf, stateStore);\r\n    ContainerManagerImpl cm = createContainerManager(context, delSrvc);\r\n    ((NMContext) context).setContainerManager(cm);\r\n    cm.init(conf);\r\n    cm.start();\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId cid = ContainerId.newContainerId(attemptId, 1);\r\n    commonLaunchContainer(appId, cid, cm);\r\n    Application app = context.getApplications().get(appId);\r\n    assertNotNull(app);\r\n    Resource targetResource = Resource.newInstance(2048, 2);\r\n    ContainerUpdateResponse updateResponse = updateContainers(context, cm, cid, targetResource);\r\n    assertTrue(updateResponse.getFailedRequests().isEmpty());\r\n    ContainerStatus containerStatus = getContainerStatus(context, cm, cid);\r\n    assertEquals(targetResource, containerStatus.getCapability());\r\n    cm.stop();\r\n    context = createContext(conf, stateStore);\r\n    cm = createContainerManager(context);\r\n    ((NMContext) context).setContainerManager(cm);\r\n    cm.init(conf);\r\n    cm.start();\r\n    assertEquals(1, context.getApplications().size());\r\n    app = context.getApplications().get(appId);\r\n    assertNotNull(app);\r\n    containerStatus = getContainerStatus(context, cm, cid);\r\n    assertEquals(targetResource, containerStatus.getCapability());\r\n    cm.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testContainerSchedulerRecovery",
  "errType" : null,
  "containingMethodsNum" : 31,
  "sourceCodeText" : "void testContainerSchedulerRecovery() throws Exception\n{\r\n    conf.setBoolean(YarnConfiguration.NM_RECOVERY_ENABLED, true);\r\n    conf.setBoolean(YarnConfiguration.NM_RECOVERY_SUPERVISED, true);\r\n    NMStateStoreService stateStore = new NMMemoryStateStoreService();\r\n    stateStore.init(conf);\r\n    stateStore.start();\r\n    context = createContext(conf, stateStore);\r\n    ContainerManagerImpl cm = createContainerManager(context, delSrvc);\r\n    ((NMContext) context).setContainerManager(cm);\r\n    cm.init(conf);\r\n    cm.start();\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId cid = ContainerId.newContainerId(attemptId, 1);\r\n    commonLaunchContainer(appId, cid, cm);\r\n    Application app = context.getApplications().get(appId);\r\n    assertNotNull(app);\r\n    ResourceUtilization utilization = ResourceUtilization.newInstance(1024, 2048, 1.0F);\r\n    assertThat(cm.getContainerScheduler().getNumRunningContainers()).isEqualTo(1);\r\n    assertEquals(utilization, cm.getContainerScheduler().getCurrentUtilization());\r\n    cm.stop();\r\n    context = createContext(conf, stateStore);\r\n    cm = createContainerManager(context, delSrvc);\r\n    ((NMContext) context).setContainerManager(cm);\r\n    cm.init(conf);\r\n    cm.start();\r\n    assertEquals(1, context.getApplications().size());\r\n    app = context.getApplications().get(appId);\r\n    assertNotNull(app);\r\n    waitForNMContainerState(cm, cid, ContainerState.RUNNING);\r\n    assertThat(cm.getContainerScheduler().getNumRunningContainers()).isEqualTo(1);\r\n    assertEquals(utilization, cm.getContainerScheduler().getCurrentUtilization());\r\n    cm.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testResourceMappingRecoveryForContainer",
  "errType" : null,
  "containingMethodsNum" : 38,
  "sourceCodeText" : "void testResourceMappingRecoveryForContainer() throws Exception\n{\r\n    conf.setBoolean(YarnConfiguration.NM_RECOVERY_ENABLED, true);\r\n    conf.setBoolean(YarnConfiguration.NM_RECOVERY_SUPERVISED, true);\r\n    NMStateStoreService stateStore = new NMMemoryStateStoreService();\r\n    stateStore.init(conf);\r\n    stateStore.start();\r\n    context = createContext(conf, stateStore);\r\n    ContainerManagerImpl cm = createContainerManager(context, delSrvc);\r\n    ((NMContext) context).setContainerManager(cm);\r\n    cm.init(conf);\r\n    cm.start();\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId cid = ContainerId.newContainerId(attemptId, 1);\r\n    commonLaunchContainer(appId, cid, cm);\r\n    Container nmContainer = context.getContainers().get(cid);\r\n    Application app = context.getApplications().get(appId);\r\n    assertNotNull(app);\r\n    List<Serializable> gpuResources = Arrays.asList(\"1\", \"2\", \"3\");\r\n    stateStore.storeAssignedResources(nmContainer, \"gpu\", gpuResources);\r\n    List<Serializable> numaResources = Arrays.asList(\"numa1\");\r\n    stateStore.storeAssignedResources(nmContainer, \"numa\", numaResources);\r\n    List<Serializable> fpgaResources = Arrays.asList(\"fpga1\", \"fpga2\");\r\n    stateStore.storeAssignedResources(nmContainer, \"fpga\", fpgaResources);\r\n    cm.stop();\r\n    context = createContext(conf, stateStore);\r\n    cm = createContainerManager(context);\r\n    ((NMContext) context).setContainerManager(cm);\r\n    cm.init(conf);\r\n    cm.start();\r\n    assertEquals(1, context.getApplications().size());\r\n    app = context.getApplications().get(appId);\r\n    assertNotNull(app);\r\n    Assert.assertNotNull(nmContainer);\r\n    ResourceMappings resourceMappings = nmContainer.getResourceMappings();\r\n    List<Serializable> assignedResource = resourceMappings.getAssignedResources(\"gpu\");\r\n    Assert.assertTrue(assignedResource.equals(gpuResources));\r\n    Assert.assertTrue(resourceMappings.getAssignedResources(\"numa\").equals(numaResources));\r\n    Assert.assertTrue(resourceMappings.getAssignedResources(\"fpga\").equals(fpgaResources));\r\n    cm.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testContainerCleanupOnShutdown",
  "errType" : null,
  "containingMethodsNum" : 48,
  "sourceCodeText" : "void testContainerCleanupOnShutdown() throws Exception\n{\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId cid = ContainerId.newContainerId(attemptId, 1);\r\n    Map<String, LocalResource> localResources = Collections.emptyMap();\r\n    Map<String, String> containerEnv = new HashMap<>();\r\n    setFlowContext(containerEnv, \"app_name1\", appId);\r\n    List<String> containerCmds = Collections.emptyList();\r\n    Map<String, ByteBuffer> serviceData = Collections.emptyMap();\r\n    Credentials containerCreds = new Credentials();\r\n    DataOutputBuffer dob = new DataOutputBuffer();\r\n    containerCreds.writeTokenStorageToStream(dob);\r\n    ByteBuffer containerTokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\r\n    Map<ApplicationAccessType, String> acls = Collections.emptyMap();\r\n    ContainerLaunchContext clc = ContainerLaunchContext.newInstance(localResources, containerEnv, containerCmds, serviceData, containerTokens, acls);\r\n    LogAggregationContext logAggregationContext = LogAggregationContext.newInstance(\"includePattern\", \"excludePattern\");\r\n    conf.setBoolean(YarnConfiguration.NM_RECOVERY_ENABLED, false);\r\n    conf.setBoolean(YarnConfiguration.NM_RECOVERY_SUPERVISED, false);\r\n    Context context = createContext(conf, new NMNullStateStoreService());\r\n    ContainerManagerImpl cm = spy(createContainerManager(context));\r\n    cm.init(conf);\r\n    cm.start();\r\n    StartContainersResponse startResponse = startContainer(context, cm, cid, clc, logAggregationContext, ContainerType.TASK);\r\n    assertEquals(1, startResponse.getSuccessfullyStartedContainers().size());\r\n    cm.stop();\r\n    verify(cm).handle(isA(CMgrCompletedAppsEvent.class));\r\n    conf.setBoolean(YarnConfiguration.NM_RECOVERY_ENABLED, true);\r\n    conf.setBoolean(YarnConfiguration.NM_RECOVERY_SUPERVISED, false);\r\n    NMMemoryStateStoreService memStore = new NMMemoryStateStoreService();\r\n    memStore.init(conf);\r\n    memStore.start();\r\n    context = createContext(conf, memStore);\r\n    cm = spy(createContainerManager(context));\r\n    cm.init(conf);\r\n    cm.start();\r\n    startResponse = startContainer(context, cm, cid, clc, logAggregationContext, ContainerType.TASK);\r\n    assertEquals(1, startResponse.getSuccessfullyStartedContainers().size());\r\n    cm.stop();\r\n    memStore.close();\r\n    verify(cm).handle(isA(CMgrCompletedAppsEvent.class));\r\n    conf.setBoolean(YarnConfiguration.NM_RECOVERY_ENABLED, true);\r\n    conf.setBoolean(YarnConfiguration.NM_RECOVERY_SUPERVISED, true);\r\n    memStore = new NMMemoryStateStoreService();\r\n    memStore.init(conf);\r\n    memStore.start();\r\n    context = createContext(conf, memStore);\r\n    cm = spy(createContainerManager(context));\r\n    cm.init(conf);\r\n    cm.start();\r\n    startResponse = startContainer(context, cm, cid, clc, logAggregationContext, ContainerType.TASK);\r\n    assertEquals(1, startResponse.getSuccessfullyStartedContainers().size());\r\n    cm.stop();\r\n    memStore.close();\r\n    verify(cm, never()).handle(isA(CMgrCompletedAppsEvent.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testKilledContainerInQueuedStateRecovery",
  "errType" : null,
  "containingMethodsNum" : 30,
  "sourceCodeText" : "void testKilledContainerInQueuedStateRecovery() throws Exception\n{\r\n    conf.setBoolean(YarnConfiguration.NM_RECOVERY_ENABLED, true);\r\n    conf.setBoolean(YarnConfiguration.NM_RECOVERY_SUPERVISED, true);\r\n    NMStateStoreService stateStore = new NMMemoryStateStoreService();\r\n    stateStore.init(conf);\r\n    stateStore.start();\r\n    context = createContext(conf, stateStore);\r\n    ContainerManagerImpl cm = createContainerManager(context, delSrvc);\r\n    ((NMContext) context).setContainerManager(cm);\r\n    cm.init(conf);\r\n    cm.start();\r\n    ApplicationId appId = ApplicationId.newInstance(0, 0);\r\n    ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId cid = ContainerId.newContainerId(attemptId, 1);\r\n    createStartContainerRequest(appId, cid, cm);\r\n    Application app = context.getApplications().get(appId);\r\n    assertEquals(1, context.getApplications().size());\r\n    assertNotNull(app);\r\n    stateStore.storeContainerKilled(cid);\r\n    cm.stop();\r\n    context = createContext(conf, stateStore);\r\n    cm = createContainerManager(context, delSrvc);\r\n    ((NMContext) context).setContainerManager(cm);\r\n    cm.init(conf);\r\n    cm.start();\r\n    assertEquals(1, context.getApplications().size());\r\n    ConcurrentMap<ContainerId, Container> containers = context.getContainers();\r\n    Container c = containers.get(cid);\r\n    assertEquals(ContainerState.DONE, c.getContainerState());\r\n    app = context.getApplications().get(appId);\r\n    assertNotNull(app);\r\n    cm.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "createStartContainerRequest",
  "errType" : null,
  "containingMethodsNum" : 25,
  "sourceCodeText" : "void createStartContainerRequest(ApplicationId appId, ContainerId cid, ContainerManagerImpl cm) throws Exception\n{\r\n    Map<String, String> containerEnv = new HashMap<>();\r\n    setFlowContext(containerEnv, \"app_name1\", appId);\r\n    Map<String, ByteBuffer> serviceData = Collections.emptyMap();\r\n    Credentials containerCreds = new Credentials();\r\n    DataOutputBuffer dob = new DataOutputBuffer();\r\n    containerCreds.writeTokenStorageToStream(dob);\r\n    ByteBuffer containerTokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\r\n    Map<ApplicationAccessType, String> acls = Collections.emptyMap();\r\n    File tmpDir = new File(\"target\", this.getClass().getSimpleName() + \"-tmpDir\");\r\n    File scriptFile = Shell.appendScriptExtension(tmpDir, \"scriptFile\");\r\n    PrintWriter fileWriter = new PrintWriter(scriptFile);\r\n    if (Shell.WINDOWS) {\r\n        fileWriter.println(\"@ping -n 100 127.0.0.1 >nul\");\r\n    } else {\r\n        fileWriter.write(\"\\numask 0\");\r\n        fileWriter.write(\"\\nexec sleep 100\");\r\n    }\r\n    fileWriter.close();\r\n    FileContext localFS = FileContext.getLocalFSFileContext();\r\n    URL resource_alpha = URL.fromPath(localFS.makeQualified(new Path(scriptFile.getAbsolutePath())));\r\n    LocalResource rsrc_alpha = RecordFactoryProvider.getRecordFactory(null).newRecordInstance(LocalResource.class);\r\n    rsrc_alpha.setResource(resource_alpha);\r\n    rsrc_alpha.setSize(-1);\r\n    rsrc_alpha.setVisibility(LocalResourceVisibility.APPLICATION);\r\n    rsrc_alpha.setType(LocalResourceType.FILE);\r\n    rsrc_alpha.setTimestamp(scriptFile.lastModified());\r\n    String destinationFile = \"dest_file\";\r\n    Map<String, LocalResource> localResources = new HashMap<>();\r\n    localResources.put(destinationFile, rsrc_alpha);\r\n    List<String> commands = Arrays.asList(Shell.getRunScriptCommand(scriptFile));\r\n    ContainerLaunchContext clc = ContainerLaunchContext.newInstance(localResources, containerEnv, commands, serviceData, containerTokens, acls);\r\n    StartContainersResponse startResponse = startContainer(context, cm, cid, clc, null, ContainerType.TASK);\r\n    assertTrue(startResponse.getFailedRequests().isEmpty());\r\n    assertEquals(1, context.getApplications().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "commonLaunchContainer",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void commonLaunchContainer(ApplicationId appId, ContainerId cid, ContainerManagerImpl cm) throws Exception\n{\r\n    createStartContainerRequest(appId, cid, cm);\r\n    waitForNMContainerState(cm, cid, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.RUNNING);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "createContainerManager",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerManagerImpl createContainerManager(Context context, DeletionService delSrvc)\n{\r\n    return new ContainerManagerImpl(context, exec, delSrvc, mock(NodeStatusUpdater.class), metrics, dirsHandler) {\r\n\r\n        @Override\r\n        protected void authorizeGetAndStopContainerRequest(ContainerId containerId, Container container, boolean stopRequest, NMTokenIdentifier identifier, String remoteUser) throws YarnException {\r\n            if (container == null || container.getUser().equals(\"Fail\")) {\r\n                throw new YarnException(\"Reject this container\");\r\n            }\r\n        }\r\n\r\n        @Override\r\n        protected ContainerScheduler createContainerScheduler(Context context) {\r\n            return new ContainerScheduler(context, dispatcher, metrics) {\r\n\r\n                @Override\r\n                public ContainersMonitor getContainersMonitor() {\r\n                    return new ContainersMonitorImpl(null, null, null) {\r\n\r\n                        @Override\r\n                        public float getVmemRatio() {\r\n                            return 2.0f;\r\n                        }\r\n\r\n                        @Override\r\n                        public long getVmemAllocatedForContainers() {\r\n                            return 20480;\r\n                        }\r\n\r\n                        @Override\r\n                        public long getPmemAllocatedForContainers() {\r\n                            return (long) 2048 << 20;\r\n                        }\r\n\r\n                        @Override\r\n                        public long getVCoresAllocatedForContainers() {\r\n                            return 4;\r\n                        }\r\n                    };\r\n                }\r\n            };\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "createContext",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "NMContext createContext(Configuration conf, NMStateStoreService stateStore)\n{\r\n    NMContext context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore, false, conf) {\r\n\r\n        public int getHttpPort() {\r\n            return HTTP_PORT;\r\n        }\r\n    };\r\n    MasterKey masterKey = new MasterKeyPBImpl();\r\n    masterKey.setKeyId(123);\r\n    masterKey.setBytes(ByteBuffer.wrap(new byte[] { new Integer(123).byteValue() }));\r\n    context.getContainerTokenSecretManager().setMasterKey(masterKey);\r\n    context.getNMTokenSecretManager().setMasterKey(masterKey);\r\n    context.setContainerExecutor(exec);\r\n    return context;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "startContainer",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "StartContainersResponse startContainer(Context context, final ContainerManagerImpl cm, ContainerId cid, ContainerLaunchContext clc, LogAggregationContext logAggregationContext, ContainerType containerType) throws Exception\n{\r\n    UserGroupInformation user = UserGroupInformation.createRemoteUser(cid.getApplicationAttemptId().toString());\r\n    StartContainerRequest scReq = StartContainerRequest.newInstance(clc, TestContainerManager.createContainerToken(cid, 0, context.getNodeId(), user.getShortUserName(), context.getContainerTokenSecretManager(), logAggregationContext, containerType));\r\n    final List<StartContainerRequest> scReqList = new ArrayList<StartContainerRequest>();\r\n    scReqList.add(scReq);\r\n    NMTokenIdentifier nmToken = new NMTokenIdentifier(cid.getApplicationAttemptId(), context.getNodeId(), user.getShortUserName(), context.getNMTokenSecretManager().getCurrentKey().getKeyId());\r\n    user.addTokenIdentifier(nmToken);\r\n    return user.doAs(new PrivilegedExceptionAction<StartContainersResponse>() {\r\n\r\n        @Override\r\n        public StartContainersResponse run() throws Exception {\r\n            return cm.startContainers(StartContainersRequest.newInstance(scReqList));\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "updateContainers",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "ContainerUpdateResponse updateContainers(Context context, final ContainerManagerImpl cm, ContainerId cid, Resource capability) throws Exception\n{\r\n    UserGroupInformation user = UserGroupInformation.createRemoteUser(cid.getApplicationAttemptId().toString());\r\n    final List<Token> increaseTokens = new ArrayList<Token>();\r\n    Token containerToken = TestContainerManager.createContainerToken(cid, 1, 0, context.getNodeId(), user.getShortUserName(), capability, context.getContainerTokenSecretManager(), null);\r\n    increaseTokens.add(containerToken);\r\n    final ContainerUpdateRequest updateRequest = ContainerUpdateRequest.newInstance(increaseTokens);\r\n    NMTokenIdentifier nmToken = new NMTokenIdentifier(cid.getApplicationAttemptId(), context.getNodeId(), user.getShortUserName(), context.getNMTokenSecretManager().getCurrentKey().getKeyId());\r\n    user.addTokenIdentifier(nmToken);\r\n    return user.doAs(new PrivilegedExceptionAction<ContainerUpdateResponse>() {\r\n\r\n        @Override\r\n        public ContainerUpdateResponse run() throws Exception {\r\n            return cm.updateContainer(updateRequest);\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "getContainerStatus",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "ContainerStatus getContainerStatus(Context context, final ContainerManagerImpl cm, ContainerId cid) throws Exception\n{\r\n    UserGroupInformation user = UserGroupInformation.createRemoteUser(cid.getApplicationAttemptId().toString());\r\n    NMTokenIdentifier nmToken = new NMTokenIdentifier(cid.getApplicationAttemptId(), context.getNodeId(), user.getShortUserName(), context.getNMTokenSecretManager().getCurrentKey().getKeyId());\r\n    user.addTokenIdentifier(nmToken);\r\n    List<ContainerId> containerIds = new ArrayList<>();\r\n    containerIds.add(cid);\r\n    final GetContainerStatusesRequest gcsRequest = GetContainerStatusesRequest.newInstance(containerIds);\r\n    return user.doAs(new PrivilegedExceptionAction<ContainerStatus>() {\r\n\r\n        @Override\r\n        public ContainerStatus run() throws Exception {\r\n            return cm.getContainerStatuses(gcsRequest).getContainerStatuses().get(0);\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "waitForAppState",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void waitForAppState(Application app, ApplicationState state) throws Exception\n{\r\n    final int msecPerSleep = 10;\r\n    int msecLeft = 5000;\r\n    while (app.getApplicationState() != state && msecLeft > 0) {\r\n        Thread.sleep(msecPerSleep);\r\n        msecLeft -= msecPerSleep;\r\n    }\r\n    assertEquals(state, app.getApplicationState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "createContainerManager",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "ContainerManagerImpl createContainerManager(Context context)\n{\r\n    final LogHandler logHandler = mock(LogHandler.class);\r\n    final NodeManagerMetrics metrics = mock(NodeManagerMetrics.class);\r\n    final ResourceLocalizationService rsrcSrv = new ResourceLocalizationService(null, null, null, null, context, metrics) {\r\n\r\n        @Override\r\n        public void serviceInit(Configuration conf) throws Exception {\r\n        }\r\n\r\n        @Override\r\n        public void serviceStart() throws Exception {\r\n        }\r\n\r\n        @Override\r\n        public void serviceStop() throws Exception {\r\n        }\r\n\r\n        @Override\r\n        public void handle(LocalizationEvent event) {\r\n        }\r\n    };\r\n    final ContainersLauncher launcher = new ContainersLauncher(context, null, null, null, null) {\r\n\r\n        @Override\r\n        public void handle(ContainersLauncherEvent event) {\r\n        }\r\n    };\r\n    ContainerManagerImpl containerManager = new ContainerManagerImpl(context, mock(ContainerExecutor.class), mock(DeletionService.class), mock(NodeStatusUpdater.class), metrics, null) {\r\n\r\n        @Override\r\n        protected LogHandler createLogHandler(Configuration conf, Context context, DeletionService deletionService) {\r\n            return logHandler;\r\n        }\r\n\r\n        @Override\r\n        protected ResourceLocalizationService createResourceLocalizationService(ContainerExecutor exec, DeletionService deletionContext, Context context, NodeManagerMetrics metrics) {\r\n            return rsrcSrv;\r\n        }\r\n\r\n        @Override\r\n        protected ContainersLauncher createContainersLauncher(Context context, ContainerExecutor exec) {\r\n            return launcher;\r\n        }\r\n\r\n        @Override\r\n        public NMTimelinePublisher createNMTimelinePublisher(Context context) {\r\n            return null;\r\n        }\r\n    };\r\n    containerManager.dispatcher.disableExitOnDispatchException();\r\n    return containerManager;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "setFlowContext",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setFlowContext(Map<String, String> containerEnv, String appName, ApplicationId appId)\n{\r\n    if (YarnConfiguration.timelineServiceV2Enabled(conf)) {\r\n        setFlowTags(containerEnv, TimelineUtils.FLOW_NAME_TAG_PREFIX, TimelineUtils.generateDefaultFlowName(appName, appId));\r\n        setFlowTags(containerEnv, TimelineUtils.FLOW_VERSION_TAG_PREFIX, TimelineUtils.DEFAULT_FLOW_VERSION);\r\n        setFlowTags(containerEnv, TimelineUtils.FLOW_RUN_ID_TAG_PREFIX, String.valueOf(System.currentTimeMillis()));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "setFlowTags",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setFlowTags(Map<String, String> environment, String tagPrefix, String value)\n{\r\n    if (!value.isEmpty()) {\r\n        environment.put(tagPrefix, value);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testApplicationRecoveryAfterFlowContextUpdated",
  "errType" : null,
  "containingMethodsNum" : 47,
  "sourceCodeText" : "void testApplicationRecoveryAfterFlowContextUpdated() throws Exception\n{\r\n    conf.setBoolean(YarnConfiguration.NM_RECOVERY_ENABLED, true);\r\n    conf.setBoolean(YarnConfiguration.NM_RECOVERY_SUPERVISED, true);\r\n    conf.setBoolean(YarnConfiguration.YARN_ACL_ENABLE, true);\r\n    conf.set(YarnConfiguration.YARN_ADMIN_ACL, \"yarn_admin_user\");\r\n    NMStateStoreService stateStore = new NMMemoryStateStoreService();\r\n    stateStore.init(conf);\r\n    stateStore.start();\r\n    Context context = createContext(conf, stateStore);\r\n    ContainerManagerImpl cm = createContainerManager(context);\r\n    cm.init(conf);\r\n    cm.start();\r\n    String appName = \"app_name1\";\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId cid = ContainerId.newContainerId(attemptId, 2);\r\n    Map<String, LocalResource> localResources = Collections.emptyMap();\r\n    Map<String, String> containerEnv = new HashMap<>();\r\n    List<String> containerCmds = Collections.emptyList();\r\n    Map<String, ByteBuffer> serviceData = Collections.emptyMap();\r\n    Credentials containerCreds = new Credentials();\r\n    DataOutputBuffer dob = new DataOutputBuffer();\r\n    containerCreds.writeTokenStorageToStream(dob);\r\n    ByteBuffer containerTokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\r\n    Map<ApplicationAccessType, String> acls = new HashMap<ApplicationAccessType, String>();\r\n    ContainerLaunchContext clc = ContainerLaunchContext.newInstance(localResources, containerEnv, containerCmds, serviceData, containerTokens, acls);\r\n    LogAggregationContext logAggregationContext = LogAggregationContext.newInstance(\"includePattern\", \"excludePattern\", \"includePatternInRollingAggregation\", \"excludePatternInRollingAggregation\");\r\n    StartContainersResponse startResponse = startContainer(context, cm, cid, clc, logAggregationContext, ContainerType.TASK);\r\n    assertTrue(startResponse.getFailedRequests().isEmpty());\r\n    assertEquals(1, context.getApplications().size());\r\n    ApplicationImpl app = (ApplicationImpl) context.getApplications().get(appId);\r\n    assertNotNull(app);\r\n    waitForAppState(app, ApplicationState.INITING);\r\n    assertNull(app.getFlowName());\r\n    ApplicationAttemptId attemptId2 = ApplicationAttemptId.newInstance(appId, 2);\r\n    ContainerId cid2 = ContainerId.newContainerId(attemptId, 1);\r\n    setFlowContext(containerEnv, appName, appId);\r\n    clc = ContainerLaunchContext.newInstance(localResources, containerEnv, containerCmds, serviceData, containerTokens, acls);\r\n    startResponse = startContainer(context, cm, cid2, clc, logAggregationContext, ContainerType.APPLICATION_MASTER);\r\n    assertTrue(startResponse.getFailedRequests().isEmpty());\r\n    assertEquals(1, context.getApplications().size());\r\n    waitForAppState(app, ApplicationState.INITING);\r\n    assertEquals(appName, app.getFlowName());\r\n    cm.stop();\r\n    context = createContext(conf, stateStore);\r\n    cm = createContainerManager(context);\r\n    cm.init(conf);\r\n    cm.start();\r\n    assertEquals(1, context.getApplications().size());\r\n    app = (ApplicationImpl) context.getApplications().get(appId);\r\n    assertNotNull(app);\r\n    assertEquals(appName, app.getFlowName());\r\n    waitForAppState(app, ApplicationState.INITING);\r\n    cm.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testBasicCleanup",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testBasicCleanup()\n{\r\n    ConcurrentMap<LocalResourceRequest, LocalizedResource> publicRsrc = new ConcurrentHashMap<LocalResourceRequest, LocalizedResource>();\r\n    addResource(publicRsrc, \"/pub-resource1.txt\", 5, 20, 0);\r\n    addResource(publicRsrc, \"/pub-resource2.txt\", 3, 20, 0);\r\n    addResource(publicRsrc, \"/pub-resource3.txt\", 15, 20, 0);\r\n    ConcurrentMap<String, LocalResourcesTracker> privateRsrc = new ConcurrentHashMap<String, LocalResourcesTracker>();\r\n    ConcurrentMap<LocalResourceRequest, LocalizedResource> user1rsrcs = new ConcurrentHashMap<LocalResourceRequest, LocalizedResource>();\r\n    addResource(user1rsrcs, \"/private-u1-resource4.txt\", 1, 20, 0);\r\n    LocalResourcesTracker user1Tracker = new StubbedLocalResourcesTrackerImpl(\"user1\", user1rsrcs);\r\n    privateRsrc.put(\"user1\", user1Tracker);\r\n    ConcurrentMap<LocalResourceRequest, LocalizedResource> user2rsrcs = new ConcurrentHashMap<LocalResourceRequest, LocalizedResource>();\r\n    addResource(user2rsrcs, \"/private-u2-resource5.txt\", 2, 20, 0);\r\n    LocalResourcesTracker user2Tracker = new StubbedLocalResourcesTrackerImpl(\"user2\", user2rsrcs);\r\n    privateRsrc.put(\"user2\", user2Tracker);\r\n    ResourceLocalizationService rls = createLocService(publicRsrc, privateRsrc, 0);\r\n    LocalCacheCleanerStats stats = rls.handleCacheCleanup();\r\n    assertEquals(0, ((StubbedLocalResourcesTrackerImpl) rls.publicRsrc).getLocalRsrc().size());\r\n    assertEquals(0, ((StubbedLocalResourcesTrackerImpl) privateRsrc.get(\"user1\")).getLocalRsrc().size());\r\n    assertEquals(0, ((StubbedLocalResourcesTrackerImpl) privateRsrc.get(\"user2\")).getLocalRsrc().size());\r\n    assertEquals(100, stats.getTotalDelSize());\r\n    assertEquals(100, rls.metrics.getTotalBytesDeleted());\r\n    assertEquals(60, stats.getPublicDelSize());\r\n    assertEquals(60, rls.metrics.getPublicBytesDeleted());\r\n    assertEquals(40, stats.getPrivateDelSize());\r\n    assertEquals(40, rls.metrics.getPrivateBytesDeleted());\r\n    assertEquals(100, rls.metrics.getCacheSizeBeforeClean());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testPositiveRefCount",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testPositiveRefCount()\n{\r\n    ConcurrentMap<LocalResourceRequest, LocalizedResource> publicRsrc = new ConcurrentHashMap<LocalResourceRequest, LocalizedResource>();\r\n    LocalResourceRequest survivor = addResource(publicRsrc, \"/pub-resource1.txt\", 1, 20, 1);\r\n    addResource(publicRsrc, \"/pub-resource2.txt\", 5, 20, 0);\r\n    ConcurrentMap<String, LocalResourcesTracker> privateRsrc = new ConcurrentHashMap<String, LocalResourcesTracker>();\r\n    ResourceLocalizationService rls = createLocService(publicRsrc, privateRsrc, 0);\r\n    LocalCacheCleanerStats stats = rls.handleCacheCleanup();\r\n    StubbedLocalResourcesTrackerImpl resources = (StubbedLocalResourcesTrackerImpl) rls.publicRsrc;\r\n    assertEquals(1, resources.getLocalRsrc().size());\r\n    assertTrue(resources.getLocalRsrc().containsKey(survivor));\r\n    assertEquals(20, stats.getTotalDelSize());\r\n    assertEquals(20, rls.metrics.getTotalBytesDeleted());\r\n    assertEquals(20, stats.getPublicDelSize());\r\n    assertEquals(20, rls.metrics.getPublicBytesDeleted());\r\n    assertEquals(0, stats.getPrivateDelSize());\r\n    assertEquals(0, rls.metrics.getPrivateBytesDeleted());\r\n    assertEquals(40, rls.metrics.getCacheSizeBeforeClean());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testLRUAcrossTrackers",
  "errType" : null,
  "containingMethodsNum" : 29,
  "sourceCodeText" : "void testLRUAcrossTrackers()\n{\r\n    ConcurrentMap<LocalResourceRequest, LocalizedResource> publicRsrc = new ConcurrentHashMap<LocalResourceRequest, LocalizedResource>();\r\n    LocalResourceRequest pubSurviver1 = addResource(publicRsrc, \"/pub-resource1.txt\", 8, 20, 0);\r\n    LocalResourceRequest pubSurviver2 = addResource(publicRsrc, \"/pub-resource2.txt\", 7, 20, 0);\r\n    addResource(publicRsrc, \"/pub-resource3.txt\", 1, 20, 0);\r\n    ConcurrentMap<String, LocalResourcesTracker> privateRsrc = new ConcurrentHashMap<String, LocalResourcesTracker>();\r\n    ConcurrentMap<LocalResourceRequest, LocalizedResource> user1rsrcs = new ConcurrentHashMap<LocalResourceRequest, LocalizedResource>();\r\n    LocalResourceRequest usr1Surviver1 = addResource(user1rsrcs, \"/private-u1-resource1.txt\", 6, 20, 0);\r\n    addResource(user1rsrcs, \"/private-u1-resource2.txt\", 2, 20, 0);\r\n    LocalResourcesTracker user1Tracker = new StubbedLocalResourcesTrackerImpl(\"user1\", user1rsrcs);\r\n    privateRsrc.put(\"user1\", user1Tracker);\r\n    ConcurrentMap<LocalResourceRequest, LocalizedResource> user2rsrcs = new ConcurrentHashMap<LocalResourceRequest, LocalizedResource>();\r\n    LocalResourceRequest usr2Surviver1 = addResource(user2rsrcs, \"/private-u2-resource1.txt\", 5, 20, 0);\r\n    addResource(user2rsrcs, \"/private-u2-resource2.txt\", 3, 20, 0);\r\n    addResource(user2rsrcs, \"/private-u2-resource3.txt\", 4, 20, 0);\r\n    LocalResourcesTracker user2Tracker = new StubbedLocalResourcesTrackerImpl(\"user2\", user2rsrcs);\r\n    privateRsrc.put(\"user2\", user2Tracker);\r\n    ResourceLocalizationService rls = createLocService(publicRsrc, privateRsrc, 80);\r\n    LocalCacheCleanerStats stats = rls.handleCacheCleanup();\r\n    Map<LocalResourceRequest, LocalizedResource> pubLocalRsrc = ((StubbedLocalResourcesTrackerImpl) rls.publicRsrc).getLocalRsrc();\r\n    assertEquals(2, pubLocalRsrc.size());\r\n    assertTrue(pubLocalRsrc.containsKey(pubSurviver1));\r\n    assertTrue(pubLocalRsrc.containsKey(pubSurviver2));\r\n    Map<LocalResourceRequest, LocalizedResource> usr1LocalRsrc = ((StubbedLocalResourcesTrackerImpl) privateRsrc.get(\"user1\")).getLocalRsrc();\r\n    assertEquals(1, usr1LocalRsrc.size());\r\n    assertTrue(usr1LocalRsrc.containsKey(usr1Surviver1));\r\n    Map<LocalResourceRequest, LocalizedResource> usr2LocalRsrc = ((StubbedLocalResourcesTrackerImpl) privateRsrc.get(\"user2\")).getLocalRsrc();\r\n    assertEquals(1, usr2LocalRsrc.size());\r\n    assertTrue(usr2LocalRsrc.containsKey(usr2Surviver1));\r\n    assertEquals(80, stats.getTotalDelSize());\r\n    assertEquals(80, rls.metrics.getTotalBytesDeleted());\r\n    assertEquals(20, stats.getPublicDelSize());\r\n    assertEquals(20, rls.metrics.getPublicBytesDeleted());\r\n    assertEquals(60, stats.getPrivateDelSize());\r\n    assertEquals(60, rls.metrics.getPrivateBytesDeleted());\r\n    assertEquals(160, rls.metrics.getCacheSizeBeforeClean());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "createLocService",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "ResourceLocalizationService createLocService(ConcurrentMap<LocalResourceRequest, LocalizedResource> publicRsrcs, ConcurrentMap<String, LocalResourcesTracker> privateRsrcs, long targetCacheSize)\n{\r\n    Context mockedContext = mock(Context.class);\r\n    when(mockedContext.getNMStateStore()).thenReturn(null);\r\n    NodeManagerMetrics metrics = NodeManagerMetrics.create();\r\n    ResourceLocalizationService rls = new ResourceLocalizationService(null, null, null, null, mockedContext, metrics);\r\n    rls.publicRsrc = new StubbedLocalResourcesTrackerImpl(null, publicRsrcs);\r\n    rls.cacheTargetSize = targetCacheSize;\r\n    rls.privateRsrc.putAll(privateRsrcs);\r\n    return rls;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "addResource",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "LocalResourceRequest addResource(ConcurrentMap<LocalResourceRequest, LocalizedResource> resources, String path, long timestamp, long size, int refCount)\n{\r\n    LocalResourceRequest request = createLocalResourceRequest(path, timestamp);\r\n    LocalizedResource resource = createLocalizedResource(size, refCount, timestamp, request);\r\n    resources.put(request, resource);\r\n    return request;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "createLocalResourceRequest",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LocalResourceRequest createLocalResourceRequest(String path, long timestamp)\n{\r\n    return new LocalResourceRequest(new Path(path), timestamp, LocalResourceType.FILE, LocalResourceVisibility.PUBLIC, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "createLocalizedResource",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "LocalizedResource createLocalizedResource(long size, int refCount, long timestamp, LocalResourceRequest req)\n{\r\n    LocalizedResource lr = mock(LocalizedResource.class);\r\n    when(lr.getSize()).thenReturn(size);\r\n    when(lr.getRefCount()).thenReturn(refCount);\r\n    when(lr.getTimestamp()).thenReturn(timestamp);\r\n    when(lr.getState()).thenReturn(ResourceState.LOCALIZED);\r\n    when(lr.getRequest()).thenReturn(req);\r\n    return lr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "createTestDataDirectory",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void createTestDataDirectory() throws IOException\n{\r\n    String testDirectoryPath = getTestParentDirectory();\r\n    testDataDirectory = new File(testDirectoryPath);\r\n    FileUtils.deleteDirectory(testDataDirectory);\r\n    testDataDirectory.mkdirs();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "getTestParentDirectory",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getTestParentDirectory()\n{\r\n    File f = new File(\"target/temp/\" + TestGpuResourceHandlerImpl.class.getName());\r\n    return f.getAbsolutePath();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "touchFile",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void touchFile(File f) throws IOException\n{\r\n    new FileOutputStream(f).close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "createDefaultConfig",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Configuration createDefaultConfig() throws IOException\n{\r\n    Configuration conf = new YarnConfiguration();\r\n    File fakeBinary = setupFakeGpuDiscoveryBinary();\r\n    conf.set(YarnConfiguration.NM_GPU_PATH_TO_EXEC, fakeBinary.getAbsolutePath());\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "setupFakeGpuDiscoveryBinary",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "File setupFakeGpuDiscoveryBinary() throws IOException\n{\r\n    File fakeBinary = new File(getTestParentDirectory() + \"/nvidia-smi\");\r\n    touchFile(fakeBinary);\r\n    return fakeBinary;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void setup() throws IOException\n{\r\n    createTestDataDirectory();\r\n    nvidiaBinaryHelper = new NvidiaBinaryHelper();\r\n    CustomResourceTypesConfigurationProvider.initResourceTypes(ResourceInformation.GPU_URI);\r\n    mockCGroupsHandler = mock(CGroupsHandler.class);\r\n    mockPrivilegedExecutor = mock(PrivilegedOperationExecutor.class);\r\n    mockNMStateStore = mock(NMStateStoreService.class);\r\n    Configuration conf = new Configuration();\r\n    Context nmContext = createMockNmContext(conf);\r\n    gpuDiscoverer = new GpuDiscoverer();\r\n    gpuResourceHandler = new GpuResourceHandlerImpl(nmContext, mockCGroupsHandler, mockPrivilegedExecutor, gpuDiscoverer);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "createMockNmContext",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Context createMockNmContext(Configuration conf)\n{\r\n    Context nmctx = mock(Context.class);\r\n    when(nmctx.getNMStateStore()).thenReturn(mockNMStateStore);\r\n    when(nmctx.getConf()).thenReturn(conf);\r\n    runningContainersMap = new ConcurrentHashMap<>();\r\n    when(nmctx.getContainers()).thenReturn(runningContainersMap);\r\n    return nmctx;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "cleanupTestFiles",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void cleanupTestFiles() throws IOException\n{\r\n    FileUtils.deleteDirectory(testDataDirectory);\r\n    nvidiaBinaryHelper = new NvidiaBinaryHelper();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "testBootstrapWithRealGpuDiscoverer",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testBootstrapWithRealGpuDiscoverer() throws Exception\n{\r\n    Configuration conf = createDefaultConfig();\r\n    conf.set(YarnConfiguration.NM_GPU_ALLOWED_DEVICES, \"0:0\");\r\n    gpuDiscoverer.initialize(conf, nvidiaBinaryHelper);\r\n    gpuResourceHandler.bootstrap(conf);\r\n    List<GpuDevice> allowedGpus = gpuResourceHandler.getGpuAllocator().getAllowedGpus();\r\n    assertEquals(\"Unexpected number of allowed GPU devices!\", 1, allowedGpus.size());\r\n    assertEquals(\"Expected GPU device does not equal to found device!\", new GpuDevice(0, 0), allowedGpus.get(0));\r\n    verify(mockCGroupsHandler).initializeCGroupController(CGroupsHandler.CGroupController.DEVICES);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "testBootstrapWithMockGpuDiscoverer",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testBootstrapWithMockGpuDiscoverer() throws Exception\n{\r\n    GpuDiscoverer mockDiscoverer = mock(GpuDiscoverer.class);\r\n    Configuration conf = new YarnConfiguration();\r\n    mockDiscoverer.initialize(conf, nvidiaBinaryHelper);\r\n    expected.expect(ResourceHandlerException.class);\r\n    gpuResourceHandler.bootstrap(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerId getContainerId(int id)\n{\r\n    return ContainerId.newContainerId(ApplicationAttemptId.newInstance(ApplicationId.newInstance(1234L, 1), 1), id);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "mockContainerWithGpuRequest",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Container mockContainerWithGpuRequest(int id, Resource res, ContainerLaunchContext launchContext)\n{\r\n    Container c = mock(Container.class);\r\n    when(c.getContainerId()).thenReturn(getContainerId(id));\r\n    when(c.getResource()).thenReturn(res);\r\n    when(c.getResourceMappings()).thenReturn(new ResourceMappings());\r\n    when(c.getLaunchContext()).thenReturn(launchContext);\r\n    return c;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "createResourceRequest",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Resource createResourceRequest(int numGpuRequest)\n{\r\n    Resource res = Resource.newInstance(1024, 1);\r\n    res.setResourceValue(ResourceInformation.GPU_URI, numGpuRequest);\r\n    return res;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "mockContainerWithGpuRequest",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Container mockContainerWithGpuRequest(int id, Resource res)\n{\r\n    return mockContainerWithGpuRequest(id, res, createLaunchContext());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "verifyDeniedDevices",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void verifyDeniedDevices(ContainerId containerId, List<GpuDevice> deniedDevices) throws ResourceHandlerException, PrivilegedOperationException\n{\r\n    verify(mockCGroupsHandler).createCGroup(CGroupsHandler.CGroupController.DEVICES, containerId.toString());\r\n    if (null != deniedDevices && !deniedDevices.isEmpty()) {\r\n        List<Integer> deniedDevicesMinorNumber = new ArrayList<>();\r\n        for (GpuDevice deniedDevice : deniedDevices) {\r\n            deniedDevicesMinorNumber.add(deniedDevice.getMinorNumber());\r\n        }\r\n        verify(mockPrivilegedExecutor).executePrivilegedOperation(new PrivilegedOperation(PrivilegedOperation.OperationType.GPU, Arrays.asList(GpuResourceHandlerImpl.CONTAINER_ID_CLI_OPTION, containerId.toString(), GpuResourceHandlerImpl.EXCLUDED_GPUS_CLI_OPTION, StringUtils.join(\",\", deniedDevicesMinorNumber))), true);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "createLaunchContextDocker",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ContainerLaunchContext createLaunchContextDocker()\n{\r\n    ContainerLaunchContext launchContext = mock(ContainerLaunchContext.class);\r\n    ImmutableMap<String, String> env = ImmutableMap.<String, String>builder().put(ContainerRuntimeConstants.ENV_CONTAINER_TYPE, ContainerRuntimeConstants.CONTAINER_RUNTIME_DOCKER).build();\r\n    when(launchContext.getEnvironment()).thenReturn(env);\r\n    return launchContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "createLaunchContext",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerLaunchContext createLaunchContext()\n{\r\n    ContainerLaunchContext launchContext = mock(ContainerLaunchContext.class);\r\n    when(launchContext.getEnvironment()).thenReturn(Maps.newHashMap());\r\n    return launchContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "startContainerWithGpuRequestsDocker",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void startContainerWithGpuRequestsDocker(int id, int gpus) throws ResourceHandlerException\n{\r\n    gpuResourceHandler.preStart(mockContainerWithGpuRequest(id, createResourceRequest(gpus), createLaunchContextDocker()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "startContainerWithGpuRequests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void startContainerWithGpuRequests(int id, int gpus) throws ResourceHandlerException\n{\r\n    gpuResourceHandler.preStart(mockContainerWithGpuRequest(id, createResourceRequest(gpus), createLaunchContext()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "verifyNumberOfAvailableGpus",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void verifyNumberOfAvailableGpus(int expectedAvailable, GpuResourceHandlerImpl resourceHandler)\n{\r\n    assertEquals(\"Unexpected number of available GPU devices!\", expectedAvailable, resourceHandler.getGpuAllocator().getAvailableGpus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "verifyCgroupsDeletedForContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void verifyCgroupsDeletedForContainer(int i) throws ResourceHandlerException\n{\r\n    verify(mockCGroupsHandler).createCGroup(CGroupsHandler.CGroupController.DEVICES, getContainerId(i).toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "initializeGpus",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void initializeGpus() throws YarnException, IOException\n{\r\n    Configuration conf = createDefaultConfig();\r\n    conf.set(YarnConfiguration.NM_GPU_ALLOWED_DEVICES, \"0:0,1:1,2:3,3:4\");\r\n    gpuDiscoverer = new GpuDiscoverer();\r\n    gpuDiscoverer.initialize(conf, nvidiaBinaryHelper);\r\n    Context nmContext = createMockNmContext(conf);\r\n    gpuResourceHandler = new GpuResourceHandlerImpl(nmContext, mockCGroupsHandler, mockPrivilegedExecutor, gpuDiscoverer);\r\n    gpuResourceHandler.bootstrap(conf);\r\n    verifyNumberOfAvailableGpus(4, gpuResourceHandler);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "testAllocationWhenDockerContainerEnabled",
  "errType" : [ "ResourceHandlerException" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testAllocationWhenDockerContainerEnabled() throws Exception\n{\r\n    initializeGpus();\r\n    startContainerWithGpuRequestsDocker(1, 3);\r\n    verifyDeniedDevices(getContainerId(1), Collections.emptyList());\r\n    boolean failedToAllocate = false;\r\n    try {\r\n        startContainerWithGpuRequestsDocker(2, 2);\r\n    } catch (ResourceHandlerException e) {\r\n        failedToAllocate = true;\r\n    }\r\n    assertTrue(\"Container allocation is expected to fail!\", failedToAllocate);\r\n    startContainerWithGpuRequestsDocker(3, 1);\r\n    verifyDeniedDevices(getContainerId(3), Collections.emptyList());\r\n    startContainerWithGpuRequestsDocker(4, 0);\r\n    verifyDeniedDevices(getContainerId(4), Collections.emptyList());\r\n    gpuResourceHandler.postComplete(getContainerId(1));\r\n    verifyCgroupsDeletedForContainer(1);\r\n    verifyNumberOfAvailableGpus(3, gpuResourceHandler);\r\n    gpuResourceHandler.postComplete(getContainerId(3));\r\n    verifyCgroupsDeletedForContainer(3);\r\n    verifyNumberOfAvailableGpus(4, gpuResourceHandler);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "testAllocation",
  "errType" : [ "ResourceHandlerException" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testAllocation() throws Exception\n{\r\n    initializeGpus();\r\n    startContainerWithGpuRequests(1, 3);\r\n    verifyDeniedDevices(getContainerId(1), Collections.singletonList(new GpuDevice(3, 4)));\r\n    boolean failedToAllocate = false;\r\n    try {\r\n        startContainerWithGpuRequests(2, 2);\r\n    } catch (ResourceHandlerException e) {\r\n        failedToAllocate = true;\r\n    }\r\n    assertTrue(\"Container allocation is expected to fail!\", failedToAllocate);\r\n    startContainerWithGpuRequests(3, 1);\r\n    verifyDeniedDevices(getContainerId(3), Arrays.asList(new GpuDevice(0, 0), new GpuDevice(1, 1), new GpuDevice(2, 3)));\r\n    startContainerWithGpuRequests(4, 0);\r\n    verifyDeniedDevices(getContainerId(4), Arrays.asList(new GpuDevice(0, 0), new GpuDevice(1, 1), new GpuDevice(2, 3), new GpuDevice(3, 4)));\r\n    gpuResourceHandler.postComplete(getContainerId(1));\r\n    verifyCgroupsDeletedForContainer(1);\r\n    verifyNumberOfAvailableGpus(3, gpuResourceHandler);\r\n    gpuResourceHandler.postComplete(getContainerId(3));\r\n    verifyCgroupsDeletedForContainer(3);\r\n    verifyNumberOfAvailableGpus(4, gpuResourceHandler);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "testAssignedGpuWillBeCleanedUpWhenStoreOpFails",
  "errType" : [ "ResourceHandlerException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testAssignedGpuWillBeCleanedUpWhenStoreOpFails() throws Exception\n{\r\n    initializeGpus();\r\n    doThrow(new IOException(\"Exception ...\")).when(mockNMStateStore).storeAssignedResources(any(Container.class), anyString(), anyList());\r\n    boolean exception = false;\r\n    try {\r\n        gpuResourceHandler.preStart(mockContainerWithGpuRequest(1, createResourceRequest(3)));\r\n    } catch (ResourceHandlerException e) {\r\n        exception = true;\r\n    }\r\n    assertTrue(\"preStart should throw exception\", exception);\r\n    verifyNumberOfAvailableGpus(4, gpuResourceHandler);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "testAllocationWithoutAllowedGpus",
  "errType" : [ "ResourceHandlerException", "ResourceHandlerException" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testAllocationWithoutAllowedGpus() throws Exception\n{\r\n    Configuration conf = createDefaultConfig();\r\n    conf.set(YarnConfiguration.NM_GPU_ALLOWED_DEVICES, \" \");\r\n    gpuDiscoverer.initialize(conf, nvidiaBinaryHelper);\r\n    try {\r\n        gpuResourceHandler.bootstrap(conf);\r\n        fail(\"Should fail because no GPU available\");\r\n    } catch (ResourceHandlerException e) {\r\n    }\r\n    gpuResourceHandler.preStart(mockContainerWithGpuRequest(1, createResourceRequest(0)));\r\n    verifyDeniedDevices(getContainerId(1), Collections.emptyList());\r\n    boolean failedToAllocate = false;\r\n    try {\r\n        gpuResourceHandler.preStart(mockContainerWithGpuRequest(2, createResourceRequest(1)));\r\n    } catch (ResourceHandlerException e) {\r\n        failedToAllocate = true;\r\n    }\r\n    assertTrue(\"Container allocation is expected to fail!\", failedToAllocate);\r\n    gpuResourceHandler.postComplete(getContainerId(1));\r\n    verifyCgroupsDeletedForContainer(1);\r\n    verifyNumberOfAvailableGpus(0, gpuResourceHandler);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "testAllocationStored",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testAllocationStored() throws Exception\n{\r\n    initializeGpus();\r\n    Container container = mockContainerWithGpuRequest(1, createResourceRequest(3));\r\n    gpuResourceHandler.preStart(container);\r\n    verify(mockNMStateStore).storeAssignedResources(container, ResourceInformation.GPU_URI, Arrays.asList(new GpuDevice(0, 0), new GpuDevice(1, 1), new GpuDevice(2, 3)));\r\n    verifyDeniedDevices(getContainerId(1), Collections.singletonList(new GpuDevice(3, 4)));\r\n    container = mockContainerWithGpuRequest(2, createResourceRequest(0));\r\n    gpuResourceHandler.preStart(container);\r\n    verifyDeniedDevices(getContainerId(2), Arrays.asList(new GpuDevice(0, 0), new GpuDevice(1, 1), new GpuDevice(2, 3), new GpuDevice(3, 4)));\r\n    assertEquals(\"Number of GPU device allocations is not the expected!\", 0, container.getResourceMappings().getAssignedResources(ResourceInformation.GPU_URI).size());\r\n    verify(mockNMStateStore, never()).storeAssignedResources(eq(container), eq(ResourceInformation.GPU_URI), anyList());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "testAllocationStoredWithNULLStateStore",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testAllocationStoredWithNULLStateStore() throws Exception\n{\r\n    NMNullStateStoreService mockNMNULLStateStore = mock(NMNullStateStoreService.class);\r\n    Configuration conf = createDefaultConfig();\r\n    conf.set(YarnConfiguration.NM_GPU_ALLOWED_DEVICES, \"0:0,1:1,2:3,3:4\");\r\n    Context nmnctx = mock(Context.class);\r\n    when(nmnctx.getNMStateStore()).thenReturn(mockNMNULLStateStore);\r\n    when(nmnctx.getConf()).thenReturn(conf);\r\n    GpuResourceHandlerImpl gpuNULLStateResourceHandler = new GpuResourceHandlerImpl(nmnctx, mockCGroupsHandler, mockPrivilegedExecutor, gpuDiscoverer);\r\n    gpuDiscoverer.initialize(conf, nvidiaBinaryHelper);\r\n    gpuNULLStateResourceHandler.bootstrap(conf);\r\n    verifyNumberOfAvailableGpus(4, gpuNULLStateResourceHandler);\r\n    Container container = mockContainerWithGpuRequest(1, createResourceRequest(3));\r\n    gpuNULLStateResourceHandler.preStart(container);\r\n    verify(nmnctx.getNMStateStore()).storeAssignedResources(container, ResourceInformation.GPU_URI, Arrays.asList(new GpuDevice(0, 0), new GpuDevice(1, 1), new GpuDevice(2, 3)));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "testRecoverResourceAllocation",
  "errType" : [ "ResourceHandlerException", "ResourceHandlerException" ],
  "containingMethodsNum" : 34,
  "sourceCodeText" : "void testRecoverResourceAllocation() throws Exception\n{\r\n    initializeGpus();\r\n    Container nmContainer = mock(Container.class);\r\n    ResourceMappings rmap = new ResourceMappings();\r\n    ResourceMappings.AssignedResources ar = new ResourceMappings.AssignedResources();\r\n    ar.updateAssignedResources(Arrays.asList(new GpuDevice(1, 1), new GpuDevice(2, 3)));\r\n    rmap.addAssignedResources(ResourceInformation.GPU_URI, ar);\r\n    when(nmContainer.getResourceMappings()).thenReturn(rmap);\r\n    runningContainersMap.put(getContainerId(1), nmContainer);\r\n    gpuResourceHandler.reacquireContainer(getContainerId(1));\r\n    Map<GpuDevice, ContainerId> deviceAllocationMapping = gpuResourceHandler.getGpuAllocator().getDeviceAllocationMapping();\r\n    assertEquals(\"Unexpected number of allocated GPU devices!\", 2, deviceAllocationMapping.size());\r\n    assertTrue(\"Expected GPU device is not found in allocations!\", deviceAllocationMapping.keySet().contains(new GpuDevice(1, 1)));\r\n    assertTrue(\"Expected GPU device is not found in allocations!\", deviceAllocationMapping.keySet().contains(new GpuDevice(2, 3)));\r\n    assertEquals(\"GPU device is not assigned to the expected container!\", deviceAllocationMapping.get(new GpuDevice(1, 1)), getContainerId(1));\r\n    nmContainer = mock(Container.class);\r\n    rmap = new ResourceMappings();\r\n    ar = new ResourceMappings.AssignedResources();\r\n    ar.updateAssignedResources(Arrays.asList(new GpuDevice(3, 4), new GpuDevice(4, 5)));\r\n    rmap.addAssignedResources(ResourceInformation.GPU_URI, ar);\r\n    when(nmContainer.getResourceMappings()).thenReturn(rmap);\r\n    runningContainersMap.put(getContainerId(2), nmContainer);\r\n    boolean caughtException = false;\r\n    try {\r\n        gpuResourceHandler.reacquireContainer(getContainerId(1));\r\n    } catch (ResourceHandlerException e) {\r\n        caughtException = true;\r\n    }\r\n    assertTrue(\"Should fail since requested device Id is not in allowed list\", caughtException);\r\n    deviceAllocationMapping = gpuResourceHandler.getGpuAllocator().getDeviceAllocationMapping();\r\n    assertEquals(\"Unexpected number of allocated GPU devices!\", 2, deviceAllocationMapping.size());\r\n    assertTrue(\"Expected GPU devices are not found in allocations!\", deviceAllocationMapping.keySet().containsAll(Arrays.asList(new GpuDevice(1, 1), new GpuDevice(2, 3))));\r\n    assertEquals(\"GPU device is not assigned to the expected container!\", deviceAllocationMapping.get(new GpuDevice(1, 1)), getContainerId(1));\r\n    nmContainer = mock(Container.class);\r\n    rmap = new ResourceMappings();\r\n    ar = new ResourceMappings.AssignedResources();\r\n    ar.updateAssignedResources(Arrays.asList(new GpuDevice(3, 4), new GpuDevice(2, 3)));\r\n    rmap.addAssignedResources(\"gpu\", ar);\r\n    when(nmContainer.getResourceMappings()).thenReturn(rmap);\r\n    runningContainersMap.put(getContainerId(2), nmContainer);\r\n    caughtException = false;\r\n    try {\r\n        gpuResourceHandler.reacquireContainer(getContainerId(1));\r\n    } catch (ResourceHandlerException e) {\r\n        caughtException = true;\r\n    }\r\n    assertTrue(\"Should fail since requested device Id is already assigned\", caughtException);\r\n    deviceAllocationMapping = gpuResourceHandler.getGpuAllocator().getDeviceAllocationMapping();\r\n    assertEquals(\"Unexpected number of allocated GPU devices!\", 2, deviceAllocationMapping.size());\r\n    assertTrue(\"Expected GPU devices are not found in allocations!\", deviceAllocationMapping.keySet().containsAll(Arrays.asList(new GpuDevice(1, 1), new GpuDevice(2, 3))));\r\n    assertEquals(\"GPU device is not assigned to the expected container!\", deviceAllocationMapping.get(new GpuDevice(1, 1)), getContainerId(1));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setup()\n{\r\n    mockCGroupsHandler = mock(CGroupsHandler.class);\r\n    when(mockCGroupsHandler.getPathForCGroup(any(), any())).thenReturn(\".\");\r\n    cGroupsCpuResourceHandler = new CGroupsCpuResourceHandlerImpl(mockCGroupsHandler);\r\n    plugin = mock(ResourceCalculatorPlugin.class);\r\n    Mockito.doReturn(numProcessors).when(plugin).getNumProcessors();\r\n    Mockito.doReturn(numProcessors).when(plugin).getNumCores();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testBootstrap",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testBootstrap() throws Exception\n{\r\n    Configuration conf = new YarnConfiguration();\r\n    List<PrivilegedOperation> ret = cGroupsCpuResourceHandler.bootstrap(plugin, conf);\r\n    verify(mockCGroupsHandler, times(1)).initializeCGroupController(CGroupsHandler.CGroupController.CPU);\r\n    verify(mockCGroupsHandler, times(0)).updateCGroupParam(CGroupsHandler.CGroupController.CPU, \"\", CGroupsHandler.CGROUP_CPU_PERIOD_US, \"\");\r\n    verify(mockCGroupsHandler, times(0)).updateCGroupParam(CGroupsHandler.CGroupController.CPU, \"\", CGroupsHandler.CGROUP_CPU_QUOTA_US, \"\");\r\n    Assert.assertNull(ret);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testBootstrapLimits",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testBootstrapLimits() throws Exception\n{\r\n    Configuration conf = new YarnConfiguration();\r\n    int cpuPerc = 80;\r\n    conf.setInt(YarnConfiguration.NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT, cpuPerc);\r\n    int period = (CGroupsCpuResourceHandlerImpl.MAX_QUOTA_US * 100) / (cpuPerc * numProcessors);\r\n    List<PrivilegedOperation> ret = cGroupsCpuResourceHandler.bootstrap(plugin, conf);\r\n    verify(mockCGroupsHandler, times(1)).initializeCGroupController(CGroupsHandler.CGroupController.CPU);\r\n    verify(mockCGroupsHandler, times(1)).updateCGroupParam(CGroupsHandler.CGroupController.CPU, \"\", CGroupsHandler.CGROUP_CPU_PERIOD_US, String.valueOf(period));\r\n    verify(mockCGroupsHandler, times(1)).updateCGroupParam(CGroupsHandler.CGroupController.CPU, \"\", CGroupsHandler.CGROUP_CPU_QUOTA_US, String.valueOf(CGroupsCpuResourceHandlerImpl.MAX_QUOTA_US));\r\n    Assert.assertNull(ret);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testBootstrapExistingLimits",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testBootstrapExistingLimits() throws Exception\n{\r\n    File existingLimit = new File(CGroupsHandler.CGroupController.CPU.getName() + \".\" + CGroupsHandler.CGROUP_CPU_QUOTA_US);\r\n    try {\r\n        FileUtils.write(existingLimit, \"10000\");\r\n        when(mockCGroupsHandler.getPathForCGroup(CGroupsHandler.CGroupController.CPU, \"\")).thenReturn(\".\");\r\n        Configuration conf = new YarnConfiguration();\r\n        List<PrivilegedOperation> ret = cGroupsCpuResourceHandler.bootstrap(plugin, conf);\r\n        verify(mockCGroupsHandler, times(1)).initializeCGroupController(CGroupsHandler.CGroupController.CPU);\r\n        verify(mockCGroupsHandler, times(1)).updateCGroupParam(CGroupsHandler.CGroupController.CPU, \"\", CGroupsHandler.CGROUP_CPU_QUOTA_US, \"-1\");\r\n        Assert.assertNull(ret);\r\n    } finally {\r\n        FileUtils.deleteQuietly(existingLimit);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testPreStart",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testPreStart() throws Exception\n{\r\n    String id = \"container_01_01\";\r\n    String path = \"test-path/\" + id;\r\n    ContainerId mockContainerId = mock(ContainerId.class);\r\n    when(mockContainerId.toString()).thenReturn(id);\r\n    Container mockContainer = mock(Container.class);\r\n    when(mockContainer.getContainerId()).thenReturn(mockContainerId);\r\n    when(mockCGroupsHandler.getPathForCGroupTasks(CGroupsHandler.CGroupController.CPU, id)).thenReturn(path);\r\n    when(mockContainer.getResource()).thenReturn(Resource.newInstance(1024, 2));\r\n    List<PrivilegedOperation> ret = cGroupsCpuResourceHandler.preStart(mockContainer);\r\n    verify(mockCGroupsHandler, times(1)).createCGroup(CGroupsHandler.CGroupController.CPU, id);\r\n    verify(mockCGroupsHandler, times(1)).updateCGroupParam(CGroupsHandler.CGroupController.CPU, id, CGroupsHandler.CGROUP_CPU_SHARES, String.valueOf(CGroupsCpuResourceHandlerImpl.CPU_DEFAULT_WEIGHT * 2));\r\n    verify(mockCGroupsHandler, never()).updateCGroupParam(eq(CGroupsHandler.CGroupController.CPU), eq(id), eq(CGroupsHandler.CGROUP_CPU_PERIOD_US), anyString());\r\n    verify(mockCGroupsHandler, never()).updateCGroupParam(eq(CGroupsHandler.CGroupController.CPU), eq(id), eq(CGroupsHandler.CGROUP_CPU_QUOTA_US), anyString());\r\n    Assert.assertNotNull(ret);\r\n    Assert.assertEquals(1, ret.size());\r\n    PrivilegedOperation op = ret.get(0);\r\n    Assert.assertEquals(PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP, op.getOperationType());\r\n    List<String> args = op.getArguments();\r\n    Assert.assertEquals(1, args.size());\r\n    Assert.assertEquals(PrivilegedOperation.CGROUP_ARG_PREFIX + path, args.get(0));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testPreStartStrictUsage",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testPreStartStrictUsage() throws Exception\n{\r\n    String id = \"container_01_01\";\r\n    String path = \"test-path/\" + id;\r\n    ContainerId mockContainerId = mock(ContainerId.class);\r\n    when(mockContainerId.toString()).thenReturn(id);\r\n    Container mockContainer = mock(Container.class);\r\n    when(mockContainer.getContainerId()).thenReturn(mockContainerId);\r\n    when(mockCGroupsHandler.getPathForCGroupTasks(CGroupsHandler.CGroupController.CPU, id)).thenReturn(path);\r\n    when(mockContainer.getResource()).thenReturn(Resource.newInstance(1024, 1));\r\n    Configuration conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE, true);\r\n    cGroupsCpuResourceHandler.bootstrap(plugin, conf);\r\n    int defaultVCores = 8;\r\n    float share = (float) numProcessors / (float) defaultVCores;\r\n    List<PrivilegedOperation> ret = cGroupsCpuResourceHandler.preStart(mockContainer);\r\n    verify(mockCGroupsHandler, times(1)).createCGroup(CGroupsHandler.CGroupController.CPU, id);\r\n    verify(mockCGroupsHandler, times(1)).updateCGroupParam(CGroupsHandler.CGroupController.CPU, id, CGroupsHandler.CGROUP_CPU_SHARES, String.valueOf(CGroupsCpuResourceHandlerImpl.CPU_DEFAULT_WEIGHT));\r\n    verify(mockCGroupsHandler, times(1)).updateCGroupParam(CGroupsHandler.CGroupController.CPU, id, CGroupsHandler.CGROUP_CPU_PERIOD_US, String.valueOf(CGroupsCpuResourceHandlerImpl.MAX_QUOTA_US));\r\n    verify(mockCGroupsHandler, times(1)).updateCGroupParam(CGroupsHandler.CGroupController.CPU, id, CGroupsHandler.CGROUP_CPU_QUOTA_US, String.valueOf((int) (CGroupsCpuResourceHandlerImpl.MAX_QUOTA_US * share)));\r\n    Assert.assertNotNull(ret);\r\n    Assert.assertEquals(1, ret.size());\r\n    PrivilegedOperation op = ret.get(0);\r\n    Assert.assertEquals(PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP, op.getOperationType());\r\n    List<String> args = op.getArguments();\r\n    Assert.assertEquals(1, args.size());\r\n    Assert.assertEquals(PrivilegedOperation.CGROUP_ARG_PREFIX + path, args.get(0));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testPreStartRestrictedContainers",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testPreStartRestrictedContainers() throws Exception\n{\r\n    String id = \"container_01_01\";\r\n    String path = \"test-path/\" + id;\r\n    int defaultVCores = 8;\r\n    Configuration conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE, true);\r\n    int cpuPerc = 75;\r\n    conf.setInt(YarnConfiguration.NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT, cpuPerc);\r\n    cGroupsCpuResourceHandler.bootstrap(plugin, conf);\r\n    verify(mockCGroupsHandler, times(1)).updateCGroupParam(CGroupsHandler.CGroupController.CPU, \"\", CGroupsHandler.CGROUP_CPU_PERIOD_US, String.valueOf(\"333333\"));\r\n    verify(mockCGroupsHandler, times(1)).updateCGroupParam(CGroupsHandler.CGroupController.CPU, \"\", CGroupsHandler.CGROUP_CPU_QUOTA_US, String.valueOf(CGroupsCpuResourceHandlerImpl.MAX_QUOTA_US));\r\n    float yarnCores = (cpuPerc * numProcessors) / 100;\r\n    int[] containerVCores = { 2, 4 };\r\n    for (int cVcores : containerVCores) {\r\n        ContainerId mockContainerId = mock(ContainerId.class);\r\n        when(mockContainerId.toString()).thenReturn(id);\r\n        Container mockContainer = mock(Container.class);\r\n        when(mockContainer.getContainerId()).thenReturn(mockContainerId);\r\n        when(mockCGroupsHandler.getPathForCGroupTasks(CGroupsHandler.CGroupController.CPU, id)).thenReturn(path);\r\n        when(mockContainer.getResource()).thenReturn(Resource.newInstance(1024, cVcores));\r\n        when(mockCGroupsHandler.getPathForCGroupTasks(CGroupsHandler.CGroupController.CPU, id)).thenReturn(path);\r\n        float share = (cVcores * yarnCores) / defaultVCores;\r\n        int quotaUS;\r\n        int periodUS;\r\n        if (share > 1.0f) {\r\n            quotaUS = CGroupsCpuResourceHandlerImpl.MAX_QUOTA_US;\r\n            periodUS = (int) ((float) CGroupsCpuResourceHandlerImpl.MAX_QUOTA_US / share);\r\n        } else {\r\n            quotaUS = (int) (CGroupsCpuResourceHandlerImpl.MAX_QUOTA_US * share);\r\n            periodUS = CGroupsCpuResourceHandlerImpl.MAX_QUOTA_US;\r\n        }\r\n        cGroupsCpuResourceHandler.preStart(mockContainer);\r\n        verify(mockCGroupsHandler, times(1)).updateCGroupParam(CGroupsHandler.CGroupController.CPU, id, CGroupsHandler.CGROUP_CPU_SHARES, String.valueOf(CGroupsCpuResourceHandlerImpl.CPU_DEFAULT_WEIGHT * cVcores));\r\n        verify(mockCGroupsHandler, times(1)).updateCGroupParam(CGroupsHandler.CGroupController.CPU, id, CGroupsHandler.CGROUP_CPU_PERIOD_US, String.valueOf(periodUS));\r\n        verify(mockCGroupsHandler, times(1)).updateCGroupParam(CGroupsHandler.CGroupController.CPU, id, CGroupsHandler.CGROUP_CPU_QUOTA_US, String.valueOf(quotaUS));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testReacquireContainer",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testReacquireContainer() throws Exception\n{\r\n    ContainerId containerIdMock = mock(ContainerId.class);\r\n    Assert.assertNull(cGroupsCpuResourceHandler.reacquireContainer(containerIdMock));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testPostComplete",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testPostComplete() throws Exception\n{\r\n    String id = \"container_01_01\";\r\n    ContainerId mockContainerId = mock(ContainerId.class);\r\n    when(mockContainerId.toString()).thenReturn(id);\r\n    Assert.assertNull(cGroupsCpuResourceHandler.postComplete(mockContainerId));\r\n    verify(mockCGroupsHandler, times(1)).deleteCGroup(CGroupsHandler.CGroupController.CPU, id);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testTeardown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testTeardown() throws Exception\n{\r\n    Assert.assertNull(cGroupsCpuResourceHandler.teardown());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testStrictResourceUsage",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testStrictResourceUsage() throws Exception\n{\r\n    Assert.assertNull(cGroupsCpuResourceHandler.teardown());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testOpportunistic",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testOpportunistic() throws Exception\n{\r\n    Configuration conf = new YarnConfiguration();\r\n    cGroupsCpuResourceHandler.bootstrap(plugin, conf);\r\n    ContainerTokenIdentifier tokenId = mock(ContainerTokenIdentifier.class);\r\n    when(tokenId.getExecutionType()).thenReturn(ExecutionType.OPPORTUNISTIC);\r\n    Container container = mock(Container.class);\r\n    String id = \"container_01_01\";\r\n    ContainerId mockContainerId = mock(ContainerId.class);\r\n    when(mockContainerId.toString()).thenReturn(id);\r\n    when(container.getContainerId()).thenReturn(mockContainerId);\r\n    when(container.getContainerTokenIdentifier()).thenReturn(tokenId);\r\n    when(container.getResource()).thenReturn(Resource.newInstance(1024, 2));\r\n    cGroupsCpuResourceHandler.preStart(container);\r\n    verify(mockCGroupsHandler, times(1)).updateCGroupParam(CGroupsHandler.CGroupController.CPU, id, CGroupsHandler.CGROUP_CPU_SHARES, \"2\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\task",
  "methodName" : "matches",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean matches(DockerContainerDeletionTask task)\n{\r\n    if (task.getContainerId() == null && containerId == null) {\r\n        return true;\r\n    }\r\n    if (task.getContainerId() != null && containerId != null) {\r\n        return task.getContainerId().equals(containerId);\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setup()\n{\r\n    dockerPullCommand = new DockerPullCommand(IMAGE_NAME);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testGetCommandOption",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetCommandOption()\n{\r\n    assertEquals(\"pull\", dockerPullCommand.getCommandOption());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testGetCommandWithArguments",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testGetCommandWithArguments()\n{\r\n    assertEquals(\"pull\", StringUtils.join(\",\", dockerPullCommand.getDockerCommandWithArguments().get(\"docker-command\")));\r\n    assertEquals(\"foo\", StringUtils.join(\",\", dockerPullCommand.getDockerCommandWithArguments().get(\"image\")));\r\n    assertEquals(2, dockerPullCommand.getDockerCommandWithArguments().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getVirtualMemorySize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getVirtualMemorySize()\n{\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getPhysicalMemorySize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getPhysicalMemorySize()\n{\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getAvailableVirtualMemorySize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getAvailableVirtualMemorySize()\n{\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getAvailablePhysicalMemorySize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getAvailablePhysicalMemorySize()\n{\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getNumProcessors",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getNumProcessors()\n{\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getNumCores",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getNumCores()\n{\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getCpuFrequency",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getCpuFrequency()\n{\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getCumulativeCpuTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getCumulativeCpuTime()\n{\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getCpuUsagePercentage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "float getCpuUsagePercentage()\n{\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getNumVCoresUsed",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "float getNumVCoresUsed()\n{\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    containerManager.start();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "createContainerManager",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "ContainerManagerImpl createContainerManager(DeletionService delSrvc)\n{\r\n    return new ContainerManagerImpl(context, exec, delSrvc, getNodeStatusUpdater(), metrics, dirsHandler) {\r\n\r\n        @Override\r\n        public StartContainersResponse startContainers(StartContainersRequest requests) throws YarnException, IOException {\r\n            if (retryCount < 5) {\r\n                retryCount++;\r\n                if (isRetryPolicyRetryForEver()) {\r\n                    throw new IOException(new UnreliableInterface.UnreliableException());\r\n                } else {\r\n                    throw new java.net.ConnectException(\"start container exception\");\r\n                }\r\n            }\r\n            return super.startContainers(requests);\r\n        }\r\n\r\n        private boolean isRetryPolicyRetryForEver() {\r\n            return conf.getLong(YarnConfiguration.CLIENT_NM_CONNECT_MAX_WAIT_MS, 1000) == -1;\r\n        }\r\n\r\n        @Override\r\n        public StopContainersResponse stopContainers(StopContainersRequest requests) throws YarnException, IOException {\r\n            if (retryCount < 5) {\r\n                retryCount++;\r\n                throw new java.net.ConnectException(\"stop container exception\");\r\n            }\r\n            return super.stopContainers(requests);\r\n        }\r\n\r\n        @Override\r\n        public GetContainerStatusesResponse getContainerStatuses(GetContainerStatusesRequest request) throws YarnException, IOException {\r\n            if (retryCount < 5) {\r\n                retryCount++;\r\n                throw new java.net.ConnectException(\"get container status exception\");\r\n            }\r\n            return super.getContainerStatuses(request);\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testNMProxyRetry",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testNMProxyRetry() throws Exception\n{\r\n    conf.setLong(YarnConfiguration.CLIENT_NM_CONNECT_MAX_WAIT_MS, 10000);\r\n    conf.setLong(YarnConfiguration.CLIENT_NM_CONNECT_RETRY_INTERVAL_MS, 100);\r\n    StartContainersRequest allRequests = Records.newRecord(StartContainersRequest.class);\r\n    ContainerManagementProtocol proxy = getNMProxy(conf);\r\n    proxy.startContainers(allRequests);\r\n    Assert.assertEquals(5, retryCount);\r\n    retryCount = 0;\r\n    proxy.stopContainers(Records.newRecord(StopContainersRequest.class));\r\n    Assert.assertEquals(5, retryCount);\r\n    retryCount = 0;\r\n    proxy.getContainerStatuses(Records.newRecord(GetContainerStatusesRequest.class));\r\n    Assert.assertEquals(5, retryCount);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testShouldNotRetryForeverForNonNetworkExceptionsOnNMConnections",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testShouldNotRetryForeverForNonNetworkExceptionsOnNMConnections() throws Exception\n{\r\n    conf.setLong(YarnConfiguration.CLIENT_NM_CONNECT_MAX_WAIT_MS, -1);\r\n    StartContainersRequest allRequests = Records.newRecord(StartContainersRequest.class);\r\n    ContainerManagementProtocol proxy = getNMProxy(conf);\r\n    retryCount = 0;\r\n    proxy.startContainers(allRequests);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testNMProxyRPCRetry",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testNMProxyRPCRetry() throws Exception\n{\r\n    conf.setLong(YarnConfiguration.CLIENT_NM_CONNECT_MAX_WAIT_MS, 1000);\r\n    conf.setLong(YarnConfiguration.CLIENT_NM_CONNECT_RETRY_INTERVAL_MS, 100);\r\n    StartContainersRequest allRequests = Records.newRecord(StartContainersRequest.class);\r\n    Configuration newConf = new YarnConfiguration(conf);\r\n    newConf.setInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY, 100);\r\n    newConf.setInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY, 100);\r\n    newConf.set(YarnConfiguration.NM_ADDRESS, \"127.0.0.1:1\");\r\n    ContainerManagementProtocol proxy = getNMProxy(newConf);\r\n    LambdaTestUtils.intercept(SocketException.class, () -> proxy.startContainers(allRequests));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "getNMProxy",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "ContainerManagementProtocol getNMProxy(Configuration conf)\n{\r\n    ApplicationId appId = ApplicationId.newInstance(1, 1);\r\n    ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    org.apache.hadoop.yarn.api.records.Token nmToken = context.getNMTokenSecretManager().createNMToken(attemptId, context.getNodeId(), user);\r\n    final InetSocketAddress address = conf.getSocketAddr(YarnConfiguration.NM_BIND_HOST, YarnConfiguration.NM_ADDRESS, YarnConfiguration.DEFAULT_NM_ADDRESS, YarnConfiguration.DEFAULT_NM_PORT);\r\n    Token<NMTokenIdentifier> token = ConverterUtils.convertFromYarn(nmToken, SecurityUtil.buildTokenService(address));\r\n    UserGroupInformation ugi = UserGroupInformation.createRemoteUser(user);\r\n    ugi.addToken(token);\r\n    return NMProxy.createNMProxy(conf, ContainerManagementProtocol.class, ugi, YarnRPC.create(conf), address);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\fpga",
  "methodName" : "getTestParentFolder",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getTestParentFolder()\n{\r\n    File f = new File(\"target/temp/\" + TestFpgaResourceHandlerImpl.class.getName());\r\n    return f.getAbsolutePath();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\fpga",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void setup() throws IOException, YarnException\n{\r\n    CustomResourceTypesConfigurationProvider.initResourceTypes(ResourceInformation.FPGA_URI);\r\n    configuration = new YarnConfiguration();\r\n    mockCGroupsHandler = mock(CGroupsHandler.class);\r\n    mockPrivilegedExecutor = mock(PrivilegedOperationExecutor.class);\r\n    mockNMStateStore = mock(NMStateStoreService.class);\r\n    mockContext = mock(Context.class);\r\n    deviceList = new ArrayList<>();\r\n    for (int i = 0; i < 5; i++) {\r\n        deviceList.add(new FpgaDevice(vendorType, 247, i, \"acl\" + i));\r\n    }\r\n    String aocxPath = getTestParentFolder() + \"/test.aocx\";\r\n    mockVendorPlugin = mockPlugin(vendorType, deviceList, aocxPath);\r\n    fpgaDiscoverer = new FpgaDiscoverer();\r\n    fpgaDiscoverer.setResourceHanderPlugin(mockVendorPlugin);\r\n    fpgaDiscoverer.initialize(configuration);\r\n    when(mockContext.getNMStateStore()).thenReturn(mockNMStateStore);\r\n    runningContainersMap = new ConcurrentHashMap<>();\r\n    when(mockContext.getContainers()).thenReturn(runningContainersMap);\r\n    fpgaResourceHandler = new FpgaResourceHandlerImpl(mockContext, mockCGroupsHandler, mockPrivilegedExecutor, mockVendorPlugin, fpgaDiscoverer);\r\n    dummyAocx = new File(aocxPath);\r\n    Files.createParentDirs(dummyAocx);\r\n    Files.touch(dummyAocx);\r\n    Files.asCharSink(dummyAocx, StandardCharsets.UTF_8, FileWriteMode.APPEND).write(HASHABLE_STRING);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\fpga",
  "methodName" : "teardown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void teardown()\n{\r\n    if (dummyAocx != null) {\r\n        dummyAocx.delete();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\fpga",
  "methodName" : "testBootstrap",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testBootstrap() throws ResourceHandlerException\n{\r\n    String allowed = \"auto\";\r\n    configuration.set(YarnConfiguration.NM_FPGA_ALLOWED_DEVICES, allowed);\r\n    fpgaResourceHandler.bootstrap(configuration);\r\n    verify(mockVendorPlugin, times(2)).initPlugin(configuration);\r\n    verify(mockCGroupsHandler, times(1)).initializeCGroupController(CGroupsHandler.CGroupController.DEVICES);\r\n    Assert.assertEquals(5, fpgaResourceHandler.getFpgaAllocator().getAvailableFpgaCount());\r\n    Assert.assertEquals(5, fpgaResourceHandler.getFpgaAllocator().getAllowedFpga().size());\r\n    fpgaResourceHandler = new FpgaResourceHandlerImpl(mockContext, mockCGroupsHandler, mockPrivilegedExecutor, mockVendorPlugin, fpgaDiscoverer);\r\n    allowed = \"0,1,2\";\r\n    configuration.set(YarnConfiguration.NM_FPGA_ALLOWED_DEVICES, allowed);\r\n    fpgaResourceHandler.bootstrap(configuration);\r\n    Assert.assertEquals(3, fpgaResourceHandler.getFpgaAllocator().getAllowedFpga().size());\r\n    List<FpgaDevice> allowedDevices = fpgaResourceHandler.getFpgaAllocator().getAllowedFpga();\r\n    for (String s : allowed.split(\",\")) {\r\n        boolean check = false;\r\n        for (FpgaDevice device : allowedDevices) {\r\n            if (String.valueOf(device.getMinor()).equals(s)) {\r\n                check = true;\r\n            }\r\n        }\r\n        Assert.assertTrue(\"Minor:\" + s + \" found\", check);\r\n    }\r\n    Assert.assertEquals(3, fpgaResourceHandler.getFpgaAllocator().getAvailableFpgaCount());\r\n    fpgaResourceHandler = new FpgaResourceHandlerImpl(mockContext, mockCGroupsHandler, mockPrivilegedExecutor, mockVendorPlugin, fpgaDiscoverer);\r\n    allowed = \"0,1,7\";\r\n    configuration.set(YarnConfiguration.NM_FPGA_ALLOWED_DEVICES, allowed);\r\n    fpgaResourceHandler.bootstrap(configuration);\r\n    Assert.assertEquals(2, fpgaResourceHandler.getFpgaAllocator().getAvailableFpgaCount());\r\n    Assert.assertEquals(2, fpgaResourceHandler.getFpgaAllocator().getAllowedFpga().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\fpga",
  "methodName" : "testBootstrapWithInvalidUserConfiguration",
  "errType" : [ "ResourceHandlerException", "ResourceHandlerException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testBootstrapWithInvalidUserConfiguration() throws ResourceHandlerException\n{\r\n    String allowed = \"0,1,7\";\r\n    configuration.set(YarnConfiguration.NM_FPGA_ALLOWED_DEVICES, allowed);\r\n    fpgaResourceHandler.bootstrap(configuration);\r\n    Assert.assertEquals(2, fpgaResourceHandler.getFpgaAllocator().getAllowedFpga().size());\r\n    Assert.assertEquals(2, fpgaResourceHandler.getFpgaAllocator().getAvailableFpgaCount());\r\n    String[] invalidAllowedStrings = { \"a,1,2,\", \"a,1,2\", \"0,1,2,#\", \"a\", \"1,\" };\r\n    for (String s : invalidAllowedStrings) {\r\n        boolean invalidConfiguration = false;\r\n        configuration.set(YarnConfiguration.NM_FPGA_ALLOWED_DEVICES, s);\r\n        try {\r\n            fpgaResourceHandler.bootstrap(configuration);\r\n        } catch (ResourceHandlerException e) {\r\n            invalidConfiguration = true;\r\n        }\r\n        Assert.assertTrue(invalidConfiguration);\r\n    }\r\n    String[] allowedStrings = { \"1,2\", \"1\" };\r\n    for (String s : allowedStrings) {\r\n        boolean invalidConfiguration = false;\r\n        configuration.set(YarnConfiguration.NM_FPGA_ALLOWED_DEVICES, s);\r\n        try {\r\n            fpgaResourceHandler.bootstrap(configuration);\r\n        } catch (ResourceHandlerException e) {\r\n            invalidConfiguration = true;\r\n        }\r\n        Assert.assertFalse(invalidConfiguration);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\fpga",
  "methodName" : "testBootStrapWithEmptyUserConfiguration",
  "errType" : [ "ResourceHandlerException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testBootStrapWithEmptyUserConfiguration() throws ResourceHandlerException\n{\r\n    String allowed = \"\";\r\n    boolean invalidConfiguration = false;\r\n    configuration.set(YarnConfiguration.NM_FPGA_ALLOWED_DEVICES, allowed);\r\n    try {\r\n        fpgaResourceHandler.bootstrap(configuration);\r\n    } catch (ResourceHandlerException e) {\r\n        invalidConfiguration = true;\r\n    }\r\n    Assert.assertTrue(invalidConfiguration);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\fpga",
  "methodName" : "testAllocationWithPreference",
  "errType" : [ "ResourceHandlerException", "ResourceHandlerException" ],
  "containingMethodsNum" : 35,
  "sourceCodeText" : "void testAllocationWithPreference() throws ResourceHandlerException, PrivilegedOperationException\n{\r\n    configuration.set(YarnConfiguration.NM_FPGA_ALLOWED_DEVICES, \"0,1,2\");\r\n    fpgaResourceHandler.bootstrap(configuration);\r\n    fpgaResourceHandler.preStart(mockContainer(0, 1, \"GEMM\"));\r\n    Assert.assertEquals(1, fpgaResourceHandler.getFpgaAllocator().getUsedFpgaCount());\r\n    verifyDeniedDevices(getContainerId(0), Arrays.asList(1, 2));\r\n    List<FpgaDevice> list = fpgaResourceHandler.getFpgaAllocator().getUsedFpga().get(getContainerId(0).toString());\r\n    for (FpgaDevice device : list) {\r\n        Assert.assertEquals(\"IP should be updated to GEMM\", \"GEMM\", device.getIPID());\r\n    }\r\n    boolean flag = false;\r\n    try {\r\n        fpgaResourceHandler.preStart(mockContainer(1, 3, \"GZIP\"));\r\n    } catch (ResourceHandlerException e) {\r\n        flag = true;\r\n    }\r\n    Assert.assertTrue(flag);\r\n    fpgaResourceHandler.postComplete(getContainerId(0));\r\n    Assert.assertEquals(0, fpgaResourceHandler.getFpgaAllocator().getUsedFpgaCount());\r\n    Assert.assertEquals(3, fpgaResourceHandler.getFpgaAllocator().getAvailableFpgaCount());\r\n    fpgaResourceHandler.preStart(mockContainer(1, 3, \"GEMM\"));\r\n    verifyDeniedDevices(getContainerId(1), new ArrayList<>());\r\n    Assert.assertEquals(3, fpgaResourceHandler.getFpgaAllocator().getUsedFpgaCount());\r\n    Assert.assertEquals(0, fpgaResourceHandler.getFpgaAllocator().getAvailableFpgaCount());\r\n    fpgaResourceHandler.postComplete(getContainerId(1));\r\n    Assert.assertEquals(0, fpgaResourceHandler.getFpgaAllocator().getUsedFpgaCount());\r\n    Assert.assertEquals(3, fpgaResourceHandler.getFpgaAllocator().getAvailableFpgaCount());\r\n    fpgaResourceHandler.preStart(mockContainer(2, 1, \"GZIP\"));\r\n    fpgaResourceHandler.postComplete(getContainerId(2));\r\n    fpgaResourceHandler.preStart(mockContainer(3, 2, \"GEMM\"));\r\n    list = fpgaResourceHandler.getFpgaAllocator().getUsedFpga().get(getContainerId(3).toString());\r\n    for (FpgaDevice device : list) {\r\n        Assert.assertEquals(\"IPID should be GEMM\", \"GEMM\", device.getIPID());\r\n    }\r\n    Assert.assertEquals(2, fpgaResourceHandler.getFpgaAllocator().getUsedFpgaCount());\r\n    Assert.assertEquals(1, fpgaResourceHandler.getFpgaAllocator().getAvailableFpgaCount());\r\n    fpgaResourceHandler.postComplete(getContainerId(3));\r\n    Assert.assertEquals(0, fpgaResourceHandler.getFpgaAllocator().getUsedFpgaCount());\r\n    Assert.assertEquals(3, fpgaResourceHandler.getFpgaAllocator().getAvailableFpgaCount());\r\n    fpgaResourceHandler.preStart(mockContainer(4, 0, \"\"));\r\n    verifyDeniedDevices(getContainerId(4), Arrays.asList(0, 1, 2));\r\n    Assert.assertEquals(0, fpgaResourceHandler.getFpgaAllocator().getUsedFpgaCount());\r\n    Assert.assertEquals(3, fpgaResourceHandler.getFpgaAllocator().getAvailableFpgaCount());\r\n    try {\r\n        fpgaResourceHandler.preStart(mockContainer(5, -2, \"\"));\r\n    } catch (ResourceHandlerException e) {\r\n        Assert.assertTrue(true);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\fpga",
  "methodName" : "testsAllocationWithExistingIPIDDevices",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testsAllocationWithExistingIPIDDevices() throws ResourceHandlerException, PrivilegedOperationException, IOException\n{\r\n    configuration.set(YarnConfiguration.NM_FPGA_ALLOWED_DEVICES, \"0,1,2\");\r\n    fpgaResourceHandler.bootstrap(configuration);\r\n    fpgaResourceHandler.preStart(mockContainer(0, 3, \"GEMM\"));\r\n    Assert.assertEquals(3, fpgaResourceHandler.getFpgaAllocator().getUsedFpgaCount());\r\n    List<FpgaDevice> list = fpgaResourceHandler.getFpgaAllocator().getUsedFpga().get(getContainerId(0).toString());\r\n    fpgaResourceHandler.postComplete(getContainerId(0));\r\n    for (FpgaDevice device : list) {\r\n        Assert.assertEquals(\"IP should be updated to GEMM\", \"GEMM\", device.getIPID());\r\n    }\r\n    fpgaResourceHandler.preStart(mockContainer(1, 1, \"GEMM\"));\r\n    fpgaResourceHandler.preStart(mockContainer(2, 1, \"GEMM\"));\r\n    verify(mockVendorPlugin, times(3)).configureIP(anyString(), any(FpgaDevice.class));\r\n    fpgaResourceHandler.postComplete(getContainerId(1));\r\n    fpgaResourceHandler.postComplete(getContainerId(2));\r\n    Files.asCharSink(dummyAocx, StandardCharsets.UTF_8, FileWriteMode.APPEND).write(\"12345\");\r\n    fpgaResourceHandler.preStart(mockContainer(1, 1, \"GZIP\"));\r\n    verify(mockVendorPlugin, times(4)).configureIP(anyString(), any(FpgaDevice.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\fpga",
  "methodName" : "testAllocationWithZeroDevices",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testAllocationWithZeroDevices() throws ResourceHandlerException, PrivilegedOperationException\n{\r\n    configuration.set(YarnConfiguration.NM_FPGA_ALLOWED_DEVICES, \"0,1,2\");\r\n    fpgaResourceHandler.bootstrap(configuration);\r\n    fpgaResourceHandler.preStart(mockContainer(0, 0, null));\r\n    verifyDeniedDevices(getContainerId(0), Arrays.asList(0, 1, 2));\r\n    verify(mockVendorPlugin, times(0)).retrieveIPfilePath(anyString(), anyString(), anyMap());\r\n    verify(mockVendorPlugin, times(0)).configureIP(anyString(), any(FpgaDevice.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\fpga",
  "methodName" : "testStateStore",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testStateStore() throws ResourceHandlerException, IOException\n{\r\n    configuration.set(YarnConfiguration.NM_FPGA_ALLOWED_DEVICES, \"0,1,2\");\r\n    fpgaResourceHandler.bootstrap(configuration);\r\n    Container container0 = mockContainer(0, 3, \"GEMM\");\r\n    fpgaResourceHandler.preStart(container0);\r\n    List<FpgaDevice> assigned = fpgaResourceHandler.getFpgaAllocator().getUsedFpga().get(getContainerId(0).toString());\r\n    verify(mockNMStateStore).storeAssignedResources(container0, ResourceInformation.FPGA_URI, new ArrayList<>(assigned));\r\n    fpgaResourceHandler.postComplete(getContainerId(0));\r\n    Container container1 = mockContainer(1, 0, \"\");\r\n    fpgaResourceHandler.preStart(container1);\r\n    verify(mockNMStateStore, never()).storeAssignedResources(eq(container1), eq(ResourceInformation.FPGA_URI), anyList());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\fpga",
  "methodName" : "testReacquireContainer",
  "errType" : [ "ResourceHandlerException", "ResourceHandlerException" ],
  "containingMethodsNum" : 36,
  "sourceCodeText" : "void testReacquireContainer() throws ResourceHandlerException\n{\r\n    Container c0 = mockContainer(0, 2, \"GEMM\");\r\n    List<FpgaDevice> assigned = new ArrayList<>();\r\n    assigned.add(new FpgaDevice(vendorType, 247, 0, \"acl0\"));\r\n    assigned.add(new FpgaDevice(vendorType, 247, 1, \"acl1\"));\r\n    mockStateStoreForContainer(c0, assigned);\r\n    configuration.set(YarnConfiguration.NM_FPGA_ALLOWED_DEVICES, \"0,1,2\");\r\n    fpgaResourceHandler.bootstrap(configuration);\r\n    Assert.assertEquals(0, fpgaResourceHandler.getFpgaAllocator().getUsedFpgaCount());\r\n    Assert.assertEquals(3, fpgaResourceHandler.getFpgaAllocator().getAvailableFpgaCount());\r\n    fpgaResourceHandler.reacquireContainer(getContainerId(0));\r\n    List<FpgaDevice> used = fpgaResourceHandler.getFpgaAllocator().getUsedFpga().get(getContainerId(0).toString());\r\n    int count = 0;\r\n    for (FpgaDevice device : used) {\r\n        if (device.getMinor() == 0) {\r\n            count++;\r\n        }\r\n        if (device.getMinor() == 1) {\r\n            count++;\r\n        }\r\n    }\r\n    Assert.assertEquals(\"Unexpected used minor number in allocator\", 2, count);\r\n    List<FpgaDevice> available = fpgaResourceHandler.getFpgaAllocator().getAvailableFpga().get(vendorType);\r\n    count = 0;\r\n    for (FpgaDevice device : available) {\r\n        if (device.getMinor() == 2) {\r\n            count++;\r\n        }\r\n    }\r\n    Assert.assertEquals(\"Unexpected available minor number in allocator\", 1, count);\r\n    Container c1 = mockContainer(1, 1, \"GEMM\");\r\n    assigned = new ArrayList<>();\r\n    assigned.add(new FpgaDevice(vendorType, 247, 5, \"acl0\"));\r\n    mockStateStoreForContainer(c1, assigned);\r\n    boolean flag = false;\r\n    try {\r\n        fpgaResourceHandler.reacquireContainer(getContainerId(1));\r\n    } catch (ResourceHandlerException e) {\r\n        flag = true;\r\n    }\r\n    Assert.assertTrue(flag);\r\n    Assert.assertEquals(2, fpgaResourceHandler.getFpgaAllocator().getUsedFpgaCount());\r\n    Assert.assertEquals(1, fpgaResourceHandler.getFpgaAllocator().getAvailableFpgaCount());\r\n    Container c2 = mockContainer(2, 1, \"GEMM\");\r\n    assigned = new ArrayList<>();\r\n    assigned.add(new FpgaDevice(vendorType, 247, 1, \"acl0\"));\r\n    mockStateStoreForContainer(c2, assigned);\r\n    flag = false;\r\n    try {\r\n        fpgaResourceHandler.reacquireContainer(getContainerId(2));\r\n    } catch (ResourceHandlerException e) {\r\n        flag = true;\r\n    }\r\n    Assert.assertTrue(flag);\r\n    Assert.assertEquals(2, fpgaResourceHandler.getFpgaAllocator().getUsedFpgaCount());\r\n    Assert.assertEquals(1, fpgaResourceHandler.getFpgaAllocator().getAvailableFpgaCount());\r\n    Container c3 = mockContainer(3, 1, \"GEMM\");\r\n    assigned = new ArrayList<>();\r\n    assigned.add(new FpgaDevice(vendorType, 247, 2, \"acl2\"));\r\n    mockStateStoreForContainer(c3, assigned);\r\n    fpgaResourceHandler.reacquireContainer(getContainerId(3));\r\n    Assert.assertEquals(3, fpgaResourceHandler.getFpgaAllocator().getUsedFpgaCount());\r\n    Assert.assertEquals(0, fpgaResourceHandler.getFpgaAllocator().getAvailableFpgaCount());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\fpga",
  "methodName" : "testSha256CalculationFails",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testSha256CalculationFails() throws ResourceHandlerException\n{\r\n    expected.expect(ResourceHandlerException.class);\r\n    expected.expectMessage(\"Could not calculate SHA-256\");\r\n    dummyAocx.delete();\r\n    fpgaResourceHandler.preStart(mockContainer(0, 1, \"GEMM\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\fpga",
  "methodName" : "testSha256CalculationSucceeds",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testSha256CalculationSucceeds() throws IOException, ResourceHandlerException\n{\r\n    mockVendorPlugin = mockPlugin(vendorType, deviceList, dummyAocx.getAbsolutePath());\r\n    fpgaResourceHandler = new FpgaResourceHandlerImpl(mockContext, mockCGroupsHandler, mockPrivilegedExecutor, mockVendorPlugin, fpgaDiscoverer);\r\n    fpgaResourceHandler.bootstrap(configuration);\r\n    fpgaResourceHandler.preStart(mockContainer(0, 1, \"GEMM\"));\r\n    List<FpgaDevice> devices = fpgaResourceHandler.getFpgaAllocator().getAllowedFpga();\r\n    FpgaDevice device = devices.get(0);\r\n    assertEquals(\"Hash value\", EXPECTED_HASH, device.getAocxHash());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\fpga",
  "methodName" : "verifyDeniedDevices",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void verifyDeniedDevices(ContainerId containerId, List<Integer> deniedDevices) throws ResourceHandlerException, PrivilegedOperationException\n{\r\n    verify(mockCGroupsHandler, atLeastOnce()).createCGroup(CGroupsHandler.CGroupController.DEVICES, containerId.toString());\r\n    if (null != deniedDevices && !deniedDevices.isEmpty()) {\r\n        verify(mockPrivilegedExecutor, times(1)).executePrivilegedOperation(new PrivilegedOperation(PrivilegedOperation.OperationType.FPGA, Arrays.asList(FpgaResourceHandlerImpl.CONTAINER_ID_CLI_OPTION, containerId.toString(), FpgaResourceHandlerImpl.EXCLUDED_FPGAS_CLI_OPTION, StringUtils.join(\",\", deniedDevices))), true);\r\n    } else if (deniedDevices.isEmpty()) {\r\n        verify(mockPrivilegedExecutor, times(1)).executePrivilegedOperation(new PrivilegedOperation(PrivilegedOperation.OperationType.FPGA, Arrays.asList(FpgaResourceHandlerImpl.CONTAINER_ID_CLI_OPTION, containerId.toString())), true);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\fpga",
  "methodName" : "mockPlugin",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "IntelFpgaOpenclPlugin mockPlugin(String type, List<FpgaDevice> list, String aocxPath)\n{\r\n    IntelFpgaOpenclPlugin plugin = mock(IntelFpgaOpenclPlugin.class);\r\n    when(plugin.initPlugin(any())).thenReturn(true);\r\n    when(plugin.getFpgaType()).thenReturn(type);\r\n    when(plugin.retrieveIPfilePath(anyString(), anyString(), anyMap())).thenReturn(aocxPath);\r\n    when(plugin.configureIP(anyString(), any())).thenReturn(true);\r\n    when(plugin.discover(anyInt())).thenReturn(list);\r\n    return plugin;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\fpga",
  "methodName" : "mockContainer",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "Container mockContainer(int id, int numFpga, String IPID)\n{\r\n    Container c = mock(Container.class);\r\n    Resource res = Resource.newInstance(1024, 1);\r\n    ResourceMappings resMapping = new ResourceMappings();\r\n    res.setResourceValue(ResourceInformation.FPGA_URI, numFpga);\r\n    when(c.getResource()).thenReturn(res);\r\n    when(c.getResourceMappings()).thenReturn(resMapping);\r\n    when(c.getContainerId()).thenReturn(getContainerId(id));\r\n    ContainerLaunchContext clc = mock(ContainerLaunchContext.class);\r\n    Map<String, String> envs = new HashMap<>();\r\n    if (numFpga > 0) {\r\n        envs.put(\"REQUESTED_FPGA_IP_ID\", IPID);\r\n    }\r\n    when(c.getLaunchContext()).thenReturn(clc);\r\n    when(clc.getEnvironment()).thenReturn(envs);\r\n    when(c.getWorkDir()).thenReturn(\"/tmp\");\r\n    ResourceSet resourceSet = new ResourceSet();\r\n    when(c.getResourceSet()).thenReturn(resourceSet);\r\n    return c;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\fpga",
  "methodName" : "mockStateStoreForContainer",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void mockStateStoreForContainer(Container container, List<FpgaDevice> assigned)\n{\r\n    ResourceMappings rmap = new ResourceMappings();\r\n    ResourceMappings.AssignedResources ar = new ResourceMappings.AssignedResources();\r\n    ar.updateAssignedResources(new ArrayList<>(assigned));\r\n    rmap.addAssignedResources(ResourceInformation.FPGA_URI, ar);\r\n    when(container.getResourceMappings()).thenReturn(rmap);\r\n    runningContainersMap.put(container.getContainerId(), container);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\fpga",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerId getContainerId(int id)\n{\r\n    return ContainerId.newContainerId(ApplicationAttemptId.newInstance(ApplicationId.newInstance(1234L, 1), 1), id);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setup()\n{\r\n    dummyLabelsProviderRef = new DummyNodeLabelsProvider();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown()\n{\r\n    if (null != nm) {\r\n        ServiceOperations.stop(nm);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createNMConfigForDistributeNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnConfiguration createNMConfigForDistributeNodeLabels()\n{\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.set(YarnConfiguration.NODELABEL_CONFIGURATION_TYPE, YarnConfiguration.DISTRIBUTED_NODELABEL_CONFIGURATION_TYPE);\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testNodeStatusUpdaterForNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 34,
  "sourceCodeText" : "void testNodeStatusUpdaterForNodeLabels() throws InterruptedException, IOException\n{\r\n    final ResourceTrackerForLabels resourceTracker = new ResourceTrackerForLabels();\r\n    nm = new NodeManager() {\r\n\r\n        @Override\r\n        protected NodeLabelsProvider createNodeLabelsProvider(Configuration conf) throws IOException {\r\n            return dummyLabelsProviderRef;\r\n        }\r\n\r\n        @Override\r\n        protected NodeStatusUpdater createNodeStatusUpdater(Context context, Dispatcher dispatcher, NodeHealthCheckerService healthChecker) {\r\n            return new NodeStatusUpdaterImpl(context, dispatcher, healthChecker, metrics) {\r\n\r\n                @Override\r\n                protected ResourceTracker getRMClient() {\r\n                    return resourceTracker;\r\n                }\r\n\r\n                @Override\r\n                protected void stopRMProxy() {\r\n                    return;\r\n                }\r\n            };\r\n        }\r\n    };\r\n    YarnConfiguration conf = createNMConfigForDistributeNodeLabels();\r\n    conf.setLong(YarnConfiguration.NM_NODE_LABELS_RESYNC_INTERVAL, 2000);\r\n    conf.set(YarnConfiguration.NM_LOCALIZER_ADDRESS, \"0.0.0.0:\" + ServerSocketUtil.getPort(8040, 10));\r\n    nm.init(conf);\r\n    resourceTracker.resetNMHeartbeatReceiveFlag();\r\n    nm.start();\r\n    resourceTracker.waitTillRegister();\r\n    assertNLCollectionEquals(dummyLabelsProviderRef.getDescriptors(), resourceTracker.labels);\r\n    resourceTracker.waitTillHeartbeat();\r\n    resourceTracker.resetNMHeartbeatReceiveFlag();\r\n    dummyLabelsProviderRef.setDescriptors(toNodeLabelSet(\"P\"));\r\n    sendOutofBandHeartBeat();\r\n    resourceTracker.waitTillHeartbeat();\r\n    assertNLCollectionEquals(dummyLabelsProviderRef.getDescriptors(), resourceTracker.labels);\r\n    resourceTracker.resetNMHeartbeatReceiveFlag();\r\n    sendOutofBandHeartBeat();\r\n    resourceTracker.waitTillHeartbeat();\r\n    resourceTracker.resetNMHeartbeatReceiveFlag();\r\n    assertNull(\"If no change in labels then null should be sent as part of request\", resourceTracker.labels);\r\n    dummyLabelsProviderRef.setDescriptors(null);\r\n    sendOutofBandHeartBeat();\r\n    resourceTracker.waitTillHeartbeat();\r\n    assertNotNull(\"If provider sends null then empty label set should be sent and not null\", resourceTracker.labels);\r\n    assertTrue(\"If provider sends null then empty labels should be sent\", resourceTracker.labels.isEmpty());\r\n    resourceTracker.resetNMHeartbeatReceiveFlag();\r\n    int nullLabels = 0;\r\n    int nonNullLabels = 0;\r\n    dummyLabelsProviderRef.setDescriptors(toNodeLabelSet(\"P1\"));\r\n    for (int i = 0; i < 5; i++) {\r\n        sendOutofBandHeartBeat();\r\n        resourceTracker.waitTillHeartbeat();\r\n        if (null == resourceTracker.labels) {\r\n            nullLabels++;\r\n        } else {\r\n            Assert.assertEquals(\"In heartbeat PI labels should be send\", toNodeLabelSet(\"P1\"), resourceTracker.labels);\r\n            nonNullLabels++;\r\n        }\r\n        resourceTracker.resetNMHeartbeatReceiveFlag();\r\n        Thread.sleep(1000);\r\n    }\r\n    Assert.assertTrue(\"More than one heartbeat with empty labels expected\", nullLabels > 1);\r\n    Assert.assertTrue(\"More than one heartbeat with labels expected\", nonNullLabels > 1);\r\n    nm.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testInvalidNodeLabelsFromProvider",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testInvalidNodeLabelsFromProvider() throws InterruptedException, IOException\n{\r\n    final ResourceTrackerForLabels resourceTracker = new ResourceTrackerForLabels();\r\n    nm = new NodeManager() {\r\n\r\n        @Override\r\n        protected NodeLabelsProvider createNodeLabelsProvider(Configuration conf) throws IOException {\r\n            return dummyLabelsProviderRef;\r\n        }\r\n\r\n        @Override\r\n        protected NodeStatusUpdater createNodeStatusUpdater(Context context, Dispatcher dispatcher, NodeHealthCheckerService healthChecker) {\r\n            return new NodeStatusUpdaterImpl(context, dispatcher, healthChecker, metrics) {\r\n\r\n                @Override\r\n                protected ResourceTracker getRMClient() {\r\n                    return resourceTracker;\r\n                }\r\n\r\n                @Override\r\n                protected void stopRMProxy() {\r\n                    return;\r\n                }\r\n            };\r\n        }\r\n    };\r\n    YarnConfiguration conf = createNMConfigForDistributeNodeLabels();\r\n    conf.set(YarnConfiguration.NM_LOCALIZER_ADDRESS, \"0.0.0.0:\" + ServerSocketUtil.getPort(8040, 10));\r\n    nm.init(conf);\r\n    resourceTracker.resetNMHeartbeatReceiveFlag();\r\n    nm.start();\r\n    dummyLabelsProviderRef.setDescriptors(toNodeLabelSet(\"P\"));\r\n    resourceTracker.waitTillHeartbeat();\r\n    resourceTracker.resetNMHeartbeatReceiveFlag();\r\n    dummyLabelsProviderRef.setDescriptors(toNodeLabelSet(\"_.P\"));\r\n    sendOutofBandHeartBeat();\r\n    resourceTracker.waitTillHeartbeat();\r\n    assertNull(\"On Invalid Labels we need to retain earlier labels, HB \" + \"needs to send null\", resourceTracker.labels);\r\n    resourceTracker.resetNMHeartbeatReceiveFlag();\r\n    sendOutofBandHeartBeat();\r\n    resourceTracker.waitTillHeartbeat();\r\n    assertNull(\"NodeStatusUpdater need not send repeatedly empty labels on \" + \"invalid labels from provider \", resourceTracker.labels);\r\n    resourceTracker.resetNMHeartbeatReceiveFlag();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "sendOutofBandHeartBeat",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void sendOutofBandHeartBeat() throws InterruptedException, IOException\n{\r\n    int i = 0;\r\n    do {\r\n        State statusUpdaterThreadState = ((NodeStatusUpdaterImpl) nm.getNodeStatusUpdater()).getStatusUpdaterThreadState();\r\n        if (statusUpdaterThreadState.equals(Thread.State.TIMED_WAITING) || statusUpdaterThreadState.equals(Thread.State.WAITING)) {\r\n            nm.getNodeStatusUpdater().sendOutofBandHeartBeat();\r\n            break;\r\n        }\r\n        if (++i <= 10) {\r\n            Thread.sleep(50);\r\n        } else {\r\n            throw new IOException(\"Waited for 500 ms but NodeStatusUpdaterThread not in waiting state\");\r\n        }\r\n    } while (true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void init(AMRMProxyApplicationContext appContext)\n{\r\n    super.init(appContext);\r\n    mockRM = new MockResourceManagerFacade(new YarnConfiguration(super.getConf()), 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "registerApplicationMaster",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RegisterApplicationMasterResponse registerApplicationMaster(RegisterApplicationMasterRequest request) throws YarnException, IOException\n{\r\n    return mockRM.registerApplicationMaster(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "finishApplicationMaster",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FinishApplicationMasterResponse finishApplicationMaster(FinishApplicationMasterRequest request) throws YarnException, IOException\n{\r\n    return mockRM.finishApplicationMaster(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "allocate",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AllocateResponse allocate(AllocateRequest request) throws YarnException, IOException\n{\r\n    return mockRM.allocate(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getMockContainer",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "ContainerId getMockContainer(long id)\n{\r\n    ApplicationId appId = mock(ApplicationId.class);\r\n    when(appId.getClusterTimestamp()).thenReturn(314159265L);\r\n    when(appId.getId()).thenReturn(3);\r\n    ApplicationAttemptId appAttemptId = mock(ApplicationAttemptId.class);\r\n    when(appAttemptId.getApplicationId()).thenReturn(appId);\r\n    when(appAttemptId.getAttemptId()).thenReturn(0);\r\n    ContainerId container = mock(ContainerId.class);\r\n    when(container.getContainerId()).thenReturn(id);\r\n    when(container.getApplicationAttemptId()).thenReturn(appAttemptId);\r\n    return container;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testNotification",
  "errType" : null,
  "containingMethodsNum" : 42,
  "sourceCodeText" : "void testNotification() throws Exception\n{\r\n    DrainDispatcher dispatcher = new DrainDispatcher();\r\n    dispatcher.init(new Configuration());\r\n    try {\r\n        dispatcher.start();\r\n        EventHandler<ContainerEvent> containerBus = mock(EventHandler.class);\r\n        EventHandler<LocalizerEvent> localizerBus = mock(EventHandler.class);\r\n        dispatcher.register(ContainerEventType.class, containerBus);\r\n        dispatcher.register(LocalizerEventType.class, localizerBus);\r\n        LocalResource apiRsrc = createMockResource();\r\n        final ContainerId container0 = getMockContainer(0L);\r\n        final Credentials creds0 = new Credentials();\r\n        final LocalResourceVisibility vis0 = LocalResourceVisibility.PRIVATE;\r\n        final LocalizerContext ctxt0 = new LocalizerContext(\"yak\", container0, creds0);\r\n        LocalResourceRequest rsrcA = new LocalResourceRequest(apiRsrc);\r\n        LocalizedResource local = new LocalizedResource(rsrcA, dispatcher);\r\n        local.handle(new ResourceRequestEvent(rsrcA, vis0, ctxt0));\r\n        dispatcher.await();\r\n        LocalizerEventMatcher matchesL0Req = new LocalizerEventMatcher(container0, creds0, vis0, LocalizerEventType.REQUEST_RESOURCE_LOCALIZATION);\r\n        verify(localizerBus).handle(argThat(matchesL0Req));\r\n        assertEquals(ResourceState.DOWNLOADING, local.getState());\r\n        final Credentials creds1 = new Credentials();\r\n        final ContainerId container1 = getMockContainer(1L);\r\n        final LocalizerContext ctxt1 = new LocalizerContext(\"yak\", container1, creds1);\r\n        final LocalResourceVisibility vis1 = LocalResourceVisibility.PUBLIC;\r\n        local.handle(new ResourceRequestEvent(rsrcA, vis1, ctxt1));\r\n        dispatcher.await();\r\n        LocalizerEventMatcher matchesL1Req = new LocalizerEventMatcher(container1, creds1, vis1, LocalizerEventType.REQUEST_RESOURCE_LOCALIZATION);\r\n        verify(localizerBus).handle(argThat(matchesL1Req));\r\n        local.handle(new ResourceReleaseEvent(rsrcA, container0));\r\n        dispatcher.await();\r\n        verify(containerBus, never()).handle(isA(ContainerEvent.class));\r\n        assertEquals(ResourceState.DOWNLOADING, local.getState());\r\n        local.handle(new ResourceReleaseEvent(rsrcA, container1));\r\n        dispatcher.await();\r\n        verify(containerBus, never()).handle(isA(ContainerEvent.class));\r\n        assertEquals(ResourceState.DOWNLOADING, local.getState());\r\n        final ContainerId container2 = getMockContainer(2L);\r\n        final LocalResourceVisibility vis2 = LocalResourceVisibility.PRIVATE;\r\n        final Credentials creds2 = new Credentials();\r\n        final LocalizerContext ctxt2 = new LocalizerContext(\"yak\", container2, creds2);\r\n        final ContainerId container3 = getMockContainer(3L);\r\n        final LocalResourceVisibility vis3 = LocalResourceVisibility.PRIVATE;\r\n        final Credentials creds3 = new Credentials();\r\n        final LocalizerContext ctxt3 = new LocalizerContext(\"yak\", container3, creds3);\r\n        local.handle(new ResourceRequestEvent(rsrcA, vis2, ctxt2));\r\n        local.handle(new ResourceRequestEvent(rsrcA, vis3, ctxt3));\r\n        dispatcher.await();\r\n        LocalizerEventMatcher matchesL2Req = new LocalizerEventMatcher(container2, creds2, vis2, LocalizerEventType.REQUEST_RESOURCE_LOCALIZATION);\r\n        verify(localizerBus).handle(argThat(matchesL2Req));\r\n        LocalizerEventMatcher matchesL3Req = new LocalizerEventMatcher(container3, creds3, vis3, LocalizerEventType.REQUEST_RESOURCE_LOCALIZATION);\r\n        verify(localizerBus).handle(argThat(matchesL3Req));\r\n        Path locA = new Path(\"file:///cache/rsrcA\");\r\n        local.handle(new ResourceLocalizedEvent(rsrcA, locA, 10));\r\n        dispatcher.await();\r\n        ContainerEventMatcher matchesC2Localized = new ContainerEventMatcher(container2, ContainerEventType.RESOURCE_LOCALIZED);\r\n        ContainerEventMatcher matchesC3Localized = new ContainerEventMatcher(container3, ContainerEventType.RESOURCE_LOCALIZED);\r\n        verify(containerBus).handle(argThat(matchesC2Localized));\r\n        verify(containerBus).handle(argThat(matchesC3Localized));\r\n        assertEquals(ResourceState.LOCALIZED, local.getState());\r\n        final ContainerId container4 = getMockContainer(4L);\r\n        final Credentials creds4 = new Credentials();\r\n        final LocalizerContext ctxt4 = new LocalizerContext(\"yak\", container4, creds4);\r\n        final LocalResourceVisibility vis4 = LocalResourceVisibility.PRIVATE;\r\n        local.handle(new ResourceRequestEvent(rsrcA, vis4, ctxt4));\r\n        dispatcher.await();\r\n        ContainerEventMatcher matchesC4Localized = new ContainerEventMatcher(container4, ContainerEventType.RESOURCE_LOCALIZED);\r\n        verify(containerBus).handle(argThat(matchesC4Localized));\r\n        assertEquals(ResourceState.LOCALIZED, local.getState());\r\n    } finally {\r\n        dispatcher.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "createMockResource",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "LocalResource createMockResource()\n{\r\n    org.apache.hadoop.yarn.api.records.URL uriA = mock(org.apache.hadoop.yarn.api.records.URL.class);\r\n    when(uriA.getScheme()).thenReturn(\"file\");\r\n    when(uriA.getHost()).thenReturn(null);\r\n    when(uriA.getFile()).thenReturn(\"/localA/rsrc\");\r\n    LocalResource apiRsrc = mock(LocalResource.class);\r\n    when(apiRsrc.getResource()).thenReturn(uriA);\r\n    when(apiRsrc.getTimestamp()).thenReturn(4344L);\r\n    when(apiRsrc.getType()).thenReturn(LocalResourceType.FILE);\r\n    return apiRsrc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "getTestParentFolder",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getTestParentFolder()\n{\r\n    File f = new File(\"target/temp/\" + TestGpuDiscoverer.class.getName());\r\n    return f.getAbsolutePath();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "touchFile",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void touchFile(File f) throws IOException\n{\r\n    new FileOutputStream(f).close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "setupFakeBinary",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "File setupFakeBinary(Configuration conf)\n{\r\n    return setupFakeBinary(conf, GpuDiscoverer.DEFAULT_BINARY_NAME, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "setupFakeBinary",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "File setupFakeBinary(Configuration conf, String filename, boolean useFullPath)\n{\r\n    File fakeBinary;\r\n    try {\r\n        fakeBinary = new File(getTestParentFolder(), filename);\r\n        touchFile(fakeBinary);\r\n        if (useFullPath) {\r\n            conf.set(YarnConfiguration.NM_GPU_PATH_TO_EXEC, fakeBinary.getAbsolutePath());\r\n        } else {\r\n            conf.set(YarnConfiguration.NM_GPU_PATH_TO_EXEC, getTestParentFolder());\r\n        }\r\n    } catch (Exception e) {\r\n        throw new RuntimeException(\"Failed to init fake binary\", e);\r\n    }\r\n    return fakeBinary;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "before",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void before() throws IOException\n{\r\n    assumeNotWindows();\r\n    File f = new File(TEST_PARENT_DIR);\r\n    FileUtils.deleteDirectory(f);\r\n    f.mkdirs();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "createConfigWithAllowedDevices",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Configuration createConfigWithAllowedDevices(String s)\n{\r\n    Configuration conf = new Configuration(false);\r\n    conf.set(NM_GPU_ALLOWED_DEVICES, s);\r\n    setupFakeBinary(conf);\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "createNvidiaSmiScript",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void createNvidiaSmiScript(File file)\n{\r\n    writeToFile(file, BASH_SHEBANG + \"echo '<nvidia_smi_log></nvidia_smi_log>'\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "createFaultyNvidiaSmiScript",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void createFaultyNvidiaSmiScript(File file)\n{\r\n    writeToFile(file, BASH_SHEBANG + \"echo <<'\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "createNvidiaSmiScriptWithInvalidXml",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void createNvidiaSmiScriptWithInvalidXml(File file)\n{\r\n    writeToFile(file, BASH_SHEBANG + \"echo '<nvidia_smi_log></bla>'\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "writeToFile",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void writeToFile(File file, String contents)\n{\r\n    try {\r\n        PrintWriter fileWriter = new PrintWriter(file);\r\n        fileWriter.write(contents);\r\n        fileWriter.close();\r\n    } catch (Exception e) {\r\n        throw new RuntimeException(\"Error while writing nvidia-smi script file!\", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "assertNvidiaIsOnPath",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void assertNvidiaIsOnPath(GpuDiscoverer discoverer)\n{\r\n    String path = discoverer.getEnvironmentToRunCommand().get(PATH);\r\n    assertNotNull(path);\r\n    assertTrue(path.contains(NVIDIA));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "createFakeNvidiaSmiScriptAsRunnableFile",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "File createFakeNvidiaSmiScriptAsRunnableFile(Consumer<File> scriptFileCreator) throws IOException\n{\r\n    File fakeBinary = new File(TEST_PARENT_DIR, DEFAULT_BINARY_NAME);\r\n    touchFile(fakeBinary);\r\n    scriptFileCreator.accept(fakeBinary);\r\n    Shell.execCommand(Shell.getSetPermissionCommand(EXEC_PERMISSION, false, fakeBinary.getAbsolutePath()));\r\n    return fakeBinary;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "creatediscovererWithGpuPathDefined",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GpuDiscoverer creatediscovererWithGpuPathDefined(Configuration conf) throws YarnException\n{\r\n    conf.set(YarnConfiguration.NM_GPU_PATH_TO_EXEC, TEST_PARENT_DIR);\r\n    GpuDiscoverer discoverer = new GpuDiscoverer();\r\n    discoverer.initialize(conf, binaryHelper);\r\n    return discoverer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "testLinuxGpuResourceDiscoverPluginConfig",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testLinuxGpuResourceDiscoverPluginConfig() throws Exception\n{\r\n    Assume.assumeTrue(Boolean.valueOf(System.getProperty(\"RunLinuxGpuResourceDiscoverPluginConfigTest\")));\r\n    Configuration conf = new Configuration(false);\r\n    GpuDiscoverer discoverer = new GpuDiscoverer();\r\n    discoverer.initialize(conf, binaryHelper);\r\n    assertEquals(DEFAULT_BINARY_NAME, discoverer.getPathOfGpuBinary());\r\n    assertNvidiaIsOnPath(discoverer);\r\n    File fakeBinary = setupFakeBinary(conf);\r\n    discoverer = new GpuDiscoverer();\r\n    discoverer.initialize(conf, binaryHelper);\r\n    assertEquals(fakeBinary.getAbsolutePath(), discoverer.getPathOfGpuBinary());\r\n    assertNull(discoverer.getEnvironmentToRunCommand().get(PATH));\r\n    fakeBinary.delete();\r\n    discoverer = new GpuDiscoverer();\r\n    discoverer.initialize(conf, binaryHelper);\r\n    assertEquals(DEFAULT_BINARY_NAME, discoverer.getPathOfGpuBinary());\r\n    assertNvidiaIsOnPath(discoverer);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "testGetGpuDeviceInformationValidNvidiaSmiScript",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testGetGpuDeviceInformationValidNvidiaSmiScript() throws YarnException, IOException\n{\r\n    Configuration conf = new Configuration(false);\r\n    File fakeBinary = createFakeNvidiaSmiScriptAsRunnableFile(this::createNvidiaSmiScript);\r\n    GpuDiscoverer discoverer = creatediscovererWithGpuPathDefined(conf);\r\n    assertEquals(fakeBinary.getAbsolutePath(), discoverer.getPathOfGpuBinary());\r\n    assertNull(discoverer.getEnvironmentToRunCommand().get(PATH));\r\n    GpuDeviceInformation result = discoverer.getGpuDeviceInformation();\r\n    assertNotNull(result);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "testGetGpuDeviceInformationFakeNvidiaSmiScriptConsecutiveRun",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testGetGpuDeviceInformationFakeNvidiaSmiScriptConsecutiveRun() throws YarnException, IOException\n{\r\n    Configuration conf = new Configuration(false);\r\n    File fakeBinary = createFakeNvidiaSmiScriptAsRunnableFile(this::createNvidiaSmiScript);\r\n    GpuDiscoverer discoverer = creatediscovererWithGpuPathDefined(conf);\r\n    assertEquals(fakeBinary.getAbsolutePath(), discoverer.getPathOfGpuBinary());\r\n    assertNull(discoverer.getEnvironmentToRunCommand().get(PATH));\r\n    for (int i = 0; i < 5; i++) {\r\n        GpuDeviceInformation result = discoverer.getGpuDeviceInformation();\r\n        assertNotNull(result);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "testGetGpuDeviceInformationFaultyNvidiaSmiScript",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testGetGpuDeviceInformationFaultyNvidiaSmiScript() throws YarnException, IOException\n{\r\n    Configuration conf = new Configuration(false);\r\n    File fakeBinary = createFakeNvidiaSmiScriptAsRunnableFile(this::createFaultyNvidiaSmiScript);\r\n    GpuDiscoverer discoverer = creatediscovererWithGpuPathDefined(conf);\r\n    assertEquals(fakeBinary.getAbsolutePath(), discoverer.getPathOfGpuBinary());\r\n    assertNull(discoverer.getEnvironmentToRunCommand().get(PATH));\r\n    exception.expect(YarnException.class);\r\n    exception.expectMessage(\"Failed to execute GPU device detection script\");\r\n    discoverer.getGpuDeviceInformation();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "testGetGpuDeviceInformationFaultyNvidiaSmiScriptConsecutiveRun",
  "errType" : [ "YarnException", "YarnException" ],
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testGetGpuDeviceInformationFaultyNvidiaSmiScriptConsecutiveRun() throws YarnException, IOException\n{\r\n    Configuration conf = new Configuration(false);\r\n    File fakeBinary = createFakeNvidiaSmiScriptAsRunnableFile(this::createNvidiaSmiScript);\r\n    GpuDiscoverer discoverer = creatediscovererWithGpuPathDefined(conf);\r\n    assertEquals(fakeBinary.getAbsolutePath(), discoverer.getPathOfGpuBinary());\r\n    assertNull(discoverer.getEnvironmentToRunCommand().get(PATH));\r\n    LOG.debug(\"Querying nvidia-smi correctly, once...\");\r\n    discoverer.getGpuDeviceInformation();\r\n    LOG.debug(\"Replacing script with faulty version!\");\r\n    createFaultyNvidiaSmiScript(fakeBinary);\r\n    final String terminateMsg = \"Failed to execute GPU device \" + \"detection script (\" + fakeBinary.getAbsolutePath() + \") for 10 times\";\r\n    final String msg = \"Failed to execute GPU device detection script\";\r\n    for (int i = 0; i < 10; i++) {\r\n        try {\r\n            LOG.debug(\"Executing faulty nvidia-smi script...\");\r\n            discoverer.getGpuDeviceInformation();\r\n            fail(\"Query of GPU device info via nvidia-smi should fail as \" + \"script should be faulty: \" + fakeBinary);\r\n        } catch (YarnException e) {\r\n            assertThat(e.getMessage(), containsString(msg));\r\n            assertThat(e.getMessage(), not(containsString(terminateMsg)));\r\n        }\r\n    }\r\n    try {\r\n        LOG.debug(\"Executing faulty nvidia-smi script again...\" + \"We should reach the error threshold now!\");\r\n        discoverer.getGpuDeviceInformation();\r\n        fail(\"Query of GPU device info via nvidia-smi should fail as \" + \"script should be faulty: \" + fakeBinary);\r\n    } catch (YarnException e) {\r\n        assertThat(e.getMessage(), containsString(terminateMsg));\r\n    }\r\n    LOG.debug(\"Verifying if GPUs are still hold the value of \" + \"first successful query\");\r\n    assertNotNull(discoverer.getGpusUsableByYarn());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "testGetGpuDeviceInformationNvidiaSmiScriptWithInvalidXml",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testGetGpuDeviceInformationNvidiaSmiScriptWithInvalidXml() throws YarnException, IOException\n{\r\n    Configuration conf = new Configuration(false);\r\n    File fakeBinary = createFakeNvidiaSmiScriptAsRunnableFile(this::createNvidiaSmiScriptWithInvalidXml);\r\n    GpuDiscoverer discoverer = creatediscovererWithGpuPathDefined(conf);\r\n    assertEquals(fakeBinary.getAbsolutePath(), discoverer.getPathOfGpuBinary());\r\n    assertNull(discoverer.getEnvironmentToRunCommand().get(PATH));\r\n    exception.expect(YarnException.class);\r\n    exception.expectMessage(\"Failed to parse XML output of \" + \"GPU device detection script\");\r\n    discoverer.getGpuDeviceInformation();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "testGpuDiscover",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testGpuDiscover() throws YarnException\n{\r\n    Assume.assumeTrue(Boolean.valueOf(System.getProperty(\"runGpuDiscoverUnitTest\")));\r\n    Configuration conf = new Configuration(false);\r\n    GpuDiscoverer discoverer = new GpuDiscoverer();\r\n    discoverer.initialize(conf, binaryHelper);\r\n    GpuDeviceInformation info = discoverer.getGpuDeviceInformation();\r\n    assertTrue(info.getGpus().size() > 0);\r\n    assertEquals(discoverer.getGpusUsableByYarn().size(), info.getGpus().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "testGetNumberOfUsableGpusFromConfigSingleDevice",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testGetNumberOfUsableGpusFromConfigSingleDevice() throws YarnException\n{\r\n    Configuration conf = createConfigWithAllowedDevices(\"1:2\");\r\n    GpuDiscoverer discoverer = new GpuDiscoverer();\r\n    discoverer.initialize(conf, binaryHelper);\r\n    List<GpuDevice> usableGpuDevices = discoverer.getGpusUsableByYarn();\r\n    assertEquals(1, usableGpuDevices.size());\r\n    assertEquals(1, usableGpuDevices.get(0).getIndex());\r\n    assertEquals(2, usableGpuDevices.get(0).getMinorNumber());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "testGetNumberOfUsableGpusFromConfigIllegalFormat",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetNumberOfUsableGpusFromConfigIllegalFormat() throws YarnException\n{\r\n    Configuration conf = createConfigWithAllowedDevices(\"0:0,1:1,2:2,3\");\r\n    exception.expect(GpuDeviceSpecificationException.class);\r\n    GpuDiscoverer discoverer = new GpuDiscoverer();\r\n    discoverer.initialize(conf, binaryHelper);\r\n    discoverer.getGpusUsableByYarn();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "testGetNumberOfUsableGpusFromConfig",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testGetNumberOfUsableGpusFromConfig() throws YarnException\n{\r\n    Configuration conf = createConfigWithAllowedDevices(\"0:0,1:1,2:2,3:4\");\r\n    GpuDiscoverer discoverer = new GpuDiscoverer();\r\n    discoverer.initialize(conf, binaryHelper);\r\n    List<GpuDevice> usableGpuDevices = discoverer.getGpusUsableByYarn();\r\n    assertEquals(4, usableGpuDevices.size());\r\n    assertEquals(0, usableGpuDevices.get(0).getIndex());\r\n    assertEquals(0, usableGpuDevices.get(0).getMinorNumber());\r\n    assertEquals(1, usableGpuDevices.get(1).getIndex());\r\n    assertEquals(1, usableGpuDevices.get(1).getMinorNumber());\r\n    assertEquals(2, usableGpuDevices.get(2).getIndex());\r\n    assertEquals(2, usableGpuDevices.get(2).getMinorNumber());\r\n    assertEquals(3, usableGpuDevices.get(3).getIndex());\r\n    assertEquals(4, usableGpuDevices.get(3).getMinorNumber());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "testGetNumberOfUsableGpusFromConfigDuplicateValues",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetNumberOfUsableGpusFromConfigDuplicateValues() throws YarnException\n{\r\n    Configuration conf = createConfigWithAllowedDevices(\"0:0,1:1,2:2,1:1\");\r\n    exception.expect(GpuDeviceSpecificationException.class);\r\n    GpuDiscoverer discoverer = new GpuDiscoverer();\r\n    discoverer.initialize(conf, binaryHelper);\r\n    discoverer.getGpusUsableByYarn();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "testGetNumberOfUsableGpusFromConfigDuplicateValues2",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetNumberOfUsableGpusFromConfigDuplicateValues2() throws YarnException\n{\r\n    Configuration conf = createConfigWithAllowedDevices(\"0:0,1:1,2:2,1:1,2:2\");\r\n    exception.expect(GpuDeviceSpecificationException.class);\r\n    GpuDiscoverer discoverer = new GpuDiscoverer();\r\n    discoverer.initialize(conf, binaryHelper);\r\n    discoverer.getGpusUsableByYarn();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "testGetNumberOfUsableGpusFromConfigIncludingSpaces",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetNumberOfUsableGpusFromConfigIncludingSpaces() throws YarnException\n{\r\n    Configuration conf = createConfigWithAllowedDevices(\"0 : 0,1 : 1\");\r\n    exception.expect(GpuDeviceSpecificationException.class);\r\n    GpuDiscoverer discoverer = new GpuDiscoverer();\r\n    discoverer.initialize(conf, binaryHelper);\r\n    discoverer.getGpusUsableByYarn();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "testGetNumberOfUsableGpusFromConfigIncludingGibberish",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetNumberOfUsableGpusFromConfigIncludingGibberish() throws YarnException\n{\r\n    Configuration conf = createConfigWithAllowedDevices(\"0:@$1,1:1\");\r\n    exception.expect(GpuDeviceSpecificationException.class);\r\n    GpuDiscoverer discoverer = new GpuDiscoverer();\r\n    discoverer.initialize(conf, binaryHelper);\r\n    discoverer.getGpusUsableByYarn();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "testGetNumberOfUsableGpusFromConfigIncludingLetters",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetNumberOfUsableGpusFromConfigIncludingLetters() throws YarnException\n{\r\n    Configuration conf = createConfigWithAllowedDevices(\"x:0, 1:y\");\r\n    exception.expect(GpuDeviceSpecificationException.class);\r\n    GpuDiscoverer discoverer = new GpuDiscoverer();\r\n    discoverer.initialize(conf, binaryHelper);\r\n    discoverer.getGpusUsableByYarn();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "testGetNumberOfUsableGpusFromConfigWithoutIndexNumber",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetNumberOfUsableGpusFromConfigWithoutIndexNumber() throws YarnException\n{\r\n    Configuration conf = createConfigWithAllowedDevices(\":0, :1\");\r\n    exception.expect(GpuDeviceSpecificationException.class);\r\n    GpuDiscoverer discoverer = new GpuDiscoverer();\r\n    discoverer.initialize(conf, binaryHelper);\r\n    discoverer.getGpusUsableByYarn();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "testGetNumberOfUsableGpusFromConfigEmptyString",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetNumberOfUsableGpusFromConfigEmptyString() throws YarnException\n{\r\n    Configuration conf = createConfigWithAllowedDevices(\"\");\r\n    exception.expect(GpuDeviceSpecificationException.class);\r\n    GpuDiscoverer discoverer = new GpuDiscoverer();\r\n    discoverer.initialize(conf, binaryHelper);\r\n    discoverer.getGpusUsableByYarn();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "testGetNumberOfUsableGpusFromConfigValueWithoutComma",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetNumberOfUsableGpusFromConfigValueWithoutComma() throws YarnException\n{\r\n    Configuration conf = createConfigWithAllowedDevices(\"0:0 0:1\");\r\n    exception.expect(GpuDeviceSpecificationException.class);\r\n    GpuDiscoverer discoverer = new GpuDiscoverer();\r\n    discoverer.initialize(conf, binaryHelper);\r\n    discoverer.getGpusUsableByYarn();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "testGetNumberOfUsableGpusFromConfigValueWithoutComma2",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetNumberOfUsableGpusFromConfigValueWithoutComma2() throws YarnException\n{\r\n    Configuration conf = createConfigWithAllowedDevices(\"0.1 0.2\");\r\n    exception.expect(GpuDeviceSpecificationException.class);\r\n    GpuDiscoverer discoverer = new GpuDiscoverer();\r\n    discoverer.initialize(conf, binaryHelper);\r\n    discoverer.getGpusUsableByYarn();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "testGetNumberOfUsableGpusFromConfigValueWithoutColonSeparator",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetNumberOfUsableGpusFromConfigValueWithoutColonSeparator() throws YarnException\n{\r\n    Configuration conf = createConfigWithAllowedDevices(\"0.1,0.2\");\r\n    exception.expect(GpuDeviceSpecificationException.class);\r\n    GpuDiscoverer discoverer = new GpuDiscoverer();\r\n    discoverer.initialize(conf, binaryHelper);\r\n    discoverer.getGpusUsableByYarn();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "testGpuBinaryIsANotExistingFile",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testGpuBinaryIsANotExistingFile()\n{\r\n    Configuration conf = new Configuration(false);\r\n    conf.set(YarnConfiguration.NM_GPU_PATH_TO_EXEC, \"/blabla\");\r\n    GpuDiscoverer plugin = new GpuDiscoverer();\r\n    try {\r\n        plugin.initialize(conf, binaryHelper);\r\n        plugin.getGpusUsableByYarn();\r\n        fail(\"Illegal format, should fail.\");\r\n    } catch (YarnException e) {\r\n        String message = e.getMessage();\r\n        assertTrue(message.startsWith(\"Failed to find GPU discovery \" + \"executable, please double check\"));\r\n        assertTrue(message.contains(\"Also tried to find the \" + \"executable in the default directories:\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "testScriptNotCalled",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testScriptNotCalled() throws YarnException, IOException\n{\r\n    Configuration conf = new Configuration();\r\n    conf.set(YarnConfiguration.NM_GPU_ALLOWED_DEVICES, \"0:1,2:3\");\r\n    GpuDiscoverer gpuSpy = spy(GpuDiscoverer.class);\r\n    gpuSpy.initialize(conf, binaryHelper);\r\n    gpuSpy.getGpusUsableByYarn();\r\n    verify(gpuSpy, never()).getGpuDeviceInformation();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "testBinaryIsNotNvidiaSmi",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testBinaryIsNotNvidiaSmi() throws YarnException\n{\r\n    exception.expect(YarnException.class);\r\n    exception.expectMessage(String.format(\"It should point to an %s binary, which is now %s\", \"nvidia-smi\", \"badfile\"));\r\n    Configuration conf = new Configuration(false);\r\n    setupFakeBinary(conf, \"badfile\", true);\r\n    GpuDiscoverer plugin = new GpuDiscoverer();\r\n    plugin.initialize(conf, binaryHelper);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testPbRecordFactory",
  "errType" : [ "YarnRuntimeException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testPbRecordFactory()\n{\r\n    RecordFactory pbRecordFactory = RecordFactoryPBImpl.get();\r\n    try {\r\n        LocalizerHeartbeatResponse response = pbRecordFactory.newRecordInstance(LocalizerHeartbeatResponse.class);\r\n        Assert.assertEquals(LocalizerHeartbeatResponsePBImpl.class, response.getClass());\r\n    } catch (YarnRuntimeException e) {\r\n        e.printStackTrace();\r\n        Assert.fail(\"Failed to crete record\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\sharedcache",
  "methodName" : "testInitDisabled",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testInitDisabled()\n{\r\n    testInit(false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\sharedcache",
  "methodName" : "testInitEnabled",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testInitEnabled()\n{\r\n    testInit(true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\sharedcache",
  "methodName" : "testInit",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testInit(boolean enabled)\n{\r\n    Configuration conf = new Configuration();\r\n    conf.setBoolean(YarnConfiguration.SHARED_CACHE_ENABLED, enabled);\r\n    SharedCacheUploadService service = new SharedCacheUploadService();\r\n    service.init(conf);\r\n    assertSame(enabled, service.isEnabled());\r\n    service.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "testContainerMetricsFlow",
  "errType" : null,
  "containingMethodsNum" : 23,
  "sourceCodeText" : "void testContainerMetricsFlow() throws InterruptedException\n{\r\n    final String ERR = \"Error in number of records\";\r\n    MetricsCollectorImpl collector = new MetricsCollectorImpl();\r\n    ContainerId containerId = mock(ContainerId.class);\r\n    ContainerMetrics metrics = ContainerMetrics.forContainer(containerId, 100, 1);\r\n    metrics.recordMemoryUsage(1024);\r\n    metrics.getMetrics(collector, true);\r\n    assertEquals(ERR, 0, collector.getRecords().size());\r\n    Thread.sleep(110);\r\n    metrics.getMetrics(collector, true);\r\n    assertEquals(ERR, 1, collector.getRecords().size());\r\n    collector.clear();\r\n    Thread.sleep(110);\r\n    metrics.getMetrics(collector, true);\r\n    assertEquals(ERR, 1, collector.getRecords().size());\r\n    collector.clear();\r\n    metrics.finished(false);\r\n    metrics.getMetrics(collector, true);\r\n    assertEquals(ERR, 1, collector.getRecords().size());\r\n    collector.clear();\r\n    metrics.getMetrics(collector, true);\r\n    assertEquals(ERR, 1, collector.getRecords().size());\r\n    collector.clear();\r\n    Thread.sleep(110);\r\n    metrics.getMetrics(collector, true);\r\n    assertEquals(ERR, 1, collector.getRecords().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "testContainerMetricsLimit",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testContainerMetricsLimit() throws InterruptedException\n{\r\n    final String ERR = \"Error in number of records\";\r\n    MetricsCollectorImpl collector = new MetricsCollectorImpl();\r\n    ContainerId containerId = mock(ContainerId.class);\r\n    ContainerMetrics metrics = ContainerMetrics.forContainer(containerId, 100, 1);\r\n    int anyPmemLimit = 1024;\r\n    int anyVmemLimit = 2048;\r\n    int anyVcores = 10;\r\n    long anyLaunchDuration = 20L;\r\n    long anyLocalizationDuration = 1000L;\r\n    String anyProcessId = \"1234\";\r\n    metrics.recordResourceLimit(anyVmemLimit, anyPmemLimit, anyVcores);\r\n    metrics.recordProcessId(anyProcessId);\r\n    metrics.recordStateChangeDurations(anyLaunchDuration, anyLocalizationDuration);\r\n    Thread.sleep(110);\r\n    metrics.getMetrics(collector, true);\r\n    assertEquals(ERR, 1, collector.getRecords().size());\r\n    MetricsRecord record = collector.getRecords().get(0);\r\n    MetricsRecords.assertTag(record, ContainerMetrics.PROCESSID_INFO.name(), anyProcessId);\r\n    MetricsRecords.assertMetric(record, ContainerMetrics.PMEM_LIMIT_METRIC_NAME, anyPmemLimit);\r\n    MetricsRecords.assertMetric(record, ContainerMetrics.VMEM_LIMIT_METRIC_NAME, anyVmemLimit);\r\n    MetricsRecords.assertMetric(record, ContainerMetrics.VCORE_LIMIT_METRIC_NAME, anyVcores);\r\n    MetricsRecords.assertMetric(record, ContainerMetrics.LAUNCH_DURATION_METRIC_NAME, anyLaunchDuration);\r\n    MetricsRecords.assertMetric(record, ContainerMetrics.LOCALIZATION_DURATION_METRIC_NAME, anyLocalizationDuration);\r\n    collector.clear();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "testContainerMetricsFinished",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testContainerMetricsFinished() throws InterruptedException\n{\r\n    MetricsSystemImpl system = new MetricsSystemImpl();\r\n    system.init(\"test\");\r\n    ApplicationId appId = ApplicationId.newInstance(1234, 3);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 4);\r\n    ContainerId containerId1 = ContainerId.newContainerId(appAttemptId, 1);\r\n    ContainerMetrics metrics1 = ContainerMetrics.forContainer(system, containerId1, 1, 0);\r\n    ContainerId containerId2 = ContainerId.newContainerId(appAttemptId, 2);\r\n    ContainerMetrics metrics2 = ContainerMetrics.forContainer(system, containerId2, 1, 0);\r\n    ContainerId containerId3 = ContainerId.newContainerId(appAttemptId, 3);\r\n    ContainerMetrics metrics3 = ContainerMetrics.forContainer(system, containerId3, 1, 0);\r\n    metrics1.finished(false);\r\n    metrics2.finished(false);\r\n    system.sampleMetrics();\r\n    system.sampleMetrics();\r\n    Thread.sleep(100);\r\n    assertTrue(metrics1 != ContainerMetrics.forContainer(system, containerId1, 1, 0));\r\n    assertTrue(metrics2 != ContainerMetrics.forContainer(system, containerId2, 1, 0));\r\n    assertTrue(metrics3 == ContainerMetrics.forContainer(system, containerId3, 1, 0));\r\n    system.stop();\r\n    system.shutdown();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "testContainerMetricsHistogram",
  "errType" : null,
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void testContainerMetricsHistogram() throws Exception\n{\r\n    Map<String, Long> expectedValues = new HashMap<>();\r\n    expectedValues.put(\"PMemUsageMBHistogram50thPercentileMBs\", 1536L);\r\n    expectedValues.put(\"PMemUsageMBHistogram75thPercentileMBs\", 2048L);\r\n    expectedValues.put(\"PMemUsageMBHistogram90thPercentileMBs\", 2048L);\r\n    expectedValues.put(\"PMemUsageMBHistogram95thPercentileMBs\", 2048L);\r\n    expectedValues.put(\"PMemUsageMBHistogram99thPercentileMBs\", 2048L);\r\n    expectedValues.put(\"PCpuUsagePercentHistogram50thPercentilePercents\", 0L);\r\n    expectedValues.put(\"PCpuUsagePercentHistogram75thPercentilePercents\", 0L);\r\n    expectedValues.put(\"PCpuUsagePercentHistogram90thPercentilePercents\", 0L);\r\n    expectedValues.put(\"PCpuUsagePercentHistogram95thPercentilePercents\", 0L);\r\n    expectedValues.put(\"PCpuUsagePercentHistogram99thPercentilePercents\", 0L);\r\n    Set<String> testResults = new HashSet<>();\r\n    int delay = 10;\r\n    int rolloverDelay = 1000;\r\n    MetricsCollectorImpl collector = new MetricsCollectorImpl();\r\n    ContainerId containerId = mock(ContainerId.class);\r\n    ContainerMetrics metrics = ContainerMetrics.forContainer(containerId, delay, 0);\r\n    metrics.recordMemoryUsage(1024);\r\n    metrics.recordMemoryUsage(2048);\r\n    Thread.sleep(rolloverDelay + 10);\r\n    metrics.getMetrics(collector, true);\r\n    for (MetricsRecord record : collector.getRecords()) {\r\n        for (AbstractMetric metric : record.metrics()) {\r\n            String metricName = metric.name();\r\n            if (expectedValues.containsKey(metricName)) {\r\n                Long expectedValue = expectedValues.get(metricName);\r\n                Assert.assertEquals(\"Metric \" + metricName + \" doesn't have expected value\", expectedValue, metric.value());\r\n                testResults.add(metricName);\r\n            }\r\n        }\r\n    }\r\n    Assert.assertEquals(expectedValues.keySet(), testResults);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "testContainerMetricsUpdateContainerPid",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testContainerMetricsUpdateContainerPid()\n{\r\n    ContainerId containerId = mock(ContainerId.class);\r\n    ContainerMetrics metrics = ContainerMetrics.forContainer(containerId, 100, 1);\r\n    String origPid = \"1234\";\r\n    metrics.recordProcessId(origPid);\r\n    assertEquals(origPid, metrics.registry.getTag(ContainerMetrics.PROCESSID_INFO.name()).value());\r\n    String newPid = \"4321\";\r\n    metrics.recordProcessId(newPid);\r\n    assertEquals(newPid, metrics.registry.getTag(ContainerMetrics.PROCESSID_INFO.name()).value());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "buildMainArgs",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void buildMainArgs(List<String> command, String user, String appId, String locId, InetSocketAddress nmAddr, List<String> localDirs)\n{\r\n    command.add(MockContainerLocalizer.class.getName());\r\n    command.add(user);\r\n    command.add(appId);\r\n    command.add(locId);\r\n    command.add(nmAddr.getHostName());\r\n    command.add(Integer.toString(nmAddr.getPort()));\r\n    for (String dir : localDirs) {\r\n        command.add(dir);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "main",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void main(String[] argv) throws Throwable\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setup() throws IOException\n{\r\n    conf.setInt(YarnConfiguration.NM_VCORES, 1);\r\n    conf.setInt(YarnConfiguration.NM_OPPORTUNISTIC_CONTAINERS_MAX_QUEUE_LENGTH, 0);\r\n    super.setup();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "testForceStartGuaranteedContainersWhenOppContainerDisabled",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testForceStartGuaranteedContainersWhenOppContainerDisabled() throws Exception\n{\r\n    containerManager.start();\r\n    ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class);\r\n    containerLaunchContext.setCommands(Arrays.asList(\"echo\"));\r\n    List<StartContainerRequest> list = new ArrayList<>();\r\n    list.add(StartContainerRequest.newInstance(containerLaunchContext, createContainerToken(createContainerId(0), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(2048, 4), context.getContainerTokenSecretManager(), null, ExecutionType.GUARANTEED)));\r\n    StartContainersRequest allRequests = StartContainersRequest.newInstance(list);\r\n    containerManager.startContainers(allRequests);\r\n    ContainerScheduler cs = containerManager.getContainerScheduler();\r\n    int nQueuedContainers = cs.getNumQueuedContainers();\r\n    int nRunningContainers = cs.getNumRunningContainers();\r\n    int maxTry = 100;\r\n    int nTried = 1;\r\n    while (nQueuedContainers != 0 || nRunningContainers != 0) {\r\n        Thread.sleep(100);\r\n        nQueuedContainers = cs.getNumQueuedContainers();\r\n        nRunningContainers = cs.getNumRunningContainers();\r\n        nTried++;\r\n        if (nTried > maxTry) {\r\n            Assert.fail(\"Failed to get either number of queuing containers to 0 or \" + \"number of running containers to 0, #queued=\" + nQueuedContainers + \", #running=\" + nRunningContainers);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "initialize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void initialize(Configuration conf, Context nmContext)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "isRuntimeRequested",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isRuntimeRequested(Map<String, String> env)\n{\r\n    if (env == null) {\r\n        return false;\r\n    }\r\n    String type = env.get(ContainerRuntimeConstants.ENV_CONTAINER_TYPE);\r\n    return type != null && type.equals(\"mock\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "prepareContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void prepareContainer(ContainerRuntimeContext ctx)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "launchContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void launchContainer(ContainerRuntimeContext ctx)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "relaunchContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void relaunchContainer(ContainerRuntimeContext ctx)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "signalContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void signalContainer(ContainerRuntimeContext ctx)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "reapContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void reapContainer(ContainerRuntimeContext ctx)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getIpAndHost",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String[] getIpAndHost(Container container)\n{\r\n    return new String[0];\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getExposedPorts",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getExposedPorts(Container container)\n{\r\n    return \"\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "execContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "IOStreamPair execContainer(ContainerExecContext ctx) throws ContainerExecutionException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setup() throws IOException\n{\r\n    conf.setClass(YarnConfiguration.NM_MON_RESOURCE_CALCULATOR, LinuxResourceCalculatorPlugin.class, ResourceCalculatorPlugin.class);\r\n    super.setup();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testSpecialCharSymlinks",
  "errType" : null,
  "containingMethodsNum" : 27,
  "sourceCodeText" : "void testSpecialCharSymlinks() throws IOException\n{\r\n    File shellFile = null;\r\n    File tempFile = null;\r\n    String badSymlink = Shell.WINDOWS ? \"foo@zz_#!-+bar.cmd\" : \"-foo@zz%_#*&!-+= bar()\";\r\n    File symLinkFile = null;\r\n    try {\r\n        shellFile = Shell.appendScriptExtension(tmpDir, \"hello\");\r\n        tempFile = Shell.appendScriptExtension(tmpDir, \"temp\");\r\n        String timeoutCommand = Shell.WINDOWS ? \"@echo \\\"hello\\\"\" : \"echo \\\"hello\\\"\";\r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(shellFile));\r\n        FileUtil.setExecutable(shellFile, true);\r\n        writer.println(timeoutCommand);\r\n        writer.close();\r\n        Map<Path, List<String>> resources = new HashMap<Path, List<String>>();\r\n        Path path = new Path(shellFile.getAbsolutePath());\r\n        resources.put(path, Arrays.asList(badSymlink));\r\n        FileOutputStream fos = new FileOutputStream(tempFile);\r\n        Map<String, String> env = new HashMap<String, String>();\r\n        List<String> commands = new ArrayList<String>();\r\n        if (Shell.WINDOWS) {\r\n            commands.add(\"cmd\");\r\n            commands.add(\"/c\");\r\n            commands.add(\"\\\"\" + badSymlink + \"\\\"\");\r\n        } else {\r\n            commands.add(\"/bin/sh ./\\\\\\\"\" + badSymlink + \"\\\\\\\"\");\r\n        }\r\n        DefaultContainerExecutor defaultContainerExecutor = new DefaultContainerExecutor();\r\n        defaultContainerExecutor.setConf(new YarnConfiguration());\r\n        LinkedHashSet<String> nmVars = new LinkedHashSet<>();\r\n        defaultContainerExecutor.writeLaunchEnv(fos, env, resources, commands, new Path(localLogDir.getAbsolutePath()), \"user\", tempFile.getName(), nmVars);\r\n        fos.flush();\r\n        fos.close();\r\n        FileUtil.setExecutable(tempFile, true);\r\n        Shell.ShellCommandExecutor shexc = new Shell.ShellCommandExecutor(new String[] { tempFile.getAbsolutePath() }, tmpDir);\r\n        shexc.execute();\r\n        assertThat(shexc.getExitCode()).isEqualTo(0);\r\n        List<String> output = Files.readAllLines(Paths.get(localLogDir.getAbsolutePath(), ContainerLaunch.CONTAINER_PRE_LAUNCH_STDOUT), Charset.forName(\"UTF-8\"));\r\n        assert (output.contains(\"hello\"));\r\n        symLinkFile = new File(tmpDir, badSymlink);\r\n    } finally {\r\n        if (shellFile != null && shellFile.exists()) {\r\n            shellFile.delete();\r\n        }\r\n        if (tempFile != null && tempFile.exists()) {\r\n            tempFile.delete();\r\n        }\r\n        if (symLinkFile != null && symLinkFile.exists()) {\r\n            symLinkFile.delete();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testInvalidSymlinkDiagnostics",
  "errType" : [ "ExitCodeException" ],
  "containingMethodsNum" : 28,
  "sourceCodeText" : "void testInvalidSymlinkDiagnostics() throws IOException\n{\r\n    File shellFile = null;\r\n    File tempFile = null;\r\n    String symLink = Shell.WINDOWS ? \"test.cmd\" : \"test\";\r\n    File symLinkFile = null;\r\n    try {\r\n        shellFile = Shell.appendScriptExtension(tmpDir, \"hello\");\r\n        tempFile = Shell.appendScriptExtension(tmpDir, \"temp\");\r\n        String timeoutCommand = Shell.WINDOWS ? \"@echo \\\"hello\\\"\" : \"echo \\\"hello\\\"\";\r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(shellFile));\r\n        FileUtil.setExecutable(shellFile, true);\r\n        writer.println(timeoutCommand);\r\n        writer.close();\r\n        Map<Path, List<String>> resources = new HashMap<Path, List<String>>();\r\n        Path invalidPath = new Path(shellFile.getAbsolutePath() + \"randomPath\");\r\n        resources.put(invalidPath, Arrays.asList(symLink));\r\n        FileOutputStream fos = new FileOutputStream(tempFile);\r\n        Map<String, String> env = new HashMap<String, String>();\r\n        List<String> commands = new ArrayList<String>();\r\n        if (Shell.WINDOWS) {\r\n            commands.add(\"cmd\");\r\n            commands.add(\"/c\");\r\n            commands.add(\"\\\"\" + symLink + \"\\\"\");\r\n        } else {\r\n            commands.add(\"/bin/sh ./\\\\\\\"\" + symLink + \"\\\\\\\"\");\r\n        }\r\n        DefaultContainerExecutor defaultContainerExecutor = new DefaultContainerExecutor();\r\n        defaultContainerExecutor.setConf(new YarnConfiguration());\r\n        LinkedHashSet<String> nmVars = new LinkedHashSet<>();\r\n        defaultContainerExecutor.writeLaunchEnv(fos, env, resources, commands, new Path(localLogDir.getAbsolutePath()), \"user\", nmVars);\r\n        fos.flush();\r\n        fos.close();\r\n        FileUtil.setExecutable(tempFile, true);\r\n        Shell.ShellCommandExecutor shexc = new Shell.ShellCommandExecutor(new String[] { tempFile.getAbsolutePath() }, tmpDir);\r\n        String diagnostics = null;\r\n        try {\r\n            shexc.execute();\r\n            Assert.fail(\"Should catch exception\");\r\n        } catch (ExitCodeException e) {\r\n            diagnostics = e.getMessage();\r\n        }\r\n        Assert.assertNotNull(diagnostics);\r\n        Assert.assertTrue(shexc.getExitCode() != 0);\r\n        symLinkFile = new File(tmpDir, symLink);\r\n    } finally {\r\n        if (shellFile != null && shellFile.exists()) {\r\n            shellFile.delete();\r\n        }\r\n        if (tempFile != null && tempFile.exists()) {\r\n            tempFile.delete();\r\n        }\r\n        if (symLinkFile != null && symLinkFile.exists()) {\r\n            symLinkFile.delete();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testWriteEnvExport",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testWriteEnvExport() throws Exception\n{\r\n    assumeNotWindows();\r\n    File shellFile = Shell.appendScriptExtension(tmpDir, \"hello\");\r\n    Map<String, String> env = new HashMap<String, String>();\r\n    env.put(\"HADOOP_COMMON_HOME\", \"/opt/hadoopcommon\");\r\n    env.put(\"HADOOP_MAPRED_HOME\", \"/opt/hadoopbuild\");\r\n    Map<Path, List<String>> resources = new HashMap<Path, List<String>>();\r\n    FileOutputStream fos = new FileOutputStream(shellFile);\r\n    List<String> commands = new ArrayList<String>();\r\n    final Map<String, String> nmEnv = new HashMap<>();\r\n    nmEnv.put(\"HADOOP_COMMON_HOME\", \"nodemanager_common_home\");\r\n    nmEnv.put(\"HADOOP_HDFS_HOME\", \"nodemanager_hdfs_home\");\r\n    nmEnv.put(\"HADOOP_YARN_HOME\", \"nodemanager_yarn_home\");\r\n    nmEnv.put(\"HADOOP_MAPRED_HOME\", \"nodemanager_mapred_home\");\r\n    DefaultContainerExecutor defaultContainerExecutor = new DefaultContainerExecutor() {\r\n\r\n        @Override\r\n        protected String getNMEnvVar(String varname) {\r\n            return nmEnv.get(varname);\r\n        }\r\n    };\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.set(YarnConfiguration.NM_ENV_WHITELIST, \"HADOOP_MAPRED_HOME,HADOOP_YARN_HOME\");\r\n    defaultContainerExecutor.setConf(conf);\r\n    LinkedHashSet<String> nmVars = new LinkedHashSet<>();\r\n    defaultContainerExecutor.writeLaunchEnv(fos, env, resources, commands, new Path(localLogDir.getAbsolutePath()), \"user\", nmVars);\r\n    String shellContent = new String(Files.readAllBytes(Paths.get(shellFile.getAbsolutePath())), StandardCharsets.UTF_8);\r\n    Assert.assertTrue(shellContent.contains(\"export HADOOP_COMMON_HOME=\\\"/opt/hadoopcommon\\\"\"));\r\n    Assert.assertTrue(shellContent.contains(\"export HADOOP_MAPRED_HOME=\\\"/opt/hadoopbuild\\\"\"));\r\n    Assert.assertFalse(shellContent.contains(\"HADOOP_HDFS_HOME\"));\r\n    Assert.assertTrue(shellContent.contains(\"export HADOOP_YARN_HOME=${HADOOP_YARN_HOME:-\\\"nodemanager_yarn_home\\\"}\"));\r\n    fos.flush();\r\n    fos.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testWriteEnvExportDocker",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testWriteEnvExportDocker() throws Exception\n{\r\n    assumeNotWindows();\r\n    File shellFile = Shell.appendScriptExtension(tmpDir, \"hello\");\r\n    Map<String, String> env = new HashMap<String, String>();\r\n    env.put(\"HADOOP_COMMON_HOME\", \"/opt/hadoopcommon\");\r\n    env.put(\"HADOOP_MAPRED_HOME\", \"/opt/hadoopbuild\");\r\n    Map<Path, List<String>> resources = new HashMap<Path, List<String>>();\r\n    FileOutputStream fos = new FileOutputStream(shellFile);\r\n    List<String> commands = new ArrayList<String>();\r\n    final Map<String, String> nmEnv = new HashMap<>();\r\n    nmEnv.put(\"HADOOP_COMMON_HOME\", \"nodemanager_common_home\");\r\n    nmEnv.put(\"HADOOP_HDFS_HOME\", \"nodemanager_hdfs_home\");\r\n    nmEnv.put(\"HADOOP_YARN_HOME\", \"nodemanager_yarn_home\");\r\n    nmEnv.put(\"HADOOP_MAPRED_HOME\", \"nodemanager_mapred_home\");\r\n    DockerLinuxContainerRuntime dockerRuntime = new DockerLinuxContainerRuntime(mock(PrivilegedOperationExecutor.class));\r\n    LinuxContainerExecutor lce = new LinuxContainerExecutor(dockerRuntime) {\r\n\r\n        @Override\r\n        protected String getNMEnvVar(String varname) {\r\n            return nmEnv.get(varname);\r\n        }\r\n    };\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.set(YarnConfiguration.NM_ENV_WHITELIST, \"HADOOP_MAPRED_HOME,HADOOP_YARN_HOME\");\r\n    lce.setConf(conf);\r\n    LinkedHashSet<String> nmVars = new LinkedHashSet<>();\r\n    lce.writeLaunchEnv(fos, env, resources, commands, new Path(localLogDir.getAbsolutePath()), \"user\", nmVars);\r\n    String shellContent = new String(Files.readAllBytes(Paths.get(shellFile.getAbsolutePath())), StandardCharsets.UTF_8);\r\n    Assert.assertTrue(shellContent.contains(\"export HADOOP_COMMON_HOME=\\\"/opt/hadoopcommon\\\"\"));\r\n    Assert.assertTrue(shellContent.contains(\"export HADOOP_MAPRED_HOME=\\\"/opt/hadoopbuild\\\"\"));\r\n    Assert.assertFalse(shellContent.contains(\"HADOOP_HDFS_HOME\"));\r\n    Assert.assertTrue(shellContent.contains(\"export HADOOP_YARN_HOME=${HADOOP_YARN_HOME:-\\\"nodemanager_yarn_home\\\"}\"));\r\n    fos.flush();\r\n    fos.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testWriteEnvOrder",
  "errType" : null,
  "containingMethodsNum" : 34,
  "sourceCodeText" : "void testWriteEnvOrder() throws Exception\n{\r\n    assumeNotWindows();\r\n    List<String> commands = new ArrayList<String>();\r\n    Map<String, String> env = new HashMap<String, String>();\r\n    env.put(\"USER_VAR_1\", \"1\");\r\n    env.put(\"USER_VAR_2\", \"2\");\r\n    env.put(\"NM_MODIFIED_VAR_1\", \"nm 1\");\r\n    env.put(\"NM_MODIFIED_VAR_2\", \"nm 2\");\r\n    LinkedHashSet<String> trackedNmVars = new LinkedHashSet<>();\r\n    trackedNmVars.add(\"NM_MODIFIED_VAR_1\");\r\n    trackedNmVars.add(\"NM_MODIFIED_VAR_2\");\r\n    final Map<String, String> nmEnv = new HashMap<>();\r\n    nmEnv.put(\"WHITELIST_VAR_1\", \"wl 1\");\r\n    nmEnv.put(\"WHITELIST_VAR_2\", \"wl 2\");\r\n    nmEnv.put(\"NON_WHITELIST_VAR_1\", \"nwl 1\");\r\n    nmEnv.put(\"NON_WHITELIST_VAR_2\", \"nwl 2\");\r\n    DefaultContainerExecutor defaultContainerExecutor = new DefaultContainerExecutor() {\r\n\r\n        @Override\r\n        protected String getNMEnvVar(String varname) {\r\n            return nmEnv.get(varname);\r\n        }\r\n    };\r\n    ArrayList<String> whitelistVars = new ArrayList<>();\r\n    whitelistVars.add(\"WHITELIST_VAR_1\");\r\n    whitelistVars.add(\"WHITELIST_VAR_2\");\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.set(YarnConfiguration.NM_ENV_WHITELIST, whitelistVars.get(0) + \",\" + whitelistVars.get(1));\r\n    ArrayList<String> nonWhiteListEnv = new ArrayList<>();\r\n    nonWhiteListEnv.add(\"NON_WHITELIST_VAR_1\");\r\n    nonWhiteListEnv.add(\"NON_WHITELIST_VAR_2\");\r\n    File shellFile = Shell.appendScriptExtension(tmpDir, \"hello\");\r\n    Map<Path, List<String>> resources = new HashMap<Path, List<String>>();\r\n    FileOutputStream fos = new FileOutputStream(shellFile);\r\n    defaultContainerExecutor.setConf(conf);\r\n    defaultContainerExecutor.writeLaunchEnv(fos, env, resources, commands, new Path(localLogDir.getAbsolutePath()), \"user\", trackedNmVars);\r\n    fos.flush();\r\n    fos.close();\r\n    String shellContent = new String(Files.readAllBytes(Paths.get(shellFile.getAbsolutePath())), StandardCharsets.UTF_8);\r\n    for (String envVar : env.keySet()) {\r\n        Assert.assertTrue(shellContent.contains(envVar + \"=\"));\r\n    }\r\n    for (String wlVar : whitelistVars) {\r\n        Assert.assertFalse(env.containsKey(wlVar));\r\n        Assert.assertTrue(shellContent.contains(wlVar + \"=\"));\r\n    }\r\n    for (String nwlVar : nonWhiteListEnv) {\r\n        Assert.assertFalse(env.containsKey(nwlVar));\r\n        Assert.assertFalse(shellContent.contains(nwlVar + \"=\"));\r\n    }\r\n    for (String nmVar : trackedNmVars) {\r\n        for (String userVar : env.keySet()) {\r\n            if (!trackedNmVars.contains(userVar) && !whitelistVars.contains(userVar)) {\r\n                Assert.assertTrue(shellContent.indexOf(nmVar + \"=\") < shellContent.indexOf(userVar + \"=\"));\r\n            }\r\n        }\r\n    }\r\n    for (String wlVar : whitelistVars) {\r\n        for (String nmVar : trackedNmVars) {\r\n            Assert.assertTrue(shellContent.indexOf(wlVar + \"=\") < shellContent.indexOf(nmVar + \"=\"));\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testInvalidEnvSyntaxDiagnostics",
  "errType" : [ "ExitCodeException" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testInvalidEnvSyntaxDiagnostics() throws IOException\n{\r\n    File shellFile = null;\r\n    try {\r\n        shellFile = Shell.appendScriptExtension(tmpDir, \"hello\");\r\n        Map<Path, List<String>> resources = new HashMap<Path, List<String>>();\r\n        FileOutputStream fos = new FileOutputStream(shellFile);\r\n        FileUtil.setExecutable(shellFile, true);\r\n        Map<String, String> env = new HashMap<String, String>();\r\n        env.put(\"APPLICATION_WORKFLOW_CONTEXT\", \"{\\\"workflowId\\\":\\\"609f91c5cd83\\\",\" + \"\\\"workflowName\\\":\\\"\\n\\ninsert table \" + \"\\npartition (cd_education_status)\\nselect cd_demo_sk, cd_gender, \");\r\n        List<String> commands = new ArrayList<String>();\r\n        DefaultContainerExecutor defaultContainerExecutor = new DefaultContainerExecutor();\r\n        defaultContainerExecutor.setConf(new YarnConfiguration());\r\n        LinkedHashSet<String> nmVars = new LinkedHashSet<>();\r\n        defaultContainerExecutor.writeLaunchEnv(fos, env, resources, commands, new Path(localLogDir.getAbsolutePath()), \"user\", nmVars);\r\n        fos.flush();\r\n        fos.close();\r\n        Map<String, String> cmdEnv = new HashMap<String, String>();\r\n        cmdEnv.put(\"LANG\", \"C\");\r\n        Shell.ShellCommandExecutor shexc = new Shell.ShellCommandExecutor(new String[] { shellFile.getAbsolutePath() }, tmpDir, cmdEnv);\r\n        String diagnostics = null;\r\n        try {\r\n            shexc.execute();\r\n            Assert.fail(\"Should catch exception\");\r\n        } catch (ExitCodeException e) {\r\n            List<String> error = Files.readAllLines(Paths.get(localLogDir.getAbsolutePath(), ContainerLaunch.CONTAINER_PRE_LAUNCH_STDERR), Charset.forName(\"UTF-8\"));\r\n            diagnostics = StringUtils.join(\"\\n\", error);\r\n        }\r\n        Assert.assertTrue(diagnostics.contains(Shell.WINDOWS ? \"is not recognized as an internal or external command\" : \"command not found\"));\r\n        Assert.assertTrue(shexc.getExitCode() != 0);\r\n    } finally {\r\n        if (shellFile != null && shellFile.exists()) {\r\n            shellFile.delete();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testEnvExpansion",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testEnvExpansion() throws IOException\n{\r\n    Path logPath = new Path(\"/nm/container/logs\");\r\n    String input = Apps.crossPlatformify(\"HADOOP_HOME\") + \"/share/hadoop/common/*\" + ApplicationConstants.CLASS_PATH_SEPARATOR + Apps.crossPlatformify(\"HADOOP_HOME\") + \"/share/hadoop/common/lib/*\" + ApplicationConstants.CLASS_PATH_SEPARATOR + Apps.crossPlatformify(\"HADOOP_LOG_HOME\") + ApplicationConstants.LOG_DIR_EXPANSION_VAR;\r\n    String res = ContainerLaunch.expandEnvironment(input, logPath);\r\n    if (Shell.WINDOWS) {\r\n        Assert.assertEquals(\"%HADOOP_HOME%/share/hadoop/common/*;\" + \"%HADOOP_HOME%/share/hadoop/common/lib/*;\" + \"%HADOOP_LOG_HOME%/nm/container/logs\", res);\r\n    } else {\r\n        Assert.assertEquals(\"$HADOOP_HOME/share/hadoop/common/*:\" + \"$HADOOP_HOME/share/hadoop/common/lib/*:\" + \"$HADOOP_LOG_HOME/nm/container/logs\", res);\r\n    }\r\n    System.out.println(res);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testContainerLaunchStdoutAndStderrDiagnostics",
  "errType" : [ "ExitCodeException" ],
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testContainerLaunchStdoutAndStderrDiagnostics() throws IOException\n{\r\n    File shellFile = null;\r\n    try {\r\n        shellFile = Shell.appendScriptExtension(tmpDir, \"hello\");\r\n        String command = Shell.WINDOWS ? \"@echo \\\"hello\\\" & @echo \\\"error\\\" 1>&2 & exit /b 2\" : \"echo \\\"hello\\\"; echo \\\"error\\\" 1>&2; exit 2;\";\r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(shellFile));\r\n        FileUtil.setExecutable(shellFile, true);\r\n        writer.println(command);\r\n        writer.close();\r\n        Map<Path, List<String>> resources = new HashMap<Path, List<String>>();\r\n        FileOutputStream fos = new FileOutputStream(shellFile, true);\r\n        Map<String, String> env = new HashMap<String, String>();\r\n        List<String> commands = new ArrayList<String>();\r\n        commands.add(command);\r\n        ContainerExecutor exec = new DefaultContainerExecutor();\r\n        exec.setConf(new YarnConfiguration());\r\n        LinkedHashSet<String> nmVars = new LinkedHashSet<>();\r\n        exec.writeLaunchEnv(fos, env, resources, commands, new Path(localLogDir.getAbsolutePath()), \"user\", nmVars);\r\n        fos.flush();\r\n        fos.close();\r\n        Shell.ShellCommandExecutor shexc = new Shell.ShellCommandExecutor(new String[] { shellFile.getAbsolutePath() }, tmpDir);\r\n        String diagnostics = null;\r\n        try {\r\n            shexc.execute();\r\n            Assert.fail(\"Should catch exception\");\r\n        } catch (ExitCodeException e) {\r\n            diagnostics = e.getMessage();\r\n        }\r\n        Assert.assertTrue(diagnostics.contains(\"error\"));\r\n        Assert.assertTrue(shexc.getOutput().contains(\"hello\"));\r\n        Assert.assertTrue(shexc.getExitCode() == 2);\r\n    } finally {\r\n        if (shellFile != null && shellFile.exists()) {\r\n            shellFile.delete();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testPrependDistcache",
  "errType" : null,
  "containingMethodsNum" : 38,
  "sourceCodeText" : "void testPrependDistcache() throws Exception\n{\r\n    assumeWindows();\r\n    ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class);\r\n    ApplicationId appId = ApplicationId.newInstance(0, 0);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId cId = ContainerId.newContainerId(appAttemptId, 0);\r\n    Map<String, String> userSetEnv = new HashMap<String, String>();\r\n    userSetEnv.put(Environment.CONTAINER_ID.name(), \"user_set_container_id\");\r\n    userSetEnv.put(Environment.NM_HOST.name(), \"user_set_NM_HOST\");\r\n    userSetEnv.put(Environment.NM_PORT.name(), \"user_set_NM_PORT\");\r\n    userSetEnv.put(Environment.NM_HTTP_PORT.name(), \"user_set_NM_HTTP_PORT\");\r\n    userSetEnv.put(Environment.LOCAL_DIRS.name(), \"user_set_LOCAL_DIR\");\r\n    userSetEnv.put(Environment.USER.key(), \"user_set_\" + Environment.USER.key());\r\n    userSetEnv.put(Environment.LOGNAME.name(), \"user_set_LOGNAME\");\r\n    userSetEnv.put(Environment.PWD.name(), \"user_set_PWD\");\r\n    userSetEnv.put(Environment.HOME.name(), \"user_set_HOME\");\r\n    userSetEnv.put(Environment.CLASSPATH.name(), \"APATH\");\r\n    containerLaunchContext.setEnvironment(userSetEnv);\r\n    Container container = mock(Container.class);\r\n    when(container.getContainerId()).thenReturn(cId);\r\n    when(container.getLaunchContext()).thenReturn(containerLaunchContext);\r\n    when(container.localizationCountersAsString()).thenReturn(\"1,2,3,4,5\");\r\n    Dispatcher dispatcher = mock(Dispatcher.class);\r\n    EventHandler<Event> eventHandler = new EventHandler<Event>() {\r\n\r\n        public void handle(Event event) {\r\n            Assert.assertTrue(event instanceof ContainerExitEvent);\r\n            ContainerExitEvent exitEvent = (ContainerExitEvent) event;\r\n            Assert.assertEquals(ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, exitEvent.getType());\r\n        }\r\n    };\r\n    when(dispatcher.getEventHandler()).thenReturn(eventHandler);\r\n    Configuration conf = new Configuration();\r\n    ContainerLaunch launch = new ContainerLaunch(distContext, conf, dispatcher, exec, null, container, dirsHandler, containerManager);\r\n    String testDir = System.getProperty(\"test.build.data\", \"target/test-dir\");\r\n    Path pwd = new Path(testDir);\r\n    List<Path> appDirs = new ArrayList<Path>();\r\n    List<String> userLocalDirs = new ArrayList<>();\r\n    List<String> containerLogs = new ArrayList<String>();\r\n    Map<Path, List<String>> resources = new HashMap<Path, List<String>>();\r\n    Path userjar = new Path(\"user.jar\");\r\n    List<String> lpaths = new ArrayList<String>();\r\n    lpaths.add(\"userjarlink.jar\");\r\n    resources.put(userjar, lpaths);\r\n    Path nmp = new Path(testDir);\r\n    Set<String> nmEnvTrack = new LinkedHashSet<>();\r\n    launch.sanitizeEnv(userSetEnv, pwd, appDirs, userLocalDirs, containerLogs, resources, nmp, nmEnvTrack);\r\n    List<String> result = getJarManifestClasspath(userSetEnv.get(Environment.CLASSPATH.name()));\r\n    Assert.assertTrue(result.size() > 1);\r\n    Assert.assertTrue(result.get(result.size() - 1).endsWith(\"userjarlink.jar\"));\r\n    userSetEnv.put(Environment.CLASSPATH_PREPEND_DISTCACHE.name(), \"true\");\r\n    cId = ContainerId.newContainerId(appAttemptId, 1);\r\n    when(container.getContainerId()).thenReturn(cId);\r\n    launch = new ContainerLaunch(distContext, conf, dispatcher, exec, null, container, dirsHandler, containerManager);\r\n    launch.sanitizeEnv(userSetEnv, pwd, appDirs, userLocalDirs, containerLogs, resources, nmp, nmEnvTrack);\r\n    result = getJarManifestClasspath(userSetEnv.get(Environment.CLASSPATH.name()));\r\n    Assert.assertTrue(result.size() > 1);\r\n    Assert.assertTrue(result.get(0).endsWith(\"userjarlink.jar\"));\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testSanitizeNMEnvVars",
  "errType" : null,
  "containingMethodsNum" : 41,
  "sourceCodeText" : "void testSanitizeNMEnvVars() throws Exception\n{\r\n    assumeNotWindows();\r\n    ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class);\r\n    ApplicationId appId = ApplicationId.newInstance(0, 0);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId cId = ContainerId.newContainerId(appAttemptId, 0);\r\n    Map<String, String> userSetEnv = new HashMap<String, String>();\r\n    Set<String> nmEnvTrack = new LinkedHashSet<>();\r\n    userSetEnv.put(Environment.CONTAINER_ID.name(), \"user_set_container_id\");\r\n    userSetEnv.put(Environment.NM_HOST.name(), \"user_set_NM_HOST\");\r\n    userSetEnv.put(Environment.NM_PORT.name(), \"user_set_NM_PORT\");\r\n    userSetEnv.put(Environment.NM_HTTP_PORT.name(), \"user_set_NM_HTTP_PORT\");\r\n    userSetEnv.put(Environment.LOCAL_DIRS.name(), \"user_set_LOCAL_DIR\");\r\n    userSetEnv.put(Environment.USER.key(), \"user_set_\" + Environment.USER.key());\r\n    userSetEnv.put(Environment.LOGNAME.name(), \"user_set_LOGNAME\");\r\n    userSetEnv.put(Environment.PWD.name(), \"user_set_PWD\");\r\n    userSetEnv.put(Environment.HOME.name(), \"user_set_HOME\");\r\n    userSetEnv.put(Environment.CLASSPATH.name(), \"APATH\");\r\n    String userMallocArenaMaxVal = \"test_user_max_val\";\r\n    userSetEnv.put(\"MALLOC_ARENA_MAX\", userMallocArenaMaxVal);\r\n    containerLaunchContext.setEnvironment(userSetEnv);\r\n    Container container = mock(Container.class);\r\n    when(container.getContainerId()).thenReturn(cId);\r\n    when(container.getLaunchContext()).thenReturn(containerLaunchContext);\r\n    when(container.getLocalizedResources()).thenReturn(null);\r\n    Dispatcher dispatcher = mock(Dispatcher.class);\r\n    EventHandler<Event> eventHandler = new EventHandler<Event>() {\r\n\r\n        public void handle(Event event) {\r\n            Assert.assertTrue(event instanceof ContainerExitEvent);\r\n            ContainerExitEvent exitEvent = (ContainerExitEvent) event;\r\n            Assert.assertEquals(ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, exitEvent.getType());\r\n        }\r\n    };\r\n    when(dispatcher.getEventHandler()).thenReturn(eventHandler);\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    String mallocArenaMaxVal = \"test_nm_max_val\";\r\n    conf.set(\"yarn.nodemanager.admin-env\", \"MALLOC_ARENA_MAX=\" + mallocArenaMaxVal);\r\n    String testKey1 = \"TEST_KEY1\";\r\n    String testVal1 = \"testVal1\";\r\n    conf.set(\"yarn.nodemanager.admin-env.\" + testKey1, testVal1);\r\n    String testKey2 = \"TEST_KEY2\";\r\n    String testVal2 = \"testVal2\";\r\n    conf.set(\"yarn.nodemanager.admin-env.\" + testKey2, testVal2);\r\n    String testKey3 = \"MOUNT_LIST\";\r\n    String testVal3 = \"/home/a/b/c,/home/d/e/f,/home/g/e/h\";\r\n    conf.set(\"yarn.nodemanager.admin-env.\" + testKey3, testVal3);\r\n    ContainerLaunch launch = new ContainerLaunch(distContext, conf, dispatcher, exec, null, container, dirsHandler, containerManager);\r\n    String testDir = System.getProperty(\"test.build.data\", \"target/test-dir\");\r\n    Path pwd = new Path(testDir);\r\n    List<Path> appDirs = new ArrayList<Path>();\r\n    List<String> userLocalDirs = new ArrayList<>();\r\n    List<String> containerLogs = new ArrayList<String>();\r\n    Map<Path, List<String>> resources = new HashMap<Path, List<String>>();\r\n    Path userjar = new Path(\"user.jar\");\r\n    List<String> lpaths = new ArrayList<String>();\r\n    lpaths.add(\"userjarlink.jar\");\r\n    resources.put(userjar, lpaths);\r\n    Path nmp = new Path(testDir);\r\n    launch.sanitizeEnv(userSetEnv, pwd, appDirs, userLocalDirs, containerLogs, resources, nmp, nmEnvTrack);\r\n    Assert.assertTrue(userSetEnv.containsKey(\"MALLOC_ARENA_MAX\"));\r\n    Assert.assertTrue(userSetEnv.containsKey(testKey1));\r\n    Assert.assertTrue(userSetEnv.containsKey(testKey2));\r\n    Assert.assertTrue(userSetEnv.containsKey(testKey3));\r\n    Assert.assertEquals(userMallocArenaMaxVal + File.pathSeparator + mallocArenaMaxVal, userSetEnv.get(\"MALLOC_ARENA_MAX\"));\r\n    Assert.assertEquals(testVal1, userSetEnv.get(testKey1));\r\n    Assert.assertEquals(testVal2, userSetEnv.get(testKey2));\r\n    Assert.assertEquals(testVal3, userSetEnv.get(testKey3));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testNmForcePath",
  "errType" : null,
  "containingMethodsNum" : 25,
  "sourceCodeText" : "void testNmForcePath() throws Exception\n{\r\n    assumeNotWindows();\r\n    ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class);\r\n    ApplicationId appId = ApplicationId.newInstance(0, 0);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId cId = ContainerId.newContainerId(appAttemptId, 0);\r\n    Map<String, String> userSetEnv = new HashMap<>();\r\n    Set<String> nmEnvTrack = new LinkedHashSet<>();\r\n    containerLaunchContext.setEnvironment(userSetEnv);\r\n    Container container = mock(Container.class);\r\n    when(container.getContainerId()).thenReturn(cId);\r\n    when(container.getLaunchContext()).thenReturn(containerLaunchContext);\r\n    when(container.getLocalizedResources()).thenReturn(null);\r\n    Dispatcher dispatcher = mock(Dispatcher.class);\r\n    EventHandler<Event> eventHandler = new EventHandler<Event>() {\r\n\r\n        public void handle(Event event) {\r\n            Assert.assertTrue(event instanceof ContainerExitEvent);\r\n            ContainerExitEvent exitEvent = (ContainerExitEvent) event;\r\n            Assert.assertEquals(ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, exitEvent.getType());\r\n        }\r\n    };\r\n    when(dispatcher.getEventHandler()).thenReturn(eventHandler);\r\n    String testDir = System.getProperty(\"test.build.data\", \"target/test-dir\");\r\n    Path pwd = new Path(testDir);\r\n    List<Path> appDirs = new ArrayList<>();\r\n    List<String> userLocalDirs = new ArrayList<>();\r\n    List<String> containerLogs = new ArrayList<>();\r\n    Map<Path, List<String>> resources = new HashMap<>();\r\n    Path nmp = new Path(testDir);\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    String forcePath = \"./force-path\";\r\n    conf.set(\"yarn.nodemanager.force.path\", forcePath);\r\n    ContainerLaunch launch = new ContainerLaunch(distContext, conf, dispatcher, exec, null, container, dirsHandler, containerManager);\r\n    launch.sanitizeEnv(userSetEnv, pwd, appDirs, userLocalDirs, containerLogs, resources, nmp, nmEnvTrack);\r\n    Assert.assertTrue(userSetEnv.containsKey(Environment.PATH.name()));\r\n    Assert.assertEquals(forcePath + \":$PATH\", userSetEnv.get(Environment.PATH.name()));\r\n    String userPath = \"/usr/bin:/usr/local/bin\";\r\n    userSetEnv.put(Environment.PATH.name(), userPath);\r\n    containerLaunchContext.setEnvironment(userSetEnv);\r\n    when(container.getLaunchContext()).thenReturn(containerLaunchContext);\r\n    launch.sanitizeEnv(userSetEnv, pwd, appDirs, userLocalDirs, containerLogs, resources, nmp, nmEnvTrack);\r\n    Assert.assertTrue(userSetEnv.containsKey(Environment.PATH.name()));\r\n    Assert.assertEquals(forcePath + \":\" + userPath, userSetEnv.get(Environment.PATH.name()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testErrorLogOnContainerExit",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testErrorLogOnContainerExit() throws Exception\n{\r\n    verifyTailErrorLogOnContainerExit(new Configuration(), \"/stderr\", false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testErrorLogOnContainerExitForCase",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testErrorLogOnContainerExitForCase() throws Exception\n{\r\n    verifyTailErrorLogOnContainerExit(new Configuration(), \"/STDERR.log\", false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testErrorLogOnContainerExitForExt",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testErrorLogOnContainerExitForExt() throws Exception\n{\r\n    verifyTailErrorLogOnContainerExit(new Configuration(), \"/AppMaster.stderr\", false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testErrorLogOnContainerExitWithCustomPattern",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testErrorLogOnContainerExitWithCustomPattern() throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    conf.setStrings(YarnConfiguration.NM_CONTAINER_STDERR_PATTERN, \"{*stderr*,*log*}\");\r\n    verifyTailErrorLogOnContainerExit(conf, \"/error.log\", false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testErrorLogOnContainerExitWithMultipleFiles",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testErrorLogOnContainerExitWithMultipleFiles() throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    conf.setStrings(YarnConfiguration.NM_CONTAINER_STDERR_PATTERN, \"{*stderr*,*stdout*}\");\r\n    verifyTailErrorLogOnContainerExit(conf, \"/stderr.log\", true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "verifyTailErrorLogOnContainerExit",
  "errType" : null,
  "containingMethodsNum" : 45,
  "sourceCodeText" : "void verifyTailErrorLogOnContainerExit(Configuration conf, String errorFileName, boolean testForMultipleErrFiles) throws Exception\n{\r\n    Container container = mock(Container.class);\r\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    ContainerId containerId = ContainerId.newContainerId(ApplicationAttemptId.newInstance(appId, 1), 1);\r\n    when(container.getContainerId()).thenReturn(containerId);\r\n    when(container.getUser()).thenReturn(\"test\");\r\n    when(container.localizationCountersAsString()).thenReturn(\"\");\r\n    String relativeContainerLogDir = ContainerLaunch.getRelativeContainerLogDir(appId.toString(), containerId.toString());\r\n    Path containerLogDir = dirsHandler.getLogPathForWrite(relativeContainerLogDir, false);\r\n    ContainerLaunchContext clc = mock(ContainerLaunchContext.class);\r\n    List<String> invalidCommand = new ArrayList<String>();\r\n    invalidCommand.add(\"$JAVA_HOME/bin/java\");\r\n    invalidCommand.add(\"-Djava.io.tmpdir=$PWD/tmp\");\r\n    invalidCommand.add(\"-Dlog4j.configuration=container-log4j.properties\");\r\n    invalidCommand.add(\"-Dyarn.app.container.log.dir=\" + containerLogDir);\r\n    invalidCommand.add(\"-Dyarn.app.container.log.filesize=0\");\r\n    invalidCommand.add(\"-Dhadoop.root.logger=INFO,CLA\");\r\n    invalidCommand.add(\"-Dhadoop.root.logfile=syslog\");\r\n    invalidCommand.add(\"-Xmx1024m\");\r\n    invalidCommand.add(\"org.apache.hadoop.mapreduce.v2.app.MRAppMaster\");\r\n    invalidCommand.add(\"1>\" + containerLogDir + \"/stdout\");\r\n    invalidCommand.add(\"2>\" + containerLogDir + errorFileName);\r\n    when(clc.getCommands()).thenReturn(invalidCommand);\r\n    Map<String, String> userSetEnv = new HashMap<String, String>();\r\n    userSetEnv.put(Environment.CONTAINER_ID.name(), \"user_set_container_id\");\r\n    userSetEnv.put(\"JAVA_HOME\", INVALID_JAVA_HOME);\r\n    userSetEnv.put(Environment.NM_HOST.name(), \"user_set_NM_HOST\");\r\n    userSetEnv.put(Environment.NM_PORT.name(), \"user_set_NM_PORT\");\r\n    userSetEnv.put(Environment.NM_HTTP_PORT.name(), \"user_set_NM_HTTP_PORT\");\r\n    userSetEnv.put(Environment.LOCAL_DIRS.name(), \"user_set_LOCAL_DIR\");\r\n    userSetEnv.put(Environment.USER.key(), \"user_set_\" + Environment.USER.key());\r\n    userSetEnv.put(Environment.LOGNAME.name(), \"user_set_LOGNAME\");\r\n    userSetEnv.put(Environment.PWD.name(), \"user_set_PWD\");\r\n    userSetEnv.put(Environment.HOME.name(), \"user_set_HOME\");\r\n    userSetEnv.put(Environment.CLASSPATH.name(), \"APATH\");\r\n    when(clc.getEnvironment()).thenReturn(userSetEnv);\r\n    when(container.getLaunchContext()).thenReturn(clc);\r\n    when(container.getLocalizedResources()).thenReturn(Collections.<Path, List<String>>emptyMap());\r\n    Dispatcher dispatcher = mock(Dispatcher.class);\r\n    @SuppressWarnings(\"rawtypes\")\r\n    ContainerExitHandler eventHandler = new ContainerExitHandler(testForMultipleErrFiles);\r\n    when(dispatcher.getEventHandler()).thenReturn(eventHandler);\r\n    Application app = mock(Application.class);\r\n    when(app.getAppId()).thenReturn(appId);\r\n    when(app.getUser()).thenReturn(\"test\");\r\n    Credentials creds = mock(Credentials.class);\r\n    when(container.getCredentials()).thenReturn(creds);\r\n    ((NMContext) context).setNodeId(NodeId.newInstance(\"127.0.0.1\", HTTP_PORT));\r\n    ContainerLaunch launch = new ContainerLaunch(context, conf, dispatcher, exec, app, container, dirsHandler, containerManager);\r\n    launch.call();\r\n    Assert.assertTrue(\"ContainerExitEvent should have occurred\", eventHandler.isContainerExitEventOccurred());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "getJarManifestClasspath",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "List<String> getJarManifestClasspath(String path) throws Exception\n{\r\n    List<String> classpath = new ArrayList<String>();\r\n    JarFile jarFile = new JarFile(path);\r\n    Manifest manifest = jarFile.getManifest();\r\n    String cps = manifest.getMainAttributes().getValue(\"Class-Path\");\r\n    StringTokenizer cptok = new StringTokenizer(cps);\r\n    while (cptok.hasMoreTokens()) {\r\n        String cpentry = cptok.nextToken();\r\n        classpath.add(cpentry);\r\n    }\r\n    return classpath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testContainerEnvVariables",
  "errType" : null,
  "containingMethodsNum" : 112,
  "sourceCodeText" : "void testContainerEnvVariables() throws Exception\n{\r\n    containerManager.start();\r\n    ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class);\r\n    ApplicationId appId = ApplicationId.newInstance(0, 0);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId cId = ContainerId.newContainerId(appAttemptId, 0);\r\n    Map<String, String> userSetEnv = new HashMap<String, String>();\r\n    userSetEnv.put(Environment.CONTAINER_ID.name(), \"user_set_container_id\");\r\n    userSetEnv.put(Environment.NM_HOST.name(), \"user_set_NM_HOST\");\r\n    userSetEnv.put(Environment.NM_PORT.name(), \"user_set_NM_PORT\");\r\n    userSetEnv.put(Environment.NM_HTTP_PORT.name(), \"user_set_NM_HTTP_PORT\");\r\n    userSetEnv.put(Environment.LOCAL_DIRS.name(), \"user_set_LOCAL_DIR\");\r\n    userSetEnv.put(Environment.USER.key(), \"user_set_\" + Environment.USER.key());\r\n    userSetEnv.put(Environment.LOGNAME.name(), \"user_set_LOGNAME\");\r\n    userSetEnv.put(Environment.PWD.name(), \"user_set_PWD\");\r\n    userSetEnv.put(Environment.HOME.name(), \"user_set_HOME\");\r\n    final String userConfDir = \"user_set_HADOOP_CONF_DIR\";\r\n    userSetEnv.put(Environment.HADOOP_CONF_DIR.name(), userConfDir);\r\n    containerLaunchContext.setEnvironment(userSetEnv);\r\n    File scriptFile = Shell.appendScriptExtension(tmpDir, \"scriptFile\");\r\n    PrintWriter fileWriter = new PrintWriter(scriptFile);\r\n    File processStartFile = new File(tmpDir, \"env_vars.tmp\").getAbsoluteFile();\r\n    final File processFinalFile = new File(tmpDir, \"env_vars.txt\").getAbsoluteFile();\r\n    if (Shell.WINDOWS) {\r\n        fileWriter.println(\"@echo \" + Environment.CONTAINER_ID.$() + \"> \" + processStartFile);\r\n        fileWriter.println(\"@echo \" + Environment.NM_HOST.$() + \">> \" + processStartFile);\r\n        fileWriter.println(\"@echo \" + Environment.NM_PORT.$() + \">> \" + processStartFile);\r\n        fileWriter.println(\"@echo \" + Environment.NM_HTTP_PORT.$() + \">> \" + processStartFile);\r\n        fileWriter.println(\"@echo \" + Environment.LOCAL_DIRS.$() + \">> \" + processStartFile);\r\n        fileWriter.println(\"@echo \" + Environment.USER.$() + \">> \" + processStartFile);\r\n        fileWriter.println(\"@echo \" + Environment.LOGNAME.$() + \">> \" + processStartFile);\r\n        fileWriter.println(\"@echo \" + Environment.PWD.$() + \">> \" + processStartFile);\r\n        fileWriter.println(\"@echo \" + Environment.HOME.$() + \">> \" + processStartFile);\r\n        fileWriter.println(\"@echo \" + Environment.HADOOP_CONF_DIR.$() + \">> \" + processStartFile);\r\n        for (String serviceName : containerManager.getAuxServiceMetaData().keySet()) {\r\n            fileWriter.println(\"@echo %\" + AuxiliaryServiceHelper.NM_AUX_SERVICE + serviceName + \"%>> \" + processStartFile);\r\n        }\r\n        fileWriter.println(\"@echo \" + cId + \">> \" + processStartFile);\r\n        fileWriter.println(\"@move /Y \" + processStartFile + \" \" + processFinalFile);\r\n        fileWriter.println(\"@ping -n 100 127.0.0.1 >nul\");\r\n    } else {\r\n        fileWriter.write(\"\\numask 0\");\r\n        fileWriter.write(\"\\necho $\" + Environment.CONTAINER_ID.name() + \" > \" + processStartFile);\r\n        fileWriter.write(\"\\necho $\" + Environment.NM_HOST.name() + \" >> \" + processStartFile);\r\n        fileWriter.write(\"\\necho $\" + Environment.NM_PORT.name() + \" >> \" + processStartFile);\r\n        fileWriter.write(\"\\necho $\" + Environment.NM_HTTP_PORT.name() + \" >> \" + processStartFile);\r\n        fileWriter.write(\"\\necho $\" + Environment.LOCAL_DIRS.name() + \" >> \" + processStartFile);\r\n        fileWriter.write(\"\\necho $\" + Environment.USER.name() + \" >> \" + processStartFile);\r\n        fileWriter.write(\"\\necho $\" + Environment.LOGNAME.name() + \" >> \" + processStartFile);\r\n        fileWriter.write(\"\\necho $\" + Environment.PWD.name() + \" >> \" + processStartFile);\r\n        fileWriter.write(\"\\necho $\" + Environment.HOME.name() + \" >> \" + processStartFile);\r\n        fileWriter.write(\"\\necho $\" + Environment.HADOOP_CONF_DIR.name() + \" >> \" + processStartFile);\r\n        for (String serviceName : containerManager.getAuxServiceMetaData().keySet()) {\r\n            fileWriter.write(\"\\necho $\" + AuxiliaryServiceHelper.NM_AUX_SERVICE + serviceName + \" >> \" + processStartFile);\r\n        }\r\n        fileWriter.write(\"\\necho $$ >> \" + processStartFile);\r\n        fileWriter.write(\"\\nmv \" + processStartFile + \" \" + processFinalFile);\r\n        fileWriter.write(\"\\nexec sleep 100\");\r\n    }\r\n    fileWriter.close();\r\n    URL resource_alpha = URL.fromPath(localFS.makeQualified(new Path(scriptFile.getAbsolutePath())));\r\n    LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class);\r\n    rsrc_alpha.setResource(resource_alpha);\r\n    rsrc_alpha.setSize(-1);\r\n    rsrc_alpha.setVisibility(LocalResourceVisibility.APPLICATION);\r\n    rsrc_alpha.setType(LocalResourceType.FILE);\r\n    rsrc_alpha.setTimestamp(scriptFile.lastModified());\r\n    String destinationFile = \"dest_file\";\r\n    Map<String, LocalResource> localResources = new HashMap<String, LocalResource>();\r\n    localResources.put(destinationFile, rsrc_alpha);\r\n    containerLaunchContext.setLocalResources(localResources);\r\n    List<String> commands = Arrays.asList(Shell.getRunScriptCommand(scriptFile));\r\n    containerLaunchContext.setCommands(commands);\r\n    StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, createContainerToken(cId, Priority.newInstance(0), 0));\r\n    List<StartContainerRequest> list = new ArrayList<StartContainerRequest>();\r\n    list.add(scRequest);\r\n    StartContainersRequest allRequests = StartContainersRequest.newInstance(list);\r\n    containerManager.startContainers(allRequests);\r\n    GenericTestUtils.waitFor(new Supplier<Boolean>() {\r\n\r\n        @Override\r\n        public Boolean get() {\r\n            return processFinalFile.exists();\r\n        }\r\n    }, 10, 20000);\r\n    List<String> localDirs = dirsHandler.getLocalDirs();\r\n    List<String> logDirs = dirsHandler.getLogDirs();\r\n    List<Path> appDirs = new ArrayList<Path>(localDirs.size());\r\n    for (String localDir : localDirs) {\r\n        Path usersdir = new Path(localDir, ContainerLocalizer.USERCACHE);\r\n        Path userdir = new Path(usersdir, user);\r\n        Path appsdir = new Path(userdir, ContainerLocalizer.APPCACHE);\r\n        appDirs.add(new Path(appsdir, appId.toString()));\r\n    }\r\n    List<String> containerLogDirs = new ArrayList<String>();\r\n    String relativeContainerLogDir = ContainerLaunch.getRelativeContainerLogDir(appId.toString(), cId.toString());\r\n    for (String logDir : logDirs) {\r\n        containerLogDirs.add(logDir + Path.SEPARATOR + relativeContainerLogDir);\r\n    }\r\n    BufferedReader reader = new BufferedReader(new FileReader(processFinalFile));\r\n    Assert.assertEquals(cId.toString(), reader.readLine());\r\n    Assert.assertEquals(context.getNodeId().getHost(), reader.readLine());\r\n    Assert.assertEquals(String.valueOf(context.getNodeId().getPort()), reader.readLine());\r\n    Assert.assertEquals(String.valueOf(HTTP_PORT), reader.readLine());\r\n    Assert.assertEquals(StringUtils.join(\",\", appDirs), reader.readLine());\r\n    Assert.assertEquals(user, reader.readLine());\r\n    Assert.assertEquals(user, reader.readLine());\r\n    String obtainedPWD = reader.readLine();\r\n    boolean found = false;\r\n    for (Path localDir : appDirs) {\r\n        if (new Path(localDir, cId.toString()).toString().equals(obtainedPWD)) {\r\n            found = true;\r\n            break;\r\n        }\r\n    }\r\n    Assert.assertTrue(\"Wrong local-dir found : \" + obtainedPWD, found);\r\n    Assert.assertEquals(conf.get(YarnConfiguration.NM_USER_HOME_DIR, YarnConfiguration.DEFAULT_NM_USER_HOME_DIR), reader.readLine());\r\n    Assert.assertEquals(userConfDir, reader.readLine());\r\n    for (String serviceName : containerManager.getAuxServiceMetaData().keySet()) {\r\n        Assert.assertEquals(containerManager.getAuxServiceMetaData().get(serviceName), ByteBuffer.wrap(Base64.decodeBase64(reader.readLine().getBytes())));\r\n    }\r\n    Assert.assertEquals(cId.toString(), containerLaunchContext.getEnvironment().get(Environment.CONTAINER_ID.name()));\r\n    Assert.assertEquals(context.getNodeId().getHost(), containerLaunchContext.getEnvironment().get(Environment.NM_HOST.name()));\r\n    Assert.assertEquals(String.valueOf(context.getNodeId().getPort()), containerLaunchContext.getEnvironment().get(Environment.NM_PORT.name()));\r\n    Assert.assertEquals(String.valueOf(HTTP_PORT), containerLaunchContext.getEnvironment().get(Environment.NM_HTTP_PORT.name()));\r\n    Assert.assertEquals(StringUtils.join(\",\", appDirs), containerLaunchContext.getEnvironment().get(Environment.LOCAL_DIRS.name()));\r\n    Assert.assertEquals(StringUtils.join(\",\", containerLogDirs), containerLaunchContext.getEnvironment().get(Environment.LOG_DIRS.name()));\r\n    Assert.assertEquals(user, containerLaunchContext.getEnvironment().get(Environment.USER.name()));\r\n    Assert.assertEquals(user, containerLaunchContext.getEnvironment().get(Environment.LOGNAME.name()));\r\n    found = false;\r\n    obtainedPWD = containerLaunchContext.getEnvironment().get(Environment.PWD.name());\r\n    for (Path localDir : appDirs) {\r\n        if (new Path(localDir, cId.toString()).toString().equals(obtainedPWD)) {\r\n            found = true;\r\n            break;\r\n        }\r\n    }\r\n    Assert.assertTrue(\"Wrong local-dir found : \" + obtainedPWD, found);\r\n    Assert.assertEquals(conf.get(YarnConfiguration.NM_USER_HOME_DIR, YarnConfiguration.DEFAULT_NM_USER_HOME_DIR), containerLaunchContext.getEnvironment().get(Environment.HOME.name()));\r\n    Assert.assertEquals(userConfDir, containerLaunchContext.getEnvironment().get(Environment.HADOOP_CONF_DIR.name()));\r\n    String pid = reader.readLine().trim();\r\n    Assert.assertEquals(null, reader.readLine());\r\n    Assert.assertTrue(\"Process is not alive!\", DefaultContainerExecutor.containerIsAlive(pid));\r\n    Assert.assertTrue(\"Process is not alive!\", DefaultContainerExecutor.containerIsAlive(pid));\r\n    List<ContainerId> containerIds = new ArrayList<ContainerId>();\r\n    containerIds.add(cId);\r\n    StopContainersRequest stopRequest = StopContainersRequest.newInstance(containerIds);\r\n    containerManager.stopContainers(stopRequest);\r\n    BaseContainerManagerTest.waitForContainerState(containerManager, cId, ContainerState.COMPLETE);\r\n    GetContainerStatusesRequest gcsRequest = GetContainerStatusesRequest.newInstance(containerIds);\r\n    ContainerStatus containerStatus = containerManager.getContainerStatuses(gcsRequest).getContainerStatuses().get(0);\r\n    int expectedExitCode = ContainerExitStatus.KILLED_BY_APPMASTER;\r\n    Assert.assertEquals(expectedExitCode, containerStatus.getExitStatus());\r\n    Assert.assertFalse(\"Process is still alive!\", DefaultContainerExecutor.containerIsAlive(pid));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testAuxiliaryServiceHelper",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testAuxiliaryServiceHelper() throws Exception\n{\r\n    Map<String, String> env = new HashMap<String, String>();\r\n    String serviceName = \"testAuxiliaryService\";\r\n    ByteBuffer bb = ByteBuffer.wrap(\"testAuxiliaryService\".getBytes());\r\n    AuxiliaryServiceHelper.setServiceDataIntoEnv(serviceName, bb, env);\r\n    Assert.assertEquals(bb, AuxiliaryServiceHelper.getServiceDataFromEnv(serviceName, env));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "internalKillTest",
  "errType" : null,
  "containingMethodsNum" : 57,
  "sourceCodeText" : "void internalKillTest(boolean delayed) throws Exception\n{\r\n    conf.setLong(YarnConfiguration.NM_SLEEP_DELAY_BEFORE_SIGKILL_MS, delayed ? 1000 : 0);\r\n    containerManager.start();\r\n    ApplicationId appId = ApplicationId.newInstance(1, 1);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId cId = ContainerId.newContainerId(appAttemptId, 0);\r\n    File processStartFile = new File(tmpDir, \"pid.txt\").getAbsoluteFile();\r\n    File scriptFile = Shell.appendScriptExtension(tmpDir, \"testscript\");\r\n    PrintWriter writer = new PrintWriter(new FileOutputStream(scriptFile));\r\n    if (Shell.WINDOWS) {\r\n        writer.println(\"@echo \\\"Running testscript for delayed kill\\\"\");\r\n        writer.println(\"@echo \\\"Writing pid to start file\\\"\");\r\n        writer.println(\"@echo \" + cId + \"> \" + processStartFile);\r\n        writer.println(\"@ping -n 100 127.0.0.1 >nul\");\r\n    } else {\r\n        writer.println(\"#!/bin/bash\\n\\n\");\r\n        writer.println(\"echo \\\"Running testscript for delayed kill\\\"\");\r\n        writer.println(\"hello=\\\"Got SIGTERM\\\"\");\r\n        writer.println(\"umask 0\");\r\n        writer.println(\"trap \\\"echo $hello >> \" + processStartFile + \"\\\" SIGTERM\");\r\n        writer.println(\"echo \\\"Writing pid to start file\\\"\");\r\n        writer.println(\"echo $$ >> \" + processStartFile);\r\n        writer.println(\"while true; do\\nsleep 1s;\\ndone\");\r\n    }\r\n    writer.close();\r\n    FileUtil.setExecutable(scriptFile, true);\r\n    ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class);\r\n    URL resource_alpha = URL.fromPath(localFS.makeQualified(new Path(scriptFile.getAbsolutePath())));\r\n    LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class);\r\n    rsrc_alpha.setResource(resource_alpha);\r\n    rsrc_alpha.setSize(-1);\r\n    rsrc_alpha.setVisibility(LocalResourceVisibility.APPLICATION);\r\n    rsrc_alpha.setType(LocalResourceType.FILE);\r\n    rsrc_alpha.setTimestamp(scriptFile.lastModified());\r\n    String destinationFile = \"dest_file.sh\";\r\n    Map<String, LocalResource> localResources = new HashMap<String, LocalResource>();\r\n    localResources.put(destinationFile, rsrc_alpha);\r\n    containerLaunchContext.setLocalResources(localResources);\r\n    List<String> commands = Arrays.asList(Shell.getRunScriptCommand(scriptFile));\r\n    containerLaunchContext.setCommands(commands);\r\n    Priority priority = Priority.newInstance(10);\r\n    long createTime = 1234;\r\n    Token containerToken = createContainerToken(cId, priority, createTime);\r\n    StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, containerToken);\r\n    List<StartContainerRequest> list = new ArrayList<StartContainerRequest>();\r\n    list.add(scRequest);\r\n    StartContainersRequest allRequests = StartContainersRequest.newInstance(list);\r\n    containerManager.startContainers(allRequests);\r\n    int timeoutSecs = 0;\r\n    while (!processStartFile.exists() && timeoutSecs++ < 20) {\r\n        Thread.sleep(1000);\r\n        LOG.info(\"Waiting for process start-file to be created\");\r\n    }\r\n    Assert.assertTrue(\"ProcessStartFile doesn't exist!\", processStartFile.exists());\r\n    NMContainerStatus nmContainerStatus = containerManager.getContext().getContainers().get(cId).getNMContainerStatus();\r\n    Assert.assertEquals(priority, nmContainerStatus.getPriority());\r\n    List<ContainerId> containerIds = new ArrayList<ContainerId>();\r\n    containerIds.add(cId);\r\n    StopContainersRequest stopRequest = StopContainersRequest.newInstance(containerIds);\r\n    containerManager.stopContainers(stopRequest);\r\n    BaseContainerManagerTest.waitForContainerState(containerManager, cId, ContainerState.COMPLETE);\r\n    GetContainerStatusesRequest gcsRequest = GetContainerStatusesRequest.newInstance(containerIds);\r\n    ContainerStatus containerStatus = containerManager.getContainerStatuses(gcsRequest).getContainerStatuses().get(0);\r\n    Assert.assertEquals(ContainerExitStatus.KILLED_BY_APPMASTER, containerStatus.getExitStatus());\r\n    if (Shell.WINDOWS || !delayed) {\r\n        Assert.assertFalse(\"Process is still alive!\", DefaultContainerExecutor.containerIsAlive(cId.toString()));\r\n    } else {\r\n        BufferedReader reader = new BufferedReader(new FileReader(processStartFile));\r\n        boolean foundSigTermMessage = false;\r\n        while (true) {\r\n            String line = reader.readLine();\r\n            if (line == null) {\r\n                break;\r\n            }\r\n            if (line.contains(\"SIGTERM\")) {\r\n                foundSigTermMessage = true;\r\n                break;\r\n            }\r\n        }\r\n        Assert.assertTrue(\"Did not find sigterm message\", foundSigTermMessage);\r\n        reader.close();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testDelayedKill",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testDelayedKill() throws Exception\n{\r\n    internalKillTest(true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testImmediateKill",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testImmediateKill() throws Exception\n{\r\n    internalKillTest(false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testCallFailureWithNullLocalizedResources",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testCallFailureWithNullLocalizedResources()\n{\r\n    Container container = mock(Container.class);\r\n    when(container.getContainerId()).thenReturn(ContainerId.newContainerId(ApplicationAttemptId.newInstance(ApplicationId.newInstance(System.currentTimeMillis(), 1), 1), 1));\r\n    ContainerLaunchContext clc = mock(ContainerLaunchContext.class);\r\n    when(clc.getCommands()).thenReturn(Collections.<String>emptyList());\r\n    when(container.getLaunchContext()).thenReturn(clc);\r\n    when(container.getLocalizedResources()).thenReturn(null);\r\n    Dispatcher dispatcher = mock(Dispatcher.class);\r\n    EventHandler<Event> eventHandler = new EventHandler<Event>() {\r\n\r\n        @Override\r\n        public void handle(Event event) {\r\n            Assert.assertTrue(event instanceof ContainerExitEvent);\r\n            ContainerExitEvent exitEvent = (ContainerExitEvent) event;\r\n            Assert.assertEquals(ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, exitEvent.getType());\r\n        }\r\n    };\r\n    when(dispatcher.getEventHandler()).thenReturn(eventHandler);\r\n    ContainerLaunch launch = new ContainerLaunch(context, new Configuration(), dispatcher, exec, null, container, dirsHandler, containerManager);\r\n    launch.call();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "createContainerToken",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Token createContainerToken(ContainerId cId, Priority priority, long createTime) throws InvalidToken\n{\r\n    Resource r = BuilderUtils.newResource(1024, 1);\r\n    ContainerTokenIdentifier containerTokenIdentifier = new ContainerTokenIdentifier(cId, context.getNodeId().toString(), user, r, System.currentTimeMillis() + 10000L, 123, DUMMY_RM_IDENTIFIER, priority, createTime);\r\n    Token containerToken = BuilderUtils.newContainerToken(context.getNodeId(), context.getContainerTokenSecretManager().retrievePassword(containerTokenIdentifier), containerTokenIdentifier);\r\n    return containerToken;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testShellScriptBuilderNonZeroExitCode",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testShellScriptBuilderNonZeroExitCode() throws IOException\n{\r\n    ShellScriptBuilder builder = ShellScriptBuilder.create();\r\n    builder.command(Arrays.asList(new String[] { \"unknownCommand\" }));\r\n    File shellFile = Shell.appendScriptExtension(tmpDir, \"testShellScriptBuilderError\");\r\n    PrintStream writer = new PrintStream(new FileOutputStream(shellFile));\r\n    builder.write(writer);\r\n    writer.close();\r\n    try {\r\n        FileUtil.setExecutable(shellFile, true);\r\n        Shell.ShellCommandExecutor shexc = new Shell.ShellCommandExecutor(new String[] { shellFile.getAbsolutePath() }, tmpDir);\r\n        try {\r\n            shexc.execute();\r\n            fail(\"builder shell command was expected to throw\");\r\n        } catch (IOException e) {\r\n            System.out.println(\"Received an expected exception: \" + e.getMessage());\r\n        }\r\n    } finally {\r\n        FileUtil.fullyDelete(shellFile);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testWindowsShellScriptBuilderCommand",
  "errType" : [ "IOException", "IOException" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testWindowsShellScriptBuilderCommand() throws IOException\n{\r\n    String callCmd = \"@call \";\r\n    assumeWindows();\r\n    assertEquals(8191, Shell.WINDOWS_MAX_SHELL_LENGTH);\r\n    ShellScriptBuilder builder = ShellScriptBuilder.create();\r\n    builder.command(Arrays.asList(org.apache.commons.lang3.StringUtils.repeat(\"A\", 1024)));\r\n    builder.command(Arrays.asList(org.apache.commons.lang3.StringUtils.repeat(\"E\", Shell.WINDOWS_MAX_SHELL_LENGTH - callCmd.length())));\r\n    try {\r\n        builder.command(Arrays.asList(org.apache.commons.lang3.StringUtils.repeat(\"X\", Shell.WINDOWS_MAX_SHELL_LENGTH - callCmd.length() + 1)));\r\n        fail(\"longCommand was expected to throw\");\r\n    } catch (IOException e) {\r\n        assertThat(e).hasMessageContaining(expectedMessage);\r\n    }\r\n    builder.command(Arrays.asList(org.apache.commons.lang3.StringUtils.repeat(\"A\", 1024), org.apache.commons.lang3.StringUtils.repeat(\"A\", 1024), org.apache.commons.lang3.StringUtils.repeat(\"A\", 1024)));\r\n    builder.command(Arrays.asList(org.apache.commons.lang3.StringUtils.repeat(\"E\", 4095), org.apache.commons.lang3.StringUtils.repeat(\"E\", 2047), org.apache.commons.lang3.StringUtils.repeat(\"E\", 2047 - callCmd.length())));\r\n    try {\r\n        builder.command(Arrays.asList(org.apache.commons.lang3.StringUtils.repeat(\"X\", 4095), org.apache.commons.lang3.StringUtils.repeat(\"X\", 2047), org.apache.commons.lang3.StringUtils.repeat(\"X\", 2048 - callCmd.length())));\r\n        fail(\"long commands was expected to throw\");\r\n    } catch (IOException e) {\r\n        assertThat(e).hasMessageContaining(expectedMessage);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testWindowsShellScriptBuilderEnv",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testWindowsShellScriptBuilderEnv() throws IOException\n{\r\n    assumeWindows();\r\n    assertEquals(8191, Shell.WINDOWS_MAX_SHELL_LENGTH);\r\n    ShellScriptBuilder builder = ShellScriptBuilder.create();\r\n    builder.env(\"somekey\", org.apache.commons.lang3.StringUtils.repeat(\"A\", 1024));\r\n    builder.env(\"somekey\", org.apache.commons.lang3.StringUtils.repeat(\"A\", Shell.WINDOWS_MAX_SHELL_LENGTH - (\"@set somekey=\").length()));\r\n    try {\r\n        builder.env(\"somekey\", org.apache.commons.lang3.StringUtils.repeat(\"A\", Shell.WINDOWS_MAX_SHELL_LENGTH - (\"@set somekey=\").length()) + 1);\r\n        fail(\"long env was expected to throw\");\r\n    } catch (IOException e) {\r\n        assertThat(e).hasMessageContaining(expectedMessage);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testWindowsShellScriptBuilderMkdir",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testWindowsShellScriptBuilderMkdir() throws IOException\n{\r\n    String mkDirCmd = \"@if not exist \\\"\\\" mkdir \\\"\\\"\";\r\n    assumeWindows();\r\n    assertEquals(8191, Shell.WINDOWS_MAX_SHELL_LENGTH);\r\n    ShellScriptBuilder builder = ShellScriptBuilder.create();\r\n    builder.mkdir(new Path(org.apache.commons.lang3.StringUtils.repeat(\"A\", 1024)));\r\n    builder.mkdir(new Path(org.apache.commons.lang3.StringUtils.repeat(\"E\", (Shell.WINDOWS_MAX_SHELL_LENGTH - mkDirCmd.length()) / 2)));\r\n    try {\r\n        builder.mkdir(new Path(org.apache.commons.lang3.StringUtils.repeat(\"X\", (Shell.WINDOWS_MAX_SHELL_LENGTH - mkDirCmd.length()) / 2 + 1)));\r\n        fail(\"long mkdir was expected to throw\");\r\n    } catch (IOException e) {\r\n        assertThat(e).hasMessageContaining(expectedMessage);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testWindowsShellScriptBuilderLink",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testWindowsShellScriptBuilderLink() throws IOException\n{\r\n    assumeWindows();\r\n    String linkCmd = \"@\" + Shell.getWinUtilsPath() + \" symlink \\\"\\\" \\\"\\\"\";\r\n    assertEquals(8191, Shell.WINDOWS_MAX_SHELL_LENGTH);\r\n    ShellScriptBuilder builder = ShellScriptBuilder.create();\r\n    builder.link(new Path(org.apache.commons.lang3.StringUtils.repeat(\"A\", 1024)), new Path(org.apache.commons.lang3.StringUtils.repeat(\"B\", 1024)));\r\n    builder.link(new Path(org.apache.commons.lang3.StringUtils.repeat(\"E\", (Shell.WINDOWS_MAX_SHELL_LENGTH - linkCmd.length()) / 2)), new Path(org.apache.commons.lang3.StringUtils.repeat(\"F\", (Shell.WINDOWS_MAX_SHELL_LENGTH - linkCmd.length()) / 2)));\r\n    try {\r\n        builder.link(new Path(org.apache.commons.lang3.StringUtils.repeat(\"X\", (Shell.WINDOWS_MAX_SHELL_LENGTH - linkCmd.length()) / 2 + 1)), new Path(org.apache.commons.lang3.StringUtils.repeat(\"Y\", (Shell.WINDOWS_MAX_SHELL_LENGTH - linkCmd.length()) / 2) + 1));\r\n        fail(\"long link was expected to throw\");\r\n    } catch (IOException e) {\r\n        assertThat(e).hasMessageContaining(expectedMessage);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testKillProcessGroup",
  "errType" : null,
  "containingMethodsNum" : 53,
  "sourceCodeText" : "void testKillProcessGroup() throws Exception\n{\r\n    Assume.assumeTrue(Shell.isSetsidAvailable);\r\n    containerManager.start();\r\n    ApplicationId appId = ApplicationId.newInstance(2, 2);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId cId = ContainerId.newContainerId(appAttemptId, 0);\r\n    File processStartFile = new File(tmpDir, \"pid.txt\").getAbsoluteFile();\r\n    File childProcessStartFile = new File(tmpDir, \"child_pid.txt\").getAbsoluteFile();\r\n    File scriptFile = Shell.appendScriptExtension(tmpDir, \"testscript\");\r\n    PrintWriter writer = new PrintWriter(new FileOutputStream(scriptFile));\r\n    writer.println(\"#!/bin/bash\\n\\n\");\r\n    writer.println(\"echo \\\"Running testscript for forked process\\\"\");\r\n    writer.println(\"umask 0\");\r\n    writer.println(\"echo $$ >> \" + processStartFile);\r\n    writer.println(\"while true;\\ndo sleep 1s;\\ndone > /dev/null 2>&1 &\");\r\n    writer.println(\"echo $! >> \" + childProcessStartFile);\r\n    writer.println(\"while true;\\ndo sleep 1s;\\ndone\");\r\n    writer.close();\r\n    FileUtil.setExecutable(scriptFile, true);\r\n    ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class);\r\n    URL resource_alpha = URL.fromPath(localFS.makeQualified(new Path(scriptFile.getAbsolutePath())));\r\n    LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class);\r\n    rsrc_alpha.setResource(resource_alpha);\r\n    rsrc_alpha.setSize(-1);\r\n    rsrc_alpha.setVisibility(LocalResourceVisibility.APPLICATION);\r\n    rsrc_alpha.setType(LocalResourceType.FILE);\r\n    rsrc_alpha.setTimestamp(scriptFile.lastModified());\r\n    String destinationFile = \"dest_file.sh\";\r\n    Map<String, LocalResource> localResources = new HashMap<String, LocalResource>();\r\n    localResources.put(destinationFile, rsrc_alpha);\r\n    containerLaunchContext.setLocalResources(localResources);\r\n    List<String> commands = Arrays.asList(Shell.getRunScriptCommand(scriptFile));\r\n    containerLaunchContext.setCommands(commands);\r\n    Priority priority = Priority.newInstance(10);\r\n    long createTime = 1234;\r\n    Token containerToken = createContainerToken(cId, priority, createTime);\r\n    StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, containerToken);\r\n    List<StartContainerRequest> list = new ArrayList<StartContainerRequest>();\r\n    list.add(scRequest);\r\n    StartContainersRequest allRequests = StartContainersRequest.newInstance(list);\r\n    containerManager.startContainers(allRequests);\r\n    int timeoutSecs = 0;\r\n    while (!processStartFile.exists() && timeoutSecs++ < 20) {\r\n        Thread.sleep(1000);\r\n        LOG.info(\"Waiting for process start-file to be created\");\r\n    }\r\n    Assert.assertTrue(\"ProcessStartFile doesn't exist!\", processStartFile.exists());\r\n    BufferedReader reader = new BufferedReader(new FileReader(processStartFile));\r\n    String pid = reader.readLine().trim();\r\n    Assert.assertEquals(null, reader.readLine());\r\n    reader.close();\r\n    reader = new BufferedReader(new FileReader(childProcessStartFile));\r\n    String child = reader.readLine().trim();\r\n    Assert.assertEquals(null, reader.readLine());\r\n    reader.close();\r\n    LOG.info(\"Manually killing pid \" + pid + \", but not child pid \" + child);\r\n    Shell.execCommand(new String[] { \"kill\", \"-9\", pid });\r\n    BaseContainerManagerTest.waitForContainerState(containerManager, cId, ContainerState.COMPLETE);\r\n    Assert.assertFalse(\"Process is still alive!\", DefaultContainerExecutor.containerIsAlive(pid));\r\n    List<ContainerId> containerIds = new ArrayList<ContainerId>();\r\n    containerIds.add(cId);\r\n    GetContainerStatusesRequest gcsRequest = GetContainerStatusesRequest.newInstance(containerIds);\r\n    ContainerStatus containerStatus = containerManager.getContainerStatuses(gcsRequest).getContainerStatuses().get(0);\r\n    Assert.assertEquals(ExitCode.FORCE_KILLED.getExitCode(), containerStatus.getExitStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testDebuggingInformation",
  "errType" : null,
  "containingMethodsNum" : 27,
  "sourceCodeText" : "void testDebuggingInformation() throws IOException\n{\r\n    File shellFile = null;\r\n    File tempFile = null;\r\n    Configuration conf = new YarnConfiguration();\r\n    try {\r\n        shellFile = Shell.appendScriptExtension(tmpDir, \"hello\");\r\n        tempFile = Shell.appendScriptExtension(tmpDir, \"temp\");\r\n        String testCommand = Shell.WINDOWS ? \"@echo \\\"hello\\\"\" : \"echo \\\"hello\\\"\";\r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(shellFile));\r\n        FileUtil.setExecutable(shellFile, true);\r\n        writer.println(testCommand);\r\n        writer.close();\r\n        Map<Path, List<String>> resources = new HashMap<Path, List<String>>();\r\n        Map<String, String> env = new HashMap<String, String>();\r\n        List<String> commands = new ArrayList<String>();\r\n        if (Shell.WINDOWS) {\r\n            commands.add(\"cmd\");\r\n            commands.add(\"/c\");\r\n            commands.add(\"\\\"\" + shellFile.getAbsolutePath() + \"\\\"\");\r\n        } else {\r\n            commands.add(\"/bin/sh \\\\\\\"\" + shellFile.getAbsolutePath() + \"\\\\\\\"\");\r\n        }\r\n        boolean[] debugLogsExistArray = { false, true };\r\n        for (boolean debugLogsExist : debugLogsExistArray) {\r\n            conf.setBoolean(YarnConfiguration.NM_LOG_CONTAINER_DEBUG_INFO, debugLogsExist);\r\n            FileOutputStream fos = new FileOutputStream(tempFile);\r\n            ContainerExecutor exec = new DefaultContainerExecutor();\r\n            exec.setConf(conf);\r\n            LinkedHashSet<String> nmVars = new LinkedHashSet<>();\r\n            exec.writeLaunchEnv(fos, env, resources, commands, new Path(localLogDir.getAbsolutePath()), \"user\", tempFile.getName(), nmVars);\r\n            fos.flush();\r\n            fos.close();\r\n            FileUtil.setExecutable(tempFile, true);\r\n            Shell.ShellCommandExecutor shexc = new Shell.ShellCommandExecutor(new String[] { tempFile.getAbsolutePath() }, tmpDir);\r\n            shexc.execute();\r\n            assertThat(shexc.getExitCode()).isEqualTo(0);\r\n            File directorInfo = new File(localLogDir, ContainerExecutor.DIRECTORY_CONTENTS);\r\n            File scriptCopy = new File(localLogDir, tempFile.getName());\r\n            Assert.assertEquals(\"Directory info file missing\", debugLogsExist, directorInfo.exists());\r\n            Assert.assertEquals(\"Copy of launch script missing\", debugLogsExist, scriptCopy.exists());\r\n            if (debugLogsExist) {\r\n                Assert.assertTrue(\"Directory info file size is 0\", directorInfo.length() > 0);\r\n                Assert.assertTrue(\"Size of copy of launch script is 0\", scriptCopy.length() > 0);\r\n            }\r\n        }\r\n    } finally {\r\n        if (shellFile != null && shellFile.exists()) {\r\n            shellFile.delete();\r\n        }\r\n        if (tempFile != null && tempFile.exists()) {\r\n            tempFile.delete();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testContainerLaunchOnConfigurationError",
  "errType" : null,
  "containingMethodsNum" : 30,
  "sourceCodeText" : "void testContainerLaunchOnConfigurationError() throws Exception\n{\r\n    Dispatcher dispatcher = mock(Dispatcher.class);\r\n    EventHandler handler = mock(EventHandler.class);\r\n    when(dispatcher.getEventHandler()).thenReturn(handler);\r\n    Application app = mock(Application.class);\r\n    ApplicationId appId = mock(ApplicationId.class);\r\n    when(appId.toString()).thenReturn(\"1\");\r\n    when(app.getAppId()).thenReturn(appId);\r\n    Container container = mock(Container.class);\r\n    ContainerId id = mock(ContainerId.class);\r\n    when(id.toString()).thenReturn(\"1\");\r\n    when(container.getContainerId()).thenReturn(id);\r\n    when(container.getUser()).thenReturn(\"user\");\r\n    when(container.localizationCountersAsString()).thenReturn(\"1,2,3,4,5\");\r\n    ContainerLaunchContext clc = mock(ContainerLaunchContext.class);\r\n    when(clc.getCommands()).thenReturn(Lists.newArrayList());\r\n    when(container.getLaunchContext()).thenReturn(clc);\r\n    Credentials credentials = mock(Credentials.class);\r\n    when(container.getCredentials()).thenReturn(credentials);\r\n    ContainerExecutor returnConfigError = mock(ContainerExecutor.class);\r\n    when(returnConfigError.launchContainer(any())).thenThrow(new ConfigurationException(\"Mock configuration error\"));\r\n    ContainerLaunch launchConfigError = new ContainerLaunch(distContext, conf, dispatcher, returnConfigError, app, container, dirsHandler, containerManager);\r\n    NodeStatusUpdater updater = mock(NodeStatusUpdater.class);\r\n    distContext.setNodeStatusUpdater(updater);\r\n    launchConfigError.call();\r\n    verify(updater, atLeastOnce()).reportException(any());\r\n    ContainerExecutor returnOtherError = mock(ContainerExecutor.class);\r\n    when(returnOtherError.launchContainer(any())).thenThrow(new IOException(\"Mock configuration error\"));\r\n    ContainerLaunch launchOtherError = new ContainerLaunch(distContext, conf, dispatcher, returnOtherError, app, container, dirsHandler, containerManager);\r\n    NodeStatusUpdater updaterNoCall = mock(NodeStatusUpdater.class);\r\n    distContext.setNodeStatusUpdater(updaterNoCall);\r\n    launchOtherError.call();\r\n    verify(updaterNoCall, never()).reportException(any());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testShellScriptBuilderStdOutandErrRedirection",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 27,
  "sourceCodeText" : "void testShellScriptBuilderStdOutandErrRedirection() throws IOException\n{\r\n    ShellScriptBuilder builder = ShellScriptBuilder.create();\r\n    Path logDir = new Path(localLogDir.getAbsolutePath());\r\n    File stdout = new File(logDir.toString(), ContainerLaunch.CONTAINER_PRE_LAUNCH_STDOUT);\r\n    File stderr = new File(logDir.toString(), ContainerLaunch.CONTAINER_PRE_LAUNCH_STDERR);\r\n    builder.stdout(logDir, ContainerLaunch.CONTAINER_PRE_LAUNCH_STDOUT);\r\n    builder.stderr(logDir, ContainerLaunch.CONTAINER_PRE_LAUNCH_STDERR);\r\n    String TEST_STDOUT_ECHO = \"Test stdout redirection\";\r\n    builder.echo(TEST_STDOUT_ECHO);\r\n    builder.mkdir(new Path(\"/invalidSrcDir\"));\r\n    builder.command(Arrays.asList(new String[] { \"unknownCommand\" }));\r\n    File shellFile = Shell.appendScriptExtension(tmpDir, \"testShellScriptBuilderStdOutandErrRedirection\");\r\n    PrintStream writer = new PrintStream(new FileOutputStream(shellFile));\r\n    builder.write(writer);\r\n    writer.close();\r\n    try {\r\n        FileUtil.setExecutable(shellFile, true);\r\n        Shell.ShellCommandExecutor shexc = new Shell.ShellCommandExecutor(new String[] { shellFile.getAbsolutePath() }, tmpDir);\r\n        try {\r\n            shexc.execute();\r\n            fail(\"builder shell command was expected to throw\");\r\n        } catch (IOException e) {\r\n            System.out.println(\"Received an expected exception: \" + e.getMessage());\r\n            Assert.assertEquals(true, stdout.exists());\r\n            BufferedReader stdoutReader = new BufferedReader(new FileReader(stdout));\r\n            String line = stdoutReader.readLine().trim();\r\n            Assert.assertEquals(TEST_STDOUT_ECHO, line);\r\n            Assert.assertEquals(null, stdoutReader.readLine());\r\n            stdoutReader.close();\r\n            Assert.assertEquals(true, stderr.exists());\r\n            Assert.assertTrue(stderr.length() > 0);\r\n        }\r\n    } finally {\r\n        FileUtil.fullyDelete(shellFile);\r\n        FileUtil.fullyDelete(stdout);\r\n        FileUtil.fullyDelete(stderr);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testShellScriptBuilderWithNoRedirection",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testShellScriptBuilderWithNoRedirection() throws IOException\n{\r\n    ShellScriptBuilder builder = ShellScriptBuilder.create();\r\n    Path logDir = new Path(localLogDir.getAbsolutePath());\r\n    File stdout = new File(logDir.toString(), ContainerLaunch.CONTAINER_PRE_LAUNCH_STDOUT);\r\n    File stderr = new File(logDir.toString(), ContainerLaunch.CONTAINER_PRE_LAUNCH_STDERR);\r\n    String TEST_STDOUT_ECHO = \"Test stdout redirection\";\r\n    builder.echo(TEST_STDOUT_ECHO);\r\n    builder.mkdir(new Path(\"/invalidSrcDir\"));\r\n    builder.command(Arrays.asList(new String[] { \"unknownCommand\" }));\r\n    File shellFile = Shell.appendScriptExtension(tmpDir, \"testShellScriptBuilderStdOutandErrRedirection\");\r\n    PrintStream writer = new PrintStream(new FileOutputStream(shellFile));\r\n    builder.write(writer);\r\n    writer.close();\r\n    try {\r\n        FileUtil.setExecutable(shellFile, true);\r\n        Shell.ShellCommandExecutor shexc = new Shell.ShellCommandExecutor(new String[] { shellFile.getAbsolutePath() }, tmpDir);\r\n        try {\r\n            shexc.execute();\r\n            fail(\"builder shell command was expected to throw\");\r\n        } catch (IOException e) {\r\n            System.out.println(\"Received an expected exception: \" + e.getMessage());\r\n            Assert.assertEquals(false, stdout.exists());\r\n            Assert.assertEquals(false, stderr.exists());\r\n        }\r\n    } finally {\r\n        FileUtil.fullyDelete(shellFile);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testInvalidEnvVariableSubstitutionType1",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testInvalidEnvVariableSubstitutionType1() throws IOException\n{\r\n    Map<String, String> env = new HashMap<String, String>();\r\n    String invalidEnv = \"version${foo.version}\";\r\n    if (Shell.WINDOWS) {\r\n        invalidEnv = \"version%foo%<>^&|=:version%\";\r\n    }\r\n    env.put(\"testVar\", invalidEnv);\r\n    validateShellExecutorForDifferentEnvs(env);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testInvalidEnvVariableSubstitutionType2",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testInvalidEnvVariableSubstitutionType2() throws IOException\n{\r\n    Map<String, String> env = new HashMap<String, String>();\r\n    String invalidEnv = \"/abc:/${foo.path}:/$bar\";\r\n    if (Shell.WINDOWS) {\r\n        invalidEnv = \"/abc:/%foo%<>^&|=:path%:/%bar%\";\r\n    }\r\n    env.put(\"testPath\", invalidEnv);\r\n    validateShellExecutorForDifferentEnvs(env);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "validateShellExecutorForDifferentEnvs",
  "errType" : [ "ExitCodeException" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void validateShellExecutorForDifferentEnvs(Map<String, String> env) throws IOException\n{\r\n    File shellFile = null;\r\n    try {\r\n        shellFile = Shell.appendScriptExtension(tmpDir, \"hello\");\r\n        Map<Path, List<String>> resources = new HashMap<Path, List<String>>();\r\n        FileOutputStream fos = new FileOutputStream(shellFile);\r\n        FileUtil.setExecutable(shellFile, true);\r\n        List<String> commands = new ArrayList<String>();\r\n        DefaultContainerExecutor executor = new DefaultContainerExecutor();\r\n        executor.setConf(new Configuration());\r\n        LinkedHashSet<String> nmVars = new LinkedHashSet<>();\r\n        executor.writeLaunchEnv(fos, env, resources, commands, new Path(localLogDir.getAbsolutePath()), user, nmVars);\r\n        fos.flush();\r\n        fos.close();\r\n        Map<String, String> cmdEnv = new HashMap<String, String>();\r\n        cmdEnv.put(\"LANG\", \"C\");\r\n        Shell.ShellCommandExecutor shexc = new Shell.ShellCommandExecutor(new String[] { shellFile.getAbsolutePath() }, tmpDir, cmdEnv);\r\n        try {\r\n            shexc.execute();\r\n            Assert.fail(\"Should catch exception\");\r\n        } catch (ExitCodeException e) {\r\n            Assert.assertTrue(shexc.getExitCode() != 0);\r\n        }\r\n    } finally {\r\n        if (shellFile != null && shellFile.exists()) {\r\n            shellFile.delete();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testValidEnvVariableSubstitution",
  "errType" : [ "ExitCodeException" ],
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testValidEnvVariableSubstitution() throws IOException\n{\r\n    File shellFile = null;\r\n    try {\r\n        shellFile = Shell.appendScriptExtension(tmpDir, \"hello\");\r\n        Map<Path, List<String>> resources = new HashMap<Path, List<String>>();\r\n        FileOutputStream fos = new FileOutputStream(shellFile);\r\n        FileUtil.setExecutable(shellFile, true);\r\n        Map<String, String> env = new LinkedHashMap<String, String>();\r\n        env.put(\"foo\", \"2.4.6\");\r\n        env.put(\"testVar\", \"version${foo}\");\r\n        List<String> commands = new ArrayList<String>();\r\n        DefaultContainerExecutor executor = new DefaultContainerExecutor();\r\n        Configuration execConf = new Configuration();\r\n        execConf.setBoolean(YarnConfiguration.NM_LOG_CONTAINER_DEBUG_INFO, false);\r\n        executor.setConf(execConf);\r\n        LinkedHashSet<String> nmVars = new LinkedHashSet<>();\r\n        executor.writeLaunchEnv(fos, env, resources, commands, new Path(localLogDir.getAbsolutePath()), user, nmVars);\r\n        fos.flush();\r\n        fos.close();\r\n        Map<String, String> cmdEnv = new HashMap<String, String>();\r\n        cmdEnv.put(\"LANG\", \"C\");\r\n        Shell.ShellCommandExecutor shexc = new Shell.ShellCommandExecutor(new String[] { shellFile.getAbsolutePath() }, tmpDir, cmdEnv);\r\n        try {\r\n            shexc.execute();\r\n        } catch (ExitCodeException e) {\r\n            Assert.fail(\"Should not catch exception\");\r\n        }\r\n        Assert.assertTrue(shexc.getExitCode() == 0);\r\n    } finally {\r\n        if (shellFile != null && shellFile.exists()) {\r\n            shellFile.delete();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "assertOrderEnvByDependencies",
  "errType" : null,
  "containingMethodsNum" : 28,
  "sourceCodeText" : "void assertOrderEnvByDependencies(final Map<String, String> env, final ContainerLaunch.ShellScriptBuilder sb)\n{\r\n    LinkedHashMap<String, String> copy = new LinkedHashMap<>();\r\n    copy.putAll(env);\r\n    Map<String, String> ordered = sb.orderEnvByDependencies(env);\r\n    Assert.assertEquals(\"Input env map has been altered because its size changed\", copy.size(), env.size());\r\n    final Iterator<Map.Entry<String, String>> ai = env.entrySet().iterator();\r\n    for (Map.Entry<String, String> e : copy.entrySet()) {\r\n        Map.Entry<String, String> a = ai.next();\r\n        Assert.assertTrue(\"Keys have been reordered in input env map\", e.getKey() == a.getKey());\r\n        Assert.assertTrue(\"Key \" + e.getKey() + \" does not longer points to its \" + \"original value have been reordered in input env map\", e.getValue() == a.getValue());\r\n    }\r\n    Assert.assertEquals(\"Input env map and ordered env map must have the same size, env=\" + env + \", ordered=\" + ordered, env.size(), ordered.size());\r\n    int iA = -1;\r\n    int iB = -1;\r\n    int iC = -1;\r\n    int iD = -1;\r\n    int icA = -1;\r\n    int icB = -1;\r\n    int icC = -1;\r\n    int i = 0;\r\n    for (Map.Entry<String, String> e : ordered.entrySet()) {\r\n        if (\"A\".equals(e.getKey())) {\r\n            iA = i++;\r\n        } else if (\"B\".equals(e.getKey())) {\r\n            iB = i++;\r\n        } else if (\"C\".equals(e.getKey())) {\r\n            iC = i++;\r\n        } else if (\"D\".equals(e.getKey())) {\r\n            iD = i++;\r\n        } else if (\"cyclic_A\".equals(e.getKey())) {\r\n            icA = i++;\r\n        } else if (\"cyclic_B\".equals(e.getKey())) {\r\n            icB = i++;\r\n        } else if (\"cyclic_C\".equals(e.getKey())) {\r\n            icC = i++;\r\n        } else {\r\n            Assert.fail(\"Test need to ne fixed, got an unexpected env entry \" + e.getKey());\r\n        }\r\n    }\r\n    Assert.assertTrue(\"when reordering \" + env + \" into \" + ordered + \", B should be after A\", iA < 0 || iB < 0 || iA < iB);\r\n    Assert.assertTrue(\"when reordering \" + env + \" into \" + ordered + \", C should be after B\", iB < 0 || iC < 0 || iB < iC);\r\n    Assert.assertTrue(\"when reordering \" + env + \" into \" + ordered + \", D should be after A\", iA < 0 || iD < 0 || iA < iD);\r\n    Assert.assertTrue(\"when reordering \" + env + \" into \" + ordered + \", D should be after B\", iB < 0 || iD < 0 || iB < iD);\r\n    Assert.assertTrue(\"when reordering \" + env + \" into \" + ordered + \", cyclic_A should be after C\", iC < 0 || icA < 0 || icB < 0 || icC < 0 || iC < icA);\r\n    Assert.assertTrue(\"when reordering \" + env + \" into \" + ordered + \", cyclic_B should be after C\", iC < 0 || icB < 0 || icC < 0 || iC < icB);\r\n    Assert.assertTrue(\"when reordering \" + env + \" into \" + ordered + \", cyclic_C should be after C\", iC < 0 || icC < 0 || iC < icC);\r\n    Assert.assertTrue(\"when reordering \" + env + \" into \" + ordered + \", cyclic_A should be after cyclic_B if no cyclic_C\", icC >= 0 || icA < 0 || icB < 0 || icB < icA);\r\n    Assert.assertTrue(\"when reordering \" + env + \" into \" + ordered + \", cyclic_B should be after cyclic_C if no cyclic_A\", icA >= 0 || icB < 0 || icC < 0 || icC < icB);\r\n    Assert.assertTrue(\"when reordering \" + env + \" into \" + ordered + \", cyclic_C should be after cyclic_A if no cyclic_B\", icA >= 0 || icC < 0 || icA < 0 || icA < icC);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "asSet",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<String> asSet(String... str)\n{\r\n    final Set<String> set = new HashSet<>();\r\n    Collections.addAll(set, str);\r\n    return set;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testOrderEnvByDependencies",
  "errType" : [ "Exception", "Exception" ],
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testOrderEnvByDependencies()\n{\r\n    final Map<String, Set<String>> fakeDeps = new HashMap<>();\r\n    fakeDeps.put(\"Aval\", Collections.emptySet());\r\n    fakeDeps.put(\"Bval\", asSet(\"A\"));\r\n    fakeDeps.put(\"Cval\", asSet(\"B\"));\r\n    fakeDeps.put(\"Dval\", asSet(\"A\", \"B\"));\r\n    fakeDeps.put(\"cyclic_Aval\", asSet(\"cyclic_B\"));\r\n    fakeDeps.put(\"cyclic_Bval\", asSet(\"cyclic_C\"));\r\n    fakeDeps.put(\"cyclic_Cval\", asSet(\"cyclic_A\", \"C\"));\r\n    final ContainerLaunch.ShellScriptBuilder sb = new ContainerLaunch.ShellScriptBuilder() {\r\n\r\n        @Override\r\n        public Set<String> getEnvDependencies(final String envVal) {\r\n            return fakeDeps.get(envVal);\r\n        }\r\n\r\n        @Override\r\n        protected void mkdir(Path path) throws IOException {\r\n        }\r\n\r\n        @Override\r\n        public void listDebugInformation(Path output) throws IOException {\r\n        }\r\n\r\n        @Override\r\n        protected void link(Path src, Path dst) throws IOException {\r\n        }\r\n\r\n        @Override\r\n        public void env(String key, String value) throws IOException {\r\n        }\r\n\r\n        @Override\r\n        public void whitelistedEnv(String key, String value) throws IOException {\r\n        }\r\n\r\n        @Override\r\n        public void copyDebugInformation(Path src, Path dst) throws IOException {\r\n        }\r\n\r\n        @Override\r\n        public void command(List<String> command) throws IOException {\r\n        }\r\n\r\n        @Override\r\n        public void setStdOut(Path stdout) throws IOException {\r\n        }\r\n\r\n        @Override\r\n        public void setStdErr(Path stdout) throws IOException {\r\n        }\r\n\r\n        @Override\r\n        public void echo(String echoStr) throws IOException {\r\n        }\r\n    };\r\n    try {\r\n        Assert.assertNull(\"Ordering a null env map must return a null value.\", sb.orderEnvByDependencies(null));\r\n    } catch (Exception e) {\r\n        Assert.fail(\"null value is to be supported\");\r\n    }\r\n    try {\r\n        Assert.assertEquals(\"Ordering an empty env map must return an empty map.\", 0, sb.orderEnvByDependencies(Collections.emptyMap()).size());\r\n    } catch (Exception e) {\r\n        Assert.fail(\"Empty map is to be supported\");\r\n    }\r\n    final Map<String, String> combination = new LinkedHashMap<>();\r\n    class TestEnv {\r\n\r\n        private final String key;\r\n\r\n        private final String value;\r\n\r\n        private boolean used = false;\r\n\r\n        TestEnv(String key, String value) {\r\n            this.key = key;\r\n            this.value = value;\r\n        }\r\n\r\n        void generateCombinationAndTest(int nbItems, final ArrayList<TestEnv> keylist) {\r\n            used = true;\r\n            combination.put(key, value);\r\n            try {\r\n                if (nbItems == 0) {\r\n                    assertOrderEnvByDependencies(combination, sb);\r\n                    return;\r\n                }\r\n                for (TestEnv localEnv : keylist) {\r\n                    if (!localEnv.used) {\r\n                        localEnv.generateCombinationAndTest(nbItems - 1, keylist);\r\n                    }\r\n                }\r\n            } finally {\r\n                combination.remove(key);\r\n                used = false;\r\n            }\r\n        }\r\n    }\r\n    final ArrayList<TestEnv> keys = new ArrayList<>();\r\n    for (String key : new String[] { \"A\", \"B\", \"C\", \"D\", \"cyclic_A\", \"cyclic_B\", \"cyclic_C\" }) {\r\n        keys.add(new TestEnv(key, key + \"val\"));\r\n    }\r\n    for (int count = keys.size(); count > 0; count--) {\r\n        for (TestEnv env : keys) {\r\n            env.generateCombinationAndTest(count, keys);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 3,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testDistributedCacheDirs",
  "errType" : null,
  "containingMethodsNum" : 40,
  "sourceCodeText" : "void testDistributedCacheDirs() throws Exception\n{\r\n    Container container = mock(Container.class);\r\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    ContainerId containerId = ContainerId.newContainerId(ApplicationAttemptId.newInstance(appId, 1), 1);\r\n    when(container.getContainerId()).thenReturn(containerId);\r\n    when(container.getUser()).thenReturn(\"test\");\r\n    when(container.localizationCountersAsString()).thenReturn(\"1,2,3,4,5\");\r\n    when(container.getLocalizedResources()).thenReturn(Collections.<Path, List<String>>emptyMap());\r\n    Dispatcher dispatcher = mock(Dispatcher.class);\r\n    ContainerLaunchContext clc = mock(ContainerLaunchContext.class);\r\n    when(clc.getCommands()).thenReturn(Collections.<String>emptyList());\r\n    when(container.getLaunchContext()).thenReturn(clc);\r\n    @SuppressWarnings(\"rawtypes\")\r\n    ContainerExitHandler eventHandler = mock(ContainerExitHandler.class);\r\n    when(dispatcher.getEventHandler()).thenReturn(eventHandler);\r\n    Application app = mock(Application.class);\r\n    when(app.getAppId()).thenReturn(appId);\r\n    when(app.getUser()).thenReturn(\"test\");\r\n    Credentials creds = mock(Credentials.class);\r\n    when(container.getCredentials()).thenReturn(creds);\r\n    ((NMContext) context).setNodeId(NodeId.newInstance(\"127.0.0.1\", HTTP_PORT));\r\n    ContainerExecutor mockExecutor = mock(ContainerExecutor.class);\r\n    LocalDirsHandlerService mockDirsHandler = mock(LocalDirsHandlerService.class);\r\n    List<String> localDirsForRead = new ArrayList<String>();\r\n    String localDir1 = new File(\"target\", this.getClass().getSimpleName() + \"-localDir1\").getAbsoluteFile().toString();\r\n    String localDir2 = new File(\"target\", this.getClass().getSimpleName() + \"-localDir2\").getAbsoluteFile().toString();\r\n    localDirsForRead.add(localDir1);\r\n    localDirsForRead.add(localDir2);\r\n    List<String> localDirs = new ArrayList();\r\n    localDirs.add(localDir1);\r\n    Path logPathForWrite = new Path(localDirs.get(0));\r\n    when(mockDirsHandler.areDisksHealthy()).thenReturn(true);\r\n    when(mockDirsHandler.getLocalDirsForRead()).thenReturn(localDirsForRead);\r\n    when(mockDirsHandler.getLocalDirs()).thenReturn(localDirs);\r\n    when(mockDirsHandler.getLogDirs()).thenReturn(localDirs);\r\n    when(mockDirsHandler.getLogPathForWrite(anyString(), anyBoolean())).thenReturn(logPathForWrite);\r\n    when(mockDirsHandler.getLocalPathForWrite(anyString())).thenReturn(logPathForWrite);\r\n    when(mockDirsHandler.getLocalPathForWrite(anyString(), anyLong(), anyBoolean())).thenReturn(logPathForWrite);\r\n    ContainerLaunch launch = new ContainerLaunch(context, conf, dispatcher, mockExecutor, app, container, mockDirsHandler, containerManager);\r\n    launch.call();\r\n    ArgumentCaptor<ContainerStartContext> ctxCaptor = ArgumentCaptor.forClass(ContainerStartContext.class);\r\n    verify(mockExecutor, times(1)).launchContainer(ctxCaptor.capture());\r\n    ContainerStartContext ctx = ctxCaptor.getValue();\r\n    Assert.assertEquals(StringUtils.join(\",\", launch.getNMFilecacheDirs(localDirsForRead)), StringUtils.join(\",\", ctx.getFilecacheDirs()));\r\n    Assert.assertEquals(StringUtils.join(\",\", launch.getUserFilecacheDirs(localDirsForRead)), StringUtils.join(\",\", ctx.getUserFilecacheDirs()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testFilesAndEnvWithoutHTTPS",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testFilesAndEnvWithoutHTTPS() throws Exception\n{\r\n    testFilesAndEnv(false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testFilesAndEnvWithHTTPS",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testFilesAndEnvWithHTTPS() throws Exception\n{\r\n    testFilesAndEnv(true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testFilesAndEnv",
  "errType" : null,
  "containingMethodsNum" : 53,
  "sourceCodeText" : "void testFilesAndEnv(boolean https) throws Exception\n{\r\n    Dispatcher dispatcher = mock(Dispatcher.class);\r\n    EventHandler handler = mock(EventHandler.class);\r\n    when(dispatcher.getEventHandler()).thenReturn(handler);\r\n    ContainerExecutor containerExecutor = mock(ContainerExecutor.class);\r\n    doAnswer(new Answer<Void>() {\r\n\r\n        @Override\r\n        public Void answer(InvocationOnMock invocation) throws Throwable {\r\n            Object[] args = invocation.getArguments();\r\n            DataOutputStream dos = (DataOutputStream) args[0];\r\n            dos.writeBytes(\"script\");\r\n            return null;\r\n        }\r\n    }).when(containerExecutor).writeLaunchEnv(any(), any(), any(), any(), any(), any(), any());\r\n    Application app = mock(Application.class);\r\n    ApplicationId appId = mock(ApplicationId.class);\r\n    when(appId.toString()).thenReturn(\"1\");\r\n    when(app.getAppId()).thenReturn(appId);\r\n    Container container = mock(Container.class);\r\n    ContainerId id = mock(ContainerId.class);\r\n    when(id.toString()).thenReturn(\"1\");\r\n    when(container.getContainerId()).thenReturn(id);\r\n    when(container.getUser()).thenReturn(\"user\");\r\n    ContainerLaunchContext clc = mock(ContainerLaunchContext.class);\r\n    when(clc.getCommands()).thenReturn(Lists.newArrayList());\r\n    when(container.getLaunchContext()).thenReturn(clc);\r\n    Credentials credentials = mock(Credentials.class);\r\n    when(container.getCredentials()).thenReturn(credentials);\r\n    when(container.localizationCountersAsString()).thenReturn(\"1,2,3,4,5\");\r\n    doAnswer(new Answer<Void>() {\r\n\r\n        @Override\r\n        public Void answer(InvocationOnMock invocation) throws Throwable {\r\n            Object[] args = invocation.getArguments();\r\n            DataOutputStream dos = (DataOutputStream) args[0];\r\n            dos.writeBytes(\"credentials\");\r\n            return null;\r\n        }\r\n    }).when(credentials).writeTokenStorageToStream(any(DataOutputStream.class));\r\n    if (https) {\r\n        when(credentials.getSecretKey(AMSecretKeys.YARN_APPLICATION_AM_KEYSTORE)).thenReturn(\"keystore\".getBytes());\r\n        when(credentials.getSecretKey(AMSecretKeys.YARN_APPLICATION_AM_KEYSTORE_PASSWORD)).thenReturn(\"keystore_password\".getBytes());\r\n        when(credentials.getSecretKey(AMSecretKeys.YARN_APPLICATION_AM_TRUSTSTORE)).thenReturn(\"truststore\".getBytes());\r\n        when(credentials.getSecretKey(AMSecretKeys.YARN_APPLICATION_AM_TRUSTSTORE_PASSWORD)).thenReturn(\"truststore_password\".getBytes());\r\n    }\r\n    ContainerLaunch containerLaunch = new ContainerLaunch(distContext, conf, dispatcher, containerExecutor, app, container, dirsHandler, containerManager);\r\n    containerLaunch.call();\r\n    ArgumentCaptor<ContainerStartContext> cscArgument = ArgumentCaptor.forClass(ContainerStartContext.class);\r\n    verify(containerExecutor, times(1)).launchContainer(cscArgument.capture());\r\n    ContainerStartContext csc = cscArgument.getValue();\r\n    Path nmPrivate = dirsHandler.getLocalPathForWrite(ResourceLocalizationService.NM_PRIVATE_DIR + Path.SEPARATOR + appId.toString() + Path.SEPARATOR + id.toString());\r\n    Assert.assertEquals(new Path(nmPrivate, ContainerLaunch.CONTAINER_SCRIPT), csc.getNmPrivateContainerScriptPath());\r\n    Assert.assertEquals(new Path(nmPrivate, String.format(ContainerExecutor.TOKEN_FILE_NAME_FMT, id.toString())), csc.getNmPrivateTokensPath());\r\n    Assert.assertEquals(\"script\", readStringFromPath(csc.getNmPrivateContainerScriptPath()));\r\n    Assert.assertEquals(\"credentials\", readStringFromPath(csc.getNmPrivateTokensPath()));\r\n    if (https) {\r\n        Assert.assertEquals(new Path(nmPrivate, ContainerLaunch.KEYSTORE_FILE), csc.getNmPrivateKeystorePath());\r\n        Assert.assertEquals(new Path(nmPrivate, ContainerLaunch.TRUSTSTORE_FILE), csc.getNmPrivateTruststorePath());\r\n        Assert.assertEquals(\"keystore\", readStringFromPath(csc.getNmPrivateKeystorePath()));\r\n        Assert.assertEquals(\"truststore\", readStringFromPath(csc.getNmPrivateTruststorePath()));\r\n    } else {\r\n        Assert.assertNull(csc.getNmPrivateKeystorePath());\r\n        Assert.assertNull(csc.getNmPrivateTruststorePath());\r\n    }\r\n    ArgumentCaptor<Map> envArgument = ArgumentCaptor.forClass(Map.class);\r\n    verify(containerExecutor, times(1)).writeLaunchEnv(any(), envArgument.capture(), any(), any(), any(), any(), any());\r\n    Map env = envArgument.getValue();\r\n    Path workDir = dirsHandler.getLocalPathForWrite(ContainerLocalizer.USERCACHE + Path.SEPARATOR + container.getUser() + Path.SEPARATOR + ContainerLocalizer.APPCACHE + Path.SEPARATOR + app.getAppId().toString() + Path.SEPARATOR + container.getContainerId().toString());\r\n    Assert.assertEquals(new Path(workDir, ContainerLaunch.FINAL_CONTAINER_TOKENS_FILE).toUri().getPath(), env.get(ApplicationConstants.CONTAINER_TOKEN_FILE_ENV_NAME));\r\n    if (https) {\r\n        Assert.assertEquals(new Path(workDir, ContainerLaunch.KEYSTORE_FILE).toUri().getPath(), env.get(ApplicationConstants.KEYSTORE_FILE_LOCATION_ENV_NAME));\r\n        Assert.assertEquals(\"keystore_password\", env.get(ApplicationConstants.KEYSTORE_PASSWORD_ENV_NAME));\r\n        Assert.assertEquals(new Path(workDir, ContainerLaunch.TRUSTSTORE_FILE).toUri().getPath(), env.get(ApplicationConstants.TRUSTSTORE_FILE_LOCATION_ENV_NAME));\r\n        Assert.assertEquals(\"truststore_password\", env.get(ApplicationConstants.TRUSTSTORE_PASSWORD_ENV_NAME));\r\n    } else {\r\n        Assert.assertNull(env.get(\"KEYSTORE_FILE_LOCATION\"));\r\n        Assert.assertNull(env.get(\"KEYSTORE_PASSWORD\"));\r\n        Assert.assertNull(env.get(\"TRUSTSTORE_FILE_LOCATION\"));\r\n        Assert.assertNull(env.get(\"TRUSTSTORE_PASSWORD\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "readStringFromPath",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String readStringFromPath(Path p) throws IOException\n{\r\n    FileSystem fs = FileSystem.get(conf);\r\n    try (FSDataInputStream is = fs.open(p)) {\r\n        byte[] bytes = IOUtils.readFullyToByteArray(is);\r\n        return new String(bytes);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testExpandNmAdmEnv",
  "errType" : null,
  "containingMethodsNum" : 35,
  "sourceCodeText" : "void testExpandNmAdmEnv() throws Exception\n{\r\n    Dispatcher dispatcher = mock(Dispatcher.class);\r\n    EventHandler handler = mock(EventHandler.class);\r\n    when(dispatcher.getEventHandler()).thenReturn(handler);\r\n    ContainerExecutor containerExecutor = mock(ContainerExecutor.class);\r\n    doAnswer(new Answer<Void>() {\r\n\r\n        @Override\r\n        public Void answer(InvocationOnMock invocation) throws Throwable {\r\n            Object[] args = invocation.getArguments();\r\n            DataOutputStream dos = (DataOutputStream) args[0];\r\n            dos.writeBytes(\"script\");\r\n            return null;\r\n        }\r\n    }).when(containerExecutor).writeLaunchEnv(any(), any(), any(), any(), any(), any(), any());\r\n    Application app = mock(Application.class);\r\n    ApplicationId appId = mock(ApplicationId.class);\r\n    when(appId.toString()).thenReturn(\"1\");\r\n    when(app.getAppId()).thenReturn(appId);\r\n    Container container = mock(Container.class);\r\n    ContainerId id = mock(ContainerId.class);\r\n    when(id.toString()).thenReturn(\"1\");\r\n    when(container.getContainerId()).thenReturn(id);\r\n    when(container.getUser()).thenReturn(\"user\");\r\n    ContainerLaunchContext clc = mock(ContainerLaunchContext.class);\r\n    when(clc.getCommands()).thenReturn(Lists.newArrayList());\r\n    when(container.getLaunchContext()).thenReturn(clc);\r\n    Credentials credentials = mock(Credentials.class);\r\n    when(container.getCredentials()).thenReturn(credentials);\r\n    when(container.localizationCountersAsString()).thenReturn(\"1,2,3,4,5\");\r\n    Map<String, String> userSetEnv = new HashMap<String, String>();\r\n    String userVar = \"USER_VAR\";\r\n    String userVarVal = \"user-var-value\";\r\n    userSetEnv.put(userVar, userVarVal);\r\n    when(clc.getEnvironment()).thenReturn(userSetEnv);\r\n    YarnConfiguration localConf = new YarnConfiguration(conf);\r\n    String testKey1 = \"TEST_KEY1\";\r\n    String testVal1 = \"relies on {{USER_VAR}}\";\r\n    localConf.set(YarnConfiguration.NM_ADMIN_USER_ENV + \".\" + testKey1, testVal1);\r\n    String testVal1Expanded;\r\n    if (Shell.WINDOWS) {\r\n        testVal1Expanded = \"relies on %USER_VAR%\";\r\n    } else {\r\n        testVal1Expanded = \"relies on $USER_VAR\";\r\n    }\r\n    String testKey2 = \"TEST_KEY2\";\r\n    String testVal2 = \"relies on {{TEST_KEY1}}\";\r\n    localConf.set(YarnConfiguration.NM_ADMIN_USER_ENV + \".\" + testKey2, testVal2);\r\n    String testVal2Expanded;\r\n    if (Shell.WINDOWS) {\r\n        testVal2Expanded = \"relies on %TEST_KEY1%\";\r\n    } else {\r\n        testVal2Expanded = \"relies on $TEST_KEY1\";\r\n    }\r\n    ContainerLaunch containerLaunch = new ContainerLaunch(distContext, localConf, dispatcher, containerExecutor, app, container, dirsHandler, containerManager);\r\n    containerLaunch.call();\r\n    ArgumentCaptor<ContainerStartContext> cscArgument = ArgumentCaptor.forClass(ContainerStartContext.class);\r\n    verify(containerExecutor, times(1)).launchContainer(cscArgument.capture());\r\n    ContainerStartContext csc = cscArgument.getValue();\r\n    Assert.assertEquals(\"script\", readStringFromPath(csc.getNmPrivateContainerScriptPath()));\r\n    ArgumentCaptor<Map> envArgument = ArgumentCaptor.forClass(Map.class);\r\n    verify(containerExecutor, times(1)).writeLaunchEnv(any(), envArgument.capture(), any(), any(), any(), any(), any());\r\n    Map env = envArgument.getValue();\r\n    Assert.assertEquals(userVarVal, env.get(userVar));\r\n    Assert.assertEquals(testVal1Expanded, env.get(testKey1));\r\n    Assert.assertEquals(testVal2Expanded, env.get(testKey2));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "setState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setState(ApplicationState state)\n{\r\n    this.appState = state;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUser()\n{\r\n    return user;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getContainers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<ContainerId, Container> getContainers()\n{\r\n    return containers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getAppId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationId getAppId()\n{\r\n    return appId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getApplicationState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationState getApplicationState()\n{\r\n    return appState;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "handle",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void handle(ApplicationEvent event)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getFlowName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getFlowName()\n{\r\n    return flowName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getFlowVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getFlowVersion()\n{\r\n    return flowVersion;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getFlowRunId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getFlowRunId()\n{\r\n    return flowRunId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setup()\n{\r\n    TEST_ROOT_DIR.mkdirs();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    if (TEST_ROOT_DIR.exists()) {\r\n        FileContext.getLocalFSFileContext().delete(new Path(TEST_ROOT_DIR.getAbsolutePath()), true);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "writeNodeHealthScriptFile",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void writeNodeHealthScriptFile() throws IOException, InterruptedException\n{\r\n    try (PrintWriter pw = new PrintWriter(new FileOutputStream(nodeHealthScriptFile))) {\r\n        FileUtil.chmod(nodeHealthScriptFile.getCanonicalPath(), \"u+rwx\");\r\n        pw.println(\"\");\r\n        pw.flush();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "getConfForNodeHealthScript",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "Configuration getConfForNodeHealthScript(String scriptName)\n{\r\n    Configuration conf = new Configuration();\r\n    conf.set(YarnConfiguration.NM_HEALTH_CHECK_SCRIPTS, scriptName);\r\n    String timeoutConfig = String.format(YarnConfiguration.NM_HEALTH_CHECK_SCRIPT_TIMEOUT_MS_TEMPLATE, scriptName);\r\n    conf.setLong(timeoutConfig, 1000L);\r\n    String intervalConfig = String.format(YarnConfiguration.NM_HEALTH_CHECK_SCRIPT_INTERVAL_MS_TEMPLATE, scriptName);\r\n    conf.setLong(intervalConfig, 500L);\r\n    String pathConfig = String.format(YarnConfiguration.NM_HEALTH_CHECK_SCRIPT_PATH_TEMPLATE, scriptName);\r\n    conf.set(pathConfig, nodeHealthScriptFile.getAbsolutePath());\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "setHealthStatus",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setHealthStatus(NodeHealthStatus healthStatus, boolean isHealthy, String healthReport, long lastHealthReportTime)\n{\r\n    healthStatus.setHealthReport(healthReport);\r\n    healthStatus.setIsNodeHealthy(isHealthy);\r\n    healthStatus.setLastHealthReportTime(lastHealthReportTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "testNodeHealthService",
  "errType" : null,
  "containingMethodsNum" : 33,
  "sourceCodeText" : "void testNodeHealthService() throws Exception\n{\r\n    RecordFactory factory = RecordFactoryProvider.getRecordFactory(null);\r\n    NodeHealthStatus healthStatus = factory.newRecordInstance(NodeHealthStatus.class);\r\n    String scriptName = \"test\";\r\n    Configuration conf = getConfForNodeHealthScript(scriptName);\r\n    conf.writeXml(new FileOutputStream(NODE_HEALTH_CONFIG_FILE));\r\n    conf.addResource(NODE_HEALTH_CONFIG_FILE.getName());\r\n    writeNodeHealthScriptFile();\r\n    LocalDirsHandlerService dirsHandler = new LocalDirsHandlerService();\r\n    NodeHealthScriptRunner nodeHealthScriptRunner = NodeHealthScriptRunner.newInstance(scriptName, conf);\r\n    if (nodeHealthScriptRunner == null) {\r\n        fail(\"Should have created NodeHealthScriptRunner instance\");\r\n    }\r\n    nodeHealthScriptRunner = spy(nodeHealthScriptRunner);\r\n    NodeHealthCheckerService nodeHealthChecker = new NodeHealthCheckerService(dirsHandler);\r\n    nodeHealthChecker.addHealthReporter(nodeHealthScriptRunner);\r\n    nodeHealthChecker.init(conf);\r\n    doReturn(true).when(nodeHealthScriptRunner).isHealthy();\r\n    doReturn(\"\").when(nodeHealthScriptRunner).getHealthReport();\r\n    setHealthStatus(healthStatus, nodeHealthChecker.isHealthy(), nodeHealthChecker.getHealthReport(), nodeHealthChecker.getLastHealthReportTime());\r\n    LOG.info(\"Checking initial healthy condition\");\r\n    Assert.assertTrue(\"Node health status reported unhealthy\", healthStatus.getIsNodeHealthy());\r\n    Assert.assertTrue(\"Node health status reported unhealthy\", healthStatus.getHealthReport().equals(nodeHealthChecker.getHealthReport()));\r\n    doReturn(false).when(nodeHealthScriptRunner).isHealthy();\r\n    setHealthStatus(healthStatus, nodeHealthChecker.isHealthy(), nodeHealthChecker.getHealthReport(), nodeHealthChecker.getLastHealthReportTime());\r\n    LOG.info(\"Checking Healthy--->Unhealthy\");\r\n    Assert.assertFalse(\"Node health status reported healthy\", healthStatus.getIsNodeHealthy());\r\n    Assert.assertTrue(\"Node health status reported healthy\", healthStatus.getHealthReport().equals(nodeHealthChecker.getHealthReport()));\r\n    doReturn(true).when(nodeHealthScriptRunner).isHealthy();\r\n    setHealthStatus(healthStatus, nodeHealthChecker.isHealthy(), nodeHealthChecker.getHealthReport(), nodeHealthChecker.getLastHealthReportTime());\r\n    LOG.info(\"Checking UnHealthy--->healthy\");\r\n    Assert.assertTrue(\"Node health status reported unhealthy\", healthStatus.getIsNodeHealthy());\r\n    Assert.assertTrue(\"Node health status reported unhealthy\", healthStatus.getHealthReport().equals(nodeHealthChecker.getHealthReport()));\r\n    doReturn(false).when(nodeHealthScriptRunner).isHealthy();\r\n    doReturn(NodeHealthScriptRunner.NODE_HEALTH_SCRIPT_TIMED_OUT_MSG).when(nodeHealthScriptRunner).getHealthReport();\r\n    setHealthStatus(healthStatus, nodeHealthChecker.isHealthy(), nodeHealthChecker.getHealthReport(), nodeHealthChecker.getLastHealthReportTime());\r\n    LOG.info(\"Checking Healthy--->timeout\");\r\n    Assert.assertFalse(\"Node health status reported healthy even after timeout\", healthStatus.getIsNodeHealthy());\r\n    Assert.assertTrue(\"Node script time out message not propagated\", healthStatus.getHealthReport().equals(Joiner.on(NodeHealthCheckerService.SEPARATOR).skipNulls().join(NodeHealthScriptRunner.NODE_HEALTH_SCRIPT_TIMED_OUT_MSG, Strings.emptyToNull(nodeHealthChecker.getDiskHandler().getDisksHealthReport(false)))));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "testCustomHealthReporter",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testCustomHealthReporter() throws Exception\n{\r\n    String healthReport = \"dummy health report\";\r\n    HealthReporterService customHealthReporter = new HealthReporterService() {\r\n\r\n        private int counter = 0;\r\n\r\n        @Override\r\n        public boolean isHealthy() {\r\n            return counter++ % 2 == 0;\r\n        }\r\n\r\n        @Override\r\n        public String getHealthReport() {\r\n            return healthReport;\r\n        }\r\n\r\n        @Override\r\n        public long getLastHealthReportTime() {\r\n            return Long.MAX_VALUE;\r\n        }\r\n    };\r\n    Configuration conf = new Configuration();\r\n    LocalDirsHandlerService dirsHandler = new LocalDirsHandlerService();\r\n    NodeHealthCheckerService nodeHealthChecker = new NodeHealthCheckerService(dirsHandler);\r\n    nodeHealthChecker.addHealthReporter(customHealthReporter);\r\n    nodeHealthChecker.init(conf);\r\n    assertThat(nodeHealthChecker.isHealthy()).isTrue();\r\n    assertThat(nodeHealthChecker.isHealthy()).isFalse();\r\n    assertThat(nodeHealthChecker.getHealthReport()).isEqualTo(healthReport);\r\n    assertThat(nodeHealthChecker.getLastHealthReportTime()).isEqualTo(Long.MAX_VALUE);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "testExceptionReported",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testExceptionReported()\n{\r\n    Configuration conf = new Configuration();\r\n    LocalDirsHandlerService dirsHandler = new LocalDirsHandlerService();\r\n    NodeHealthCheckerService nodeHealthChecker = new NodeHealthCheckerService(dirsHandler);\r\n    nodeHealthChecker.init(conf);\r\n    assertThat(nodeHealthChecker.isHealthy()).isTrue();\r\n    String message = \"An exception was thrown.\";\r\n    Exception exception = new Exception(message);\r\n    nodeHealthChecker.reportException(exception);\r\n    assertThat(nodeHealthChecker.isHealthy()).isFalse();\r\n    assertThat(nodeHealthChecker.getHealthReport()).isEqualTo(message);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "seek",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void seek(long pos) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getPos",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getPos() throws IOException\n{\r\n    return -1;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "seekToNewSource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean seekToNewSource(long targetPos) throws IOException\n{\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "read",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int read(long position, byte[] buffer, int offset, int length) throws IOException\n{\r\n    return -1;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "readFully",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void readFully(long position, byte[] buffer, int offset, int length) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "readFully",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void readFully(long position, byte[] buffer) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setup()\n{\r\n    conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.NM_RECOVERY_ENABLED, true);\r\n    stateStore = new NMMemoryStateStoreService();\r\n    stateStore.init(conf);\r\n    stateStore.start();\r\n    secretManager = new AMRMProxyTokenSecretManager(stateStore);\r\n    secretManager.init(conf);\r\n    secretManager.start();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "breakdown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void breakdown()\n{\r\n    if (secretManager != null) {\r\n        secretManager.stop();\r\n    }\r\n    if (stateStore != null) {\r\n        stateStore.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "testNormalCase",
  "errType" : [ "InvalidToken" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testNormalCase() throws IOException\n{\r\n    ApplicationId appId = ApplicationId.newInstance(1, 1);\r\n    ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    Token<AMRMTokenIdentifier> localToken = secretManager.createAndGetAMRMToken(attemptId);\r\n    AMRMTokenIdentifier identifier = secretManager.createIdentifier();\r\n    identifier.readFields(new DataInputStream(new ByteArrayInputStream(localToken.getIdentifier())));\r\n    secretManager.retrievePassword(identifier);\r\n    secretManager.applicationMasterFinished(attemptId);\r\n    try {\r\n        secretManager.retrievePassword(identifier);\r\n        Assert.fail(\"Expect InvalidToken exception\");\r\n    } catch (InvalidToken e) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "testRecovery",
  "errType" : [ "InvalidToken" ],
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void testRecovery() throws IOException\n{\r\n    ApplicationId appId = ApplicationId.newInstance(1, 1);\r\n    ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    Token<AMRMTokenIdentifier> localToken = secretManager.createAndGetAMRMToken(attemptId);\r\n    AMRMTokenIdentifier identifier = secretManager.createIdentifier();\r\n    identifier.readFields(new DataInputStream(new ByteArrayInputStream(localToken.getIdentifier())));\r\n    secretManager.retrievePassword(identifier);\r\n    secretManager.rollMasterKey();\r\n    secretManager.stop();\r\n    secretManager = new AMRMProxyTokenSecretManager(stateStore);\r\n    secretManager.init(conf);\r\n    secretManager.recover(stateStore.loadAMRMProxyState());\r\n    secretManager.start();\r\n    secretManager.createAndGetAMRMToken(attemptId);\r\n    secretManager.retrievePassword(identifier);\r\n    secretManager.activateNextMasterKey();\r\n    secretManager.stop();\r\n    secretManager = new AMRMProxyTokenSecretManager(stateStore);\r\n    secretManager.init(conf);\r\n    secretManager.recover(stateStore.loadAMRMProxyState());\r\n    secretManager.start();\r\n    secretManager.createAndGetAMRMToken(attemptId);\r\n    try {\r\n        secretManager.retrievePassword(identifier);\r\n        Assert.fail(\"Expect InvalidToken exception because the \" + \"old master key should have expired\");\r\n    } catch (InvalidToken e) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "updateProcessTree",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void updateProcessTree()\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getProcessTreeDump",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getProcessTreeDump()\n{\r\n    return \"\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getCumulativeCpuTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getCumulativeCpuTime()\n{\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "checkPidPgrpidForMatch",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean checkPidPgrpidForMatch()\n{\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getVirtualMemorySize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getVirtualMemorySize(int olderThanAge)\n{\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getRssMemorySize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getRssMemorySize(int olderThanAge)\n{\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getCpuUsagePercent",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "float getCpuUsagePercent()\n{\r\n    long cpu = this.cpuPercentage;\r\n    if (cpu == ResourceCalculatorProcessTree.UNAVAILABLE) {\r\n        this.cpuPercentage = 50;\r\n    }\r\n    return cpu;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "test",
  "errType" : null,
  "containingMethodsNum" : 35,
  "sourceCodeText" : "void test()\n{\r\n    String user = \"testuser\";\r\n    DrainDispatcher dispatcher = null;\r\n    try {\r\n        Configuration conf = new Configuration();\r\n        dispatcher = createDispatcher(conf);\r\n        EventHandler<LocalizerEvent> localizerEventHandler = mock(EventHandler.class);\r\n        EventHandler<LocalizerEvent> containerEventHandler = mock(EventHandler.class);\r\n        dispatcher.register(LocalizerEventType.class, localizerEventHandler);\r\n        dispatcher.register(ContainerEventType.class, containerEventHandler);\r\n        DeletionService mockDelService = mock(DeletionService.class);\r\n        ContainerId cId1 = BuilderUtils.newContainerId(1, 1, 1, 1);\r\n        LocalizerContext lc1 = new LocalizerContext(user, cId1, null);\r\n        ContainerId cId2 = BuilderUtils.newContainerId(1, 1, 1, 2);\r\n        LocalizerContext lc2 = new LocalizerContext(user, cId2, null);\r\n        LocalResourceRequest req1 = createLocalResourceRequest(user, 1, 1, LocalResourceVisibility.PUBLIC);\r\n        LocalResourceRequest req2 = createLocalResourceRequest(user, 2, 1, LocalResourceVisibility.PUBLIC);\r\n        LocalizedResource lr1 = createLocalizedResource(req1, dispatcher);\r\n        LocalizedResource lr2 = createLocalizedResource(req2, dispatcher);\r\n        ConcurrentMap<LocalResourceRequest, LocalizedResource> localrsrc = new ConcurrentHashMap<LocalResourceRequest, LocalizedResource>();\r\n        localrsrc.put(req1, lr1);\r\n        localrsrc.put(req2, lr2);\r\n        LocalResourcesTracker tracker = new LocalResourcesTrackerImpl(user, null, dispatcher, localrsrc, false, conf, new NMNullStateStoreService(), null);\r\n        ResourceEvent req11Event = new ResourceRequestEvent(req1, LocalResourceVisibility.PUBLIC, lc1);\r\n        ResourceEvent req12Event = new ResourceRequestEvent(req1, LocalResourceVisibility.PUBLIC, lc2);\r\n        ResourceEvent req21Event = new ResourceRequestEvent(req2, LocalResourceVisibility.PUBLIC, lc1);\r\n        ResourceEvent rel11Event = new ResourceReleaseEvent(req1, cId1);\r\n        ResourceEvent rel12Event = new ResourceReleaseEvent(req1, cId2);\r\n        ResourceEvent rel21Event = new ResourceReleaseEvent(req2, cId1);\r\n        tracker.handle(req11Event);\r\n        tracker.handle(req12Event);\r\n        tracker.handle(req21Event);\r\n        dispatcher.await();\r\n        verify(localizerEventHandler, times(3)).handle(any(LocalizerResourceRequestEvent.class));\r\n        Assert.assertEquals(2, lr1.getRefCount());\r\n        Assert.assertEquals(1, lr2.getRefCount());\r\n        tracker.handle(rel21Event);\r\n        dispatcher.await();\r\n        verifyTrackedResourceCount(tracker, 2);\r\n        Assert.assertEquals(2, lr1.getRefCount());\r\n        Assert.assertFalse(tracker.remove(lr1, mockDelService));\r\n        verifyTrackedResourceCount(tracker, 2);\r\n        ResourceLocalizedEvent rle = new ResourceLocalizedEvent(req1, new Path(\"file:///tmp/r1\"), 1);\r\n        lr1.handle(rle);\r\n        Assert.assertTrue(lr1.getState().equals(ResourceState.LOCALIZED));\r\n        tracker.handle(rel11Event);\r\n        tracker.handle(rel12Event);\r\n        Assert.assertEquals(0, lr1.getRefCount());\r\n        Assert.assertTrue(tracker.remove(lr1, mockDelService));\r\n        verifyTrackedResourceCount(tracker, 1);\r\n    } finally {\r\n        if (dispatcher != null) {\r\n            dispatcher.stop();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testConsistency",
  "errType" : null,
  "containingMethodsNum" : 29,
  "sourceCodeText" : "void testConsistency()\n{\r\n    String user = \"testuser\";\r\n    DrainDispatcher dispatcher = null;\r\n    try {\r\n        Configuration conf = new Configuration();\r\n        dispatcher = createDispatcher(conf);\r\n        EventHandler<LocalizerEvent> localizerEventHandler = mock(EventHandler.class);\r\n        EventHandler<LocalizerEvent> containerEventHandler = mock(EventHandler.class);\r\n        dispatcher.register(LocalizerEventType.class, localizerEventHandler);\r\n        dispatcher.register(ContainerEventType.class, containerEventHandler);\r\n        ContainerId cId1 = BuilderUtils.newContainerId(1, 1, 1, 1);\r\n        LocalizerContext lc1 = new LocalizerContext(user, cId1, null);\r\n        LocalResourceRequest req1 = createLocalResourceRequest(user, 1, 1, LocalResourceVisibility.PUBLIC);\r\n        LocalizedResource lr1 = createLocalizedResource(req1, dispatcher);\r\n        ConcurrentMap<LocalResourceRequest, LocalizedResource> localrsrc = new ConcurrentHashMap<LocalResourceRequest, LocalizedResource>();\r\n        localrsrc.put(req1, lr1);\r\n        LocalResourcesTracker tracker = new LocalResourcesTrackerImpl(user, null, dispatcher, localrsrc, false, conf, new NMNullStateStoreService(), null);\r\n        ResourceEvent req11Event = new ResourceRequestEvent(req1, LocalResourceVisibility.PUBLIC, lc1);\r\n        ResourceEvent rel11Event = new ResourceReleaseEvent(req1, cId1);\r\n        tracker.handle(req11Event);\r\n        dispatcher.await();\r\n        Assert.assertEquals(1, lr1.getRefCount());\r\n        dispatcher.await();\r\n        verifyTrackedResourceCount(tracker, 1);\r\n        ResourceLocalizedEvent rle = new ResourceLocalizedEvent(req1, new Path(\"file:///tmp/r1\"), 1);\r\n        lr1.handle(rle);\r\n        Assert.assertTrue(lr1.getState().equals(ResourceState.LOCALIZED));\r\n        Assert.assertTrue(createdummylocalizefile(new Path(\"file:///tmp/r1\")));\r\n        LocalizedResource rsrcbefore = tracker.iterator().next();\r\n        File resFile = new File(lr1.getLocalPath().toUri().getRawPath().toString());\r\n        Assert.assertTrue(resFile.exists());\r\n        Assert.assertTrue(resFile.delete());\r\n        tracker.handle(req11Event);\r\n        dispatcher.await();\r\n        lr1.handle(rle);\r\n        Assert.assertTrue(lr1.getState().equals(ResourceState.LOCALIZED));\r\n        LocalizedResource rsrcafter = tracker.iterator().next();\r\n        if (rsrcbefore == rsrcafter) {\r\n            Assert.fail(\"Localized resource should not be equal\");\r\n        }\r\n        tracker.handle(rel11Event);\r\n    } finally {\r\n        if (dispatcher != null) {\r\n            dispatcher.stop();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testLocalResourceCache",
  "errType" : null,
  "containingMethodsNum" : 51,
  "sourceCodeText" : "void testLocalResourceCache()\n{\r\n    String user = \"testuser\";\r\n    DrainDispatcher dispatcher = null;\r\n    try {\r\n        Configuration conf = new Configuration();\r\n        dispatcher = createDispatcher(conf);\r\n        EventHandler<LocalizerEvent> localizerEventHandler = mock(EventHandler.class);\r\n        EventHandler<ContainerEvent> containerEventHandler = mock(EventHandler.class);\r\n        dispatcher.register(LocalizerEventType.class, localizerEventHandler);\r\n        dispatcher.register(ContainerEventType.class, containerEventHandler);\r\n        ConcurrentMap<LocalResourceRequest, LocalizedResource> localrsrc = new ConcurrentHashMap<LocalResourceRequest, LocalizedResource>();\r\n        LocalResourcesTracker tracker = new LocalResourcesTrackerImpl(user, null, dispatcher, localrsrc, true, conf, new NMNullStateStoreService(), null);\r\n        LocalResourceRequest lr = createLocalResourceRequest(user, 1, 1, LocalResourceVisibility.PUBLIC);\r\n        ContainerId cId1 = BuilderUtils.newContainerId(1, 1, 1, 1);\r\n        LocalizerContext lc1 = new LocalizerContext(user, cId1, null);\r\n        ResourceEvent reqEvent1 = new ResourceRequestEvent(lr, LocalResourceVisibility.PRIVATE, lc1);\r\n        Assert.assertEquals(0, localrsrc.size());\r\n        tracker.handle(reqEvent1);\r\n        dispatcher.await();\r\n        Assert.assertEquals(1, localrsrc.size());\r\n        Assert.assertTrue(localrsrc.containsKey(lr));\r\n        Assert.assertEquals(1, localrsrc.get(lr).getRefCount());\r\n        Assert.assertTrue(localrsrc.get(lr).ref.contains(cId1));\r\n        Assert.assertEquals(ResourceState.DOWNLOADING, localrsrc.get(lr).getState());\r\n        ContainerId cId2 = BuilderUtils.newContainerId(1, 1, 1, 2);\r\n        LocalizerContext lc2 = new LocalizerContext(user, cId2, null);\r\n        ResourceEvent reqEvent2 = new ResourceRequestEvent(lr, LocalResourceVisibility.PRIVATE, lc2);\r\n        tracker.handle(reqEvent2);\r\n        dispatcher.await();\r\n        Assert.assertEquals(2, localrsrc.get(lr).getRefCount());\r\n        Assert.assertTrue(localrsrc.get(lr).ref.contains(cId2));\r\n        ResourceEvent resourceFailedEvent = new ResourceFailedLocalizationEvent(lr, (new Exception(\"test\").getMessage()));\r\n        LocalizedResource localizedResource = localrsrc.get(lr);\r\n        tracker.handle(resourceFailedEvent);\r\n        dispatcher.await();\r\n        Assert.assertEquals(0, localrsrc.size());\r\n        verify(containerEventHandler, timeout(1000).times(2)).handle(isA(ContainerResourceFailedEvent.class));\r\n        Assert.assertEquals(ResourceState.FAILED, localizedResource.getState());\r\n        ResourceReleaseEvent relEvent1 = new ResourceReleaseEvent(lr, cId1);\r\n        tracker.handle(relEvent1);\r\n        dispatcher.await();\r\n        ContainerId cId3 = BuilderUtils.newContainerId(1, 1, 1, 3);\r\n        LocalizerContext lc3 = new LocalizerContext(user, cId3, null);\r\n        ResourceEvent reqEvent3 = new ResourceRequestEvent(lr, LocalResourceVisibility.PRIVATE, lc3);\r\n        tracker.handle(reqEvent3);\r\n        dispatcher.await();\r\n        Assert.assertEquals(1, localrsrc.size());\r\n        Assert.assertTrue(localrsrc.containsKey(lr));\r\n        Assert.assertEquals(1, localrsrc.get(lr).getRefCount());\r\n        Assert.assertTrue(localrsrc.get(lr).ref.contains(cId3));\r\n        ResourceReleaseEvent relEvent2 = new ResourceReleaseEvent(lr, cId2);\r\n        tracker.handle(relEvent2);\r\n        dispatcher.await();\r\n        Assert.assertEquals(1, localrsrc.size());\r\n        Assert.assertTrue(localrsrc.containsKey(lr));\r\n        Assert.assertEquals(1, localrsrc.get(lr).getRefCount());\r\n        Assert.assertTrue(localrsrc.get(lr).ref.contains(cId3));\r\n        Path localizedPath = new Path(\"/tmp/file1\");\r\n        ResourceLocalizedEvent localizedEvent = new ResourceLocalizedEvent(lr, localizedPath, 123L);\r\n        tracker.handle(localizedEvent);\r\n        dispatcher.await();\r\n        verify(containerEventHandler, timeout(1000).times(1)).handle(isA(ContainerResourceLocalizedEvent.class));\r\n        Assert.assertEquals(ResourceState.LOCALIZED, localrsrc.get(lr).getState());\r\n        Assert.assertEquals(1, localrsrc.get(lr).getRefCount());\r\n        ResourceReleaseEvent relEvent3 = new ResourceReleaseEvent(lr, cId3);\r\n        tracker.handle(relEvent3);\r\n        dispatcher.await();\r\n        Assert.assertEquals(0, localrsrc.get(lr).getRefCount());\r\n    } finally {\r\n        if (dispatcher != null) {\r\n            dispatcher.stop();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testHierarchicalLocalCacheDirectories",
  "errType" : null,
  "containingMethodsNum" : 37,
  "sourceCodeText" : "void testHierarchicalLocalCacheDirectories()\n{\r\n    String user = \"testuser\";\r\n    DrainDispatcher dispatcher = null;\r\n    try {\r\n        Configuration conf = new Configuration();\r\n        conf.set(YarnConfiguration.NM_LOCAL_CACHE_MAX_FILES_PER_DIRECTORY, \"37\");\r\n        dispatcher = createDispatcher(conf);\r\n        EventHandler<LocalizerEvent> localizerEventHandler = mock(EventHandler.class);\r\n        EventHandler<LocalizerEvent> containerEventHandler = mock(EventHandler.class);\r\n        dispatcher.register(LocalizerEventType.class, localizerEventHandler);\r\n        dispatcher.register(ContainerEventType.class, containerEventHandler);\r\n        DeletionService mockDelService = mock(DeletionService.class);\r\n        ConcurrentMap<LocalResourceRequest, LocalizedResource> localrsrc = new ConcurrentHashMap<LocalResourceRequest, LocalizedResource>();\r\n        LocalResourcesTracker tracker = new LocalResourcesTrackerImpl(user, null, dispatcher, localrsrc, true, conf, new NMNullStateStoreService(), null);\r\n        Path localDir = new Path(\"/tmp\");\r\n        ContainerId cId1 = BuilderUtils.newContainerId(1, 1, 1, 1);\r\n        LocalResourceRequest lr1 = createLocalResourceRequest(user, 1, 1, LocalResourceVisibility.PUBLIC);\r\n        LocalizerContext lc1 = new LocalizerContext(user, cId1, null);\r\n        ResourceEvent reqEvent1 = new ResourceRequestEvent(lr1, LocalResourceVisibility.PUBLIC, lc1);\r\n        tracker.handle(reqEvent1);\r\n        Path hierarchicalPath1 = tracker.getPathForLocalization(lr1, localDir, null).getParent();\r\n        ResourceLocalizedEvent rle1 = new ResourceLocalizedEvent(lr1, new Path(hierarchicalPath1.toUri().toString() + Path.SEPARATOR + \"file1\"), 120);\r\n        tracker.handle(rle1);\r\n        LocalResourceRequest lr2 = createLocalResourceRequest(user, 3, 3, LocalResourceVisibility.PUBLIC);\r\n        ResourceEvent reqEvent2 = new ResourceRequestEvent(lr2, LocalResourceVisibility.PUBLIC, lc1);\r\n        tracker.handle(reqEvent2);\r\n        Path hierarchicalPath2 = tracker.getPathForLocalization(lr2, localDir, null).getParent();\r\n        ResourceFailedLocalizationEvent rfe2 = new ResourceFailedLocalizationEvent(lr2, new Exception(\"Test\").toString());\r\n        tracker.handle(rfe2);\r\n        Assert.assertNotSame(hierarchicalPath1, hierarchicalPath2);\r\n        LocalResourceRequest lr3 = createLocalResourceRequest(user, 2, 2, LocalResourceVisibility.PUBLIC);\r\n        ResourceEvent reqEvent3 = new ResourceRequestEvent(lr3, LocalResourceVisibility.PUBLIC, lc1);\r\n        tracker.handle(reqEvent3);\r\n        Path hierarchicalPath3 = tracker.getPathForLocalization(lr3, localDir, null).getParent();\r\n        ResourceLocalizedEvent rle3 = new ResourceLocalizedEvent(lr3, new Path(hierarchicalPath3.toUri().toString() + Path.SEPARATOR + \"file3\"), 120);\r\n        tracker.handle(rle3);\r\n        Assert.assertEquals(hierarchicalPath3.toUri().toString(), hierarchicalPath1.toUri().toString() + Path.SEPARATOR + \"0\");\r\n        ResourceEvent relEvent1 = new ResourceReleaseEvent(lr1, cId1);\r\n        tracker.handle(relEvent1);\r\n        int resources = 0;\r\n        Iterator<LocalizedResource> iter = tracker.iterator();\r\n        while (iter.hasNext()) {\r\n            iter.next();\r\n            resources++;\r\n        }\r\n        Assert.assertEquals(2, resources);\r\n        iter = tracker.iterator();\r\n        while (iter.hasNext()) {\r\n            LocalizedResource rsrc = iter.next();\r\n            if (rsrc.getRefCount() == 0) {\r\n                Assert.assertTrue(tracker.remove(rsrc, mockDelService));\r\n                resources--;\r\n            }\r\n        }\r\n        Assert.assertEquals(1, resources);\r\n    } finally {\r\n        if (dispatcher != null) {\r\n            dispatcher.stop();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testStateStoreSuccessfulLocalization",
  "errType" : null,
  "containingMethodsNum" : 36,
  "sourceCodeText" : "void testStateStoreSuccessfulLocalization() throws Exception\n{\r\n    final String user = \"someuser\";\r\n    final ApplicationId appId = ApplicationId.newInstance(1, 1);\r\n    final Path localDir = new Path(\"/tmp\");\r\n    Configuration conf = new YarnConfiguration();\r\n    DrainDispatcher dispatcher = null;\r\n    dispatcher = createDispatcher(conf);\r\n    EventHandler<LocalizerEvent> localizerEventHandler = mock(EventHandler.class);\r\n    EventHandler<LocalizerEvent> containerEventHandler = mock(EventHandler.class);\r\n    dispatcher.register(LocalizerEventType.class, localizerEventHandler);\r\n    dispatcher.register(ContainerEventType.class, containerEventHandler);\r\n    DeletionService mockDelService = mock(DeletionService.class);\r\n    NMStateStoreService stateStore = mock(NMStateStoreService.class);\r\n    try {\r\n        LocalResourcesTracker tracker = new LocalResourcesTrackerImpl(user, appId, dispatcher, false, conf, stateStore, null);\r\n        ContainerId cId1 = BuilderUtils.newContainerId(1, 1, 1, 1);\r\n        LocalResourceRequest lr1 = createLocalResourceRequest(user, 1, 1, LocalResourceVisibility.APPLICATION);\r\n        LocalizerContext lc1 = new LocalizerContext(user, cId1, null);\r\n        ResourceEvent reqEvent1 = new ResourceRequestEvent(lr1, LocalResourceVisibility.APPLICATION, lc1);\r\n        tracker.handle(reqEvent1);\r\n        dispatcher.await();\r\n        Path hierarchicalPath1 = tracker.getPathForLocalization(lr1, localDir, null);\r\n        ArgumentCaptor<LocalResourceProto> localResourceCaptor = ArgumentCaptor.forClass(LocalResourceProto.class);\r\n        ArgumentCaptor<Path> pathCaptor = ArgumentCaptor.forClass(Path.class);\r\n        verify(stateStore).startResourceLocalization(eq(user), eq(appId), localResourceCaptor.capture(), pathCaptor.capture());\r\n        LocalResourceProto lrProto = localResourceCaptor.getValue();\r\n        Path localizedPath1 = pathCaptor.getValue();\r\n        Assert.assertEquals(lr1, new LocalResourceRequest(new LocalResourcePBImpl(lrProto)));\r\n        Assert.assertEquals(hierarchicalPath1, localizedPath1.getParent());\r\n        ResourceLocalizedEvent rle1 = new ResourceLocalizedEvent(lr1, pathCaptor.getValue(), 120);\r\n        tracker.handle(rle1);\r\n        dispatcher.await();\r\n        ArgumentCaptor<LocalizedResourceProto> localizedProtoCaptor = ArgumentCaptor.forClass(LocalizedResourceProto.class);\r\n        verify(stateStore).finishResourceLocalization(eq(user), eq(appId), localizedProtoCaptor.capture());\r\n        LocalizedResourceProto localizedProto = localizedProtoCaptor.getValue();\r\n        Assert.assertEquals(lr1, new LocalResourceRequest(new LocalResourcePBImpl(localizedProto.getResource())));\r\n        Assert.assertEquals(localizedPath1.toString(), localizedProto.getLocalPath());\r\n        LocalizedResource localizedRsrc1 = tracker.getLocalizedResource(lr1);\r\n        Assert.assertNotNull(localizedRsrc1);\r\n        tracker.handle(new ResourceReleaseEvent(lr1, cId1));\r\n        dispatcher.await();\r\n        boolean removeResult = tracker.remove(localizedRsrc1, mockDelService);\r\n        Assert.assertTrue(removeResult);\r\n        verify(stateStore).removeLocalizedResource(eq(user), eq(appId), eq(localizedPath1));\r\n    } finally {\r\n        if (dispatcher != null) {\r\n            dispatcher.stop();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testStateStoreFailedLocalization",
  "errType" : null,
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void testStateStoreFailedLocalization() throws Exception\n{\r\n    final String user = \"someuser\";\r\n    final ApplicationId appId = ApplicationId.newInstance(1, 1);\r\n    final Path localDir = new Path(\"/tmp\");\r\n    Configuration conf = new YarnConfiguration();\r\n    DrainDispatcher dispatcher = null;\r\n    dispatcher = createDispatcher(conf);\r\n    EventHandler<LocalizerEvent> localizerEventHandler = mock(EventHandler.class);\r\n    EventHandler<LocalizerEvent> containerEventHandler = mock(EventHandler.class);\r\n    dispatcher.register(LocalizerEventType.class, localizerEventHandler);\r\n    dispatcher.register(ContainerEventType.class, containerEventHandler);\r\n    NMStateStoreService stateStore = mock(NMStateStoreService.class);\r\n    try {\r\n        LocalResourcesTracker tracker = new LocalResourcesTrackerImpl(user, appId, dispatcher, false, conf, stateStore, null);\r\n        ContainerId cId1 = BuilderUtils.newContainerId(1, 1, 1, 1);\r\n        LocalResourceRequest lr1 = createLocalResourceRequest(user, 1, 1, LocalResourceVisibility.APPLICATION);\r\n        LocalizerContext lc1 = new LocalizerContext(user, cId1, null);\r\n        ResourceEvent reqEvent1 = new ResourceRequestEvent(lr1, LocalResourceVisibility.APPLICATION, lc1);\r\n        tracker.handle(reqEvent1);\r\n        dispatcher.await();\r\n        Path hierarchicalPath1 = tracker.getPathForLocalization(lr1, localDir, null);\r\n        ArgumentCaptor<LocalResourceProto> localResourceCaptor = ArgumentCaptor.forClass(LocalResourceProto.class);\r\n        ArgumentCaptor<Path> pathCaptor = ArgumentCaptor.forClass(Path.class);\r\n        verify(stateStore).startResourceLocalization(eq(user), eq(appId), localResourceCaptor.capture(), pathCaptor.capture());\r\n        LocalResourceProto lrProto = localResourceCaptor.getValue();\r\n        Path localizedPath1 = pathCaptor.getValue();\r\n        Assert.assertEquals(lr1, new LocalResourceRequest(new LocalResourcePBImpl(lrProto)));\r\n        Assert.assertEquals(hierarchicalPath1, localizedPath1.getParent());\r\n        ResourceFailedLocalizationEvent rfe1 = new ResourceFailedLocalizationEvent(lr1, new Exception(\"Test\").toString());\r\n        tracker.handle(rfe1);\r\n        dispatcher.await();\r\n        verify(stateStore).removeLocalizedResource(eq(user), eq(appId), eq(localizedPath1));\r\n    } finally {\r\n        if (dispatcher != null) {\r\n            dispatcher.stop();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testRecoveredResource",
  "errType" : null,
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void testRecoveredResource() throws Exception\n{\r\n    final String user = \"someuser\";\r\n    final ApplicationId appId = ApplicationId.newInstance(1, 1);\r\n    final Path localDir = new Path(\"/tmp/localdir\");\r\n    Configuration conf = new YarnConfiguration();\r\n    DrainDispatcher dispatcher = null;\r\n    dispatcher = createDispatcher(conf);\r\n    EventHandler<LocalizerEvent> localizerEventHandler = mock(EventHandler.class);\r\n    EventHandler<LocalizerEvent> containerEventHandler = mock(EventHandler.class);\r\n    dispatcher.register(LocalizerEventType.class, localizerEventHandler);\r\n    dispatcher.register(ContainerEventType.class, containerEventHandler);\r\n    NMStateStoreService stateStore = mock(NMStateStoreService.class);\r\n    try {\r\n        LocalResourcesTracker tracker = new LocalResourcesTrackerImpl(user, appId, dispatcher, false, conf, stateStore, null);\r\n        ContainerId cId1 = BuilderUtils.newContainerId(1, 1, 1, 1);\r\n        LocalResourceRequest lr1 = createLocalResourceRequest(user, 1, 1, LocalResourceVisibility.APPLICATION);\r\n        Assert.assertNull(tracker.getLocalizedResource(lr1));\r\n        final long localizedId1 = 52;\r\n        Path hierarchicalPath1 = new Path(localDir, Long.toString(localizedId1));\r\n        Path localizedPath1 = new Path(hierarchicalPath1, \"resource.jar\");\r\n        tracker.handle(new ResourceRecoveredEvent(lr1, localizedPath1, 120));\r\n        dispatcher.await();\r\n        Assert.assertNotNull(tracker.getLocalizedResource(lr1));\r\n        LocalResourceRequest lr2 = createLocalResourceRequest(user, 2, 2, LocalResourceVisibility.APPLICATION);\r\n        LocalizerContext lc2 = new LocalizerContext(user, cId1, null);\r\n        ResourceEvent reqEvent2 = new ResourceRequestEvent(lr2, LocalResourceVisibility.APPLICATION, lc2);\r\n        tracker.handle(reqEvent2);\r\n        dispatcher.await();\r\n        Path hierarchicalPath2 = tracker.getPathForLocalization(lr2, localDir, null);\r\n        long localizedId2 = Long.parseLong(hierarchicalPath2.getName());\r\n        Assert.assertEquals(localizedId1 + 1, localizedId2);\r\n    } finally {\r\n        if (dispatcher != null) {\r\n            dispatcher.stop();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testRecoveredResourceWithDirCacheMgr",
  "errType" : null,
  "containingMethodsNum" : 44,
  "sourceCodeText" : "void testRecoveredResourceWithDirCacheMgr() throws Exception\n{\r\n    final String user = \"someuser\";\r\n    final ApplicationId appId = ApplicationId.newInstance(1, 1);\r\n    final Path localDirRoot = new Path(\"/tmp/localdir\");\r\n    Configuration conf = new YarnConfiguration();\r\n    DrainDispatcher dispatcher = null;\r\n    dispatcher = createDispatcher(conf);\r\n    EventHandler<LocalizerEvent> localizerEventHandler = mock(EventHandler.class);\r\n    EventHandler<LocalizerEvent> containerEventHandler = mock(EventHandler.class);\r\n    dispatcher.register(LocalizerEventType.class, localizerEventHandler);\r\n    dispatcher.register(ContainerEventType.class, containerEventHandler);\r\n    NMStateStoreService stateStore = mock(NMStateStoreService.class);\r\n    try {\r\n        LocalResourcesTrackerImpl tracker = new LocalResourcesTrackerImpl(user, appId, dispatcher, true, conf, stateStore, null);\r\n        LocalResourceRequest lr1 = createLocalResourceRequest(user, 1, 1, LocalResourceVisibility.PUBLIC);\r\n        Assert.assertNull(tracker.getLocalizedResource(lr1));\r\n        final long localizedId1 = 52;\r\n        Path hierarchicalPath1 = new Path(localDirRoot + \"/4/2\", Long.toString(localizedId1));\r\n        Path localizedPath1 = new Path(hierarchicalPath1, \"resource.jar\");\r\n        tracker.handle(new ResourceRecoveredEvent(lr1, localizedPath1, 120));\r\n        dispatcher.await();\r\n        Assert.assertNotNull(tracker.getLocalizedResource(lr1));\r\n        LocalCacheDirectoryManager dirMgrRoot = tracker.getDirectoryManager(localDirRoot);\r\n        Assert.assertEquals(0, dirMgrRoot.getDirectory(\"\").getCount());\r\n        Assert.assertEquals(1, dirMgrRoot.getDirectory(\"4/2\").getCount());\r\n        LocalResourceRequest lr2 = createLocalResourceRequest(user, 2, 2, LocalResourceVisibility.PUBLIC);\r\n        Assert.assertNull(tracker.getLocalizedResource(lr2));\r\n        final long localizedId2 = localizedId1 + 1;\r\n        Path hierarchicalPath2 = new Path(localDirRoot + \"/4/2\", Long.toString(localizedId2));\r\n        Path localizedPath2 = new Path(hierarchicalPath2, \"resource.jar\");\r\n        tracker.handle(new ResourceRecoveredEvent(lr2, localizedPath2, 120));\r\n        dispatcher.await();\r\n        Assert.assertNotNull(tracker.getLocalizedResource(lr2));\r\n        Assert.assertEquals(0, dirMgrRoot.getDirectory(\"\").getCount());\r\n        Assert.assertEquals(2, dirMgrRoot.getDirectory(\"4/2\").getCount());\r\n        LocalResourceRequest lr3 = createLocalResourceRequest(user, 3, 3, LocalResourceVisibility.PUBLIC);\r\n        Assert.assertNull(tracker.getLocalizedResource(lr3));\r\n        final long localizedId3 = 128;\r\n        Path hierarchicalPath3 = new Path(localDirRoot + \"/4/3\", Long.toString(localizedId3));\r\n        Path localizedPath3 = new Path(hierarchicalPath3, \"resource.jar\");\r\n        tracker.handle(new ResourceRecoveredEvent(lr3, localizedPath3, 120));\r\n        dispatcher.await();\r\n        Assert.assertNotNull(tracker.getLocalizedResource(lr3));\r\n        Assert.assertEquals(0, dirMgrRoot.getDirectory(\"\").getCount());\r\n        Assert.assertEquals(2, dirMgrRoot.getDirectory(\"4/2\").getCount());\r\n        Assert.assertEquals(1, dirMgrRoot.getDirectory(\"4/3\").getCount());\r\n        LocalResourceRequest lr4 = createLocalResourceRequest(user, 4, 4, LocalResourceVisibility.PUBLIC);\r\n        Assert.assertNull(tracker.getLocalizedResource(lr4));\r\n        final long localizedId4 = 256;\r\n        Path hierarchicalPath4 = new Path(localDirRoot + \"/4\", Long.toString(localizedId4));\r\n        Path localizedPath4 = new Path(hierarchicalPath4, \"resource.jar\");\r\n        tracker.handle(new ResourceRecoveredEvent(lr4, localizedPath4, 120));\r\n        dispatcher.await();\r\n        Assert.assertNotNull(tracker.getLocalizedResource(lr4));\r\n        Assert.assertEquals(0, dirMgrRoot.getDirectory(\"\").getCount());\r\n        Assert.assertEquals(1, dirMgrRoot.getDirectory(\"4\").getCount());\r\n        Assert.assertEquals(2, dirMgrRoot.getDirectory(\"4/2\").getCount());\r\n        Assert.assertEquals(1, dirMgrRoot.getDirectory(\"4/3\").getCount());\r\n    } finally {\r\n        if (dispatcher != null) {\r\n            dispatcher.stop();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testGetPathForLocalization",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testGetPathForLocalization() throws Exception\n{\r\n    FileContext lfs = FileContext.getLocalFSFileContext();\r\n    Path base_path = new Path(\"target\", TestLocalResourcesTrackerImpl.class.getSimpleName());\r\n    final String user = \"someuser\";\r\n    final ApplicationId appId = ApplicationId.newInstance(1, 1);\r\n    Configuration conf = new YarnConfiguration();\r\n    DrainDispatcher dispatcher = null;\r\n    dispatcher = createDispatcher(conf);\r\n    EventHandler<LocalizerEvent> localizerEventHandler = mock(EventHandler.class);\r\n    EventHandler<LocalizerEvent> containerEventHandler = mock(EventHandler.class);\r\n    dispatcher.register(LocalizerEventType.class, localizerEventHandler);\r\n    dispatcher.register(ContainerEventType.class, containerEventHandler);\r\n    NMStateStoreService stateStore = mock(NMStateStoreService.class);\r\n    DeletionService delService = mock(DeletionService.class);\r\n    try {\r\n        LocalResourceRequest req1 = createLocalResourceRequest(user, 1, 1, LocalResourceVisibility.PUBLIC);\r\n        LocalizedResource lr1 = createLocalizedResource(req1, dispatcher);\r\n        ConcurrentMap<LocalResourceRequest, LocalizedResource> localrsrc = new ConcurrentHashMap<LocalResourceRequest, LocalizedResource>();\r\n        localrsrc.put(req1, lr1);\r\n        LocalResourcesTrackerImpl tracker = new LocalResourcesTrackerImpl(user, appId, dispatcher, localrsrc, true, conf, stateStore, null);\r\n        Path conflictPath = new Path(base_path, \"10\");\r\n        Path qualifiedConflictPath = lfs.makeQualified(conflictPath);\r\n        lfs.mkdir(qualifiedConflictPath, null, true);\r\n        Path rPath = tracker.getPathForLocalization(req1, base_path, delService);\r\n        Assert.assertFalse(lfs.util().exists(rPath));\r\n        verify(delService, times(1)).delete(argThat(new FileDeletionMatcher(delService, user, conflictPath, null)));\r\n    } finally {\r\n        lfs.delete(base_path, true);\r\n        if (dispatcher != null) {\r\n            dispatcher.stop();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testResourcePresentInGoodDir",
  "errType" : null,
  "containingMethodsNum" : 29,
  "sourceCodeText" : "void testResourcePresentInGoodDir() throws IOException\n{\r\n    String user = \"testuser\";\r\n    DrainDispatcher dispatcher = null;\r\n    try {\r\n        Configuration conf = new Configuration();\r\n        dispatcher = createDispatcher(conf);\r\n        EventHandler<LocalizerEvent> localizerEventHandler = mock(EventHandler.class);\r\n        EventHandler<LocalizerEvent> containerEventHandler = mock(EventHandler.class);\r\n        dispatcher.register(LocalizerEventType.class, localizerEventHandler);\r\n        dispatcher.register(ContainerEventType.class, containerEventHandler);\r\n        ContainerId cId1 = BuilderUtils.newContainerId(1, 1, 1, 1);\r\n        LocalizerContext lc1 = new LocalizerContext(user, cId1, null);\r\n        LocalResourceRequest req1 = createLocalResourceRequest(user, 1, 1, LocalResourceVisibility.PUBLIC);\r\n        LocalResourceRequest req2 = createLocalResourceRequest(user, 2, 1, LocalResourceVisibility.PUBLIC);\r\n        LocalizedResource lr1 = createLocalizedResource(req1, dispatcher);\r\n        LocalizedResource lr2 = createLocalizedResource(req2, dispatcher);\r\n        ConcurrentMap<LocalResourceRequest, LocalizedResource> localrsrc = new ConcurrentHashMap<LocalResourceRequest, LocalizedResource>();\r\n        localrsrc.put(req1, lr1);\r\n        localrsrc.put(req2, lr2);\r\n        LocalDirsHandlerService dirsHandler = mock(LocalDirsHandlerService.class);\r\n        List<String> goodDirs = new ArrayList<String>();\r\n        goodDirs.add(\"/tmp/somedir1/\");\r\n        goodDirs.add(\"/tmp/somedir2\");\r\n        Mockito.when(dirsHandler.getLocalDirs()).thenReturn(goodDirs);\r\n        Mockito.when(dirsHandler.getLocalDirsForRead()).thenReturn(goodDirs);\r\n        LocalResourcesTrackerImpl tracker = new LocalResourcesTrackerImpl(user, null, dispatcher, localrsrc, true, conf, new NMNullStateStoreService(), dirsHandler);\r\n        ResourceEvent req11Event = new ResourceRequestEvent(req1, LocalResourceVisibility.PUBLIC, lc1);\r\n        ResourceEvent req21Event = new ResourceRequestEvent(req2, LocalResourceVisibility.PUBLIC, lc1);\r\n        tracker.handle(req11Event);\r\n        tracker.handle(req21Event);\r\n        dispatcher.await();\r\n        Path p1 = tracker.getPathForLocalization(req1, new Path(\"/tmp/somedir1\"), null);\r\n        Path p2 = tracker.getPathForLocalization(req2, new Path(\"/tmp/somedir2\"), null);\r\n        ResourceLocalizedEvent rle1 = new ResourceLocalizedEvent(req1, p1, 1);\r\n        tracker.handle(rle1);\r\n        ResourceLocalizedEvent rle2 = new ResourceLocalizedEvent(req2, p2, 1);\r\n        tracker.handle(rle2);\r\n        dispatcher.await();\r\n        Assert.assertTrue(tracker.checkLocalResource(lr2));\r\n        goodDirs.remove(1);\r\n        Assert.assertFalse(tracker.checkLocalResource(lr2));\r\n    } finally {\r\n        if (dispatcher != null) {\r\n            dispatcher.stop();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testReleaseWhileDownloading",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testReleaseWhileDownloading() throws Exception\n{\r\n    String user = \"testuser\";\r\n    DrainDispatcher dispatcher = null;\r\n    try {\r\n        Configuration conf = new Configuration();\r\n        dispatcher = createDispatcher(conf);\r\n        EventHandler<LocalizerEvent> localizerEventHandler = mock(EventHandler.class);\r\n        EventHandler<LocalizerEvent> containerEventHandler = mock(EventHandler.class);\r\n        dispatcher.register(LocalizerEventType.class, localizerEventHandler);\r\n        dispatcher.register(ContainerEventType.class, containerEventHandler);\r\n        ContainerId cId = BuilderUtils.newContainerId(1, 1, 1, 1);\r\n        LocalizerContext lc = new LocalizerContext(user, cId, null);\r\n        LocalResourceRequest req = createLocalResourceRequest(user, 1, 1, LocalResourceVisibility.PUBLIC);\r\n        LocalizedResource lr = createLocalizedResource(req, dispatcher);\r\n        ConcurrentMap<LocalResourceRequest, LocalizedResource> localrsrc = new ConcurrentHashMap<LocalResourceRequest, LocalizedResource>();\r\n        localrsrc.put(req, lr);\r\n        LocalResourcesTracker tracker = new LocalResourcesTrackerImpl(user, null, dispatcher, localrsrc, false, conf, new NMNullStateStoreService(), null);\r\n        ResourceEvent reqEvent = new ResourceRequestEvent(req, LocalResourceVisibility.PUBLIC, lc);\r\n        tracker.handle(reqEvent);\r\n        ResourceEvent relEvent = new ResourceReleaseEvent(req, cId);\r\n        tracker.handle(relEvent);\r\n        ResourceLocalizedEvent rle = new ResourceLocalizedEvent(req, new Path(\"file:///tmp/r1\"), 1);\r\n        tracker.handle(rle);\r\n        dispatcher.await();\r\n    } finally {\r\n        if (dispatcher != null) {\r\n            dispatcher.stop();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "createdummylocalizefile",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean createdummylocalizefile(Path path)\n{\r\n    boolean ret = false;\r\n    File file = new File(path.toUri().getRawPath().toString());\r\n    try {\r\n        ret = file.createNewFile();\r\n    } catch (IOException e) {\r\n        e.printStackTrace();\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "verifyTrackedResourceCount",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void verifyTrackedResourceCount(LocalResourcesTracker tracker, int expected)\n{\r\n    int count = 0;\r\n    Iterator<LocalizedResource> iter = tracker.iterator();\r\n    while (iter.hasNext()) {\r\n        iter.next();\r\n        count++;\r\n    }\r\n    Assert.assertEquals(\"Tracker resource count does not match\", expected, count);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "createLocalResourceRequest",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LocalResourceRequest createLocalResourceRequest(String user, int i, long ts, LocalResourceVisibility vis)\n{\r\n    final LocalResourceRequest req = new LocalResourceRequest(new Path(\"file:///tmp/\" + user + \"/rsrc\" + i), ts + i * 2000, LocalResourceType.FILE, vis, null);\r\n    return req;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "createLocalizedResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LocalizedResource createLocalizedResource(LocalResourceRequest req, Dispatcher dispatcher)\n{\r\n    LocalizedResource lr = new LocalizedResource(req, dispatcher);\r\n    return lr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "createDispatcher",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "DrainDispatcher createDispatcher(Configuration conf)\n{\r\n    DrainDispatcher dispatcher = new DrainDispatcher();\r\n    dispatcher.init(conf);\r\n    dispatcher.start();\r\n    return dispatcher;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\privileged",
  "methodName" : "capturePrivilegedOperations",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "List<PrivilegedOperation> capturePrivilegedOperations(PrivilegedOperationExecutor mockExecutor, int invocationCount, boolean grabOutput) throws PrivilegedOperationException\n{\r\n    ArgumentCaptor<PrivilegedOperation> opCaptor = ArgumentCaptor.forClass(PrivilegedOperation.class);\r\n    verify(mockExecutor, times(invocationCount)).executePrivilegedOperation(any(), opCaptor.capture(), any(), any(Map.class), eq(grabOutput), eq(false));\r\n    Mockito.reset(mockExecutor);\r\n    return opCaptor.getAllValues();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "copyCommandLine",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Map<String, List<String>> copyCommandLine(Map<String, List<String>> map)\n{\r\n    Map<String, List<String>> ret = new HashMap<>();\r\n    for (Map.Entry<String, List<String>> entry : map.entrySet()) {\r\n        ret.put(entry.getKey(), new ArrayList<>(entry.getValue()));\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "commandlinesEquals",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "boolean commandlinesEquals(Map<String, List<String>> cli1, Map<String, List<String>> cli2)\n{\r\n    if (!Sets.symmetricDifference(cli1.keySet(), cli2.keySet()).isEmpty()) {\r\n        return false;\r\n    }\r\n    for (String key : cli1.keySet()) {\r\n        List<String> value1 = cli1.get(key);\r\n        List<String> value2 = cli2.get(key);\r\n        if (!value1.equals(value2)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "testPlugin",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testPlugin() throws Exception\n{\r\n    DockerRunCommand runCommand = new DockerRunCommand(\"container_1\", \"user\", \"fakeimage\");\r\n    Map<String, List<String>> originalCommandline = copyCommandLine(runCommand.getDockerCommandWithArguments());\r\n    MyNvidiaDockerV2CommandPlugin commandPlugin = new MyNvidiaDockerV2CommandPlugin();\r\n    Container nmContainer = mock(Container.class);\r\n    commandPlugin.updateDockerRunCommand(runCommand, nmContainer);\r\n    Assert.assertTrue(commandlinesEquals(originalCommandline, runCommand.getDockerCommandWithArguments()));\r\n    ResourceMappings resourceMappings = new ResourceMappings();\r\n    when(nmContainer.getResourceMappings()).thenReturn(resourceMappings);\r\n    commandPlugin.updateDockerRunCommand(runCommand, nmContainer);\r\n    Assert.assertTrue(commandlinesEquals(originalCommandline, runCommand.getDockerCommandWithArguments()));\r\n    ResourceMappings.AssignedResources assigned = new ResourceMappings.AssignedResources();\r\n    assigned.updateAssignedResources(ImmutableList.of(new GpuDevice(0, 0), new GpuDevice(1, 1)));\r\n    resourceMappings.addAssignedResources(ResourceInformation.GPU_URI, assigned);\r\n    commandPlugin.setRequestsGpu(true);\r\n    commandPlugin.updateDockerRunCommand(runCommand, nmContainer);\r\n    Map<String, List<String>> newCommandLine = runCommand.getDockerCommandWithArguments();\r\n    Assert.assertFalse(commandlinesEquals(originalCommandline, newCommandLine));\r\n    Assert.assertTrue(runCommand.getEnv().get(\"NVIDIA_VISIBLE_DEVICES\").equals(\"0,1\"));\r\n    Assert.assertTrue(newCommandLine.containsKey(\"runtime\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "getNodeStatusUpdater",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeStatusUpdater getNodeStatusUpdater()\n{\r\n    return nodeStatusUpdater;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "setNodeStatusUpdater",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNodeStatusUpdater(NodeStatusUpdater nodeStatusUpdater)\n{\r\n    this.nodeStatusUpdater = nodeStatusUpdater;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "createContainerExecutor",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerExecutor createContainerExecutor()\n{\r\n    DefaultContainerExecutor exec = new DefaultContainerExecutor();\r\n    exec.setConf(conf);\r\n    return spy(exec);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 30,
  "sourceCodeText" : "void setup() throws IOException\n{\r\n    localFS.delete(new Path(localDir.getAbsolutePath()), true);\r\n    localFS.delete(new Path(tmpDir.getAbsolutePath()), true);\r\n    localFS.delete(new Path(localLogDir.getAbsolutePath()), true);\r\n    localFS.delete(new Path(remoteLogDir.getAbsolutePath()), true);\r\n    localDir.mkdir();\r\n    tmpDir.mkdir();\r\n    localLogDir.mkdir();\r\n    remoteLogDir.mkdir();\r\n    LOG.info(\"Created localDir in \" + localDir.getAbsolutePath());\r\n    LOG.info(\"Created tmpDir in \" + tmpDir.getAbsolutePath());\r\n    String bindAddress = \"0.0.0.0:\" + ServerSocketUtil.getPort(49162, 10);\r\n    conf.set(YarnConfiguration.NM_ADDRESS, bindAddress);\r\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, localDir.getAbsolutePath());\r\n    conf.set(YarnConfiguration.NM_LOG_DIRS, localLogDir.getAbsolutePath());\r\n    conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR, remoteLogDir.getAbsolutePath());\r\n    conf.set(YarnConfiguration.NM_LOCALIZER_ADDRESS, \"0.0.0.0:\" + ServerSocketUtil.getPort(8040, 10));\r\n    conf.setLong(YarnConfiguration.NM_LOG_RETAIN_SECONDS, 1);\r\n    exec = createContainerExecutor();\r\n    delSrvc = createDeletionService();\r\n    delSrvc.init(conf);\r\n    dirsHandler = new LocalDirsHandlerService();\r\n    dirsHandler.init(conf);\r\n    nodeHealthCheckerService = new NodeHealthCheckerService(dirsHandler);\r\n    nodeStatusUpdater = new NodeStatusUpdaterImpl(context, new AsyncDispatcher(), nodeHealthCheckerService, metrics) {\r\n\r\n        @Override\r\n        protected ResourceTracker getRMClient() {\r\n            return new LocalRMInterface();\r\n        }\r\n\r\n        @Override\r\n        protected void stopRMProxy() {\r\n            return;\r\n        }\r\n\r\n        @Override\r\n        protected void startStatusUpdater() {\r\n            return;\r\n        }\r\n\r\n        @Override\r\n        public long getRMIdentifier() {\r\n            return DUMMY_RM_IDENTIFIER;\r\n        }\r\n    };\r\n    containerManager = createContainerManager(delSrvc);\r\n    ((NMContext) context).setContainerManager(containerManager);\r\n    ((NMContext) context).setContainerExecutor(exec);\r\n    ((NMContext) context).setNodeResourceMonitor(nodeResourceMonitor);\r\n    nodeStatusUpdater.init(conf);\r\n    containerManager.init(conf);\r\n    nodeStatusUpdater.start();\r\n    ((NMContext) context).setNodeStatusUpdater(nodeStatusUpdater);\r\n    ((NMContext) context).setContainerStateTransitionListener(new NodeManager.DefaultContainerStateListener());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "createContainerManager",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerManagerImpl createContainerManager(DeletionService delSrvc)\n{\r\n    return new ContainerManagerImpl(context, exec, delSrvc, nodeStatusUpdater, metrics, dirsHandler) {\r\n\r\n        @Override\r\n        protected void authorizeGetAndStopContainerRequest(ContainerId containerId, Container container, boolean stopRequest, NMTokenIdentifier identifier, String remoteUser) throws YarnException {\r\n        }\r\n\r\n        @Override\r\n        protected void authorizeUser(UserGroupInformation remoteUgi, NMTokenIdentifier nmTokenIdentifier) {\r\n        }\r\n\r\n        @Override\r\n        protected void authorizeStartAndResourceIncreaseRequest(NMTokenIdentifier nmTokenIdentifier, ContainerTokenIdentifier containerTokenIdentifier, boolean startRequest) throws YarnException {\r\n        }\r\n\r\n        @Override\r\n        protected void updateNMTokenIdentifier(NMTokenIdentifier nmTokenIdentifier) throws InvalidToken {\r\n        }\r\n\r\n        @Override\r\n        public Map<String, ByteBuffer> getAuxServiceMetaData() {\r\n            Map<String, ByteBuffer> serviceData = new HashMap<String, ByteBuffer>();\r\n            serviceData.put(\"AuxService1\", ByteBuffer.wrap(\"AuxServiceMetaData1\".getBytes()));\r\n            serviceData.put(\"AuxService2\", ByteBuffer.wrap(\"AuxServiceMetaData2\".getBytes()));\r\n            return serviceData;\r\n        }\r\n\r\n        @Override\r\n        protected NMTokenIdentifier selectNMTokenIdentifier(UserGroupInformation remoteUgi) {\r\n            return new NMTokenIdentifier();\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "createDeletionService",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DeletionService createDeletionService()\n{\r\n    return new DeletionService(exec) {\r\n\r\n        @Override\r\n        public void delete(DeletionTask deletionTask) {\r\n            LOG.info(\"Psuedo delete: user - \" + user + \", type - \" + deletionTask.getDeletionTaskType());\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDown() throws IOException, InterruptedException\n{\r\n    if (containerManager != null) {\r\n        containerManager.stop();\r\n    }\r\n    createContainerExecutor().deleteAsUser(new DeletionAsUserContext.Builder().setUser(user).setSubDir(new Path(localDir.getAbsolutePath())).setBasedirs(new Path[] {}).build());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "waitForContainerState",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void waitForContainerState(ContainerManagementProtocol containerManager, ContainerId containerID, ContainerState finalState) throws InterruptedException, YarnException, IOException\n{\r\n    waitForContainerState(containerManager, containerID, Arrays.asList(finalState), 20);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "waitForContainerState",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void waitForContainerState(ContainerManagementProtocol containerManager, ContainerId containerID, ContainerState finalState, int timeOutMax) throws InterruptedException, YarnException, IOException\n{\r\n    waitForContainerState(containerManager, containerID, Arrays.asList(finalState), timeOutMax);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "waitForContainerState",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void waitForContainerState(ContainerManagementProtocol containerManager, ContainerId containerID, List<ContainerState> finalStates, int timeOutMax) throws InterruptedException, YarnException, IOException\n{\r\n    List<ContainerId> list = new ArrayList<ContainerId>();\r\n    list.add(containerID);\r\n    GetContainerStatusesRequest request = GetContainerStatusesRequest.newInstance(list);\r\n    ContainerStatus containerStatus = null;\r\n    HashSet<ContainerState> fStates = new HashSet<>(finalStates);\r\n    int timeoutSecs = 0;\r\n    do {\r\n        Thread.sleep(1000);\r\n        containerStatus = containerManager.getContainerStatuses(request).getContainerStatuses().get(0);\r\n        LOG.info(\"Waiting for container to get into one of states \" + fStates + \". Current state is \" + containerStatus.getState());\r\n        timeoutSecs += 1;\r\n    } while (!fStates.contains(containerStatus.getState()) && timeoutSecs < timeOutMax);\r\n    LOG.info(\"Container state is \" + containerStatus.getState());\r\n    Assert.assertTrue(\"ContainerState is not correct (timedout)\", fStates.contains(containerStatus.getState()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "waitForApplicationState",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void waitForApplicationState(ContainerManagerImpl containerManager, ApplicationId appID, ApplicationState finalState) throws InterruptedException\n{\r\n    Application app = containerManager.getContext().getApplications().get(appID);\r\n    int timeout = 0;\r\n    while (!(app.getApplicationState().equals(finalState)) && timeout++ < 15) {\r\n        LOG.info(\"Waiting for app to reach \" + finalState + \".. Current state is \" + app.getApplicationState());\r\n        Thread.sleep(1000);\r\n    }\r\n    Assert.assertTrue(\"App is not in \" + finalState + \" yet!! Timedout!!\", app.getApplicationState().equals(finalState));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "waitForNMContainerState",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void waitForNMContainerState(ContainerManagerImpl containerManager, ContainerId containerID, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState finalState) throws InterruptedException, YarnException, IOException\n{\r\n    waitForNMContainerState(containerManager, containerID, finalState, 20);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "waitForNMContainerState",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void waitForNMContainerState(ContainerManagerImpl containerManager, ContainerId containerID, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState finalState, int timeOutMax) throws InterruptedException, YarnException, IOException\n{\r\n    waitForNMContainerState(containerManager, containerID, Arrays.asList(finalState), timeOutMax);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "waitForNMContainerState",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void waitForNMContainerState(ContainerManagerImpl containerManager, ContainerId containerID, List<org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState> finalStates, int timeOutMax) throws InterruptedException, YarnException, IOException\n{\r\n    Container container = null;\r\n    org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState currentState = null;\r\n    int timeoutSecs = 0;\r\n    do {\r\n        Thread.sleep(1000);\r\n        container = containerManager.getContext().getContainers().get(containerID);\r\n        if (container != null) {\r\n            currentState = container.getContainerState();\r\n        }\r\n        if (currentState != null) {\r\n            LOG.info(\"Waiting for NM container to get into one of the following \" + \"states: \" + finalStates + \". Current state is \" + currentState);\r\n        }\r\n        timeoutSecs += 1;\r\n    } while (!finalStates.contains(currentState) && timeoutSecs < timeOutMax);\r\n    LOG.info(\"Container state is \" + currentState);\r\n    Assert.assertTrue(\"ContainerState is not correct (timedout)\", finalStates.contains(currentState));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "createContainerToken",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Token createContainerToken(ContainerId cId, long rmIdentifier, NodeId nodeId, String user, NMContainerTokenSecretManager containerTokenSecretManager) throws IOException\n{\r\n    return createContainerToken(cId, rmIdentifier, nodeId, user, containerTokenSecretManager, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "createContainerToken",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Token createContainerToken(ContainerId cId, long rmIdentifier, NodeId nodeId, String user, NMContainerTokenSecretManager containerTokenSecretManager, LogAggregationContext logAggregationContext) throws IOException\n{\r\n    Resource r = BuilderUtils.newResource(1024, 1);\r\n    return createContainerToken(cId, rmIdentifier, nodeId, user, r, containerTokenSecretManager, logAggregationContext);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "createContainerToken",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Token createContainerToken(ContainerId cId, long rmIdentifier, NodeId nodeId, String user, NMContainerTokenSecretManager containerTokenSecretManager, LogAggregationContext logAggregationContext, ContainerType containerType) throws IOException\n{\r\n    Resource r = BuilderUtils.newResource(1024, 1);\r\n    return createContainerToken(cId, rmIdentifier, nodeId, user, r, containerTokenSecretManager, logAggregationContext, containerType);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "createContainerToken",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Token createContainerToken(ContainerId cId, long rmIdentifier, NodeId nodeId, String user, Resource resource, NMContainerTokenSecretManager containerTokenSecretManager, LogAggregationContext logAggregationContext) throws IOException\n{\r\n    ContainerTokenIdentifier containerTokenIdentifier = new ContainerTokenIdentifier(cId, nodeId.toString(), user, resource, System.currentTimeMillis() + 100000L, 123, rmIdentifier, Priority.newInstance(0), 0, logAggregationContext, null);\r\n    return BuilderUtils.newContainerToken(nodeId, containerTokenSecretManager.retrievePassword(containerTokenIdentifier), containerTokenIdentifier);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "createContainerToken",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Token createContainerToken(ContainerId cId, long rmIdentifier, NodeId nodeId, String user, Resource resource, NMContainerTokenSecretManager containerTokenSecretManager, LogAggregationContext logAggregationContext, ContainerType continerType) throws IOException\n{\r\n    ContainerTokenIdentifier containerTokenIdentifier = new ContainerTokenIdentifier(cId, nodeId.toString(), user, resource, System.currentTimeMillis() + 100000L, 123, rmIdentifier, Priority.newInstance(0), 0, logAggregationContext, null, continerType);\r\n    return BuilderUtils.newContainerToken(nodeId, containerTokenSecretManager.retrievePassword(containerTokenIdentifier), containerTokenIdentifier);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "createContainerToken",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Token createContainerToken(ContainerId cId, int version, long rmIdentifier, NodeId nodeId, String user, Resource resource, NMContainerTokenSecretManager containerTokenSecretManager, LogAggregationContext logAggregationContext) throws IOException\n{\r\n    ContainerTokenIdentifier containerTokenIdentifier = new ContainerTokenIdentifier(cId, version, nodeId.toString(), user, resource, System.currentTimeMillis() + 100000L, 123, rmIdentifier, Priority.newInstance(0), 0, logAggregationContext, null, ContainerType.TASK, ExecutionType.GUARANTEED);\r\n    return BuilderUtils.newContainerToken(nodeId, containerTokenSecretManager.retrievePassword(containerTokenIdentifier), containerTokenIdentifier);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "createContainerToken",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Token createContainerToken(ContainerId cId, long rmIdentifier, NodeId nodeId, String user, Resource resource, NMContainerTokenSecretManager containerTokenSecretManager, LogAggregationContext logAggregationContext, ExecutionType executionType) throws IOException\n{\r\n    ContainerTokenIdentifier containerTokenIdentifier = new ContainerTokenIdentifier(cId, 0, nodeId.toString(), user, resource, System.currentTimeMillis() + 100000L, 123, rmIdentifier, Priority.newInstance(0), 0, logAggregationContext, null, ContainerType.TASK, executionType);\r\n    return BuilderUtils.newContainerToken(nodeId, containerTokenSecretManager.retrievePassword(containerTokenIdentifier), containerTokenIdentifier);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "createContainerToken",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Token createContainerToken(ContainerId cId, int version, long rmIdentifier, NodeId nodeId, String user, Resource resource, NMContainerTokenSecretManager containerTokenSecretManager, LogAggregationContext logAggregationContext, ExecutionType executionType) throws IOException\n{\r\n    ContainerTokenIdentifier containerTokenIdentifier = new ContainerTokenIdentifier(cId, version, nodeId.toString(), user, resource, System.currentTimeMillis() + 100000L, 123, rmIdentifier, Priority.newInstance(0), 0, logAggregationContext, null, ContainerType.TASK, executionType);\r\n    return BuilderUtils.newContainerToken(nodeId, containerTokenSecretManager.retrievePassword(containerTokenIdentifier), containerTokenIdentifier);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "createContainerId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerId createContainerId(int id)\n{\r\n    return createContainerId(id, 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "createContainerId",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ContainerId createContainerId(int cId, int aId)\n{\r\n    ApplicationId appId = ApplicationId.newInstance(0, aId);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId containerId = ContainerId.newContainerId(appAttemptId, cId);\r\n    return containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "initStorage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void initStorage(Configuration conf)\n{\r\n    apps = new HashMap<ApplicationId, ContainerManagerApplicationProto>();\r\n    containerStates = new HashMap<ContainerId, RecoveredContainerState>();\r\n    nmTokenState = new RecoveredNMTokensState();\r\n    applicationMasterKeys = new HashMap<ApplicationAttemptId, MasterKey>();\r\n    containerTokenState = new RecoveredContainerTokensState();\r\n    activeTokens = new HashMap<ContainerId, Long>();\r\n    trackerStates = new HashMap<TrackerKey, TrackerState>();\r\n    deleteTasks = new HashMap<Integer, DeletionServiceDeleteTaskProto>();\r\n    logDeleterState = new HashMap<ApplicationId, LogDeleterProto>();\r\n    amrmProxyState = new RecoveredAMRMProxyState();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "startStorage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void startStorage()\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "closeStorage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void closeStorage()\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadApplicationsState",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RecoveredApplicationsState loadApplicationsState() throws IOException\n{\r\n    RecoveredApplicationsState state = new RecoveredApplicationsState();\r\n    List<ContainerManagerApplicationProto> containerList = new ArrayList<ContainerManagerApplicationProto>(apps.values());\r\n    state.it = new NMMemoryRecoveryIterator<ContainerManagerApplicationProto>(containerList.iterator());\r\n    return state;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeApplication",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void storeApplication(ApplicationId appId, ContainerManagerApplicationProto proto) throws IOException\n{\r\n    ContainerManagerApplicationProto protoCopy = ContainerManagerApplicationProto.parseFrom(proto.toByteString());\r\n    apps.put(appId, protoCopy);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeApplication",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void removeApplication(ApplicationId appId) throws IOException\n{\r\n    apps.remove(appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "getContainerStateIterator",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "RecoveryIterator<RecoveredContainerState> getContainerStateIterator() throws IOException\n{\r\n    List<RecoveredContainerState> result = new ArrayList<RecoveredContainerState>(containerStates.size());\r\n    for (RecoveredContainerState rcs : containerStates.values()) {\r\n        RecoveredContainerState rcsCopy = new RecoveredContainerState(rcs.getContainerId());\r\n        rcsCopy.status = rcs.status;\r\n        rcsCopy.exitCode = rcs.exitCode;\r\n        rcsCopy.killed = rcs.killed;\r\n        rcsCopy.diagnostics = rcs.diagnostics;\r\n        rcsCopy.startRequest = rcs.startRequest;\r\n        rcsCopy.capability = rcs.capability;\r\n        rcsCopy.setRemainingRetryAttempts(rcs.getRemainingRetryAttempts());\r\n        rcsCopy.setRestartTimes(rcs.getRestartTimes());\r\n        rcsCopy.setWorkDir(rcs.getWorkDir());\r\n        rcsCopy.setLogDir(rcs.getLogDir());\r\n        rcsCopy.setResourceMappings(rcs.getResourceMappings());\r\n        result.add(rcsCopy);\r\n    }\r\n    return new NMMemoryRecoveryIterator<RecoveredContainerState>(result.iterator());\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainer",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void storeContainer(ContainerId containerId, int version, long startTime, StartContainerRequest startRequest)\n{\r\n    RecoveredContainerState rcs = new RecoveredContainerState(containerId);\r\n    rcs.startRequest = startRequest;\r\n    rcs.status = RecoveredContainerStatus.REQUESTED;\r\n    rcs.version = version;\r\n    try {\r\n        ContainerTokenIdentifier containerTokenIdentifier = BuilderUtils.newContainerTokenIdentifier(startRequest.getContainerToken());\r\n        rcs.capability = new ResourcePBImpl(containerTokenIdentifier.getProto().getResource());\r\n    } catch (IOException e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n    rcs.setStartTime(startTime);\r\n    containerStates.put(containerId, rcs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerQueued",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void storeContainerQueued(ContainerId containerId) throws IOException\n{\r\n    RecoveredContainerState rcs = getRecoveredContainerState(containerId);\r\n    rcs.status = RecoveredContainerStatus.QUEUED;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerPaused",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void storeContainerPaused(ContainerId containerId) throws IOException\n{\r\n    RecoveredContainerState rcs = getRecoveredContainerState(containerId);\r\n    rcs.status = RecoveredContainerStatus.PAUSED;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeContainerPaused",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void removeContainerPaused(ContainerId containerId) throws IOException\n{\r\n    RecoveredContainerState rcs = getRecoveredContainerState(containerId);\r\n    rcs.status = RecoveredContainerStatus.LAUNCHED;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerDiagnostics",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void storeContainerDiagnostics(ContainerId containerId, StringBuilder diagnostics) throws IOException\n{\r\n    RecoveredContainerState rcs = getRecoveredContainerState(containerId);\r\n    rcs.diagnostics = diagnostics.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerLaunched",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void storeContainerLaunched(ContainerId containerId) throws IOException\n{\r\n    RecoveredContainerState rcs = getRecoveredContainerState(containerId);\r\n    if (rcs.exitCode != ContainerExitStatus.INVALID) {\r\n        throw new IOException(\"Container already completed\");\r\n    }\r\n    rcs.status = RecoveredContainerStatus.LAUNCHED;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerUpdateToken",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void storeContainerUpdateToken(ContainerId containerId, ContainerTokenIdentifier containerTokenIdentifier) throws IOException\n{\r\n    RecoveredContainerState rcs = getRecoveredContainerState(containerId);\r\n    rcs.capability = containerTokenIdentifier.getResource();\r\n    rcs.version = containerTokenIdentifier.getVersion();\r\n    Token currentToken = rcs.getStartRequest().getContainerToken();\r\n    Token updatedToken = Token.newInstance(containerTokenIdentifier.getBytes(), ContainerTokenIdentifier.KIND.toString(), currentToken.getPassword().array(), currentToken.getService());\r\n    rcs.startRequest.setContainerToken(updatedToken);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerKilled",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void storeContainerKilled(ContainerId containerId) throws IOException\n{\r\n    RecoveredContainerState rcs = getRecoveredContainerState(containerId);\r\n    rcs.killed = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerCompleted",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void storeContainerCompleted(ContainerId containerId, int exitCode) throws IOException\n{\r\n    RecoveredContainerState rcs = getRecoveredContainerState(containerId);\r\n    rcs.status = RecoveredContainerStatus.COMPLETED;\r\n    rcs.exitCode = exitCode;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerRemainingRetryAttempts",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void storeContainerRemainingRetryAttempts(ContainerId containerId, int remainingRetryAttempts) throws IOException\n{\r\n    RecoveredContainerState rcs = getRecoveredContainerState(containerId);\r\n    rcs.setRemainingRetryAttempts(remainingRetryAttempts);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerRestartTimes",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void storeContainerRestartTimes(ContainerId containerId, List<Long> restartTimes) throws IOException\n{\r\n    RecoveredContainerState rcs = getRecoveredContainerState(containerId);\r\n    rcs.setRestartTimes(restartTimes);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerWorkDir",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void storeContainerWorkDir(ContainerId containerId, String workDir) throws IOException\n{\r\n    RecoveredContainerState rcs = getRecoveredContainerState(containerId);\r\n    rcs.setWorkDir(workDir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerLogDir",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void storeContainerLogDir(ContainerId containerId, String logDir) throws IOException\n{\r\n    RecoveredContainerState rcs = getRecoveredContainerState(containerId);\r\n    rcs.setLogDir(logDir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void removeContainer(ContainerId containerId) throws IOException\n{\r\n    containerStates.remove(containerId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "getRecoveredContainerState",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RecoveredContainerState getRecoveredContainerState(ContainerId containerId) throws IOException\n{\r\n    RecoveredContainerState rcs = containerStates.get(containerId);\r\n    if (rcs == null) {\r\n        throw new IOException(\"No start request for \" + containerId);\r\n    }\r\n    return rcs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadTrackerState",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "LocalResourceTrackerState loadTrackerState(TrackerState ts)\n{\r\n    List<LocalizedResourceProto> completedResources = new ArrayList<LocalizedResourceProto>(ts.localizedResources.values());\r\n    RecoveryIterator<LocalizedResourceProto> crIt = new NMMemoryRecoveryIterator<LocalizedResourceProto>(completedResources.iterator());\r\n    Map<LocalResourceProto, Path> inProgressMap = new HashMap<LocalResourceProto, Path>();\r\n    for (Map.Entry<Path, LocalResourceProto> entry : ts.inProgressMap.entrySet()) {\r\n        inProgressMap.put(entry.getValue(), entry.getKey());\r\n    }\r\n    RecoveryIterator<Map.Entry<LocalResourceProto, Path>> srIt = new NMMemoryRecoveryIterator<Map.Entry<LocalResourceProto, Path>>(inProgressMap.entrySet().iterator());\r\n    return new LocalResourceTrackerState(crIt, srIt);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "getTrackerState",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "TrackerState getTrackerState(TrackerKey key)\n{\r\n    TrackerState ts = trackerStates.get(key);\r\n    if (ts == null) {\r\n        ts = new TrackerState();\r\n        trackerStates.put(key, ts);\r\n    }\r\n    return ts;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadLocalizationState",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "RecoveredLocalizationState loadLocalizationState()\n{\r\n    RecoveredLocalizationState result = new RecoveredLocalizationState();\r\n    Map<String, RecoveredUserResources> userResources = new HashMap<String, RecoveredUserResources>();\r\n    for (Map.Entry<TrackerKey, TrackerState> e : trackerStates.entrySet()) {\r\n        TrackerKey tk = e.getKey();\r\n        TrackerState ts = e.getValue();\r\n        if (tk.user == null) {\r\n            result.publicTrackerState = loadTrackerState(ts);\r\n        } else {\r\n            RecoveredUserResources rur = userResources.get(tk.user);\r\n            if (rur == null) {\r\n                rur = new RecoveredUserResources();\r\n                userResources.put(tk.user, rur);\r\n            }\r\n            if (tk.appId == null) {\r\n                rur.privateTrackerState = loadTrackerState(ts);\r\n            } else {\r\n                rur.appTrackerStates.put(tk.appId, loadTrackerState(ts));\r\n            }\r\n        }\r\n    }\r\n    result.it = new NMMemoryRecoveryIterator<Map.Entry<String, RecoveredUserResources>>(userResources.entrySet().iterator());\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "startResourceLocalization",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void startResourceLocalization(String user, ApplicationId appId, LocalResourceProto proto, Path localPath)\n{\r\n    TrackerState ts = getTrackerState(new TrackerKey(user, appId));\r\n    ts.inProgressMap.put(localPath, proto);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "finishResourceLocalization",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void finishResourceLocalization(String user, ApplicationId appId, LocalizedResourceProto proto)\n{\r\n    TrackerState ts = getTrackerState(new TrackerKey(user, appId));\r\n    Path localPath = new Path(proto.getLocalPath());\r\n    ts.inProgressMap.remove(localPath);\r\n    ts.localizedResources.put(localPath, proto);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeLocalizedResource",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void removeLocalizedResource(String user, ApplicationId appId, Path localPath)\n{\r\n    TrackerState ts = trackerStates.get(new TrackerKey(user, appId));\r\n    if (ts != null) {\r\n        ts.inProgressMap.remove(localPath);\r\n        ts.localizedResources.remove(localPath);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadDeletionServiceState",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RecoveredDeletionServiceState loadDeletionServiceState() throws IOException\n{\r\n    RecoveredDeletionServiceState result = new RecoveredDeletionServiceState();\r\n    List<DeletionServiceDeleteTaskProto> deleteTaskProtos = new ArrayList<DeletionServiceDeleteTaskProto>(deleteTasks.values());\r\n    result.it = new NMMemoryRecoveryIterator<DeletionServiceDeleteTaskProto>(deleteTaskProtos.iterator());\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeDeletionTask",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void storeDeletionTask(int taskId, DeletionServiceDeleteTaskProto taskProto) throws IOException\n{\r\n    deleteTasks.put(taskId, taskProto);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeDeletionTask",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void removeDeletionTask(int taskId) throws IOException\n{\r\n    deleteTasks.remove(taskId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadNMTokensState",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RecoveredNMTokensState loadNMTokensState() throws IOException\n{\r\n    RecoveredNMTokensState result = new RecoveredNMTokensState();\r\n    result.currentMasterKey = nmTokenState.currentMasterKey;\r\n    result.previousMasterKey = nmTokenState.previousMasterKey;\r\n    Map<ApplicationAttemptId, MasterKey> masterKeysMap = new HashMap<ApplicationAttemptId, MasterKey>(applicationMasterKeys);\r\n    result.it = new NMMemoryRecoveryIterator<Map.Entry<ApplicationAttemptId, MasterKey>>(masterKeysMap.entrySet().iterator());\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeNMTokenCurrentMasterKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void storeNMTokenCurrentMasterKey(MasterKey key) throws IOException\n{\r\n    MasterKeyPBImpl keypb = (MasterKeyPBImpl) key;\r\n    nmTokenState.currentMasterKey = new MasterKeyPBImpl(keypb.getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeNMTokenPreviousMasterKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void storeNMTokenPreviousMasterKey(MasterKey key) throws IOException\n{\r\n    MasterKeyPBImpl keypb = (MasterKeyPBImpl) key;\r\n    nmTokenState.previousMasterKey = new MasterKeyPBImpl(keypb.getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeNMTokenApplicationMasterKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void storeNMTokenApplicationMasterKey(ApplicationAttemptId attempt, MasterKey key) throws IOException\n{\r\n    MasterKeyPBImpl keypb = (MasterKeyPBImpl) key;\r\n    applicationMasterKeys.put(attempt, new MasterKeyPBImpl(keypb.getProto()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeNMTokenApplicationMasterKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void removeNMTokenApplicationMasterKey(ApplicationAttemptId attempt) throws IOException\n{\r\n    applicationMasterKeys.remove(attempt);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadContainerTokensState",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RecoveredContainerTokensState loadContainerTokensState() throws IOException\n{\r\n    RecoveredContainerTokensState result = new RecoveredContainerTokensState();\r\n    result.currentMasterKey = containerTokenState.currentMasterKey;\r\n    result.previousMasterKey = containerTokenState.previousMasterKey;\r\n    Map<ContainerId, Long> containersTokenMap = new HashMap<ContainerId, Long>(activeTokens);\r\n    result.it = new NMMemoryRecoveryIterator<Map.Entry<ContainerId, Long>>(containersTokenMap.entrySet().iterator());\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerTokenCurrentMasterKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void storeContainerTokenCurrentMasterKey(MasterKey key) throws IOException\n{\r\n    MasterKeyPBImpl keypb = (MasterKeyPBImpl) key;\r\n    containerTokenState.currentMasterKey = new MasterKeyPBImpl(keypb.getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerTokenPreviousMasterKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void storeContainerTokenPreviousMasterKey(MasterKey key) throws IOException\n{\r\n    MasterKeyPBImpl keypb = (MasterKeyPBImpl) key;\r\n    containerTokenState.previousMasterKey = new MasterKeyPBImpl(keypb.getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerToken",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void storeContainerToken(ContainerId containerId, Long expirationTime) throws IOException\n{\r\n    activeTokens.put(containerId, expirationTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeContainerToken",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void removeContainerToken(ContainerId containerId) throws IOException\n{\r\n    activeTokens.remove(containerId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadLogDeleterState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RecoveredLogDeleterState loadLogDeleterState() throws IOException\n{\r\n    RecoveredLogDeleterState state = new RecoveredLogDeleterState();\r\n    state.logDeleterMap = new HashMap<ApplicationId, LogDeleterProto>(logDeleterState);\r\n    return state;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeLogDeleter",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void storeLogDeleter(ApplicationId appId, LogDeleterProto proto) throws IOException\n{\r\n    logDeleterState.put(appId, proto);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeLogDeleter",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void removeLogDeleter(ApplicationId appId) throws IOException\n{\r\n    logDeleterState.remove(appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadAMRMProxyState",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "RecoveredAMRMProxyState loadAMRMProxyState() throws IOException\n{\r\n    RecoveredAMRMProxyState result = new RecoveredAMRMProxyState();\r\n    result.setCurrentMasterKey(amrmProxyState.getCurrentMasterKey());\r\n    result.setNextMasterKey(amrmProxyState.getNextMasterKey());\r\n    for (Map.Entry<ApplicationAttemptId, Map<String, byte[]>> entry : amrmProxyState.getAppContexts().entrySet()) {\r\n        result.getAppContexts().put(entry.getKey(), new HashMap<String, byte[]>(entry.getValue()));\r\n    }\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeAMRMProxyCurrentMasterKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void storeAMRMProxyCurrentMasterKey(MasterKey key) throws IOException\n{\r\n    MasterKeyPBImpl keypb = (MasterKeyPBImpl) key;\r\n    amrmProxyState.setCurrentMasterKey(new MasterKeyPBImpl(keypb.getProto()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeAMRMProxyNextMasterKey",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void storeAMRMProxyNextMasterKey(MasterKey key) throws IOException\n{\r\n    if (key == null) {\r\n        amrmProxyState.setNextMasterKey(null);\r\n        return;\r\n    }\r\n    MasterKeyPBImpl keypb = (MasterKeyPBImpl) key;\r\n    amrmProxyState.setNextMasterKey(new MasterKeyPBImpl(keypb.getProto()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeAMRMProxyAppContextEntry",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void storeAMRMProxyAppContextEntry(ApplicationAttemptId attempt, String key, byte[] data) throws IOException\n{\r\n    Map<String, byte[]> entryMap = amrmProxyState.getAppContexts().get(attempt);\r\n    if (entryMap == null) {\r\n        entryMap = new HashMap<>();\r\n        amrmProxyState.getAppContexts().put(attempt, entryMap);\r\n    }\r\n    entryMap.put(key, Arrays.copyOf(data, data.length));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeAMRMProxyAppContextEntry",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void removeAMRMProxyAppContextEntry(ApplicationAttemptId attempt, String key) throws IOException\n{\r\n    Map<String, byte[]> entryMap = amrmProxyState.getAppContexts().get(attempt);\r\n    if (entryMap != null) {\r\n        entryMap.remove(key);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "removeAMRMProxyAppContext",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void removeAMRMProxyAppContext(ApplicationAttemptId attempt) throws IOException\n{\r\n    amrmProxyState.getAppContexts().remove(attempt);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeAssignedResources",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void storeAssignedResources(Container container, String resourceType, List<Serializable> assignedResources) throws IOException\n{\r\n    ResourceMappings.AssignedResources ar = new ResourceMappings.AssignedResources();\r\n    ar.updateAssignedResources(assignedResources);\r\n    containerStates.get(container.getContainerId()).getResourceMappings().addAssignedResources(resourceType, ar);\r\n    updateContainerResourceMapping(container, resourceType, assignedResources);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testRunCommandNoPriority",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testRunCommandNoPriority() throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    String[] command = containerExecutor.getRunCommand(\"echo\", \"group1\", \"user\", null, conf);\r\n    assertTrue(\"first command should be the run command for the platform\", command[0].equals(Shell.WINUTILS) || command[0].equals(\"bash\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testRunCommandwithPriority",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testRunCommandwithPriority() throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    conf.setInt(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY, 2);\r\n    String[] command = containerExecutor.getRunCommand(\"echo\", \"group1\", \"user\", null, conf);\r\n    if (Shell.WINDOWS) {\r\n        assertEquals(\"first command should be the run command for the platform\", Shell.WINUTILS, command[0]);\r\n    } else {\r\n        assertEquals(\"first command should be nice\", \"nice\", command[0]);\r\n        assertEquals(\"second command should be -n\", \"-n\", command[1]);\r\n        assertEquals(\"third command should be the priority\", Integer.toString(2), command[2]);\r\n    }\r\n    conf.setInt(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY, -5);\r\n    command = containerExecutor.getRunCommand(\"echo\", \"group1\", \"user\", null, conf);\r\n    if (Shell.WINDOWS) {\r\n        assertEquals(\"first command should be the run command for the platform\", Shell.WINUTILS, command[0]);\r\n    } else {\r\n        assertEquals(\"first command should be nice\", \"nice\", command[0]);\r\n        assertEquals(\"second command should be -n\", \"-n\", command[1]);\r\n        assertEquals(\"third command should be the priority\", Integer.toString(-5), command[2]);\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testRunCommandWithNoResources",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testRunCommandWithNoResources()\n{\r\n    assumeWindows();\r\n    Configuration conf = new Configuration();\r\n    String[] command = containerExecutor.getRunCommand(\"echo\", \"group1\", null, null, conf, Resource.newInstance(1024, 1));\r\n    String[] expected = { Shell.WINUTILS, \"task\", \"create\", \"-m\", \"-1\", \"-c\", \"-1\", \"group1\", \"cmd /c \" + \"echo\" };\r\n    Assert.assertTrue(Arrays.equals(expected, command));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testRunCommandWithMemoryOnlyResources",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testRunCommandWithMemoryOnlyResources()\n{\r\n    assumeWindows();\r\n    Configuration conf = new Configuration();\r\n    conf.set(YarnConfiguration.NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED, \"true\");\r\n    String[] command = containerExecutor.getRunCommand(\"echo\", \"group1\", null, null, conf, Resource.newInstance(1024, 1));\r\n    String[] expected = { Shell.WINUTILS, \"task\", \"create\", \"-m\", \"1024\", \"-c\", \"-1\", \"group1\", \"cmd /c \" + \"echo\" };\r\n    Assert.assertTrue(Arrays.equals(expected, command));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testRunCommandWithCpuAndMemoryResources",
  "errType" : null,
  "containingMethodsNum" : 29,
  "sourceCodeText" : "void testRunCommandWithCpuAndMemoryResources()\n{\r\n    assumeWindows();\r\n    int containerCores = 1;\r\n    Configuration conf = new Configuration();\r\n    conf.set(YarnConfiguration.NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED, \"true\");\r\n    conf.set(YarnConfiguration.NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED, \"true\");\r\n    String[] command = containerExecutor.getRunCommand(\"echo\", \"group1\", null, null, conf, Resource.newInstance(1024, 1));\r\n    int nodeVCores = NodeManagerHardwareUtils.getVCores(conf);\r\n    Assert.assertEquals(YarnConfiguration.DEFAULT_NM_VCORES, nodeVCores);\r\n    int cpuRate = Math.min(10000, (containerCores * 10000) / nodeVCores);\r\n    String[] expected = { Shell.WINUTILS, \"task\", \"create\", \"-m\", \"1024\", \"-c\", String.valueOf(cpuRate), \"group1\", \"cmd /c \" + \"echo\" };\r\n    Assert.assertEquals(Arrays.toString(expected), Arrays.toString(command));\r\n    conf.setBoolean(YarnConfiguration.NM_ENABLE_HARDWARE_CAPABILITY_DETECTION, true);\r\n    int nodeCPUs = NodeManagerHardwareUtils.getNodeCPUs(conf);\r\n    float yarnCPUs = NodeManagerHardwareUtils.getContainersCPUs(conf);\r\n    nodeVCores = NodeManagerHardwareUtils.getVCores(conf);\r\n    Assert.assertEquals(nodeCPUs, (int) yarnCPUs);\r\n    Assert.assertEquals(nodeCPUs, nodeVCores);\r\n    command = containerExecutor.getRunCommand(\"echo\", \"group1\", null, null, conf, Resource.newInstance(1024, 1));\r\n    cpuRate = Math.min(10000, (containerCores * 10000) / nodeVCores);\r\n    expected[6] = String.valueOf(cpuRate);\r\n    Assert.assertEquals(Arrays.toString(expected), Arrays.toString(command));\r\n    int yarnCpuLimit = 80;\r\n    conf.setInt(YarnConfiguration.NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT, yarnCpuLimit);\r\n    yarnCPUs = NodeManagerHardwareUtils.getContainersCPUs(conf);\r\n    nodeVCores = NodeManagerHardwareUtils.getVCores(conf);\r\n    Assert.assertEquals(nodeCPUs * 0.8, yarnCPUs, 0.01);\r\n    if (nodeCPUs == 1) {\r\n        Assert.assertEquals(1, nodeVCores);\r\n    } else {\r\n        Assert.assertEquals((int) (nodeCPUs * 0.8), nodeVCores);\r\n    }\r\n    command = containerExecutor.getRunCommand(\"echo\", \"group1\", null, null, conf, Resource.newInstance(1024, 1));\r\n    int containerPerc = (yarnCpuLimit * containerCores) / nodeVCores;\r\n    cpuRate = Math.min(10000, 100 * containerPerc);\r\n    expected[6] = String.valueOf(cpuRate);\r\n    Assert.assertEquals(Arrays.toString(expected), Arrays.toString(command));\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testReapContainer",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testReapContainer() throws Exception\n{\r\n    Container container = mock(Container.class);\r\n    ContainerReapContext.Builder builder = new ContainerReapContext.Builder();\r\n    builder.setContainer(container).setUser(\"foo\");\r\n    assertTrue(containerExecutor.reapContainer(builder.build()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testExecContainer",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testExecContainer() throws Exception\n{\r\n    Container container = mock(Container.class);\r\n    try {\r\n        ContainerExecContext.Builder builder = new ContainerExecContext.Builder();\r\n        builder.setUser(\"foo\").setAppId(\"app1\").setContainer(container);\r\n        ContainerExecContext ctx = builder.build();\r\n        containerExecutor.execContainer(ctx);\r\n    } catch (Exception e) {\r\n        Assert.assertTrue(e instanceof ContainerExecutionException);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testCleanupBeforeLaunch",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testCleanupBeforeLaunch() throws Exception\n{\r\n    Container container = mock(Container.class);\r\n    java.nio.file.Path linkName = Paths.get(\"target/linkName\");\r\n    java.nio.file.Path target = Paths.get(\"target\");\r\n    FileUtils.deleteQuietly(linkName.toFile());\r\n    Files.createSymbolicLink(linkName.toAbsolutePath(), target.toAbsolutePath());\r\n    Map<Path, List<String>> localResources = new HashMap<>();\r\n    localResources.put(new Path(target.toFile().getAbsolutePath()), Lists.newArrayList(linkName.toFile().getAbsolutePath()));\r\n    when(container.getLocalizedResources()).thenReturn(localResources);\r\n    when(container.getUser()).thenReturn(System.getProperty(\"user.name\"));\r\n    containerExecutor.cleanupBeforeRelaunch(container);\r\n    Assert.assertTrue(!Files.exists(linkName));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testAcquireWithExitCodeTimeout",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 22,
  "sourceCodeText" : "void testAcquireWithExitCodeTimeout() throws Exception\n{\r\n    ApplicationId appId = ApplicationId.newInstance(12345, 67890);\r\n    ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 54321);\r\n    ContainerId cid = ContainerId.newContainerId(attemptId, 9876);\r\n    ContainerExecutor mockCE = spy(containerExecutor);\r\n    File root = new File(System.getProperty(\"test.build.data\", \"/tmp\"));\r\n    File testDir = new File(root, TestContainerExecutor.class.getName()).getAbsoluteFile();\r\n    File pidFile = new File(testDir, \"pid\");\r\n    Path pidPath = new Path(pidFile.toString());\r\n    doReturn(pidPath).when(mockCE).getPidFilePath(cid);\r\n    doReturn(false).when(mockCE).isContainerAlive(any());\r\n    doReturn(true).when(mockCE).isContainerActive(cid);\r\n    Configuration conf = new YarnConfiguration();\r\n    conf.setInt(YarnConfiguration.NM_CONTAINER_EXECUTOR_EXIT_FILE_TIMEOUT, 4000);\r\n    mockCE.setConf(conf);\r\n    String exitCodeFileString = ContainerLaunch.getExitCodeFile(pidFile.toString());\r\n    File exitCodeFile = new File(exitCodeFileString);\r\n    Timer timer = new Timer();\r\n    try {\r\n        int writtenExitCode = 10;\r\n        FileUtils.writeStringToFile(pidFile, \"2992\", StandardCharsets.UTF_8, false);\r\n        TimerTask task = new java.util.TimerTask() {\r\n\r\n            @Override\r\n            public void run() {\r\n                try {\r\n                    FileUtils.writeStringToFile(exitCodeFile, Integer.toString(writtenExitCode), StandardCharsets.UTF_8, false);\r\n                } catch (IOException ioe) {\r\n                    LOG.warn(\"Could not write pid file\");\r\n                }\r\n            }\r\n        };\r\n        timer.schedule(task, 3000);\r\n        int returnCode = mockCE.reacquireContainer(new ContainerReacquisitionContext.Builder().setUser(\"foouser\").setContainerId(cid).build());\r\n        assertEquals(writtenExitCode, returnCode);\r\n    } finally {\r\n        timer.cancel();\r\n        if (testDir.exists()) {\r\n            FileUtils.deleteQuietly(testDir);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setup()\n{\r\n    conf = new Configuration();\r\n    File tmpDir = new File(tmpPath);\r\n    tmpDir.mkdirs();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "cleanUp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void cleanUp() throws IOException\n{\r\n    File tmpDir = new File(tmpPath);\r\n    FileUtils.deleteDirectory(tmpDir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testGetLayerResources",
  "errType" : null,
  "containingMethodsNum" : 23,
  "sourceCodeText" : "void testGetLayerResources() throws IOException\n{\r\n    ImageManifest mockManifest = mock(ImageManifest.class);\r\n    ImageManifest.Blob mockLayer1 = mock(ImageManifest.Blob.class);\r\n    ImageManifest.Blob mockLayer2 = mock(ImageManifest.Blob.class);\r\n    String digest1Hash = \"e060f9dd9e8cd9ec0e2814b661a96d78f7298120d7654ba9f83ebfb11ff1fb1e\";\r\n    String digest2Hash = \"5af5ff88469c8473487bfbc2fe81b4e7d84644bd91f1ab9305de47ef5673637e\";\r\n    String digest1 = \"sha256:\" + digest1Hash;\r\n    String digest2 = \"sha256:\" + digest2Hash;\r\n    long size1 = 1234;\r\n    long size2 = 5678;\r\n    when(mockLayer1.getMediaType()).thenReturn(LAYER_MEDIA_TYPE);\r\n    when(mockLayer1.getDigest()).thenReturn(digest1);\r\n    when(mockLayer1.getSize()).thenReturn(size1);\r\n    when(mockLayer2.getMediaType()).thenReturn(LAYER_MEDIA_TYPE);\r\n    when(mockLayer2.getDigest()).thenReturn(digest2);\r\n    when(mockLayer2.getSize()).thenReturn(size2);\r\n    ArrayList<ImageManifest.Blob> mockLayers = new ArrayList<>();\r\n    mockLayers.add(mockLayer1);\r\n    mockLayers.add(mockLayer2);\r\n    when(mockManifest.getLayers()).thenReturn(mockLayers);\r\n    conf.set(NM_RUNC_IMAGE_TOPLEVEL_DIR, tmpPath);\r\n    long modTime = 123456789;\r\n    HdfsManifestToResourcesPlugin hdfsManifestToResourcesPlugin = new HdfsManifestToResourcesPlugin() {\r\n\r\n        @Override\r\n        protected FileStatus statBlob(Path path) throws IOException {\r\n            FileStatus mockFileStatus = mock(FileStatus.class);\r\n            when(mockFileStatus.getModificationTime()).thenReturn(modTime);\r\n            return mockFileStatus;\r\n        }\r\n    };\r\n    hdfsManifestToResourcesPlugin.init(conf);\r\n    List<LocalResource> returnedLayers = hdfsManifestToResourcesPlugin.getLayerResources(mockManifest);\r\n    URL url1 = URL.fromPath(new Path(tmpPath + \"/layers\", digest1Hash + \".sqsh\"));\r\n    URL url2 = URL.fromPath(new Path(tmpPath + \"/layers\", digest2Hash + \".sqsh\"));\r\n    LocalResource rsrc1 = LocalResource.newInstance(url1, LocalResourceType.FILE, LocalResourceVisibility.PUBLIC, size1, modTime);\r\n    LocalResource rsrc2 = LocalResource.newInstance(url2, LocalResourceType.FILE, LocalResourceVisibility.PUBLIC, size2, modTime);\r\n    Assert.assertEquals(rsrc1, returnedLayers.get(0));\r\n    Assert.assertEquals(rsrc2, returnedLayers.get(1));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testGetConfigResources",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testGetConfigResources() throws IOException\n{\r\n    ImageManifest mockManifest = mock(ImageManifest.class);\r\n    ImageManifest.Blob mockConfig = mock(ImageManifest.Blob.class);\r\n    String digestHash = \"e23cac476d0238f0f859c1e07e5faad85262bca490ef5c3a9da32a5b39c6b204\";\r\n    String digest = \"sha256:\" + digestHash;\r\n    long size = 1234;\r\n    when(mockConfig.getMediaType()).thenReturn(CONFIG_MEDIA_TYPE);\r\n    when(mockConfig.getDigest()).thenReturn(digest);\r\n    when(mockConfig.getSize()).thenReturn(size);\r\n    when(mockManifest.getConfig()).thenReturn(mockConfig);\r\n    conf.set(NM_RUNC_IMAGE_TOPLEVEL_DIR, tmpPath);\r\n    long modTime = 123456789;\r\n    HdfsManifestToResourcesPlugin hdfsManifestToResourcesPlugin = new HdfsManifestToResourcesPlugin() {\r\n\r\n        @Override\r\n        protected FileStatus statBlob(Path path) throws IOException {\r\n            FileStatus mockFileStatus = mock(FileStatus.class);\r\n            when(mockFileStatus.getModificationTime()).thenReturn(modTime);\r\n            return mockFileStatus;\r\n        }\r\n    };\r\n    hdfsManifestToResourcesPlugin.init(conf);\r\n    LocalResource returnedLayer = hdfsManifestToResourcesPlugin.getConfigResource(mockManifest);\r\n    URL url1 = URL.fromPath(new Path(tmpPath + \"/config\", digestHash));\r\n    LocalResource rsrc = LocalResource.newInstance(url1, LocalResourceType.FILE, LocalResourceVisibility.PUBLIC, size, modTime);\r\n    Assert.assertEquals(rsrc, returnedLayer);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setup()\n{\r\n    dockerImagesCommand = new DockerImagesCommand();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testGetCommandOption",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetCommandOption()\n{\r\n    assertEquals(\"images\", dockerImagesCommand.getCommandOption());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testAllImages",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testAllImages()\n{\r\n    assertEquals(\"images\", StringUtils.join(\",\", dockerImagesCommand.getDockerCommandWithArguments().get(\"docker-command\")));\r\n    assertEquals(1, dockerImagesCommand.getDockerCommandWithArguments().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testSingleImage",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testSingleImage()\n{\r\n    dockerImagesCommand = dockerImagesCommand.getSingleImageStatus(IMAGE_NAME);\r\n    assertEquals(\"images\", StringUtils.join(\",\", dockerImagesCommand.getDockerCommandWithArguments().get(\"docker-command\")));\r\n    assertEquals(\"image name\", \"foo\", StringUtils.join(\",\", dockerImagesCommand.getDockerCommandWithArguments().get(\"image\")));\r\n    assertEquals(2, dockerImagesCommand.getDockerCommandWithArguments().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "setupMockPluginsWithNmResourceInfo",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setupMockPluginsWithNmResourceInfo() throws YarnException\n{\r\n    ResourcePlugin mockPlugin1 = mock(ResourcePlugin.class);\r\n    NMResourceInfo nmResourceInfo1 = new NMResourceInfo() {\r\n\r\n        private long a = NM_RESOURCE_VALUE;\r\n\r\n        public long getA() {\r\n            return a;\r\n        }\r\n    };\r\n    when(mockPlugin1.getNMResourceInfo()).thenReturn(nmResourceInfo1);\r\n    ResourcePluginManager pluginManager = createResourceManagerWithPlugins(ImmutableMap.<String, ResourcePlugin>builder().put(\"resource-1\", mockPlugin1).put(\"yarn.io/resource-1\", mockPlugin1).put(\"resource-2\", mock(ResourcePlugin.class)).build());\r\n    nmContext.setResourcePluginManager(pluginManager);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "setupMockPluginsWithGpuResourceInfo",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void setupMockPluginsWithGpuResourceInfo() throws YarnException\n{\r\n    GpuDeviceInformation gpuDeviceInformation = new GpuDeviceInformation();\r\n    gpuDeviceInformation.setDriverVersion(\"1.2.3\");\r\n    gpuDeviceInformation.setGpus(Arrays.asList(new PerGpuDeviceInformation()));\r\n    ResourcePlugin mockPlugin1 = mock(ResourcePlugin.class);\r\n    List<GpuDevice> totalGpuDevices = Arrays.asList(new GpuDevice(1, 1), new GpuDevice(2, 2), new GpuDevice(3, 3));\r\n    List<AssignedGpuDevice> assignedGpuDevices = Arrays.asList(new AssignedGpuDevice(2, 2, createContainerId(1)), new AssignedGpuDevice(3, 3, createContainerId(2)));\r\n    NMResourceInfo nmResourceInfo1 = new NMGpuResourceInfo(gpuDeviceInformation, totalGpuDevices, assignedGpuDevices);\r\n    when(mockPlugin1.getNMResourceInfo()).thenReturn(nmResourceInfo1);\r\n    ResourcePluginManager pluginManager = createResourceManagerWithPlugins(ImmutableMap.<String, ResourcePlugin>builder().put(\"resource-1\", mockPlugin1).put(\"yarn.io/resource-1\", mockPlugin1).put(\"resource-2\", mock(ResourcePlugin.class)).build());\r\n    nmContext.setResourcePluginManager(pluginManager);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "createResourceManagerWithPlugins",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ResourcePluginManager createResourceManagerWithPlugins(Map<String, ResourcePlugin> plugins)\n{\r\n    ResourcePluginManager pluginManager = mock(ResourcePluginManager.class);\r\n    when(pluginManager.getNameToPlugins()).thenReturn(plugins);\r\n    return pluginManager;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "assertNMResourceInfoResponse",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void assertNMResourceInfoResponse(ClientResponse response, long value) throws JSONException\n{\r\n    assertEquals(\"MediaType of the response is not the expected!\", MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    JSONObject json = response.getEntity(JSONObject.class);\r\n    assertEquals(\"Unexpected value in the json response!\", (int) value, json.get(\"a\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "assertEmptyNMResourceInfo",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void assertEmptyNMResourceInfo(ClientResponse response)\n{\r\n    assertEquals(\"MediaType of the response is not the expected!\", MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    JSONObject json = response.getEntity(JSONObject.class);\r\n    assertEquals(\"Unexpected value in the json response!\", 0, json.length());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getNMResourceResponse",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ClientResponse getNMResourceResponse(WebResource resource, String resourceName)\n{\r\n    return resource.path(\"ws\").path(\"v1\").path(\"node\").path(\"resources\").path(resourceName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    super.setUp();\r\n    testRemoteLogDir.mkdir();\r\n    testRootDir.mkdirs();\r\n    testLogDir.mkdir();\r\n    GuiceServletConfig.setInjector(Guice.createInjector(new WebServletModule()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "stop",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void stop()\n{\r\n    FileUtil.fullyDelete(testRootDir);\r\n    FileUtil.fullyDelete(testLogDir);\r\n    FileUtil.fullyDelete(testRemoteLogDir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testInvalidUri",
  "errType" : [ "UniformInterfaceException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testInvalidUri() throws JSONException, Exception\n{\r\n    WebResource r = resource();\r\n    String responseStr = \"\";\r\n    try {\r\n        responseStr = r.path(\"ws\").path(\"v1\").path(\"node\").path(\"bogus\").accept(MediaType.APPLICATION_JSON).get(String.class);\r\n        fail(\"should have thrown exception on invalid uri\");\r\n    } catch (UniformInterfaceException ue) {\r\n        ClientResponse response = ue.getResponse();\r\n        assertResponseStatusCode(Status.NOT_FOUND, response.getStatusInfo());\r\n        WebServicesTestUtils.checkStringMatch(\"error string exists and shouldn't\", \"\", responseStr);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testInvalidAccept",
  "errType" : [ "UniformInterfaceException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testInvalidAccept() throws JSONException, Exception\n{\r\n    WebResource r = resource();\r\n    String responseStr = \"\";\r\n    try {\r\n        responseStr = r.path(\"ws\").path(\"v1\").path(\"node\").accept(MediaType.TEXT_PLAIN).get(String.class);\r\n        fail(\"should have thrown exception on invalid uri\");\r\n    } catch (UniformInterfaceException ue) {\r\n        ClientResponse response = ue.getResponse();\r\n        assertResponseStatusCode(Status.INTERNAL_SERVER_ERROR, response.getStatusInfo());\r\n        WebServicesTestUtils.checkStringMatch(\"error string exists and shouldn't\", \"\", responseStr);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testInvalidUri2",
  "errType" : [ "UniformInterfaceException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testInvalidUri2() throws JSONException, Exception\n{\r\n    WebResource r = resource();\r\n    String responseStr = \"\";\r\n    try {\r\n        responseStr = r.accept(MediaType.APPLICATION_JSON).get(String.class);\r\n        fail(\"should have thrown exception on invalid uri\");\r\n    } catch (UniformInterfaceException ue) {\r\n        ClientResponse response = ue.getResponse();\r\n        assertResponseStatusCode(Status.NOT_FOUND, response.getStatusInfo());\r\n        WebServicesTestUtils.checkStringMatch(\"error string exists and shouldn't\", \"\", responseStr);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNode",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testNode() throws JSONException, Exception\n{\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"node\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    JSONObject json = response.getEntity(JSONObject.class);\r\n    verifyNodeInfo(json);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeSlash",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testNodeSlash() throws JSONException, Exception\n{\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"node/\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    JSONObject json = response.getEntity(JSONObject.class);\r\n    verifyNodeInfo(json);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeDefault",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testNodeDefault() throws JSONException, Exception\n{\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"node\").get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    JSONObject json = response.getEntity(JSONObject.class);\r\n    verifyNodeInfo(json);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeInfo",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testNodeInfo() throws JSONException, Exception\n{\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"node\").path(\"info\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    JSONObject json = response.getEntity(JSONObject.class);\r\n    verifyNodeInfo(json);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeInfoSlash",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testNodeInfoSlash() throws JSONException, Exception\n{\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"node\").path(\"info/\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    JSONObject json = response.getEntity(JSONObject.class);\r\n    verifyNodeInfo(json);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeInfoDefault",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testNodeInfoDefault() throws JSONException, Exception\n{\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"node\").path(\"info\").get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    JSONObject json = response.getEntity(JSONObject.class);\r\n    verifyNodeInfo(json);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testSingleNodesXML",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testSingleNodesXML() throws JSONException, Exception\n{\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"node\").path(\"info/\").accept(MediaType.APPLICATION_XML).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_XML + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    String xml = response.getEntity(String.class);\r\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\r\n    DocumentBuilder db = dbf.newDocumentBuilder();\r\n    InputSource is = new InputSource();\r\n    is.setCharacterStream(new StringReader(xml));\r\n    Document dom = db.parse(is);\r\n    NodeList nodes = dom.getElementsByTagName(\"nodeInfo\");\r\n    assertEquals(\"incorrect number of elements\", 1, nodes.getLength());\r\n    verifyNodesXML(nodes);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testContainerLogsWithNewAPI",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testContainerLogsWithNewAPI() throws Exception\n{\r\n    ContainerId containerId0 = BuilderUtils.newContainerId(0, 0, 0, 0);\r\n    WebResource r0 = resource();\r\n    r0 = r0.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\").path(containerId0.toString()).path(\"logs\");\r\n    testContainerLogs(r0, containerId0, LOG_MESSAGE);\r\n    ContainerId containerId1 = BuilderUtils.newContainerId(0, 0, 0, 1);\r\n    WebResource r1 = resource();\r\n    r1 = r1.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\").path(containerId1.toString()).path(\"logs\");\r\n    testContainerLogs(r1, containerId1, \"\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testContainerLogsWithOldAPI",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testContainerLogsWithOldAPI() throws Exception\n{\r\n    final ContainerId containerId2 = BuilderUtils.newContainerId(1, 1, 0, 2);\r\n    WebResource r = resource();\r\n    r = r.path(\"ws\").path(\"v1\").path(\"node\").path(\"containerlogs\").path(containerId2.toString());\r\n    testContainerLogs(r, containerId2, LOG_MESSAGE);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNMRedirect",
  "errType" : null,
  "containingMethodsNum" : 30,
  "sourceCodeText" : "void testNMRedirect()\n{\r\n    ApplicationId noExistAppId = ApplicationId.newInstance(System.currentTimeMillis(), 2000);\r\n    ApplicationAttemptId noExistAttemptId = ApplicationAttemptId.newInstance(noExistAppId, 150);\r\n    ContainerId noExistContainerId = ContainerId.newContainerId(noExistAttemptId, 250);\r\n    String fileName = \"syslog\";\r\n    WebResource r = resource();\r\n    URI requestURI = r.path(\"ws\").path(\"v1\").path(\"node\").path(\"containerlogs\").path(noExistContainerId.toString()).path(fileName).queryParam(\"user.name\", \"user\").queryParam(YarnWebServiceParams.NM_ID, \"localhost:1111\").getURI();\r\n    String redirectURL = getRedirectURL(requestURI.toString());\r\n    assertTrue(redirectURL != null);\r\n    assertTrue(redirectURL.contains(LOGSERVICEWSADDR));\r\n    assertTrue(redirectURL.contains(noExistContainerId.toString()));\r\n    assertTrue(redirectURL.contains(\"/logs/\" + fileName));\r\n    assertTrue(redirectURL.contains(\"user.name=\" + \"user\"));\r\n    assertTrue(redirectURL.contains(YarnWebServiceParams.REDIRECTED_FROM_NODE + \"=true\"));\r\n    assertFalse(redirectURL.contains(YarnWebServiceParams.NM_ID));\r\n    requestURI = r.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\").path(noExistContainerId.toString()).path(\"logs\").path(fileName).queryParam(\"user.name\", \"user\").queryParam(YarnWebServiceParams.NM_ID, \"localhost:1111\").getURI();\r\n    redirectURL = getRedirectURL(requestURI.toString());\r\n    assertTrue(redirectURL != null);\r\n    assertTrue(redirectURL.contains(LOGSERVICEWSADDR));\r\n    assertTrue(redirectURL.contains(noExistContainerId.toString()));\r\n    assertTrue(redirectURL.contains(\"/logs/\" + fileName));\r\n    assertTrue(redirectURL.contains(\"user.name=\" + \"user\"));\r\n    assertTrue(redirectURL.contains(YarnWebServiceParams.REDIRECTED_FROM_NODE + \"=true\"));\r\n    assertFalse(redirectURL.contains(YarnWebServiceParams.NM_ID));\r\n    requestURI = r.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\").path(noExistContainerId.toString()).path(\"logs\").queryParam(\"user.name\", \"user\").queryParam(YarnWebServiceParams.NM_ID, \"localhost:1111\").getURI();\r\n    redirectURL = getRedirectURL(requestURI.toString());\r\n    assertTrue(redirectURL != null);\r\n    assertTrue(redirectURL.contains(LOGSERVICEWSADDR));\r\n    assertTrue(redirectURL.contains(noExistContainerId.toString()));\r\n    assertTrue(redirectURL.contains(\"user.name=\" + \"user\"));\r\n    assertTrue(redirectURL.contains(YarnWebServiceParams.REDIRECTED_FROM_NODE + \"=true\"));\r\n    assertFalse(redirectURL.contains(YarnWebServiceParams.NM_ID));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testGetNMResourceInfoSuccessful",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetNMResourceInfoSuccessful() throws YarnException, JSONException\n{\r\n    setupMockPluginsWithNmResourceInfo();\r\n    WebResource r = resource();\r\n    ClientResponse response = getNMResourceResponse(r, \"resource-1\");\r\n    assertNMResourceInfoResponse(response, NM_RESOURCE_VALUE);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testGetNMResourceInfoEncodedIsSuccessful",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetNMResourceInfoEncodedIsSuccessful() throws YarnException, JSONException\n{\r\n    setupMockPluginsWithNmResourceInfo();\r\n    WebResource r = resource();\r\n    ClientResponse response = getNMResourceResponse(r, \"yarn.io%2Fresource-1\");\r\n    assertNMResourceInfoResponse(response, NM_RESOURCE_VALUE);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testGetNMResourceInfoFailBecauseOfEmptyResourceInfo",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetNMResourceInfoFailBecauseOfEmptyResourceInfo() throws YarnException\n{\r\n    setupMockPluginsWithNmResourceInfo();\r\n    WebResource r = resource();\r\n    ClientResponse response = getNMResourceResponse(r, \"resource-2\");\r\n    assertEmptyNMResourceInfo(response);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testGetNMResourceInfoWhenPluginIsUnknown",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetNMResourceInfoWhenPluginIsUnknown() throws YarnException\n{\r\n    setupMockPluginsWithNmResourceInfo();\r\n    WebResource r = resource();\r\n    ClientResponse response = getNMResourceResponse(r, \"resource-3\");\r\n    assertEmptyNMResourceInfo(response);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "createContainerId",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ContainerId createContainerId(int id)\n{\r\n    ApplicationId appId = ApplicationId.newInstance(0, 0);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    return ContainerId.newContainerId(appAttemptId, id);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testGetYarnGpuResourceInfo",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testGetYarnGpuResourceInfo() throws YarnException, JSONException\n{\r\n    setupMockPluginsWithGpuResourceInfo();\r\n    WebResource r = resource();\r\n    ClientResponse response = getNMResourceResponse(r, \"resource-1\");\r\n    assertEquals(\"MediaType of the response is not the expected!\", MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    JSONObject json = response.getEntity(JSONObject.class);\r\n    assertEquals(\"Unexpected driverVersion in the json response!\", \"1.2.3\", json.getJSONObject(\"gpuDeviceInformation\").get(\"driverVersion\"));\r\n    assertEquals(\"Unexpected totalGpuDevices in the json response!\", 3, json.getJSONArray(\"totalGpuDevices\").length());\r\n    assertEquals(\"Unexpected assignedGpuDevices in the json response!\", 2, json.getJSONArray(\"assignedGpuDevices\").length());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testContainerLogs",
  "errType" : null,
  "containingMethodsNum" : 95,
  "sourceCodeText" : "void testContainerLogs(WebResource r, ContainerId containerId, String logMessage) throws Exception\n{\r\n    final String containerIdStr = containerId.toString();\r\n    final ApplicationAttemptId appAttemptId = containerId.getApplicationAttemptId();\r\n    final ApplicationId appId = appAttemptId.getApplicationId();\r\n    final String appIdStr = appId.toString();\r\n    final String filename = \"logfile1\";\r\n    nmContext.getApplications().put(appId, new ApplicationImpl(null, \"user\", appId, null, nmContext));\r\n    MockContainer container = new MockContainer(appAttemptId, new AsyncDispatcher(), new Configuration(), \"user\", appId, 1);\r\n    container.setState(ContainerState.RUNNING);\r\n    nmContext.getContainers().put(containerId, container);\r\n    Path path = dirsHandler.getLogPathForWrite(ContainerLaunch.getRelativeContainerLogDir(appIdStr, containerIdStr) + \"/\" + filename, false);\r\n    File logFile = new File(path.toUri().getPath());\r\n    logFile.deleteOnExit();\r\n    if (logFile.getParentFile().exists()) {\r\n        FileUtils.deleteDirectory(logFile.getParentFile());\r\n    }\r\n    assertTrue(\"Failed to create log dir\", logFile.getParentFile().mkdirs());\r\n    PrintWriter pw = new PrintWriter(logFile);\r\n    pw.print(logMessage);\r\n    pw.close();\r\n    ClientResponse response = r.path(filename).accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\r\n    String responseText = response.getEntity(String.class);\r\n    String responseLogMessage = getLogContext(responseText);\r\n    assertEquals(logMessage, responseLogMessage);\r\n    int fullTextSize = responseLogMessage.getBytes().length;\r\n    response = r.path(filename).queryParam(\"size\", \"5\").accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\r\n    responseText = response.getEntity(String.class);\r\n    responseLogMessage = getLogContext(responseText);\r\n    int truncatedLength = Math.min(5, logMessage.getBytes().length);\r\n    assertEquals(truncatedLength, responseLogMessage.getBytes().length);\r\n    assertEquals(new String(logMessage.getBytes(), 0, truncatedLength), responseLogMessage);\r\n    assertTrue(fullTextSize >= responseLogMessage.getBytes().length);\r\n    response = r.path(filename).queryParam(\"size\", \"10000\").accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\r\n    responseText = response.getEntity(String.class);\r\n    responseLogMessage = getLogContext(responseText);\r\n    assertEquals(fullTextSize, responseLogMessage.getBytes().length);\r\n    assertEquals(logMessage, responseLogMessage);\r\n    response = r.path(filename).queryParam(\"size\", \"-5\").accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\r\n    responseText = response.getEntity(String.class);\r\n    responseLogMessage = getLogContext(responseText);\r\n    assertEquals(truncatedLength, responseLogMessage.getBytes().length);\r\n    assertEquals(new String(logMessage.getBytes(), logMessage.getBytes().length - truncatedLength, truncatedLength), responseLogMessage);\r\n    assertTrue(fullTextSize >= responseLogMessage.getBytes().length);\r\n    response = r.path(filename).queryParam(\"size\", \"-10000\").accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\r\n    responseText = response.getEntity(String.class);\r\n    responseLogMessage = getLogContext(responseText);\r\n    assertEquals(\"text/plain; charset=utf-8\", response.getType().toString());\r\n    assertEquals(fullTextSize, responseLogMessage.getBytes().length);\r\n    assertEquals(logMessage, responseLogMessage);\r\n    response = r.path(filename).queryParam(\"format\", \"octet-stream\").accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\r\n    responseText = response.getEntity(String.class);\r\n    responseLogMessage = getLogContext(responseText);\r\n    assertEquals(logMessage, responseLogMessage);\r\n    assertEquals(200, response.getStatus());\r\n    assertEquals(\"application/octet-stream; charset=utf-8\", response.getType().toString());\r\n    response = r.path(filename).queryParam(\"format\", \"123\").accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\r\n    responseText = response.getEntity(String.class);\r\n    assertEquals(\"The valid values for the parameter : format are \" + WebAppUtils.listSupportedLogContentType(), responseText);\r\n    assertEquals(400, response.getStatus());\r\n    URI requestURI = r.path(\"uhhh\").getURI();\r\n    String redirectURL = getRedirectURL(requestURI.toString());\r\n    assertTrue(redirectURL != null);\r\n    assertTrue(redirectURL.contains(LOGSERVICEWSADDR));\r\n    WebResource r1 = resource();\r\n    response = r1.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\").path(containerIdStr).path(\"logs\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertEquals(200, response.getStatus());\r\n    List<ContainerLogsInfo> responseList = response.getEntity(new GenericType<List<ContainerLogsInfo>>() {\r\n    });\r\n    assertTrue(responseList.size() == 1);\r\n    assertEquals(responseList.get(0).getLogType(), ContainerLogAggregationType.LOCAL.toString());\r\n    List<ContainerLogFileInfo> logMeta = responseList.get(0).getContainerLogsInfo();\r\n    assertTrue(logMeta.size() == 1);\r\n    assertThat(logMeta.get(0).getFileName()).isEqualTo(filename);\r\n    File tempLogDir = new File(\"target\", TestNMWebServices.class.getSimpleName() + \"temp-log-dir\");\r\n    try {\r\n        String aggregatedLogFile = filename + \"-aggregated\";\r\n        String aggregatedLogMessage = \"This is aggregated ;og.\";\r\n        TestContainerLogsUtils.createContainerLogFileInRemoteFS(nmContext.getConf(), FileSystem.get(nmContext.getConf()), tempLogDir.getAbsolutePath(), appId, Collections.singletonMap(containerId, aggregatedLogMessage), nmContext.getNodeId(), aggregatedLogFile, \"user\", true);\r\n        r1 = resource();\r\n        response = r1.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\").path(containerIdStr).path(\"logs\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n        assertEquals(200, response.getStatus());\r\n        responseList = response.getEntity(new GenericType<List<ContainerLogsInfo>>() {\r\n        });\r\n        assertThat(responseList).hasSize(2);\r\n        for (ContainerLogsInfo logInfo : responseList) {\r\n            if (logInfo.getLogType().equals(ContainerLogAggregationType.AGGREGATED.toString())) {\r\n                List<ContainerLogFileInfo> meta = logInfo.getContainerLogsInfo();\r\n                assertTrue(meta.size() == 1);\r\n                assertThat(meta.get(0).getFileName()).isEqualTo(aggregatedLogFile);\r\n            } else {\r\n                assertEquals(logInfo.getLogType(), ContainerLogAggregationType.LOCAL.toString());\r\n                List<ContainerLogFileInfo> meta = logInfo.getContainerLogsInfo();\r\n                assertTrue(meta.size() == 1);\r\n                assertThat(meta.get(0).getFileName()).isEqualTo(filename);\r\n            }\r\n        }\r\n        TestContainerLogsUtils.createContainerLogFileInRemoteFS(nmContext.getConf(), FileSystem.get(nmContext.getConf()), tempLogDir.getAbsolutePath(), appId, Collections.singletonMap(containerId, aggregatedLogMessage), nmContext.getNodeId(), filename, \"user\", true);\r\n        response = r.path(filename).accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\r\n        responseText = response.getEntity(String.class);\r\n        assertTrue(responseText.contains(\"LogAggregationType: \" + ContainerLogAggregationType.AGGREGATED));\r\n        assertTrue(responseText.contains(aggregatedLogMessage));\r\n        assertTrue(responseText.contains(\"LogAggregationType: \" + ContainerLogAggregationType.LOCAL));\r\n        assertTrue(responseText.contains(logMessage));\r\n    } finally {\r\n        FileUtil.fullyDelete(tempLogDir);\r\n    }\r\n    nmContext.getContainers().remove(containerId);\r\n    assertNull(nmContext.getContainers().get(containerId));\r\n    response = r.path(filename).accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\r\n    responseText = response.getEntity(String.class);\r\n    assertTrue(responseText.contains(logMessage));\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "verifyNodesXML",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void verifyNodesXML(NodeList nodes) throws JSONException, Exception\n{\r\n    for (int i = 0; i < nodes.getLength(); i++) {\r\n        Element element = (Element) nodes.item(i);\r\n        verifyNodeInfoGeneric(WebServicesTestUtils.getXmlString(element, \"id\"), WebServicesTestUtils.getXmlString(element, \"healthReport\"), WebServicesTestUtils.getXmlLong(element, \"totalVmemAllocatedContainersMB\"), WebServicesTestUtils.getXmlLong(element, \"totalPmemAllocatedContainersMB\"), WebServicesTestUtils.getXmlLong(element, \"totalVCoresAllocatedContainers\"), WebServicesTestUtils.getXmlBoolean(element, \"vmemCheckEnabled\"), WebServicesTestUtils.getXmlBoolean(element, \"pmemCheckEnabled\"), WebServicesTestUtils.getXmlLong(element, \"lastNodeUpdateTime\"), WebServicesTestUtils.getXmlBoolean(element, \"nodeHealthy\"), WebServicesTestUtils.getXmlString(element, \"nodeHostName\"), WebServicesTestUtils.getXmlString(element, \"hadoopVersionBuiltOn\"), WebServicesTestUtils.getXmlString(element, \"hadoopBuildVersion\"), WebServicesTestUtils.getXmlString(element, \"hadoopVersion\"), WebServicesTestUtils.getXmlString(element, \"nodeManagerVersionBuiltOn\"), WebServicesTestUtils.getXmlString(element, \"nodeManagerBuildVersion\"), WebServicesTestUtils.getXmlString(element, \"nodeManagerVersion\"), WebServicesTestUtils.getXmlString(element, \"resourceTypes\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "verifyNodeInfo",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void verifyNodeInfo(JSONObject json) throws JSONException, Exception\n{\r\n    assertEquals(\"incorrect number of elements\", 1, json.length());\r\n    JSONObject info = json.getJSONObject(\"nodeInfo\");\r\n    assertEquals(\"incorrect number of elements\", 18, info.length());\r\n    verifyNodeInfoGeneric(info.getString(\"id\"), info.getString(\"healthReport\"), info.getLong(\"totalVmemAllocatedContainersMB\"), info.getLong(\"totalPmemAllocatedContainersMB\"), info.getLong(\"totalVCoresAllocatedContainers\"), info.getBoolean(\"vmemCheckEnabled\"), info.getBoolean(\"pmemCheckEnabled\"), info.getLong(\"lastNodeUpdateTime\"), info.getBoolean(\"nodeHealthy\"), info.getString(\"nodeHostName\"), info.getString(\"hadoopVersionBuiltOn\"), info.getString(\"hadoopBuildVersion\"), info.getString(\"hadoopVersion\"), info.getString(\"nodeManagerVersionBuiltOn\"), info.getString(\"nodeManagerBuildVersion\"), info.getString(\"nodeManagerVersion\"), info.getString(\"resourceTypes\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "verifyNodeInfoGeneric",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void verifyNodeInfoGeneric(String id, String healthReport, long totalVmemAllocatedContainersMB, long totalPmemAllocatedContainersMB, long totalVCoresAllocatedContainers, boolean vmemCheckEnabled, boolean pmemCheckEnabled, long lastNodeUpdateTime, Boolean nodeHealthy, String nodeHostName, String hadoopVersionBuiltOn, String hadoopBuildVersion, String hadoopVersion, String resourceManagerVersionBuiltOn, String resourceManagerBuildVersion, String resourceManagerVersion, String resourceTypes)\n{\r\n    WebServicesTestUtils.checkStringMatch(\"id\", \"testhost.foo.com:8042\", id);\r\n    WebServicesTestUtils.checkStringMatch(\"healthReport\", \"Healthy\", healthReport);\r\n    assertEquals(\"totalVmemAllocatedContainersMB incorrect\", 15872, totalVmemAllocatedContainersMB);\r\n    assertEquals(\"totalPmemAllocatedContainersMB incorrect\", 16384, totalPmemAllocatedContainersMB);\r\n    assertEquals(\"totalVCoresAllocatedContainers incorrect\", 4000, totalVCoresAllocatedContainers);\r\n    assertEquals(\"vmemCheckEnabled incorrect\", true, vmemCheckEnabled);\r\n    assertEquals(\"pmemCheckEnabled incorrect\", true, pmemCheckEnabled);\r\n    assertTrue(\"lastNodeUpdateTime incorrect\", lastNodeUpdateTime == nmContext.getNodeHealthStatus().getLastHealthReportTime());\r\n    assertTrue(\"nodeHealthy isn't true\", nodeHealthy);\r\n    WebServicesTestUtils.checkStringMatch(\"nodeHostName\", \"testhost.foo.com\", nodeHostName);\r\n    WebServicesTestUtils.checkStringMatch(\"hadoopVersionBuiltOn\", VersionInfo.getDate(), hadoopVersionBuiltOn);\r\n    WebServicesTestUtils.checkStringEqual(\"hadoopBuildVersion\", VersionInfo.getBuildVersion(), hadoopBuildVersion);\r\n    WebServicesTestUtils.checkStringMatch(\"hadoopVersion\", VersionInfo.getVersion(), hadoopVersion);\r\n    WebServicesTestUtils.checkStringMatch(\"resourceManagerVersionBuiltOn\", YarnVersionInfo.getDate(), resourceManagerVersionBuiltOn);\r\n    WebServicesTestUtils.checkStringEqual(\"resourceManagerBuildVersion\", YarnVersionInfo.getBuildVersion(), resourceManagerBuildVersion);\r\n    WebServicesTestUtils.checkStringMatch(\"resourceManagerVersion\", YarnVersionInfo.getVersion(), resourceManagerVersion);\r\n    assertEquals(\"memory-mb (unit=Mi), vcores\", resourceTypes);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getLogContext",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String getLogContext(String fullMessage)\n{\r\n    String prefix = \"LogContents:\\n\";\r\n    String postfix = \"End of LogType:\";\r\n    int prefixIndex = fullMessage.indexOf(prefix) + prefix.length();\r\n    int postfixIndex = fullMessage.indexOf(postfix);\r\n    return fullMessage.substring(prefixIndex, postfixIndex);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getRedirectURL",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String getRedirectURL(String url)\n{\r\n    String redirectUrl = null;\r\n    try {\r\n        HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();\r\n        conn.setInstanceFollowRedirects(false);\r\n        if (conn.getResponseCode() == HttpServletResponse.SC_TEMPORARY_REDIRECT) {\r\n            redirectUrl = conn.getHeaderField(\"Location\");\r\n        }\r\n    } catch (Exception e) {\r\n    }\r\n    return redirectUrl;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setup()\n{\r\n    dummyAttributesProviderRef = new DummyNodeAttributesProvider();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown()\n{\r\n    if (null != nm) {\r\n        ServiceOperations.stop(nm);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createNMConfigForDistributeNodeAttributes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "YarnConfiguration createNMConfigForDistributeNodeAttributes()\n{\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testNodeStatusUpdaterForNodeAttributes",
  "errType" : null,
  "containingMethodsNum" : 35,
  "sourceCodeText" : "void testNodeStatusUpdaterForNodeAttributes() throws InterruptedException, IOException, TimeoutException\n{\r\n    final ResourceTrackerForAttributes resourceTracker = new ResourceTrackerForAttributes();\r\n    nm = new NodeManager() {\r\n\r\n        @Override\r\n        protected NodeAttributesProvider createNodeAttributesProvider(Configuration conf) throws IOException {\r\n            return dummyAttributesProviderRef;\r\n        }\r\n\r\n        @Override\r\n        protected NodeStatusUpdater createNodeStatusUpdater(Context context, Dispatcher dispatcher, NodeHealthCheckerService healthChecker) {\r\n            return new NodeStatusUpdaterImpl(context, dispatcher, healthChecker, metrics) {\r\n\r\n                @Override\r\n                protected ResourceTracker getRMClient() {\r\n                    return resourceTracker;\r\n                }\r\n\r\n                @Override\r\n                protected void stopRMProxy() {\r\n                    return;\r\n                }\r\n            };\r\n        }\r\n    };\r\n    YarnConfiguration conf = createNMConfigForDistributeNodeAttributes();\r\n    conf.setLong(YarnConfiguration.NM_NODE_ATTRIBUTES_RESYNC_INTERVAL, 2000);\r\n    conf.set(YarnConfiguration.NM_LOCALIZER_ADDRESS, \"0.0.0.0:\" + ServerSocketUtil.getPort(8040, 10));\r\n    nm.init(conf);\r\n    resourceTracker.resetNMHeartbeatReceiveFlag();\r\n    nm.start();\r\n    resourceTracker.waitTillRegister();\r\n    assertTrue(NodeLabelUtil.isNodeAttributesEquals(dummyAttributesProviderRef.getDescriptors(), resourceTracker.attributes));\r\n    resourceTracker.waitTillHeartbeat();\r\n    resourceTracker.resetNMHeartbeatReceiveFlag();\r\n    NodeAttribute attribute1 = NodeAttribute.newInstance(NodeAttribute.PREFIX_DISTRIBUTED, \"Attr1\", NodeAttributeType.STRING, \"V1\");\r\n    dummyAttributesProviderRef.setDescriptors(ImmutableSet.of(attribute1));\r\n    sendOutofBandHeartBeat();\r\n    resourceTracker.waitTillHeartbeat();\r\n    assertTrue(NodeLabelUtil.isNodeAttributesEquals(dummyAttributesProviderRef.getDescriptors(), resourceTracker.attributes));\r\n    resourceTracker.resetNMHeartbeatReceiveFlag();\r\n    sendOutofBandHeartBeat();\r\n    resourceTracker.waitTillHeartbeat();\r\n    resourceTracker.resetNMHeartbeatReceiveFlag();\r\n    assertNull(\"If no change in attributes\" + \" then null should be sent as part of request\", resourceTracker.attributes);\r\n    dummyAttributesProviderRef.setDescriptors(null);\r\n    sendOutofBandHeartBeat();\r\n    resourceTracker.waitTillHeartbeat();\r\n    assertNotNull(\"If provider sends null\" + \" then empty label set should be sent and not null\", resourceTracker.attributes);\r\n    assertTrue(\"If provider sends null then empty attributes should be sent\", resourceTracker.attributes.isEmpty());\r\n    resourceTracker.resetNMHeartbeatReceiveFlag();\r\n    int nullAttributes = 0;\r\n    int nonNullAttributes = 0;\r\n    dummyAttributesProviderRef.setDescriptors(ImmutableSet.of(attribute1));\r\n    for (int i = 0; i < 5; i++) {\r\n        sendOutofBandHeartBeat();\r\n        resourceTracker.waitTillHeartbeat();\r\n        if (null == resourceTracker.attributes) {\r\n            nullAttributes++;\r\n        } else {\r\n            Assert.assertTrue(\"In heartbeat PI attributes should be send\", NodeLabelUtil.isNodeAttributesEquals(ImmutableSet.of(attribute1), resourceTracker.attributes));\r\n            nonNullAttributes++;\r\n        }\r\n        resourceTracker.resetNMHeartbeatReceiveFlag();\r\n        Thread.sleep(1000);\r\n    }\r\n    Assert.assertTrue(\"More than one heartbeat with empty attributes expected\", nullAttributes > 1);\r\n    Assert.assertTrue(\"More than one heartbeat with attributes expected\", nonNullAttributes > 1);\r\n    nm.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testInvalidNodeAttributesFromProvider",
  "errType" : null,
  "containingMethodsNum" : 36,
  "sourceCodeText" : "void testInvalidNodeAttributesFromProvider() throws InterruptedException, IOException, TimeoutException\n{\r\n    final ResourceTrackerForAttributes resourceTracker = new ResourceTrackerForAttributes();\r\n    nm = new NodeManager() {\r\n\r\n        @Override\r\n        protected NodeAttributesProvider createNodeAttributesProvider(Configuration conf) throws IOException {\r\n            return dummyAttributesProviderRef;\r\n        }\r\n\r\n        @Override\r\n        protected NodeStatusUpdater createNodeStatusUpdater(Context context, Dispatcher dispatcher, NodeHealthCheckerService healthChecker) {\r\n            return new NodeStatusUpdaterImpl(context, dispatcher, healthChecker, metrics) {\r\n\r\n                @Override\r\n                protected ResourceTracker getRMClient() {\r\n                    return resourceTracker;\r\n                }\r\n\r\n                @Override\r\n                protected void stopRMProxy() {\r\n                    return;\r\n                }\r\n            };\r\n        }\r\n    };\r\n    YarnConfiguration conf = createNMConfigForDistributeNodeAttributes();\r\n    conf.set(YarnConfiguration.NM_LOCALIZER_ADDRESS, \"0.0.0.0:\" + ServerSocketUtil.getPort(8040, 10));\r\n    nm.init(conf);\r\n    resourceTracker.resetNMHeartbeatReceiveFlag();\r\n    nm.start();\r\n    resourceTracker.waitTillRegister();\r\n    assertTrue(NodeLabelUtil.isNodeAttributesEquals(dummyAttributesProviderRef.getDescriptors(), resourceTracker.attributes));\r\n    resourceTracker.waitTillHeartbeat();\r\n    resourceTracker.resetNMHeartbeatReceiveFlag();\r\n    NodeAttribute attribute1 = NodeAttribute.newInstance(NodeAttribute.PREFIX_DISTRIBUTED, \"Attr1\", NodeAttributeType.STRING, \"V1\");\r\n    dummyAttributesProviderRef.setDescriptors(ImmutableSet.of(attribute1));\r\n    sendOutofBandHeartBeat();\r\n    resourceTracker.waitTillHeartbeat();\r\n    assertTrue(NodeLabelUtil.isNodeAttributesEquals(ImmutableSet.of(attribute1), resourceTracker.attributes));\r\n    resourceTracker.resetNMHeartbeatReceiveFlag();\r\n    NodeAttribute attribute2 = NodeAttribute.newInstance(NodeAttribute.PREFIX_DISTRIBUTED, \"Attr2\", NodeAttributeType.STRING, \"V2\");\r\n    dummyAttributesProviderRef.setDescriptors(ImmutableSet.of(attribute2));\r\n    sendOutofBandHeartBeat();\r\n    resourceTracker.waitTillHeartbeat();\r\n    assertTrue(NodeLabelUtil.isNodeAttributesEquals(ImmutableSet.of(attribute2), resourceTracker.attributes));\r\n    resourceTracker.resetNMHeartbeatReceiveFlag();\r\n    dummyAttributesProviderRef.setDescriptors(ImmutableSet.of(attribute1, attribute2));\r\n    sendOutofBandHeartBeat();\r\n    resourceTracker.waitTillHeartbeat();\r\n    assertTrue(NodeLabelUtil.isNodeAttributesEquals(ImmutableSet.of(attribute1, attribute2), resourceTracker.attributes));\r\n    resourceTracker.resetNMHeartbeatReceiveFlag();\r\n    NodeAttribute invalidAttribute = NodeAttribute.newInstance(\"_.P\", \"Attr1\", NodeAttributeType.STRING, \"V1\");\r\n    dummyAttributesProviderRef.setDescriptors(ImmutableSet.of(invalidAttribute));\r\n    sendOutofBandHeartBeat();\r\n    resourceTracker.waitTillHeartbeat();\r\n    assertNull(\"On Invalid Attributes we need to retain earlier attributes, HB\" + \" needs to send null\", resourceTracker.attributes);\r\n    resourceTracker.resetNMHeartbeatReceiveFlag();\r\n    sendOutofBandHeartBeat();\r\n    resourceTracker.waitTillHeartbeat();\r\n    assertNull(\"NodeStatusUpdater need not send repeatedly empty attributes on\" + \" invalid attributes from provider \", resourceTracker.attributes);\r\n    resourceTracker.resetNMHeartbeatReceiveFlag();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "sendOutofBandHeartBeat",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void sendOutofBandHeartBeat() throws InterruptedException, IOException\n{\r\n    int i = 0;\r\n    do {\r\n        State statusUpdaterThreadState = ((NodeStatusUpdaterImpl) nm.getNodeStatusUpdater()).getStatusUpdaterThreadState();\r\n        if (statusUpdaterThreadState.equals(Thread.State.TIMED_WAITING) || statusUpdaterThreadState.equals(Thread.State.WAITING)) {\r\n            nm.getNodeStatusUpdater().sendOutofBandHeartBeat();\r\n            break;\r\n        }\r\n        if (++i <= 10) {\r\n            Thread.sleep(50);\r\n        } else {\r\n            throw new IOException(\"Waited for 500 ms\" + \" but NodeStatusUpdaterThread not in waiting state\");\r\n        }\r\n    } while (true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "createPBRecordFactory",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RecordFactory createPBRecordFactory()\n{\r\n    Configuration conf = new Configuration();\r\n    return RecordFactoryProvider.getRecordFactory(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "dieHBResponse",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "LocalizerHeartbeatResponse dieHBResponse()\n{\r\n    LocalizerHeartbeatResponse response = recordFactory.newRecordInstance(LocalizerHeartbeatResponse.class);\r\n    response.setLocalizerAction(LocalizerAction.DIE);\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "testLocalizerRPC",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testLocalizerRPC() throws Exception\n{\r\n    InetSocketAddress locAddr = new InetSocketAddress(\"0.0.0.0\", 8040);\r\n    LocalizerService server = new LocalizerService(locAddr);\r\n    try {\r\n        server.start();\r\n        Configuration conf = new Configuration();\r\n        YarnRPC rpc = YarnRPC.create(conf);\r\n        LocalizationProtocol client = (LocalizationProtocol) rpc.getProxy(LocalizationProtocol.class, locAddr, conf);\r\n        LocalizerStatus status = recordFactory.newRecordInstance(LocalizerStatus.class);\r\n        status.setLocalizerId(\"localizer0\");\r\n        LocalizerHeartbeatResponse response = client.heartbeat(status);\r\n        assertEquals(dieHBResponse(), response);\r\n    } finally {\r\n        server.stop();\r\n    }\r\n    assertTrue(true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "before",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void before()\n{\r\n    ProtobufRpcEngine2.clearClientCache();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void tearDown()\n{\r\n    this.registeredNodes.clear();\r\n    heartBeatID.set(0);\r\n    if (nm != null) {\r\n        ServiceOperations.stop(nm);\r\n        nm.waitForServiceToStop(10000);\r\n    }\r\n    assertionFailedInThread.set(false);\r\n    DefaultMetricsSystem.shutdown();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createMasterKey",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "MasterKey createMasterKey()\n{\r\n    MasterKey masterKey = new MasterKeyPBImpl();\r\n    masterKey.setKeyId(123);\r\n    masterKey.setBytes(ByteBuffer.wrap(new byte[] { new Integer(123).byteValue() }));\r\n    return masterKey;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "clearError",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void clearError()\n{\r\n    nmStartError = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "deleteBaseDir",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void deleteBaseDir() throws IOException\n{\r\n    FileContext lfs = FileContext.getLocalFSFileContext();\r\n    lfs.delete(new Path(basedir.getPath()), true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testRecentlyFinishedContainers",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testRecentlyFinishedContainers() throws Exception\n{\r\n    NodeManager nm = new NodeManager();\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.setInt(NodeStatusUpdaterImpl.YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS, 1);\r\n    nm.init(conf);\r\n    NodeStatusUpdaterImpl nodeStatusUpdater = (NodeStatusUpdaterImpl) nm.getNodeStatusUpdater();\r\n    ApplicationId appId = ApplicationId.newInstance(0, 0);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 0);\r\n    ContainerId cId = ContainerId.newContainerId(appAttemptId, 0);\r\n    nm.getNMContext().getApplications().putIfAbsent(appId, mock(Application.class));\r\n    nm.getNMContext().getContainers().putIfAbsent(cId, mock(Container.class));\r\n    nodeStatusUpdater.addCompletedContainer(cId);\r\n    Assert.assertTrue(nodeStatusUpdater.isContainerRecentlyStopped(cId));\r\n    nm.getNMContext().getContainers().remove(cId);\r\n    Thread.sleep(10);\r\n    nodeStatusUpdater.removeVeryOldStoppedContainersFromCache();\r\n    Assert.assertTrue(nodeStatusUpdater.isContainerRecentlyStopped(cId));\r\n    nm.getNMContext().getApplications().remove(appId);\r\n    nodeStatusUpdater.removeVeryOldStoppedContainersFromCache();\r\n    Assert.assertFalse(nodeStatusUpdater.isContainerRecentlyStopped(cId));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testRemovePreviousCompletedContainersFromContext",
  "errType" : null,
  "containingMethodsNum" : 25,
  "sourceCodeText" : "void testRemovePreviousCompletedContainersFromContext() throws Exception\n{\r\n    NodeManager nm = new NodeManager();\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.set(NodeStatusUpdaterImpl.YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS, \"10000\");\r\n    nm.init(conf);\r\n    NodeStatusUpdaterImpl nodeStatusUpdater = (NodeStatusUpdaterImpl) nm.getNodeStatusUpdater();\r\n    ApplicationId appId = ApplicationId.newInstance(0, 0);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 0);\r\n    ContainerId cId = ContainerId.newContainerId(appAttemptId, 1);\r\n    Token containerToken = BuilderUtils.newContainerToken(cId, 0, \"anyHost\", 1234, \"anyUser\", BuilderUtils.newResource(1024, 1), 0, 123, \"password\".getBytes(), 0);\r\n    Container anyCompletedContainer = new ContainerImpl(conf, null, null, null, null, BuilderUtils.newContainerTokenIdentifier(containerToken), nm.getNMContext()) {\r\n\r\n        @Override\r\n        public ContainerState getCurrentState() {\r\n            return ContainerState.COMPLETE;\r\n        }\r\n\r\n        @Override\r\n        public org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState getContainerState() {\r\n            return org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.DONE;\r\n        }\r\n    };\r\n    ContainerId runningContainerId = ContainerId.newContainerId(appAttemptId, 3);\r\n    Token runningContainerToken = BuilderUtils.newContainerToken(runningContainerId, 0, \"anyHost\", 1234, \"anyUser\", BuilderUtils.newResource(1024, 1), 0, 123, \"password\".getBytes(), 0);\r\n    Container runningContainer = new ContainerImpl(conf, null, null, null, null, BuilderUtils.newContainerTokenIdentifier(runningContainerToken), nm.getNMContext()) {\r\n\r\n        @Override\r\n        public ContainerState getCurrentState() {\r\n            return ContainerState.RUNNING;\r\n        }\r\n\r\n        @Override\r\n        public org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState getContainerState() {\r\n            return org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.RUNNING;\r\n        }\r\n    };\r\n    nm.getNMContext().getApplications().putIfAbsent(appId, mock(Application.class));\r\n    nm.getNMContext().getContainers().put(cId, anyCompletedContainer);\r\n    nm.getNMContext().getContainers().put(runningContainerId, runningContainer);\r\n    Assert.assertEquals(2, nodeStatusUpdater.getContainerStatuses().size());\r\n    List<ContainerId> ackedContainers = new ArrayList<ContainerId>();\r\n    ackedContainers.add(cId);\r\n    ackedContainers.add(runningContainerId);\r\n    nodeStatusUpdater.removeOrTrackCompletedContainersFromContext(ackedContainers);\r\n    Set<ContainerId> containerIdSet = new HashSet<ContainerId>();\r\n    List<ContainerStatus> containerStatuses = nodeStatusUpdater.getContainerStatuses();\r\n    for (ContainerStatus status : containerStatuses) {\r\n        containerIdSet.add(status.getContainerId());\r\n    }\r\n    Assert.assertEquals(1, containerStatuses.size());\r\n    Assert.assertFalse(containerIdSet.contains(cId));\r\n    Assert.assertTrue(containerIdSet.contains(runningContainerId));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testCompletedContainersIsRecentlyStopped",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testCompletedContainersIsRecentlyStopped() throws Exception\n{\r\n    NodeManager nm = new NodeManager();\r\n    nm.init(conf);\r\n    NodeStatusUpdaterImpl nodeStatusUpdater = (NodeStatusUpdaterImpl) nm.getNodeStatusUpdater();\r\n    ApplicationId appId = ApplicationId.newInstance(0, 0);\r\n    Application completedApp = mock(Application.class);\r\n    when(completedApp.getApplicationState()).thenReturn(ApplicationState.FINISHED);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 0);\r\n    ContainerId containerId = ContainerId.newContainerId(appAttemptId, 1);\r\n    Token containerToken = BuilderUtils.newContainerToken(containerId, 0, \"host\", 1234, \"user\", BuilderUtils.newResource(1024, 1), 0, 123, \"password\".getBytes(), 0);\r\n    Container completedContainer = new ContainerImpl(conf, null, null, null, null, BuilderUtils.newContainerTokenIdentifier(containerToken), nm.getNMContext()) {\r\n\r\n        @Override\r\n        public ContainerState getCurrentState() {\r\n            return ContainerState.COMPLETE;\r\n        }\r\n    };\r\n    nm.getNMContext().getApplications().putIfAbsent(appId, completedApp);\r\n    nm.getNMContext().getContainers().put(containerId, completedContainer);\r\n    Assert.assertEquals(1, nodeStatusUpdater.getContainerStatuses().size());\r\n    Assert.assertTrue(nodeStatusUpdater.isContainerRecentlyStopped(containerId));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testCleanedupApplicationContainerCleanup",
  "errType" : null,
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void testCleanedupApplicationContainerCleanup() throws IOException\n{\r\n    NodeManager nm = new NodeManager();\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.set(NodeStatusUpdaterImpl.YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS, \"1000000\");\r\n    nm.init(conf);\r\n    NodeStatusUpdaterImpl nodeStatusUpdater = (NodeStatusUpdaterImpl) nm.getNodeStatusUpdater();\r\n    ApplicationId appId = ApplicationId.newInstance(0, 0);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 0);\r\n    ContainerId cId = ContainerId.newContainerId(appAttemptId, 1);\r\n    Token containerToken = BuilderUtils.newContainerToken(cId, 0, \"anyHost\", 1234, \"anyUser\", BuilderUtils.newResource(1024, 1), 0, 123, \"password\".getBytes(), 0);\r\n    Container anyCompletedContainer = new ContainerImpl(conf, null, null, null, null, BuilderUtils.newContainerTokenIdentifier(containerToken), nm.getNMContext()) {\r\n\r\n        @Override\r\n        public ContainerState getCurrentState() {\r\n            return ContainerState.COMPLETE;\r\n        }\r\n    };\r\n    Application application = mock(Application.class);\r\n    when(application.getApplicationState()).thenReturn(ApplicationState.RUNNING);\r\n    nm.getNMContext().getApplications().putIfAbsent(appId, application);\r\n    nm.getNMContext().getContainers().put(cId, anyCompletedContainer);\r\n    Assert.assertEquals(1, nodeStatusUpdater.getContainerStatuses().size());\r\n    when(application.getApplicationState()).thenReturn(ApplicationState.FINISHING_CONTAINERS_WAIT);\r\n    Assert.assertEquals(1, nodeStatusUpdater.getContainerStatuses().size());\r\n    Assert.assertEquals(1, nodeStatusUpdater.getContainerStatuses().size());\r\n    nm.getNMContext().getContainers().put(cId, anyCompletedContainer);\r\n    nm.getNMContext().getApplications().remove(appId);\r\n    Assert.assertEquals(1, nodeStatusUpdater.getContainerStatuses().size());\r\n    Assert.assertEquals(1, nodeStatusUpdater.getContainerStatuses().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testNMRegistration",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testNMRegistration() throws Exception\n{\r\n    nm = new NodeManager() {\r\n\r\n        @Override\r\n        protected NodeStatusUpdater createNodeStatusUpdater(Context context, Dispatcher dispatcher, NodeHealthCheckerService healthChecker) {\r\n            return new MyNodeStatusUpdater(context, dispatcher, healthChecker, metrics);\r\n        }\r\n    };\r\n    YarnConfiguration conf = createNMConfig();\r\n    nm.init(conf);\r\n    Object[] services = nm.getServices().toArray();\r\n    Object lastService = services[services.length - 1];\r\n    Assert.assertTrue(\"last service is NOT the node status updater\", lastService instanceof NodeStatusUpdater);\r\n    Thread starterThread = new Thread(() -> {\r\n        try {\r\n            nm.start();\r\n        } catch (Throwable e) {\r\n            TestNodeStatusUpdater.this.nmStartError = e;\r\n            throw new YarnRuntimeException(e);\r\n        }\r\n    });\r\n    starterThread.start();\r\n    LOG.info(\" ----- thread already started..{}\", nm.getServiceState());\r\n    starterThread.join(100000);\r\n    if (nmStartError != null) {\r\n        LOG.error(\"Error during startup. \", nmStartError);\r\n        Assert.fail(nmStartError.getCause().getMessage());\r\n    }\r\n    GenericTestUtils.waitFor(() -> nm.getServiceState() != STATE.STARTED || heartBeatID.get() > 3, 50, 20000);\r\n    Assert.assertTrue(heartBeatID.get() > 3);\r\n    Assert.assertEquals(\"Number of registered NMs is wrong!!\", 1, this.registeredNodes.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testStopReentrant",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testStopReentrant() throws Exception\n{\r\n    final AtomicInteger numCleanups = new AtomicInteger(0);\r\n    nm = new NodeManager() {\r\n\r\n        @Override\r\n        protected NodeStatusUpdater createNodeStatusUpdater(Context context, Dispatcher dispatcher, NodeHealthCheckerService healthChecker) {\r\n            MyNodeStatusUpdater myNodeStatusUpdater = new MyNodeStatusUpdater(context, dispatcher, healthChecker, metrics);\r\n            MyResourceTracker2 myResourceTracker2 = new MyResourceTracker2();\r\n            myResourceTracker2.heartBeatNodeAction = NodeAction.SHUTDOWN;\r\n            myNodeStatusUpdater.resourceTracker = myResourceTracker2;\r\n            return myNodeStatusUpdater;\r\n        }\r\n\r\n        @Override\r\n        protected ContainerManagerImpl createContainerManager(Context context, ContainerExecutor exec, DeletionService del, NodeStatusUpdater nodeStatusUpdater, ApplicationACLsManager aclsManager, LocalDirsHandlerService dirsHandler) {\r\n            return new ContainerManagerImpl(context, exec, del, nodeStatusUpdater, metrics, dirsHandler) {\r\n\r\n                @Override\r\n                public void cleanUpApplicationsOnNMShutDown() {\r\n                    super.cleanUpApplicationsOnNMShutDown();\r\n                    numCleanups.incrementAndGet();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    YarnConfiguration conf = createNMConfig();\r\n    nm.init(conf);\r\n    nm.start();\r\n    GenericTestUtils.waitFor(() -> nm.getServiceState() == STATE.STARTED, 20, 10000);\r\n    GenericTestUtils.waitFor(() -> nm.getServiceState() != STATE.STARTED || heartBeatID.get() >= 1, 50, 20000);\r\n    Assert.assertTrue(heartBeatID.get() >= 1);\r\n    nm.stop();\r\n    nm.waitForServiceToStop(20000);\r\n    Assert.assertEquals(STATE.STOPPED, nm.getServiceState());\r\n    GenericTestUtils.waitFor(() -> numCleanups.get() > 0, 20, 20000);\r\n    Assert.assertEquals(1, numCleanups.get());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testNodeDecommision",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testNodeDecommision() throws Exception\n{\r\n    nm = getNodeManager(NodeAction.SHUTDOWN);\r\n    YarnConfiguration conf = createNMConfig();\r\n    nm.init(conf);\r\n    Assert.assertEquals(STATE.INITED, nm.getServiceState());\r\n    nm.start();\r\n    GenericTestUtils.waitFor(() -> nm.getServiceState() == STATE.STARTED, 20, 10000);\r\n    GenericTestUtils.waitFor(() -> {\r\n        if (nm.getServiceState() == STATE.STARTED) {\r\n            return (heartBeatID.get() >= 1 && nm.getNMContext().getDecommissioned());\r\n        }\r\n        return true;\r\n    }, 50, 200000);\r\n    Assert.assertTrue(heartBeatID.get() >= 1);\r\n    Assert.assertTrue(nm.getNMContext().getDecommissioned());\r\n    nm.waitForServiceToStop(20000);\r\n    Assert.assertEquals(STATE.STOPPED, nm.getServiceState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testNMShutdownForRegistrationFailure",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testNMShutdownForRegistrationFailure() throws Exception\n{\r\n    nm = new NodeManagerWithCustomNodeStatusUpdater() {\r\n\r\n        @Override\r\n        protected NodeStatusUpdater createUpdater(Context context, Dispatcher dispatcher, NodeHealthCheckerService healthChecker) {\r\n            MyNodeStatusUpdater nodeStatusUpdater = new MyNodeStatusUpdater(context, dispatcher, healthChecker, metrics);\r\n            MyResourceTracker2 myResourceTracker2 = new MyResourceTracker2();\r\n            myResourceTracker2.registerNodeAction = NodeAction.SHUTDOWN;\r\n            myResourceTracker2.shutDownMessage = \"RM Shutting Down Node\";\r\n            nodeStatusUpdater.resourceTracker = myResourceTracker2;\r\n            return nodeStatusUpdater;\r\n        }\r\n    };\r\n    verifyNodeStartFailure(\"Received SHUTDOWN signal from Resourcemanager, \" + \"Registration of NodeManager failed, \" + \"Message from ResourceManager: RM Shutting Down Node\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testNMRMConnectionConf",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testNMRMConnectionConf() throws Exception\n{\r\n    final long delta = 50000;\r\n    final long nmRmConnectionWaitMs = 100;\r\n    final long nmRmRetryInterval = 100;\r\n    final long connectionWaitMs = -1;\r\n    final long connectionRetryIntervalMs = 1000;\r\n    final long rmStartIntervalMS = 2 * 1000;\r\n    conf.setLong(YarnConfiguration.NM_RESOURCEMANAGER_CONNECT_MAX_WAIT_MS, nmRmConnectionWaitMs);\r\n    conf.setLong(YarnConfiguration.NM_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS, nmRmRetryInterval);\r\n    conf.setLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS, connectionWaitMs);\r\n    conf.setLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS, connectionRetryIntervalMs);\r\n    conf.setInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY, 1);\r\n    NodeManagerWithCustomNodeStatusUpdater nmWithUpdater;\r\n    nm = nmWithUpdater = new NodeManagerWithCustomNodeStatusUpdater() {\r\n\r\n        @Override\r\n        protected NodeStatusUpdater createUpdater(Context context, Dispatcher dispatcher, NodeHealthCheckerService healthChecker) {\r\n            NodeStatusUpdater nodeStatusUpdater = new MyNodeStatusUpdater6(context, dispatcher, healthChecker, metrics, rmStartIntervalMS, true);\r\n            return nodeStatusUpdater;\r\n        }\r\n    };\r\n    nm.init(conf);\r\n    long waitStartTime = System.currentTimeMillis();\r\n    try {\r\n        nm.start();\r\n        Assert.fail(\"NM should have failed to start due to RM connect failure\");\r\n    } catch (Exception e) {\r\n        long t = System.currentTimeMillis();\r\n        long duration = t - waitStartTime;\r\n        boolean waitTimeValid = (duration >= nmRmConnectionWaitMs) && (duration < (nmRmConnectionWaitMs + delta));\r\n        if (!waitTimeValid) {\r\n            throw new Exception(\"NM should have tried re-connecting to RM during \" + \"period of at least \" + nmRmConnectionWaitMs + \" ms, but \" + \"stopped retrying within \" + (nmRmConnectionWaitMs + delta) + \" ms: \" + e, e);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testNMConnectionToRMInternal",
  "errType" : [ "Exception", "Exception" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testNMConnectionToRMInternal(boolean useSocketTimeoutEx) throws Exception\n{\r\n    final long delta = 50000;\r\n    final long connectionWaitMs = 5000;\r\n    final long connectionRetryIntervalMs = 1000;\r\n    final long rmStartIntervalMS = 2 * 1000;\r\n    conf.setLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS, connectionWaitMs);\r\n    conf.setLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS, connectionRetryIntervalMs);\r\n    NodeManagerWithCustomNodeStatusUpdater nmWithUpdater;\r\n    nm = nmWithUpdater = new NodeManagerWithCustomNodeStatusUpdater() {\r\n\r\n        @Override\r\n        protected NodeStatusUpdater createUpdater(Context context, Dispatcher dispatcher, NodeHealthCheckerService healthChecker) {\r\n            NodeStatusUpdater nodeStatusUpdater = new MyNodeStatusUpdater4(context, dispatcher, healthChecker, metrics, rmStartIntervalMS, true, useSocketTimeoutEx);\r\n            return nodeStatusUpdater;\r\n        }\r\n    };\r\n    nm.init(conf);\r\n    long waitStartTime = System.currentTimeMillis();\r\n    try {\r\n        nm.start();\r\n        Assert.fail(\"NM should have failed to start due to RM connect failure\");\r\n    } catch (Exception e) {\r\n        long t = System.currentTimeMillis();\r\n        long duration = t - waitStartTime;\r\n        boolean waitTimeValid = (duration >= connectionWaitMs) && (duration < (connectionWaitMs + delta));\r\n        if (!waitTimeValid) {\r\n            throw new Exception(\"NM should have tried re-connecting to RM during \" + \"period of at least \" + connectionWaitMs + \" ms, but \" + \"stopped retrying within \" + (connectionWaitMs + delta) + \" ms: \" + e, e);\r\n        }\r\n    }\r\n    nm = nmWithUpdater = new NodeManagerWithCustomNodeStatusUpdater() {\r\n\r\n        @Override\r\n        protected NodeStatusUpdater createUpdater(Context context, Dispatcher dispatcher, NodeHealthCheckerService healthChecker) {\r\n            NodeStatusUpdater nodeStatusUpdater = new MyNodeStatusUpdater4(context, dispatcher, healthChecker, metrics, rmStartIntervalMS, false, useSocketTimeoutEx);\r\n            return nodeStatusUpdater;\r\n        }\r\n    };\r\n    nm.init(conf);\r\n    NodeStatusUpdater updater = nmWithUpdater.getUpdater();\r\n    Assert.assertNotNull(\"Updater not yet created \", updater);\r\n    waitStartTime = System.currentTimeMillis();\r\n    try {\r\n        nm.start();\r\n    } catch (Exception ex) {\r\n        LOG.error(\"NM should have started successfully \" + \"after connecting to RM.\", ex);\r\n        throw ex;\r\n    }\r\n    long duration = System.currentTimeMillis() - waitStartTime;\r\n    MyNodeStatusUpdater4 myUpdater = (MyNodeStatusUpdater4) updater;\r\n    Assert.assertTrue(\"NM started before updater triggered\", myUpdater.isTriggered());\r\n    Assert.assertTrue(\"NM should have connected to RM after \" + \"the start interval of \" + rmStartIntervalMS + \": actual \" + duration + \" \" + myUpdater, (duration >= rmStartIntervalMS));\r\n    Assert.assertTrue(\"NM should have connected to RM less than \" + (rmStartIntervalMS + delta) + \" milliseconds of RM starting up: actual \" + duration + \" \" + myUpdater, (duration < (rmStartIntervalMS + delta)));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testNMConnectionToRM",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testNMConnectionToRM() throws Exception\n{\r\n    testNMConnectionToRMInternal(false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testNMConnectionToRMwithSocketTimeout",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testNMConnectionToRMwithSocketTimeout() throws Exception\n{\r\n    testNMConnectionToRMInternal(true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testNoRegistrationWhenNMServicesFail",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testNoRegistrationWhenNMServicesFail() throws Exception\n{\r\n    nm = new NodeManager() {\r\n\r\n        @Override\r\n        protected NodeStatusUpdater createNodeStatusUpdater(Context context, Dispatcher dispatcher, NodeHealthCheckerService healthChecker) {\r\n            return new MyNodeStatusUpdater(context, dispatcher, healthChecker, metrics);\r\n        }\r\n\r\n        @Override\r\n        protected ContainerManagerImpl createContainerManager(Context context, ContainerExecutor exec, DeletionService del, NodeStatusUpdater nodeStatusUpdater, ApplicationACLsManager aclsManager, LocalDirsHandlerService diskhandler) {\r\n            return new ContainerManagerImpl(context, exec, del, nodeStatusUpdater, metrics, diskhandler) {\r\n\r\n                @Override\r\n                protected void serviceStart() {\r\n                    throw new YarnRuntimeException(\"Starting of RPC Server failed\");\r\n                }\r\n            };\r\n        }\r\n    };\r\n    verifyNodeStartFailure(\"Starting of RPC Server failed\");\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testApplicationKeepAlive",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testApplicationKeepAlive() throws Exception\n{\r\n    MyNodeManager nm = new MyNodeManager();\r\n    try {\r\n        YarnConfiguration conf = createNMConfig();\r\n        conf.setBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED, true);\r\n        conf.setLong(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS, 4000l);\r\n        nm.init(conf);\r\n        nm.start();\r\n        GenericTestUtils.waitFor(() -> nm.getServiceState() == STATE.STARTED, 20, 10000);\r\n        GenericTestUtils.waitFor(() -> nm.getServiceState() != STATE.STARTED || heartBeatID.get() >= 12, 100L, 60000000);\r\n        Assert.assertTrue(heartBeatID.get() >= 12);\r\n        MyResourceTracker3 rt = (MyResourceTracker3) nm.getNodeStatusUpdater().getRMClient();\r\n        rt.context.getApplications().remove(rt.appId);\r\n        Assert.assertEquals(1, rt.keepAliveRequests.size());\r\n        int numKeepAliveRequests = rt.keepAliveRequests.get(rt.appId).size();\r\n        LOG.info(\"Number of Keep Alive Requests: [\" + numKeepAliveRequests + \"]\");\r\n        Assert.assertTrue(numKeepAliveRequests == 2 || numKeepAliveRequests == 3);\r\n        GenericTestUtils.waitFor(() -> nm.getServiceState() != STATE.STARTED || heartBeatID.get() >= 20, 100L, 60000000);\r\n        Assert.assertTrue(heartBeatID.get() >= 20);\r\n        int numKeepAliveRequests2 = rt.keepAliveRequests.get(rt.appId).size();\r\n        Assert.assertEquals(numKeepAliveRequests, numKeepAliveRequests2);\r\n    } finally {\r\n        if (nm != null) {\r\n            nm.stop();\r\n            nm.waitForServiceToStop(10000);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testCompletedContainerStatusBackup",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testCompletedContainerStatusBackup() throws Exception\n{\r\n    nm = new NodeManager() {\r\n\r\n        @Override\r\n        protected NodeStatusUpdater createNodeStatusUpdater(Context context, Dispatcher dispatcher, NodeHealthCheckerService healthChecker) {\r\n            MyNodeStatusUpdater2 myNodeStatusUpdater = new MyNodeStatusUpdater2(context, dispatcher, healthChecker, metrics);\r\n            return myNodeStatusUpdater;\r\n        }\r\n\r\n        @Override\r\n        protected NMContext createNMContext(NMContainerTokenSecretManager containerTokenSecretManager, NMTokenSecretManagerInNM nmTokenSecretManager, NMStateStoreService store, boolean isDistributedSchedulingEnabled, Configuration config) {\r\n            return new MyNMContext(containerTokenSecretManager, nmTokenSecretManager, config);\r\n        }\r\n    };\r\n    YarnConfiguration conf = createNMConfig();\r\n    nm.init(conf);\r\n    nm.start();\r\n    GenericTestUtils.waitFor(() -> nm.getServiceState() == STATE.STARTED, 20, 10000);\r\n    GenericTestUtils.waitFor(() -> nm.getServiceState() != STATE.STARTED || heartBeatID.get() > 4, 50, 20000);\r\n    int hbID = heartBeatID.get();\r\n    Assert.assertFalse(\"Failed to get all heartbeats in time, \" + \"heartbeatID:\" + hbID, hbID <= 4);\r\n    Assert.assertFalse(\"ContainerStatus Backup failed\", assertionFailedInThread.get());\r\n    Assert.assertNotNull(nm.getNMContext().getSystemCredentialsForApps().get(ApplicationId.newInstance(1234, 1)).getToken(new Text(\"token1\")));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testNodeStatusUpdaterRetryAndNMShutdown",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testNodeStatusUpdaterRetryAndNMShutdown() throws Exception\n{\r\n    final long connectionWaitSecs = 1000;\r\n    final long connectionRetryIntervalMs = 1000;\r\n    int port = ServerSocketUtil.getPort(49156, 10);\r\n    YarnConfiguration conf = createNMConfig(port);\r\n    conf.setLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS, connectionWaitSecs);\r\n    conf.setLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS, connectionRetryIntervalMs);\r\n    conf.setLong(YarnConfiguration.NM_SLEEP_DELAY_BEFORE_SIGKILL_MS, 5000);\r\n    conf.setLong(YarnConfiguration.NM_LOG_RETAIN_SECONDS, 1);\r\n    CyclicBarrier syncBarrier = new CyclicBarrier(2);\r\n    nm = new MyNodeManager2(syncBarrier, conf);\r\n    nm.init(conf);\r\n    nm.start();\r\n    ContainerId cId = TestNodeManagerShutdown.createContainerId();\r\n    FileContext localFS = FileContext.getLocalFSFileContext();\r\n    TestNodeManagerShutdown.startContainer(nm, cId, localFS, nmLocalDir, new File(\"start_file.txt\"), port);\r\n    try {\r\n        syncBarrier.await(10000, TimeUnit.MILLISECONDS);\r\n        syncBarrier.await(10000, TimeUnit.MILLISECONDS);\r\n    } catch (Exception e) {\r\n    }\r\n    Assert.assertFalse(\"Containers not cleaned up when NM stopped\", assertionFailedInThread.get());\r\n    Assert.assertTrue(((MyNodeManager2) nm).isStopped);\r\n    Assert.assertEquals(\"calculate heartBeatCount based on\" + \" connectionWaitSecs and RetryIntervalSecs\", 2, heartBeatID.get());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testRMVersionLessThanMinimum",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testRMVersionLessThanMinimum() throws Exception\n{\r\n    final AtomicInteger numCleanups = new AtomicInteger(0);\r\n    YarnConfiguration conf = createNMConfig();\r\n    conf.set(YarnConfiguration.NM_RESOURCEMANAGER_MINIMUM_VERSION, \"3.0.0\");\r\n    nm = new NodeManager() {\r\n\r\n        @Override\r\n        protected NodeStatusUpdater createNodeStatusUpdater(Context context, Dispatcher dispatcher, NodeHealthCheckerService healthChecker) {\r\n            MyNodeStatusUpdater myNodeStatusUpdater = new MyNodeStatusUpdater(context, dispatcher, healthChecker, metrics);\r\n            MyResourceTracker2 myResourceTracker2 = new MyResourceTracker2();\r\n            myResourceTracker2.heartBeatNodeAction = NodeAction.NORMAL;\r\n            myResourceTracker2.rmVersion = \"3.0.0\";\r\n            myNodeStatusUpdater.resourceTracker = myResourceTracker2;\r\n            return myNodeStatusUpdater;\r\n        }\r\n\r\n        @Override\r\n        protected ContainerManagerImpl createContainerManager(Context context, ContainerExecutor exec, DeletionService del, NodeStatusUpdater nodeStatusUpdater, ApplicationACLsManager aclsManager, LocalDirsHandlerService dirsHandler) {\r\n            return new ContainerManagerImpl(context, exec, del, nodeStatusUpdater, metrics, dirsHandler) {\r\n\r\n                @Override\r\n                public void cleanUpApplicationsOnNMShutDown() {\r\n                    super.cleanUpApplicationsOnNMShutDown();\r\n                    numCleanups.incrementAndGet();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    nm.init(conf);\r\n    nm.start();\r\n    GenericTestUtils.waitFor(() -> nm.getServiceState() == STATE.STARTED, 20, 200000);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testSignalContainerToContainerManager",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testSignalContainerToContainerManager() throws Exception\n{\r\n    nm = new NodeManager() {\r\n\r\n        @Override\r\n        protected NodeStatusUpdater createNodeStatusUpdater(Context context, Dispatcher dispatcher, NodeHealthCheckerService healthChecker) {\r\n            return new MyNodeStatusUpdater(context, dispatcher, healthChecker, metrics, true);\r\n        }\r\n\r\n        @Override\r\n        protected ContainerManagerImpl createContainerManager(Context context, ContainerExecutor exec, DeletionService del, NodeStatusUpdater nodeStatusUpdater, ApplicationACLsManager aclsManager, LocalDirsHandlerService diskhandler) {\r\n            return new MyContainerManager(context, exec, del, nodeStatusUpdater, metrics, diskhandler);\r\n        }\r\n    };\r\n    YarnConfiguration conf = createNMConfig();\r\n    nm.init(conf);\r\n    nm.start();\r\n    GenericTestUtils.waitFor(() -> nm.getServiceState() == STATE.STARTED, 20, 20000);\r\n    GenericTestUtils.waitFor(() -> nm.getServiceState() != STATE.STARTED || heartBeatID.get() > 3, 50, 20000);\r\n    Assert.assertTrue(heartBeatID.get() > 3);\r\n    Assert.assertEquals(\"Number of registered NMs is wrong!!\", 1, this.registeredNodes.size());\r\n    MyContainerManager containerManager = (MyContainerManager) nm.getContainerManager();\r\n    Assert.assertTrue(containerManager.signaled);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testConcurrentAccessToSystemCredentials",
  "errType" : [ "InterruptedException", "Throwable" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testConcurrentAccessToSystemCredentials()\n{\r\n    final Map<ApplicationId, ByteBuffer> testCredentials = new HashMap<>();\r\n    ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[300]);\r\n    ApplicationId applicationId = ApplicationId.newInstance(123456, 120);\r\n    testCredentials.put(applicationId, byteBuffer);\r\n    final List<Throwable> exceptions = Collections.synchronizedList(new ArrayList<Throwable>());\r\n    final int NUM_THREADS = 10;\r\n    final CountDownLatch allDone = new CountDownLatch(NUM_THREADS);\r\n    final ExecutorService threadPool = HadoopExecutors.newFixedThreadPool(NUM_THREADS);\r\n    final AtomicBoolean stop = new AtomicBoolean(false);\r\n    try {\r\n        for (int i = 0; i < NUM_THREADS; i++) {\r\n            threadPool.submit(new Runnable() {\r\n\r\n                @Override\r\n                public void run() {\r\n                    try {\r\n                        for (int i = 0; i < 100 && !stop.get(); i++) {\r\n                            NodeHeartbeatResponse nodeHeartBeatResponse = newNodeHeartbeatResponse(0, NodeAction.NORMAL, null, null, null, null, 0);\r\n                            nodeHeartBeatResponse.setSystemCredentialsForApps(YarnServerBuilderUtils.convertToProtoFormat(testCredentials));\r\n                            NodeHeartbeatResponseProto proto = ((NodeHeartbeatResponsePBImpl) nodeHeartBeatResponse).getProto();\r\n                            Assert.assertNotNull(proto);\r\n                        }\r\n                    } catch (Throwable t) {\r\n                        exceptions.add(t);\r\n                        stop.set(true);\r\n                    } finally {\r\n                        allDone.countDown();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        int testTimeout = 2;\r\n        Assert.assertTrue(\"Timeout waiting for more than \" + testTimeout + \" \" + \"seconds\", allDone.await(testTimeout, TimeUnit.SECONDS));\r\n    } catch (InterruptedException ie) {\r\n        exceptions.add(ie);\r\n    } finally {\r\n        threadPool.shutdownNow();\r\n    }\r\n    Assert.assertTrue(\"Test failed with exception(s)\" + exceptions, exceptions.isEmpty());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testUpdateNMResources",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 27,
  "sourceCodeText" : "void testUpdateNMResources() throws Exception\n{\r\n    final Resource resource = Resource.newInstance(8 * 1024, 1);\r\n    LOG.info(\"Start the Resource Tracker to mock heartbeats\");\r\n    Server resourceTracker = getMockResourceTracker(resource);\r\n    resourceTracker.start();\r\n    LOG.info(\"Start the Node Manager\");\r\n    NodeManager nodeManager = new NodeManager();\r\n    YarnConfiguration nmConf = new YarnConfiguration();\r\n    try {\r\n        nmConf.setSocketAddr(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS, resourceTracker.getListenerAddress());\r\n        nmConf.set(YarnConfiguration.NM_LOCALIZER_ADDRESS, \"0.0.0.0:0\");\r\n        nodeManager.init(nmConf);\r\n        nodeManager.start();\r\n        LOG.info(\"Initially the Node Manager should have the default resources\");\r\n        ContainerManager containerManager = nodeManager.getContainerManager();\r\n        ContainersMonitor containerMonitor = containerManager.getContainersMonitor();\r\n        Assert.assertEquals(8, containerMonitor.getVCoresAllocatedForContainers());\r\n        Assert.assertEquals(8 * GB, containerMonitor.getPmemAllocatedForContainers());\r\n        LOG.info(\"The first heartbeat should trigger a resource change to {}\", resource);\r\n        GenericTestUtils.waitFor(() -> containerMonitor.getVCoresAllocatedForContainers() == 1, 100, 2 * 1000);\r\n        Assert.assertEquals(8 * GB, containerMonitor.getPmemAllocatedForContainers());\r\n        resource.setVirtualCores(5);\r\n        resource.setMemorySize(4 * 1024);\r\n        LOG.info(\"Change the resources to {}\", resource);\r\n        GenericTestUtils.waitFor(() -> containerMonitor.getVCoresAllocatedForContainers() == 5, 100, 2 * 1000);\r\n        Assert.assertEquals(4 * GB, containerMonitor.getPmemAllocatedForContainers());\r\n    } finally {\r\n        LOG.info(\"Cleanup\");\r\n        nodeManager.stop();\r\n        try {\r\n            nodeManager.close();\r\n        } catch (IOException ex) {\r\n            LOG.error(\"Could not close the node manager\", ex);\r\n        }\r\n        resourceTracker.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getMockResourceTracker",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "Server getMockResourceTracker(final Resource resource) throws Exception\n{\r\n    final ResourceTracker rt = mock(ResourceTracker.class);\r\n    when(rt.registerNodeManager(any())).thenAnswer(invocation -> {\r\n        RegisterNodeManagerResponse response = recordFactory.newRecordInstance(RegisterNodeManagerResponse.class);\r\n        response.setContainerTokenMasterKey(createMasterKey());\r\n        response.setNMTokenMasterKey(createMasterKey());\r\n        return response;\r\n    });\r\n    when(rt.nodeHeartbeat(any())).thenAnswer(invocation -> {\r\n        NodeHeartbeatResponse response = recordFactory.newRecordInstance(NodeHeartbeatResponse.class);\r\n        response.setResource(resource);\r\n        return response;\r\n    });\r\n    when(rt.unRegisterNodeManager(any())).thenAnswer(invocaiton -> {\r\n        UnRegisterNodeManagerResponse response = recordFactory.newRecordInstance(UnRegisterNodeManagerResponse.class);\r\n        return response;\r\n    });\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    YarnRPC rpc = YarnRPC.create(conf);\r\n    Server server = rpc.getServer(ResourceTracker.class, rt, new InetSocketAddress(\"0.0.0.0\", 0), conf, null, 1);\r\n    return server;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createContainerStatus",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "ContainerStatus createContainerStatus(int id, ContainerState containerState)\n{\r\n    ApplicationId applicationId = ApplicationId.newInstance(0, 1);\r\n    ApplicationAttemptId applicationAttemptId = ApplicationAttemptId.newInstance(applicationId, 1);\r\n    ContainerId contaierId = ContainerId.newContainerId(applicationAttemptId, id);\r\n    ContainerStatus containerStatus = BuilderUtils.newContainerStatus(contaierId, containerState, \"test_containerStatus: id=\" + id + \", containerState: \" + containerState, 0, Resource.newInstance(1024, 1));\r\n    return containerStatus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getMockContainer",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "Container getMockContainer(ContainerStatus containerStatus)\n{\r\n    ContainerImpl container = mock(ContainerImpl.class);\r\n    when(container.cloneAndGetContainerStatus()).thenReturn(containerStatus);\r\n    when(container.getCurrentState()).thenReturn(containerStatus.getState());\r\n    when(container.getContainerId()).thenReturn(containerStatus.getContainerId());\r\n    if (containerStatus.getState().equals(ContainerState.COMPLETE)) {\r\n        when(container.getContainerState()).thenReturn(org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.DONE);\r\n    } else if (containerStatus.getState().equals(ContainerState.RUNNING)) {\r\n        when(container.getContainerState()).thenReturn(org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.RUNNING);\r\n    }\r\n    return container;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "verifyNodeStartFailure",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void verifyNodeStartFailure(String errMessage) throws Exception\n{\r\n    Assert.assertNotNull(\"nm is null\", nm);\r\n    YarnConfiguration conf = createNMConfig();\r\n    nm.init(conf);\r\n    LambdaTestUtils.intercept(Exception.class, errMessage, () -> nm.start());\r\n    Assert.assertEquals(\"NM state is wrong!\", STATE.STOPPED, nm.getServiceState());\r\n    Assert.assertEquals(\"Number of registered nodes is wrong!\", 0, this.registeredNodes.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getNodeManager",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeManager getNodeManager(final NodeAction nodeHeartBeatAction)\n{\r\n    return new NodeManager() {\r\n\r\n        @Override\r\n        protected NodeStatusUpdater createNodeStatusUpdater(Context context, Dispatcher dispatcher, NodeHealthCheckerService healthChecker) {\r\n            MyNodeStatusUpdater myNodeStatusUpdater = new MyNodeStatusUpdater(context, dispatcher, healthChecker, metrics);\r\n            MyResourceTracker2 myResourceTracker2 = new MyResourceTracker2();\r\n            myResourceTracker2.heartBeatNodeAction = nodeHeartBeatAction;\r\n            myNodeStatusUpdater.resourceTracker = myResourceTracker2;\r\n            return myNodeStatusUpdater;\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testExceptionReported",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testExceptionReported()\n{\r\n    nm = new NodeManager();\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    nm.init(conf);\r\n    NodeStatusUpdater nodeStatusUpdater = nm.getNodeStatusUpdater();\r\n    NodeHealthCheckerService nodeHealthChecker = nm.getNodeHealthChecker();\r\n    assertThat(nodeHealthChecker.isHealthy()).isTrue();\r\n    String message = \"exception message\";\r\n    Exception e = new Exception(message);\r\n    nodeStatusUpdater.reportException(e);\r\n    assertThat(nodeHealthChecker.isHealthy()).isFalse();\r\n    assertThat(nodeHealthChecker.getHealthReport()).isEqualTo(message);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setup()\n{\r\n    mockCGroupsHandler = mock(CGroupsHandler.class);\r\n    when(mockCGroupsHandler.getPathForCGroup(any(), any())).thenReturn(\".\");\r\n    cGroupsMemoryResourceHandler = new CGroupsMemoryResourceHandlerImpl(mockCGroupsHandler);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testBootstrap",
  "errType" : [ "ResourceHandlerException", "ResourceHandlerException" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testBootstrap() throws Exception\n{\r\n    Configuration conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED, false);\r\n    conf.setBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED, false);\r\n    List<PrivilegedOperation> ret = cGroupsMemoryResourceHandler.bootstrap(conf);\r\n    verify(mockCGroupsHandler, times(1)).initializeCGroupController(CGroupsHandler.CGroupController.MEMORY);\r\n    Assert.assertNull(ret);\r\n    Assert.assertEquals(\"Default swappiness value incorrect\", 0, cGroupsMemoryResourceHandler.getSwappiness());\r\n    conf.setBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED, true);\r\n    try {\r\n        cGroupsMemoryResourceHandler.bootstrap(conf);\r\n    } catch (ResourceHandlerException re) {\r\n        Assert.fail(\"Pmem check should be allowed to run with cgroups\");\r\n    }\r\n    conf.setBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED, false);\r\n    conf.setBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED, true);\r\n    try {\r\n        cGroupsMemoryResourceHandler.bootstrap(conf);\r\n    } catch (ResourceHandlerException re) {\r\n        Assert.fail(\"Vmem check should be allowed to run with cgroups\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testSwappinessValues",
  "errType" : [ "ResourceHandlerException", "ResourceHandlerException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testSwappinessValues() throws Exception\n{\r\n    Configuration conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED, false);\r\n    conf.setBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED, false);\r\n    conf.setInt(YarnConfiguration.NM_MEMORY_RESOURCE_CGROUPS_SWAPPINESS, -1);\r\n    try {\r\n        cGroupsMemoryResourceHandler.bootstrap(conf);\r\n        Assert.fail(\"Negative values for swappiness should not be allowed.\");\r\n    } catch (ResourceHandlerException re) {\r\n    }\r\n    try {\r\n        conf.setInt(YarnConfiguration.NM_MEMORY_RESOURCE_CGROUPS_SWAPPINESS, 101);\r\n        cGroupsMemoryResourceHandler.bootstrap(conf);\r\n        Assert.fail(\"Values greater than 100 for swappiness\" + \" should not be allowed.\");\r\n    } catch (ResourceHandlerException re) {\r\n    }\r\n    conf.setInt(YarnConfiguration.NM_MEMORY_RESOURCE_CGROUPS_SWAPPINESS, 60);\r\n    cGroupsMemoryResourceHandler.bootstrap(conf);\r\n    Assert.assertEquals(\"Swappiness value incorrect\", 60, cGroupsMemoryResourceHandler.getSwappiness());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testPreStart",
  "errType" : null,
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void testPreStart() throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    conf.setBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED, false);\r\n    conf.setBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED, false);\r\n    cGroupsMemoryResourceHandler.bootstrap(conf);\r\n    String id = \"container_01_01\";\r\n    String path = \"test-path/\" + id;\r\n    ContainerId mockContainerId = mock(ContainerId.class);\r\n    when(mockContainerId.toString()).thenReturn(id);\r\n    Container mockContainer = mock(Container.class);\r\n    when(mockContainer.getContainerId()).thenReturn(mockContainerId);\r\n    when(mockCGroupsHandler.getPathForCGroupTasks(CGroupsHandler.CGroupController.MEMORY, id)).thenReturn(path);\r\n    int memory = 1024;\r\n    when(mockContainer.getResource()).thenReturn(Resource.newInstance(memory, 1));\r\n    List<PrivilegedOperation> ret = cGroupsMemoryResourceHandler.preStart(mockContainer);\r\n    verify(mockCGroupsHandler, times(1)).createCGroup(CGroupsHandler.CGroupController.MEMORY, id);\r\n    verify(mockCGroupsHandler, times(1)).updateCGroupParam(CGroupsHandler.CGroupController.MEMORY, id, CGroupsHandler.CGROUP_PARAM_MEMORY_HARD_LIMIT_BYTES, String.valueOf(memory) + \"M\");\r\n    verify(mockCGroupsHandler, times(1)).updateCGroupParam(CGroupsHandler.CGroupController.MEMORY, id, CGroupsHandler.CGROUP_PARAM_MEMORY_SOFT_LIMIT_BYTES, String.valueOf((int) (memory * 0.9)) + \"M\");\r\n    verify(mockCGroupsHandler, times(1)).updateCGroupParam(CGroupsHandler.CGroupController.MEMORY, id, CGroupsHandler.CGROUP_PARAM_MEMORY_SWAPPINESS, String.valueOf(0));\r\n    Assert.assertNotNull(ret);\r\n    Assert.assertEquals(1, ret.size());\r\n    PrivilegedOperation op = ret.get(0);\r\n    Assert.assertEquals(PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP, op.getOperationType());\r\n    List<String> args = op.getArguments();\r\n    Assert.assertEquals(1, args.size());\r\n    Assert.assertEquals(PrivilegedOperation.CGROUP_ARG_PREFIX + path, args.get(0));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testPreStartNonEnforced",
  "errType" : null,
  "containingMethodsNum" : 22,
  "sourceCodeText" : "void testPreStartNonEnforced() throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    conf.setBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED, false);\r\n    conf.setBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED, false);\r\n    conf.setBoolean(YarnConfiguration.NM_MEMORY_RESOURCE_ENFORCED, false);\r\n    cGroupsMemoryResourceHandler.bootstrap(conf);\r\n    String id = \"container_01_01\";\r\n    String path = \"test-path/\" + id;\r\n    ContainerId mockContainerId = mock(ContainerId.class);\r\n    when(mockContainerId.toString()).thenReturn(id);\r\n    Container mockContainer = mock(Container.class);\r\n    when(mockContainer.getContainerId()).thenReturn(mockContainerId);\r\n    when(mockCGroupsHandler.getPathForCGroupTasks(CGroupsHandler.CGroupController.MEMORY, id)).thenReturn(path);\r\n    int memory = 1024;\r\n    when(mockContainer.getResource()).thenReturn(Resource.newInstance(memory, 1));\r\n    List<PrivilegedOperation> ret = cGroupsMemoryResourceHandler.preStart(mockContainer);\r\n    verify(mockCGroupsHandler, times(1)).createCGroup(CGroupsHandler.CGroupController.MEMORY, id);\r\n    verify(mockCGroupsHandler, times(0)).updateCGroupParam(CGroupsHandler.CGroupController.MEMORY, id, CGroupsHandler.CGROUP_PARAM_MEMORY_HARD_LIMIT_BYTES, String.valueOf(memory) + \"M\");\r\n    verify(mockCGroupsHandler, times(0)).updateCGroupParam(CGroupsHandler.CGroupController.MEMORY, id, CGroupsHandler.CGROUP_PARAM_MEMORY_SOFT_LIMIT_BYTES, String.valueOf((int) (memory * 0.9)) + \"M\");\r\n    verify(mockCGroupsHandler, times(0)).updateCGroupParam(CGroupsHandler.CGroupController.MEMORY, id, CGroupsHandler.CGROUP_PARAM_MEMORY_SWAPPINESS, String.valueOf(0));\r\n    Assert.assertNotNull(ret);\r\n    Assert.assertEquals(1, ret.size());\r\n    PrivilegedOperation op = ret.get(0);\r\n    Assert.assertEquals(PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP, op.getOperationType());\r\n    List<String> args = op.getArguments();\r\n    Assert.assertEquals(1, args.size());\r\n    Assert.assertEquals(PrivilegedOperation.CGROUP_ARG_PREFIX + path, args.get(0));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testReacquireContainer",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testReacquireContainer() throws Exception\n{\r\n    ContainerId containerIdMock = mock(ContainerId.class);\r\n    Assert.assertNull(cGroupsMemoryResourceHandler.reacquireContainer(containerIdMock));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testPostComplete",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testPostComplete() throws Exception\n{\r\n    String id = \"container_01_01\";\r\n    ContainerId mockContainerId = mock(ContainerId.class);\r\n    when(mockContainerId.toString()).thenReturn(id);\r\n    Assert.assertNull(cGroupsMemoryResourceHandler.postComplete(mockContainerId));\r\n    verify(mockCGroupsHandler, times(1)).deleteCGroup(CGroupsHandler.CGroupController.MEMORY, id);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testTeardown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testTeardown() throws Exception\n{\r\n    Assert.assertNull(cGroupsMemoryResourceHandler.teardown());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testOpportunistic",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testOpportunistic() throws Exception\n{\r\n    Configuration conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED, false);\r\n    conf.setBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED, false);\r\n    cGroupsMemoryResourceHandler.bootstrap(conf);\r\n    ContainerTokenIdentifier tokenId = mock(ContainerTokenIdentifier.class);\r\n    when(tokenId.getExecutionType()).thenReturn(ExecutionType.OPPORTUNISTIC);\r\n    Container container = mock(Container.class);\r\n    String id = \"container_01_01\";\r\n    ContainerId mockContainerId = mock(ContainerId.class);\r\n    when(mockContainerId.toString()).thenReturn(id);\r\n    when(container.getContainerId()).thenReturn(mockContainerId);\r\n    when(container.getContainerTokenIdentifier()).thenReturn(tokenId);\r\n    when(container.getResource()).thenReturn(Resource.newInstance(1024, 2));\r\n    cGroupsMemoryResourceHandler.preStart(container);\r\n    verify(mockCGroupsHandler, times(1)).updateCGroupParam(CGroupsHandler.CGroupController.MEMORY, id, CGroupsHandler.CGROUP_PARAM_MEMORY_SOFT_LIMIT_BYTES, \"0M\");\r\n    verify(mockCGroupsHandler, times(1)).updateCGroupParam(CGroupsHandler.CGroupController.MEMORY, id, CGroupsHandler.CGROUP_PARAM_MEMORY_SWAPPINESS, \"100\");\r\n    verify(mockCGroupsHandler, times(1)).updateCGroupParam(CGroupsHandler.CGroupController.MEMORY, id, CGroupsHandler.CGROUP_PARAM_MEMORY_HARD_LIMIT_BYTES, \"1024M\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "getRegisterRequestInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DeviceRegisterRequest getRegisterRequestInfo() throws Exception\n{\r\n    return DeviceRegisterRequest.Builder.newInstance().setResourceName(\"cmp.com/cmp\").build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "getDevices",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Set<Device> getDevices() throws Exception\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "onDevicesAllocated",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "DeviceRuntimeSpec onDevicesAllocated(Set<Device> allocatedDevices, YarnRuntimeType yarnRuntime) throws Exception\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "onDevicesReleased",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void onDevicesReleased(Set<Device> releasedDevices) throws Exception\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setup() throws IOException\n{\r\n    conf.setClass(YarnConfiguration.NM_MON_RESOURCE_CALCULATOR, LinuxResourceCalculatorPlugin.class, ResourceCalculatorPlugin.class);\r\n    conf.setBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED, true);\r\n    conf.setBoolean(YarnConfiguration.NM_MEMORY_RESOURCE_ENFORCED, false);\r\n    super.setup();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "testMetricsUpdate",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testMetricsUpdate() throws Exception\n{\r\n    Context spyContext = spy(context);\r\n    ContainersMonitorImpl cm = new ContainersMonitorImpl(mock(ContainerExecutor.class), mock(AsyncDispatcher.class), spyContext);\r\n    cm.init(getConfForCM(false, true, 1024, 2.1f));\r\n    cm.start();\r\n    Mockito.verify(spyContext, timeout(500).atLeastOnce()).getNodeManagerMetrics();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "testProcessTreeLimits",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testProcessTreeLimits() throws IOException\n{\r\n    File procfsRootDir = new File(localDir, \"proc\");\r\n    String[] pids = { \"100\", \"200\", \"300\", \"400\", \"500\", \"600\", \"700\" };\r\n    try {\r\n        TestProcfsBasedProcessTree.setupProcfsRootDir(procfsRootDir);\r\n        TestProcfsBasedProcessTree.setupPidDirs(procfsRootDir, pids);\r\n        TestProcfsBasedProcessTree.ProcessStatInfo[] procs = new TestProcfsBasedProcessTree.ProcessStatInfo[7];\r\n        procs[0] = new TestProcfsBasedProcessTree.ProcessStatInfo(new String[] { \"100\", \"proc1\", \"1\", \"100\", \"100\", \"100000\" });\r\n        procs[1] = new TestProcfsBasedProcessTree.ProcessStatInfo(new String[] { \"200\", \"proc2\", \"1\", \"200\", \"200\", \"200000\" });\r\n        procs[2] = new TestProcfsBasedProcessTree.ProcessStatInfo(new String[] { \"300\", \"proc3\", \"200\", \"200\", \"200\", \"300000\" });\r\n        procs[3] = new TestProcfsBasedProcessTree.ProcessStatInfo(new String[] { \"400\", \"proc4\", \"200\", \"200\", \"200\", \"400000\" });\r\n        procs[4] = new TestProcfsBasedProcessTree.ProcessStatInfo(new String[] { \"500\", \"proc5\", \"100\", \"100\", \"100\", \"1500000\" });\r\n        procs[5] = new TestProcfsBasedProcessTree.ProcessStatInfo(new String[] { \"600\", \"proc6\", \"1\", \"600\", \"600\", \"100000\" });\r\n        procs[6] = new TestProcfsBasedProcessTree.ProcessStatInfo(new String[] { \"700\", \"proc7\", \"600\", \"600\", \"600\", \"100000\" });\r\n        TestProcfsBasedProcessTree.writeStatFiles(procfsRootDir, pids, procs, null);\r\n        long limit = 700000;\r\n        ContainersMonitorImpl test = new ContainersMonitorImpl(null, null, null);\r\n        ProcfsBasedProcessTree pTree = new ProcfsBasedProcessTree(\"100\", procfsRootDir.getAbsolutePath());\r\n        pTree.updateProcessTree();\r\n        assertTrue(\"tree rooted at 100 should be over limit \" + \"after first iteration.\", test.isProcessTreeOverLimit(pTree, \"dummyId\", limit));\r\n        pTree = new ProcfsBasedProcessTree(\"200\", procfsRootDir.getAbsolutePath());\r\n        pTree.updateProcessTree();\r\n        assertFalse(\"tree rooted at 200 shouldn't be over limit \" + \"after one iteration.\", test.isProcessTreeOverLimit(pTree, \"dummyId\", limit));\r\n        pTree.updateProcessTree();\r\n        assertTrue(\"tree rooted at 200 should be over limit after 2 iterations\", test.isProcessTreeOverLimit(pTree, \"dummyId\", limit));\r\n        pTree = new ProcfsBasedProcessTree(\"600\", procfsRootDir.getAbsolutePath());\r\n        pTree.updateProcessTree();\r\n        assertFalse(\"tree rooted at 600 should never be over limit.\", test.isProcessTreeOverLimit(pTree, \"dummyId\", limit));\r\n        pTree.updateProcessTree();\r\n        assertFalse(\"tree rooted at 600 should never be over limit.\", test.isProcessTreeOverLimit(pTree, \"dummyId\", limit));\r\n    } finally {\r\n        FileUtil.fullyDelete(procfsRootDir);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "testContainerMonitor",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testContainerMonitor() throws Exception\n{\r\n    conf.setBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED, false);\r\n    conf.setBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED, false);\r\n    containerManager.start();\r\n    ContainerLaunchContext context = recordFactory.newRecordInstance(ContainerLaunchContext.class);\r\n    context.setCommands(Arrays.asList(\"sleep 6\"));\r\n    ContainerId cId = createContainerId(1705);\r\n    StartContainerRequest scRequest = StartContainerRequest.newInstance(context, createContainerToken(cId, DUMMY_RM_IDENTIFIER, this.context.getNodeId(), user, this.context.getContainerTokenSecretManager()));\r\n    StartContainersRequest allRequests = StartContainersRequest.newInstance(Arrays.asList(scRequest));\r\n    containerManager.startContainers(allRequests);\r\n    BaseContainerManagerTest.waitForContainerState(containerManager, cId, ContainerState.RUNNING);\r\n    Thread.sleep(2000);\r\n    GenericTestUtils.waitFor(new Supplier<Boolean>() {\r\n\r\n        public Boolean get() {\r\n            try {\r\n                return containerManager.getContainerStatuses(GetContainerStatusesRequest.newInstance(Arrays.asList(cId))).getContainerStatuses().get(0).getHost() != null;\r\n            } catch (Exception e) {\r\n                return false;\r\n            }\r\n        }\r\n    }, 300, 10000);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "testContainerKillOnMemoryOverflow",
  "errType" : null,
  "containingMethodsNum" : 48,
  "sourceCodeText" : "void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException\n{\r\n    if (!ProcfsBasedProcessTree.isAvailable()) {\r\n        return;\r\n    }\r\n    containerManager.start();\r\n    File scriptFile = new File(tmpDir, \"scriptFile.sh\");\r\n    PrintWriter fileWriter = new PrintWriter(scriptFile);\r\n    File processStartFile = new File(tmpDir, \"start_file.txt\").getAbsoluteFile();\r\n    fileWriter.write(\"\\numask 0\");\r\n    fileWriter.write(\"\\necho Hello World! > \" + processStartFile);\r\n    fileWriter.write(\"\\necho $$ >> \" + processStartFile);\r\n    fileWriter.write(\"\\nsleep 15\");\r\n    fileWriter.close();\r\n    ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class);\r\n    ApplicationId appId = ApplicationId.newInstance(0, 0);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId cId = ContainerId.newContainerId(appAttemptId, 0);\r\n    URL resource_alpha = URL.fromPath(localFS.makeQualified(new Path(scriptFile.getAbsolutePath())));\r\n    LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class);\r\n    rsrc_alpha.setResource(resource_alpha);\r\n    rsrc_alpha.setSize(-1);\r\n    rsrc_alpha.setVisibility(LocalResourceVisibility.APPLICATION);\r\n    rsrc_alpha.setType(LocalResourceType.FILE);\r\n    rsrc_alpha.setTimestamp(scriptFile.lastModified());\r\n    String destinationFile = \"dest_file\";\r\n    Map<String, LocalResource> localResources = new HashMap<String, LocalResource>();\r\n    localResources.put(destinationFile, rsrc_alpha);\r\n    containerLaunchContext.setLocalResources(localResources);\r\n    List<String> commands = new ArrayList<String>();\r\n    commands.add(\"/bin/bash\");\r\n    commands.add(scriptFile.getAbsolutePath());\r\n    containerLaunchContext.setCommands(commands);\r\n    Resource r = BuilderUtils.newResource(0, 0);\r\n    ContainerTokenIdentifier containerIdentifier = new ContainerTokenIdentifier(cId, context.getNodeId().toString(), user, r, System.currentTimeMillis() + 120000, 123, DUMMY_RM_IDENTIFIER, Priority.newInstance(0), 0);\r\n    Token containerToken = BuilderUtils.newContainerToken(context.getNodeId(), containerManager.getContext().getContainerTokenSecretManager().createPassword(containerIdentifier), containerIdentifier);\r\n    StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, containerToken);\r\n    List<StartContainerRequest> list = new ArrayList<StartContainerRequest>();\r\n    list.add(scRequest);\r\n    StartContainersRequest allRequests = StartContainersRequest.newInstance(list);\r\n    containerManager.startContainers(allRequests);\r\n    int timeoutSecs = 0;\r\n    while (!processStartFile.exists() && timeoutSecs++ < 20) {\r\n        Thread.sleep(1000);\r\n        LOG.info(\"Waiting for process start-file to be created\");\r\n    }\r\n    Assert.assertTrue(\"ProcessStartFile doesn't exist!\", processStartFile.exists());\r\n    BufferedReader reader = new BufferedReader(new FileReader(processStartFile));\r\n    Assert.assertEquals(\"Hello World!\", reader.readLine());\r\n    String pid = reader.readLine().trim();\r\n    Assert.assertEquals(null, reader.readLine());\r\n    BaseContainerManagerTest.waitForContainerState(containerManager, cId, ContainerState.COMPLETE, 60);\r\n    List<ContainerId> containerIds = new ArrayList<ContainerId>();\r\n    containerIds.add(cId);\r\n    GetContainerStatusesRequest gcsRequest = GetContainerStatusesRequest.newInstance(containerIds);\r\n    ContainerStatus containerStatus = containerManager.getContainerStatuses(gcsRequest).getContainerStatuses().get(0);\r\n    Assert.assertEquals(ContainerExitStatus.KILLED_EXCEEDED_VMEM, containerStatus.getExitStatus());\r\n    String expectedMsgPattern = \"Container \\\\[pid=\" + pid + \",containerID=\" + cId + \"\\\\] is running \" + \"[0-9]+B beyond the 'VIRTUAL' memory limit. Current usage: \" + \"[0-9.]+ ?[KMGTPE]?B of [0-9.]+ ?[KMGTPE]?B physical memory used; \" + \"[0-9.]+ ?[KMGTPE]?B of [0-9.]+ ?[KMGTPE]?B virtual memory used. \" + \"Killing container.\\nDump of the process-tree for \" + cId + \" :\\n\";\r\n    Pattern pat = Pattern.compile(expectedMsgPattern);\r\n    Assert.assertEquals(\"Expected message pattern is: \" + expectedMsgPattern + \"\\n\\nObserved message is: \" + containerStatus.getDiagnostics(), true, pat.matcher(containerStatus.getDiagnostics()).find());\r\n    Assert.assertFalse(\"Process is still alive!\", exec.signalContainer(new ContainerSignalContext.Builder().setUser(user).setPid(pid).setSignal(Signal.NULL).build()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "testContainerKillOnExcessLogDirectory",
  "errType" : null,
  "containingMethodsNum" : 42,
  "sourceCodeText" : "void testContainerKillOnExcessLogDirectory() throws Exception\n{\r\n    final String user = \"someuser\";\r\n    ApplicationId appId = ApplicationId.newInstance(1, 1);\r\n    ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId cid = ContainerId.newContainerId(attemptId, 1);\r\n    Application app = mock(Application.class);\r\n    doReturn(user).when(app).getUser();\r\n    doReturn(appId).when(app).getAppId();\r\n    Container container = mock(Container.class);\r\n    doReturn(cid).when(container).getContainerId();\r\n    doReturn(user).when(container).getUser();\r\n    File containerLogDir = new File(new File(localLogDir, appId.toString()), cid.toString());\r\n    containerLogDir.mkdirs();\r\n    LocalDirsHandlerService mockDirsHandler = mock(LocalDirsHandlerService.class);\r\n    doReturn(Collections.singletonList(localLogDir.getAbsolutePath())).when(mockDirsHandler).getLogDirsForRead();\r\n    Context ctx = new NMContext(context.getContainerTokenSecretManager(), context.getNMTokenSecretManager(), mockDirsHandler, context.getApplicationACLsManager(), context.getNMStateStore(), false, conf);\r\n    Configuration monitorConf = new Configuration(conf);\r\n    monitorConf.setBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED, false);\r\n    monitorConf.setBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED, false);\r\n    monitorConf.setBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE, false);\r\n    monitorConf.setBoolean(YarnConfiguration.NM_CONTAINER_LOG_MONITOR_ENABLED, true);\r\n    monitorConf.setLong(YarnConfiguration.NM_CONTAINER_LOG_DIR_SIZE_LIMIT_BYTES, 10);\r\n    monitorConf.setLong(YarnConfiguration.NM_CONTAINER_LOG_TOTAL_SIZE_LIMIT_BYTES, 10000000);\r\n    monitorConf.setLong(YarnConfiguration.NM_CONTAINER_LOG_MON_INTERVAL_MS, 10);\r\n    EventHandler mockHandler = mock(EventHandler.class);\r\n    AsyncDispatcher mockDispatcher = mock(AsyncDispatcher.class);\r\n    doReturn(mockHandler).when(mockDispatcher).getEventHandler();\r\n    ContainersMonitor monitor = new ContainersMonitorImpl(mock(ContainerExecutor.class), mockDispatcher, ctx);\r\n    monitor.init(monitorConf);\r\n    monitor.start();\r\n    Event event;\r\n    try {\r\n        ctx.getApplications().put(appId, app);\r\n        ctx.getContainers().put(cid, container);\r\n        monitor.handle(new ContainerStartMonitoringEvent(cid, 1, 1, 1, 0, 0));\r\n        PrintWriter fileWriter = new PrintWriter(new File(containerLogDir, \"log\"));\r\n        fileWriter.write(\"This container is logging too much.\");\r\n        fileWriter.close();\r\n        ArgumentCaptor<Event> captor = ArgumentCaptor.forClass(Event.class);\r\n        verify(mockHandler, timeout(10000)).handle(captor.capture());\r\n        event = captor.getValue();\r\n    } finally {\r\n        monitor.stop();\r\n    }\r\n    assertTrue(\"Expected a kill event\", event instanceof ContainerKillEvent);\r\n    ContainerKillEvent cke = (ContainerKillEvent) event;\r\n    assertEquals(\"Unexpected container exit status\", ContainerExitStatus.KILLED_FOR_EXCESS_LOGS, cke.getContainerExitStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "testContainerKillOnExcessTotalLogs",
  "errType" : null,
  "containingMethodsNum" : 52,
  "sourceCodeText" : "void testContainerKillOnExcessTotalLogs() throws Exception\n{\r\n    final String user = \"someuser\";\r\n    ApplicationId appId = ApplicationId.newInstance(1, 1);\r\n    ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId cid = ContainerId.newContainerId(attemptId, 1);\r\n    Application app = mock(Application.class);\r\n    doReturn(user).when(app).getUser();\r\n    doReturn(appId).when(app).getAppId();\r\n    Container container = mock(Container.class);\r\n    doReturn(cid).when(container).getContainerId();\r\n    doReturn(user).when(container).getUser();\r\n    File logDir1 = new File(localLogDir, \"dir1\");\r\n    File logDir2 = new File(localLogDir, \"dir2\");\r\n    List<String> logDirs = new ArrayList<>();\r\n    logDirs.add(logDir1.getAbsolutePath());\r\n    logDirs.add(logDir2.getAbsolutePath());\r\n    LocalDirsHandlerService mockDirsHandler = mock(LocalDirsHandlerService.class);\r\n    doReturn(logDirs).when(mockDirsHandler).getLogDirsForRead();\r\n    Context ctx = new NMContext(context.getContainerTokenSecretManager(), context.getNMTokenSecretManager(), mockDirsHandler, context.getApplicationACLsManager(), context.getNMStateStore(), false, conf);\r\n    File clogDir1 = new File(new File(logDir1, appId.toString()), cid.toString());\r\n    clogDir1.mkdirs();\r\n    File clogDir2 = new File(new File(logDir2, appId.toString()), cid.toString());\r\n    clogDir2.mkdirs();\r\n    Configuration monitorConf = new Configuration(conf);\r\n    monitorConf.setBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED, false);\r\n    monitorConf.setBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED, false);\r\n    monitorConf.setBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE, false);\r\n    monitorConf.setBoolean(YarnConfiguration.NM_CONTAINER_LOG_MONITOR_ENABLED, true);\r\n    monitorConf.setLong(YarnConfiguration.NM_CONTAINER_LOG_DIR_SIZE_LIMIT_BYTES, 100000);\r\n    monitorConf.setLong(YarnConfiguration.NM_CONTAINER_LOG_TOTAL_SIZE_LIMIT_BYTES, 15);\r\n    monitorConf.setLong(YarnConfiguration.NM_CONTAINER_LOG_MON_INTERVAL_MS, 10);\r\n    monitorConf.set(YarnConfiguration.NM_LOG_DIRS, logDir1.getAbsolutePath() + \",\" + logDir2.getAbsolutePath());\r\n    EventHandler mockHandler = mock(EventHandler.class);\r\n    AsyncDispatcher mockDispatcher = mock(AsyncDispatcher.class);\r\n    doReturn(mockHandler).when(mockDispatcher).getEventHandler();\r\n    ContainersMonitor monitor = new ContainersMonitorImpl(mock(ContainerExecutor.class), mockDispatcher, ctx);\r\n    monitor.init(monitorConf);\r\n    monitor.start();\r\n    Event event;\r\n    try {\r\n        ctx.getApplications().put(appId, app);\r\n        ctx.getContainers().put(cid, container);\r\n        monitor.handle(new ContainerStartMonitoringEvent(cid, 1, 1, 1, 0, 0));\r\n        PrintWriter fileWriter = new PrintWriter(new File(clogDir1, \"log\"));\r\n        fileWriter.write(\"0123456789\");\r\n        fileWriter.close();\r\n        Thread.sleep(1000);\r\n        verify(mockHandler, never()).handle(any(Event.class));\r\n        fileWriter = new PrintWriter(new File(clogDir2, \"log\"));\r\n        fileWriter.write(\"0123456789\");\r\n        fileWriter.close();\r\n        ArgumentCaptor<Event> captor = ArgumentCaptor.forClass(Event.class);\r\n        verify(mockHandler, timeout(10000)).handle(captor.capture());\r\n        event = captor.getValue();\r\n    } finally {\r\n        monitor.stop();\r\n    }\r\n    assertTrue(\"Expected a kill event\", event instanceof ContainerKillEvent);\r\n    ContainerKillEvent cke = (ContainerKillEvent) event;\r\n    assertEquals(\"Unexpected container exit status\", ContainerExitStatus.KILLED_FOR_EXCESS_LOGS, cke.getContainerExitStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "testContainerMonitorMemFlags",
  "errType" : null,
  "containingMethodsNum" : 32,
  "sourceCodeText" : "void testContainerMonitorMemFlags()\n{\r\n    ContainersMonitor cm = null;\r\n    long expPmem = 8192 * 1024 * 1024l;\r\n    long expVmem = (long) (expPmem * 2.1f);\r\n    cm = new ContainersMonitorImpl(mock(ContainerExecutor.class), mock(AsyncDispatcher.class), mock(Context.class));\r\n    cm.init(getConfForCM(false, false, 8192, 2.1f));\r\n    assertEquals(expPmem, cm.getPmemAllocatedForContainers());\r\n    assertEquals(expVmem, cm.getVmemAllocatedForContainers());\r\n    assertEquals(false, cm.isPmemCheckEnabled());\r\n    assertEquals(false, cm.isVmemCheckEnabled());\r\n    cm = new ContainersMonitorImpl(mock(ContainerExecutor.class), mock(AsyncDispatcher.class), mock(Context.class));\r\n    cm.init(getConfForCM(true, false, 8192, 2.1f));\r\n    assertEquals(expPmem, cm.getPmemAllocatedForContainers());\r\n    assertEquals(expVmem, cm.getVmemAllocatedForContainers());\r\n    assertEquals(true, cm.isPmemCheckEnabled());\r\n    assertEquals(false, cm.isVmemCheckEnabled());\r\n    cm = new ContainersMonitorImpl(mock(ContainerExecutor.class), mock(AsyncDispatcher.class), mock(Context.class));\r\n    cm.init(getConfForCM(true, true, 8192, 2.1f));\r\n    assertEquals(expPmem, cm.getPmemAllocatedForContainers());\r\n    assertEquals(expVmem, cm.getVmemAllocatedForContainers());\r\n    assertEquals(true, cm.isPmemCheckEnabled());\r\n    assertEquals(true, cm.isVmemCheckEnabled());\r\n    cm = new ContainersMonitorImpl(mock(ContainerExecutor.class), mock(AsyncDispatcher.class), mock(Context.class));\r\n    cm.init(getConfForCM(false, true, 8192, 2.1f));\r\n    assertEquals(expPmem, cm.getPmemAllocatedForContainers());\r\n    assertEquals(expVmem, cm.getVmemAllocatedForContainers());\r\n    assertEquals(false, cm.isPmemCheckEnabled());\r\n    assertEquals(true, cm.isVmemCheckEnabled());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getConfForCM",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "YarnConfiguration getConfForCM(boolean pMemEnabled, boolean vMemEnabled, int nmPmem, float vMemToPMemRatio)\n{\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.setInt(YarnConfiguration.NM_PMEM_MB, nmPmem);\r\n    conf.setBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED, pMemEnabled);\r\n    conf.setBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED, vMemEnabled);\r\n    conf.setFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO, vMemToPMemRatio);\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    this.conf = new YarnConfiguration();\r\n    ResourceUtils.resetResourceTypes();\r\n    String resourceTypesFile = \"resource-types-pluggable-devices.xml\";\r\n    this.tempResourceTypesFile = TestResourceUtils.setupResourceTypes(this.conf, resourceTypesFile);\r\n    mockCGroupsHandler = mock(CGroupsHandler.class);\r\n    mockPrivilegedExecutor = mock(PrivilegedOperationExecutor.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDown() throws IOException\n{\r\n    File dest = new File(this.tempResourceTypesFile);\r\n    if (dest.exists()) {\r\n        dest.delete();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "testBasicWorkflow",
  "errType" : null,
  "containingMethodsNum" : 68,
  "sourceCodeText" : "void testBasicWorkflow() throws YarnException, IOException\n{\r\n    NodeManager.NMContext context = mock(NodeManager.NMContext.class);\r\n    NMStateStoreService storeService = mock(NMStateStoreService.class);\r\n    when(context.getNMStateStore()).thenReturn(storeService);\r\n    when(context.getConf()).thenReturn(this.conf);\r\n    doNothing().when(storeService).storeAssignedResources(isA(Container.class), isA(String.class), isA(ArrayList.class));\r\n    DeviceMappingManager dmm = new DeviceMappingManager(context);\r\n    ResourcePluginManager rpm = mock(ResourcePluginManager.class);\r\n    when(rpm.getDeviceMappingManager()).thenReturn(dmm);\r\n    MyPlugin plugin = new MyPlugin();\r\n    MyPlugin spyPlugin = spy(plugin);\r\n    String resourceName = MyPlugin.RESOURCE_NAME;\r\n    DevicePluginAdapter adapter = new DevicePluginAdapter(resourceName, spyPlugin, dmm);\r\n    adapter.initialize(context);\r\n    ShellWrapper mockShellWrapper = mock(ShellWrapper.class);\r\n    when(mockShellWrapper.existFile(anyString())).thenReturn(true);\r\n    when(mockShellWrapper.getDeviceFileType(anyString())).thenReturn(\"c\");\r\n    DeviceResourceHandlerImpl drhl = new DeviceResourceHandlerImpl(resourceName, adapter, dmm, mockCGroupsHandler, mockPrivilegedExecutor, context, mockShellWrapper);\r\n    adapter.setDeviceResourceHandler(drhl);\r\n    adapter.getDeviceResourceHandler().bootstrap(conf);\r\n    verify(mockCGroupsHandler).initializeCGroupController(CGroupsHandler.CGroupController.DEVICES);\r\n    int size = dmm.getAvailableDevices(resourceName);\r\n    Assert.assertEquals(3, size);\r\n    Container c1 = mockContainerWithDeviceRequest(1, resourceName, 1, false);\r\n    adapter.getDeviceResourceHandler().preStart(c1);\r\n    Assert.assertEquals(2, dmm.getAvailableDevices(resourceName));\r\n    Assert.assertEquals(1, dmm.getAllUsedDevices().get(resourceName).size());\r\n    Assert.assertEquals(3, dmm.getAllAllowedDevices().get(resourceName).size());\r\n    Assert.assertEquals(1, dmm.getAllocatedDevices(resourceName, c1.getContainerId()).size());\r\n    verify(mockShellWrapper, times(2)).getDeviceFileType(anyString());\r\n    checkCgroupOperation(c1.getContainerId().toString(), 1, \"c-256:1-rwm,c-256:2-rwm\", \"256:0\");\r\n    adapter.getDeviceResourceHandler().postComplete(getContainerId(1));\r\n    Assert.assertEquals(3, dmm.getAvailableDevices(resourceName));\r\n    Assert.assertEquals(0, dmm.getAllUsedDevices().get(resourceName).size());\r\n    Assert.assertEquals(3, dmm.getAllAllowedDevices().get(resourceName).size());\r\n    verify(mockCGroupsHandler).deleteCGroup(CGroupsHandler.CGroupController.DEVICES, c1.getContainerId().toString());\r\n    Container c2 = mockContainerWithDeviceRequest(2, resourceName, 3, false);\r\n    reset(mockShellWrapper);\r\n    reset(mockCGroupsHandler);\r\n    reset(mockPrivilegedExecutor);\r\n    when(mockShellWrapper.existFile(anyString())).thenReturn(true);\r\n    when(mockShellWrapper.getDeviceFileType(anyString())).thenReturn(\"c\");\r\n    adapter.getDeviceResourceHandler().preStart(c2);\r\n    Assert.assertEquals(0, dmm.getAvailableDevices(resourceName));\r\n    Assert.assertEquals(3, dmm.getAllUsedDevices().get(resourceName).size());\r\n    Assert.assertEquals(3, dmm.getAllAllowedDevices().get(resourceName).size());\r\n    Assert.assertEquals(3, dmm.getAllocatedDevices(resourceName, c2.getContainerId()).size());\r\n    verify(mockShellWrapper, times(0)).getDeviceFileType(anyString());\r\n    verify(mockCGroupsHandler).createCGroup(CGroupsHandler.CGroupController.DEVICES, c2.getContainerId().toString());\r\n    checkCgroupOperation(c2.getContainerId().toString(), 1, null, \"256:0,256:1,256:2\");\r\n    adapter.getDeviceResourceHandler().postComplete(getContainerId(2));\r\n    Assert.assertEquals(3, dmm.getAvailableDevices(resourceName));\r\n    Assert.assertEquals(0, dmm.getAllUsedDevices().get(resourceName).size());\r\n    Assert.assertEquals(3, dmm.getAllAllowedDevices().get(resourceName).size());\r\n    verify(mockCGroupsHandler).deleteCGroup(CGroupsHandler.CGroupController.DEVICES, c2.getContainerId().toString());\r\n    Container c3 = mockContainerWithDeviceRequest(3, resourceName, 0, false);\r\n    reset(mockShellWrapper);\r\n    reset(mockCGroupsHandler);\r\n    reset(mockPrivilegedExecutor);\r\n    when(mockShellWrapper.existFile(anyString())).thenReturn(true);\r\n    when(mockShellWrapper.getDeviceFileType(anyString())).thenReturn(\"c\");\r\n    adapter.getDeviceResourceHandler().preStart(c3);\r\n    Assert.assertEquals(3, dmm.getAvailableDevices(resourceName));\r\n    Assert.assertEquals(0, dmm.getAllUsedDevices().get(resourceName).size());\r\n    Assert.assertEquals(3, dmm.getAllAllowedDevices().get(resourceName).size());\r\n    verify(mockShellWrapper, times(3)).getDeviceFileType(anyString());\r\n    verify(mockCGroupsHandler).createCGroup(CGroupsHandler.CGroupController.DEVICES, c3.getContainerId().toString());\r\n    checkCgroupOperation(c3.getContainerId().toString(), 1, \"c-256:0-rwm,c-256:1-rwm,c-256:2-rwm\", null);\r\n    adapter.getDeviceResourceHandler().postComplete(getContainerId(3));\r\n    Assert.assertEquals(3, dmm.getAvailableDevices(resourceName));\r\n    Assert.assertEquals(0, dmm.getAllUsedDevices().get(resourceName).size());\r\n    Assert.assertEquals(3, dmm.getAllAllowedDevices().get(resourceName).size());\r\n    Assert.assertEquals(0, dmm.getAllocatedDevices(resourceName, c3.getContainerId()).size());\r\n    verify(mockCGroupsHandler).deleteCGroup(CGroupsHandler.CGroupController.DEVICES, c3.getContainerId().toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "checkCgroupOperation",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void checkCgroupOperation(String cId, int invokeTimesOfPrivilegedExecutor, String excludedParam, String allowedParam) throws PrivilegedOperationException, ResourceHandlerException\n{\r\n    verify(mockCGroupsHandler).createCGroup(CGroupsHandler.CGroupController.DEVICES, cId);\r\n    ArgumentCaptor<PrivilegedOperation> args = ArgumentCaptor.forClass(PrivilegedOperation.class);\r\n    verify(mockPrivilegedExecutor, times(invokeTimesOfPrivilegedExecutor)).executePrivilegedOperation(args.capture(), eq(true));\r\n    Assert.assertEquals(PrivilegedOperation.OperationType.DEVICE, args.getValue().getOperationType());\r\n    List<String> expectedArgs = new ArrayList<>();\r\n    expectedArgs.add(DeviceResourceHandlerImpl.CONTAINER_ID_CLI_OPTION);\r\n    expectedArgs.add(cId);\r\n    if (excludedParam != null && !excludedParam.isEmpty()) {\r\n        expectedArgs.add(DeviceResourceHandlerImpl.EXCLUDED_DEVICES_CLI_OPTION);\r\n        expectedArgs.add(excludedParam);\r\n    }\r\n    if (allowedParam != null && !allowedParam.isEmpty()) {\r\n        expectedArgs.add(DeviceResourceHandlerImpl.ALLOWED_DEVICES_CLI_OPTION);\r\n        expectedArgs.add(allowedParam);\r\n    }\r\n    Assert.assertArrayEquals(expectedArgs.toArray(), args.getValue().getArguments().toArray());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "testDeviceResourceUpdaterImpl",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testDeviceResourceUpdaterImpl() throws YarnException\n{\r\n    Resource nodeResource = mock(Resource.class);\r\n    NodeManager.NMContext context = mock(NodeManager.NMContext.class);\r\n    MyPlugin plugin = new MyPlugin();\r\n    MyPlugin spyPlugin = spy(plugin);\r\n    String resourceName = MyPlugin.RESOURCE_NAME;\r\n    DeviceMappingManager dmm = new DeviceMappingManager(context);\r\n    DevicePluginAdapter adapter = new DevicePluginAdapter(resourceName, spyPlugin, dmm);\r\n    adapter.initialize(mock(Context.class));\r\n    adapter.getNodeResourceHandlerInstance().updateConfiguredResource(nodeResource);\r\n    verify(spyPlugin, times(1)).getDevices();\r\n    verify(nodeResource, times(1)).setResourceValue(resourceName, 3);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "testStoreDeviceSchedulerManagerState",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testStoreDeviceSchedulerManagerState() throws IOException, YarnException\n{\r\n    NodeManager.NMContext context = mock(NodeManager.NMContext.class);\r\n    NMStateStoreService realStoreService = new NMMemoryStateStoreService();\r\n    NMStateStoreService storeService = spy(realStoreService);\r\n    when(context.getNMStateStore()).thenReturn(storeService);\r\n    when(context.getConf()).thenReturn(this.conf);\r\n    doNothing().when(storeService).storeAssignedResources(isA(Container.class), isA(String.class), isA(ArrayList.class));\r\n    DeviceMappingManager dmm = new DeviceMappingManager(context);\r\n    ResourcePluginManager rpm = mock(ResourcePluginManager.class);\r\n    when(rpm.getDeviceMappingManager()).thenReturn(dmm);\r\n    MyPlugin plugin = new MyPlugin();\r\n    MyPlugin spyPlugin = spy(plugin);\r\n    String resourceName = MyPlugin.RESOURCE_NAME;\r\n    DevicePluginAdapter adapter = new DevicePluginAdapter(resourceName, spyPlugin, dmm);\r\n    adapter.initialize(context);\r\n    adapter.createResourceHandler(context, mockCGroupsHandler, mockPrivilegedExecutor);\r\n    adapter.getDeviceResourceHandler().bootstrap(conf);\r\n    Container c0 = mockContainerWithDeviceRequest(0, resourceName, 1, false);\r\n    adapter.getDeviceResourceHandler().preStart(c0);\r\n    verify(storeService).storeAssignedResources(c0, resourceName, Arrays.asList(Device.Builder.newInstance().setId(0).setDevPath(\"/dev/hdwA0\").setMajorNumber(256).setMinorNumber(0).setBusID(\"0000:80:00.0\").setHealthy(true).build()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "testRecoverDeviceSchedulerManagerState",
  "errType" : [ "ResourceHandlerException" ],
  "containingMethodsNum" : 35,
  "sourceCodeText" : "void testRecoverDeviceSchedulerManagerState() throws IOException, YarnException\n{\r\n    NodeManager.NMContext context = mock(NodeManager.NMContext.class);\r\n    NMStateStoreService realStoreService = new NMMemoryStateStoreService();\r\n    NMStateStoreService storeService = spy(realStoreService);\r\n    when(context.getNMStateStore()).thenReturn(storeService);\r\n    doNothing().when(storeService).storeAssignedResources(isA(Container.class), isA(String.class), isA(ArrayList.class));\r\n    DeviceMappingManager dmm = new DeviceMappingManager(context);\r\n    ResourcePluginManager rpm = mock(ResourcePluginManager.class);\r\n    when(rpm.getDeviceMappingManager()).thenReturn(dmm);\r\n    MyPlugin plugin = new MyPlugin();\r\n    MyPlugin spyPlugin = spy(plugin);\r\n    String resourceName = MyPlugin.RESOURCE_NAME;\r\n    DevicePluginAdapter adapter = new DevicePluginAdapter(resourceName, spyPlugin, dmm);\r\n    adapter.initialize(context);\r\n    adapter.createResourceHandler(context, mockCGroupsHandler, mockPrivilegedExecutor);\r\n    adapter.getDeviceResourceHandler().bootstrap(conf);\r\n    Assert.assertEquals(3, dmm.getAllAllowedDevices().get(resourceName).size());\r\n    Device storedDevice = Device.Builder.newInstance().setId(0).setDevPath(\"/dev/hdwA0\").setMajorNumber(256).setMinorNumber(0).setBusID(\"0000:80:00.0\").setHealthy(true).build();\r\n    ConcurrentHashMap<ContainerId, Container> runningContainersMap = new ConcurrentHashMap<>();\r\n    Container nmContainer = mock(Container.class);\r\n    ResourceMappings rmap = new ResourceMappings();\r\n    ResourceMappings.AssignedResources ar = new ResourceMappings.AssignedResources();\r\n    ar.updateAssignedResources(Arrays.asList(storedDevice));\r\n    rmap.addAssignedResources(resourceName, ar);\r\n    when(nmContainer.getResourceMappings()).thenReturn(rmap);\r\n    when(context.getContainers()).thenReturn(runningContainersMap);\r\n    runningContainersMap.put(getContainerId(0), nmContainer);\r\n    adapter.getDeviceResourceHandler().reacquireContainer(getContainerId(0));\r\n    Assert.assertEquals(3, dmm.getAllAllowedDevices().get(resourceName).size());\r\n    Assert.assertEquals(1, dmm.getAllUsedDevices().get(resourceName).size());\r\n    Assert.assertEquals(2, dmm.getAvailableDevices(resourceName));\r\n    Map<Device, ContainerId> used = dmm.getAllUsedDevices().get(resourceName);\r\n    Assert.assertTrue(used.keySet().contains(storedDevice));\r\n    nmContainer = mock(Container.class);\r\n    rmap = new ResourceMappings();\r\n    ar = new ResourceMappings.AssignedResources();\r\n    ar.updateAssignedResources(Arrays.asList(storedDevice));\r\n    rmap.addAssignedResources(resourceName, ar);\r\n    runningContainersMap.put(getContainerId(2), nmContainer);\r\n    boolean caughtException = false;\r\n    try {\r\n        adapter.getDeviceResourceHandler().reacquireContainer(getContainerId(1));\r\n    } catch (ResourceHandlerException e) {\r\n        caughtException = true;\r\n    }\r\n    Assert.assertTrue(\"Should fail since requested device is assigned already\", caughtException);\r\n    Assert.assertEquals(3, dmm.getAllAllowedDevices().get(resourceName).size());\r\n    Assert.assertEquals(1, dmm.getAllUsedDevices().get(resourceName).size());\r\n    Assert.assertEquals(2, dmm.getAvailableDevices(resourceName));\r\n    used = dmm.getAllUsedDevices().get(resourceName);\r\n    Assert.assertTrue(used.keySet().contains(storedDevice));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "testAssignedDeviceCleanupWhenStoreOpFails",
  "errType" : [ "ResourceHandlerException" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testAssignedDeviceCleanupWhenStoreOpFails() throws IOException, YarnException\n{\r\n    NodeManager.NMContext context = mock(NodeManager.NMContext.class);\r\n    NMStateStoreService realStoreService = new NMMemoryStateStoreService();\r\n    NMStateStoreService storeService = spy(realStoreService);\r\n    when(context.getConf()).thenReturn(this.conf);\r\n    when(context.getNMStateStore()).thenReturn(storeService);\r\n    doThrow(new IOException(\"Exception ...\")).when(storeService).storeAssignedResources(isA(Container.class), isA(String.class), isA(ArrayList.class));\r\n    DeviceMappingManager dmm = new DeviceMappingManager(context);\r\n    ResourcePluginManager rpm = mock(ResourcePluginManager.class);\r\n    when(rpm.getDeviceMappingManager()).thenReturn(dmm);\r\n    MyPlugin plugin = new MyPlugin();\r\n    MyPlugin spyPlugin = spy(plugin);\r\n    String resourceName = MyPlugin.RESOURCE_NAME;\r\n    DevicePluginAdapter adapter = new DevicePluginAdapter(resourceName, spyPlugin, dmm);\r\n    adapter.initialize(context);\r\n    adapter.createResourceHandler(context, mockCGroupsHandler, mockPrivilegedExecutor);\r\n    adapter.getDeviceResourceHandler().bootstrap(conf);\r\n    Container c0 = mockContainerWithDeviceRequest(0, resourceName, 1, false);\r\n    boolean exception = false;\r\n    try {\r\n        adapter.getDeviceResourceHandler().preStart(c0);\r\n    } catch (ResourceHandlerException e) {\r\n        exception = true;\r\n    }\r\n    Assert.assertTrue(\"Should throw exception in preStart\", exception);\r\n    Assert.assertEquals(3, dmm.getAllAllowedDevices().get(resourceName).size());\r\n    Assert.assertEquals(0, dmm.getAllUsedDevices().get(resourceName).size());\r\n    Assert.assertEquals(3, dmm.getAvailableDevices(resourceName));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "testPreferPluginScheduler",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testPreferPluginScheduler() throws IOException, YarnException\n{\r\n    NodeManager.NMContext context = mock(NodeManager.NMContext.class);\r\n    NMStateStoreService storeService = mock(NMStateStoreService.class);\r\n    when(context.getNMStateStore()).thenReturn(storeService);\r\n    when(context.getConf()).thenReturn(this.conf);\r\n    doNothing().when(storeService).storeAssignedResources(isA(Container.class), isA(String.class), isA(ArrayList.class));\r\n    DeviceMappingManager dmm = new DeviceMappingManager(context);\r\n    ResourcePluginManager rpm = mock(ResourcePluginManager.class);\r\n    when(rpm.getDeviceMappingManager()).thenReturn(dmm);\r\n    MyPlugin plugin = new MyPlugin();\r\n    MyPlugin spyPlugin = spy(plugin);\r\n    String resourceName = MyPlugin.RESOURCE_NAME;\r\n    dmm.getDevicePluginSchedulers().put(MyPlugin.RESOURCE_NAME, spyPlugin);\r\n    DevicePluginAdapter adapter = new DevicePluginAdapter(resourceName, spyPlugin, dmm);\r\n    adapter.initialize(context);\r\n    adapter.createResourceHandler(context, mockCGroupsHandler, mockPrivilegedExecutor);\r\n    adapter.getDeviceResourceHandler().bootstrap(conf);\r\n    int size = dmm.getAvailableDevices(resourceName);\r\n    Assert.assertEquals(3, size);\r\n    Container c1 = mockContainerWithDeviceRequest(0, resourceName, 1, false);\r\n    adapter.getDeviceResourceHandler().preStart(c1);\r\n    verify(spyPlugin, times(1)).allocateDevices(anySet(), anyInt(), anyMap());\r\n    Assert.assertEquals(2, dmm.getAvailableDevices(resourceName));\r\n    Assert.assertEquals(1, dmm.getAllUsedDevices().get(resourceName).size());\r\n    Assert.assertEquals(3, dmm.getAllAllowedDevices().get(resourceName).size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "mockContainerWithDeviceRequest",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "Container mockContainerWithDeviceRequest(int id, String resourceName, int numDeviceRequest, boolean dockerContainerEnabled)\n{\r\n    Container c = mock(Container.class);\r\n    when(c.getContainerId()).thenReturn(getContainerId(id));\r\n    Resource res = Resource.newInstance(1024, 1);\r\n    ResourceMappings resMapping = new ResourceMappings();\r\n    res.setResourceValue(resourceName, numDeviceRequest);\r\n    when(c.getResource()).thenReturn(res);\r\n    when(c.getResourceMappings()).thenReturn(resMapping);\r\n    ContainerLaunchContext clc = mock(ContainerLaunchContext.class);\r\n    Map<String, String> env = new HashMap<>();\r\n    if (dockerContainerEnabled) {\r\n        env.put(ContainerRuntimeConstants.ENV_CONTAINER_TYPE, ContainerRuntimeConstants.CONTAINER_RUNTIME_DOCKER);\r\n    }\r\n    when(clc.getEnvironment()).thenReturn(env);\r\n    when(c.getLaunchContext()).thenReturn(clc);\r\n    return c;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "testNMResourceInfoRESTAPI",
  "errType" : null,
  "containingMethodsNum" : 29,
  "sourceCodeText" : "void testNMResourceInfoRESTAPI() throws IOException, YarnException\n{\r\n    NodeManager.NMContext context = mock(NodeManager.NMContext.class);\r\n    NMStateStoreService storeService = mock(NMStateStoreService.class);\r\n    when(context.getNMStateStore()).thenReturn(storeService);\r\n    when(context.getConf()).thenReturn(this.conf);\r\n    doNothing().when(storeService).storeAssignedResources(isA(Container.class), isA(String.class), isA(ArrayList.class));\r\n    DeviceMappingManager dmm = new DeviceMappingManager(context);\r\n    ResourcePluginManager rpm = mock(ResourcePluginManager.class);\r\n    when(rpm.getDeviceMappingManager()).thenReturn(dmm);\r\n    MyPlugin plugin = new MyPlugin();\r\n    MyPlugin spyPlugin = spy(plugin);\r\n    String resourceName = MyPlugin.RESOURCE_NAME;\r\n    DevicePluginAdapter adapter = new DevicePluginAdapter(resourceName, spyPlugin, dmm);\r\n    adapter.initialize(context);\r\n    adapter.createResourceHandler(context, mockCGroupsHandler, mockPrivilegedExecutor);\r\n    adapter.getDeviceResourceHandler().bootstrap(conf);\r\n    int size = dmm.getAvailableDevices(resourceName);\r\n    Assert.assertEquals(3, size);\r\n    Container c1 = mockContainerWithDeviceRequest(0, resourceName, 1, false);\r\n    adapter.getDeviceResourceHandler().preStart(c1);\r\n    Assert.assertEquals(2, dmm.getAvailableDevices(resourceName));\r\n    Assert.assertEquals(1, dmm.getAllUsedDevices().get(resourceName).size());\r\n    Assert.assertEquals(3, dmm.getAllAllowedDevices().get(resourceName).size());\r\n    NMDeviceResourceInfo response = (NMDeviceResourceInfo) adapter.getNMResourceInfo();\r\n    Assert.assertEquals(1, response.getAssignedDevices().size());\r\n    Assert.assertEquals(3, response.getTotalDevices().size());\r\n    Device device = response.getAssignedDevices().get(0).getDevice();\r\n    String cId = response.getAssignedDevices().get(0).getContainerId();\r\n    Assert.assertTrue(dmm.getAllAllowedDevices().get(resourceName).contains(device));\r\n    Assert.assertTrue(dmm.getAllUsedDevices().get(resourceName).containsValue(ContainerId.fromString(cId)));\r\n    adapter.getDeviceResourceHandler().postComplete(getContainerId(0));\r\n    response = (NMDeviceResourceInfo) adapter.getNMResourceInfo();\r\n    Assert.assertEquals(0, response.getAssignedDevices().size());\r\n    Assert.assertEquals(3, response.getTotalDevices().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "testDeviceResourceDockerRuntimePlugin1",
  "errType" : null,
  "containingMethodsNum" : 42,
  "sourceCodeText" : "void testDeviceResourceDockerRuntimePlugin1() throws Exception\n{\r\n    NodeManager.NMContext context = mock(NodeManager.NMContext.class);\r\n    NMStateStoreService storeService = mock(NMStateStoreService.class);\r\n    when(context.getNMStateStore()).thenReturn(storeService);\r\n    when(context.getConf()).thenReturn(this.conf);\r\n    doNothing().when(storeService).storeAssignedResources(isA(Container.class), isA(String.class), isA(ArrayList.class));\r\n    DeviceMappingManager dmm = new DeviceMappingManager(context);\r\n    DeviceMappingManager spyDmm = spy(dmm);\r\n    ResourcePluginManager rpm = mock(ResourcePluginManager.class);\r\n    when(rpm.getDeviceMappingManager()).thenReturn(spyDmm);\r\n    MyPlugin plugin = new MyPlugin();\r\n    MyPlugin spyPlugin = spy(plugin);\r\n    String resourceName = MyPlugin.RESOURCE_NAME;\r\n    DevicePluginAdapter adapter = new DevicePluginAdapter(resourceName, spyPlugin, spyDmm);\r\n    adapter.initialize(context);\r\n    adapter.initialize(context);\r\n    adapter.createResourceHandler(context, mockCGroupsHandler, mockPrivilegedExecutor);\r\n    adapter.getDeviceResourceHandler().bootstrap(conf);\r\n    Container c1 = mockContainerWithDeviceRequest(1, resourceName, 1, true);\r\n    spyPlugin.setDevicePluginVersion(\"v1\");\r\n    adapter.getDeviceResourceHandler().preStart(c1);\r\n    Set<Device> allocatedDevice = spyDmm.getAllocatedDevices(resourceName, c1.getContainerId());\r\n    reset(spyDmm);\r\n    verify(mockCGroupsHandler).createCGroup(CGroupsHandler.CGroupController.DEVICES, c1.getContainerId().toString());\r\n    verify(mockPrivilegedExecutor, times(0)).executePrivilegedOperation(any(PrivilegedOperation.class), anyBoolean());\r\n    DockerCommandPlugin dcp = adapter.getDockerCommandPluginInstance();\r\n    DockerVolumeCommand dvc = dcp.getCreateDockerVolumeCommand(c1);\r\n    verify(spyDmm).getAllocatedDevices(resourceName, c1.getContainerId());\r\n    verify(spyPlugin).onDevicesAllocated(allocatedDevice, YarnRuntimeType.RUNTIME_DEFAULT);\r\n    verify(spyPlugin).onDevicesAllocated(allocatedDevice, YarnRuntimeType.RUNTIME_DOCKER);\r\n    Assert.assertEquals(\"nvidia-docker\", dvc.getDriverName());\r\n    Assert.assertEquals(\"create\", dvc.getSubCommand());\r\n    Assert.assertEquals(\"nvidia_driver_352.68\", dvc.getVolumeName());\r\n    DockerRunCommand drc = new DockerRunCommand(c1.getContainerId().toString(), \"user\", \"image/tensorflow\");\r\n    reset(spyPlugin);\r\n    reset(spyDmm);\r\n    dcp.updateDockerRunCommand(drc, c1);\r\n    verify(spyPlugin, times(0)).onDevicesAllocated(allocatedDevice, YarnRuntimeType.RUNTIME_DOCKER);\r\n    verify(spyDmm, times(0)).getAllocatedDevices(resourceName, c1.getContainerId());\r\n    String runStr = drc.toString();\r\n    Assert.assertTrue(runStr.contains(\"nvidia_driver_352.68:/usr/local/nvidia:ro\"));\r\n    Assert.assertTrue(runStr.contains(\"/dev/hdwA0:/dev/hdwA0\"));\r\n    dcp.getCleanupDockerVolumesCommand(c1);\r\n    verify(spyPlugin).onDevicesReleased(allocatedDevice);\r\n    dcp.getCreateDockerVolumeCommand(c1);\r\n    verify(spyDmm).getAllocatedDevices(resourceName, c1.getContainerId());\r\n    verify(spyPlugin).onDevicesAllocated(allocatedDevice, YarnRuntimeType.RUNTIME_DOCKER);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "testDeviceResourceDockerRuntimePlugin2",
  "errType" : null,
  "containingMethodsNum" : 39,
  "sourceCodeText" : "void testDeviceResourceDockerRuntimePlugin2() throws Exception\n{\r\n    NodeManager.NMContext context = mock(NodeManager.NMContext.class);\r\n    NMStateStoreService storeService = mock(NMStateStoreService.class);\r\n    when(context.getNMStateStore()).thenReturn(storeService);\r\n    when(context.getConf()).thenReturn(this.conf);\r\n    doNothing().when(storeService).storeAssignedResources(isA(Container.class), isA(String.class), isA(ArrayList.class));\r\n    DeviceMappingManager dmm = new DeviceMappingManager(context);\r\n    DeviceMappingManager spyDmm = spy(dmm);\r\n    ResourcePluginManager rpm = mock(ResourcePluginManager.class);\r\n    when(rpm.getDeviceMappingManager()).thenReturn(spyDmm);\r\n    MyPlugin plugin = new MyPlugin();\r\n    MyPlugin spyPlugin = spy(plugin);\r\n    String resourceName = MyPlugin.RESOURCE_NAME;\r\n    DevicePluginAdapter adapter = new DevicePluginAdapter(resourceName, spyPlugin, spyDmm);\r\n    adapter.initialize(context);\r\n    adapter.initialize(context);\r\n    adapter.createResourceHandler(context, mockCGroupsHandler, mockPrivilegedExecutor);\r\n    adapter.getDeviceResourceHandler().bootstrap(conf);\r\n    Container c1 = mockContainerWithDeviceRequest(1, resourceName, 2, true);\r\n    spyPlugin.setDevicePluginVersion(\"v2\");\r\n    adapter.getDeviceResourceHandler().preStart(c1);\r\n    Set<Device> allocatedDevice = spyDmm.getAllocatedDevices(resourceName, c1.getContainerId());\r\n    reset(spyDmm);\r\n    verify(mockCGroupsHandler).createCGroup(CGroupsHandler.CGroupController.DEVICES, c1.getContainerId().toString());\r\n    verify(mockPrivilegedExecutor, times(0)).executePrivilegedOperation(any(PrivilegedOperation.class), anyBoolean());\r\n    DockerCommandPlugin dcp = adapter.getDockerCommandPluginInstance();\r\n    DockerVolumeCommand dvc = dcp.getCreateDockerVolumeCommand(c1);\r\n    verify(spyDmm).getAllocatedDevices(resourceName, c1.getContainerId());\r\n    verify(spyPlugin).onDevicesAllocated(allocatedDevice, YarnRuntimeType.RUNTIME_DEFAULT);\r\n    verify(spyPlugin).onDevicesAllocated(allocatedDevice, YarnRuntimeType.RUNTIME_DOCKER);\r\n    Assert.assertNull(dvc);\r\n    DockerRunCommand drc = new DockerRunCommand(c1.getContainerId().toString(), \"user\", \"image/tensorflow\");\r\n    reset(spyPlugin);\r\n    reset(spyDmm);\r\n    dcp.updateDockerRunCommand(drc, c1);\r\n    verify(spyPlugin, times(0)).onDevicesAllocated(allocatedDevice, YarnRuntimeType.RUNTIME_DOCKER);\r\n    verify(spyDmm, times(0)).getAllocatedDevices(resourceName, c1.getContainerId());\r\n    Assert.assertEquals(\"0,1\", drc.getEnv().get(\"NVIDIA_VISIBLE_DEVICES\"));\r\n    Assert.assertTrue(drc.toString().contains(\"runtime=nvidia\"));\r\n    dcp.getCleanupDockerVolumesCommand(c1);\r\n    verify(spyPlugin).onDevicesReleased(allocatedDevice);\r\n    dcp.getCreateDockerVolumeCommand(c1);\r\n    verify(spyDmm).getAllocatedDevices(resourceName, c1.getContainerId());\r\n    verify(spyPlugin).onDevicesAllocated(allocatedDevice, YarnRuntimeType.RUNTIME_DOCKER);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerId getContainerId(int id)\n{\r\n    return ContainerId.newContainerId(ApplicationAttemptId.newInstance(ApplicationId.newInstance(1234L, 1), 1), id);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    super.setUp();\r\n    GuiceServletConfig.setInjector(Guice.createInjector(new WebServletModule()));\r\n    testRootDir.mkdirs();\r\n    testLogDir.mkdir();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "cleanup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void cleanup()\n{\r\n    FileUtil.fullyDelete(testRootDir);\r\n    FileUtil.fullyDelete(testLogDir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeContainersNone",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testNodeContainersNone() throws JSONException, Exception\n{\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON_TYPE + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    JSONObject json = response.getEntity(JSONObject.class);\r\n    assertEquals(\"apps isn't empty\", new JSONObject().toString(), json.get(\"containers\").toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "addAppContainers",
  "errType" : null,
  "containingMethodsNum" : 23,
  "sourceCodeText" : "HashMap<String, String> addAppContainers(Application app) throws IOException\n{\r\n    Dispatcher dispatcher = new AsyncDispatcher();\r\n    ApplicationAttemptId appAttemptId = BuilderUtils.newApplicationAttemptId(app.getAppId(), 1);\r\n    Container container1 = new MockContainer(appAttemptId, dispatcher, conf, app.getUser(), app.getAppId(), 1);\r\n    ((MockContainer) container1).setState(ContainerState.RUNNING);\r\n    Container container2 = new MockContainer(appAttemptId, dispatcher, conf, app.getUser(), app.getAppId(), 2);\r\n    ((MockContainer) container2).setState(ContainerState.RUNNING);\r\n    nmContext.getContainers().put(container1.getContainerId(), container1);\r\n    nmContext.getContainers().put(container2.getContainerId(), container2);\r\n    File appDir = new File(testLogDir + \"/\" + app.getAppId().toString());\r\n    appDir.mkdir();\r\n    File container1Dir = new File(appDir + \"/\" + container1.getContainerId().toString());\r\n    container1Dir.mkdir();\r\n    new File(container1Dir + \"/\" + \"syslog\").createNewFile();\r\n    new File(container1Dir + \"/\" + \"stdout\").createNewFile();\r\n    File container2Dir = new File(appDir + \"/\" + container2.getContainerId().toString());\r\n    container2Dir.mkdir();\r\n    new File(container2Dir + \"/\" + \"syslog\").createNewFile();\r\n    new File(container2Dir + \"/\" + \"stdout\").createNewFile();\r\n    app.getContainers().put(container1.getContainerId(), container1);\r\n    app.getContainers().put(container2.getContainerId(), container2);\r\n    HashMap<String, String> hash = new HashMap<String, String>();\r\n    hash.put(container1.getContainerId().toString(), container1.getContainerId().toString());\r\n    hash.put(container2.getContainerId().toString(), container2.getContainerId().toString());\r\n    return hash;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testNodeContainers() throws JSONException, Exception\n{\r\n    testNodeHelper(\"containers\", MediaType.APPLICATION_JSON);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeContainersSlash",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testNodeContainersSlash() throws JSONException, Exception\n{\r\n    testNodeHelper(\"containers/\", MediaType.APPLICATION_JSON);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeContainersDefault",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testNodeContainersDefault() throws JSONException, Exception\n{\r\n    testNodeHelper(\"containers/\", \"\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeHelper",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testNodeHelper(String path, String media) throws JSONException, Exception\n{\r\n    WebResource r = resource();\r\n    Application app = new MockApp(1);\r\n    nmContext.getApplications().put(app.getAppId(), app);\r\n    addAppContainers(app);\r\n    Application app2 = new MockApp(2);\r\n    nmContext.getApplications().put(app2.getAppId(), app2);\r\n    addAppContainers(app2);\r\n    client().addFilter(new LoggingFilter());\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"node\").path(path).accept(media).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON_TYPE + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    JSONObject json = response.getEntity(JSONObject.class);\r\n    JSONObject info = json.getJSONObject(\"containers\");\r\n    assertEquals(\"incorrect number of elements\", 1, info.length());\r\n    JSONArray conInfo = info.getJSONArray(\"container\");\r\n    assertEquals(\"incorrect number of elements\", 4, conInfo.length());\r\n    for (int i = 0; i < conInfo.length(); i++) {\r\n        verifyNodeContainerInfo(conInfo.getJSONObject(i), nmContext.getContainers().get(ContainerId.fromString(conInfo.getJSONObject(i).getString(\"id\"))));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeSingleContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testNodeSingleContainers() throws JSONException, Exception\n{\r\n    testNodeSingleContainersHelper(MediaType.APPLICATION_JSON);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeSingleContainersSlash",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testNodeSingleContainersSlash() throws JSONException, Exception\n{\r\n    testNodeSingleContainersHelper(MediaType.APPLICATION_JSON);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeSingleContainersDefault",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testNodeSingleContainersDefault() throws JSONException, Exception\n{\r\n    testNodeSingleContainersHelper(\"\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeSingleContainersHelper",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testNodeSingleContainersHelper(String media) throws JSONException, Exception\n{\r\n    WebResource r = resource();\r\n    Application app = new MockApp(1);\r\n    nmContext.getApplications().put(app.getAppId(), app);\r\n    HashMap<String, String> hash = addAppContainers(app);\r\n    Application app2 = new MockApp(2);\r\n    nmContext.getApplications().put(app2.getAppId(), app2);\r\n    addAppContainers(app2);\r\n    for (String id : hash.keySet()) {\r\n        ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\").path(id).accept(media).get(ClientResponse.class);\r\n        assertEquals(MediaType.APPLICATION_JSON_TYPE + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n        JSONObject json = response.getEntity(JSONObject.class);\r\n        verifyNodeContainerInfo(json.getJSONObject(\"container\"), nmContext.getContainers().get(ContainerId.fromString(id)));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testSingleContainerInvalid",
  "errType" : [ "UniformInterfaceException" ],
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testSingleContainerInvalid() throws JSONException, Exception\n{\r\n    WebResource r = resource();\r\n    Application app = new MockApp(1);\r\n    nmContext.getApplications().put(app.getAppId(), app);\r\n    addAppContainers(app);\r\n    Application app2 = new MockApp(2);\r\n    nmContext.getApplications().put(app2.getAppId(), app2);\r\n    addAppContainers(app2);\r\n    try {\r\n        r.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\").path(\"container_foo_1234\").accept(MediaType.APPLICATION_JSON).get(JSONObject.class);\r\n        fail(\"should have thrown exception on invalid user query\");\r\n    } catch (UniformInterfaceException ue) {\r\n        ClientResponse response = ue.getResponse();\r\n        assertResponseStatusCode(Status.BAD_REQUEST, response.getStatusInfo());\r\n        assertEquals(MediaType.APPLICATION_JSON_TYPE + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n        JSONObject msg = response.getEntity(JSONObject.class);\r\n        JSONObject exception = msg.getJSONObject(\"RemoteException\");\r\n        assertEquals(\"incorrect number of elements\", 3, exception.length());\r\n        String message = exception.getString(\"message\");\r\n        String type = exception.getString(\"exception\");\r\n        String classname = exception.getString(\"javaClassName\");\r\n        WebServicesTestUtils.checkStringMatch(\"exception message\", \"java.lang.Exception: invalid container id, container_foo_1234\", message);\r\n        WebServicesTestUtils.checkStringMatch(\"exception type\", \"BadRequestException\", type);\r\n        WebServicesTestUtils.checkStringMatch(\"exception classname\", \"org.apache.hadoop.yarn.webapp.BadRequestException\", classname);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testSingleContainerInvalid2",
  "errType" : [ "UniformInterfaceException" ],
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testSingleContainerInvalid2() throws JSONException, Exception\n{\r\n    WebResource r = resource();\r\n    Application app = new MockApp(1);\r\n    nmContext.getApplications().put(app.getAppId(), app);\r\n    addAppContainers(app);\r\n    Application app2 = new MockApp(2);\r\n    nmContext.getApplications().put(app2.getAppId(), app2);\r\n    addAppContainers(app2);\r\n    try {\r\n        r.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\").path(\"container_1234_0001\").accept(MediaType.APPLICATION_JSON).get(JSONObject.class);\r\n        fail(\"should have thrown exception on invalid user query\");\r\n    } catch (UniformInterfaceException ue) {\r\n        ClientResponse response = ue.getResponse();\r\n        assertResponseStatusCode(Status.BAD_REQUEST, response.getStatusInfo());\r\n        assertEquals(MediaType.APPLICATION_JSON_TYPE + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n        JSONObject msg = response.getEntity(JSONObject.class);\r\n        JSONObject exception = msg.getJSONObject(\"RemoteException\");\r\n        assertEquals(\"incorrect number of elements\", 3, exception.length());\r\n        String message = exception.getString(\"message\");\r\n        String type = exception.getString(\"exception\");\r\n        String classname = exception.getString(\"javaClassName\");\r\n        WebServicesTestUtils.checkStringMatch(\"exception message\", \"java.lang.Exception: invalid container id, container_1234_0001\", message);\r\n        WebServicesTestUtils.checkStringMatch(\"exception type\", \"BadRequestException\", type);\r\n        WebServicesTestUtils.checkStringMatch(\"exception classname\", \"org.apache.hadoop.yarn.webapp.BadRequestException\", classname);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testSingleContainerWrong",
  "errType" : [ "UniformInterfaceException" ],
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testSingleContainerWrong() throws JSONException, Exception\n{\r\n    WebResource r = resource();\r\n    Application app = new MockApp(1);\r\n    nmContext.getApplications().put(app.getAppId(), app);\r\n    addAppContainers(app);\r\n    Application app2 = new MockApp(2);\r\n    nmContext.getApplications().put(app2.getAppId(), app2);\r\n    addAppContainers(app2);\r\n    try {\r\n        r.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\").path(\"container_1234_0001_01_000005\").accept(MediaType.APPLICATION_JSON).get(JSONObject.class);\r\n        fail(\"should have thrown exception on invalid user query\");\r\n    } catch (UniformInterfaceException ue) {\r\n        ClientResponse response = ue.getResponse();\r\n        assertResponseStatusCode(Status.NOT_FOUND, response.getStatusInfo());\r\n        assertEquals(MediaType.APPLICATION_JSON_TYPE + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n        JSONObject msg = response.getEntity(JSONObject.class);\r\n        JSONObject exception = msg.getJSONObject(\"RemoteException\");\r\n        assertEquals(\"incorrect number of elements\", 3, exception.length());\r\n        String message = exception.getString(\"message\");\r\n        String type = exception.getString(\"exception\");\r\n        String classname = exception.getString(\"javaClassName\");\r\n        WebServicesTestUtils.checkStringMatch(\"exception message\", \"java.lang.Exception: container with id, container_1234_0001_01_000005, not found\", message);\r\n        WebServicesTestUtils.checkStringMatch(\"exception type\", \"NotFoundException\", type);\r\n        WebServicesTestUtils.checkStringMatch(\"exception classname\", \"org.apache.hadoop.yarn.webapp.NotFoundException\", classname);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeSingleContainerXML",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testNodeSingleContainerXML() throws JSONException, Exception\n{\r\n    WebResource r = resource();\r\n    Application app = new MockApp(1);\r\n    nmContext.getApplications().put(app.getAppId(), app);\r\n    HashMap<String, String> hash = addAppContainers(app);\r\n    Application app2 = new MockApp(2);\r\n    nmContext.getApplications().put(app2.getAppId(), app2);\r\n    addAppContainers(app2);\r\n    client().addFilter(new LoggingFilter(System.out));\r\n    for (String id : hash.keySet()) {\r\n        ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\").path(id).accept(MediaType.APPLICATION_XML).get(ClientResponse.class);\r\n        assertEquals(MediaType.APPLICATION_XML_TYPE + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n        String xml = response.getEntity(String.class);\r\n        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\r\n        DocumentBuilder db = dbf.newDocumentBuilder();\r\n        InputSource is = new InputSource();\r\n        is.setCharacterStream(new StringReader(xml));\r\n        Document dom = db.parse(is);\r\n        NodeList nodes = dom.getElementsByTagName(\"container\");\r\n        assertEquals(\"incorrect number of elements\", 1, nodes.getLength());\r\n        verifyContainersInfoXML(nodes, nmContext.getContainers().get(ContainerId.fromString(id)));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeContainerXML",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testNodeContainerXML() throws JSONException, Exception\n{\r\n    WebResource r = resource();\r\n    Application app = new MockApp(1);\r\n    nmContext.getApplications().put(app.getAppId(), app);\r\n    addAppContainers(app);\r\n    Application app2 = new MockApp(2);\r\n    nmContext.getApplications().put(app2.getAppId(), app2);\r\n    addAppContainers(app2);\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\").accept(MediaType.APPLICATION_XML).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_XML_TYPE + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    String xml = response.getEntity(String.class);\r\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\r\n    DocumentBuilder db = dbf.newDocumentBuilder();\r\n    InputSource is = new InputSource();\r\n    is.setCharacterStream(new StringReader(xml));\r\n    Document dom = db.parse(is);\r\n    NodeList nodes = dom.getElementsByTagName(\"container\");\r\n    assertEquals(\"incorrect number of elements\", 4, nodes.getLength());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "verifyContainersInfoXML",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void verifyContainersInfoXML(NodeList nodes, Container cont) throws JSONException, Exception\n{\r\n    for (int i = 0; i < nodes.getLength(); i++) {\r\n        Element element = (Element) nodes.item(i);\r\n        verifyNodeContainerInfoGeneric(cont, WebServicesTestUtils.getXmlString(element, \"id\"), WebServicesTestUtils.getXmlString(element, \"state\"), WebServicesTestUtils.getXmlString(element, \"user\"), WebServicesTestUtils.getXmlInt(element, \"exitCode\"), WebServicesTestUtils.getXmlString(element, \"diagnostics\"), WebServicesTestUtils.getXmlString(element, \"nodeId\"), WebServicesTestUtils.getXmlInt(element, \"totalMemoryNeededMB\"), WebServicesTestUtils.getXmlInt(element, \"totalVCoresNeeded\"), WebServicesTestUtils.getXmlString(element, \"containerLogsLink\"));\r\n        List<String> containerLogFiles = WebServicesTestUtils.getXmlStrings(element, \"containerLogFiles\");\r\n        assertFalse(\"containerLogFiles missing\", containerLogFiles.isEmpty());\r\n        assertEquals(2, containerLogFiles.size());\r\n        assertTrue(\"syslog and stdout expected\", containerLogFiles.contains(\"syslog\") && containerLogFiles.contains(\"stdout\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "verifyNodeContainerInfo",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void verifyNodeContainerInfo(JSONObject info, Container cont) throws JSONException, Exception\n{\r\n    assertEquals(\"incorrect number of elements\", 11, info.length());\r\n    verifyNodeContainerInfoGeneric(cont, info.getString(\"id\"), info.getString(\"state\"), info.getString(\"user\"), info.getInt(\"exitCode\"), info.getString(\"diagnostics\"), info.getString(\"nodeId\"), info.getInt(\"totalMemoryNeededMB\"), info.getInt(\"totalVCoresNeeded\"), info.getString(\"containerLogsLink\"));\r\n    JSONArray containerLogFilesArr = info.getJSONArray(\"containerLogFiles\");\r\n    assertTrue(\"containerLogFiles missing\", containerLogFilesArr != null);\r\n    assertEquals(2, containerLogFilesArr.length());\r\n    for (int i = 0; i < 2; i++) {\r\n        assertTrue(\"syslog and stdout expected\", containerLogFilesArr.get(i).equals(\"syslog\") || containerLogFilesArr.get(i).equals(\"stdout\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "verifyNodeContainerInfoGeneric",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void verifyNodeContainerInfoGeneric(Container cont, String id, String state, String user, int exitCode, String diagnostics, String nodeId, int totalMemoryNeededMB, int totalVCoresNeeded, String logsLink) throws JSONException, Exception\n{\r\n    WebServicesTestUtils.checkStringMatch(\"id\", cont.getContainerId().toString(), id);\r\n    WebServicesTestUtils.checkStringMatch(\"state\", cont.getContainerState().toString(), state);\r\n    WebServicesTestUtils.checkStringMatch(\"user\", cont.getUser().toString(), user);\r\n    assertEquals(\"exitCode wrong\", 0, exitCode);\r\n    WebServicesTestUtils.checkStringMatch(\"diagnostics\", \"testing\", diagnostics);\r\n    WebServicesTestUtils.checkStringMatch(\"nodeId\", nmContext.getNodeId().toString(), nodeId);\r\n    assertEquals(\"totalMemoryNeededMB wrong\", YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB, totalMemoryNeededMB);\r\n    assertEquals(\"totalVCoresNeeded wrong\", YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES, totalVCoresNeeded);\r\n    String shortLink = ujoin(\"containerlogs\", cont.getContainerId().toString(), cont.getUser());\r\n    assertTrue(\"containerLogsLink wrong\", logsLink.contains(shortLink));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setup() throws IOException\n{\r\n    conf.set(YarnConfiguration.NM_MON_RESOURCE_CALCULATOR, MockResourceCalculatorPlugin.class.getCanonicalName());\r\n    super.setup();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testMetricsUpdate",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testMetricsUpdate() throws Exception\n{\r\n    Context spyContext = spy(context);\r\n    NodeResourceMonitor nrm = new NodeResourceMonitorImpl(spyContext);\r\n    nrm.init(conf);\r\n    nrm.start();\r\n    Mockito.verify(spyContext, timeout(500).atLeastOnce()).getNodeManagerMetrics();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "create",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void create()\n{\r\n    testRootDir.mkdirs();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setup()\n{\r\n    nodeAttributesProvider = new ConfigurationNodeAttributesProvider();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    if (nodeAttributesProvider != null) {\r\n        nodeAttributesProvider.close();\r\n        nodeAttributesProvider.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "remove",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void remove() throws Exception\n{\r\n    if (testRootDir.exists()) {\r\n        FileContext.getLocalFSFileContext().delete(new Path(testRootDir.getAbsolutePath()), true);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "testNodeAttributesFetchInterval",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testNodeAttributesFetchInterval() throws IOException, InterruptedException\n{\r\n    Set<NodeAttribute> expectedAttributes1 = new HashSet<>();\r\n    expectedAttributes1.add(NodeAttribute.newInstance(\"test.io\", \"host\", NodeAttributeType.STRING, \"host1\"));\r\n    Configuration conf = new Configuration();\r\n    conf.setLong(YarnConfiguration.NM_NODE_ATTRIBUTES_PROVIDER_FETCH_INTERVAL_MS, 1000);\r\n    ConfigurationNodeAttributesProvider spyProvider = Mockito.spy(nodeAttributesProvider);\r\n    Mockito.when(spyProvider.parseAttributes(Mockito.any())).thenReturn(expectedAttributes1);\r\n    spyProvider.init(conf);\r\n    spyProvider.start();\r\n    Assert.assertEquals(expectedAttributes1, spyProvider.getDescriptors());\r\n    Set<NodeAttribute> expectedAttributes2 = new HashSet<>();\r\n    expectedAttributes2.add(NodeAttribute.newInstance(\"test.io\", \"os\", NodeAttributeType.STRING, \"windows\"));\r\n    Mockito.when(spyProvider.parseAttributes(Mockito.any())).thenReturn(expectedAttributes2);\r\n    ArrayList<String> keysMet = new ArrayList<>();\r\n    int numOfOldValue = 0;\r\n    int numOfNewValue = 0;\r\n    int times = 5;\r\n    while (times > 0) {\r\n        Set<NodeAttribute> current = spyProvider.getDescriptors();\r\n        Assert.assertEquals(1, current.size());\r\n        String attributeName = current.iterator().next().getAttributeKey().getAttributeName();\r\n        if (\"host\".equals(attributeName)) {\r\n            numOfOldValue++;\r\n        } else if (\"os\".equals(attributeName)) {\r\n            numOfNewValue++;\r\n        }\r\n        Thread.sleep(500);\r\n        times--;\r\n    }\r\n    Assert.assertEquals(5, numOfNewValue + numOfOldValue);\r\n    Assert.assertTrue(numOfOldValue > 0);\r\n    Assert.assertTrue(numOfNewValue > 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "testDisableFetchNodeAttributes",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testDisableFetchNodeAttributes() throws IOException, InterruptedException\n{\r\n    Set<NodeAttribute> expectedAttributes1 = new HashSet<>();\r\n    expectedAttributes1.add(NodeAttribute.newInstance(\"test.io\", \"host\", NodeAttributeType.STRING, \"host1\"));\r\n    Configuration conf = new Configuration();\r\n    conf.setLong(YarnConfiguration.NM_NODE_ATTRIBUTES_PROVIDER_FETCH_INTERVAL_MS, -1);\r\n    ConfigurationNodeAttributesProvider spyProvider = Mockito.spy(nodeAttributesProvider);\r\n    Mockito.when(spyProvider.parseAttributes(Mockito.any())).thenReturn(expectedAttributes1);\r\n    spyProvider.init(conf);\r\n    spyProvider.start();\r\n    Assert.assertEquals(expectedAttributes1, spyProvider.getDescriptors());\r\n    Set<NodeAttribute> expectedAttributes2 = new HashSet<>();\r\n    expectedAttributes2.add(NodeAttribute.newInstance(\"test.io\", \"os\", NodeAttributeType.STRING, \"windows\"));\r\n    Mockito.when(spyProvider.parseAttributes(Mockito.anyString())).thenReturn(expectedAttributes2);\r\n    try {\r\n        GenericTestUtils.waitFor(() -> {\r\n            Set<NodeAttribute> attributes = spyProvider.getDescriptors();\r\n            return \"os\".equalsIgnoreCase(attributes.iterator().next().getAttributeKey().getAttributeName());\r\n        }, 500, 1000);\r\n    } catch (Exception e) {\r\n        Assert.assertTrue(e instanceof TimeoutException);\r\n        return;\r\n    }\r\n    Assert.fail(\"Expecting a failure in previous check!\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "testFetchAttributesFromConfiguration",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testFetchAttributesFromConfiguration()\n{\r\n    Configuration conf = new Configuration();\r\n    conf.setLong(YarnConfiguration.NM_NODE_ATTRIBUTES_PROVIDER_FETCH_INTERVAL_MS, -1);\r\n    conf.setStrings(YarnConfiguration.NM_PROVIDER_CONFIGURED_NODE_ATTRIBUTES, \"\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "testParseConfiguration",
  "errType" : [ "IOException", "IOException", "IOException" ],
  "containingMethodsNum" : 30,
  "sourceCodeText" : "void testParseConfiguration() throws IOException\n{\r\n    String attributesStr = \"hostname,STRING,host1234:uptime,STRING,321543\";\r\n    Set<NodeAttribute> attributes = nodeAttributesProvider.parseAttributes(attributesStr);\r\n    Assert.assertEquals(2, attributes.size());\r\n    Iterator<NodeAttribute> ait = attributes.iterator();\r\n    while (ait.hasNext()) {\r\n        NodeAttribute attr = ait.next();\r\n        NodeAttributeKey at = attr.getAttributeKey();\r\n        if (at.getAttributeName().equals(\"hostname\")) {\r\n            Assert.assertEquals(\"hostname\", at.getAttributeName());\r\n            Assert.assertEquals(NodeAttribute.PREFIX_DISTRIBUTED, at.getAttributePrefix());\r\n            Assert.assertEquals(NodeAttributeType.STRING, attr.getAttributeType());\r\n            Assert.assertEquals(\"host1234\", attr.getAttributeValue());\r\n        } else if (at.getAttributeName().equals(\"uptime\")) {\r\n            Assert.assertEquals(\"uptime\", at.getAttributeName());\r\n            Assert.assertEquals(NodeAttribute.PREFIX_DISTRIBUTED, at.getAttributePrefix());\r\n            Assert.assertEquals(NodeAttributeType.STRING, attr.getAttributeType());\r\n            Assert.assertEquals(\"321543\", attr.getAttributeValue());\r\n        } else {\r\n            Assert.fail(\"Unexpected attribute\");\r\n        }\r\n    }\r\n    attributesStr = \"hostname,host1234\";\r\n    try {\r\n        nodeAttributesProvider.parseAttributes(attributesStr);\r\n        Assert.fail(\"Expecting a parsing failure\");\r\n    } catch (IOException e) {\r\n        Assert.assertNotNull(e);\r\n        Assert.assertTrue(e.getMessage().contains(\"Invalid value\"));\r\n    }\r\n    attributesStr = \"prefix/hostname,STRING,host1234\";\r\n    try {\r\n        nodeAttributesProvider.parseAttributes(attributesStr);\r\n        Assert.fail(\"Expecting a parsing failure\");\r\n    } catch (IOException e) {\r\n        Assert.assertNotNull(e);\r\n        Assert.assertTrue(e.getMessage().contains(\"should not contain any prefix.\"));\r\n    }\r\n    attributesStr = \"hostname,T,host1234\";\r\n    try {\r\n        nodeAttributesProvider.parseAttributes(attributesStr);\r\n        Assert.fail(\"Expecting a parsing failure\");\r\n    } catch (IOException e) {\r\n        e.printStackTrace();\r\n        Assert.assertNotNull(e);\r\n        Assert.assertTrue(e.getMessage().contains(\"Invalid node attribute type\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\task",
  "methodName" : "matches",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "boolean matches(FileDeletionTask fd)\n{\r\n    if (fd.getUser() == null && user != null) {\r\n        return false;\r\n    } else if (fd.getUser() != null && user == null) {\r\n        return false;\r\n    } else if (fd.getUser() != null && user != null) {\r\n        return fd.getUser().equals(user);\r\n    }\r\n    if (!comparePaths(fd.getSubDir(), subDirIncludes.getName())) {\r\n        return false;\r\n    }\r\n    if (baseDirIncludes == null && fd.getBaseDirs() != null) {\r\n        return false;\r\n    } else if (baseDirIncludes != null && fd.getBaseDirs() == null) {\r\n        return false;\r\n    } else if (baseDirIncludes != null && fd.getBaseDirs() != null) {\r\n        if (baseDirIncludes.size() != fd.getBaseDirs().size()) {\r\n            return false;\r\n        }\r\n        for (int i = 0; i < baseDirIncludes.size(); i++) {\r\n            if (!comparePaths(fd.getBaseDirs().get(i), baseDirIncludes.get(i).getName())) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\task",
  "methodName" : "comparePaths",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean comparePaths(Path p1, String p2)\n{\r\n    if (p1 == null && p2 != null) {\r\n        return false;\r\n    } else if (p1 != null && p2 == null) {\r\n        return false;\r\n    } else if (p1 != null && p2 != null) {\r\n        return p1.toUri().getPath().contains(p2.toString());\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testPidNotFound",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testPidNotFound() throws Exception\n{\r\n    CGroupsResourceCalculator calculator = new CGroupsResourceCalculator(\"1234\", \".\", cGroupsHandler, clock, 10);\r\n    calculator.setCGroupFilePaths();\r\n    Assert.assertEquals(\"Expected exception\", null, calculator);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testNoMemoryCGgroupMount",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testNoMemoryCGgroupMount() throws Exception\n{\r\n    File procfs = new File(basePath + \"/1234\");\r\n    Assert.assertTrue(\"Setup error\", procfs.mkdirs());\r\n    try {\r\n        FileUtils.writeStringToFile(new File(procfs, CGroupsResourceCalculator.CGROUP), \"7:devices:/yarn/container_1\\n\" + \"6:cpuacct,cpu:/yarn/container_1\\n\" + \"5:pids:/yarn/container_1\\n\", StandardCharsets.UTF_8);\r\n        CGroupsResourceCalculator calculator = new CGroupsResourceCalculator(\"1234\", basePath, cGroupsHandler, clock, 10);\r\n        calculator.setCGroupFilePaths();\r\n        Assert.assertEquals(\"Expected exception\", null, calculator);\r\n    } finally {\r\n        FileUtils.deleteDirectory(new File(basePath));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testCGgroupNotFound",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testCGgroupNotFound() throws Exception\n{\r\n    File procfs = new File(basePath + \"/1234\");\r\n    Assert.assertTrue(\"Setup error\", procfs.mkdirs());\r\n    try {\r\n        FileUtils.writeStringToFile(new File(procfs, CGroupsResourceCalculator.CGROUP), \"7:devices:/yarn/container_1\\n\" + \"6:cpuacct,cpu:/yarn/container_1\\n\" + \"5:pids:/yarn/container_1\\n\" + \"4:memory:/yarn/container_1\\n\", StandardCharsets.UTF_8);\r\n        CGroupsResourceCalculator calculator = new CGroupsResourceCalculator(\"1234\", basePath, cGroupsHandler, clock, 10);\r\n        calculator.setCGroupFilePaths();\r\n        calculator.updateProcessTree();\r\n        Assert.assertEquals(\"cgroups should be missing\", (long) ResourceCalculatorProcessTree.UNAVAILABLE, calculator.getRssMemorySize(0));\r\n    } finally {\r\n        FileUtils.deleteDirectory(new File(basePath));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testCPUParsing",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testCPUParsing() throws Exception\n{\r\n    File cgcpuacctDir = new File(basePath + \"/cgcpuacct\");\r\n    File cgcpuacctContainerDir = new File(cgcpuacctDir, \"/yarn/container_1\");\r\n    File procfs = new File(basePath + \"/1234\");\r\n    when(cGroupsHandler.getControllerPath(CGroupsHandler.CGroupController.CPUACCT)).thenReturn(cgcpuacctDir.getAbsolutePath());\r\n    Assert.assertTrue(\"Setup error\", procfs.mkdirs());\r\n    Assert.assertTrue(\"Setup error\", cgcpuacctContainerDir.mkdirs());\r\n    try {\r\n        FileUtils.writeStringToFile(new File(procfs, CGroupsResourceCalculator.CGROUP), \"7:devices:/yarn/container_1\\n\" + \"6:cpuacct,cpu:/yarn/container_1\\n\" + \"5:pids:/yarn/container_1\\n\" + \"4:memory:/yarn/container_1\\n\", StandardCharsets.UTF_8);\r\n        FileUtils.writeStringToFile(new File(cgcpuacctContainerDir, CGroupsResourceCalculator.CPU_STAT), \"Can you handle this?\\n\" + \"user 5415\\n\" + \"system 3632\", StandardCharsets.UTF_8);\r\n        CGroupsResourceCalculator calculator = new CGroupsResourceCalculator(\"1234\", basePath, cGroupsHandler, clock, 10);\r\n        calculator.setCGroupFilePaths();\r\n        calculator.updateProcessTree();\r\n        Assert.assertEquals(\"Incorrect CPU usage\", 90470, calculator.getCumulativeCpuTime());\r\n    } finally {\r\n        FileUtils.deleteDirectory(new File(basePath));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testMemoryParsing",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testMemoryParsing() throws Exception\n{\r\n    File cgcpuacctDir = new File(basePath + \"/cgcpuacct\");\r\n    File cgcpuacctContainerDir = new File(cgcpuacctDir, \"/yarn/container_1\");\r\n    File cgmemoryDir = new File(basePath + \"/memory\");\r\n    File cgMemoryContainerDir = new File(cgmemoryDir, \"/yarn/container_1\");\r\n    File procfs = new File(basePath + \"/1234\");\r\n    when(cGroupsHandler.getControllerPath(CGroupsHandler.CGroupController.MEMORY)).thenReturn(cgmemoryDir.getAbsolutePath());\r\n    Assert.assertTrue(\"Setup error\", procfs.mkdirs());\r\n    Assert.assertTrue(\"Setup error\", cgcpuacctContainerDir.mkdirs());\r\n    Assert.assertTrue(\"Setup error\", cgMemoryContainerDir.mkdirs());\r\n    try {\r\n        FileUtils.writeStringToFile(new File(procfs, CGroupsResourceCalculator.CGROUP), \"6:cpuacct,cpu:/yarn/container_1\\n\" + \"4:memory:/yarn/container_1\\n\", StandardCharsets.UTF_8);\r\n        FileUtils.writeStringToFile(new File(cgMemoryContainerDir, CGroupsResourceCalculator.MEM_STAT), \"418496512\\n\", StandardCharsets.UTF_8);\r\n        CGroupsResourceCalculator calculator = new CGroupsResourceCalculator(\"1234\", basePath, cGroupsHandler, clock, 10);\r\n        calculator.setCGroupFilePaths();\r\n        calculator.updateProcessTree();\r\n        Assert.assertEquals(\"Incorrect memory usage\", 418496512, calculator.getRssMemorySize());\r\n        Assert.assertEquals(\"Incorrect swap usage\", (long) ResourceCalculatorProcessTree.UNAVAILABLE, calculator.getVirtualMemorySize());\r\n        FileUtils.writeStringToFile(new File(cgMemoryContainerDir, CGroupsResourceCalculator.MEMSW_STAT), \"418496513\\n\", StandardCharsets.UTF_8);\r\n        calculator.updateProcessTree();\r\n        Assert.assertEquals(\"Incorrect swap usage\", 418496513, calculator.getVirtualMemorySize());\r\n    } finally {\r\n        FileUtils.deleteDirectory(new File(basePath));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testCPUParsingRoot",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testCPUParsingRoot() throws Exception\n{\r\n    File cgcpuacctDir = new File(basePath + \"/cgcpuacct\");\r\n    File cgcpuacctRootDir = new File(cgcpuacctDir, \"/yarn\");\r\n    when(cGroupsHandler.getControllerPath(CGroupsHandler.CGroupController.CPUACCT)).thenReturn(cgcpuacctDir.getAbsolutePath());\r\n    Assert.assertTrue(\"Setup error\", cgcpuacctRootDir.mkdirs());\r\n    try {\r\n        FileUtils.writeStringToFile(new File(cgcpuacctRootDir, CGroupsResourceCalculator.CPU_STAT), \"user 5415\\n\" + \"system 3632\", StandardCharsets.UTF_8);\r\n        CGroupsResourceCalculator calculator = new CGroupsResourceCalculator(null, basePath, cGroupsHandler, clock, 10);\r\n        calculator.setCGroupFilePaths();\r\n        calculator.updateProcessTree();\r\n        Assert.assertEquals(\"Incorrect CPU usage\", 90470, calculator.getCumulativeCpuTime());\r\n    } finally {\r\n        FileUtils.deleteDirectory(new File(basePath));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testMemoryParsingRoot",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testMemoryParsingRoot() throws Exception\n{\r\n    File cgcpuacctDir = new File(basePath + \"/cgcpuacct\");\r\n    File cgcpuacctRootDir = new File(cgcpuacctDir, \"/yarn\");\r\n    File cgmemoryDir = new File(basePath + \"/memory\");\r\n    File cgMemoryRootDir = new File(cgmemoryDir, \"/yarn\");\r\n    File procfs = new File(basePath + \"/1234\");\r\n    when(cGroupsHandler.getControllerPath(CGroupsHandler.CGroupController.MEMORY)).thenReturn(cgmemoryDir.getAbsolutePath());\r\n    Assert.assertTrue(\"Setup error\", procfs.mkdirs());\r\n    Assert.assertTrue(\"Setup error\", cgcpuacctRootDir.mkdirs());\r\n    Assert.assertTrue(\"Setup error\", cgMemoryRootDir.mkdirs());\r\n    try {\r\n        FileUtils.writeStringToFile(new File(cgMemoryRootDir, CGroupsResourceCalculator.MEM_STAT), \"418496512\\n\", StandardCharsets.UTF_8);\r\n        CGroupsResourceCalculator calculator = new CGroupsResourceCalculator(null, basePath, cGroupsHandler, clock, 10);\r\n        calculator.setCGroupFilePaths();\r\n        calculator.updateProcessTree();\r\n        Assert.assertEquals(\"Incorrect memory usage\", 418496512, calculator.getRssMemorySize());\r\n        Assert.assertEquals(\"Incorrect swap usage\", (long) ResourceCalculatorProcessTree.UNAVAILABLE, calculator.getVirtualMemorySize());\r\n        FileUtils.writeStringToFile(new File(cgMemoryRootDir, CGroupsResourceCalculator.MEMSW_STAT), \"418496513\\n\", StandardCharsets.UTF_8);\r\n        calculator.updateProcessTree();\r\n        Assert.assertEquals(\"Incorrect swap usage\", 418496513, calculator.getVirtualMemorySize());\r\n    } finally {\r\n        FileUtils.deleteDirectory(new File(basePath));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createResourceTracker",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourceTracker createResourceTracker()\n{\r\n    return new MockResourceTracker();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getRMClient",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourceTracker getRMClient()\n{\r\n    return resourceTracker;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "stopRMProxy",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void stopRMProxy()\n{\r\n    return;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "setState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setState(ContainerState state)\n{\r\n    this.state = state;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUser()\n{\r\n    return user;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getContainerState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerState getContainerState()\n{\r\n    return state;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getLaunchContext",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerLaunchContext getLaunchContext()\n{\r\n    return launchContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getCredentials",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Credentials getCredentials()\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getLocalizedResources",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<Path, List<String>> getLocalizedResources()\n{\r\n    return resource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "cloneAndGetContainerStatus",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "ContainerStatus cloneAndGetContainerStatus()\n{\r\n    ContainerStatus containerStatus = recordFactory.newRecordInstance(ContainerStatus.class);\r\n    containerStatus.setState(org.apache.hadoop.yarn.api.records.ContainerState.RUNNING);\r\n    containerStatus.setDiagnostics(\"testing\");\r\n    containerStatus.setExitStatus(0);\r\n    return containerStatus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String toString()\n{\r\n    return \"\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "localizationCountersAsString",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String localizationCountersAsString()\n{\r\n    return \"\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getResourceSet",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourceSet getResourceSet()\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "handle",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void handle(ContainerEvent event)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerId getContainerId()\n{\r\n    return this.id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getResource",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource getResource()\n{\r\n    return this.containerTokenIdentifier.getResource();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "setContainerTokenIdentifier",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setContainerTokenIdentifier(ContainerTokenIdentifier token)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getContainerTokenIdentifier",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerTokenIdentifier getContainerTokenIdentifier()\n{\r\n    return this.containerTokenIdentifier;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getNMContainerStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NMContainerStatus getNMContainerStatus()\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "isRetryContextSet",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isRetryContextSet()\n{\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "shouldRetry",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean shouldRetry(int errorCode)\n{\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getWorkDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getWorkDir()\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "setWorkDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setWorkDir(String workDir)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getCsiVolumesRootDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getCsiVolumesRootDir()\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "setCsiVolumesRootDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setCsiVolumesRootDir(String volumesRootDir)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getLogDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getLogDir()\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "setLogDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setLogDir(String logDir)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getPriority",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Priority getPriority()\n{\r\n    return Priority.UNDEFINED;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "setIpAndHost",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setIpAndHost(String[] ipAndHost)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "setExposedPorts",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setExposedPorts(String ports)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "isRunning",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isRunning()\n{\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "setIsReInitializing",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setIsReInitializing(boolean isReInitializing)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "isReInitializing",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isReInitializing()\n{\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "canRollback",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean canRollback()\n{\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "commitUpgrade",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void commitUpgrade()\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "isMarkedForKilling",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isMarkedForKilling()\n{\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "sendLaunchEvent",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void sendLaunchEvent()\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "sendKillEvent",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void sendKillEvent(int exitStatus, String description)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "isRecovering",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isRecovering()\n{\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getContainerStartTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getContainerStartTime()\n{\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getContainerLaunchTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getContainerLaunchTime()\n{\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getResourceMappings",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourceMappings getResourceMappings()\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "sendPauseEvent",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void sendPauseEvent(String description)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "isContainerInFinalStates",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isContainerInFinalStates()\n{\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getLocalizationStatuses",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<LocalizationStatus> getLocalizationStatuses()\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "setContainerRuntimeData",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setContainerRuntimeData(Object containerRuntimeData)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getContainerRuntimeData",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "T getContainerRuntimeData(Class<T> runtimeClazz) throws ContainerExecutionException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "getAppIds",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Collection<Object[]> getAppIds()\n{\r\n    return Arrays.asList(new Object[][] { { \"appid\" }, { \"application_123123213_0001\" }, { \"\" } });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNMAppsPage",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testNMAppsPage()\n{\r\n    Configuration conf = new Configuration();\r\n    final NMContext nmcontext = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), new NMNullStateStoreService(), false, conf);\r\n    Injector injector = WebAppTests.createMockInjector(NMContext.class, nmcontext, new Module() {\r\n\r\n        @Override\r\n        public void configure(Binder binder) {\r\n            NodeManager nm = TestNMAppsPage.mocknm(nmcontext);\r\n            binder.bind(NodeManager.class).toInstance(nm);\r\n            binder.bind(Context.class).toInstance(nmcontext);\r\n        }\r\n    });\r\n    ApplicationBlock instance = injector.getInstance(ApplicationBlock.class);\r\n    instance.set(YarnWebParams.APPLICATION_ID, applicationid);\r\n    instance.render();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "mocknm",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NodeManager mocknm(NMContext nmcontext)\n{\r\n    NodeManager rm = mock(NodeManager.class);\r\n    when(rm.getNMContext()).thenReturn(nmcontext);\r\n    return rm;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "createMockDiscoverer",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "GpuDiscoverer createMockDiscoverer() throws YarnException\n{\r\n    GpuDiscoverer gpuDiscoverer = mock(GpuDiscoverer.class);\r\n    when(gpuDiscoverer.isAutoDiscoveryEnabled()).thenReturn(true);\r\n    PerGpuDeviceInformation gpu = new PerGpuDeviceInformation();\r\n    gpu.setProductName(\"testGpu\");\r\n    List<PerGpuDeviceInformation> gpus = Lists.newArrayList();\r\n    gpus.add(gpu);\r\n    GpuDeviceInformation gpuDeviceInfo = new GpuDeviceInformation();\r\n    gpuDeviceInfo.setGpus(gpus);\r\n    when(gpuDiscoverer.getGpuDeviceInformation()).thenReturn(gpuDeviceInfo);\r\n    return gpuDiscoverer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "testResourceHandlerNotInitialized",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testResourceHandlerNotInitialized() throws YarnException\n{\r\n    GpuDiscoverer gpuDiscoverer = createMockDiscoverer();\r\n    GpuNodeResourceUpdateHandler gpuNodeResourceUpdateHandler = mock(GpuNodeResourceUpdateHandler.class);\r\n    GpuResourcePlugin target = new GpuResourcePlugin(gpuNodeResourceUpdateHandler, gpuDiscoverer);\r\n    target.getNMResourceInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "testResourceHandlerIsInitialized",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testResourceHandlerIsInitialized() throws YarnException\n{\r\n    GpuDiscoverer gpuDiscoverer = createMockDiscoverer();\r\n    GpuNodeResourceUpdateHandler gpuNodeResourceUpdateHandler = mock(GpuNodeResourceUpdateHandler.class);\r\n    GpuResourcePlugin target = new GpuResourcePlugin(gpuNodeResourceUpdateHandler, gpuDiscoverer);\r\n    target.createResourceHandler(null, null, null);\r\n    target.getNMResourceInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "testGetNMResourceInfoAutoDiscoveryEnabled",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testGetNMResourceInfoAutoDiscoveryEnabled() throws YarnException\n{\r\n    GpuDiscoverer gpuDiscoverer = createMockDiscoverer();\r\n    GpuNodeResourceUpdateHandler gpuNodeResourceUpdateHandler = mock(GpuNodeResourceUpdateHandler.class);\r\n    GpuResourcePlugin target = new GpuResourcePlugin(gpuNodeResourceUpdateHandler, gpuDiscoverer);\r\n    target.createResourceHandler(null, null, null);\r\n    NMGpuResourceInfo resourceInfo = (NMGpuResourceInfo) target.getNMResourceInfo();\r\n    Assert.assertNotNull(\"GpuDeviceInformation should not be null\", resourceInfo.getGpuDeviceInformation());\r\n    List<PerGpuDeviceInformation> gpus = resourceInfo.getGpuDeviceInformation().getGpus();\r\n    Assert.assertNotNull(\"List of PerGpuDeviceInformation should not be null\", gpus);\r\n    Assert.assertEquals(\"List of PerGpuDeviceInformation should have a \" + \"size of 1\", 1, gpus.size());\r\n    Assert.assertEquals(\"Product name of GPU does not match\", \"testGpu\", gpus.get(0).getProductName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "testGetNMResourceInfoAutoDiscoveryDisabled",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testGetNMResourceInfoAutoDiscoveryDisabled() throws YarnException\n{\r\n    GpuDiscoverer gpuDiscoverer = createMockDiscoverer();\r\n    when(gpuDiscoverer.isAutoDiscoveryEnabled()).thenReturn(false);\r\n    GpuNodeResourceUpdateHandler gpuNodeResourceUpdateHandler = mock(GpuNodeResourceUpdateHandler.class);\r\n    GpuResourcePlugin target = new GpuResourcePlugin(gpuNodeResourceUpdateHandler, gpuDiscoverer);\r\n    target.createResourceHandler(null, null, null);\r\n    NMGpuResourceInfo resourceInfo = (NMGpuResourceInfo) target.getNMResourceInfo();\r\n    Assert.assertNull(resourceInfo.getGpuDeviceInformation());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "testAvgNodeGpuUtilization",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testAvgNodeGpuUtilization() throws Exception\n{\r\n    GpuDiscoverer gpuDiscoverer = createNodeGPUUtilizationDiscoverer();\r\n    GpuNodeResourceUpdateHandler gpuNodeResourceUpdateHandler = new GpuNodeResourceUpdateHandler(gpuDiscoverer, new Configuration());\r\n    Assert.assertEquals(0.5F, gpuNodeResourceUpdateHandler.getAvgNodeGpuUtilization(), 1e-6);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "createNodeGPUUtilizationDiscoverer",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "GpuDiscoverer createNodeGPUUtilizationDiscoverer() throws YarnException\n{\r\n    GpuDiscoverer gpuDiscoverer = mock(GpuDiscoverer.class);\r\n    PerGpuDeviceInformation gpu1 = new PerGpuDeviceInformation();\r\n    PerGpuUtilizations perGpuUtilizations1 = new PerGpuUtilizations();\r\n    perGpuUtilizations1.setOverallGpuUtilization(0.4F);\r\n    gpu1.setGpuUtilizations(perGpuUtilizations1);\r\n    PerGpuDeviceInformation gpu2 = new PerGpuDeviceInformation();\r\n    PerGpuUtilizations perGpuUtilizations2 = new PerGpuUtilizations();\r\n    perGpuUtilizations2.setOverallGpuUtilization(0.6F);\r\n    gpu2.setGpuUtilizations(perGpuUtilizations2);\r\n    List<PerGpuDeviceInformation> gpus = Lists.newArrayList();\r\n    gpus.add(gpu1);\r\n    gpus.add(gpu2);\r\n    GpuDeviceInformation gpuDeviceInfo = new GpuDeviceInformation();\r\n    gpuDeviceInfo.setGpus(gpus);\r\n    when(gpuDiscoverer.getGpuDeviceInformation()).thenReturn(gpuDeviceInfo);\r\n    return gpuDiscoverer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setup() throws IOException\n{\r\n    conf.setInt(YarnConfiguration.NM_OPPORTUNISTIC_CONTAINERS_MAX_QUEUE_LENGTH, 10);\r\n    super.setup();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "testStartMultipleContainers",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testStartMultipleContainers() throws Exception\n{\r\n    containerManager.start();\r\n    List<StartContainerRequest> list = new ArrayList<>();\r\n    list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), createContainerToken(createContainerId(0), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(1024, 1), context.getContainerTokenSecretManager(), null, ExecutionType.GUARANTEED)));\r\n    list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), createContainerToken(createContainerId(1), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(1024, 1), context.getContainerTokenSecretManager(), null, ExecutionType.OPPORTUNISTIC)));\r\n    StartContainersRequest allRequests = StartContainersRequest.newInstance(list);\r\n    containerManager.startContainers(allRequests);\r\n    BaseContainerManagerTest.waitForContainerState(containerManager, createContainerId(0), org.apache.hadoop.yarn.api.records.ContainerState.RUNNING);\r\n    BaseContainerManagerTest.waitForContainerState(containerManager, createContainerId(1), org.apache.hadoop.yarn.api.records.ContainerState.RUNNING);\r\n    List<ContainerId> statList = new ArrayList<ContainerId>();\r\n    for (int i = 0; i < 2; i++) {\r\n        statList.add(createContainerId(i));\r\n    }\r\n    GetContainerStatusesRequest statRequest = GetContainerStatusesRequest.newInstance(statList);\r\n    List<ContainerStatus> containerStatuses = containerManager.getContainerStatuses(statRequest).getContainerStatuses();\r\n    for (ContainerStatus status : containerStatuses) {\r\n        Assert.assertEquals(org.apache.hadoop.yarn.api.records.ContainerState.RUNNING, status.getState());\r\n    }\r\n    Assert.assertEquals(0, metrics.getQueuedOpportunisticContainers());\r\n    Assert.assertEquals(0, metrics.getQueuedGuaranteedContainers());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "testQueueMultipleContainers",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testQueueMultipleContainers() throws Exception\n{\r\n    containerManager.start();\r\n    List<StartContainerRequest> list = new ArrayList<>();\r\n    list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), createContainerToken(createContainerId(0), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(3072, 1), context.getContainerTokenSecretManager(), null, ExecutionType.GUARANTEED)));\r\n    list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), createContainerToken(createContainerId(1), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(3072, 1), context.getContainerTokenSecretManager(), null, ExecutionType.OPPORTUNISTIC)));\r\n    StartContainersRequest allRequests = StartContainersRequest.newInstance(list);\r\n    containerManager.startContainers(allRequests);\r\n    Thread.sleep(5000);\r\n    List<ContainerId> statList = new ArrayList<ContainerId>();\r\n    for (int i = 0; i < 2; i++) {\r\n        statList.add(createContainerId(i));\r\n    }\r\n    GetContainerStatusesRequest statRequest = GetContainerStatusesRequest.newInstance(statList);\r\n    List<ContainerStatus> containerStatuses = containerManager.getContainerStatuses(statRequest).getContainerStatuses();\r\n    for (ContainerStatus status : containerStatuses) {\r\n        Assert.assertEquals(ContainerSubState.SCHEDULED, status.getContainerSubState());\r\n    }\r\n    ContainerScheduler containerScheduler = containerManager.getContainerScheduler();\r\n    Assert.assertEquals(2, containerScheduler.getNumQueuedContainers());\r\n    Assert.assertEquals(1, containerScheduler.getNumQueuedGuaranteedContainers());\r\n    Assert.assertEquals(1, containerScheduler.getNumQueuedOpportunisticContainers());\r\n    Assert.assertEquals(1, metrics.getQueuedOpportunisticContainers());\r\n    Assert.assertEquals(1, metrics.getQueuedGuaranteedContainers());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "testStartAndQueueMultipleContainers",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testStartAndQueueMultipleContainers() throws Exception\n{\r\n    containerManager.start();\r\n    List<StartContainerRequest> list = new ArrayList<>();\r\n    list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), createContainerToken(createContainerId(0), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(2048, 1), context.getContainerTokenSecretManager(), null, ExecutionType.OPPORTUNISTIC)));\r\n    list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), createContainerToken(createContainerId(1), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(1024, 1), context.getContainerTokenSecretManager(), null, ExecutionType.OPPORTUNISTIC)));\r\n    list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), createContainerToken(createContainerId(2), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(1024, 1), context.getContainerTokenSecretManager(), null, ExecutionType.OPPORTUNISTIC)));\r\n    StartContainersRequest allRequests = StartContainersRequest.newInstance(list);\r\n    containerManager.startContainers(allRequests);\r\n    Thread.sleep(5000);\r\n    List<ContainerId> statList = new ArrayList<ContainerId>();\r\n    for (int i = 0; i < 3; i++) {\r\n        statList.add(createContainerId(i));\r\n    }\r\n    GetContainerStatusesRequest statRequest = GetContainerStatusesRequest.newInstance(Arrays.asList(createContainerId(0)));\r\n    List<ContainerStatus> containerStatuses = containerManager.getContainerStatuses(statRequest).getContainerStatuses();\r\n    for (ContainerStatus status : containerStatuses) {\r\n        if (status.getContainerId().equals(createContainerId(0))) {\r\n            Assert.assertEquals(ContainerSubState.RUNNING, status.getContainerSubState());\r\n        } else {\r\n            Assert.assertEquals(ContainerSubState.SCHEDULED, status.getContainerSubState());\r\n        }\r\n    }\r\n    ContainerScheduler containerScheduler = containerManager.getContainerScheduler();\r\n    Assert.assertEquals(2, containerScheduler.getNumQueuedContainers());\r\n    Assert.assertEquals(0, containerScheduler.getNumQueuedGuaranteedContainers());\r\n    Assert.assertEquals(2, containerScheduler.getNumQueuedOpportunisticContainers());\r\n    Assert.assertEquals(2, metrics.getQueuedOpportunisticContainers());\r\n    Assert.assertEquals(0, metrics.getQueuedGuaranteedContainers());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "testStartOpportunisticsWhenOppQueueIsFull",
  "errType" : null,
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void testStartOpportunisticsWhenOppQueueIsFull() throws Exception\n{\r\n    containerManager.start();\r\n    List<StartContainerRequest> list = new ArrayList<>();\r\n    list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), createContainerToken(createContainerId(0), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(2048, 1), context.getContainerTokenSecretManager(), null, ExecutionType.GUARANTEED)));\r\n    final int maxOppQueueLength = conf.getInt(YarnConfiguration.NM_OPPORTUNISTIC_CONTAINERS_MAX_QUEUE_LENGTH, YarnConfiguration.DEFAULT_NM_OPPORTUNISTIC_CONTAINERS_MAX_QUEUE_LENGTH);\r\n    for (int i = 1; i < maxOppQueueLength + 2; i++) {\r\n        list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), createContainerToken(createContainerId(i), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(2048, 1), context.getContainerTokenSecretManager(), null, ExecutionType.OPPORTUNISTIC)));\r\n    }\r\n    StartContainersRequest allRequests = StartContainersRequest.newInstance(list);\r\n    containerManager.startContainers(allRequests);\r\n    BaseContainerManagerTest.waitForNMContainerState(containerManager, createContainerId(0), ContainerState.RUNNING, 40);\r\n    BaseContainerManagerTest.waitForNMContainerState(containerManager, createContainerId(maxOppQueueLength + 1), ContainerState.DONE, 40);\r\n    Thread.sleep(5000);\r\n    List<ContainerId> statList = new ArrayList<>();\r\n    for (int i = 0; i < maxOppQueueLength + 2; i++) {\r\n        statList.add(createContainerId(i));\r\n    }\r\n    GetContainerStatusesRequest statRequest = GetContainerStatusesRequest.newInstance(statList);\r\n    List<ContainerStatus> containerStatuses = containerManager.getContainerStatuses(statRequest).getContainerStatuses();\r\n    for (ContainerStatus status : containerStatuses) {\r\n        if (status.getContainerId().equals(createContainerId(0))) {\r\n            Assert.assertEquals(ContainerSubState.RUNNING, status.getContainerSubState());\r\n        } else if (status.getContainerId().equals(createContainerId(maxOppQueueLength + 1))) {\r\n            Assert.assertTrue(status.getDiagnostics().contains(\"Opportunistic container queue is full\"));\r\n        } else {\r\n            Assert.assertEquals(ContainerSubState.SCHEDULED, status.getContainerSubState());\r\n        }\r\n        System.out.println(\"\\nStatus : [\" + status + \"]\\n\");\r\n    }\r\n    ContainerScheduler containerScheduler = containerManager.getContainerScheduler();\r\n    Assert.assertEquals(maxOppQueueLength, containerScheduler.getNumQueuedContainers());\r\n    Assert.assertEquals(0, containerScheduler.getNumQueuedGuaranteedContainers());\r\n    Assert.assertEquals(maxOppQueueLength, containerScheduler.getNumQueuedOpportunisticContainers());\r\n    Assert.assertEquals(maxOppQueueLength, metrics.getQueuedOpportunisticContainers());\r\n    Assert.assertEquals(0, metrics.getQueuedGuaranteedContainers());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "testKillOpportunisticForGuaranteedContainer",
  "errType" : null,
  "containingMethodsNum" : 27,
  "sourceCodeText" : "void testKillOpportunisticForGuaranteedContainer() throws Exception\n{\r\n    containerManager.start();\r\n    List<StartContainerRequest> list = new ArrayList<>();\r\n    list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), createContainerToken(createContainerId(0), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(2048, 1), context.getContainerTokenSecretManager(), null, ExecutionType.OPPORTUNISTIC)));\r\n    list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), createContainerToken(createContainerId(1), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(2048, 1), context.getContainerTokenSecretManager(), null, ExecutionType.OPPORTUNISTIC)));\r\n    list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), createContainerToken(createContainerId(2), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(2048, 1), context.getContainerTokenSecretManager(), null, ExecutionType.GUARANTEED)));\r\n    StartContainersRequest allRequests = StartContainersRequest.newInstance(list);\r\n    containerManager.startContainers(allRequests);\r\n    BaseContainerManagerTest.waitForNMContainerState(containerManager, createContainerId(0), ContainerState.DONE, 40);\r\n    Thread.sleep(5000);\r\n    List<ContainerId> statList = new ArrayList<ContainerId>();\r\n    for (int i = 0; i < 3; i++) {\r\n        statList.add(createContainerId(i));\r\n    }\r\n    GetContainerStatusesRequest statRequest = GetContainerStatusesRequest.newInstance(statList);\r\n    List<ContainerStatus> containerStatuses = containerManager.getContainerStatuses(statRequest).getContainerStatuses();\r\n    for (ContainerStatus status : containerStatuses) {\r\n        if (status.getContainerId().equals(createContainerId(0))) {\r\n            Assert.assertTrue(status.getDiagnostics().contains(\"Container Killed to make room for Guaranteed Container\"));\r\n        } else if (status.getContainerId().equals(createContainerId(1))) {\r\n            Assert.assertEquals(ContainerSubState.SCHEDULED, status.getContainerSubState());\r\n        } else if (status.getContainerId().equals(createContainerId(2))) {\r\n            Assert.assertEquals(ContainerSubState.RUNNING, status.getContainerSubState());\r\n        }\r\n        System.out.println(\"\\nStatus : [\" + status + \"]\\n\");\r\n    }\r\n    Assert.assertEquals(1, metrics.getQueuedOpportunisticContainers());\r\n    Assert.assertEquals(0, metrics.getQueuedGuaranteedContainers());\r\n    BaseContainerManagerTest.waitForNMContainerState(containerManager, createContainerId(2), ContainerState.DONE, 40);\r\n    Thread.sleep(5000);\r\n    statRequest = GetContainerStatusesRequest.newInstance(Arrays.asList(createContainerId(1)));\r\n    ContainerStatus contStatus1 = containerManager.getContainerStatuses(statRequest).getContainerStatuses().get(0);\r\n    Assert.assertEquals(org.apache.hadoop.yarn.api.records.ContainerState.RUNNING, contStatus1.getState());\r\n    Assert.assertEquals(0, metrics.getQueuedOpportunisticContainers());\r\n    Assert.assertEquals(0, metrics.getQueuedGuaranteedContainers());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "testPauseOpportunisticForGuaranteedContainer",
  "errType" : null,
  "containingMethodsNum" : 27,
  "sourceCodeText" : "void testPauseOpportunisticForGuaranteedContainer() throws Exception\n{\r\n    containerManager.start();\r\n    containerManager.getContainerScheduler().setUsePauseEventForPreemption(true);\r\n    Listener listener = new Listener();\r\n    ((NodeManager.DefaultContainerStateListener) containerManager.getContext().getContainerStateTransitionListener()).addListener(listener);\r\n    List<StartContainerRequest> list = new ArrayList<>();\r\n    list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), createContainerToken(createContainerId(0), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(2048, 1), context.getContainerTokenSecretManager(), null, ExecutionType.OPPORTUNISTIC)));\r\n    StartContainersRequest allRequests = StartContainersRequest.newInstance(list);\r\n    containerManager.startContainers(allRequests);\r\n    BaseContainerManagerTest.waitForNMContainerState(containerManager, createContainerId(0), ContainerState.RUNNING, 40);\r\n    list = new ArrayList<>();\r\n    list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), createContainerToken(createContainerId(1), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(2048, 1), context.getContainerTokenSecretManager(), null, ExecutionType.GUARANTEED)));\r\n    allRequests = StartContainersRequest.newInstance(list);\r\n    containerManager.startContainers(allRequests);\r\n    BaseContainerManagerTest.waitForNMContainerState(containerManager, createContainerId(1), ContainerState.RUNNING, 40);\r\n    List<ContainerId> statList = new ArrayList<ContainerId>();\r\n    for (int i = 0; i < 2; i++) {\r\n        statList.add(createContainerId(i));\r\n    }\r\n    GetContainerStatusesRequest statRequest = GetContainerStatusesRequest.newInstance(statList);\r\n    List<ContainerStatus> containerStatuses = containerManager.getContainerStatuses(statRequest).getContainerStatuses();\r\n    for (ContainerStatus status : containerStatuses) {\r\n        if (status.getContainerId().equals(createContainerId(0))) {\r\n            Assert.assertTrue(status.getDiagnostics().contains(\"Container Paused to make room for Guaranteed Container\"));\r\n        } else if (status.getContainerId().equals(createContainerId(1))) {\r\n            Assert.assertEquals(org.apache.hadoop.yarn.api.records.ContainerState.RUNNING, status.getState());\r\n        }\r\n        System.out.println(\"\\nStatus : [\" + status + \"]\\n\");\r\n    }\r\n    Assert.assertEquals(1, metrics.getQueuedOpportunisticContainers());\r\n    Assert.assertEquals(0, metrics.getQueuedGuaranteedContainers());\r\n    BaseContainerManagerTest.waitForNMContainerState(containerManager, createContainerId(1), ContainerState.DONE, 40);\r\n    BaseContainerManagerTest.waitForNMContainerState(containerManager, createContainerId(0), ContainerState.DONE, 40);\r\n    List<org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState> containerStates = listener.getStates().get(createContainerId(0));\r\n    Assert.assertEquals(Arrays.asList(org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.NEW, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.SCHEDULED, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.RUNNING, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.PAUSING, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.PAUSED, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.RESUMING, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.RUNNING, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.EXITED_WITH_SUCCESS, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.DONE), containerStates);\r\n    List<ContainerEventType> containerEventTypes = listener.getEvents().get(createContainerId(0));\r\n    Assert.assertEquals(Arrays.asList(ContainerEventType.INIT_CONTAINER, ContainerEventType.CONTAINER_LAUNCHED, ContainerEventType.PAUSE_CONTAINER, ContainerEventType.CONTAINER_PAUSED, ContainerEventType.RESUME_CONTAINER, ContainerEventType.CONTAINER_RESUMED, ContainerEventType.CONTAINER_EXITED_WITH_SUCCESS, ContainerEventType.CONTAINER_RESOURCES_CLEANEDUP), containerEventTypes);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "testQueueShedding",
  "errType" : null,
  "containingMethodsNum" : 34,
  "sourceCodeText" : "void testQueueShedding() throws Exception\n{\r\n    containerManager.start();\r\n    ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class);\r\n    containerLaunchContext.setCommands(Arrays.asList(\"sleep 100\"));\r\n    List<StartContainerRequest> list = new ArrayList<>();\r\n    list.add(StartContainerRequest.newInstance(containerLaunchContext, createContainerToken(createContainerId(0), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(2048, 1), context.getContainerTokenSecretManager(), null, ExecutionType.GUARANTEED)));\r\n    StartContainersRequest allRequests = StartContainersRequest.newInstance(list);\r\n    containerManager.startContainers(allRequests);\r\n    list = new ArrayList<>();\r\n    list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), createContainerToken(createContainerId(1), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(512, 1), context.getContainerTokenSecretManager(), null, ExecutionType.OPPORTUNISTIC)));\r\n    list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), createContainerToken(createContainerId(2), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(512, 1), context.getContainerTokenSecretManager(), null, ExecutionType.OPPORTUNISTIC)));\r\n    list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), createContainerToken(createContainerId(3), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(512, 1), context.getContainerTokenSecretManager(), null, ExecutionType.OPPORTUNISTIC)));\r\n    list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), createContainerToken(createContainerId(4), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(512, 1), context.getContainerTokenSecretManager(), null, ExecutionType.OPPORTUNISTIC)));\r\n    list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), createContainerToken(createContainerId(5), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(512, 1), context.getContainerTokenSecretManager(), null, ExecutionType.OPPORTUNISTIC)));\r\n    list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), createContainerToken(createContainerId(6), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(512, 1), context.getContainerTokenSecretManager(), null, ExecutionType.OPPORTUNISTIC)));\r\n    allRequests = StartContainersRequest.newInstance(list);\r\n    containerManager.startContainers(allRequests);\r\n    ContainerScheduler containerScheduler = containerManager.getContainerScheduler();\r\n    GenericTestUtils.waitFor(() -> containerScheduler.getNumQueuedContainers() == 6 && metrics.getQueuedOpportunisticContainers() == 6, 100, 3000);\r\n    Assert.assertEquals(6, containerScheduler.getNumQueuedContainers());\r\n    Assert.assertEquals(6, metrics.getQueuedOpportunisticContainers());\r\n    Assert.assertEquals(0, metrics.getQueuedGuaranteedContainers());\r\n    ContainerQueuingLimit containerQueuingLimit = ContainerQueuingLimit.newInstance();\r\n    containerQueuingLimit.setMaxQueueLength(2);\r\n    containerScheduler.updateQueuingLimit(containerQueuingLimit);\r\n    GenericTestUtils.waitFor(() -> containerScheduler.getNumQueuedContainers() == 2, 100, 3000);\r\n    Assert.assertEquals(2, containerScheduler.getNumQueuedContainers());\r\n    List<ContainerId> statList = new ArrayList<ContainerId>();\r\n    for (int i = 1; i < 7; i++) {\r\n        statList.add(createContainerId(i));\r\n    }\r\n    GetContainerStatusesRequest statRequest = GetContainerStatusesRequest.newInstance(statList);\r\n    List<ContainerStatus> containerStatuses = containerManager.getContainerStatuses(statRequest).getContainerStatuses();\r\n    int deQueuedContainers = 0;\r\n    int numQueuedOppContainers = 0;\r\n    for (ContainerStatus status : containerStatuses) {\r\n        if (status.getExecutionType() == ExecutionType.OPPORTUNISTIC) {\r\n            if (status.getDiagnostics().contains(\"Container De-queued to meet NM queuing limits\")) {\r\n                deQueuedContainers++;\r\n            }\r\n            if (ContainerSubState.SCHEDULED == status.getContainerSubState()) {\r\n                numQueuedOppContainers++;\r\n            }\r\n        }\r\n    }\r\n    Assert.assertEquals(4, deQueuedContainers);\r\n    Assert.assertEquals(2, numQueuedOppContainers);\r\n    Assert.assertEquals(2, metrics.getQueuedOpportunisticContainers());\r\n    Assert.assertEquals(0, metrics.getQueuedGuaranteedContainers());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "testContainerDeQueuedAfterAMKill",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testContainerDeQueuedAfterAMKill() throws Exception\n{\r\n    containerManager.start();\r\n    ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class);\r\n    containerLaunchContext.setCommands(Arrays.asList(\"sleep 100\"));\r\n    List<StartContainerRequest> list = new ArrayList<>();\r\n    list.add(StartContainerRequest.newInstance(containerLaunchContext, createContainerToken(createContainerId(0), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(2048, 1), context.getContainerTokenSecretManager(), null, ExecutionType.GUARANTEED)));\r\n    StartContainersRequest allRequests = StartContainersRequest.newInstance(list);\r\n    containerManager.startContainers(allRequests);\r\n    list = new ArrayList<>();\r\n    list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), createContainerToken(createContainerId(1), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(512, 1), context.getContainerTokenSecretManager(), null, ExecutionType.OPPORTUNISTIC)));\r\n    list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), createContainerToken(createContainerId(2), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(512, 1), context.getContainerTokenSecretManager(), null, ExecutionType.OPPORTUNISTIC)));\r\n    allRequests = StartContainersRequest.newInstance(list);\r\n    containerManager.startContainers(allRequests);\r\n    ContainerScheduler containerScheduler = containerManager.getContainerScheduler();\r\n    int numTries = 30;\r\n    while ((containerScheduler.getNumQueuedContainers() < 2) && (numTries-- > 0)) {\r\n        Thread.sleep(100);\r\n    }\r\n    Assert.assertEquals(2, containerScheduler.getNumQueuedContainers());\r\n    containerManager.stopContainers(StopContainersRequest.newInstance(Arrays.asList(createContainerId(2))));\r\n    numTries = 30;\r\n    while ((containerScheduler.getNumQueuedContainers() > 1) && (numTries-- > 0)) {\r\n        Thread.sleep(100);\r\n    }\r\n    Assert.assertEquals(1, containerScheduler.getNumQueuedContainers());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "testKillMultipleOpportunisticContainers",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testKillMultipleOpportunisticContainers() throws Exception\n{\r\n    containerManager.start();\r\n    List<StartContainerRequest> list = new ArrayList<>();\r\n    list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), createContainerToken(createContainerId(0), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(512, 1), context.getContainerTokenSecretManager(), null, ExecutionType.OPPORTUNISTIC)));\r\n    list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), createContainerToken(createContainerId(1), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(512, 1), context.getContainerTokenSecretManager(), null, ExecutionType.OPPORTUNISTIC)));\r\n    list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), createContainerToken(createContainerId(2), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(512, 1), context.getContainerTokenSecretManager(), null, ExecutionType.OPPORTUNISTIC)));\r\n    StartContainersRequest allRequests = StartContainersRequest.newInstance(list);\r\n    containerManager.startContainers(allRequests);\r\n    list = new ArrayList<>();\r\n    list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), createContainerToken(createContainerId(3), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(1500, 1), context.getContainerTokenSecretManager(), null, ExecutionType.GUARANTEED)));\r\n    allRequests = StartContainersRequest.newInstance(list);\r\n    containerManager.startContainers(allRequests);\r\n    BaseContainerManagerTest.waitForNMContainerState(containerManager, createContainerId(0), Arrays.asList(ContainerState.DONE, ContainerState.CONTAINER_CLEANEDUP_AFTER_KILL), 40);\r\n    Thread.sleep(5000);\r\n    int killedContainers = 0;\r\n    List<ContainerId> statList = new ArrayList<ContainerId>();\r\n    for (int i = 0; i < 4; i++) {\r\n        statList.add(createContainerId(i));\r\n    }\r\n    GetContainerStatusesRequest statRequest = GetContainerStatusesRequest.newInstance(statList);\r\n    List<ContainerStatus> containerStatuses = containerManager.getContainerStatuses(statRequest).getContainerStatuses();\r\n    for (ContainerStatus status : containerStatuses) {\r\n        if (status.getDiagnostics().contains(\"Container Killed to make room for Guaranteed Container\")) {\r\n            killedContainers++;\r\n        }\r\n        System.out.println(\"\\nStatus : [\" + status + \"]\\n\");\r\n    }\r\n    Assert.assertEquals(2, killedContainers);\r\n    Assert.assertEquals(0, metrics.getQueuedOpportunisticContainers());\r\n    Assert.assertEquals(0, metrics.getQueuedGuaranteedContainers());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "testKillOnlyRequiredOpportunisticContainers",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testKillOnlyRequiredOpportunisticContainers() throws Exception\n{\r\n    containerManager.start();\r\n    List<StartContainerRequest> list = new ArrayList<>();\r\n    for (int i = 0; i < 4; i++) {\r\n        list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), createContainerToken(createContainerId(i), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(512, 1), context.getContainerTokenSecretManager(), null, ExecutionType.OPPORTUNISTIC)));\r\n    }\r\n    StartContainersRequest allRequests = StartContainersRequest.newInstance(list);\r\n    containerManager.startContainers(allRequests);\r\n    list = new ArrayList<>();\r\n    for (int i = 4; i < 6; i++) {\r\n        list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), createContainerToken(createContainerId(i), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(512, 1), context.getContainerTokenSecretManager(), null, ExecutionType.GUARANTEED)));\r\n    }\r\n    allRequests = StartContainersRequest.newInstance(list);\r\n    containerManager.startContainers(allRequests);\r\n    int killedContainers = 0;\r\n    List<ContainerId> statList = new ArrayList<ContainerId>();\r\n    for (int i = 0; i < 6; i++) {\r\n        statList.add(createContainerId(i));\r\n        BaseContainerManagerTest.waitForNMContainerState(containerManager, statList.get(i), ContainerState.DONE, 40);\r\n    }\r\n    GetContainerStatusesRequest statRequest = GetContainerStatusesRequest.newInstance(statList);\r\n    List<ContainerStatus> containerStatuses = containerManager.getContainerStatuses(statRequest).getContainerStatuses();\r\n    for (ContainerStatus status : containerStatuses) {\r\n        if (status.getDiagnostics().contains(\"Container Killed to make room for Guaranteed Container\")) {\r\n            killedContainers++;\r\n        }\r\n        System.out.println(\"\\nStatus : [\" + status + \"]\\n\");\r\n    }\r\n    Assert.assertEquals(2, killedContainers);\r\n    Assert.assertEquals(0, metrics.getQueuedOpportunisticContainers());\r\n    Assert.assertEquals(0, metrics.getQueuedGuaranteedContainers());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "testStopQueuedContainer",
  "errType" : null,
  "containingMethodsNum" : 34,
  "sourceCodeText" : "void testStopQueuedContainer() throws Exception\n{\r\n    containerManager.start();\r\n    List<StartContainerRequest> list = new ArrayList<>();\r\n    list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), createContainerToken(createContainerId(0), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(2048, 1), context.getContainerTokenSecretManager(), null, ExecutionType.GUARANTEED)));\r\n    list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), createContainerToken(createContainerId(1), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(512, 1), context.getContainerTokenSecretManager(), null, ExecutionType.OPPORTUNISTIC)));\r\n    list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), createContainerToken(createContainerId(2), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(512, 1), context.getContainerTokenSecretManager(), null, ExecutionType.OPPORTUNISTIC)));\r\n    StartContainersRequest allRequests = StartContainersRequest.newInstance(list);\r\n    containerManager.startContainers(allRequests);\r\n    Thread.sleep(2000);\r\n    int runningContainersNo = 0;\r\n    int queuedContainersNo = 0;\r\n    List<ContainerId> statList = new ArrayList<ContainerId>();\r\n    for (int i = 0; i < 3; i++) {\r\n        statList.add(createContainerId(i));\r\n    }\r\n    GetContainerStatusesRequest statRequest = GetContainerStatusesRequest.newInstance(statList);\r\n    List<ContainerStatus> containerStatuses = containerManager.getContainerStatuses(statRequest).getContainerStatuses();\r\n    for (ContainerStatus status : containerStatuses) {\r\n        if (ContainerSubState.RUNNING == status.getContainerSubState()) {\r\n            runningContainersNo++;\r\n        } else if (ContainerSubState.SCHEDULED == status.getContainerSubState()) {\r\n            queuedContainersNo++;\r\n        }\r\n        System.out.println(\"\\nStatus : [\" + status + \"]\\n\");\r\n    }\r\n    Assert.assertEquals(1, runningContainersNo);\r\n    Assert.assertEquals(2, queuedContainersNo);\r\n    Assert.assertEquals(2, metrics.getQueuedOpportunisticContainers());\r\n    Assert.assertEquals(0, metrics.getQueuedGuaranteedContainers());\r\n    StopContainersRequest stopRequest = StopContainersRequest.newInstance(Arrays.asList(createContainerId(1)));\r\n    containerManager.stopContainers(stopRequest);\r\n    Thread.sleep(2000);\r\n    statList.clear();\r\n    for (int i = 0; i < 3; i++) {\r\n        statList.add(createContainerId(i));\r\n    }\r\n    statRequest = GetContainerStatusesRequest.newInstance(statList);\r\n    HashMap<ContainerSubState, ContainerStatus> map = new HashMap<>();\r\n    for (int i = 0; i < 10; i++) {\r\n        containerStatuses = containerManager.getContainerStatuses(statRequest).getContainerStatuses();\r\n        for (ContainerStatus status : containerStatuses) {\r\n            System.out.println(\"\\nStatus : [\" + status + \"]\\n\");\r\n            map.put(status.getContainerSubState(), status);\r\n            if (map.containsKey(ContainerSubState.RUNNING) && map.containsKey(ContainerSubState.SCHEDULED) && map.containsKey(ContainerSubState.DONE)) {\r\n                break;\r\n            }\r\n            Thread.sleep(1000);\r\n        }\r\n    }\r\n    Assert.assertEquals(1, metrics.getQueuedOpportunisticContainers());\r\n    Assert.assertEquals(createContainerId(0), map.get(ContainerSubState.RUNNING).getContainerId());\r\n    Assert.assertEquals(createContainerId(1), map.get(ContainerSubState.DONE).getContainerId());\r\n    Assert.assertEquals(createContainerId(2), map.get(ContainerSubState.SCHEDULED).getContainerId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "testPromotionOfOpportunisticContainers",
  "errType" : null,
  "containingMethodsNum" : 38,
  "sourceCodeText" : "void testPromotionOfOpportunisticContainers() throws Exception\n{\r\n    containerManager.start();\r\n    Listener listener = new Listener();\r\n    ((NodeManager.DefaultContainerStateListener) containerManager.getContext().getContainerStateTransitionListener()).addListener(listener);\r\n    List<StartContainerRequest> list = new ArrayList<>();\r\n    list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), createContainerToken(createContainerId(0), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(2048, 1), context.getContainerTokenSecretManager(), null, ExecutionType.OPPORTUNISTIC)));\r\n    list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), createContainerToken(createContainerId(1), DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(1024, 1), context.getContainerTokenSecretManager(), null, ExecutionType.OPPORTUNISTIC)));\r\n    StartContainersRequest allRequests = StartContainersRequest.newInstance(list);\r\n    containerManager.startContainers(allRequests);\r\n    Thread.sleep(5000);\r\n    List<ContainerId> statList = new ArrayList<ContainerId>();\r\n    for (int i = 0; i < 3; i++) {\r\n        statList.add(createContainerId(i));\r\n    }\r\n    GetContainerStatusesRequest statRequest = GetContainerStatusesRequest.newInstance(Arrays.asList(createContainerId(0)));\r\n    List<ContainerStatus> containerStatuses = containerManager.getContainerStatuses(statRequest).getContainerStatuses();\r\n    for (ContainerStatus status : containerStatuses) {\r\n        if (status.getContainerId().equals(createContainerId(0))) {\r\n            Assert.assertEquals(ContainerSubState.RUNNING, status.getContainerSubState());\r\n        } else {\r\n            Assert.assertEquals(ContainerSubState.SCHEDULED, status.getContainerSubState());\r\n        }\r\n    }\r\n    ContainerScheduler containerScheduler = containerManager.getContainerScheduler();\r\n    containerScheduler.resourceHandlerChain = mock(ResourceHandlerChain.class);\r\n    Assert.assertEquals(1, containerScheduler.getNumQueuedContainers());\r\n    Assert.assertEquals(0, containerScheduler.getNumQueuedGuaranteedContainers());\r\n    Assert.assertEquals(1, containerScheduler.getNumQueuedOpportunisticContainers());\r\n    Token updateToken = createContainerToken(createContainerId(1), 1, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(1024, 1), context.getContainerTokenSecretManager(), null, ExecutionType.GUARANTEED);\r\n    List<Token> updateTokens = new ArrayList<Token>();\r\n    updateTokens.add(updateToken);\r\n    ContainerUpdateRequest updateRequest = ContainerUpdateRequest.newInstance(updateTokens);\r\n    ContainerUpdateResponse updateResponse = containerManager.updateContainer(updateRequest);\r\n    Assert.assertEquals(1, updateResponse.getSuccessfullyUpdatedContainers().size());\r\n    Assert.assertEquals(0, updateResponse.getFailedRequests().size());\r\n    waitForContainerState(containerManager, createContainerId(0), org.apache.hadoop.yarn.api.records.ContainerState.COMPLETE);\r\n    waitForContainerState(containerManager, createContainerId(1), org.apache.hadoop.yarn.api.records.ContainerState.RUNNING);\r\n    containerStatuses = containerManager.getContainerStatuses(statRequest).getContainerStatuses();\r\n    Assert.assertEquals(1, containerStatuses.size());\r\n    for (ContainerStatus status : containerStatuses) {\r\n        if (org.apache.hadoop.yarn.api.records.ContainerState.RUNNING == status.getState()) {\r\n            Assert.assertEquals(ExecutionType.GUARANTEED, status.getExecutionType());\r\n        }\r\n    }\r\n    Assert.assertEquals(0, containerScheduler.getNumQueuedContainers());\r\n    Assert.assertEquals(0, metrics.getQueuedOpportunisticContainers());\r\n    Assert.assertEquals(0, metrics.getQueuedGuaranteedContainers());\r\n    List<org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState> containerStates = listener.getStates().get(createContainerId(1));\r\n    Assert.assertEquals(Arrays.asList(org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.NEW, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.SCHEDULED, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.SCHEDULED, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.RUNNING), containerStates);\r\n    List<ContainerEventType> containerEventTypes = listener.getEvents().get(createContainerId(1));\r\n    Assert.assertEquals(Arrays.asList(ContainerEventType.INIT_CONTAINER, ContainerEventType.UPDATE_CONTAINER_TOKEN, ContainerEventType.CONTAINER_LAUNCHED), containerEventTypes);\r\n    verify(containerScheduler.resourceHandlerChain, times(1)).updateContainer(any());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "testContainerUpdateExecTypeGuaranteedToOpportunistic",
  "errType" : [ "YarnException|IOException" ],
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testContainerUpdateExecTypeGuaranteedToOpportunistic() throws Exception\n{\r\n    setDelayContainers(true);\r\n    containerManager.start();\r\n    ContainerId cId = createContainerId(0);\r\n    StartContainerRequest scRequest = StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), createContainerToken(cId, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(512, 1), context.getContainerTokenSecretManager(), null));\r\n    List<StartContainerRequest> list = new ArrayList<>();\r\n    list.add(scRequest);\r\n    StartContainersRequest allRequests = StartContainersRequest.newInstance(list);\r\n    containerManager.startContainers(allRequests);\r\n    BaseContainerManagerTest.waitForNMContainerState(containerManager, cId, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.RUNNING);\r\n    List<Token> updateTokens = new ArrayList<>();\r\n    Token containerToken = createContainerToken(cId, 1, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, BuilderUtils.newResource(512, 1), context.getContainerTokenSecretManager(), null, ExecutionType.OPPORTUNISTIC);\r\n    updateTokens.add(containerToken);\r\n    ContainerUpdateRequest updateRequest = ContainerUpdateRequest.newInstance(updateTokens);\r\n    ContainerUpdateResponse updateResponse = containerManager.updateContainer(updateRequest);\r\n    Assert.assertEquals(1, updateResponse.getSuccessfullyUpdatedContainers().size());\r\n    Assert.assertTrue(updateResponse.getFailedRequests().isEmpty());\r\n    final GetContainerStatusesRequest statRequest = GetContainerStatusesRequest.newInstance(Collections.singletonList(cId));\r\n    final org.apache.hadoop.yarn.api.records.ContainerState expectedState = org.apache.hadoop.yarn.api.records.ContainerState.RUNNING;\r\n    GenericTestUtils.waitFor(() -> {\r\n        List<ContainerStatus> containerStatuses;\r\n        try {\r\n            containerStatuses = containerManager.getContainerStatuses(statRequest).getContainerStatuses();\r\n        } catch (YarnException | IOException e) {\r\n            return false;\r\n        }\r\n        Assert.assertEquals(1, containerStatuses.size());\r\n        ContainerStatus status = containerStatuses.get(0);\r\n        return (status.getState() == expectedState && status.getExecutionType() == ExecutionType.OPPORTUNISTIC);\r\n    }, 20, 10000);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setup()\n{\r\n    testRootDir.mkdirs();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    if (testRootDir.exists()) {\r\n        FileContext.getLocalFSFileContext().delete(new Path(testRootDir.getAbsolutePath()), true);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "writeNodeHealthScriptFile",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void writeNodeHealthScriptFile(String scriptStr, boolean setExecutable) throws IOException\n{\r\n    PrintWriter pw = null;\r\n    try {\r\n        FileUtil.setWritable(nodeHealthscriptFile, true);\r\n        FileUtil.setReadable(nodeHealthscriptFile, true);\r\n        pw = new PrintWriter(new FileOutputStream(nodeHealthscriptFile));\r\n        pw.println(scriptStr);\r\n        pw.flush();\r\n    } finally {\r\n        pw.close();\r\n    }\r\n    FileUtil.setExecutable(nodeHealthscriptFile, setExecutable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "createNodeHealthScript",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "NodeHealthScriptRunner createNodeHealthScript()\n{\r\n    String scriptName = \"custom\";\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.set(YarnConfiguration.NM_HEALTH_CHECK_SCRIPTS, scriptName);\r\n    String timeoutConfig = String.format(YarnConfiguration.NM_HEALTH_CHECK_SCRIPT_TIMEOUT_MS_TEMPLATE, scriptName);\r\n    conf.setLong(timeoutConfig, 1000L);\r\n    String intervalConfig = String.format(YarnConfiguration.NM_HEALTH_CHECK_SCRIPT_INTERVAL_MS_TEMPLATE, scriptName);\r\n    conf.setLong(intervalConfig, 500L);\r\n    String pathConfig = String.format(YarnConfiguration.NM_HEALTH_CHECK_SCRIPT_PATH_TEMPLATE, scriptName);\r\n    conf.set(pathConfig, nodeHealthscriptFile.getAbsolutePath());\r\n    return NodeHealthScriptRunner.newInstance(\"custom\", conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "testNodeHealthScriptShouldRun",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testNodeHealthScriptShouldRun() throws IOException\n{\r\n    assertFalse(\"Node health script should start\", NodeHealthScriptRunner.shouldRun(\"script\", nodeHealthscriptFile.getAbsolutePath()));\r\n    writeNodeHealthScriptFile(\"\", false);\r\n    assertFalse(\"Node health script should start\", NodeHealthScriptRunner.shouldRun(\"script\", nodeHealthscriptFile.getAbsolutePath()));\r\n    writeNodeHealthScriptFile(\"\", true);\r\n    assertTrue(\"Node health script should start\", NodeHealthScriptRunner.shouldRun(\"script\", nodeHealthscriptFile.getAbsolutePath()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "testNodeHealthScript",
  "errType" : null,
  "containingMethodsNum" : 23,
  "sourceCodeText" : "void testNodeHealthScript() throws Exception\n{\r\n    String errorScript = \"echo ERROR\\n echo \\\"Tracker not healthy\\\"\";\r\n    String normalScript = \"echo \\\"I am all fine\\\"\";\r\n    String timeOutScript = Shell.WINDOWS ? \"@echo off\\nping -n 4 127.0.0.1 >nul\\necho \\\"I am fine\\\"\" : \"sleep 4\\necho \\\"I am fine\\\"\";\r\n    String exitCodeScript = \"exit 127\";\r\n    Configuration conf = new Configuration();\r\n    writeNodeHealthScriptFile(normalScript, true);\r\n    NodeHealthScriptRunner nodeHealthScriptRunner = createNodeHealthScript();\r\n    nodeHealthScriptRunner.init(conf);\r\n    TimerTask timerTask = nodeHealthScriptRunner.getTimerTask();\r\n    timerTask.run();\r\n    assertTrue(\"Node health status reported unhealthy\", nodeHealthScriptRunner.isHealthy());\r\n    assertTrue(nodeHealthScriptRunner.getHealthReport().isEmpty());\r\n    writeNodeHealthScriptFile(errorScript, true);\r\n    timerTask.run();\r\n    assertFalse(\"Node health status reported healthy\", nodeHealthScriptRunner.isHealthy());\r\n    assertTrue(nodeHealthScriptRunner.getHealthReport().contains(\"ERROR\"));\r\n    writeNodeHealthScriptFile(normalScript, true);\r\n    timerTask.run();\r\n    assertTrue(\"Node health status reported unhealthy\", nodeHealthScriptRunner.isHealthy());\r\n    assertTrue(nodeHealthScriptRunner.getHealthReport().isEmpty());\r\n    writeNodeHealthScriptFile(timeOutScript, true);\r\n    timerTask.run();\r\n    assertFalse(\"Node health status reported healthy even after timeout\", nodeHealthScriptRunner.isHealthy());\r\n    assertEquals(NodeHealthScriptRunner.NODE_HEALTH_SCRIPT_TIMED_OUT_MSG, nodeHealthScriptRunner.getHealthReport());\r\n    writeNodeHealthScriptFile(exitCodeScript, true);\r\n    timerTask.run();\r\n    assertTrue(\"Node health status reported unhealthy\", nodeHealthScriptRunner.isHealthy());\r\n    assertEquals(\"\", nodeHealthScriptRunner.getHealthReport());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    emptyConf = new YarnConfiguration();\r\n    networkEnabledConf = new YarnConfiguration();\r\n    networkEnabledConf.setBoolean(YarnConfiguration.NM_NETWORK_RESOURCE_ENABLED, true);\r\n    ResourceHandlerModule.nullifyResourceHandlerChain();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testOutboundBandwidthHandler",
  "errType" : [ "ResourceHandlerException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testOutboundBandwidthHandler()\n{\r\n    try {\r\n        OutboundBandwidthResourceHandler resourceHandler = ResourceHandlerModule.initOutboundBandwidthResourceHandler(emptyConf);\r\n        Assert.assertNull(resourceHandler);\r\n        resourceHandler = ResourceHandlerModule.initOutboundBandwidthResourceHandler(networkEnabledConf);\r\n        Assert.assertNotNull(resourceHandler);\r\n        ResourceHandlerChain resourceHandlerChain = ResourceHandlerModule.getConfiguredResourceHandlerChain(networkEnabledConf, mock(Context.class));\r\n        if (resourceHandlerChain != null) {\r\n            List<ResourceHandler> resourceHandlers = resourceHandlerChain.getResourceHandlerList();\r\n            assertThat(resourceHandlers).hasSize(1);\r\n            Assert.assertTrue(resourceHandlers.get(0) == resourceHandler);\r\n        } else {\r\n            Assert.fail(\"Null returned\");\r\n        }\r\n    } catch (ResourceHandlerException e) {\r\n        Assert.fail(\"Unexpected ResourceHandlerException: \" + e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testDiskResourceHandler",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testDiskResourceHandler() throws Exception\n{\r\n    DiskResourceHandler handler = ResourceHandlerModule.initDiskResourceHandler(emptyConf);\r\n    Assert.assertNull(handler);\r\n    Configuration diskConf = new YarnConfiguration();\r\n    diskConf.setBoolean(YarnConfiguration.NM_DISK_RESOURCE_ENABLED, true);\r\n    handler = ResourceHandlerModule.initDiskResourceHandler(diskConf);\r\n    Assert.assertNotNull(handler);\r\n    ResourceHandlerChain resourceHandlerChain = ResourceHandlerModule.getConfiguredResourceHandlerChain(diskConf, mock(Context.class));\r\n    if (resourceHandlerChain != null) {\r\n        List<ResourceHandler> resourceHandlers = resourceHandlerChain.getResourceHandlerList();\r\n        assertThat(resourceHandlers).hasSize(1);\r\n        Assert.assertTrue(resourceHandlers.get(0) == handler);\r\n    } else {\r\n        Assert.fail(\"Null returned\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setUp() throws IOException\n{\r\n    fs = FileSystem.get(conf);\r\n    if (fs.exists(jsonDirDirPath)) {\r\n        fs.delete(jsonDirDirPath, true);\r\n    }\r\n    assertTrue(fs.mkdirs(jsonDirDirPath));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDown() throws IOException\n{\r\n    if (fs.exists(jsonDirDirPath)) {\r\n        fs.delete(jsonDirDirPath, true);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testNetworkMappingJsonManager",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 47,
  "sourceCodeText" : "void testNetworkMappingJsonManager() throws Exception\n{\r\n    Path jsonFilePath = new Path(jsonDirDirPath, \"test.json\");\r\n    File jsonFile = new File(jsonFilePath.toString());\r\n    NetworkTagMappingJsonManager manager = new NetworkTagMappingJsonManager();\r\n    JSONObject json = new JSONObject();\r\n    JSONArray userArray = new JSONArray();\r\n    Map<String, String> createdUsers = createUserNetworkTagIDMapping();\r\n    for (Entry<String, String> user : createdUsers.entrySet()) {\r\n        JSONObject userJson = new JSONObject();\r\n        userJson.put(\"name\", user.getKey());\r\n        userJson.put(\"network-tag-id\", user.getValue());\r\n        userArray.put(userJson);\r\n    }\r\n    JSONObject duplicateUser1 = new JSONObject();\r\n    duplicateUser1.put(\"name\", \"user1\");\r\n    duplicateUser1.put(\"network-tag-id\", \"0x88888888\");\r\n    userArray.put(duplicateUser1);\r\n    json.put(\"users\", userArray);\r\n    JSONArray groupArray = new JSONArray();\r\n    Map<String, String> createdGroups = createGroupNetworkTagIDMapping();\r\n    for (Entry<String, String> group : createdGroups.entrySet()) {\r\n        JSONObject groupJson = new JSONObject();\r\n        groupJson.put(\"name\", group.getKey());\r\n        groupJson.put(\"network-tag-id\", group.getValue());\r\n        groupArray.put(groupJson);\r\n    }\r\n    JSONObject duplicateGroup1 = new JSONObject();\r\n    duplicateGroup1.put(\"name\", \"team1\");\r\n    duplicateGroup1.put(\"network-tag-id\", \"0x20002003\");\r\n    groupArray.put(duplicateGroup1);\r\n    json.put(\"groups\", groupArray);\r\n    writeJson(jsonFile, json.toString());\r\n    conf.set(YarnConfiguration.NM_NETWORK_TAG_MAPPING_FILE_PATH, jsonFile.getAbsolutePath());\r\n    try {\r\n        manager.initialize(conf);\r\n        fail(\"Should get an exception. Becase we did not \" + \"set default-network-tag-id\");\r\n    } catch (Exception ex) {\r\n    }\r\n    json.put(\"default-network-tag-id\", \"0x99999999\");\r\n    if (fs.exists(jsonFilePath)) {\r\n        fs.delete(jsonFilePath, false);\r\n    }\r\n    assertFalse(fs.exists(jsonFilePath));\r\n    writeJson(jsonFile, json.toString());\r\n    manager.initialize(conf);\r\n    NetworkTagMapping networkTagMapping = manager.getNetworkTagMapping();\r\n    assertTrue(networkTagMapping != null);\r\n    assertTrue(\"0x99999999\".equals(networkTagMapping.getDefaultNetworkTagID()));\r\n    List<User> users = networkTagMapping.getUsers();\r\n    assertTrue(users.size() == 4);\r\n    for (int index = 0; index < users.size(); index++) {\r\n        String userName = users.get(index).getUserName();\r\n        String classId = users.get(index).getNetworkTagID();\r\n        assertTrue(createdUsers.containsValue(classId));\r\n        String createdUserName = getUserName(createdUsers, classId);\r\n        assertTrue(createdUserName.contains(userName));\r\n    }\r\n    List<Group> groups = networkTagMapping.getGroups();\r\n    assertTrue(groups.size() == 2);\r\n    for (int index = 0; index < groups.size(); index++) {\r\n        String groupName = groups.get(index).getGroupName();\r\n        String classId = groups.get(index).getNetworkTagID();\r\n        assertTrue(createdGroups.containsKey(groupName));\r\n        assertTrue(classId.equals(createdGroups.get(groupName)));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testNetworkTagIDMatchPattern",
  "errType" : [ "Exception", "Exception", "Exception" ],
  "containingMethodsNum" : 46,
  "sourceCodeText" : "void testNetworkTagIDMatchPattern() throws Exception\n{\r\n    Path jsonFilePath = new Path(jsonDirDirPath, \"test.json\");\r\n    File jsonFile = new File(jsonFilePath.toString());\r\n    NetworkTagMappingJsonManager manager = new NetworkTagMappingJsonManager();\r\n    JSONObject json = new JSONObject();\r\n    JSONArray userArray = new JSONArray();\r\n    JSONObject user1 = new JSONObject();\r\n    user1.put(\"name\", \"user1\");\r\n    user1.put(\"network-tag-id\", \"1x88888888\");\r\n    userArray.put(user1);\r\n    json.put(\"users\", userArray);\r\n    writeJson(jsonFile, json.toString());\r\n    conf.set(YarnConfiguration.NM_NETWORK_TAG_MAPPING_FILE_PATH, jsonFile.getAbsolutePath());\r\n    try {\r\n        manager.initialize(conf);\r\n        fail(\"Should get an exception. \" + \"Becase we did not set network-tag-id for user1 correctly\");\r\n    } catch (Exception ex) {\r\n        assertTrue(ex.getMessage().contains(\"User-network-tag-id mapping configuraton error.\"));\r\n    }\r\n    json.remove(\"users\");\r\n    userArray = new JSONArray();\r\n    user1 = new JSONObject();\r\n    user1.put(\"name\", \"user1\");\r\n    user1.put(\"network-tag-id\", \"0x88888888\");\r\n    userArray.put(user1);\r\n    json.put(\"users\", userArray);\r\n    JSONArray groupArray = new JSONArray();\r\n    JSONObject group1 = new JSONObject();\r\n    group1.put(\"name\", \"team1\");\r\n    group1.put(\"network-tag-id\", \"0x2000003\");\r\n    groupArray.put(group1);\r\n    json.put(\"groups\", groupArray);\r\n    if (fs.exists(jsonFilePath)) {\r\n        fs.delete(jsonFilePath, false);\r\n    }\r\n    assertFalse(fs.exists(jsonFilePath));\r\n    writeJson(jsonFile, json.toString());\r\n    try {\r\n        manager.initialize(conf);\r\n        fail(\"Should get an exception. \" + \"Becase we did not set network-tag-id for group1 correctly\");\r\n    } catch (Exception ex) {\r\n        assertTrue(ex.getMessage().contains(\"Group-network-tag-id mapping configuraton error.\"));\r\n    }\r\n    json.remove(\"groups\");\r\n    groupArray = new JSONArray();\r\n    group1 = new JSONObject();\r\n    group1.put(\"name\", \"team1\");\r\n    group1.put(\"network-tag-id\", \"0x20002003\");\r\n    groupArray.put(group1);\r\n    json.put(\"groups\", groupArray);\r\n    json.put(\"default-network-tag-id\", \"0x99\");\r\n    if (fs.exists(jsonFilePath)) {\r\n        fs.delete(jsonFilePath, false);\r\n    }\r\n    assertFalse(fs.exists(jsonFilePath));\r\n    writeJson(jsonFile, json.toString());\r\n    try {\r\n        manager.initialize(conf);\r\n        fail(\"Should get an exception. \" + \"Becase we did not set default-network-tag-id correctly\");\r\n    } catch (Exception ex) {\r\n        assertTrue(ex.getMessage().contains(\"Configuration error on default-network-tag-id.\"));\r\n    }\r\n    json.remove(\"default-network-tag-id\");\r\n    json.put(\"default-network-tag-id\", \"0x99999999\");\r\n    if (fs.exists(jsonFilePath)) {\r\n        fs.delete(jsonFilePath, false);\r\n    }\r\n    assertFalse(fs.exists(jsonFilePath));\r\n    writeJson(jsonFile, json.toString());\r\n    manager.initialize(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "writeJson",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void writeJson(File jsonFile, String jsonStr) throws IOException\n{\r\n    Writer writer = null;\r\n    try {\r\n        writer = new FileWriter(jsonFile);\r\n        writer.write(jsonStr);\r\n    } finally {\r\n        if (writer != null) {\r\n            writer.close();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createUserNetworkTagIDMapping",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Map<String, String> createUserNetworkTagIDMapping()\n{\r\n    Map<String, String> classIdMap = new LinkedHashMap<>();\r\n    classIdMap.put(\"user1\", \"0x10001001\");\r\n    classIdMap.put(\"user2\", \"0x10001002\");\r\n    classIdMap.put(\"user3,user4\", \"0x10001003\");\r\n    return classIdMap;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createGroupNetworkTagIDMapping",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Map<String, String> createGroupNetworkTagIDMapping()\n{\r\n    Map<String, String> classIdMap = new LinkedHashMap<>();\r\n    classIdMap.put(\"team1\", \"0x20002001\");\r\n    classIdMap.put(\"team2\", \"0x20002002\");\r\n    return classIdMap;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getUserName",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String getUserName(Map<String, String> userMapping, String classId)\n{\r\n    for (Entry<String, String> o : userMapping.entrySet()) {\r\n        if (o.getValue().equals(classId)) {\r\n            return o.getKey();\r\n        }\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setup()\n{\r\n    TESTROOTDIR.mkdirs();\r\n    testLogDir.mkdir();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDown()\n{\r\n    FileUtil.fullyDelete(TESTROOTDIR);\r\n    FileUtil.fullyDelete(testLogDir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "startNMWebAppServer",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "int startNMWebAppServer(String webAddr)\n{\r\n    Configuration conf = new Configuration();\r\n    Context nmContext = new NodeManager.NMContext(null, null, null, null, null, false, conf);\r\n    ResourceView resourceView = new ResourceView() {\r\n\r\n        @Override\r\n        public long getVmemAllocatedForContainers() {\r\n            return 0;\r\n        }\r\n\r\n        @Override\r\n        public long getPmemAllocatedForContainers() {\r\n            return 0;\r\n        }\r\n\r\n        @Override\r\n        public long getVCoresAllocatedForContainers() {\r\n            return 0;\r\n        }\r\n\r\n        @Override\r\n        public boolean isVmemCheckEnabled() {\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        public boolean isPmemCheckEnabled() {\r\n            return true;\r\n        }\r\n    };\r\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, TESTROOTDIR.getAbsolutePath());\r\n    conf.set(YarnConfiguration.NM_LOG_DIRS, testLogDir.getAbsolutePath());\r\n    NodeHealthCheckerService healthChecker = createNodeHealthCheckerService();\r\n    healthChecker.init(conf);\r\n    LocalDirsHandlerService dirsHandler = healthChecker.getDiskHandler();\r\n    conf.set(YarnConfiguration.NM_WEBAPP_ADDRESS, webAddr);\r\n    server = new WebServer(nmContext, resourceView, new ApplicationACLsManager(conf), dirsHandler);\r\n    try {\r\n        server.init(conf);\r\n        server.start();\r\n        return server.getPort();\r\n    } finally {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "createNodeHealthCheckerService",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeHealthCheckerService createNodeHealthCheckerService()\n{\r\n    LocalDirsHandlerService dirsHandler = new LocalDirsHandlerService();\r\n    return new NodeHealthCheckerService(dirsHandler);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testWebServerWithServlet",
  "errType" : [ "Throwable", "Exception" ],
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testWebServerWithServlet()\n{\r\n    int port = startNMWebAppServer(\"0.0.0.0\");\r\n    LOG.info(\"bind to port: \" + port);\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"ws://localhost:\").append(port).append(\"/container/abc/\");\r\n    String dest = sb.toString();\r\n    WebSocketClient client = new WebSocketClient();\r\n    try {\r\n        ContainerShellClientSocketTest socket = new ContainerShellClientSocketTest();\r\n        client.start();\r\n        URI echoUri = new URI(dest);\r\n        Future<Session> future = client.connect(socket, echoUri);\r\n        Session session = future.get();\r\n        session.getRemote().sendString(\"hello world\");\r\n        session.close();\r\n        client.stop();\r\n    } catch (Throwable t) {\r\n        LOG.error(\"Failed to connect WebSocket and send message to server\", t);\r\n    } finally {\r\n        try {\r\n            client.stop();\r\n            server.close();\r\n        } catch (Exception e) {\r\n            LOG.error(\"Failed to close client\", e);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testContainerShellWebSocket",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testContainerShellWebSocket()\n{\r\n    Context nm = mock(Context.class);\r\n    Session session = mock(Session.class);\r\n    Container container = mock(Container.class);\r\n    UpgradeRequest request = mock(UpgradeRequest.class);\r\n    ApplicationACLsManager aclManager = mock(ApplicationACLsManager.class);\r\n    ContainerShellWebSocket.init(nm);\r\n    ContainerShellWebSocket ws = new ContainerShellWebSocket();\r\n    List<String> names = new ArrayList<>();\r\n    names.add(\"foobar\");\r\n    Map<String, List<String>> mockParameters = new HashMap<>();\r\n    mockParameters.put(\"user.name\", names);\r\n    when(session.getUpgradeRequest()).thenReturn(request);\r\n    when(request.getParameterMap()).thenReturn(mockParameters);\r\n    when(container.getUser()).thenReturn(\"foobar\");\r\n    when(nm.getApplicationACLsManager()).thenReturn(aclManager);\r\n    when(aclManager.areACLsEnabled()).thenReturn(false);\r\n    try {\r\n        boolean authorized = ws.checkAuthorization(session, container);\r\n        Assert.assertTrue(\"Not authorized\", authorized);\r\n    } catch (IOException e) {\r\n        Assert.fail(\"Should not throw exception.\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    super.setUp();\r\n    GuiceServletConfig.setInjector(Guice.createInjector(new WebServletModule()));\r\n    testRootDir.mkdirs();\r\n    testLogDir.mkdir();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "cleanup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void cleanup()\n{\r\n    FileUtil.fullyDelete(testRootDir);\r\n    FileUtil.fullyDelete(testLogDir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeAuxServicesNone",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testNodeAuxServicesNone() throws Exception\n{\r\n    addAuxServices();\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"node\").path(AUX_SERVICES_PATH).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON_TYPE + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    JSONObject json = response.getEntity(JSONObject.class);\r\n    assertEquals(\"aux services isn't empty\", new JSONObject().toString(), json.get(\"services\").toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "addAuxServices",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void addAuxServices(AuxServiceRecord... records)\n{\r\n    AuxServices auxServices = mock(AuxServices.class);\r\n    when(auxServices.getServiceRecords()).thenReturn(Arrays.asList(records));\r\n    when(auxServices.isManifestEnabled()).thenReturn(true);\r\n    nmContext.setAuxServices(auxServices);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeAuxServices",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testNodeAuxServices() throws Exception\n{\r\n    testNodeHelper(AUX_SERVICES_PATH, MediaType.APPLICATION_JSON);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeAuxServicesSlash",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testNodeAuxServicesSlash() throws Exception\n{\r\n    testNodeHelper(AUX_SERVICES_PATH + \"/\", MediaType.APPLICATION_JSON);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeAuxServicesDefault",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testNodeAuxServicesDefault() throws Exception\n{\r\n    testNodeHelper(AUX_SERVICES_PATH + \"/\", \"\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeHelper",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testNodeHelper(String path, String media) throws Exception\n{\r\n    AuxServiceRecord r1 = new AuxServiceRecord().name(\"name1\").launchTime(new Date(123L)).version(\"1\");\r\n    AuxServiceRecord r2 = new AuxServiceRecord().name(\"name2\").launchTime(new Date(456L));\r\n    addAuxServices(r1, r2);\r\n    WebResource r = resource();\r\n    client().addFilter(new LoggingFilter());\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"node\").path(path).accept(media).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON_TYPE + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    JSONObject json = response.getEntity(JSONObject.class);\r\n    JSONObject info = json.getJSONObject(\"services\");\r\n    assertEquals(\"incorrect number of elements\", 1, info.length());\r\n    JSONArray auxInfo = info.getJSONArray(\"service\");\r\n    assertEquals(\"incorrect number of elements\", 2, auxInfo.length());\r\n    verifyNodeAuxServiceInfo(auxInfo.getJSONObject(0), r1);\r\n    verifyNodeAuxServiceInfo(auxInfo.getJSONObject(1), r2);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeAuxServicesXML",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testNodeAuxServicesXML() throws Exception\n{\r\n    AuxServiceRecord r1 = new AuxServiceRecord().name(\"name1\").launchTime(new Date(123L)).version(\"1\");\r\n    AuxServiceRecord r2 = new AuxServiceRecord().name(\"name2\").launchTime(new Date(456L));\r\n    addAuxServices(r1, r2);\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"node\").path(AUX_SERVICES_PATH).accept(MediaType.APPLICATION_XML).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_XML_TYPE + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    String xml = response.getEntity(String.class);\r\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\r\n    DocumentBuilder db = dbf.newDocumentBuilder();\r\n    InputSource is = new InputSource();\r\n    is.setCharacterStream(new StringReader(xml));\r\n    Document dom = db.parse(is);\r\n    NodeList nodes = dom.getElementsByTagName(\"service\");\r\n    assertEquals(\"incorrect number of elements\", 2, nodes.getLength());\r\n    verifyAuxServicesInfoXML(nodes, r1, r2);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testAuxServicesDisabled",
  "errType" : [ "UniformInterfaceException" ],
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testAuxServicesDisabled() throws JSONException, Exception\n{\r\n    AuxServices auxServices = mock(AuxServices.class);\r\n    when(auxServices.isManifestEnabled()).thenReturn(false);\r\n    nmContext.setAuxServices(auxServices);\r\n    WebResource r = resource();\r\n    try {\r\n        r.path(\"ws\").path(\"v1\").path(\"node\").path(AUX_SERVICES_PATH).accept(MediaType.APPLICATION_JSON).get(JSONObject.class);\r\n        fail(\"should have thrown exception on invalid user query\");\r\n    } catch (UniformInterfaceException ue) {\r\n        ClientResponse response = ue.getResponse();\r\n        assertResponseStatusCode(ClientResponse.Status.BAD_REQUEST, response.getStatusInfo());\r\n        assertEquals(MediaType.APPLICATION_JSON_TYPE + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n        JSONObject msg = response.getEntity(JSONObject.class);\r\n        JSONObject exception = msg.getJSONObject(\"RemoteException\");\r\n        assertEquals(\"incorrect number of elements\", 3, exception.length());\r\n        String message = exception.getString(\"message\");\r\n        String type = exception.getString(\"exception\");\r\n        String classname = exception.getString(\"javaClassName\");\r\n        WebServicesTestUtils.checkStringMatch(\"exception message\", \"java.lang.Exception: Auxiliary services manifest is not enabled\", message);\r\n        WebServicesTestUtils.checkStringMatch(\"exception type\", \"BadRequestException\", type);\r\n        WebServicesTestUtils.checkStringMatch(\"exception classname\", \"org.apache.hadoop.yarn.webapp.BadRequestException\", classname);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "verifyAuxServicesInfoXML",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void verifyAuxServicesInfoXML(NodeList nodes, AuxServiceRecord... records)\n{\r\n    for (int i = 0; i < nodes.getLength(); i++) {\r\n        Element element = (Element) nodes.item(i);\r\n        verifyNodeAuxServiceInfoGeneric(records[i], WebServicesTestUtils.getXmlString(element, \"name\"), WebServicesTestUtils.getXmlString(element, \"version\"), WebServicesTestUtils.getXmlString(element, \"startTime\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "verifyNodeAuxServiceInfo",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void verifyNodeAuxServiceInfo(JSONObject info, AuxServiceRecord r) throws Exception\n{\r\n    String version = null;\r\n    if (info.has(\"version\")) {\r\n        version = info.getString(\"version\");\r\n    }\r\n    assertEquals(\"incorrect number of elements\", version == null ? 2 : 3, info.length());\r\n    verifyNodeAuxServiceInfoGeneric(r, info.getString(\"name\"), version, info.getString(\"startTime\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "verifyNodeAuxServiceInfoGeneric",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void verifyNodeAuxServiceInfoGeneric(AuxServiceRecord r, String name, String version, String startTime)\n{\r\n    assertEquals(r.getName(), name);\r\n    assertEquals(r.getVersion(), version);\r\n    assertEquals(\"startTime\", dateFormat.format(r.getLaunchTime()), startTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testLocalizationRequest",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testLocalizationRequest() throws Exception\n{\r\n    WrappedContainer wc = null;\r\n    try {\r\n        wc = new WrappedContainer(7, 314159265358979L, 4344, \"yak\");\r\n        assertEquals(ContainerState.NEW, wc.c.getContainerState());\r\n        wc.initContainer();\r\n        ResourcesRequestedMatcher matchesReq = new ResourcesRequestedMatcher(wc.localResources, EnumSet.of(LocalResourceVisibility.PUBLIC, LocalResourceVisibility.PRIVATE, LocalResourceVisibility.APPLICATION));\r\n        verify(wc.localizerBus).handle(argThat(matchesReq));\r\n        assertEquals(ContainerState.LOCALIZING, wc.c.getContainerState());\r\n    } finally {\r\n        if (wc != null) {\r\n            wc.finished();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testLocalizationLaunch",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testLocalizationLaunch() throws Exception\n{\r\n    WrappedContainer wc = null;\r\n    try {\r\n        wc = new WrappedContainer(8, 314159265358979L, 4344, \"yak\");\r\n        assertEquals(ContainerState.NEW, wc.c.getContainerState());\r\n        wc.initContainer();\r\n        Map<Path, List<String>> localPaths = wc.localizeResources();\r\n        assertEquals(ContainerState.SCHEDULED, wc.c.getContainerState());\r\n        assertNotNull(wc.c.getLocalizedResources());\r\n        for (Entry<Path, List<String>> loc : wc.c.getLocalizedResources().entrySet()) {\r\n            assertEquals(localPaths.remove(loc.getKey()), loc.getValue());\r\n        }\r\n        assertTrue(localPaths.isEmpty());\r\n        final WrappedContainer wcf = wc;\r\n        ArgumentMatcher<ContainersLauncherEvent> matchesContainerLaunch = event -> wcf.c == event.getContainer();\r\n        verify(wc.launcherBus).handle(argThat(matchesContainerLaunch));\r\n    } finally {\r\n        if (wc != null) {\r\n            wc.finished();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testExternalKill",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testExternalKill() throws Exception\n{\r\n    WrappedContainer wc = null;\r\n    try {\r\n        wc = new WrappedContainer(13, 314159265358979L, 4344, \"yak\");\r\n        wc.initContainer();\r\n        wc.localizeResources();\r\n        int running = metrics.getRunningContainers();\r\n        wc.launchContainer();\r\n        assertEquals(running + 1, metrics.getRunningContainers());\r\n        reset(wc.localizerBus);\r\n        wc.containerKilledOnRequest();\r\n        assertEquals(ContainerState.EXITED_WITH_FAILURE, wc.c.getContainerState());\r\n        assertNull(wc.c.getLocalizedResources());\r\n        verifyCleanupCall(wc);\r\n        int failed = metrics.getFailedContainers();\r\n        wc.containerResourcesCleanup();\r\n        assertEquals(ContainerState.DONE, wc.c.getContainerState());\r\n        assertEquals(failed + 1, metrics.getFailedContainers());\r\n        assertEquals(running, metrics.getRunningContainers());\r\n    } finally {\r\n        if (wc != null) {\r\n            wc.finished();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testDockerContainerExternalKill",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testDockerContainerExternalKill() throws Exception\n{\r\n    WrappedContainer wc = null;\r\n    try {\r\n        wc = new WrappedContainer(13, 314159265358979L, 4344, \"yak\");\r\n        wc.setupDockerContainerEnv();\r\n        wc.initContainer();\r\n        wc.localizeResources();\r\n        int running = metrics.getRunningContainers();\r\n        wc.launchContainer();\r\n        assertEquals(running + 1, metrics.getRunningContainers());\r\n        reset(wc.localizerBus);\r\n        wc.containerKilledOnRequest();\r\n        assertEquals(ContainerState.EXITED_WITH_FAILURE, wc.c.getContainerState());\r\n        assertNull(wc.c.getLocalizedResources());\r\n        verifyCleanupCall(wc);\r\n        int failed = metrics.getFailedContainers();\r\n        wc.dockerContainerResourcesCleanup();\r\n        assertEquals(ContainerState.DONE, wc.c.getContainerState());\r\n        assertEquals(failed + 1, metrics.getFailedContainers());\r\n        assertEquals(running, metrics.getRunningContainers());\r\n    } finally {\r\n        if (wc != null) {\r\n            wc.finished();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testContainerPauseAndResume",
  "errType" : null,
  "containingMethodsNum" : 23,
  "sourceCodeText" : "void testContainerPauseAndResume() throws Exception\n{\r\n    WrappedContainer wc = null;\r\n    try {\r\n        wc = new WrappedContainer(13, 314159265358979L, 4344, \"yak\");\r\n        wc.initContainer();\r\n        wc.localizeResources();\r\n        int running = metrics.getRunningContainers();\r\n        int paused = metrics.getPausedContainers();\r\n        wc.launchContainer();\r\n        assertEquals(running + 1, metrics.getRunningContainers());\r\n        reset(wc.localizerBus);\r\n        wc.pauseContainer();\r\n        assertEquals(ContainerState.PAUSED, wc.c.getContainerState());\r\n        assertEquals(paused + 1, metrics.getPausedContainers());\r\n        wc.resumeContainer();\r\n        assertEquals(paused, metrics.getPausedContainers());\r\n        assertEquals(ContainerState.RUNNING, wc.c.getContainerState());\r\n        wc.containerKilledOnRequest();\r\n        assertEquals(ContainerState.EXITED_WITH_FAILURE, wc.c.getContainerState());\r\n        assertNull(wc.c.getLocalizedResources());\r\n        verifyCleanupCall(wc);\r\n        int failed = metrics.getFailedContainers();\r\n        wc.containerResourcesCleanup();\r\n        assertEquals(ContainerState.DONE, wc.c.getContainerState());\r\n        assertEquals(failed + 1, metrics.getFailedContainers());\r\n        assertEquals(running, metrics.getRunningContainers());\r\n    } finally {\r\n        if (wc != null) {\r\n            wc.finished();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testCleanupOnFailure",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testCleanupOnFailure() throws Exception\n{\r\n    WrappedContainer wc = null;\r\n    try {\r\n        wc = new WrappedContainer(10, 314159265358979L, 4344, \"yak\");\r\n        wc.initContainer();\r\n        wc.localizeResources();\r\n        wc.launchContainer();\r\n        reset(wc.localizerBus);\r\n        wc.containerFailed(ExitCode.FORCE_KILLED.getExitCode());\r\n        assertEquals(ContainerState.EXITED_WITH_FAILURE, wc.c.getContainerState());\r\n        assertNull(wc.c.getLocalizedResources());\r\n        verifyCleanupCall(wc);\r\n    } finally {\r\n        if (wc != null) {\r\n            wc.finished();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testDockerContainerCleanupOnFailure",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testDockerContainerCleanupOnFailure() throws Exception\n{\r\n    WrappedContainer wc = null;\r\n    try {\r\n        wc = new WrappedContainer(10, 314159265358979L, 4344, \"yak\");\r\n        wc.setupDockerContainerEnv();\r\n        wc.initContainer();\r\n        wc.localizeResources();\r\n        wc.launchContainer();\r\n        reset(wc.localizerBus);\r\n        wc.containerFailed(ExitCode.FORCE_KILLED.getExitCode());\r\n        assertEquals(ContainerState.EXITED_WITH_FAILURE, wc.c.getContainerState());\r\n        assertNull(wc.c.getLocalizedResources());\r\n        verifyCleanupCall(wc);\r\n        wc.dockerContainerResourcesCleanup();\r\n    } finally {\r\n        if (wc != null) {\r\n            wc.finished();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testCleanupOnSuccess",
  "errType" : null,
  "containingMethodsNum" : 36,
  "sourceCodeText" : "void testCleanupOnSuccess() throws Exception\n{\r\n    WrappedContainer wc = null;\r\n    try {\r\n        wc = new WrappedContainer(11, 314159265358979L, 4344, \"yak\");\r\n        wc.initContainer();\r\n        wc.localizeResources();\r\n        int running = metrics.getRunningContainers();\r\n        wc.launchContainer();\r\n        assertEquals(running + 1, metrics.getRunningContainers());\r\n        reset(wc.localizerBus);\r\n        wc.containerSuccessful();\r\n        assertEquals(ContainerState.EXITED_WITH_SUCCESS, wc.c.getContainerState());\r\n        assertNull(wc.c.getLocalizedResources());\r\n        verifyCleanupCall(wc);\r\n        int completed = metrics.getCompletedContainers();\r\n        wc.containerResourcesCleanup();\r\n        assertEquals(ContainerState.DONE, wc.c.getContainerState());\r\n        assertEquals(completed + 1, metrics.getCompletedContainers());\r\n        assertEquals(running, metrics.getRunningContainers());\r\n        ContainerEventType e1 = wc.initStateToEvent.get(ContainerState.NEW);\r\n        ContainerState s2 = wc.eventToFinalState.get(e1);\r\n        ContainerEventType e2 = wc.initStateToEvent.get(s2);\r\n        ContainerState s3 = wc.eventToFinalState.get(e2);\r\n        ContainerEventType e3 = wc.initStateToEvent.get(s3);\r\n        ContainerState s4 = wc.eventToFinalState.get(e3);\r\n        ContainerEventType e4 = wc.initStateToEvent.get(s4);\r\n        ContainerState s5 = wc.eventToFinalState.get(e4);\r\n        ContainerEventType e5 = wc.initStateToEvent.get(s5);\r\n        ContainerState s6 = wc.eventToFinalState.get(e5);\r\n        Assert.assertEquals(ContainerState.LOCALIZING, s2);\r\n        Assert.assertEquals(ContainerState.SCHEDULED, s3);\r\n        Assert.assertEquals(ContainerState.RUNNING, s4);\r\n        Assert.assertEquals(ContainerState.EXITED_WITH_SUCCESS, s5);\r\n        Assert.assertEquals(ContainerState.DONE, s6);\r\n        Assert.assertEquals(ContainerEventType.INIT_CONTAINER, e1);\r\n        Assert.assertEquals(ContainerEventType.RESOURCE_LOCALIZED, e2);\r\n        Assert.assertEquals(ContainerEventType.CONTAINER_LAUNCHED, e3);\r\n        Assert.assertEquals(ContainerEventType.CONTAINER_EXITED_WITH_SUCCESS, e4);\r\n        Assert.assertEquals(ContainerEventType.CONTAINER_RESOURCES_CLEANEDUP, e5);\r\n    } finally {\r\n        if (wc != null) {\r\n            wc.finished();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testDockerContainerCleanupOnSuccess",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testDockerContainerCleanupOnSuccess() throws Exception\n{\r\n    WrappedContainer wc = null;\r\n    try {\r\n        wc = new WrappedContainer(11, 314159265358979L, 4344, \"yak\");\r\n        wc.setupDockerContainerEnv();\r\n        wc.initContainer();\r\n        wc.localizeResources();\r\n        int running = metrics.getRunningContainers();\r\n        wc.launchContainer();\r\n        assertEquals(running + 1, metrics.getRunningContainers());\r\n        reset(wc.localizerBus);\r\n        wc.containerSuccessful();\r\n        assertEquals(ContainerState.EXITED_WITH_SUCCESS, wc.c.getContainerState());\r\n        assertNull(wc.c.getLocalizedResources());\r\n        verifyCleanupCall(wc);\r\n        int completed = metrics.getCompletedContainers();\r\n        wc.dockerContainerResourcesCleanup();\r\n        assertEquals(ContainerState.DONE, wc.c.getContainerState());\r\n        assertEquals(completed + 1, metrics.getCompletedContainers());\r\n        assertEquals(running, metrics.getRunningContainers());\r\n    } finally {\r\n        if (wc != null) {\r\n            wc.finished();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testInitWhileDone",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testInitWhileDone() throws Exception\n{\r\n    WrappedContainer wc = null;\r\n    try {\r\n        wc = new WrappedContainer(6, 314159265358979L, 4344, \"yak\");\r\n        wc.initContainer();\r\n        wc.localizeResources();\r\n        wc.launchContainer();\r\n        reset(wc.localizerBus);\r\n        wc.containerSuccessful();\r\n        wc.containerResourcesCleanup();\r\n        assertEquals(ContainerState.DONE, wc.c.getContainerState());\r\n        verifyOutofBandHeartBeat(wc);\r\n        assertNull(wc.c.getLocalizedResources());\r\n        wc.initContainer();\r\n        assertEquals(ContainerState.DONE, wc.c.getContainerState());\r\n        assertNull(wc.c.getLocalizedResources());\r\n        verifyCleanupCall(wc);\r\n    } finally {\r\n        if (wc != null) {\r\n            wc.finished();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testDockerContainerInitWhileDone",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testDockerContainerInitWhileDone() throws Exception\n{\r\n    WrappedContainer wc = null;\r\n    try {\r\n        wc = new WrappedContainer(6, 314159265358979L, 4344, \"yak\");\r\n        wc.setupDockerContainerEnv();\r\n        wc.initContainer();\r\n        wc.localizeResources();\r\n        wc.launchContainer();\r\n        reset(wc.localizerBus);\r\n        wc.containerSuccessful();\r\n        wc.dockerContainerResourcesCleanup();\r\n        assertEquals(ContainerState.DONE, wc.c.getContainerState());\r\n        verifyOutofBandHeartBeat(wc);\r\n        assertNull(wc.c.getLocalizedResources());\r\n        wc.initContainer();\r\n        assertEquals(ContainerState.DONE, wc.c.getContainerState());\r\n        assertNull(wc.c.getLocalizedResources());\r\n        verifyCleanupCall(wc);\r\n    } finally {\r\n        if (wc != null) {\r\n            wc.finished();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testLocalizationFailureAtDone",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testLocalizationFailureAtDone() throws Exception\n{\r\n    WrappedContainer wc = null;\r\n    try {\r\n        wc = new WrappedContainer(6, 314159265358979L, 4344, \"yak\");\r\n        wc.initContainer();\r\n        wc.localizeResources();\r\n        wc.launchContainer();\r\n        reset(wc.localizerBus);\r\n        wc.containerSuccessful();\r\n        wc.containerResourcesCleanup();\r\n        assertEquals(ContainerState.DONE, wc.c.getContainerState());\r\n        verifyOutofBandHeartBeat(wc);\r\n        assertNull(wc.c.getLocalizedResources());\r\n        wc.resourceFailedContainer();\r\n        assertEquals(ContainerState.DONE, wc.c.getContainerState());\r\n        assertNull(wc.c.getLocalizedResources());\r\n        verifyCleanupCall(wc);\r\n    } finally {\r\n        if (wc != null) {\r\n            wc.finished();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testDockerContainerLocalizationFailureAtDone",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testDockerContainerLocalizationFailureAtDone() throws Exception\n{\r\n    WrappedContainer wc = null;\r\n    try {\r\n        wc = new WrappedContainer(6, 314159265358979L, 4344, \"yak\");\r\n        wc.setupDockerContainerEnv();\r\n        wc.initContainer();\r\n        wc.localizeResources();\r\n        wc.launchContainer();\r\n        reset(wc.localizerBus);\r\n        wc.containerSuccessful();\r\n        wc.dockerContainerResourcesCleanup();\r\n        assertEquals(ContainerState.DONE, wc.c.getContainerState());\r\n        verifyOutofBandHeartBeat(wc);\r\n        assertNull(wc.c.getLocalizedResources());\r\n        wc.resourceFailedContainer();\r\n        assertEquals(ContainerState.DONE, wc.c.getContainerState());\r\n        assertNull(wc.c.getLocalizedResources());\r\n        verifyCleanupCall(wc);\r\n    } finally {\r\n        if (wc != null) {\r\n            wc.finished();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testLocalizationFailureWhileRunning",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testLocalizationFailureWhileRunning() throws Exception\n{\r\n    WrappedContainer wc = null;\r\n    try {\r\n        wc = new WrappedContainer(6, 314159265358979L, 4344, \"yak\");\r\n        wc.initContainer();\r\n        wc.localizeResources();\r\n        wc.launchContainer();\r\n        reset(wc.localizerBus);\r\n        assertEquals(ContainerState.RUNNING, wc.c.getContainerState());\r\n        wc.handleContainerResourceFailedEvent();\r\n    } finally {\r\n        if (wc != null) {\r\n            wc.finished();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testCleanupOnKillRequest",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testCleanupOnKillRequest() throws Exception\n{\r\n    WrappedContainer wc = null;\r\n    try {\r\n        wc = new WrappedContainer(12, 314159265358979L, 4344, \"yak\");\r\n        wc.initContainer();\r\n        wc.localizeResources();\r\n        wc.launchContainer();\r\n        reset(wc.localizerBus);\r\n        wc.killContainer();\r\n        assertEquals(ContainerState.KILLING, wc.c.getContainerState());\r\n        assertNull(wc.c.getLocalizedResources());\r\n        wc.containerKilledOnRequest();\r\n        verifyCleanupCall(wc);\r\n    } finally {\r\n        if (wc != null) {\r\n            wc.finished();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testKillOnNew",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testKillOnNew() throws Exception\n{\r\n    WrappedContainer wc = null;\r\n    try {\r\n        wc = new WrappedContainer(13, 314159265358979L, 4344, \"yak\");\r\n        assertEquals(ContainerState.NEW, wc.c.getContainerState());\r\n        int killed = metrics.getKilledContainers();\r\n        wc.killContainer();\r\n        assertEquals(ContainerState.DONE, wc.c.getContainerState());\r\n        verifyOutofBandHeartBeat(wc);\r\n        assertEquals(ContainerExitStatus.KILLED_BY_RESOURCEMANAGER, wc.c.cloneAndGetContainerStatus().getExitStatus());\r\n        assertTrue(wc.c.cloneAndGetContainerStatus().getDiagnostics().contains(\"KillRequest\"));\r\n        assertEquals(killed + 1, metrics.getKilledContainers());\r\n        ContainerMetrics containerMetrics = ContainerMetrics.forContainer(wc.cId, 1, 5000);\r\n        Assert.assertEquals(ContainerExitStatus.KILLED_BY_RESOURCEMANAGER, containerMetrics.exitCode.value());\r\n        Assert.assertTrue(containerMetrics.startTime.value() > 0);\r\n        Assert.assertTrue(containerMetrics.finishTime.value() >= containerMetrics.startTime.value());\r\n        Assert.assertEquals(ContainerEventType.KILL_CONTAINER, wc.initStateToEvent.get(ContainerState.NEW));\r\n        Assert.assertEquals(ContainerState.DONE, wc.eventToFinalState.get(ContainerEventType.KILL_CONTAINER));\r\n    } finally {\r\n        if (wc != null) {\r\n            wc.finished();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testKillOnLocalizing",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testKillOnLocalizing() throws Exception\n{\r\n    WrappedContainer wc = null;\r\n    try {\r\n        wc = new WrappedContainer(14, 314159265358979L, 4344, \"yak\");\r\n        wc.initContainer();\r\n        assertEquals(ContainerState.LOCALIZING, wc.c.getContainerState());\r\n        wc.killContainer();\r\n        assertEquals(ContainerState.KILLING, wc.c.getContainerState());\r\n        assertEquals(ContainerExitStatus.KILLED_BY_RESOURCEMANAGER, wc.c.cloneAndGetContainerStatus().getExitStatus());\r\n        assertTrue(wc.c.cloneAndGetContainerStatus().getDiagnostics().contains(\"KillRequest\"));\r\n        int killed = metrics.getKilledContainers();\r\n        wc.containerResourcesCleanup();\r\n        assertEquals(ContainerState.DONE, wc.c.getContainerState());\r\n        assertEquals(killed + 1, metrics.getKilledContainers());\r\n    } finally {\r\n        if (wc != null) {\r\n            wc.finished();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testKillOnLocalizationFailed",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testKillOnLocalizationFailed() throws Exception\n{\r\n    WrappedContainer wc = null;\r\n    try {\r\n        wc = new WrappedContainer(15, 314159265358979L, 4344, \"yak\");\r\n        wc.initContainer();\r\n        wc.failLocalizeResources(wc.getLocalResourceCount());\r\n        assertEquals(ContainerState.LOCALIZATION_FAILED, wc.c.getContainerState());\r\n        assertNull(wc.c.getLocalizedResources());\r\n        wc.killContainer();\r\n        assertEquals(ContainerState.LOCALIZATION_FAILED, wc.c.getContainerState());\r\n        assertNull(wc.c.getLocalizedResources());\r\n        verifyCleanupCall(wc);\r\n        int failed = metrics.getFailedContainers();\r\n        wc.containerResourcesCleanup();\r\n        assertEquals(ContainerState.DONE, wc.c.getContainerState());\r\n        assertEquals(failed + 1, metrics.getFailedContainers());\r\n    } finally {\r\n        if (wc != null) {\r\n            wc.finished();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testKillOnLocalizedWhenContainerNotLaunchedContainerKilled",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testKillOnLocalizedWhenContainerNotLaunchedContainerKilled() throws Exception\n{\r\n    WrappedContainer wc = null;\r\n    try {\r\n        wc = new WrappedContainer(17, 314159265358979L, 4344, \"yak\");\r\n        wc.initContainer();\r\n        wc.localizeResources();\r\n        assertEquals(ContainerState.SCHEDULED, wc.c.getContainerState());\r\n        ContainerLaunch launcher = wc.launcher.running.get(wc.c.getContainerId());\r\n        wc.killContainer();\r\n        assertEquals(ContainerState.KILLING, wc.c.getContainerState());\r\n        LocalizationCleanupMatcher cleanupResources = new LocalizationCleanupMatcher(wc.c);\r\n        verify(wc.localizerBus, times(0)).handle(argThat(cleanupResources));\r\n        verify(wc.launcherBus).handle(refEq(new ContainersLauncherEvent(wc.c, ContainersLauncherEventType.CLEANUP_CONTAINER), \"timestamp\"));\r\n        launcher.call();\r\n        wc.drainDispatcherEvents();\r\n        assertEquals(ContainerState.CONTAINER_CLEANEDUP_AFTER_KILL, wc.c.getContainerState());\r\n        assertNull(wc.c.getLocalizedResources());\r\n        verifyCleanupCall(wc);\r\n        int killed = metrics.getKilledContainers();\r\n        wc.c.handle(new ContainerEvent(wc.c.getContainerId(), ContainerEventType.CONTAINER_RESOURCES_CLEANEDUP));\r\n        assertEquals(ContainerState.DONE, wc.c.getContainerState());\r\n        assertEquals(killed + 1, metrics.getKilledContainers());\r\n        assertEquals(0, metrics.getRunningContainers());\r\n        assertEquals(0, wc.launcher.running.size());\r\n    } finally {\r\n        if (wc != null) {\r\n            wc.finished();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testDockerKillOnLocalizedWhenContainerNotLaunchedContainerKilled",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testDockerKillOnLocalizedWhenContainerNotLaunchedContainerKilled() throws Exception\n{\r\n    WrappedContainer wc = null;\r\n    try {\r\n        wc = new WrappedContainer(17, 314159265358979L, 4344, \"yak\");\r\n        wc.setupDockerContainerEnv();\r\n        wc.initContainer();\r\n        wc.localizeResources();\r\n        assertEquals(ContainerState.SCHEDULED, wc.c.getContainerState());\r\n        ContainerLaunch launcher = wc.launcher.running.get(wc.c.getContainerId());\r\n        wc.killContainer();\r\n        assertEquals(ContainerState.KILLING, wc.c.getContainerState());\r\n        launcher.call();\r\n        wc.drainDispatcherEvents();\r\n        assertEquals(ContainerState.CONTAINER_CLEANEDUP_AFTER_KILL, wc.c.getContainerState());\r\n        assertNull(wc.c.getLocalizedResources());\r\n        verifyDockerContainerCleanupCall(wc);\r\n        int killed = metrics.getKilledContainers();\r\n        wc.c.handle(new ContainerEvent(wc.c.getContainerId(), ContainerEventType.CONTAINER_RESOURCES_CLEANEDUP));\r\n        assertEquals(ContainerState.DONE, wc.c.getContainerState());\r\n        assertEquals(killed + 1, metrics.getKilledContainers());\r\n        assertEquals(0, metrics.getRunningContainers());\r\n    } finally {\r\n        if (wc != null) {\r\n            wc.finished();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testKillOnLocalizedWhenContainerNotLaunchedContainerSuccess",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testKillOnLocalizedWhenContainerNotLaunchedContainerSuccess() throws Exception\n{\r\n    WrappedContainer wc = null;\r\n    try {\r\n        wc = new WrappedContainer(17, 314159265358979L, 4344, \"yak\");\r\n        wc.initContainer();\r\n        wc.localizeResources();\r\n        assertEquals(ContainerState.SCHEDULED, wc.c.getContainerState());\r\n        wc.killContainer();\r\n        assertEquals(ContainerState.KILLING, wc.c.getContainerState());\r\n        wc.containerSuccessful();\r\n        wc.drainDispatcherEvents();\r\n        assertEquals(ContainerState.EXITED_WITH_SUCCESS, wc.c.getContainerState());\r\n        assertNull(wc.c.getLocalizedResources());\r\n        verifyCleanupCall(wc);\r\n        wc.c.handle(new ContainerEvent(wc.c.getContainerId(), ContainerEventType.CONTAINER_RESOURCES_CLEANEDUP));\r\n        assertEquals(ContainerState.DONE, wc.c.getContainerState());\r\n        assertEquals(0, metrics.getRunningContainers());\r\n    } finally {\r\n        if (wc != null) {\r\n            wc.finished();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testKillOnLocalizedWhenContainerNotLaunchedContainerFailure",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testKillOnLocalizedWhenContainerNotLaunchedContainerFailure() throws Exception\n{\r\n    WrappedContainer wc = null;\r\n    try {\r\n        wc = new WrappedContainer(17, 314159265358979L, 4344, \"yak\");\r\n        wc.initContainer();\r\n        wc.localizeResources();\r\n        assertEquals(ContainerState.SCHEDULED, wc.c.getContainerState());\r\n        wc.killContainer();\r\n        assertEquals(ContainerState.KILLING, wc.c.getContainerState());\r\n        wc.containerFailed(ExitCode.FORCE_KILLED.getExitCode());\r\n        wc.drainDispatcherEvents();\r\n        assertEquals(ContainerState.EXITED_WITH_FAILURE, wc.c.getContainerState());\r\n        assertNull(wc.c.getLocalizedResources());\r\n        verifyCleanupCall(wc);\r\n        wc.c.handle(new ContainerEvent(wc.c.getContainerId(), ContainerEventType.CONTAINER_RESOURCES_CLEANEDUP));\r\n        assertEquals(ContainerState.DONE, wc.c.getContainerState());\r\n        assertEquals(0, metrics.getRunningContainers());\r\n    } finally {\r\n        if (wc != null) {\r\n            wc.finished();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testDockerKillOnLocalizedContainerNotLaunchedContainerFailure",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testDockerKillOnLocalizedContainerNotLaunchedContainerFailure() throws Exception\n{\r\n    WrappedContainer wc = null;\r\n    try {\r\n        wc = new WrappedContainer(17, 314159265358979L, 4344, \"yak\");\r\n        wc.setupDockerContainerEnv();\r\n        wc.initContainer();\r\n        wc.localizeResources();\r\n        assertEquals(ContainerState.SCHEDULED, wc.c.getContainerState());\r\n        wc.killContainer();\r\n        assertEquals(ContainerState.KILLING, wc.c.getContainerState());\r\n        wc.containerFailed(ExitCode.FORCE_KILLED.getExitCode());\r\n        wc.drainDispatcherEvents();\r\n        assertEquals(ContainerState.EXITED_WITH_FAILURE, wc.c.getContainerState());\r\n        assertNull(wc.c.getLocalizedResources());\r\n        verifyDockerContainerCleanupCall(wc);\r\n        wc.c.handle(new ContainerEvent(wc.c.getContainerId(), ContainerEventType.CONTAINER_RESOURCES_CLEANEDUP));\r\n        assertEquals(ContainerState.DONE, wc.c.getContainerState());\r\n        assertEquals(0, metrics.getRunningContainers());\r\n    } finally {\r\n        if (wc != null) {\r\n            wc.finished();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testKillOnLocalizedWhenContainerLaunched",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testKillOnLocalizedWhenContainerLaunched() throws Exception\n{\r\n    WrappedContainer wc = null;\r\n    try {\r\n        wc = new WrappedContainer(17, 314159265358979L, 4344, \"yak\");\r\n        wc.initContainer();\r\n        wc.localizeResources();\r\n        assertEquals(ContainerState.SCHEDULED, wc.c.getContainerState());\r\n        ContainerLaunch launcher = wc.launcher.running.get(wc.c.getContainerId());\r\n        launcher.call();\r\n        wc.drainDispatcherEvents();\r\n        assertEquals(ContainerState.EXITED_WITH_FAILURE, wc.c.getContainerState());\r\n        wc.killContainer();\r\n        assertEquals(ContainerState.EXITED_WITH_FAILURE, wc.c.getContainerState());\r\n        assertNull(wc.c.getLocalizedResources());\r\n        verifyCleanupCall(wc);\r\n    } finally {\r\n        if (wc != null) {\r\n            wc.finished();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testDockerKillOnLocalizedWhenContainerLaunched",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testDockerKillOnLocalizedWhenContainerLaunched() throws Exception\n{\r\n    WrappedContainer wc = null;\r\n    try {\r\n        wc = new WrappedContainer(17, 314159265358979L, 4344, \"yak\");\r\n        wc.setupDockerContainerEnv();\r\n        wc.initContainer();\r\n        wc.localizeResources();\r\n        assertEquals(ContainerState.SCHEDULED, wc.c.getContainerState());\r\n        ContainerLaunch launcher = wc.launcher.running.get(wc.c.getContainerId());\r\n        launcher.call();\r\n        wc.drainDispatcherEvents();\r\n        assertEquals(ContainerState.EXITED_WITH_FAILURE, wc.c.getContainerState());\r\n        wc.killContainer();\r\n        assertEquals(ContainerState.EXITED_WITH_FAILURE, wc.c.getContainerState());\r\n        assertNull(wc.c.getLocalizedResources());\r\n        verifyDockerContainerCleanupCall(wc);\r\n    } finally {\r\n        if (wc != null) {\r\n            wc.finished();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testResourceLocalizedOnLocalizationFailed",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testResourceLocalizedOnLocalizationFailed() throws Exception\n{\r\n    WrappedContainer wc = null;\r\n    try {\r\n        wc = new WrappedContainer(16, 314159265358979L, 4344, \"yak\");\r\n        wc.initContainer();\r\n        int failCount = wc.getLocalResourceCount() / 2;\r\n        if (failCount == 0) {\r\n            failCount = 1;\r\n        }\r\n        wc.failLocalizeResources(failCount);\r\n        assertEquals(ContainerState.LOCALIZATION_FAILED, wc.c.getContainerState());\r\n        assertNull(wc.c.getLocalizedResources());\r\n        wc.localizeResourcesFromInvalidState(failCount);\r\n        assertEquals(ContainerState.LOCALIZATION_FAILED, wc.c.getContainerState());\r\n        assertNull(wc.c.getLocalizedResources());\r\n        verifyCleanupCall(wc);\r\n        Assert.assertTrue(wc.getDiagnostics().contains(FAKE_LOCALIZATION_ERROR));\r\n    } finally {\r\n        if (wc != null) {\r\n            wc.finished();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testResourceFailedOnLocalizationFailed",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testResourceFailedOnLocalizationFailed() throws Exception\n{\r\n    WrappedContainer wc = null;\r\n    try {\r\n        wc = new WrappedContainer(16, 314159265358979L, 4344, \"yak\");\r\n        wc.initContainer();\r\n        Iterator<String> lRsrcKeys = wc.localResources.keySet().iterator();\r\n        String key1 = lRsrcKeys.next();\r\n        String key2 = lRsrcKeys.next();\r\n        wc.failLocalizeSpecificResource(key1);\r\n        assertEquals(ContainerState.LOCALIZATION_FAILED, wc.c.getContainerState());\r\n        assertNull(wc.c.getLocalizedResources());\r\n        wc.failLocalizeSpecificResource(key2);\r\n        assertEquals(ContainerState.LOCALIZATION_FAILED, wc.c.getContainerState());\r\n        assertNull(wc.c.getLocalizedResources());\r\n        verifyCleanupCall(wc);\r\n    } finally {\r\n        if (wc != null) {\r\n            wc.finished();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testResourceFailedOnKilling",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testResourceFailedOnKilling() throws Exception\n{\r\n    WrappedContainer wc = null;\r\n    try {\r\n        wc = new WrappedContainer(16, 314159265358979L, 4344, \"yak\");\r\n        wc.initContainer();\r\n        Iterator<String> lRsrcKeys = wc.localResources.keySet().iterator();\r\n        String key1 = lRsrcKeys.next();\r\n        wc.killContainer();\r\n        assertEquals(ContainerState.KILLING, wc.c.getContainerState());\r\n        assertNull(wc.c.getLocalizedResources());\r\n        wc.failLocalizeSpecificResource(key1);\r\n        assertEquals(ContainerState.KILLING, wc.c.getContainerState());\r\n        assertNull(wc.c.getLocalizedResources());\r\n        verifyCleanupCall(wc);\r\n    } finally {\r\n        if (wc != null) {\r\n            wc.finished();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testServiceData",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testServiceData() throws Exception\n{\r\n    WrappedContainer wc = null;\r\n    try {\r\n        wc = new WrappedContainer(9, 314159265358979L, 4344, \"yak\", false, true);\r\n        assertEquals(ContainerState.NEW, wc.c.getContainerState());\r\n        wc.initContainer();\r\n        for (final Map.Entry<String, ByteBuffer> e : wc.serviceData.entrySet()) {\r\n            ArgumentMatcher<AuxServicesEvent> matchesServiceReq = evt -> e.getKey().equals(evt.getServiceID()) && 0 == e.getValue().compareTo(evt.getServiceData());\r\n            verify(wc.auxBus).handle(argThat(matchesServiceReq));\r\n        }\r\n        final WrappedContainer wcf = wc;\r\n        ArgumentMatcher<ContainersLauncherEvent> matchesLaunchReq = evt -> evt.getType() == ContainersLauncherEventType.LAUNCH_CONTAINER && wcf.cId.equals(evt.getContainer().getContainerId());\r\n        verify(wc.launcherBus).handle(argThat(matchesLaunchReq));\r\n    } finally {\r\n        if (wc != null) {\r\n            wc.finished();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testLaunchAfterKillRequest",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testLaunchAfterKillRequest() throws Exception\n{\r\n    WrappedContainer wc = null;\r\n    try {\r\n        wc = new WrappedContainer(14, 314159265358979L, 4344, \"yak\");\r\n        wc.initContainer();\r\n        wc.localizeResources();\r\n        wc.killContainer();\r\n        assertEquals(ContainerState.KILLING, wc.c.getContainerState());\r\n        assertNull(wc.c.getLocalizedResources());\r\n        wc.launchContainer();\r\n        assertEquals(ContainerState.KILLING, wc.c.getContainerState());\r\n        assertNull(wc.c.getLocalizedResources());\r\n        wc.containerKilledOnRequest();\r\n        verifyCleanupCall(wc);\r\n    } finally {\r\n        if (wc != null) {\r\n            wc.finished();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testDockerContainerLaunchAfterKillRequest",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testDockerContainerLaunchAfterKillRequest() throws Exception\n{\r\n    WrappedContainer wc = null;\r\n    try {\r\n        wc = new WrappedContainer(14, 314159265358979L, 4344, \"yak\");\r\n        wc.setupDockerContainerEnv();\r\n        wc.initContainer();\r\n        wc.localizeResources();\r\n        wc.killContainer();\r\n        assertEquals(ContainerState.KILLING, wc.c.getContainerState());\r\n        assertNull(wc.c.getLocalizedResources());\r\n        wc.launchContainer();\r\n        assertEquals(ContainerState.KILLING, wc.c.getContainerState());\r\n        assertNull(wc.c.getLocalizedResources());\r\n        wc.containerKilledOnRequest();\r\n        verifyDockerContainerCleanupCall(wc);\r\n    } finally {\r\n        if (wc != null) {\r\n            wc.finished();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testContainerRetry",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testContainerRetry() throws Exception\n{\r\n    ContainerRetryContext containerRetryContext1 = ContainerRetryContext.newInstance(ContainerRetryPolicy.NEVER_RETRY, null, 3, 0);\r\n    testContainerRetry(containerRetryContext1, 2, 0);\r\n    ContainerRetryContext containerRetryContext2 = ContainerRetryContext.newInstance(ContainerRetryPolicy.RETRY_ON_ALL_ERRORS, null, 3, 0);\r\n    testContainerRetry(containerRetryContext2, 2, 3);\r\n    ContainerRetryContext containerRetryContext3 = ContainerRetryContext.newInstance(ContainerRetryPolicy.RETRY_ON_ALL_ERRORS, null, 3, 0);\r\n    testContainerRetry(containerRetryContext3, 0, 0);\r\n    ContainerRetryContext containerRetryContext4 = ContainerRetryContext.newInstance(ContainerRetryPolicy.RETRY_ON_SPECIFIC_ERROR_CODES, null, 3, 0);\r\n    testContainerRetry(containerRetryContext4, 2, 0);\r\n    HashSet<Integer> errorCodes = new HashSet<>();\r\n    errorCodes.add(2);\r\n    errorCodes.add(6);\r\n    ContainerRetryContext containerRetryContext5 = ContainerRetryContext.newInstance(ContainerRetryPolicy.RETRY_ON_SPECIFIC_ERROR_CODES, errorCodes, 3, 0);\r\n    testContainerRetry(containerRetryContext5, 2, 3);\r\n    HashSet<Integer> errorCodes2 = new HashSet<>();\r\n    errorCodes.add(143);\r\n    ContainerRetryContext containerRetryContext6 = ContainerRetryContext.newInstance(ContainerRetryPolicy.RETRY_ON_SPECIFIC_ERROR_CODES, errorCodes2, 3, 0);\r\n    testContainerRetry(containerRetryContext6, 143, 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testContainerRetry",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testContainerRetry(ContainerRetryContext containerRetryContext, int exitCode, int expectedRetries) throws Exception\n{\r\n    WrappedContainer wc = null;\r\n    try {\r\n        int retryTimes = 0;\r\n        wc = new WrappedContainer(24, 314159265358979L, 4344, \"yak\", containerRetryContext);\r\n        wc.initContainer();\r\n        wc.localizeResources();\r\n        wc.launchContainer();\r\n        while (true) {\r\n            wc.containerFailed(exitCode);\r\n            if (wc.c.getContainerState() == ContainerState.RUNNING) {\r\n                retryTimes++;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        Assert.assertEquals(expectedRetries, retryTimes);\r\n    } finally {\r\n        if (wc != null) {\r\n            wc.finished();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testContainerRestartInterval",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testContainerRestartInterval() throws IOException\n{\r\n    conf.setInt(YarnConfiguration.NM_CONTAINER_RETRY_MINIMUM_INTERVAL_MS, 2000);\r\n    ContainerRetryContext containerRetryContext1 = ContainerRetryContext.newInstance(ContainerRetryPolicy.NEVER_RETRY, null, 3, 0);\r\n    testContainerRestartInterval(containerRetryContext1, 0);\r\n    ContainerRetryContext containerRetryContext2 = ContainerRetryContext.newInstance(ContainerRetryPolicy.RETRY_ON_ALL_ERRORS, null, 3, 0);\r\n    testContainerRestartInterval(containerRetryContext2, 2000);\r\n    ContainerRetryContext containerRetryContext3 = ContainerRetryContext.newInstance(ContainerRetryPolicy.RETRY_ON_ALL_ERRORS, null, 3, 4000);\r\n    testContainerRestartInterval(containerRetryContext3, 4000);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testContainerRestartInterval",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testContainerRestartInterval(ContainerRetryContext containerRetryContext, int expectedRestartInterval) throws IOException\n{\r\n    WrappedContainer wc = null;\r\n    try {\r\n        wc = new WrappedContainer(25, 314159265358980L, 4345, \"yak\", containerRetryContext);\r\n        Assert.assertEquals(((ContainerImpl) wc.c).getContainerRetryContext().getRetryInterval(), expectedRestartInterval);\r\n    } finally {\r\n        if (wc != null) {\r\n            wc.finished();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testContainerRetryFailureValidityInterval",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testContainerRetryFailureValidityInterval() throws Exception\n{\r\n    ContainerRetryContext containerRetryContext = ContainerRetryContext.newInstance(ContainerRetryPolicy.RETRY_ON_ALL_ERRORS, null, 1, 0, 10);\r\n    WrappedContainer wc = null;\r\n    try {\r\n        wc = new WrappedContainer(25, 314159265358980L, 4200, \"test\", containerRetryContext);\r\n        ControlledClock clock = new ControlledClock();\r\n        wc.getRetryPolicy().setClock(clock);\r\n        wc.initContainer();\r\n        wc.localizeResources();\r\n        wc.launchContainer();\r\n        wc.containerFailed(12);\r\n        assertEquals(ContainerState.RUNNING, wc.c.getContainerState());\r\n        clock.setTime(20);\r\n        wc.containerFailed(12);\r\n        assertEquals(ContainerState.RUNNING, wc.c.getContainerState());\r\n        clock.setTime(40);\r\n        wc.containerFailed(12);\r\n        assertEquals(ContainerState.RUNNING, wc.c.getContainerState());\r\n        clock.setTime(45);\r\n        wc.containerFailed(12);\r\n        assertEquals(ContainerState.EXITED_WITH_FAILURE, wc.c.getContainerState());\r\n    } finally {\r\n        if (wc != null) {\r\n            wc.finished();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "verifyCleanupCall",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void verifyCleanupCall(WrappedContainer wc) throws Exception\n{\r\n    ResourcesReleasedMatcher matchesReq = new ResourcesReleasedMatcher(wc.localResources, EnumSet.of(LocalResourceVisibility.PUBLIC, LocalResourceVisibility.PRIVATE, LocalResourceVisibility.APPLICATION), wc.c);\r\n    verify(wc.localizerBus, atLeastOnce()).handle(argThat(matchesReq));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "verifyOutofBandHeartBeat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void verifyOutofBandHeartBeat(WrappedContainer wc)\n{\r\n    verify(wc.context.getNodeStatusUpdater()).sendOutofBandHeartBeat();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "verifyDockerContainerCleanupCall",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void verifyDockerContainerCleanupCall(WrappedContainer wc) throws Exception\n{\r\n    verify(wc.launcherBus).handle(refEq(new ContainersLauncherEvent(wc.c, ContainersLauncherEventType.CLEANUP_CONTAINER), \"timestamp\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "getMockRsrc",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Entry<String, LocalResource> getMockRsrc(Random r, LocalResourceVisibility vis)\n{\r\n    String name = Long.toHexString(r.nextLong());\r\n    URL url = BuilderUtils.newURL(\"file\", null, 0, \"/local\" + vis + \"/\" + name);\r\n    LocalResource rsrc = BuilderUtils.newLocalResource(url, LocalResourceType.FILE, vis, r.nextInt(1024) + 1024L, r.nextInt(1024) + 2048L, false);\r\n    return new SimpleEntry<String, LocalResource>(name, rsrc);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "createLocalResources",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "Map<String, LocalResource> createLocalResources(Random r)\n{\r\n    Map<String, LocalResource> localResources = new HashMap<String, LocalResource>();\r\n    for (int i = r.nextInt(5) + 5; i >= 0; --i) {\r\n        Entry<String, LocalResource> rsrc = getMockRsrc(r, LocalResourceVisibility.PUBLIC);\r\n        localResources.put(rsrc.getKey(), rsrc.getValue());\r\n    }\r\n    for (int i = r.nextInt(5) + 5; i >= 0; --i) {\r\n        Entry<String, LocalResource> rsrc = getMockRsrc(r, LocalResourceVisibility.PRIVATE);\r\n        localResources.put(rsrc.getKey(), rsrc.getValue());\r\n    }\r\n    for (int i = r.nextInt(2) + 2; i >= 0; --i) {\r\n        Entry<String, LocalResource> rsrc = getMockRsrc(r, LocalResourceVisibility.APPLICATION);\r\n        localResources.put(rsrc.getKey(), rsrc.getValue());\r\n    }\r\n    return localResources;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "createServiceData",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Map<String, ByteBuffer> createServiceData(Random r)\n{\r\n    Map<String, ByteBuffer> serviceData = new HashMap<String, ByteBuffer>();\r\n    for (int i = r.nextInt(5) + 5; i >= 0; --i) {\r\n        String service = Long.toHexString(r.nextLong());\r\n        byte[] b = new byte[r.nextInt(1024) + 1024];\r\n        r.nextBytes(b);\r\n        serviceData.put(service, ByteBuffer.wrap(b));\r\n    }\r\n    return serviceData;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LocalResource getResource()\n{\r\n    return rsrc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourceStatusType getStatus()\n{\r\n    return tag;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getLocalSize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getLocalSize()\n{\r\n    return size;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getLocalPath",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "URL getLocalPath()\n{\r\n    return localPath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getException",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SerializedException getException()\n{\r\n    return ex;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "setResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setResource(LocalResource rsrc)\n{\r\n    this.rsrc = rsrc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "setStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setStatus(ResourceStatusType tag)\n{\r\n    this.tag = tag;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "setLocalPath",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setLocalPath(URL localPath)\n{\r\n    this.localPath = localPath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "setLocalSize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setLocalSize(long size)\n{\r\n    this.size = size;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "setException",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setException(SerializedException ex)\n{\r\n    this.ex = ex;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "boolean equals(Object o)\n{\r\n    if (!(o instanceof MockLocalResourceStatus)) {\r\n        return false;\r\n    }\r\n    MockLocalResourceStatus other = (MockLocalResourceStatus) o;\r\n    return getResource().equals(other.getResource()) && getStatus().equals(other.getStatus()) && (null != getLocalPath() && getLocalPath().equals(other.getLocalPath())) && (null != getException() && getException().equals(other.getException()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int hashCode()\n{\r\n    return 4344;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\task",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    deletionService = mock(DeletionService.class);\r\n    baseDirs.add(BASEDIR);\r\n    deletionTask = new FileDeletionTask(ID, deletionService, USER, SUBDIR, baseDirs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\task",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    baseDirs.clear();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\task",
  "methodName" : "testGetUser",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetUser() throws Exception\n{\r\n    assertEquals(USER, deletionTask.getUser());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\task",
  "methodName" : "testGetSubDir",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetSubDir() throws Exception\n{\r\n    assertEquals(SUBDIR, deletionTask.getSubDir());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\task",
  "methodName" : "testGetBaseDirs",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testGetBaseDirs() throws Exception\n{\r\n    assertEquals(1, deletionTask.getBaseDirs().size());\r\n    assertEquals(baseDirs, deletionTask.getBaseDirs());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\task",
  "methodName" : "testConvertDeletionTaskToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testConvertDeletionTaskToProto() throws Exception\n{\r\n    DeletionServiceDeleteTaskProto proto = deletionTask.convertDeletionTaskToProto();\r\n    assertEquals(ID, proto.getId());\r\n    assertEquals(USER, proto.getUser());\r\n    assertEquals(SUBDIR, new Path(proto.getSubdir()));\r\n    assertEquals(BASEDIR, new Path(proto.getBasedirs(0)));\r\n    assertEquals(1, proto.getBasedirsCount());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setup()\n{\r\n    dockerInspectCommand = new DockerInspectCommand(CONTAINER_NAME);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testGetCommandOption",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetCommandOption()\n{\r\n    assertEquals(\"inspect\", dockerInspectCommand.getCommandOption());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testGetContainerStatus",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testGetContainerStatus() throws Exception\n{\r\n    dockerInspectCommand.getContainerStatus();\r\n    assertEquals(\"inspect\", StringUtils.join(\",\", dockerInspectCommand.getDockerCommandWithArguments().get(\"docker-command\")));\r\n    assertEquals(\"{{.State.Status}}\", StringUtils.join(\",\", dockerInspectCommand.getDockerCommandWithArguments().get(\"format\")));\r\n    assertEquals(\"foo\", StringUtils.join(\",\", dockerInspectCommand.getDockerCommandWithArguments().get(\"name\")));\r\n    assertEquals(3, dockerInspectCommand.getDockerCommandWithArguments().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testGetIpAndHost",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testGetIpAndHost() throws Exception\n{\r\n    dockerInspectCommand.getIpAndHost();\r\n    assertEquals(\"inspect\", StringUtils.join(\",\", dockerInspectCommand.getDockerCommandWithArguments().get(\"docker-command\")));\r\n    assertEquals(\"{{range(.NetworkSettings.Networks)}}\" + \"{{.IPAddress}},{{end}}{{.Config.Hostname}}\", StringUtils.join(\",\", dockerInspectCommand.getDockerCommandWithArguments().get(\"format\")));\r\n    assertEquals(\"foo\", StringUtils.join(\",\", dockerInspectCommand.getDockerCommandWithArguments().get(\"name\")));\r\n    assertEquals(3, dockerInspectCommand.getDockerCommandWithArguments().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\security",
  "methodName" : "testRecovery",
  "errType" : [ "InvalidToken", "InvalidToken" ],
  "containingMethodsNum" : 42,
  "sourceCodeText" : "void testRecovery() throws IOException\n{\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.NM_RECOVERY_ENABLED, true);\r\n    final NodeId nodeId = NodeId.newInstance(\"somehost\", 1234);\r\n    final ContainerId cid1 = BuilderUtils.newContainerId(1, 1, 1, 1);\r\n    final ContainerId cid2 = BuilderUtils.newContainerId(2, 2, 2, 2);\r\n    ContainerTokenKeyGeneratorForTest keygen = new ContainerTokenKeyGeneratorForTest(conf);\r\n    NMMemoryStateStoreService stateStore = new NMMemoryStateStoreService();\r\n    stateStore.init(conf);\r\n    stateStore.start();\r\n    NMContainerTokenSecretManager secretMgr = new NMContainerTokenSecretManager(conf, stateStore);\r\n    secretMgr.setNodeId(nodeId);\r\n    MasterKey currentKey = keygen.generateKey();\r\n    secretMgr.setMasterKey(currentKey);\r\n    ContainerTokenIdentifier tokenId1 = createContainerTokenId(cid1, nodeId, \"user1\", secretMgr);\r\n    ContainerTokenIdentifier tokenId2 = createContainerTokenId(cid2, nodeId, \"user2\", secretMgr);\r\n    assertNotNull(secretMgr.retrievePassword(tokenId1));\r\n    assertNotNull(secretMgr.retrievePassword(tokenId2));\r\n    secretMgr = new NMContainerTokenSecretManager(conf, stateStore);\r\n    secretMgr.setNodeId(nodeId);\r\n    secretMgr.recover();\r\n    assertEquals(currentKey, secretMgr.getCurrentKey());\r\n    assertTrue(secretMgr.isValidStartContainerRequest(tokenId1));\r\n    assertTrue(secretMgr.isValidStartContainerRequest(tokenId2));\r\n    assertNotNull(secretMgr.retrievePassword(tokenId1));\r\n    assertNotNull(secretMgr.retrievePassword(tokenId2));\r\n    secretMgr.startContainerSuccessful(tokenId2);\r\n    currentKey = keygen.generateKey();\r\n    secretMgr.setMasterKey(currentKey);\r\n    secretMgr = new NMContainerTokenSecretManager(conf, stateStore);\r\n    secretMgr.setNodeId(nodeId);\r\n    secretMgr.recover();\r\n    assertEquals(currentKey, secretMgr.getCurrentKey());\r\n    assertTrue(secretMgr.isValidStartContainerRequest(tokenId1));\r\n    assertFalse(secretMgr.isValidStartContainerRequest(tokenId2));\r\n    assertNotNull(secretMgr.retrievePassword(tokenId1));\r\n    assertNotNull(secretMgr.retrievePassword(tokenId2));\r\n    currentKey = keygen.generateKey();\r\n    secretMgr.setMasterKey(currentKey);\r\n    secretMgr = new NMContainerTokenSecretManager(conf, stateStore);\r\n    secretMgr.setNodeId(nodeId);\r\n    secretMgr.recover();\r\n    assertEquals(currentKey, secretMgr.getCurrentKey());\r\n    assertTrue(secretMgr.isValidStartContainerRequest(tokenId1));\r\n    assertFalse(secretMgr.isValidStartContainerRequest(tokenId2));\r\n    try {\r\n        secretMgr.retrievePassword(tokenId1);\r\n        fail(\"token should not be valid\");\r\n    } catch (InvalidToken e) {\r\n    }\r\n    try {\r\n        secretMgr.retrievePassword(tokenId2);\r\n        fail(\"token should not be valid\");\r\n    } catch (InvalidToken e) {\r\n    }\r\n    stateStore.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\security",
  "methodName" : "createContainerTokenId",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "ContainerTokenIdentifier createContainerTokenId(ContainerId cid, NodeId nodeId, String user, NMContainerTokenSecretManager secretMgr) throws IOException\n{\r\n    long rmid = cid.getApplicationAttemptId().getApplicationId().getClusterTimestamp();\r\n    ContainerTokenIdentifier ctid = new ContainerTokenIdentifier(cid, nodeId.toString(), user, BuilderUtils.newResource(1024, 1), System.currentTimeMillis() + 100000L, secretMgr.getCurrentKey().getKeyId(), rmid, Priority.newInstance(0), 0);\r\n    Token token = BuilderUtils.newContainerToken(nodeId, secretMgr.createPassword(ctid), ctid);\r\n    return BuilderUtils.newContainerTokenIdentifier(token);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setup()\n{\r\n    dockerLoadCommand = new DockerLoadCommand(LOCAL_IMAGE_NAME);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testGetCommandOption",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetCommandOption()\n{\r\n    assertEquals(\"load\", dockerLoadCommand.getCommandOption());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testGetCommandWithArguments",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testGetCommandWithArguments()\n{\r\n    assertEquals(\"load\", StringUtils.join(\",\", dockerLoadCommand.getDockerCommandWithArguments().get(\"docker-command\")));\r\n    assertEquals(\"foo\", StringUtils.join(\",\", dockerLoadCommand.getDockerCommandWithArguments().get(\"image\")));\r\n    assertEquals(2, dockerLoadCommand.getDockerCommandWithArguments().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "getParams",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Collection<Boolean> getParams()\n{\r\n    return Arrays.asList(false, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setup()\n{\r\n    if (!rootDir.exists()) {\r\n        rootDir.mkdirs();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "cleanup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void cleanup()\n{\r\n    if (useManifest) {\r\n        manifest.delete();\r\n    }\r\n    rootDir.delete();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "writeManifestFile",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void writeManifestFile(AuxServiceRecords services, Configuration conf) throws IOException\n{\r\n    conf.setBoolean(YarnConfiguration.NM_AUX_SERVICES_MANIFEST_ENABLED, true);\r\n    conf.set(YarnConfiguration.NM_AUX_SERVICES_MANIFEST, manifest.getAbsolutePath());\r\n    mapper.writeValue(manifest, services);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testRemoteAuxServiceClassPath",
  "errType" : [ "YarnRuntimeException" ],
  "containingMethodsNum" : 59,
  "sourceCodeText" : "void testRemoteAuxServiceClassPath() throws Exception\n{\r\n    Configuration conf = new YarnConfiguration();\r\n    FileSystem fs = FileSystem.get(conf);\r\n    AuxServiceRecord serviceC = AuxServices.newAuxService(\"ServiceC\", ServiceC.class.getName());\r\n    AuxServiceRecords services = new AuxServiceRecords().serviceList(serviceC);\r\n    if (!useManifest) {\r\n        conf.setStrings(YarnConfiguration.NM_AUX_SERVICES, new String[] { \"ServiceC\" });\r\n        conf.setClass(String.format(YarnConfiguration.NM_AUX_SERVICE_FMT, \"ServiceC\"), ServiceC.class, Service.class);\r\n    }\r\n    Context mockContext2 = mock(Context.class);\r\n    LocalDirsHandlerService mockDirsHandler = mock(LocalDirsHandlerService.class);\r\n    String root = \"target/LocalDir\";\r\n    Path rootAuxServiceDirPath = new Path(root, \"nmAuxService\");\r\n    when(mockDirsHandler.getLocalPathForWrite(anyString())).thenReturn(rootAuxServiceDirPath);\r\n    when(mockContext2.getLocalDirsHandler()).thenReturn(mockDirsHandler);\r\n    DeletionService mockDelService2 = mock(DeletionService.class);\r\n    AuxServices aux = null;\r\n    File testJar = null;\r\n    try {\r\n        try {\r\n            testJar = JarFinder.makeClassLoaderTestJar(this.getClass(), rootDir, \"test-runjar.jar\", 2048, ServiceC.class.getName());\r\n            Set<PosixFilePermission> perms = new HashSet<PosixFilePermission>();\r\n            perms.add(PosixFilePermission.OWNER_READ);\r\n            perms.add(PosixFilePermission.OWNER_WRITE);\r\n            perms.add(PosixFilePermission.GROUP_WRITE);\r\n            Files.setPosixFilePermissions(Paths.get(testJar.getAbsolutePath()), perms);\r\n            if (useManifest) {\r\n                AuxServices.setClasspath(serviceC, testJar.getAbsolutePath());\r\n                writeManifestFile(services, conf);\r\n            } else {\r\n                conf.set(String.format(YarnConfiguration.NM_AUX_SERVICE_REMOTE_CLASSPATH, \"ServiceC\"), testJar.getAbsolutePath());\r\n            }\r\n            aux = new AuxServices(MOCK_AUX_PATH_HANDLER, mockContext2, mockDelService2);\r\n            aux.init(conf);\r\n            Assert.fail(\"The permission of the jar is wrong.\" + \"Should throw out exception.\");\r\n        } catch (YarnRuntimeException ex) {\r\n            Assert.assertTrue(ex.getMessage(), ex.getMessage().contains(\"The remote jarfile should not be writable by group or others\"));\r\n        }\r\n        Files.delete(Paths.get(testJar.getAbsolutePath()));\r\n        testJar = JarFinder.makeClassLoaderTestJar(this.getClass(), rootDir, \"test-runjar.jar\", 2048, ServiceC.class.getName());\r\n        if (useManifest) {\r\n            AuxServices.setClasspath(serviceC, testJar.getAbsolutePath());\r\n            writeManifestFile(services, conf);\r\n        } else {\r\n            conf.set(String.format(YarnConfiguration.NM_AUX_SERVICE_REMOTE_CLASSPATH, \"ServiceC\"), testJar.getAbsolutePath());\r\n        }\r\n        aux = new AuxServices(MOCK_AUX_PATH_HANDLER, mockContext2, mockDelService2);\r\n        aux.init(conf);\r\n        aux.start();\r\n        Map<String, ByteBuffer> meta = aux.getMetaData();\r\n        String auxName = \"\";\r\n        Assert.assertTrue(meta.size() == 1);\r\n        for (Entry<String, ByteBuffer> i : meta.entrySet()) {\r\n            auxName = i.getKey();\r\n        }\r\n        Assert.assertEquals(\"ServiceC\", auxName);\r\n        aux.serviceStop();\r\n        FileStatus[] status = fs.listStatus(rootAuxServiceDirPath);\r\n        Assert.assertTrue(status.length == 1);\r\n        aux = new AuxServices(MOCK_AUX_PATH_HANDLER, mockContext2, mockDelService2);\r\n        aux.init(conf);\r\n        aux.start();\r\n        meta = aux.getMetaData();\r\n        Assert.assertTrue(meta.size() == 1);\r\n        for (Entry<String, ByteBuffer> i : meta.entrySet()) {\r\n            auxName = i.getKey();\r\n        }\r\n        Assert.assertEquals(\"ServiceC\", auxName);\r\n        verify(mockDelService2, times(0)).delete(any(FileDeletionTask.class));\r\n        status = fs.listStatus(rootAuxServiceDirPath);\r\n        Assert.assertTrue(status.length == 1);\r\n        aux.serviceStop();\r\n        long time = System.currentTimeMillis() + 3600 * 1000;\r\n        FileTime fileTime = FileTime.fromMillis(time);\r\n        Files.setLastModifiedTime(Paths.get(testJar.getAbsolutePath()), fileTime);\r\n        aux = new AuxServices(MOCK_AUX_PATH_HANDLER, mockContext2, mockDelService2);\r\n        aux.init(conf);\r\n        aux.start();\r\n        verify(mockDelService2, times(1)).delete(any(FileDeletionTask.class));\r\n        status = fs.listStatus(rootAuxServiceDirPath);\r\n        Assert.assertTrue(status.length == 2);\r\n        aux.serviceStop();\r\n    } finally {\r\n        if (testJar != null) {\r\n            testJar.delete();\r\n        }\r\n        if (fs.exists(new Path(root))) {\r\n            fs.delete(new Path(root), true);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testCustomizedAuxServiceClassPath",
  "errType" : null,
  "containingMethodsNum" : 40,
  "sourceCodeText" : "void testCustomizedAuxServiceClassPath() throws Exception\n{\r\n    Configuration conf = new YarnConfiguration();\r\n    AuxServiceRecord serviceC = AuxServices.newAuxService(\"ServiceC\", ServiceC.class.getName());\r\n    AuxServiceRecords services = new AuxServiceRecords().serviceList(serviceC);\r\n    if (useManifest) {\r\n        writeManifestFile(services, conf);\r\n    } else {\r\n        conf.setStrings(YarnConfiguration.NM_AUX_SERVICES, new String[] { \"ServiceC\" });\r\n        conf.setClass(String.format(YarnConfiguration.NM_AUX_SERVICE_FMT, \"ServiceC\"), ServiceC.class, Service.class);\r\n    }\r\n    @SuppressWarnings(\"resource\")\r\n    AuxServices aux = new AuxServices(MOCK_AUX_PATH_HANDLER, MOCK_CONTEXT, MOCK_DEL_SERVICE);\r\n    aux.init(conf);\r\n    aux.start();\r\n    Map<String, ByteBuffer> meta = aux.getMetaData();\r\n    String auxName = \"\";\r\n    Set<String> defaultAuxClassPath = null;\r\n    Assert.assertTrue(meta.size() == 1);\r\n    for (Entry<String, ByteBuffer> i : meta.entrySet()) {\r\n        auxName = i.getKey();\r\n        String auxClassPath = Charsets.UTF_8.decode(i.getValue()).toString();\r\n        defaultAuxClassPath = new HashSet<String>(Arrays.asList(StringUtils.getTrimmedStrings(auxClassPath)));\r\n    }\r\n    Assert.assertEquals(\"ServiceC\", auxName);\r\n    aux.serviceStop();\r\n    File testJar = null;\r\n    try {\r\n        testJar = JarFinder.makeClassLoaderTestJar(this.getClass(), rootDir, \"test-runjar.jar\", 2048, ServiceC.class.getName(), LightService.class.getName());\r\n        conf = new YarnConfiguration();\r\n        String systemClasses = \"-org.apache.hadoop.\" + \",\" + ApplicationClassLoader.SYSTEM_CLASSES_DEFAULT;\r\n        if (useManifest) {\r\n            AuxServices.setClasspath(serviceC, testJar.getAbsolutePath());\r\n            AuxServices.setSystemClasses(serviceC, systemClasses);\r\n            writeManifestFile(services, conf);\r\n        } else {\r\n            conf.setStrings(YarnConfiguration.NM_AUX_SERVICES, new String[] { \"ServiceC\" });\r\n            conf.set(String.format(YarnConfiguration.NM_AUX_SERVICE_FMT, \"ServiceC\"), ServiceC.class.getName());\r\n            conf.set(String.format(YarnConfiguration.NM_AUX_SERVICES_CLASSPATH, \"ServiceC\"), testJar.getAbsolutePath());\r\n            conf.set(String.format(YarnConfiguration.NM_AUX_SERVICES_SYSTEM_CLASSES, \"ServiceC\"), systemClasses);\r\n        }\r\n        Context mockContext2 = mock(Context.class);\r\n        LocalDirsHandlerService mockDirsHandler = mock(LocalDirsHandlerService.class);\r\n        String root = \"target/LocalDir\";\r\n        Path rootAuxServiceDirPath = new Path(root, \"nmAuxService\");\r\n        when(mockDirsHandler.getLocalPathForWrite(anyString())).thenReturn(rootAuxServiceDirPath);\r\n        when(mockContext2.getLocalDirsHandler()).thenReturn(mockDirsHandler);\r\n        aux = new AuxServices(MOCK_AUX_PATH_HANDLER, mockContext2, MOCK_DEL_SERVICE);\r\n        aux.init(conf);\r\n        aux.start();\r\n        meta = aux.getMetaData();\r\n        Assert.assertTrue(meta.size() == 1);\r\n        Set<String> customizedAuxClassPath = null;\r\n        for (Entry<String, ByteBuffer> i : meta.entrySet()) {\r\n            Assert.assertTrue(auxName.equals(i.getKey()));\r\n            String classPath = Charsets.UTF_8.decode(i.getValue()).toString();\r\n            customizedAuxClassPath = new HashSet<String>(Arrays.asList(StringUtils.getTrimmedStrings(classPath)));\r\n            Assert.assertTrue(classPath.contains(testJar.getName()));\r\n        }\r\n        aux.stop();\r\n        Set<String> mutalClassPath = Sets.intersection(defaultAuxClassPath, customizedAuxClassPath);\r\n        Assert.assertTrue(mutalClassPath.isEmpty());\r\n    } finally {\r\n        if (testJar != null) {\r\n            testJar.delete();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testReuseLocalizedAuxiliaryJar",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testReuseLocalizedAuxiliaryJar() throws Exception\n{\r\n    File testJar = null;\r\n    AuxServices aux = null;\r\n    Configuration conf = new YarnConfiguration();\r\n    FileSystem fs = FileSystem.get(conf);\r\n    String root = \"target/LocalDir\";\r\n    try {\r\n        testJar = JarFinder.makeClassLoaderTestJar(this.getClass(), rootDir, \"test-runjar.jar\", 2048, ServiceB.class.getName(), LightService.class.getName());\r\n        Context mockContext = mock(Context.class);\r\n        LocalDirsHandlerService mockDirsHandler = mock(LocalDirsHandlerService.class);\r\n        Path rootAuxServiceDirPath = new Path(root, \"nmAuxService\");\r\n        when(mockDirsHandler.getLocalPathForWrite(anyString())).thenReturn(rootAuxServiceDirPath);\r\n        when(mockContext.getLocalDirsHandler()).thenReturn(mockDirsHandler);\r\n        aux = new AuxServices(MOCK_AUX_PATH_HANDLER, mockContext, MOCK_DEL_SERVICE);\r\n        Path path = aux.maybeDownloadJars(\"ServiceB\", ServiceB.class.getName(), testJar.getAbsolutePath(), AuxServiceFile.TypeEnum.STATIC, conf);\r\n        path = aux.maybeDownloadJars(\"ServiceB\", ServiceB.class.getName(), testJar.getAbsolutePath(), AuxServiceFile.TypeEnum.STATIC, conf);\r\n        assertFalse(\"Failed to reuse the localized jar\", path.toString().endsWith(\"/*\"));\r\n    } finally {\r\n        if (testJar != null) {\r\n            testJar.delete();\r\n        }\r\n        if (fs.exists(new Path(root))) {\r\n            fs.delete(new Path(root), true);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testAuxEventDispatch",
  "errType" : null,
  "containingMethodsNum" : 39,
  "sourceCodeText" : "void testAuxEventDispatch() throws IOException\n{\r\n    Configuration conf = new Configuration();\r\n    if (useManifest) {\r\n        AuxServiceRecord serviceA = AuxServices.newAuxService(\"Asrv\", ServiceA.class.getName());\r\n        serviceA.getConfiguration().setProperty(\"A.expected.init\", \"1\");\r\n        AuxServiceRecord serviceB = AuxServices.newAuxService(\"Bsrv\", ServiceB.class.getName());\r\n        serviceB.getConfiguration().setProperty(\"B.expected.stop\", \"1\");\r\n        writeManifestFile(new AuxServiceRecords().serviceList(serviceA, serviceB), conf);\r\n    } else {\r\n        conf.setStrings(YarnConfiguration.NM_AUX_SERVICES, new String[] { \"Asrv\", \"Bsrv\" });\r\n        conf.setClass(String.format(YarnConfiguration.NM_AUX_SERVICE_FMT, \"Asrv\"), ServiceA.class, Service.class);\r\n        conf.setClass(String.format(YarnConfiguration.NM_AUX_SERVICE_FMT, \"Bsrv\"), ServiceB.class, Service.class);\r\n        conf.setInt(\"A.expected.init\", 1);\r\n        conf.setInt(\"B.expected.stop\", 1);\r\n    }\r\n    final AuxServices aux = new AuxServices(MOCK_AUX_PATH_HANDLER, MOCK_CONTEXT, MOCK_DEL_SERVICE);\r\n    aux.init(conf);\r\n    aux.start();\r\n    ApplicationId appId1 = ApplicationId.newInstance(0, 65);\r\n    ByteBuffer buf = ByteBuffer.allocate(6);\r\n    buf.putChar('A');\r\n    buf.putInt(65);\r\n    buf.flip();\r\n    AuxServicesEvent event = new AuxServicesEvent(AuxServicesEventType.APPLICATION_INIT, \"user0\", appId1, \"Asrv\", buf);\r\n    aux.handle(event);\r\n    ApplicationId appId2 = ApplicationId.newInstance(0, 66);\r\n    event = new AuxServicesEvent(AuxServicesEventType.APPLICATION_STOP, \"user0\", appId2, \"Bsrv\", null);\r\n    aux.handle(event);\r\n    Collection<AuxiliaryService> servs = aux.getServices();\r\n    for (AuxiliaryService serv : servs) {\r\n        ArrayList<Integer> appIds = ((LightService) serv).getAppIdsStopped();\r\n        assertEquals(\"app not properly stopped\", 1, appIds.size());\r\n        assertTrue(\"wrong app stopped\", appIds.contains((Integer) 66));\r\n    }\r\n    for (AuxiliaryService serv : servs) {\r\n        assertNull(((LightService) serv).containerId);\r\n        assertNull(((LightService) serv).resource);\r\n    }\r\n    ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId1, 1);\r\n    ContainerTokenIdentifier cti = new ContainerTokenIdentifier(ContainerId.newContainerId(attemptId, 1), \"\", \"\", Resource.newInstance(1, 1), 0, 0, 0, Priority.newInstance(0), 0);\r\n    Context context = mock(Context.class);\r\n    Container container = new ContainerImpl(new YarnConfiguration(), null, null, null, null, cti, context);\r\n    ContainerId containerId = container.getContainerId();\r\n    Resource resource = container.getResource();\r\n    event = new AuxServicesEvent(AuxServicesEventType.CONTAINER_INIT, container);\r\n    aux.handle(event);\r\n    for (AuxiliaryService serv : servs) {\r\n        assertEquals(containerId, ((LightService) serv).containerId);\r\n        assertEquals(resource, ((LightService) serv).resource);\r\n        ((LightService) serv).containerId = null;\r\n        ((LightService) serv).resource = null;\r\n    }\r\n    event = new AuxServicesEvent(AuxServicesEventType.CONTAINER_STOP, container);\r\n    aux.handle(event);\r\n    for (AuxiliaryService serv : servs) {\r\n        assertEquals(containerId, ((LightService) serv).containerId);\r\n        assertEquals(resource, ((LightService) serv).resource);\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "getABConf",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Configuration getABConf() throws IOException\n{\r\n    return getABConf(\"Asrv\", \"Bsrv\", ServiceA.class, ServiceB.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "getABConf",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "Configuration getABConf(String aName, String bName, Class<? extends Service> aClass, Class<? extends Service> bClass) throws IOException\n{\r\n    Configuration conf = new Configuration();\r\n    if (useManifest) {\r\n        AuxServiceRecord serviceA = AuxServices.newAuxService(aName, aClass.getName());\r\n        AuxServiceRecord serviceB = AuxServices.newAuxService(bName, bClass.getName());\r\n        writeManifestFile(new AuxServiceRecords().serviceList(serviceA, serviceB), conf);\r\n    } else {\r\n        conf.setStrings(YarnConfiguration.NM_AUX_SERVICES, new String[] { aName, bName });\r\n        conf.setClass(String.format(YarnConfiguration.NM_AUX_SERVICE_FMT, aName), aClass, Service.class);\r\n        conf.setClass(String.format(YarnConfiguration.NM_AUX_SERVICE_FMT, bName), bClass, Service.class);\r\n    }\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testAuxServices",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testAuxServices() throws IOException\n{\r\n    Configuration conf = getABConf();\r\n    final AuxServices aux = new AuxServices(MOCK_AUX_PATH_HANDLER, MOCK_CONTEXT, MOCK_DEL_SERVICE);\r\n    aux.init(conf);\r\n    int latch = 1;\r\n    for (Service s : aux.getServices()) {\r\n        assertEquals(INITED, s.getServiceState());\r\n        if (s instanceof ServiceA) {\r\n            latch *= 2;\r\n        } else if (s instanceof ServiceB) {\r\n            latch *= 3;\r\n        } else\r\n            fail(\"Unexpected service type \" + s.getClass());\r\n    }\r\n    assertEquals(\"Invalid mix of services\", 6, latch);\r\n    aux.start();\r\n    for (AuxiliaryService s : aux.getServices()) {\r\n        assertEquals(STARTED, s.getServiceState());\r\n        assertEquals(s.getAuxiliaryLocalPathHandler(), MOCK_AUX_PATH_HANDLER);\r\n    }\r\n    aux.stop();\r\n    for (Service s : aux.getServices()) {\r\n        assertEquals(STOPPED, s.getServiceState());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testAuxServicesMeta",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testAuxServicesMeta() throws IOException\n{\r\n    Configuration conf = getABConf();\r\n    final AuxServices aux = new AuxServices(MOCK_AUX_PATH_HANDLER, MOCK_CONTEXT, MOCK_DEL_SERVICE);\r\n    aux.init(conf);\r\n    int latch = 1;\r\n    for (Service s : aux.getServices()) {\r\n        assertEquals(INITED, s.getServiceState());\r\n        if (s instanceof ServiceA) {\r\n            latch *= 2;\r\n        } else if (s instanceof ServiceB) {\r\n            latch *= 3;\r\n        } else\r\n            fail(\"Unexpected service type \" + s.getClass());\r\n    }\r\n    assertEquals(\"Invalid mix of services\", 6, latch);\r\n    aux.start();\r\n    for (Service s : aux.getServices()) {\r\n        assertEquals(STARTED, s.getServiceState());\r\n    }\r\n    Map<String, ByteBuffer> meta = aux.getMetaData();\r\n    assertEquals(2, meta.size());\r\n    assertEquals(\"A\", new String(meta.get(\"Asrv\").array()));\r\n    assertEquals(\"B\", new String(meta.get(\"Bsrv\").array()));\r\n    aux.stop();\r\n    for (Service s : aux.getServices()) {\r\n        assertEquals(STOPPED, s.getServiceState());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testAuxUnexpectedStop",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testAuxUnexpectedStop() throws IOException\n{\r\n    Configuration conf = getABConf();\r\n    final AuxServices aux = new AuxServices(MOCK_AUX_PATH_HANDLER, MOCK_CONTEXT, MOCK_DEL_SERVICE);\r\n    aux.init(conf);\r\n    aux.start();\r\n    Service s = aux.getServices().iterator().next();\r\n    s.stop();\r\n    assertEquals(\"Auxiliary service stop caused AuxServices stop\", STARTED, aux.getServiceState());\r\n    assertEquals(2, aux.getServices().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testValidAuxServiceName",
  "errType" : [ "Exception", "Exception" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testValidAuxServiceName() throws IOException\n{\r\n    Configuration conf = getABConf(\"Asrv1\", \"Bsrv_2\", ServiceA.class, ServiceB.class);\r\n    final AuxServices aux = new AuxServices(MOCK_AUX_PATH_HANDLER, MOCK_CONTEXT, MOCK_DEL_SERVICE);\r\n    try {\r\n        aux.init(conf);\r\n    } catch (Exception ex) {\r\n        Assert.fail(\"Should not receive the exception.\");\r\n    }\r\n    final AuxServices aux1 = new AuxServices(MOCK_AUX_PATH_HANDLER, MOCK_CONTEXT, MOCK_DEL_SERVICE);\r\n    if (useManifest) {\r\n        AuxServiceRecord serviceA = AuxServices.newAuxService(\"1Asrv1\", ServiceA.class.getName());\r\n        writeManifestFile(new AuxServiceRecords().serviceList(serviceA), conf);\r\n    } else {\r\n        conf.setStrings(YarnConfiguration.NM_AUX_SERVICES, new String[] { \"1Asrv1\" });\r\n        conf.setClass(String.format(YarnConfiguration.NM_AUX_SERVICE_FMT, \"1Asrv1\"), ServiceA.class, Service.class);\r\n    }\r\n    try {\r\n        aux1.init(conf);\r\n        Assert.fail(\"Should receive the exception.\");\r\n    } catch (Exception ex) {\r\n        assertTrue(\"Wrong message: \" + ex.getMessage(), ex.getMessage().contains(\"The auxiliary service name: 1Asrv1 is \" + \"invalid. The valid service name should only contain a-zA-Z0-9_\" + \" and cannot start with numbers.\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testAuxServiceRecoverySetup",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testAuxServiceRecoverySetup() throws IOException\n{\r\n    Configuration conf = getABConf(\"Asrv\", \"Bsrv\", RecoverableServiceA.class, RecoverableServiceB.class);\r\n    conf.setBoolean(YarnConfiguration.NM_RECOVERY_ENABLED, true);\r\n    conf.set(YarnConfiguration.NM_RECOVERY_DIR, TEST_DIR.toString());\r\n    try {\r\n        final AuxServices aux = new AuxServices(MOCK_AUX_PATH_HANDLER, MOCK_CONTEXT, MOCK_DEL_SERVICE);\r\n        aux.init(conf);\r\n        Assert.assertEquals(2, aux.getServices().size());\r\n        File auxStorageDir = new File(TEST_DIR, AuxServices.STATE_STORE_ROOT_NAME);\r\n        Assert.assertEquals(2, auxStorageDir.listFiles().length);\r\n        aux.close();\r\n    } finally {\r\n        FileUtil.fullyDelete(TEST_DIR);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testAuxServicesConfChange",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testAuxServicesConfChange() throws IOException\n{\r\n    Configuration conf = new Configuration();\r\n    if (useManifest) {\r\n        AuxServiceRecord service = AuxServices.newAuxService(\"ConfChangeAuxService\", ConfChangeAuxService.class.getName());\r\n        service.getConfiguration().setProperty(\"dummyConfig\", \"testValue\");\r\n        writeManifestFile(new AuxServiceRecords().serviceList(service), conf);\r\n    } else {\r\n        conf.setStrings(YarnConfiguration.NM_AUX_SERVICES, new String[] { \"ConfChangeAuxService\" });\r\n        conf.setClass(String.format(YarnConfiguration.NM_AUX_SERVICE_FMT, \"ConfChangeAuxService\"), ConfChangeAuxService.class, Service.class);\r\n        conf.set(\"dummyConfig\", \"testValue\");\r\n    }\r\n    AuxServices aux = new AuxServices(MOCK_AUX_PATH_HANDLER, MOCK_CONTEXT, MOCK_DEL_SERVICE);\r\n    aux.init(conf);\r\n    aux.start();\r\n    for (AuxiliaryService s : aux.getServices()) {\r\n        assertEquals(STARTED, s.getServiceState());\r\n        if (useManifest) {\r\n            assertNull(conf.get(\"dummyConfig\"));\r\n        } else {\r\n            assertEquals(\"testValue\", conf.get(\"dummyConfig\"));\r\n        }\r\n        assertEquals(\"changedTestValue\", s.getConfig().get(\"dummyConfig\"));\r\n    }\r\n    aux.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testAuxServicesManifestPermissions",
  "errType" : null,
  "containingMethodsNum" : 22,
  "sourceCodeText" : "void testAuxServicesManifestPermissions() throws IOException\n{\r\n    Assume.assumeTrue(useManifest);\r\n    Configuration conf = getABConf();\r\n    FileSystem fs = FileSystem.get(conf);\r\n    fs.setPermission(new Path(manifest.getAbsolutePath()), FsPermission.createImmutable((short) 0777));\r\n    AuxServices aux = new AuxServices(MOCK_AUX_PATH_HANDLER, MOCK_CONTEXT, MOCK_DEL_SERVICE);\r\n    aux.init(conf);\r\n    assertEquals(0, aux.getServices().size());\r\n    fs.setPermission(new Path(manifest.getAbsolutePath()), FsPermission.createImmutable((short) 0775));\r\n    aux = new AuxServices(MOCK_AUX_PATH_HANDLER, MOCK_CONTEXT, MOCK_DEL_SERVICE);\r\n    aux.init(conf);\r\n    assertEquals(0, aux.getServices().size());\r\n    fs.setPermission(new Path(manifest.getAbsolutePath()), FsPermission.createImmutable((short) 0755));\r\n    fs.setPermission(new Path(rootDir.getAbsolutePath()), FsPermission.createImmutable((short) 0775));\r\n    aux = new AuxServices(MOCK_AUX_PATH_HANDLER, MOCK_CONTEXT, MOCK_DEL_SERVICE);\r\n    aux.init(conf);\r\n    assertEquals(0, aux.getServices().size());\r\n    fs.setPermission(new Path(rootDir.getAbsolutePath()), FsPermission.createImmutable((short) 0755));\r\n    aux = new AuxServices(MOCK_AUX_PATH_HANDLER, MOCK_CONTEXT, MOCK_DEL_SERVICE);\r\n    aux.init(conf);\r\n    assertEquals(2, aux.getServices().size());\r\n    conf.set(YarnConfiguration.YARN_ADMIN_ACL, \"\");\r\n    aux = new AuxServices(MOCK_AUX_PATH_HANDLER, MOCK_CONTEXT, MOCK_DEL_SERVICE);\r\n    aux.init(conf);\r\n    assertEquals(0, aux.getServices().size());\r\n    conf.set(YarnConfiguration.YARN_ADMIN_ACL, UserGroupInformation.getCurrentUser().getShortUserName());\r\n    aux = new AuxServices(MOCK_AUX_PATH_HANDLER, MOCK_CONTEXT, MOCK_DEL_SERVICE);\r\n    aux.init(conf);\r\n    assertEquals(2, aux.getServices().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testRemoveManifest",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testRemoveManifest() throws IOException\n{\r\n    Assume.assumeTrue(useManifest);\r\n    Configuration conf = getABConf();\r\n    final AuxServices aux = new AuxServices(MOCK_AUX_PATH_HANDLER, MOCK_CONTEXT, MOCK_DEL_SERVICE);\r\n    aux.init(conf);\r\n    assertEquals(2, aux.getServices().size());\r\n    manifest.delete();\r\n    aux.loadManifest(conf, false);\r\n    assertEquals(0, aux.getServices().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testManualReload",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testManualReload() throws IOException\n{\r\n    Assume.assumeTrue(useManifest);\r\n    Configuration conf = getABConf();\r\n    final AuxServices aux = new AuxServices(MOCK_AUX_PATH_HANDLER, MOCK_CONTEXT, MOCK_DEL_SERVICE);\r\n    aux.init(conf);\r\n    try {\r\n        aux.reload(null);\r\n        Assert.fail(\"Should receive the exception.\");\r\n    } catch (IOException e) {\r\n        assertTrue(\"Wrong message: \" + e.getMessage(), e.getMessage().equals(\"Auxiliary services have not been started \" + \"yet, please retry later\"));\r\n    }\r\n    aux.start();\r\n    assertEquals(2, aux.getServices().size());\r\n    aux.reload(null);\r\n    assertEquals(2, aux.getServices().size());\r\n    aux.reload(new AuxServiceRecords());\r\n    assertEquals(0, aux.getServices().size());\r\n    aux.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testReloadWhenDisabled",
  "errType" : [ "IOException", "IOException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testReloadWhenDisabled() throws IOException\n{\r\n    Configuration conf = new Configuration();\r\n    final AuxServices aux = new AuxServices(MOCK_AUX_PATH_HANDLER, MOCK_CONTEXT, MOCK_DEL_SERVICE);\r\n    aux.init(conf);\r\n    try {\r\n        aux.reload(null);\r\n        Assert.fail(\"Should receive the exception.\");\r\n    } catch (IOException e) {\r\n        assertTrue(\"Wrong message: \" + e.getMessage(), e.getMessage().equals(\"Dynamic reloading is not enabled via \" + YarnConfiguration.NM_AUX_SERVICES_MANIFEST_ENABLED));\r\n    }\r\n    try {\r\n        aux.reloadManifest();\r\n        Assert.fail(\"Should receive the exception.\");\r\n    } catch (IOException e) {\r\n        assertTrue(\"Wrong message: \" + e.getMessage(), e.getMessage().equals(\"Dynamic reloading is not enabled via \" + YarnConfiguration.NM_AUX_SERVICES_MANIFEST_ENABLED));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    when(APPID.toString()).thenReturn(\"app_1\");\r\n    when(CONTAINERID.toString()).thenReturn(\"container_1\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testKeyValLogFormat",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testKeyValLogFormat() throws Exception\n{\r\n    StringBuilder actLog = new StringBuilder();\r\n    StringBuilder expLog = new StringBuilder();\r\n    NMAuditLogger.start(Keys.USER, USER, actLog);\r\n    expLog.append(\"USER=test\");\r\n    assertEquals(expLog.toString(), actLog.toString());\r\n    NMAuditLogger.add(Keys.OPERATION, OPERATION, actLog);\r\n    expLog.append(\"\\tOPERATION=oper\");\r\n    assertEquals(expLog.toString(), actLog.toString());\r\n    NMAuditLogger.add(Keys.APPID, (String) null, actLog);\r\n    expLog.append(\"\\tAPPID=null\");\r\n    assertEquals(expLog.toString(), actLog.toString());\r\n    NMAuditLogger.add(Keys.TARGET, TARGET, actLog);\r\n    expLog.append(\"\\tTARGET=tgt\");\r\n    assertEquals(expLog.toString(), actLog.toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testSuccessLogFormatHelper",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testSuccessLogFormatHelper(boolean checkIP, ApplicationId appId, ContainerId containerId)\n{\r\n    String sLog = NMAuditLogger.createSuccessLog(USER, OPERATION, TARGET, appId, containerId);\r\n    StringBuilder expLog = new StringBuilder();\r\n    expLog.append(\"USER=test\\t\");\r\n    if (checkIP) {\r\n        InetAddress ip = Server.getRemoteIp();\r\n        expLog.append(Keys.IP.name() + \"=\" + ip.getHostAddress() + \"\\t\");\r\n    }\r\n    expLog.append(\"OPERATION=oper\\tTARGET=tgt\\tRESULT=SUCCESS\");\r\n    if (appId != null) {\r\n        expLog.append(\"\\tAPPID=app_1\");\r\n    }\r\n    if (containerId != null) {\r\n        expLog.append(\"\\tCONTAINERID=container_1\");\r\n    }\r\n    assertEquals(expLog.toString(), sLog);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testSuccessLogNulls",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testSuccessLogNulls(boolean checkIP)\n{\r\n    String sLog = NMAuditLogger.createSuccessLog(null, null, null, null, null);\r\n    StringBuilder expLog = new StringBuilder();\r\n    expLog.append(\"USER=null\\t\");\r\n    if (checkIP) {\r\n        InetAddress ip = Server.getRemoteIp();\r\n        expLog.append(Keys.IP.name() + \"=\" + ip.getHostAddress() + \"\\t\");\r\n    }\r\n    expLog.append(\"OPERATION=null\\tTARGET=null\\tRESULT=SUCCESS\");\r\n    assertEquals(expLog.toString(), sLog);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testSuccessLogFormat",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testSuccessLogFormat(boolean checkIP)\n{\r\n    testSuccessLogFormatHelper(checkIP, null, null);\r\n    testSuccessLogFormatHelper(checkIP, APPID, null);\r\n    testSuccessLogFormatHelper(checkIP, null, CONTAINERID);\r\n    testSuccessLogFormatHelper(checkIP, APPID, CONTAINERID);\r\n    testSuccessLogNulls(checkIP);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testFailureLogFormatHelper",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testFailureLogFormatHelper(boolean checkIP, ApplicationId appId, ContainerId containerId)\n{\r\n    String fLog = NMAuditLogger.createFailureLog(USER, OPERATION, TARGET, DESC, appId, containerId);\r\n    StringBuilder expLog = new StringBuilder();\r\n    expLog.append(\"USER=test\\t\");\r\n    if (checkIP) {\r\n        InetAddress ip = Server.getRemoteIp();\r\n        expLog.append(Keys.IP.name() + \"=\" + ip.getHostAddress() + \"\\t\");\r\n    }\r\n    expLog.append(\"OPERATION=oper\\tTARGET=tgt\\tRESULT=FAILURE\\t\");\r\n    expLog.append(\"DESCRIPTION=description of an audit log\");\r\n    if (appId != null) {\r\n        expLog.append(\"\\tAPPID=app_1\");\r\n    }\r\n    if (containerId != null) {\r\n        expLog.append(\"\\tCONTAINERID=container_1\");\r\n    }\r\n    assertEquals(expLog.toString(), fLog);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testFailureLogFormat",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testFailureLogFormat(boolean checkIP)\n{\r\n    testFailureLogFormatHelper(checkIP, null, null);\r\n    testFailureLogFormatHelper(checkIP, APPID, null);\r\n    testFailureLogFormatHelper(checkIP, null, CONTAINERID);\r\n    testFailureLogFormatHelper(checkIP, APPID, CONTAINERID);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testNMAuditLoggerWithoutIP",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testNMAuditLoggerWithoutIP() throws Exception\n{\r\n    testSuccessLogFormat(false);\r\n    testFailureLogFormat(false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testNMAuditLoggerWithIP",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testNMAuditLoggerWithIP() throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    RPC.setProtocolEngine(conf, TestRpcService.class, ProtobufRpcEngine2.class);\r\n    MyTestRPCServer serverImpl = new MyTestRPCServer();\r\n    BlockingService service = TestRpcServiceProtos.TestProtobufRpcProto.newReflectiveBlockingService(serverImpl);\r\n    Server server = new RPC.Builder(conf).setProtocol(TestRpcBase.TestRpcService.class).setInstance(service).setBindAddress(\"0.0.0.0\").setPort(0).setNumHandlers(5).setVerbose(true).build();\r\n    server.start();\r\n    InetSocketAddress addr = NetUtils.getConnectAddress(server);\r\n    TestRpcService proxy = RPC.getProxy(TestRpcService.class, TestProtocol.versionID, addr, conf);\r\n    TestProtos.EmptyRequestProto pingRequest = TestProtos.EmptyRequestProto.newBuilder().build();\r\n    proxy.ping(null, pingRequest);\r\n    server.stop();\r\n    RPC.stopProxy(proxy);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\logaggregation\\tracker",
  "methodName" : "testNMLogAggregationStatusUpdate",
  "errType" : null,
  "containingMethodsNum" : 29,
  "sourceCodeText" : "void testNMLogAggregationStatusUpdate()\n{\r\n    long baseTime = System.currentTimeMillis();\r\n    Context mockContext = mock(Context.class);\r\n    ConcurrentMap<ApplicationId, Application> apps = new ConcurrentHashMap<>();\r\n    ApplicationId appId1 = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    apps.putIfAbsent(appId1, mock(Application.class));\r\n    when(mockContext.getApplications()).thenReturn(apps);\r\n    Configuration conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED, false);\r\n    when(mockContext.getConf()).thenReturn(conf);\r\n    NMLogAggregationStatusTracker tracker = new NMLogAggregationStatusTracker(mockContext);\r\n    ApplicationId appId0 = ApplicationId.newInstance(0, 0);\r\n    tracker.updateLogAggregationStatus(appId0, LogAggregationStatus.RUNNING, System.currentTimeMillis(), \"\", false);\r\n    List<LogAggregationReport> reports = tracker.pullCachedLogAggregationReports();\r\n    Assert.assertTrue(\"No cached log aggregation status because \" + \"log aggregation is disabled.\", reports.isEmpty());\r\n    conf.setBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED, true);\r\n    when(mockContext.getConf()).thenReturn(conf);\r\n    tracker = new NMLogAggregationStatusTracker(mockContext);\r\n    appId0 = ApplicationId.newInstance(0, 0);\r\n    tracker.updateLogAggregationStatus(appId0, LogAggregationStatus.RUNNING, baseTime, \"\", false);\r\n    reports = tracker.pullCachedLogAggregationReports();\r\n    Assert.assertTrue(\"No cached log aggregation status \" + \"because the application is finished or not existed.\", reports.isEmpty());\r\n    tracker.updateLogAggregationStatus(appId1, LogAggregationStatus.RUNNING, baseTime, \"\", false);\r\n    reports = tracker.pullCachedLogAggregationReports();\r\n    Assert.assertEquals(\"Should have one cached log aggregation status.\", 1, reports.size());\r\n    Assert.assertEquals(\"The cached log aggregation status should be RUNNING.\", LogAggregationStatus.RUNNING, reports.get(0).getLogAggregationStatus());\r\n    tracker.updateLogAggregationStatus(appId1, LogAggregationStatus.SUCCEEDED, baseTime + 60 * 1000, \"\", true);\r\n    reports = tracker.pullCachedLogAggregationReports();\r\n    Assert.assertEquals(1, reports.size());\r\n    Assert.assertEquals(\"Update cached log aggregation status to SUCCEEDED\", LogAggregationStatus.SUCCEEDED, reports.get(0).getLogAggregationStatus());\r\n    tracker.updateLogAggregationStatus(appId1, LogAggregationStatus.FAILED, baseTime + 10 * 60 * 1000, \"\", true);\r\n    reports = tracker.pullCachedLogAggregationReports();\r\n    Assert.assertEquals(1, reports.size());\r\n    Assert.assertEquals(\"The cached log aggregation status \" + \"should be still SUCCEEDED.\", LogAggregationStatus.SUCCEEDED, reports.get(0).getLogAggregationStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\logaggregation\\tracker",
  "methodName" : "testLogAggregationStatusRoller",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testLogAggregationStatusRoller() throws Exception\n{\r\n    Context mockContext = mock(Context.class);\r\n    Configuration conf = new YarnConfiguration();\r\n    conf.setLong(YarnConfiguration.LOG_AGGREGATION_STATUS_TIME_OUT_MS, 10 * 1000);\r\n    when(mockContext.getConf()).thenReturn(conf);\r\n    ConcurrentMap<ApplicationId, Application> apps = new ConcurrentHashMap<>();\r\n    ApplicationId appId1 = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    apps.putIfAbsent(appId1, mock(Application.class));\r\n    when(mockContext.getApplications()).thenReturn(apps);\r\n    final NMLogAggregationStatusTracker tracker = new NMLogAggregationStatusTracker(mockContext);\r\n    tracker.updateLogAggregationStatus(appId1, LogAggregationStatus.RUNNING, System.currentTimeMillis(), \"\", false);\r\n    List<LogAggregationReport> reports = tracker.pullCachedLogAggregationReports();\r\n    Assert.assertEquals(\"Should have one cached log aggregation status.\", 1, reports.size());\r\n    Assert.assertEquals(\"The cached log aggregation status should be RUNNING.\", LogAggregationStatus.RUNNING, reports.get(0).getLogAggregationStatus());\r\n    GenericTestUtils.waitFor(new Supplier<Boolean>() {\r\n\r\n        @Override\r\n        public Boolean get() {\r\n            List<LogAggregationReport> reports = tracker.pullCachedLogAggregationReports();\r\n            return reports.size() == 0;\r\n        }\r\n    }, 2000, 10000);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createResourceLocalizationService",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "ResourceLocalizationService createResourceLocalizationService(ContainerExecutor exec, DeletionService deletionContext, Context context, NodeManagerMetrics metrics)\n{\r\n    return new ResourceLocalizationService(super.dispatcher, exec, deletionContext, super.dirsHandler, context, metrics) {\r\n\r\n        @Override\r\n        public void handle(LocalizationEvent event) {\r\n            switch(event.getType()) {\r\n                case INIT_APPLICATION_RESOURCES:\r\n                    Application app = ((ApplicationLocalizationEvent) event).getApplication();\r\n                    dispatcher.getEventHandler().handle(new ApplicationInitedEvent(app.getAppId()));\r\n                    break;\r\n                case LOCALIZE_CONTAINER_RESOURCES:\r\n                    ContainerLocalizationRequestEvent rsrcReqs = (ContainerLocalizationRequestEvent) event;\r\n                    for (Collection<LocalResourceRequest> rc : rsrcReqs.getRequestedResources().values()) {\r\n                        for (LocalResourceRequest req : rc) {\r\n                            LOG.info(\"DEBUG: \" + req + \":\" + rsrcReqs.getContainer().getContainerId());\r\n                            dispatcher.getEventHandler().handle(new ContainerResourceLocalizedEvent(rsrcReqs.getContainer().getContainerId(), req, new Path(\"file:///local\" + req.getPath().toUri().getPath())));\r\n                        }\r\n                    }\r\n                    break;\r\n                case CLEANUP_CONTAINER_RESOURCES:\r\n                    Container container = ((ContainerLocalizationEvent) event).getContainer();\r\n                    this.dispatcher.getEventHandler().handle(new ContainerEvent(container.getContainerId(), ContainerEventType.CONTAINER_RESOURCES_CLEANEDUP));\r\n                    break;\r\n                case DESTROY_APPLICATION_RESOURCES:\r\n                    Application application = ((ApplicationLocalizationEvent) event).getApplication();\r\n                    this.dispatcher.getEventHandler().handle(new ApplicationEvent(application.getAppId(), ApplicationEventType.APPLICATION_RESOURCES_CLEANEDUP));\r\n                    break;\r\n                default:\r\n                    fail(\"Unexpected event: \" + event.getType());\r\n            }\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getRemoteUgi",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "UserGroupInformation getRemoteUgi() throws YarnException\n{\r\n    ApplicationId appId = ApplicationId.newInstance(0, 0);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    UserGroupInformation ugi = UserGroupInformation.createRemoteUser(appAttemptId.toString());\r\n    ugi.addTokenIdentifier(new NMTokenIdentifier(appAttemptId, getContext().getNodeId(), \"testuser\", getContext().getNMTokenSecretManager().getCurrentKey().getKeyId()));\r\n    return ugi;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createContainersLauncher",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "ContainersLauncher createContainersLauncher(Context context, ContainerExecutor exec)\n{\r\n    return new ContainersLauncher(context, super.dispatcher, exec, super.dirsHandler, this) {\r\n\r\n        @Override\r\n        public void handle(ContainersLauncherEvent event) {\r\n            Container container = event.getContainer();\r\n            ContainerId containerId = container.getContainerId();\r\n            switch(event.getType()) {\r\n                case LAUNCH_CONTAINER:\r\n                    dispatcher.getEventHandler().handle(new ContainerEvent(containerId, ContainerEventType.CONTAINER_LAUNCHED));\r\n                    break;\r\n                case CLEANUP_CONTAINER:\r\n                    dispatcher.getEventHandler().handle(new ContainerExitEvent(containerId, ContainerEventType.CONTAINER_KILLED_ON_REQUEST, 0, \"Container exited with exit code 0.\"));\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createLogHandler",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "LogHandler createLogHandler(Configuration conf, Context context, DeletionService deletionService)\n{\r\n    return new LogHandler() {\r\n\r\n        @Override\r\n        public void handle(LogHandlerEvent event) {\r\n            switch(event.getType()) {\r\n                case APPLICATION_STARTED:\r\n                    break;\r\n                case CONTAINER_FINISHED:\r\n                    break;\r\n                case APPLICATION_FINISHED:\r\n                    break;\r\n                default:\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public Set<ApplicationId> getInvalidTokenApps() {\r\n            return Collections.emptySet();\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "authorizeStartAndResourceIncreaseRequest",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void authorizeStartAndResourceIncreaseRequest(NMTokenIdentifier nmTokenIdentifier, ContainerTokenIdentifier containerTokenIdentifier, boolean startRequest) throws YarnException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "authorizeGetAndStopContainerRequest",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void authorizeGetAndStopContainerRequest(ContainerId containerId, Container container, boolean stopRequest, NMTokenIdentifier identifier, String remoteUser) throws YarnException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "localize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourceLocalizationResponse localize(ResourceLocalizationRequest request) throws YarnException, IOException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "getTestParentFolder",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getTestParentFolder()\n{\r\n    File f = new File(\"target/temp/\" + TestFpgaDiscoverer.class.getName());\r\n    return f.getAbsolutePath();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "touchFile",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void touchFile(File f) throws IOException\n{\r\n    new FileOutputStream(f).close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "before",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void before() throws IOException\n{\r\n    String folder = getTestParentFolder();\r\n    File f = new File(folder);\r\n    FileUtils.deleteDirectory(f);\r\n    f.mkdirs();\r\n    conf = new Configuration();\r\n    openclPlugin = new IntelFpgaOpenclPlugin();\r\n    openclPlugin.initPlugin(conf);\r\n    openclPlugin.setInnerShellExecutor(mockPuginShell());\r\n    fpgaDiscoverer = new FpgaDiscoverer();\r\n    fpgaDiscoverer.setResourceHanderPlugin(openclPlugin);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "afterTest",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void afterTest()\n{\r\n    if (fakeBinary != null) {\r\n        fakeBinary.delete();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "testExecutablePathWithoutExplicitConfig",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testExecutablePathWithoutExplicitConfig() throws YarnException\n{\r\n    fpgaDiscoverer.initialize(conf);\r\n    assertEquals(\"No configuration(no environment ALTERAOCLSDKROOT set)\" + \" should return just a single binary name\", \"aocl\", openclPlugin.getPathToExecutable());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "testExecutablePathWithCorrectConfig",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testExecutablePathWithCorrectConfig() throws IOException, YarnException\n{\r\n    fakeBinary = new File(getTestParentFolder() + \"/aocl\");\r\n    conf.set(YarnConfiguration.NM_FPGA_PATH_TO_EXEC, getTestParentFolder() + \"/aocl\");\r\n    touchFile(fakeBinary);\r\n    fpgaDiscoverer.initialize(conf);\r\n    assertEquals(\"Correct configuration should return user setting\", getTestParentFolder() + \"/aocl\", openclPlugin.getPathToExecutable());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "testExecutablePathWhenFileDoesNotExist",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testExecutablePathWhenFileDoesNotExist() throws YarnException\n{\r\n    conf.set(YarnConfiguration.NM_FPGA_PATH_TO_EXEC, getTestParentFolder() + \"/aocl\");\r\n    fpgaDiscoverer.initialize(conf);\r\n    assertEquals(\"File doesn't exists - expected a single binary name\", \"aocl\", openclPlugin.getPathToExecutable());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "testExecutablePathWhenFileIsEmpty",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testExecutablePathWhenFileIsEmpty() throws YarnException\n{\r\n    conf.set(YarnConfiguration.NM_FPGA_PATH_TO_EXEC, \"\");\r\n    fpgaDiscoverer.initialize(conf);\r\n    assertEquals(\"configuration with empty string value, should use aocl\", \"aocl\", openclPlugin.getPathToExecutable());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "testExecutablePathWithSdkRootSet",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testExecutablePathWithSdkRootSet() throws IOException, YarnException\n{\r\n    fakeBinary = new File(getTestParentFolder() + \"/bin/aocl\");\r\n    fakeBinary.getParentFile().mkdirs();\r\n    touchFile(fakeBinary);\r\n    Map<String, String> newEnv = new HashMap<String, String>();\r\n    newEnv.put(\"ALTERAOCLSDKROOT\", getTestParentFolder());\r\n    openclPlugin.setEnvProvider(s -> {\r\n        return newEnv.get(s);\r\n    });\r\n    fpgaDiscoverer.initialize(conf);\r\n    assertEquals(\"No configuration but with environment ALTERAOCLSDKROOT set\", getTestParentFolder() + \"/bin/aocl\", openclPlugin.getPathToExecutable());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "testDiscoveryWhenAvailableDevicesDefined",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testDiscoveryWhenAvailableDevicesDefined() throws YarnException\n{\r\n    conf.set(YarnConfiguration.NM_FPGA_AVAILABLE_DEVICES, \"acl0/243:0,acl1/244:1\");\r\n    fpgaDiscoverer.initialize(conf);\r\n    List<FpgaDevice> devices = fpgaDiscoverer.discover();\r\n    assertEquals(\"Number of devices\", 2, devices.size());\r\n    FpgaDevice device0 = devices.get(0);\r\n    FpgaDevice device1 = devices.get(1);\r\n    assertEquals(\"Device id\", \"acl0\", device0.getAliasDevName());\r\n    assertEquals(\"Minor number\", 0, device0.getMinor());\r\n    assertEquals(\"Major\", 243, device0.getMajor());\r\n    assertEquals(\"Device id\", \"acl1\", device1.getAliasDevName());\r\n    assertEquals(\"Minor number\", 1, device1.getMinor());\r\n    assertEquals(\"Major\", 244, device1.getMajor());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "testDiscoveryWhenAvailableDevicesEmpty",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testDiscoveryWhenAvailableDevicesEmpty() throws YarnException\n{\r\n    expected.expect(ResourceHandlerException.class);\r\n    expected.expectMessage(\"No FPGA devices were specified\");\r\n    conf.set(YarnConfiguration.NM_FPGA_AVAILABLE_DEVICES, \"\");\r\n    fpgaDiscoverer.initialize(conf);\r\n    fpgaDiscoverer.discover();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "testDiscoveryWhenAvailableDevicesAreIllegalString",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testDiscoveryWhenAvailableDevicesAreIllegalString() throws YarnException\n{\r\n    expected.expect(ResourceHandlerException.class);\r\n    expected.expectMessage(\"Illegal device specification string\");\r\n    conf.set(YarnConfiguration.NM_FPGA_AVAILABLE_DEVICES, \"illegal/243:0,acl1/244=1\");\r\n    fpgaDiscoverer.initialize(conf);\r\n    fpgaDiscoverer.discover();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "testDiscoveryWhenExternalScriptDefined",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testDiscoveryWhenExternalScriptDefined() throws YarnException\n{\r\n    conf.set(YarnConfiguration.NM_FPGA_DEVICE_DISCOVERY_SCRIPT, \"/dummy/script\");\r\n    fpgaDiscoverer.setScriptRunner(s -> {\r\n        return Optional.of(\"acl0/243:0,acl1/244:1\");\r\n    });\r\n    fpgaDiscoverer.initialize(conf);\r\n    List<FpgaDevice> devices = fpgaDiscoverer.discover();\r\n    assertEquals(\"Number of devices\", 2, devices.size());\r\n    FpgaDevice device0 = devices.get(0);\r\n    FpgaDevice device1 = devices.get(1);\r\n    assertEquals(\"Device id\", \"acl0\", device0.getAliasDevName());\r\n    assertEquals(\"Minor number\", 0, device0.getMinor());\r\n    assertEquals(\"Major\", 243, device0.getMajor());\r\n    assertEquals(\"Device id\", \"acl1\", device1.getAliasDevName());\r\n    assertEquals(\"Minor number\", 1, device1.getMinor());\r\n    assertEquals(\"Major\", 244, device1.getMajor());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "testDiscoveryWhenExternalScriptReturnsEmptyString",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testDiscoveryWhenExternalScriptReturnsEmptyString() throws YarnException\n{\r\n    expected.expect(ResourceHandlerException.class);\r\n    expected.expectMessage(\"No FPGA devices were specified\");\r\n    conf.set(YarnConfiguration.NM_FPGA_DEVICE_DISCOVERY_SCRIPT, \"/dummy/script\");\r\n    fpgaDiscoverer.setScriptRunner(s -> {\r\n        return Optional.of(\"\");\r\n    });\r\n    fpgaDiscoverer.initialize(conf);\r\n    fpgaDiscoverer.discover();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "testDiscoveryWhenExternalScriptFails",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testDiscoveryWhenExternalScriptFails() throws YarnException\n{\r\n    expected.expect(ResourceHandlerException.class);\r\n    expected.expectMessage(\"Unable to run external script\");\r\n    conf.set(YarnConfiguration.NM_FPGA_DEVICE_DISCOVERY_SCRIPT, \"/dummy/script\");\r\n    fpgaDiscoverer.setScriptRunner(s -> {\r\n        return Optional.empty();\r\n    });\r\n    fpgaDiscoverer.initialize(conf);\r\n    fpgaDiscoverer.discover();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "testDiscoveryWhenExternalScriptUndefined",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testDiscoveryWhenExternalScriptUndefined() throws YarnException\n{\r\n    expected.expect(ResourceHandlerException.class);\r\n    expected.expectMessage(\"Unable to run external script\");\r\n    conf.set(YarnConfiguration.NM_FPGA_DEVICE_DISCOVERY_SCRIPT, \"\");\r\n    fpgaDiscoverer.initialize(conf);\r\n    fpgaDiscoverer.discover();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "testDiscoveryWhenExternalScriptCannotBeExecuted",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testDiscoveryWhenExternalScriptCannotBeExecuted() throws YarnException, IOException\n{\r\n    File fakeScript = new File(getTestParentFolder() + \"/fakeScript\");\r\n    try {\r\n        expected.expect(ResourceHandlerException.class);\r\n        expected.expectMessage(\"Unable to run external script\");\r\n        fakeScript = new File(getTestParentFolder() + \"/fakeScript\");\r\n        touchFile(fakeScript);\r\n        fakeScript.setExecutable(false);\r\n        conf.set(YarnConfiguration.NM_FPGA_DEVICE_DISCOVERY_SCRIPT, fakeScript.getAbsolutePath());\r\n        fpgaDiscoverer.initialize(conf);\r\n        fpgaDiscoverer.discover();\r\n    } finally {\r\n        fakeScript.delete();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "testCurrentFpgaInfoWhenAllDevicesAreAllowed",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testCurrentFpgaInfoWhenAllDevicesAreAllowed() throws YarnException\n{\r\n    conf.set(YarnConfiguration.NM_FPGA_AVAILABLE_DEVICES, \"acl0/243:0,acl1/244:1\");\r\n    fpgaDiscoverer.initialize(conf);\r\n    List<FpgaDevice> devices = fpgaDiscoverer.discover();\r\n    List<FpgaDevice> currentFpgaInfo = fpgaDiscoverer.getCurrentFpgaInfo();\r\n    assertEquals(\"Devices\", devices, currentFpgaInfo);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "testCurrentFpgaInfoWhenAllowedDevicesDefined",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testCurrentFpgaInfoWhenAllowedDevicesDefined() throws YarnException\n{\r\n    conf.set(YarnConfiguration.NM_FPGA_AVAILABLE_DEVICES, \"acl0/243:0,acl1/244:1\");\r\n    conf.set(YarnConfiguration.NM_FPGA_ALLOWED_DEVICES, \"0\");\r\n    fpgaDiscoverer.initialize(conf);\r\n    List<FpgaDevice> devices = fpgaDiscoverer.discover();\r\n    List<FpgaDevice> currentFpgaInfo = fpgaDiscoverer.getCurrentFpgaInfo();\r\n    assertEquals(\"Devices\", devices, currentFpgaInfo);\r\n    assertEquals(\"List of devices\", 1, currentFpgaInfo.size());\r\n    FpgaDevice device = currentFpgaInfo.get(0);\r\n    assertEquals(\"Device id\", \"acl0\", device.getAliasDevName());\r\n    assertEquals(\"Minor number\", 0, device.getMinor());\r\n    assertEquals(\"Major\", 243, device.getMajor());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "mockPuginShell",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "IntelFpgaOpenclPlugin.InnerShellExecutor mockPuginShell()\n{\r\n    IntelFpgaOpenclPlugin.InnerShellExecutor shell = mock(IntelFpgaOpenclPlugin.InnerShellExecutor.class);\r\n    when(shell.runDiagnose(anyString(), anyInt())).thenReturn(\"\");\r\n    when(shell.getMajorAndMinorNumber(\"aclnalla_pcie0\")).thenReturn(\"247:0\");\r\n    when(shell.getMajorAndMinorNumber(\"aclnalla_pcie1\")).thenReturn(\"247:1\");\r\n    when(shell.getMajorAndMinorNumber(\"acla10_ref0\")).thenReturn(\"246:0\");\r\n    return shell;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testConstructorOff",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void testConstructorOff() throws YarnException\n{\r\n    new CGroupElasticMemoryController(conf, null, null, false, false, 10000);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testConstructorHandler",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testConstructorHandler() throws YarnException\n{\r\n    conf.setClass(YarnConfiguration.NM_ELASTIC_MEMORY_CONTROL_OOM_HANDLER, DummyRunnableWithContext.class, Runnable.class);\r\n    CGroupsHandler handler = mock(CGroupsHandler.class);\r\n    when(handler.getPathForCGroup(any(), any())).thenReturn(\"\");\r\n    new CGroupElasticMemoryController(conf, null, handler, true, false, 10000);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testMultipleOOMEvents",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testMultipleOOMEvents() throws Exception\n{\r\n    conf.set(YarnConfiguration.NM_ELASTIC_MEMORY_CONTROL_OOM_LISTENER_PATH, script.getAbsolutePath());\r\n    try {\r\n        FileUtils.writeStringToFile(script, \"#!/bin/bash\\nprintf oomevent;printf oomevent;\\n\", StandardCharsets.UTF_8, false);\r\n        assertTrue(\"Could not set executable\", script.setExecutable(true));\r\n        CGroupsHandler cgroups = mock(CGroupsHandler.class);\r\n        when(cgroups.getPathForCGroup(any(), any())).thenReturn(\"\");\r\n        when(cgroups.getCGroupParam(any(), any(), any())).thenReturn(\"under_oom 0\");\r\n        Runnable handler = mock(Runnable.class);\r\n        doNothing().when(handler).run();\r\n        CGroupElasticMemoryController controller = new CGroupElasticMemoryController(conf, null, cgroups, true, false, 10000, handler);\r\n        controller.run();\r\n        verify(handler, times(2)).run();\r\n    } finally {\r\n        assertTrue(String.format(\"Could not clean up script %s\", script.getAbsolutePath()), script.delete());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testStopBeforeStart",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testStopBeforeStart() throws Exception\n{\r\n    conf.set(YarnConfiguration.NM_ELASTIC_MEMORY_CONTROL_OOM_LISTENER_PATH, script.getAbsolutePath());\r\n    try {\r\n        FileUtils.writeStringToFile(script, \"#!/bin/bash\\nprintf oomevent;printf oomevent;\\n\", StandardCharsets.UTF_8, false);\r\n        assertTrue(\"Could not set executable\", script.setExecutable(true));\r\n        CGroupsHandler cgroups = mock(CGroupsHandler.class);\r\n        when(cgroups.getPathForCGroup(any(), any())).thenReturn(\"\");\r\n        when(cgroups.getCGroupParam(any(), any(), any())).thenReturn(\"under_oom 0\");\r\n        Runnable handler = mock(Runnable.class);\r\n        doNothing().when(handler).run();\r\n        CGroupElasticMemoryController controller = new CGroupElasticMemoryController(conf, null, cgroups, true, false, 10000, handler);\r\n        controller.stopListening();\r\n        controller.run();\r\n        verify(handler, times(0)).run();\r\n    } finally {\r\n        assertTrue(String.format(\"Could not clean up script %s\", script.getAbsolutePath()), script.delete());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testInfiniteOOM",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testInfiniteOOM() throws Exception\n{\r\n    conf.set(YarnConfiguration.NM_ELASTIC_MEMORY_CONTROL_OOM_LISTENER_PATH, script.getAbsolutePath());\r\n    Runnable handler = mock(Runnable.class);\r\n    try {\r\n        FileUtils.writeStringToFile(script, \"#!/bin/bash\\nprintf oomevent;sleep 1000;\\n\", StandardCharsets.UTF_8, false);\r\n        assertTrue(\"Could not set executable\", script.setExecutable(true));\r\n        CGroupsHandler cgroups = mock(CGroupsHandler.class);\r\n        when(cgroups.getPathForCGroup(any(), any())).thenReturn(\"\");\r\n        when(cgroups.getCGroupParam(any(), any(), any())).thenReturn(\"under_oom 1\");\r\n        doNothing().when(handler).run();\r\n        CGroupElasticMemoryController controller = new CGroupElasticMemoryController(conf, null, cgroups, true, false, 10000, handler);\r\n        controller.run();\r\n    } finally {\r\n        verify(handler, times(1)).run();\r\n        assertTrue(String.format(\"Could not clean up script %s\", script.getAbsolutePath()), script.delete());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testNothingToKill",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testNothingToKill() throws Exception\n{\r\n    conf.set(YarnConfiguration.NM_ELASTIC_MEMORY_CONTROL_OOM_LISTENER_PATH, script.getAbsolutePath());\r\n    Runnable handler = mock(Runnable.class);\r\n    try {\r\n        FileUtils.writeStringToFile(script, \"#!/bin/bash\\nprintf oomevent;sleep 1000;\\n\", StandardCharsets.UTF_8, false);\r\n        assertTrue(\"Could not set executable\", script.setExecutable(true));\r\n        CGroupsHandler cgroups = mock(CGroupsHandler.class);\r\n        when(cgroups.getPathForCGroup(any(), any())).thenReturn(\"\");\r\n        when(cgroups.getCGroupParam(any(), any(), any())).thenReturn(\"under_oom 1\");\r\n        doThrow(new YarnRuntimeException(\"Expected\")).when(handler).run();\r\n        CGroupElasticMemoryController controller = new CGroupElasticMemoryController(conf, null, cgroups, true, false, 10000, handler);\r\n        controller.run();\r\n    } finally {\r\n        verify(handler, times(1)).run();\r\n        assertTrue(String.format(\"Could not clean up script %s\", script.getAbsolutePath()), script.delete());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testNormalExit",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testNormalExit() throws Exception\n{\r\n    conf.set(YarnConfiguration.NM_ELASTIC_MEMORY_CONTROL_OOM_LISTENER_PATH, \"sleep\");\r\n    ExecutorService service = Executors.newFixedThreadPool(1);\r\n    try {\r\n        CGroupsHandler cgroups = mock(CGroupsHandler.class);\r\n        when(cgroups.getPathForCGroup(any(), any())).thenReturn(\"10000\");\r\n        when(cgroups.getCGroupParam(any(), any(), any())).thenReturn(\"under_oom 0\");\r\n        Runnable handler = mock(Runnable.class);\r\n        doNothing().when(handler).run();\r\n        CGroupElasticMemoryController controller = new CGroupElasticMemoryController(conf, null, cgroups, true, false, 10000, handler);\r\n        long start = System.currentTimeMillis();\r\n        service.submit(() -> {\r\n            try {\r\n                Thread.sleep(2000);\r\n            } catch (InterruptedException ex) {\r\n                assertTrue(\"Wait interrupted.\", false);\r\n            }\r\n            LOG.info(String.format(\"Calling process destroy in %d ms\", System.currentTimeMillis() - start));\r\n            controller.stopListening();\r\n            LOG.info(\"Called process destroy.\");\r\n        });\r\n        controller.run();\r\n    } finally {\r\n        service.shutdown();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testDefaultConstructor",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testDefaultConstructor() throws YarnException\n{\r\n    CGroupsHandler handler = mock(CGroupsHandler.class);\r\n    when(handler.getPathForCGroup(any(), any())).thenReturn(\"\");\r\n    new CGroupElasticMemoryController(conf, null, handler, true, false, 10);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "testRequestInterceptorChainCreation",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testRequestInterceptorChainCreation() throws Exception\n{\r\n    RequestInterceptor root = super.getAMRMProxyService().createRequestInterceptorChain();\r\n    int index = 0;\r\n    while (root != null) {\r\n        switch(index) {\r\n            case 0:\r\n            case 1:\r\n            case 2:\r\n                Assert.assertEquals(PassThroughRequestInterceptor.class.getName(), root.getClass().getName());\r\n                break;\r\n            case 3:\r\n                Assert.assertEquals(MockRequestInterceptor.class.getName(), root.getClass().getName());\r\n                break;\r\n        }\r\n        root = root.getNextInterceptor();\r\n        index++;\r\n    }\r\n    Assert.assertEquals(\"The number of interceptors in chain does not match\", Integer.toString(4), Integer.toString(index));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "testRegisterOneApplicationMaster",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testRegisterOneApplicationMaster() throws Exception\n{\r\n    int testAppId = 1;\r\n    RegisterApplicationMasterResponse response1 = registerApplicationMaster(testAppId);\r\n    Assert.assertNotNull(response1);\r\n    Assert.assertEquals(Integer.toString(testAppId), response1.getQueue());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "testInterceptorInitFailure",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testInterceptorInitFailure() throws IOException\n{\r\n    Configuration conf = this.getConf();\r\n    conf.set(YarnConfiguration.AMRM_PROXY_INTERCEPTOR_CLASS_PIPELINE, \"class.that.does.not.exist\");\r\n    createAndStartAMRMProxyService(conf);\r\n    int testAppId = 1;\r\n    try {\r\n        registerApplicationMaster(testAppId);\r\n        Assert.fail(\"Should not reach here. Expecting an exception thrown\");\r\n    } catch (Exception e) {\r\n        Map<ApplicationId, RequestInterceptorChainWrapper> pipelines = getAMRMProxyService().getPipelines();\r\n        ApplicationId id = getApplicationId(testAppId);\r\n        Assert.assertTrue(\"The interceptor pipeline should be removed if initializtion fails\", pipelines.get(id) == null);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "testRegisterMulitpleApplicationMasters",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testRegisterMulitpleApplicationMasters() throws Exception\n{\r\n    for (int testAppId = 0; testAppId < 3; testAppId++) {\r\n        RegisterApplicationMasterResponse response = registerApplicationMaster(testAppId);\r\n        Assert.assertNotNull(response);\r\n        Assert.assertEquals(Integer.toString(testAppId), response.getQueue());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "testRegisterMulitpleApplicationMastersInParallel",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testRegisterMulitpleApplicationMastersInParallel() throws Exception\n{\r\n    int numberOfRequests = 5;\r\n    ArrayList<String> testContexts = CreateTestRequestIdentifiers(numberOfRequests);\r\n    super.registerApplicationMastersInParallel(testContexts);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "CreateTestRequestIdentifiers",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ArrayList<String> CreateTestRequestIdentifiers(int numberOfRequests)\n{\r\n    ArrayList<String> testContexts = new ArrayList<String>();\r\n    LOG.info(\"Creating \" + numberOfRequests + \" contexts for testing\");\r\n    for (int ep = 0; ep < numberOfRequests; ep++) {\r\n        testContexts.add(\"test-endpoint-\" + Integer.toString(ep));\r\n        LOG.info(\"Created test context: \" + testContexts.get(ep));\r\n    }\r\n    return testContexts;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "testFinishOneApplicationMasterWithSuccess",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testFinishOneApplicationMasterWithSuccess() throws Exception\n{\r\n    int testAppId = 1;\r\n    RegisterApplicationMasterResponse registerResponse = registerApplicationMaster(testAppId);\r\n    Assert.assertNotNull(registerResponse);\r\n    Assert.assertEquals(Integer.toString(testAppId), registerResponse.getQueue());\r\n    FinishApplicationMasterResponse finshResponse = finishApplicationMaster(testAppId, FinalApplicationStatus.SUCCEEDED);\r\n    Assert.assertNotNull(finshResponse);\r\n    Assert.assertEquals(true, finshResponse.getIsUnregistered());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "testFinishOneApplicationMasterWithFailure",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testFinishOneApplicationMasterWithFailure() throws Exception\n{\r\n    int testAppId = 1;\r\n    RegisterApplicationMasterResponse registerResponse = registerApplicationMaster(testAppId);\r\n    Assert.assertNotNull(registerResponse);\r\n    Assert.assertEquals(Integer.toString(testAppId), registerResponse.getQueue());\r\n    FinishApplicationMasterResponse finshResponse = finishApplicationMaster(testAppId, FinalApplicationStatus.FAILED);\r\n    Assert.assertNotNull(finshResponse);\r\n    try {\r\n        finishApplicationMaster(testAppId, FinalApplicationStatus.SUCCEEDED);\r\n        Assert.fail(\"The request to finish application master should have failed\");\r\n    } catch (Throwable ex) {\r\n        LOG.info(\"Finish registration failed as expected because it was not registered\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "testFinishInvalidApplicationMaster",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testFinishInvalidApplicationMaster() throws Exception\n{\r\n    try {\r\n        finishApplicationMaster(4, FinalApplicationStatus.SUCCEEDED);\r\n        Assert.fail(\"The request to finish application master should have failed\");\r\n    } catch (Throwable ex) {\r\n        LOG.info(\"Finish registration failed as expected because it was not registered\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "testFinishMulitpleApplicationMasters",
  "errType" : [ "Throwable", "Throwable" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testFinishMulitpleApplicationMasters() throws Exception\n{\r\n    int numberOfRequests = 3;\r\n    for (int index = 0; index < numberOfRequests; index++) {\r\n        RegisterApplicationMasterResponse registerResponse = registerApplicationMaster(index);\r\n        Assert.assertNotNull(registerResponse);\r\n        Assert.assertEquals(Integer.toString(index), registerResponse.getQueue());\r\n    }\r\n    for (int index = numberOfRequests - 1; index >= 0; index--) {\r\n        FinishApplicationMasterResponse finshResponse = finishApplicationMaster(index, FinalApplicationStatus.SUCCEEDED);\r\n        Assert.assertNotNull(finshResponse);\r\n        Assert.assertEquals(true, finshResponse.getIsUnregistered());\r\n        Assert.assertTrue(this.getAMRMProxyService().getPipelines().size() == index);\r\n    }\r\n    try {\r\n        finishApplicationMaster(1, FinalApplicationStatus.SUCCEEDED);\r\n        Assert.fail(\"The request to finish application master should have failed\");\r\n    } catch (Throwable ex) {\r\n        LOG.info(\"Finish registration failed as expected because it was not registered\");\r\n    }\r\n    try {\r\n        finishApplicationMaster(4, FinalApplicationStatus.SUCCEEDED);\r\n        Assert.fail(\"The request to finish application master should have failed\");\r\n    } catch (Throwable ex) {\r\n        LOG.info(\"Finish registration failed as expected because it was not registered\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "testFinishMulitpleApplicationMastersInParallel",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testFinishMulitpleApplicationMastersInParallel() throws Exception\n{\r\n    int numberOfRequests = 5;\r\n    ArrayList<String> testContexts = new ArrayList<String>();\r\n    LOG.info(\"Creating \" + numberOfRequests + \" contexts for testing\");\r\n    for (int i = 0; i < numberOfRequests; i++) {\r\n        testContexts.add(\"test-endpoint-\" + Integer.toString(i));\r\n        LOG.info(\"Created test context: \" + testContexts.get(i));\r\n        RegisterApplicationMasterResponse registerResponse = registerApplicationMaster(i);\r\n        Assert.assertNotNull(registerResponse);\r\n        Assert.assertEquals(Integer.toString(i), registerResponse.getQueue());\r\n    }\r\n    finishApplicationMastersInParallel(testContexts);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "testAllocateRequestWithNullValues",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testAllocateRequestWithNullValues() throws Exception\n{\r\n    int testAppId = 1;\r\n    RegisterApplicationMasterResponse registerResponse = registerApplicationMaster(testAppId);\r\n    Assert.assertNotNull(registerResponse);\r\n    Assert.assertEquals(Integer.toString(testAppId), registerResponse.getQueue());\r\n    AllocateResponse allocateResponse = allocate(testAppId);\r\n    Assert.assertNotNull(allocateResponse);\r\n    FinishApplicationMasterResponse finshResponse = finishApplicationMaster(testAppId, FinalApplicationStatus.SUCCEEDED);\r\n    Assert.assertNotNull(finshResponse);\r\n    Assert.assertEquals(true, finshResponse.getIsUnregistered());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "testAllocateRequestWithoutRegistering",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testAllocateRequestWithoutRegistering() throws Exception\n{\r\n    try {\r\n        allocate(1);\r\n        Assert.fail(\"The request to allocate application master should have failed\");\r\n    } catch (Throwable ex) {\r\n        LOG.info(\"AllocateRequest failed as expected because AM was not registered\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "testAllocateWithOneResourceRequest",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testAllocateWithOneResourceRequest() throws Exception\n{\r\n    int testAppId = 1;\r\n    RegisterApplicationMasterResponse registerResponse = registerApplicationMaster(testAppId);\r\n    Assert.assertNotNull(registerResponse);\r\n    getContainersAndAssert(testAppId, 1);\r\n    finishApplicationMaster(testAppId, FinalApplicationStatus.SUCCEEDED);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "testAllocateWithMultipleResourceRequest",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testAllocateWithMultipleResourceRequest() throws Exception\n{\r\n    int testAppId = 1;\r\n    RegisterApplicationMasterResponse registerResponse = registerApplicationMaster(testAppId);\r\n    Assert.assertNotNull(registerResponse);\r\n    getContainersAndAssert(testAppId, 10);\r\n    finishApplicationMaster(testAppId, FinalApplicationStatus.SUCCEEDED);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "testAllocateAndReleaseContainers",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testAllocateAndReleaseContainers() throws Exception\n{\r\n    int testAppId = 1;\r\n    RegisterApplicationMasterResponse registerResponse = registerApplicationMaster(testAppId);\r\n    Assert.assertNotNull(registerResponse);\r\n    List<Container> containers = getContainersAndAssert(testAppId, 10);\r\n    releaseContainersAndAssert(testAppId, containers);\r\n    finishApplicationMaster(testAppId, FinalApplicationStatus.SUCCEEDED);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "testAllocateAndReleaseContainersForMultipleAM",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testAllocateAndReleaseContainersForMultipleAM() throws Exception\n{\r\n    int numberOfApps = 5;\r\n    for (int testAppId = 0; testAppId < numberOfApps; testAppId++) {\r\n        RegisterApplicationMasterResponse registerResponse = registerApplicationMaster(testAppId);\r\n        Assert.assertNotNull(registerResponse);\r\n        List<Container> containers = getContainersAndAssert(testAppId, 10);\r\n        releaseContainersAndAssert(testAppId, containers);\r\n    }\r\n    for (int testAppId = 0; testAppId < numberOfApps; testAppId++) {\r\n        finishApplicationMaster(testAppId, FinalApplicationStatus.SUCCEEDED);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "testAllocateAndReleaseContainersForMultipleAMInParallel",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testAllocateAndReleaseContainersForMultipleAMInParallel() throws Exception\n{\r\n    int numberOfApps = 6;\r\n    ArrayList<Integer> tempAppIds = new ArrayList<Integer>();\r\n    for (int i = 0; i < numberOfApps; i++) {\r\n        tempAppIds.add(new Integer(i));\r\n    }\r\n    final ArrayList<Integer> appIds = tempAppIds;\r\n    List<Integer> responses = runInParallel(appIds, new Function<Integer, Integer>() {\r\n\r\n        @Override\r\n        public Integer invoke(Integer testAppId) {\r\n            try {\r\n                RegisterApplicationMasterResponse registerResponse = registerApplicationMaster(testAppId);\r\n                Assert.assertNotNull(\"response is null\", registerResponse);\r\n                List<Container> containers = getContainersAndAssert(testAppId, 10);\r\n                releaseContainersAndAssert(testAppId, containers);\r\n                LOG.info(\"Sucessfully registered application master with appId: \" + testAppId);\r\n            } catch (Throwable ex) {\r\n                LOG.error(\"Failed to register application master with appId: \" + testAppId, ex);\r\n                testAppId = null;\r\n            }\r\n            return testAppId;\r\n        }\r\n    });\r\n    Assert.assertEquals(\"Number of responses received does not match with request\", appIds.size(), responses.size());\r\n    for (Integer testAppId : responses) {\r\n        Assert.assertNotNull(testAppId);\r\n        finishApplicationMaster(testAppId.intValue(), FinalApplicationStatus.SUCCEEDED);\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "testMultipleAttemptsSameNode",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testMultipleAttemptsSameNode() throws YarnException, IOException, Exception\n{\r\n    String user = \"hadoop\";\r\n    ApplicationId appId = ApplicationId.newInstance(1, 1);\r\n    ApplicationAttemptId applicationAttemptId;\r\n    RegisterApplicationMasterResponse response1 = registerApplicationMaster(appId.getId());\r\n    Assert.assertNotNull(response1);\r\n    AllocateResponse allocateResponse = allocate(appId.getId());\r\n    Assert.assertNotNull(allocateResponse);\r\n    applicationAttemptId = ApplicationAttemptId.newInstance(appId, 2);\r\n    getAMRMProxyService().initializePipeline(applicationAttemptId, user, new Token<AMRMTokenIdentifier>(), null, null, false, null);\r\n    RequestInterceptorChainWrapper chain2 = getAMRMProxyService().getPipelines().get(appId);\r\n    Assert.assertEquals(applicationAttemptId, chain2.getApplicationAttemptId());\r\n    allocateResponse = allocate(appId.getId());\r\n    Assert.assertNotNull(allocateResponse);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getContainersAndAssert",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "List<Container> getContainersAndAssert(int appId, int numberOfResourceRequests) throws Exception\n{\r\n    AllocateRequest allocateRequest = Records.newRecord(AllocateRequest.class);\r\n    allocateRequest.setResponseId(1);\r\n    List<Container> containers = new ArrayList<Container>(numberOfResourceRequests);\r\n    List<ResourceRequest> askList = new ArrayList<ResourceRequest>(numberOfResourceRequests);\r\n    for (int testAppId = 0; testAppId < numberOfResourceRequests; testAppId++) {\r\n        askList.add(createResourceRequest(\"test-node-\" + Integer.toString(testAppId), 6000, 2, testAppId % 5, 1));\r\n    }\r\n    allocateRequest.setAskList(askList);\r\n    AllocateResponse allocateResponse = allocate(appId, allocateRequest);\r\n    Assert.assertNotNull(\"allocate() returned null response\", allocateResponse);\r\n    Assert.assertNull(\"new AMRMToken from RM should have been nulled by AMRMProxyService\", allocateResponse.getAMRMToken());\r\n    containers.addAll(allocateResponse.getAllocatedContainers());\r\n    int numHeartbeat = 0;\r\n    while (containers.size() < askList.size() && numHeartbeat++ < 10) {\r\n        allocateResponse = allocate(appId, Records.newRecord(AllocateRequest.class));\r\n        Assert.assertNotNull(\"allocate() returned null response\", allocateResponse);\r\n        Assert.assertNull(\"new AMRMToken from RM should have been nulled by AMRMProxyService\", allocateResponse.getAMRMToken());\r\n        containers.addAll(allocateResponse.getAllocatedContainers());\r\n        LOG.info(\"Number of allocated containers in this request: \" + Integer.toString(allocateResponse.getAllocatedContainers().size()));\r\n        LOG.info(\"Total number of allocated containers: \" + Integer.toString(containers.size()));\r\n        Thread.sleep(10);\r\n    }\r\n    Assert.assertTrue(\"The asklist count is not same as response\", askList.size() <= containers.size());\r\n    return containers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "releaseContainersAndAssert",
  "errType" : null,
  "containingMethodsNum" : 22,
  "sourceCodeText" : "void releaseContainersAndAssert(int appId, List<Container> containers) throws Exception\n{\r\n    Assert.assertTrue(containers.size() > 0);\r\n    AllocateRequest allocateRequest = Records.newRecord(AllocateRequest.class);\r\n    allocateRequest.setResponseId(1);\r\n    List<ContainerId> relList = new ArrayList<ContainerId>(containers.size());\r\n    for (Container container : containers) {\r\n        relList.add(container.getId());\r\n    }\r\n    allocateRequest.setReleaseList(relList);\r\n    AllocateResponse allocateResponse = allocate(appId, allocateRequest);\r\n    Assert.assertNotNull(allocateResponse);\r\n    Assert.assertNull(\"new AMRMToken from RM should have been nulled by AMRMProxyService\", allocateResponse.getAMRMToken());\r\n    List<ContainerId> containersForReleasedContainerIds = new ArrayList<>();\r\n    List<ContainerId> newlyFinished = getCompletedContainerIds(allocateResponse.getCompletedContainersStatuses());\r\n    containersForReleasedContainerIds.addAll(newlyFinished);\r\n    int numHeartbeat = 0;\r\n    while (containersForReleasedContainerIds.size() < relList.size() && numHeartbeat++ < 10) {\r\n        allocateResponse = allocate(appId, Records.newRecord(AllocateRequest.class));\r\n        Assert.assertNotNull(allocateResponse);\r\n        Assert.assertNull(\"new AMRMToken from RM should have been nulled by AMRMProxyService\", allocateResponse.getAMRMToken());\r\n        newlyFinished = getCompletedContainerIds(allocateResponse.getCompletedContainersStatuses());\r\n        containersForReleasedContainerIds.addAll(newlyFinished);\r\n        LOG.info(\"Number of containers received in this request: \" + Integer.toString(allocateResponse.getAllocatedContainers().size()));\r\n        LOG.info(\"Total number of containers received: \" + Integer.toString(containersForReleasedContainerIds.size()));\r\n        Thread.sleep(10);\r\n    }\r\n    Assert.assertEquals(relList.size(), containersForReleasedContainerIds.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "testRecovery",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 25,
  "sourceCodeText" : "void testRecovery() throws YarnException, Exception\n{\r\n    Configuration conf = createConfiguration();\r\n    conf.set(YarnConfiguration.AMRM_PROXY_INTERCEPTOR_CLASS_PIPELINE, MockRequestInterceptorAcrossRestart.class.getName());\r\n    mockRM = new MockResourceManagerFacade(new YarnConfiguration(conf), 0);\r\n    createAndStartAMRMProxyService(conf);\r\n    int testAppId1 = 1;\r\n    RegisterApplicationMasterResponse registerResponse = registerApplicationMaster(testAppId1);\r\n    Assert.assertNotNull(registerResponse);\r\n    Assert.assertEquals(Integer.toString(testAppId1), registerResponse.getQueue());\r\n    int testAppId2 = 2;\r\n    registerResponse = registerApplicationMaster(testAppId2);\r\n    Assert.assertNotNull(registerResponse);\r\n    Assert.assertEquals(Integer.toString(testAppId2), registerResponse.getQueue());\r\n    AllocateResponse allocateResponse = allocate(testAppId2);\r\n    Assert.assertNotNull(allocateResponse);\r\n    createAndStartAMRMProxyService(conf);\r\n    Assert.assertTrue(getAMRMProxyService().getPipelines().size() == 2);\r\n    allocateResponse = allocate(testAppId1);\r\n    Assert.assertNotNull(allocateResponse);\r\n    FinishApplicationMasterResponse finshResponse = finishApplicationMaster(testAppId1, FinalApplicationStatus.SUCCEEDED);\r\n    Assert.assertNotNull(finshResponse);\r\n    Assert.assertEquals(true, finshResponse.getIsUnregistered());\r\n    allocateResponse = allocate(testAppId2);\r\n    Assert.assertNotNull(allocateResponse);\r\n    finshResponse = finishApplicationMaster(testAppId2, FinalApplicationStatus.SUCCEEDED);\r\n    Assert.assertNotNull(finshResponse);\r\n    Assert.assertEquals(true, finshResponse.getIsUnregistered());\r\n    int testAppId3 = 3;\r\n    try {\r\n        finishApplicationMaster(testAppId3, FinalApplicationStatus.SUCCEEDED);\r\n        Assert.fail(\"The Mock RM should complain about not knowing the third app\");\r\n    } catch (Throwable ex) {\r\n    }\r\n    mockRM = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "testAppRecoveryFailure",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testAppRecoveryFailure() throws YarnException, Exception\n{\r\n    Configuration conf = createConfiguration();\r\n    conf.set(YarnConfiguration.AMRM_PROXY_INTERCEPTOR_CLASS_PIPELINE, BadRequestInterceptorAcrossRestart.class.getName());\r\n    mockRM = new MockResourceManagerFacade(new YarnConfiguration(conf), 0);\r\n    createAndStartAMRMProxyService(conf);\r\n    registerApplicationMaster(1);\r\n    RecoveredAMRMProxyState state = getNMContext().getNMStateStore().loadAMRMProxyState();\r\n    Assert.assertEquals(1, state.getAppContexts().size());\r\n    createAndStartAMRMProxyService(conf);\r\n    state = getNMContext().getNMStateStore().loadAMRMProxyState();\r\n    Assert.assertEquals(0, state.getAppContexts().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "testCheckIfAppExistsInStateStore",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testCheckIfAppExistsInStateStore() throws IOException, YarnException\n{\r\n    ApplicationId appId = ApplicationId.newInstance(0, 0);\r\n    Configuration conf = createConfiguration();\r\n    conf.setBoolean(YarnConfiguration.FEDERATION_ENABLED, true);\r\n    createAndStartAMRMProxyService(conf);\r\n    Assert.assertEquals(false, getAMRMProxyService().checkIfAppExistsInStateStore(appId));\r\n    Configuration distConf = createConfiguration();\r\n    conf.setBoolean(YarnConfiguration.DIST_SCHEDULING_ENABLED, true);\r\n    createAndStartAMRMProxyService(distConf);\r\n    Assert.assertEquals(true, getAMRMProxyService().checkIfAppExistsInStateStore(appId));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "data",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Collection<Object[]> data()\n{\r\n    return Arrays.asList(new Object[][] { { true }, { false } });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "setup",
  "errType" : [ "URISyntaxException" ],
  "containingMethodsNum" : 54,
  "sourceCodeText" : "void setup() throws ContainerExecutionException\n{\r\n    mockExecutor = Mockito.mock(PrivilegedOperationExecutor.class);\r\n    mockCGroupsHandler = Mockito.mock(CGroupsHandler.class);\r\n    tmpPath = new StringBuffer(System.getProperty(\"test.build.data\")).append('/').append(\"hadoop.tmp.dir\").toString();\r\n    containerId = \"container_e11_1518975676334_14532816_01_000001\";\r\n    container = mock(Container.class);\r\n    cId = mock(ContainerId.class);\r\n    appAttemptId = mock(ApplicationAttemptId.class);\r\n    mockApplicationId = mock(ApplicationId.class);\r\n    context = mock(ContainerLaunchContext.class);\r\n    env = new HashMap<>();\r\n    env.put(\"FROM_CLIENT\", \"1\");\r\n    image = \"busybox:latest\";\r\n    nmContext = createMockNMContext();\r\n    runcRuntimeObject = mock(RuncContainerRuntime.RuncRuntimeObject.class);\r\n    localResource = mock(LocalResource.class);\r\n    mockUrl = mock(URL.class);\r\n    resource = mock(Resource.class);\r\n    appId = \"app_id\";\r\n    layersToKeep = 5;\r\n    cpuShares = 10;\r\n    conf = new Configuration();\r\n    conf.set(\"hadoop.tmp.dir\", tmpPath);\r\n    conf.setInt(NM_RUNC_LAYER_MOUNTS_TO_KEEP, layersToKeep);\r\n    env.put(RuncContainerRuntime.ENV_RUNC_CONTAINER_IMAGE, image);\r\n    when(container.getContainerId()).thenReturn(cId);\r\n    when(cId.toString()).thenReturn(containerId);\r\n    when(mockApplicationId.toString()).thenReturn(appId);\r\n    when(appAttemptId.getApplicationId()).thenReturn(mockApplicationId);\r\n    when(cId.getApplicationAttemptId()).thenReturn(appAttemptId);\r\n    when(container.getLaunchContext()).thenReturn(context);\r\n    when(context.getEnvironment()).thenReturn(env);\r\n    when(container.getUser()).thenReturn(submittingUser);\r\n    when(container.getContainerRuntimeData(any())).thenReturn(runcRuntimeObject);\r\n    when(container.getResource()).thenReturn(resource);\r\n    when(resource.getVirtualCores()).thenReturn(cpuShares);\r\n    when(runcRuntimeObject.getConfig()).thenReturn(localResource);\r\n    when(localResource.getResource()).thenReturn(mockUrl);\r\n    try {\r\n        when(mockUrl.toPath()).thenReturn(new Path(\"/test_user_filecache_dir\"));\r\n    } catch (URISyntaxException use) {\r\n        throw new RuntimeException(use);\r\n    }\r\n    user = submittingUser;\r\n    containerIdStr = containerId;\r\n    containerWorkDir = new Path(\"/test_container_work_dir\");\r\n    nmPrivateContainerScriptPath = new Path(\"/test_script_path\");\r\n    nmPrivateTokensPath = new Path(\"/test_private_tokens_path\");\r\n    if (https) {\r\n        nmPrivateKeystorePath = new Path(\"/test_private_keystore_path\");\r\n        nmPrivateTruststorePath = new Path(\"/test_private_truststore_path\");\r\n    } else {\r\n        nmPrivateKeystorePath = null;\r\n        nmPrivateTruststorePath = null;\r\n    }\r\n    pidFilePath = new Path(\"/test_pid_file_path\");\r\n    localDirs = new ArrayList<>();\r\n    logDirs = new ArrayList<>();\r\n    filecacheDirs = new ArrayList<>();\r\n    resourcesOptions = \"cgroups=none\";\r\n    userFilecacheDirs = new ArrayList<>();\r\n    applicationLocalDirs = new ArrayList<>();\r\n    containerLogDirs = new ArrayList<>();\r\n    localizedResources = new HashMap<>();\r\n    expectedMounts = new ArrayList<>();\r\n    String filecachePath = tmpPath + \"/filecache\";\r\n    String userFilecachePath = tmpPath + \"/userFilecache\";\r\n    localDirs.add(\"/test_local_dir\");\r\n    logDirs.add(\"/test_log_dir\");\r\n    filecacheDirs.add(filecachePath);\r\n    userFilecacheDirs.add(userFilecachePath);\r\n    applicationLocalDirs.add(\"/test_application_local_dir\");\r\n    containerLogDirs.add(\"/test_container_log_dir\");\r\n    localizedResources.put(new Path(\"/test_local_dir/test_resource_file\"), Collections.singletonList(\"test_dir/test_resource_file\"));\r\n    File tmpDir = new File(tmpPath);\r\n    tmpDir.mkdirs();\r\n    List<String> rwOptions = new ArrayList<>();\r\n    rwOptions.add(\"rw\");\r\n    rwOptions.add(\"rbind\");\r\n    rwOptions.add(\"rprivate\");\r\n    List<String> roOptions = new ArrayList<>();\r\n    roOptions.add(\"ro\");\r\n    roOptions.add(\"rbind\");\r\n    roOptions.add(\"rprivate\");\r\n    for (String containerLogDir : containerLogDirs) {\r\n        expectedMounts.add(new OCIMount(containerLogDir, \"bind\", containerLogDir, rwOptions));\r\n    }\r\n    for (String applicationLocalDir : applicationLocalDirs) {\r\n        expectedMounts.add(new OCIMount(applicationLocalDir, \"bind\", applicationLocalDir, rwOptions));\r\n    }\r\n    for (String filecacheDir : filecacheDirs) {\r\n        File filecacheDirFile = new File(filecacheDir);\r\n        filecacheDirFile.mkdirs();\r\n        expectedMounts.add(new OCIMount(filecacheDir, \"bind\", filecacheDir, roOptions));\r\n    }\r\n    for (String userFilecacheDir : userFilecacheDirs) {\r\n        File userFilecacheDirFile = new File(userFilecacheDir);\r\n        userFilecacheDirFile.mkdirs();\r\n        expectedMounts.add(new OCIMount(userFilecachePath, \"bind\", userFilecachePath, roOptions));\r\n    }\r\n    expectedMounts.add(new OCIMount(\"/tmp\", \"bind\", containerWorkDir + \"/private_slash_tmp\", rwOptions));\r\n    expectedMounts.add(new OCIMount(\"/var/tmp\", \"bind\", containerWorkDir + \"/private_var_slash_tmp\", rwOptions));\r\n    mapper = new ObjectMapper();\r\n    builder = new ContainerRuntimeContext.Builder(container);\r\n    builder.setExecutionAttribute(RUN_AS_USER, runAsUser).setExecutionAttribute(USER, user).setExecutionAttribute(APPID, appId).setExecutionAttribute(CONTAINER_ID_STR, containerIdStr).setExecutionAttribute(CONTAINER_WORK_DIR, containerWorkDir).setExecutionAttribute(NM_PRIVATE_CONTAINER_SCRIPT_PATH, nmPrivateContainerScriptPath).setExecutionAttribute(NM_PRIVATE_TOKENS_PATH, nmPrivateTokensPath).setExecutionAttribute(NM_PRIVATE_KEYSTORE_PATH, nmPrivateKeystorePath).setExecutionAttribute(NM_PRIVATE_TRUSTSTORE_PATH, nmPrivateTruststorePath).setExecutionAttribute(PID_FILE_PATH, pidFilePath).setExecutionAttribute(LOCAL_DIRS, localDirs).setExecutionAttribute(LOG_DIRS, logDirs).setExecutionAttribute(FILECACHE_DIRS, filecacheDirs).setExecutionAttribute(USER_FILECACHE_DIRS, userFilecacheDirs).setExecutionAttribute(APPLICATION_LOCAL_DIRS, applicationLocalDirs).setExecutionAttribute(CONTAINER_LOG_DIRS, containerLogDirs).setExecutionAttribute(LOCALIZED_RESOURCES, localizedResources).setExecutionAttribute(RESOURCES_OPTIONS, resourcesOptions);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "cleanUp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void cleanUp() throws IOException\n{\r\n    File tmpDir = new File(tmpPath);\r\n    FileUtils.deleteDirectory(tmpDir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "createMockNMContext",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "Context createMockNMContext()\n{\r\n    Context mockNMContext = mock(Context.class);\r\n    LocalDirsHandlerService localDirsHandler = mock(LocalDirsHandlerService.class);\r\n    ResourcePluginManager resourcePluginManager = mock(ResourcePluginManager.class);\r\n    ConcurrentMap<ContainerId, Container> containerMap = mock(ConcurrentMap.class);\r\n    when(mockNMContext.getLocalDirsHandler()).thenReturn(localDirsHandler);\r\n    when(mockNMContext.getResourcePluginManager()).thenReturn(resourcePluginManager);\r\n    when(mockNMContext.getContainers()).thenReturn(containerMap);\r\n    when(containerMap.get(any())).thenReturn(container);\r\n    ContainerManager mockContainerManager = mock(ContainerManager.class);\r\n    ResourceLocalizationService mockLocalzationService = mock(ResourceLocalizationService.class);\r\n    LocalizedResource mockLocalizedResource = mock(LocalizedResource.class);\r\n    when(mockLocalizedResource.getLocalPath()).thenReturn(new Path(\"/local/layer1\"));\r\n    when(mockLocalzationService.getLocalizedResource(any(), anyString(), any())).thenReturn(mockLocalizedResource);\r\n    when(mockContainerManager.getResourceLocalizationService()).thenReturn(mockLocalzationService);\r\n    when(mockNMContext.getContainerManager()).thenReturn(mockContainerManager);\r\n    try {\r\n        when(localDirsHandler.getLocalPathForWrite(anyString())).thenReturn(new Path(tmpPath));\r\n    } catch (IOException ioe) {\r\n        LOG.info(\"LocalDirsHandler failed\" + ioe);\r\n    }\r\n    return mockNMContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "captureRuncConfigFile",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "File captureRuncConfigFile() throws PrivilegedOperationException\n{\r\n    PrivilegedOperation op = capturePrivilegedOperation(1);\r\n    Assert.assertEquals(PrivilegedOperation.OperationType.RUN_RUNC_CONTAINER, op.getOperationType());\r\n    return new File(op.getArguments().get(0));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "capturePrivilegedOperation",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "PrivilegedOperation capturePrivilegedOperation(int invocations) throws PrivilegedOperationException\n{\r\n    ArgumentCaptor<PrivilegedOperation> opCaptor = ArgumentCaptor.forClass(PrivilegedOperation.class);\r\n    verify(mockExecutor, times(invocations)).executePrivilegedOperation(any(), opCaptor.capture(), any(), any(), anyBoolean(), anyBoolean());\r\n    Mockito.reset(mockExecutor);\r\n    return opCaptor.getValue();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "captureRuncRuntimeObject",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "RuncRuntimeObject captureRuncRuntimeObject(int invocations)\n{\r\n    ArgumentCaptor<RuncRuntimeObject> opCaptor = ArgumentCaptor.forClass(RuncRuntimeObject.class);\r\n    verify(container, times(invocations)).setContainerRuntimeData(opCaptor.capture());\r\n    Mockito.reset(container);\r\n    return opCaptor.getValue();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "verifyRuncConfig",
  "errType" : null,
  "containingMethodsNum" : 48,
  "sourceCodeText" : "RuncContainerExecutorConfig verifyRuncConfig(File configFile) throws IOException\n{\r\n    int configSize;\r\n    String configVersion;\r\n    String configRunAsUser;\r\n    String configUser;\r\n    String configContainerId;\r\n    String configAppId;\r\n    String configPidFile;\r\n    String configContainerScriptPath;\r\n    String configContainerCredentialsPath;\r\n    int configHttps;\r\n    String configKeystorePath;\r\n    String configTruststorePath;\r\n    List<String> configLocalDirsList;\r\n    List<String> configLogDirsList;\r\n    List<OCILayer> configLayersList;\r\n    int configLayersToKeep;\r\n    String configContainerWorkDir;\r\n    int expectedConfigSize;\r\n    long configCpuShares;\r\n    JsonNode configNode = mapper.readTree(configFile);\r\n    RuncContainerExecutorConfig runcContainerExecutorConfig = mapper.readValue(configNode.traverse(), RuncContainerExecutorConfig.class);\r\n    configSize = configNode.size();\r\n    OCIRuntimeConfig ociRuntimeConfig = runcContainerExecutorConfig.getOciRuntimeConfig();\r\n    OCIProcessConfig ociProcessConfig = ociRuntimeConfig.getProcess();\r\n    configVersion = runcContainerExecutorConfig.getVersion();\r\n    configRunAsUser = runcContainerExecutorConfig.getRunAsUser();\r\n    configUser = runcContainerExecutorConfig.getUsername();\r\n    configContainerId = runcContainerExecutorConfig.getContainerId();\r\n    configAppId = runcContainerExecutorConfig.getApplicationId();\r\n    configPidFile = runcContainerExecutorConfig.getPidFile();\r\n    configContainerScriptPath = runcContainerExecutorConfig.getContainerScriptPath();\r\n    configContainerCredentialsPath = runcContainerExecutorConfig.getContainerCredentialsPath();\r\n    configHttps = runcContainerExecutorConfig.getHttps();\r\n    configKeystorePath = runcContainerExecutorConfig.getKeystorePath();\r\n    configTruststorePath = runcContainerExecutorConfig.getTruststorePath();\r\n    configLocalDirsList = runcContainerExecutorConfig.getLocalDirs();\r\n    configLogDirsList = runcContainerExecutorConfig.getLogDirs();\r\n    configLayersList = runcContainerExecutorConfig.getLayers();\r\n    configLayersToKeep = runcContainerExecutorConfig.getReapLayerKeepCount();\r\n    configContainerWorkDir = ociRuntimeConfig.getProcess().getCwd();\r\n    configCpuShares = ociRuntimeConfig.getLinux().getResources().getCPU().getShares();\r\n    expectedConfigSize = (https) ? 16 : 13;\r\n    Assert.assertEquals(expectedConfigSize, configSize);\r\n    Assert.assertEquals(\"0.1\", configVersion);\r\n    Assert.assertEquals(runAsUser, configRunAsUser);\r\n    Assert.assertEquals(user, configUser);\r\n    Assert.assertEquals(containerId, configContainerId);\r\n    Assert.assertEquals(appId, configAppId);\r\n    Assert.assertEquals(pidFilePath.toString(), configPidFile);\r\n    Assert.assertEquals(nmPrivateContainerScriptPath.toUri().toString(), configContainerScriptPath);\r\n    Assert.assertEquals(nmPrivateTokensPath.toUri().getPath(), configContainerCredentialsPath);\r\n    if (https) {\r\n        Assert.assertEquals(1, configHttps);\r\n        Assert.assertEquals(nmPrivateKeystorePath.toUri().toString(), configKeystorePath);\r\n        Assert.assertEquals(nmPrivateTruststorePath.toUri().toString(), configTruststorePath);\r\n    } else {\r\n        Assert.assertEquals(0, configHttps);\r\n        Assert.assertNull(configKeystorePath);\r\n        Assert.assertNull(configTruststorePath);\r\n    }\r\n    Assert.assertEquals(localDirs, configLocalDirsList);\r\n    Assert.assertEquals(logDirs, configLogDirsList);\r\n    Assert.assertEquals(0, configLayersList.size());\r\n    Assert.assertEquals(layersToKeep, configLayersToKeep);\r\n    List<OCIMount> configMounts = ociRuntimeConfig.getMounts();\r\n    verifyRuncMounts(expectedMounts, configMounts);\r\n    List<String> processArgsList = ociProcessConfig.getArgs();\r\n    String configArgs = \"\".join(\",\", processArgsList);\r\n    Assert.assertEquals(containerWorkDir.toString(), configContainerWorkDir);\r\n    Assert.assertEquals(\"bash,\" + containerWorkDir + \"/launch_container.sh\", configArgs);\r\n    Assert.assertEquals(cpuShares, configCpuShares);\r\n    return runcContainerExecutorConfig;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "verifyRuncMounts",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void verifyRuncMounts(List<OCIMount> expectedRuncMounts, List<OCIMount> configMounts) throws IOException\n{\r\n    Assert.assertEquals(expectedRuncMounts.size(), configMounts.size());\r\n    boolean found;\r\n    for (OCIMount expectedMount : expectedRuncMounts) {\r\n        found = false;\r\n        for (OCIMount configMount : configMounts) {\r\n            if (expectedMount.getDestination().equals(configMount.getDestination()) && expectedMount.getSource().equals(configMount.getSource()) && expectedMount.getType().equals(configMount.getType()) && expectedMount.getOptions().containsAll(configMount.getOptions())) {\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!found) {\r\n            String expectedMountString = expectedMount.getSource() + \":\" + expectedMount.getDestination() + \", \" + expectedMount.getType() + \", \" + expectedMount.getOptions().toString();\r\n            throw new IOException(\"Expected mount not found: \" + expectedMountString);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testSelectRuncContainerType",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testSelectRuncContainerType()\n{\r\n    Map<String, String> envRuncType = new HashMap<>();\r\n    Map<String, String> envOtherType = new HashMap<>();\r\n    envRuncType.put(ContainerRuntimeConstants.ENV_CONTAINER_TYPE, ContainerRuntimeConstants.CONTAINER_RUNTIME_RUNC);\r\n    envOtherType.put(ContainerRuntimeConstants.ENV_CONTAINER_TYPE, \"other\");\r\n    Assert.assertFalse(RuncContainerRuntime.isRuncContainerRequested(conf, null));\r\n    Assert.assertTrue(RuncContainerRuntime.isRuncContainerRequested(conf, envRuncType));\r\n    Assert.assertFalse(RuncContainerRuntime.isRuncContainerRequested(conf, envOtherType));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testSelectRuncContainerTypeWithRuncAsDefault",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testSelectRuncContainerTypeWithRuncAsDefault()\n{\r\n    Map<String, String> envRuncType = new HashMap<>();\r\n    Map<String, String> envOtherType = new HashMap<>();\r\n    conf.set(YarnConfiguration.LINUX_CONTAINER_RUNTIME_TYPE, ContainerRuntimeConstants.CONTAINER_RUNTIME_RUNC);\r\n    envRuncType.put(ContainerRuntimeConstants.ENV_CONTAINER_TYPE, ContainerRuntimeConstants.CONTAINER_RUNTIME_RUNC);\r\n    envOtherType.put(ContainerRuntimeConstants.ENV_CONTAINER_TYPE, \"other\");\r\n    Assert.assertTrue(RuncContainerRuntime.isRuncContainerRequested(conf, null));\r\n    Assert.assertTrue(RuncContainerRuntime.isRuncContainerRequested(conf, envRuncType));\r\n    Assert.assertFalse(RuncContainerRuntime.isRuncContainerRequested(conf, envOtherType));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testSelectRuncContainerTypeWithDefaultSet",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testSelectRuncContainerTypeWithDefaultSet()\n{\r\n    Map<String, String> envRuncType = new HashMap<>();\r\n    Map<String, String> envOtherType = new HashMap<>();\r\n    conf.set(YarnConfiguration.LINUX_CONTAINER_RUNTIME_TYPE, \"default\");\r\n    envRuncType.put(ContainerRuntimeConstants.ENV_CONTAINER_TYPE, ContainerRuntimeConstants.CONTAINER_RUNTIME_RUNC);\r\n    envOtherType.put(ContainerRuntimeConstants.ENV_CONTAINER_TYPE, \"other\");\r\n    Assert.assertFalse(RuncContainerRuntime.isRuncContainerRequested(conf, null));\r\n    Assert.assertTrue(RuncContainerRuntime.isRuncContainerRequested(conf, envRuncType));\r\n    Assert.assertFalse(RuncContainerRuntime.isRuncContainerRequested(conf, envOtherType));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testRuncContainerLaunch",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testRuncContainerLaunch() throws ContainerExecutionException, PrivilegedOperationException, IOException\n{\r\n    MockRuncContainerRuntime runtime = new MockRuncContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    runtime.launchContainer(builder.build());\r\n    File configFile = captureRuncConfigFile();\r\n    verifyRuncConfig(configFile);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testRuncContainerLaunchWithDefaultImage",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testRuncContainerLaunchWithDefaultImage() throws ContainerExecutionException, IOException\n{\r\n    String runcImage = \"busybox:1.2.3\";\r\n    conf.set(YarnConfiguration.NM_RUNC_IMAGE_NAME, runcImage);\r\n    env.remove(RuncContainerRuntime.ENV_RUNC_CONTAINER_IMAGE);\r\n    MockRuncContainerRuntime runtime = new MockRuncContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    runtime.getLocalResources(container);\r\n    Mockito.verify(mockRuncImageTagToManifestPlugin).getManifestFromImageTag(runcImage);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testCGroupParent",
  "errType" : null,
  "containingMethodsNum" : 27,
  "sourceCodeText" : "void testCGroupParent() throws ContainerExecutionException, PrivilegedOperationException, IOException\n{\r\n    MockRuncContainerRuntime runtime = new MockRuncContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    runtime.launchContainer(builder.build());\r\n    File configFile = captureRuncConfigFile();\r\n    RuncContainerExecutorConfig runcContainerExecutorConfig = verifyRuncConfig(configFile);\r\n    String configCgroupsPath = runcContainerExecutorConfig.getOciRuntimeConfig().getLinux().getCgroupsPath();\r\n    Assert.assertNull(configCgroupsPath);\r\n    String hierarchy = \"hadoop-yarn-test\";\r\n    when(mockCGroupsHandler.getRelativePathForCGroup(any())).thenReturn(hierarchy);\r\n    runtime = new MockRuncContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    runtime.launchContainer(builder.build());\r\n    configFile = captureRuncConfigFile();\r\n    runcContainerExecutorConfig = verifyRuncConfig(configFile);\r\n    configCgroupsPath = runcContainerExecutorConfig.getOciRuntimeConfig().getLinux().getCgroupsPath();\r\n    Assert.assertNull(configCgroupsPath);\r\n    String resourceOptionsCpu = \"/sys/fs/cgroup/cpu/\" + hierarchy + containerIdStr;\r\n    builder.setExecutionAttribute(RESOURCES_OPTIONS, resourceOptionsCpu);\r\n    runtime = new MockRuncContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    runtime.launchContainer(builder.build());\r\n    configFile = captureRuncConfigFile();\r\n    runcContainerExecutorConfig = verifyRuncConfig(configFile);\r\n    configCgroupsPath = runcContainerExecutorConfig.getOciRuntimeConfig().getLinux().getCgroupsPath();\r\n    Assert.assertEquals(\"/\" + hierarchy, configCgroupsPath);\r\n    resourceOptionsCpu = \"/sys/fs/cgroup/cpu/\" + hierarchy + containerIdStr;\r\n    builder.setExecutionAttribute(RESOURCES_OPTIONS, resourceOptionsCpu);\r\n    runtime = new MockRuncContainerRuntime(mockExecutor, null);\r\n    runtime.initialize(conf, nmContext);\r\n    runtime.launchContainer(builder.build());\r\n    configFile = captureRuncConfigFile();\r\n    runcContainerExecutorConfig = verifyRuncConfig(configFile);\r\n    configCgroupsPath = runcContainerExecutorConfig.getOciRuntimeConfig().getLinux().getCgroupsPath();\r\n    Assert.assertNull(configCgroupsPath);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testDefaultROMounts",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testDefaultROMounts() throws ContainerExecutionException, PrivilegedOperationException, IOException\n{\r\n    String roMount1 = tmpPath + \"/foo\";\r\n    File roMountFile1 = new File(roMount1);\r\n    roMountFile1.mkdirs();\r\n    String roMount2 = tmpPath + \"/bar\";\r\n    File roMountFile2 = new File(roMount2);\r\n    roMountFile2.mkdirs();\r\n    conf.setStrings(NM_RUNC_DEFAULT_RO_MOUNTS, roMount1 + \":\" + roMount1 + \",\" + roMount2 + \":\" + roMount2);\r\n    List<String> roOptions = new ArrayList<>();\r\n    roOptions.add(\"ro\");\r\n    roOptions.add(\"rbind\");\r\n    roOptions.add(\"rprivate\");\r\n    expectedMounts.add(new OCIMount(roMount1, \"bind\", roMount1, roOptions));\r\n    expectedMounts.add(new OCIMount(roMount2, \"bind\", roMount2, roOptions));\r\n    MockRuncContainerRuntime runtime = new MockRuncContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    runtime.launchContainer(builder.build());\r\n    File configFile = captureRuncConfigFile();\r\n    verifyRuncConfig(configFile);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testDefaultROMountsInvalid",
  "errType" : [ "ContainerExecutionException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testDefaultROMountsInvalid() throws ContainerExecutionException\n{\r\n    conf.setStrings(NM_RUNC_DEFAULT_RO_MOUNTS, \"source,target\");\r\n    RuncContainerRuntime runtime = new MockRuncContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    try {\r\n        runtime.launchContainer(builder.build());\r\n        Assert.fail(\"Expected a launch container failure due to invalid mount.\");\r\n    } catch (ContainerExecutionException e) {\r\n        LOG.info(\"Caught expected exception : \" + e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testDefaultRWMounts",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testDefaultRWMounts() throws ContainerExecutionException, PrivilegedOperationException, IOException\n{\r\n    String rwMount1 = tmpPath + \"/foo\";\r\n    File rwMountFile1 = new File(rwMount1);\r\n    rwMountFile1.mkdirs();\r\n    String rwMount2 = tmpPath + \"/bar\";\r\n    File rwMountFile2 = new File(rwMount2);\r\n    rwMountFile2.mkdirs();\r\n    conf.setStrings(NM_RUNC_DEFAULT_RW_MOUNTS, rwMount1 + \":\" + rwMount1 + \",\" + rwMount2 + \":\" + rwMount2);\r\n    List<String> rwOptions = new ArrayList<>();\r\n    rwOptions.add(\"rw\");\r\n    rwOptions.add(\"rbind\");\r\n    rwOptions.add(\"rprivate\");\r\n    expectedMounts.add(new OCIMount(rwMount1, \"bind\", rwMount1, rwOptions));\r\n    expectedMounts.add(new OCIMount(rwMount2, \"bind\", rwMount2, rwOptions));\r\n    MockRuncContainerRuntime runtime = new MockRuncContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    runtime.launchContainer(builder.build());\r\n    File configFile = captureRuncConfigFile();\r\n    verifyRuncConfig(configFile);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testDefaultRWMountsInvalid",
  "errType" : [ "ContainerExecutionException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testDefaultRWMountsInvalid() throws ContainerExecutionException\n{\r\n    conf.setStrings(NM_RUNC_DEFAULT_RW_MOUNTS, \"source,target\");\r\n    RuncContainerRuntime runtime = new MockRuncContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    try {\r\n        runtime.launchContainer(builder.build());\r\n        Assert.fail(\"Expected a launch container failure due to invalid mount.\");\r\n    } catch (ContainerExecutionException e) {\r\n        LOG.info(\"Caught expected exception : \" + e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testUserMounts",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testUserMounts() throws ContainerExecutionException, PrivilegedOperationException, IOException\n{\r\n    String roMount = tmpPath + \"/foo\";\r\n    File roMountFile = new File(roMount);\r\n    roMountFile.mkdirs();\r\n    String rwMount = tmpPath + \"/bar\";\r\n    File rwMountFile = new File(rwMount);\r\n    rwMountFile.mkdirs();\r\n    env.put(ENV_RUNC_CONTAINER_MOUNTS, roMount + \":\" + roMount + \":ro,\" + rwMount + \":\" + rwMount + \":rw\");\r\n    List<String> rwOptions = new ArrayList<>();\r\n    rwOptions.add(\"rw\");\r\n    rwOptions.add(\"rbind\");\r\n    rwOptions.add(\"rprivate\");\r\n    List<String> roOptions = new ArrayList<>();\r\n    roOptions.add(\"ro\");\r\n    roOptions.add(\"rbind\");\r\n    roOptions.add(\"rprivate\");\r\n    expectedMounts.add(new OCIMount(roMount, \"bind\", roMount, roOptions));\r\n    expectedMounts.add(new OCIMount(rwMount, \"bind\", rwMount, rwOptions));\r\n    MockRuncContainerRuntime runtime = new MockRuncContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    runtime.launchContainer(builder.build());\r\n    File configFile = captureRuncConfigFile();\r\n    verifyRuncConfig(configFile);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testUserMountsInvalid",
  "errType" : [ "ContainerExecutionException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testUserMountsInvalid() throws ContainerExecutionException\n{\r\n    env.put(ENV_RUNC_CONTAINER_MOUNTS, \"source:target\");\r\n    RuncContainerRuntime runtime = new MockRuncContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    try {\r\n        runtime.launchContainer(builder.build());\r\n        Assert.fail(\"Expected a launch container failure due to invalid mount.\");\r\n    } catch (ContainerExecutionException e) {\r\n        LOG.info(\"Caught expected exception : \" + e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testUserMountsModeInvalid",
  "errType" : [ "ContainerExecutionException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testUserMountsModeInvalid() throws ContainerExecutionException\n{\r\n    env.put(ENV_RUNC_CONTAINER_MOUNTS, \"source:target:other\");\r\n    RuncContainerRuntime runtime = new MockRuncContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    try {\r\n        runtime.launchContainer(builder.build());\r\n        Assert.fail(\"Expected a launch container failure due to invalid mount.\");\r\n    } catch (ContainerExecutionException e) {\r\n        LOG.info(\"Caught expected exception : \" + e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testUserMountsModeNullInvalid",
  "errType" : [ "ContainerExecutionException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testUserMountsModeNullInvalid() throws ContainerExecutionException\n{\r\n    env.put(ENV_RUNC_CONTAINER_MOUNTS, \"s\\0ource:target:ro\");\r\n    RuncContainerRuntime runtime = new MockRuncContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    try {\r\n        runtime.launchContainer(builder.build());\r\n        Assert.fail(\"Expected a launch container failure due to invalid mount.\");\r\n    } catch (ContainerExecutionException e) {\r\n        LOG.info(\"Caught expected exception : \" + e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testRuncHostnamePattern",
  "errType" : [ "ContainerExecutionException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testRuncHostnamePattern() throws Exception\n{\r\n    String[] validNames = { \"ab\", \"a.b.c.d\", \"a1-b.cd.ef\", \"0AB.\", \"C_D-\" };\r\n    String[] invalidNames = { \"a\", \"a#.b.c\", \"-a.b.c\", \"a@b.c\", \"a/b/c\" };\r\n    for (String name : validNames) {\r\n        RuncContainerRuntime.validateHostname(name);\r\n    }\r\n    for (String name : invalidNames) {\r\n        try {\r\n            RuncContainerRuntime.validateHostname(name);\r\n            Assert.fail(name + \" is an invalid hostname and should fail the regex\");\r\n        } catch (ContainerExecutionException ce) {\r\n            continue;\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testValidRuncHostnameLength",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testValidRuncHostnameLength() throws Exception\n{\r\n    String validLength = \"example.test.site\";\r\n    RuncContainerRuntime.validateHostname(validLength);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testInvalidRuncHostnameLength",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testInvalidRuncHostnameLength() throws Exception\n{\r\n    String invalidLength = \"exampleexampleexampleexampleexampleexampleexampleexample.test.site\";\r\n    RuncContainerRuntime.validateHostname(invalidLength);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testGetLocalResources",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testGetLocalResources() throws Exception\n{\r\n    RuncContainerRuntime runtime = new MockRuncContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    runtime.getLocalResources(container);\r\n    RuncRuntimeObject runtimeObject = captureRuncRuntimeObject(1);\r\n    LocalResource testConfig = runtimeObject.getConfig();\r\n    List<LocalResource> testLayers = runtimeObject.getOCILayers();\r\n    Assert.assertEquals(config, testConfig);\r\n    Assert.assertEquals(layers, testLayers);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setup()\n{\r\n    testResources.updateAssignedResources(ImmutableList.of(Device.Builder.newInstance().setId(0).setDevPath(\"/dev/hdwA0\").setMajorNumber(256).setMinorNumber(0).setBusID(\"0000:80:00.0\").setHealthy(true).build(), Device.Builder.newInstance().setId(1).setDevPath(\"/dev/hdwA1\").setMajorNumber(256).setMinorNumber(0).setBusID(\"0000:80:00.1\").setHealthy(true).build()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testSerializeAssignedResourcesWithSerializationUtils",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testSerializeAssignedResourcesWithSerializationUtils()\n{\r\n    try {\r\n        byte[] serializedString = testResources.toBytes();\r\n        ResourceMappings.AssignedResources deserialized = ResourceMappings.AssignedResources.fromBytes(serializedString);\r\n        Assert.assertEquals(testResources.getAssignedResources(), deserialized.getAssignedResources());\r\n    } catch (IOException e) {\r\n        e.printStackTrace();\r\n        Assert.fail(String.format(\"Serialization of test AssignedResources \" + \"failed with %s\", e.getMessage()));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "testAssignedResourcesCanDeserializePreviouslySerializedValues",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testAssignedResourcesCanDeserializePreviouslySerializedValues()\n{\r\n    try {\r\n        byte[] serializedString = toBytes(testResources.getAssignedResources());\r\n        ResourceMappings.AssignedResources deserialized = ResourceMappings.AssignedResources.fromBytes(serializedString);\r\n        Assert.assertEquals(testResources.getAssignedResources(), deserialized.getAssignedResources());\r\n    } catch (IOException e) {\r\n        e.printStackTrace();\r\n        Assert.fail(String.format(\"Deserialization of test AssignedResources \" + \"failed with %s\", e.getMessage()));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\container",
  "methodName" : "toBytes",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "byte[] toBytes(List<Serializable> resources) throws IOException\n{\r\n    byte[] bytes;\r\n    ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n    try (ObjectOutputStream oos = new ObjectOutputStream(bos)) {\r\n        oos.writeObject(resources);\r\n        bytes = bos.toByteArray();\r\n    }\r\n    return bytes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 23,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    baseTestDirectory = new File(System.getProperty(\"test.build.data\", System.getProperty(\"java.io.tmpdir\", \"target\")), TestJavaSandboxLinuxContainerRuntime.class.getName());\r\n    whitelistGroup = new ArrayList<>();\r\n    whitelistGroup.add(WHITELIST_GROUP);\r\n    conf = new Configuration();\r\n    conf.set(CommonConfigurationKeys.HADOOP_USER_GROUP_STATIC_OVERRIDES, WHITELIST_USER + \"=\" + WHITELIST_GROUP + \",\" + NORMAL_GROUP + \";\" + NORMAL_USER + \"=\" + NORMAL_GROUP + \";\");\r\n    conf.set(\"hadoop.tmp.dir\", baseTestDirectory.getAbsolutePath());\r\n    Files.deleteIfExists(Paths.get(baseTestDirectory.getAbsolutePath(), POLICY_FILE_DIR, CONTAINER_ID + \"-\" + POLICY_FILE));\r\n    mockExecutor = mock(PrivilegedOperationExecutor.class);\r\n    runtime = new JavaSandboxLinuxContainerRuntime(mockExecutor);\r\n    runtime.initialize(conf, null);\r\n    resources = new HashMap<>();\r\n    grantDir = new File(baseTestDirectory, \"grantDir\");\r\n    denyDir = new File(baseTestDirectory, \"denyDir\");\r\n    containerDir = new File(baseTestDirectory, APPLICATION_ID + Path.SEPARATOR + CONTAINER_ID);\r\n    grantDir.mkdirs();\r\n    denyDir.mkdirs();\r\n    containerDir.mkdirs();\r\n    grantFile = File.createTempFile(\"grantFile\", \"tmp\", grantDir);\r\n    denyFile = File.createTempFile(\"denyFile\", \"tmp\", denyDir);\r\n    List<String> symLinks = new ArrayList<>();\r\n    symLinks.add(grantFile.getName());\r\n    resources.put(new Path(grantFile.getCanonicalPath()), symLinks);\r\n    env = new HashMap();\r\n    env.put(JAVA_HOME.name(), System.getenv(JAVA_HOME.name()));\r\n    policyFile = File.createTempFile(\"java\", \"policy\", containerDir);\r\n    policyFilePath = Paths.get(policyFile.getAbsolutePath());\r\n    runtimeContextBuilder = createRuntimeContext();\r\n    if (HADOOP_HOME_DIR == null) {\r\n        System.setProperty(HADOOP_HOME, policyFile.getParent());\r\n    }\r\n    OutputStream outStream = new FileOutputStream(policyFile);\r\n    JavaSandboxLinuxContainerRuntime.NMContainerPolicyUtils.generatePolicyFile(outStream, symLinks, null, resources, conf);\r\n    outStream.close();\r\n    System.setProperty(\"java.security.policy\", policyFile.getCanonicalPath());\r\n    securityManager = new SecurityManager();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "createRuntimeContext",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "ContainerRuntimeContext.Builder createRuntimeContext()\n{\r\n    Container container = mock(Container.class);\r\n    ContainerLaunchContext ctx = mock(ContainerLaunchContext.class);\r\n    when(container.getLaunchContext()).thenReturn(ctx);\r\n    when(ctx.getEnvironment()).thenReturn(env);\r\n    ContainerRuntimeContext.Builder builder = new ContainerRuntimeContext.Builder(container);\r\n    List<String> localDirs = new ArrayList<>();\r\n    builder.setExecutionAttribute(LOCALIZED_RESOURCES, resources).setExecutionAttribute(RUN_AS_USER, NORMAL_USER).setExecutionAttribute(CONTAINER_ID_STR, CONTAINER_ID).setExecutionAttribute(APPID, APPLICATION_ID).setExecutionAttribute(CONTAINER_WORK_DIR, new Path(containerDir.toString())).setExecutionAttribute(LOCAL_DIRS, localDirs).setExecutionAttribute(LOG_DIRS, localDirs).setExecutionAttribute(FILECACHE_DIRS, localDirs).setExecutionAttribute(USER_LOCAL_DIRS, localDirs).setExecutionAttribute(CONTAINER_LOCAL_DIRS, localDirs).setExecutionAttribute(CONTAINER_RUN_CMDS, localDirs);\r\n    return builder;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testGroupPolicies",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testGroupPolicies() throws IOException, ContainerExecutionException\n{\r\n    File openSocketPolicyFile = File.createTempFile(\"openSocket\", \"policy\", baseTestDirectory);\r\n    File classLoaderPolicyFile = File.createTempFile(\"createClassLoader\", \"policy\", baseTestDirectory);\r\n    Permission socketPerm = new SocketPermission(\"localhost:0\", \"listen\");\r\n    Permission runtimePerm = new RuntimePermission(\"createClassLoader\");\r\n    StringBuilder socketPermString = new StringBuilder();\r\n    Formatter openSocketPolicyFormatter = new Formatter(socketPermString);\r\n    openSocketPolicyFormatter.format(SOCKET_PERMISSION_FORMAT, socketPerm.getClass().getName(), socketPerm.getName(), socketPerm.getActions());\r\n    FileWriter socketPermWriter = new FileWriter(openSocketPolicyFile);\r\n    socketPermWriter.write(socketPermString.toString());\r\n    socketPermWriter.close();\r\n    StringBuilder classLoaderPermString = new StringBuilder();\r\n    Formatter classLoaderPolicyFormatter = new Formatter(classLoaderPermString);\r\n    classLoaderPolicyFormatter.format(RUNTIME_PERMISSION_FORMAT, runtimePerm.getClass().getName(), runtimePerm.getName());\r\n    FileWriter classLoaderPermWriter = new FileWriter(classLoaderPolicyFile);\r\n    classLoaderPermWriter.write(classLoaderPermString.toString());\r\n    classLoaderPermWriter.close();\r\n    conf.set(YarnConfiguration.YARN_CONTAINER_SANDBOX_POLICY_GROUP_PREFIX + WHITELIST_GROUP, openSocketPolicyFile.toString());\r\n    conf.set(YarnConfiguration.YARN_CONTAINER_SANDBOX_POLICY_GROUP_PREFIX + NORMAL_GROUP, classLoaderPolicyFile.toString());\r\n    String[] inputCommand = { \"$JAVA_HOME/bin/java jar MyJob.jar\" };\r\n    List<String> commands = Arrays.asList(inputCommand);\r\n    runtimeContextBuilder.setExecutionAttribute(USER, WHITELIST_USER);\r\n    runtimeContextBuilder.setExecutionAttribute(CONTAINER_RUN_CMDS, commands);\r\n    runtime.prepareContainer(runtimeContextBuilder.build());\r\n    Matcher policyMatches = Pattern.compile(POLICY_APPEND_FLAG + \"=?([^ ]+)\").matcher(commands.get(0));\r\n    policyMatches.find();\r\n    String generatedPolicy = policyMatches.group(1);\r\n    Assert.assertTrue(Files.readAllLines(Paths.get(generatedPolicy)).contains(classLoaderPermString.toString().split(\"\\n\")[1]));\r\n    Assert.assertTrue(Files.readAllLines(Paths.get(generatedPolicy)).contains(socketPermString.toString().split(\"\\n\")[1]));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testGrant",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testGrant() throws Exception\n{\r\n    FilePermission grantPermission = new FilePermission(grantFile.getAbsolutePath(), \"read\");\r\n    securityManager.checkPermission(grantPermission);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testDeny",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testDeny() throws Exception\n{\r\n    FilePermission denyPermission = new FilePermission(denyFile.getAbsolutePath(), \"read\");\r\n    exception.expect(java.security.AccessControlException.class);\r\n    securityManager.checkPermission(denyPermission);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testEnforcingMode",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testEnforcingMode() throws ContainerExecutionException\n{\r\n    String[] nonJavaCommands = { \"bash malicious_script.sh\", \"python malicious_script.py\" };\r\n    List<String> commands = Arrays.asList(nonJavaCommands);\r\n    exception.expect(ContainerExecutionException.class);\r\n    JavaSandboxLinuxContainerRuntime.NMContainerPolicyUtils.appendSecurityFlags(commands, env, policyFilePath, JavaSandboxLinuxContainerRuntime.SandboxMode.enforcing);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testPermissiveMode",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testPermissiveMode() throws ContainerExecutionException\n{\r\n    String[] nonJavaCommands = { \"bash non-java-script.sh\", \"python non-java-script.py\" };\r\n    List<String> commands = Arrays.asList(nonJavaCommands);\r\n    JavaSandboxLinuxContainerRuntime.NMContainerPolicyUtils.appendSecurityFlags(commands, env, policyFilePath, JavaSandboxLinuxContainerRuntime.SandboxMode.permissive);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testDisabledSandboxWithWhitelist",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testDisabledSandboxWithWhitelist() throws ContainerExecutionException\n{\r\n    String[] inputCommand = { \"java jar MyJob.jar\" };\r\n    List<String> commands = Arrays.asList(inputCommand);\r\n    conf.set(YarnConfiguration.YARN_CONTAINER_SANDBOX_WHITELIST_GROUP, WHITELIST_GROUP);\r\n    runtimeContextBuilder.setExecutionAttribute(USER, WHITELIST_USER);\r\n    runtimeContextBuilder.setExecutionAttribute(CONTAINER_RUN_CMDS, commands);\r\n    runtime.prepareContainer(runtimeContextBuilder.build());\r\n    Assert.assertTrue(\"Command should not be modified when user is \" + \"member of whitelisted group\", inputCommand[0].equals(commands.get(0)));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testEnabledSandboxWithWhitelist",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testEnabledSandboxWithWhitelist() throws ContainerExecutionException\n{\r\n    String[] inputCommand = { \"$JAVA_HOME/bin/java jar -Djava.security.manager MyJob.jar\" };\r\n    List<String> commands = Arrays.asList(inputCommand);\r\n    conf.set(YarnConfiguration.YARN_CONTAINER_SANDBOX_WHITELIST_GROUP, WHITELIST_GROUP);\r\n    runtimeContextBuilder.setExecutionAttribute(USER, WHITELIST_USER);\r\n    runtimeContextBuilder.setExecutionAttribute(CONTAINER_RUN_CMDS, commands);\r\n    runtime.prepareContainer(runtimeContextBuilder.build());\r\n    Assert.assertTrue(\"Command should be modified to include \" + \"policy file in whitelisted Sandbox mode\", commands.get(0).contains(SECURITY_FLAG) && commands.get(0).contains(POLICY_FLAG));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testDeniedWhitelistGroup",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testDeniedWhitelistGroup() throws ContainerExecutionException\n{\r\n    String[] inputCommand = { \"$JAVA_HOME/bin/java jar MyJob.jar\" };\r\n    List<String> commands = Arrays.asList(inputCommand);\r\n    conf.set(YarnConfiguration.YARN_CONTAINER_SANDBOX_WHITELIST_GROUP, WHITELIST_GROUP);\r\n    runtimeContextBuilder.setExecutionAttribute(USER, NORMAL_USER);\r\n    runtimeContextBuilder.setExecutionAttribute(CONTAINER_RUN_CMDS, commands);\r\n    runtime.prepareContainer(runtimeContextBuilder.build());\r\n    Assert.assertTrue(\"Java security manager must be enabled for \" + \"unauthorized users\", commands.get(0).contains(SECURITY_FLAG));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testChainedCmdRegex",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testChainedCmdRegex()\n{\r\n    String[] multiCmds = { \"cmd1 && cmd2\", \"cmd1 || cmd2\", \"cmd1 `cmd2`\", \"cmd1 $(cmd2)\", \"cmd1; \\\\\\n cmd2\", \"cmd1; cmd2\", \"cmd1|&cmd2\", \"cmd1|cmd2\", \"cmd1&cmd2\" };\r\n    Arrays.stream(multiCmds).forEach(cmd -> Assert.assertTrue(cmd.matches(MULTI_COMMAND_REGEX)));\r\n    Assert.assertFalse(\"cmd1 &> logfile\".matches(MULTI_COMMAND_REGEX));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testContainsJavaRegex",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testContainsJavaRegex()\n{\r\n    String[] javaCmds = { \"$JAVA_HOME/bin/java -cp App.jar AppClass\", \"$JAVA_HOME/bin/java -jar App.jar AppClass &> logfile\" };\r\n    String[] nonJavaCmds = { \"$JAVA_HOME/bin/jajavava -cp App.jar AppClass\", \"/nm/app/container/usercache/badjava -cp Bad.jar ChaosClass\" };\r\n    for (String javaCmd : javaCmds) {\r\n        Assert.assertTrue(javaCmd.matches(CONTAINS_JAVA_CMD));\r\n    }\r\n    for (String nonJavaCmd : nonJavaCmds) {\r\n        Assert.assertFalse(nonJavaCmd.matches(CONTAINS_JAVA_CMD));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testCleanCmdRegex",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testCleanCmdRegex()\n{\r\n    String[] securityManagerCmds = { \"/usr/bin/java -Djava.security.manager -cp $CLASSPATH $MainClass\", \"-Djava.security.manager -Djava.security.policy==testpolicy keepThis\" };\r\n    String[] cleanedCmdsResult = { \"/usr/bin/java  -cp $CLASSPATH $MainClass\", \"keepThis\" };\r\n    for (int i = 0; i < securityManagerCmds.length; i++) {\r\n        Assert.assertEquals(securityManagerCmds[i].replaceAll(CLEAN_CMD_REGEX, \"\").trim(), cleanedCmdsResult[i]);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testAppendSecurityFlags",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testAppendSecurityFlags() throws ContainerExecutionException\n{\r\n    String securityString = \"-Djava.security.manager -Djava.security.policy==\" + policyFile.getAbsolutePath();\r\n    String[] badCommands = { \"$JAVA_HOME/bin/java -Djava.security.manager \" + \"-Djava.security.policy=/home/user/java.policy\", \"$JAVA_HOME/bin/java -cp MyApp.jar MrAppMaster\" };\r\n    String[] cleanCommands = { \"$JAVA_HOME/bin/java \" + securityString, \"$JAVA_HOME/bin/java \" + securityString + \" -cp MyApp.jar MrAppMaster\" };\r\n    List<String> commands = Arrays.asList(badCommands);\r\n    JavaSandboxLinuxContainerRuntime.NMContainerPolicyUtils.appendSecurityFlags(commands, env, policyFilePath, JavaSandboxLinuxContainerRuntime.SandboxMode.enforcing);\r\n    for (int i = 0; i < commands.size(); i++) {\r\n        Assert.assertTrue(commands.get(i).trim().equals(cleanCommands[i].trim()));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "cleanup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void cleanup()\n{\r\n    System.setProperties(baseProps);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    delegatingLinuxContainerRuntime = new DelegatingLinuxContainerRuntime();\r\n    conf = new Configuration();\r\n    env.clear();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testIsRuntimeAllowedDefault",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testIsRuntimeAllowedDefault() throws Exception\n{\r\n    conf.set(YarnConfiguration.LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES, YarnConfiguration.DEFAULT_LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES[0]);\r\n    System.out.println(conf.get(YarnConfiguration.LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES));\r\n    delegatingLinuxContainerRuntime.initialize(conf, null);\r\n    assertTrue(delegatingLinuxContainerRuntime.isRuntimeAllowed(LinuxContainerRuntimeConstants.RuntimeType.DEFAULT.name()));\r\n    assertFalse(delegatingLinuxContainerRuntime.isRuntimeAllowed(LinuxContainerRuntimeConstants.RuntimeType.DOCKER.name()));\r\n    assertFalse(delegatingLinuxContainerRuntime.isRuntimeAllowed(LinuxContainerRuntimeConstants.RuntimeType.JAVASANDBOX.name()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testIsRuntimeAllowedDocker",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testIsRuntimeAllowedDocker() throws Exception\n{\r\n    conf.set(YarnConfiguration.LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES, ContainerRuntimeConstants.CONTAINER_RUNTIME_DOCKER);\r\n    delegatingLinuxContainerRuntime.initialize(conf, null);\r\n    assertTrue(delegatingLinuxContainerRuntime.isRuntimeAllowed(LinuxContainerRuntimeConstants.RuntimeType.DOCKER.name()));\r\n    assertFalse(delegatingLinuxContainerRuntime.isRuntimeAllowed(LinuxContainerRuntimeConstants.RuntimeType.DEFAULT.name()));\r\n    assertFalse(delegatingLinuxContainerRuntime.isRuntimeAllowed(LinuxContainerRuntimeConstants.RuntimeType.JAVASANDBOX.name()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testIsRuntimeAllowedJavaSandbox",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testIsRuntimeAllowedJavaSandbox() throws Exception\n{\r\n    conf.set(YarnConfiguration.LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES, \"javasandbox\");\r\n    delegatingLinuxContainerRuntime.initialize(conf, null);\r\n    assertTrue(delegatingLinuxContainerRuntime.isRuntimeAllowed(LinuxContainerRuntimeConstants.RuntimeType.JAVASANDBOX.name()));\r\n    assertFalse(delegatingLinuxContainerRuntime.isRuntimeAllowed(LinuxContainerRuntimeConstants.RuntimeType.DEFAULT.name()));\r\n    assertFalse(delegatingLinuxContainerRuntime.isRuntimeAllowed(LinuxContainerRuntimeConstants.RuntimeType.DOCKER.name()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testIsRuntimeAllowedMultiple",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testIsRuntimeAllowedMultiple() throws Exception\n{\r\n    conf.set(YarnConfiguration.LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES, \"docker,javasandbox\");\r\n    delegatingLinuxContainerRuntime.initialize(conf, null);\r\n    assertTrue(delegatingLinuxContainerRuntime.isRuntimeAllowed(LinuxContainerRuntimeConstants.RuntimeType.DOCKER.name()));\r\n    assertTrue(delegatingLinuxContainerRuntime.isRuntimeAllowed(LinuxContainerRuntimeConstants.RuntimeType.JAVASANDBOX.name()));\r\n    assertFalse(delegatingLinuxContainerRuntime.isRuntimeAllowed(LinuxContainerRuntimeConstants.RuntimeType.DEFAULT.name()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testIsRuntimeAllowedAll",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testIsRuntimeAllowedAll() throws Exception\n{\r\n    conf.set(YarnConfiguration.LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES, \"default,docker,javasandbox\");\r\n    delegatingLinuxContainerRuntime.initialize(conf, null);\r\n    assertTrue(delegatingLinuxContainerRuntime.isRuntimeAllowed(LinuxContainerRuntimeConstants.RuntimeType.DEFAULT.name()));\r\n    assertTrue(delegatingLinuxContainerRuntime.isRuntimeAllowed(LinuxContainerRuntimeConstants.RuntimeType.DOCKER.name()));\r\n    assertTrue(delegatingLinuxContainerRuntime.isRuntimeAllowed(LinuxContainerRuntimeConstants.RuntimeType.JAVASANDBOX.name()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testInitializeMissingRuntimeClass",
  "errType" : [ "ContainerExecutionException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testInitializeMissingRuntimeClass() throws Exception\n{\r\n    conf.set(YarnConfiguration.LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES, \"mock\");\r\n    try {\r\n        delegatingLinuxContainerRuntime.initialize(conf, null);\r\n        fail(\"initialize should fail\");\r\n    } catch (ContainerExecutionException e) {\r\n        assert (e.getMessage().contains(\"Invalid runtime set\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testIsRuntimeAllowedMock",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testIsRuntimeAllowedMock() throws Exception\n{\r\n    conf.set(YarnConfiguration.LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES, \"mock\");\r\n    conf.set(String.format(YarnConfiguration.LINUX_CONTAINER_RUNTIME_CLASS_FMT, \"mock\"), MockLinuxContainerRuntime.class.getName());\r\n    delegatingLinuxContainerRuntime.initialize(conf, null);\r\n    assertFalse(delegatingLinuxContainerRuntime.isRuntimeAllowed(LinuxContainerRuntimeConstants.RuntimeType.DEFAULT.name()));\r\n    assertFalse(delegatingLinuxContainerRuntime.isRuntimeAllowed(LinuxContainerRuntimeConstants.RuntimeType.DOCKER.name()));\r\n    assertFalse(delegatingLinuxContainerRuntime.isRuntimeAllowed(LinuxContainerRuntimeConstants.RuntimeType.JAVASANDBOX.name()));\r\n    assertTrue(delegatingLinuxContainerRuntime.isRuntimeAllowed(\"mock\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testJavaSandboxNotAllowedButPermissive",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testJavaSandboxNotAllowedButPermissive() throws Exception\n{\r\n    conf.set(YarnConfiguration.LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES, \"default,docker\");\r\n    conf.set(YarnConfiguration.YARN_CONTAINER_SANDBOX, \"permissive\");\r\n    delegatingLinuxContainerRuntime.initialize(conf, null);\r\n    ContainerRuntime runtime = delegatingLinuxContainerRuntime.pickContainerRuntime(env);\r\n    assertTrue(runtime instanceof DefaultLinuxContainerRuntime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testJavaSandboxNotAllowedButPermissiveDockerRequested",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testJavaSandboxNotAllowedButPermissiveDockerRequested() throws Exception\n{\r\n    env.put(ContainerRuntimeConstants.ENV_CONTAINER_TYPE, ContainerRuntimeConstants.CONTAINER_RUNTIME_DOCKER);\r\n    conf.set(YarnConfiguration.LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES, \"default,docker\");\r\n    conf.set(YarnConfiguration.YARN_CONTAINER_SANDBOX, \"permissive\");\r\n    delegatingLinuxContainerRuntime.initialize(conf, null);\r\n    ContainerRuntime runtime = delegatingLinuxContainerRuntime.pickContainerRuntime(env);\r\n    assertTrue(runtime instanceof DockerLinuxContainerRuntime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testMockRuntimeSelected",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testMockRuntimeSelected() throws Exception\n{\r\n    env.put(ContainerRuntimeConstants.ENV_CONTAINER_TYPE, \"mock\");\r\n    conf.set(String.format(YarnConfiguration.LINUX_CONTAINER_RUNTIME_CLASS_FMT, \"mock\"), MockLinuxContainerRuntime.class.getName());\r\n    conf.set(YarnConfiguration.LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES, \"mock\");\r\n    delegatingLinuxContainerRuntime.initialize(conf, null);\r\n    ContainerRuntime runtime = delegatingLinuxContainerRuntime.pickContainerRuntime(env);\r\n    assertTrue(runtime instanceof MockLinuxContainerRuntime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "createContainerExecutor",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "ContainerExecutor createContainerExecutor()\n{\r\n    DefaultContainerExecutor exec = new DefaultContainerExecutor() {\r\n\r\n        @Override\r\n        public int launchContainer(ContainerStartContext ctx) throws IOException, ConfigurationException {\r\n            if (delayContainers) {\r\n                try {\r\n                    Thread.sleep(10000);\r\n                } catch (InterruptedException e) {\r\n                }\r\n            }\r\n            return super.launchContainer(ctx);\r\n        }\r\n    };\r\n    exec.setConf(conf);\r\n    return spy(exec);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "createContainerManager",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "ContainerManagerImpl createContainerManager(DeletionService delSrvc)\n{\r\n    return new ContainerManagerImpl(context, exec, delSrvc, getNodeStatusUpdater(), metrics, dirsHandler) {\r\n\r\n        @Override\r\n        protected UserGroupInformation getRemoteUgi() throws YarnException {\r\n            ApplicationId appId = ApplicationId.newInstance(0, 0);\r\n            ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n            UserGroupInformation ugi = UserGroupInformation.createRemoteUser(appAttemptId.toString());\r\n            ugi.addTokenIdentifier(new NMTokenIdentifier(appAttemptId, context.getNodeId(), user, context.getNMTokenSecretManager().getCurrentKey().getKeyId()));\r\n            return ugi;\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testContainerManagerInitialization",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testContainerManagerInitialization() throws IOException\n{\r\n    containerManager.start();\r\n    InetAddress localAddr = InetAddress.getLocalHost();\r\n    String fqdn = localAddr.getCanonicalHostName();\r\n    if (!localAddr.getHostAddress().equals(fqdn)) {\r\n        Assert.assertEquals(fqdn, context.getNodeId().getHost());\r\n    }\r\n    boolean throwsException = false;\r\n    try {\r\n        List<ContainerId> containerIds = new ArrayList<>();\r\n        ContainerId id = createContainerId(0);\r\n        containerIds.add(id);\r\n        GetContainerStatusesRequest request = GetContainerStatusesRequest.newInstance(containerIds);\r\n        GetContainerStatusesResponse response = containerManager.getContainerStatuses(request);\r\n        if (response.getFailedRequests().containsKey(id)) {\r\n            throw response.getFailedRequests().get(id).deSerialize();\r\n        }\r\n    } catch (Throwable e) {\r\n        throwsException = true;\r\n    }\r\n    Assert.assertTrue(throwsException);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testContainerSetup",
  "errType" : null,
  "containingMethodsNum" : 47,
  "sourceCodeText" : "void testContainerSetup() throws Exception\n{\r\n    containerManager.start();\r\n    File dir = new File(tmpDir, \"dir\");\r\n    dir.mkdirs();\r\n    File file = new File(dir, \"file\");\r\n    PrintWriter fileWriter = new PrintWriter(file);\r\n    fileWriter.write(\"Hello World!\");\r\n    fileWriter.close();\r\n    ContainerId cId = createContainerId(0);\r\n    ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class);\r\n    URL resource_alpha = URL.fromPath(localFS.makeQualified(new Path(file.getAbsolutePath())));\r\n    LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class);\r\n    rsrc_alpha.setResource(resource_alpha);\r\n    rsrc_alpha.setSize(-1);\r\n    rsrc_alpha.setVisibility(LocalResourceVisibility.APPLICATION);\r\n    rsrc_alpha.setType(LocalResourceType.FILE);\r\n    rsrc_alpha.setTimestamp(file.lastModified());\r\n    String destinationFile = \"dest_file\";\r\n    Map<String, LocalResource> localResources = new HashMap<String, LocalResource>();\r\n    localResources.put(destinationFile, rsrc_alpha);\r\n    containerLaunchContext.setLocalResources(localResources);\r\n    StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, createContainerToken(cId, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager()));\r\n    List<StartContainerRequest> list = new ArrayList<>();\r\n    list.add(scRequest);\r\n    StartContainersRequest allRequests = StartContainersRequest.newInstance(list);\r\n    containerManager.startContainers(allRequests);\r\n    BaseContainerManagerTest.waitForContainerState(containerManager, cId, ContainerState.COMPLETE, 40);\r\n    ApplicationId appId = cId.getApplicationAttemptId().getApplicationId();\r\n    String appIDStr = appId.toString();\r\n    String containerIDStr = cId.toString();\r\n    File userCacheDir = new File(localDir, ContainerLocalizer.USERCACHE);\r\n    File userDir = new File(userCacheDir, user);\r\n    File appCache = new File(userDir, ContainerLocalizer.APPCACHE);\r\n    File appDir = new File(appCache, appIDStr);\r\n    File containerDir = new File(appDir, containerIDStr);\r\n    File targetFile = new File(containerDir, destinationFile);\r\n    File sysDir = new File(localDir, ResourceLocalizationService.NM_PRIVATE_DIR);\r\n    File appSysDir = new File(sysDir, appIDStr);\r\n    File containerSysDir = new File(appSysDir, containerIDStr);\r\n    for (File f : new File[] { localDir, sysDir, userCacheDir, appDir, appSysDir, containerDir, containerSysDir }) {\r\n        Assert.assertTrue(f.getAbsolutePath() + \" doesn't exist!!\", f.exists());\r\n        Assert.assertTrue(f.getAbsolutePath() + \" is not a directory!!\", f.isDirectory());\r\n    }\r\n    Assert.assertTrue(targetFile.getAbsolutePath() + \" doesn't exist!!\", targetFile.exists());\r\n    BufferedReader reader = new BufferedReader(new FileReader(targetFile));\r\n    Assert.assertEquals(\"Hello World!\", reader.readLine());\r\n    Assert.assertEquals(null, reader.readLine());\r\n    long targetFileSize = FileUtil.getDU(targetFile.getCanonicalFile().getParentFile());\r\n    MetricsRecordBuilder rb = getMetrics(\"NodeManagerMetrics\");\r\n    assertCounter(\"LocalizedCacheMissBytes\", targetFileSize, rb);\r\n    assertCounter(\"LocalizedCacheHitBytes\", 0L, rb);\r\n    assertCounter(\"LocalizedCacheMissFiles\", 1L, rb);\r\n    assertCounter(\"LocalizedCacheHitFiles\", 0L, rb);\r\n    assertGaugeGt(\"LocalizationDurationMillisAvgTime\", 0, rb);\r\n    assertGauge(\"LocalizedCacheHitBytesRatio\", 0, rb);\r\n    assertGauge(\"LocalizedCacheHitFilesRatio\", 0, rb);\r\n    final ContainerId cid1 = createContainerId(1);\r\n    containerManager.startContainers(StartContainersRequest.newInstance(Collections.singletonList(StartContainerRequest.newInstance(containerLaunchContext, createContainerToken(cid1, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager())))));\r\n    waitForContainerState(containerManager, cid1, ContainerState.COMPLETE);\r\n    rb = getMetrics(\"NodeManagerMetrics\");\r\n    assertCounter(\"LocalizedCacheMissBytes\", targetFileSize, rb);\r\n    assertCounter(\"LocalizedCacheHitBytes\", targetFileSize, rb);\r\n    assertCounter(\"LocalizedCacheMissFiles\", 1L, rb);\r\n    assertCounter(\"LocalizedCacheHitFiles\", 1L, rb);\r\n    assertGauge(\"LocalizedCacheHitBytesRatio\", 50, rb);\r\n    assertGauge(\"LocalizedCacheHitFilesRatio\", 50, rb);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testAuxPathHandler",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testAuxPathHandler() throws Exception\n{\r\n    File testDir = GenericTestUtils.getTestDir(TestContainerManager.class.getSimpleName() + \"LocDir\");\r\n    testDir.mkdirs();\r\n    File testFile = new File(testDir, \"test\");\r\n    testFile.createNewFile();\r\n    YarnConfiguration configuration = new YarnConfiguration();\r\n    configuration.set(YarnConfiguration.NM_LOCAL_DIRS, testDir.getAbsolutePath());\r\n    LocalDirsHandlerService spyDirHandlerService = Mockito.spy(new LocalDirsHandlerService());\r\n    spyDirHandlerService.init(configuration);\r\n    when(spyDirHandlerService.getConfig()).thenReturn(configuration);\r\n    AuxiliaryLocalPathHandler auxiliaryLocalPathHandler = new ContainerManagerImpl.AuxiliaryLocalPathHandlerImpl(spyDirHandlerService);\r\n    Path p = auxiliaryLocalPathHandler.getLocalPathForRead(\"test\");\r\n    assertTrue(p != null && !spyDirHandlerService.getLocalDirsForRead().isEmpty());\r\n    when(spyDirHandlerService.getLocalDirsForRead()).thenReturn(new ArrayList<String>());\r\n    try {\r\n        auxiliaryLocalPathHandler.getLocalPathForRead(\"test\");\r\n        fail(\"Should not have passed!\");\r\n    } catch (IOException e) {\r\n        Assert.assertTrue(e.getMessage().contains(\"Could not find\"));\r\n    } finally {\r\n        testFile.delete();\r\n        testDir.delete();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testContainerLaunchAndStop",
  "errType" : null,
  "containingMethodsNum" : 45,
  "sourceCodeText" : "void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException\n{\r\n    containerManager.start();\r\n    File scriptFile = Shell.appendScriptExtension(tmpDir, \"scriptFile\");\r\n    PrintWriter fileWriter = new PrintWriter(scriptFile);\r\n    File processStartFile = new File(tmpDir, \"start_file.txt\").getAbsoluteFile();\r\n    ContainerId cId = createContainerId(0);\r\n    if (Shell.WINDOWS) {\r\n        fileWriter.println(\"@echo Hello World!> \" + processStartFile);\r\n        fileWriter.println(\"@echo \" + cId + \">> \" + processStartFile);\r\n        fileWriter.println(\"@ping -n 100 127.0.0.1 >nul\");\r\n    } else {\r\n        fileWriter.write(\"\\numask 0\");\r\n        fileWriter.write(\"\\necho Hello World! > \" + processStartFile);\r\n        fileWriter.write(\"\\necho $$ >> \" + processStartFile);\r\n        fileWriter.write(\"\\nexec sleep 100\");\r\n    }\r\n    fileWriter.close();\r\n    ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class);\r\n    URL resource_alpha = URL.fromPath(localFS.makeQualified(new Path(scriptFile.getAbsolutePath())));\r\n    LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class);\r\n    rsrc_alpha.setResource(resource_alpha);\r\n    rsrc_alpha.setSize(-1);\r\n    rsrc_alpha.setVisibility(LocalResourceVisibility.APPLICATION);\r\n    rsrc_alpha.setType(LocalResourceType.FILE);\r\n    rsrc_alpha.setTimestamp(scriptFile.lastModified());\r\n    String destinationFile = \"dest_file\";\r\n    Map<String, LocalResource> localResources = new HashMap<String, LocalResource>();\r\n    localResources.put(destinationFile, rsrc_alpha);\r\n    containerLaunchContext.setLocalResources(localResources);\r\n    List<String> commands = Arrays.asList(Shell.getRunScriptCommand(scriptFile));\r\n    containerLaunchContext.setCommands(commands);\r\n    StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, createContainerToken(cId, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager()));\r\n    List<StartContainerRequest> list = new ArrayList<>();\r\n    list.add(scRequest);\r\n    StartContainersRequest allRequests = StartContainersRequest.newInstance(list);\r\n    containerManager.startContainers(allRequests);\r\n    int timeoutSecs = 0;\r\n    while (!processStartFile.exists() && timeoutSecs++ < 20) {\r\n        Thread.sleep(1000);\r\n        LOG.info(\"Waiting for process start-file to be created\");\r\n    }\r\n    Assert.assertTrue(\"ProcessStartFile doesn't exist!\", processStartFile.exists());\r\n    BufferedReader reader = new BufferedReader(new FileReader(processStartFile));\r\n    Assert.assertEquals(\"Hello World!\", reader.readLine());\r\n    String pid = reader.readLine().trim();\r\n    Assert.assertEquals(null, reader.readLine());\r\n    Assert.assertTrue(\"Process is not alive!\", DefaultContainerExecutor.containerIsAlive(pid));\r\n    Assert.assertTrue(\"Process is not alive!\", DefaultContainerExecutor.containerIsAlive(pid));\r\n    List<ContainerId> containerIds = new ArrayList<>();\r\n    containerIds.add(cId);\r\n    StopContainersRequest stopRequest = StopContainersRequest.newInstance(containerIds);\r\n    containerManager.stopContainers(stopRequest);\r\n    BaseContainerManagerTest.waitForContainerState(containerManager, cId, ContainerState.COMPLETE);\r\n    GetContainerStatusesRequest gcsRequest = GetContainerStatusesRequest.newInstance(containerIds);\r\n    ContainerStatus containerStatus = containerManager.getContainerStatuses(gcsRequest).getContainerStatuses().get(0);\r\n    int expectedExitCode = ContainerExitStatus.KILLED_BY_APPMASTER;\r\n    Assert.assertEquals(expectedExitCode, containerStatus.getExitStatus());\r\n    Assert.assertFalse(\"Process is still alive!\", DefaultContainerExecutor.containerIsAlive(pid));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testContainerRestart",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testContainerRestart() throws IOException, InterruptedException, YarnException\n{\r\n    containerManager.start();\r\n    ContainerId cId = createContainerId(0);\r\n    File oldStartFile = new File(tmpDir, \"start_file_o.txt\").getAbsoluteFile();\r\n    String pid = prepareInitialContainer(cId, oldStartFile);\r\n    doRestartTests(cId, oldStartFile, \"Hello World!\", pid, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "doRestartTests",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "String doRestartTests(ContainerId cId, File oldStartFile, String testString, String pid, boolean canRollback) throws YarnException, IOException, InterruptedException\n{\r\n    int beforeRestart = metrics.getRunningContainers();\r\n    Container container = containerManager.getContext().getContainers().get(cId);\r\n    Assert.assertFalse(container.isReInitializing());\r\n    containerManager.restartContainer(cId);\r\n    Assert.assertTrue(container.isReInitializing());\r\n    int timeoutSecs = 0;\r\n    while (DefaultContainerExecutor.containerIsAlive(pid) && (metrics.getRunningContainers() == beforeRestart) && container.isReInitializing() && timeoutSecs++ < 20) {\r\n        Thread.sleep(1000);\r\n        LOG.info(\"Waiting for Original process to die..\" + \"and new process to start!!\");\r\n    }\r\n    Assert.assertFalse(\"Old Process Still alive!!\", DefaultContainerExecutor.containerIsAlive(pid));\r\n    String newPid = null;\r\n    timeoutSecs = 0;\r\n    while (timeoutSecs++ < 20) {\r\n        LOG.info(\"Waiting for New process file to be created!!\");\r\n        BufferedReader reader = new BufferedReader(new FileReader(oldStartFile));\r\n        Assert.assertEquals(testString, reader.readLine());\r\n        newPid = reader.readLine().trim();\r\n        Assert.assertEquals(null, reader.readLine());\r\n        reader.close();\r\n        if (!newPid.equals(pid)) {\r\n            break;\r\n        }\r\n        Thread.sleep(1000);\r\n    }\r\n    Assert.assertNotEquals(pid, newPid);\r\n    Assert.assertEquals(canRollback, container.canRollback());\r\n    return newPid;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testContainerReInitSuccess",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "String[] testContainerReInitSuccess(boolean autoCommit) throws IOException, InterruptedException, YarnException\n{\r\n    containerManager.start();\r\n    ContainerId cId = createContainerId(0);\r\n    File oldStartFile = new File(tmpDir, \"start_file_o.txt\").getAbsoluteFile();\r\n    String pid = prepareInitialContainer(cId, oldStartFile);\r\n    File newStartFile = new File(tmpDir, \"start_file_n.txt\").getAbsoluteFile();\r\n    ResourceUtilization beforeUpgrade = ResourceUtilization.newInstance(containerManager.getContainerScheduler().getCurrentUtilization());\r\n    prepareContainerUpgrade(autoCommit, false, false, cId, newStartFile);\r\n    ResourceUtilization afterUpgrade = ResourceUtilization.newInstance(containerManager.getContainerScheduler().getCurrentUtilization());\r\n    Assert.assertEquals(\"Possible resource leak detected !!\", beforeUpgrade, afterUpgrade);\r\n    Assert.assertFalse(\"Process is still alive!\", DefaultContainerExecutor.containerIsAlive(pid));\r\n    BufferedReader reader = new BufferedReader(new FileReader(newStartFile));\r\n    Assert.assertEquals(\"Upgrade World!\", reader.readLine());\r\n    String newPid = reader.readLine().trim();\r\n    Assert.assertNotEquals(\"Old and New Pids must be different !\", pid, newPid);\r\n    Assert.assertEquals(null, reader.readLine());\r\n    reader.close();\r\n    reader = new BufferedReader(new FileReader(oldStartFile));\r\n    Assert.assertEquals(\"Hello World!\", reader.readLine());\r\n    Assert.assertTrue(\"New Process is not alive!\", DefaultContainerExecutor.containerIsAlive(newPid));\r\n    return new String[] { pid, newPid };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testContainerUpgradeSuccessAutoCommit",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testContainerUpgradeSuccessAutoCommit() throws IOException, InterruptedException, YarnException\n{\r\n    Listener listener = new Listener();\r\n    ((NodeManager.DefaultContainerStateListener) containerManager.context.getContainerStateTransitionListener()).addListener(listener);\r\n    testContainerReInitSuccess(true);\r\n    try {\r\n        containerManager.commitLastReInitialization(createContainerId(0));\r\n        Assert.fail();\r\n    } catch (Exception e) {\r\n        Assert.assertTrue(e.getMessage().contains(\"Nothing to Commit\"));\r\n    }\r\n    List<org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState> containerStates = listener.states.get(createContainerId(0));\r\n    Assert.assertEquals(Arrays.asList(org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.NEW, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.LOCALIZING, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.SCHEDULED, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.RUNNING, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.REINITIALIZING, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.REINITIALIZING_AWAITING_KILL, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.REINITIALIZING_AWAITING_KILL, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.SCHEDULED, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.RUNNING), containerStates);\r\n    List<ContainerEventType> containerEventTypes = listener.events.get(createContainerId(0));\r\n    Assert.assertEquals(Arrays.asList(ContainerEventType.INIT_CONTAINER, ContainerEventType.RESOURCE_LOCALIZED, ContainerEventType.CONTAINER_LAUNCHED, ContainerEventType.REINITIALIZE_CONTAINER, ContainerEventType.RESOURCE_LOCALIZED, ContainerEventType.UPDATE_DIAGNOSTICS_MSG, ContainerEventType.CONTAINER_KILLED_ON_REQUEST, ContainerEventType.CONTAINER_LAUNCHED), containerEventTypes);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testContainerUpgradeSuccessExplicitCommit",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testContainerUpgradeSuccessExplicitCommit() throws IOException, InterruptedException, YarnException\n{\r\n    testContainerReInitSuccess(false);\r\n    ContainerId cId = createContainerId(0);\r\n    containerManager.commitLastReInitialization(cId);\r\n    try {\r\n        containerManager.rollbackLastReInitialization(cId);\r\n        Assert.fail();\r\n    } catch (Exception e) {\r\n        Assert.assertTrue(e.getMessage().contains(\"Nothing to rollback to\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testContainerUpgradeSuccessExplicitRollback",
  "errType" : null,
  "containingMethodsNum" : 25,
  "sourceCodeText" : "void testContainerUpgradeSuccessExplicitRollback() throws IOException, InterruptedException, YarnException\n{\r\n    Listener listener = new Listener();\r\n    ((NodeManager.DefaultContainerStateListener) containerManager.context.getContainerStateTransitionListener()).addListener(listener);\r\n    String[] pids = testContainerReInitSuccess(false);\r\n    pids[1] = doRestartTests(createContainerId(0), new File(tmpDir, \"start_file_n.txt\").getAbsoluteFile(), \"Upgrade World!\", pids[1], true);\r\n    File oldStartFile = new File(tmpDir, \"start_file_o.txt\").getAbsoluteFile();\r\n    oldStartFile.delete();\r\n    ContainerId cId = createContainerId(0);\r\n    containerManager.rollbackLastReInitialization(cId);\r\n    Container container = containerManager.getContext().getContainers().get(cId);\r\n    Assert.assertTrue(container.isReInitializing());\r\n    Assert.assertFalse(\"Original Process is still alive!\", DefaultContainerExecutor.containerIsAlive(pids[0]));\r\n    int timeoutSecs = 0;\r\n    while (container.isReInitializing() && timeoutSecs++ < 20) {\r\n        Thread.sleep(1000);\r\n        LOG.info(\"Waiting for ReInitialization to complete..\");\r\n    }\r\n    Assert.assertFalse(container.isReInitializing());\r\n    timeoutSecs = 0;\r\n    while (!oldStartFile.exists() && timeoutSecs++ < 20) {\r\n        Thread.sleep(1000);\r\n        LOG.info(\"Waiting for New process start-file to be created\");\r\n    }\r\n    BufferedReader reader = new BufferedReader(new FileReader(oldStartFile));\r\n    Assert.assertEquals(\"Hello World!\", reader.readLine());\r\n    String rolledBackPid = reader.readLine().trim();\r\n    Assert.assertEquals(null, reader.readLine());\r\n    Assert.assertNotEquals(\"The Rolled-back process should be a different pid\", pids[0], rolledBackPid);\r\n    List<org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState> containerStates = listener.states.get(createContainerId(0));\r\n    Assert.assertEquals(Arrays.asList(org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.NEW, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.LOCALIZING, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.SCHEDULED, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.RUNNING, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.REINITIALIZING, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.REINITIALIZING_AWAITING_KILL, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.REINITIALIZING_AWAITING_KILL, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.SCHEDULED, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.RUNNING, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.REINITIALIZING_AWAITING_KILL, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.REINITIALIZING_AWAITING_KILL, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.SCHEDULED, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.RUNNING, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.REINITIALIZING_AWAITING_KILL, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.REINITIALIZING_AWAITING_KILL, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.SCHEDULED, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.RUNNING), containerStates);\r\n    List<ContainerEventType> containerEventTypes = listener.events.get(createContainerId(0));\r\n    Assert.assertEquals(Arrays.asList(ContainerEventType.INIT_CONTAINER, ContainerEventType.RESOURCE_LOCALIZED, ContainerEventType.CONTAINER_LAUNCHED, ContainerEventType.REINITIALIZE_CONTAINER, ContainerEventType.RESOURCE_LOCALIZED, ContainerEventType.UPDATE_DIAGNOSTICS_MSG, ContainerEventType.CONTAINER_KILLED_ON_REQUEST, ContainerEventType.CONTAINER_LAUNCHED, ContainerEventType.REINITIALIZE_CONTAINER, ContainerEventType.UPDATE_DIAGNOSTICS_MSG, ContainerEventType.CONTAINER_KILLED_ON_REQUEST, ContainerEventType.CONTAINER_LAUNCHED, ContainerEventType.ROLLBACK_REINIT, ContainerEventType.UPDATE_DIAGNOSTICS_MSG, ContainerEventType.CONTAINER_KILLED_ON_REQUEST, ContainerEventType.CONTAINER_LAUNCHED), containerEventTypes);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testContainerUpgradeLocalizationFailure",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testContainerUpgradeLocalizationFailure() throws IOException, InterruptedException, YarnException\n{\r\n    if (Shell.WINDOWS) {\r\n        return;\r\n    }\r\n    containerManager.start();\r\n    Listener listener = new Listener();\r\n    ((NodeManager.DefaultContainerStateListener) containerManager.context.getContainerStateTransitionListener()).addListener(listener);\r\n    ContainerId cId = createContainerId(0);\r\n    File oldStartFile = new File(tmpDir, \"start_file_o.txt\").getAbsoluteFile();\r\n    String pid = prepareInitialContainer(cId, oldStartFile);\r\n    File newStartFile = new File(tmpDir, \"start_file_n.txt\").getAbsoluteFile();\r\n    prepareContainerUpgrade(false, true, true, cId, newStartFile);\r\n    Assert.assertTrue(\"Process is NOT alive!\", DefaultContainerExecutor.containerIsAlive(pid));\r\n    List<org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState> containerStates = listener.states.get(createContainerId(0));\r\n    Assert.assertEquals(Arrays.asList(org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.NEW, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.LOCALIZING, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.SCHEDULED, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.RUNNING, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.REINITIALIZING, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.RUNNING), containerStates);\r\n    List<ContainerEventType> containerEventTypes = listener.events.get(createContainerId(0));\r\n    Assert.assertEquals(Arrays.asList(ContainerEventType.INIT_CONTAINER, ContainerEventType.RESOURCE_LOCALIZED, ContainerEventType.CONTAINER_LAUNCHED, ContainerEventType.REINITIALIZE_CONTAINER, ContainerEventType.RESOURCE_FAILED), containerEventTypes);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testContainerUpgradeProcessFailure",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testContainerUpgradeProcessFailure() throws IOException, InterruptedException, YarnException\n{\r\n    if (Shell.WINDOWS) {\r\n        return;\r\n    }\r\n    containerManager.start();\r\n    ContainerId cId = createContainerId(0);\r\n    File oldStartFile = new File(tmpDir, \"start_file_o.txt\").getAbsoluteFile();\r\n    String pid = prepareInitialContainer(cId, oldStartFile);\r\n    File newStartFile = new File(tmpDir, \"start_file_n.txt\").getAbsoluteFile();\r\n    prepareContainerUpgrade(true, true, false, cId, newStartFile);\r\n    Assert.assertFalse(\"Process is still alive!\", DefaultContainerExecutor.containerIsAlive(pid));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testContainerUpgradeRollbackDueToFailure",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testContainerUpgradeRollbackDueToFailure() throws IOException, InterruptedException, YarnException\n{\r\n    if (Shell.WINDOWS) {\r\n        return;\r\n    }\r\n    containerManager.start();\r\n    Listener listener = new Listener();\r\n    ((NodeManager.DefaultContainerStateListener) containerManager.context.getContainerStateTransitionListener()).addListener(listener);\r\n    ContainerId cId = createContainerId(0);\r\n    File oldStartFile = new File(tmpDir, \"start_file_o.txt\").getAbsoluteFile();\r\n    String pid = prepareInitialContainer(cId, oldStartFile);\r\n    File newStartFile = new File(tmpDir, \"start_file_n.txt\").getAbsoluteFile();\r\n    prepareContainerUpgrade(false, true, false, cId, newStartFile);\r\n    Assert.assertFalse(\"Original Process is still alive!\", DefaultContainerExecutor.containerIsAlive(pid));\r\n    int timeoutSecs = 0;\r\n    while (!oldStartFile.exists() && timeoutSecs++ < 20) {\r\n        System.out.println(\"\\nFiles: \" + Arrays.toString(oldStartFile.getParentFile().list()));\r\n        Thread.sleep(1000);\r\n        LOG.info(\"Waiting for New process start-file to be created\");\r\n    }\r\n    BufferedReader reader = new BufferedReader(new FileReader(oldStartFile));\r\n    Assert.assertEquals(\"Hello World!\", reader.readLine());\r\n    String rolledBackPid = reader.readLine().trim();\r\n    Assert.assertEquals(null, reader.readLine());\r\n    Assert.assertNotEquals(\"The Rolled-back process should be a different pid\", pid, rolledBackPid);\r\n    List<org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState> containerStates = listener.states.get(createContainerId(0));\r\n    Assert.assertEquals(Arrays.asList(org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.NEW, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.LOCALIZING, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.SCHEDULED, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.RUNNING, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.REINITIALIZING, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.REINITIALIZING_AWAITING_KILL, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.REINITIALIZING_AWAITING_KILL, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.SCHEDULED, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.RUNNING, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.RUNNING, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.SCHEDULED, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.RUNNING), containerStates);\r\n    List<ContainerEventType> containerEventTypes = listener.events.get(createContainerId(0));\r\n    Assert.assertEquals(Arrays.asList(ContainerEventType.INIT_CONTAINER, ContainerEventType.RESOURCE_LOCALIZED, ContainerEventType.CONTAINER_LAUNCHED, ContainerEventType.REINITIALIZE_CONTAINER, ContainerEventType.RESOURCE_LOCALIZED, ContainerEventType.UPDATE_DIAGNOSTICS_MSG, ContainerEventType.CONTAINER_KILLED_ON_REQUEST, ContainerEventType.CONTAINER_LAUNCHED, ContainerEventType.UPDATE_DIAGNOSTICS_MSG, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ContainerEventType.CONTAINER_LAUNCHED), containerEventTypes);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "prepareContainerUpgrade",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void prepareContainerUpgrade(boolean autoCommit, boolean failCmd, boolean failLoc, ContainerId cId, File startFile) throws FileNotFoundException, YarnException, InterruptedException\n{\r\n    File scriptFile = Shell.appendScriptExtension(tmpDir, \"scriptFile_new\");\r\n    PrintWriter fileWriter = new PrintWriter(scriptFile);\r\n    writeScriptFile(fileWriter, \"Upgrade World!\", startFile, cId, failCmd);\r\n    ContainerLaunchContext containerLaunchContext = prepareContainerLaunchContext(scriptFile, \"dest_file_new\", failLoc, 0);\r\n    containerManager.reInitializeContainer(cId, containerLaunchContext, autoCommit);\r\n    try {\r\n        containerManager.reInitializeContainer(cId, containerLaunchContext, autoCommit);\r\n    } catch (Exception e) {\r\n        Assert.assertTrue(e.getMessage().contains(\"Cannot perform RE_INIT\"));\r\n    }\r\n    int timeoutSecs = 0;\r\n    int maxTimeToWait = failLoc ? 10 : 20;\r\n    while (!startFile.exists() && timeoutSecs++ < maxTimeToWait) {\r\n        Thread.sleep(1000);\r\n        LOG.info(\"Waiting for New process start-file to be created\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "prepareInitialContainer",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "String prepareInitialContainer(ContainerId cId, File startFile) throws IOException, YarnException, InterruptedException\n{\r\n    File scriptFileOld = Shell.appendScriptExtension(tmpDir, \"scriptFile\");\r\n    PrintWriter fileWriterOld = new PrintWriter(scriptFileOld);\r\n    writeScriptFile(fileWriterOld, \"Hello World!\", startFile, cId, false);\r\n    ContainerLaunchContext containerLaunchContext = prepareContainerLaunchContext(scriptFileOld, \"dest_file\", false, 4);\r\n    StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, createContainerToken(cId, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager()));\r\n    List<StartContainerRequest> list = new ArrayList<>();\r\n    list.add(scRequest);\r\n    StartContainersRequest allRequests = StartContainersRequest.newInstance(list);\r\n    containerManager.startContainers(allRequests);\r\n    int timeoutSecs = 0;\r\n    while (!startFile.exists() && timeoutSecs++ < 20) {\r\n        Thread.sleep(1000);\r\n        LOG.info(\"Waiting for process start-file to be created\");\r\n    }\r\n    Assert.assertTrue(\"ProcessStartFile doesn't exist!\", startFile.exists());\r\n    BufferedReader reader = new BufferedReader(new FileReader(startFile));\r\n    Assert.assertEquals(\"Hello World!\", reader.readLine());\r\n    String pid = reader.readLine().trim();\r\n    Assert.assertEquals(null, reader.readLine());\r\n    Assert.assertTrue(\"Process is not alive!\", DefaultContainerExecutor.containerIsAlive(pid));\r\n    Assert.assertTrue(\"Process is not alive!\", DefaultContainerExecutor.containerIsAlive(pid));\r\n    return pid;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "writeScriptFile",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void writeScriptFile(PrintWriter fileWriter, String startLine, File processStartFile, ContainerId cId, boolean isFailure)\n{\r\n    if (Shell.WINDOWS) {\r\n        fileWriter.println(\"@echo \" + startLine + \"> \" + processStartFile);\r\n        fileWriter.println(\"@echo \" + cId + \">> \" + processStartFile);\r\n        fileWriter.println(\"@ping -n 100 127.0.0.1 >nul\");\r\n    } else {\r\n        fileWriter.write(\"\\numask 0\");\r\n        if (isFailure) {\r\n            fileWriter.write(\"\\necho $$ >> \" + processStartFile);\r\n            fileWriter.write(\"\\nexit 111\");\r\n        } else {\r\n            fileWriter.write(\"\\necho \" + startLine + \" > \" + processStartFile);\r\n            fileWriter.write(\"\\necho $$ >> \" + processStartFile);\r\n            fileWriter.write(\"\\nexec sleep 100\");\r\n        }\r\n    }\r\n    fileWriter.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "prepareContainerLaunchContext",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "ContainerLaunchContext prepareContainerLaunchContext(File scriptFile, String destFName, boolean putBadFile, int numRetries)\n{\r\n    ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class);\r\n    URL resourceAlpha = null;\r\n    if (putBadFile) {\r\n        File fileToDelete = new File(tmpDir, \"fileToDelete\").getAbsoluteFile();\r\n        resourceAlpha = URL.fromPath(localFS.makeQualified(new Path(fileToDelete.getAbsolutePath())));\r\n        fileToDelete.delete();\r\n    } else {\r\n        resourceAlpha = URL.fromPath(localFS.makeQualified(new Path(scriptFile.getAbsolutePath())));\r\n    }\r\n    LocalResource rsrcAlpha = recordFactory.newRecordInstance(LocalResource.class);\r\n    rsrcAlpha.setResource(resourceAlpha);\r\n    rsrcAlpha.setSize(-1);\r\n    rsrcAlpha.setVisibility(LocalResourceVisibility.APPLICATION);\r\n    rsrcAlpha.setType(LocalResourceType.FILE);\r\n    rsrcAlpha.setTimestamp(scriptFile.lastModified());\r\n    Map<String, LocalResource> localResources = new HashMap<>();\r\n    localResources.put(destFName, rsrcAlpha);\r\n    containerLaunchContext.setLocalResources(localResources);\r\n    ContainerRetryContext containerRetryContext = ContainerRetryContext.newInstance(ContainerRetryPolicy.RETRY_ON_SPECIFIC_ERROR_CODES, new HashSet<>(Arrays.asList(Integer.valueOf(111))), numRetries, 0);\r\n    containerLaunchContext.setContainerRetryContext(containerRetryContext);\r\n    List<String> commands = Arrays.asList(Shell.getRunScriptCommand(scriptFile));\r\n    containerLaunchContext.setCommands(commands);\r\n    return containerLaunchContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testContainerLaunchAndExit",
  "errType" : null,
  "containingMethodsNum" : 32,
  "sourceCodeText" : "void testContainerLaunchAndExit(int exitCode) throws IOException, InterruptedException, YarnException\n{\r\n    File scriptFile = Shell.appendScriptExtension(tmpDir, \"scriptFile\");\r\n    PrintWriter fileWriter = new PrintWriter(scriptFile);\r\n    File processStartFile = new File(tmpDir, \"start_file.txt\").getAbsoluteFile();\r\n    ContainerId cId = createContainerId(0);\r\n    if (Shell.WINDOWS) {\r\n        fileWriter.println(\"@echo Hello World!> \" + processStartFile);\r\n        fileWriter.println(\"@echo \" + cId + \">> \" + processStartFile);\r\n        if (exitCode != 0) {\r\n            fileWriter.println(\"@exit \" + exitCode);\r\n        }\r\n    } else {\r\n        fileWriter.write(\"\\numask 0\");\r\n        fileWriter.write(\"\\necho Hello World! > \" + processStartFile);\r\n        fileWriter.write(\"\\necho $$ >> \" + processStartFile);\r\n        if (exitCode != 0) {\r\n            fileWriter.write(\"\\nexit \" + exitCode);\r\n        }\r\n    }\r\n    fileWriter.close();\r\n    ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class);\r\n    URL resource_alpha = URL.fromPath(localFS.makeQualified(new Path(scriptFile.getAbsolutePath())));\r\n    LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class);\r\n    rsrc_alpha.setResource(resource_alpha);\r\n    rsrc_alpha.setSize(-1);\r\n    rsrc_alpha.setVisibility(LocalResourceVisibility.APPLICATION);\r\n    rsrc_alpha.setType(LocalResourceType.FILE);\r\n    rsrc_alpha.setTimestamp(scriptFile.lastModified());\r\n    String destinationFile = \"dest_file\";\r\n    Map<String, LocalResource> localResources = new HashMap<String, LocalResource>();\r\n    localResources.put(destinationFile, rsrc_alpha);\r\n    containerLaunchContext.setLocalResources(localResources);\r\n    List<String> commands = Arrays.asList(Shell.getRunScriptCommand(scriptFile));\r\n    containerLaunchContext.setCommands(commands);\r\n    StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, createContainerToken(cId, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager()));\r\n    List<StartContainerRequest> list = new ArrayList<>();\r\n    list.add(scRequest);\r\n    StartContainersRequest allRequests = StartContainersRequest.newInstance(list);\r\n    containerManager.startContainers(allRequests);\r\n    BaseContainerManagerTest.waitForContainerState(containerManager, cId, ContainerState.COMPLETE);\r\n    List<ContainerId> containerIds = new ArrayList<>();\r\n    containerIds.add(cId);\r\n    GetContainerStatusesRequest gcsRequest = GetContainerStatusesRequest.newInstance(containerIds);\r\n    ContainerStatus containerStatus = containerManager.getContainerStatuses(gcsRequest).getContainerStatuses().get(0);\r\n    Assert.assertEquals(exitCode, containerStatus.getExitStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testContainerLaunchAndExitSuccess",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testContainerLaunchAndExitSuccess() throws IOException, InterruptedException, YarnException\n{\r\n    containerManager.start();\r\n    int exitCode = 0;\r\n    testContainerLaunchAndExit(exitCode);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testContainerLaunchAndExitFailure",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testContainerLaunchAndExitFailure() throws IOException, InterruptedException, YarnException\n{\r\n    containerManager.start();\r\n    int exitCode = 50;\r\n    testContainerLaunchAndExit(exitCode);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "setupLocalResources",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "Map<String, LocalResource> setupLocalResources(String fileName, String symLink) throws Exception\n{\r\n    File dir = new File(tmpDir, \"dir\");\r\n    dir.mkdirs();\r\n    File file = new File(dir, fileName);\r\n    PrintWriter fileWriter = new PrintWriter(file);\r\n    fileWriter.write(\"Hello World!\");\r\n    fileWriter.close();\r\n    URL resourceURL = URL.fromPath(FileContext.getLocalFSFileContext().makeQualified(new Path(file.getAbsolutePath())));\r\n    LocalResource resource = recordFactory.newRecordInstance(LocalResource.class);\r\n    resource.setResource(resourceURL);\r\n    resource.setSize(-1);\r\n    resource.setVisibility(LocalResourceVisibility.APPLICATION);\r\n    resource.setType(LocalResourceType.FILE);\r\n    resource.setTimestamp(file.lastModified());\r\n    Map<String, LocalResource> localResources = new HashMap<String, LocalResource>();\r\n    localResources.put(symLink, resource);\r\n    return localResources;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testLocalizingResourceWhileContainerRunning",
  "errType" : [ "Throwable", "YarnException" ],
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void testLocalizingResourceWhileContainerRunning() throws Exception\n{\r\n    delSrvc = new DeletionService(exec);\r\n    delSrvc.init(conf);\r\n    ((NodeManager.NMContext) context).setContainerExecutor(exec);\r\n    containerManager = createContainerManager(delSrvc);\r\n    containerManager.init(conf);\r\n    containerManager.start();\r\n    Map<String, LocalResource> localResource = setupLocalResources(\"file\", \"symLink1\");\r\n    ContainerLaunchContext context = recordFactory.newRecordInstance(ContainerLaunchContext.class);\r\n    context.setLocalResources(localResource);\r\n    context.setCommands(Arrays.asList(\"sleep 6\"));\r\n    ContainerId cId = createContainerId(0);\r\n    StartContainerRequest scRequest = StartContainerRequest.newInstance(context, createContainerToken(cId, DUMMY_RM_IDENTIFIER, this.context.getNodeId(), user, this.context.getContainerTokenSecretManager()));\r\n    StartContainersRequest allRequests = StartContainersRequest.newInstance(Arrays.asList(scRequest));\r\n    containerManager.startContainers(allRequests);\r\n    BaseContainerManagerTest.waitForContainerState(containerManager, cId, ContainerState.RUNNING);\r\n    BaseContainerManagerTest.waitForApplicationState(containerManager, cId.getApplicationAttemptId().getApplicationId(), ApplicationState.RUNNING);\r\n    checkResourceLocalized(cId, \"symLink1\");\r\n    Map<String, LocalResource> localResource2 = setupLocalResources(\"file2\", \"symLink2\");\r\n    ResourceLocalizationRequest request = ResourceLocalizationRequest.newInstance(cId, localResource2);\r\n    containerManager.localize(request);\r\n    GenericTestUtils.waitFor(new Supplier<Boolean>() {\r\n\r\n        public Boolean get() {\r\n            try {\r\n                checkResourceLocalized(cId, \"symLink2\");\r\n                return true;\r\n            } catch (Throwable e) {\r\n                return false;\r\n            }\r\n        }\r\n    }, 500, 20000);\r\n    BaseContainerManagerTest.waitForContainerState(containerManager, cId, ContainerState.COMPLETE);\r\n    try {\r\n        containerManager.localize(request);\r\n        Assert.fail();\r\n    } catch (YarnException e) {\r\n        Assert.assertTrue(e.getMessage().contains(\"Cannot perform LOCALIZE\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "checkResourceLocalized",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void checkResourceLocalized(ContainerId containerId, String symLink)\n{\r\n    String appId = containerId.getApplicationAttemptId().getApplicationId().toString();\r\n    File userCacheDir = new File(localDir, ContainerLocalizer.USERCACHE);\r\n    File userDir = new File(userCacheDir, user);\r\n    File appCache = new File(userDir, ContainerLocalizer.APPCACHE);\r\n    File appDir = new File(appCache, appId);\r\n    File containerDir = new File(appDir, containerId.toString());\r\n    File targetFile = new File(containerDir, symLink);\r\n    File sysDir = new File(localDir, ResourceLocalizationService.NM_PRIVATE_DIR);\r\n    File appSysDir = new File(sysDir, appId);\r\n    File containerSysDir = new File(appSysDir, containerId.toString());\r\n    Assert.assertTrue(\"AppDir \" + appDir.getAbsolutePath() + \" doesn't exist!!\", appDir.exists());\r\n    Assert.assertTrue(\"AppSysDir \" + appSysDir.getAbsolutePath() + \" doesn't exist!!\", appSysDir.exists());\r\n    Assert.assertTrue(\"containerDir \" + containerDir.getAbsolutePath() + \" doesn't exist !\", containerDir.exists());\r\n    Assert.assertTrue(\"containerSysDir \" + containerSysDir.getAbsolutePath() + \" doesn't exist !\", containerDir.exists());\r\n    Assert.assertTrue(\"targetFile \" + targetFile.getAbsolutePath() + \" doesn't exist !!\", targetFile.exists());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testLocalFilesCleanup",
  "errType" : null,
  "containingMethodsNum" : 39,
  "sourceCodeText" : "void testLocalFilesCleanup() throws InterruptedException, IOException, YarnException\n{\r\n    delSrvc = new DeletionService(exec);\r\n    delSrvc.init(conf);\r\n    containerManager = createContainerManager(delSrvc);\r\n    containerManager.init(conf);\r\n    containerManager.start();\r\n    File dir = new File(tmpDir, \"dir\");\r\n    dir.mkdirs();\r\n    File file = new File(dir, \"file\");\r\n    PrintWriter fileWriter = new PrintWriter(file);\r\n    fileWriter.write(\"Hello World!\");\r\n    fileWriter.close();\r\n    ContainerId cId = createContainerId(0);\r\n    ApplicationId appId = cId.getApplicationAttemptId().getApplicationId();\r\n    ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class);\r\n    URL resource_alpha = URL.fromPath(FileContext.getLocalFSFileContext().makeQualified(new Path(file.getAbsolutePath())));\r\n    LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class);\r\n    rsrc_alpha.setResource(resource_alpha);\r\n    rsrc_alpha.setSize(-1);\r\n    rsrc_alpha.setVisibility(LocalResourceVisibility.APPLICATION);\r\n    rsrc_alpha.setType(LocalResourceType.FILE);\r\n    rsrc_alpha.setTimestamp(file.lastModified());\r\n    String destinationFile = \"dest_file\";\r\n    Map<String, LocalResource> localResources = new HashMap<String, LocalResource>();\r\n    localResources.put(destinationFile, rsrc_alpha);\r\n    containerLaunchContext.setLocalResources(localResources);\r\n    StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, createContainerToken(cId, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager()));\r\n    List<StartContainerRequest> list = new ArrayList<>();\r\n    list.add(scRequest);\r\n    StartContainersRequest allRequests = StartContainersRequest.newInstance(list);\r\n    containerManager.startContainers(allRequests);\r\n    BaseContainerManagerTest.waitForContainerState(containerManager, cId, ContainerState.COMPLETE);\r\n    BaseContainerManagerTest.waitForApplicationState(containerManager, cId.getApplicationAttemptId().getApplicationId(), ApplicationState.RUNNING);\r\n    String appIDStr = appId.toString();\r\n    String containerIDStr = cId.toString();\r\n    File userCacheDir = new File(localDir, ContainerLocalizer.USERCACHE);\r\n    File userDir = new File(userCacheDir, user);\r\n    File appCache = new File(userDir, ContainerLocalizer.APPCACHE);\r\n    File appDir = new File(appCache, appIDStr);\r\n    File containerDir = new File(appDir, containerIDStr);\r\n    File targetFile = new File(containerDir, destinationFile);\r\n    File sysDir = new File(localDir, ResourceLocalizationService.NM_PRIVATE_DIR);\r\n    File appSysDir = new File(sysDir, appIDStr);\r\n    File containerSysDir = new File(appSysDir, containerIDStr);\r\n    Assert.assertTrue(\"AppDir \" + appDir.getAbsolutePath() + \" doesn't exist!!\", appDir.exists());\r\n    Assert.assertTrue(\"AppSysDir \" + appSysDir.getAbsolutePath() + \" doesn't exist!!\", appSysDir.exists());\r\n    for (File f : new File[] { containerDir, containerSysDir }) {\r\n        Assert.assertFalse(f.getAbsolutePath() + \" exists!!\", f.exists());\r\n    }\r\n    Assert.assertFalse(targetFile.getAbsolutePath() + \" exists!!\", targetFile.exists());\r\n    containerManager.handle(new CMgrCompletedAppsEvent(Arrays.asList(new ApplicationId[] { appId }), CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN));\r\n    BaseContainerManagerTest.waitForApplicationState(containerManager, cId.getApplicationAttemptId().getApplicationId(), ApplicationState.FINISHED);\r\n    for (File f : new File[] { appDir, containerDir, appSysDir, containerSysDir }) {\r\n        int timeout = 0;\r\n        while (f.exists() && timeout++ < 15) {\r\n            Thread.sleep(1000);\r\n        }\r\n        Assert.assertFalse(f.getAbsolutePath() + \" exists!!\", f.exists());\r\n    }\r\n    int timeout = 0;\r\n    while (targetFile.exists() && timeout++ < 15) {\r\n        Thread.sleep(1000);\r\n    }\r\n    Assert.assertFalse(targetFile.getAbsolutePath() + \" exists!!\", targetFile.exists());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testContainerLaunchFromPreviousRM",
  "errType" : [ "Throwable", "YarnException" ],
  "containingMethodsNum" : 22,
  "sourceCodeText" : "void testContainerLaunchFromPreviousRM() throws IOException, InterruptedException, YarnException\n{\r\n    containerManager.start();\r\n    ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class);\r\n    ContainerId cId1 = createContainerId(0);\r\n    ContainerId cId2 = createContainerId(0);\r\n    containerLaunchContext.setLocalResources(new HashMap<String, LocalResource>());\r\n    StartContainerRequest startRequest1 = StartContainerRequest.newInstance(containerLaunchContext, createContainerToken(cId1, ResourceManagerConstants.RM_INVALID_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager()));\r\n    List<StartContainerRequest> list = new ArrayList<>();\r\n    list.add(startRequest1);\r\n    StartContainersRequest allRequests = StartContainersRequest.newInstance(list);\r\n    containerManager.startContainers(allRequests);\r\n    boolean catchException = false;\r\n    try {\r\n        StartContainersResponse response = containerManager.startContainers(allRequests);\r\n        if (response.getFailedRequests().containsKey(cId1)) {\r\n            throw response.getFailedRequests().get(cId1).deSerialize();\r\n        }\r\n    } catch (Throwable e) {\r\n        e.printStackTrace();\r\n        catchException = true;\r\n        Assert.assertTrue(e.getMessage().contains(\"Container \" + cId1 + \" rejected as it is allocated by a previous RM\"));\r\n        Assert.assertTrue(e.getClass().getName().equalsIgnoreCase(InvalidContainerException.class.getName()));\r\n    }\r\n    Assert.assertTrue(catchException);\r\n    StartContainerRequest startRequest2 = StartContainerRequest.newInstance(containerLaunchContext, createContainerToken(cId2, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager()));\r\n    List<StartContainerRequest> list2 = new ArrayList<>();\r\n    list.add(startRequest2);\r\n    StartContainersRequest allRequests2 = StartContainersRequest.newInstance(list2);\r\n    containerManager.startContainers(allRequests2);\r\n    boolean noException = true;\r\n    try {\r\n        containerManager.startContainers(allRequests2);\r\n    } catch (YarnException e) {\r\n        noException = false;\r\n    }\r\n    Assert.assertTrue(noException);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testMultipleContainersLaunch",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testMultipleContainersLaunch() throws Exception\n{\r\n    containerManager.start();\r\n    List<StartContainerRequest> list = new ArrayList<>();\r\n    for (int i = 0; i < 10; i++) {\r\n        ContainerId cId = createContainerId(i);\r\n        long identifier = 0;\r\n        if ((i & 1) == 0)\r\n            identifier = ResourceManagerConstants.RM_INVALID_IDENTIFIER;\r\n        else\r\n            identifier = DUMMY_RM_IDENTIFIER;\r\n        Token containerToken = createContainerToken(cId, identifier, context.getNodeId(), user, context.getContainerTokenSecretManager());\r\n        StartContainerRequest request = StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), containerToken);\r\n        list.add(request);\r\n    }\r\n    StartContainersRequest requestList = StartContainersRequest.newInstance(list);\r\n    StartContainersResponse response = containerManager.startContainers(requestList);\r\n    Thread.sleep(5000);\r\n    Assert.assertEquals(5, response.getSuccessfullyStartedContainers().size());\r\n    for (ContainerId id : response.getSuccessfullyStartedContainers()) {\r\n        Assert.assertEquals(1, id.getContainerId() & 1);\r\n    }\r\n    Assert.assertEquals(5, response.getFailedRequests().size());\r\n    for (Map.Entry<ContainerId, SerializedException> entry : response.getFailedRequests().entrySet()) {\r\n        Assert.assertEquals(0, entry.getKey().getContainerId() & 1);\r\n        Assert.assertTrue(entry.getValue().getMessage().contains(\"Container \" + entry.getKey() + \" rejected as it is allocated by a previous RM\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testMultipleContainersStopAndGetStatus",
  "errType" : null,
  "containingMethodsNum" : 28,
  "sourceCodeText" : "void testMultipleContainersStopAndGetStatus() throws Exception\n{\r\n    containerManager.start();\r\n    List<StartContainerRequest> startRequest = new ArrayList<>();\r\n    List<ContainerId> containerIds = new ArrayList<>();\r\n    for (int i = 0; i < 10; i++) {\r\n        ContainerId cId;\r\n        if ((i & 1) == 0) {\r\n            cId = createContainerId(i, 1);\r\n        } else {\r\n            cId = createContainerId(i, 0);\r\n        }\r\n        Token containerToken = createContainerToken(cId, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager());\r\n        StartContainerRequest request = StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), containerToken);\r\n        startRequest.add(request);\r\n        containerIds.add(cId);\r\n    }\r\n    StartContainersRequest requestList = StartContainersRequest.newInstance(startRequest);\r\n    containerManager.startContainers(requestList);\r\n    Thread.sleep(5000);\r\n    GetContainerStatusesRequest statusRequest = GetContainerStatusesRequest.newInstance(containerIds);\r\n    GetContainerStatusesResponse statusResponse = containerManager.getContainerStatuses(statusRequest);\r\n    Assert.assertEquals(5, statusResponse.getContainerStatuses().size());\r\n    for (ContainerStatus status : statusResponse.getContainerStatuses()) {\r\n        Assert.assertEquals(1, status.getContainerId().getContainerId() & 1);\r\n    }\r\n    Assert.assertEquals(5, statusResponse.getFailedRequests().size());\r\n    for (Map.Entry<ContainerId, SerializedException> entry : statusResponse.getFailedRequests().entrySet()) {\r\n        Assert.assertEquals(0, entry.getKey().getContainerId() & 1);\r\n        Assert.assertTrue(entry.getValue().getMessage().contains(\"attempted to get status for non-application container\"));\r\n    }\r\n    StopContainersRequest stopRequest = StopContainersRequest.newInstance(containerIds);\r\n    StopContainersResponse stopResponse = containerManager.stopContainers(stopRequest);\r\n    Assert.assertEquals(5, stopResponse.getSuccessfullyStoppedContainers().size());\r\n    for (ContainerId id : stopResponse.getSuccessfullyStoppedContainers()) {\r\n        Assert.assertEquals(1, id.getContainerId() & 1);\r\n    }\r\n    Assert.assertEquals(5, stopResponse.getFailedRequests().size());\r\n    for (Map.Entry<ContainerId, SerializedException> entry : stopResponse.getFailedRequests().entrySet()) {\r\n        Assert.assertEquals(0, entry.getKey().getContainerId() & 1);\r\n        Assert.assertTrue(entry.getValue().getMessage().contains(\"attempted to stop non-application container\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testUnauthorizedRequests",
  "errType" : null,
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void testUnauthorizedRequests() throws IOException, YarnException\n{\r\n    containerManager.start();\r\n    ContainerId cId = createContainerId(0, 1);\r\n    ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class);\r\n    StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, createContainerToken(cId, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager()));\r\n    List<StartContainerRequest> list = new ArrayList<>();\r\n    list.add(scRequest);\r\n    StartContainersRequest allRequests = StartContainersRequest.newInstance(list);\r\n    StartContainersResponse startResponse = containerManager.startContainers(allRequests);\r\n    Assert.assertFalse(\"Should not be authorized to start container\", startResponse.getSuccessfullyStartedContainers().contains(cId));\r\n    Assert.assertTrue(\"Start container request should fail\", startResponse.getFailedRequests().containsKey(cId));\r\n    ContainerTokenIdentifier containerTokenIdentifier = BuilderUtils.newContainerTokenIdentifier(scRequest.getContainerToken());\r\n    Container container = new ContainerImpl(conf, null, containerLaunchContext, null, metrics, containerTokenIdentifier, context);\r\n    context.getContainers().put(cId, container);\r\n    List<ContainerId> containerIds = new ArrayList<>();\r\n    containerIds.add(cId);\r\n    StopContainersRequest stopRequest = StopContainersRequest.newInstance(containerIds);\r\n    StopContainersResponse stopResponse = containerManager.stopContainers(stopRequest);\r\n    Assert.assertFalse(\"Should not be authorized to stop container\", stopResponse.getSuccessfullyStoppedContainers().contains(cId));\r\n    Assert.assertTrue(\"Stop container request should fail\", stopResponse.getFailedRequests().containsKey(cId));\r\n    containerIds = new ArrayList<>();\r\n    containerIds.add(cId);\r\n    GetContainerStatusesRequest request = GetContainerStatusesRequest.newInstance(containerIds);\r\n    GetContainerStatusesResponse response = containerManager.getContainerStatuses(request);\r\n    Assert.assertEquals(\"Should not be authorized to get container status\", response.getContainerStatuses().size(), 0);\r\n    Assert.assertTrue(\"Get status request should fail\", response.getFailedRequests().containsKey(cId));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testStartContainerFailureWithUnknownAuxService",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testStartContainerFailureWithUnknownAuxService() throws Exception\n{\r\n    conf.setStrings(YarnConfiguration.NM_AUX_SERVICES, new String[] { \"existService\" });\r\n    conf.setClass(String.format(YarnConfiguration.NM_AUX_SERVICE_FMT, \"existService\"), ServiceA.class, Service.class);\r\n    containerManager.start();\r\n    List<StartContainerRequest> startRequest = new ArrayList<>();\r\n    ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class);\r\n    Map<String, ByteBuffer> serviceData = new HashMap<String, ByteBuffer>();\r\n    String serviceName = \"non_exist_auxService\";\r\n    serviceData.put(serviceName, ByteBuffer.wrap(serviceName.getBytes()));\r\n    containerLaunchContext.setServiceData(serviceData);\r\n    ContainerId cId = createContainerId(0);\r\n    String user = \"start_container_fail\";\r\n    Token containerToken = createContainerToken(cId, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager());\r\n    StartContainerRequest request = StartContainerRequest.newInstance(containerLaunchContext, containerToken);\r\n    startRequest.add(request);\r\n    StartContainersRequest requestList = StartContainersRequest.newInstance(startRequest);\r\n    StartContainersResponse response = containerManager.startContainers(requestList);\r\n    Assert.assertEquals(1, response.getFailedRequests().size());\r\n    Assert.assertEquals(0, response.getSuccessfullyStartedContainers().size());\r\n    Assert.assertTrue(response.getFailedRequests().containsKey(cId));\r\n    Assert.assertTrue(response.getFailedRequests().get(cId).getMessage().contains(\"The auxService:\" + serviceName + \" does not exist\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testNullTokens",
  "errType" : [ "YarnException", "YarnException", "YarnException", "YarnException", "YarnException", "YarnException", "YarnException" ],
  "containingMethodsNum" : 29,
  "sourceCodeText" : "void testNullTokens() throws Exception\n{\r\n    ContainerManagerImpl cMgrImpl = new ContainerManagerImpl(context, exec, delSrvc, getNodeStatusUpdater(), metrics, dirsHandler);\r\n    String strExceptionMsg = \"\";\r\n    try {\r\n        cMgrImpl.authorizeStartAndResourceIncreaseRequest(null, new ContainerTokenIdentifier(), true);\r\n    } catch (YarnException ye) {\r\n        strExceptionMsg = ye.getMessage();\r\n    }\r\n    Assert.assertEquals(strExceptionMsg, ContainerManagerImpl.INVALID_NMTOKEN_MSG);\r\n    strExceptionMsg = \"\";\r\n    try {\r\n        cMgrImpl.authorizeStartAndResourceIncreaseRequest(new NMTokenIdentifier(), null, true);\r\n    } catch (YarnException ye) {\r\n        strExceptionMsg = ye.getMessage();\r\n    }\r\n    Assert.assertEquals(strExceptionMsg, ContainerManagerImpl.INVALID_CONTAINERTOKEN_MSG);\r\n    strExceptionMsg = \"\";\r\n    try {\r\n        cMgrImpl.authorizeGetAndStopContainerRequest(null, null, true, null, null);\r\n    } catch (YarnException ye) {\r\n        strExceptionMsg = ye.getMessage();\r\n    }\r\n    Assert.assertEquals(strExceptionMsg, ContainerManagerImpl.INVALID_NMTOKEN_MSG);\r\n    strExceptionMsg = \"\";\r\n    try {\r\n        cMgrImpl.authorizeUser(null, null);\r\n    } catch (YarnException ye) {\r\n        strExceptionMsg = ye.getMessage();\r\n    }\r\n    Assert.assertEquals(strExceptionMsg, ContainerManagerImpl.INVALID_NMTOKEN_MSG);\r\n    ContainerManagerImpl spyContainerMgr = spy(cMgrImpl);\r\n    UserGroupInformation ugInfo = UserGroupInformation.createRemoteUser(\"a\");\r\n    Mockito.when(spyContainerMgr.getRemoteUgi()).thenReturn(ugInfo);\r\n    Mockito.when(spyContainerMgr.selectNMTokenIdentifier(ugInfo)).thenReturn(null);\r\n    strExceptionMsg = \"\";\r\n    try {\r\n        spyContainerMgr.stopContainers(new StopContainersRequestPBImpl());\r\n    } catch (YarnException ye) {\r\n        strExceptionMsg = ye.getMessage();\r\n    }\r\n    Assert.assertEquals(strExceptionMsg, ContainerManagerImpl.INVALID_NMTOKEN_MSG);\r\n    strExceptionMsg = \"\";\r\n    try {\r\n        spyContainerMgr.getContainerStatuses(new GetContainerStatusesRequestPBImpl());\r\n    } catch (YarnException ye) {\r\n        strExceptionMsg = ye.getMessage();\r\n    }\r\n    Assert.assertEquals(strExceptionMsg, ContainerManagerImpl.INVALID_NMTOKEN_MSG);\r\n    Mockito.doNothing().when(spyContainerMgr).authorizeUser(ugInfo, null);\r\n    List<StartContainerRequest> reqList = new ArrayList<>();\r\n    reqList.add(StartContainerRequest.newInstance(null, null));\r\n    StartContainersRequest reqs = new StartContainersRequestPBImpl();\r\n    reqs.setStartContainerRequests(reqList);\r\n    strExceptionMsg = \"\";\r\n    try {\r\n        spyContainerMgr.startContainers(reqs);\r\n    } catch (YarnException ye) {\r\n        strExceptionMsg = ye.getCause().getMessage();\r\n    }\r\n    Assert.assertEquals(strExceptionMsg, ContainerManagerImpl.INVALID_CONTAINERTOKEN_MSG);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 7,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testIncreaseContainerResourceWithInvalidRequests",
  "errType" : null,
  "containingMethodsNum" : 26,
  "sourceCodeText" : "void testIncreaseContainerResourceWithInvalidRequests() throws Exception\n{\r\n    containerManager.start();\r\n    List<StartContainerRequest> list = new ArrayList<>();\r\n    for (int i = 0; i < 4; i++) {\r\n        ContainerId cId = createContainerId(i);\r\n        long identifier = DUMMY_RM_IDENTIFIER;\r\n        Token containerToken = createContainerToken(cId, identifier, context.getNodeId(), user, context.getContainerTokenSecretManager());\r\n        StartContainerRequest request = StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class), containerToken);\r\n        list.add(request);\r\n    }\r\n    StartContainersRequest requestList = StartContainersRequest.newInstance(list);\r\n    StartContainersResponse response = containerManager.startContainers(requestList);\r\n    Assert.assertEquals(4, response.getSuccessfullyStartedContainers().size());\r\n    int i = 0;\r\n    for (ContainerId id : response.getSuccessfullyStartedContainers()) {\r\n        Assert.assertEquals(i, id.getContainerId());\r\n        i++;\r\n    }\r\n    Thread.sleep(2000);\r\n    List<Token> increaseTokens = new ArrayList<>();\r\n    ContainerId cId0 = createContainerId(0);\r\n    Token containerToken = createContainerToken(cId0, 1, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, Resource.newInstance(1234, 3), context.getContainerTokenSecretManager(), null);\r\n    increaseTokens.add(containerToken);\r\n    ContainerId cId7 = createContainerId(7);\r\n    containerToken = createContainerToken(cId7, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, Resource.newInstance(1234, 3), context.getContainerTokenSecretManager(), null);\r\n    increaseTokens.add(containerToken);\r\n    ContainerUpdateRequest updateRequest = ContainerUpdateRequest.newInstance(increaseTokens);\r\n    ContainerUpdateResponse updateResponse = containerManager.updateContainer(updateRequest);\r\n    Assert.assertEquals(1, updateResponse.getSuccessfullyUpdatedContainers().size());\r\n    Assert.assertEquals(1, updateResponse.getFailedRequests().size());\r\n    for (Map.Entry<ContainerId, SerializedException> entry : updateResponse.getFailedRequests().entrySet()) {\r\n        Assert.assertNotNull(\"Failed message\", entry.getValue().getMessage());\r\n        if (cId7.equals(entry.getKey())) {\r\n            Assert.assertTrue(entry.getValue().getMessage().contains(\"Container \" + cId7.toString() + \" is not handled by this NodeManager\"));\r\n        } else {\r\n            throw new YarnException(\"Received failed request from wrong\" + \" container: \" + entry.getKey().toString());\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testChangeContainerResource",
  "errType" : null,
  "containingMethodsNum" : 47,
  "sourceCodeText" : "void testChangeContainerResource() throws Exception\n{\r\n    containerManager.start();\r\n    File scriptFile = Shell.appendScriptExtension(tmpDir, \"scriptFile\");\r\n    PrintWriter fileWriter = new PrintWriter(scriptFile);\r\n    ContainerId cId = createContainerId(0);\r\n    if (Shell.WINDOWS) {\r\n        fileWriter.println(\"@ping -n 100 127.0.0.1 >nul\");\r\n    } else {\r\n        fileWriter.write(\"\\numask 0\");\r\n        fileWriter.write(\"\\nexec sleep 100\");\r\n    }\r\n    fileWriter.close();\r\n    ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class);\r\n    URL resource_alpha = URL.fromPath(localFS.makeQualified(new Path(scriptFile.getAbsolutePath())));\r\n    LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class);\r\n    rsrc_alpha.setResource(resource_alpha);\r\n    rsrc_alpha.setSize(-1);\r\n    rsrc_alpha.setVisibility(LocalResourceVisibility.APPLICATION);\r\n    rsrc_alpha.setType(LocalResourceType.FILE);\r\n    rsrc_alpha.setTimestamp(scriptFile.lastModified());\r\n    String destinationFile = \"dest_file\";\r\n    Map<String, LocalResource> localResources = new HashMap<String, LocalResource>();\r\n    localResources.put(destinationFile, rsrc_alpha);\r\n    containerLaunchContext.setLocalResources(localResources);\r\n    List<String> commands = Arrays.asList(Shell.getRunScriptCommand(scriptFile));\r\n    containerLaunchContext.setCommands(commands);\r\n    StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, createContainerToken(cId, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager()));\r\n    List<StartContainerRequest> list = new ArrayList<>();\r\n    list.add(scRequest);\r\n    StartContainersRequest allRequests = StartContainersRequest.newInstance(list);\r\n    containerManager.startContainers(allRequests);\r\n    BaseContainerManagerTest.waitForNMContainerState(containerManager, cId, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.RUNNING);\r\n    List<Token> increaseTokens = new ArrayList<>();\r\n    Resource targetResource = Resource.newInstance(4096, 2);\r\n    Token containerToken = createContainerToken(cId, 1, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, targetResource, context.getContainerTokenSecretManager(), null);\r\n    increaseTokens.add(containerToken);\r\n    ContainerUpdateRequest updateRequest = ContainerUpdateRequest.newInstance(increaseTokens);\r\n    ContainerUpdateResponse updateResponse = containerManager.updateContainer(updateRequest);\r\n    Assert.assertEquals(1, updateResponse.getSuccessfullyUpdatedContainers().size());\r\n    Assert.assertTrue(updateResponse.getFailedRequests().isEmpty());\r\n    List<ContainerId> containerIds = new ArrayList<>();\r\n    containerIds.add(cId);\r\n    GetContainerStatusesRequest gcsRequest = GetContainerStatusesRequest.newInstance(containerIds);\r\n    ContainerStatus containerStatus = containerManager.getContainerStatuses(gcsRequest).getContainerStatuses().get(0);\r\n    assertEquals(targetResource, containerStatus.getCapability());\r\n    List<Token> decreaseTokens = new ArrayList<>();\r\n    targetResource = Resource.newInstance(2048, 2);\r\n    Token token = createContainerToken(cId, 2, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, targetResource, context.getContainerTokenSecretManager(), null);\r\n    decreaseTokens.add(token);\r\n    updateRequest = ContainerUpdateRequest.newInstance(decreaseTokens);\r\n    updateResponse = containerManager.updateContainer(updateRequest);\r\n    Assert.assertEquals(1, updateResponse.getSuccessfullyUpdatedContainers().size());\r\n    Assert.assertTrue(updateResponse.getFailedRequests().isEmpty());\r\n    containerStatus = containerManager.getContainerStatuses(gcsRequest).getContainerStatuses().get(0);\r\n    int retry = 0;\r\n    while (!targetResource.equals(containerStatus.getCapability()) && (retry++ < 5)) {\r\n        Thread.sleep(200);\r\n        containerStatus = containerManager.getContainerStatuses(gcsRequest).getContainerStatuses().get(0);\r\n    }\r\n    assertEquals(targetResource, containerStatus.getCapability());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testOutputThreadDumpSignal",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testOutputThreadDumpSignal() throws IOException, InterruptedException, YarnException\n{\r\n    testContainerLaunchAndSignal(SignalContainerCommand.OUTPUT_THREAD_DUMP);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testGracefulShutdownSignal",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGracefulShutdownSignal() throws IOException, InterruptedException, YarnException\n{\r\n    testContainerLaunchAndSignal(SignalContainerCommand.GRACEFUL_SHUTDOWN);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testForcefulShutdownSignal",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testForcefulShutdownSignal() throws IOException, InterruptedException, YarnException\n{\r\n    testContainerLaunchAndSignal(SignalContainerCommand.FORCEFUL_SHUTDOWN);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testContainerLaunchAndSignal",
  "errType" : null,
  "containingMethodsNum" : 36,
  "sourceCodeText" : "void testContainerLaunchAndSignal(SignalContainerCommand command) throws IOException, InterruptedException, YarnException\n{\r\n    Signal signal = ContainerLaunch.translateCommandToSignal(command);\r\n    containerManager.start();\r\n    File scriptFile = Shell.appendScriptExtension(tmpDir, \"scriptFile\");\r\n    PrintWriter fileWriter = new PrintWriter(scriptFile);\r\n    File processStartFile = new File(tmpDir, \"start_file.txt\").getAbsoluteFile();\r\n    writeScriptFile(fileWriter, \"Hello world!\", processStartFile, null, false);\r\n    ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class);\r\n    ContainerId cId = createContainerId(0);\r\n    URL resource_alpha = URL.fromPath(localFS.makeQualified(new Path(scriptFile.getAbsolutePath())));\r\n    LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class);\r\n    rsrc_alpha.setResource(resource_alpha);\r\n    rsrc_alpha.setSize(-1);\r\n    rsrc_alpha.setVisibility(LocalResourceVisibility.APPLICATION);\r\n    rsrc_alpha.setType(LocalResourceType.FILE);\r\n    rsrc_alpha.setTimestamp(scriptFile.lastModified());\r\n    String destinationFile = \"dest_file\";\r\n    Map<String, LocalResource> localResources = new HashMap<String, LocalResource>();\r\n    localResources.put(destinationFile, rsrc_alpha);\r\n    containerLaunchContext.setLocalResources(localResources);\r\n    List<String> commands = Arrays.asList(Shell.getRunScriptCommand(scriptFile));\r\n    containerLaunchContext.setCommands(commands);\r\n    StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, createContainerToken(cId, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager()));\r\n    List<StartContainerRequest> list = new ArrayList<>();\r\n    list.add(scRequest);\r\n    StartContainersRequest allRequests = StartContainersRequest.newInstance(list);\r\n    containerManager.startContainers(allRequests);\r\n    int timeoutSecs = 0;\r\n    while (!processStartFile.exists() && timeoutSecs++ < 20) {\r\n        Thread.sleep(1000);\r\n        LOG.info(\"Waiting for process start-file to be created\");\r\n    }\r\n    Assert.assertTrue(\"ProcessStartFile doesn't exist!\", processStartFile.exists());\r\n    SignalContainerRequest signalReq = SignalContainerRequest.newInstance(cId, command);\r\n    List<SignalContainerRequest> reqs = new ArrayList<>();\r\n    reqs.add(signalReq);\r\n    containerManager.handle(new CMgrSignalContainersEvent(reqs));\r\n    final ArgumentCaptor<ContainerSignalContext> signalContextCaptor = ArgumentCaptor.forClass(ContainerSignalContext.class);\r\n    if (signal.equals(Signal.NULL)) {\r\n        verify(exec, never()).signalContainer(signalContextCaptor.capture());\r\n    } else {\r\n        verify(exec, timeout(10000).atLeastOnce()).signalContainer(signalContextCaptor.capture());\r\n        ContainerSignalContext signalContext = signalContextCaptor.getAllValues().get(0);\r\n        Assert.assertEquals(cId, signalContext.getContainer().getContainerId());\r\n        Assert.assertEquals(signal, signalContext.getSignal());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testStartContainerFailureWithInvalidLocalResource",
  "errType" : null,
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void testStartContainerFailureWithInvalidLocalResource() throws Exception\n{\r\n    containerManager.start();\r\n    LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class);\r\n    rsrc_alpha.setResource(null);\r\n    rsrc_alpha.setSize(-1);\r\n    rsrc_alpha.setVisibility(LocalResourceVisibility.APPLICATION);\r\n    rsrc_alpha.setType(LocalResourceType.FILE);\r\n    rsrc_alpha.setTimestamp(System.currentTimeMillis());\r\n    Map<String, LocalResource> localResources = new HashMap<String, LocalResource>();\r\n    localResources.put(\"invalid_resource\", rsrc_alpha);\r\n    ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class);\r\n    ContainerLaunchContext spyContainerLaunchContext = spy(containerLaunchContext);\r\n    Mockito.when(spyContainerLaunchContext.getLocalResources()).thenReturn(localResources);\r\n    ContainerId cId = createContainerId(0);\r\n    String user = \"start_container_fail\";\r\n    Token containerToken = createContainerToken(cId, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager());\r\n    StartContainerRequest request = StartContainerRequest.newInstance(spyContainerLaunchContext, containerToken);\r\n    List<StartContainerRequest> startRequest = new ArrayList<StartContainerRequest>();\r\n    startRequest.add(request);\r\n    StartContainersRequest requestList = StartContainersRequest.newInstance(startRequest);\r\n    StartContainersResponse response = containerManager.startContainers(requestList);\r\n    Assert.assertTrue(response.getFailedRequests().size() == 1);\r\n    Assert.assertTrue(response.getSuccessfullyStartedContainers().size() == 0);\r\n    Assert.assertTrue(response.getFailedRequests().containsKey(cId));\r\n    Assert.assertTrue(response.getFailedRequests().get(cId).getMessage().contains(\"Null resource URL for local resource\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testStartContainerFailureWithNullTypeLocalResource",
  "errType" : null,
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void testStartContainerFailureWithNullTypeLocalResource() throws Exception\n{\r\n    containerManager.start();\r\n    LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class);\r\n    rsrc_alpha.setResource(URL.fromPath(new Path(\"./\")));\r\n    rsrc_alpha.setSize(-1);\r\n    rsrc_alpha.setVisibility(LocalResourceVisibility.APPLICATION);\r\n    rsrc_alpha.setType(null);\r\n    rsrc_alpha.setTimestamp(System.currentTimeMillis());\r\n    Map<String, LocalResource> localResources = new HashMap<String, LocalResource>();\r\n    localResources.put(\"null_type_resource\", rsrc_alpha);\r\n    ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class);\r\n    ContainerLaunchContext spyContainerLaunchContext = spy(containerLaunchContext);\r\n    Mockito.when(spyContainerLaunchContext.getLocalResources()).thenReturn(localResources);\r\n    ContainerId cId = createContainerId(0);\r\n    String user = \"start_container_fail\";\r\n    Token containerToken = createContainerToken(cId, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager());\r\n    StartContainerRequest request = StartContainerRequest.newInstance(spyContainerLaunchContext, containerToken);\r\n    List<StartContainerRequest> startRequest = new ArrayList<StartContainerRequest>();\r\n    startRequest.add(request);\r\n    StartContainersRequest requestList = StartContainersRequest.newInstance(startRequest);\r\n    StartContainersResponse response = containerManager.startContainers(requestList);\r\n    Assert.assertTrue(response.getFailedRequests().size() == 1);\r\n    Assert.assertTrue(response.getSuccessfullyStartedContainers().size() == 0);\r\n    Assert.assertTrue(response.getFailedRequests().containsKey(cId));\r\n    Assert.assertTrue(response.getFailedRequests().get(cId).getMessage().contains(\"Null resource type for local resource\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testStartContainerFailureWithNullVisibilityLocalResource",
  "errType" : null,
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void testStartContainerFailureWithNullVisibilityLocalResource() throws Exception\n{\r\n    containerManager.start();\r\n    LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class);\r\n    rsrc_alpha.setResource(URL.fromPath(new Path(\"./\")));\r\n    rsrc_alpha.setSize(-1);\r\n    rsrc_alpha.setVisibility(null);\r\n    rsrc_alpha.setType(LocalResourceType.FILE);\r\n    rsrc_alpha.setTimestamp(System.currentTimeMillis());\r\n    Map<String, LocalResource> localResources = new HashMap<String, LocalResource>();\r\n    localResources.put(\"null_visibility_resource\", rsrc_alpha);\r\n    ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class);\r\n    ContainerLaunchContext spyContainerLaunchContext = spy(containerLaunchContext);\r\n    Mockito.when(spyContainerLaunchContext.getLocalResources()).thenReturn(localResources);\r\n    ContainerId cId = createContainerId(0);\r\n    String user = \"start_container_fail\";\r\n    Token containerToken = createContainerToken(cId, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager());\r\n    StartContainerRequest request = StartContainerRequest.newInstance(spyContainerLaunchContext, containerToken);\r\n    List<StartContainerRequest> startRequest = new ArrayList<StartContainerRequest>();\r\n    startRequest.add(request);\r\n    StartContainersRequest requestList = StartContainersRequest.newInstance(startRequest);\r\n    StartContainersResponse response = containerManager.startContainers(requestList);\r\n    Assert.assertTrue(response.getFailedRequests().size() == 1);\r\n    Assert.assertTrue(response.getSuccessfullyStartedContainers().size() == 0);\r\n    Assert.assertTrue(response.getFailedRequests().containsKey(cId));\r\n    Assert.assertTrue(response.getFailedRequests().get(cId).getMessage().contains(\"Null resource visibility for local resource\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testGetLocalizationStatuses",
  "errType" : null,
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void testGetLocalizationStatuses() throws Exception\n{\r\n    containerManager.start();\r\n    ContainerId containerId = createContainerId(0, 0);\r\n    Token containerToken = createContainerToken(containerId, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager());\r\n    File scriptFile = Shell.appendScriptExtension(tmpDir, \"scriptFile_new\");\r\n    PrintWriter fileWriter = new PrintWriter(scriptFile);\r\n    File file1 = new File(tmpDir, \"file1.txt\").getAbsoluteFile();\r\n    writeScriptFile(fileWriter, \"Upgrade World!\", file1, containerId, false);\r\n    ContainerLaunchContext containerLaunchContext = prepareContainerLaunchContext(scriptFile, \"dest_file1\", false, 0);\r\n    StartContainerRequest request = StartContainerRequest.newInstance(containerLaunchContext, containerToken);\r\n    List<StartContainerRequest> startRequest = new ArrayList<>();\r\n    startRequest.add(request);\r\n    StartContainersRequest requestList = StartContainersRequest.newInstance(startRequest);\r\n    containerManager.startContainers(requestList);\r\n    Thread.sleep(5000);\r\n    GetLocalizationStatusesRequest statusRequest = GetLocalizationStatusesRequest.newInstance(Lists.newArrayList(containerId));\r\n    GetLocalizationStatusesResponse statusResponse = containerManager.getLocalizationStatuses(statusRequest);\r\n    Assert.assertEquals(1, statusResponse.getLocalizationStatuses().get(containerId).size());\r\n    LocalizationStatus status = statusResponse.getLocalizationStatuses().get(containerId).iterator().next();\r\n    Assert.assertEquals(\"resource key\", \"dest_file1\", status.getResourceKey());\r\n    Assert.assertEquals(\"resource status\", LocalizationState.COMPLETED, status.getLocalizationState());\r\n    Assert.assertEquals(0, statusResponse.getFailedRequests().size());\r\n    StopContainersRequest stopRequest = StopContainersRequest.newInstance(Lists.newArrayList(containerId));\r\n    containerManager.stopContainers(stopRequest);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "testGetLocalizationStatusesMultiContainers",
  "errType" : null,
  "containingMethodsNum" : 23,
  "sourceCodeText" : "void testGetLocalizationStatusesMultiContainers() throws Exception\n{\r\n    containerManager.start();\r\n    ContainerId container1 = createContainerId(0, 0);\r\n    ContainerId container2 = createContainerId(1, 0);\r\n    Token containerToken1 = createContainerToken(container1, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager());\r\n    Token containerToken2 = createContainerToken(container2, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager());\r\n    File scriptFile = Shell.appendScriptExtension(tmpDir, \"scriptFile_new\");\r\n    PrintWriter fileWriter = new PrintWriter(scriptFile);\r\n    File file1 = new File(tmpDir, \"file1.txt\").getAbsoluteFile();\r\n    writeScriptFile(fileWriter, \"Upgrade World!\", file1, container1, false);\r\n    ContainerLaunchContext containerLaunchContext = prepareContainerLaunchContext(scriptFile, \"dest_file1\", false, 0);\r\n    StartContainerRequest request1 = StartContainerRequest.newInstance(containerLaunchContext, containerToken1);\r\n    StartContainerRequest request2 = StartContainerRequest.newInstance(containerLaunchContext, containerToken2);\r\n    List<StartContainerRequest> startRequest = new ArrayList<>();\r\n    startRequest.add(request1);\r\n    startRequest.add(request2);\r\n    StartContainersRequest requestList = StartContainersRequest.newInstance(startRequest);\r\n    containerManager.startContainers(requestList);\r\n    Thread.sleep(5000);\r\n    GetLocalizationStatusesRequest statusRequest = GetLocalizationStatusesRequest.newInstance(Lists.newArrayList(container1, container2));\r\n    GetLocalizationStatusesResponse statusResponse = containerManager.getLocalizationStatuses(statusRequest);\r\n    Assert.assertEquals(2, statusResponse.getLocalizationStatuses().size());\r\n    ContainerId[] containerIds = { container1, container2 };\r\n    Arrays.stream(containerIds).forEach(cntnId -> {\r\n        List<LocalizationStatus> statuses = statusResponse.getLocalizationStatuses().get(container1);\r\n        Assert.assertEquals(1, statuses.size());\r\n        LocalizationStatus status = statuses.get(0);\r\n        Assert.assertEquals(\"resource key\", \"dest_file1\", status.getResourceKey());\r\n        Assert.assertEquals(\"resource status\", LocalizationState.COMPLETED, status.getLocalizationState());\r\n    });\r\n    Assert.assertEquals(0, statusResponse.getFailedRequests().size());\r\n    StopContainersRequest stopRequest = StopContainersRequest.newInstance(Lists.newArrayList(container1, container2));\r\n    containerManager.stopContainers(stopRequest);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "createRecoveredContainerState",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RecoveredContainerState createRecoveredContainerState(RecoveredContainerStatus status)\n{\r\n    RecoveredContainerState mockState = mock(RecoveredContainerState.class);\r\n    when(mockState.getStatus()).thenReturn(status);\r\n    return mockState;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "setupContainerMonitor",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void setupContainerMonitor()\n{\r\n    ContainersMonitor containersMonitor = mock(ContainersMonitor.class);\r\n    when(containersMonitor.getVCoresAllocatedForContainers()).thenReturn(10L);\r\n    when(containersMonitor.getPmemAllocatedForContainers()).thenReturn(10240L);\r\n    when(containersMonitor.getVmemRatio()).thenReturn(1.0f);\r\n    when(containersMonitor.getVmemAllocatedForContainers()).thenReturn(10240L);\r\n    ContainerManager cm = mock(ContainerManager.class);\r\n    when(cm.getContainersMonitor()).thenReturn(containersMonitor);\r\n    when(context.getContainerManager()).thenReturn(cm);\r\n    spy = new ContainerScheduler(context, dispatcher, metrics, 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    MockitoAnnotations.initMocks(this);\r\n    setupContainerMonitor();\r\n    when(container.getContainerId()).thenReturn(containerId);\r\n    when(container.getResource()).thenReturn(CONTAINER_SIZE);\r\n    when(containerId.getApplicationAttemptId()).thenReturn(appAttemptId);\r\n    when(containerId.getApplicationAttemptId().getApplicationId()).thenReturn(appId);\r\n    when(containerId.getContainerId()).thenReturn(123L);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void tearDown()\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "testRecoverContainerQueuedGuaranteed",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testRecoverContainerQueuedGuaranteed() throws IllegalArgumentException, IllegalAccessException\n{\r\n    assertEquals(0, spy.getNumQueuedGuaranteedContainers());\r\n    assertEquals(0, spy.getNumQueuedOpportunisticContainers());\r\n    assertEquals(0, spy.getNumRunningContainers());\r\n    RecoveredContainerState rcs = createRecoveredContainerState(RecoveredContainerStatus.QUEUED);\r\n    when(token.getExecutionType()).thenReturn(ExecutionType.GUARANTEED);\r\n    when(container.getContainerTokenIdentifier()).thenReturn(token);\r\n    spy.recoverActiveContainer(container, rcs);\r\n    assertEquals(1, spy.getNumQueuedGuaranteedContainers());\r\n    assertEquals(0, spy.getNumQueuedOpportunisticContainers());\r\n    assertEquals(0, spy.getNumRunningContainers());\r\n    assertEquals(ZERO, spy.getCurrentUtilization());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "testRecoverContainerQueuedOpportunistic",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testRecoverContainerQueuedOpportunistic() throws IllegalArgumentException, IllegalAccessException\n{\r\n    assertEquals(0, spy.getNumQueuedGuaranteedContainers());\r\n    assertEquals(0, spy.getNumQueuedOpportunisticContainers());\r\n    assertEquals(0, spy.getNumRunningContainers());\r\n    RecoveredContainerState rcs = createRecoveredContainerState(RecoveredContainerStatus.QUEUED);\r\n    when(token.getExecutionType()).thenReturn(ExecutionType.OPPORTUNISTIC);\r\n    when(container.getContainerTokenIdentifier()).thenReturn(token);\r\n    spy.recoverActiveContainer(container, rcs);\r\n    assertEquals(0, spy.getNumQueuedGuaranteedContainers());\r\n    assertEquals(1, spy.getNumQueuedOpportunisticContainers());\r\n    assertEquals(0, spy.getNumRunningContainers());\r\n    assertEquals(ZERO, spy.getCurrentUtilization());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "testRecoverContainerPausedGuaranteed",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testRecoverContainerPausedGuaranteed() throws IllegalArgumentException, IllegalAccessException\n{\r\n    assertEquals(0, spy.getNumQueuedGuaranteedContainers());\r\n    assertEquals(0, spy.getNumQueuedOpportunisticContainers());\r\n    assertEquals(0, spy.getNumRunningContainers());\r\n    RecoveredContainerState rcs = createRecoveredContainerState(RecoveredContainerStatus.PAUSED);\r\n    when(token.getExecutionType()).thenReturn(ExecutionType.GUARANTEED);\r\n    when(container.getContainerTokenIdentifier()).thenReturn(token);\r\n    spy.recoverActiveContainer(container, rcs);\r\n    assertEquals(1, spy.getNumQueuedGuaranteedContainers());\r\n    assertEquals(0, spy.getNumQueuedOpportunisticContainers());\r\n    assertEquals(0, spy.getNumRunningContainers());\r\n    assertEquals(ZERO, spy.getCurrentUtilization());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "testRecoverContainerPausedOpportunistic",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testRecoverContainerPausedOpportunistic() throws IllegalArgumentException, IllegalAccessException\n{\r\n    assertEquals(0, spy.getNumQueuedGuaranteedContainers());\r\n    assertEquals(0, spy.getNumQueuedOpportunisticContainers());\r\n    assertEquals(0, spy.getNumRunningContainers());\r\n    RecoveredContainerState rcs = createRecoveredContainerState(RecoveredContainerStatus.PAUSED);\r\n    when(token.getExecutionType()).thenReturn(ExecutionType.OPPORTUNISTIC);\r\n    when(container.getContainerTokenIdentifier()).thenReturn(token);\r\n    spy.recoverActiveContainer(container, rcs);\r\n    assertEquals(0, spy.getNumQueuedGuaranteedContainers());\r\n    assertEquals(1, spy.getNumQueuedOpportunisticContainers());\r\n    assertEquals(0, spy.getNumRunningContainers());\r\n    assertEquals(ZERO, spy.getCurrentUtilization());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "testRecoverContainerLaunchedGuaranteed",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testRecoverContainerLaunchedGuaranteed() throws IllegalArgumentException, IllegalAccessException\n{\r\n    assertEquals(0, spy.getNumQueuedGuaranteedContainers());\r\n    assertEquals(0, spy.getNumQueuedOpportunisticContainers());\r\n    assertEquals(0, spy.getNumRunningContainers());\r\n    RecoveredContainerState rcs = createRecoveredContainerState(RecoveredContainerStatus.LAUNCHED);\r\n    when(token.getExecutionType()).thenReturn(ExecutionType.GUARANTEED);\r\n    when(container.getContainerTokenIdentifier()).thenReturn(token);\r\n    spy.recoverActiveContainer(container, rcs);\r\n    assertEquals(0, spy.getNumQueuedGuaranteedContainers());\r\n    assertEquals(0, spy.getNumQueuedOpportunisticContainers());\r\n    assertEquals(1, spy.getNumRunningContainers());\r\n    assertEquals(ResourceUtilization.newInstance(1024, 1024, 4.0f), spy.getCurrentUtilization());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "testRecoverContainerLaunchedOpportunistic",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testRecoverContainerLaunchedOpportunistic() throws IllegalArgumentException, IllegalAccessException\n{\r\n    assertEquals(0, spy.getNumQueuedGuaranteedContainers());\r\n    assertEquals(0, spy.getNumQueuedOpportunisticContainers());\r\n    assertEquals(0, spy.getNumRunningContainers());\r\n    RecoveredContainerState rcs = createRecoveredContainerState(RecoveredContainerStatus.LAUNCHED);\r\n    when(token.getExecutionType()).thenReturn(ExecutionType.OPPORTUNISTIC);\r\n    when(container.getContainerTokenIdentifier()).thenReturn(token);\r\n    spy.recoverActiveContainer(container, rcs);\r\n    assertEquals(0, spy.getNumQueuedGuaranteedContainers());\r\n    assertEquals(0, spy.getNumQueuedOpportunisticContainers());\r\n    assertEquals(1, spy.getNumRunningContainers());\r\n    assertEquals(ResourceUtilization.newInstance(1024, 1024, 4.0f), spy.getCurrentUtilization());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "testRecoverContainerRequestedGuaranteed",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testRecoverContainerRequestedGuaranteed() throws IllegalArgumentException, IllegalAccessException\n{\r\n    assertEquals(0, spy.getNumQueuedGuaranteedContainers());\r\n    assertEquals(0, spy.getNumQueuedOpportunisticContainers());\r\n    assertEquals(0, spy.getNumRunningContainers());\r\n    RecoveredContainerState rcs = createRecoveredContainerState(RecoveredContainerStatus.REQUESTED);\r\n    when(token.getExecutionType()).thenReturn(ExecutionType.GUARANTEED);\r\n    when(container.getContainerTokenIdentifier()).thenReturn(token);\r\n    spy.recoverActiveContainer(container, rcs);\r\n    assertEquals(0, spy.getNumQueuedGuaranteedContainers());\r\n    assertEquals(0, spy.getNumQueuedOpportunisticContainers());\r\n    assertEquals(0, spy.getNumRunningContainers());\r\n    assertEquals(ZERO, spy.getCurrentUtilization());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "testRecoverContainerRequestedOpportunistic",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testRecoverContainerRequestedOpportunistic() throws IllegalArgumentException, IllegalAccessException\n{\r\n    assertEquals(0, spy.getNumQueuedGuaranteedContainers());\r\n    assertEquals(0, spy.getNumQueuedOpportunisticContainers());\r\n    assertEquals(0, spy.getNumRunningContainers());\r\n    RecoveredContainerState rcs = createRecoveredContainerState(RecoveredContainerStatus.REQUESTED);\r\n    when(token.getExecutionType()).thenReturn(ExecutionType.OPPORTUNISTIC);\r\n    when(container.getContainerTokenIdentifier()).thenReturn(token);\r\n    spy.recoverActiveContainer(container, rcs);\r\n    assertEquals(0, spy.getNumQueuedGuaranteedContainers());\r\n    assertEquals(0, spy.getNumQueuedOpportunisticContainers());\r\n    assertEquals(0, spy.getNumRunningContainers());\r\n    assertEquals(ZERO, spy.getCurrentUtilization());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "testRecoverContainerCompletedGuaranteed",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testRecoverContainerCompletedGuaranteed() throws IllegalArgumentException, IllegalAccessException\n{\r\n    assertEquals(0, spy.getNumQueuedGuaranteedContainers());\r\n    assertEquals(0, spy.getNumQueuedOpportunisticContainers());\r\n    assertEquals(0, spy.getNumRunningContainers());\r\n    RecoveredContainerState rcs = createRecoveredContainerState(RecoveredContainerStatus.COMPLETED);\r\n    when(token.getExecutionType()).thenReturn(ExecutionType.GUARANTEED);\r\n    when(container.getContainerTokenIdentifier()).thenReturn(token);\r\n    spy.recoverActiveContainer(container, rcs);\r\n    assertEquals(0, spy.getNumQueuedGuaranteedContainers());\r\n    assertEquals(0, spy.getNumQueuedOpportunisticContainers());\r\n    assertEquals(0, spy.getNumRunningContainers());\r\n    assertEquals(ZERO, spy.getCurrentUtilization());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "testRecoverContainerCompletedOpportunistic",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testRecoverContainerCompletedOpportunistic() throws IllegalArgumentException, IllegalAccessException\n{\r\n    assertEquals(0, spy.getNumQueuedGuaranteedContainers());\r\n    assertEquals(0, spy.getNumQueuedOpportunisticContainers());\r\n    assertEquals(0, spy.getNumRunningContainers());\r\n    RecoveredContainerState rcs = createRecoveredContainerState(RecoveredContainerStatus.COMPLETED);\r\n    when(token.getExecutionType()).thenReturn(ExecutionType.OPPORTUNISTIC);\r\n    when(container.getContainerTokenIdentifier()).thenReturn(token);\r\n    spy.recoverActiveContainer(container, rcs);\r\n    assertEquals(0, spy.getNumQueuedGuaranteedContainers());\r\n    assertEquals(0, spy.getNumQueuedOpportunisticContainers());\r\n    assertEquals(0, spy.getNumRunningContainers());\r\n    assertEquals(ZERO, spy.getCurrentUtilization());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "testContainerQueuedNoExecType",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testContainerQueuedNoExecType() throws IllegalArgumentException, IllegalAccessException\n{\r\n    assertEquals(0, spy.getNumQueuedGuaranteedContainers());\r\n    assertEquals(0, spy.getNumQueuedOpportunisticContainers());\r\n    assertEquals(0, spy.getNumRunningContainers());\r\n    RecoveredContainerState rcs = createRecoveredContainerState(RecoveredContainerStatus.QUEUED);\r\n    when(container.getContainerTokenIdentifier()).thenReturn(token);\r\n    spy.recoverActiveContainer(container, rcs);\r\n    assertEquals(0, spy.getNumQueuedGuaranteedContainers());\r\n    assertEquals(0, spy.getNumQueuedOpportunisticContainers());\r\n    assertEquals(0, spy.getNumRunningContainers());\r\n    assertEquals(ZERO, spy.getCurrentUtilization());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "testContainerPausedNoExecType",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testContainerPausedNoExecType() throws IllegalArgumentException, IllegalAccessException\n{\r\n    assertEquals(0, spy.getNumQueuedGuaranteedContainers());\r\n    assertEquals(0, spy.getNumQueuedOpportunisticContainers());\r\n    assertEquals(0, spy.getNumRunningContainers());\r\n    RecoveredContainerState rcs = createRecoveredContainerState(RecoveredContainerStatus.PAUSED);\r\n    when(container.getContainerTokenIdentifier()).thenReturn(token);\r\n    spy.recoverActiveContainer(container, rcs);\r\n    assertEquals(0, spy.getNumQueuedGuaranteedContainers());\r\n    assertEquals(0, spy.getNumQueuedOpportunisticContainers());\r\n    assertEquals(0, spy.getNumRunningContainers());\r\n    assertEquals(ZERO, spy.getCurrentUtilization());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void setup()\n{\r\n    executor = new MockExecutor();\r\n    dispatcher = new AsyncDispatcher();\r\n    context = Mockito.mock(Context.class);\r\n    containerMap = new ConcurrentSkipListMap<>();\r\n    Container container = Mockito.mock(ContainerImpl.class);\r\n    containerMap.put(getContainerId(1), container);\r\n    Mockito.doReturn(containerMap).when(context).getContainers();\r\n    conf = new Configuration();\r\n    conf.set(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR, MockResourceCalculatorPlugin.class.getCanonicalName());\r\n    conf.set(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, MockResourceCalculatorProcessTree.class.getCanonicalName());\r\n    dispatcher.init(conf);\r\n    dispatcher.start();\r\n    containerEventHandler = new MockContainerEventHandler();\r\n    dispatcher.register(ContainerEventType.class, containerEventHandler);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    if (containersMonitor != null) {\r\n        containersMonitor.stop();\r\n    }\r\n    if (dispatcher != null) {\r\n        dispatcher.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "testContainersResourceChangePolling",
  "errType" : null,
  "containingMethodsNum" : 28,
  "sourceCodeText" : "void testContainersResourceChangePolling() throws Exception\n{\r\n    conf.setLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS, 20L);\r\n    conf.setBoolean(YarnConfiguration.NM_MEMORY_RESOURCE_ENFORCED, false);\r\n    containersMonitor = createContainersMonitor(executor, dispatcher, context);\r\n    containersMonitor.init(conf);\r\n    containersMonitor.start();\r\n    containersMonitor.handle(new ContainerStartMonitoringEvent(getContainerId(1), 2100L, 1000L, 1, 0, 0));\r\n    assertNotNull(getProcessTreeInfo(getContainerId(1)));\r\n    assertEquals(1000L, getProcessTreeInfo(getContainerId(1)).getPmemLimit());\r\n    assertEquals(2100L, getProcessTreeInfo(getContainerId(1)).getVmemLimit());\r\n    Thread.sleep(200);\r\n    MockResourceCalculatorProcessTree mockTree = (MockResourceCalculatorProcessTree) getProcessTreeInfo(getContainerId(1)).getProcessTree();\r\n    mockTree.setRssMemorySize(2500L);\r\n    for (int waitMs = 0; waitMs < 5000; waitMs += 50) {\r\n        if (containerEventHandler.isContainerKilled(getContainerId(1))) {\r\n            break;\r\n        }\r\n        Thread.sleep(50);\r\n    }\r\n    assertTrue(containerEventHandler.isContainerKilled(getContainerId(1)));\r\n    containersMonitor.handle(new ContainerStartMonitoringEvent(getContainerId(2), 2202009L, 1048576L, 1, 0, 0));\r\n    assertNotNull(getProcessTreeInfo(getContainerId(2)));\r\n    assertEquals(1048576L, getProcessTreeInfo(getContainerId(2)).getPmemLimit());\r\n    assertEquals(2202009L, getProcessTreeInfo(getContainerId(2)).getVmemLimit());\r\n    containersMonitor.handle(new ChangeMonitoringContainerResourceEvent(getContainerId(2), Resource.newInstance(2, 1)));\r\n    assertEquals(2097152L, getProcessTreeInfo(getContainerId(2)).getPmemLimit());\r\n    assertEquals(4404019L, getProcessTreeInfo(getContainerId(2)).getVmemLimit());\r\n    Thread.sleep(200);\r\n    mockTree = (MockResourceCalculatorProcessTree) getProcessTreeInfo(getContainerId(2)).getProcessTree();\r\n    mockTree.setRssMemorySize(2000000L);\r\n    Thread.sleep(200);\r\n    assertFalse(containerEventHandler.isContainerKilled(getContainerId(2)));\r\n    containersMonitor.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "testContainersResourceChangeIsTriggeredImmediately",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testContainersResourceChangeIsTriggeredImmediately() throws Exception\n{\r\n    conf.setLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS, 20000L);\r\n    containersMonitor = createContainersMonitor(executor, dispatcher, context);\r\n    containersMonitor.init(conf);\r\n    containersMonitor.start();\r\n    Thread.sleep(1000);\r\n    containersMonitor.handle(new ContainerStartMonitoringEvent(getContainerId(3), 2202009L, 1048576L, 1, 0, 0));\r\n    assertNotNull(getProcessTreeInfo(getContainerId(3)));\r\n    containersMonitor.handle(new ChangeMonitoringContainerResourceEvent(getContainerId(3), Resource.newInstance(2, 1)));\r\n    assertEquals(2097152L, getProcessTreeInfo(getContainerId(3)).getPmemLimit());\r\n    assertEquals(4404019L, getProcessTreeInfo(getContainerId(3)).getVmemLimit());\r\n    containersMonitor.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "testContainersCPUResourceForDefaultValue",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testContainersCPUResourceForDefaultValue() throws Exception\n{\r\n    testContainerMonitoringInvalidResources(MockCPUResourceCalculatorProcessTree.class.getCanonicalName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "testContainersMemoryResourceUnavailable",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testContainersMemoryResourceUnavailable() throws Exception\n{\r\n    testContainerMonitoringInvalidResources(MockMemoryResourceCalculatorProcessTree.class.getCanonicalName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "testContainerMonitoringInvalidResources",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testContainerMonitoringInvalidResources(String processTreeClassName) throws Exception\n{\r\n    Configuration newConf = new Configuration(conf);\r\n    newConf.setLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS, 20L);\r\n    containersMonitor = createContainersMonitor(executor, dispatcher, context);\r\n    newConf.set(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, processTreeClassName);\r\n    containersMonitor.init(newConf);\r\n    containersMonitor.start();\r\n    containersMonitor.handle(new ContainerStartMonitoringEvent(getContainerId(1), 2100L, 1000L, 1, 0, 0));\r\n    assertEquals(\"Resource utilization must be default with MonitorThread's first run\", 0, containersMonitor.getContainersUtilization().compareTo(ResourceUtilization.newInstance(0, 0, 0.0f)));\r\n    waitForContainerResourceUtilizationChange(containersMonitor, 100);\r\n    containersMonitor.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "waitForContainerResourceUtilizationChange",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void waitForContainerResourceUtilizationChange(ContainersMonitorImpl containersMonitor, int timeoutMsecs) throws InterruptedException\n{\r\n    int timeWaiting = 0;\r\n    while (0 == containersMonitor.getContainersUtilization().compareTo(ResourceUtilization.newInstance(0, 0, 0.0f))) {\r\n        if (timeWaiting >= timeoutMsecs) {\r\n            break;\r\n        }\r\n        LOG.info(\"Monitor thread is waiting for resource utilization change.\");\r\n        Thread.sleep(WAIT_MS_PER_LOOP);\r\n        timeWaiting += WAIT_MS_PER_LOOP;\r\n    }\r\n    assertTrue(\"Resource utilization is not changed after \" + timeoutMsecs / WAIT_MS_PER_LOOP + \" updates\", 0 != containersMonitor.getContainersUtilization().compareTo(ResourceUtilization.newInstance(0, 0, 0.0f)));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "createContainersMonitor",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainersMonitorImpl createContainersMonitor(ContainerExecutor containerExecutor, AsyncDispatcher dispatcher, Context context)\n{\r\n    return new ContainersMonitorImpl(containerExecutor, dispatcher, context);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerId getContainerId(int id)\n{\r\n    return ContainerId.newContainerId(ApplicationAttemptId.newInstance(ApplicationId.newInstance(123456L, 1), 1), id);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getProcessTreeInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ProcessTreeInfo getProcessTreeInfo(ContainerId id)\n{\r\n    return containersMonitor.trackingContainers.get(id);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "copyCommandLine",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Map<String, List<String>> copyCommandLine(Map<String, List<String>> map)\n{\r\n    Map<String, List<String>> ret = new HashMap<>();\r\n    for (Map.Entry<String, List<String>> entry : map.entrySet()) {\r\n        ret.put(entry.getKey(), new ArrayList<>(entry.getValue()));\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "commandlinesEquals",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "boolean commandlinesEquals(Map<String, List<String>> cli1, Map<String, List<String>> cli2)\n{\r\n    if (!Sets.symmetricDifference(cli1.keySet(), cli2.keySet()).isEmpty()) {\r\n        return false;\r\n    }\r\n    for (String key : cli1.keySet()) {\r\n        List<String> value1 = cli1.get(key);\r\n        List<String> value2 = cli2.get(key);\r\n        if (!value1.equals(value2)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\gpu",
  "methodName" : "testPlugin",
  "errType" : [ "ContainerExecutionException", "ContainerExecutionException", "ContainerExecutionException" ],
  "containingMethodsNum" : 33,
  "sourceCodeText" : "void testPlugin() throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    DockerRunCommand runCommand = new DockerRunCommand(\"container_1\", \"user\", \"fakeimage\");\r\n    Map<String, List<String>> originalCommandline = copyCommandLine(runCommand.getDockerCommandWithArguments());\r\n    MyNvidiaDockerV1CommandPlugin commandPlugin = new MyNvidiaDockerV1CommandPlugin(conf);\r\n    Container nmContainer = mock(Container.class);\r\n    commandPlugin.updateDockerRunCommand(runCommand, nmContainer);\r\n    Assert.assertTrue(commandlinesEquals(originalCommandline, runCommand.getDockerCommandWithArguments()));\r\n    ResourceMappings resourceMappings = new ResourceMappings();\r\n    when(nmContainer.getResourceMappings()).thenReturn(resourceMappings);\r\n    commandPlugin.updateDockerRunCommand(runCommand, nmContainer);\r\n    Assert.assertTrue(commandlinesEquals(originalCommandline, runCommand.getDockerCommandWithArguments()));\r\n    ResourceMappings.AssignedResources assigned = new ResourceMappings.AssignedResources();\r\n    assigned.updateAssignedResources(ImmutableList.of(new GpuDevice(0, 0), new GpuDevice(1, 1)));\r\n    resourceMappings.addAssignedResources(ResourceInformation.GPU_URI, assigned);\r\n    commandPlugin.setRequestsGpu(true);\r\n    boolean caughtException = false;\r\n    try {\r\n        commandPlugin.updateDockerRunCommand(runCommand, nmContainer);\r\n    } catch (ContainerExecutionException e) {\r\n        caughtException = true;\r\n    }\r\n    Assert.assertTrue(caughtException);\r\n    MyHandler handler = new MyHandler();\r\n    HttpServer server = HttpServer.create(new InetSocketAddress(60111), 0);\r\n    server.createContext(\"/test\", handler);\r\n    server.start();\r\n    String hostName = server.getAddress().getHostName();\r\n    int port = server.getAddress().getPort();\r\n    String httpUrl = \"http://\" + hostName + \":\" + port + \"/test\";\r\n    conf.set(YarnConfiguration.NVIDIA_DOCKER_PLUGIN_V1_ENDPOINT, httpUrl);\r\n    commandPlugin = new MyNvidiaDockerV1CommandPlugin(conf);\r\n    handler.response = \"INVALID_RESPONSE\";\r\n    try {\r\n        commandPlugin.updateDockerRunCommand(runCommand, nmContainer);\r\n    } catch (ContainerExecutionException e) {\r\n        caughtException = true;\r\n    }\r\n    Assert.assertTrue(caughtException);\r\n    handler.response = \"INVALID_RESPONSE\";\r\n    try {\r\n        commandPlugin.updateDockerRunCommand(runCommand, nmContainer);\r\n    } catch (ContainerExecutionException e) {\r\n        caughtException = true;\r\n    }\r\n    Assert.assertTrue(caughtException);\r\n    handler.response = \"--device=/dev/nvidiactl --device=/dev/nvidia-uvm \" + \"--device=/dev/nvidia0 --device=/dev/nvidia1 \" + \"--volume-driver=nvidia-docker \" + \"--volume=nvidia_driver_352.68:/usr/local/nvidia:ro\";\r\n    commandPlugin.setRequestsGpu(true);\r\n    commandPlugin.updateDockerRunCommand(runCommand, nmContainer);\r\n    Map<String, List<String>> newCommandLine = runCommand.getDockerCommandWithArguments();\r\n    Assert.assertFalse(commandlinesEquals(originalCommandline, newCommandLine));\r\n    Assert.assertFalse(newCommandLine.containsKey(\"volume-driver\"));\r\n    Assert.assertTrue(newCommandLine.containsKey(\"devices\"));\r\n    Assert.assertTrue(newCommandLine.containsKey(\"mounts\"));\r\n    commandPlugin = new MyNvidiaDockerV1CommandPlugin(conf);\r\n    Assert.assertNull(commandPlugin.getCreateDockerVolumeCommand(nmContainer));\r\n    commandPlugin.setRequestsGpu(true);\r\n    DockerVolumeCommand dockerVolumeCommand = commandPlugin.getCreateDockerVolumeCommand(nmContainer);\r\n    Assert.assertEquals(\"volume docker-command=volume \" + \"driver=nvidia-docker \" + \"sub-command=create \" + \"volume=nvidia_driver_352.68\", dockerVolumeCommand.toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\task",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    deletionService = mock(DeletionService.class);\r\n    deletionTask = new DockerContainerDeletionTask(ID, deletionService, USER, CONTAINER_ID);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\task",
  "methodName" : "testGetUser",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetUser()\n{\r\n    assertEquals(USER, deletionTask.getUser());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\task",
  "methodName" : "testGetContainerId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetContainerId()\n{\r\n    assertEquals(CONTAINER_ID, deletionTask.getContainerId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\deletion\\task",
  "methodName" : "testConvertDeletionTaskToProto",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testConvertDeletionTaskToProto()\n{\r\n    YarnServerNodemanagerRecoveryProtos.DeletionServiceDeleteTaskProto proto = deletionTask.convertDeletionTaskToProto();\r\n    assertEquals(ID, proto.getId());\r\n    assertEquals(USER, proto.getUser());\r\n    assertEquals(CONTAINER_ID, proto.getDockerContainerId());\r\n    assertEquals(DeletionTaskType.DOCKER_CONTAINER.name(), proto.getTaskType());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testRedirection",
  "errType" : null,
  "containingMethodsNum" : 36,
  "sourceCodeText" : "void testRedirection() throws Exception\n{\r\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId containerId = ContainerId.newContainerId(attemptId, 1);\r\n    NMContext mockNMContext = mock(NMContext.class);\r\n    ConcurrentMap<ApplicationId, Application> applications = new ConcurrentHashMap<>();\r\n    when(mockNMContext.getApplications()).thenReturn(applications);\r\n    LocalDirsHandlerService mockLocalDirsHandlerService = mock(LocalDirsHandlerService.class);\r\n    Configuration conf = new Configuration();\r\n    conf.setBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED, true);\r\n    conf.set(YarnConfiguration.YARN_LOG_SERVER_URL, \"http://\" + LOG_SERVER_URI);\r\n    when(mockLocalDirsHandlerService.getConfig()).thenReturn(conf);\r\n    when(mockNMContext.getLocalDirsHandler()).thenReturn(mockLocalDirsHandlerService);\r\n    NodeId nodeId = NodeId.newInstance(\"testNM\", 9999);\r\n    when(mockNMContext.getNodeId()).thenReturn(nodeId);\r\n    Injector mockInjector = mock(Injector.class);\r\n    NMWebAppFilter testFilter = new NMWebAppFilter(mockInjector, mockNMContext);\r\n    HttpServletResponseForTest response = new HttpServletResponseForTest();\r\n    FilterChain chain = new FilterChain() {\r\n\r\n        @Override\r\n        public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse) throws IOException, ServletException {\r\n        }\r\n    };\r\n    String uri = \"testNM:8042/node/containerlogs/\" + containerId.toString() + \"/\" + USER;\r\n    HttpServletRequest request = mock(HttpServletRequest.class);\r\n    when(request.getRequestURI()).thenReturn(uri);\r\n    testFilter.doFilter(request, response, chain);\r\n    assertEquals(HttpServletResponse.SC_TEMPORARY_REDIRECT, response.status);\r\n    String redirect = response.getHeader(\"Location\");\r\n    assertTrue(redirect.contains(LOG_SERVER_URI));\r\n    assertTrue(redirect.contains(nodeId.toString()));\r\n    assertTrue(redirect.contains(containerId.toString()));\r\n    assertTrue(redirect.contains(USER));\r\n    String logType = \"syslog\";\r\n    uri = \"testNM:8042/node/containerlogs/\" + containerId.toString() + \"/\" + USER + \"/\" + logType + \"/?start=10\";\r\n    HttpServletRequest request2 = mock(HttpServletRequest.class);\r\n    when(request2.getRequestURI()).thenReturn(uri);\r\n    when(request2.getQueryString()).thenReturn(\"start=10\");\r\n    testFilter.doFilter(request2, response, chain);\r\n    assertEquals(HttpServletResponse.SC_TEMPORARY_REDIRECT, response.status);\r\n    redirect = response.getHeader(\"Location\");\r\n    assertTrue(redirect.contains(LOG_SERVER_URI));\r\n    assertTrue(redirect.contains(nodeId.toString()));\r\n    assertTrue(redirect.contains(containerId.toString()));\r\n    assertTrue(redirect.contains(USER));\r\n    assertTrue(redirect.contains(logType));\r\n    assertTrue(redirect.contains(\"start=10\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\security",
  "methodName" : "testRecovery",
  "errType" : [ "InvalidToken", "InvalidToken", "InvalidToken" ],
  "containingMethodsNum" : 55,
  "sourceCodeText" : "void testRecovery() throws IOException\n{\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.NM_RECOVERY_ENABLED, true);\r\n    final NodeId nodeId = NodeId.newInstance(\"somehost\", 1234);\r\n    final ApplicationAttemptId attempt1 = ApplicationAttemptId.newInstance(ApplicationId.newInstance(1, 1), 1);\r\n    final ApplicationAttemptId attempt2 = ApplicationAttemptId.newInstance(ApplicationId.newInstance(2, 2), 2);\r\n    NMTokenKeyGeneratorForTest keygen = new NMTokenKeyGeneratorForTest();\r\n    NMMemoryStateStoreService stateStore = new NMMemoryStateStoreService();\r\n    stateStore.init(conf);\r\n    stateStore.start();\r\n    NMTokenSecretManagerInNM secretMgr = new NMTokenSecretManagerInNM(stateStore);\r\n    secretMgr.setNodeId(nodeId);\r\n    MasterKey currentKey = keygen.generateKey();\r\n    secretMgr.setMasterKey(currentKey);\r\n    NMTokenIdentifier attemptToken1 = getNMTokenId(secretMgr.createNMToken(attempt1, nodeId, \"user1\"));\r\n    NMTokenIdentifier attemptToken2 = getNMTokenId(secretMgr.createNMToken(attempt2, nodeId, \"user2\"));\r\n    secretMgr.appAttemptStartContainer(attemptToken1);\r\n    secretMgr.appAttemptStartContainer(attemptToken2);\r\n    assertTrue(secretMgr.isAppAttemptNMTokenKeyPresent(attempt1));\r\n    assertTrue(secretMgr.isAppAttemptNMTokenKeyPresent(attempt2));\r\n    assertNotNull(secretMgr.retrievePassword(attemptToken1));\r\n    assertNotNull(secretMgr.retrievePassword(attemptToken2));\r\n    secretMgr = new NMTokenSecretManagerInNM(stateStore);\r\n    secretMgr.recover();\r\n    secretMgr.setNodeId(nodeId);\r\n    assertEquals(currentKey, secretMgr.getCurrentKey());\r\n    assertTrue(secretMgr.isAppAttemptNMTokenKeyPresent(attempt1));\r\n    assertTrue(secretMgr.isAppAttemptNMTokenKeyPresent(attempt2));\r\n    assertNotNull(secretMgr.retrievePassword(attemptToken1));\r\n    assertNotNull(secretMgr.retrievePassword(attemptToken2));\r\n    currentKey = keygen.generateKey();\r\n    secretMgr.setMasterKey(currentKey);\r\n    secretMgr.appFinished(attempt1.getApplicationId());\r\n    secretMgr = new NMTokenSecretManagerInNM(stateStore);\r\n    secretMgr.recover();\r\n    secretMgr.setNodeId(nodeId);\r\n    assertEquals(currentKey, secretMgr.getCurrentKey());\r\n    assertFalse(secretMgr.isAppAttemptNMTokenKeyPresent(attempt1));\r\n    assertTrue(secretMgr.isAppAttemptNMTokenKeyPresent(attempt2));\r\n    assertNotNull(secretMgr.retrievePassword(attemptToken1));\r\n    assertNotNull(secretMgr.retrievePassword(attemptToken2));\r\n    currentKey = keygen.generateKey();\r\n    secretMgr.setMasterKey(currentKey);\r\n    secretMgr = new NMTokenSecretManagerInNM(stateStore);\r\n    secretMgr.recover();\r\n    secretMgr.setNodeId(nodeId);\r\n    assertEquals(currentKey, secretMgr.getCurrentKey());\r\n    assertFalse(secretMgr.isAppAttemptNMTokenKeyPresent(attempt1));\r\n    assertTrue(secretMgr.isAppAttemptNMTokenKeyPresent(attempt2));\r\n    try {\r\n        secretMgr.retrievePassword(attemptToken1);\r\n        fail(\"attempt token should not still be valid\");\r\n    } catch (InvalidToken e) {\r\n    }\r\n    assertNotNull(secretMgr.retrievePassword(attemptToken2));\r\n    secretMgr.appFinished(attempt2.getApplicationId());\r\n    secretMgr = new NMTokenSecretManagerInNM(stateStore);\r\n    secretMgr.recover();\r\n    secretMgr.setNodeId(nodeId);\r\n    assertEquals(currentKey, secretMgr.getCurrentKey());\r\n    assertFalse(secretMgr.isAppAttemptNMTokenKeyPresent(attempt1));\r\n    assertFalse(secretMgr.isAppAttemptNMTokenKeyPresent(attempt2));\r\n    try {\r\n        secretMgr.retrievePassword(attemptToken1);\r\n        fail(\"attempt token should not still be valid\");\r\n    } catch (InvalidToken e) {\r\n    }\r\n    try {\r\n        secretMgr.retrievePassword(attemptToken2);\r\n        fail(\"attempt token should not still be valid\");\r\n    } catch (InvalidToken e) {\r\n    }\r\n    stateStore.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\security",
  "methodName" : "getNMTokenId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NMTokenIdentifier getNMTokenId(org.apache.hadoop.yarn.api.records.Token token) throws IOException\n{\r\n    Token<NMTokenIdentifier> convertedToken = ConverterUtils.convertFromYarn(token, (Text) null);\r\n    return convertedToken.decodeIdentifier();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nvidia",
  "methodName" : "testGetNvidiaDevices",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testGetNvidiaDevices() throws Exception\n{\r\n    NvidiaGPUPluginForRuntimeV2.NvidiaCommandExecutor mockShell = mock(NvidiaGPUPluginForRuntimeV2.NvidiaCommandExecutor.class);\r\n    String deviceInfoShellOutput = \"0, 00000000:04:00.0\\n\" + \"1, 00000000:82:00.0\";\r\n    String majorMinorNumber0 = \"c3:0\";\r\n    String majorMinorNumber1 = \"c3:1\";\r\n    when(mockShell.getDeviceInfo()).thenReturn(deviceInfoShellOutput);\r\n    when(mockShell.getMajorMinorInfo(\"nvidia0\")).thenReturn(majorMinorNumber0);\r\n    when(mockShell.getMajorMinorInfo(\"nvidia1\")).thenReturn(majorMinorNumber1);\r\n    NvidiaGPUPluginForRuntimeV2 plugin = new NvidiaGPUPluginForRuntimeV2();\r\n    plugin.setShellExecutor(mockShell);\r\n    plugin.setPathOfGpuBinary(\"/fake/nvidia-smi\");\r\n    Set<Device> expectedDevices = new TreeSet<>();\r\n    expectedDevices.add(Device.Builder.newInstance().setId(0).setHealthy(true).setBusID(\"00000000:04:00.0\").setDevPath(\"/dev/nvidia0\").setMajorNumber(195).setMinorNumber(0).build());\r\n    expectedDevices.add(Device.Builder.newInstance().setId(1).setHealthy(true).setBusID(\"00000000:82:00.0\").setDevPath(\"/dev/nvidia1\").setMajorNumber(195).setMinorNumber(1).build());\r\n    Set<Device> devices = plugin.getDevices();\r\n    Assert.assertEquals(expectedDevices, devices);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nvidia",
  "methodName" : "testOnDeviceAllocated",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testOnDeviceAllocated() throws Exception\n{\r\n    NvidiaGPUPluginForRuntimeV2 plugin = new NvidiaGPUPluginForRuntimeV2();\r\n    Set<Device> allocatedDevices = new TreeSet<>();\r\n    DeviceRuntimeSpec spec = plugin.onDevicesAllocated(allocatedDevices, YarnRuntimeType.RUNTIME_DEFAULT);\r\n    Assert.assertNull(spec);\r\n    allocatedDevices.add(Device.Builder.newInstance().setId(0).setHealthy(true).setBusID(\"00000000:04:00.0\").setDevPath(\"/dev/nvidia0\").setMajorNumber(195).setMinorNumber(0).build());\r\n    spec = plugin.onDevicesAllocated(allocatedDevices, YarnRuntimeType.RUNTIME_DOCKER);\r\n    Assert.assertEquals(\"nvidia\", spec.getContainerRuntime());\r\n    Assert.assertEquals(\"0\", spec.getEnvs().get(\"NVIDIA_VISIBLE_DEVICES\"));\r\n    allocatedDevices.add(Device.Builder.newInstance().setId(0).setHealthy(true).setBusID(\"00000000:82:00.0\").setDevPath(\"/dev/nvidia1\").setMajorNumber(195).setMinorNumber(1).build());\r\n    spec = plugin.onDevicesAllocated(allocatedDevices, YarnRuntimeType.RUNTIME_DOCKER);\r\n    Assert.assertEquals(\"nvidia\", spec.getContainerRuntime());\r\n    Assert.assertEquals(\"0,1\", spec.getEnvs().get(\"NVIDIA_VISIBLE_DEVICES\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nvidia",
  "methodName" : "mockEightGPUPlugin",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "NvidiaGPUPluginForRuntimeV2 mockEightGPUPlugin() throws IOException\n{\r\n    String topoInfo = \"\\tGPU0\\tGPU1\\tGPU2\\tGPU3\\tGPU4\\tGPU5\\tGPU6\\tGPU7\\tCPU Affinity\\n\" + \"GPU0\\t X \\tNV1\\tNV1\\tNV2\\tNV2\\tPHB\\tPHB\\tPHB\\t0-63\\n\" + \"GPU1\\tNV1\\t X \\tNV2\\tNV1\\tPHB\\tNV2\\tPHB\\tPHB\\t0-63\\n\" + \"GPU2\\tNV1\\tNV2\\t X \\tNV2\\tPHB\\tPHB\\tNV1\\tPHB\\t0-63\\n\" + \"GPU3\\tNV2\\tNV1\\tNV2\\t X \\tPHB\\tPHB\\tPHB\\tNV1\\t0-63\\n\" + \"GPU4\\tNV2\\tPHB\\tPHB\\tPHB\\t X \\tNV1\\tNV1\\tNV2\\t0-63\\n\" + \"GPU5\\tPHB\\tNV2\\tPHB\\tPHB\\tNV1\\t X \\tNV2\\tNV1\\t0-63\\n\" + \"GPU6\\tPHB\\tPHB\\tNV1\\tPHB\\tNV1\\tNV2\\t X \\tNV2\\t0-63\\n\" + \"GPU7\\tPHB\\tPHB\\tPHB\\tNV1\\tNV2\\tNV1\\tNV2\\t X \\t0-63\\n\" + \"\\n\" + \"Legend:\\n\" + \"\\n\" + \"  X    = Self\\n\" + \"  SYS  = Connection traversing PCIe as well as the SMP interconnect\" + \" between NUMA nodes (e.g., QPI/UPI)\\n\" + \"  NODE = Connection traversing PCIe as well as the interconnect\" + \" between PCIe Host Bridges within a NUMA node\\n\" + \"  PHB  = Connection traversing PCIe as well as a PCIe Host Bridge\" + \" (typically the CPU)\\n\" + \"  PXB  = Connection traversing multiple PCIe switches\" + \" (without traversing the PCIe Host Bridge)\\n\" + \"  PIX  = Connection traversing a single PCIe switch\\n\" + \"  NV#  = Connection traversing a bonded set of # NVLinks\\n\";\r\n    String deviceInfoShellOutput = \"0, 00000000:04:00.0\\n\" + \"1, 00000000:82:00.0\\n\" + \"2, 00000000:83:00.0\\n\" + \"3, 00000000:84:00.0\\n\" + \"4, 00000000:85:00.0\\n\" + \"5, 00000000:86:00.0\\n\" + \"6, 00000000:87:00.0\\n\" + \"7, 00000000:88:00.0\";\r\n    String majorMinorNumber0 = \"c3:0\";\r\n    String majorMinorNumber1 = \"c3:1\";\r\n    String majorMinorNumber2 = \"c3:2\";\r\n    String majorMinorNumber3 = \"c3:3\";\r\n    String majorMinorNumber4 = \"c3:4\";\r\n    String majorMinorNumber5 = \"c3:5\";\r\n    String majorMinorNumber6 = \"c3:6\";\r\n    String majorMinorNumber7 = \"c3:7\";\r\n    NvidiaGPUPluginForRuntimeV2.NvidiaCommandExecutor mockShell = mock(NvidiaGPUPluginForRuntimeV2.NvidiaCommandExecutor.class);\r\n    when(mockShell.getDeviceInfo()).thenReturn(deviceInfoShellOutput);\r\n    when(mockShell.getMajorMinorInfo(\"nvidia0\")).thenReturn(majorMinorNumber0);\r\n    when(mockShell.getMajorMinorInfo(\"nvidia1\")).thenReturn(majorMinorNumber1);\r\n    when(mockShell.getMajorMinorInfo(\"nvidia2\")).thenReturn(majorMinorNumber2);\r\n    when(mockShell.getMajorMinorInfo(\"nvidia3\")).thenReturn(majorMinorNumber3);\r\n    when(mockShell.getMajorMinorInfo(\"nvidia4\")).thenReturn(majorMinorNumber4);\r\n    when(mockShell.getMajorMinorInfo(\"nvidia5\")).thenReturn(majorMinorNumber5);\r\n    when(mockShell.getMajorMinorInfo(\"nvidia6\")).thenReturn(majorMinorNumber6);\r\n    when(mockShell.getMajorMinorInfo(\"nvidia7\")).thenReturn(majorMinorNumber7);\r\n    when(mockShell.getTopologyInfo()).thenReturn(topoInfo);\r\n    when(mockShell.getDeviceInfo()).thenReturn(deviceInfoShellOutput);\r\n    NvidiaGPUPluginForRuntimeV2 plugin = new NvidiaGPUPluginForRuntimeV2();\r\n    plugin.setShellExecutor(mockShell);\r\n    plugin.setPathOfGpuBinary(\"/fake/nvidia-smi\");\r\n    return plugin;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nvidia",
  "methodName" : "mockFourGPUPlugin",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "NvidiaGPUPluginForRuntimeV2 mockFourGPUPlugin() throws IOException\n{\r\n    String topoInfo = \"\\tGPU0\\tGPU1\\tGPU2\\tGPU3\\tCPU Affinity\\n\" + \"GPU0\\t X \\tPHB\\tSOC\\tSOC\\t0-31\\n\" + \"GPU1\\tPHB\\t X \\tSOC\\tSOC\\t0-31\\n\" + \"GPU2\\tSOC\\tSOC\\t X \\tPHB\\t0-31\\n\" + \"GPU3\\tSOC\\tSOC\\tPHB\\t X \\t0-31\\n\" + \"\\n\" + \"\\n\" + \" Legend:\\n\" + \"\\n\" + \" X   = Self\\n\" + \" SOC  = Connection traversing PCIe as well as the SMP link between\\n\" + \" CPU sockets(e.g. QPI)\\n\" + \" PHB  = Connection traversing PCIe as well as a PCIe Host Bridge\\n\" + \" (typically the CPU)\\n\" + \" PXB  = Connection traversing multiple PCIe switches\\n\" + \" (without traversing the PCIe Host Bridge)\\n\" + \" PIX  = Connection traversing a single PCIe switch\\n\" + \" NV#  = Connection traversing a bonded set of # NVLinks\";\r\n    String deviceInfoShellOutput = \"0, 00000000:04:00.0\\n\" + \"1, 00000000:82:00.0\\n\" + \"2, 00000000:83:00.0\\n\" + \"3, 00000000:84:00.0\";\r\n    String majorMinorNumber0 = \"c3:0\";\r\n    String majorMinorNumber1 = \"c3:1\";\r\n    String majorMinorNumber2 = \"c3:2\";\r\n    String majorMinorNumber3 = \"c3:3\";\r\n    NvidiaGPUPluginForRuntimeV2.NvidiaCommandExecutor mockShell = mock(NvidiaGPUPluginForRuntimeV2.NvidiaCommandExecutor.class);\r\n    when(mockShell.getDeviceInfo()).thenReturn(deviceInfoShellOutput);\r\n    when(mockShell.getMajorMinorInfo(\"nvidia0\")).thenReturn(majorMinorNumber0);\r\n    when(mockShell.getMajorMinorInfo(\"nvidia1\")).thenReturn(majorMinorNumber1);\r\n    when(mockShell.getMajorMinorInfo(\"nvidia2\")).thenReturn(majorMinorNumber2);\r\n    when(mockShell.getMajorMinorInfo(\"nvidia3\")).thenReturn(majorMinorNumber3);\r\n    when(mockShell.getTopologyInfo()).thenReturn(topoInfo);\r\n    when(mockShell.getDeviceInfo()).thenReturn(deviceInfoShellOutput);\r\n    NvidiaGPUPluginForRuntimeV2 plugin = new NvidiaGPUPluginForRuntimeV2();\r\n    plugin.setShellExecutor(mockShell);\r\n    plugin.setPathOfGpuBinary(\"/fake/nvidia-smi\");\r\n    return plugin;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nvidia",
  "methodName" : "testTopologySchedulingWithPackPolicy",
  "errType" : null,
  "containingMethodsNum" : 60,
  "sourceCodeText" : "void testTopologySchedulingWithPackPolicy() throws Exception\n{\r\n    NvidiaGPUPluginForRuntimeV2 plugin = mockFourGPUPlugin();\r\n    NvidiaGPUPluginForRuntimeV2 spyPlugin = spy(plugin);\r\n    Set<Device> allDevices = spyPlugin.getDevices();\r\n    Map<String, String> env = new HashMap<>();\r\n    env.put(NvidiaGPUPluginForRuntimeV2.TOPOLOGY_POLICY_ENV_KEY, NvidiaGPUPluginForRuntimeV2.TOPOLOGY_POLICY_PACK);\r\n    Set<Device> copyAvailableDevices = new TreeSet<>(allDevices);\r\n    Iterator<Device> iterator0 = copyAvailableDevices.iterator();\r\n    iterator0.next();\r\n    iterator0.remove();\r\n    iterator0.next();\r\n    iterator0.remove();\r\n    reset(spyPlugin);\r\n    Set<Device> allocation = spyPlugin.allocateDevices(copyAvailableDevices, 1, env);\r\n    assertThat(allocation).hasSize(1);\r\n    verify(spyPlugin).basicSchedule(anySet(), anyInt(), anySet());\r\n    Assert.assertFalse(spyPlugin.isTopoInitialized());\r\n    reset(spyPlugin);\r\n    allocation = spyPlugin.allocateDevices(allDevices, 1, env);\r\n    assertThat(allocation).hasSize(1);\r\n    verify(spyPlugin).basicSchedule(anySet(), anyInt(), anySet());\r\n    reset(spyPlugin);\r\n    allocation = spyPlugin.allocateDevices(allDevices, allDevices.size(), env);\r\n    Assert.assertEquals(allocation.size(), allDevices.size());\r\n    verify(spyPlugin).basicSchedule(anySet(), anyInt(), anySet());\r\n    reset(spyPlugin);\r\n    int count = 2;\r\n    Map<String, Integer> pairToWeight = spyPlugin.getDevicePairToWeight();\r\n    allocation = spyPlugin.allocateDevices(allDevices, count, env);\r\n    assertThat(allocation).hasSize(count);\r\n    verify(spyPlugin).initCostTable();\r\n    Assert.assertTrue(spyPlugin.isTopoInitialized());\r\n    verify(spyPlugin).topologyAwareSchedule(anySet(), anyInt(), anyMap(), anySet(), anyMap());\r\n    assertThat(allocation).hasSize(count);\r\n    Device[] allocatedDevices = allocation.toArray(new Device[count]);\r\n    Assert.assertEquals(NvidiaGPUPluginForRuntimeV2.DeviceLinkType.P2PLinkSameCPUSocket.getWeight(), spyPlugin.computeCostOfDevices(allocatedDevices));\r\n    reset(spyPlugin);\r\n    count = 3;\r\n    allocation = spyPlugin.allocateDevices(allDevices, count, env);\r\n    assertThat(allocation).hasSize(count);\r\n    verify(spyPlugin, times(0)).initCostTable();\r\n    Assert.assertTrue(spyPlugin.isTopoInitialized());\r\n    verify(spyPlugin).topologyAwareSchedule(anySet(), anyInt(), anyMap(), anySet(), anyMap());\r\n    assertThat(allocation).hasSize(count);\r\n    allocatedDevices = allocation.toArray(new Device[count]);\r\n    int expectedWeight = NvidiaGPUPluginForRuntimeV2.DeviceLinkType.P2PLinkSameCPUSocket.getWeight() + 2 * NvidiaGPUPluginForRuntimeV2.DeviceLinkType.P2PLinkCrossCPUSocket.getWeight();\r\n    Assert.assertEquals(expectedWeight, spyPlugin.computeCostOfDevices(allocatedDevices));\r\n    reset(spyPlugin);\r\n    Iterator<Device> iterator = allDevices.iterator();\r\n    iterator.next();\r\n    iterator.remove();\r\n    count = 2;\r\n    allocation = spyPlugin.allocateDevices(allDevices, count, env);\r\n    assertThat(allocation).hasSize(count);\r\n    verify(spyPlugin, times(0)).initCostTable();\r\n    Assert.assertTrue(spyPlugin.isTopoInitialized());\r\n    verify(spyPlugin).topologyAwareSchedule(anySet(), anyInt(), anyMap(), anySet(), anyMap());\r\n    assertThat(allocation).hasSize(count);\r\n    allocatedDevices = allocation.toArray(new Device[count]);\r\n    Assert.assertEquals(NvidiaGPUPluginForRuntimeV2.DeviceLinkType.P2PLinkSameCPUSocket.getWeight(), spyPlugin.computeCostOfDevices(allocatedDevices));\r\n    for (Device device : allocation) {\r\n        if (device.getMinorNumber() == 2) {\r\n            Assert.assertTrue(true);\r\n        } else if (device.getMinorNumber() == 3) {\r\n            Assert.assertTrue(true);\r\n        } else {\r\n            Assert.assertTrue(\"Should allocate GPU 2 and 3\", false);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nvidia",
  "methodName" : "testTopologySchedulingWithSpreadPolicy",
  "errType" : null,
  "containingMethodsNum" : 46,
  "sourceCodeText" : "void testTopologySchedulingWithSpreadPolicy() throws Exception\n{\r\n    NvidiaGPUPluginForRuntimeV2 plugin = mockFourGPUPlugin();\r\n    NvidiaGPUPluginForRuntimeV2 spyPlugin = spy(plugin);\r\n    Set<Device> allDevices = spyPlugin.getDevices();\r\n    Map<String, String> env = new HashMap<>();\r\n    env.put(NvidiaGPUPluginForRuntimeV2.TOPOLOGY_POLICY_ENV_KEY, NvidiaGPUPluginForRuntimeV2.TOPOLOGY_POLICY_SPREAD);\r\n    Set<Device> allocation = spyPlugin.allocateDevices(allDevices, 1, env);\r\n    Assert.assertEquals(allocation.size(), 1);\r\n    verify(spyPlugin).basicSchedule(anySet(), anyInt(), anySet());\r\n    reset(spyPlugin);\r\n    allocation = spyPlugin.allocateDevices(allDevices, allDevices.size(), env);\r\n    Assert.assertEquals(allocation.size(), allDevices.size());\r\n    verify(spyPlugin).basicSchedule(anySet(), anyInt(), anySet());\r\n    reset(spyPlugin);\r\n    int count = 2;\r\n    Map<String, Integer> pairToWeight = spyPlugin.getDevicePairToWeight();\r\n    allocation = spyPlugin.allocateDevices(allDevices, count, env);\r\n    assertThat(allocation).hasSize(count);\r\n    verify(spyPlugin).initCostTable();\r\n    Assert.assertTrue(spyPlugin.isTopoInitialized());\r\n    verify(spyPlugin).topologyAwareSchedule(anySet(), anyInt(), anyMap(), anySet(), anyMap());\r\n    assertThat(allocation).hasSize(count);\r\n    Device[] allocatedDevices = allocation.toArray(new Device[count]);\r\n    Assert.assertEquals(NvidiaGPUPluginForRuntimeV2.DeviceLinkType.P2PLinkCrossCPUSocket.getWeight(), spyPlugin.computeCostOfDevices(allocatedDevices));\r\n    reset(spyPlugin);\r\n    count = 3;\r\n    allocation = spyPlugin.allocateDevices(allDevices, count, env);\r\n    assertThat(allocation).hasSize(count);\r\n    verify(spyPlugin, times(0)).initCostTable();\r\n    Assert.assertTrue(spyPlugin.isTopoInitialized());\r\n    verify(spyPlugin).topologyAwareSchedule(anySet(), anyInt(), anyMap(), anySet(), anyMap());\r\n    assertThat(allocation).hasSize(count);\r\n    allocatedDevices = allocation.toArray(new Device[count]);\r\n    int expectedWeight = NvidiaGPUPluginForRuntimeV2.DeviceLinkType.P2PLinkSameCPUSocket.getWeight() + 2 * NvidiaGPUPluginForRuntimeV2.DeviceLinkType.P2PLinkCrossCPUSocket.getWeight();\r\n    Assert.assertEquals(expectedWeight, spyPlugin.computeCostOfDevices(allocatedDevices));\r\n    reset(spyPlugin);\r\n    Iterator<Device> iterator = allDevices.iterator();\r\n    iterator.next();\r\n    iterator.remove();\r\n    count = 2;\r\n    allocation = spyPlugin.allocateDevices(allDevices, count, env);\r\n    assertThat(allocation).hasSize(count);\r\n    verify(spyPlugin, times(0)).initCostTable();\r\n    Assert.assertTrue(spyPlugin.isTopoInitialized());\r\n    verify(spyPlugin).topologyAwareSchedule(anySet(), anyInt(), anyMap(), anySet(), anyMap());\r\n    assertThat(allocation).hasSize(count);\r\n    allocatedDevices = allocation.toArray(new Device[count]);\r\n    Assert.assertEquals(NvidiaGPUPluginForRuntimeV2.DeviceLinkType.P2PLinkCrossCPUSocket.getWeight(), spyPlugin.computeCostOfDevices(allocatedDevices));\r\n    for (Device device : allocation) {\r\n        if (device.getMinorNumber() == 0) {\r\n            Assert.assertTrue(\"Shouldn't allocate GPU 0\", false);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nvidia",
  "methodName" : "testCostTableWithNVlink",
  "errType" : null,
  "containingMethodsNum" : 29,
  "sourceCodeText" : "void testCostTableWithNVlink() throws Exception\n{\r\n    NvidiaGPUPluginForRuntimeV2 plugin = mockEightGPUPlugin();\r\n    NvidiaGPUPluginForRuntimeV2 spyPlugin = spy(plugin);\r\n    spyPlugin.initCostTable();\r\n    Map<String, Integer> devicePairToWeight = spyPlugin.getDevicePairToWeight();\r\n    Assert.assertEquals(56, devicePairToWeight.size());\r\n    int sameCPUWeight = NvidiaGPUPluginForRuntimeV2.DeviceLinkType.P2PLinkSameCPUSocket.getWeight();\r\n    int nv1Weight = NvidiaGPUPluginForRuntimeV2.DeviceLinkType.P2PLinkNVLink1.getWeight();\r\n    int nv2Weight = NvidiaGPUPluginForRuntimeV2.DeviceLinkType.P2PLinkNVLink2.getWeight();\r\n    Assert.assertEquals(nv1Weight, (int) devicePairToWeight.get(\"0-1\"));\r\n    Assert.assertEquals(nv1Weight, (int) devicePairToWeight.get(\"1-0\"));\r\n    Assert.assertEquals(nv2Weight, (int) devicePairToWeight.get(\"0-4\"));\r\n    Assert.assertEquals(nv2Weight, (int) devicePairToWeight.get(\"4-0\"));\r\n    Assert.assertEquals(nv2Weight, (int) devicePairToWeight.get(\"0-3\"));\r\n    Assert.assertEquals(nv2Weight, (int) devicePairToWeight.get(\"3-0\"));\r\n    Assert.assertEquals(sameCPUWeight, (int) devicePairToWeight.get(\"6-3\"));\r\n    Assert.assertEquals(sameCPUWeight, (int) devicePairToWeight.get(\"3-6\"));\r\n    Assert.assertEquals(nv2Weight, (int) devicePairToWeight.get(\"6-7\"));\r\n    Assert.assertEquals(nv2Weight, (int) devicePairToWeight.get(\"7-6\"));\r\n    Assert.assertEquals(nv1Weight, (int) devicePairToWeight.get(\"1-3\"));\r\n    Assert.assertEquals(nv1Weight, (int) devicePairToWeight.get(\"3-1\"));\r\n    Map<Integer, List<Map.Entry<Set<Device>, Integer>>> costTable = spyPlugin.getCostTable();\r\n    Assert.assertNull(costTable.get(1));\r\n    Assert.assertEquals(28, costTable.get(2).size());\r\n    Assert.assertEquals(70, costTable.get(4).size());\r\n    Assert.assertNull(costTable.get(8));\r\n    Set<Device> allDevices = spyPlugin.getDevices();\r\n    Map<String, String> env = new HashMap<>();\r\n    env.put(NvidiaGPUPluginForRuntimeV2.TOPOLOGY_POLICY_ENV_KEY, NvidiaGPUPluginForRuntimeV2.TOPOLOGY_POLICY_PACK);\r\n    spyPlugin.allocateDevices(allDevices, 3, env);\r\n    spyPlugin.allocateDevices(allDevices, 2, env);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nvidia",
  "methodName" : "testCostTable",
  "errType" : null,
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void testCostTable() throws IOException\n{\r\n    NvidiaGPUPluginForRuntimeV2 plugin = mockFourGPUPlugin();\r\n    NvidiaGPUPluginForRuntimeV2 spyPlugin = spy(plugin);\r\n    spyPlugin.initCostTable();\r\n    Map<String, Integer> devicePairToWeight = spyPlugin.getDevicePairToWeight();\r\n    Assert.assertEquals(12, devicePairToWeight.size());\r\n    int sameCPUWeight = NvidiaGPUPluginForRuntimeV2.DeviceLinkType.P2PLinkSameCPUSocket.getWeight();\r\n    int crossCPUWeight = NvidiaGPUPluginForRuntimeV2.DeviceLinkType.P2PLinkCrossCPUSocket.getWeight();\r\n    Assert.assertEquals(sameCPUWeight, (int) devicePairToWeight.get(\"0-1\"));\r\n    Assert.assertEquals(sameCPUWeight, (int) devicePairToWeight.get(\"1-0\"));\r\n    Assert.assertEquals(crossCPUWeight, (int) devicePairToWeight.get(\"0-2\"));\r\n    Assert.assertEquals(crossCPUWeight, (int) devicePairToWeight.get(\"2-0\"));\r\n    Assert.assertEquals(crossCPUWeight, (int) devicePairToWeight.get(\"0-3\"));\r\n    Assert.assertEquals(crossCPUWeight, (int) devicePairToWeight.get(\"3-0\"));\r\n    Assert.assertEquals(crossCPUWeight, (int) devicePairToWeight.get(\"1-2\"));\r\n    Assert.assertEquals(crossCPUWeight, (int) devicePairToWeight.get(\"2-1\"));\r\n    Assert.assertEquals(crossCPUWeight, (int) devicePairToWeight.get(\"1-3\"));\r\n    Assert.assertEquals(crossCPUWeight, (int) devicePairToWeight.get(\"3-1\"));\r\n    Assert.assertEquals(sameCPUWeight, (int) devicePairToWeight.get(\"2-3\"));\r\n    Assert.assertEquals(sameCPUWeight, (int) devicePairToWeight.get(\"3-2\"));\r\n    Map<Integer, List<Map.Entry<Set<Device>, Integer>>> costTable = spyPlugin.getCostTable();\r\n    Assert.assertNull(costTable.get(1));\r\n    Assert.assertEquals(6, costTable.get(2).size());\r\n    Assert.assertEquals(4, costTable.get(3).size());\r\n    Assert.assertNull(costTable.get(4));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nvidia",
  "methodName" : "testTopologySchedulingPerformanceWithPackPolicyWithNVLink",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testTopologySchedulingPerformanceWithPackPolicyWithNVLink() throws Exception\n{\r\n    NvidiaGPUPluginForRuntimeV2 plugin = mockEightGPUPlugin();\r\n    NvidiaGPUPluginForRuntimeV2 spyPlugin = spy(plugin);\r\n    Set<Device> allDevices = spyPlugin.getDevices();\r\n    Map<String, String> env = new HashMap<>();\r\n    env.put(NvidiaGPUPluginForRuntimeV2.TOPOLOGY_POLICY_ENV_KEY, NvidiaGPUPluginForRuntimeV2.TOPOLOGY_POLICY_PACK);\r\n    ActualPerformanceReport report = new ActualPerformanceReport();\r\n    report.readFromFile();\r\n    ArrayList<ActualPerformanceReport.DataRecord> dataSet = report.getDataSet();\r\n    assertThat(dataSet).hasSize(2952);\r\n    String[] allModels = { \"alexnet\", \"resnet50\", \"vgg16\", \"inception3\" };\r\n    int[] batchSizes = { 32, 64, 128 };\r\n    int[] gpuCounts = { 2, 3, 4, 5, 6, 7 };\r\n    float totalBoostAgainstMedian = 0;\r\n    int count = 0;\r\n    float maxBoostAgainstMedian = 0;\r\n    float totalBoostAgainstMin = 0;\r\n    float maxBoostAgainstMin = 0;\r\n    for (String model : allModels) {\r\n        float totalBoostAgainstMinCertainModel = 0;\r\n        float totalBoostAgainstMedianCertainModel = 0;\r\n        float maxBoostAgainstMinCertainModel = 0;\r\n        float maxBoostAgainstMedianCertainModel = 0;\r\n        int countOfEachModel = 0;\r\n        for (int bs : batchSizes) {\r\n            for (int gpuCount : gpuCounts) {\r\n                float bstAgainstMedian = calculatePerformanceBoostAgainstMedian(report, model, bs, gpuCount, plugin, allDevices, env);\r\n                float bstAgainstMinimum = calculatePerformanceBoostAgainstMinimum(report, model, bs, gpuCount, plugin, allDevices, env);\r\n                totalBoostAgainstMedian += bstAgainstMedian;\r\n                totalBoostAgainstMin += bstAgainstMinimum;\r\n                count++;\r\n                if (maxBoostAgainstMedian < bstAgainstMedian) {\r\n                    maxBoostAgainstMedian = bstAgainstMedian;\r\n                }\r\n                if (maxBoostAgainstMin < bstAgainstMinimum) {\r\n                    maxBoostAgainstMin = bstAgainstMinimum;\r\n                }\r\n                totalBoostAgainstMinCertainModel += bstAgainstMinimum;\r\n                totalBoostAgainstMedianCertainModel += bstAgainstMedian;\r\n                if (maxBoostAgainstMinCertainModel < bstAgainstMinimum) {\r\n                    maxBoostAgainstMinCertainModel = bstAgainstMinimum;\r\n                }\r\n                if (maxBoostAgainstMedianCertainModel < bstAgainstMedian) {\r\n                    maxBoostAgainstMedianCertainModel = bstAgainstMedian;\r\n                }\r\n                countOfEachModel++;\r\n            }\r\n        }\r\n        LOG.info(\"Model:{}, The best performance boost against median value is \" + \"{}\", model, maxBoostAgainstMedianCertainModel);\r\n        LOG.info(\"Model:{}, The aggregated average performance boost against \" + \"median value is {}\", model, totalBoostAgainstMedianCertainModel / countOfEachModel);\r\n        LOG.info(\"Model:{}, The best performance boost against min value is {}\", model, maxBoostAgainstMinCertainModel);\r\n        LOG.info(\"Model:{}, The aggregated average performance boost against \" + \"min value is {}\", model, totalBoostAgainstMinCertainModel / countOfEachModel);\r\n    }\r\n    LOG.info(\"For all, the best performance boost against median value is \" + maxBoostAgainstMedian);\r\n    LOG.info(\"For all, the aggregated average performance boost against median \" + \"value is \" + totalBoostAgainstMedian / count);\r\n    LOG.info(\"For all, the best performance boost against min value is \" + maxBoostAgainstMin);\r\n    LOG.info(\"For all, the aggregated average performance boost against min \" + \"value is \" + totalBoostAgainstMin / count);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nvidia",
  "methodName" : "calculatePerformanceBoostAgainstMedian",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "float calculatePerformanceBoostAgainstMedian(ActualPerformanceReport report, String model, int bs, int gpuCount, NvidiaGPUPluginForRuntimeV2 plugin, Set<Device> allDevice, Map<String, String> env)\n{\r\n    Set<Device> allocation = plugin.allocateDevices(allDevice, gpuCount, env);\r\n    String gpuAllocationString = convertAllocationToGpuString(allocation);\r\n    float[] metrics = report.getVariousImagePerSecond(model, bs, gpuCount, gpuAllocationString);\r\n    return metrics[7];\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nvidia",
  "methodName" : "calculatePerformanceBoostAgainstMinimum",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "float calculatePerformanceBoostAgainstMinimum(ActualPerformanceReport report, String model, int bs, int gpuCount, NvidiaGPUPluginForRuntimeV2 plugin, Set<Device> allDevice, Map<String, String> env)\n{\r\n    Set<Device> allocation = plugin.allocateDevices(allDevice, gpuCount, env);\r\n    String gpuAllocationString = convertAllocationToGpuString(allocation);\r\n    float[] metrics = report.getVariousImagePerSecond(model, bs, gpuCount, gpuAllocationString);\r\n    return metrics[5];\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nvidia",
  "methodName" : "convertAllocationToGpuString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String convertAllocationToGpuString(Set<Device> allocation)\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    for (Device device : allocation) {\r\n        sb.append(device.getMinorNumber() + \"_\");\r\n    }\r\n    return sb.toString().substring(0, sb.lastIndexOf(\"_\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getLfs",
  "errType" : [ "UnsupportedFileSystemException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FileContext getLfs()\n{\r\n    try {\r\n        return FileContext.getLocalFSFileContext();\r\n    } catch (UnsupportedFileSystemException e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "removeBase",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void removeBase() throws IOException\n{\r\n    lfs.delete(base, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "buildDirs",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "List<Path> buildDirs(Random r, Path root, int numpaths) throws IOException\n{\r\n    ArrayList<Path> ret = new ArrayList<Path>();\r\n    for (int i = 0; i < numpaths; ++i) {\r\n        Path p = root;\r\n        long name = r.nextLong();\r\n        do {\r\n            p = new Path(p, \"\" + name);\r\n            name = r.nextLong();\r\n        } while (0 == (name % 2));\r\n        ret.add(p);\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createDirs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void createDirs(Path base, List<Path> dirs) throws IOException\n{\r\n    for (Path dir : dirs) {\r\n        lfs.mkdir(new Path(base, dir), null, true);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testAbsDelete",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testAbsDelete() throws Exception\n{\r\n    Random r = new Random();\r\n    long seed = r.nextLong();\r\n    r.setSeed(seed);\r\n    System.out.println(\"SEED: \" + seed);\r\n    List<Path> dirs = buildDirs(r, base, 20);\r\n    createDirs(new Path(\".\"), dirs);\r\n    FakeDefaultContainerExecutor exec = new FakeDefaultContainerExecutor();\r\n    Configuration conf = new Configuration();\r\n    exec.setConf(conf);\r\n    DeletionService del = new DeletionService(exec);\r\n    del.init(conf);\r\n    del.start();\r\n    try {\r\n        for (Path p : dirs) {\r\n            FileDeletionTask deletionTask = new FileDeletionTask(del, (Long.parseLong(p.getName()) % 2) == 0 ? null : \"dingo\", p, null);\r\n            del.delete(deletionTask);\r\n        }\r\n        int msecToWait = 20 * 1000;\r\n        for (Path p : dirs) {\r\n            while (msecToWait > 0 && lfs.util().exists(p)) {\r\n                Thread.sleep(100);\r\n                msecToWait -= 100;\r\n            }\r\n            assertFalse(lfs.util().exists(p));\r\n        }\r\n    } finally {\r\n        del.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testRelativeDelete",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testRelativeDelete() throws Exception\n{\r\n    Random r = new Random();\r\n    long seed = r.nextLong();\r\n    r.setSeed(seed);\r\n    System.out.println(\"SEED: \" + seed);\r\n    List<Path> baseDirs = buildDirs(r, base, 4);\r\n    createDirs(new Path(\".\"), baseDirs);\r\n    List<Path> content = buildDirs(r, new Path(\".\"), 10);\r\n    for (Path b : baseDirs) {\r\n        createDirs(b, content);\r\n    }\r\n    DeletionService del = new DeletionService(new FakeDefaultContainerExecutor());\r\n    try {\r\n        del.init(new Configuration());\r\n        del.start();\r\n        for (Path p : content) {\r\n            assertTrue(lfs.util().exists(new Path(baseDirs.get(0), p)));\r\n            FileDeletionTask deletionTask = new FileDeletionTask(del, (Long.parseLong(p.getName()) % 2) == 0 ? null : \"dingo\", p, baseDirs);\r\n            del.delete(deletionTask);\r\n        }\r\n        int msecToWait = 20 * 1000;\r\n        for (Path p : baseDirs) {\r\n            for (Path q : content) {\r\n                Path fp = new Path(p, q);\r\n                while (msecToWait > 0 && lfs.util().exists(fp)) {\r\n                    Thread.sleep(100);\r\n                    msecToWait -= 100;\r\n                }\r\n                assertFalse(lfs.util().exists(fp));\r\n            }\r\n        }\r\n    } finally {\r\n        del.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testNoDelete",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testNoDelete() throws Exception\n{\r\n    Random r = new Random();\r\n    long seed = r.nextLong();\r\n    r.setSeed(seed);\r\n    System.out.println(\"SEED: \" + seed);\r\n    List<Path> dirs = buildDirs(r, base, 20);\r\n    createDirs(new Path(\".\"), dirs);\r\n    FakeDefaultContainerExecutor exec = new FakeDefaultContainerExecutor();\r\n    Configuration conf = new Configuration();\r\n    conf.setInt(YarnConfiguration.DEBUG_NM_DELETE_DELAY_SEC, -1);\r\n    exec.setConf(conf);\r\n    DeletionService del = new DeletionService(exec);\r\n    try {\r\n        del.init(conf);\r\n        del.start();\r\n        for (Path p : dirs) {\r\n            FileDeletionTask deletionTask = new FileDeletionTask(del, (Long.parseLong(p.getName()) % 2) == 0 ? null : \"dingo\", p, null);\r\n            del.delete(deletionTask);\r\n        }\r\n        int msecToWait = 20 * 1000;\r\n        for (Path p : dirs) {\r\n            while (msecToWait > 0 && lfs.util().exists(p)) {\r\n                Thread.sleep(100);\r\n                msecToWait -= 100;\r\n            }\r\n            assertTrue(lfs.util().exists(p));\r\n        }\r\n    } finally {\r\n        del.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testStopWithDelayedTasks",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testStopWithDelayedTasks() throws Exception\n{\r\n    DeletionService del = new DeletionService(Mockito.mock(ContainerExecutor.class));\r\n    Configuration conf = new YarnConfiguration();\r\n    conf.setInt(YarnConfiguration.DEBUG_NM_DELETE_DELAY_SEC, 60);\r\n    try {\r\n        del.init(conf);\r\n        del.start();\r\n        FileDeletionTask deletionTask = new FileDeletionTask(del, \"dingo\", new Path(\"/does/not/exist\"), null);\r\n        del.delete(deletionTask);\r\n    } finally {\r\n        del.stop();\r\n    }\r\n    assertTrue(del.isTerminated());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testFileDeletionTaskDependency",
  "errType" : null,
  "containingMethodsNum" : 31,
  "sourceCodeText" : "void testFileDeletionTaskDependency() throws Exception\n{\r\n    FakeDefaultContainerExecutor exec = new FakeDefaultContainerExecutor();\r\n    Configuration conf = new Configuration();\r\n    exec.setConf(conf);\r\n    DeletionService del = new DeletionService(exec);\r\n    del.init(conf);\r\n    del.start();\r\n    try {\r\n        Random r = new Random();\r\n        long seed = r.nextLong();\r\n        r.setSeed(seed);\r\n        System.out.println(\"SEED: \" + seed);\r\n        List<Path> dirs = buildDirs(r, base, 2);\r\n        createDirs(new Path(\".\"), dirs);\r\n        List<Path> subDirs = buildDirs(r, dirs.get(0), 2);\r\n        FileDeletionTask dependentDeletionTask = new FileDeletionTask(del, null, dirs.get(0), new ArrayList<Path>());\r\n        List<FileDeletionTask> deletionTasks = new ArrayList<FileDeletionTask>();\r\n        for (Path subDir : subDirs) {\r\n            List<Path> subDirList = new ArrayList<>();\r\n            subDirList.add(subDir);\r\n            FileDeletionTask deletionTask = new FileDeletionTask(del, null, dirs.get(0), subDirList);\r\n            deletionTask.addDeletionTaskDependency(dependentDeletionTask);\r\n            deletionTasks.add(deletionTask);\r\n        }\r\n        for (FileDeletionTask task : deletionTasks) {\r\n            del.delete(task);\r\n        }\r\n        int msecToWait = 20 * 1000;\r\n        while (msecToWait > 0 && (lfs.util().exists(dirs.get(0)))) {\r\n            Thread.sleep(100);\r\n            msecToWait -= 100;\r\n        }\r\n        assertFalse(lfs.util().exists(dirs.get(0)));\r\n        subDirs = buildDirs(r, dirs.get(1), 2);\r\n        subDirs.add(new Path(dirs.get(1), \"absentFile\"));\r\n        dependentDeletionTask = new FileDeletionTask(del, null, dirs.get(1), new ArrayList<Path>());\r\n        deletionTasks = new ArrayList<FileDeletionTask>();\r\n        for (Path subDir : subDirs) {\r\n            List<Path> subDirList = new ArrayList<>();\r\n            subDirList.add(subDir);\r\n            FileDeletionTask deletionTask = new FileDeletionTask(del, null, null, subDirList);\r\n            deletionTask.addDeletionTaskDependency(dependentDeletionTask);\r\n            deletionTasks.add(deletionTask);\r\n        }\r\n        deletionTasks.get(2).setSuccess(false);\r\n        for (FileDeletionTask task : deletionTasks) {\r\n            del.delete(task);\r\n        }\r\n        msecToWait = 20 * 1000;\r\n        while (msecToWait > 0 && (lfs.util().exists(subDirs.get(0)) || lfs.util().exists(subDirs.get(1)))) {\r\n            Thread.sleep(100);\r\n            msecToWait -= 100;\r\n        }\r\n        assertTrue(lfs.util().exists(dirs.get(1)));\r\n    } finally {\r\n        del.stop();\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testRecovery",
  "errType" : null,
  "containingMethodsNum" : 26,
  "sourceCodeText" : "void testRecovery() throws Exception\n{\r\n    Random r = new Random();\r\n    long seed = r.nextLong();\r\n    r.setSeed(seed);\r\n    System.out.println(\"SEED: \" + seed);\r\n    List<Path> baseDirs = buildDirs(r, base, 4);\r\n    createDirs(new Path(\".\"), baseDirs);\r\n    List<Path> content = buildDirs(r, new Path(\".\"), 10);\r\n    for (Path b : baseDirs) {\r\n        createDirs(b, content);\r\n    }\r\n    Configuration conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.NM_RECOVERY_ENABLED, true);\r\n    conf.setInt(YarnConfiguration.DEBUG_NM_DELETE_DELAY_SEC, 1);\r\n    NMMemoryStateStoreService stateStore = new NMMemoryStateStoreService();\r\n    stateStore.init(conf);\r\n    stateStore.start();\r\n    DeletionService del = new DeletionService(new FakeDefaultContainerExecutor(), stateStore);\r\n    try {\r\n        del.init(conf);\r\n        del.start();\r\n        for (Path p : content) {\r\n            assertTrue(lfs.util().exists(new Path(baseDirs.get(0), p)));\r\n            FileDeletionTask deletionTask = new FileDeletionTask(del, (Long.parseLong(p.getName()) % 2) == 0 ? null : \"dingo\", p, baseDirs);\r\n            del.delete(deletionTask);\r\n        }\r\n        del.stop();\r\n        del = new DeletionService(new FakeDefaultContainerExecutor(), stateStore);\r\n        del.init(conf);\r\n        del.start();\r\n        int msecToWait = 10 * 1000;\r\n        for (Path p : baseDirs) {\r\n            System.out.println(\"TEST Basedir: \" + p.getName());\r\n            for (Path q : content) {\r\n                Path fp = new Path(p, q);\r\n                System.out.println(\"TEST Path: \" + fp.toString());\r\n                while (msecToWait > 0 && lfs.util().exists(fp)) {\r\n                    Thread.sleep(100);\r\n                    msecToWait -= 100;\r\n                }\r\n                assertFalse(lfs.util().exists(fp));\r\n            }\r\n        }\r\n    } finally {\r\n        del.close();\r\n        stateStore.close();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void setUp() throws IOException\n{\r\n    super.setUp();\r\n    interceptor = new TestableFederationInterceptor();\r\n    stateStore = new MemoryFederationStateStore();\r\n    stateStore.init(getConf());\r\n    FederationStateStoreFacade.getInstance().reinitialize(stateStore, getConf());\r\n    nmStateStore = new NMMemoryStateStoreService();\r\n    nmStateStore.init(getConf());\r\n    nmStateStore.start();\r\n    registry = new FSRegistryOperationsService();\r\n    registry.init(getConf());\r\n    registry.start();\r\n    testAppId = 1;\r\n    attemptId = getApplicationAttemptId(testAppId);\r\n    nmContext = new NMContext(null, null, null, null, nmStateStore, false, getConf());\r\n    interceptor.init(new AMRMProxyApplicationContextImpl(nmContext, getConf(), attemptId, \"test-user\", null, null, null, registry));\r\n    interceptor.cleanupRegistry();\r\n    lastResponseId = 0;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void tearDown()\n{\r\n    interceptor.cleanupRegistry();\r\n    interceptor.shutdown();\r\n    registry.stop();\r\n    super.tearDown();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "createConfiguration",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "YarnConfiguration createConfiguration()\n{\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.AMRM_PROXY_ENABLED, true);\r\n    conf.setBoolean(YarnConfiguration.FEDERATION_ENABLED, true);\r\n    String mockPassThroughInterceptorClass = PassThroughRequestInterceptor.class.getName();\r\n    conf.set(YarnConfiguration.AMRM_PROXY_INTERCEPTOR_CLASS_PIPELINE, mockPassThroughInterceptorClass + \",\" + mockPassThroughInterceptorClass + \",\" + TestableFederationInterceptor.class.getName());\r\n    conf.set(YarnConfiguration.FEDERATION_POLICY_MANAGER, UniformBroadcastPolicyManager.class.getName());\r\n    conf.set(YarnConfiguration.RM_CLUSTER_ID, HOME_SC_ID);\r\n    conf.setInt(YarnConfiguration.FEDERATION_CACHE_TIME_TO_LIVE_SECS, 0);\r\n    conf.setLong(YarnConfiguration.FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT, 500);\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "registerSubCluster",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void registerSubCluster(SubClusterId subClusterId) throws YarnException\n{\r\n    stateStore.registerSubCluster(SubClusterRegisterRequest.newInstance(SubClusterInfo.newInstance(subClusterId, \"1.2.3.4:1\", \"1.2.3.4:2\", \"1.2.3.4:3\", \"1.2.3.4:4\", SubClusterState.SC_RUNNING, 0, \"capacity\")));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "deRegisterSubCluster",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void deRegisterSubCluster(SubClusterId subClusterId) throws YarnException\n{\r\n    stateStore.deregisterSubCluster(SubClusterDeregisterRequest.newInstance(subClusterId, SubClusterState.SC_UNREGISTERED));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getContainersAndAssert",
  "errType" : null,
  "containingMethodsNum" : 23,
  "sourceCodeText" : "List<Container> getContainersAndAssert(int numberOfResourceRequests, int numberOfAllocationExcepted) throws Exception\n{\r\n    AllocateRequest allocateRequest = Records.newRecord(AllocateRequest.class);\r\n    List<Container> containers = new ArrayList<Container>(numberOfResourceRequests);\r\n    List<ResourceRequest> askList = new ArrayList<ResourceRequest>(numberOfResourceRequests);\r\n    for (int id = 0; id < numberOfResourceRequests; id++) {\r\n        askList.add(createResourceRequest(\"test-node-\" + Integer.toString(id), 6000, 2, id % 5, 1));\r\n    }\r\n    allocateRequest.setAskList(askList);\r\n    allocateRequest.setResponseId(lastResponseId);\r\n    AllocateResponse allocateResponse = interceptor.allocate(allocateRequest);\r\n    Assert.assertNotNull(\"allocate() returned null response\", allocateResponse);\r\n    checkAMRMToken(allocateResponse.getAMRMToken());\r\n    lastResponseId = allocateResponse.getResponseId();\r\n    containers.addAll(allocateResponse.getAllocatedContainers());\r\n    LOG.info(\"Number of allocated containers in the original request: \" + Integer.toString(allocateResponse.getAllocatedContainers().size()));\r\n    int numHeartbeat = 0;\r\n    while (containers.size() < numberOfAllocationExcepted && numHeartbeat++ < 10) {\r\n        allocateRequest = Records.newRecord(AllocateRequest.class);\r\n        allocateRequest.setResponseId(lastResponseId);\r\n        allocateResponse = interceptor.allocate(allocateRequest);\r\n        Assert.assertNotNull(\"allocate() returned null response\", allocateResponse);\r\n        checkAMRMToken(allocateResponse.getAMRMToken());\r\n        lastResponseId = allocateResponse.getResponseId();\r\n        interceptor.drainAllAsyncQueue(false);\r\n        containers.addAll(allocateResponse.getAllocatedContainers());\r\n        LOG.info(\"Number of allocated containers in this request: \" + Integer.toString(allocateResponse.getAllocatedContainers().size()));\r\n        LOG.info(\"Total number of allocated containers: \" + Integer.toString(containers.size()));\r\n        Thread.sleep(10);\r\n    }\r\n    Assert.assertEquals(numberOfAllocationExcepted, containers.size());\r\n    return containers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "releaseContainersAndAssert",
  "errType" : null,
  "containingMethodsNum" : 28,
  "sourceCodeText" : "void releaseContainersAndAssert(List<Container> containers) throws Exception\n{\r\n    Assert.assertTrue(containers.size() > 0);\r\n    AllocateRequest allocateRequest = Records.newRecord(AllocateRequest.class);\r\n    List<ContainerId> relList = new ArrayList<ContainerId>(containers.size());\r\n    for (Container container : containers) {\r\n        relList.add(container.getId());\r\n    }\r\n    allocateRequest.setReleaseList(relList);\r\n    allocateRequest.setResponseId(lastResponseId);\r\n    AllocateResponse allocateResponse = interceptor.allocate(allocateRequest);\r\n    Assert.assertNotNull(allocateResponse);\r\n    checkAMRMToken(allocateResponse.getAMRMToken());\r\n    lastResponseId = allocateResponse.getResponseId();\r\n    List<ContainerId> containersForReleasedContainerIds = new ArrayList<ContainerId>();\r\n    List<ContainerId> newlyFinished = getCompletedContainerIds(allocateResponse.getCompletedContainersStatuses());\r\n    containersForReleasedContainerIds.addAll(newlyFinished);\r\n    LOG.info(\"Number of containers received in the original request: \" + Integer.toString(newlyFinished.size()));\r\n    int numHeartbeat = 0;\r\n    while (containersForReleasedContainerIds.size() < relList.size() && numHeartbeat++ < 10) {\r\n        allocateRequest = Records.newRecord(AllocateRequest.class);\r\n        allocateRequest.setResponseId(lastResponseId);\r\n        allocateResponse = interceptor.allocate(allocateRequest);\r\n        Assert.assertNotNull(allocateResponse);\r\n        checkAMRMToken(allocateResponse.getAMRMToken());\r\n        lastResponseId = allocateResponse.getResponseId();\r\n        interceptor.drainAllAsyncQueue(false);\r\n        newlyFinished = getCompletedContainerIds(allocateResponse.getCompletedContainersStatuses());\r\n        containersForReleasedContainerIds.addAll(newlyFinished);\r\n        LOG.info(\"Number of containers received in this request: \" + Integer.toString(newlyFinished.size()));\r\n        LOG.info(\"Total number of containers received: \" + Integer.toString(containersForReleasedContainerIds.size()));\r\n        Thread.sleep(10);\r\n    }\r\n    Assert.assertEquals(relList.size(), containersForReleasedContainerIds.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "checkAMRMToken",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void checkAMRMToken(Token amrmToken)\n{\r\n    if (amrmToken != null) {\r\n        Assert.assertTrue(amrmToken.getKind().equals(Integer.toString(0)));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "testMultipleSubClusters",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testMultipleSubClusters() throws Exception\n{\r\n    UserGroupInformation ugi = interceptor.getUGIWithToken(interceptor.getAttemptId());\r\n    ugi.doAs(new PrivilegedExceptionAction<Object>() {\r\n\r\n        @Override\r\n        public Object run() throws Exception {\r\n            RegisterApplicationMasterRequest registerReq = Records.newRecord(RegisterApplicationMasterRequest.class);\r\n            registerReq.setHost(Integer.toString(testAppId));\r\n            registerReq.setRpcPort(0);\r\n            registerReq.setTrackingUrl(\"\");\r\n            RegisterApplicationMasterResponse registerResponse = interceptor.registerApplicationMaster(registerReq);\r\n            Assert.assertNotNull(registerResponse);\r\n            lastResponseId = 0;\r\n            Assert.assertEquals(0, interceptor.getUnmanagedAMPoolSize());\r\n            registerSubCluster(SubClusterId.newInstance(\"SC-1\"));\r\n            registerSubCluster(SubClusterId.newInstance(\"SC-2\"));\r\n            int numberOfContainers = 3;\r\n            List<Container> containers = getContainersAndAssert(numberOfContainers, numberOfContainers * 2);\r\n            Assert.assertEquals(2, interceptor.getUnmanagedAMPoolSize());\r\n            deRegisterSubCluster(SubClusterId.newInstance(\"SC-2\"));\r\n            registerSubCluster(SubClusterId.newInstance(\"SC-3\"));\r\n            numberOfContainers = 1;\r\n            containers.addAll(getContainersAndAssert(numberOfContainers, numberOfContainers * 2));\r\n            Assert.assertEquals(3, interceptor.getUnmanagedAMPoolSize());\r\n            deRegisterSubCluster(SubClusterId.newInstance(\"SC-1\"));\r\n            deRegisterSubCluster(SubClusterId.newInstance(\"SC-3\"));\r\n            registerSubCluster(SubClusterId.newInstance(HOME_SC_ID));\r\n            numberOfContainers = 2;\r\n            containers.addAll(getContainersAndAssert(numberOfContainers, numberOfContainers * 1));\r\n            Assert.assertEquals(3, interceptor.getUnmanagedAMPoolSize());\r\n            releaseContainersAndAssert(containers);\r\n            FinishApplicationMasterRequest finishReq = Records.newRecord(FinishApplicationMasterRequest.class);\r\n            finishReq.setDiagnostics(\"\");\r\n            finishReq.setTrackingUrl(\"\");\r\n            finishReq.setFinalApplicationStatus(FinalApplicationStatus.SUCCEEDED);\r\n            FinishApplicationMasterResponse finshResponse = interceptor.finishApplicationMaster(finishReq);\r\n            Assert.assertNotNull(finshResponse);\r\n            Assert.assertEquals(true, finshResponse.getIsUnregistered());\r\n            return null;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "testReregister",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testReregister() throws Exception\n{\r\n    UserGroupInformation ugi = interceptor.getUGIWithToken(interceptor.getAttemptId());\r\n    ugi.doAs(new PrivilegedExceptionAction<Object>() {\r\n\r\n        @Override\r\n        public Object run() throws Exception {\r\n            RegisterApplicationMasterRequest registerReq = Records.newRecord(RegisterApplicationMasterRequest.class);\r\n            registerReq.setHost(Integer.toString(testAppId));\r\n            registerReq.setRpcPort(0);\r\n            registerReq.setTrackingUrl(\"\");\r\n            RegisterApplicationMasterResponse registerResponse = interceptor.registerApplicationMaster(registerReq);\r\n            Assert.assertNotNull(registerResponse);\r\n            lastResponseId = 0;\r\n            Assert.assertEquals(0, interceptor.getUnmanagedAMPoolSize());\r\n            registerSubCluster(SubClusterId.newInstance(\"SC-1\"));\r\n            registerSubCluster(SubClusterId.newInstance(HOME_SC_ID));\r\n            interceptor.setShouldReRegisterNext();\r\n            int numberOfContainers = 3;\r\n            List<Container> containers = getContainersAndAssert(numberOfContainers, numberOfContainers * 2);\r\n            Assert.assertEquals(1, interceptor.getUnmanagedAMPoolSize());\r\n            interceptor.setShouldReRegisterNext();\r\n            releaseContainersAndAssert(containers);\r\n            interceptor.setShouldReRegisterNext();\r\n            FinishApplicationMasterRequest finishReq = Records.newRecord(FinishApplicationMasterRequest.class);\r\n            finishReq.setDiagnostics(\"\");\r\n            finishReq.setTrackingUrl(\"\");\r\n            finishReq.setFinalApplicationStatus(FinalApplicationStatus.SUCCEEDED);\r\n            FinishApplicationMasterResponse finshResponse = interceptor.finishApplicationMaster(finishReq);\r\n            Assert.assertNotNull(finshResponse);\r\n            Assert.assertEquals(true, finshResponse.getIsUnregistered());\r\n            return null;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "testConcurrentRegister",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testConcurrentRegister() throws InterruptedException, ExecutionException\n{\r\n    ExecutorService threadpool = Executors.newCachedThreadPool();\r\n    ExecutorCompletionService<RegisterApplicationMasterResponse> compSvc = new ExecutorCompletionService<>(threadpool);\r\n    Object syncObj = MockResourceManagerFacade.getRegisterSyncObj();\r\n    synchronized (syncObj) {\r\n        LOG.info(\"Starting first register thread\");\r\n        compSvc.submit(new ConcurrentRegisterAMCallable());\r\n        try {\r\n            LOG.info(\"Test main starts waiting for the first thread to block\");\r\n            syncObj.wait();\r\n            LOG.info(\"Test main wait finished\");\r\n        } catch (Exception e) {\r\n            LOG.info(\"Test main wait interrupted\", e);\r\n        }\r\n    }\r\n    LOG.info(\"Starting second register thread\");\r\n    compSvc.submit(new ConcurrentRegisterAMCallable());\r\n    LOG.info(\"Let first blocked register thread move on\");\r\n    synchronized (syncObj) {\r\n        syncObj.notifyAll();\r\n    }\r\n    RegisterApplicationMasterResponse response = compSvc.take().get();\r\n    Assert.assertNotNull(response);\r\n    response = compSvc.take().get();\r\n    Assert.assertNotNull(response);\r\n    threadpool.shutdown();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "testRecoverWithAMRMProxyHA",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testRecoverWithAMRMProxyHA() throws Exception\n{\r\n    testRecover(registry);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "testRecoverWithoutAMRMProxyHA",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testRecoverWithoutAMRMProxyHA() throws Exception\n{\r\n    testRecover(null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "testRecover",
  "errType" : [ "ApplicationMasterNotRegisteredException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testRecover(final RegistryOperations registryObj) throws Exception\n{\r\n    UserGroupInformation ugi = interceptor.getUGIWithToken(interceptor.getAttemptId());\r\n    ugi.doAs(new PrivilegedExceptionAction<Object>() {\r\n\r\n        @Override\r\n        public Object run() throws Exception {\r\n            interceptor = new TestableFederationInterceptor();\r\n            interceptor.init(new AMRMProxyApplicationContextImpl(nmContext, getConf(), attemptId, \"test-user\", null, null, null, registryObj));\r\n            interceptor.cleanupRegistry();\r\n            RegisterApplicationMasterRequest registerReq = Records.newRecord(RegisterApplicationMasterRequest.class);\r\n            registerReq.setHost(Integer.toString(testAppId));\r\n            registerReq.setRpcPort(testAppId);\r\n            registerReq.setTrackingUrl(\"\");\r\n            RegisterApplicationMasterResponse registerResponse = interceptor.registerApplicationMaster(registerReq);\r\n            Assert.assertNotNull(registerResponse);\r\n            lastResponseId = 0;\r\n            Assert.assertEquals(0, interceptor.getUnmanagedAMPoolSize());\r\n            registerSubCluster(SubClusterId.newInstance(\"SC-1\"));\r\n            registerSubCluster(SubClusterId.newInstance(HOME_SC_ID));\r\n            int numberOfContainers = 3;\r\n            List<Container> containers = getContainersAndAssert(numberOfContainers, numberOfContainers * 2);\r\n            Assert.assertEquals(1, interceptor.getUnmanagedAMPoolSize());\r\n            interceptor.drainAllAsyncQueue(true);\r\n            Map<String, byte[]> recoveredDataMap = recoverDataMapForAppAttempt(nmStateStore, attemptId);\r\n            String scEntry = FederationInterceptor.NMSS_SECONDARY_SC_PREFIX + \"SC-1\";\r\n            if (registryObj == null) {\r\n                Assert.assertTrue(recoveredDataMap.containsKey(scEntry));\r\n            } else {\r\n                Assert.assertFalse(recoveredDataMap.containsKey(scEntry));\r\n            }\r\n            MockResourceManagerFacade homeRM = interceptor.getHomeRM();\r\n            ConcurrentHashMap<String, MockResourceManagerFacade> secondaries = interceptor.getSecondaryRMs();\r\n            interceptor = new TestableFederationInterceptor(homeRM, secondaries);\r\n            interceptor.init(new AMRMProxyApplicationContextImpl(nmContext, getConf(), attemptId, \"test-user\", null, null, null, registryObj));\r\n            interceptor.recover(recoveredDataMap);\r\n            Assert.assertEquals(1, interceptor.getUnmanagedAMPoolSize());\r\n            Assert.assertEquals(1, interceptor.getTimedOutSCs(true).size());\r\n            try {\r\n                AllocateRequest allocateRequest = Records.newRecord(AllocateRequest.class);\r\n                allocateRequest.setResponseId(lastResponseId);\r\n                AllocateResponse allocateResponse = interceptor.allocate(allocateRequest);\r\n                lastResponseId = allocateResponse.getResponseId();\r\n                Assert.fail(\"Expecting an ApplicationMasterNotRegisteredException  \" + \" after FederationInterceptor restarts and recovers\");\r\n            } catch (ApplicationMasterNotRegisteredException e) {\r\n            }\r\n            interceptor.registerApplicationMaster(registerReq);\r\n            lastResponseId = 0;\r\n            releaseContainersAndAssert(containers);\r\n            FinishApplicationMasterRequest finishReq = Records.newRecord(FinishApplicationMasterRequest.class);\r\n            finishReq.setDiagnostics(\"\");\r\n            finishReq.setTrackingUrl(\"\");\r\n            finishReq.setFinalApplicationStatus(FinalApplicationStatus.SUCCEEDED);\r\n            FinishApplicationMasterResponse finshResponse = interceptor.finishApplicationMaster(finishReq);\r\n            Assert.assertNotNull(finshResponse);\r\n            Assert.assertEquals(true, finshResponse.getIsUnregistered());\r\n            if (registryObj != null) {\r\n                Assert.assertEquals(0, interceptor.getRegistryClient().getAllApplications().size());\r\n            } else {\r\n                recoveredDataMap = recoverDataMapForAppAttempt(nmStateStore, attemptId);\r\n                Assert.assertFalse(recoveredDataMap.containsKey(scEntry));\r\n            }\r\n            return null;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "testRequestInterceptorChainCreation",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testRequestInterceptorChainCreation() throws Exception\n{\r\n    RequestInterceptor root = super.getAMRMProxyService().createRequestInterceptorChain();\r\n    int index = 0;\r\n    while (root != null) {\r\n        switch(index) {\r\n            case 0:\r\n            case 1:\r\n                Assert.assertEquals(PassThroughRequestInterceptor.class.getName(), root.getClass().getName());\r\n                break;\r\n            case 2:\r\n                Assert.assertEquals(TestableFederationInterceptor.class.getName(), root.getClass().getName());\r\n                break;\r\n            default:\r\n                Assert.fail();\r\n        }\r\n        root = root.getNextInterceptor();\r\n        index++;\r\n    }\r\n    Assert.assertEquals(\"The number of interceptors in chain does not match\", Integer.toString(3), Integer.toString(index));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "testTwoIdenticalRegisterRequest",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testTwoIdenticalRegisterRequest() throws Exception\n{\r\n    RegisterApplicationMasterRequest registerReq = Records.newRecord(RegisterApplicationMasterRequest.class);\r\n    registerReq.setHost(Integer.toString(testAppId));\r\n    registerReq.setRpcPort(0);\r\n    registerReq.setTrackingUrl(\"\");\r\n    for (int i = 0; i < 2; i++) {\r\n        RegisterApplicationMasterResponse registerResponse = interceptor.registerApplicationMaster(registerReq);\r\n        Assert.assertNotNull(registerResponse);\r\n        lastResponseId = 0;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "testTwoDifferentRegisterRequest",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testTwoDifferentRegisterRequest() throws Exception\n{\r\n    RegisterApplicationMasterRequest registerReq = Records.newRecord(RegisterApplicationMasterRequest.class);\r\n    registerReq.setHost(Integer.toString(testAppId));\r\n    registerReq.setRpcPort(0);\r\n    registerReq.setTrackingUrl(\"\");\r\n    RegisterApplicationMasterResponse registerResponse = interceptor.registerApplicationMaster(registerReq);\r\n    Assert.assertNotNull(registerResponse);\r\n    lastResponseId = 0;\r\n    registerReq = Records.newRecord(RegisterApplicationMasterRequest.class);\r\n    registerReq.setHost(Integer.toString(testAppId));\r\n    registerReq.setRpcPort(0);\r\n    registerReq.setTrackingUrl(\"different\");\r\n    try {\r\n        registerResponse = interceptor.registerApplicationMaster(registerReq);\r\n        lastResponseId = 0;\r\n        Assert.fail(\"Should throw if a different request obj is used\");\r\n    } catch (YarnException e) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "testAllocateResponse",
  "errType" : null,
  "containingMethodsNum" : 28,
  "sourceCodeText" : "void testAllocateResponse() throws Exception\n{\r\n    interceptor.registerApplicationMaster(RegisterApplicationMasterRequest.newInstance(null, 0, null));\r\n    AllocateRequest allocateRequest = Records.newRecord(AllocateRequest.class);\r\n    Map<SubClusterId, List<AllocateResponse>> asyncResponseSink = interceptor.getAsyncResponseSink();\r\n    ContainerId cid = ContainerId.newContainerId(attemptId, 0);\r\n    ContainerStatus cStatus = Records.newRecord(ContainerStatus.class);\r\n    cStatus.setContainerId(cid);\r\n    Container container = Container.newInstance(cid, null, null, null, null, null);\r\n    AllocateResponse response = Records.newRecord(AllocateResponse.class);\r\n    response.setAllocatedContainers(Collections.singletonList(container));\r\n    response.setCompletedContainersStatuses(Collections.singletonList(cStatus));\r\n    response.setUpdatedNodes(Collections.singletonList(Records.newRecord(NodeReport.class)));\r\n    response.setNMTokens(Collections.singletonList(Records.newRecord(NMToken.class)));\r\n    response.setUpdatedContainers(Collections.singletonList(Records.newRecord(UpdatedContainer.class)));\r\n    response.setUpdateErrors(Collections.singletonList(Records.newRecord(UpdateContainerError.class)));\r\n    response.setAvailableResources(Records.newRecord(Resource.class));\r\n    response.setPreemptionMessage(Records.newRecord(PreemptionMessage.class));\r\n    List<AllocateResponse> list = new ArrayList<>();\r\n    list.add(response);\r\n    asyncResponseSink.put(SubClusterId.newInstance(\"SC-1\"), list);\r\n    response = interceptor.allocate(allocateRequest);\r\n    Assert.assertEquals(1, response.getAllocatedContainers().size());\r\n    Assert.assertNotNull(response.getAvailableResources());\r\n    Assert.assertEquals(1, response.getCompletedContainersStatuses().size());\r\n    Assert.assertEquals(1, response.getUpdatedNodes().size());\r\n    Assert.assertNotNull(response.getPreemptionMessage());\r\n    Assert.assertEquals(1, response.getNMTokens().size());\r\n    Assert.assertEquals(1, response.getUpdatedContainers().size());\r\n    Assert.assertEquals(1, response.getUpdateErrors().size());\r\n    Assert.assertNotNull(response.getApplicationPriority());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "testSubClusterTimeOut",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testSubClusterTimeOut() throws Exception\n{\r\n    UserGroupInformation ugi = interceptor.getUGIWithToken(interceptor.getAttemptId());\r\n    ugi.doAs(new PrivilegedExceptionAction<Object>() {\r\n\r\n        @Override\r\n        public Object run() throws Exception {\r\n            RegisterApplicationMasterRequest registerReq = Records.newRecord(RegisterApplicationMasterRequest.class);\r\n            registerReq.setHost(Integer.toString(testAppId));\r\n            registerReq.setRpcPort(0);\r\n            registerReq.setTrackingUrl(\"\");\r\n            RegisterApplicationMasterResponse registerResponse = interceptor.registerApplicationMaster(registerReq);\r\n            Assert.assertNotNull(registerResponse);\r\n            lastResponseId = 0;\r\n            registerSubCluster(SubClusterId.newInstance(\"SC-1\"));\r\n            getContainersAndAssert(1, 1);\r\n            AllocateResponse allocateResponse = interceptor.generateBaseAllocationResponse();\r\n            Assert.assertEquals(2, allocateResponse.getNumClusterNodes());\r\n            Assert.assertEquals(0, interceptor.getTimedOutSCs(true).size());\r\n            Thread.sleep(800);\r\n            allocateResponse = interceptor.generateBaseAllocationResponse();\r\n            Assert.assertEquals(2, allocateResponse.getNumClusterNodes());\r\n            Assert.assertEquals(0, interceptor.getTimedOutSCs(true).size());\r\n            AllocateRequest allocateRequest = Records.newRecord(AllocateRequest.class);\r\n            allocateRequest.setResponseId(lastResponseId - 1);\r\n            interceptor.allocate(allocateRequest);\r\n            allocateResponse = interceptor.generateBaseAllocationResponse();\r\n            Assert.assertEquals(0, allocateResponse.getNumClusterNodes());\r\n            Assert.assertEquals(2, interceptor.getTimedOutSCs(true).size());\r\n            return null;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "testSecondAttempt",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testSecondAttempt() throws Exception\n{\r\n    final RegisterApplicationMasterRequest registerReq = Records.newRecord(RegisterApplicationMasterRequest.class);\r\n    registerReq.setHost(Integer.toString(testAppId));\r\n    registerReq.setRpcPort(testAppId);\r\n    registerReq.setTrackingUrl(\"\");\r\n    UserGroupInformation ugi = interceptor.getUGIWithToken(interceptor.getAttemptId());\r\n    ugi.doAs(new PrivilegedExceptionAction<Object>() {\r\n\r\n        @Override\r\n        public Object run() throws Exception {\r\n            RegisterApplicationMasterResponse registerResponse = interceptor.registerApplicationMaster(registerReq);\r\n            Assert.assertNotNull(registerResponse);\r\n            lastResponseId = 0;\r\n            Assert.assertEquals(0, interceptor.getUnmanagedAMPoolSize());\r\n            registerSubCluster(SubClusterId.newInstance(\"SC-1\"));\r\n            registerSubCluster(SubClusterId.newInstance(HOME_SC_ID));\r\n            int numberOfContainers = 3;\r\n            List<Container> containers = getContainersAndAssert(numberOfContainers, numberOfContainers * 2);\r\n            for (Container c : containers) {\r\n                LOG.info(\"Allocated container \" + c.getId());\r\n            }\r\n            Assert.assertEquals(1, interceptor.getUnmanagedAMPoolSize());\r\n            interceptor.drainAllAsyncQueue(true);\r\n            ConcurrentHashMap<String, MockResourceManagerFacade> secondaries = interceptor.getSecondaryRMs();\r\n            attemptId = ApplicationAttemptId.newInstance(attemptId.getApplicationId(), attemptId.getAttemptId() + 1);\r\n            interceptor = new TestableFederationInterceptor(null, secondaries);\r\n            interceptor.init(new AMRMProxyApplicationContextImpl(nmContext, getConf(), attemptId, \"test-user\", null, null, null, registry));\r\n            return null;\r\n        }\r\n    });\r\n    ugi = interceptor.getUGIWithToken(interceptor.getAttemptId());\r\n    ugi.doAs(new PrivilegedExceptionAction<Object>() {\r\n\r\n        @Override\r\n        public Object run() throws Exception {\r\n            RegisterApplicationMasterResponse registerResponse = interceptor.registerApplicationMaster(registerReq);\r\n            lastResponseId = 0;\r\n            int numberOfContainers = 3;\r\n            Assert.assertEquals(1, interceptor.getUnmanagedAMPoolSize());\r\n            Assert.assertEquals(1, interceptor.getTimedOutSCs(true).size());\r\n            Assert.assertEquals(numberOfContainers, registerResponse.getContainersFromPreviousAttempts().size());\r\n            releaseContainersAndAssert(registerResponse.getContainersFromPreviousAttempts());\r\n            FinishApplicationMasterRequest finishReq = Records.newRecord(FinishApplicationMasterRequest.class);\r\n            finishReq.setDiagnostics(\"\");\r\n            finishReq.setTrackingUrl(\"\");\r\n            finishReq.setFinalApplicationStatus(FinalApplicationStatus.SUCCEEDED);\r\n            FinishApplicationMasterResponse finshResponse = interceptor.finishApplicationMaster(finishReq);\r\n            Assert.assertNotNull(finshResponse);\r\n            Assert.assertEquals(true, finshResponse.getIsUnregistered());\r\n            if (interceptor.getRegistryClient() != null) {\r\n                Assert.assertEquals(0, interceptor.getRegistryClient().getAllApplications().size());\r\n            }\r\n            return null;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "testMergeAllocateResponse",
  "errType" : null,
  "containingMethodsNum" : 27,
  "sourceCodeText" : "void testMergeAllocateResponse()\n{\r\n    ContainerId cid = ContainerId.newContainerId(attemptId, 0);\r\n    ContainerStatus cStatus = Records.newRecord(ContainerStatus.class);\r\n    cStatus.setContainerId(cid);\r\n    Container container = Container.newInstance(cid, null, null, null, null, null);\r\n    AllocateResponse homeResponse = Records.newRecord(AllocateResponse.class);\r\n    homeResponse.setAllocatedContainers(Collections.singletonList(container));\r\n    homeResponse.setCompletedContainersStatuses(Collections.singletonList(cStatus));\r\n    homeResponse.setUpdatedNodes(Collections.singletonList(Records.newRecord(NodeReport.class)));\r\n    homeResponse.setNMTokens(Collections.singletonList(Records.newRecord(NMToken.class)));\r\n    homeResponse.setUpdatedContainers(Collections.singletonList(Records.newRecord(UpdatedContainer.class)));\r\n    homeResponse.setUpdateErrors(Collections.singletonList(Records.newRecord(UpdateContainerError.class)));\r\n    homeResponse.setAvailableResources(Records.newRecord(Resource.class));\r\n    homeResponse.setPreemptionMessage(createDummyPreemptionMessage(ContainerId.newContainerId(attemptId, 0)));\r\n    AllocateResponse response = Records.newRecord(AllocateResponse.class);\r\n    response.setAllocatedContainers(Collections.singletonList(container));\r\n    response.setCompletedContainersStatuses(Collections.singletonList(cStatus));\r\n    response.setUpdatedNodes(Collections.singletonList(Records.newRecord(NodeReport.class)));\r\n    response.setNMTokens(Collections.singletonList(Records.newRecord(NMToken.class)));\r\n    response.setUpdatedContainers(Collections.singletonList(Records.newRecord(UpdatedContainer.class)));\r\n    response.setUpdateErrors(Collections.singletonList(Records.newRecord(UpdateContainerError.class)));\r\n    response.setAvailableResources(Records.newRecord(Resource.class));\r\n    response.setPreemptionMessage(createDummyPreemptionMessage(ContainerId.newContainerId(attemptId, 1)));\r\n    interceptor.mergeAllocateResponse(homeResponse, response, SubClusterId.newInstance(\"SC-1\"));\r\n    Assert.assertEquals(2, homeResponse.getPreemptionMessage().getContract().getContainers().size());\r\n    Assert.assertEquals(2, homeResponse.getAllocatedContainers().size());\r\n    Assert.assertEquals(2, homeResponse.getUpdatedNodes().size());\r\n    Assert.assertEquals(2, homeResponse.getCompletedContainersStatuses().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "createDummyPreemptionMessage",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "PreemptionMessage createDummyPreemptionMessage(ContainerId containerId)\n{\r\n    PreemptionMessage preemptionMessage = Records.newRecord(PreemptionMessage.class);\r\n    PreemptionContainer container = Records.newRecord(PreemptionContainer.class);\r\n    container.setId(containerId);\r\n    Set<PreemptionContainer> preemptionContainers = new HashSet<>();\r\n    preemptionContainers.add(container);\r\n    PreemptionContract contract = Records.newRecord(PreemptionContract.class);\r\n    contract.setContainers(preemptionContainers);\r\n    preemptionMessage.setContract(contract);\r\n    return preemptionMessage;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void setUp() throws IOException, YarnException\n{\r\n    conf = new YarnConfiguration();\r\n    Context mockContext = mock(Context.class);\r\n    @SuppressWarnings(\"unchecked\")\r\n    ConcurrentHashMap<ContainerId, Container> mockContainers = mock(ConcurrentHashMap.class);\r\n    Container mockContainer = mock(Container.class);\r\n    when(mockContainer.getResourceMappings()).thenReturn(new ResourceMappings());\r\n    when(mockContainers.get(any())).thenReturn(mockContainer);\r\n    when(mockContext.getContainers()).thenReturn(mockContainers);\r\n    NMStateStoreService mock = mock(NMStateStoreService.class);\r\n    when(mockContext.getNMStateStore()).thenReturn(mock);\r\n    numaResourceAllocator = new NumaResourceAllocator(mockContext);\r\n    setNumaTopologyConfigs();\r\n    numaResourceAllocator.init(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "testReadNumaTopologyFromConfigurations",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testReadNumaTopologyFromConfigurations() throws Exception\n{\r\n    Collection<NumaNodeResource> nodesList = numaResourceAllocator.getNumaNodesList();\r\n    Collection<NumaNodeResource> expectedNodesList = getExpectedNumaNodesList();\r\n    Assert.assertEquals(expectedNodesList, nodesList);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "testReadNumaTopologyFromCmdOutput",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testReadNumaTopologyFromCmdOutput() throws Exception\n{\r\n    conf.setBoolean(YarnConfiguration.NM_NUMA_AWARENESS_READ_TOPOLOGY, true);\r\n    String cmdOutput = \"available: 2 nodes (0-1)\\n\\t\" + \"node 0 cpus: 0 2 4 6\\n\\t\" + \"node 0 size: 73717 MB\\n\\t\" + \"node 0 free: 17272 MB\\n\\t\" + \"node 1 cpus: 1 3 5 7\\n\\t\" + \"node 1 size: 73727 MB\\n\\t\" + \"node 1 free: 10699 MB\\n\\t\" + \"node distances:\\n\\t\" + \"node 0 1\\n\\t\" + \"0: 10 20\\n\\t\" + \"1: 20 10\";\r\n    numaResourceAllocator = new NumaResourceAllocator(mock(Context.class)) {\r\n\r\n        @Override\r\n        String executeNGetCmdOutput(Configuration config) throws YarnRuntimeException {\r\n            return cmdOutput;\r\n        }\r\n    };\r\n    numaResourceAllocator.init(conf);\r\n    Collection<NumaNodeResource> nodesList = numaResourceAllocator.getNumaNodesList();\r\n    Collection<NumaNodeResource> expectedNodesList = getExpectedNumaNodesList();\r\n    Assert.assertEquals(expectedNodesList, nodesList);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "testAllocateNumaNode",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testAllocateNumaNode() throws Exception\n{\r\n    NumaResourceAllocation nodeInfo = numaResourceAllocator.allocateNumaNodes(getContainer(ContainerId.fromString(\"container_1481156246874_0001_01_000001\"), Resource.newInstance(2048, 2)));\r\n    Assert.assertEquals(\"0\", String.join(\",\", nodeInfo.getMemNodes()));\r\n    Assert.assertEquals(\"0\", String.join(\",\", nodeInfo.getCpuNodes()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "testAllocateNumaNodeWithRoundRobinFashionAssignment",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testAllocateNumaNodeWithRoundRobinFashionAssignment() throws Exception\n{\r\n    NumaResourceAllocation nodeInfo1 = numaResourceAllocator.allocateNumaNodes(getContainer(ContainerId.fromString(\"container_1481156246874_0001_01_000001\"), Resource.newInstance(2048, 2)));\r\n    Assert.assertEquals(\"0\", String.join(\",\", nodeInfo1.getMemNodes()));\r\n    Assert.assertEquals(\"0\", String.join(\",\", nodeInfo1.getCpuNodes()));\r\n    NumaResourceAllocation nodeInfo2 = numaResourceAllocator.allocateNumaNodes(getContainer(ContainerId.fromString(\"container_1481156246874_0001_01_000002\"), Resource.newInstance(2048, 2)));\r\n    Assert.assertEquals(\"1\", String.join(\",\", nodeInfo2.getMemNodes()));\r\n    Assert.assertEquals(\"1\", String.join(\",\", nodeInfo2.getCpuNodes()));\r\n    NumaResourceAllocation nodeInfo3 = numaResourceAllocator.allocateNumaNodes(getContainer(ContainerId.fromString(\"container_1481156246874_0001_01_000003\"), Resource.newInstance(2048, 2)));\r\n    Assert.assertEquals(\"0\", String.join(\",\", nodeInfo3.getMemNodes()));\r\n    Assert.assertEquals(\"0\", String.join(\",\", nodeInfo3.getCpuNodes()));\r\n    NumaResourceAllocation nodeInfo4 = numaResourceAllocator.allocateNumaNodes(getContainer(ContainerId.fromString(\"container_1481156246874_0001_01_000003\"), Resource.newInstance(2048, 2)));\r\n    Assert.assertEquals(\"1\", String.join(\",\", nodeInfo4.getMemNodes()));\r\n    Assert.assertEquals(\"1\", String.join(\",\", nodeInfo4.getCpuNodes()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "testAllocateNumaNodeWithMultipleNodesForMemory",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testAllocateNumaNodeWithMultipleNodesForMemory() throws Exception\n{\r\n    NumaResourceAllocation nodeInfo = numaResourceAllocator.allocateNumaNodes(getContainer(ContainerId.fromString(\"container_1481156246874_0001_01_000001\"), Resource.newInstance(102400, 2)));\r\n    Assert.assertEquals(\"0,1\", String.join(\",\", nodeInfo.getMemNodes()));\r\n    Assert.assertEquals(\"0\", String.join(\",\", nodeInfo.getCpuNodes()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "testAllocateNumaNodeWithMultipleNodesForCpus",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testAllocateNumaNodeWithMultipleNodesForCpus() throws Exception\n{\r\n    NumaResourceAllocation nodeInfo = numaResourceAllocator.allocateNumaNodes(getContainer(ContainerId.fromString(\"container_1481156246874_0001_01_000001\"), Resource.newInstance(2048, 6)));\r\n    Assert.assertEquals(\"0\", String.join(\",\", nodeInfo.getMemNodes()));\r\n    Assert.assertEquals(\"0,1\", String.join(\",\", nodeInfo.getCpuNodes()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "testAllocateNumaNodeWhenNoNumaMemResourcesAvailable",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testAllocateNumaNodeWhenNoNumaMemResourcesAvailable() throws Exception\n{\r\n    NumaResourceAllocation nodeInfo = numaResourceAllocator.allocateNumaNodes(getContainer(ContainerId.fromString(\"container_1481156246874_0001_01_000001\"), Resource.newInstance(2048000, 6)));\r\n    Assert.assertNull(\"Should not assign numa nodes when there\" + \" are no sufficient memory resources available.\", nodeInfo);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "testAllocateNumaNodeWhenNoNumaCpuResourcesAvailable",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testAllocateNumaNodeWhenNoNumaCpuResourcesAvailable() throws Exception\n{\r\n    NumaResourceAllocation nodeInfo = numaResourceAllocator.allocateNumaNodes(getContainer(ContainerId.fromString(\"container_1481156246874_0001_01_000001\"), Resource.newInstance(2048, 600)));\r\n    Assert.assertNull(\"Should not assign numa nodes when there\" + \" are no sufficient cpu resources available.\", nodeInfo);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "testReleaseNumaResourcess",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testReleaseNumaResourcess() throws Exception\n{\r\n    NumaResourceAllocation nodeInfo = numaResourceAllocator.allocateNumaNodes(getContainer(ContainerId.fromString(\"container_1481156246874_0001_01_000001\"), Resource.newInstance(2048, 8)));\r\n    Assert.assertEquals(\"0\", String.join(\",\", nodeInfo.getMemNodes()));\r\n    Assert.assertEquals(\"0,1\", String.join(\",\", nodeInfo.getCpuNodes()));\r\n    nodeInfo = numaResourceAllocator.allocateNumaNodes(getContainer(ContainerId.fromString(\"container_1481156246874_0001_01_000002\"), Resource.newInstance(2048, 4)));\r\n    Assert.assertNull(\"Should not assign numa nodes when there\" + \" are no sufficient cpu resources available.\", nodeInfo);\r\n    numaResourceAllocator.releaseNumaResource(ContainerId.fromString(\"container_1481156246874_0001_01_000001\"));\r\n    nodeInfo = numaResourceAllocator.allocateNumaNodes(getContainer(ContainerId.fromString(\"container_1481156246874_0001_01_000003\"), Resource.newInstance(1024, 2)));\r\n    Assert.assertEquals(\"0\", String.join(\",\", nodeInfo.getMemNodes()));\r\n    Assert.assertEquals(\"0\", String.join(\",\", nodeInfo.getCpuNodes()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "testRecoverNumaResource",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testRecoverNumaResource() throws Exception\n{\r\n    @SuppressWarnings(\"unchecked\")\r\n    ConcurrentHashMap<ContainerId, Container> mockContainers = mock(ConcurrentHashMap.class);\r\n    Context mockContext = mock(Context.class);\r\n    Container mockContainer = mock(Container.class);\r\n    ResourceMappings value = new ResourceMappings();\r\n    AssignedResources assignedResources = new AssignedResources();\r\n    assignedResources.updateAssignedResources(Arrays.asList(new NumaResourceAllocation(\"0\", 70000, \"0\", 4)));\r\n    value.addAssignedResources(\"numa\", assignedResources);\r\n    when(mockContainer.getResourceMappings()).thenReturn(value);\r\n    when(mockContainers.get(any())).thenReturn(mockContainer);\r\n    when(mockContext.getContainers()).thenReturn(mockContainers);\r\n    NMStateStoreService mock = mock(NMStateStoreService.class);\r\n    when(mockContext.getNMStateStore()).thenReturn(mock);\r\n    numaResourceAllocator = new NumaResourceAllocator(mockContext);\r\n    numaResourceAllocator.init(conf);\r\n    numaResourceAllocator.recoverNumaResource(ContainerId.fromString(\"container_1481156246874_0001_01_000001\"));\r\n    NumaResourceAllocation numaNode = numaResourceAllocator.allocateNumaNodes(getContainer(ContainerId.fromString(\"container_1481156246874_0001_01_000005\"), Resource.newInstance(2048, 1)));\r\n    assertEquals(\"1\", String.join(\",\", numaNode.getMemNodes()));\r\n    assertEquals(\"1\", String.join(\",\", numaNode.getCpuNodes()));\r\n    numaNode = numaResourceAllocator.allocateNumaNodes(getContainer(ContainerId.fromString(\"container_1481156246874_0001_01_000006\"), Resource.newInstance(2048, 4)));\r\n    assertNull(numaNode);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "setNumaTopologyConfigs",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setNumaTopologyConfigs()\n{\r\n    conf.set(YarnConfiguration.NM_NUMA_AWARENESS_NODE_IDS, \"0,1\");\r\n    conf.set(\"yarn.nodemanager.numa-awareness.0.memory\", \"73717\");\r\n    conf.set(\"yarn.nodemanager.numa-awareness.0.cpus\", \"4\");\r\n    conf.set(\"yarn.nodemanager.numa-awareness.1.memory\", \"73727\");\r\n    conf.set(\"yarn.nodemanager.numa-awareness.1.cpus\", \"4\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "getExpectedNumaNodesList",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Collection<NumaNodeResource> getExpectedNumaNodesList()\n{\r\n    Collection<NumaNodeResource> expectedNodesList = new ArrayList<>(2);\r\n    expectedNodesList.add(new NumaNodeResource(\"0\", 73717, 4));\r\n    expectedNodesList.add(new NumaNodeResource(\"1\", 73727, 4));\r\n    return expectedNodesList;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "getContainer",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Container getContainer(ContainerId containerId, Resource resource)\n{\r\n    Container mockContainer = mock(Container.class);\r\n    when(mockContainer.getContainerId()).thenReturn(containerId);\r\n    when(mockContainer.getResource()).thenReturn(resource);\r\n    return mockContainer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testGetPendingLS",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testGetPendingLS() throws URISyntaxException\n{\r\n    ResourceSet resourceSet = new ResourceSet();\r\n    Map<String, LocalResource> resources = new HashMap<>();\r\n    resources.put(\"resource1\", LocalResource.newInstance(URL.fromPath(new Path(\"/tmp/file1.txt\")), LocalResourceType.FILE, LocalResourceVisibility.PRIVATE, 0, System.currentTimeMillis()));\r\n    resourceSet.addResources(resources);\r\n    Assert.assertEquals(\"num statuses\", 1, resourceSet.getLocalizationStatuses().size());\r\n    LocalizationStatus status = resourceSet.getLocalizationStatuses().iterator().next();\r\n    Assert.assertEquals(\"status\", LocalizationState.PENDING, status.getLocalizationState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testGetCompletedLS",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testGetCompletedLS() throws URISyntaxException\n{\r\n    ResourceSet resourceSet = new ResourceSet();\r\n    Map<String, LocalResource> resources = new HashMap<>();\r\n    LocalResource resource1 = LocalResource.newInstance(URL.fromPath(new Path(\"/tmp/file1.txt\")), LocalResourceType.FILE, LocalResourceVisibility.PRIVATE, 0, System.currentTimeMillis());\r\n    resources.put(\"resource1\", resource1);\r\n    resourceSet.addResources(resources);\r\n    LocalResourceRequest lrr = new LocalResourceRequest(resource1);\r\n    resourceSet.resourceLocalized(lrr, new Path(\"file1.txt\"));\r\n    Assert.assertEquals(\"num statuses\", 1, resourceSet.getLocalizationStatuses().size());\r\n    LocalizationStatus status = resourceSet.getLocalizationStatuses().iterator().next();\r\n    Assert.assertEquals(\"status\", LocalizationState.COMPLETED, status.getLocalizationState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testGetFailedLS",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testGetFailedLS() throws URISyntaxException\n{\r\n    ResourceSet resourceSet = new ResourceSet();\r\n    Map<String, LocalResource> resources = new HashMap<>();\r\n    LocalResource resource1 = LocalResource.newInstance(URL.fromPath(new Path(\"/tmp/file1.txt\")), LocalResourceType.FILE, LocalResourceVisibility.PRIVATE, 0, System.currentTimeMillis());\r\n    resources.put(\"resource1\", resource1);\r\n    resourceSet.addResources(resources);\r\n    LocalResourceRequest lrr = new LocalResourceRequest(resource1);\r\n    resourceSet.resourceLocalizationFailed(lrr, \"file does not exist\");\r\n    Assert.assertEquals(\"num statuses\", 1, resourceSet.getLocalizationStatuses().size());\r\n    LocalizationStatus status = resourceSet.getLocalizationStatuses().iterator().next();\r\n    Assert.assertEquals(\"status\", LocalizationState.FAILED, status.getLocalizationState());\r\n    Assert.assertEquals(\"diagnostics\", \"file does not exist\", status.getDiagnostics());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "testParsing",
  "errType" : null,
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void testParsing()\n{\r\n    String output = \"------------------------- acl0 -------------------------\\n\" + \"Vendor: Nallatech ltd\\n\" + \"Phys Dev Name  Status   Information\\n\" + \"aclnalla_pcie0Passed   nalla_pcie (aclnalla_pcie0)\\n\" + \"                       PCIe dev_id = 2494, bus:slot.func = 02:00.00, Gen3 x8\\n\" + \"                       FPGA temperature = 53.1 degrees C.\\n\" + \"                       Total Card Power Usage = 31.7 Watts.\\n\" + \"                       Device Power Usage = 0.0 Watts.\\n\" + \"DIAGNOSTIC_PASSED\" + \"---------------------------------------------------------\\n\";\r\n    output = output + \"------------------------- acl1 -------------------------\\n\" + \"Vendor: Nallatech ltd\\n\" + \"Phys Dev Name  Status   Information\\n\" + \"aclnalla_pcie1Passed   nalla_pcie (aclnalla_pcie1)\\n\" + \"                       PCIe dev_id = 2495, bus:slot.func = 03:00.00, Gen3 x8\\n\" + \"                       FPGA temperature = 43.1 degrees C.\\n\" + \"                       Total Card Power Usage = 11.7 Watts.\\n\" + \"                       Device Power Usage = 0.0 Watts.\\n\" + \"DIAGNOSTIC_PASSED\" + \"---------------------------------------------------------\\n\";\r\n    output = output + \"------------------------- acl2 -------------------------\\n\" + \"Vendor: Intel(R) Corporation\\n\" + \"\\n\" + \"Phys Dev Name  Status   Information\\n\" + \"\\n\" + \"acla10_ref0   Passed   Arria 10 Reference Platform (acla10_ref0)\\n\" + \"                       PCIe dev_id = 2494, bus:slot.func = 09:00.00, Gen2 x8\\n\" + \"                       FPGA temperature = 50.5781 degrees C.\\n\" + \"\\n\" + \"DIAGNOSTIC_PASSED\\n\" + \"---------------------------------------------------------\\n\";\r\n    InnerShellExecutor shellExecutor = mock(InnerShellExecutor.class);\r\n    when(shellExecutor.getMajorAndMinorNumber(\"aclnalla_pcie0\")).thenReturn(\"247:0\");\r\n    when(shellExecutor.getMajorAndMinorNumber(\"aclnalla_pcie1\")).thenReturn(\"247:1\");\r\n    when(shellExecutor.getMajorAndMinorNumber(\"acla10_ref0\")).thenReturn(\"246:0\");\r\n    List<FpgaDevice> devices = AoclDiagnosticOutputParser.parseDiagnosticOutput(output, shellExecutor, \"IntelOpenCL\");\r\n    assertEquals(3, devices.size());\r\n    assertEquals(\"IntelOpenCL\", devices.get(0).getType());\r\n    assertEquals(247, devices.get(0).getMajor());\r\n    assertEquals(0, devices.get(0).getMinor());\r\n    assertEquals(\"acl0\", devices.get(0).getAliasDevName());\r\n    assertEquals(\"IntelOpenCL\", devices.get(1).getType());\r\n    assertEquals(247, devices.get(1).getMajor());\r\n    assertEquals(1, devices.get(1).getMinor());\r\n    assertEquals(\"acl1\", devices.get(1).getAliasDevName());\r\n    assertEquals(\"IntelOpenCL\", devices.get(2).getType());\r\n    assertEquals(246, devices.get(2).getMajor());\r\n    assertEquals(0, devices.get(2).getMinor());\r\n    assertEquals(\"acl2\", devices.get(2).getAliasDevName());\r\n    assertEquals(\"acl0\", devices.get(0).getAliasDevName());\r\n    assertEquals(\"acl1\", devices.get(1).getAliasDevName());\r\n    assertEquals(\"acl2\", devices.get(2).getAliasDevName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    dockerRunCommand = new DockerRunCommand(CONTAINER_NAME, USER_ID, IMAGE_NAME);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testGetCommandOption",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetCommandOption()\n{\r\n    assertEquals(\"run\", dockerRunCommand.getCommandOption());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testCommandArguments",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testCommandArguments()\n{\r\n    String sourceDevice = \"source\";\r\n    String destDevice = \"dest\";\r\n    dockerRunCommand.addDevice(sourceDevice, destDevice);\r\n    List<String> commands = new ArrayList<>();\r\n    commands.add(\"launch_command\");\r\n    dockerRunCommand.setOverrideCommandWithArgs(commands);\r\n    dockerRunCommand.removeContainerOnExit();\r\n    dockerRunCommand.addTmpfsMount(\"/run\");\r\n    String portsMapping = \"127.0.0.1:8080:80,1234:1234,:2222\";\r\n    for (String mapping : portsMapping.split(\",\")) {\r\n        dockerRunCommand.addPortsMapping(mapping);\r\n    }\r\n    dockerRunCommand.addRuntime(\"nvidia\");\r\n    assertEquals(\"run\", StringUtils.join(\",\", dockerRunCommand.getDockerCommandWithArguments().get(\"docker-command\")));\r\n    assertEquals(\"foo\", StringUtils.join(\",\", dockerRunCommand.getDockerCommandWithArguments().get(\"name\")));\r\n    assertEquals(\"user_id\", StringUtils.join(\",\", dockerRunCommand.getDockerCommandWithArguments().get(\"user\")));\r\n    assertEquals(\"image_name\", StringUtils.join(\",\", dockerRunCommand.getDockerCommandWithArguments().get(\"image\")));\r\n    assertEquals(\"source:dest\", StringUtils.join(\",\", dockerRunCommand.getDockerCommandWithArguments().get(\"devices\")));\r\n    assertEquals(\"true\", StringUtils.join(\",\", dockerRunCommand.getDockerCommandWithArguments().get(\"rm\")));\r\n    assertEquals(\"launch_command\", StringUtils.join(\",\", dockerRunCommand.getDockerCommandWithArguments().get(\"launch-command\")));\r\n    assertEquals(\"/run\", StringUtils.join(\",\", dockerRunCommand.getDockerCommandWithArguments().get(\"tmpfs\")));\r\n    assertEquals(\"127.0.0.1:8080:80,1234:1234,:2222\", StringUtils.join(\",\", dockerRunCommand.getDockerCommandWithArguments().get(\"ports-mapping\")));\r\n    assertEquals(\"nvidia\", StringUtils.join(\",\", dockerRunCommand.getDockerCommandWithArguments().get(\"runtime\")));\r\n    assertEquals(10, dockerRunCommand.getDockerCommandWithArguments().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testSetClientConfigDir",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testSetClientConfigDir()\n{\r\n    dockerRunCommand.setClientConfigDir(CLIENT_CONFIG_PATH);\r\n    assertEquals(CLIENT_CONFIG_PATH, StringUtils.join(\",\", dockerRunCommand.getDockerCommandWithArguments().get(\"docker-config\")));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setup()\n{\r\n    initResourceTypes(ResourceInformation.GPU_URI);\r\n    MockitoAnnotations.initMocks(this);\r\n    testSubject = createTestSubject(WAIT_PERIOD_FOR_RESOURCE);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "createTestSubject",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GpuResourceAllocator createTestSubject(int waitPeriodForResource)\n{\r\n    when(nmContext.getNMStateStore()).thenReturn(nmStateStore);\r\n    when(nmContext.getContainers()).thenReturn(new ConcurrentHashMap<>());\r\n    return new GpuResourceAllocator(nmContext, waitPeriodForResource);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "createGpuResourceRequest",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Resource createGpuResourceRequest(int gpus)\n{\r\n    Resource res = Resource.newInstance(1024, 1);\r\n    if (gpus > 0) {\r\n        res.setResourceValue(ResourceInformation.GPU_URI, gpus);\r\n    }\r\n    return res;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "createMockContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<Container> createMockContainers(int gpus, int numberOfContainers)\n{\r\n    final long id = 111L;\r\n    List<Container> containers = Lists.newArrayList();\r\n    for (int i = 0; i < numberOfContainers; i++) {\r\n        containers.add(createMockContainer(gpus, id + i));\r\n    }\r\n    return containers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "createMockContainer",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "Container createMockContainer(int gpus, long id)\n{\r\n    Resource res = createGpuResourceRequest(gpus);\r\n    ContainerId containerId = mock(ContainerId.class);\r\n    when(containerId.getContainerId()).thenReturn(id);\r\n    Container container = mock(Container.class);\r\n    when(container.getResource()).thenReturn(res);\r\n    when(container.getContainerId()).thenReturn(containerId);\r\n    when(container.getContainerState()).thenReturn(ContainerState.RUNNING);\r\n    nmContext.getContainers().put(containerId, container);\r\n    return container;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "createAndAddGpus",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void createAndAddGpus(int numberOfGpus)\n{\r\n    for (int i = 0; i < numberOfGpus; i++) {\r\n        testSubject.addGpu(new GpuDevice(1, i));\r\n    }\r\n    assertEquals(0, testSubject.getDeviceAllocationMapping().size());\r\n    assertEquals(0, testSubject.getAssignedGpus().size());\r\n    assertEquals(numberOfGpus, testSubject.getAllowedGpus().size());\r\n    assertEquals(numberOfGpus, testSubject.getAvailableGpus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "addGpus",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void addGpus(GpuDevice... gpus)\n{\r\n    for (GpuDevice gpu : gpus) {\r\n        testSubject.addGpu(gpu);\r\n    }\r\n    assertEquals(0, testSubject.getDeviceAllocationMapping().size());\r\n    assertEquals(0, testSubject.getAssignedGpus().size());\r\n    assertEquals(gpus.length, testSubject.getAllowedGpus().size());\r\n    assertEquals(gpus.length, testSubject.getAvailableGpus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "addGpusAndDontVerify",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addGpusAndDontVerify(GpuDevice... gpus)\n{\r\n    for (GpuDevice gpu : gpus) {\r\n        testSubject.addGpu(gpu);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "setupContainerAsReleasingGpus",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setupContainerAsReleasingGpus(Container... releasingContainers)\n{\r\n    ContainerState[] finalStates = new ContainerState[] { ContainerState.KILLING, ContainerState.DONE, ContainerState.LOCALIZATION_FAILED, ContainerState.CONTAINER_RESOURCES_CLEANINGUP, ContainerState.CONTAINER_CLEANEDUP_AFTER_KILL, ContainerState.EXITED_WITH_FAILURE, ContainerState.EXITED_WITH_SUCCESS };\r\n    final Random random = new Random();\r\n    for (Container container : releasingContainers) {\r\n        ContainerState state = finalStates[random.nextInt(finalStates.length)];\r\n        when(container.getContainerState()).thenReturn(state);\r\n        when(container.isContainerInFinalStates()).thenReturn(true);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "assertAllocatedGpu",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void assertAllocatedGpu(GpuDevice expectedGpu, Container container, GpuAllocation allocation) throws IOException\n{\r\n    assertEquals(1, allocation.getAllowedGPUs().size());\r\n    assertEquals(0, allocation.getDeniedGPUs().size());\r\n    Set<GpuDevice> allowedGPUs = allocation.getAllowedGPUs();\r\n    GpuDevice allocatedGpu = allowedGPUs.iterator().next();\r\n    assertEquals(expectedGpu, allocatedGpu);\r\n    assertAssignmentInStateStore(expectedGpu, container);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "assertAllocatedGpus",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void assertAllocatedGpus(int gpus, int deniedGpus, Container container, GpuAllocation allocation) throws IOException\n{\r\n    assertEquals(gpus, allocation.getAllowedGPUs().size());\r\n    assertEquals(deniedGpus, allocation.getDeniedGPUs().size());\r\n    assertAssignmentInStateStore(gpus, container);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "assertNoAllocation",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void assertNoAllocation(GpuAllocation allocation)\n{\r\n    assertEquals(1, allocation.getDeniedGPUs().size());\r\n    assertEquals(0, allocation.getAllowedGPUs().size());\r\n    verifyZeroInteractions(nmStateStore);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "assertAssignmentInStateStore",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void assertAssignmentInStateStore(GpuDevice expectedGpu, Container container) throws IOException\n{\r\n    verify(nmStateStore).storeAssignedResources(argThat(new ContainerMatcher(container)), eq(GPU_URI), gpuCaptor.capture());\r\n    List<Serializable> gpuList = gpuCaptor.getValue();\r\n    assertEquals(1, gpuList.size());\r\n    assertEquals(expectedGpu, gpuList.get(0));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "assertAssignmentInStateStore",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void assertAssignmentInStateStore(int gpus, Container container) throws IOException\n{\r\n    verify(nmStateStore).storeAssignedResources(argThat(new ContainerMatcher(container)), eq(GPU_URI), gpuCaptor.capture());\r\n    List<Serializable> gpuList = gpuCaptor.getValue();\r\n    assertEquals(gpus, gpuList.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "findDuplicates",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Set<GpuAllocation> findDuplicates(List<GpuAllocation> allocations)\n{\r\n    final Set<GpuAllocation> result = new HashSet<>();\r\n    final Set<GpuAllocation> tmpSet = new HashSet<>();\r\n    for (GpuAllocation allocation : allocations) {\r\n        if (!tmpSet.add(allocation)) {\r\n            result.add(allocation);\r\n        }\r\n    }\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "testNewGpuAllocatorHasEmptyCollectionOfDevices",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testNewGpuAllocatorHasEmptyCollectionOfDevices()\n{\r\n    assertEquals(0, testSubject.getDeviceAllocationMapping().size());\r\n    assertEquals(0, testSubject.getAssignedGpus().size());\r\n    assertEquals(0, testSubject.getAllowedGpus().size());\r\n    assertEquals(0, testSubject.getAvailableGpus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "testAddOneDevice",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testAddOneDevice()\n{\r\n    addGpus(new GpuDevice(1, 1));\r\n    assertEquals(0, testSubject.getDeviceAllocationMapping().size());\r\n    assertEquals(0, testSubject.getAssignedGpus().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "testAddMoreDevices",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testAddMoreDevices()\n{\r\n    addGpus(new GpuDevice(1, 1), new GpuDevice(1, 2), new GpuDevice(1, 3));\r\n    assertEquals(0, testSubject.getDeviceAllocationMapping().size());\r\n    assertEquals(0, testSubject.getAssignedGpus().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "testAddMoreDevicesWithSameData",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testAddMoreDevicesWithSameData()\n{\r\n    addGpusAndDontVerify(new GpuDevice(1, 1), new GpuDevice(1, 1));\r\n    assertEquals(0, testSubject.getDeviceAllocationMapping().size());\r\n    assertEquals(0, testSubject.getAssignedGpus().size());\r\n    assertEquals(1, testSubject.getAllowedGpus().size());\r\n    assertEquals(1, testSubject.getAvailableGpus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "testRequestZeroGpu",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testRequestZeroGpu() throws ResourceHandlerException\n{\r\n    addGpus(new GpuDevice(1, 1));\r\n    Container container = createMockContainer(0, 5L);\r\n    GpuAllocation allocation = testSubject.assignGpus(container);\r\n    assertNoAllocation(allocation);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "testRequestOneGpu",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testRequestOneGpu() throws ResourceHandlerException, IOException\n{\r\n    GpuDevice gpu = new GpuDevice(1, 1);\r\n    addGpus(gpu);\r\n    Container container = createMockContainer(1, 5L);\r\n    GpuAllocation allocation = testSubject.assignGpus(container);\r\n    assertEquals(1, testSubject.getDeviceAllocationMapping().size());\r\n    assertEquals(1, testSubject.getAssignedGpus().size());\r\n    assertEquals(1, testSubject.getAllowedGpus().size());\r\n    assertEquals(0, testSubject.getAvailableGpus());\r\n    assertAllocatedGpu(gpu, container, allocation);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "testRequestMoreThanAvailableGpu",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testRequestMoreThanAvailableGpu() throws ResourceHandlerException\n{\r\n    addGpus(new GpuDevice(1, 1));\r\n    Container container = createMockContainer(2, 5L);\r\n    exception.expect(ResourceHandlerException.class);\r\n    exception.expectMessage(\"Failed to find enough GPUs\");\r\n    testSubject.assignGpus(container);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "testRequestMoreThanAvailableGpuAndOneContainerIsReleasingGpus",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testRequestMoreThanAvailableGpuAndOneContainerIsReleasingGpus() throws ResourceHandlerException, IOException\n{\r\n    addGpus(new GpuDevice(1, 1), new GpuDevice(1, 2), new GpuDevice(1, 3));\r\n    Container container = createMockContainer(2, 5L);\r\n    GpuAllocation allocation = testSubject.assignGpus(container);\r\n    assertAllocatedGpus(2, 1, container, allocation);\r\n    assertEquals(2, testSubject.getDeviceAllocationMapping().size());\r\n    assertEquals(2, testSubject.getAssignedGpus().size());\r\n    assertEquals(3, testSubject.getAllowedGpus().size());\r\n    assertEquals(1, testSubject.getAvailableGpus());\r\n    setupContainerAsReleasingGpus(container);\r\n    Container container2 = createMockContainer(2, 6L);\r\n    exception.expect(ResourceHandlerException.class);\r\n    exception.expectMessage(\"as some other containers might not \" + \"releasing GPUs\");\r\n    GpuAllocation allocation2 = testSubject.assignGpus(container2);\r\n    assertAllocatedGpus(2, 1, container, allocation2);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "testThreeContainersJustTwoOfThemSatisfied",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testThreeContainersJustTwoOfThemSatisfied() throws ResourceHandlerException, IOException\n{\r\n    addGpus(new GpuDevice(1, 1), new GpuDevice(1, 2), new GpuDevice(1, 3), new GpuDevice(1, 4), new GpuDevice(1, 5), new GpuDevice(1, 6));\r\n    Container container = createMockContainer(3, 5L);\r\n    Container container2 = createMockContainer(2, 6L);\r\n    Container container3 = createMockContainer(2, 6L);\r\n    GpuAllocation allocation = testSubject.assignGpus(container);\r\n    assertAllocatedGpus(3, 3, container, allocation);\r\n    assertEquals(3, testSubject.getDeviceAllocationMapping().size());\r\n    assertEquals(3, testSubject.getAssignedGpus().size());\r\n    assertEquals(6, testSubject.getAllowedGpus().size());\r\n    assertEquals(3, testSubject.getAvailableGpus());\r\n    GpuAllocation allocation2 = testSubject.assignGpus(container2);\r\n    assertAllocatedGpus(2, 4, container2, allocation2);\r\n    assertEquals(5, testSubject.getDeviceAllocationMapping().size());\r\n    assertEquals(5, testSubject.getAssignedGpus().size());\r\n    assertEquals(6, testSubject.getAllowedGpus().size());\r\n    assertEquals(1, testSubject.getAvailableGpus());\r\n    exception.expect(ResourceHandlerException.class);\r\n    exception.expectMessage(\"Failed to find enough GPUs\");\r\n    testSubject.assignGpus(container3);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "testReleaseAndAssignGpus",
  "errType" : [ "ResourceHandlerException" ],
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testReleaseAndAssignGpus() throws ResourceHandlerException, IOException\n{\r\n    addGpus(new GpuDevice(1, 1), new GpuDevice(1, 2), new GpuDevice(1, 3));\r\n    Container container = createMockContainer(2, 5L);\r\n    GpuAllocation allocation = testSubject.assignGpus(container);\r\n    assertAllocatedGpus(2, 1, container, allocation);\r\n    assertEquals(2, testSubject.getDeviceAllocationMapping().size());\r\n    assertEquals(2, testSubject.getAssignedGpus().size());\r\n    assertEquals(3, testSubject.getAllowedGpus().size());\r\n    assertEquals(1, testSubject.getAvailableGpus());\r\n    setupContainerAsReleasingGpus(container);\r\n    Container container2 = createMockContainer(2, 6L);\r\n    try {\r\n        testSubject.assignGpus(container2);\r\n    } catch (ResourceHandlerException e) {\r\n    }\r\n    assertEquals(2, testSubject.getDeviceAllocationMapping().size());\r\n    assertEquals(2, testSubject.getAssignedGpus().size());\r\n    assertEquals(3, testSubject.getAllowedGpus().size());\r\n    assertEquals(1, testSubject.getAvailableGpus());\r\n    testSubject.unassignGpus(container.getContainerId());\r\n    GpuAllocation allocation2 = testSubject.assignGpus(container2);\r\n    assertAllocatedGpus(2, 1, container, allocation2);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "testCreateLotsOfContainersVerifyGpuAssignmentsAreCorrect",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testCreateLotsOfContainersVerifyGpuAssignmentsAreCorrect() throws ResourceHandlerException, IOException\n{\r\n    createAndAddGpus(100);\r\n    List<Container> containers = createMockContainers(3, 33);\r\n    List<GpuAllocation> allocations = Lists.newArrayList();\r\n    for (Container container : containers) {\r\n        GpuAllocation allocation = testSubject.assignGpus(container);\r\n        allocations.add(allocation);\r\n        assertAllocatedGpus(3, 97, container, allocation);\r\n    }\r\n    assertEquals(99, testSubject.getDeviceAllocationMapping().size());\r\n    assertEquals(99, testSubject.getAssignedGpus().size());\r\n    assertEquals(100, testSubject.getAllowedGpus().size());\r\n    assertEquals(1, testSubject.getAvailableGpus());\r\n    Set<GpuAllocation> duplicateAllocations = findDuplicates(allocations);\r\n    assertEquals(0, duplicateAllocations.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\gpu",
  "methodName" : "testGpuGetsUnassignedWhenStateStoreThrowsException",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testGpuGetsUnassignedWhenStateStoreThrowsException() throws ResourceHandlerException, IOException\n{\r\n    doThrow(new IOException(\"Failed to save container mappings \" + \"to NM state store!\")).when(nmStateStore).storeAssignedResources(any(Container.class), anyString(), anyList());\r\n    createAndAddGpus(1);\r\n    exception.expect(ResourceHandlerException.class);\r\n    exception.expectMessage(\"Failed to save container mappings \" + \"to NM state store\");\r\n    Container container = createMockContainer(1, 5L);\r\n    testSubject.assignGpus(container);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void setup() throws UnsupportedFileSystemException\n{\r\n    localFS = FileContext.getLocalFSFileContext();\r\n    tmpDir.mkdirs();\r\n    logsDir.mkdirs();\r\n    remoteLogsDir.mkdirs();\r\n    nmLocalDir.mkdirs();\r\n    cId = createContainerId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDown() throws IOException, InterruptedException\n{\r\n    if (nm != null) {\r\n        nm.stop();\r\n    }\r\n    localFS.delete(new Path(basedir.getPath()), true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testStateStoreRemovalOnDecommission",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testStateStoreRemovalOnDecommission() throws IOException\n{\r\n    final File recoveryDir = new File(basedir, \"nm-recovery\");\r\n    nm = new TestNodeManager();\r\n    YarnConfiguration conf = createNMConfig();\r\n    conf.setBoolean(YarnConfiguration.NM_RECOVERY_ENABLED, true);\r\n    conf.set(YarnConfiguration.NM_RECOVERY_DIR, recoveryDir.getAbsolutePath());\r\n    nm.init(conf);\r\n    nm.start();\r\n    Assert.assertTrue(recoveryDir.exists());\r\n    Assert.assertTrue(recoveryDir.isDirectory());\r\n    nm.stop();\r\n    nm = null;\r\n    Assert.assertTrue(recoveryDir.exists());\r\n    Assert.assertTrue(recoveryDir.isDirectory());\r\n    nm = new TestNodeManager();\r\n    nm.init(conf);\r\n    nm.start();\r\n    Assert.assertTrue(recoveryDir.exists());\r\n    Assert.assertTrue(recoveryDir.isDirectory());\r\n    nm.getNMContext().setDecommissioned(true);\r\n    nm.stop();\r\n    nm = null;\r\n    Assert.assertFalse(recoveryDir.exists());\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testKillContainersOnShutdown",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testKillContainersOnShutdown() throws IOException, YarnException\n{\r\n    nm = new TestNodeManager();\r\n    int port = ServerSocketUtil.getPort(49157, 10);\r\n    nm.init(createNMConfig(port));\r\n    nm.start();\r\n    startContainer(nm, cId, localFS, tmpDir, processStartFile, port);\r\n    final int MAX_TRIES = 20;\r\n    int numTries = 0;\r\n    while (!processStartFile.exists() && numTries < MAX_TRIES) {\r\n        try {\r\n            Thread.sleep(500);\r\n        } catch (InterruptedException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n        numTries++;\r\n    }\r\n    nm.stop();\r\n    if (Shell.WINDOWS) {\r\n        Assert.assertFalse(\"Process is still alive!\", DefaultContainerExecutor.containerIsAlive(cId.toString()));\r\n    } else {\r\n        BufferedReader reader = new BufferedReader(new FileReader(processStartFile));\r\n        boolean foundSigTermMessage = false;\r\n        while (true) {\r\n            String line = reader.readLine();\r\n            if (line == null) {\r\n                break;\r\n            }\r\n            if (line.contains(\"SIGTERM\")) {\r\n                foundSigTermMessage = true;\r\n                break;\r\n            }\r\n        }\r\n        Assert.assertTrue(\"Did not find sigterm message\", foundSigTermMessage);\r\n        reader.close();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "startContainer",
  "errType" : null,
  "containingMethodsNum" : 27,
  "sourceCodeText" : "void startContainer(NodeManager nm, ContainerId cId, FileContext localFS, File scriptFileDir, File processStartFile, final int port) throws IOException, YarnException\n{\r\n    File scriptFile = createUnhaltingScriptFile(cId, scriptFileDir, processStartFile);\r\n    ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class);\r\n    NodeId nodeId = BuilderUtils.newNodeId(InetAddress.getByName(\"localhost\").getCanonicalHostName(), port);\r\n    URL localResourceUri = URL.fromPath(localFS.makeQualified(new Path(scriptFile.getAbsolutePath())));\r\n    LocalResource localResource = recordFactory.newRecordInstance(LocalResource.class);\r\n    localResource.setResource(localResourceUri);\r\n    localResource.setSize(-1);\r\n    localResource.setVisibility(LocalResourceVisibility.APPLICATION);\r\n    localResource.setType(LocalResourceType.FILE);\r\n    localResource.setTimestamp(scriptFile.lastModified());\r\n    String destinationFile = \"dest_file\";\r\n    Map<String, LocalResource> localResources = new HashMap<String, LocalResource>();\r\n    localResources.put(destinationFile, localResource);\r\n    containerLaunchContext.setLocalResources(localResources);\r\n    List<String> commands = Arrays.asList(Shell.getRunScriptCommand(scriptFile));\r\n    containerLaunchContext.setCommands(commands);\r\n    final InetSocketAddress containerManagerBindAddress = NetUtils.createSocketAddrForHost(\"127.0.0.1\", port);\r\n    UserGroupInformation currentUser = UserGroupInformation.createRemoteUser(cId.toString());\r\n    org.apache.hadoop.security.token.Token<NMTokenIdentifier> nmToken = ConverterUtils.convertFromYarn(nm.getNMContext().getNMTokenSecretManager().createNMToken(cId.getApplicationAttemptId(), nodeId, user), containerManagerBindAddress);\r\n    currentUser.addToken(nmToken);\r\n    ContainerManagementProtocol containerManager = currentUser.doAs(new PrivilegedAction<ContainerManagementProtocol>() {\r\n\r\n        @Override\r\n        public ContainerManagementProtocol run() {\r\n            Configuration conf = new Configuration();\r\n            YarnRPC rpc = YarnRPC.create(conf);\r\n            InetSocketAddress containerManagerBindAddress = NetUtils.createSocketAddrForHost(\"127.0.0.1\", port);\r\n            return (ContainerManagementProtocol) rpc.getProxy(ContainerManagementProtocol.class, containerManagerBindAddress, conf);\r\n        }\r\n    });\r\n    StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, TestContainerManager.createContainerToken(cId, 0, nodeId, user, nm.getNMContext().getContainerTokenSecretManager()));\r\n    List<StartContainerRequest> list = new ArrayList<StartContainerRequest>();\r\n    list.add(scRequest);\r\n    StartContainersRequest allRequests = StartContainersRequest.newInstance(list);\r\n    containerManager.startContainers(allRequests);\r\n    List<ContainerId> containerIds = new ArrayList<ContainerId>();\r\n    containerIds.add(cId);\r\n    GetContainerStatusesRequest request = GetContainerStatusesRequest.newInstance(containerIds);\r\n    ContainerStatus containerStatus = containerManager.getContainerStatuses(request).getContainerStatuses().get(0);\r\n    Assert.assertTrue(EnumSet.of(ContainerState.RUNNING).contains(containerStatus.getState()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createContainerId",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ContainerId createContainerId()\n{\r\n    ApplicationId appId = ApplicationId.newInstance(0, 0);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId containerId = ContainerId.newContainerId(appAttemptId, 0);\r\n    return containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createNMConfig",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "YarnConfiguration createNMConfig(int port) throws IOException\n{\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.setInt(YarnConfiguration.NM_PMEM_MB, 5 * 1024);\r\n    conf.set(YarnConfiguration.NM_ADDRESS, \"127.0.0.1:\" + port);\r\n    conf.set(YarnConfiguration.NM_LOCALIZER_ADDRESS, \"127.0.0.1:\" + ServerSocketUtil.getPort(49158, 10));\r\n    conf.set(YarnConfiguration.NM_WEBAPP_ADDRESS, \"127.0.0.1:\" + ServerSocketUtil.getPort(YarnConfiguration.DEFAULT_NM_WEBAPP_PORT, 10));\r\n    conf.set(YarnConfiguration.NM_LOG_DIRS, logsDir.getAbsolutePath());\r\n    conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR, remoteLogsDir.getAbsolutePath());\r\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, nmLocalDir.getAbsolutePath());\r\n    conf.setLong(YarnConfiguration.NM_LOG_RETAIN_SECONDS, 1);\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createNMConfig",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnConfiguration createNMConfig() throws IOException\n{\r\n    return createNMConfig(ServerSocketUtil.getPort(49157, 10));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createUnhaltingScriptFile",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "File createUnhaltingScriptFile(ContainerId cId, File scriptFileDir, File processStartFile) throws IOException\n{\r\n    File scriptFile = Shell.appendScriptExtension(scriptFileDir, \"scriptFile\");\r\n    PrintWriter fileWriter = new PrintWriter(scriptFile);\r\n    if (Shell.WINDOWS) {\r\n        fileWriter.println(\"@echo \\\"Running testscript for delayed kill\\\"\");\r\n        fileWriter.println(\"@echo \\\"Writing pid to start file\\\"\");\r\n        fileWriter.println(\"@echo \" + cId + \">> \" + processStartFile);\r\n        fileWriter.println(\"@pause\");\r\n    } else {\r\n        fileWriter.write(\"#!/bin/bash\\n\\n\");\r\n        fileWriter.write(\"echo \\\"Running testscript for delayed kill\\\"\\n\");\r\n        fileWriter.write(\"hello=\\\"Got SIGTERM\\\"\\n\");\r\n        fileWriter.write(\"umask 0\\n\");\r\n        fileWriter.write(\"trap \\\"echo $hello >> \" + processStartFile + \"\\\" SIGTERM\\n\");\r\n        fileWriter.write(\"echo \\\"Writing pid to start file\\\"\\n\");\r\n        fileWriter.write(\"echo $$ >> \" + processStartFile + \"\\n\");\r\n        fileWriter.write(\"while true; do\\ndate >> /dev/null;\\n done\\n\");\r\n    }\r\n    fileWriter.close();\r\n    return scriptFile;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setup() throws UnsupportedFileSystemException\n{\r\n    localFS = FileContext.getLocalFSFileContext();\r\n    tmpDir.mkdirs();\r\n    logsDir.mkdirs();\r\n    remoteLogsDir.mkdirs();\r\n    nmLocalDir.mkdirs();\r\n    syncBarrier = new CyclicBarrier(2);\r\n    updateBarrier = new CyclicBarrier(2);\r\n    resyncThreadCount = new AtomicInteger(0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDown() throws IOException, InterruptedException\n{\r\n    localFS.delete(new Path(basedir.getPath()), true);\r\n    assertionFailedInThread.set(false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testKillContainersOnResync",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testKillContainersOnResync() throws IOException, InterruptedException, YarnException\n{\r\n    TestNodeManager1 nm = new TestNodeManager1(false);\r\n    testContainerPreservationOnResyncImpl(nm, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testPreserveContainersOnResyncKeepingContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testPreserveContainersOnResyncKeepingContainers() throws IOException, InterruptedException, YarnException\n{\r\n    TestNodeManager1 nm = new TestNodeManager1(true);\r\n    testContainerPreservationOnResyncImpl(nm, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testContainerPreservationOnResyncImpl",
  "errType" : [ "BrokenBarrierException" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testContainerPreservationOnResyncImpl(TestNodeManager1 nm, boolean isWorkPreservingRestartEnabled) throws IOException, YarnException, InterruptedException\n{\r\n    int port = ServerSocketUtil.getPort(49153, 10);\r\n    YarnConfiguration conf = createNMConfig(port);\r\n    conf.setBoolean(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED, isWorkPreservingRestartEnabled);\r\n    try {\r\n        nm.init(conf);\r\n        nm.start();\r\n        ContainerId cId = TestNodeManagerShutdown.createContainerId();\r\n        TestNodeManagerShutdown.startContainer(nm, cId, localFS, tmpDir, processStartFile, port);\r\n        nm.setExistingContainerId(cId);\r\n        Assert.assertEquals(1, ((TestNodeManager1) nm).getNMRegistrationCount());\r\n        nm.getNMDispatcher().getEventHandler().handle(resyncEvent);\r\n        try {\r\n            syncBarrier.await();\r\n        } catch (BrokenBarrierException e) {\r\n        }\r\n        Assert.assertEquals(2, ((TestNodeManager1) nm).getNMRegistrationCount());\r\n        Assert.assertTrue(nm.getNMContext().getApplications().containsKey(cId.getApplicationAttemptId().getApplicationId()));\r\n        Assert.assertFalse(assertionFailedInThread.get());\r\n    } finally {\r\n        nm.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testNMMultipleResyncEvent",
  "errType" : [ "BrokenBarrierException" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testNMMultipleResyncEvent() throws IOException, InterruptedException\n{\r\n    TestNodeManager1 nm = new TestNodeManager1(false);\r\n    YarnConfiguration conf = createNMConfig();\r\n    int resyncEventCount = 4;\r\n    try {\r\n        nm.init(conf);\r\n        nm.start();\r\n        Assert.assertEquals(1, nm.getNMRegistrationCount());\r\n        for (int i = 0; i < resyncEventCount; i++) {\r\n            nm.getNMDispatcher().getEventHandler().handle(resyncEvent);\r\n        }\r\n        DrainDispatcher dispatcher = (DrainDispatcher) nm.getNMDispatcher();\r\n        dispatcher.await();\r\n        LOG.info(\"NM dispatcher drained\");\r\n        try {\r\n            syncBarrier.await();\r\n        } catch (BrokenBarrierException e) {\r\n        }\r\n        LOG.info(\"Barrier wait done for the resync thread\");\r\n        Assert.assertEquals(2, nm.getNMRegistrationCount());\r\n        Assert.assertFalse(\"NM shutdown called.\", isNMShutdownCalled.get());\r\n    } finally {\r\n        nm.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testNMshutdownWhenResyncThrowException",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testNMshutdownWhenResyncThrowException() throws IOException, InterruptedException, YarnException\n{\r\n    NodeManager nm = new TestNodeManager3();\r\n    YarnConfiguration conf = createNMConfig();\r\n    try {\r\n        nm.init(conf);\r\n        nm.start();\r\n        Assert.assertEquals(1, ((TestNodeManager3) nm).getNMRegistrationCount());\r\n        nm.getNMDispatcher().getEventHandler().handle(new NodeManagerEvent(NodeManagerEventType.RESYNC));\r\n        synchronized (isNMShutdownCalled) {\r\n            while (!isNMShutdownCalled.get()) {\r\n                try {\r\n                    isNMShutdownCalled.wait();\r\n                } catch (InterruptedException e) {\r\n                }\r\n            }\r\n        }\r\n        Assert.assertTrue(\"NM shutdown not called.\", isNMShutdownCalled.get());\r\n    } finally {\r\n        nm.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testContainerResourceIncreaseIsSynchronizedWithRMResync",
  "errType" : [ "BrokenBarrierException" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testContainerResourceIncreaseIsSynchronizedWithRMResync() throws IOException, InterruptedException, YarnException\n{\r\n    NodeManager nm = new TestNodeManager4();\r\n    YarnConfiguration conf = createNMConfig();\r\n    conf.setBoolean(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED, true);\r\n    try {\r\n        nm.init(conf);\r\n        nm.start();\r\n        ((TestNodeManager4) nm).startContainer();\r\n        ((TestNodeManager4) nm).updateContainerResource();\r\n        LOG.info(\"Sending out RESYNC event\");\r\n        nm.getNMDispatcher().getEventHandler().handle(new NodeManagerEvent(NodeManagerEventType.RESYNC));\r\n        try {\r\n            syncBarrier.await();\r\n        } catch (BrokenBarrierException e) {\r\n            e.printStackTrace();\r\n        }\r\n        Assert.assertFalse(assertionFailedInThread.get());\r\n    } finally {\r\n        nm.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testNMSentContainerStatusOnResync",
  "errType" : [ "AssertionError", "AssertionError", "AssertionError", "BrokenBarrierException" ],
  "containingMethodsNum" : 27,
  "sourceCodeText" : "void testNMSentContainerStatusOnResync() throws Exception\n{\r\n    final ContainerStatus testCompleteContainer = TestNodeStatusUpdater.createContainerStatus(2, ContainerState.COMPLETE);\r\n    final Container container = TestNodeStatusUpdater.getMockContainer(testCompleteContainer);\r\n    NMContainerStatus report = createNMContainerStatus(2, ContainerState.COMPLETE);\r\n    when(container.getNMContainerStatus()).thenReturn(report);\r\n    NodeManager nm = new NodeManager() {\r\n\r\n        int registerCount = 0;\r\n\r\n        @Override\r\n        protected NodeStatusUpdater createNodeStatusUpdater(Context context, Dispatcher dispatcher, NodeHealthCheckerService healthChecker) {\r\n            return new TestNodeStatusUpdaterResync(context, dispatcher, healthChecker, metrics) {\r\n\r\n                @Override\r\n                protected ResourceTracker createResourceTracker() {\r\n                    return new MockResourceTracker() {\r\n\r\n                        @Override\r\n                        public RegisterNodeManagerResponse registerNodeManager(RegisterNodeManagerRequest request) throws YarnException, IOException {\r\n                            if (registerCount == 0) {\r\n                                try {\r\n                                    Assert.assertEquals(0, request.getNMContainerStatuses().size());\r\n                                } catch (AssertionError error) {\r\n                                    error.printStackTrace();\r\n                                    assertionFailedInThread.set(true);\r\n                                }\r\n                                getNMContext().getContainers().put(testCompleteContainer.getContainerId(), container);\r\n                                getNMContext().getApplications().put(testCompleteContainer.getContainerId().getApplicationAttemptId().getApplicationId(), mock(Application.class));\r\n                            } else {\r\n                                List<NMContainerStatus> statuses = request.getNMContainerStatuses();\r\n                                try {\r\n                                    Assert.assertEquals(1, statuses.size());\r\n                                    Assert.assertEquals(testCompleteContainer.getContainerId(), statuses.get(0).getContainerId());\r\n                                } catch (AssertionError error) {\r\n                                    error.printStackTrace();\r\n                                    assertionFailedInThread.set(true);\r\n                                }\r\n                            }\r\n                            registerCount++;\r\n                            return super.registerNodeManager(request);\r\n                        }\r\n\r\n                        @Override\r\n                        public NodeHeartbeatResponse nodeHeartbeat(NodeHeartbeatRequest request) {\r\n                            List<ContainerStatus> statuses = request.getNodeStatus().getContainersStatuses();\r\n                            try {\r\n                                Assert.assertEquals(1, statuses.size());\r\n                                Assert.assertEquals(testCompleteContainer.getContainerId(), statuses.get(0).getContainerId());\r\n                            } catch (AssertionError error) {\r\n                                error.printStackTrace();\r\n                                assertionFailedInThread.set(true);\r\n                            }\r\n                            return YarnServerBuilderUtils.newNodeHeartbeatResponse(1, NodeAction.RESYNC, null, null, null, null, 1000L);\r\n                        }\r\n                    };\r\n                }\r\n            };\r\n        }\r\n    };\r\n    YarnConfiguration conf = createNMConfig();\r\n    try {\r\n        nm.init(conf);\r\n        nm.start();\r\n        try {\r\n            syncBarrier.await();\r\n        } catch (BrokenBarrierException e) {\r\n        }\r\n        Assert.assertFalse(assertionFailedInThread.get());\r\n    } finally {\r\n        nm.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 5,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createNMConfig",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "YarnConfiguration createNMConfig(int port) throws IOException\n{\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.setInt(YarnConfiguration.NM_PMEM_MB, 5 * 1024);\r\n    conf.set(YarnConfiguration.NM_ADDRESS, \"127.0.0.1:\" + port);\r\n    conf.set(YarnConfiguration.NM_LOCALIZER_ADDRESS, \"127.0.0.1:\" + ServerSocketUtil.getPort(49155, 10));\r\n    conf.set(YarnConfiguration.NM_WEBAPP_ADDRESS, \"127.0.0.1:\" + ServerSocketUtil.getPort(YarnConfiguration.DEFAULT_NM_WEBAPP_PORT, 10));\r\n    conf.set(YarnConfiguration.NM_LOG_DIRS, logsDir.getAbsolutePath());\r\n    conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR, remoteLogsDir.getAbsolutePath());\r\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, nmLocalDir.getAbsolutePath());\r\n    conf.setLong(YarnConfiguration.NM_LOG_RETAIN_SECONDS, 1);\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createNMConfig",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnConfiguration createNMConfig() throws IOException\n{\r\n    return createNMConfig(ServerSocketUtil.getPort(49156, 10));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createNMContainerStatus",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "NMContainerStatus createNMContainerStatus(int id, ContainerState containerState)\n{\r\n    ApplicationId applicationId = ApplicationId.newInstance(0, 1);\r\n    ApplicationAttemptId applicationAttemptId = ApplicationAttemptId.newInstance(applicationId, 1);\r\n    ContainerId containerId = ContainerId.newContainerId(applicationAttemptId, id);\r\n    NMContainerStatus containerReport = NMContainerStatus.newInstance(containerId, 0, containerState, Resource.newInstance(1024, 1), \"recover container\", 0, Priority.newInstance(10), 0);\r\n    return containerReport;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setup()\n{\r\n    testRootDir.mkdirs();\r\n    testLogDir.mkdir();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDown()\n{\r\n    FileUtil.fullyDelete(testRootDir);\r\n    FileUtil.fullyDelete(testLogDir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "createNodeHealthCheckerService",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeHealthCheckerService createNodeHealthCheckerService()\n{\r\n    LocalDirsHandlerService dirsHandler = new LocalDirsHandlerService();\r\n    return new NodeHealthCheckerService(dirsHandler);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "startNMWebAppServer",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "int startNMWebAppServer(String webAddr)\n{\r\n    Configuration conf = new Configuration();\r\n    Context nmContext = new NodeManager.NMContext(null, null, null, null, null, false, conf);\r\n    ResourceView resourceView = new ResourceView() {\r\n\r\n        @Override\r\n        public long getVmemAllocatedForContainers() {\r\n            return 0;\r\n        }\r\n\r\n        @Override\r\n        public long getPmemAllocatedForContainers() {\r\n            return 0;\r\n        }\r\n\r\n        @Override\r\n        public long getVCoresAllocatedForContainers() {\r\n            return 0;\r\n        }\r\n\r\n        @Override\r\n        public boolean isVmemCheckEnabled() {\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        public boolean isPmemCheckEnabled() {\r\n            return true;\r\n        }\r\n    };\r\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, testRootDir.getAbsolutePath());\r\n    conf.set(YarnConfiguration.NM_LOG_DIRS, testLogDir.getAbsolutePath());\r\n    NodeHealthCheckerService healthChecker = createNodeHealthCheckerService();\r\n    healthChecker.init(conf);\r\n    LocalDirsHandlerService dirsHandler = healthChecker.getDiskHandler();\r\n    conf.set(YarnConfiguration.NM_WEBAPP_ADDRESS, webAddr);\r\n    WebServer server = new WebServer(nmContext, resourceView, new ApplicationACLsManager(conf), dirsHandler);\r\n    try {\r\n        server.init(conf);\r\n        server.start();\r\n        return server.getPort();\r\n    } finally {\r\n        server.stop();\r\n        healthChecker.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNMWebAppWithOutPort",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testNMWebAppWithOutPort() throws IOException\n{\r\n    int port = startNMWebAppServer(\"0.0.0.0\");\r\n    validatePortVal(port);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "validatePortVal",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void validatePortVal(int portVal)\n{\r\n    Assert.assertTrue(\"Port is not updated\", portVal > 0);\r\n    Assert.assertTrue(\"Port is default \" + YarnConfiguration.DEFAULT_NM_PORT, portVal != YarnConfiguration.DEFAULT_NM_PORT);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNMWebAppWithEphemeralPort",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testNMWebAppWithEphemeralPort() throws IOException\n{\r\n    int port = startNMWebAppServer(\"0.0.0.0:0\");\r\n    validatePortVal(port);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNMWebApp",
  "errType" : null,
  "containingMethodsNum" : 26,
  "sourceCodeText" : "void testNMWebApp() throws IOException, YarnException\n{\r\n    Configuration conf = new Configuration();\r\n    Context nmContext = new NodeManager.NMContext(null, null, null, null, null, false, conf);\r\n    ResourceView resourceView = new ResourceView() {\r\n\r\n        @Override\r\n        public long getVmemAllocatedForContainers() {\r\n            return 0;\r\n        }\r\n\r\n        @Override\r\n        public long getPmemAllocatedForContainers() {\r\n            return 0;\r\n        }\r\n\r\n        @Override\r\n        public long getVCoresAllocatedForContainers() {\r\n            return 0;\r\n        }\r\n\r\n        @Override\r\n        public boolean isVmemCheckEnabled() {\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        public boolean isPmemCheckEnabled() {\r\n            return true;\r\n        }\r\n    };\r\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, testRootDir.getAbsolutePath());\r\n    conf.set(YarnConfiguration.NM_LOG_DIRS, testLogDir.getAbsolutePath());\r\n    NodeHealthCheckerService healthChecker = createNodeHealthCheckerService();\r\n    healthChecker.init(conf);\r\n    LocalDirsHandlerService dirsHandler = healthChecker.getDiskHandler();\r\n    WebServer server = new WebServer(nmContext, resourceView, new ApplicationACLsManager(conf), dirsHandler);\r\n    server.init(conf);\r\n    server.start();\r\n    RecordFactory recordFactory = RecordFactoryProvider.getRecordFactory(conf);\r\n    Dispatcher dispatcher = new AsyncDispatcher();\r\n    String user = \"nobody\";\r\n    long clusterTimeStamp = 1234;\r\n    ApplicationId appId = BuilderUtils.newApplicationId(recordFactory, clusterTimeStamp, 1);\r\n    Application app = mock(Application.class);\r\n    when(app.getUser()).thenReturn(user);\r\n    when(app.getAppId()).thenReturn(appId);\r\n    nmContext.getApplications().put(appId, app);\r\n    ApplicationAttemptId appAttemptId = BuilderUtils.newApplicationAttemptId(appId, 1);\r\n    ContainerId container1 = BuilderUtils.newContainerId(recordFactory, appId, appAttemptId, 0);\r\n    ContainerId container2 = BuilderUtils.newContainerId(recordFactory, appId, appAttemptId, 1);\r\n    NodeManagerMetrics metrics = mock(NodeManagerMetrics.class);\r\n    NMStateStoreService stateStore = new NMNullStateStoreService();\r\n    for (ContainerId containerId : new ContainerId[] { container1, container2 }) {\r\n        ContainerLaunchContext launchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class);\r\n        long currentTime = System.currentTimeMillis();\r\n        Token containerToken = BuilderUtils.newContainerToken(containerId, 0, \"127.0.0.1\", 1234, user, BuilderUtils.newResource(1024, 1), currentTime + 10000L, 123, \"password\".getBytes(), currentTime);\r\n        Context context = mock(Context.class);\r\n        Container container = new ContainerImpl(conf, dispatcher, launchContext, null, metrics, BuilderUtils.newContainerTokenIdentifier(containerToken), context) {\r\n\r\n            @Override\r\n            public ContainerState getContainerState() {\r\n                return ContainerState.RUNNING;\r\n            }\r\n        };\r\n        nmContext.getContainers().put(containerId, container);\r\n        ApplicationId applicationId = containerId.getApplicationAttemptId().getApplicationId();\r\n        nmContext.getApplications().get(applicationId).getContainers().put(containerId, container);\r\n        writeContainerLogs(nmContext, containerId, dirsHandler);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "writeContainerLogs",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void writeContainerLogs(Context nmContext, ContainerId containerId, LocalDirsHandlerService dirsHandler) throws IOException, YarnException\n{\r\n    File containerLogDir = ContainerLogsUtils.getContainerLogDirs(containerId, dirsHandler).get(0);\r\n    containerLogDir.mkdirs();\r\n    for (String fileType : new String[] { \"stdout\", \"stderr\", \"syslog\" }) {\r\n        Writer writer = new FileWriter(new File(containerLogDir, fileType));\r\n        writer.write(containerId.toString() + \"\\n Hello \" + fileType + \"!\");\r\n        writer.close();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setup() throws IOException\n{\r\n    Function<String[], CommandExecutor> commandExecutorProvider = (String[] cmd) -> mockCommandExecutor;\r\n    discoverer = new VEDeviceDiscoverer(udevUtil);\r\n    discoverer.setCommandExecutorProvider(commandExecutorProvider);\r\n    setupTestDirectory();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "teardown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void teardown() throws IOException\n{\r\n    if (testFolder != null) {\r\n        File f = new File(testFolder);\r\n        FileUtils.deleteDirectory(f);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "testDetectSingleOnlineDevice",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testDetectSingleOnlineDevice() throws IOException\n{\r\n    createVeSlotFile(0);\r\n    createOsStateFile(0);\r\n    when(mockCommandExecutor.getOutput()).thenReturn(\"8:1:character special file\");\r\n    when(udevUtil.getSysPath(anyInt(), anyChar())).thenReturn(testFolder);\r\n    Set<Device> devices = discoverer.getDevicesFromPath(testFolder);\r\n    assertEquals(\"Number of devices\", 1, devices.size());\r\n    Device device = devices.iterator().next();\r\n    assertEquals(\"Device ID\", 0, device.getId());\r\n    assertEquals(\"Major number\", 8, device.getMajorNumber());\r\n    assertEquals(\"Minor number\", 1, device.getMinorNumber());\r\n    assertEquals(\"Status\", \"ONLINE\", device.getStatus());\r\n    assertTrue(\"Device is not healthy\", device.isHealthy());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "testDetectMultipleOnlineDevices",
  "errType" : null,
  "containingMethodsNum" : 28,
  "sourceCodeText" : "void testDetectMultipleOnlineDevices() throws IOException\n{\r\n    createVeSlotFile(0);\r\n    createVeSlotFile(1);\r\n    createVeSlotFile(2);\r\n    createOsStateFile(0);\r\n    when(mockCommandExecutor.getOutput()).thenReturn(\"8:1:character special file\", \"9:1:character special file\", \"a:1:character special file\");\r\n    when(udevUtil.getSysPath(anyInt(), anyChar())).thenReturn(testFolder);\r\n    Set<Device> devices = discoverer.getDevicesFromPath(testFolder);\r\n    assertEquals(\"Number of devices\", 3, devices.size());\r\n    List<Device> devicesList = Lists.newArrayList(devices);\r\n    devicesList.sort(DEVICE_COMPARATOR);\r\n    Device device0 = devicesList.get(0);\r\n    assertEquals(\"Device ID\", 0, device0.getId());\r\n    assertEquals(\"Major number\", 8, device0.getMajorNumber());\r\n    assertEquals(\"Minor number\", 1, device0.getMinorNumber());\r\n    assertEquals(\"Status\", \"ONLINE\", device0.getStatus());\r\n    assertTrue(\"Device is not healthy\", device0.isHealthy());\r\n    Device device1 = devicesList.get(1);\r\n    assertEquals(\"Device ID\", 1, device1.getId());\r\n    assertEquals(\"Major number\", 9, device1.getMajorNumber());\r\n    assertEquals(\"Minor number\", 1, device1.getMinorNumber());\r\n    assertEquals(\"Status\", \"ONLINE\", device1.getStatus());\r\n    assertTrue(\"Device is not healthy\", device1.isHealthy());\r\n    Device device2 = devicesList.get(2);\r\n    assertEquals(\"Device ID\", 2, device2.getId());\r\n    assertEquals(\"Major number\", 10, device2.getMajorNumber());\r\n    assertEquals(\"Minor number\", 1, device2.getMinorNumber());\r\n    assertEquals(\"Status\", \"ONLINE\", device2.getStatus());\r\n    assertTrue(\"Device is not healthy\", device2.isHealthy());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "testNegativeDeviceStateNumber",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testNegativeDeviceStateNumber() throws IOException\n{\r\n    createVeSlotFile(0);\r\n    createOsStateFile(-1);\r\n    when(mockCommandExecutor.getOutput()).thenReturn(\"8:1:character special file\");\r\n    when(udevUtil.getSysPath(anyInt(), anyChar())).thenReturn(testFolder);\r\n    Set<Device> devices = discoverer.getDevicesFromPath(testFolder);\r\n    assertEquals(\"Number of devices\", 1, devices.size());\r\n    Device device = devices.iterator().next();\r\n    assertEquals(\"Device ID\", 0, device.getId());\r\n    assertEquals(\"Major number\", 8, device.getMajorNumber());\r\n    assertEquals(\"Minor number\", 1, device.getMinorNumber());\r\n    assertEquals(\"Status\", \"Unknown (-1)\", device.getStatus());\r\n    assertFalse(\"Device should not be healthy\", device.isHealthy());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "testDeviceStateNumberTooHigh",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testDeviceStateNumberTooHigh() throws IOException\n{\r\n    createVeSlotFile(0);\r\n    createOsStateFile(5);\r\n    when(mockCommandExecutor.getOutput()).thenReturn(\"8:1:character special file\");\r\n    when(udevUtil.getSysPath(anyInt(), anyChar())).thenReturn(testFolder);\r\n    Set<Device> devices = discoverer.getDevicesFromPath(testFolder);\r\n    assertEquals(\"Number of devices\", 1, devices.size());\r\n    Device device = devices.iterator().next();\r\n    assertEquals(\"Device ID\", 0, device.getId());\r\n    assertEquals(\"Major number\", 8, device.getMajorNumber());\r\n    assertEquals(\"Minor number\", 1, device.getMinorNumber());\r\n    assertEquals(\"Status\", \"Unknown (5)\", device.getStatus());\r\n    assertFalse(\"Device should not be healthy\", device.isHealthy());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "testDeviceNumberFromMajorAndMinor",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testDeviceNumberFromMajorAndMinor() throws IOException\n{\r\n    createVeSlotFile(0);\r\n    createVeSlotFile(1);\r\n    createVeSlotFile(2);\r\n    createOsStateFile(0);\r\n    when(mockCommandExecutor.getOutput()).thenReturn(\"10:1:character special file\", \"1d:2:character special file\", \"4:3c:character special file\");\r\n    when(udevUtil.getSysPath(anyInt(), anyChar())).thenReturn(testFolder);\r\n    Set<Device> devices = discoverer.getDevicesFromPath(testFolder);\r\n    List<Device> devicesList = Lists.newArrayList(devices);\r\n    devicesList.sort(DEVICE_COMPARATOR);\r\n    Device device0 = devicesList.get(0);\r\n    assertEquals(\"Major number\", 16, device0.getMajorNumber());\r\n    assertEquals(\"Minor number\", 1, device0.getMinorNumber());\r\n    Device device1 = devicesList.get(1);\r\n    assertEquals(\"Major number\", 29, device1.getMajorNumber());\r\n    assertEquals(\"Minor number\", 2, device1.getMinorNumber());\r\n    Device device2 = devicesList.get(2);\r\n    assertEquals(\"Major number\", 4, device2.getMajorNumber());\r\n    assertEquals(\"Minor number\", 60, device2.getMinorNumber());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "testNonVESlotFilesAreSkipped",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testNonVESlotFilesAreSkipped() throws IOException\n{\r\n    createVeSlotFile(0);\r\n    createOsStateFile(0);\r\n    createFile(\"abcde\");\r\n    createFile(\"vexlot\");\r\n    createFile(\"xyzveslot\");\r\n    when(mockCommandExecutor.getOutput()).thenReturn(\"8:1:character special file\", \"9:1:character special file\", \"10:1:character special file\", \"11:1:character special file\", \"12:1:character special file\");\r\n    when(udevUtil.getSysPath(anyInt(), anyChar())).thenReturn(testFolder);\r\n    Set<Device> devices = discoverer.getDevicesFromPath(testFolder);\r\n    assertEquals(\"Number of devices\", 1, devices.size());\r\n    Device device = devices.iterator().next();\r\n    assertEquals(\"Device ID\", 0, device.getId());\r\n    assertEquals(\"Major number\", 8, device.getMajorNumber());\r\n    assertEquals(\"Minor number\", 1, device.getMinorNumber());\r\n    assertEquals(\"Status\", \"ONLINE\", device.getStatus());\r\n    assertTrue(\"Device is not healthy\", device.isHealthy());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "testNonBlockOrCharFilesAreRejected",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testNonBlockOrCharFilesAreRejected() throws IOException\n{\r\n    expected.expect(IllegalArgumentException.class);\r\n    expected.expectMessage(\"File is neither a char nor block device\");\r\n    createVeSlotFile(0);\r\n    when(mockCommandExecutor.getOutput()).thenReturn(\"0:0:regular file\");\r\n    discoverer.getDevicesFromPath(testFolder);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "setupTestDirectory",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setupTestDirectory() throws IOException\n{\r\n    String path = \"target/temp/\" + TestVEDeviceDiscoverer.class.getName();\r\n    testFolder = new File(path).getAbsolutePath();\r\n    File f = new File(testFolder);\r\n    FileUtils.deleteDirectory(f);\r\n    if (!f.mkdirs()) {\r\n        throw new RuntimeException(\"Could not create directory: \" + f.getAbsolutePath());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "createVeSlotFile",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void createVeSlotFile(int slot) throws IOException\n{\r\n    Files.createFile(Paths.get(testFolder, \"veslot\" + String.valueOf(slot)));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "createFile",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void createFile(String name) throws IOException\n{\r\n    Files.createFile(Paths.get(testFolder, name));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\com\\nec",
  "methodName" : "createOsStateFile",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void createOsStateFile(int state) throws IOException\n{\r\n    Path path = Paths.get(testFolder, \"os_state\");\r\n    Files.createFile(path);\r\n    Files.write(path, new byte[] { (byte) state });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\health",
  "methodName" : "testUnhealthy",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testUnhealthy()\n{\r\n    ExceptionReporter reporter = new ExceptionReporter();\r\n    assertThat(reporter.isHealthy()).isTrue();\r\n    assertThat(reporter.getLastHealthReportTime()).isZero();\r\n    String message = \"test\";\r\n    Exception exception = new Exception(message);\r\n    reporter.reportException(exception);\r\n    assertThat(reporter.isHealthy()).isFalse();\r\n    assertThat(reporter.getHealthReport()).isEqualTo(message);\r\n    assertThat(reporter.getLastHealthReportTime()).isNotEqualTo(0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "getRegisterRequestInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DeviceRegisterRequest getRegisterRequestInfo()\n{\r\n    return DeviceRegisterRequest.Builder.newInstance().setResourceName(\"cmpA.com/hdwA\").build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "getDevices",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<Device> getDevices()\n{\r\n    TreeSet<Device> r = new TreeSet<>();\r\n    r.add(Device.Builder.newInstance().setId(0).setDevPath(\"/dev/hdwA0\").setMajorNumber(243).setMinorNumber(0).setBusID(\"0000:65:00.0\").setHealthy(true).build());\r\n    return r;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "onDevicesAllocated",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "DeviceRuntimeSpec onDevicesAllocated(Set<Device> allocatedDevices, YarnRuntimeType yarnRuntime) throws Exception\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "onDevicesReleased",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void onDevicesReleased(Set<Device> allocatedDevices)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "allocateDevices",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<Device> allocateDevices(Set<Device> availableDevices, int count, Map<String, String> env)\n{\r\n    Set<Device> allocated = new TreeSet<Device>();\r\n    int number = 0;\r\n    for (Device d : availableDevices) {\r\n        allocated.add(d);\r\n        number++;\r\n        if (number == count) {\r\n            break;\r\n        }\r\n    }\r\n    return allocated;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testExceptionThrownWithNoContainersToKill",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testExceptionThrownWithNoContainersToKill() throws Exception\n{\r\n    Context context = mock(Context.class);\r\n    when(context.getContainers()).thenReturn(new ConcurrentHashMap<>(0));\r\n    CGroupsHandler cGroupsHandler = mock(CGroupsHandler.class);\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, \"\", CGROUP_PARAM_MEMORY_OOM_CONTROL)).thenReturn(\"under_oom 1\").thenReturn(\"under_oom 0\");\r\n    DefaultOOMHandler handler = new DefaultOOMHandler(context, false) {\r\n\r\n        @Override\r\n        protected CGroupsHandler getCGroupsHandler() {\r\n            return cGroupsHandler;\r\n        }\r\n    };\r\n    handler.run();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testExceptionThrownWithNoRunningContainersToKill",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testExceptionThrownWithNoRunningContainersToKill() throws Exception\n{\r\n    ConcurrentHashMap<ContainerId, Container> containers = new ConcurrentHashMap<>();\r\n    Container c1 = createContainer(1, true, 1L, false);\r\n    containers.put(c1.getContainerId(), c1);\r\n    Context context = mock(Context.class);\r\n    when(context.getContainers()).thenReturn(containers);\r\n    CGroupsHandler cGroupsHandler = mock(CGroupsHandler.class);\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, \"\", CGROUP_PARAM_MEMORY_OOM_CONTROL)).thenReturn(\"under_oom 1\").thenReturn(\"under_oom 0\");\r\n    DefaultOOMHandler handler = new DefaultOOMHandler(context, false) {\r\n\r\n        @Override\r\n        protected CGroupsHandler getCGroupsHandler() {\r\n            return cGroupsHandler;\r\n        }\r\n    };\r\n    handler.run();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testBothRunningGuaranteedContainersOverLimitUponOOM",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testBothRunningGuaranteedContainersOverLimitUponOOM() throws Exception\n{\r\n    ConcurrentHashMap<ContainerId, Container> containers = new ConcurrentHashMap<>();\r\n    Container c1 = createContainer(1, true, 1L, true);\r\n    containers.put(c1.getContainerId(), c1);\r\n    Container c2 = createContainer(2, true, 2L, true);\r\n    containers.put(c2.getContainerId(), c2);\r\n    ContainerExecutor ex = createContainerExecutor(containers);\r\n    Context context = mock(Context.class);\r\n    when(context.getContainers()).thenReturn(containers);\r\n    when(context.getContainerExecutor()).thenReturn(ex);\r\n    CGroupsHandler cGroupsHandler = mock(CGroupsHandler.class);\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, \"\", CGROUP_PARAM_MEMORY_OOM_CONTROL)).thenReturn(\"under_oom 1\").thenReturn(\"under_oom 0\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PROCS_FILE)).thenReturn(\"1234\").thenReturn(\"\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PARAM_MEMORY_USAGE_BYTES)).thenReturn(getMB(11));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES)).thenReturn(getMB(11));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PROCS_FILE)).thenReturn(\"1235\").thenReturn(\"\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PARAM_MEMORY_USAGE_BYTES)).thenReturn(getMB(11));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES)).thenReturn(getMB(11));\r\n    DefaultOOMHandler handler = new DefaultOOMHandler(context, false) {\r\n\r\n        @Override\r\n        protected CGroupsHandler getCGroupsHandler() {\r\n            return cGroupsHandler;\r\n        }\r\n    };\r\n    handler.run();\r\n    verify(ex, times(1)).signalContainer(new ContainerSignalContext.Builder().setPid(\"1235\").setContainer(c2).setSignal(ContainerExecutor.Signal.KILL).build());\r\n    verify(ex, times(1)).signalContainer(any());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testOneGuaranteedContainerOverLimitUponOOM",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testOneGuaranteedContainerOverLimitUponOOM() throws Exception\n{\r\n    ConcurrentHashMap<ContainerId, Container> containers = new ConcurrentHashMap<>();\r\n    Container c1 = createContainer(1, true, 2L, true);\r\n    containers.put(c1.getContainerId(), c1);\r\n    Container c2 = createContainer(2, true, 1L, true);\r\n    containers.put(c2.getContainerId(), c2);\r\n    ContainerExecutor ex = createContainerExecutor(containers);\r\n    Context context = mock(Context.class);\r\n    when(context.getContainers()).thenReturn(containers);\r\n    when(context.getContainerExecutor()).thenReturn(ex);\r\n    CGroupsHandler cGroupsHandler = mock(CGroupsHandler.class);\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, \"\", CGROUP_PARAM_MEMORY_OOM_CONTROL)).thenReturn(\"under_oom 1\").thenReturn(\"under_oom 0\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PROCS_FILE)).thenReturn(\"1234\").thenReturn(\"\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PARAM_MEMORY_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PROCS_FILE)).thenReturn(\"1235\").thenReturn(\"\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PARAM_MEMORY_USAGE_BYTES)).thenReturn(getMB(11));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES)).thenReturn(getMB(11));\r\n    DefaultOOMHandler handler = new DefaultOOMHandler(context, false) {\r\n\r\n        @Override\r\n        protected CGroupsHandler getCGroupsHandler() {\r\n            return cGroupsHandler;\r\n        }\r\n    };\r\n    handler.run();\r\n    verify(ex, times(1)).signalContainer(new ContainerSignalContext.Builder().setPid(\"1235\").setContainer(c2).setSignal(ContainerExecutor.Signal.KILL).build());\r\n    verify(ex, times(1)).signalContainer(any());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testNoGuaranteedContainerOverLimitOOM",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testNoGuaranteedContainerOverLimitOOM() throws Exception\n{\r\n    ConcurrentHashMap<ContainerId, Container> containers = new ConcurrentHashMap<>();\r\n    Container c1 = createContainer(1, true, 1L, true);\r\n    containers.put(c1.getContainerId(), c1);\r\n    Container c2 = createContainer(2, true, 2L, true);\r\n    containers.put(c2.getContainerId(), c2);\r\n    ContainerExecutor ex = createContainerExecutor(containers);\r\n    Context context = mock(Context.class);\r\n    when(context.getContainers()).thenReturn(containers);\r\n    when(context.getContainerExecutor()).thenReturn(ex);\r\n    CGroupsHandler cGroupsHandler = mock(CGroupsHandler.class);\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, \"\", CGROUP_PARAM_MEMORY_OOM_CONTROL)).thenReturn(\"under_oom 1\").thenReturn(\"under_oom 0\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PROCS_FILE)).thenReturn(\"1234\").thenReturn(\"\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PARAM_MEMORY_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PROCS_FILE)).thenReturn(\"1235\").thenReturn(\"\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PARAM_MEMORY_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES)).thenReturn(getMB(9));\r\n    DefaultOOMHandler handler = new DefaultOOMHandler(context, false) {\r\n\r\n        @Override\r\n        protected CGroupsHandler getCGroupsHandler() {\r\n            return cGroupsHandler;\r\n        }\r\n    };\r\n    handler.run();\r\n    verify(ex, times(1)).signalContainer(new ContainerSignalContext.Builder().setPid(\"1235\").setContainer(c2).setSignal(ContainerExecutor.Signal.KILL).build());\r\n    verify(ex, times(1)).signalContainer(any());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testKillOnlyRunningContainersUponOOM",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testKillOnlyRunningContainersUponOOM() throws Exception\n{\r\n    ConcurrentHashMap<ContainerId, Container> containers = new ConcurrentHashMap<>();\r\n    Container c1 = createContainer(1, false, 1L, false);\r\n    containers.put(c1.getContainerId(), c1);\r\n    Container c2 = createContainer(2, false, 2L, true);\r\n    containers.put(c2.getContainerId(), c2);\r\n    ContainerExecutor ex = createContainerExecutor(containers);\r\n    Context context = mock(Context.class);\r\n    when(context.getContainers()).thenReturn(containers);\r\n    when(context.getContainerExecutor()).thenReturn(ex);\r\n    CGroupsHandler cGroupsHandler = mock(CGroupsHandler.class);\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, \"\", CGROUP_PARAM_MEMORY_OOM_CONTROL)).thenReturn(\"under_oom 1\").thenReturn(\"under_oom 0\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PROCS_FILE)).thenReturn(\"1234\").thenReturn(\"\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PARAM_MEMORY_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES)).thenReturn(getMB(9));\r\n    DefaultOOMHandler handler = new DefaultOOMHandler(context, false) {\r\n\r\n        @Override\r\n        protected CGroupsHandler getCGroupsHandler() {\r\n            return cGroupsHandler;\r\n        }\r\n    };\r\n    handler.run();\r\n    verify(ex, times(1)).signalContainer(new ContainerSignalContext.Builder().setPid(\"1235\").setContainer(c2).setSignal(ContainerExecutor.Signal.KILL).build());\r\n    verify(ex, times(1)).signalContainer(any());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testKillOpportunisticContainerWithKillFailuresUponOOM",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testKillOpportunisticContainerWithKillFailuresUponOOM() throws Exception\n{\r\n    ConcurrentHashMap<ContainerId, Container> containers = new ConcurrentHashMap<>();\r\n    Container c1 = createContainer(1, false, 1L, true);\r\n    containers.put(c1.getContainerId(), c1);\r\n    Container c2 = createContainer(2, false, 2L, true);\r\n    containers.put(c2.getContainerId(), c2);\r\n    ContainerExecutor ex = createContainerExecutor(containers);\r\n    Context context = mock(Context.class);\r\n    when(context.getContainers()).thenReturn(containers);\r\n    when(context.getContainerExecutor()).thenReturn(ex);\r\n    CGroupsHandler cGroupsHandler = mock(CGroupsHandler.class);\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, \"\", CGROUP_PARAM_MEMORY_OOM_CONTROL)).thenReturn(\"under_oom 1\").thenReturn(\"under_oom 0\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PROCS_FILE)).thenReturn(\"1234\").thenReturn(\"\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PARAM_MEMORY_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PROCS_FILE)).thenThrow(new ResourceHandlerException(CGROUP_PROCS_FILE + \" not found\"));\r\n    DefaultOOMHandler handler = new DefaultOOMHandler(context, false) {\r\n\r\n        @Override\r\n        protected CGroupsHandler getCGroupsHandler() {\r\n            return cGroupsHandler;\r\n        }\r\n    };\r\n    handler.run();\r\n    verify(ex, times(1)).signalContainer(new ContainerSignalContext.Builder().setPid(\"1235\").setContainer(c1).setSignal(ContainerExecutor.Signal.KILL).build());\r\n    verify(ex, times(1)).signalContainer(any());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testKillGuaranteedContainerWithKillFailuresUponOOM",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testKillGuaranteedContainerWithKillFailuresUponOOM() throws Exception\n{\r\n    ConcurrentHashMap<ContainerId, Container> containers = new ConcurrentHashMap<>();\r\n    Container c1 = createContainer(1, false, 1L, true);\r\n    containers.put(c1.getContainerId(), c1);\r\n    Container c2 = createContainer(2, false, 2L, true);\r\n    containers.put(c2.getContainerId(), c2);\r\n    Container c3 = createContainer(3, true, 2L, true);\r\n    containers.put(c3.getContainerId(), c3);\r\n    ContainerExecutor ex = createContainerExecutor(containers);\r\n    Context context = mock(Context.class);\r\n    when(context.getContainers()).thenReturn(containers);\r\n    when(context.getContainerExecutor()).thenReturn(ex);\r\n    CGroupsHandler cGroupsHandler = mock(CGroupsHandler.class);\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, \"\", CGROUP_PARAM_MEMORY_OOM_CONTROL)).thenReturn(\"under_oom 1\").thenReturn(\"under_oom 0\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PROCS_FILE)).thenThrow(new ResourceHandlerException(CGROUP_PROCS_FILE + \" not found\"));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PROCS_FILE)).thenThrow(new ResourceHandlerException(CGROUP_PROCS_FILE + \" not found\"));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c3.getContainerId().toString(), CGROUP_PROCS_FILE)).thenReturn(\"1234\").thenReturn(\"\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c3.getContainerId().toString(), CGROUP_PARAM_MEMORY_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c3.getContainerId().toString(), CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES)).thenReturn(getMB(9));\r\n    DefaultOOMHandler handler = new DefaultOOMHandler(context, false) {\r\n\r\n        @Override\r\n        protected CGroupsHandler getCGroupsHandler() {\r\n            return cGroupsHandler;\r\n        }\r\n    };\r\n    handler.run();\r\n    verify(ex, times(1)).signalContainer(new ContainerSignalContext.Builder().setPid(\"1235\").setContainer(c3).setSignal(ContainerExecutor.Signal.KILL).build());\r\n    verify(ex, times(1)).signalContainer(any());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testExceptionThrownWhenNoContainersKilledSuccessfully",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testExceptionThrownWhenNoContainersKilledSuccessfully() throws Exception\n{\r\n    ConcurrentHashMap<ContainerId, Container> containers = new ConcurrentHashMap<>();\r\n    Container c1 = createContainer(1, false, 1L, true);\r\n    containers.put(c1.getContainerId(), c1);\r\n    Container c2 = createContainer(2, false, 2L, true);\r\n    containers.put(c2.getContainerId(), c2);\r\n    ContainerExecutor ex = createContainerExecutor(containers);\r\n    Context context = mock(Context.class);\r\n    when(context.getContainers()).thenReturn(containers);\r\n    when(context.getContainerExecutor()).thenReturn(ex);\r\n    CGroupsHandler cGroupsHandler = mock(CGroupsHandler.class);\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, \"\", CGROUP_PARAM_MEMORY_OOM_CONTROL)).thenReturn(\"under_oom 1\").thenReturn(\"under_oom 0\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PROCS_FILE)).thenThrow(new ResourceHandlerException(CGROUP_PROCS_FILE + \" not found\"));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PROCS_FILE)).thenThrow(new ResourceHandlerException(CGROUP_PROCS_FILE + \" not found\"));\r\n    DefaultOOMHandler handler = new DefaultOOMHandler(context, false) {\r\n\r\n        @Override\r\n        protected CGroupsHandler getCGroupsHandler() {\r\n            return cGroupsHandler;\r\n        }\r\n    };\r\n    handler.run();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testBothOpportunisticContainersOverLimitUponOOM",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testBothOpportunisticContainersOverLimitUponOOM() throws Exception\n{\r\n    ConcurrentHashMap<ContainerId, Container> containers = new ConcurrentHashMap<>();\r\n    Container c1 = createContainer(1, false, 1L, true);\r\n    containers.put(c1.getContainerId(), c1);\r\n    Container c2 = createContainer(2, false, 2L, true);\r\n    containers.put(c2.getContainerId(), c2);\r\n    ContainerExecutor ex = createContainerExecutor(containers);\r\n    Context context = mock(Context.class);\r\n    when(context.getContainers()).thenReturn(containers);\r\n    when(context.getContainerExecutor()).thenReturn(ex);\r\n    CGroupsHandler cGroupsHandler = mock(CGroupsHandler.class);\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, \"\", CGROUP_PARAM_MEMORY_OOM_CONTROL)).thenReturn(\"under_oom 1\").thenReturn(\"under_oom 0\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PROCS_FILE)).thenReturn(\"1234\").thenReturn(\"\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PARAM_MEMORY_USAGE_BYTES)).thenReturn(getMB(11));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES)).thenReturn(getMB(11));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PROCS_FILE)).thenReturn(\"1235\").thenReturn(\"\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PARAM_MEMORY_USAGE_BYTES)).thenReturn(getMB(11));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES)).thenReturn(getMB(11));\r\n    DefaultOOMHandler handler = new DefaultOOMHandler(context, false) {\r\n\r\n        @Override\r\n        protected CGroupsHandler getCGroupsHandler() {\r\n            return cGroupsHandler;\r\n        }\r\n    };\r\n    handler.run();\r\n    verify(ex, times(1)).signalContainer(new ContainerSignalContext.Builder().setPid(\"1235\").setContainer(c2).setSignal(ContainerExecutor.Signal.KILL).build());\r\n    verify(ex, times(1)).signalContainer(any());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testOneOpportunisticContainerOverLimitUponOOM",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testOneOpportunisticContainerOverLimitUponOOM() throws Exception\n{\r\n    ConcurrentHashMap<ContainerId, Container> containers = new ConcurrentHashMap<>();\r\n    Container c1 = createContainer(1, false, 2L, true);\r\n    containers.put(c1.getContainerId(), c1);\r\n    Container c2 = createContainer(2, false, 1L, true);\r\n    containers.put(c2.getContainerId(), c2);\r\n    ContainerExecutor ex = createContainerExecutor(containers);\r\n    Context context = mock(Context.class);\r\n    when(context.getContainers()).thenReturn(containers);\r\n    when(context.getContainerExecutor()).thenReturn(ex);\r\n    CGroupsHandler cGroupsHandler = mock(CGroupsHandler.class);\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, \"\", CGROUP_PARAM_MEMORY_OOM_CONTROL)).thenReturn(\"under_oom 1\").thenReturn(\"under_oom 0\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PROCS_FILE)).thenReturn(\"1234\").thenReturn(\"\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PARAM_MEMORY_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PROCS_FILE)).thenReturn(\"1235\").thenReturn(\"\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PARAM_MEMORY_USAGE_BYTES)).thenReturn(getMB(11));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES)).thenReturn(getMB(11));\r\n    DefaultOOMHandler handler = new DefaultOOMHandler(context, false) {\r\n\r\n        @Override\r\n        protected CGroupsHandler getCGroupsHandler() {\r\n            return cGroupsHandler;\r\n        }\r\n    };\r\n    handler.run();\r\n    verify(ex, times(1)).signalContainer(new ContainerSignalContext.Builder().setPid(\"1235\").setContainer(c2).setSignal(ContainerExecutor.Signal.KILL).build());\r\n    verify(ex, times(1)).signalContainer(any());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testNoOpportunisticContainerOverLimitOOM",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testNoOpportunisticContainerOverLimitOOM() throws Exception\n{\r\n    ConcurrentHashMap<ContainerId, Container> containers = new ConcurrentHashMap<>();\r\n    Container c1 = createContainer(1, false, 1L, true);\r\n    containers.put(c1.getContainerId(), c1);\r\n    Container c2 = createContainer(2, false, 2L, true);\r\n    containers.put(c2.getContainerId(), c2);\r\n    ContainerExecutor ex = createContainerExecutor(containers);\r\n    Context context = mock(Context.class);\r\n    when(context.getContainers()).thenReturn(containers);\r\n    when(context.getContainerExecutor()).thenReturn(ex);\r\n    CGroupsHandler cGroupsHandler = mock(CGroupsHandler.class);\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, \"\", CGROUP_PARAM_MEMORY_OOM_CONTROL)).thenReturn(\"under_oom 1\").thenReturn(\"under_oom 0\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PROCS_FILE)).thenReturn(\"1234\").thenReturn(\"\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PARAM_MEMORY_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PROCS_FILE)).thenReturn(\"1235\").thenReturn(\"\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PARAM_MEMORY_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES)).thenReturn(getMB(9));\r\n    DefaultOOMHandler handler = new DefaultOOMHandler(context, false) {\r\n\r\n        @Override\r\n        protected CGroupsHandler getCGroupsHandler() {\r\n            return cGroupsHandler;\r\n        }\r\n    };\r\n    handler.run();\r\n    verify(ex, times(1)).signalContainer(new ContainerSignalContext.Builder().setPid(\"1235\").setContainer(c2).setSignal(ContainerExecutor.Signal.KILL).build());\r\n    verify(ex, times(1)).signalContainer(any());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testKillOneOverLimitOpportunisticContainerUponOOM",
  "errType" : null,
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void testKillOneOverLimitOpportunisticContainerUponOOM() throws Exception\n{\r\n    ConcurrentHashMap<ContainerId, Container> containers = new ConcurrentHashMap<>();\r\n    int currentContainerId = 0;\r\n    Container c1 = createContainer(currentContainerId++, false, 2, true);\r\n    containers.put(c1.getContainerId(), c1);\r\n    Container c2 = createContainer(currentContainerId++, false, 1, true);\r\n    containers.put(c2.getContainerId(), c2);\r\n    Container c3 = createContainer(currentContainerId++, true, 1, true);\r\n    containers.put(c3.getContainerId(), c3);\r\n    ContainerExecutor ex = createContainerExecutor(containers);\r\n    Context context = mock(Context.class);\r\n    when(context.getContainers()).thenReturn(containers);\r\n    when(context.getContainerExecutor()).thenReturn(ex);\r\n    CGroupsHandler cGroupsHandler = mock(CGroupsHandler.class);\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, \"\", CGROUP_PARAM_MEMORY_OOM_CONTROL)).thenReturn(\"under_oom 1\").thenReturn(\"under_oom 0\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PROCS_FILE)).thenReturn(\"1234\").thenReturn(\"\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PARAM_MEMORY_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PROCS_FILE)).thenReturn(\"1235\").thenReturn(\"\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PARAM_MEMORY_USAGE_BYTES)).thenReturn(getMB(11));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES)).thenReturn(getMB(11));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c3.getContainerId().toString(), CGROUP_PROCS_FILE)).thenReturn(\"1236\").thenReturn(\"\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c3.getContainerId().toString(), CGROUP_PARAM_MEMORY_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c3.getContainerId().toString(), CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES)).thenReturn(getMB(9));\r\n    DefaultOOMHandler handler = new DefaultOOMHandler(context, false) {\r\n\r\n        @Override\r\n        protected CGroupsHandler getCGroupsHandler() {\r\n            return cGroupsHandler;\r\n        }\r\n    };\r\n    handler.run();\r\n    verify(ex, times(1)).signalContainer(new ContainerSignalContext.Builder().setPid(\"1235\").setContainer(c2).setSignal(ContainerExecutor.Signal.KILL).build());\r\n    verify(ex, times(1)).signalContainer(any());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testKillOneLaterOpportunisticContainerUponOOM",
  "errType" : null,
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void testKillOneLaterOpportunisticContainerUponOOM() throws Exception\n{\r\n    ConcurrentHashMap<ContainerId, Container> containers = new ConcurrentHashMap<>();\r\n    int currentContainerId = 0;\r\n    Container c1 = createContainer(currentContainerId++, false, 1, true);\r\n    containers.put(c1.getContainerId(), c1);\r\n    Container c2 = createContainer(currentContainerId++, false, 2, true);\r\n    containers.put(c2.getContainerId(), c2);\r\n    Container c3 = createContainer(currentContainerId++, true, 1, true);\r\n    containers.put(c3.getContainerId(), c3);\r\n    ContainerExecutor ex = createContainerExecutor(containers);\r\n    Context context = mock(Context.class);\r\n    when(context.getContainers()).thenReturn(containers);\r\n    when(context.getContainerExecutor()).thenReturn(ex);\r\n    CGroupsHandler cGroupsHandler = mock(CGroupsHandler.class);\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, \"\", CGROUP_PARAM_MEMORY_OOM_CONTROL)).thenReturn(\"under_oom 1\").thenReturn(\"under_oom 0\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PROCS_FILE)).thenReturn(\"1234\").thenReturn(\"\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PARAM_MEMORY_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PROCS_FILE)).thenReturn(\"1235\").thenReturn(\"\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PARAM_MEMORY_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c3.getContainerId().toString(), CGROUP_PROCS_FILE)).thenReturn(\"1236\").thenReturn(\"\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c3.getContainerId().toString(), CGROUP_PARAM_MEMORY_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c3.getContainerId().toString(), CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES)).thenReturn(getMB(9));\r\n    DefaultOOMHandler handler = new DefaultOOMHandler(context, false) {\r\n\r\n        @Override\r\n        protected CGroupsHandler getCGroupsHandler() {\r\n            return cGroupsHandler;\r\n        }\r\n    };\r\n    handler.run();\r\n    verify(ex, times(1)).signalContainer(new ContainerSignalContext.Builder().setPid(\"1235\").setContainer(c2).setSignal(ContainerExecutor.Signal.KILL).build());\r\n    verify(ex, times(1)).signalContainer(any());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testKillBothOpportunisticContainerUponOOM",
  "errType" : null,
  "containingMethodsNum" : 25,
  "sourceCodeText" : "void testKillBothOpportunisticContainerUponOOM() throws Exception\n{\r\n    int currentContainerId = 0;\r\n    ConcurrentHashMap<ContainerId, Container> containers = new ConcurrentHashMap<>();\r\n    Container c1 = createContainer(currentContainerId++, false, 2, true);\r\n    containers.put(c1.getContainerId(), c1);\r\n    Container c2 = createContainer(currentContainerId++, false, 1, true);\r\n    containers.put(c2.getContainerId(), c2);\r\n    Container c3 = createContainer(currentContainerId++, true, 1, true);\r\n    containers.put(c3.getContainerId(), c3);\r\n    ContainerExecutor ex = createContainerExecutor(containers);\r\n    Context context = mock(Context.class);\r\n    when(context.getContainers()).thenReturn(containers);\r\n    when(context.getContainerExecutor()).thenReturn(ex);\r\n    CGroupsHandler cGroupsHandler = mock(CGroupsHandler.class);\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, \"\", CGROUP_PARAM_MEMORY_OOM_CONTROL)).thenReturn(\"under_oom 1\").thenReturn(\"under_oom 1\").thenReturn(\"under_oom 0\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PROCS_FILE)).thenReturn(\"1234\").thenReturn(\"\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PARAM_MEMORY_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PROCS_FILE)).thenReturn(\"1235\").thenReturn(\"\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PARAM_MEMORY_USAGE_BYTES)).thenReturn(getMB(11));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES)).thenReturn(getMB(11));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c3.getContainerId().toString(), CGROUP_PROCS_FILE)).thenReturn(\"1236\").thenReturn(\"\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c3.getContainerId().toString(), CGROUP_PARAM_MEMORY_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c3.getContainerId().toString(), CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES)).thenReturn(getMB(9));\r\n    DefaultOOMHandler handler = new DefaultOOMHandler(context, false) {\r\n\r\n        @Override\r\n        protected CGroupsHandler getCGroupsHandler() {\r\n            return cGroupsHandler;\r\n        }\r\n    };\r\n    handler.run();\r\n    verify(ex, times(1)).signalContainer(new ContainerSignalContext.Builder().setPid(\"1235\").setContainer(c1).setSignal(ContainerExecutor.Signal.KILL).build());\r\n    verify(ex, times(1)).signalContainer(new ContainerSignalContext.Builder().setPid(\"1234\").setContainer(c2).setSignal(ContainerExecutor.Signal.KILL).build());\r\n    verify(ex, times(2)).signalContainer(any());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testKillGuaranteedContainerUponOOM",
  "errType" : null,
  "containingMethodsNum" : 26,
  "sourceCodeText" : "void testKillGuaranteedContainerUponOOM() throws Exception\n{\r\n    int currentContainerId = 0;\r\n    ConcurrentHashMap<ContainerId, Container> containers = new ConcurrentHashMap<>();\r\n    Container c1 = createContainer(currentContainerId++, false, 2, true);\r\n    containers.put(c1.getContainerId(), c1);\r\n    Container c2 = createContainer(currentContainerId++, false, 1, true);\r\n    containers.put(c2.getContainerId(), c2);\r\n    Container c3 = createContainer(currentContainerId++, true, 1, true);\r\n    containers.put(c3.getContainerId(), c3);\r\n    ContainerExecutor ex = createContainerExecutor(containers);\r\n    Context context = mock(Context.class);\r\n    when(context.getContainers()).thenReturn(containers);\r\n    when(context.getContainerExecutor()).thenReturn(ex);\r\n    CGroupsHandler cGroupsHandler = mock(CGroupsHandler.class);\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, \"\", CGROUP_PARAM_MEMORY_OOM_CONTROL)).thenReturn(\"under_oom 1\").thenReturn(\"under_oom 1\").thenReturn(\"under_oom 1\").thenReturn(\"under_oom 0\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PROCS_FILE)).thenReturn(\"1234\").thenReturn(\"\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PARAM_MEMORY_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PROCS_FILE)).thenReturn(\"1235\").thenReturn(\"\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PARAM_MEMORY_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c3.getContainerId().toString(), CGROUP_PROCS_FILE)).thenReturn(\"1236\").thenReturn(\"\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c3.getContainerId().toString(), CGROUP_PARAM_MEMORY_USAGE_BYTES)).thenReturn(getMB(11));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c3.getContainerId().toString(), CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES)).thenReturn(getMB(11));\r\n    DefaultOOMHandler handler = new DefaultOOMHandler(context, false) {\r\n\r\n        @Override\r\n        protected CGroupsHandler getCGroupsHandler() {\r\n            return cGroupsHandler;\r\n        }\r\n    };\r\n    handler.run();\r\n    verify(ex, times(1)).signalContainer(new ContainerSignalContext.Builder().setPid(\"1234\").setContainer(c1).setSignal(ContainerExecutor.Signal.KILL).build());\r\n    verify(ex, times(1)).signalContainer(new ContainerSignalContext.Builder().setPid(\"1235\").setContainer(c1).setSignal(ContainerExecutor.Signal.KILL).build());\r\n    verify(ex, times(1)).signalContainer(new ContainerSignalContext.Builder().setPid(\"1236\").setContainer(c1).setSignal(ContainerExecutor.Signal.KILL).build());\r\n    verify(ex, times(3)).signalContainer(any());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testKillAllContainersUponOOM",
  "errType" : null,
  "containingMethodsNum" : 26,
  "sourceCodeText" : "void testKillAllContainersUponOOM() throws Exception\n{\r\n    int currentContainerId = 0;\r\n    ConcurrentHashMap<ContainerId, Container> containers = new ConcurrentHashMap<>();\r\n    Container c1 = createContainer(currentContainerId++, false, 1, true);\r\n    containers.put(c1.getContainerId(), c1);\r\n    Container c2 = createContainer(currentContainerId++, false, 2, true);\r\n    containers.put(c2.getContainerId(), c2);\r\n    Container c3 = createContainer(currentContainerId++, true, 1, true);\r\n    containers.put(c3.getContainerId(), c3);\r\n    ContainerExecutor ex = createContainerExecutor(containers);\r\n    Context context = mock(Context.class);\r\n    when(context.getContainers()).thenReturn(containers);\r\n    when(context.getContainerExecutor()).thenReturn(ex);\r\n    CGroupsHandler cGroupsHandler = mock(CGroupsHandler.class);\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, \"\", CGROUP_PARAM_MEMORY_OOM_CONTROL)).thenReturn(\"under_oom 1\").thenReturn(\"under_oom 1\").thenReturn(\"under_oom 1\").thenReturn(\"under_oom 0\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PROCS_FILE)).thenReturn(\"1234\").thenReturn(\"\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PARAM_MEMORY_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PROCS_FILE)).thenReturn(\"1235\").thenReturn(\"\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PARAM_MEMORY_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c3.getContainerId().toString(), CGROUP_PROCS_FILE)).thenReturn(\"1236\").thenReturn(\"\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c3.getContainerId().toString(), CGROUP_PARAM_MEMORY_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c3.getContainerId().toString(), CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES)).thenReturn(getMB(9));\r\n    DefaultOOMHandler handler = new DefaultOOMHandler(context, false) {\r\n\r\n        @Override\r\n        protected CGroupsHandler getCGroupsHandler() {\r\n            return cGroupsHandler;\r\n        }\r\n    };\r\n    handler.run();\r\n    verify(ex, times(1)).signalContainer(new ContainerSignalContext.Builder().setPid(\"1234\").setContainer(c2).setSignal(ContainerExecutor.Signal.KILL).build());\r\n    verify(ex, times(1)).signalContainer(new ContainerSignalContext.Builder().setPid(\"1235\").setContainer(c1).setSignal(ContainerExecutor.Signal.KILL).build());\r\n    verify(ex, times(1)).signalContainer(new ContainerSignalContext.Builder().setPid(\"1236\").setContainer(c3).setSignal(ContainerExecutor.Signal.KILL).build());\r\n    verify(ex, times(3)).signalContainer(any());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testOOMUnresolvedAfterKillingAllContainers",
  "errType" : null,
  "containingMethodsNum" : 22,
  "sourceCodeText" : "void testOOMUnresolvedAfterKillingAllContainers() throws Exception\n{\r\n    int currentContainerId = 0;\r\n    ConcurrentHashMap<ContainerId, Container> containers = new ConcurrentHashMap<>();\r\n    Container c1 = createContainer(currentContainerId++, false, 1, true);\r\n    containers.put(c1.getContainerId(), c1);\r\n    Container c2 = createContainer(currentContainerId++, false, 2, true);\r\n    containers.put(c2.getContainerId(), c2);\r\n    Container c3 = createContainer(currentContainerId++, true, 3, true);\r\n    containers.put(c3.getContainerId(), c3);\r\n    ContainerExecutor ex = createContainerExecutor(containers);\r\n    Context context = mock(Context.class);\r\n    when(context.getContainers()).thenReturn(containers);\r\n    when(context.getContainerExecutor()).thenReturn(ex);\r\n    CGroupsHandler cGroupsHandler = mock(CGroupsHandler.class);\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, \"\", CGROUP_PARAM_MEMORY_OOM_CONTROL)).thenReturn(\"under_oom 1\").thenReturn(\"under_oom 1\").thenReturn(\"under_oom 1\").thenReturn(\"under_oom 1\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PROCS_FILE)).thenReturn(\"1234\").thenReturn(\"\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PARAM_MEMORY_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c1.getContainerId().toString(), CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PROCS_FILE)).thenReturn(\"1235\").thenReturn(\"\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PARAM_MEMORY_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c2.getContainerId().toString(), CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c3.getContainerId().toString(), CGROUP_PROCS_FILE)).thenReturn(\"1236\").thenReturn(\"\");\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c3.getContainerId().toString(), CGROUP_PARAM_MEMORY_USAGE_BYTES)).thenReturn(getMB(9));\r\n    when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY, c3.getContainerId().toString(), CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES)).thenReturn(getMB(9));\r\n    DefaultOOMHandler handler = new DefaultOOMHandler(context, false) {\r\n\r\n        @Override\r\n        protected CGroupsHandler getCGroupsHandler() {\r\n            return cGroupsHandler;\r\n        }\r\n    };\r\n    handler.run();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "createContainerId",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "ContainerId createContainerId(int id)\n{\r\n    ApplicationId applicationId = ApplicationId.newInstance(1, 1);\r\n    ApplicationAttemptId applicationAttemptId = mock(ApplicationAttemptId.class);\r\n    when(applicationAttemptId.getApplicationId()).thenReturn(applicationId);\r\n    when(applicationAttemptId.getAttemptId()).thenReturn(1);\r\n    ContainerId containerId = mock(ContainerId.class);\r\n    when(containerId.toString()).thenReturn(Integer.toString(id));\r\n    when(containerId.getContainerId()).thenReturn(new Long(1));\r\n    return containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "createContainer",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "Container createContainer(int containerId, boolean guaranteed, long launchTime, boolean running)\n{\r\n    Container c1 = mock(Container.class);\r\n    ContainerId cid1 = createContainerId(containerId);\r\n    when(c1.getContainerId()).thenReturn(cid1);\r\n    ContainerTokenIdentifier token = mock(ContainerTokenIdentifier.class);\r\n    ExecutionType type = guaranteed ? ExecutionType.GUARANTEED : ExecutionType.OPPORTUNISTIC;\r\n    when(token.getExecutionType()).thenReturn(type);\r\n    when(c1.getContainerTokenIdentifier()).thenReturn(token);\r\n    when(c1.getResource()).thenReturn(Resource.newInstance(10, 1));\r\n    when(c1.getContainerLaunchTime()).thenReturn(launchTime);\r\n    when(c1.isRunning()).thenReturn(running);\r\n    return c1;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "getMB",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getMB(long mb)\n{\r\n    return Long.toString(mb * 1024 * 1024);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "createContainerExecutor",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerExecutor createContainerExecutor(ConcurrentHashMap<ContainerId, Container> containers) throws IOException\n{\r\n    ContainerExecutor ex = mock(ContainerExecutor.class);\r\n    when(ex.signalContainer(any())).thenAnswer(invocation -> {\r\n        Object[] arguments = invocation.getArguments();\r\n        Container container = ((ContainerSignalContext) arguments[0]).getContainer();\r\n        containers.remove(container.getContainerId());\r\n        return true;\r\n    });\r\n    return ex;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void setup()\n{\r\n    privilegedOperationExecutorMock = mock(PrivilegedOperationExecutor.class);\r\n    cGroupsHandlerMock = mock(CGroupsHandler.class);\r\n    conf = new YarnConfiguration();\r\n    tmpPath = new StringBuffer(System.getProperty(\"test.build.data\")).append('/').append(\"hadoop.tmp.dir\").toString();\r\n    containerIdMock = mock(ContainerId.class);\r\n    containerMock = mock(Container.class);\r\n    when(containerIdMock.toString()).thenReturn(TEST_CONTAINER_ID_STR);\r\n    when(containerMock.getContainerId()).thenReturn(containerIdMock);\r\n    conf.set(\"hadoop.tmp.dir\", tmpPath);\r\n    conf.setBoolean(YarnConfiguration.NM_RECOVERY_ENABLED, false);\r\n    mockManager = mock(NetworkTagMappingManager.class);\r\n    doNothing().when(mockManager).initialize(any(Configuration.class));\r\n    when(mockManager.getNetworkTagHexID(any(Container.class))).thenReturn(TEST_CLASSID);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testBootstrap",
  "errType" : [ "ResourceHandlerException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testBootstrap()\n{\r\n    NetworkPacketTaggingHandlerImpl handlerImpl = createNetworkPacketTaggingHandlerImpl();\r\n    try {\r\n        handlerImpl.bootstrap(conf);\r\n        verify(cGroupsHandlerMock).initializeCGroupController(eq(CGroupsHandler.CGroupController.NET_CLS));\r\n        verifyNoMoreInteractions(cGroupsHandlerMock);\r\n    } catch (ResourceHandlerException e) {\r\n        LOG.error(\"Unexpected exception: \" + e);\r\n        Assert.fail(\"Caught unexpected ResourceHandlerException!\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testLifeCycle",
  "errType" : [ "ResourceHandlerException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testLifeCycle()\n{\r\n    NetworkPacketTaggingHandlerImpl handlerImpl = createNetworkPacketTaggingHandlerImpl();\r\n    try {\r\n        handlerImpl.bootstrap(conf);\r\n        testPreStart(handlerImpl);\r\n        testPostComplete(handlerImpl);\r\n    } catch (ResourceHandlerException e) {\r\n        LOG.error(\"Unexpected exception: \" + e);\r\n        Assert.fail(\"Caught unexpected ResourceHandlerException!\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testPreStart",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testPreStart(NetworkPacketTaggingHandlerImpl handlerImpl) throws ResourceHandlerException\n{\r\n    reset(privilegedOperationExecutorMock);\r\n    when(cGroupsHandlerMock.getPathForCGroupTasks(CGroupsHandler.CGroupController.NET_CLS, TEST_CONTAINER_ID_STR)).thenReturn(TEST_TASKS_FILE);\r\n    List<PrivilegedOperation> ops = handlerImpl.preStart(containerMock);\r\n    verify(cGroupsHandlerMock).createCGroup(eq(CGroupsHandler.CGroupController.NET_CLS), eq(TEST_CONTAINER_ID_STR));\r\n    verify(cGroupsHandlerMock).updateCGroupParam(eq(CGroupsHandler.CGroupController.NET_CLS), eq(TEST_CONTAINER_ID_STR), eq(CGroupsHandler.CGROUP_PARAM_CLASSID), eq(TEST_CLASSID));\r\n    Assert.assertEquals(1, ops.size());\r\n    PrivilegedOperation addPidOp = ops.get(0);\r\n    String expectedAddPidOpArg = PrivilegedOperation.CGROUP_ARG_PREFIX + TEST_TASKS_FILE;\r\n    List<String> addPidOpArgs = addPidOp.getArguments();\r\n    Assert.assertEquals(PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP, addPidOp.getOperationType());\r\n    Assert.assertEquals(1, addPidOpArgs.size());\r\n    Assert.assertEquals(expectedAddPidOpArg, addPidOpArgs.get(0));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "testPostComplete",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testPostComplete(NetworkPacketTaggingHandlerImpl handlerImpl) throws ResourceHandlerException\n{\r\n    reset(privilegedOperationExecutorMock);\r\n    List<PrivilegedOperation> ops = handlerImpl.postComplete(containerIdMock);\r\n    verify(cGroupsHandlerMock).deleteCGroup(eq(CGroupsHandler.CGroupController.NET_CLS), eq(TEST_CONTAINER_ID_STR));\r\n    Assert.assertNull(ops);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "createNetworkPacketTaggingHandlerImpl",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NetworkPacketTaggingHandlerImpl createNetworkPacketTaggingHandlerImpl()\n{\r\n    return new NetworkPacketTaggingHandlerImpl(privilegedOperationExecutorMock, cGroupsHandlerMock) {\r\n\r\n        @Override\r\n        public NetworkTagMappingManager createNetworkTagMappingManager(Configuration conf) {\r\n            return mockManager;\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources",
  "methodName" : "teardown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void teardown()\n{\r\n    FileUtil.fullyDelete(new File(tmpPath));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testContainerExecutorInitCall",
  "errType" : [ "YarnRuntimeException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testContainerExecutorInitCall()\n{\r\n    NodeManager nm = new NodeManager();\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.setClass(YarnConfiguration.NM_CONTAINER_EXECUTOR, InvalidContainerExecutor.class, ContainerExecutor.class);\r\n    try {\r\n        nm.init(conf);\r\n        fail(\"Init should fail\");\r\n    } catch (YarnRuntimeException e) {\r\n        assert (e.getCause().getMessage().contains(\"dummy executor init called\"));\r\n    } finally {\r\n        nm.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testListenerInitialization",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testListenerInitialization() throws Exception\n{\r\n    NodeManager nodeManager = new NodeManager();\r\n    Configuration conf = new Configuration();\r\n    conf.set(YarnConfiguration.NM_CONTAINER_STATE_TRANSITION_LISTENERS, DummyCSTListener1.class.getName() + \",\" + DummyCSTListener2.class.getName());\r\n    initCalls = 0;\r\n    preCalls = 0;\r\n    postCalls = 0;\r\n    NodeManager.NMContext nmContext = nodeManager.createNMContext(null, null, null, false, conf);\r\n    Assert.assertEquals(2, initCalls);\r\n    nmContext.getContainerStateTransitionListener().preTransition(null, null, null);\r\n    nmContext.getContainerStateTransitionListener().postTransition(null, null, null, null);\r\n    Assert.assertEquals(2, preCalls);\r\n    Assert.assertEquals(2, postCalls);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testCreationOfNodeLabelsProviderService",
  "errType" : [ "Exception", "IOException" ],
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testCreationOfNodeLabelsProviderService() throws InterruptedException\n{\r\n    try {\r\n        NodeManager nodeManager = new NodeManager();\r\n        Configuration conf = new Configuration();\r\n        NodeLabelsProvider labelsProviderService = nodeManager.createNodeLabelsProvider(conf);\r\n        Assert.assertNull(\"LabelsProviderService should not be initialized in default configuration\", labelsProviderService);\r\n        conf.set(YarnConfiguration.NM_NODE_LABELS_PROVIDER_CONFIG, \"org.apache.hadoop.yarn.server.nodemanager.nodelabels.ConfigurationNodeLabelsProvider\");\r\n        labelsProviderService = nodeManager.createNodeLabelsProvider(conf);\r\n        Assert.assertNotNull(\"LabelsProviderService should be initialized When \" + \"node labels provider class is configured\", labelsProviderService);\r\n        conf.set(YarnConfiguration.NM_NODE_LABELS_PROVIDER_CONFIG, \"org.apache.hadoop.yarn.server.nodemanager.NodeManager\");\r\n        try {\r\n            labelsProviderService = nodeManager.createNodeLabelsProvider(conf);\r\n            Assert.fail(\"Expected to throw IOException on Invalid configuration\");\r\n        } catch (IOException e) {\r\n        }\r\n        Assert.assertNotNull(\"LabelsProviderService should be initialized When \" + \"node labels provider class is configured\", labelsProviderService);\r\n        conf.set(YarnConfiguration.NM_NODE_LABELS_PROVIDER_CONFIG, YarnConfiguration.CONFIG_NODE_DESCRIPTOR_PROVIDER);\r\n        labelsProviderService = nodeManager.createNodeLabelsProvider(conf);\r\n        Assert.assertNotNull(\"LabelsProviderService should be initialized When \" + \"node labels provider class is configured\", labelsProviderService);\r\n    } catch (Exception e) {\r\n        Assert.fail(\"Exception caught\");\r\n        e.printStackTrace();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testUserProvidedUGIConf",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testUserProvidedUGIConf() throws Exception\n{\r\n    thrown.expect(IllegalArgumentException.class);\r\n    thrown.expectMessage(\"Invalid attribute value for \" + CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION + \" of DUMMYAUTH\");\r\n    Configuration dummyConf = new YarnConfiguration();\r\n    dummyConf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION, \"DUMMYAUTH\");\r\n    NodeManager dummyNodeManager = new NodeManager();\r\n    try {\r\n        dummyNodeManager.init(dummyConf);\r\n    } finally {\r\n        dummyNodeManager.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\impl\\pb",
  "methodName" : "testConvertProtoToDeletionTask",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testConvertProtoToDeletionTask() throws Exception\n{\r\n    DeletionService deletionService = mock(DeletionService.class);\r\n    DeletionServiceDeleteTaskProto.Builder protoBuilder = DeletionServiceDeleteTaskProto.newBuilder();\r\n    int id = 0;\r\n    protoBuilder.setId(id);\r\n    DeletionServiceDeleteTaskProto proto = protoBuilder.build();\r\n    DeletionTask deletionTask = NMProtoUtils.convertProtoToDeletionTask(proto, deletionService);\r\n    assertEquals(DeletionTaskType.FILE, deletionTask.getDeletionTaskType());\r\n    assertEquals(id, deletionTask.getTaskId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\impl\\pb",
  "methodName" : "testConvertProtoToFileDeletionTask",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testConvertProtoToFileDeletionTask() throws Exception\n{\r\n    DeletionService deletionService = mock(DeletionService.class);\r\n    int id = 0;\r\n    String user = \"user\";\r\n    Path subdir = new Path(\"subdir\");\r\n    Path basedir = new Path(\"basedir\");\r\n    DeletionServiceDeleteTaskProto.Builder protoBuilder = DeletionServiceDeleteTaskProto.newBuilder();\r\n    protoBuilder.setId(id).setUser(\"user\").setSubdir(subdir.getName()).addBasedirs(basedir.getName());\r\n    DeletionServiceDeleteTaskProto proto = protoBuilder.build();\r\n    DeletionTask deletionTask = NMProtoUtils.convertProtoToFileDeletionTask(proto, deletionService, id);\r\n    assertEquals(DeletionTaskType.FILE.name(), deletionTask.getDeletionTaskType().name());\r\n    assertEquals(id, deletionTask.getTaskId());\r\n    assertEquals(subdir, ((FileDeletionTask) deletionTask).getSubDir());\r\n    assertEquals(basedir, ((FileDeletionTask) deletionTask).getBaseDirs().get(0));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\impl\\pb",
  "methodName" : "testConvertProtoToDockerContainerDeletionTask",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testConvertProtoToDockerContainerDeletionTask() throws Exception\n{\r\n    DeletionService deletionService = mock(DeletionService.class);\r\n    int id = 0;\r\n    String user = \"user\";\r\n    String dockerContainerId = \"container_e123_12321231_00001\";\r\n    DeletionServiceDeleteTaskProto.Builder protoBuilder = DeletionServiceDeleteTaskProto.newBuilder();\r\n    protoBuilder.setId(id).setUser(user).setDockerContainerId(dockerContainerId);\r\n    DeletionServiceDeleteTaskProto proto = protoBuilder.build();\r\n    DeletionTask deletionTask = NMProtoUtils.convertProtoToDockerContainerDeletionTask(proto, deletionService, id);\r\n    assertEquals(DeletionTaskType.DOCKER_CONTAINER.name(), deletionTask.getDeletionTaskType().name());\r\n    assertEquals(id, deletionTask.getTaskId());\r\n    assertEquals(dockerContainerId, ((DockerContainerDeletionTask) deletionTask).getContainerId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\impl\\pb",
  "methodName" : "testConvertProtoToDeletionTaskRecoveryInfo",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testConvertProtoToDeletionTaskRecoveryInfo() throws Exception\n{\r\n    long delTime = System.currentTimeMillis();\r\n    List<Integer> successorTaskIds = Arrays.asList(1);\r\n    DeletionTask deletionTask = mock(DeletionTask.class);\r\n    DeletionTaskRecoveryInfo info = new DeletionTaskRecoveryInfo(deletionTask, successorTaskIds, delTime);\r\n    assertEquals(deletionTask, info.getTask());\r\n    assertEquals(successorTaskIds, info.getSuccessorTaskIds());\r\n    assertEquals(delTime, info.getDeletionTimestamp());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    conf = new YarnConfiguration();\r\n    conf.setLong(NM_SLEEP_DELAY_BEFORE_SIGKILL_MS, 60000);\r\n    Context context = mock(Context.class);\r\n    NMStateStoreService storeService = mock(NMStateStoreService.class);\r\n    when(context.getNMStateStore()).thenReturn(storeService);\r\n    Dispatcher dispatcher = new InlineDispatcher();\r\n    executor = mock(ContainerExecutor.class);\r\n    when(executor.signalContainer(Mockito.any(ContainerSignalContext.class))).thenReturn(true);\r\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    containerId = ContainerId.newContainerId(attemptId, 1);\r\n    Container container = mock(Container.class);\r\n    when(container.getContainerId()).thenReturn(containerId);\r\n    launch = mock(ContainerLaunch.class);\r\n    launch.containerAlreadyLaunched = new AtomicBoolean(false);\r\n    launch.completed = new AtomicBoolean(false);\r\n    launch.pidFilePath = new Path(\"target/\" + containerId.toString() + \".pid\");\r\n    when(launch.getContainerPid()).thenReturn(containerId.toString());\r\n    cleanup = new ContainerCleanup(context, conf, dispatcher, executor, container, launch);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testNoCleanupWhenContainerNotLaunched",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testNoCleanupWhenContainerNotLaunched() throws IOException\n{\r\n    cleanup.run();\r\n    verify(launch, Mockito.times(0)).signalContainer(Mockito.any(SignalContainerCommand.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testCleanup",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testCleanup() throws Exception\n{\r\n    launch.containerAlreadyLaunched.set(true);\r\n    cleanup.run();\r\n    ArgumentCaptor<ContainerSignalContext> captor = ArgumentCaptor.forClass(ContainerSignalContext.class);\r\n    verify(executor, Mockito.times(1)).signalContainer(captor.capture());\r\n    Assert.assertEquals(\"signal\", ContainerExecutor.Signal.TERM, captor.getValue().getSignal());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testFailedExitCleanup",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testFailedExitCleanup() throws Exception\n{\r\n    launch.completed.set(true);\r\n    cleanup.run();\r\n    ArgumentCaptor<ContainerSignalContext> captor = ArgumentCaptor.forClass(ContainerSignalContext.class);\r\n    verify(executor, Mockito.times(1)).signalContainer(captor.capture());\r\n    Assert.assertEquals(\"signal\", ContainerExecutor.Signal.TERM, captor.getValue().getSignal());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "getOldRegisterRequestInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "DeviceRegisterRequest getOldRegisterRequestInfo()\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "getDevices",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Set<Device> getDevices()\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "onDevicesAllocated",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "DeviceRuntimeSpec onDevicesAllocated(Set<Device> allocatedDevices, YarnRuntimeType yarnRuntime) throws Exception\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "onDevicesReleased",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void onDevicesReleased(Set<Device> releasedDevices)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void setup() throws IllegalArgumentException, IllegalAccessException\n{\r\n    MockitoAnnotations.initMocks(this);\r\n    ContainersLauncher tempContainersLauncher = new ContainersLauncher(context, dispatcher, exec, dirsHandler, containerManager);\r\n    ConcurrentMap<ApplicationId, Application> applications = new ConcurrentHashMap<>();\r\n    applications.put(appId, app1);\r\n    spy = spy(tempContainersLauncher);\r\n    spy.containerLauncher = containerLauncher;\r\n    conf = doReturn(conf).when(spy).getConfig();\r\n    when(event.getContainer()).thenReturn(container);\r\n    when(container.getContainerId()).thenReturn(containerId);\r\n    when(containerId.getApplicationAttemptId()).thenReturn(appAttemptId);\r\n    when(containerId.getApplicationAttemptId().getApplicationId()).thenReturn(appId);\r\n    when(context.getApplications()).thenReturn(applications);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testLaunchContainerEvent",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testLaunchContainerEvent() throws IllegalArgumentException, IllegalAccessException\n{\r\n    Map<ContainerId, ContainerLaunch> dummyMap = (Map<ContainerId, ContainerLaunch>) Whitebox.getInternalState(spy, \"running\");\r\n    when(event.getType()).thenReturn(ContainersLauncherEventType.LAUNCH_CONTAINER);\r\n    assertEquals(0, dummyMap.size());\r\n    spy.handle(event);\r\n    assertEquals(1, dummyMap.size());\r\n    Mockito.verify(containerLauncher, Mockito.times(1)).submit(Mockito.any(ContainerLaunch.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testRelaunchContainerEvent",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testRelaunchContainerEvent() throws IllegalArgumentException, IllegalAccessException\n{\r\n    Map<ContainerId, ContainerLaunch> dummyMap = (Map<ContainerId, ContainerLaunch>) Whitebox.getInternalState(spy, \"running\");\r\n    when(event.getType()).thenReturn(ContainersLauncherEventType.RELAUNCH_CONTAINER);\r\n    assertEquals(0, dummyMap.size());\r\n    spy.handle(event);\r\n    assertEquals(1, dummyMap.size());\r\n    Mockito.verify(containerLauncher, Mockito.times(1)).submit(Mockito.any(ContainerRelaunch.class));\r\n    for (ContainerId cid : dummyMap.keySet()) {\r\n        Object o = dummyMap.get(cid);\r\n        assertEquals(true, (o instanceof ContainerRelaunch));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testRecoverContainerEvent",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testRecoverContainerEvent() throws IllegalArgumentException, IllegalAccessException\n{\r\n    Map<ContainerId, ContainerLaunch> dummyMap = (Map<ContainerId, ContainerLaunch>) Whitebox.getInternalState(spy, \"running\");\r\n    when(event.getType()).thenReturn(ContainersLauncherEventType.RECOVER_CONTAINER);\r\n    assertEquals(0, dummyMap.size());\r\n    spy.handle(event);\r\n    assertEquals(1, dummyMap.size());\r\n    Mockito.verify(containerLauncher, Mockito.times(1)).submit(Mockito.any(RecoveredContainerLaunch.class));\r\n    for (ContainerId cid : dummyMap.keySet()) {\r\n        Object o = dummyMap.get(cid);\r\n        assertEquals(true, (o instanceof RecoveredContainerLaunch));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testRecoverPausedContainerEvent",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testRecoverPausedContainerEvent() throws IllegalArgumentException, IllegalAccessException\n{\r\n    when(event.getType()).thenReturn(ContainersLauncherEventType.RECOVER_PAUSED_CONTAINER);\r\n    spy.handle(event);\r\n    Mockito.verify(containerLauncher, Mockito.times(1)).submit(Mockito.any(RecoverPausedContainerLaunch.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testCleanupContainerEvent",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testCleanupContainerEvent() throws IllegalArgumentException, IllegalAccessException, IOException\n{\r\n    Map<ContainerId, ContainerLaunch> dummyMap = Collections.synchronizedMap(new HashMap<ContainerId, ContainerLaunch>());\r\n    dummyMap.put(containerId, containerLaunch);\r\n    Whitebox.setInternalState(spy, \"running\", dummyMap);\r\n    when(event.getType()).thenReturn(ContainersLauncherEventType.CLEANUP_CONTAINER);\r\n    assertEquals(1, dummyMap.size());\r\n    spy.handle(event);\r\n    assertEquals(0, dummyMap.size());\r\n    Mockito.verify(containerLauncher, Mockito.times(1)).submit(Mockito.any(ContainerCleanup.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testCleanupContainerForReINITEvent",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testCleanupContainerForReINITEvent() throws IllegalArgumentException, IllegalAccessException, IOException\n{\r\n    Map<ContainerId, ContainerLaunch> dummyMap = Collections.synchronizedMap(new HashMap<ContainerId, ContainerLaunch>());\r\n    dummyMap.put(containerId, containerLaunch);\r\n    Whitebox.setInternalState(spy, \"running\", dummyMap);\r\n    when(event.getType()).thenReturn(ContainersLauncherEventType.CLEANUP_CONTAINER_FOR_REINIT);\r\n    final List<ContainerId> cleanedContainers = new ArrayList<>();\r\n    doAnswer(invocation -> {\r\n        cleanedContainers.add((ContainerId) invocation.getArguments()[1]);\r\n        return null;\r\n    }).when(spy).cleanup(any(), any(), anyBoolean());\r\n    spy.handle(event);\r\n    Assert.assertEquals(\"container not cleaned\", containerId, cleanedContainers.get(0));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testSignalContainerEvent",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testSignalContainerEvent() throws IllegalArgumentException, IllegalAccessException, IOException\n{\r\n    Map<ContainerId, ContainerLaunch> dummyMap = Collections.synchronizedMap(new HashMap<ContainerId, ContainerLaunch>());\r\n    dummyMap.put(containerId, containerLaunch);\r\n    SignalContainersLauncherEvent dummyEvent = mock(SignalContainersLauncherEvent.class);\r\n    when(dummyEvent.getContainer()).thenReturn(container);\r\n    when(container.getContainerId()).thenReturn(containerId);\r\n    when(containerId.getApplicationAttemptId()).thenReturn(appAttemptId);\r\n    when(containerId.getApplicationAttemptId().getApplicationId()).thenReturn(appId);\r\n    Whitebox.setInternalState(spy, \"running\", dummyMap);\r\n    when(dummyEvent.getType()).thenReturn(ContainersLauncherEventType.SIGNAL_CONTAINER);\r\n    when(dummyEvent.getCommand()).thenReturn(SignalContainerCommand.GRACEFUL_SHUTDOWN);\r\n    doNothing().when(containerLaunch).signalContainer(SignalContainerCommand.GRACEFUL_SHUTDOWN);\r\n    spy.handle(dummyEvent);\r\n    assertEquals(1, dummyMap.size());\r\n    Mockito.verify(containerLaunch, Mockito.times(1)).signalContainer(SignalContainerCommand.GRACEFUL_SHUTDOWN);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testPauseContainerEvent",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testPauseContainerEvent() throws IllegalArgumentException, IllegalAccessException, IOException\n{\r\n    Map<ContainerId, ContainerLaunch> dummyMap = Collections.synchronizedMap(new HashMap<ContainerId, ContainerLaunch>());\r\n    dummyMap.put(containerId, containerLaunch);\r\n    Whitebox.setInternalState(spy, \"running\", dummyMap);\r\n    when(event.getType()).thenReturn(ContainersLauncherEventType.PAUSE_CONTAINER);\r\n    doNothing().when(containerLaunch).pauseContainer();\r\n    spy.handle(event);\r\n    assertEquals(1, dummyMap.size());\r\n    Mockito.verify(containerLaunch, Mockito.times(1)).pauseContainer();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\launcher",
  "methodName" : "testResumeContainerEvent",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testResumeContainerEvent() throws IllegalArgumentException, IllegalAccessException, IOException\n{\r\n    Map<ContainerId, ContainerLaunch> dummyMap = Collections.synchronizedMap(new HashMap<ContainerId, ContainerLaunch>());\r\n    dummyMap.put(containerId, containerLaunch);\r\n    Whitebox.setInternalState(spy, \"running\", dummyMap);\r\n    when(event.getType()).thenReturn(ContainersLauncherEventType.RESUME_CONTAINER);\r\n    doNothing().when(containerLaunch).resumeContainer();\r\n    spy.handle(event);\r\n    assertEquals(1, dummyMap.size());\r\n    Mockito.verify(containerLaunch, Mockito.times(1)).resumeContainer();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\sharedcache",
  "methodName" : "testFailVerifyAccess",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testFailVerifyAccess() throws Exception\n{\r\n    SharedCacheUploader spied = createSpiedUploader();\r\n    doReturn(false).when(spied).verifyAccess();\r\n    assertFalse(spied.call());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\sharedcache",
  "methodName" : "testRenameFail",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testRenameFail() throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    conf.setBoolean(YarnConfiguration.SHARED_CACHE_ENABLED, true);\r\n    LocalResource resource = mock(LocalResource.class);\r\n    Path localPath = mock(Path.class);\r\n    when(localPath.getName()).thenReturn(\"foo.jar\");\r\n    String user = \"joe\";\r\n    SCMUploaderProtocol scmClient = mock(SCMUploaderProtocol.class);\r\n    SCMUploaderNotifyResponse response = mock(SCMUploaderNotifyResponse.class);\r\n    when(response.getAccepted()).thenReturn(true);\r\n    when(scmClient.notify(isA(SCMUploaderNotifyRequest.class))).thenReturn(response);\r\n    FileSystem fs = mock(FileSystem.class);\r\n    when(fs.rename(isA(Path.class), isA(Path.class))).thenReturn(false);\r\n    FileSystem localFs = FileSystem.getLocal(conf);\r\n    SharedCacheUploader spied = createSpiedUploader(resource, localPath, user, conf, scmClient, fs, localFs);\r\n    doReturn(true).when(spied).verifyAccess();\r\n    doReturn(localPath).when(spied).getActualPath();\r\n    doReturn(\"abcdef0123456789\").when(spied).computeChecksum(isA(Path.class));\r\n    doReturn(true).when(spied).uploadFile(isA(Path.class), isA(Path.class));\r\n    assertFalse(spied.call());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\sharedcache",
  "methodName" : "testSuccess",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testSuccess() throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    conf.setBoolean(YarnConfiguration.SHARED_CACHE_ENABLED, true);\r\n    LocalResource resource = mock(LocalResource.class);\r\n    Path localPath = mock(Path.class);\r\n    when(localPath.getName()).thenReturn(\"foo.jar\");\r\n    String user = \"joe\";\r\n    SCMUploaderProtocol scmClient = mock(SCMUploaderProtocol.class);\r\n    SCMUploaderNotifyResponse response = mock(SCMUploaderNotifyResponse.class);\r\n    when(response.getAccepted()).thenReturn(true);\r\n    when(scmClient.notify(isA(SCMUploaderNotifyRequest.class))).thenReturn(response);\r\n    FileSystem fs = mock(FileSystem.class);\r\n    when(fs.rename(isA(Path.class), isA(Path.class))).thenReturn(true);\r\n    FileSystem localFs = FileSystem.getLocal(conf);\r\n    SharedCacheUploader spied = createSpiedUploader(resource, localPath, user, conf, scmClient, fs, localFs);\r\n    doReturn(true).when(spied).verifyAccess();\r\n    doReturn(localPath).when(spied).getActualPath();\r\n    doReturn(\"abcdef0123456789\").when(spied).computeChecksum(isA(Path.class));\r\n    doReturn(true).when(spied).uploadFile(isA(Path.class), isA(Path.class));\r\n    doReturn(true).when(spied).notifySharedCacheManager(isA(String.class), isA(String.class));\r\n    assertTrue(spied.call());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\sharedcache",
  "methodName" : "testNotifySCMFail",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testNotifySCMFail() throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    conf.setBoolean(YarnConfiguration.SHARED_CACHE_ENABLED, true);\r\n    LocalResource resource = mock(LocalResource.class);\r\n    Path localPath = mock(Path.class);\r\n    when(localPath.getName()).thenReturn(\"foo.jar\");\r\n    String user = \"joe\";\r\n    FileSystem fs = mock(FileSystem.class);\r\n    when(fs.rename(isA(Path.class), isA(Path.class))).thenReturn(true);\r\n    FileSystem localFs = FileSystem.getLocal(conf);\r\n    SharedCacheUploader spied = createSpiedUploader(resource, localPath, user, conf, null, fs, localFs);\r\n    doReturn(true).when(spied).verifyAccess();\r\n    doReturn(localPath).when(spied).getActualPath();\r\n    doReturn(\"abcdef0123456789\").when(spied).computeChecksum(isA(Path.class));\r\n    doReturn(true).when(spied).uploadFile(isA(Path.class), isA(Path.class));\r\n    doReturn(false).when(spied).notifySharedCacheManager(isA(String.class), isA(String.class));\r\n    assertFalse(spied.call());\r\n    verify(fs).delete(isA(Path.class), anyBoolean());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\sharedcache",
  "methodName" : "testVerifyAccessPublicResource",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testVerifyAccessPublicResource() throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    conf.setBoolean(YarnConfiguration.SHARED_CACHE_ENABLED, true);\r\n    LocalResource resource = mock(LocalResource.class);\r\n    when(resource.getVisibility()).thenReturn(LocalResourceVisibility.PUBLIC);\r\n    Path localPath = mock(Path.class);\r\n    when(localPath.getName()).thenReturn(\"foo.jar\");\r\n    String user = \"joe\";\r\n    SCMUploaderProtocol scmClient = mock(SCMUploaderProtocol.class);\r\n    FileSystem fs = mock(FileSystem.class);\r\n    FileSystem localFs = FileSystem.getLocal(conf);\r\n    SharedCacheUploader spied = createSpiedUploader(resource, localPath, user, conf, scmClient, fs, localFs);\r\n    assertTrue(spied.verifyAccess());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\sharedcache",
  "methodName" : "testGetActualPath",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testGetActualPath() throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    conf.setBoolean(YarnConfiguration.SHARED_CACHE_ENABLED, true);\r\n    LocalResource resource = mock(LocalResource.class);\r\n    when(resource.getVisibility()).thenReturn(LocalResourceVisibility.PUBLIC);\r\n    Path localPath = new Path(\"foo.jar\");\r\n    String user = \"joe\";\r\n    SCMUploaderProtocol scmClient = mock(SCMUploaderProtocol.class);\r\n    FileSystem fs = mock(FileSystem.class);\r\n    FileSystem localFs = mock(FileSystem.class);\r\n    FileStatus status = mock(FileStatus.class);\r\n    when(status.isDirectory()).thenReturn(true);\r\n    when(localFs.getFileStatus(localPath)).thenReturn(status);\r\n    SharedCacheUploader spied = createSpiedUploader(resource, localPath, user, conf, scmClient, fs, localFs);\r\n    Path actualPath = spied.getActualPath();\r\n    assertEquals(actualPath.getName(), localPath.getName());\r\n    assertEquals(actualPath.getParent().getName(), localPath.getName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\sharedcache",
  "methodName" : "createSpiedUploader",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "SharedCacheUploader createSpiedUploader() throws IOException\n{\r\n    Configuration conf = new Configuration();\r\n    conf.setBoolean(YarnConfiguration.SHARED_CACHE_ENABLED, true);\r\n    LocalResource resource = mock(LocalResource.class);\r\n    Path localPath = mock(Path.class);\r\n    String user = \"foo\";\r\n    SCMUploaderProtocol scmClient = mock(SCMUploaderProtocol.class);\r\n    FileSystem fs = FileSystem.get(conf);\r\n    FileSystem localFs = FileSystem.getLocal(conf);\r\n    return createSpiedUploader(resource, localPath, user, conf, scmClient, fs, localFs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer\\sharedcache",
  "methodName" : "createSpiedUploader",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SharedCacheUploader createSpiedUploader(LocalResource resource, Path localPath, String user, Configuration conf, SCMUploaderProtocol scmClient, FileSystem fs, FileSystem localFs) throws IOException\n{\r\n    SharedCacheUploader uploader = new SharedCacheUploader(resource, localPath, user, conf, scmClient, fs, localFs);\r\n    return spy(uploader);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testDockerVolumeCommand",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testDockerVolumeCommand()\n{\r\n    DockerVolumeCommand dockerVolumeCommand = new DockerVolumeCommand(\"create\");\r\n    assertEquals(\"volume\", dockerVolumeCommand.getCommandOption());\r\n    Assert.assertTrue(dockerVolumeCommand.getDockerCommandWithArguments().get(\"sub-command\").contains(\"create\"));\r\n    dockerVolumeCommand.setDriverName(\"driver1\");\r\n    dockerVolumeCommand.setVolumeName(\"volume1\");\r\n    Assert.assertTrue(dockerVolumeCommand.getDockerCommandWithArguments().get(\"driver\").contains(\"driver1\"));\r\n    Assert.assertTrue(dockerVolumeCommand.getDockerCommandWithArguments().get(\"volume\").contains(\"volume1\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setUp() throws IOException\n{\r\n    if (LOCAL_LOG_DIR.exists()) {\r\n        FileUtils.cleanDirectory(LOCAL_LOG_DIR);\r\n    }\r\n    if (REMOTE_LOG_FILE.exists()) {\r\n        FileUtils.cleanDirectory(REMOTE_LOG_FILE);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "cleanUp",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void cleanUp() throws IOException\n{\r\n    FileUtils.deleteDirectory(LOCAL_LOG_DIR);\r\n    FileUtils.deleteQuietly(REMOTE_LOG_FILE);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testAggregatorWithRetentionPolicyDisabledShouldUploadAllFiles",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testAggregatorWithRetentionPolicyDisabledShouldUploadAllFiles() throws Exception\n{\r\n    final ApplicationId applicationId = ApplicationId.newInstance(System.currentTimeMillis(), 0);\r\n    final ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(applicationId, 0);\r\n    final ContainerId containerId = ContainerId.newContainerId(attemptId, 0);\r\n    final File appLogDir = new File(LOCAL_LOG_DIR, applicationId.toString());\r\n    final File containerLogDir = new File(appLogDir, containerId.toString());\r\n    containerLogDir.mkdirs();\r\n    final Set<File> logFiles = createContainerLogFiles(containerLogDir, 3);\r\n    final long logRetentionSecs = 10000;\r\n    final long recoveredLogInitedTime = -1;\r\n    verifyLogAggregationWithExpectedFiles2DeleteAndUpload(applicationId, containerId, logRetentionSecs, recoveredLogInitedTime, logFiles, logFiles);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testAggregatorWhenNoFileOlderThanRetentionPolicyShouldUploadAll",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testAggregatorWhenNoFileOlderThanRetentionPolicyShouldUploadAll() throws IOException\n{\r\n    final ApplicationId applicationId = ApplicationId.newInstance(System.currentTimeMillis(), 0);\r\n    final ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(applicationId, 0);\r\n    final ContainerId containerId = ContainerId.newContainerId(attemptId, 0);\r\n    final File appLogDir = new File(LOCAL_LOG_DIR, applicationId.toString());\r\n    final File containerLogDir = new File(appLogDir, containerId.toString());\r\n    containerLogDir.mkdirs();\r\n    final Set<File> logFiles = createContainerLogFiles(containerLogDir, 3);\r\n    final long logRententionSec = 7 * 24 * 60 * 60;\r\n    final long recoveredLogInitedTimeMillis = System.currentTimeMillis() - 60 * 60;\r\n    verifyLogAggregationWithExpectedFiles2DeleteAndUpload(applicationId, containerId, logRententionSec, recoveredLogInitedTimeMillis, logFiles, logFiles);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testAggregatorWhenAllFilesOlderThanRetentionShouldUploadNone",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testAggregatorWhenAllFilesOlderThanRetentionShouldUploadNone() throws IOException\n{\r\n    final ApplicationId applicationId = ApplicationId.newInstance(System.currentTimeMillis(), 0);\r\n    final ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(applicationId, 0);\r\n    final ContainerId containerId = ContainerId.newContainerId(attemptId, 0);\r\n    final File appLogDir = new File(LOCAL_LOG_DIR, applicationId.toString());\r\n    final File containerLogDir = new File(appLogDir, containerId.toString());\r\n    containerLogDir.mkdirs();\r\n    final Set<File> logFiles = createContainerLogFiles(containerLogDir, 3);\r\n    final long week = 7 * 24 * 60 * 60;\r\n    final long recoveredLogInitedTimeMillis = System.currentTimeMillis() - 2 * week * 1000;\r\n    verifyLogAggregationWithExpectedFiles2DeleteAndUpload(applicationId, containerId, week, recoveredLogInitedTimeMillis, logFiles, new HashSet<File>());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "createContainerLogFiles",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Set<File> createContainerLogFiles(File containerLogDir, int numOfFiles) throws IOException\n{\r\n    assert (numOfFiles >= 0);\r\n    assert (containerLogDir.exists());\r\n    Set<File> containerLogFiles = new HashSet<>();\r\n    for (int i = 0; i < numOfFiles; i++) {\r\n        final File logFile = new File(containerLogDir, \"logfile\" + i);\r\n        logFile.createNewFile();\r\n        containerLogFiles.add(logFile);\r\n    }\r\n    return containerLogFiles;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "verifyLogAggregationWithExpectedFiles2DeleteAndUpload",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void verifyLogAggregationWithExpectedFiles2DeleteAndUpload(ApplicationId appId, ContainerId containerId, long logRetentionSecs, long recoveredLogInitedTimeMillis, Set<File> expectedFilesToDelete, Set<File> expectedFilesToUpload) throws IOException\n{\r\n    final Set<String> filesExpected2Delete = new HashSet<>();\r\n    for (File file : expectedFilesToDelete) {\r\n        filesExpected2Delete.add(file.getAbsolutePath());\r\n    }\r\n    final Set<String> filesExpected2Upload = new HashSet<>();\r\n    for (File file : expectedFilesToUpload) {\r\n        filesExpected2Upload.add(file.getAbsolutePath());\r\n    }\r\n    DeletionService deletionServiceWithExpectedFiles = createDeletionServiceWithExpectedFile2Delete(filesExpected2Delete);\r\n    final YarnConfiguration config = new YarnConfiguration();\r\n    config.setLong(YarnConfiguration.LOG_AGGREGATION_RETAIN_SECONDS, logRetentionSecs);\r\n    LogAggregationTFileController format = spy(new LogAggregationTFileController());\r\n    format.initialize(config, \"TFile\");\r\n    Context context = createContext(config);\r\n    final AppLogAggregatorInTest appLogAggregator = createAppLogAggregator(appId, LOCAL_LOG_DIR.getAbsolutePath(), config, context, recoveredLogInitedTimeMillis, deletionServiceWithExpectedFiles, format);\r\n    appLogAggregator.startContainerLogAggregation(new ContainerLogContext(containerId, ContainerType.TASK, 0));\r\n    appLogAggregator.finishLogAggregation();\r\n    appLogAggregator.run();\r\n    ArgumentCaptor<LogValue> logValCaptor = ArgumentCaptor.forClass(LogValue.class);\r\n    verify(appLogAggregator.getLogAggregationFileController()).write(any(LogKey.class), logValCaptor.capture());\r\n    Set<String> filesUploaded = new HashSet<>();\r\n    LogValue logValue = logValCaptor.getValue();\r\n    for (File file : logValue.getPendingLogFilesToUploadForThisContainer()) {\r\n        filesUploaded.add(file.getAbsolutePath());\r\n    }\r\n    verifyFilesUploaded(filesUploaded, filesExpected2Upload);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "verifyFilesUploaded",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void verifyFilesUploaded(Set<String> filesUploaded, Set<String> filesExpected)\n{\r\n    final String errMsgPrefix = \"The set of files uploaded are not the same \" + \"as expected\";\r\n    if (filesUploaded.size() != filesExpected.size()) {\r\n        fail(errMsgPrefix + \": actual size: \" + filesUploaded.size() + \" vs \" + \"expected size: \" + filesExpected.size());\r\n    }\r\n    for (String file : filesExpected) {\r\n        if (!filesUploaded.contains(file)) {\r\n            fail(errMsgPrefix + \": expecting \" + file);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "createAppLogAggregator",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "AppLogAggregatorInTest createAppLogAggregator(ApplicationId applicationId, String rootLogDir, YarnConfiguration config, Context context, long recoveredLogInitedTimeMillis, DeletionService deletionServiceWithFilesToExpect, LogAggregationTFileController tFileController) throws IOException\n{\r\n    final Dispatcher dispatcher = createNullDispatcher();\r\n    final NodeId nodeId = NodeId.newInstance(\"localhost\", 0);\r\n    final String userId = \"AppLogAggregatorTest\";\r\n    final UserGroupInformation ugi = UserGroupInformation.createRemoteUser(userId);\r\n    final LocalDirsHandlerService dirsService = createLocalDirsHandlerService(config, rootLogDir);\r\n    final DeletionService deletionService = deletionServiceWithFilesToExpect;\r\n    final LogAggregationContext logAggregationContext = null;\r\n    final Map<ApplicationAccessType, String> appAcls = new HashMap<>();\r\n    final FileContext fakeLfs = mock(FileContext.class);\r\n    final Path remoteLogDirForApp = new Path(REMOTE_LOG_FILE.getAbsolutePath());\r\n    return new AppLogAggregatorInTest(dispatcher, deletionService, config, applicationId, ugi, nodeId, dirsService, remoteLogDirForApp, appAcls, logAggregationContext, context, fakeLfs, recoveredLogInitedTimeMillis, tFileController);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "createDeletionServiceWithExpectedFile2Delete",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "DeletionService createDeletionServiceWithExpectedFile2Delete(final Set<String> expectedPathsForDeletion)\n{\r\n    DeletionService deletionServiceWithExpectedFiles = mock(DeletionService.class);\r\n    doAnswer(new Answer<Void>() {\r\n\r\n        @Override\r\n        public Void answer(InvocationOnMock invocationOnMock) throws Throwable {\r\n            Set<String> paths = new HashSet<>();\r\n            Object[] tasks = invocationOnMock.getArguments();\r\n            for (int i = 0; i < tasks.length; i++) {\r\n                FileDeletionTask task = (FileDeletionTask) tasks[i];\r\n                for (Path path : task.getBaseDirs()) {\r\n                    paths.add(new File(path.toUri().getRawPath()).getAbsolutePath());\r\n                }\r\n            }\r\n            verifyFilesToDelete(expectedPathsForDeletion, paths);\r\n            return null;\r\n        }\r\n    }).doNothing().when(deletionServiceWithExpectedFiles).delete(any(FileDeletionTask.class));\r\n    return deletionServiceWithExpectedFiles;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "verifyFilesToDelete",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void verifyFilesToDelete(Set<String> files2ToDelete, Set<String> filesExpected)\n{\r\n    final String errMsgPrefix = \"The set of paths for deletion are not the \" + \"same as expected\";\r\n    if (files2ToDelete.size() != filesExpected.size()) {\r\n        fail(errMsgPrefix + \": actual size: \" + files2ToDelete.size() + \" vs \" + \"expected size: \" + filesExpected.size());\r\n    }\r\n    for (String file : filesExpected) {\r\n        if (!files2ToDelete.contains(file)) {\r\n            fail(errMsgPrefix + \": expecting \" + file);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "createNullDispatcher",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Dispatcher createNullDispatcher()\n{\r\n    return new Dispatcher() {\r\n\r\n        @Override\r\n        public EventHandler<Event> getEventHandler() {\r\n            return new EventHandler<Event>() {\r\n\r\n                @Override\r\n                public void handle(Event event) {\r\n                }\r\n            };\r\n        }\r\n\r\n        @Override\r\n        public void register(Class<? extends Enum> eventType, EventHandler handler) {\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "createLocalDirsHandlerService",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "LocalDirsHandlerService createLocalDirsHandlerService(YarnConfiguration conf, final String rootLogDir)\n{\r\n    LocalDirsHandlerService dirsHandlerService = new LocalDirsHandlerService() {\r\n\r\n        @Override\r\n        public List<String> getLogDirsForRead() {\r\n            return new ArrayList<String>() {\r\n\r\n                {\r\n                    add(rootLogDir);\r\n                }\r\n            };\r\n        }\r\n\r\n        @Override\r\n        public List<String> getLogDirsForCleanup() {\r\n            return new ArrayList<String>() {\r\n\r\n                {\r\n                    add(rootLogDir);\r\n                }\r\n            };\r\n        }\r\n    };\r\n    dirsHandlerService.init(conf);\r\n    return dirsHandlerService;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "createContext",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Context createContext(YarnConfiguration conf)\n{\r\n    return new NodeManager.NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), new NMNullStateStoreService(), false, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\logaggregation",
  "methodName" : "testDFSQuotaExceeded",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testDFSQuotaExceeded() throws Exception\n{\r\n    DeletionService deletionServiceWithExpectedFiles = createDeletionServiceWithExpectedFile2Delete(Collections.emptySet());\r\n    final YarnConfiguration config = new YarnConfiguration();\r\n    ApplicationId appId = ApplicationId.newInstance(1357543L, 1);\r\n    LogAggregationTFileController format = Mockito.mock(LogAggregationTFileController.class);\r\n    Mockito.doThrow(new LogAggregationDFSException()).when(format).closeWriter();\r\n    NodeManager.NMContext context = (NMContext) createContext(config);\r\n    context.setNMLogAggregationStatusTracker(Mockito.mock(NMLogAggregationStatusTracker.class));\r\n    final AppLogAggregatorInTest appLogAggregator = createAppLogAggregator(appId, LOCAL_LOG_DIR.getAbsolutePath(), config, context, 1000L, deletionServiceWithExpectedFiles, format);\r\n    appLogAggregator.startContainerLogAggregation(new ContainerLogContext(ContainerId.newContainerId(ApplicationAttemptId.newInstance(appId, 0), 0), ContainerType.TASK, 0));\r\n    appLogAggregator.finishLogAggregation();\r\n    appLogAggregator.run();\r\n    ArgumentCaptor<LogValue> logValCaptor = ArgumentCaptor.forClass(LogValue.class);\r\n    verify(appLogAggregator.getLogAggregationFileController()).write(any(LogKey.class), logValCaptor.capture());\r\n    Set<String> filesUploaded = new HashSet<>();\r\n    LogValue logValue = logValCaptor.getValue();\r\n    for (File file : logValue.getPendingLogFilesToUploadForThisContainer()) {\r\n        filesUploaded.add(file.getAbsolutePath());\r\n    }\r\n    verifyFilesUploaded(filesUploaded, Collections.emptySet());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    ResourceUtils.resetResourceTypes();\r\n    String resourceTypesFile = \"resource-types-pluggable-devices.xml\";\r\n    this.tempResourceTypesFile = TestResourceUtils.setupResourceTypes(this.conf, resourceTypesFile);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin",
  "methodName" : "stubResourcePluginmanager",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "ResourcePluginManager stubResourcePluginmanager()\n{\r\n    final ResourcePluginManager rpm = mock(ResourcePluginManager.class);\r\n    Map<String, ResourcePlugin> plugins = new HashMap<>();\r\n    ResourcePlugin resourcePlugin = mock(ResourcePlugin.class);\r\n    NodeResourceUpdaterPlugin nodeResourceUpdaterPlugin = mock(NodeResourceUpdaterPlugin.class);\r\n    when(resourcePlugin.getNodeResourceHandlerInstance()).thenReturn(nodeResourceUpdaterPlugin);\r\n    plugins.put(\"resource1\", resourcePlugin);\r\n    resourcePlugin = mock(ResourcePlugin.class);\r\n    when(resourcePlugin.createResourceHandler(any(Context.class), any(CGroupsHandler.class), any(PrivilegedOperationExecutor.class))).thenReturn(new CustomizedResourceHandler());\r\n    plugins.put(\"resource2\", resourcePlugin);\r\n    when(rpm.getNameToPlugins()).thenReturn(plugins);\r\n    return rpm;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin",
  "methodName" : "tearDown",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void tearDown()\n{\r\n    if (nm != null) {\r\n        try {\r\n            ServiceOperations.stop(nm);\r\n        } catch (Throwable t) {\r\n        }\r\n    }\r\n    File dest = new File(this.tempResourceTypesFile);\r\n    if (dest.exists()) {\r\n        assertThat(dest.delete()).isTrue();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin",
  "methodName" : "testResourcePluginManagerInitialization",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testResourcePluginManagerInitialization() throws Exception\n{\r\n    final ResourcePluginManager rpm = stubResourcePluginmanager();\r\n    nm = new ResourcePluginMockNM(rpm);\r\n    nm.init(conf);\r\n    verify(rpm).initialize(any(Context.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin",
  "methodName" : "testNodeStatusUpdaterWithResourcePluginsEnabled",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testNodeStatusUpdaterWithResourcePluginsEnabled() throws Exception\n{\r\n    final ResourcePluginManager rpm = stubResourcePluginmanager();\r\n    nm = new ResourcePluginMockNM(rpm);\r\n    nm.init(conf);\r\n    nm.start();\r\n    NodeResourceUpdaterPlugin nodeResourceUpdaterPlugin = rpm.getNameToPlugins().get(\"resource1\").getNodeResourceHandlerInstance();\r\n    verify(nodeResourceUpdaterPlugin).updateConfiguredResource(any(Resource.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin",
  "methodName" : "testLinuxContainerExecutorWithResourcePluginsEnabled",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testLinuxContainerExecutorWithResourcePluginsEnabled()\n{\r\n    final ResourcePluginManager rpm = stubResourcePluginmanager();\r\n    final LinuxContainerExecutor lce = new MyLCE();\r\n    nm = new NodeManager() {\r\n\r\n        @Override\r\n        protected NodeStatusUpdater createNodeStatusUpdater(Context context, Dispatcher dispatcher, NodeHealthCheckerService healthChecker) {\r\n            ((NMContext) context).setResourcePluginManager(rpm);\r\n            return new BaseNodeStatusUpdaterForTest(context, dispatcher, healthChecker, metrics, new BaseResourceTrackerForTest());\r\n        }\r\n\r\n        @Override\r\n        protected ContainerManagerImpl createContainerManager(Context context, ContainerExecutor exec, DeletionService del, NodeStatusUpdater nodeStatusUpdater, ApplicationACLsManager aclsManager, LocalDirsHandlerService dirsHandler) {\r\n            return new MyContainerManager(context, exec, del, nodeStatusUpdater, metrics, dirsHandler);\r\n        }\r\n\r\n        @Override\r\n        protected ContainerExecutor createContainerExecutor(Configuration configuration) {\r\n            ((NMContext) this.getNMContext()).setResourcePluginManager(rpm);\r\n            lce.setConf(configuration);\r\n            return lce;\r\n        }\r\n    };\r\n    nm.init(conf);\r\n    nm.start();\r\n    ResourceHandler handler = lce.getResourceHandler();\r\n    assertThat(handler).isNotNull();\r\n    assertThat(handler instanceof ResourceHandlerChain).isTrue();\r\n    boolean newHandlerAdded = false;\r\n    for (ResourceHandler h : ((ResourceHandlerChain) handler).getResourceHandlerList()) {\r\n        if (h instanceof DevicePluginAdapter) {\r\n            fail(\"ResourceHandler is a DevicePluginAdapter.\");\r\n        }\r\n        if (h instanceof CustomizedResourceHandler) {\r\n            newHandlerAdded = true;\r\n            break;\r\n        }\r\n    }\r\n    assertThat(newHandlerAdded).withFailMessage(\"New ResourceHandler should be added\").isTrue();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin",
  "methodName" : "testInitializationWithPluggableDeviceFrameworkDisabled",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testInitializationWithPluggableDeviceFrameworkDisabled() throws Exception\n{\r\n    ResourcePluginManager rpm = new ResourcePluginManager();\r\n    ResourcePluginManager rpmSpy = spy(rpm);\r\n    nm = new ResourcePluginMockNM(rpmSpy);\r\n    conf.setBoolean(YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED, false);\r\n    nm.init(conf);\r\n    nm.start();\r\n    verify(rpmSpy).initialize(any(Context.class));\r\n    verify(rpmSpy, times(0)).initializePluggableDevicePlugins(any(Context.class), any(Configuration.class), anyMap());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin",
  "methodName" : "testInitializationWithPluggableDeviceFrameworkDisabled2",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testInitializationWithPluggableDeviceFrameworkDisabled2() throws Exception\n{\r\n    ResourcePluginManager rpm = new ResourcePluginManager();\r\n    ResourcePluginManager rpmSpy = spy(rpm);\r\n    nm = new ResourcePluginMockNM(rpmSpy);\r\n    nm.init(conf);\r\n    nm.start();\r\n    verify(rpmSpy).initialize(any(Context.class));\r\n    verify(rpmSpy, times(0)).initializePluggableDevicePlugins(any(Context.class), any(Configuration.class), anyMap());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin",
  "methodName" : "testInitializationWithPluggableDeviceFrameworkEnabled",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testInitializationWithPluggableDeviceFrameworkEnabled() throws Exception\n{\r\n    ResourcePluginManager rpm = new ResourcePluginManager();\r\n    ResourcePluginManager rpmSpy = spy(rpm);\r\n    nm = new ResourcePluginMockNM(rpmSpy);\r\n    conf.setBoolean(YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED, true);\r\n    conf.setStrings(YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_DEVICE_CLASSES, FakeTestDevicePlugin1.class.getCanonicalName());\r\n    nm.init(conf);\r\n    nm.start();\r\n    verify(rpmSpy).initialize(any(Context.class));\r\n    verify(rpmSpy).initializePluggableDevicePlugins(any(Context.class), any(Configuration.class), anyMap());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin",
  "methodName" : "testInitializationWithPluggableDeviceFrameworkEnabled2",
  "errType" : [ "YarnRuntimeException", "Exception" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testInitializationWithPluggableDeviceFrameworkEnabled2() throws ClassNotFoundException\n{\r\n    ResourcePluginManager rpm = new ResourcePluginManager();\r\n    ResourcePluginManager rpmSpy = spy(rpm);\r\n    nm = new ResourcePluginMockNM(rpmSpy);\r\n    boolean fail = false;\r\n    try {\r\n        conf.setBoolean(YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED, true);\r\n        nm.init(conf);\r\n        nm.start();\r\n    } catch (YarnRuntimeException e) {\r\n        fail = true;\r\n    } catch (Exception ignored) {\r\n    }\r\n    verify(rpmSpy).initializePluggableDevicePlugins(any(Context.class), any(Configuration.class), anyMap());\r\n    assertThat(fail).isTrue();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin",
  "methodName" : "testNormalInitializationOfPluggableDeviceClasses",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testNormalInitializationOfPluggableDeviceClasses()\n{\r\n    ResourcePluginManager rpm = new ResourcePluginManager();\r\n    ResourcePluginManager rpmSpy = spy(rpm);\r\n    nm = new ResourcePluginMockNM(rpmSpy);\r\n    conf.setBoolean(YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED, true);\r\n    conf.setStrings(YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_DEVICE_CLASSES, FakeTestDevicePlugin1.class.getCanonicalName());\r\n    nm.init(conf);\r\n    nm.start();\r\n    Map<String, ResourcePlugin> pluginMap = rpmSpy.getNameToPlugins();\r\n    assertThat(pluginMap.size()).isOne();\r\n    ResourcePlugin rp = pluginMap.get(\"cmpA.com/hdwA\");\r\n    if (!(rp instanceof DevicePluginAdapter)) {\r\n        fail(\"ResourcePlugin is not DevicePluginAdapter.\");\r\n    }\r\n    verify(rpmSpy).checkInterfaceCompatibility(DevicePlugin.class, FakeTestDevicePlugin1.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin",
  "methodName" : "testLoadInvalidPluggableDeviceClasses",
  "errType" : [ "YarnRuntimeException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testLoadInvalidPluggableDeviceClasses()\n{\r\n    ResourcePluginManager rpm = new ResourcePluginManager();\r\n    ResourcePluginManager rpmSpy = spy(rpm);\r\n    nm = new ResourcePluginMockNM(rpmSpy);\r\n    conf.setBoolean(YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED, true);\r\n    conf.setStrings(YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_DEVICE_CLASSES, FakeTestDevicePlugin2.class.getCanonicalName());\r\n    String expectedMessage = \"Class: \" + FakeTestDevicePlugin2.class.getCanonicalName() + \" not instance of \" + DevicePlugin.class.getCanonicalName();\r\n    String actualMessage = \"\";\r\n    try {\r\n        nm.init(conf);\r\n        nm.start();\r\n    } catch (YarnRuntimeException e) {\r\n        actualMessage = e.getMessage();\r\n    }\r\n    assertThat(actualMessage).isEqualTo(expectedMessage);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin",
  "methodName" : "testLoadDuplicateResourceNameDevicePlugin",
  "errType" : [ "YarnRuntimeException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testLoadDuplicateResourceNameDevicePlugin()\n{\r\n    ResourcePluginManager rpm = new ResourcePluginManager();\r\n    ResourcePluginManager rpmSpy = spy(rpm);\r\n    nm = new ResourcePluginMockNM(rpmSpy);\r\n    conf.setBoolean(YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED, true);\r\n    conf.setStrings(YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_DEVICE_CLASSES, FakeTestDevicePlugin1.class.getCanonicalName() + \",\" + FakeTestDevicePlugin3.class.getCanonicalName());\r\n    String expectedMessage = \"cmpA.com/hdwA\" + \" already registered! Please change resource type name\" + \" or configure correct resource type name\" + \" in resource-types.xml for \" + FakeTestDevicePlugin3.class.getCanonicalName();\r\n    String actualMessage = \"\";\r\n    try {\r\n        nm.init(conf);\r\n        nm.start();\r\n    } catch (YarnRuntimeException e) {\r\n        actualMessage = e.getMessage();\r\n    }\r\n    assertThat(actualMessage).isEqualTo(expectedMessage);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin",
  "methodName" : "testIncompatibleDevicePlugin",
  "errType" : [ "YarnRuntimeException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testIncompatibleDevicePlugin()\n{\r\n    ResourcePluginManager rpm = new ResourcePluginManager();\r\n    ResourcePluginManager rpmSpy = spy(rpm);\r\n    nm = new ResourcePluginMockNM(rpmSpy);\r\n    conf.setBoolean(YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED, true);\r\n    conf.setStrings(YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_DEVICE_CLASSES, FakeTestDevicePlugin4.class.getCanonicalName());\r\n    String expectedMessage = \"Method getRegisterRequestInfo\" + \" is expected but not implemented in \" + FakeTestDevicePlugin4.class.getCanonicalName();\r\n    String actualMessage = \"\";\r\n    try {\r\n        nm.init(conf);\r\n        nm.start();\r\n    } catch (YarnRuntimeException e) {\r\n        actualMessage = e.getMessage();\r\n    }\r\n    assertThat(actualMessage).isEqualTo(expectedMessage);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin",
  "methodName" : "testLoadPluginWithCustomizedScheduler",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testLoadPluginWithCustomizedScheduler()\n{\r\n    ResourcePluginManager rpm = new ResourcePluginManager();\r\n    DeviceMappingManager dmm = new DeviceMappingManager(mock(Context.class));\r\n    DeviceMappingManager dmmSpy = spy(dmm);\r\n    ResourcePluginManager rpmSpy = spy(rpm);\r\n    rpmSpy.setDeviceMappingManager(dmmSpy);\r\n    nm = new ResourcePluginMockNM(rpmSpy);\r\n    conf.setBoolean(YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED, true);\r\n    conf.setStrings(YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_DEVICE_CLASSES, FakeTestDevicePlugin1.class.getCanonicalName() + \",\" + FakeTestDevicePlugin5.class.getCanonicalName());\r\n    nm.init(conf);\r\n    nm.start();\r\n    verify(rpmSpy).checkInterfaceCompatibility(DevicePlugin.class, FakeTestDevicePlugin1.class);\r\n    verify(dmmSpy).addDevicePluginScheduler(any(String.class), any(DevicePluginScheduler.class));\r\n    assertThat(dmm.getDevicePluginSchedulers().size()).isOne();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin",
  "methodName" : "testRequestedResourceNameIsConfigured",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testRequestedResourceNameIsConfigured()\n{\r\n    ResourcePluginManager rpm = new ResourcePluginManager();\r\n    String resourceName = \"a.com/a\";\r\n    assertThat(rpm.isConfiguredResourceName(resourceName)).isFalse();\r\n    resourceName = \"cmp.com/cmp\";\r\n    assertThat(rpm.isConfiguredResourceName(resourceName)).isTrue();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "createNodeHealthCheckerService",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeHealthCheckerService createNodeHealthCheckerService()\n{\r\n    LocalDirsHandlerService dirsHandler = new LocalDirsHandlerService();\r\n    return new NodeHealthCheckerService(dirsHandler);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testContainerLogDirs",
  "errType" : null,
  "containingMethodsNum" : 30,
  "sourceCodeText" : "void testContainerLogDirs() throws IOException, YarnException\n{\r\n    File absLogDir = new File(\"target\", TestNMWebServer.class.getSimpleName() + \"LogDir\").getAbsoluteFile();\r\n    String logdirwithFile = absLogDir.toURI().toString();\r\n    Configuration conf = new Configuration();\r\n    conf.set(YarnConfiguration.NM_LOG_DIRS, logdirwithFile);\r\n    NodeHealthCheckerService healthChecker = createNodeHealthCheckerService();\r\n    healthChecker.init(conf);\r\n    LocalDirsHandlerService dirsHandler = healthChecker.getDiskHandler();\r\n    NMContext nmContext = new NodeManager.NMContext(null, null, dirsHandler, new ApplicationACLsManager(conf), new NMNullStateStoreService(), false, conf);\r\n    RecordFactory recordFactory = RecordFactoryProvider.getRecordFactory(conf);\r\n    String user = \"nobody\";\r\n    long clusterTimeStamp = 1234;\r\n    ApplicationId appId = BuilderUtils.newApplicationId(recordFactory, clusterTimeStamp, 1);\r\n    Application app = mock(Application.class);\r\n    when(app.getUser()).thenReturn(user);\r\n    when(app.getAppId()).thenReturn(appId);\r\n    ApplicationAttemptId appAttemptId = BuilderUtils.newApplicationAttemptId(appId, 1);\r\n    ContainerId container1 = BuilderUtils.newContainerId(recordFactory, appId, appAttemptId, 0);\r\n    nmContext.getApplications().put(appId, app);\r\n    MockContainer container = new MockContainer(appAttemptId, new AsyncDispatcher(), conf, user, appId, 1);\r\n    container.setState(ContainerState.RUNNING);\r\n    nmContext.getContainers().put(container1, container);\r\n    List<File> files = null;\r\n    files = ContainerLogsUtils.getContainerLogDirs(container1, user, nmContext);\r\n    Assert.assertTrue(!(files.get(0).toString().contains(\"file:\")));\r\n    nmContext.getContainers().remove(container1);\r\n    Assert.assertNull(nmContext.getContainers().get(container1));\r\n    files = ContainerLogsUtils.getContainerLogDirs(container1, user, nmContext);\r\n    Assert.assertTrue(!(files.get(0).toString().contains(\"file:\")));\r\n    LocalDirsHandlerService dirsHandlerForFullDisk = spy(dirsHandler);\r\n    when(dirsHandlerForFullDisk.getLogDirs()).thenReturn(new ArrayList<String>());\r\n    when(dirsHandlerForFullDisk.getLogDirsForRead()).thenReturn(Arrays.asList(new String[] { absLogDir.getAbsolutePath() }));\r\n    nmContext = new NodeManager.NMContext(null, null, dirsHandlerForFullDisk, new ApplicationACLsManager(conf), new NMNullStateStoreService(), false, conf);\r\n    nmContext.getApplications().put(appId, app);\r\n    container.setState(ContainerState.RUNNING);\r\n    nmContext.getContainers().put(container1, container);\r\n    List<File> dirs = ContainerLogsUtils.getContainerLogDirs(container1, user, nmContext);\r\n    File containerLogDir = new File(absLogDir, appId + \"/\" + container1);\r\n    Assert.assertTrue(dirs.contains(containerLogDir));\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testContainerLogFile",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testContainerLogFile() throws IOException, YarnException\n{\r\n    File absLogDir = new File(\"target\", TestNMWebServer.class.getSimpleName() + \"LogDir\").getAbsoluteFile();\r\n    String logdirwithFile = absLogDir.toURI().toString();\r\n    Configuration conf = new Configuration();\r\n    conf.set(YarnConfiguration.NM_LOG_DIRS, logdirwithFile);\r\n    conf.setFloat(YarnConfiguration.NM_MAX_PER_DISK_UTILIZATION_PERCENTAGE, 0.0f);\r\n    LocalDirsHandlerService dirsHandler = new LocalDirsHandlerService();\r\n    dirsHandler.init(conf);\r\n    NMContext nmContext = new NodeManager.NMContext(null, null, dirsHandler, new ApplicationACLsManager(conf), new NMNullStateStoreService(), false, conf);\r\n    String user = \"nobody\";\r\n    long clusterTimeStamp = 1234;\r\n    ApplicationId appId = BuilderUtils.newApplicationId(clusterTimeStamp, 1);\r\n    Application app = mock(Application.class);\r\n    when(app.getUser()).thenReturn(user);\r\n    when(app.getAppId()).thenReturn(appId);\r\n    ApplicationAttemptId appAttemptId = BuilderUtils.newApplicationAttemptId(appId, 1);\r\n    ContainerId containerId = BuilderUtils.newContainerId(appAttemptId, 1);\r\n    nmContext.getApplications().put(appId, app);\r\n    MockContainer container = new MockContainer(appAttemptId, new AsyncDispatcher(), conf, user, appId, 1);\r\n    container.setState(ContainerState.RUNNING);\r\n    nmContext.getContainers().put(containerId, container);\r\n    File containerLogDir = new File(absLogDir, ContainerLaunch.getRelativeContainerLogDir(appId.toString(), containerId.toString()));\r\n    containerLogDir.mkdirs();\r\n    String fileName = \"fileName\";\r\n    File containerLogFile = new File(containerLogDir, fileName);\r\n    containerLogFile.createNewFile();\r\n    File file = ContainerLogsUtils.getContainerLogFile(containerId, fileName, user, nmContext);\r\n    Assert.assertEquals(containerLogFile.toURI().toString(), file.toURI().toString());\r\n    FileUtil.fullyDelete(absLogDir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testContainerLogPageAccess",
  "errType" : null,
  "containingMethodsNum" : 41,
  "sourceCodeText" : "void testContainerLogPageAccess() throws IOException\n{\r\n    assumeTrue(NativeIO.isAvailable());\r\n    String user = \"randomUser\" + System.currentTimeMillis();\r\n    File absLogDir = null, appDir = null, containerDir = null, syslog = null;\r\n    try {\r\n        absLogDir = new File(\"target\", TestContainerLogsPage.class.getSimpleName() + \"LogDir\").getAbsoluteFile();\r\n        absLogDir.mkdir();\r\n        Configuration conf = new Configuration();\r\n        conf.set(YarnConfiguration.NM_LOG_DIRS, absLogDir.toURI().toString());\r\n        conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION, \"kerberos\");\r\n        UserGroupInformation.setConfiguration(conf);\r\n        NodeHealthCheckerService healthChecker = createNodeHealthCheckerService();\r\n        healthChecker.init(conf);\r\n        LocalDirsHandlerService dirsHandler = healthChecker.getDiskHandler();\r\n        RecordFactory recordFactory = RecordFactoryProvider.getRecordFactory(conf);\r\n        long clusterTimeStamp = 1234;\r\n        ApplicationId appId = BuilderUtils.newApplicationId(recordFactory, clusterTimeStamp, 1);\r\n        Application app = mock(Application.class);\r\n        when(app.getAppId()).thenReturn(appId);\r\n        when(app.getUser()).thenReturn(user);\r\n        ApplicationAttemptId appAttemptId = BuilderUtils.newApplicationAttemptId(appId, 1);\r\n        ContainerId container1 = BuilderUtils.newContainerId(recordFactory, appId, appAttemptId, 0);\r\n        appDir = new File(absLogDir, appId.toString());\r\n        appDir.mkdir();\r\n        containerDir = new File(appDir, container1.toString());\r\n        containerDir.mkdir();\r\n        syslog = new File(containerDir, \"syslog\");\r\n        syslog.createNewFile();\r\n        BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(syslog));\r\n        out.write(\"Log file Content\".getBytes());\r\n        out.close();\r\n        Context context = mock(Context.class);\r\n        ConcurrentMap<ApplicationId, Application> appMap = new ConcurrentHashMap<ApplicationId, Application>();\r\n        appMap.put(appId, app);\r\n        when(context.getApplications()).thenReturn(appMap);\r\n        ConcurrentHashMap<ContainerId, Container> containers = new ConcurrentHashMap<ContainerId, Container>();\r\n        when(context.getContainers()).thenReturn(containers);\r\n        when(context.getLocalDirsHandler()).thenReturn(dirsHandler);\r\n        when(context.getConf()).thenReturn(conf);\r\n        MockContainer container = new MockContainer(appAttemptId, new AsyncDispatcher(), conf, user, appId, 1);\r\n        container.setState(ContainerState.RUNNING);\r\n        context.getContainers().put(container1, container);\r\n        ContainersLogsBlock cLogsBlock = new ContainersLogsBlock(context);\r\n        Map<String, String> params = new HashMap<String, String>();\r\n        params.put(YarnWebParams.CONTAINER_ID, container1.toString());\r\n        params.put(YarnWebParams.CONTAINER_LOG_TYPE, \"syslog\");\r\n        Injector injector = WebAppTests.testPage(ContainerLogsPage.class, ContainersLogsBlock.class, cLogsBlock, params, (Module[]) null);\r\n        PrintWriter spyPw = WebAppTests.getPrintWriter(injector);\r\n        verify(spyPw).write(\"Exception reading log file. Application submitted by '\" + user + \"' doesn't own requested log file : syslog\");\r\n    } finally {\r\n        if (syslog != null) {\r\n            syslog.delete();\r\n        }\r\n        if (containerDir != null) {\r\n            containerDir.delete();\r\n        }\r\n        if (appDir != null) {\r\n            appDir.delete();\r\n        }\r\n        if (absLogDir != null) {\r\n            absLogDir.delete();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testLogDirWithDriveLetter",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testLogDirWithDriveLetter() throws Exception\n{\r\n    LocalDirsHandlerService localDirs = mock(LocalDirsHandlerService.class);\r\n    List<String> logDirs = new ArrayList<String>();\r\n    logDirs.add(\"F:/nmlogs\");\r\n    when(localDirs.getLogDirsForRead()).thenReturn(logDirs);\r\n    ApplicationIdPBImpl appId = mock(ApplicationIdPBImpl.class);\r\n    when(appId.toString()).thenReturn(\"app_id_1\");\r\n    ApplicationAttemptIdPBImpl appAttemptId = mock(ApplicationAttemptIdPBImpl.class);\r\n    when(appAttemptId.getApplicationId()).thenReturn(appId);\r\n    ContainerId containerId = mock(ContainerIdPBImpl.class);\r\n    when(containerId.getApplicationAttemptId()).thenReturn(appAttemptId);\r\n    List<File> logDirFiles = ContainerLogsUtils.getContainerLogDirs(containerId, localDirs);\r\n    Assert.assertTrue(\"logDir lost drive letter \" + logDirFiles.get(0), logDirFiles.get(0).toString().indexOf(\"F:\" + File.separator + \"nmlogs\") > -1);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testLogFileWithDriveLetter",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testLogFileWithDriveLetter() throws Exception\n{\r\n    ContainerImpl container = mock(ContainerImpl.class);\r\n    ApplicationIdPBImpl appId = mock(ApplicationIdPBImpl.class);\r\n    when(appId.toString()).thenReturn(\"appId\");\r\n    Application app = mock(Application.class);\r\n    when(app.getAppId()).thenReturn(appId);\r\n    ApplicationAttemptIdPBImpl appAttemptId = mock(ApplicationAttemptIdPBImpl.class);\r\n    when(appAttemptId.getApplicationId()).thenReturn(appId);\r\n    ConcurrentMap<ApplicationId, Application> applications = new ConcurrentHashMap<ApplicationId, Application>();\r\n    applications.put(appId, app);\r\n    ContainerId containerId = mock(ContainerIdPBImpl.class);\r\n    when(containerId.toString()).thenReturn(\"containerId\");\r\n    when(containerId.getApplicationAttemptId()).thenReturn(appAttemptId);\r\n    ConcurrentMap<ContainerId, Container> containers = new ConcurrentHashMap<ContainerId, Container>();\r\n    containers.put(containerId, container);\r\n    LocalDirsHandlerService localDirs = mock(LocalDirsHandlerService.class);\r\n    when(localDirs.getLogPathToRead(\"appId\" + Path.SEPARATOR + \"containerId\" + Path.SEPARATOR + \"fileName\")).thenReturn(new Path(\"F:/nmlogs/appId/containerId/fileName\"));\r\n    NMContext context = mock(NMContext.class);\r\n    when(context.getLocalDirsHandler()).thenReturn(localDirs);\r\n    when(context.getApplications()).thenReturn(applications);\r\n    when(context.getContainers()).thenReturn(containers);\r\n    File logFile = ContainerLogsUtils.getContainerLogFile(containerId, \"fileName\", null, context);\r\n    Assert.assertTrue(\"logFile lost drive letter \" + logFile, logFile.toString().indexOf(\"F:\" + File.separator + \"nmlogs\") > -1);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\application",
  "methodName" : "testApplicationInit1",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testApplicationInit1()\n{\r\n    WrappedApplication wa = null;\r\n    try {\r\n        wa = new WrappedApplication(1, 314159265358979L, \"yak\", 3);\r\n        wa.initApplication();\r\n        wa.initContainer(1);\r\n        assertEquals(ApplicationState.INITING, wa.app.getApplicationState());\r\n        assertEquals(1, wa.app.getContainers().size());\r\n        wa.initContainer(0);\r\n        wa.initContainer(2);\r\n        assertEquals(ApplicationState.INITING, wa.app.getApplicationState());\r\n        assertEquals(3, wa.app.getContainers().size());\r\n        wa.applicationInited();\r\n        assertEquals(ApplicationState.RUNNING, wa.app.getApplicationState());\r\n        for (int i = 0; i < wa.containers.size(); i++) {\r\n            verify(wa.containerBus).handle(argThat(new ContainerInitMatcher(wa.containers.get(i).getContainerId())));\r\n        }\r\n    } finally {\r\n        if (wa != null)\r\n            wa.finished();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\application",
  "methodName" : "testApplicationInit2",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testApplicationInit2()\n{\r\n    WrappedApplication wa = null;\r\n    try {\r\n        wa = new WrappedApplication(2, 314159265358979L, \"yak\", 3);\r\n        wa.initApplication();\r\n        wa.initContainer(0);\r\n        assertEquals(ApplicationState.INITING, wa.app.getApplicationState());\r\n        assertEquals(1, wa.app.getContainers().size());\r\n        wa.applicationInited();\r\n        assertEquals(ApplicationState.RUNNING, wa.app.getApplicationState());\r\n        verify(wa.containerBus).handle(argThat(new ContainerInitMatcher(wa.containers.get(0).getContainerId())));\r\n        wa.initContainer(1);\r\n        wa.initContainer(2);\r\n        assertEquals(ApplicationState.RUNNING, wa.app.getApplicationState());\r\n        assertEquals(3, wa.app.getContainers().size());\r\n        for (int i = 1; i < wa.containers.size(); i++) {\r\n            verify(wa.containerBus).handle(argThat(new ContainerInitMatcher(wa.containers.get(i).getContainerId())));\r\n        }\r\n    } finally {\r\n        if (wa != null)\r\n            wa.finished();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\application",
  "methodName" : "testAppRunningAfterContainersComplete",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testAppRunningAfterContainersComplete()\n{\r\n    WrappedApplication wa = null;\r\n    try {\r\n        wa = new WrappedApplication(3, 314159265358979L, \"yak\", 3);\r\n        wa.initApplication();\r\n        wa.initContainer(-1);\r\n        assertEquals(ApplicationState.INITING, wa.app.getApplicationState());\r\n        wa.applicationInited();\r\n        assertEquals(ApplicationState.RUNNING, wa.app.getApplicationState());\r\n        wa.containerFinished(0);\r\n        assertEquals(ApplicationState.RUNNING, wa.app.getApplicationState());\r\n        assertEquals(2, wa.app.getContainers().size());\r\n        wa.containerFinished(1);\r\n        wa.containerFinished(2);\r\n        assertEquals(ApplicationState.RUNNING, wa.app.getApplicationState());\r\n        assertEquals(0, wa.app.getContainers().size());\r\n    } finally {\r\n        if (wa != null)\r\n            wa.finished();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\application",
  "methodName" : "testContainersCompleteDuringAppInit1",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testContainersCompleteDuringAppInit1()\n{\r\n    WrappedApplication wa = null;\r\n    try {\r\n        wa = new WrappedApplication(3, 314159265358979L, \"yak\", 1);\r\n        wa.initApplication();\r\n        wa.initContainer(-1);\r\n        assertEquals(ApplicationState.INITING, wa.app.getApplicationState());\r\n        wa.containerFinished(0);\r\n        assertEquals(ApplicationState.INITING, wa.app.getApplicationState());\r\n        wa.applicationInited();\r\n        assertEquals(ApplicationState.RUNNING, wa.app.getApplicationState());\r\n        assertEquals(0, wa.app.getContainers().size());\r\n    } finally {\r\n        if (wa != null)\r\n            wa.finished();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\application",
  "methodName" : "testContainersCompleteDuringAppInit2",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testContainersCompleteDuringAppInit2()\n{\r\n    WrappedApplication wa = null;\r\n    try {\r\n        wa = new WrappedApplication(3, 314159265358979L, \"yak\", 3);\r\n        wa.initApplication();\r\n        wa.initContainer(-1);\r\n        assertEquals(ApplicationState.INITING, wa.app.getApplicationState());\r\n        wa.containerFinished(0);\r\n        assertEquals(ApplicationState.INITING, wa.app.getApplicationState());\r\n        wa.applicationInited();\r\n        assertEquals(ApplicationState.RUNNING, wa.app.getApplicationState());\r\n        assertEquals(2, wa.app.getContainers().size());\r\n        wa.containerFinished(1);\r\n        wa.containerFinished(2);\r\n        assertEquals(ApplicationState.RUNNING, wa.app.getApplicationState());\r\n        assertEquals(0, wa.app.getContainers().size());\r\n    } finally {\r\n        if (wa != null)\r\n            wa.finished();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\application",
  "methodName" : "testAppFinishedOnRunningContainers",
  "errType" : null,
  "containingMethodsNum" : 28,
  "sourceCodeText" : "void testAppFinishedOnRunningContainers()\n{\r\n    WrappedApplication wa = null;\r\n    try {\r\n        wa = new WrappedApplication(4, 314159265358979L, \"yak\", 3);\r\n        wa.initApplication();\r\n        wa.initContainer(-1);\r\n        assertEquals(ApplicationState.INITING, wa.app.getApplicationState());\r\n        wa.applicationInited();\r\n        assertEquals(ApplicationState.RUNNING, wa.app.getApplicationState());\r\n        wa.containerFinished(0);\r\n        assertEquals(ApplicationState.RUNNING, wa.app.getApplicationState());\r\n        assertEquals(2, wa.app.getContainers().size());\r\n        wa.appFinished();\r\n        assertEquals(ApplicationState.FINISHING_CONTAINERS_WAIT, wa.app.getApplicationState());\r\n        assertEquals(2, wa.app.getContainers().size());\r\n        for (int i = 1; i < wa.containers.size(); i++) {\r\n            verify(wa.containerBus).handle(argThat(new ContainerKillMatcher(wa.containers.get(i).getContainerId())));\r\n        }\r\n        wa.containerFinished(1);\r\n        assertEquals(ApplicationState.FINISHING_CONTAINERS_WAIT, wa.app.getApplicationState());\r\n        assertEquals(1, wa.app.getContainers().size());\r\n        reset(wa.localizerBus);\r\n        wa.containerFinished(2);\r\n        assertEquals(ApplicationState.APPLICATION_RESOURCES_CLEANINGUP, wa.app.getApplicationState());\r\n        assertEquals(0, wa.app.getContainers().size());\r\n        verify(wa.localizerBus).handle(refEq(new ApplicationLocalizationEvent(LocalizationEventType.DESTROY_APPLICATION_RESOURCES, wa.app), \"timestamp\"));\r\n        verify(wa.auxBus).handle(refEq(new AuxServicesEvent(AuxServicesEventType.APPLICATION_STOP, wa.appId)));\r\n        wa.appResourcesCleanedup();\r\n        for (Container container : wa.containers) {\r\n            ContainerTokenIdentifier identifier = wa.getContainerTokenIdentifier(container.getContainerId());\r\n            waitForContainerTokenToExpire(identifier);\r\n            Assert.assertTrue(wa.context.getContainerTokenSecretManager().isValidStartContainerRequest(identifier));\r\n        }\r\n        assertEquals(ApplicationState.FINISHED, wa.app.getApplicationState());\r\n    } finally {\r\n        if (wa != null)\r\n            wa.finished();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\application",
  "methodName" : "waitForContainerTokenToExpire",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ContainerTokenIdentifier waitForContainerTokenToExpire(ContainerTokenIdentifier identifier)\n{\r\n    int attempts = 5;\r\n    while (System.currentTimeMillis() < identifier.getExpiryTimeStamp() && attempts-- > 0) {\r\n        try {\r\n            Thread.sleep(1000);\r\n        } catch (Exception e) {\r\n        }\r\n    }\r\n    return identifier;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\application",
  "methodName" : "testApplicationOnAppLogHandlingInitedEvtShouldStoreLogInitedTime",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testApplicationOnAppLogHandlingInitedEvtShouldStoreLogInitedTime() throws IOException\n{\r\n    WrappedApplication wa = new WrappedApplication(5, 314159265358979L, \"yak\", 0);\r\n    wa.initApplication();\r\n    ArgumentCaptor<ContainerManagerApplicationProto> applicationProto = ArgumentCaptor.forClass(ContainerManagerApplicationProto.class);\r\n    final long timestamp = wa.applicationLogInited();\r\n    verify(wa.stateStoreService).storeApplication(any(ApplicationId.class), applicationProto.capture());\r\n    assertEquals(applicationProto.getValue().getAppLogAggregationInitedTime(), timestamp);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\application",
  "methodName" : "testAppFinishedOnCompletedContainers",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testAppFinishedOnCompletedContainers()\n{\r\n    WrappedApplication wa = null;\r\n    try {\r\n        wa = new WrappedApplication(5, 314159265358979L, \"yak\", 3);\r\n        wa.initApplication();\r\n        wa.initContainer(-1);\r\n        assertEquals(ApplicationState.INITING, wa.app.getApplicationState());\r\n        wa.applicationInited();\r\n        assertEquals(ApplicationState.RUNNING, wa.app.getApplicationState());\r\n        reset(wa.localizerBus);\r\n        wa.containerFinished(0);\r\n        wa.containerFinished(1);\r\n        wa.containerFinished(2);\r\n        assertEquals(ApplicationState.RUNNING, wa.app.getApplicationState());\r\n        assertEquals(0, wa.app.getContainers().size());\r\n        wa.appFinished();\r\n        assertEquals(ApplicationState.APPLICATION_RESOURCES_CLEANINGUP, wa.app.getApplicationState());\r\n        verify(wa.localizerBus).handle(refEq(new ApplicationLocalizationEvent(LocalizationEventType.DESTROY_APPLICATION_RESOURCES, wa.app), \"timestamp\"));\r\n        wa.appResourcesCleanedup();\r\n        for (Container container : wa.containers) {\r\n            ContainerTokenIdentifier identifier = wa.getContainerTokenIdentifier(container.getContainerId());\r\n            waitForContainerTokenToExpire(identifier);\r\n            Assert.assertTrue(wa.context.getContainerTokenSecretManager().isValidStartContainerRequest(identifier));\r\n        }\r\n        assertEquals(ApplicationState.FINISHED, wa.app.getApplicationState());\r\n    } finally {\r\n        if (wa != null)\r\n            wa.finished();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\application",
  "methodName" : "testStartContainerAfterAppRunning",
  "errType" : null,
  "containingMethodsNum" : 31,
  "sourceCodeText" : "void testStartContainerAfterAppRunning()\n{\r\n    WrappedApplication wa = null;\r\n    try {\r\n        wa = new WrappedApplication(5, 314159265358979L, \"yak\", 4);\r\n        wa.initApplication();\r\n        wa.initContainer(0);\r\n        assertEquals(ApplicationState.INITING, wa.app.getApplicationState());\r\n        wa.applicationInited();\r\n        assertEquals(ApplicationState.RUNNING, wa.app.getApplicationState());\r\n        assertEquals(ApplicationState.RUNNING, wa.app.getApplicationState());\r\n        assertEquals(1, wa.app.getContainers().size());\r\n        wa.appFinished();\r\n        verify(wa.containerBus).handle(argThat(new ContainerKillMatcher(wa.containers.get(0).getContainerId())));\r\n        assertEquals(ApplicationState.FINISHING_CONTAINERS_WAIT, wa.app.getApplicationState());\r\n        wa.initContainer(1);\r\n        verify(wa.containerBus).handle(argThat(new ContainerKillMatcher(wa.containers.get(1).getContainerId())));\r\n        assertEquals(ApplicationState.FINISHING_CONTAINERS_WAIT, wa.app.getApplicationState());\r\n        wa.containerFinished(1);\r\n        assertEquals(ApplicationState.FINISHING_CONTAINERS_WAIT, wa.app.getApplicationState());\r\n        wa.containerFinished(0);\r\n        assertEquals(ApplicationState.APPLICATION_RESOURCES_CLEANINGUP, wa.app.getApplicationState());\r\n        verify(wa.localizerBus).handle(refEq(new ApplicationLocalizationEvent(LocalizationEventType.DESTROY_APPLICATION_RESOURCES, wa.app), \"timestamp\"));\r\n        wa.initContainer(2);\r\n        verify(wa.containerBus).handle(argThat(new ContainerKillMatcher(wa.containers.get(2).getContainerId())));\r\n        assertEquals(ApplicationState.APPLICATION_RESOURCES_CLEANINGUP, wa.app.getApplicationState());\r\n        wa.containerFinished(2);\r\n        assertEquals(ApplicationState.APPLICATION_RESOURCES_CLEANINGUP, wa.app.getApplicationState());\r\n        wa.appResourcesCleanedup();\r\n        assertEquals(ApplicationState.FINISHED, wa.app.getApplicationState());\r\n        wa.initContainer(3);\r\n        verify(wa.containerBus).handle(argThat(new ContainerKillMatcher(wa.containers.get(3).getContainerId())));\r\n        assertEquals(ApplicationState.FINISHED, wa.app.getApplicationState());\r\n        wa.containerFinished(3);\r\n        assertEquals(ApplicationState.FINISHED, wa.app.getApplicationState());\r\n    } finally {\r\n        if (wa != null)\r\n            wa.finished();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\application",
  "methodName" : "testAppFinishedOnIniting",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testAppFinishedOnIniting()\n{\r\n    WrappedApplication wa = null;\r\n    try {\r\n        wa = new WrappedApplication(1, 314159265358979L, \"yak\", 3);\r\n        wa.initApplication();\r\n        wa.initContainer(0);\r\n        assertEquals(ApplicationState.INITING, wa.app.getApplicationState());\r\n        assertEquals(1, wa.app.getContainers().size());\r\n        reset(wa.localizerBus);\r\n        wa.appFinished();\r\n        verify(wa.containerBus).handle(argThat(new ContainerKillMatcher(wa.containers.get(0).getContainerId())));\r\n        assertEquals(ApplicationState.FINISHING_CONTAINERS_WAIT, wa.app.getApplicationState());\r\n        wa.containerFinished(0);\r\n        assertEquals(ApplicationState.APPLICATION_RESOURCES_CLEANINGUP, wa.app.getApplicationState());\r\n        verify(wa.localizerBus).handle(refEq(new ApplicationLocalizationEvent(LocalizationEventType.DESTROY_APPLICATION_RESOURCES, wa.app)));\r\n        wa.initContainer(1);\r\n        assertEquals(ApplicationState.APPLICATION_RESOURCES_CLEANINGUP, wa.app.getApplicationState());\r\n        assertEquals(0, wa.app.getContainers().size());\r\n        wa.appResourcesCleanedup();\r\n        assertEquals(ApplicationState.FINISHED, wa.app.getApplicationState());\r\n    } finally {\r\n        if (wa != null)\r\n            wa.finished();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\application",
  "methodName" : "testNMTokenSecretManagerCleanup",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testNMTokenSecretManagerCleanup()\n{\r\n    WrappedApplication wa = null;\r\n    try {\r\n        wa = new WrappedApplication(1, 314159265358979L, \"yak\", 1);\r\n        wa.initApplication();\r\n        wa.initContainer(0);\r\n        assertEquals(ApplicationState.INITING, wa.app.getApplicationState());\r\n        assertEquals(1, wa.app.getContainers().size());\r\n        wa.appFinished();\r\n        wa.containerFinished(0);\r\n        wa.appResourcesCleanedup();\r\n        assertEquals(ApplicationState.FINISHED, wa.app.getApplicationState());\r\n        verify(wa.nmTokenSecretMgr).appFinished(eq(wa.appId));\r\n    } finally {\r\n        if (wa != null) {\r\n            wa.finished();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\application",
  "methodName" : "createMockedContainer",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "Container createMockedContainer(ApplicationId appId, int containerId)\n{\r\n    ApplicationAttemptId appAttemptId = BuilderUtils.newApplicationAttemptId(appId, 1);\r\n    ContainerId cId = BuilderUtils.newContainerId(appAttemptId, containerId);\r\n    Container c = mock(Container.class);\r\n    when(c.getContainerId()).thenReturn(cId);\r\n    ContainerLaunchContext launchContext = mock(ContainerLaunchContext.class);\r\n    when(c.getLaunchContext()).thenReturn(launchContext);\r\n    when(launchContext.getApplicationACLs()).thenReturn(new HashMap<ApplicationAccessType, String>());\r\n    when(c.cloneAndGetContainerStatus()).thenReturn(BuilderUtils.newContainerStatus(cId, ContainerState.NEW, \"\", 0, Resource.newInstance(1024, 1)));\r\n    return c;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setup()\n{\r\n    plugin = new IntelFpgaOpenclPlugin();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "testLocalizedIPfileFound",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testLocalizedIPfileFound()\n{\r\n    Map<Path, List<String>> resources = createResources();\r\n    String path = plugin.retrieveIPfilePath(\"fpga\", \"workDir\", resources);\r\n    assertEquals(\"Retrieved IP file path\", \"/test/fpga.aocx\", path);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "testLocalizedIPfileNotFound",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testLocalizedIPfileNotFound()\n{\r\n    Map<Path, List<String>> resources = createResources();\r\n    String path = plugin.retrieveIPfilePath(\"dummy\", \"workDir\", resources);\r\n    assertNull(\"Retrieved IP file path\", path);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "testLocalizedIpfileNotFoundWithNoLocalResources",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testLocalizedIpfileNotFoundWithNoLocalResources()\n{\r\n    String path = plugin.retrieveIPfilePath(\"fpga\", \"workDir\", null);\r\n    assertNull(\"Retrieved IP file path\", path);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "testIPfileNotDefined",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testIPfileNotDefined()\n{\r\n    Map<Path, List<String>> resources = createResources();\r\n    String path = plugin.retrieveIPfilePath(null, \"workDir\", resources);\r\n    assertNull(\"Retrieved IP file path\", path);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\fpga",
  "methodName" : "createResources",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<Path, List<String>> createResources()\n{\r\n    Map<Path, List<String>> resources = new HashMap<>();\r\n    resources.put(new Path(\"/test/fpga.aocx\"), Lists.newArrayList(\"/symlinked/fpga.aocx\"));\r\n    return resources;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "data",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Collection<Object[]> data()\n{\r\n    return Arrays.asList(new Object[][] { { true }, { false } });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "setup",
  "errType" : [ "Exception", "Exception", "Exception" ],
  "containingMethodsNum" : 39,
  "sourceCodeText" : "void setup()\n{\r\n    conf = new Configuration();\r\n    conf.set(\"hadoop.tmp.dir\", tmpPath);\r\n    mockExecutor = Mockito.mock(PrivilegedOperationExecutor.class);\r\n    mockCGroupsHandler = Mockito.mock(CGroupsHandler.class);\r\n    containerId = \"container_e11_1518975676334_14532816_01_000001\";\r\n    container = mock(Container.class);\r\n    cId = mock(ContainerId.class);\r\n    appAttemptId = mock(ApplicationAttemptId.class);\r\n    mockApplicationId = mock(ApplicationId.class);\r\n    context = mock(ContainerLaunchContext.class);\r\n    env = new HashMap<String, String>();\r\n    env.put(\"FROM_CLIENT\", \"1\");\r\n    image = \"busybox:latest\";\r\n    nmContext = createMockNMContext();\r\n    env.put(DockerLinuxContainerRuntime.ENV_DOCKER_CONTAINER_IMAGE, image);\r\n    when(container.getContainerId()).thenReturn(cId);\r\n    when(cId.toString()).thenReturn(containerId);\r\n    when(mockApplicationId.toString()).thenReturn(\"applicationId\");\r\n    when(appAttemptId.getApplicationId()).thenReturn(mockApplicationId);\r\n    when(cId.getApplicationAttemptId()).thenReturn(appAttemptId);\r\n    when(container.getLaunchContext()).thenReturn(context);\r\n    when(context.getEnvironment()).thenReturn(env);\r\n    when(container.getUser()).thenReturn(submittingUser);\r\n    String uid = \"\";\r\n    String gid = \"\";\r\n    Shell.ShellCommandExecutor shexec1 = new Shell.ShellCommandExecutor(new String[] { \"id\", \"-u\", runAsUser });\r\n    Shell.ShellCommandExecutor shexec2 = new Shell.ShellCommandExecutor(new String[] { \"id\", \"-g\", runAsUser });\r\n    Shell.ShellCommandExecutor shexec3 = new Shell.ShellCommandExecutor(new String[] { \"id\", \"-G\", runAsUser });\r\n    try {\r\n        shexec1.execute();\r\n        uid = shexec1.getOutput().replaceAll(\"\\n$\", \"\");\r\n    } catch (Exception e) {\r\n        LOG.info(\"Could not run id -u command: \" + e);\r\n    }\r\n    try {\r\n        shexec2.execute();\r\n        gid = shexec2.getOutput().replaceAll(\"\\n$\", \"\");\r\n    } catch (Exception e) {\r\n        LOG.info(\"Could not run id -g command: \" + e);\r\n    }\r\n    try {\r\n        shexec3.execute();\r\n        groups = shexec3.getOutput().replace(\"\\n\", \" \").split(\" \");\r\n    } catch (Exception e) {\r\n        LOG.info(\"Could not run id -G command: \" + e);\r\n    }\r\n    uidGidPair = uid + \":\" + gid;\r\n    conf.setInt(YarnConfiguration.NM_DOCKER_USER_REMAPPING_GID_THRESHOLD, 0);\r\n    user = submittingUser;\r\n    appId = \"app_id\";\r\n    containerIdStr = containerId;\r\n    containerWorkDir = new Path(\"/test_container_work_dir\");\r\n    nmPrivateContainerScriptPath = new Path(\"/test_script_path\");\r\n    nmPrivateTokensPath = new Path(\"/test_private_tokens_path\");\r\n    if (https) {\r\n        nmPrivateKeystorePath = new Path(\"/test_private_keystore_path\");\r\n        nmPrivateTruststorePath = new Path(\"/test_private_truststore_path\");\r\n    } else {\r\n        nmPrivateKeystorePath = null;\r\n        nmPrivateTruststorePath = null;\r\n    }\r\n    pidFilePath = new Path(\"/test_pid_file_path\");\r\n    localDirs = new ArrayList<>();\r\n    logDirs = new ArrayList<>();\r\n    filecacheDirs = new ArrayList<>();\r\n    resourcesOptions = \"cgroups=none\";\r\n    userFilecacheDirs = new ArrayList<>();\r\n    applicationLocalDirs = new ArrayList<>();\r\n    containerLogDirs = new ArrayList<>();\r\n    localizedResources = new HashMap<>();\r\n    localDirs.add(\"/test_local_dir\");\r\n    logDirs.add(\"/test_log_dir\");\r\n    filecacheDirs.add(\"/test_filecache_dir\");\r\n    userFilecacheDirs.add(\"/test_user_filecache_dir\");\r\n    applicationLocalDirs.add(\"/test_application_local_dir\");\r\n    containerLogDirs.add(\"/test_container_log_dir\");\r\n    localizedResources.put(new Path(\"/test_local_dir/test_resource_file\"), Collections.singletonList(\"test_dir/test_resource_file\"));\r\n    File tmpDir = new File(tmpPath);\r\n    tmpDir.mkdirs();\r\n    testCapabilities = new String[] { \"NET_BIND_SERVICE\", \"SYS_CHROOT\" };\r\n    conf.setStrings(YarnConfiguration.NM_DOCKER_CONTAINER_CAPABILITIES, testCapabilities);\r\n    builder = new ContainerRuntimeContext.Builder(container);\r\n    builder.setExecutionAttribute(RUN_AS_USER, runAsUser).setExecutionAttribute(USER, user).setExecutionAttribute(APPID, appId).setExecutionAttribute(CONTAINER_ID_STR, containerIdStr).setExecutionAttribute(CONTAINER_WORK_DIR, containerWorkDir).setExecutionAttribute(NM_PRIVATE_CONTAINER_SCRIPT_PATH, nmPrivateContainerScriptPath).setExecutionAttribute(NM_PRIVATE_TOKENS_PATH, nmPrivateTokensPath).setExecutionAttribute(NM_PRIVATE_KEYSTORE_PATH, nmPrivateKeystorePath).setExecutionAttribute(NM_PRIVATE_TRUSTSTORE_PATH, nmPrivateTruststorePath).setExecutionAttribute(PID_FILE_PATH, pidFilePath).setExecutionAttribute(LOCAL_DIRS, localDirs).setExecutionAttribute(LOG_DIRS, logDirs).setExecutionAttribute(FILECACHE_DIRS, filecacheDirs).setExecutionAttribute(USER_FILECACHE_DIRS, userFilecacheDirs).setExecutionAttribute(APPLICATION_LOCAL_DIRS, applicationLocalDirs).setExecutionAttribute(CONTAINER_LOG_DIRS, containerLogDirs).setExecutionAttribute(LOCALIZED_RESOURCES, localizedResources).setExecutionAttribute(RESOURCES_OPTIONS, resourcesOptions);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "cleanUp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void cleanUp() throws IOException\n{\r\n    File tmpDir = new File(tmpPath);\r\n    FileUtils.deleteDirectory(tmpDir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "createMockNMContext",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "Context createMockNMContext()\n{\r\n    Context mockNMContext = mock(Context.class);\r\n    LocalDirsHandlerService localDirsHandler = mock(LocalDirsHandlerService.class);\r\n    ResourcePluginManager resourcePluginManager = mock(ResourcePluginManager.class);\r\n    ConcurrentMap<ContainerId, Container> containerMap = mock(ConcurrentMap.class);\r\n    when(mockNMContext.getLocalDirsHandler()).thenReturn(localDirsHandler);\r\n    when(mockNMContext.getResourcePluginManager()).thenReturn(resourcePluginManager);\r\n    when(mockNMContext.getContainers()).thenReturn(containerMap);\r\n    when(containerMap.get(any())).thenReturn(container);\r\n    ContainerManager mockContainerManager = mock(ContainerManager.class);\r\n    ResourceLocalizationService mockLocalzationService = mock(ResourceLocalizationService.class);\r\n    LocalizedResource mockLocalizedResource = mock(LocalizedResource.class);\r\n    when(mockLocalizedResource.getLocalPath()).thenReturn(new Path(\"/local/layer1\"));\r\n    when(mockLocalzationService.getLocalizedResource(any(), anyString(), any())).thenReturn(mockLocalizedResource);\r\n    when(mockContainerManager.getResourceLocalizationService()).thenReturn(mockLocalzationService);\r\n    when(mockNMContext.getContainerManager()).thenReturn(mockContainerManager);\r\n    try {\r\n        when(localDirsHandler.getLocalPathForWrite(anyString())).thenReturn(new Path(tmpPath));\r\n    } catch (IOException ioe) {\r\n        LOG.info(\"LocalDirsHandler failed\" + ioe);\r\n    }\r\n    return mockNMContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testSelectDockerContainerType",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testSelectDockerContainerType()\n{\r\n    Map<String, String> envDockerType = new HashMap<>();\r\n    Map<String, String> envOtherType = new HashMap<>();\r\n    envDockerType.put(ContainerRuntimeConstants.ENV_CONTAINER_TYPE, ContainerRuntimeConstants.CONTAINER_RUNTIME_DOCKER);\r\n    envOtherType.put(ContainerRuntimeConstants.ENV_CONTAINER_TYPE, \"other\");\r\n    Assert.assertEquals(false, DockerLinuxContainerRuntime.isDockerContainerRequested(conf, null));\r\n    Assert.assertEquals(true, DockerLinuxContainerRuntime.isDockerContainerRequested(conf, envDockerType));\r\n    Assert.assertEquals(false, DockerLinuxContainerRuntime.isDockerContainerRequested(conf, envOtherType));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testSelectDockerContainerTypeWithDockerAsDefault",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testSelectDockerContainerTypeWithDockerAsDefault()\n{\r\n    Map<String, String> envDockerType = new HashMap<>();\r\n    Map<String, String> envOtherType = new HashMap<>();\r\n    conf.set(YarnConfiguration.LINUX_CONTAINER_RUNTIME_TYPE, ContainerRuntimeConstants.CONTAINER_RUNTIME_DOCKER);\r\n    envDockerType.put(ContainerRuntimeConstants.ENV_CONTAINER_TYPE, ContainerRuntimeConstants.CONTAINER_RUNTIME_DOCKER);\r\n    envOtherType.put(ContainerRuntimeConstants.ENV_CONTAINER_TYPE, \"other\");\r\n    Assert.assertEquals(true, DockerLinuxContainerRuntime.isDockerContainerRequested(conf, null));\r\n    Assert.assertEquals(true, DockerLinuxContainerRuntime.isDockerContainerRequested(conf, envDockerType));\r\n    Assert.assertEquals(false, DockerLinuxContainerRuntime.isDockerContainerRequested(conf, envOtherType));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testSelectDockerContainerTypeWithDefaultSet",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testSelectDockerContainerTypeWithDefaultSet()\n{\r\n    Map<String, String> envDockerType = new HashMap<>();\r\n    Map<String, String> envOtherType = new HashMap<>();\r\n    conf.set(YarnConfiguration.LINUX_CONTAINER_RUNTIME_TYPE, \"default\");\r\n    envDockerType.put(ContainerRuntimeConstants.ENV_CONTAINER_TYPE, ContainerRuntimeConstants.CONTAINER_RUNTIME_DOCKER);\r\n    envOtherType.put(ContainerRuntimeConstants.ENV_CONTAINER_TYPE, \"other\");\r\n    Assert.assertEquals(false, DockerLinuxContainerRuntime.isDockerContainerRequested(conf, null));\r\n    Assert.assertEquals(true, DockerLinuxContainerRuntime.isDockerContainerRequested(conf, envDockerType));\r\n    Assert.assertEquals(false, DockerLinuxContainerRuntime.isDockerContainerRequested(conf, envOtherType));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "capturePrivilegedOperation",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "PrivilegedOperation capturePrivilegedOperation() throws PrivilegedOperationException\n{\r\n    return capturePrivilegedOperation(1);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "capturePrivilegedOperation",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "PrivilegedOperation capturePrivilegedOperation(int invocations) throws PrivilegedOperationException\n{\r\n    ArgumentCaptor<PrivilegedOperation> opCaptor = ArgumentCaptor.forClass(PrivilegedOperation.class);\r\n    verify(mockExecutor, times(invocations)).executePrivilegedOperation(any(), opCaptor.capture(), any(), any(), anyBoolean(), anyBoolean());\r\n    Mockito.reset(mockExecutor);\r\n    return opCaptor.getValue();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "capturePrivilegedOperationAndVerifyArgs",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "PrivilegedOperation capturePrivilegedOperationAndVerifyArgs() throws PrivilegedOperationException\n{\r\n    PrivilegedOperation op = capturePrivilegedOperation();\r\n    Assert.assertEquals(PrivilegedOperation.OperationType.LAUNCH_DOCKER_CONTAINER, op.getOperationType());\r\n    List<String> args = op.getArguments();\r\n    int expected = (https) ? 15 : 13;\r\n    int counter = 1;\r\n    Assert.assertEquals(expected, args.size());\r\n    Assert.assertEquals(user, args.get(counter++));\r\n    Assert.assertEquals(Integer.toString(PrivilegedOperation.RunAsUserCommand.LAUNCH_DOCKER_CONTAINER.getValue()), args.get(counter++));\r\n    Assert.assertEquals(appId, args.get(counter++));\r\n    Assert.assertEquals(containerId, args.get(counter++));\r\n    Assert.assertEquals(containerWorkDir.toString(), args.get(counter++));\r\n    Assert.assertEquals(nmPrivateContainerScriptPath.toUri().toString(), args.get(counter++));\r\n    Assert.assertEquals(nmPrivateTokensPath.toUri().getPath(), args.get(counter++));\r\n    if (https) {\r\n        Assert.assertEquals(\"--https\", args.get(counter++));\r\n        Assert.assertEquals(nmPrivateKeystorePath.toUri().toString(), args.get(counter++));\r\n        Assert.assertEquals(nmPrivateTruststorePath.toUri().toString(), args.get(counter++));\r\n    } else {\r\n        Assert.assertEquals(\"--http\", args.get(counter++));\r\n    }\r\n    Assert.assertEquals(pidFilePath.toString(), args.get(counter++));\r\n    Assert.assertEquals(localDirs.get(0), args.get(counter++));\r\n    Assert.assertEquals(logDirs.get(0), args.get(counter++));\r\n    return op;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testDockerContainerLaunch",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testDockerContainerLaunch() throws ContainerExecutionException, PrivilegedOperationException, IOException\n{\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    runtime.launchContainer(builder.build());\r\n    List<String> dockerCommands = readDockerCommands();\r\n    int expected = 13;\r\n    int counter = 0;\r\n    Assert.assertEquals(expected, dockerCommands.size());\r\n    Assert.assertEquals(\"[docker-command-execution]\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  cap-add=SYS_CHROOT,NET_BIND_SERVICE\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  cap-drop=ALL\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  detach=true\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  docker-command=run\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  group-add=\" + String.join(\",\", groups), dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  image=busybox:latest\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  launch-command=bash,/test_container_work_dir/launch_container.sh\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  mounts=\" + \"/test_container_log_dir:/test_container_log_dir:rw,\" + \"/test_application_local_dir:/test_application_local_dir:rw,\" + \"/test_filecache_dir:/test_filecache_dir:ro,\" + \"/test_user_filecache_dir:/test_user_filecache_dir:ro\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  name=container_e11_1518975676334_14532816_01_000001\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  net=host\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  user=\" + uidGidPair, dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  workdir=/test_container_work_dir\", dockerCommands.get(counter));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testDockerContainerLaunchWithDefaultImage",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testDockerContainerLaunchWithDefaultImage() throws ContainerExecutionException, PrivilegedOperationException, IOException\n{\r\n    conf.set(YarnConfiguration.NM_DOCKER_IMAGE_NAME, \"busybox:1.2.3\");\r\n    env.remove(DockerLinuxContainerRuntime.ENV_DOCKER_CONTAINER_IMAGE);\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    runtime.launchContainer(builder.build());\r\n    List<String> dockerCommands = readDockerCommands();\r\n    int expected = 13;\r\n    int counter = 0;\r\n    Assert.assertEquals(expected, dockerCommands.size());\r\n    Assert.assertEquals(\"[docker-command-execution]\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  cap-add=SYS_CHROOT,NET_BIND_SERVICE\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  cap-drop=ALL\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  detach=true\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  docker-command=run\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  group-add=\" + String.join(\",\", groups), dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  image=busybox:1.2.3\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  launch-command=bash,/test_container_work_dir/launch_container.sh\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  mounts=\" + \"/test_container_log_dir:/test_container_log_dir:rw,\" + \"/test_application_local_dir:/test_application_local_dir:rw,\" + \"/test_filecache_dir:/test_filecache_dir:ro,\" + \"/test_user_filecache_dir:/test_user_filecache_dir:ro\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  name=container_e11_1518975676334_14532816_01_000001\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  net=host\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  user=\" + uidGidPair, dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  workdir=/test_container_work_dir\", dockerCommands.get(counter));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testDockerContainerLaunchWithoutDefaultImageUpdate",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testDockerContainerLaunchWithoutDefaultImageUpdate() throws ContainerExecutionException, PrivilegedOperationException, IOException\n{\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    conf.setBoolean(YarnConfiguration.NM_DOCKER_IMAGE_UPDATE, false);\r\n    runtime.initialize(conf, nmContext);\r\n    runtime.launchContainer(builder.build());\r\n    List<String> dockerCommands = readDockerCommands();\r\n    Assert.assertEquals(false, conf.getBoolean(YarnConfiguration.NM_DOCKER_IMAGE_UPDATE, false));\r\n    int expected = 13;\r\n    int counter = 0;\r\n    Assert.assertEquals(expected, dockerCommands.size());\r\n    Assert.assertEquals(\"[docker-command-execution]\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  cap-add=SYS_CHROOT,NET_BIND_SERVICE\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  cap-drop=ALL\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  detach=true\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  docker-command=run\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  group-add=\" + String.join(\",\", groups), dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  image=busybox:latest\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  launch-command=bash,/test_container_work_dir/launch_container.sh\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  mounts=\" + \"/test_container_log_dir:/test_container_log_dir:rw,\" + \"/test_application_local_dir:/test_application_local_dir:rw,\" + \"/test_filecache_dir:/test_filecache_dir:ro,\" + \"/test_user_filecache_dir:/test_user_filecache_dir:ro\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  name=container_e11_1518975676334_14532816_01_000001\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  net=host\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  user=\" + uidGidPair, dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  workdir=/test_container_work_dir\", dockerCommands.get(counter));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testDockerContainerLaunchWithDefaultImageUpdate",
  "errType" : null,
  "containingMethodsNum" : 27,
  "sourceCodeText" : "void testDockerContainerLaunchWithDefaultImageUpdate() throws ContainerExecutionException, PrivilegedOperationException, IOException\n{\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    conf.setBoolean(YarnConfiguration.NM_DOCKER_IMAGE_UPDATE, true);\r\n    runtime.initialize(conf, nmContext);\r\n    runtime.launchContainer(builder.build());\r\n    ArgumentCaptor<PrivilegedOperation> opCaptor = ArgumentCaptor.forClass(PrivilegedOperation.class);\r\n    verify(mockExecutor, times(2)).executePrivilegedOperation(any(), opCaptor.capture(), any(), any(), anyBoolean(), anyBoolean());\r\n    List<PrivilegedOperation> allCaptures = opCaptor.getAllValues();\r\n    PrivilegedOperation op = allCaptures.get(0);\r\n    Assert.assertEquals(PrivilegedOperation.OperationType.RUN_DOCKER_CMD, op.getOperationType());\r\n    File commandFile = new File(StringUtils.join(\",\", op.getArguments()));\r\n    FileInputStream fileInputStream = new FileInputStream(commandFile);\r\n    String fileContent = new String(IOUtils.toByteArray(fileInputStream));\r\n    Assert.assertEquals(\"[docker-command-execution]\\n\" + \"  docker-command=pull\\n\" + \"  image=busybox:latest\\n\", fileContent);\r\n    fileInputStream.close();\r\n    List<String> dockerCommands = readDockerCommands(2);\r\n    int expected = 13;\r\n    int counter = 0;\r\n    Assert.assertEquals(expected, dockerCommands.size());\r\n    Assert.assertEquals(\"[docker-command-execution]\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  cap-add=SYS_CHROOT,NET_BIND_SERVICE\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  cap-drop=ALL\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  detach=true\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  docker-command=run\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  group-add=\" + String.join(\",\", groups), dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  image=busybox:latest\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  launch-command=bash,/test_container_work_dir/launch_container.sh\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  mounts=\" + \"/test_container_log_dir:/test_container_log_dir:rw,\" + \"/test_application_local_dir:/test_application_local_dir:rw,\" + \"/test_filecache_dir:/test_filecache_dir:ro,\" + \"/test_user_filecache_dir:/test_user_filecache_dir:ro\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  name=container_e11_1518975676334_14532816_01_000001\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  net=host\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  user=\" + uidGidPair, dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  workdir=/test_container_work_dir\", dockerCommands.get(counter));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testContainerLaunchWithUserRemapping",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testContainerLaunchWithUserRemapping() throws ContainerExecutionException, PrivilegedOperationException, IOException\n{\r\n    conf.setBoolean(YarnConfiguration.NM_DOCKER_ENABLE_USER_REMAPPING, true);\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    runtime.launchContainer(builder.build());\r\n    List<String> dockerCommands = readDockerCommands();\r\n    Assert.assertEquals(13, dockerCommands.size());\r\n    int counter = 0;\r\n    Assert.assertEquals(\"[docker-command-execution]\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  cap-add=SYS_CHROOT,NET_BIND_SERVICE\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  cap-drop=ALL\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  detach=true\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  docker-command=run\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  group-add=\" + String.join(\",\", groups), dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  image=busybox:latest\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  launch-command=bash,/test_container_work_dir/launch_container.sh\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  mounts=\" + \"/test_container_log_dir:/test_container_log_dir:rw,\" + \"/test_application_local_dir:/test_application_local_dir:rw,\" + \"/test_filecache_dir:/test_filecache_dir:ro,\" + \"/test_user_filecache_dir:/test_user_filecache_dir:ro\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  name=container_e11_1518975676334_14532816_01_000001\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  net=host\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  user=\" + uidGidPair, dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  workdir=/test_container_work_dir\", dockerCommands.get(counter));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testAllowedNetworksConfiguration",
  "errType" : [ "ContainerExecutionException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testAllowedNetworksConfiguration() throws ContainerExecutionException\n{\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    String[] networks = { \"host\", \"none\", \"bridge\", \"sdn1\" };\r\n    String invalidDefaultNetwork = \"sdn2\";\r\n    conf.setStrings(YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS, networks);\r\n    conf.set(YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK, invalidDefaultNetwork);\r\n    try {\r\n        runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n        runtime.initialize(conf, nmContext);\r\n        Assert.fail(\"Invalid default network configuration should did not \" + \"trigger initialization failure.\");\r\n    } catch (ContainerExecutionException e) {\r\n        LOG.info(\"Caught expected exception : \" + e);\r\n    }\r\n    String validDefaultNetwork = \"sdn1\";\r\n    conf.set(YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK, validDefaultNetwork);\r\n    runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testContainerLaunchWithNetworkingDefaults",
  "errType" : [ "ContainerExecutionException" ],
  "containingMethodsNum" : 25,
  "sourceCodeText" : "void testContainerLaunchWithNetworkingDefaults() throws ContainerExecutionException, IOException, PrivilegedOperationException\n{\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    Random randEngine = new Random();\r\n    String disallowedNetwork = \"sdn\" + Integer.toString(randEngine.nextInt());\r\n    try {\r\n        env.put(DockerLinuxContainerRuntime.ENV_DOCKER_CONTAINER_NETWORK, disallowedNetwork);\r\n        runtime.launchContainer(builder.build());\r\n        Assert.fail(\"Network was expected to be disallowed: \" + disallowedNetwork);\r\n    } catch (ContainerExecutionException e) {\r\n        LOG.info(\"Caught expected exception: \" + e);\r\n    }\r\n    String allowedNetwork = \"bridge\";\r\n    env.put(DockerLinuxContainerRuntime.ENV_DOCKER_CONTAINER_NETWORK, allowedNetwork);\r\n    String expectedHostname = \"test.hostname\";\r\n    env.put(DockerLinuxContainerRuntime.ENV_DOCKER_CONTAINER_HOSTNAME, expectedHostname);\r\n    runtime.launchContainer(builder.build());\r\n    List<String> dockerCommands = readDockerCommands();\r\n    int expected = 14;\r\n    int counter = 0;\r\n    Assert.assertEquals(expected, dockerCommands.size());\r\n    Assert.assertEquals(\"[docker-command-execution]\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  cap-add=SYS_CHROOT,NET_BIND_SERVICE\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  cap-drop=ALL\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  detach=true\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  docker-command=run\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  group-add=\" + String.join(\",\", groups), dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  hostname=test.hostname\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  image=busybox:latest\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  launch-command=bash,/test_container_work_dir/launch_container.sh\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  mounts=\" + \"/test_container_log_dir:/test_container_log_dir:rw,\" + \"/test_application_local_dir:/test_application_local_dir:rw,\" + \"/test_filecache_dir:/test_filecache_dir:ro,\" + \"/test_user_filecache_dir:/test_user_filecache_dir:ro\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  name=container_e11_1518975676334_14532816_01_000001\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  net=\" + allowedNetwork, dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  user=\" + uidGidPair, dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  workdir=/test_container_work_dir\", dockerCommands.get(counter));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testContainerLaunchWithHostDnsNetwork",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testContainerLaunchWithHostDnsNetwork() throws ContainerExecutionException, IOException, PrivilegedOperationException\n{\r\n    conf.setBoolean(RegistryConstants.KEY_DNS_ENABLED, true);\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    String expectedHostname = \"test.hostname\";\r\n    env.put(DockerLinuxContainerRuntime.ENV_DOCKER_CONTAINER_HOSTNAME, expectedHostname);\r\n    runtime.launchContainer(builder.build());\r\n    List<String> dockerCommands = readDockerCommands();\r\n    int expected = 14;\r\n    int counter = 0;\r\n    Assert.assertEquals(expected, dockerCommands.size());\r\n    Assert.assertEquals(\"[docker-command-execution]\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  cap-add=SYS_CHROOT,NET_BIND_SERVICE\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  cap-drop=ALL\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  detach=true\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  docker-command=run\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  group-add=\" + String.join(\",\", groups), dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  hostname=test.hostname\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  image=busybox:latest\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  launch-command=bash,/test_container_work_dir/launch_container.sh\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  mounts=\" + \"/test_container_log_dir:/test_container_log_dir:rw,\" + \"/test_application_local_dir:/test_application_local_dir:rw,\" + \"/test_filecache_dir:/test_filecache_dir:ro,\" + \"/test_user_filecache_dir:/test_user_filecache_dir:ro\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  name=container_e11_1518975676334_14532816_01_000001\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  net=host\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  user=\" + uidGidPair, dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  workdir=/test_container_work_dir\", dockerCommands.get(counter));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testContainerLaunchWithCustomNetworks",
  "errType" : [ "ContainerExecutionException" ],
  "containingMethodsNum" : 42,
  "sourceCodeText" : "void testContainerLaunchWithCustomNetworks() throws ContainerExecutionException, IOException, PrivilegedOperationException\n{\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    String customNetwork1 = \"sdn1\";\r\n    String customNetwork2 = \"sdn2\";\r\n    String customNetwork3 = \"sdn3\";\r\n    String[] networks = { \"host\", \"none\", \"bridge\", customNetwork1, customNetwork2 };\r\n    conf.setStrings(YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS, networks);\r\n    conf.set(YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK, customNetwork1);\r\n    runtime.initialize(conf, nmContext);\r\n    runtime.launchContainer(builder.build());\r\n    List<String> dockerCommands = readDockerCommands();\r\n    int expected = 14;\r\n    int counter = 0;\r\n    Assert.assertEquals(expected, dockerCommands.size());\r\n    Assert.assertEquals(\"[docker-command-execution]\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  cap-add=SYS_CHROOT,NET_BIND_SERVICE\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  cap-drop=ALL\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  detach=true\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  docker-command=run\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  group-add=\" + String.join(\",\", groups), dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  hostname=ctr-e11-1518975676334-14532816-01-000001\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  image=busybox:latest\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  launch-command=bash,/test_container_work_dir/launch_container.sh\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  mounts=\" + \"/test_container_log_dir:/test_container_log_dir:rw,\" + \"/test_application_local_dir:/test_application_local_dir:rw,\" + \"/test_filecache_dir:/test_filecache_dir:ro,\" + \"/test_user_filecache_dir:/test_user_filecache_dir:ro\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  name=container_e11_1518975676334_14532816_01_000001\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  net=sdn1\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  user=\" + uidGidPair, dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  workdir=/test_container_work_dir\", dockerCommands.get(counter));\r\n    env.put(DockerLinuxContainerRuntime.ENV_DOCKER_CONTAINER_NETWORK, customNetwork2);\r\n    runtime.launchContainer(builder.build());\r\n    dockerCommands = readDockerCommands();\r\n    counter = 0;\r\n    Assert.assertEquals(expected, dockerCommands.size());\r\n    Assert.assertEquals(\"[docker-command-execution]\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  cap-add=SYS_CHROOT,NET_BIND_SERVICE\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  cap-drop=ALL\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  detach=true\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  docker-command=run\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  group-add=\" + String.join(\",\", groups), dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  hostname=ctr-e11-1518975676334-14532816-01-000001\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  image=busybox:latest\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  launch-command=bash,/test_container_work_dir/launch_container.sh\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  mounts=\" + \"/test_container_log_dir:/test_container_log_dir:rw,\" + \"/test_application_local_dir:/test_application_local_dir:rw,\" + \"/test_filecache_dir:/test_filecache_dir:ro,\" + \"/test_user_filecache_dir:/test_user_filecache_dir:ro\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  name=container_e11_1518975676334_14532816_01_000001\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  net=sdn2\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  user=\" + uidGidPair, dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  workdir=/test_container_work_dir\", dockerCommands.get(counter));\r\n    env.put(DockerLinuxContainerRuntime.ENV_DOCKER_CONTAINER_NETWORK, customNetwork3);\r\n    try {\r\n        runtime.launchContainer(builder.build());\r\n        Assert.fail(\"Disallowed network : \" + customNetwork3 + \"did not trigger launch failure.\");\r\n    } catch (ContainerExecutionException e) {\r\n        LOG.info(\"Caught expected exception : \" + e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testLaunchPidNamespaceContainersInvalidEnvVar",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testLaunchPidNamespaceContainersInvalidEnvVar() throws ContainerExecutionException, PrivilegedOperationException, IOException\n{\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    env.put(ENV_OCI_CONTAINER_PID_NAMESPACE, \"invalid-value\");\r\n    runtime.launchContainer(builder.build());\r\n    List<String> dockerCommands = readDockerCommands();\r\n    int expected = 13;\r\n    Assert.assertEquals(expected, dockerCommands.size());\r\n    String command = dockerCommands.get(0);\r\n    Assert.assertTrue(\"Unexpected --pid in docker run args : \" + command, !command.contains(\"--pid\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testLaunchPidNamespaceContainersWithDisabledSetting",
  "errType" : [ "ContainerExecutionException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testLaunchPidNamespaceContainersWithDisabledSetting() throws ContainerExecutionException\n{\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    env.put(ENV_OCI_CONTAINER_PID_NAMESPACE, \"host\");\r\n    try {\r\n        runtime.launchContainer(builder.build());\r\n        Assert.fail(\"Expected a pid host disabled container failure.\");\r\n    } catch (ContainerExecutionException e) {\r\n        LOG.info(\"Caught expected exception : \" + e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testLaunchPidNamespaceContainersEnabled",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testLaunchPidNamespaceContainersEnabled() throws ContainerExecutionException, PrivilegedOperationException, IOException\n{\r\n    conf.setBoolean(YarnConfiguration.NM_DOCKER_ALLOW_HOST_PID_NAMESPACE, true);\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    env.put(ENV_OCI_CONTAINER_PID_NAMESPACE, \"host\");\r\n    runtime.launchContainer(builder.build());\r\n    List<String> dockerCommands = readDockerCommands();\r\n    int expected = 14;\r\n    int counter = 0;\r\n    Assert.assertEquals(expected, dockerCommands.size());\r\n    Assert.assertEquals(\"[docker-command-execution]\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  cap-add=SYS_CHROOT,NET_BIND_SERVICE\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  cap-drop=ALL\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  detach=true\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  docker-command=run\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  group-add=\" + String.join(\",\", groups), dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  image=busybox:latest\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  launch-command=bash,/test_container_work_dir/launch_container.sh\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  mounts=\" + \"/test_container_log_dir:/test_container_log_dir:rw,\" + \"/test_application_local_dir:/test_application_local_dir:rw,\" + \"/test_filecache_dir:/test_filecache_dir:ro,\" + \"/test_user_filecache_dir:/test_user_filecache_dir:ro\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  name=container_e11_1518975676334_14532816_01_000001\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  net=host\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  pid=host\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  user=\" + uidGidPair, dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  workdir=/test_container_work_dir\", dockerCommands.get(counter));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testLaunchPrivilegedContainersInvalidEnvVar",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testLaunchPrivilegedContainersInvalidEnvVar() throws ContainerExecutionException, PrivilegedOperationException, IOException\n{\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    env.put(ENV_OCI_CONTAINER_RUN_PRIVILEGED_CONTAINER, \"invalid-value\");\r\n    runtime.launchContainer(builder.build());\r\n    List<String> dockerCommands = readDockerCommands();\r\n    int expected = 13;\r\n    Assert.assertEquals(expected, dockerCommands.size());\r\n    String command = dockerCommands.get(0);\r\n    Assert.assertTrue(\"Unexpected --privileged in docker run args : \" + command, !command.contains(\"--privileged\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testLaunchPrivilegedContainersWithDisabledSetting",
  "errType" : [ "ContainerExecutionException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testLaunchPrivilegedContainersWithDisabledSetting() throws ContainerExecutionException\n{\r\n    conf.setBoolean(YarnConfiguration.NM_DOCKER_ALLOW_PRIVILEGED_CONTAINERS, false);\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    env.put(ENV_OCI_CONTAINER_RUN_PRIVILEGED_CONTAINER, \"true\");\r\n    try {\r\n        runtime.launchContainer(builder.build());\r\n        Assert.fail(\"Expected a privileged launch container failure.\");\r\n    } catch (ContainerExecutionException e) {\r\n        LOG.info(\"Caught expected exception : \" + e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testLaunchPrivilegedContainersWithEnabledSettingAndDefaultACL",
  "errType" : [ "ContainerExecutionException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testLaunchPrivilegedContainersWithEnabledSettingAndDefaultACL() throws ContainerExecutionException\n{\r\n    conf.setBoolean(YarnConfiguration.NM_DOCKER_ALLOW_PRIVILEGED_CONTAINERS, true);\r\n    conf.set(YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL, \"\");\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    env.put(ENV_OCI_CONTAINER_RUN_PRIVILEGED_CONTAINER, \"true\");\r\n    try {\r\n        runtime.launchContainer(builder.build());\r\n        Assert.fail(\"Expected a privileged launch container failure.\");\r\n    } catch (ContainerExecutionException e) {\r\n        LOG.info(\"Caught expected exception : \" + e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testLaunchPrivilegedContainersEnabledAndUserNotInWhitelist",
  "errType" : [ "ContainerExecutionException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testLaunchPrivilegedContainersEnabledAndUserNotInWhitelist() throws ContainerExecutionException\n{\r\n    conf.setBoolean(YarnConfiguration.NM_DOCKER_ALLOW_PRIVILEGED_CONTAINERS, true);\r\n    conf.set(YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL, whitelistedUser);\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    env.put(ENV_OCI_CONTAINER_RUN_PRIVILEGED_CONTAINER, \"true\");\r\n    try {\r\n        runtime.launchContainer(builder.build());\r\n        Assert.fail(\"Expected a privileged launch container failure.\");\r\n    } catch (ContainerExecutionException e) {\r\n        LOG.info(\"Caught expected exception : \" + e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testLaunchPrivilegedContainersEnabledAndUserInWhitelist",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testLaunchPrivilegedContainersEnabledAndUserInWhitelist() throws ContainerExecutionException, PrivilegedOperationException, IOException\n{\r\n    conf.setBoolean(YarnConfiguration.NM_DOCKER_ALLOW_PRIVILEGED_CONTAINERS, true);\r\n    conf.set(YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL, submittingUser);\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    env.put(ENV_OCI_CONTAINER_RUN_PRIVILEGED_CONTAINER, \"true\");\r\n    runtime.launchContainer(builder.build());\r\n    List<String> dockerCommands = readDockerCommands();\r\n    int expected = 13;\r\n    int counter = 0;\r\n    Assert.assertEquals(expected, dockerCommands.size());\r\n    Assert.assertEquals(\"[docker-command-execution]\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  cap-add=SYS_CHROOT,NET_BIND_SERVICE\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  cap-drop=ALL\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  detach=true\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  docker-command=run\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  image=busybox:latest\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  launch-command=bash,/test_container_work_dir/launch_container.sh\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  mounts=\" + \"/test_container_log_dir:/test_container_log_dir:rw,\" + \"/test_application_local_dir:/test_application_local_dir:rw,\" + \"/test_filecache_dir:/test_filecache_dir:ro,\" + \"/test_user_filecache_dir:/test_user_filecache_dir:ro\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  name=container_e11_1518975676334_14532816_01_000001\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  net=host\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  privileged=true\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  user=\" + submittingUser, dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  workdir=/test_container_work_dir\", dockerCommands.get(counter));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testCGroupParent",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testCGroupParent() throws ContainerExecutionException\n{\r\n    String hierarchy = \"hadoop-yarn-test\";\r\n    conf.set(YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_HIERARCHY, hierarchy);\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    String resourceOptionsNone = \"cgroups=none\";\r\n    DockerRunCommand command = Mockito.mock(DockerRunCommand.class);\r\n    Mockito.when(mockCGroupsHandler.getRelativePathForCGroup(containerId)).thenReturn(hierarchy + \"/\" + containerIdStr);\r\n    runtime.addCGroupParentIfRequired(resourceOptionsNone, containerIdStr, command);\r\n    Mockito.verifyZeroInteractions(command);\r\n    String resourceOptionsCpu = \"/sys/fs/cgroup/cpu/\" + hierarchy + containerIdStr;\r\n    runtime.addCGroupParentIfRequired(resourceOptionsCpu, containerIdStr, command);\r\n    String expectedPath = \"/\" + hierarchy + \"/\" + containerIdStr;\r\n    Mockito.verify(command).setCGroupParent(expectedPath);\r\n    runtime = new DockerLinuxContainerRuntime(mockExecutor, null);\r\n    runtime.initialize(conf, nmContext);\r\n    runtime.addCGroupParentIfRequired(resourceOptionsNone, containerIdStr, command);\r\n    runtime.addCGroupParentIfRequired(resourceOptionsCpu, containerIdStr, command);\r\n    Mockito.verifyZeroInteractions(command);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testMountSourceOnly",
  "errType" : [ "ContainerExecutionException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testMountSourceOnly() throws ContainerExecutionException\n{\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    env.put(DockerLinuxContainerRuntime.ENV_DOCKER_CONTAINER_MOUNTS, \"/source\");\r\n    try {\r\n        runtime.launchContainer(builder.build());\r\n        Assert.fail(\"Expected a launch container failure due to invalid mount.\");\r\n    } catch (ContainerExecutionException e) {\r\n        LOG.info(\"Caught expected exception : \" + e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testMountSourceTarget",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testMountSourceTarget() throws ContainerExecutionException, PrivilegedOperationException, IOException\n{\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    env.put(DockerLinuxContainerRuntime.ENV_DOCKER_CONTAINER_MOUNTS, \"test_dir/test_resource_file:test_mount:ro\");\r\n    runtime.launchContainer(builder.build());\r\n    List<String> dockerCommands = readDockerCommands();\r\n    int expected = 13;\r\n    int counter = 0;\r\n    Assert.assertEquals(expected, dockerCommands.size());\r\n    Assert.assertEquals(\"[docker-command-execution]\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  cap-add=SYS_CHROOT,NET_BIND_SERVICE\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  cap-drop=ALL\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  detach=true\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  docker-command=run\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  group-add=\" + String.join(\",\", groups), dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  image=busybox:latest\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  launch-command=bash,/test_container_work_dir/launch_container.sh\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  mounts=\" + \"/test_container_log_dir:/test_container_log_dir:rw,\" + \"/test_application_local_dir:/test_application_local_dir:rw,\" + \"/test_filecache_dir:/test_filecache_dir:ro,\" + \"/test_user_filecache_dir:/test_user_filecache_dir:ro,\" + \"/test_local_dir/test_resource_file:test_mount:ro\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  name=container_e11_1518975676334_14532816_01_000001\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  net=host\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  user=\" + uidGidPair, dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  workdir=/test_container_work_dir\", dockerCommands.get(counter));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testMountMultiple",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testMountMultiple() throws ContainerExecutionException, PrivilegedOperationException, IOException\n{\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    env.put(DockerLinuxContainerRuntime.ENV_DOCKER_CONTAINER_MOUNTS, \"test_dir/test_resource_file:test_mount1:ro,\" + \"test_dir/test_resource_file:test_mount2:ro\");\r\n    runtime.launchContainer(builder.build());\r\n    List<String> dockerCommands = readDockerCommands();\r\n    int expected = 13;\r\n    int counter = 0;\r\n    Assert.assertEquals(expected, dockerCommands.size());\r\n    Assert.assertEquals(\"[docker-command-execution]\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  cap-add=SYS_CHROOT,NET_BIND_SERVICE\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  cap-drop=ALL\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  detach=true\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  docker-command=run\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  group-add=\" + String.join(\",\", groups), dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  image=busybox:latest\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  launch-command=bash,/test_container_work_dir/launch_container.sh\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  mounts=\" + \"/test_container_log_dir:/test_container_log_dir:rw,\" + \"/test_application_local_dir:/test_application_local_dir:rw,\" + \"/test_filecache_dir:/test_filecache_dir:ro,\" + \"/test_user_filecache_dir:/test_user_filecache_dir:ro,\" + \"/test_local_dir/test_resource_file:test_mount1:ro,\" + \"/test_local_dir/test_resource_file:test_mount2:ro\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  name=container_e11_1518975676334_14532816_01_000001\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  net=host\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  user=\" + uidGidPair, dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  workdir=/test_container_work_dir\", dockerCommands.get(counter));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testUserMounts",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testUserMounts() throws ContainerExecutionException, PrivilegedOperationException, IOException\n{\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    env.put(DockerLinuxContainerRuntime.ENV_DOCKER_CONTAINER_MOUNTS, \"/tmp/foo:/tmp/foo:ro,/tmp/bar:/tmp/bar:rw,/tmp/baz:/tmp/baz,\" + \"/a:/a:shared,/b:/b:ro+shared,/c:/c:rw+rshared,/d:/d:private\");\r\n    runtime.launchContainer(builder.build());\r\n    List<String> dockerCommands = readDockerCommands();\r\n    int expected = 13;\r\n    int counter = 0;\r\n    Assert.assertEquals(expected, dockerCommands.size());\r\n    Assert.assertEquals(\"[docker-command-execution]\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  cap-add=SYS_CHROOT,NET_BIND_SERVICE\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  cap-drop=ALL\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  detach=true\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  docker-command=run\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  group-add=\" + String.join(\",\", groups), dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  image=busybox:latest\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  launch-command=bash,/test_container_work_dir/launch_container.sh\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  mounts=\" + \"/test_container_log_dir:/test_container_log_dir:rw,\" + \"/test_application_local_dir:/test_application_local_dir:rw,\" + \"/test_filecache_dir:/test_filecache_dir:ro,\" + \"/test_user_filecache_dir:/test_user_filecache_dir:ro,\" + \"/tmp/foo:/tmp/foo:ro,\" + \"/tmp/bar:/tmp/bar:rw,/tmp/baz:/tmp/baz:rw,/a:/a:rw+shared,\" + \"/b:/b:ro+shared,/c:/c:rw+rshared,/d:/d:rw+private\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  name=container_e11_1518975676334_14532816_01_000001\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  net=host\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  user=\" + uidGidPair, dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  workdir=/test_container_work_dir\", dockerCommands.get(counter));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testUserMountInvalid",
  "errType" : [ "ContainerExecutionException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testUserMountInvalid() throws ContainerExecutionException\n{\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    env.put(DockerLinuxContainerRuntime.ENV_DOCKER_CONTAINER_MOUNTS, \"/source:target:ro,/source:target:other,/source:target:rw\");\r\n    try {\r\n        runtime.launchContainer(builder.build());\r\n        Assert.fail(\"Expected a launch container failure due to invalid mount.\");\r\n    } catch (ContainerExecutionException e) {\r\n        LOG.info(\"Caught expected exception : \" + e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testUserMountModeInvalid",
  "errType" : [ "ContainerExecutionException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testUserMountModeInvalid() throws ContainerExecutionException\n{\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    env.put(DockerLinuxContainerRuntime.ENV_DOCKER_CONTAINER_MOUNTS, \"/source:target:other\");\r\n    try {\r\n        runtime.launchContainer(builder.build());\r\n        Assert.fail(\"Expected a launch container failure due to invalid mode.\");\r\n    } catch (ContainerExecutionException e) {\r\n        LOG.info(\"Caught expected exception : \" + e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testUserMountModeNulInvalid",
  "errType" : [ "ContainerExecutionException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testUserMountModeNulInvalid() throws ContainerExecutionException\n{\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    env.put(DockerLinuxContainerRuntime.ENV_DOCKER_CONTAINER_MOUNTS, \"/s\\0ource:target:ro\");\r\n    try {\r\n        runtime.launchContainer(builder.build());\r\n        Assert.fail(\"Expected a launch container failure due to NUL in mount.\");\r\n    } catch (ContainerExecutionException e) {\r\n        LOG.info(\"Caught expected exception : \" + e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testTmpfsMount",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testTmpfsMount() throws ContainerExecutionException, PrivilegedOperationException, IOException\n{\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    env.put(DockerLinuxContainerRuntime.ENV_DOCKER_CONTAINER_TMPFS_MOUNTS, \"/run\");\r\n    runtime.launchContainer(builder.build());\r\n    List<String> dockerCommands = readDockerCommands();\r\n    Assert.assertTrue(dockerCommands.contains(\"  tmpfs=/run\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testTmpfsMountMulti",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testTmpfsMountMulti() throws ContainerExecutionException, PrivilegedOperationException, IOException\n{\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    env.put(DockerLinuxContainerRuntime.ENV_DOCKER_CONTAINER_TMPFS_MOUNTS, \"/run,/tmp\");\r\n    runtime.launchContainer(builder.build());\r\n    List<String> dockerCommands = readDockerCommands();\r\n    Assert.assertTrue(dockerCommands.contains(\"  tmpfs=/run,/tmp\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testDefaultTmpfsMounts",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testDefaultTmpfsMounts() throws ContainerExecutionException, PrivilegedOperationException, IOException\n{\r\n    conf.setStrings(NM_DOCKER_DEFAULT_TMPFS_MOUNTS, \"/run,/var/run\");\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    env.put(DockerLinuxContainerRuntime.ENV_DOCKER_CONTAINER_TMPFS_MOUNTS, \"/tmpfs\");\r\n    runtime.launchContainer(builder.build());\r\n    List<String> dockerCommands = readDockerCommands();\r\n    Assert.assertTrue(dockerCommands.contains(\"  tmpfs=/tmpfs,/run,/var/run\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testDefaultTmpfsMountsInvalid",
  "errType" : [ "ContainerExecutionException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testDefaultTmpfsMountsInvalid() throws ContainerExecutionException\n{\r\n    conf.setStrings(NM_DOCKER_DEFAULT_TMPFS_MOUNTS, \"run,var/run\");\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    env.put(DockerLinuxContainerRuntime.ENV_DOCKER_CONTAINER_TMPFS_MOUNTS, \"/tmpfs\");\r\n    try {\r\n        runtime.launchContainer(builder.build());\r\n        Assert.fail(\"Expected a launch container failure due to non-absolute path.\");\r\n    } catch (ContainerExecutionException e) {\r\n        LOG.info(\"Caught expected exception : \" + e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testTmpfsRelativeInvalid",
  "errType" : [ "ContainerExecutionException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testTmpfsRelativeInvalid() throws ContainerExecutionException\n{\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    env.put(DockerLinuxContainerRuntime.ENV_DOCKER_CONTAINER_TMPFS_MOUNTS, \"run\");\r\n    try {\r\n        runtime.launchContainer(builder.build());\r\n        Assert.fail(\"Expected a launch container failure due to non-absolute path.\");\r\n    } catch (ContainerExecutionException e) {\r\n        LOG.info(\"Caught expected exception : \" + e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testTmpfsColonInvalid",
  "errType" : [ "ContainerExecutionException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testTmpfsColonInvalid() throws ContainerExecutionException\n{\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    env.put(DockerLinuxContainerRuntime.ENV_DOCKER_CONTAINER_TMPFS_MOUNTS, \"/run:\");\r\n    try {\r\n        runtime.launchContainer(builder.build());\r\n        Assert.fail(\"Expected a launch container failure due to invalid character.\");\r\n    } catch (ContainerExecutionException e) {\r\n        LOG.info(\"Caught expected exception : \" + e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testTmpfsNulInvalid",
  "errType" : [ "ContainerExecutionException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testTmpfsNulInvalid() throws ContainerExecutionException\n{\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    env.put(DockerLinuxContainerRuntime.ENV_DOCKER_CONTAINER_TMPFS_MOUNTS, \"/ru\\0n\");\r\n    try {\r\n        runtime.launchContainer(builder.build());\r\n        Assert.fail(\"Expected a launch container failure due to NUL in tmpfs mount.\");\r\n    } catch (ContainerExecutionException e) {\r\n        LOG.info(\"Caught expected exception : \" + e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testDefaultROMounts",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testDefaultROMounts() throws ContainerExecutionException, PrivilegedOperationException, IOException\n{\r\n    conf.setStrings(NM_DOCKER_DEFAULT_RO_MOUNTS, \"/tmp/foo:/tmp/foo,/tmp/bar:/tmp/bar\");\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    runtime.launchContainer(builder.build());\r\n    List<String> dockerCommands = readDockerCommands();\r\n    int expected = 13;\r\n    int counter = 0;\r\n    Assert.assertEquals(expected, dockerCommands.size());\r\n    Assert.assertEquals(\"[docker-command-execution]\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  cap-add=SYS_CHROOT,NET_BIND_SERVICE\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  cap-drop=ALL\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  detach=true\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  docker-command=run\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  group-add=\" + String.join(\",\", groups), dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  image=busybox:latest\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  launch-command=bash,/test_container_work_dir/launch_container.sh\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  mounts=\" + \"/test_container_log_dir:/test_container_log_dir:rw,\" + \"/test_application_local_dir:/test_application_local_dir:rw,\" + \"/test_filecache_dir:/test_filecache_dir:ro,\" + \"/test_user_filecache_dir:/test_user_filecache_dir:ro,\" + \"/tmp/foo:/tmp/foo:ro,/tmp/bar:/tmp/bar:ro\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  name=container_e11_1518975676334_14532816_01_000001\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  net=host\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  user=\" + uidGidPair, dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  workdir=/test_container_work_dir\", dockerCommands.get(counter));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testDefaultROMountsInvalid",
  "errType" : [ "ContainerExecutionException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testDefaultROMountsInvalid() throws ContainerExecutionException\n{\r\n    conf.setStrings(NM_DOCKER_DEFAULT_RO_MOUNTS, \"source,target\");\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    try {\r\n        runtime.launchContainer(builder.build());\r\n        Assert.fail(\"Expected a launch container failure due to invalid mount.\");\r\n    } catch (ContainerExecutionException e) {\r\n        LOG.info(\"Caught expected exception : \" + e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testDefaultRWMounts",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testDefaultRWMounts() throws ContainerExecutionException, PrivilegedOperationException, IOException\n{\r\n    conf.setStrings(NM_DOCKER_DEFAULT_RW_MOUNTS, \"/tmp/foo:/tmp/foo,/tmp/bar:/tmp/bar\");\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    runtime.launchContainer(builder.build());\r\n    List<String> dockerCommands = readDockerCommands();\r\n    int expected = 13;\r\n    int counter = 0;\r\n    Assert.assertEquals(expected, dockerCommands.size());\r\n    Assert.assertEquals(\"[docker-command-execution]\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  cap-add=SYS_CHROOT,NET_BIND_SERVICE\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  cap-drop=ALL\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  detach=true\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  docker-command=run\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  group-add=\" + String.join(\",\", groups), dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  image=busybox:latest\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  launch-command=bash,/test_container_work_dir/launch_container.sh\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  mounts=\" + \"/test_container_log_dir:/test_container_log_dir:rw,\" + \"/test_application_local_dir:/test_application_local_dir:rw,\" + \"/test_filecache_dir:/test_filecache_dir:ro,\" + \"/test_user_filecache_dir:/test_user_filecache_dir:ro,\" + \"/tmp/foo:/tmp/foo:rw,/tmp/bar:/tmp/bar:rw\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  name=container_e11_1518975676334_14532816_01_000001\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  net=host\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  user=\" + uidGidPair, dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  workdir=/test_container_work_dir\", dockerCommands.get(counter));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testDefaultRWMountsInvalid",
  "errType" : [ "ContainerExecutionException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testDefaultRWMountsInvalid() throws ContainerExecutionException\n{\r\n    conf.setStrings(NM_DOCKER_DEFAULT_RW_MOUNTS, \"source,target\");\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    try {\r\n        runtime.launchContainer(builder.build());\r\n        Assert.fail(\"Expected a launch container failure due to invalid mount.\");\r\n    } catch (ContainerExecutionException e) {\r\n        LOG.info(\"Caught expected exception : \" + e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testContainerLivelinessFileExistsNoException",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testContainerLivelinessFileExistsNoException() throws Exception\n{\r\n    File testTempDir = tempDir.newFolder();\r\n    File procPidPath = new File(testTempDir + File.separator + signalPid);\r\n    procPidPath.createNewFile();\r\n    procPidPath.deleteOnExit();\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    builder.setExecutionAttribute(RUN_AS_USER, runAsUser).setExecutionAttribute(USER, user).setExecutionAttribute(PID, signalPid).setExecutionAttribute(SIGNAL, ContainerExecutor.Signal.NULL).setExecutionAttribute(PROCFS, testTempDir.getAbsolutePath());\r\n    runtime.initialize(enableMockContainerExecutor(conf), null);\r\n    runtime.signalContainer(builder.build());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testContainerLivelinessNoFileException",
  "errType" : [ "ContainerExecutionException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testContainerLivelinessNoFileException() throws Exception\n{\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    builder.setExecutionAttribute(RUN_AS_USER, runAsUser).setExecutionAttribute(USER, user).setExecutionAttribute(PID, signalPid).setExecutionAttribute(SIGNAL, ContainerExecutor.Signal.NULL);\r\n    runtime.initialize(enableMockContainerExecutor(conf), null);\r\n    try {\r\n        runtime.signalContainer(builder.build());\r\n    } catch (ContainerExecutionException e) {\r\n        Assert.assertEquals(PrivilegedOperation.ResultCode.INVALID_CONTAINER_PID.getValue(), e.getExitCode());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testDockerStopOnTermSignalWhenRunning",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testDockerStopOnTermSignalWhenRunning() throws ContainerExecutionException, PrivilegedOperationException, IOException\n{\r\n    when(mockExecutor.executePrivilegedOperation(any(), any(PrivilegedOperation.class), any(), any(), anyBoolean(), anyBoolean())).thenReturn(DockerCommandExecutor.DockerContainerStatus.RUNNING.getName());\r\n    List<String> dockerCommands = getDockerCommandsForDockerStop(ContainerExecutor.Signal.TERM);\r\n    verifyStopCommand(dockerCommands, ContainerExecutor.Signal.TERM.toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testDockerStopWithQuitSignalWhenRunning",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testDockerStopWithQuitSignalWhenRunning() throws ContainerExecutionException, PrivilegedOperationException, IOException\n{\r\n    when(mockExecutor.executePrivilegedOperation(any(), any(PrivilegedOperation.class), any(), any(), anyBoolean(), anyBoolean())).thenReturn(DockerCommandExecutor.DockerContainerStatus.RUNNING.getName() + \",SIGQUIT\");\r\n    List<String> dockerCommands = getDockerCommandsForDockerStop(ContainerExecutor.Signal.TERM);\r\n    verifyStopCommand(dockerCommands, \"SIGQUIT\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testDockerStopOnKillSignalWhenRunning",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testDockerStopOnKillSignalWhenRunning() throws ContainerExecutionException, PrivilegedOperationException\n{\r\n    List<String> dockerCommands = getDockerCommandsForSignal(ContainerExecutor.Signal.KILL);\r\n    Assert.assertEquals(5, dockerCommands.size());\r\n    Assert.assertEquals(runAsUser, dockerCommands.get(0));\r\n    Assert.assertEquals(user, dockerCommands.get(1));\r\n    Assert.assertEquals(Integer.toString(PrivilegedOperation.RunAsUserCommand.SIGNAL_CONTAINER.getValue()), dockerCommands.get(2));\r\n    Assert.assertEquals(signalPid, dockerCommands.get(3));\r\n    Assert.assertEquals(Integer.toString(ContainerExecutor.Signal.KILL.getValue()), dockerCommands.get(4));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testDockerKillOnQuitSignalWhenRunning",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testDockerKillOnQuitSignalWhenRunning() throws Exception\n{\r\n    List<String> dockerCommands = getDockerCommandsForSignal(ContainerExecutor.Signal.QUIT);\r\n    Assert.assertEquals(5, dockerCommands.size());\r\n    Assert.assertEquals(runAsUser, dockerCommands.get(0));\r\n    Assert.assertEquals(user, dockerCommands.get(1));\r\n    Assert.assertEquals(Integer.toString(PrivilegedOperation.RunAsUserCommand.SIGNAL_CONTAINER.getValue()), dockerCommands.get(2));\r\n    Assert.assertEquals(signalPid, dockerCommands.get(3));\r\n    Assert.assertEquals(Integer.toString(ContainerExecutor.Signal.QUIT.getValue()), dockerCommands.get(4));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testDockerStopOnTermSignalWhenRunningPrivileged",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testDockerStopOnTermSignalWhenRunningPrivileged() throws ContainerExecutionException, PrivilegedOperationException, IOException\n{\r\n    conf.set(YarnConfiguration.NM_DOCKER_ALLOW_PRIVILEGED_CONTAINERS, \"true\");\r\n    conf.set(YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL, submittingUser);\r\n    env.put(ENV_OCI_CONTAINER_RUN_PRIVILEGED_CONTAINER, \"true\");\r\n    when(mockExecutor.executePrivilegedOperation(any(), any(PrivilegedOperation.class), any(), any(), anyBoolean(), anyBoolean())).thenReturn(DockerCommandExecutor.DockerContainerStatus.RUNNING.getName());\r\n    List<String> dockerCommands = getDockerCommandsForDockerStop(ContainerExecutor.Signal.TERM);\r\n    verifyStopCommand(dockerCommands, ContainerExecutor.Signal.TERM.toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testDockerStopOnKillSignalWhenRunningPrivileged",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testDockerStopOnKillSignalWhenRunningPrivileged() throws ContainerExecutionException, PrivilegedOperationException, IOException\n{\r\n    conf.set(YarnConfiguration.NM_DOCKER_ALLOW_PRIVILEGED_CONTAINERS, \"true\");\r\n    conf.set(YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL, submittingUser);\r\n    env.put(ENV_OCI_CONTAINER_RUN_PRIVILEGED_CONTAINER, \"true\");\r\n    when(mockExecutor.executePrivilegedOperation(any(), any(PrivilegedOperation.class), any(), any(), anyBoolean(), anyBoolean())).thenReturn(DockerCommandExecutor.DockerContainerStatus.RUNNING.getName());\r\n    List<String> dockerCommands = getDockerCommandsForDockerStop(ContainerExecutor.Signal.KILL);\r\n    Assert.assertEquals(4, dockerCommands.size());\r\n    Assert.assertEquals(\"[docker-command-execution]\", dockerCommands.get(0));\r\n    Assert.assertEquals(\"  docker-command=kill\", dockerCommands.get(1));\r\n    Assert.assertEquals(\"  name=container_e11_1518975676334_14532816_01_000001\", dockerCommands.get(2));\r\n    Assert.assertEquals(\"  signal=KILL\", dockerCommands.get(3));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testDockerKillOnQuitSignalWhenRunningPrivileged",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testDockerKillOnQuitSignalWhenRunningPrivileged() throws Exception\n{\r\n    conf.set(YarnConfiguration.NM_DOCKER_ALLOW_PRIVILEGED_CONTAINERS, \"true\");\r\n    conf.set(YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL, submittingUser);\r\n    env.put(ENV_OCI_CONTAINER_RUN_PRIVILEGED_CONTAINER, \"true\");\r\n    when(mockExecutor.executePrivilegedOperation(any(), any(PrivilegedOperation.class), any(), any(), anyBoolean(), anyBoolean())).thenReturn(DockerCommandExecutor.DockerContainerStatus.RUNNING.getName());\r\n    List<String> dockerCommands = getDockerCommandsForDockerStop(ContainerExecutor.Signal.QUIT);\r\n    Assert.assertEquals(4, dockerCommands.size());\r\n    Assert.assertEquals(\"[docker-command-execution]\", dockerCommands.get(0));\r\n    Assert.assertEquals(\"  docker-command=kill\", dockerCommands.get(1));\r\n    Assert.assertEquals(\"  name=container_e11_1518975676334_14532816_01_000001\", dockerCommands.get(2));\r\n    Assert.assertEquals(\"  signal=QUIT\", dockerCommands.get(3));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testDockerRmOnWhenExited",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testDockerRmOnWhenExited() throws Exception\n{\r\n    env.put(DockerLinuxContainerRuntime.ENV_DOCKER_CONTAINER_DELAYED_REMOVAL, \"false\");\r\n    conf.set(YarnConfiguration.NM_DOCKER_ALLOW_DELAYED_REMOVAL, \"true\");\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    builder.setExecutionAttribute(RUN_AS_USER, runAsUser).setExecutionAttribute(USER, user);\r\n    runtime.initialize(enableMockContainerExecutor(conf), null);\r\n    runtime.reapContainer(builder.build());\r\n    verify(mockExecutor, times(1)).executePrivilegedOperation(any(), any(), any(), any(), anyBoolean(), anyBoolean());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testNoDockerRmWhenDelayedDeletionEnabled",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testNoDockerRmWhenDelayedDeletionEnabled() throws Exception\n{\r\n    env.put(DockerLinuxContainerRuntime.ENV_DOCKER_CONTAINER_DELAYED_REMOVAL, \"true\");\r\n    conf.set(YarnConfiguration.NM_DOCKER_ALLOW_DELAYED_REMOVAL, \"true\");\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    builder.setExecutionAttribute(RUN_AS_USER, runAsUser).setExecutionAttribute(USER, user);\r\n    runtime.initialize(enableMockContainerExecutor(conf), null);\r\n    runtime.reapContainer(builder.build());\r\n    verify(mockExecutor, never()).executePrivilegedOperation(any(), any(), any(), anyMap(), anyBoolean(), anyBoolean());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getDockerCommandsForDockerStop",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "List<String> getDockerCommandsForDockerStop(ContainerExecutor.Signal signal) throws ContainerExecutionException, PrivilegedOperationException, IOException\n{\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    builder.setExecutionAttribute(RUN_AS_USER, runAsUser).setExecutionAttribute(USER, user).setExecutionAttribute(PID, signalPid).setExecutionAttribute(SIGNAL, signal);\r\n    runtime.initialize(enableMockContainerExecutor(conf), nmContext);\r\n    runtime.signalContainer(builder.build());\r\n    PrivilegedOperation op = capturePrivilegedOperation(2);\r\n    Assert.assertEquals(op.getOperationType(), PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\r\n    String dockerCommandFile = op.getArguments().get(0);\r\n    return Files.readAllLines(Paths.get(dockerCommandFile), Charset.forName(\"UTF-8\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "getDockerCommandsForSignal",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "List<String> getDockerCommandsForSignal(ContainerExecutor.Signal signal) throws ContainerExecutionException, PrivilegedOperationException\n{\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    builder.setExecutionAttribute(RUN_AS_USER, runAsUser).setExecutionAttribute(USER, user).setExecutionAttribute(PID, signalPid).setExecutionAttribute(SIGNAL, signal);\r\n    runtime.initialize(enableMockContainerExecutor(conf), null);\r\n    runtime.signalContainer(builder.build());\r\n    PrivilegedOperation op = capturePrivilegedOperation();\r\n    Assert.assertEquals(op.getOperationType(), PrivilegedOperation.OperationType.SIGNAL_CONTAINER);\r\n    return op.getArguments();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "enableMockContainerExecutor",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Configuration enableMockContainerExecutor(Configuration conf)\n{\r\n    File f = new File(\"./src/test/resources/mock-container-executor\");\r\n    if (!FileUtil.canExecute(f)) {\r\n        FileUtil.setExecutable(f, true);\r\n    }\r\n    String executorPath = f.getAbsolutePath();\r\n    conf.set(YarnConfiguration.NM_LINUX_CONTAINER_EXECUTOR_PATH, executorPath);\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testDockerImageNamePattern",
  "errType" : [ "ContainerExecutionException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testDockerImageNamePattern() throws Exception\n{\r\n    String[] validNames = { \"ubuntu\", \"fedora/httpd:version1.0\", \"fedora/httpd:version1.0.test\", \"fedora/httpd:version1.0.TEST\", \"myregistryhost:5000/ubuntu\", \"myregistryhost:5000/fedora/httpd:version1.0\", \"myregistryhost:5000/fedora/httpd:version1.0.test\", \"myregistryhost:5000/fedora/httpd:version1.0.TEST\" };\r\n    String[] invalidNames = { \"Ubuntu\", \"ubuntu || fedora\", \"ubuntu#\", \"myregistryhost:50AB0/ubuntu\", \"myregistry#host:50AB0/ubuntu\", \":8080/ubuntu\" };\r\n    for (String name : validNames) {\r\n        DockerLinuxContainerRuntime.validateImageName(name);\r\n    }\r\n    for (String name : invalidNames) {\r\n        try {\r\n            DockerLinuxContainerRuntime.validateImageName(name);\r\n            Assert.fail(name + \" is an invalid name and should fail the regex\");\r\n        } catch (ContainerExecutionException ce) {\r\n            continue;\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testDockerHostnamePattern",
  "errType" : [ "ContainerExecutionException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testDockerHostnamePattern() throws Exception\n{\r\n    String[] validNames = { \"ab\", \"a.b.c.d\", \"a1-b.cd.ef\", \"0AB.\", \"C_D-\" };\r\n    String[] invalidNames = { \"a\", \"a#.b.c\", \"-a.b.c\", \"a@b.c\", \"a/b/c\" };\r\n    for (String name : validNames) {\r\n        DockerLinuxContainerRuntime.validateHostname(name);\r\n    }\r\n    for (String name : invalidNames) {\r\n        try {\r\n            DockerLinuxContainerRuntime.validateHostname(name);\r\n            Assert.fail(name + \" is an invalid hostname and should fail the regex\");\r\n        } catch (ContainerExecutionException ce) {\r\n            continue;\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testValidDockerHostnameLength",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testValidDockerHostnameLength() throws Exception\n{\r\n    String validLength = \"example.test.site\";\r\n    DockerLinuxContainerRuntime.validateHostname(validLength);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testInvalidDockerHostnameLength",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testInvalidDockerHostnameLength() throws Exception\n{\r\n    String invalidLength = \"exampleexampleexampleexampleexampleexampleexampleexample.test.site\";\r\n    DockerLinuxContainerRuntime.validateHostname(invalidLength);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "checkVolumeCreateCommand",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void checkVolumeCreateCommand() throws PrivilegedOperationException, IOException\n{\r\n    ArgumentCaptor<PrivilegedOperation> opCaptor = ArgumentCaptor.forClass(PrivilegedOperation.class);\r\n    verify(mockExecutor, times(3)).executePrivilegedOperation(any(), opCaptor.capture(), any(), any(), anyBoolean(), anyBoolean());\r\n    List<PrivilegedOperation> allCaptures = opCaptor.getAllValues();\r\n    PrivilegedOperation op = allCaptures.get(0);\r\n    Assert.assertEquals(PrivilegedOperation.OperationType.RUN_DOCKER_CMD, op.getOperationType());\r\n    File commandFile = new File(StringUtils.join(\",\", op.getArguments()));\r\n    FileInputStream fileInputStream = new FileInputStream(commandFile);\r\n    String fileContent = new String(IOUtils.toByteArray(fileInputStream));\r\n    Assert.assertEquals(\"[docker-command-execution]\\n\" + \"  docker-command=volume\\n\" + \"  driver=local\\n\" + \"  sub-command=create\\n\" + \"  volume=volume1\\n\", fileContent);\r\n    fileInputStream.close();\r\n    op = allCaptures.get(1);\r\n    Assert.assertEquals(PrivilegedOperation.OperationType.RUN_DOCKER_CMD, op.getOperationType());\r\n    commandFile = new File(StringUtils.join(\",\", op.getArguments()));\r\n    fileInputStream = new FileInputStream(commandFile);\r\n    fileContent = new String(IOUtils.toByteArray(fileInputStream));\r\n    Assert.assertEquals(\"[docker-command-execution]\\n\" + \"  docker-command=volume\\n\" + \"  sub-command=ls\\n\", fileContent);\r\n    fileInputStream.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testDockerCommandPluginWithVolumesOutput",
  "errType" : [ "ContainerExecutionException" ],
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testDockerCommandPluginWithVolumesOutput(String dockerVolumeListOutput, boolean expectFail) throws PrivilegedOperationException, ContainerExecutionException, IOException\n{\r\n    mockExecutor = Mockito.mock(PrivilegedOperationExecutor.class);\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    when(mockExecutor.executePrivilegedOperation(any(), any(PrivilegedOperation.class), any(), any(), anyBoolean(), anyBoolean())).thenReturn(null, dockerVolumeListOutput);\r\n    Context mockNMContext = createMockNMContext();\r\n    ResourcePluginManager rpm = mock(ResourcePluginManager.class);\r\n    Map<String, ResourcePlugin> pluginsMap = new HashMap<>();\r\n    ResourcePlugin plugin1 = mock(ResourcePlugin.class);\r\n    DockerCommandPlugin dockerCommandPlugin = new MockDockerCommandPlugin(\"volume1\", \"local\");\r\n    when(plugin1.getDockerCommandPluginInstance()).thenReturn(dockerCommandPlugin);\r\n    ResourcePlugin plugin2 = mock(ResourcePlugin.class);\r\n    pluginsMap.put(\"plugin1\", plugin1);\r\n    pluginsMap.put(\"plugin2\", plugin2);\r\n    when(rpm.getNameToPlugins()).thenReturn(pluginsMap);\r\n    when(mockNMContext.getResourcePluginManager()).thenReturn(rpm);\r\n    runtime.initialize(conf, mockNMContext);\r\n    ContainerRuntimeContext containerRuntimeContext = builder.build();\r\n    try {\r\n        runtime.prepareContainer(containerRuntimeContext);\r\n        runtime.launchContainer(containerRuntimeContext);\r\n        checkVolumeCreateCommand();\r\n    } catch (ContainerExecutionException e) {\r\n        if (expectFail) {\r\n            return;\r\n        } else {\r\n            Assert.fail(\"Should successfully prepareContainers\" + e);\r\n        }\r\n    }\r\n    if (expectFail) {\r\n        Assert.fail(\"Should fail because output is illegal\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testDockerCommandPluginCheckVolumeAfterCreation",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testDockerCommandPluginCheckVolumeAfterCreation() throws Exception\n{\r\n    testDockerCommandPluginWithVolumesOutput(\"DRIVER              VOLUME NAME\\n\", true);\r\n    testDockerCommandPluginWithVolumesOutput(\"\", true);\r\n    testDockerCommandPluginWithVolumesOutput(\"volume1\", true);\r\n    testDockerCommandPluginWithVolumesOutput(\"DRIVER              VOLUME NAME\\n\" + \"nvidia-docker       nvidia_driver_375.66\\n\", true);\r\n    testDockerCommandPluginWithVolumesOutput(\"DRIVER              VOLUME NAME\\n\" + \"                    volume1\\n\", true);\r\n    testDockerCommandPluginWithVolumesOutput(\"local\", true);\r\n    testDockerCommandPluginWithVolumesOutput(\"volume2,local\", true);\r\n    testDockerCommandPluginWithVolumesOutput(\"DRIVER              VOLUME NAME\\n\" + \"local               volume2\\n\", true);\r\n    testDockerCommandPluginWithVolumesOutput(\"volum1,something\", true);\r\n    testDockerCommandPluginWithVolumesOutput(\"DRIVER              VOLUME NAME\\n\" + \"something               volume1\\n\", true);\r\n    testDockerCommandPluginWithVolumesOutput(\"volum1,something\\nvolum2,local\", true);\r\n    testDockerCommandPluginWithVolumesOutput(\"DRIVER              VOLUME NAME\\n\" + \"nvidia-docker       nvidia_driver_375.66\\n\" + \"local               volume1\\n\", false);\r\n    testDockerCommandPluginWithVolumesOutput(\"volume_xyz,nvidia\\nvolume1,local\\n\\n\", false);\r\n    testDockerCommandPluginWithVolumesOutput(\" volume1,  local \\n\", false);\r\n    testDockerCommandPluginWithVolumesOutput(\"volume_xyz,\\tnvidia\\n   volume1,\\tlocal\\n\\n\", false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testDockerCommandPlugin",
  "errType" : null,
  "containingMethodsNum" : 31,
  "sourceCodeText" : "void testDockerCommandPlugin() throws Exception\n{\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    when(mockExecutor.executePrivilegedOperation(any(), any(PrivilegedOperation.class), any(), any(), anyBoolean(), anyBoolean())).thenReturn(null, \"volume1,local\");\r\n    Context mockNMContext = createMockNMContext();\r\n    ResourcePluginManager rpm = mock(ResourcePluginManager.class);\r\n    Map<String, ResourcePlugin> pluginsMap = new HashMap<>();\r\n    ResourcePlugin plugin1 = mock(ResourcePlugin.class);\r\n    DockerCommandPlugin dockerCommandPlugin = new MockDockerCommandPlugin(\"volume1\", \"local\");\r\n    when(plugin1.getDockerCommandPluginInstance()).thenReturn(dockerCommandPlugin);\r\n    ResourcePlugin plugin2 = mock(ResourcePlugin.class);\r\n    pluginsMap.put(\"plugin1\", plugin1);\r\n    pluginsMap.put(\"plugin2\", plugin2);\r\n    when(rpm.getNameToPlugins()).thenReturn(pluginsMap);\r\n    when(mockNMContext.getResourcePluginManager()).thenReturn(rpm);\r\n    runtime.initialize(conf, mockNMContext);\r\n    ContainerRuntimeContext containerRuntimeContext = builder.build();\r\n    runtime.prepareContainer(containerRuntimeContext);\r\n    runtime.launchContainer(containerRuntimeContext);\r\n    checkVolumeCreateCommand();\r\n    List<String> dockerCommands = readDockerCommands(3);\r\n    int expected = 14;\r\n    int counter = 0;\r\n    Assert.assertEquals(expected, dockerCommands.size());\r\n    Assert.assertEquals(\"[docker-command-execution]\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  cap-add=SYS_CHROOT,NET_BIND_SERVICE\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  cap-drop=ALL\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  detach=true\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  docker-command=run\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  group-add=\" + String.join(\",\", groups), dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  image=busybox:latest\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  launch-command=bash,/test_container_work_dir/launch_container.sh\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  mounts=\" + \"/test_container_log_dir:/test_container_log_dir:rw,\" + \"/test_application_local_dir:/test_application_local_dir:rw,\" + \"/test_filecache_dir:/test_filecache_dir:ro,\" + \"/test_user_filecache_dir:/test_user_filecache_dir:ro,\" + \"/source/path:/destination/path:ro\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  name=container_e11_1518975676334_14532816_01_000001\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  net=host\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  user=\" + uidGidPair, dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  volume-driver=driver-1\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  workdir=/test_container_work_dir\", dockerCommands.get(counter));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testDockerCapabilities",
  "errType" : [ "ContainerExecutionException", "ContainerExecutionException" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testDockerCapabilities() throws ContainerExecutionException\n{\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    try {\r\n        conf.setStrings(YarnConfiguration.NM_DOCKER_CONTAINER_CAPABILITIES, \"none\", \"CHOWN\", \"DAC_OVERRIDE\");\r\n        runtime.initialize(conf, nmContext);\r\n        Assert.fail(\"Initialize didn't fail with invalid capabilities \" + \"'none', 'CHOWN', 'DAC_OVERRIDE'\");\r\n    } catch (ContainerExecutionException e) {\r\n    }\r\n    try {\r\n        conf.setStrings(YarnConfiguration.NM_DOCKER_CONTAINER_CAPABILITIES, \"CHOWN\", \"DAC_OVERRIDE\", \"NONE\");\r\n        runtime.initialize(conf, nmContext);\r\n        Assert.fail(\"Initialize didn't fail with invalid capabilities \" + \"'CHOWN', 'DAC_OVERRIDE', 'NONE'\");\r\n    } catch (ContainerExecutionException e) {\r\n    }\r\n    conf.setStrings(YarnConfiguration.NM_DOCKER_CONTAINER_CAPABILITIES, \"NONE\");\r\n    runtime.initialize(conf, nmContext);\r\n    Assert.assertEquals(0, runtime.getCapabilities().size());\r\n    conf.setStrings(YarnConfiguration.NM_DOCKER_CONTAINER_CAPABILITIES, \"none\");\r\n    runtime.initialize(conf, nmContext);\r\n    Assert.assertEquals(0, runtime.getCapabilities().size());\r\n    conf.setStrings(YarnConfiguration.NM_DOCKER_CONTAINER_CAPABILITIES, \"CHOWN\", \"DAC_OVERRIDE\");\r\n    runtime.initialize(conf, nmContext);\r\n    Iterator<String> it = runtime.getCapabilities().iterator();\r\n    Assert.assertEquals(\"CHOWN\", it.next());\r\n    Assert.assertEquals(\"DAC_OVERRIDE\", it.next());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testLaunchContainerWithDockerTokens",
  "errType" : null,
  "containingMethodsNum" : 50,
  "sourceCodeText" : "void testLaunchContainerWithDockerTokens() throws ContainerExecutionException, PrivilegedOperationException, IOException\n{\r\n    File file = File.createTempFile(\"docker-client-config\", \"runtime-test\");\r\n    file.deleteOnExit();\r\n    BufferedWriter bw = new BufferedWriter(new FileWriter(file));\r\n    bw.write(TestDockerClientConfigHandler.JSON);\r\n    bw.close();\r\n    Credentials credentials = DockerClientConfigHandler.readCredentialsFromConfigFile(new Path(file.toURI()), conf, appId);\r\n    DataOutputBuffer dob = new DataOutputBuffer();\r\n    credentials.writeTokenStorageToStream(dob);\r\n    ByteBuffer tokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\r\n    when(context.getTokens()).thenReturn(tokens);\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    Set<PosixFilePermission> perms = PosixFilePermissions.fromString(\"rwxr-xr--\");\r\n    FileAttribute<Set<PosixFilePermission>> attr = PosixFilePermissions.asFileAttribute(perms);\r\n    Path outDir = new Path(Files.createTempDirectory(\"docker-client-config-out\", attr).toUri().getPath() + \"/launch_container.sh\");\r\n    builder.setExecutionAttribute(NM_PRIVATE_CONTAINER_SCRIPT_PATH, outDir);\r\n    runtime.launchContainer(builder.build());\r\n    PrivilegedOperation op = capturePrivilegedOperation();\r\n    Assert.assertEquals(PrivilegedOperation.OperationType.LAUNCH_DOCKER_CONTAINER, op.getOperationType());\r\n    List<String> args = op.getArguments();\r\n    int expectedArgs = (https) ? 15 : 13;\r\n    int argsCounter = 0;\r\n    Assert.assertEquals(expectedArgs, args.size());\r\n    Assert.assertEquals(runAsUser, args.get(argsCounter++));\r\n    Assert.assertEquals(user, args.get(argsCounter++));\r\n    Assert.assertEquals(Integer.toString(PrivilegedOperation.RunAsUserCommand.LAUNCH_DOCKER_CONTAINER.getValue()), args.get(argsCounter++));\r\n    Assert.assertEquals(appId, args.get(argsCounter++));\r\n    Assert.assertEquals(containerId, args.get(argsCounter++));\r\n    Assert.assertEquals(containerWorkDir.toString(), args.get(argsCounter++));\r\n    Assert.assertEquals(outDir.toUri().getPath(), args.get(argsCounter++));\r\n    Assert.assertEquals(nmPrivateTokensPath.toUri().getPath(), args.get(argsCounter++));\r\n    if (https) {\r\n        Assert.assertEquals(\"--https\", args.get(argsCounter++));\r\n        Assert.assertEquals(nmPrivateKeystorePath.toUri().toString(), args.get(argsCounter++));\r\n        Assert.assertEquals(nmPrivateTruststorePath.toUri().toString(), args.get(argsCounter++));\r\n    } else {\r\n        Assert.assertEquals(\"--http\", args.get(argsCounter++));\r\n    }\r\n    Assert.assertEquals(pidFilePath.toString(), args.get(argsCounter++));\r\n    Assert.assertEquals(localDirs.get(0), args.get(argsCounter++));\r\n    Assert.assertEquals(logDirs.get(0), args.get(argsCounter++));\r\n    String dockerCommandFile = args.get(argsCounter++);\r\n    List<String> dockerCommands = Files.readAllLines(Paths.get(dockerCommandFile), Charset.forName(\"UTF-8\"));\r\n    int expected = 14;\r\n    int counter = 0;\r\n    Assert.assertEquals(expected, dockerCommands.size());\r\n    Assert.assertEquals(\"[docker-command-execution]\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  cap-add=SYS_CHROOT,NET_BIND_SERVICE\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  cap-drop=ALL\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  detach=true\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  docker-command=run\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  docker-config=\" + outDir.getParent(), dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  group-add=\" + String.join(\",\", groups), dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  image=busybox:latest\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  launch-command=bash,/test_container_work_dir/launch_container.sh\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  mounts=\" + \"/test_container_log_dir:/test_container_log_dir:rw,\" + \"/test_application_local_dir:/test_application_local_dir:rw,\" + \"/test_filecache_dir:/test_filecache_dir:ro,\" + \"/test_user_filecache_dir:/test_user_filecache_dir:ro\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  name=container_e11_1518975676334_14532816_01_000001\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  net=host\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  user=\" + uidGidPair, dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  workdir=/test_container_work_dir\", dockerCommands.get(counter++));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testDockerContainerRelaunch",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testDockerContainerRelaunch() throws ContainerExecutionException, PrivilegedOperationException, IOException\n{\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    when(mockExecutor.executePrivilegedOperation(any(), any(PrivilegedOperation.class), any(), any(), anyBoolean(), anyBoolean())).thenReturn(DockerCommandExecutor.DockerContainerStatus.STOPPED.getName());\r\n    runtime.initialize(conf, nmContext);\r\n    runtime.relaunchContainer(builder.build());\r\n    List<String> dockerCommands = readDockerCommands(2);\r\n    int expected = 3;\r\n    int counter = 0;\r\n    Assert.assertEquals(expected, dockerCommands.size());\r\n    Assert.assertEquals(\"[docker-command-execution]\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  docker-command=start\", dockerCommands.get(counter++));\r\n    Assert.assertEquals(\"  name=container_e11_1518975676334_14532816_01_000001\", dockerCommands.get(counter));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testLaunchContainersWithSpecificDockerRuntime",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testLaunchContainersWithSpecificDockerRuntime() throws ContainerExecutionException, PrivilegedOperationException, IOException\n{\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    env.put(DockerLinuxContainerRuntime.ENV_DOCKER_CONTAINER_DOCKER_RUNTIME, \"runc\");\r\n    runtime.launchContainer(builder.build());\r\n    List<String> dockerCommands = readDockerCommands();\r\n    Assert.assertEquals(14, dockerCommands.size());\r\n    Assert.assertEquals(\"  runtime=runc\", dockerCommands.get(11));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "testContainerLaunchWithAllowedRuntimes",
  "errType" : [ "ContainerExecutionException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testContainerLaunchWithAllowedRuntimes() throws ContainerExecutionException, IOException, PrivilegedOperationException\n{\r\n    DockerLinuxContainerRuntime runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    runtime.initialize(conf, nmContext);\r\n    String disallowedRuntime = \"runc2\";\r\n    try {\r\n        env.put(DockerLinuxContainerRuntime.ENV_DOCKER_CONTAINER_DOCKER_RUNTIME, disallowedRuntime);\r\n        runtime.launchContainer(builder.build());\r\n        Assert.fail(\"Runtime was expected to be disallowed: \" + disallowedRuntime);\r\n    } catch (ContainerExecutionException e) {\r\n        LOG.info(\"Caught expected exception: \" + e);\r\n    }\r\n    String allowedRuntime = \"runc\";\r\n    env.put(DockerLinuxContainerRuntime.ENV_DOCKER_CONTAINER_DOCKER_RUNTIME, allowedRuntime);\r\n    runtime.launchContainer(builder.build());\r\n    List<String> dockerCommands = readDockerCommands();\r\n    Assert.assertEquals(14, dockerCommands.size());\r\n    Assert.assertEquals(\"  runtime=runc\", dockerCommands.get(11));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "verifyStopCommand",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void verifyStopCommand(List<String> dockerCommands, String signal)\n{\r\n    Assert.assertEquals(4, dockerCommands.size());\r\n    Assert.assertEquals(\"[docker-command-execution]\", dockerCommands.get(0));\r\n    Assert.assertEquals(\"  docker-command=kill\", dockerCommands.get(1));\r\n    Assert.assertEquals(\"  name=container_e11_1518975676334_14532816_01_000001\", dockerCommands.get(2));\r\n    Assert.assertEquals(\"  signal=\" + signal, dockerCommands.get(3));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "readDockerCommands",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<String> readDockerCommands() throws IOException, PrivilegedOperationException\n{\r\n    return readDockerCommands(1);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime",
  "methodName" : "readDockerCommands",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "List<String> readDockerCommands(int invocations) throws IOException, PrivilegedOperationException\n{\r\n    PrivilegedOperation op = (invocations == 1) ? capturePrivilegedOperationAndVerifyArgs() : capturePrivilegedOperation(invocations);\r\n    List<String> args = op.getArguments();\r\n    String dockerCommandFile = args.get((https) ? 14 : 12);\r\n    List<String> dockerCommands = Files.readAllLines(Paths.get(dockerCommandFile), Charset.forName(\"UTF-8\"));\r\n    return dockerCommands;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setup()\n{\r\n    TEST_ROOT_DIR.mkdirs();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "cleanup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void cleanup()\n{\r\n    FileUtil.fullyDelete(TEST_ROOT_DIR);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testWriteCommandToTempFile",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testWriteCommandToTempFile() throws Exception\n{\r\n    String absRoot = TEST_ROOT_DIR.getAbsolutePath();\r\n    ApplicationId appId = ApplicationId.newInstance(1, 1);\r\n    ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId cid = ContainerId.newContainerId(attemptId, 1);\r\n    DockerCommand dockerCmd = new DockerInspectCommand(cid.toString());\r\n    Configuration conf = new Configuration();\r\n    conf.set(\"hadoop.tmp.dir\", absRoot);\r\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, absRoot);\r\n    conf.set(YarnConfiguration.NM_LOG_DIRS, absRoot);\r\n    LocalDirsHandlerService dirsHandler = new LocalDirsHandlerService();\r\n    Context mockContext = mock(Context.class);\r\n    doReturn(conf).when(mockContext).getConf();\r\n    doReturn(dirsHandler).when(mockContext).getLocalDirsHandler();\r\n    DockerClient dockerClient = new DockerClient();\r\n    dirsHandler.init(conf);\r\n    dirsHandler.start();\r\n    String tmpPath = dockerClient.writeCommandToTempFile(dockerCmd, cid, mockContext);\r\n    dirsHandler.stop();\r\n    File tmpFile = new File(tmpPath);\r\n    assertTrue(tmpFile + \" was not created\", tmpFile.exists());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testCommandValidation",
  "errType" : [ "ContainerExecutionException", "ContainerExecutionException" ],
  "containingMethodsNum" : 23,
  "sourceCodeText" : "void testCommandValidation() throws Exception\n{\r\n    String absRoot = TEST_ROOT_DIR.getAbsolutePath();\r\n    ApplicationId appId = ApplicationId.newInstance(1, 1);\r\n    ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId cid = ContainerId.newContainerId(attemptId, 1);\r\n    Configuration conf = new Configuration();\r\n    conf.set(\"hadoop.tmp.dir\", absRoot);\r\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, absRoot);\r\n    conf.set(YarnConfiguration.NM_LOG_DIRS, absRoot);\r\n    LocalDirsHandlerService dirsHandler = new LocalDirsHandlerService();\r\n    Context mockContext = mock(Context.class);\r\n    doReturn(conf).when(mockContext).getConf();\r\n    doReturn(dirsHandler).when(mockContext).getLocalDirsHandler();\r\n    DockerClient dockerClient = new DockerClient();\r\n    dirsHandler.init(conf);\r\n    dirsHandler.start();\r\n    try {\r\n        DockerRunCommand dockerCmd = new DockerRunCommand(cid.toString(), \"user\", \"image\");\r\n        dockerCmd.addCommandArguments(\"prop=bad\", \"val\");\r\n        dockerClient.writeCommandToTempFile(dockerCmd, cid, mockContext);\r\n        fail(\"Expected exception writing command file\");\r\n    } catch (ContainerExecutionException e) {\r\n        assertTrue(\"Expected key validation error\", e.getMessage().contains(\"'=' found in entry for docker command file\"));\r\n    }\r\n    try {\r\n        DockerRunCommand dockerCmd = new DockerRunCommand(cid.toString(), \"user\", \"image\");\r\n        dockerCmd.setOverrideCommandWithArgs(Arrays.asList(\"sleep\", \"1000\\n\"));\r\n        dockerClient.writeCommandToTempFile(dockerCmd, cid, mockContext);\r\n        fail(\"Expected exception writing command file\");\r\n    } catch (ContainerExecutionException e) {\r\n        assertTrue(\"Expected value validation error\", e.getMessage().contains(\"'\\\\n' found in entry for docker command file\"));\r\n    }\r\n    dirsHandler.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "deleteTmpFiles",
  "errType" : [ "FileNotFoundException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void deleteTmpFiles() throws IOException\n{\r\n    FileContext lfs = FileContext.getLocalFSFileContext();\r\n    try {\r\n        lfs.delete(BASE_TMP_PATH, true);\r\n    } catch (FileNotFoundException e) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "createTmpFile",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "byte[] createTmpFile(Path dst, Random r, int len) throws IOException\n{\r\n    FileContext lfs = FileContext.getLocalFSFileContext();\r\n    dst = lfs.makeQualified(dst);\r\n    lfs.mkdir(dst.getParent(), null, true);\r\n    byte[] bytes = new byte[len];\r\n    FSDataOutputStream out = null;\r\n    try {\r\n        out = lfs.create(dst, EnumSet.of(CREATE, OVERWRITE));\r\n        r.nextBytes(bytes);\r\n        out.write(bytes);\r\n    } finally {\r\n        if (out != null)\r\n            out.close();\r\n    }\r\n    return bytes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testDirPermissions",
  "errType" : null,
  "containingMethodsNum" : 28,
  "sourceCodeText" : "void testDirPermissions() throws Exception\n{\r\n    deleteTmpFiles();\r\n    final String user = \"somebody\";\r\n    final String appId = \"app_12345_123\";\r\n    final FsPermission userCachePerm = new FsPermission(DefaultContainerExecutor.USER_PERM);\r\n    final FsPermission appCachePerm = new FsPermission(DefaultContainerExecutor.APPCACHE_PERM);\r\n    final FsPermission fileCachePerm = new FsPermission(DefaultContainerExecutor.FILECACHE_PERM);\r\n    final FsPermission appDirPerm = new FsPermission(DefaultContainerExecutor.APPDIR_PERM);\r\n    List<String> localDirs = new ArrayList<String>();\r\n    localDirs.add(new Path(BASE_TMP_PATH, \"localDirA\").toString());\r\n    localDirs.add(new Path(BASE_TMP_PATH, \"localDirB\").toString());\r\n    List<String> logDirs = new ArrayList<String>();\r\n    logDirs.add(new Path(BASE_TMP_PATH, \"logDirA\").toString());\r\n    logDirs.add(new Path(BASE_TMP_PATH, \"logDirB\").toString());\r\n    Configuration conf = new Configuration();\r\n    conf.set(CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY, \"077\");\r\n    FileContext lfs = FileContext.getLocalFSFileContext(conf);\r\n    DefaultContainerExecutor executor = new DefaultContainerExecutor(lfs);\r\n    executor.setConf(conf);\r\n    executor.init(null);\r\n    try {\r\n        executor.createUserLocalDirs(localDirs, user);\r\n        executor.createUserCacheDirs(localDirs, user);\r\n        executor.createAppDirs(localDirs, user, appId);\r\n        for (String dir : localDirs) {\r\n            FileStatus stats = lfs.getFileStatus(new Path(new Path(dir, ContainerLocalizer.USERCACHE), user));\r\n            Assert.assertEquals(userCachePerm, stats.getPermission());\r\n        }\r\n        for (String dir : localDirs) {\r\n            Path userCachePath = new Path(new Path(dir, ContainerLocalizer.USERCACHE), user);\r\n            Path appCachePath = new Path(userCachePath, ContainerLocalizer.APPCACHE);\r\n            FileStatus stats = lfs.getFileStatus(appCachePath);\r\n            Assert.assertEquals(appCachePerm, stats.getPermission());\r\n            stats = lfs.getFileStatus(new Path(userCachePath, ContainerLocalizer.FILECACHE));\r\n            Assert.assertEquals(fileCachePerm, stats.getPermission());\r\n            stats = lfs.getFileStatus(new Path(appCachePath, appId));\r\n            Assert.assertEquals(appDirPerm, stats.getPermission());\r\n        }\r\n        String[] permissionsArray = { \"000\", \"111\", \"555\", \"710\", \"777\" };\r\n        for (String perm : permissionsArray) {\r\n            conf.set(YarnConfiguration.NM_DEFAULT_CONTAINER_EXECUTOR_LOG_DIRS_PERMISSIONS, perm);\r\n            executor.clearLogDirPermissions();\r\n            FsPermission logDirPerm = new FsPermission(executor.getLogDirPermissions());\r\n            executor.createAppLogDirs(appId, logDirs, user);\r\n            for (String dir : logDirs) {\r\n                FileStatus stats = lfs.getFileStatus(new Path(dir, appId));\r\n                Assert.assertEquals(logDirPerm, stats.getPermission());\r\n                lfs.delete(new Path(dir, appId), true);\r\n            }\r\n        }\r\n    } finally {\r\n        deleteTmpFiles();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "writeStringToRelativePath",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void writeStringToRelativePath(FileContext fc, Path p, String str) throws IOException\n{\r\n    p = p.makeQualified(fc.getDefaultFileSystem().getUri(), new Path(new File(\".\").getAbsolutePath()));\r\n    try (FSDataOutputStream os = fc.create(p).build()) {\r\n        os.writeUTF(str);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "readStringFromPath",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String readStringFromPath(FileContext fc, Path p) throws IOException\n{\r\n    try (FSDataInputStream is = fc.open(p)) {\r\n        return is.readUTF();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testLaunchContainerCopyFilesWithoutHTTPS",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testLaunchContainerCopyFilesWithoutHTTPS() throws Exception\n{\r\n    testLaunchContainerCopyFiles(false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testLaunchContainerCopyFilesWithHTTPS",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testLaunchContainerCopyFilesWithHTTPS() throws Exception\n{\r\n    testLaunchContainerCopyFiles(true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testLaunchContainerCopyFiles",
  "errType" : [ "FileNotFoundException", "FileNotFoundException", "FileNotFoundException" ],
  "containingMethodsNum" : 46,
  "sourceCodeText" : "void testLaunchContainerCopyFiles(boolean https) throws Exception\n{\r\n    if (Shell.WINDOWS) {\r\n        BASE_TMP_PATH = new Path(new File(\"target\").getAbsolutePath(), TestDefaultContainerExecutor.class.getSimpleName());\r\n    }\r\n    Path localDir = new Path(BASE_TMP_PATH, \"localDir\");\r\n    List<String> localDirs = new ArrayList<String>();\r\n    localDirs.add(localDir.toString());\r\n    List<String> logDirs = new ArrayList<String>();\r\n    Path logDir = new Path(BASE_TMP_PATH, \"logDir\");\r\n    logDirs.add(logDir.toString());\r\n    Configuration conf = new Configuration();\r\n    conf.set(CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY, \"077\");\r\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, localDir.toString());\r\n    conf.set(YarnConfiguration.NM_LOG_DIRS, logDir.toString());\r\n    FileContext lfs = FileContext.getLocalFSFileContext(conf);\r\n    deleteTmpFiles();\r\n    lfs.mkdir(BASE_TMP_PATH, FsPermission.getDefault(), true);\r\n    DefaultContainerExecutor dce = new DefaultContainerExecutor(lfs);\r\n    dce.setConf(conf);\r\n    Container container = mock(Container.class);\r\n    ContainerId cId = mock(ContainerId.class);\r\n    ContainerLaunchContext context = mock(ContainerLaunchContext.class);\r\n    HashMap<String, String> env = new HashMap<String, String>();\r\n    env.put(\"LANG\", \"C\");\r\n    String appSubmitter = \"nobody\";\r\n    String appId = \"APP_ID\";\r\n    String containerId = \"CONTAINER_ID\";\r\n    when(container.getContainerId()).thenReturn(cId);\r\n    when(container.getLaunchContext()).thenReturn(context);\r\n    when(cId.toString()).thenReturn(containerId);\r\n    when(cId.getApplicationAttemptId()).thenReturn(ApplicationAttemptId.newInstance(ApplicationId.newInstance(0, 1), 0));\r\n    when(context.getEnvironment()).thenReturn(env);\r\n    Path scriptPath = new Path(BASE_TMP_PATH, \"script\");\r\n    Path tokensPath = new Path(BASE_TMP_PATH, \"tokens\");\r\n    Path keystorePath = new Path(BASE_TMP_PATH, \"keystore\");\r\n    Path truststorePath = new Path(BASE_TMP_PATH, \"truststore\");\r\n    writeStringToRelativePath(lfs, scriptPath, \"script\");\r\n    writeStringToRelativePath(lfs, tokensPath, \"tokens\");\r\n    if (https) {\r\n        writeStringToRelativePath(lfs, keystorePath, \"keystore\");\r\n        writeStringToRelativePath(lfs, truststorePath, \"truststore\");\r\n    }\r\n    Path workDir = localDir;\r\n    Path pidFile = new Path(workDir, \"pid.txt\");\r\n    dce.init(null);\r\n    dce.activateContainer(cId, pidFile);\r\n    ContainerStartContext.Builder ctxBuilder = new ContainerStartContext.Builder().setContainer(container).setNmPrivateContainerScriptPath(scriptPath).setNmPrivateTokensPath(tokensPath).setUser(appSubmitter).setAppId(appId).setContainerWorkDir(workDir).setLocalDirs(localDirs).setLogDirs(logDirs);\r\n    if (https) {\r\n        ctxBuilder.setNmPrivateTruststorePath(truststorePath).setNmPrivateKeystorePath(keystorePath);\r\n    }\r\n    ContainerStartContext ctx = ctxBuilder.build();\r\n    lfs.delete(workDir, true);\r\n    try {\r\n        lfs.getFileStatus(workDir);\r\n        Assert.fail(\"Expected FileNotFoundException on \" + workDir);\r\n    } catch (FileNotFoundException e) {\r\n    }\r\n    dce.launchContainer(ctx);\r\n    Path finalScriptPath = new Path(workDir, ContainerLaunch.CONTAINER_SCRIPT);\r\n    Path finalTokensPath = new Path(workDir, ContainerLaunch.FINAL_CONTAINER_TOKENS_FILE);\r\n    Path finalKeystorePath = new Path(workDir, ContainerLaunch.KEYSTORE_FILE);\r\n    Path finalTrustorePath = new Path(workDir, ContainerLaunch.TRUSTSTORE_FILE);\r\n    Assert.assertTrue(lfs.getFileStatus(workDir).isDirectory());\r\n    Assert.assertTrue(lfs.getFileStatus(finalScriptPath).isFile());\r\n    Assert.assertTrue(lfs.getFileStatus(finalTokensPath).isFile());\r\n    if (https) {\r\n        Assert.assertTrue(lfs.getFileStatus(finalKeystorePath).isFile());\r\n        Assert.assertTrue(lfs.getFileStatus(finalTrustorePath).isFile());\r\n    } else {\r\n        try {\r\n            lfs.getFileStatus(finalKeystorePath);\r\n            Assert.fail(\"Expected FileNotFoundException on \" + finalKeystorePath);\r\n        } catch (FileNotFoundException e) {\r\n        }\r\n        try {\r\n            lfs.getFileStatus(finalTrustorePath);\r\n            Assert.fail(\"Expected FileNotFoundException on \" + finalKeystorePath);\r\n        } catch (FileNotFoundException e) {\r\n        }\r\n    }\r\n    Assert.assertEquals(\"script\", readStringFromPath(lfs, finalScriptPath));\r\n    Assert.assertEquals(\"tokens\", readStringFromPath(lfs, finalTokensPath));\r\n    if (https) {\r\n        Assert.assertEquals(\"keystore\", readStringFromPath(lfs, finalKeystorePath));\r\n        Assert.assertEquals(\"truststore\", readStringFromPath(lfs, finalTrustorePath));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testContainerLaunchError",
  "errType" : null,
  "containingMethodsNum" : 39,
  "sourceCodeText" : "void testContainerLaunchError() throws IOException, InterruptedException, ConfigurationException\n{\r\n    if (Shell.WINDOWS) {\r\n        BASE_TMP_PATH = new Path(new File(\"target\").getAbsolutePath(), TestDefaultContainerExecutor.class.getSimpleName());\r\n    }\r\n    Path localDir = new Path(BASE_TMP_PATH, \"localDir\");\r\n    List<String> localDirs = new ArrayList<String>();\r\n    localDirs.add(localDir.toString());\r\n    List<String> logDirs = new ArrayList<String>();\r\n    Path logDir = new Path(BASE_TMP_PATH, \"logDir\");\r\n    logDirs.add(logDir.toString());\r\n    Configuration conf = new Configuration();\r\n    conf.set(CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY, \"077\");\r\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, localDir.toString());\r\n    conf.set(YarnConfiguration.NM_LOG_DIRS, logDir.toString());\r\n    FileContext lfs = FileContext.getLocalFSFileContext(conf);\r\n    DefaultContainerExecutor mockExec = spy(new DefaultContainerExecutor(lfs));\r\n    mockExec.setConf(conf);\r\n    doAnswer(new Answer() {\r\n\r\n        @Override\r\n        public Object answer(InvocationOnMock invocationOnMock) throws Throwable {\r\n            String diagnostics = (String) invocationOnMock.getArguments()[0];\r\n            assertTrue(\"Invalid Diagnostics message: \" + diagnostics, diagnostics.contains(\"No such file or directory\"));\r\n            return null;\r\n        }\r\n    }).when(mockExec).logOutput(any(String.class));\r\n    String appSubmitter = \"nobody\";\r\n    String appId = \"APP_ID\";\r\n    String containerId = \"CONTAINER_ID\";\r\n    Container container = mock(Container.class);\r\n    ContainerId cId = mock(ContainerId.class);\r\n    ContainerLaunchContext context = mock(ContainerLaunchContext.class);\r\n    HashMap<String, String> env = new HashMap<String, String>();\r\n    env.put(\"LANG\", \"C\");\r\n    when(container.getContainerId()).thenReturn(cId);\r\n    when(container.getLaunchContext()).thenReturn(context);\r\n    try {\r\n        doAnswer(new Answer() {\r\n\r\n            @Override\r\n            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {\r\n                ContainerDiagnosticsUpdateEvent event = (ContainerDiagnosticsUpdateEvent) invocationOnMock.getArguments()[0];\r\n                assertTrue(\"Invalid Diagnostics message: \" + event.getDiagnosticsUpdate(), event.getDiagnosticsUpdate().contains(\"No such file or directory\"));\r\n                return null;\r\n            }\r\n        }).when(container).handle(any(ContainerDiagnosticsUpdateEvent.class));\r\n        when(cId.toString()).thenReturn(containerId);\r\n        when(cId.getApplicationAttemptId()).thenReturn(ApplicationAttemptId.newInstance(ApplicationId.newInstance(0, 1), 0));\r\n        when(context.getEnvironment()).thenReturn(env);\r\n        mockExec.createUserLocalDirs(localDirs, appSubmitter);\r\n        mockExec.createUserCacheDirs(localDirs, appSubmitter);\r\n        mockExec.createAppDirs(localDirs, appSubmitter, appId);\r\n        mockExec.createAppLogDirs(appId, logDirs, appSubmitter);\r\n        Path scriptPath = new Path(\"file:///bin/echo\");\r\n        Path tokensPath = new Path(\"file:///dev/null\");\r\n        Path keystorePath = new Path(\"file:///dev/null\");\r\n        Path truststorePath = new Path(\"file:///dev/null\");\r\n        if (Shell.WINDOWS) {\r\n            File tmp = new File(BASE_TMP_PATH.toString(), \"test_echo.cmd\");\r\n            BufferedWriter output = new BufferedWriter(new FileWriter(tmp));\r\n            output.write(\"Exit 1\");\r\n            output.write(\"Echo No such file or directory 1>&2\");\r\n            output.close();\r\n            scriptPath = new Path(tmp.getAbsolutePath());\r\n            tmp = new File(BASE_TMP_PATH.toString(), \"tokens\");\r\n            tmp.createNewFile();\r\n            tokensPath = new Path(tmp.getAbsolutePath());\r\n        }\r\n        Path workDir = localDir;\r\n        Path pidFile = new Path(workDir, \"pid.txt\");\r\n        mockExec.init(null);\r\n        mockExec.activateContainer(cId, pidFile);\r\n        int ret = mockExec.launchContainer(new ContainerStartContext.Builder().setContainer(container).setNmPrivateContainerScriptPath(scriptPath).setNmPrivateTokensPath(tokensPath).setNmPrivateKeystorePath(keystorePath).setNmPrivateTruststorePath(truststorePath).setUser(appSubmitter).setAppId(appId).setContainerWorkDir(workDir).setLocalDirs(localDirs).setLogDirs(logDirs).build());\r\n        Assert.assertNotSame(0, ret);\r\n    } finally {\r\n        mockExec.deleteAsUser(new DeletionAsUserContext.Builder().setUser(appSubmitter).setSubDir(localDir).build());\r\n        mockExec.deleteAsUser(new DeletionAsUserContext.Builder().setUser(appSubmitter).setSubDir(logDir).build());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testStartLocalizer",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void testStartLocalizer() throws IOException, InterruptedException, YarnException\n{\r\n    final Path firstDir = new Path(BASE_TMP_PATH, \"localDir1\");\r\n    List<String> localDirs = new ArrayList<String>();\r\n    final Path secondDir = new Path(BASE_TMP_PATH, \"localDir2\");\r\n    List<String> logDirs = new ArrayList<String>();\r\n    final Path logDir = new Path(BASE_TMP_PATH, \"logDir\");\r\n    final Path tokenDir = new Path(BASE_TMP_PATH, \"tokenDir\");\r\n    FsPermission perms = new FsPermission((short) 0770);\r\n    Configuration conf = new Configuration();\r\n    final FileContext mockLfs = spy(FileContext.getLocalFSFileContext(conf));\r\n    final FileContext.Util mockUtil = spy(mockLfs.util());\r\n    doAnswer(new Answer() {\r\n\r\n        @Override\r\n        public Object answer(InvocationOnMock invocationOnMock) throws Throwable {\r\n            return mockUtil;\r\n        }\r\n    }).when(mockLfs).util();\r\n    doAnswer(new Answer() {\r\n\r\n        @Override\r\n        public Object answer(InvocationOnMock invocationOnMock) throws Throwable {\r\n            Path dest = (Path) invocationOnMock.getArguments()[1];\r\n            if (dest.toString().contains(firstDir.toString())) {\r\n                throw new IOException(\"No space on this drive \" + dest.toString());\r\n            } else {\r\n                DataOutputStream tokenOut = null;\r\n                try {\r\n                    Credentials credentials = new Credentials();\r\n                    tokenOut = mockLfs.create(dest, EnumSet.of(CREATE, OVERWRITE));\r\n                    credentials.writeTokenStorageToStream(tokenOut);\r\n                } finally {\r\n                    if (tokenOut != null) {\r\n                        tokenOut.close();\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n    }).when(mockUtil).copy(any(Path.class), any(Path.class), anyBoolean(), anyBoolean());\r\n    doAnswer(new Answer() {\r\n\r\n        @Override\r\n        public Object answer(InvocationOnMock invocationOnMock) throws Throwable {\r\n            Path p = (Path) invocationOnMock.getArguments()[0];\r\n            if (p.toString().contains(firstDir.toString())) {\r\n                return new FsStatus(2000, 2000, 0);\r\n            } else {\r\n                return new FsStatus(1000, 0, 1000);\r\n            }\r\n        }\r\n    }).when(mockLfs).getFsStatus(any(Path.class));\r\n    DefaultContainerExecutor mockExec = spy(new DefaultContainerExecutor(mockLfs) {\r\n\r\n        @Override\r\n        public ContainerLocalizer createContainerLocalizer(String user, String appId, String locId, String tokenFileName, List<String> localDirs, FileContext localizerFc) throws IOException {\r\n            ContainerLocalizer localizer = super.createContainerLocalizer(user, appId, locId, tokenFileName, localDirs, localizerFc);\r\n            ContainerLocalizer spyLocalizer = spy(localizer);\r\n            LocalizationProtocol nmProxy = mock(LocalizationProtocol.class);\r\n            try {\r\n                when(nmProxy.heartbeat(isA(LocalizerStatus.class))).thenReturn(new MockLocalizerHeartbeatResponse(LocalizerAction.DIE, new ArrayList<ResourceLocalizationSpec>()));\r\n            } catch (YarnException e) {\r\n                throw new IOException(e);\r\n            }\r\n            when(spyLocalizer.getProxy(any())).thenReturn(nmProxy);\r\n            return spyLocalizer;\r\n        }\r\n    });\r\n    mockExec.setConf(conf);\r\n    localDirs.add(mockLfs.makeQualified(firstDir).toString());\r\n    localDirs.add(mockLfs.makeQualified(secondDir).toString());\r\n    logDirs.add(mockLfs.makeQualified(logDir).toString());\r\n    conf.setStrings(YarnConfiguration.NM_LOCAL_DIRS, localDirs.toArray(new String[localDirs.size()]));\r\n    conf.set(YarnConfiguration.NM_LOG_DIRS, logDir.toString());\r\n    mockLfs.mkdir(tokenDir, perms, true);\r\n    Path nmPrivateCTokensPath = new Path(tokenDir, \"test.tokens\");\r\n    String appSubmitter = \"nobody\";\r\n    String appId = \"APP_ID\";\r\n    String locId = \"LOC_ID\";\r\n    LocalDirsHandlerService dirsHandler = mock(LocalDirsHandlerService.class);\r\n    when(dirsHandler.getLocalDirs()).thenReturn(localDirs);\r\n    when(dirsHandler.getLogDirs()).thenReturn(logDirs);\r\n    try {\r\n        mockExec.startLocalizer(new LocalizerStartContext.Builder().setNmPrivateContainerTokens(nmPrivateCTokensPath).setNmAddr(null).setUser(appSubmitter).setAppId(appId).setLocId(locId).setDirsHandler(dirsHandler).build());\r\n    } catch (IOException e) {\r\n        Assert.fail(\"StartLocalizer failed to copy token file: \" + StringUtils.stringifyException(e));\r\n    } finally {\r\n        mockExec.deleteAsUser(new DeletionAsUserContext.Builder().setUser(appSubmitter).setSubDir(firstDir).build());\r\n        mockExec.deleteAsUser(new DeletionAsUserContext.Builder().setUser(appSubmitter).setSubDir(secondDir).build());\r\n        mockExec.deleteAsUser(new DeletionAsUserContext.Builder().setUser(appSubmitter).setSubDir(logDir).build());\r\n        deleteTmpFiles();\r\n    }\r\n    verify(mockUtil, times(1)).copy(any(Path.class), any(Path.class), anyBoolean(), anyBoolean());\r\n    verify(mockLfs, times(2)).getFsStatus(any(Path.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 3,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testPickDirectory",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testPickDirectory() throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    FileContext lfs = FileContext.getLocalFSFileContext(conf);\r\n    DefaultContainerExecutor executor = new DefaultContainerExecutor(lfs);\r\n    long[] availableOnDisk = new long[2];\r\n    availableOnDisk[0] = 100;\r\n    availableOnDisk[1] = 100;\r\n    assertEquals(0, executor.pickDirectory(0L, availableOnDisk));\r\n    assertEquals(0, executor.pickDirectory(99L, availableOnDisk));\r\n    assertEquals(1, executor.pickDirectory(100L, availableOnDisk));\r\n    assertEquals(1, executor.pickDirectory(101L, availableOnDisk));\r\n    assertEquals(1, executor.pickDirectory(199L, availableOnDisk));\r\n    long[] availableOnDisk2 = new long[5];\r\n    availableOnDisk2[0] = 100;\r\n    availableOnDisk2[1] = 10;\r\n    availableOnDisk2[2] = 400;\r\n    availableOnDisk2[3] = 200;\r\n    availableOnDisk2[4] = 350;\r\n    assertEquals(0, executor.pickDirectory(0L, availableOnDisk2));\r\n    assertEquals(0, executor.pickDirectory(99L, availableOnDisk2));\r\n    assertEquals(1, executor.pickDirectory(100L, availableOnDisk2));\r\n    assertEquals(1, executor.pickDirectory(105L, availableOnDisk2));\r\n    assertEquals(2, executor.pickDirectory(110L, availableOnDisk2));\r\n    assertEquals(2, executor.pickDirectory(259L, availableOnDisk2));\r\n    assertEquals(3, executor.pickDirectory(700L, availableOnDisk2));\r\n    assertEquals(4, executor.pickDirectory(710L, availableOnDisk2));\r\n    assertEquals(4, executor.pickDirectory(910L, availableOnDisk2));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "create",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void create()\n{\r\n    classContextClassLoader = Thread.currentThread().getContextClassLoader();\r\n    loader = new XMLPathClassLoader(TestConfigurationNodeLabelsProvider.class.getClassLoader());\r\n    testRootDir.mkdirs();\r\n    Thread.currentThread().setContextClassLoader(loader);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setup()\n{\r\n    nodeLabelsProvider = new ConfigurationNodeLabelsProvider();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    if (nodeLabelsProvider != null) {\r\n        nodeLabelsProvider.close();\r\n        nodeLabelsProvider.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "remove",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void remove() throws Exception\n{\r\n    if (classContextClassLoader != null) {\r\n        Thread.currentThread().setContextClassLoader(classContextClassLoader);\r\n    }\r\n    if (testRootDir.exists()) {\r\n        FileContext.getLocalFSFileContext().delete(new Path(testRootDir.getAbsolutePath()), true);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "testNodeLabelsFromConfig",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testNodeLabelsFromConfig() throws IOException, InterruptedException\n{\r\n    Configuration conf = new Configuration();\r\n    modifyConf(\"A\");\r\n    nodeLabelsProvider.init(conf);\r\n    nodeLabelsProvider.start();\r\n    assertNLCollectionEquals(toNodeLabelSet(\"A\"), nodeLabelsProvider.getDescriptors());\r\n    TimerTask timerTask = nodeLabelsProvider.getTimerTask();\r\n    modifyConf(\"X\");\r\n    timerTask.run();\r\n    assertNLCollectionEquals(toNodeLabelSet(\"X\"), nodeLabelsProvider.getDescriptors());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "testConfigForNoTimer",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testConfigForNoTimer() throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    modifyConf(\"A\");\r\n    conf.setLong(YarnConfiguration.NM_NODE_LABELS_PROVIDER_FETCH_INTERVAL_MS, AbstractNodeDescriptorsProvider.DISABLE_NODE_DESCRIPTORS_PROVIDER_FETCH_TIMER);\r\n    nodeLabelsProvider.init(conf);\r\n    nodeLabelsProvider.start();\r\n    Assert.assertNull(\"Timer is not expected to be\" + \" created when interval is configured as -1\", nodeLabelsProvider.getScheduler());\r\n    assertNLCollectionEquals(toNodeLabelSet(\"A\"), nodeLabelsProvider.getDescriptors());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "testConfigTimer",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testConfigTimer() throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    modifyConf(\"A\");\r\n    conf.setLong(YarnConfiguration.NM_NODE_LABELS_PROVIDER_FETCH_INTERVAL_MS, 1000);\r\n    nodeLabelsProvider.init(conf);\r\n    nodeLabelsProvider.start();\r\n    assertNLCollectionEquals(toNodeLabelSet(\"A\"), nodeLabelsProvider.getDescriptors());\r\n    modifyConf(\"X\");\r\n    Thread.sleep(1500);\r\n    assertNLCollectionEquals(toNodeLabelSet(\"X\"), nodeLabelsProvider.getDescriptors());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "modifyConf",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void modifyConf(String nodeLabels) throws FileNotFoundException, IOException\n{\r\n    Configuration conf = new Configuration();\r\n    conf.set(YarnConfiguration.NM_PROVIDER_CONFIGURED_NODE_PARTITION, nodeLabels);\r\n    FileOutputStream confStream = new FileOutputStream(nodeLabelsConfigFile);\r\n    conf.writeXml(confStream);\r\n    IOUtils.closeStream(confStream);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "updateProcessTree",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void updateProcessTree()\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getProcessTreeDump",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getProcessTreeDump()\n{\r\n    return \"\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getCumulativeCpuTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getCumulativeCpuTime()\n{\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "checkPidPgrpidForMatch",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean checkPidPgrpidForMatch()\n{\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "setRssMemorySize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setRssMemorySize(long rssMemorySize)\n{\r\n    this.rssMemorySize = rssMemorySize;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getRssMemorySize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getRssMemorySize()\n{\r\n    return this.rssMemorySize;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getVirtualMemorySize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getVirtualMemorySize()\n{\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\monitor",
  "methodName" : "getCpuUsagePercent",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "float getCpuUsagePercent()\n{\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getAMRMProxyService",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "MockAMRMProxyService getAMRMProxyService()\n{\r\n    Assert.assertNotNull(this.amrmProxyService);\r\n    return this.amrmProxyService;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getNMContext",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Context getNMContext()\n{\r\n    Assert.assertNotNull(this.nmContext);\r\n    return this.nmContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setUp() throws IOException\n{\r\n    this.conf = createConfiguration();\r\n    this.dispatcher = new AsyncDispatcher();\r\n    this.dispatcher.init(this.conf);\r\n    this.dispatcher.start();\r\n    createAndStartAMRMProxyService(this.conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "createConfiguration",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "YarnConfiguration createConfiguration()\n{\r\n    YarnConfiguration config = new YarnConfiguration();\r\n    config.setBoolean(YarnConfiguration.AMRM_PROXY_ENABLED, true);\r\n    String mockPassThroughInterceptorClass = PassThroughRequestInterceptor.class.getName();\r\n    config.set(YarnConfiguration.AMRM_PROXY_INTERCEPTOR_CLASS_PIPELINE, mockPassThroughInterceptorClass + \",\" + mockPassThroughInterceptorClass + \",\" + mockPassThroughInterceptorClass + \",\" + MockRequestInterceptor.class.getName());\r\n    config.setBoolean(YarnConfiguration.NM_RECOVERY_ENABLED, true);\r\n    return config;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void tearDown()\n{\r\n    this.amrmProxyService.stop();\r\n    this.amrmProxyService = null;\r\n    this.dispatcher.stop();\r\n    if (this.nmContext.getNMStateStore() != null) {\r\n        this.nmContext.getNMStateStore().stop();\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getThreadPool",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ExecutorService getThreadPool()\n{\r\n    return threadpool;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getConf",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Configuration getConf()\n{\r\n    return this.conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getDispatcher",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AsyncDispatcher getDispatcher()\n{\r\n    return this.dispatcher;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "createAndStartAMRMProxyService",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void createAndStartAMRMProxyService(Configuration config) throws IOException\n{\r\n    if (this.amrmProxyService != null) {\r\n        this.amrmProxyService.stop();\r\n    }\r\n    if (this.nmContext == null) {\r\n        this.nmContext = createContext();\r\n    }\r\n    this.amrmProxyService = new MockAMRMProxyService(this.nmContext, this.dispatcher);\r\n    this.amrmProxyService.init(config);\r\n    this.amrmProxyService.recover();\r\n    this.amrmProxyService.start();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "createContext",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Context createContext()\n{\r\n    NMMemoryStateStoreService stateStore = new NMMemoryStateStoreService();\r\n    stateStore.init(this.conf);\r\n    stateStore.start();\r\n    return new NMContext(null, null, null, null, stateStore, false, this.conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "recoverDataMapForAppAttempt",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Map<String, byte[]> recoverDataMapForAppAttempt(NMStateStoreService nmStateStore, ApplicationAttemptId attemptId) throws IOException\n{\r\n    RecoveredAMRMProxyState state = nmStateStore.loadAMRMProxyState();\r\n    for (Map.Entry<ApplicationAttemptId, Map<String, byte[]>> entry : state.getAppContexts().entrySet()) {\r\n        if (entry.getKey().equals(attemptId)) {\r\n            return entry.getValue();\r\n        }\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getCompletedContainerIds",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ContainerId> getCompletedContainerIds(List<ContainerStatus> containerStatus)\n{\r\n    List<ContainerId> ret = new ArrayList<>();\r\n    for (ContainerStatus status : containerStatus) {\r\n        ret.add(status.getContainerId());\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "runInParallel",
  "errType" : [ "Throwable", "Throwable" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "List<R> runInParallel(List<T> testContexts, final Function<T, R> func)\n{\r\n    ExecutorCompletionService<R> completionService = new ExecutorCompletionService<R>(this.getThreadPool());\r\n    LOG.info(\"Sending requests to endpoints asynchronously. Number of test contexts=\" + testContexts.size());\r\n    for (int index = 0; index < testContexts.size(); index++) {\r\n        final T testContext = testContexts.get(index);\r\n        LOG.info(\"Adding request to threadpool for test context: \" + testContext.toString());\r\n        completionService.submit(new Callable<R>() {\r\n\r\n            @Override\r\n            public R call() throws Exception {\r\n                LOG.info(\"Sending request. Test context:\" + testContext.toString());\r\n                R response = null;\r\n                try {\r\n                    response = func.invoke(testContext);\r\n                    LOG.info(\"Successfully sent request for context: \" + testContext.toString());\r\n                } catch (Throwable ex) {\r\n                    LOG.error(\"Failed to process request for context: \" + testContext);\r\n                    response = null;\r\n                }\r\n                return response;\r\n            }\r\n        });\r\n    }\r\n    ArrayList<R> responseList = new ArrayList<R>();\r\n    LOG.info(\"Waiting for responses from endpoints. Number of contexts=\" + testContexts.size());\r\n    for (int i = 0; i < testContexts.size(); ++i) {\r\n        try {\r\n            final Future<R> future = completionService.take();\r\n            final R response = future.get(3000, TimeUnit.MILLISECONDS);\r\n            responseList.add(response);\r\n        } catch (Throwable e) {\r\n            LOG.error(\"Failed to process request \" + e.getMessage());\r\n        }\r\n    }\r\n    return responseList;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "registerApplicationMaster",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RegisterApplicationMasterResponse registerApplicationMaster(final int testAppId) throws Exception, YarnException, IOException\n{\r\n    final ApplicationUserInfo ugi = getApplicationUserInfo(testAppId);\r\n    return ugi.getUser().doAs(new PrivilegedExceptionAction<RegisterApplicationMasterResponse>() {\r\n\r\n        @Override\r\n        public RegisterApplicationMasterResponse run() throws Exception {\r\n            getAMRMProxyService().initApp(ugi.getAppAttemptId(), ugi.getUser().getUserName());\r\n            final RegisterApplicationMasterRequest req = Records.newRecord(RegisterApplicationMasterRequest.class);\r\n            req.setHost(Integer.toString(testAppId));\r\n            req.setRpcPort(testAppId);\r\n            req.setTrackingUrl(\"\");\r\n            RegisterApplicationMasterResponse response = getAMRMProxyService().registerApplicationMaster(req);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "registerApplicationMastersInParallel",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "List<RegisterApplicationMasterResponseInfo<T>> registerApplicationMastersInParallel(final ArrayList<T> testContexts)\n{\r\n    List<RegisterApplicationMasterResponseInfo<T>> responses = runInParallel(testContexts, new Function<T, RegisterApplicationMasterResponseInfo<T>>() {\r\n\r\n        @Override\r\n        public RegisterApplicationMasterResponseInfo<T> invoke(T testContext) {\r\n            RegisterApplicationMasterResponseInfo<T> response = null;\r\n            try {\r\n                int index = testContexts.indexOf(testContext);\r\n                response = new RegisterApplicationMasterResponseInfo<T>(registerApplicationMaster(index), testContext);\r\n                Assert.assertNotNull(response.getResponse());\r\n                Assert.assertEquals(Integer.toString(index), response.getResponse().getQueue());\r\n                LOG.info(\"Sucessfully registered application master with test context: \" + testContext);\r\n            } catch (Throwable ex) {\r\n                response = null;\r\n                LOG.error(\"Failed to register application master with test context: \" + testContext);\r\n            }\r\n            return response;\r\n        }\r\n    });\r\n    Assert.assertEquals(\"Number of responses received does not match with request\", testContexts.size(), responses.size());\r\n    Set<T> contextResponses = new TreeSet<T>();\r\n    for (RegisterApplicationMasterResponseInfo<T> item : responses) {\r\n        contextResponses.add(item.getTestContext());\r\n    }\r\n    for (T ep : testContexts) {\r\n        Assert.assertTrue(contextResponses.contains(ep));\r\n    }\r\n    return responses;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "finishApplicationMaster",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "FinishApplicationMasterResponse finishApplicationMaster(final int appId, final FinalApplicationStatus status) throws Exception, YarnException, IOException\n{\r\n    final ApplicationUserInfo ugi = getApplicationUserInfo(appId);\r\n    return ugi.getUser().doAs(new PrivilegedExceptionAction<FinishApplicationMasterResponse>() {\r\n\r\n        @Override\r\n        public FinishApplicationMasterResponse run() throws Exception {\r\n            final FinishApplicationMasterRequest req = Records.newRecord(FinishApplicationMasterRequest.class);\r\n            req.setDiagnostics(\"\");\r\n            req.setTrackingUrl(\"\");\r\n            req.setFinalApplicationStatus(status);\r\n            FinishApplicationMasterResponse response = getAMRMProxyService().finishApplicationMaster(req);\r\n            getAMRMProxyService().stopApp(ugi.getAppAttemptId().getApplicationId());\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "finishApplicationMastersInParallel",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "List<FinishApplicationMasterResponseInfo<T>> finishApplicationMastersInParallel(final ArrayList<T> testContexts)\n{\r\n    List<FinishApplicationMasterResponseInfo<T>> responses = runInParallel(testContexts, new Function<T, FinishApplicationMasterResponseInfo<T>>() {\r\n\r\n        @Override\r\n        public FinishApplicationMasterResponseInfo<T> invoke(T testContext) {\r\n            FinishApplicationMasterResponseInfo<T> response = null;\r\n            try {\r\n                response = new FinishApplicationMasterResponseInfo<T>(finishApplicationMaster(testContexts.indexOf(testContext), FinalApplicationStatus.SUCCEEDED), testContext);\r\n                Assert.assertNotNull(response.getResponse());\r\n                LOG.info(\"Sucessfully finished application master with test contexts: \" + testContext);\r\n            } catch (Throwable ex) {\r\n                response = null;\r\n                LOG.error(\"Failed to finish application master with test context: \" + testContext);\r\n            }\r\n            return response;\r\n        }\r\n    });\r\n    Assert.assertEquals(\"Number of responses received does not match with request\", testContexts.size(), responses.size());\r\n    Set<T> contextResponses = new TreeSet<T>();\r\n    for (FinishApplicationMasterResponseInfo<T> item : responses) {\r\n        Assert.assertNotNull(item);\r\n        Assert.assertNotNull(item.getResponse());\r\n        contextResponses.add(item.getTestContext());\r\n    }\r\n    for (T ep : testContexts) {\r\n        Assert.assertTrue(contextResponses.contains(ep));\r\n    }\r\n    return responses;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "allocate",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "AllocateResponse allocate(final int testAppId) throws Exception, YarnException, IOException\n{\r\n    final AllocateRequest req = Records.newRecord(AllocateRequest.class);\r\n    req.setResponseId(testAppId);\r\n    return allocate(testAppId, req);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "allocate",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "AllocateResponse allocate(final int testAppId, final AllocateRequest request) throws Exception, YarnException, IOException\n{\r\n    final ApplicationUserInfo ugi = getApplicationUserInfo(testAppId);\r\n    return ugi.getUser().doAs(new PrivilegedExceptionAction<AllocateResponse>() {\r\n\r\n        @Override\r\n        public AllocateResponse run() throws Exception {\r\n            AllocateResponse response = getAMRMProxyService().allocate(request);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getApplicationUserInfo",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ApplicationUserInfo getApplicationUserInfo(final int testAppId)\n{\r\n    final ApplicationAttemptId attemptId = getApplicationAttemptId(testAppId);\r\n    UserGroupInformation ugi = UserGroupInformation.createRemoteUser(attemptId.toString());\r\n    AMRMTokenIdentifier token = new AMRMTokenIdentifier(attemptId, 1);\r\n    ugi.addTokenIdentifier(token);\r\n    return new ApplicationUserInfo(ugi, attemptId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "createResourceRequests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ResourceRequest> createResourceRequests(String[] hosts, int memory, int vCores, int priority, int containers) throws Exception\n{\r\n    return createResourceRequests(hosts, memory, vCores, priority, containers, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "createResourceRequests",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "List<ResourceRequest> createResourceRequests(String[] hosts, int memory, int vCores, int priority, int containers, String labelExpression) throws Exception\n{\r\n    List<ResourceRequest> reqs = new ArrayList<ResourceRequest>();\r\n    for (String host : hosts) {\r\n        ResourceRequest hostReq = createResourceRequest(host, memory, vCores, priority, containers, labelExpression);\r\n        reqs.add(hostReq);\r\n        ResourceRequest rackReq = createResourceRequest(\"/default-rack\", memory, vCores, priority, containers, labelExpression);\r\n        reqs.add(rackReq);\r\n    }\r\n    ResourceRequest offRackReq = createResourceRequest(ResourceRequest.ANY, memory, vCores, priority, containers, labelExpression);\r\n    reqs.add(offRackReq);\r\n    return reqs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "createResourceRequest",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceRequest createResourceRequest(String resource, int memory, int vCores, int priority, int containers) throws Exception\n{\r\n    return createResourceRequest(resource, memory, vCores, priority, containers, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "createResourceRequest",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "ResourceRequest createResourceRequest(String resource, int memory, int vCores, int priority, int containers, String labelExpression) throws Exception\n{\r\n    ResourceRequest req = Records.newRecord(ResourceRequest.class);\r\n    req.setResourceName(resource);\r\n    req.setNumContainers(containers);\r\n    Priority pri = Records.newRecord(Priority.class);\r\n    pri.setPriority(priority);\r\n    req.setPriority(pri);\r\n    Resource capability = Records.newRecord(Resource.class);\r\n    capability.setMemorySize(memory);\r\n    capability.setVirtualCores(vCores);\r\n    req.setCapability(capability);\r\n    req.setExecutionTypeRequest(ExecutionTypeRequest.newInstance());\r\n    if (labelExpression != null) {\r\n        req.setNodeLabelExpression(labelExpression);\r\n    }\r\n    return req;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getApplicationId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationId getApplicationId(int testAppId)\n{\r\n    return ApplicationId.newInstance(123456, testAppId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getApplicationAttemptId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationAttemptId getApplicationAttemptId(int testAppId)\n{\r\n    return ApplicationAttemptId.newInstance(getApplicationId(testAppId), testAppId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "getApplicationAttemptId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationAttemptId getApplicationAttemptId(int testAppId, ApplicationId appId)\n{\r\n    return ApplicationAttemptId.newInstance(appId, testAppId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "getRegisterRequestInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DeviceRegisterRequest getRegisterRequestInfo()\n{\r\n    return DeviceRegisterRequest.Builder.newInstance().setResourceName(\"cmpA.com/hdwA\").build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "getDevices",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<Device> getDevices()\n{\r\n    TreeSet<Device> r = new TreeSet<>();\r\n    r.add(Device.Builder.newInstance().setId(0).setDevPath(\"/dev/hdwA0\").setMajorNumber(243).setMinorNumber(0).setBusID(\"0000:65:00.0\").setHealthy(true).build());\r\n    return r;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "onDevicesAllocated",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "DeviceRuntimeSpec onDevicesAllocated(Set<Device> allocatedDevices, YarnRuntimeType yarnRuntime) throws Exception\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "onDevicesReleased",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void onDevicesReleased(Set<Device> allocatedDevices)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\scheduler",
  "methodName" : "testDistributedScheduler",
  "errType" : null,
  "containingMethodsNum" : 46,
  "sourceCodeText" : "void testDistributedScheduler() throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    DistributedScheduler distributedScheduler = new DistributedScheduler();\r\n    RequestInterceptor finalReqIntcptr = setup(conf, distributedScheduler);\r\n    registerAM(distributedScheduler, finalReqIntcptr, Arrays.asList(RemoteNode.newInstance(NodeId.newInstance(\"a\", 1), \"http://a:1\"), RemoteNode.newInstance(NodeId.newInstance(\"b\", 2), \"http://b:2\"), RemoteNode.newInstance(NodeId.newInstance(\"c\", 3), \"http://c:3\"), RemoteNode.newInstance(NodeId.newInstance(\"d\", 4), \"http://d:4\")));\r\n    final AtomicBoolean flipFlag = new AtomicBoolean(true);\r\n    Mockito.when(finalReqIntcptr.allocateForDistributedScheduling(Mockito.any(DistributedSchedulingAllocateRequest.class))).thenAnswer(new Answer<DistributedSchedulingAllocateResponse>() {\r\n\r\n        @Override\r\n        public DistributedSchedulingAllocateResponse answer(InvocationOnMock invocationOnMock) throws Throwable {\r\n            flipFlag.set(!flipFlag.get());\r\n            if (flipFlag.get()) {\r\n                return createAllocateResponse(Arrays.asList(RemoteNode.newInstance(NodeId.newInstance(\"c\", 3), \"http://c:3\"), RemoteNode.newInstance(NodeId.newInstance(\"d\", 4), \"http://d:4\"), RemoteNode.newInstance(NodeId.newInstance(\"e\", 5), \"http://e:5\"), RemoteNode.newInstance(NodeId.newInstance(\"f\", 6), \"http://f:6\")));\r\n            } else {\r\n                return createAllocateResponse(Arrays.asList(RemoteNode.newInstance(NodeId.newInstance(\"f\", 6), \"http://f:6\"), RemoteNode.newInstance(NodeId.newInstance(\"e\", 5), \"http://e:5\"), RemoteNode.newInstance(NodeId.newInstance(\"d\", 4), \"http://d:4\"), RemoteNode.newInstance(NodeId.newInstance(\"c\", 3), \"http://c:3\")));\r\n            }\r\n        }\r\n    });\r\n    AllocateRequest allocateRequest = Records.newRecord(AllocateRequest.class);\r\n    ResourceRequest guaranteedReq = createResourceRequest(ExecutionType.GUARANTEED, 5, \"*\");\r\n    ResourceRequest opportunisticReq = createResourceRequest(ExecutionType.OPPORTUNISTIC, 4, \"*\");\r\n    allocateRequest.setAskList(Arrays.asList(guaranteedReq, opportunisticReq));\r\n    AllocateResponse allocateResponse = distributedScheduler.allocate(allocateRequest);\r\n    Assert.assertEquals(4, allocateResponse.getAllocatedContainers().size());\r\n    Map<NodeId, List<ContainerId>> allocs = mapAllocs(allocateResponse, 4);\r\n    Assert.assertEquals(1, allocs.get(NodeId.newInstance(\"a\", 1)).size());\r\n    Assert.assertEquals(1, allocs.get(NodeId.newInstance(\"b\", 2)).size());\r\n    Assert.assertEquals(1, allocs.get(NodeId.newInstance(\"c\", 3)).size());\r\n    Assert.assertEquals(1, allocs.get(NodeId.newInstance(\"d\", 4)).size());\r\n    Assert.assertNull(allocs.get(NodeId.newInstance(\"e\", 5)));\r\n    Assert.assertNull(allocs.get(NodeId.newInstance(\"f\", 6)));\r\n    allocateRequest = Records.newRecord(AllocateRequest.class);\r\n    opportunisticReq = createResourceRequest(ExecutionType.OPPORTUNISTIC, 4, \"*\");\r\n    allocateRequest.setAskList(Arrays.asList(guaranteedReq, opportunisticReq));\r\n    allocateResponse = distributedScheduler.allocate(allocateRequest);\r\n    Assert.assertEquals(4, allocateResponse.getAllocatedContainers().size());\r\n    allocs = mapAllocs(allocateResponse, 4);\r\n    Assert.assertEquals(1, allocs.get(NodeId.newInstance(\"c\", 3)).size());\r\n    Assert.assertEquals(1, allocs.get(NodeId.newInstance(\"d\", 4)).size());\r\n    Assert.assertEquals(1, allocs.get(NodeId.newInstance(\"e\", 5)).size());\r\n    Assert.assertEquals(1, allocs.get(NodeId.newInstance(\"f\", 6)).size());\r\n    Assert.assertNull(allocs.get(NodeId.newInstance(\"a\", 1)));\r\n    Assert.assertNull(allocs.get(NodeId.newInstance(\"b\", 2)));\r\n    allocateRequest = Records.newRecord(AllocateRequest.class);\r\n    opportunisticReq = createResourceRequest(ExecutionType.OPPORTUNISTIC, 1, \"*\");\r\n    allocateRequest.setAskList(Arrays.asList(guaranteedReq, opportunisticReq));\r\n    allocateResponse = distributedScheduler.allocate(allocateRequest);\r\n    allocs = mapAllocs(allocateResponse, 1);\r\n    Assert.assertEquals(1, allocs.get(NodeId.newInstance(\"c\", 3)).size());\r\n    allocateRequest = Records.newRecord(AllocateRequest.class);\r\n    opportunisticReq = createResourceRequest(ExecutionType.OPPORTUNISTIC, 1, \"*\");\r\n    allocateRequest.setAskList(Arrays.asList(guaranteedReq, opportunisticReq));\r\n    allocateResponse = distributedScheduler.allocate(allocateRequest);\r\n    allocs = mapAllocs(allocateResponse, 1);\r\n    Assert.assertEquals(1, allocs.get(NodeId.newInstance(\"f\", 6)).size());\r\n    allocateRequest = Records.newRecord(AllocateRequest.class);\r\n    opportunisticReq = createResourceRequest(ExecutionType.OPPORTUNISTIC, 1, \"*\");\r\n    allocateRequest.setAskList(Arrays.asList(guaranteedReq, opportunisticReq));\r\n    allocateResponse = distributedScheduler.allocate(allocateRequest);\r\n    allocs = mapAllocs(allocateResponse, 1);\r\n    Assert.assertEquals(1, allocs.get(NodeId.newInstance(\"c\", 3)).size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\scheduler",
  "methodName" : "registerAM",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void registerAM(DistributedScheduler distributedScheduler, RequestInterceptor finalReqIntcptr, List<RemoteNode> nodeList) throws Exception\n{\r\n    RegisterDistributedSchedulingAMResponse distSchedRegisterResponse = Records.newRecord(RegisterDistributedSchedulingAMResponse.class);\r\n    distSchedRegisterResponse.setRegisterResponse(Records.newRecord(RegisterApplicationMasterResponse.class));\r\n    distSchedRegisterResponse.setContainerTokenExpiryInterval(12345);\r\n    distSchedRegisterResponse.setContainerIdStart(0);\r\n    distSchedRegisterResponse.setMaxContainerResource(Resource.newInstance(1024, 4));\r\n    distSchedRegisterResponse.setMinContainerResource(Resource.newInstance(512, 2));\r\n    distSchedRegisterResponse.setNodesForScheduling(nodeList);\r\n    Mockito.when(finalReqIntcptr.registerApplicationMasterForDistributedScheduling(Mockito.any(RegisterApplicationMasterRequest.class))).thenReturn(distSchedRegisterResponse);\r\n    distributedScheduler.registerApplicationMaster(Records.newRecord(RegisterApplicationMasterRequest.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\scheduler",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "RequestInterceptor setup(Configuration conf, DistributedScheduler distributedScheduler)\n{\r\n    NodeStatusUpdater nodeStatusUpdater = Mockito.mock(NodeStatusUpdater.class);\r\n    Mockito.when(nodeStatusUpdater.getRMIdentifier()).thenReturn(12345l);\r\n    NMContainerTokenSecretManager nmContainerTokenSecretManager = new NMContainerTokenSecretManager(conf);\r\n    MasterKey mKey = new MasterKey() {\r\n\r\n        @Override\r\n        public int getKeyId() {\r\n            return 1;\r\n        }\r\n\r\n        @Override\r\n        public void setKeyId(int keyId) {\r\n        }\r\n\r\n        @Override\r\n        public ByteBuffer getBytes() {\r\n            return ByteBuffer.allocate(8);\r\n        }\r\n\r\n        @Override\r\n        public void setBytes(ByteBuffer bytes) {\r\n        }\r\n    };\r\n    nmContainerTokenSecretManager.setMasterKey(mKey);\r\n    OpportunisticContainerAllocator containerAllocator = new DistributedOpportunisticContainerAllocator(nmContainerTokenSecretManager);\r\n    NMTokenSecretManagerInNM nmTokenSecretManagerInNM = new NMTokenSecretManagerInNM();\r\n    nmTokenSecretManagerInNM.setMasterKey(mKey);\r\n    distributedScheduler.initLocal(1234, ApplicationAttemptId.newInstance(ApplicationId.newInstance(1, 1), 1), containerAllocator, nmTokenSecretManagerInNM, \"test\");\r\n    RequestInterceptor finalReqIntcptr = Mockito.mock(RequestInterceptor.class);\r\n    distributedScheduler.setNextInterceptor(finalReqIntcptr);\r\n    return finalReqIntcptr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\scheduler",
  "methodName" : "createResourceRequest",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "ResourceRequest createResourceRequest(ExecutionType execType, int numContainers, String resourceName)\n{\r\n    ResourceRequest opportunisticReq = Records.newRecord(ResourceRequest.class);\r\n    opportunisticReq.setExecutionTypeRequest(ExecutionTypeRequest.newInstance(execType, true));\r\n    opportunisticReq.setNumContainers(numContainers);\r\n    opportunisticReq.setCapability(Resource.newInstance(1024, 4));\r\n    opportunisticReq.setPriority(Priority.newInstance(100));\r\n    opportunisticReq.setRelaxLocality(true);\r\n    opportunisticReq.setResourceName(resourceName);\r\n    return opportunisticReq;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\scheduler",
  "methodName" : "createAllocateResponse",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "DistributedSchedulingAllocateResponse createAllocateResponse(List<RemoteNode> nodes)\n{\r\n    DistributedSchedulingAllocateResponse distSchedAllocateResponse = Records.newRecord(DistributedSchedulingAllocateResponse.class);\r\n    distSchedAllocateResponse.setAllocateResponse(Records.newRecord(AllocateResponse.class));\r\n    distSchedAllocateResponse.setNodesForScheduling(nodes);\r\n    return distSchedAllocateResponse;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\scheduler",
  "methodName" : "mapAllocs",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "Map<NodeId, List<ContainerId>> mapAllocs(AllocateResponse allocateResponse, int expectedSize) throws Exception\n{\r\n    Assert.assertEquals(expectedSize, allocateResponse.getAllocatedContainers().size());\r\n    Map<NodeId, List<ContainerId>> allocs = new HashMap<>();\r\n    for (Container c : allocateResponse.getAllocatedContainers()) {\r\n        ContainerTokenIdentifier cTokId = BuilderUtils.newContainerTokenIdentifier(c.getContainerToken());\r\n        Assert.assertEquals(c.getNodeId().getHost() + \":\" + c.getNodeId().getPort(), cTokId.getNmHostAddress());\r\n        List<ContainerId> cIds = allocs.get(c.getNodeId());\r\n        if (cIds == null) {\r\n            cIds = new ArrayList<>();\r\n            allocs.put(c.getNodeId(), cIds);\r\n        }\r\n        cIds.add(c.getId());\r\n    }\r\n    return allocs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getLocalizerId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getLocalizerId()\n{\r\n    return locId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getResources",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<LocalResourceStatus> getResources()\n{\r\n    return stats;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "setLocalizerId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setLocalizerId(String id)\n{\r\n    this.locId = id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "addAllResources",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addAllResources(List<LocalResourceStatus> rsrcs)\n{\r\n    stats.addAll(rsrcs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getResourceStatus",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LocalResourceStatus getResourceStatus(int index)\n{\r\n    return stats.get(index);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "addResourceStatus",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addResourceStatus(LocalResourceStatus resource)\n{\r\n    stats.add(resource);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "removeResource",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void removeResource(int index)\n{\r\n    stats.remove(index);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "clearResources",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void clearResources()\n{\r\n    stats.clear();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean equals(Object o)\n{\r\n    if (!(o instanceof MockLocalizerStatus)) {\r\n        return false;\r\n    }\r\n    MockLocalizerStatus other = (MockLocalizerStatus) o;\r\n    return getLocalizerId().equals(other.getLocalizerId()) && getResources().containsAll(other.getResources()) && other.getResources().containsAll(getResources());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int hashCode()\n{\r\n    return 4344;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    conf = new YarnConfiguration();\r\n    ResourceUtils.resetResourceTypes();\r\n    String resourceTypesFile = \"resource-types-pluggable-devices.xml\";\r\n    this.tempResourceTypesFile = TestResourceUtils.setupResourceTypes(this.conf, resourceTypesFile);\r\n    NodeManager.NMContext context = mock(NodeManager.NMContext.class);\r\n    NMStateStoreService storeService = mock(NMStateStoreService.class);\r\n    when(context.getNMStateStore()).thenReturn(storeService);\r\n    doNothing().when(storeService).storeAssignedResources(isA(Container.class), isA(String.class), isA(ArrayList.class));\r\n    dmm = new DeviceMappingManager(context);\r\n    int deviceCount = 100;\r\n    TreeSet<Device> r = new TreeSet<>();\r\n    for (int i = 0; i < deviceCount; i++) {\r\n        r.add(Device.Builder.newInstance().setId(i).setDevPath(\"/dev/hdwA\" + i).setMajorNumber(243).setMinorNumber(i).setBusID(\"0000:65:00.\" + i).setHealthy(true).build());\r\n    }\r\n    TreeSet<Device> r1 = new TreeSet<>();\r\n    for (int i = 0; i < deviceCount; i++) {\r\n        r1.add(Device.Builder.newInstance().setId(i).setDevPath(\"/dev/cmp\" + i).setMajorNumber(100).setMinorNumber(i).setBusID(\"0000:11:00.\" + i).setHealthy(true).build());\r\n    }\r\n    dmm.addDeviceSet(\"cmpA.com/hdwA\", r);\r\n    dmm.addDeviceSet(\"cmp.com/cmp\", r1);\r\n    containerLauncher = Executors.newFixedThreadPool(10);\r\n    mockCGroupsHandler = mock(CGroupsHandler.class);\r\n    mockPrivilegedExecutor = mock(PrivilegedOperationExecutor.class);\r\n    mockCtx = mock(NodeManager.NMContext.class);\r\n    when(mockCtx.getConf()).thenReturn(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDown() throws IOException\n{\r\n    File dest = new File(this.tempResourceTypesFile);\r\n    if (dest.exists()) {\r\n        boolean flag = dest.delete();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "testAllocation",
  "errType" : null,
  "containingMethodsNum" : 30,
  "sourceCodeText" : "void testAllocation() throws InterruptedException, ResourceHandlerException\n{\r\n    int totalContainerCount = 10;\r\n    String resourceName1 = \"cmpA.com/hdwA\";\r\n    String resourceName2 = \"cmp.com/cmp\";\r\n    DeviceMappingManager dmmSpy = spy(dmm);\r\n    Map<String, Map<Container, Integer>> containerSet = new HashMap<>();\r\n    containerSet.put(resourceName1, new HashMap<>());\r\n    containerSet.put(resourceName2, new HashMap<>());\r\n    Long startTime = System.currentTimeMillis();\r\n    for (int i = 0; i < totalContainerCount; i++) {\r\n        int num = new Random().nextInt(5) + 1;\r\n        String resourceName;\r\n        int seed = new Random().nextInt(5);\r\n        if (seed % 2 == 0) {\r\n            resourceName = resourceName1;\r\n        } else {\r\n            resourceName = resourceName2;\r\n        }\r\n        Container c = mockContainerWithDeviceRequest(i, resourceName, num, false);\r\n        containerSet.get(resourceName).put(c, num);\r\n        DevicePlugin myPlugin = new MyTestPlugin();\r\n        DevicePluginAdapter dpa = new DevicePluginAdapter(resourceName, myPlugin, dmm);\r\n        DeviceResourceHandlerImpl dri = new DeviceResourceHandlerImpl(resourceName, dpa, dmmSpy, mockCGroupsHandler, mockPrivilegedExecutor, mockCtx);\r\n        Future<Integer> f = containerLauncher.submit(new MyContainerLaunch(dri, c, i, false));\r\n    }\r\n    containerLauncher.shutdown();\r\n    while (!containerLauncher.awaitTermination(10, TimeUnit.SECONDS)) {\r\n        LOG.info(\"Wait for the threads to finish\");\r\n    }\r\n    Long endTime = System.currentTimeMillis();\r\n    LOG.info(\"Each container preStart spends roughly: {} ms\", (endTime - startTime) / totalContainerCount);\r\n    verify(dmmSpy, times(totalContainerCount)).assignDevices(anyString(), any(Container.class));\r\n    int totalAllocatedCount = 0;\r\n    Map<Device, ContainerId> used1 = dmm.getAllUsedDevices().get(resourceName1);\r\n    Map<Device, ContainerId> used2 = dmm.getAllUsedDevices().get(resourceName2);\r\n    for (Map.Entry<Container, Integer> entry : containerSet.get(resourceName1).entrySet()) {\r\n        totalAllocatedCount += entry.getValue();\r\n    }\r\n    for (Map.Entry<Container, Integer> entry : containerSet.get(resourceName2).entrySet()) {\r\n        totalAllocatedCount += entry.getValue();\r\n    }\r\n    Assert.assertEquals(totalAllocatedCount, used1.size() + used2.size());\r\n    for (Map.Entry<Container, Integer> entry : containerSet.get(resourceName1).entrySet()) {\r\n        int containerWanted = entry.getValue();\r\n        int actualAllocated = dmm.getAllocatedDevices(resourceName1, entry.getKey().getContainerId()).size();\r\n        Assert.assertEquals(containerWanted, actualAllocated);\r\n    }\r\n    for (Map.Entry<Container, Integer> entry : containerSet.get(resourceName2).entrySet()) {\r\n        int containerWanted = entry.getValue();\r\n        int actualAllocated = dmm.getAllocatedDevices(resourceName2, entry.getKey().getContainerId()).size();\r\n        Assert.assertEquals(containerWanted, actualAllocated);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "testAllocationAndCleanup",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testAllocationAndCleanup() throws InterruptedException, ResourceHandlerException, IOException\n{\r\n    int totalContainerCount = 10;\r\n    String resourceName1 = \"cmpA.com/hdwA\";\r\n    String resourceName2 = \"cmp.com/cmp\";\r\n    DeviceMappingManager dmmSpy = spy(dmm);\r\n    Map<String, Map<Container, Integer>> containerSet = new HashMap<>();\r\n    containerSet.put(resourceName1, new HashMap<>());\r\n    containerSet.put(resourceName2, new HashMap<>());\r\n    for (int i = 0; i < totalContainerCount; i++) {\r\n        int num = new Random().nextInt(5) + 1;\r\n        String resourceName;\r\n        int seed = new Random().nextInt(5);\r\n        if (seed % 2 == 0) {\r\n            resourceName = resourceName1;\r\n        } else {\r\n            resourceName = resourceName2;\r\n        }\r\n        Container c = mockContainerWithDeviceRequest(i, resourceName, num, false);\r\n        containerSet.get(resourceName).put(c, num);\r\n        DevicePlugin myPlugin = new MyTestPlugin();\r\n        DevicePluginAdapter dpa = new DevicePluginAdapter(resourceName, myPlugin, dmm);\r\n        DeviceResourceHandlerImpl dri = new DeviceResourceHandlerImpl(resourceName, dpa, dmmSpy, mockCGroupsHandler, mockPrivilegedExecutor, mockCtx);\r\n        Future<Integer> f = containerLauncher.submit(new MyContainerLaunch(dri, c, i, true));\r\n    }\r\n    containerLauncher.shutdown();\r\n    while (!containerLauncher.awaitTermination(10, TimeUnit.SECONDS)) {\r\n        LOG.info(\"Wait for the threads to finish\");\r\n    }\r\n    verify(dmmSpy, times(totalContainerCount)).assignDevices(anyString(), any(Container.class));\r\n    verify(dmmSpy, times(totalContainerCount)).cleanupAssignedDevices(anyString(), any(ContainerId.class));\r\n    Assert.assertEquals(0, dmm.getAllUsedDevices().get(resourceName1).size());\r\n    Assert.assertEquals(0, dmm.getAllUsedDevices().get(resourceName2).size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "mockContainerWithDeviceRequest",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "Container mockContainerWithDeviceRequest(int id, String resourceName, int numDeviceRequest, boolean dockerContainerEnabled)\n{\r\n    Container c = mock(Container.class);\r\n    when(c.getContainerId()).thenReturn(getContainerId(id));\r\n    Resource res = Resource.newInstance(1024, 1);\r\n    ResourceMappings resMapping = new ResourceMappings();\r\n    res.setResourceValue(resourceName, numDeviceRequest);\r\n    when(c.getResource()).thenReturn(res);\r\n    when(c.getResourceMappings()).thenReturn(resMapping);\r\n    ContainerLaunchContext clc = mock(ContainerLaunchContext.class);\r\n    Map<String, String> env = new HashMap<>();\r\n    if (dockerContainerEnabled) {\r\n        env.put(ContainerRuntimeConstants.ENV_CONTAINER_TYPE, ContainerRuntimeConstants.CONTAINER_RUNTIME_DOCKER);\r\n    }\r\n    when(clc.getEnvironment()).thenReturn(env);\r\n    when(c.getLaunchContext()).thenReturn(clc);\r\n    return c;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\resourceplugin\\deviceframework",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerId getContainerId(int id)\n{\r\n    return ContainerId.newContainerId(ApplicationAttemptId.newInstance(ApplicationId.newInstance(1234L, 1), 1), id);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    super.setUp();\r\n    GuiceServletConfig.setInjector(Guice.createInjector(new WebServletModule()));\r\n    testRootDir.mkdirs();\r\n    testLogDir.mkdir();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "cleanup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void cleanup()\n{\r\n    FileUtil.fullyDelete(testRootDir);\r\n    FileUtil.fullyDelete(testLogDir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeAppsNone",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testNodeAppsNone() throws JSONException, Exception\n{\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"node\").path(\"apps\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON_TYPE + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    JSONObject json = response.getEntity(JSONObject.class);\r\n    assertEquals(\"apps isn't empty\", new JSONObject().toString(), json.get(\"apps\").toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "addAppContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "HashMap<String, String> addAppContainers(Application app) throws IOException\n{\r\n    return addAppContainers(app, nmContext);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "addAppContainers",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "HashMap<String, String> addAppContainers(Application app, Context context) throws IOException\n{\r\n    Dispatcher dispatcher = new AsyncDispatcher();\r\n    ApplicationAttemptId appAttemptId = BuilderUtils.newApplicationAttemptId(app.getAppId(), 1);\r\n    Container container1 = new MockContainer(appAttemptId, dispatcher, conf, app.getUser(), app.getAppId(), 1);\r\n    Container container2 = new MockContainer(appAttemptId, dispatcher, conf, app.getUser(), app.getAppId(), 2);\r\n    context.getContainers().put(container1.getContainerId(), container1);\r\n    context.getContainers().put(container2.getContainerId(), container2);\r\n    app.getContainers().put(container1.getContainerId(), container1);\r\n    app.getContainers().put(container2.getContainerId(), container2);\r\n    HashMap<String, String> hash = new HashMap<String, String>();\r\n    hash.put(container1.getContainerId().toString(), container1.getContainerId().toString());\r\n    hash.put(container2.getContainerId().toString(), container2.getContainerId().toString());\r\n    return hash;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeApps",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testNodeApps() throws JSONException, Exception\n{\r\n    testNodeHelper(\"apps\", MediaType.APPLICATION_JSON);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeAppsSlash",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testNodeAppsSlash() throws JSONException, Exception\n{\r\n    testNodeHelper(\"apps/\", MediaType.APPLICATION_JSON);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeAppsDefault",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testNodeAppsDefault() throws JSONException, Exception\n{\r\n    testNodeHelper(\"apps/\", \"\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeHelper",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testNodeHelper(String path, String media) throws JSONException, Exception\n{\r\n    WebResource r = resource();\r\n    Application app = new MockApp(1);\r\n    nmContext.getApplications().put(app.getAppId(), app);\r\n    HashMap<String, String> hash = addAppContainers(app);\r\n    Application app2 = new MockApp(2);\r\n    nmContext.getApplications().put(app2.getAppId(), app2);\r\n    HashMap<String, String> hash2 = addAppContainers(app2);\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"node\").path(path).accept(media).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON_TYPE + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    JSONObject json = response.getEntity(JSONObject.class);\r\n    JSONObject info = json.getJSONObject(\"apps\");\r\n    assertEquals(\"incorrect number of elements\", 1, info.length());\r\n    JSONArray appInfo = info.getJSONArray(\"app\");\r\n    assertEquals(\"incorrect number of elements\", 2, appInfo.length());\r\n    String id = appInfo.getJSONObject(0).getString(\"id\");\r\n    if (id.matches(app.getAppId().toString())) {\r\n        verifyNodeAppInfo(appInfo.getJSONObject(0), app, hash);\r\n        verifyNodeAppInfo(appInfo.getJSONObject(1), app2, hash2);\r\n    } else {\r\n        verifyNodeAppInfo(appInfo.getJSONObject(0), app2, hash2);\r\n        verifyNodeAppInfo(appInfo.getJSONObject(1), app, hash);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeAppsUser",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testNodeAppsUser() throws JSONException, Exception\n{\r\n    WebResource r = resource();\r\n    Application app = new MockApp(1);\r\n    nmContext.getApplications().put(app.getAppId(), app);\r\n    HashMap<String, String> hash = addAppContainers(app);\r\n    Application app2 = new MockApp(\"foo\", 1234, 2);\r\n    nmContext.getApplications().put(app2.getAppId(), app2);\r\n    addAppContainers(app2);\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"node\").path(\"apps\").queryParam(\"user\", \"mockUser\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON_TYPE + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    JSONObject json = response.getEntity(JSONObject.class);\r\n    JSONObject info = json.getJSONObject(\"apps\");\r\n    assertEquals(\"incorrect number of elements\", 1, info.length());\r\n    JSONArray appInfo = info.getJSONArray(\"app\");\r\n    assertEquals(\"incorrect number of elements\", 1, appInfo.length());\r\n    verifyNodeAppInfo(appInfo.getJSONObject(0), app, hash);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeAppsUserNone",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testNodeAppsUserNone() throws JSONException, Exception\n{\r\n    WebResource r = resource();\r\n    Application app = new MockApp(1);\r\n    nmContext.getApplications().put(app.getAppId(), app);\r\n    addAppContainers(app);\r\n    Application app2 = new MockApp(\"foo\", 1234, 2);\r\n    nmContext.getApplications().put(app2.getAppId(), app2);\r\n    addAppContainers(app2);\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"node\").path(\"apps\").queryParam(\"user\", \"george\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON_TYPE + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    JSONObject json = response.getEntity(JSONObject.class);\r\n    assertEquals(\"apps is not empty\", new JSONObject().toString(), json.get(\"apps\").toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeAppsUserEmpty",
  "errType" : [ "UniformInterfaceException" ],
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testNodeAppsUserEmpty() throws JSONException, Exception\n{\r\n    WebResource r = resource();\r\n    Application app = new MockApp(1);\r\n    nmContext.getApplications().put(app.getAppId(), app);\r\n    addAppContainers(app);\r\n    Application app2 = new MockApp(\"foo\", 1234, 2);\r\n    nmContext.getApplications().put(app2.getAppId(), app2);\r\n    addAppContainers(app2);\r\n    try {\r\n        r.path(\"ws\").path(\"v1\").path(\"node\").path(\"apps\").queryParam(\"user\", \"\").accept(MediaType.APPLICATION_JSON).get(JSONObject.class);\r\n        fail(\"should have thrown exception on invalid user query\");\r\n    } catch (UniformInterfaceException ue) {\r\n        ClientResponse response = ue.getResponse();\r\n        assertResponseStatusCode(Status.BAD_REQUEST, response.getStatusInfo());\r\n        assertEquals(MediaType.APPLICATION_JSON_TYPE + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n        JSONObject msg = response.getEntity(JSONObject.class);\r\n        JSONObject exception = msg.getJSONObject(\"RemoteException\");\r\n        assertEquals(\"incorrect number of elements\", 3, exception.length());\r\n        String message = exception.getString(\"message\");\r\n        String type = exception.getString(\"exception\");\r\n        String classname = exception.getString(\"javaClassName\");\r\n        WebServicesTestUtils.checkStringMatch(\"exception message\", \"java.lang.Exception: Error: You must specify a non-empty string for the user\", message);\r\n        WebServicesTestUtils.checkStringMatch(\"exception type\", \"BadRequestException\", type);\r\n        WebServicesTestUtils.checkStringMatch(\"exception classname\", \"org.apache.hadoop.yarn.webapp.BadRequestException\", classname);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeAppsState",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testNodeAppsState() throws JSONException, Exception\n{\r\n    WebResource r = resource();\r\n    Application app = new MockApp(1);\r\n    nmContext.getApplications().put(app.getAppId(), app);\r\n    addAppContainers(app);\r\n    MockApp app2 = new MockApp(\"foo\", 1234, 2);\r\n    nmContext.getApplications().put(app2.getAppId(), app2);\r\n    HashMap<String, String> hash2 = addAppContainers(app2);\r\n    app2.setState(ApplicationState.RUNNING);\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"node\").path(\"apps\").queryParam(\"state\", ApplicationState.RUNNING.toString()).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON_TYPE + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    JSONObject json = response.getEntity(JSONObject.class);\r\n    JSONObject info = json.getJSONObject(\"apps\");\r\n    assertEquals(\"incorrect number of elements\", 1, info.length());\r\n    JSONArray appInfo = info.getJSONArray(\"app\");\r\n    assertEquals(\"incorrect number of elements\", 1, appInfo.length());\r\n    verifyNodeAppInfo(appInfo.getJSONObject(0), app2, hash2);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeAppsStateNone",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testNodeAppsStateNone() throws JSONException, Exception\n{\r\n    WebResource r = resource();\r\n    Application app = new MockApp(1);\r\n    nmContext.getApplications().put(app.getAppId(), app);\r\n    addAppContainers(app);\r\n    Application app2 = new MockApp(\"foo\", 1234, 2);\r\n    nmContext.getApplications().put(app2.getAppId(), app2);\r\n    addAppContainers(app2);\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"node\").path(\"apps\").queryParam(\"state\", ApplicationState.INITING.toString()).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON_TYPE + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    JSONObject json = response.getEntity(JSONObject.class);\r\n    assertEquals(\"apps is not empty\", new JSONObject().toString(), json.get(\"apps\").toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeAppsStateInvalid",
  "errType" : [ "UniformInterfaceException" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testNodeAppsStateInvalid() throws JSONException, Exception\n{\r\n    WebResource r = resource();\r\n    Application app = new MockApp(1);\r\n    nmContext.getApplications().put(app.getAppId(), app);\r\n    addAppContainers(app);\r\n    Application app2 = new MockApp(\"foo\", 1234, 2);\r\n    nmContext.getApplications().put(app2.getAppId(), app2);\r\n    addAppContainers(app2);\r\n    try {\r\n        r.path(\"ws\").path(\"v1\").path(\"node\").path(\"apps\").queryParam(\"state\", \"FOO_STATE\").accept(MediaType.APPLICATION_JSON).get(JSONObject.class);\r\n        fail(\"should have thrown exception on invalid user query\");\r\n    } catch (UniformInterfaceException ue) {\r\n        ClientResponse response = ue.getResponse();\r\n        assertResponseStatusCode(Status.BAD_REQUEST, response.getStatusInfo());\r\n        assertEquals(MediaType.APPLICATION_JSON_TYPE + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n        JSONObject msg = response.getEntity(JSONObject.class);\r\n        JSONObject exception = msg.getJSONObject(\"RemoteException\");\r\n        assertEquals(\"incorrect number of elements\", 3, exception.length());\r\n        String message = exception.getString(\"message\");\r\n        String type = exception.getString(\"exception\");\r\n        String classname = exception.getString(\"javaClassName\");\r\n        verifyStateInvalidException(message, type, classname);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeAppsStateInvalidDefault",
  "errType" : [ "UniformInterfaceException" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testNodeAppsStateInvalidDefault() throws JSONException, Exception\n{\r\n    WebResource r = resource();\r\n    Application app = new MockApp(1);\r\n    nmContext.getApplications().put(app.getAppId(), app);\r\n    addAppContainers(app);\r\n    Application app2 = new MockApp(\"foo\", 1234, 2);\r\n    nmContext.getApplications().put(app2.getAppId(), app2);\r\n    addAppContainers(app2);\r\n    try {\r\n        r.path(\"ws\").path(\"v1\").path(\"node\").path(\"apps\").queryParam(\"state\", \"FOO_STATE\").get(JSONObject.class);\r\n        fail(\"should have thrown exception on invalid user query\");\r\n    } catch (UniformInterfaceException ue) {\r\n        ClientResponse response = ue.getResponse();\r\n        assertResponseStatusCode(Status.BAD_REQUEST, response.getStatusInfo());\r\n        assertEquals(MediaType.APPLICATION_JSON_TYPE + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n        JSONObject msg = response.getEntity(JSONObject.class);\r\n        JSONObject exception = msg.getJSONObject(\"RemoteException\");\r\n        assertEquals(\"incorrect number of elements\", 3, exception.length());\r\n        String message = exception.getString(\"message\");\r\n        String type = exception.getString(\"exception\");\r\n        String classname = exception.getString(\"javaClassName\");\r\n        verifyStateInvalidException(message, type, classname);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeAppsStateInvalidXML",
  "errType" : [ "UniformInterfaceException" ],
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void testNodeAppsStateInvalidXML() throws JSONException, Exception\n{\r\n    WebResource r = resource();\r\n    Application app = new MockApp(1);\r\n    nmContext.getApplications().put(app.getAppId(), app);\r\n    addAppContainers(app);\r\n    Application app2 = new MockApp(\"foo\", 1234, 2);\r\n    nmContext.getApplications().put(app2.getAppId(), app2);\r\n    addAppContainers(app2);\r\n    try {\r\n        r.path(\"ws\").path(\"v1\").path(\"node\").path(\"apps\").queryParam(\"state\", \"FOO_STATE\").accept(MediaType.APPLICATION_XML).get(JSONObject.class);\r\n        fail(\"should have thrown exception on invalid user query\");\r\n    } catch (UniformInterfaceException ue) {\r\n        ClientResponse response = ue.getResponse();\r\n        assertResponseStatusCode(Status.BAD_REQUEST, response.getStatusInfo());\r\n        assertEquals(MediaType.APPLICATION_XML_TYPE + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n        String msg = response.getEntity(String.class);\r\n        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\r\n        DocumentBuilder db = dbf.newDocumentBuilder();\r\n        InputSource is = new InputSource();\r\n        is.setCharacterStream(new StringReader(msg));\r\n        Document dom = db.parse(is);\r\n        NodeList nodes = dom.getElementsByTagName(\"RemoteException\");\r\n        Element element = (Element) nodes.item(0);\r\n        String message = WebServicesTestUtils.getXmlString(element, \"message\");\r\n        String type = WebServicesTestUtils.getXmlString(element, \"exception\");\r\n        String classname = WebServicesTestUtils.getXmlString(element, \"javaClassName\");\r\n        verifyStateInvalidException(message, type, classname);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "verifyStateInvalidException",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void verifyStateInvalidException(String message, String type, String classname)\n{\r\n    WebServicesTestUtils.checkStringContains(\"exception message\", \"org.apache.hadoop.yarn.server.nodemanager.containermanager.application.ApplicationState.FOO_STATE\", message);\r\n    WebServicesTestUtils.checkStringMatch(\"exception type\", \"IllegalArgumentException\", type);\r\n    WebServicesTestUtils.checkStringMatch(\"exception classname\", \"java.lang.IllegalArgumentException\", classname);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeSingleApps",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testNodeSingleApps() throws JSONException, Exception\n{\r\n    testNodeSingleAppHelper(MediaType.APPLICATION_JSON);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeSingleAppsDefault",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testNodeSingleAppsDefault() throws JSONException, Exception\n{\r\n    testNodeSingleAppHelper(\"\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeSingleAppHelper",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testNodeSingleAppHelper(String media) throws JSONException, Exception\n{\r\n    WebResource r = resource();\r\n    Application app = new MockApp(1);\r\n    nmContext.getApplications().put(app.getAppId(), app);\r\n    HashMap<String, String> hash = addAppContainers(app);\r\n    Application app2 = new MockApp(2);\r\n    nmContext.getApplications().put(app2.getAppId(), app2);\r\n    addAppContainers(app2);\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"node\").path(\"apps\").path(app.getAppId().toString()).accept(media).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON_TYPE + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    JSONObject json = response.getEntity(JSONObject.class);\r\n    verifyNodeAppInfo(json.getJSONObject(\"app\"), app, hash);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeSingleAppsSlash",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testNodeSingleAppsSlash() throws JSONException, Exception\n{\r\n    WebResource r = resource();\r\n    Application app = new MockApp(1);\r\n    nmContext.getApplications().put(app.getAppId(), app);\r\n    HashMap<String, String> hash = addAppContainers(app);\r\n    Application app2 = new MockApp(2);\r\n    nmContext.getApplications().put(app2.getAppId(), app2);\r\n    addAppContainers(app2);\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"node\").path(\"apps\").path(app.getAppId().toString() + \"/\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON_TYPE + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    JSONObject json = response.getEntity(JSONObject.class);\r\n    verifyNodeAppInfo(json.getJSONObject(\"app\"), app, hash);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeSingleAppsInvalid",
  "errType" : [ "UniformInterfaceException" ],
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testNodeSingleAppsInvalid() throws JSONException, Exception\n{\r\n    WebResource r = resource();\r\n    Application app = new MockApp(1);\r\n    nmContext.getApplications().put(app.getAppId(), app);\r\n    addAppContainers(app);\r\n    Application app2 = new MockApp(2);\r\n    nmContext.getApplications().put(app2.getAppId(), app2);\r\n    addAppContainers(app2);\r\n    try {\r\n        r.path(\"ws\").path(\"v1\").path(\"node\").path(\"apps\").path(\"app_foo_0000\").accept(MediaType.APPLICATION_JSON).get(JSONObject.class);\r\n        fail(\"should have thrown exception on invalid user query\");\r\n    } catch (UniformInterfaceException ue) {\r\n        ClientResponse response = ue.getResponse();\r\n        assertResponseStatusCode(Status.BAD_REQUEST, response.getStatusInfo());\r\n        assertEquals(MediaType.APPLICATION_JSON_TYPE + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n        JSONObject msg = response.getEntity(JSONObject.class);\r\n        JSONObject exception = msg.getJSONObject(\"RemoteException\");\r\n        assertEquals(\"incorrect number of elements\", 3, exception.length());\r\n        String message = exception.getString(\"message\");\r\n        String type = exception.getString(\"exception\");\r\n        String classname = exception.getString(\"javaClassName\");\r\n        WebServicesTestUtils.checkStringMatch(\"exception message\", \"java.lang.IllegalArgumentException: Invalid ApplicationId prefix: \" + \"app_foo_0000. The valid ApplicationId should start with prefix\" + \" application\", message);\r\n        WebServicesTestUtils.checkStringMatch(\"exception type\", \"BadRequestException\", type);\r\n        WebServicesTestUtils.checkStringMatch(\"exception classname\", \"org.apache.hadoop.yarn.webapp.BadRequestException\", classname);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeSingleAppsMissing",
  "errType" : [ "UniformInterfaceException" ],
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testNodeSingleAppsMissing() throws JSONException, Exception\n{\r\n    WebResource r = resource();\r\n    Application app = new MockApp(1);\r\n    nmContext.getApplications().put(app.getAppId(), app);\r\n    addAppContainers(app);\r\n    Application app2 = new MockApp(2);\r\n    nmContext.getApplications().put(app2.getAppId(), app2);\r\n    addAppContainers(app2);\r\n    try {\r\n        r.path(\"ws\").path(\"v1\").path(\"node\").path(\"apps\").path(\"application_1234_0009\").accept(MediaType.APPLICATION_JSON).get(JSONObject.class);\r\n        fail(\"should have thrown exception on invalid user query\");\r\n    } catch (UniformInterfaceException ue) {\r\n        ClientResponse response = ue.getResponse();\r\n        assertResponseStatusCode(Status.NOT_FOUND, response.getStatusInfo());\r\n        assertEquals(MediaType.APPLICATION_JSON_TYPE + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n        JSONObject msg = response.getEntity(JSONObject.class);\r\n        JSONObject exception = msg.getJSONObject(\"RemoteException\");\r\n        assertEquals(\"incorrect number of elements\", 3, exception.length());\r\n        String message = exception.getString(\"message\");\r\n        String type = exception.getString(\"exception\");\r\n        String classname = exception.getString(\"javaClassName\");\r\n        WebServicesTestUtils.checkStringMatch(\"exception message\", \"java.lang.Exception: app with id application_1234_0009 not found\", message);\r\n        WebServicesTestUtils.checkStringMatch(\"exception type\", \"NotFoundException\", type);\r\n        WebServicesTestUtils.checkStringMatch(\"exception classname\", \"org.apache.hadoop.yarn.webapp.NotFoundException\", classname);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeAppsXML",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testNodeAppsXML() throws JSONException, Exception\n{\r\n    WebResource r = resource();\r\n    Application app = new MockApp(1);\r\n    nmContext.getApplications().put(app.getAppId(), app);\r\n    addAppContainers(app);\r\n    Application app2 = new MockApp(2);\r\n    nmContext.getApplications().put(app2.getAppId(), app2);\r\n    addAppContainers(app2);\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"node\").path(\"apps\").accept(MediaType.APPLICATION_XML).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_XML_TYPE + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    String xml = response.getEntity(String.class);\r\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\r\n    DocumentBuilder db = dbf.newDocumentBuilder();\r\n    InputSource is = new InputSource();\r\n    is.setCharacterStream(new StringReader(xml));\r\n    Document dom = db.parse(is);\r\n    NodeList nodes = dom.getElementsByTagName(\"app\");\r\n    assertEquals(\"incorrect number of elements\", 2, nodes.getLength());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeSingleAppsXML",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testNodeSingleAppsXML() throws JSONException, Exception\n{\r\n    WebResource r = resource();\r\n    Application app = new MockApp(1);\r\n    nmContext.getApplications().put(app.getAppId(), app);\r\n    HashMap<String, String> hash = addAppContainers(app);\r\n    Application app2 = new MockApp(2);\r\n    nmContext.getApplications().put(app2.getAppId(), app2);\r\n    addAppContainers(app2);\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"node\").path(\"apps\").path(app.getAppId().toString() + \"/\").accept(MediaType.APPLICATION_XML).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_XML_TYPE + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    String xml = response.getEntity(String.class);\r\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\r\n    DocumentBuilder db = dbf.newDocumentBuilder();\r\n    InputSource is = new InputSource();\r\n    is.setCharacterStream(new StringReader(xml));\r\n    Document dom = db.parse(is);\r\n    NodeList nodes = dom.getElementsByTagName(\"app\");\r\n    assertEquals(\"incorrect number of elements\", 1, nodes.getLength());\r\n    verifyNodeAppInfoXML(nodes, app, hash);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "verifyNodeAppInfoXML",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void verifyNodeAppInfoXML(NodeList nodes, Application app, HashMap<String, String> hash) throws JSONException, Exception\n{\r\n    for (int i = 0; i < nodes.getLength(); i++) {\r\n        Element element = (Element) nodes.item(i);\r\n        verifyNodeAppInfoGeneric(app, WebServicesTestUtils.getXmlString(element, \"id\"), WebServicesTestUtils.getXmlString(element, \"state\"), WebServicesTestUtils.getXmlString(element, \"user\"));\r\n        NodeList ids = element.getElementsByTagName(\"containerids\");\r\n        for (int j = 0; j < ids.getLength(); j++) {\r\n            Element line = (Element) ids.item(j);\r\n            Node first = line.getFirstChild();\r\n            String val = first.getNodeValue();\r\n            assertEquals(\"extra containerid: \" + val, val, hash.remove(val));\r\n        }\r\n        assertTrue(\"missing containerids\", hash.isEmpty());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "verifyNodeAppInfo",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void verifyNodeAppInfo(JSONObject info, Application app, HashMap<String, String> hash) throws JSONException, Exception\n{\r\n    assertEquals(\"incorrect number of elements\", 4, info.length());\r\n    verifyNodeAppInfoGeneric(app, info.getString(\"id\"), info.getString(\"state\"), info.getString(\"user\"));\r\n    JSONArray containerids = info.getJSONArray(\"containerids\");\r\n    for (int i = 0; i < containerids.length(); i++) {\r\n        String id = containerids.getString(i);\r\n        assertEquals(\"extra containerid: \" + id, id, hash.remove(id));\r\n    }\r\n    assertTrue(\"missing containerids\", hash.isEmpty());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "verifyNodeAppInfoGeneric",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void verifyNodeAppInfoGeneric(Application app, String id, String state, String user) throws JSONException, Exception\n{\r\n    WebServicesTestUtils.checkStringMatch(\"id\", app.getAppId().toString(), id);\r\n    WebServicesTestUtils.checkStringMatch(\"state\", app.getApplicationState().toString(), state);\r\n    WebServicesTestUtils.checkStringMatch(\"user\", app.getUser().toString(), user);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "testNodeAppsUserFiltering",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testNodeAppsUserFiltering() throws JSONException, Exception\n{\r\n    Configuration yarnConf = new Configuration();\r\n    yarnConf.setBoolean(YarnConfiguration.FILTER_ENTITY_LIST_BY_USER, true);\r\n    yarnConf.setBoolean(YarnConfiguration.YARN_ACL_ENABLE, true);\r\n    yarnConf.setStrings(YarnConfiguration.YARN_ADMIN_ACL, \"admin\");\r\n    ApplicationACLsManager aclManager = new ApplicationACLsManager(yarnConf);\r\n    NMContext context = new NodeManager.NMContext(null, null, dirsHandler, aclManager, null, false, yarnConf);\r\n    Application app = new MockApp(1);\r\n    context.getApplications().put(app.getAppId(), app);\r\n    addAppContainers(app, context);\r\n    Application app2 = new MockApp(\"foo\", 1234, 2);\r\n    context.getApplications().put(app2.getAppId(), app2);\r\n    addAppContainers(app2, context);\r\n    NMWebServices webSvc = new NMWebServices(context, null, nmWebApp, mock(HttpServletResponse.class));\r\n    HttpServletRequest mockHsr = mockHttpServletRequestByUserName(\"foo\");\r\n    AppsInfo appsInfo = webSvc.getNodeApps(mockHsr, null, null);\r\n    assertEquals(1, appsInfo.getApps().size());\r\n    HttpServletRequest mockHsrAdmin = mockHttpServletRequestByUserName(\"admin\");\r\n    AppsInfo appsInfo2 = webSvc.getNodeApps(mockHsrAdmin, null, null);\r\n    assertEquals(2, appsInfo2.getApps().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\webapp",
  "methodName" : "mockHttpServletRequestByUserName",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "HttpServletRequest mockHttpServletRequestByUserName(String username)\n{\r\n    HttpServletRequest mockHsr = mock(HttpServletRequest.class);\r\n    when(mockHsr.getRemoteUser()).thenReturn(username);\r\n    Principal principal = mock(Principal.class);\r\n    when(principal.getName()).thenReturn(username);\r\n    when(mockHsr.getUserPrincipal()).thenReturn(principal);\r\n    return mockHsr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setup() throws IOException\n{\r\n    FileUtil.fullyDelete(TMP_DIR);\r\n    conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.NM_RECOVERY_ENABLED, true);\r\n    conf.set(YarnConfiguration.NM_RECOVERY_DIR, TMP_DIR.toString());\r\n    restartStateStore();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "cleanup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void cleanup() throws IOException\n{\r\n    if (stateStore != null) {\r\n        stateStore.close();\r\n    }\r\n    FileUtil.fullyDelete(TMP_DIR);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadContainersState",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "List<RecoveredContainerState> loadContainersState(RecoveryIterator<RecoveredContainerState> it) throws IOException\n{\r\n    List<RecoveredContainerState> containers = new ArrayList<RecoveredContainerState>();\r\n    while (it.hasNext()) {\r\n        RecoveredContainerState rcs = it.next();\r\n        containers.add(rcs);\r\n    }\r\n    return containers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadApplicationProtos",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<ContainerManagerApplicationProto> loadApplicationProtos(RecoveryIterator<ContainerManagerApplicationProto> it) throws IOException\n{\r\n    List<ContainerManagerApplicationProto> applicationProtos = new ArrayList<ContainerManagerApplicationProto>();\r\n    while (it.hasNext()) {\r\n        applicationProtos.add(it.next());\r\n    }\r\n    return applicationProtos;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadDeletionTaskProtos",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<DeletionServiceDeleteTaskProto> loadDeletionTaskProtos(RecoveryIterator<DeletionServiceDeleteTaskProto> it) throws IOException\n{\r\n    List<DeletionServiceDeleteTaskProto> deleteTaskProtos = new ArrayList<DeletionServiceDeleteTaskProto>();\r\n    while (it.hasNext()) {\r\n        deleteTaskProtos.add(it.next());\r\n    }\r\n    return deleteTaskProtos;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadUserResources",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Map<String, RecoveredUserResources> loadUserResources(RecoveryIterator<Map.Entry<String, RecoveredUserResources>> it) throws IOException\n{\r\n    Map<String, RecoveredUserResources> userResources = new HashMap<String, RecoveredUserResources>();\r\n    while (it.hasNext()) {\r\n        Map.Entry<String, RecoveredUserResources> entry = it.next();\r\n        userResources.put(entry.getKey(), entry.getValue());\r\n    }\r\n    return userResources;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadNMTokens",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Map<ApplicationAttemptId, MasterKey> loadNMTokens(RecoveryIterator<Map.Entry<ApplicationAttemptId, MasterKey>> it) throws IOException\n{\r\n    Map<ApplicationAttemptId, MasterKey> nmTokens = new HashMap<ApplicationAttemptId, MasterKey>();\r\n    while (it.hasNext()) {\r\n        Map.Entry<ApplicationAttemptId, MasterKey> entry = it.next();\r\n        nmTokens.put(entry.getKey(), entry.getValue());\r\n    }\r\n    return nmTokens;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadContainerTokens",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Map<ContainerId, Long> loadContainerTokens(RecoveryIterator<Map.Entry<ContainerId, Long>> it) throws IOException\n{\r\n    Map<ContainerId, Long> containerTokens = new HashMap<ContainerId, Long>();\r\n    while (it.hasNext()) {\r\n        Map.Entry<ContainerId, Long> entry = it.next();\r\n        containerTokens.put(entry.getKey(), entry.getValue());\r\n    }\r\n    return containerTokens;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadCompletedResources",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<LocalizedResourceProto> loadCompletedResources(RecoveryIterator<LocalizedResourceProto> it) throws IOException\n{\r\n    List<LocalizedResourceProto> completedResources = new ArrayList<LocalizedResourceProto>();\r\n    while (it != null && it.hasNext()) {\r\n        completedResources.add(it.next());\r\n    }\r\n    return completedResources;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "loadStartedResources",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Map<LocalResourceProto, Path> loadStartedResources(RecoveryIterator<Map.Entry<LocalResourceProto, Path>> it) throws IOException\n{\r\n    Map<LocalResourceProto, Path> startedResources = new HashMap<LocalResourceProto, Path>();\r\n    while (it != null && it.hasNext()) {\r\n        Map.Entry<LocalResourceProto, Path> entry = it.next();\r\n        startedResources.put(entry.getKey(), entry.getValue());\r\n    }\r\n    return startedResources;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "restartStateStore",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void restartStateStore() throws IOException\n{\r\n    if (stateStore != null) {\r\n        stateStore.close();\r\n    }\r\n    stateStore = new NMLeveldbStateStoreService();\r\n    stateStore.init(conf);\r\n    stateStore.start();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "verifyEmptyState",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void verifyEmptyState() throws IOException\n{\r\n    RecoveredLocalizationState state = stateStore.loadLocalizationState();\r\n    assertNotNull(state);\r\n    LocalResourceTrackerState pubts = state.getPublicTrackerState();\r\n    assertNotNull(pubts);\r\n    assertTrue(loadCompletedResources(pubts.getCompletedResourcesIterator()).isEmpty());\r\n    assertTrue(loadStartedResources(pubts.getStartedResourcesIterator()).isEmpty());\r\n    assertTrue(loadUserResources(state.getIterator()).isEmpty());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "testIsNewlyCreated",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testIsNewlyCreated() throws IOException\n{\r\n    assertTrue(stateStore.isNewlyCreated());\r\n    restartStateStore();\r\n    assertFalse(stateStore.isNewlyCreated());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "testEmptyState",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testEmptyState() throws IOException\n{\r\n    assertTrue(stateStore.canRecover());\r\n    verifyEmptyState();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "testCheckVersion",
  "errType" : [ "ServiceStateException" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testCheckVersion() throws IOException\n{\r\n    Version defaultVersion = stateStore.getCurrentVersion();\r\n    Assert.assertEquals(defaultVersion, stateStore.loadVersion());\r\n    Version compatibleVersion = Version.newInstance(defaultVersion.getMajorVersion(), defaultVersion.getMinorVersion() + 2);\r\n    stateStore.storeVersion(compatibleVersion);\r\n    Assert.assertEquals(compatibleVersion, stateStore.loadVersion());\r\n    restartStateStore();\r\n    Assert.assertEquals(defaultVersion, stateStore.loadVersion());\r\n    Version incompatibleVersion = Version.newInstance(defaultVersion.getMajorVersion() + 1, defaultVersion.getMinorVersion());\r\n    stateStore.storeVersion(incompatibleVersion);\r\n    try {\r\n        restartStateStore();\r\n        Assert.fail(\"Incompatible version, should expect fail here.\");\r\n    } catch (ServiceStateException e) {\r\n        Assert.assertTrue(\"Exception message mismatch\", e.getMessage().contains(\"Incompatible version for NM state:\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "testApplicationStorage",
  "errType" : null,
  "containingMethodsNum" : 32,
  "sourceCodeText" : "void testApplicationStorage() throws IOException\n{\r\n    RecoveredApplicationsState state = stateStore.loadApplicationsState();\r\n    List<ContainerManagerApplicationProto> apps = loadApplicationProtos(state.getIterator());\r\n    assertTrue(apps.isEmpty());\r\n    final ApplicationId appId1 = ApplicationId.newInstance(1234, 1);\r\n    ContainerManagerApplicationProto.Builder builder = ContainerManagerApplicationProto.newBuilder();\r\n    builder.setId(((ApplicationIdPBImpl) appId1).getProto());\r\n    builder.setUser(\"user1\");\r\n    ContainerManagerApplicationProto appProto1 = builder.build();\r\n    stateStore.storeApplication(appId1, appProto1);\r\n    restartStateStore();\r\n    state = stateStore.loadApplicationsState();\r\n    apps = loadApplicationProtos(state.getIterator());\r\n    assertEquals(1, apps.size());\r\n    assertEquals(appProto1, apps.get(0));\r\n    final ApplicationId appId2 = ApplicationId.newInstance(1234, 2);\r\n    builder = ContainerManagerApplicationProto.newBuilder();\r\n    builder.setId(((ApplicationIdPBImpl) appId2).getProto());\r\n    builder.setUser(\"user2\");\r\n    ContainerManagerApplicationProto appProto2 = builder.build();\r\n    stateStore.storeApplication(appId2, appProto2);\r\n    restartStateStore();\r\n    state = stateStore.loadApplicationsState();\r\n    apps = loadApplicationProtos(state.getIterator());\r\n    assertEquals(2, apps.size());\r\n    assertTrue(apps.contains(appProto1));\r\n    assertTrue(apps.contains(appProto2));\r\n    stateStore.removeApplication(appId2);\r\n    restartStateStore();\r\n    state = stateStore.loadApplicationsState();\r\n    apps = loadApplicationProtos(state.getIterator());\r\n    assertEquals(1, apps.size());\r\n    assertEquals(appProto1, apps.get(0));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "testContainerStorageWhenContainerIsRequested",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testContainerStorageWhenContainerIsRequested() throws IOException\n{\r\n    final ContainerStateConstructParams containerParams = storeContainerInStateStore();\r\n    restartStateStore();\r\n    List<RecoveredContainerState> recoveredContainers = loadContainersState(stateStore.getContainerStateIterator());\r\n    assertEquals(1, recoveredContainers.size());\r\n    final RecoveredContainerState rcs = recoveredContainers.get(0);\r\n    assertEquals(0, rcs.getVersion());\r\n    assertEquals(containerParams.getContainerStartTime().longValue(), rcs.getStartTime());\r\n    assertEquals(RecoveredContainerStatus.REQUESTED, rcs.getStatus());\r\n    assertEquals(ContainerExitStatus.INVALID, rcs.getExitCode());\r\n    assertEquals(false, rcs.getKilled());\r\n    assertEquals(containerParams.getContainerRequest(), rcs.getStartRequest());\r\n    assertTrue(rcs.getDiagnostics().isEmpty());\r\n    assertEquals(containerParams.getContainerResource(), rcs.getCapability());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "testContainerStorageWhenContainerIsQueued",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testContainerStorageWhenContainerIsQueued() throws IOException\n{\r\n    ContainerStateConstructParams containerParams = storeContainerInStateStore();\r\n    ContainerId containerId = containerParams.getContainerId();\r\n    StartContainerRequest containerReq = containerParams.getContainerRequest();\r\n    Resource containerResource = containerParams.getContainerResource();\r\n    ApplicationAttemptId appAttemptId = containerParams.getAppAttemptId();\r\n    storeNewContainerRecordWithoutStartContainerRequest(appAttemptId);\r\n    stateStore.storeContainerQueued(containerId);\r\n    restartStateStore();\r\n    List<RecoveredContainerState> recoveredContainers = loadContainersState(stateStore.getContainerStateIterator());\r\n    assertEquals(1, recoveredContainers.size());\r\n    RecoveredContainerState rcs = recoveredContainers.get(0);\r\n    assertEquals(RecoveredContainerStatus.QUEUED, rcs.getStatus());\r\n    assertEquals(ContainerExitStatus.INVALID, rcs.getExitCode());\r\n    assertEquals(false, rcs.getKilled());\r\n    assertEquals(containerReq, rcs.getStartRequest());\r\n    assertTrue(rcs.getDiagnostics().isEmpty());\r\n    assertEquals(containerResource, rcs.getCapability());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "testContainerStorageWhenContainerIsLaunched",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testContainerStorageWhenContainerIsLaunched() throws IOException\n{\r\n    ContainerStateConstructParams containerParams = storeContainerInStateStore();\r\n    ContainerId containerId = containerParams.getContainerId();\r\n    StartContainerRequest containerReq = containerParams.getContainerRequest();\r\n    Resource containerResource = containerParams.getContainerResource();\r\n    ApplicationAttemptId appAttemptId = containerParams.getAppAttemptId();\r\n    storeNewContainerRecordWithoutStartContainerRequest(appAttemptId);\r\n    stateStore.storeContainerQueued(containerId);\r\n    StringBuilder diags = launchContainerWithDiagnostics(containerId);\r\n    restartStateStore();\r\n    List<RecoveredContainerState> recoveredContainers = loadContainersState(stateStore.getContainerStateIterator());\r\n    assertEquals(1, recoveredContainers.size());\r\n    RecoveredContainerState rcs = recoveredContainers.get(0);\r\n    assertEquals(RecoveredContainerStatus.LAUNCHED, rcs.getStatus());\r\n    assertEquals(ContainerExitStatus.INVALID, rcs.getExitCode());\r\n    assertEquals(false, rcs.getKilled());\r\n    assertEquals(containerReq, rcs.getStartRequest());\r\n    assertEquals(diags.toString(), rcs.getDiagnostics());\r\n    assertEquals(containerResource, rcs.getCapability());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "testContainerStorageWhenContainerIsPaused",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testContainerStorageWhenContainerIsPaused() throws IOException\n{\r\n    ContainerStateConstructParams containerParams = storeContainerInStateStore();\r\n    ContainerId containerId = containerParams.getContainerId();\r\n    StartContainerRequest containerReq = containerParams.getContainerRequest();\r\n    ApplicationAttemptId appAttemptId = containerParams.getAppAttemptId();\r\n    storeNewContainerRecordWithoutStartContainerRequest(appAttemptId);\r\n    stateStore.storeContainerQueued(containerId);\r\n    stateStore.storeContainerPaused(containerId);\r\n    restartStateStore();\r\n    List<RecoveredContainerState> recoveredContainers = loadContainersState(stateStore.getContainerStateIterator());\r\n    assertEquals(1, recoveredContainers.size());\r\n    RecoveredContainerState rcs = recoveredContainers.get(0);\r\n    assertEquals(RecoveredContainerStatus.PAUSED, rcs.getStatus());\r\n    assertEquals(ContainerExitStatus.INVALID, rcs.getExitCode());\r\n    assertEquals(false, rcs.getKilled());\r\n    assertEquals(containerReq, rcs.getStartRequest());\r\n    stateStore.removeContainerPaused(containerId);\r\n    restartStateStore();\r\n    recoveredContainers = loadContainersState(stateStore.getContainerStateIterator());\r\n    assertEquals(1, recoveredContainers.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "testContainerStorageWhenContainerSizeIncreased",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testContainerStorageWhenContainerSizeIncreased() throws IOException\n{\r\n    ContainerStateConstructParams containerParams = storeContainerInStateStore();\r\n    ContainerId containerId = containerParams.getContainerId();\r\n    ApplicationAttemptId appAttemptId = containerParams.getAppAttemptId();\r\n    storeNewContainerRecordWithoutStartContainerRequest(appAttemptId);\r\n    stateStore.storeContainerQueued(containerId);\r\n    launchContainerWithDiagnostics(containerId);\r\n    increaseContainerSize(containerId);\r\n    restartStateStore();\r\n    List<RecoveredContainerState> recoveredContainers = loadContainersState(stateStore.getContainerStateIterator());\r\n    assertEquals(1, recoveredContainers.size());\r\n    RecoveredContainerState rcs = recoveredContainers.get(0);\r\n    assertEquals(0, rcs.getVersion());\r\n    assertEquals(RecoveredContainerStatus.LAUNCHED, rcs.getStatus());\r\n    assertEquals(ContainerExitStatus.INVALID, rcs.getExitCode());\r\n    assertEquals(false, rcs.getKilled());\r\n    assertEquals(Resource.newInstance(2468, 4), rcs.getCapability());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "testContainerStorageWhenContainerMarkedAsKilled",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testContainerStorageWhenContainerMarkedAsKilled() throws IOException\n{\r\n    ContainerStateConstructParams containerParams = storeContainerInStateStore();\r\n    ContainerId containerId = containerParams.getContainerId();\r\n    ApplicationAttemptId appAttemptId = containerParams.getAppAttemptId();\r\n    storeNewContainerRecordWithoutStartContainerRequest(appAttemptId);\r\n    stateStore.storeContainerQueued(containerId);\r\n    StringBuilder diags = launchContainerWithDiagnostics(containerId);\r\n    ContainerTokenIdentifier updateTokenIdentifier = increaseContainerSize(containerId);\r\n    markContainerAsKilled(containerId, diags);\r\n    restartStateStore();\r\n    List<RecoveredContainerState> recoveredContainers = loadContainersState(stateStore.getContainerStateIterator());\r\n    assertEquals(1, recoveredContainers.size());\r\n    RecoveredContainerState rcs = recoveredContainers.get(0);\r\n    assertEquals(RecoveredContainerStatus.LAUNCHED, rcs.getStatus());\r\n    assertEquals(ContainerExitStatus.INVALID, rcs.getExitCode());\r\n    assertTrue(rcs.getKilled());\r\n    ContainerTokenIdentifier tokenReadFromRequest = BuilderUtils.newContainerTokenIdentifier(rcs.getStartRequest().getContainerToken());\r\n    assertEquals(updateTokenIdentifier, tokenReadFromRequest);\r\n    assertEquals(diags.toString(), rcs.getDiagnostics());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "testContainerStorageWhenContainerCompleted",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testContainerStorageWhenContainerCompleted() throws IOException\n{\r\n    ContainerStateConstructParams containerParams = storeContainerInStateStore();\r\n    ContainerId containerId = containerParams.getContainerId();\r\n    ApplicationAttemptId appAttemptId = containerParams.getAppAttemptId();\r\n    storeNewContainerRecordWithoutStartContainerRequest(appAttemptId);\r\n    stateStore.storeContainerQueued(containerId);\r\n    StringBuilder diags = launchContainerWithDiagnostics(containerId);\r\n    markContainerAsKilled(containerId, diags);\r\n    diags.append(\"some final diags\");\r\n    stateStore.storeContainerDiagnostics(containerId, diags);\r\n    stateStore.storeContainerCompleted(containerId, 21);\r\n    restartStateStore();\r\n    List<RecoveredContainerState> recoveredContainers = loadContainersState(stateStore.getContainerStateIterator());\r\n    assertEquals(1, recoveredContainers.size());\r\n    RecoveredContainerState rcs = recoveredContainers.get(0);\r\n    assertEquals(RecoveredContainerStatus.COMPLETED, rcs.getStatus());\r\n    assertEquals(21, rcs.getExitCode());\r\n    assertTrue(rcs.getKilled());\r\n    assertEquals(diags.toString(), rcs.getDiagnostics());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "testContainerStorage",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testContainerStorage() throws IOException\n{\r\n    ContainerStateConstructParams containerParams = storeContainerInStateStore();\r\n    ContainerId containerId = containerParams.getContainerId();\r\n    stateStore.storeContainerRemainingRetryAttempts(containerId, 6);\r\n    stateStore.storeContainerWorkDir(containerId, \"/test/workdir\");\r\n    stateStore.storeContainerLogDir(containerId, \"/test/logdir\");\r\n    restartStateStore();\r\n    List<RecoveredContainerState> recoveredContainers = loadContainersState(stateStore.getContainerStateIterator());\r\n    assertEquals(1, recoveredContainers.size());\r\n    RecoveredContainerState rcs = recoveredContainers.get(0);\r\n    assertEquals(6, rcs.getRemainingRetryAttempts());\r\n    assertEquals(\"/test/workdir\", rcs.getWorkDir());\r\n    assertEquals(\"/test/logdir\", rcs.getLogDir());\r\n    validateRetryAttempts(containerId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "testContainerStorageWhenContainerRemoved",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testContainerStorageWhenContainerRemoved() throws IOException\n{\r\n    ContainerStateConstructParams containerParams = storeContainerInStateStore();\r\n    ContainerId containerId = containerParams.getContainerId();\r\n    stateStore.removeContainer(containerId);\r\n    restartStateStore();\r\n    List<RecoveredContainerState> recoveredContainers = loadContainersState(stateStore.getContainerStateIterator());\r\n    assertTrue(recoveredContainers.isEmpty());\r\n    restartStateStore();\r\n    NMStateStoreService nmStoreSpy = spy(stateStore);\r\n    loadContainersState(nmStoreSpy.getContainerStateIterator());\r\n    verify(nmStoreSpy, times(0)).removeContainer(any(ContainerId.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeContainerInStateStore",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "ContainerStateConstructParams storeContainerInStateStore() throws IOException\n{\r\n    List<RecoveredContainerState> recoveredContainers = loadContainersState(stateStore.getContainerStateIterator());\r\n    assertTrue(recoveredContainers.isEmpty());\r\n    ApplicationId appId = ApplicationId.newInstance(1234, 3);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 4);\r\n    ContainerId containerId = ContainerId.newContainerId(appAttemptId, 5);\r\n    Resource containerResource = Resource.newInstance(1024, 2);\r\n    StartContainerRequest containerReq = createContainerRequest(containerId, containerResource);\r\n    long anyContainerStartTime = 1573155078494L;\r\n    stateStore.storeContainer(containerId, 0, anyContainerStartTime, containerReq);\r\n    DB db = stateStore.getDB();\r\n    assertNull(\"version key present for new container\", db.get(bytes(stateStore.getContainerVersionKey(containerId.toString()))));\r\n    return new ContainerStateConstructParams().setContainerRequest(containerReq).setContainerResource(containerResource).setContainerStartTime(anyContainerStartTime).setAppAttemptId(appAttemptId).setContainerId(containerId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "markContainerAsKilled",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void markContainerAsKilled(ContainerId containerId, StringBuilder diags) throws IOException\n{\r\n    diags.append(\"some more diags for container\");\r\n    stateStore.storeContainerDiagnostics(containerId, diags);\r\n    stateStore.storeContainerKilled(containerId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "increaseContainerSize",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ContainerTokenIdentifier increaseContainerSize(ContainerId containerId) throws IOException\n{\r\n    ContainerTokenIdentifier updateTokenIdentifier = new ContainerTokenIdentifier(containerId, \"host\", \"user\", Resource.newInstance(2468, 4), 9876543210L, 42, 2468, Priority.newInstance(7), 13579);\r\n    stateStore.storeContainerUpdateToken(containerId, updateTokenIdentifier);\r\n    return updateTokenIdentifier;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "launchContainerWithDiagnostics",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "StringBuilder launchContainerWithDiagnostics(ContainerId containerId) throws IOException\n{\r\n    StringBuilder diags = new StringBuilder();\r\n    stateStore.storeContainerLaunched(containerId);\r\n    diags.append(\"some diags for container\");\r\n    stateStore.storeContainerDiagnostics(containerId, diags);\r\n    return diags;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeNewContainerRecordWithoutStartContainerRequest",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void storeNewContainerRecordWithoutStartContainerRequest(ApplicationAttemptId appAttemptId) throws IOException\n{\r\n    ContainerId containerId1 = ContainerId.newContainerId(appAttemptId, 6);\r\n    stateStore.storeContainerLaunched(containerId1);\r\n    List<RecoveredContainerState> recoveredContainers = loadContainersState(stateStore.getContainerStateIterator());\r\n    assertEquals(1, recoveredContainers.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "validateRetryAttempts",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void validateRetryAttempts(ContainerId containerId) throws IOException\n{\r\n    List<Long> finishTimeForRetryAttempts = Arrays.asList(1462700529039L, 1462700529050L, 1462700529120L);\r\n    stateStore.storeContainerRestartTimes(containerId, finishTimeForRetryAttempts);\r\n    restartStateStore();\r\n    RecoveredContainerState rcs = loadContainersState(stateStore.getContainerStateIterator()).get(0);\r\n    List<Long> recoveredRestartTimes = rcs.getRestartTimes();\r\n    assertEquals(1462700529039L, (long) recoveredRestartTimes.get(0));\r\n    assertEquals(1462700529050L, (long) recoveredRestartTimes.get(1));\r\n    assertEquals(1462700529120L, (long) recoveredRestartTimes.get(2));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "createContainerRequest",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "StartContainerRequest createContainerRequest(ContainerId containerId, Resource res)\n{\r\n    return createContainerRequestInternal(containerId, res);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "createContainerRequestInternal",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "StartContainerRequest createContainerRequestInternal(ContainerId containerId, Resource res)\n{\r\n    LocalResource lrsrc = LocalResource.newInstance(URL.newInstance(\"hdfs\", \"somehost\", 12345, \"/some/path/to/rsrc\"), LocalResourceType.FILE, LocalResourceVisibility.APPLICATION, 123L, 1234567890L);\r\n    Map<String, LocalResource> localResources = new HashMap<String, LocalResource>();\r\n    localResources.put(\"rsrc\", lrsrc);\r\n    Map<String, String> env = new HashMap<String, String>();\r\n    env.put(\"somevar\", \"someval\");\r\n    List<String> containerCmds = new ArrayList<String>();\r\n    containerCmds.add(\"somecmd\");\r\n    containerCmds.add(\"somearg\");\r\n    Map<String, ByteBuffer> serviceData = new HashMap<String, ByteBuffer>();\r\n    serviceData.put(\"someservice\", ByteBuffer.wrap(new byte[] { 0x1, 0x2, 0x3 }));\r\n    ByteBuffer containerTokens = ByteBuffer.wrap(new byte[] { 0x7, 0x8, 0x9, 0xa });\r\n    Map<ApplicationAccessType, String> acls = new HashMap<ApplicationAccessType, String>();\r\n    acls.put(ApplicationAccessType.VIEW_APP, \"viewuser\");\r\n    acls.put(ApplicationAccessType.MODIFY_APP, \"moduser\");\r\n    ContainerLaunchContext clc = ContainerLaunchContext.newInstance(localResources, env, containerCmds, serviceData, containerTokens, acls);\r\n    Resource containerRsrc = Resource.newInstance(1357, 3);\r\n    if (res != null) {\r\n        containerRsrc = res;\r\n    }\r\n    ContainerTokenIdentifier containerTokenId = new ContainerTokenIdentifier(containerId, \"host\", \"user\", containerRsrc, 9876543210L, 42, 2468, Priority.newInstance(7), 13579);\r\n    Token containerToken = Token.newInstance(containerTokenId.getBytes(), ContainerTokenIdentifier.KIND.toString(), \"password\".getBytes(), \"tokenservice\");\r\n    return StartContainerRequest.newInstance(clc, containerToken);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "testLocalTrackerStateIterator",
  "errType" : null,
  "containingMethodsNum" : 38,
  "sourceCodeText" : "void testLocalTrackerStateIterator() throws IOException\n{\r\n    String user1 = \"somebody\";\r\n    ApplicationId appId1 = ApplicationId.newInstance(1, 1);\r\n    ApplicationId appId2 = ApplicationId.newInstance(2, 2);\r\n    String user2 = \"someone\";\r\n    ApplicationId appId3 = ApplicationId.newInstance(3, 3);\r\n    Path appRsrcPath1 = new Path(\"hdfs://some/app/resource1\");\r\n    LocalResourcePBImpl rsrcPb1 = (LocalResourcePBImpl) LocalResource.newInstance(URL.fromPath(appRsrcPath1), LocalResourceType.ARCHIVE, LocalResourceVisibility.APPLICATION, 123L, 456L);\r\n    LocalResourceProto appRsrcProto1 = rsrcPb1.getProto();\r\n    Path appRsrcLocalPath1 = new Path(\"/some/local/dir/for/apprsrc1\");\r\n    Path appRsrcPath2 = new Path(\"hdfs://some/app/resource2\");\r\n    LocalResourcePBImpl rsrcPb2 = (LocalResourcePBImpl) LocalResource.newInstance(URL.fromPath(appRsrcPath2), LocalResourceType.ARCHIVE, LocalResourceVisibility.APPLICATION, 123L, 456L);\r\n    LocalResourceProto appRsrcProto2 = rsrcPb2.getProto();\r\n    Path appRsrcLocalPath2 = new Path(\"/some/local/dir/for/apprsrc2\");\r\n    Path appRsrcPath3 = new Path(\"hdfs://some/app/resource3\");\r\n    LocalResourcePBImpl rsrcPb3 = (LocalResourcePBImpl) LocalResource.newInstance(URL.fromPath(appRsrcPath3), LocalResourceType.ARCHIVE, LocalResourceVisibility.APPLICATION, 123L, 456L);\r\n    LocalResourceProto appRsrcProto3 = rsrcPb3.getProto();\r\n    Path appRsrcLocalPath3 = new Path(\"/some/local/dir/for/apprsrc2\");\r\n    stateStore.startResourceLocalization(user1, appId1, appRsrcProto1, appRsrcLocalPath1);\r\n    stateStore.startResourceLocalization(user1, appId2, appRsrcProto2, appRsrcLocalPath2);\r\n    stateStore.startResourceLocalization(user2, appId3, appRsrcProto3, appRsrcLocalPath3);\r\n    LocalizedResourceProto appLocalizedProto1 = LocalizedResourceProto.newBuilder().setResource(appRsrcProto1).setLocalPath(appRsrcLocalPath1.toString()).setSize(1234567L).build();\r\n    LocalizedResourceProto appLocalizedProto2 = LocalizedResourceProto.newBuilder().setResource(appRsrcProto2).setLocalPath(appRsrcLocalPath2.toString()).setSize(1234567L).build();\r\n    LocalizedResourceProto appLocalizedProto3 = LocalizedResourceProto.newBuilder().setResource(appRsrcProto3).setLocalPath(appRsrcLocalPath3.toString()).setSize(1234567L).build();\r\n    stateStore.finishResourceLocalization(user1, appId1, appLocalizedProto1);\r\n    stateStore.finishResourceLocalization(user1, appId2, appLocalizedProto2);\r\n    stateStore.finishResourceLocalization(user2, appId3, appLocalizedProto3);\r\n    List<LocalizedResourceProto> completedResources = new ArrayList<LocalizedResourceProto>();\r\n    Map<LocalResourceProto, Path> startedResources = new HashMap<LocalResourceProto, Path>();\r\n    restartStateStore();\r\n    RecoveredLocalizationState state = stateStore.loadLocalizationState();\r\n    Map<String, RecoveredUserResources> userResources = loadUserResources(state.getIterator());\r\n    assertEquals(2, userResources.size());\r\n    RecoveredUserResources uResource = userResources.get(user1);\r\n    assertEquals(2, uResource.getAppTrackerStates().size());\r\n    LocalResourceTrackerState app1ts = uResource.getAppTrackerStates().get(appId1);\r\n    assertNotNull(app1ts);\r\n    completedResources = loadCompletedResources(app1ts.getCompletedResourcesIterator());\r\n    startedResources = loadStartedResources(app1ts.getStartedResourcesIterator());\r\n    assertTrue(startedResources.isEmpty());\r\n    assertEquals(1, completedResources.size());\r\n    assertEquals(appLocalizedProto1, completedResources.iterator().next());\r\n    LocalResourceTrackerState app2ts = uResource.getAppTrackerStates().get(appId2);\r\n    assertNotNull(app2ts);\r\n    completedResources = loadCompletedResources(app2ts.getCompletedResourcesIterator());\r\n    startedResources = loadStartedResources(app2ts.getStartedResourcesIterator());\r\n    assertTrue(startedResources.isEmpty());\r\n    assertEquals(1, completedResources.size());\r\n    assertEquals(appLocalizedProto2, completedResources.iterator().next());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "testStartResourceLocalizationForApplicationResource",
  "errType" : null,
  "containingMethodsNum" : 28,
  "sourceCodeText" : "void testStartResourceLocalizationForApplicationResource() throws IOException\n{\r\n    String user = \"somebody\";\r\n    ApplicationId appId = ApplicationId.newInstance(1, 1);\r\n    Path appRsrcPath = new Path(\"hdfs://some/app/resource\");\r\n    LocalResourcePBImpl rsrcPb = (LocalResourcePBImpl) LocalResource.newInstance(URL.fromPath(appRsrcPath), LocalResourceType.ARCHIVE, LocalResourceVisibility.APPLICATION, 123L, 456L);\r\n    LocalResourceProto appRsrcProto = rsrcPb.getProto();\r\n    Path appRsrcLocalPath = new Path(\"/some/local/dir/for/apprsrc\");\r\n    stateStore.startResourceLocalization(user, appId, appRsrcProto, appRsrcLocalPath);\r\n    List<LocalizedResourceProto> completedResources = new ArrayList<LocalizedResourceProto>();\r\n    Map<LocalResourceProto, Path> startedResources = new HashMap<LocalResourceProto, Path>();\r\n    restartStateStore();\r\n    RecoveredLocalizationState state = stateStore.loadLocalizationState();\r\n    LocalResourceTrackerState pubts = state.getPublicTrackerState();\r\n    completedResources = loadCompletedResources(pubts.getCompletedResourcesIterator());\r\n    startedResources = loadStartedResources(pubts.getStartedResourcesIterator());\r\n    assertTrue(completedResources.isEmpty());\r\n    assertTrue(startedResources.isEmpty());\r\n    Map<String, RecoveredUserResources> userResources = loadUserResources(state.getIterator());\r\n    assertEquals(1, userResources.size());\r\n    RecoveredUserResources rur = userResources.get(user);\r\n    LocalResourceTrackerState privts = rur.getPrivateTrackerState();\r\n    assertNotNull(privts);\r\n    completedResources = loadCompletedResources(privts.getCompletedResourcesIterator());\r\n    startedResources = loadStartedResources(privts.getStartedResourcesIterator());\r\n    assertTrue(completedResources.isEmpty());\r\n    assertTrue(startedResources.isEmpty());\r\n    assertEquals(1, rur.getAppTrackerStates().size());\r\n    LocalResourceTrackerState appts = rur.getAppTrackerStates().get(appId);\r\n    assertNotNull(appts);\r\n    completedResources = loadCompletedResources(appts.getCompletedResourcesIterator());\r\n    startedResources = loadStartedResources(appts.getStartedResourcesIterator());\r\n    assertTrue(completedResources.isEmpty());\r\n    assertEquals(1, startedResources.size());\r\n    assertEquals(appRsrcLocalPath, startedResources.get(appRsrcProto));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "testStartResourceLocalizationForPublicResources",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testStartResourceLocalizationForPublicResources() throws IOException\n{\r\n    Path pubRsrcPath1 = new Path(\"hdfs://some/public/resource1\");\r\n    LocalResourcePBImpl rsrcPb = (LocalResourcePBImpl) LocalResource.newInstance(URL.fromPath(pubRsrcPath1), LocalResourceType.FILE, LocalResourceVisibility.PUBLIC, 789L, 135L);\r\n    LocalResourceProto pubRsrcProto1 = rsrcPb.getProto();\r\n    Path pubRsrcLocalPath1 = new Path(\"/some/local/dir/for/pubrsrc1\");\r\n    stateStore.startResourceLocalization(null, null, pubRsrcProto1, pubRsrcLocalPath1);\r\n    Path pubRsrcPath2 = new Path(\"hdfs://some/public/resource2\");\r\n    rsrcPb = (LocalResourcePBImpl) LocalResource.newInstance(URL.fromPath(pubRsrcPath2), LocalResourceType.FILE, LocalResourceVisibility.PUBLIC, 789L, 135L);\r\n    LocalResourceProto pubRsrcProto2 = rsrcPb.getProto();\r\n    Path pubRsrcLocalPath2 = new Path(\"/some/local/dir/for/pubrsrc2\");\r\n    stateStore.startResourceLocalization(null, null, pubRsrcProto2, pubRsrcLocalPath2);\r\n    restartStateStore();\r\n    RecoveredLocalizationState state = stateStore.loadLocalizationState();\r\n    LocalResourceTrackerState pubts = state.getPublicTrackerState();\r\n    List<LocalizedResourceProto> completedResources = loadCompletedResources(pubts.getCompletedResourcesIterator());\r\n    Map<LocalResourceProto, Path> startedResources = loadStartedResources(pubts.getStartedResourcesIterator());\r\n    assertTrue(completedResources.isEmpty());\r\n    assertEquals(2, startedResources.size());\r\n    assertEquals(pubRsrcLocalPath1, startedResources.get(pubRsrcProto1));\r\n    assertEquals(pubRsrcLocalPath2, startedResources.get(pubRsrcProto2));\r\n    Map<String, RecoveredUserResources> userResources = loadUserResources(state.getIterator());\r\n    assertEquals(0, userResources.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "testStartResourceLocalizationForPrivateResource",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testStartResourceLocalizationForPrivateResource() throws IOException\n{\r\n    Path privRsrcPath = new Path(\"hdfs://some/private/resource\");\r\n    LocalResourcePBImpl rsrcPb = (LocalResourcePBImpl) LocalResource.newInstance(URL.fromPath(privRsrcPath), LocalResourceType.PATTERN, LocalResourceVisibility.PRIVATE, 789L, 680L, \"*pattern*\");\r\n    LocalResourceProto privRsrcProto = rsrcPb.getProto();\r\n    Path privRsrcLocalPath = new Path(\"/some/local/dir/for/privrsrc\");\r\n    String user = \"somebody\";\r\n    stateStore.startResourceLocalization(user, null, privRsrcProto, privRsrcLocalPath);\r\n    restartStateStore();\r\n    RecoveredLocalizationState state = stateStore.loadLocalizationState();\r\n    Map<String, RecoveredUserResources> userResources = loadUserResources(state.getIterator());\r\n    assertEquals(1, userResources.size());\r\n    RecoveredUserResources rur = userResources.get(user);\r\n    LocalResourceTrackerState privts = rur.getPrivateTrackerState();\r\n    assertNotNull(privts);\r\n    List<LocalizedResourceProto> completedResources = loadCompletedResources(privts.getCompletedResourcesIterator());\r\n    Map<LocalResourceProto, Path> startedResources = loadStartedResources(privts.getStartedResourcesIterator());\r\n    assertTrue(completedResources.isEmpty());\r\n    assertEquals(1, startedResources.size());\r\n    assertEquals(privRsrcLocalPath, startedResources.get(privRsrcProto));\r\n    assertEquals(0, rur.getAppTrackerStates().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "testFinishResourceLocalizationForApplicationResource",
  "errType" : null,
  "containingMethodsNum" : 30,
  "sourceCodeText" : "void testFinishResourceLocalizationForApplicationResource() throws IOException\n{\r\n    String user = \"somebody\";\r\n    ApplicationId appId = ApplicationId.newInstance(1, 1);\r\n    Path appRsrcPath = new Path(\"hdfs://some/app/resource\");\r\n    LocalResourcePBImpl rsrcPb = (LocalResourcePBImpl) LocalResource.newInstance(URL.fromPath(appRsrcPath), LocalResourceType.ARCHIVE, LocalResourceVisibility.APPLICATION, 123L, 456L);\r\n    LocalResourceProto appRsrcProto = rsrcPb.getProto();\r\n    Path appRsrcLocalPath = new Path(\"/some/local/dir/for/apprsrc\");\r\n    stateStore.startResourceLocalization(user, appId, appRsrcProto, appRsrcLocalPath);\r\n    LocalizedResourceProto appLocalizedProto = LocalizedResourceProto.newBuilder().setResource(appRsrcProto).setLocalPath(appRsrcLocalPath.toString()).setSize(1234567L).build();\r\n    stateStore.finishResourceLocalization(user, appId, appLocalizedProto);\r\n    List<LocalizedResourceProto> completedResources = new ArrayList<LocalizedResourceProto>();\r\n    Map<LocalResourceProto, Path> startedResources = new HashMap<LocalResourceProto, Path>();\r\n    restartStateStore();\r\n    RecoveredLocalizationState state = stateStore.loadLocalizationState();\r\n    LocalResourceTrackerState pubts = state.getPublicTrackerState();\r\n    completedResources = loadCompletedResources(pubts.getCompletedResourcesIterator());\r\n    startedResources = loadStartedResources(pubts.getStartedResourcesIterator());\r\n    assertTrue(completedResources.isEmpty());\r\n    assertTrue(startedResources.isEmpty());\r\n    Map<String, RecoveredUserResources> userResources = loadUserResources(state.getIterator());\r\n    assertEquals(1, userResources.size());\r\n    RecoveredUserResources rur = userResources.get(user);\r\n    LocalResourceTrackerState privts = rur.getPrivateTrackerState();\r\n    assertNotNull(privts);\r\n    completedResources = loadCompletedResources(privts.getCompletedResourcesIterator());\r\n    startedResources = loadStartedResources(privts.getStartedResourcesIterator());\r\n    assertTrue(completedResources.isEmpty());\r\n    assertTrue(startedResources.isEmpty());\r\n    assertEquals(1, rur.getAppTrackerStates().size());\r\n    LocalResourceTrackerState appts = rur.getAppTrackerStates().get(appId);\r\n    assertNotNull(appts);\r\n    completedResources = loadCompletedResources(appts.getCompletedResourcesIterator());\r\n    startedResources = loadStartedResources(appts.getStartedResourcesIterator());\r\n    assertTrue(startedResources.isEmpty());\r\n    assertEquals(1, completedResources.size());\r\n    assertEquals(appLocalizedProto, completedResources.iterator().next());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "testFinishResourceLocalizationForPublicResources",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testFinishResourceLocalizationForPublicResources() throws IOException\n{\r\n    Path pubRsrcPath1 = new Path(\"hdfs://some/public/resource1\");\r\n    LocalResourcePBImpl rsrcPb = (LocalResourcePBImpl) LocalResource.newInstance(URL.fromPath(pubRsrcPath1), LocalResourceType.FILE, LocalResourceVisibility.PUBLIC, 789L, 135L);\r\n    LocalResourceProto pubRsrcProto1 = rsrcPb.getProto();\r\n    Path pubRsrcLocalPath1 = new Path(\"/some/local/dir/for/pubrsrc1\");\r\n    stateStore.startResourceLocalization(null, null, pubRsrcProto1, pubRsrcLocalPath1);\r\n    Path pubRsrcPath2 = new Path(\"hdfs://some/public/resource2\");\r\n    rsrcPb = (LocalResourcePBImpl) LocalResource.newInstance(URL.fromPath(pubRsrcPath2), LocalResourceType.FILE, LocalResourceVisibility.PUBLIC, 789L, 135L);\r\n    LocalResourceProto pubRsrcProto2 = rsrcPb.getProto();\r\n    Path pubRsrcLocalPath2 = new Path(\"/some/local/dir/for/pubrsrc2\");\r\n    stateStore.startResourceLocalization(null, null, pubRsrcProto2, pubRsrcLocalPath2);\r\n    LocalizedResourceProto pubLocalizedProto1 = LocalizedResourceProto.newBuilder().setResource(pubRsrcProto1).setLocalPath(pubRsrcLocalPath1.toString()).setSize(pubRsrcProto1.getSize()).build();\r\n    stateStore.finishResourceLocalization(null, null, pubLocalizedProto1);\r\n    restartStateStore();\r\n    RecoveredLocalizationState state = stateStore.loadLocalizationState();\r\n    LocalResourceTrackerState pubts = state.getPublicTrackerState();\r\n    List<LocalizedResourceProto> completedResources = loadCompletedResources(pubts.getCompletedResourcesIterator());\r\n    Map<LocalResourceProto, Path> startedResources = loadStartedResources(pubts.getStartedResourcesIterator());\r\n    assertEquals(1, completedResources.size());\r\n    assertEquals(pubLocalizedProto1, completedResources.iterator().next());\r\n    assertEquals(1, startedResources.size());\r\n    assertEquals(pubRsrcLocalPath2, startedResources.get(pubRsrcProto2));\r\n    Map<String, RecoveredUserResources> userResources = loadUserResources(state.getIterator());\r\n    assertEquals(0, userResources.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "testFinishResourceLocalizationForPrivateResource",
  "errType" : null,
  "containingMethodsNum" : 28,
  "sourceCodeText" : "void testFinishResourceLocalizationForPrivateResource() throws IOException\n{\r\n    String user = \"somebody\";\r\n    ApplicationId appId = ApplicationId.newInstance(1, 1);\r\n    Path privRsrcPath = new Path(\"hdfs://some/private/resource\");\r\n    LocalResourcePBImpl rsrcPb = (LocalResourcePBImpl) LocalResource.newInstance(URL.fromPath(privRsrcPath), LocalResourceType.PATTERN, LocalResourceVisibility.PRIVATE, 789L, 680L, \"*pattern*\");\r\n    LocalResourceProto privRsrcProto = rsrcPb.getProto();\r\n    Path privRsrcLocalPath = new Path(\"/some/local/dir/for/privrsrc\");\r\n    stateStore.startResourceLocalization(user, null, privRsrcProto, privRsrcLocalPath);\r\n    LocalizedResourceProto privLocalizedProto = LocalizedResourceProto.newBuilder().setResource(privRsrcProto).setLocalPath(privRsrcLocalPath.toString()).setSize(privRsrcProto.getSize()).build();\r\n    stateStore.finishResourceLocalization(user, null, privLocalizedProto);\r\n    restartStateStore();\r\n    RecoveredLocalizationState state = stateStore.loadLocalizationState();\r\n    LocalResourceTrackerState pubts = state.getPublicTrackerState();\r\n    List<LocalizedResourceProto> completedResources = loadCompletedResources(pubts.getCompletedResourcesIterator());\r\n    Map<LocalResourceProto, Path> startedResources = loadStartedResources(pubts.getStartedResourcesIterator());\r\n    assertEquals(0, completedResources.size());\r\n    assertEquals(0, startedResources.size());\r\n    Map<String, RecoveredUserResources> userResources = loadUserResources(state.getIterator());\r\n    assertEquals(1, userResources.size());\r\n    RecoveredUserResources rur = userResources.get(user);\r\n    LocalResourceTrackerState privts = rur.getPrivateTrackerState();\r\n    assertNotNull(privts);\r\n    completedResources = loadCompletedResources(privts.getCompletedResourcesIterator());\r\n    startedResources = loadStartedResources(privts.getStartedResourcesIterator());\r\n    assertEquals(1, completedResources.size());\r\n    assertEquals(privLocalizedProto, completedResources.iterator().next());\r\n    assertTrue(startedResources.isEmpty());\r\n    assertEquals(0, rur.getAppTrackerStates().size());\r\n    LocalResourceTrackerState appts = rur.getAppTrackerStates().get(appId);\r\n    assertNull(appts);\r\n    assertTrue(startedResources.isEmpty());\r\n    assertEquals(1, completedResources.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "testRemoveLocalizedResourceForApplicationResource",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testRemoveLocalizedResourceForApplicationResource() throws IOException\n{\r\n    String user = \"somebody\";\r\n    ApplicationId appId = ApplicationId.newInstance(1, 1);\r\n    Path appRsrcPath = new Path(\"hdfs://some/app/resource\");\r\n    LocalResourcePBImpl rsrcPb = (LocalResourcePBImpl) LocalResource.newInstance(URL.fromPath(appRsrcPath), LocalResourceType.ARCHIVE, LocalResourceVisibility.APPLICATION, 123L, 456L);\r\n    LocalResourceProto appRsrcProto = rsrcPb.getProto();\r\n    Path appRsrcLocalPath = new Path(\"/some/local/dir/for/apprsrc\");\r\n    stateStore.startResourceLocalization(user, appId, appRsrcProto, appRsrcLocalPath);\r\n    LocalizedResourceProto appLocalizedProto = LocalizedResourceProto.newBuilder().setResource(appRsrcProto).setLocalPath(appRsrcLocalPath.toString()).setSize(1234567L).build();\r\n    stateStore.finishResourceLocalization(user, appId, appLocalizedProto);\r\n    stateStore.removeLocalizedResource(user, appId, appRsrcLocalPath);\r\n    restartStateStore();\r\n    verifyEmptyState();\r\n    stateStore.startResourceLocalization(user, appId, appRsrcProto, appRsrcLocalPath);\r\n    stateStore.removeLocalizedResource(user, appId, appRsrcLocalPath);\r\n    restartStateStore();\r\n    verifyEmptyState();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "testRemoveLocalizedResourceForPublicResources",
  "errType" : null,
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void testRemoveLocalizedResourceForPublicResources() throws IOException\n{\r\n    Path pubRsrcPath1 = new Path(\"hdfs://some/public/resource1\");\r\n    LocalResourcePBImpl rsrcPb = (LocalResourcePBImpl) LocalResource.newInstance(URL.fromPath(pubRsrcPath1), LocalResourceType.FILE, LocalResourceVisibility.PUBLIC, 789L, 135L);\r\n    LocalResourceProto pubRsrcProto1 = rsrcPb.getProto();\r\n    Path pubRsrcLocalPath1 = new Path(\"/some/local/dir/for/pubrsrc1\");\r\n    stateStore.startResourceLocalization(null, null, pubRsrcProto1, pubRsrcLocalPath1);\r\n    LocalizedResourceProto pubLocalizedProto1 = LocalizedResourceProto.newBuilder().setResource(pubRsrcProto1).setLocalPath(pubRsrcLocalPath1.toString()).setSize(789L).build();\r\n    stateStore.finishResourceLocalization(null, null, pubLocalizedProto1);\r\n    Path pubRsrcPath2 = new Path(\"hdfs://some/public/resource2\");\r\n    rsrcPb = (LocalResourcePBImpl) LocalResource.newInstance(URL.fromPath(pubRsrcPath2), LocalResourceType.FILE, LocalResourceVisibility.PUBLIC, 789L, 135L);\r\n    LocalResourceProto pubRsrcProto2 = rsrcPb.getProto();\r\n    Path pubRsrcLocalPath2 = new Path(\"/some/local/dir/for/pubrsrc2\");\r\n    stateStore.startResourceLocalization(null, null, pubRsrcProto2, pubRsrcLocalPath2);\r\n    LocalizedResourceProto pubLocalizedProto2 = LocalizedResourceProto.newBuilder().setResource(pubRsrcProto2).setLocalPath(pubRsrcLocalPath2.toString()).setSize(7654321L).build();\r\n    stateStore.finishResourceLocalization(null, null, pubLocalizedProto2);\r\n    stateStore.removeLocalizedResource(null, null, pubRsrcLocalPath2);\r\n    restartStateStore();\r\n    RecoveredLocalizationState state = stateStore.loadLocalizationState();\r\n    LocalResourceTrackerState pubts = state.getPublicTrackerState();\r\n    List<LocalizedResourceProto> completedResources = loadCompletedResources(pubts.getCompletedResourcesIterator());\r\n    Map<LocalResourceProto, Path> startedResources = loadStartedResources(pubts.getStartedResourcesIterator());\r\n    assertTrue(startedResources.isEmpty());\r\n    assertEquals(1, completedResources.size());\r\n    assertEquals(pubLocalizedProto1, completedResources.iterator().next());\r\n    Map<String, RecoveredUserResources> userResources = loadUserResources(state.getIterator());\r\n    assertTrue(userResources.isEmpty());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "testRemoveLocalizedResourceForPrivateResource",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testRemoveLocalizedResourceForPrivateResource() throws IOException\n{\r\n    String user = \"somebody\";\r\n    Path privRsrcPath = new Path(\"hdfs://some/private/resource\");\r\n    LocalResourcePBImpl rsrcPb = (LocalResourcePBImpl) LocalResource.newInstance(URL.fromPath(privRsrcPath), LocalResourceType.PATTERN, LocalResourceVisibility.PRIVATE, 789L, 680L, \"*pattern*\");\r\n    LocalResourceProto privRsrcProto = rsrcPb.getProto();\r\n    Path privRsrcLocalPath = new Path(\"/some/local/dir/for/privrsrc\");\r\n    stateStore.startResourceLocalization(user, null, privRsrcProto, privRsrcLocalPath);\r\n    stateStore.removeLocalizedResource(user, null, privRsrcLocalPath);\r\n    restartStateStore();\r\n    RecoveredLocalizationState state = stateStore.loadLocalizationState();\r\n    LocalResourceTrackerState pubts = state.getPublicTrackerState();\r\n    List<LocalizedResourceProto> completedResources = loadCompletedResources(pubts.getCompletedResourcesIterator());\r\n    Map<LocalResourceProto, Path> startedResources = loadStartedResources(pubts.getStartedResourcesIterator());\r\n    assertTrue(startedResources.isEmpty());\r\n    assertEquals(0, completedResources.size());\r\n    Map<String, RecoveredUserResources> userResources = loadUserResources(state.getIterator());\r\n    assertTrue(userResources.isEmpty());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "testDeletionTaskStorage",
  "errType" : null,
  "containingMethodsNum" : 29,
  "sourceCodeText" : "void testDeletionTaskStorage() throws IOException\n{\r\n    RecoveredDeletionServiceState state = stateStore.loadDeletionServiceState();\r\n    List<DeletionServiceDeleteTaskProto> deleteTaskProtos = loadDeletionTaskProtos(state.getIterator());\r\n    assertTrue(deleteTaskProtos.isEmpty());\r\n    DeletionServiceDeleteTaskProto proto = DeletionServiceDeleteTaskProto.newBuilder().setId(7).setUser(\"someuser\").setSubdir(\"some/subdir\").addBasedirs(\"some/dir/path\").addBasedirs(\"some/other/dir/path\").setDeletionTime(123456L).addSuccessorIds(8).addSuccessorIds(9).build();\r\n    stateStore.storeDeletionTask(proto.getId(), proto);\r\n    restartStateStore();\r\n    state = stateStore.loadDeletionServiceState();\r\n    deleteTaskProtos = loadDeletionTaskProtos(state.getIterator());\r\n    assertEquals(1, deleteTaskProtos.size());\r\n    assertEquals(proto, deleteTaskProtos.get(0));\r\n    DeletionServiceDeleteTaskProto proto2 = DeletionServiceDeleteTaskProto.newBuilder().setId(8).setUser(\"user2\").setSubdir(\"subdir2\").setDeletionTime(789L).build();\r\n    stateStore.storeDeletionTask(proto2.getId(), proto2);\r\n    restartStateStore();\r\n    state = stateStore.loadDeletionServiceState();\r\n    deleteTaskProtos = loadDeletionTaskProtos(state.getIterator());\r\n    assertEquals(2, deleteTaskProtos.size());\r\n    assertTrue(deleteTaskProtos.contains(proto));\r\n    assertTrue(deleteTaskProtos.contains(proto2));\r\n    stateStore.removeDeletionTask(proto2.getId());\r\n    restartStateStore();\r\n    state = stateStore.loadDeletionServiceState();\r\n    deleteTaskProtos = loadDeletionTaskProtos(state.getIterator());\r\n    assertEquals(1, deleteTaskProtos.size());\r\n    assertEquals(proto, deleteTaskProtos.get(0));\r\n    stateStore.removeDeletionTask(proto.getId());\r\n    restartStateStore();\r\n    state = stateStore.loadDeletionServiceState();\r\n    deleteTaskProtos = loadDeletionTaskProtos(state.getIterator());\r\n    assertTrue(deleteTaskProtos.isEmpty());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "testNMTokenStorage",
  "errType" : null,
  "containingMethodsNum" : 52,
  "sourceCodeText" : "void testNMTokenStorage() throws IOException\n{\r\n    RecoveredNMTokensState state = stateStore.loadNMTokensState();\r\n    Map<ApplicationAttemptId, MasterKey> loadedAppKeys = loadNMTokens(state.getIterator());\r\n    assertNull(state.getCurrentMasterKey());\r\n    assertNull(state.getPreviousMasterKey());\r\n    assertTrue(loadedAppKeys.isEmpty());\r\n    NMTokenSecretManagerForTest secretMgr = new NMTokenSecretManagerForTest();\r\n    MasterKey currentKey = secretMgr.generateKey();\r\n    stateStore.storeNMTokenCurrentMasterKey(currentKey);\r\n    restartStateStore();\r\n    state = stateStore.loadNMTokensState();\r\n    loadedAppKeys = loadNMTokens(state.getIterator());\r\n    assertEquals(currentKey, state.getCurrentMasterKey());\r\n    assertNull(state.getPreviousMasterKey());\r\n    assertTrue(loadedAppKeys.isEmpty());\r\n    MasterKey prevKey = secretMgr.generateKey();\r\n    stateStore.storeNMTokenPreviousMasterKey(prevKey);\r\n    restartStateStore();\r\n    state = stateStore.loadNMTokensState();\r\n    loadedAppKeys = loadNMTokens(state.getIterator());\r\n    assertEquals(currentKey, state.getCurrentMasterKey());\r\n    assertEquals(prevKey, state.getPreviousMasterKey());\r\n    assertTrue(loadedAppKeys.isEmpty());\r\n    ApplicationAttemptId attempt1 = ApplicationAttemptId.newInstance(ApplicationId.newInstance(1, 1), 1);\r\n    MasterKey attemptKey1 = secretMgr.generateKey();\r\n    stateStore.storeNMTokenApplicationMasterKey(attempt1, attemptKey1);\r\n    ApplicationAttemptId attempt2 = ApplicationAttemptId.newInstance(ApplicationId.newInstance(2, 3), 4);\r\n    MasterKey attemptKey2 = secretMgr.generateKey();\r\n    stateStore.storeNMTokenApplicationMasterKey(attempt2, attemptKey2);\r\n    restartStateStore();\r\n    state = stateStore.loadNMTokensState();\r\n    loadedAppKeys = loadNMTokens(state.getIterator());\r\n    assertEquals(currentKey, state.getCurrentMasterKey());\r\n    assertEquals(prevKey, state.getPreviousMasterKey());\r\n    assertEquals(2, loadedAppKeys.size());\r\n    assertEquals(attemptKey1, loadedAppKeys.get(attempt1));\r\n    assertEquals(attemptKey2, loadedAppKeys.get(attempt2));\r\n    ApplicationAttemptId attempt3 = ApplicationAttemptId.newInstance(ApplicationId.newInstance(5, 6), 7);\r\n    MasterKey attemptKey3 = secretMgr.generateKey();\r\n    stateStore.storeNMTokenApplicationMasterKey(attempt3, attemptKey3);\r\n    stateStore.removeNMTokenApplicationMasterKey(attempt1);\r\n    attemptKey2 = prevKey;\r\n    stateStore.storeNMTokenApplicationMasterKey(attempt2, attemptKey2);\r\n    prevKey = currentKey;\r\n    stateStore.storeNMTokenPreviousMasterKey(prevKey);\r\n    currentKey = secretMgr.generateKey();\r\n    stateStore.storeNMTokenCurrentMasterKey(currentKey);\r\n    restartStateStore();\r\n    state = stateStore.loadNMTokensState();\r\n    loadedAppKeys = loadNMTokens(state.getIterator());\r\n    assertEquals(currentKey, state.getCurrentMasterKey());\r\n    assertEquals(prevKey, state.getPreviousMasterKey());\r\n    assertEquals(2, loadedAppKeys.size());\r\n    assertNull(loadedAppKeys.get(attempt1));\r\n    assertEquals(attemptKey2, loadedAppKeys.get(attempt2));\r\n    assertEquals(attemptKey3, loadedAppKeys.get(attempt3));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "testContainerTokenStorage",
  "errType" : null,
  "containingMethodsNum" : 49,
  "sourceCodeText" : "void testContainerTokenStorage() throws IOException\n{\r\n    RecoveredContainerTokensState state = stateStore.loadContainerTokensState();\r\n    Map<ContainerId, Long> loadedActiveTokens = loadContainerTokens(state.it);\r\n    assertNull(state.getCurrentMasterKey());\r\n    assertNull(state.getPreviousMasterKey());\r\n    assertTrue(loadedActiveTokens.isEmpty());\r\n    ContainerTokenKeyGeneratorForTest keygen = new ContainerTokenKeyGeneratorForTest(new YarnConfiguration());\r\n    MasterKey currentKey = keygen.generateKey();\r\n    stateStore.storeContainerTokenCurrentMasterKey(currentKey);\r\n    restartStateStore();\r\n    state = stateStore.loadContainerTokensState();\r\n    loadedActiveTokens = loadContainerTokens(state.it);\r\n    assertEquals(currentKey, state.getCurrentMasterKey());\r\n    assertNull(state.getPreviousMasterKey());\r\n    assertTrue(loadedActiveTokens.isEmpty());\r\n    MasterKey prevKey = keygen.generateKey();\r\n    stateStore.storeContainerTokenPreviousMasterKey(prevKey);\r\n    restartStateStore();\r\n    state = stateStore.loadContainerTokensState();\r\n    loadedActiveTokens = loadContainerTokens(state.it);\r\n    assertEquals(currentKey, state.getCurrentMasterKey());\r\n    assertEquals(prevKey, state.getPreviousMasterKey());\r\n    assertTrue(loadedActiveTokens.isEmpty());\r\n    ContainerId cid1 = BuilderUtils.newContainerId(1, 1, 1, 1);\r\n    Long expTime1 = 1234567890L;\r\n    ContainerId cid2 = BuilderUtils.newContainerId(2, 2, 2, 2);\r\n    Long expTime2 = 9876543210L;\r\n    stateStore.storeContainerToken(cid1, expTime1);\r\n    stateStore.storeContainerToken(cid2, expTime2);\r\n    restartStateStore();\r\n    state = stateStore.loadContainerTokensState();\r\n    loadedActiveTokens = loadContainerTokens(state.it);\r\n    assertEquals(currentKey, state.getCurrentMasterKey());\r\n    assertEquals(prevKey, state.getPreviousMasterKey());\r\n    assertEquals(2, loadedActiveTokens.size());\r\n    assertEquals(expTime1, loadedActiveTokens.get(cid1));\r\n    assertEquals(expTime2, loadedActiveTokens.get(cid2));\r\n    ContainerId cid3 = BuilderUtils.newContainerId(3, 3, 3, 3);\r\n    Long expTime3 = 135798642L;\r\n    stateStore.storeContainerToken(cid3, expTime3);\r\n    stateStore.removeContainerToken(cid1);\r\n    expTime2 += 246897531L;\r\n    stateStore.storeContainerToken(cid2, expTime2);\r\n    prevKey = currentKey;\r\n    stateStore.storeContainerTokenPreviousMasterKey(prevKey);\r\n    currentKey = keygen.generateKey();\r\n    stateStore.storeContainerTokenCurrentMasterKey(currentKey);\r\n    restartStateStore();\r\n    state = stateStore.loadContainerTokensState();\r\n    loadedActiveTokens = loadContainerTokens(state.it);\r\n    assertEquals(currentKey, state.getCurrentMasterKey());\r\n    assertEquals(prevKey, state.getPreviousMasterKey());\r\n    assertEquals(2, loadedActiveTokens.size());\r\n    assertNull(loadedActiveTokens.get(cid1));\r\n    assertEquals(expTime2, loadedActiveTokens.get(cid2));\r\n    assertEquals(expTime3, loadedActiveTokens.get(cid3));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "testLogDeleterStorage",
  "errType" : null,
  "containingMethodsNum" : 26,
  "sourceCodeText" : "void testLogDeleterStorage() throws IOException\n{\r\n    RecoveredLogDeleterState state = stateStore.loadLogDeleterState();\r\n    assertTrue(state.getLogDeleterMap().isEmpty());\r\n    final ApplicationId appId1 = ApplicationId.newInstance(1, 1);\r\n    LogDeleterProto proto1 = LogDeleterProto.newBuilder().setUser(\"user1\").setDeletionTime(1234).build();\r\n    stateStore.storeLogDeleter(appId1, proto1);\r\n    restartStateStore();\r\n    state = stateStore.loadLogDeleterState();\r\n    assertEquals(1, state.getLogDeleterMap().size());\r\n    assertEquals(proto1, state.getLogDeleterMap().get(appId1));\r\n    final ApplicationId appId2 = ApplicationId.newInstance(2, 2);\r\n    LogDeleterProto proto2 = LogDeleterProto.newBuilder().setUser(\"user2\").setDeletionTime(5678).build();\r\n    stateStore.storeLogDeleter(appId2, proto2);\r\n    restartStateStore();\r\n    state = stateStore.loadLogDeleterState();\r\n    assertEquals(2, state.getLogDeleterMap().size());\r\n    assertEquals(proto1, state.getLogDeleterMap().get(appId1));\r\n    assertEquals(proto2, state.getLogDeleterMap().get(appId2));\r\n    stateStore.removeLogDeleter(appId1);\r\n    restartStateStore();\r\n    state = stateStore.loadLogDeleterState();\r\n    assertEquals(1, state.getLogDeleterMap().size());\r\n    assertEquals(proto2, state.getLogDeleterMap().get(appId2));\r\n    stateStore.removeLogDeleter(appId2);\r\n    restartStateStore();\r\n    state = stateStore.loadLogDeleterState();\r\n    assertTrue(state.getLogDeleterMap().isEmpty());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "testCompactionCycle",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testCompactionCycle() throws IOException\n{\r\n    final DB mockdb = mock(DB.class);\r\n    conf.setInt(YarnConfiguration.NM_RECOVERY_COMPACTION_INTERVAL_SECS, 1);\r\n    NMLeveldbStateStoreService store = new NMLeveldbStateStoreService() {\r\n\r\n        @Override\r\n        protected void checkVersion() {\r\n        }\r\n\r\n        @Override\r\n        protected DB openDatabase(Configuration conf) {\r\n            return mockdb;\r\n        }\r\n    };\r\n    store.init(conf);\r\n    store.start();\r\n    verify(mockdb, timeout(10000).atLeastOnce()).compactRange((byte[]) isNull(), (byte[]) isNull());\r\n    store.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "testUnexpectedKeyDoesntThrowException",
  "errType" : null,
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void testUnexpectedKeyDoesntThrowException() throws IOException\n{\r\n    List<RecoveredContainerState> recoveredContainers = loadContainersState(stateStore.getContainerStateIterator());\r\n    assertTrue(recoveredContainers.isEmpty());\r\n    ApplicationId appId = ApplicationId.newInstance(1234, 3);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 4);\r\n    ContainerId containerId = ContainerId.newContainerId(appAttemptId, 5);\r\n    StartContainerRequest startContainerRequest = storeMockContainer(containerId);\r\n    byte[] invalidKey = (\"ContainerManager/containers/\" + containerId.toString() + \"/invalidKey1234\").getBytes();\r\n    stateStore.getDB().put(invalidKey, new byte[1]);\r\n    restartStateStore();\r\n    recoveredContainers = loadContainersState(stateStore.getContainerStateIterator());\r\n    assertEquals(1, recoveredContainers.size());\r\n    RecoveredContainerState rcs = recoveredContainers.get(0);\r\n    assertEquals(RecoveredContainerStatus.REQUESTED, rcs.getStatus());\r\n    assertEquals(ContainerExitStatus.INVALID, rcs.getExitCode());\r\n    assertEquals(false, rcs.getKilled());\r\n    assertEquals(startContainerRequest, rcs.getStartRequest());\r\n    assertTrue(rcs.getDiagnostics().isEmpty());\r\n    assertEquals(RecoveredContainerType.KILL, rcs.getRecoveryType());\r\n    assertNotNull(stateStore.getDB().get(invalidKey));\r\n    stateStore.removeContainer(containerId);\r\n    assertNull(stateStore.getDB().get(invalidKey));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "testAMRMProxyStorage",
  "errType" : null,
  "containingMethodsNum" : 62,
  "sourceCodeText" : "void testAMRMProxyStorage() throws IOException\n{\r\n    RecoveredAMRMProxyState state = stateStore.loadAMRMProxyState();\r\n    assertThat(state.getCurrentMasterKey()).isNull();\r\n    assertThat(state.getNextMasterKey()).isNull();\r\n    assertThat(state.getAppContexts()).isEmpty();\r\n    ApplicationId appId1 = ApplicationId.newInstance(1, 1);\r\n    ApplicationId appId2 = ApplicationId.newInstance(1, 2);\r\n    ApplicationAttemptId attemptId1 = ApplicationAttemptId.newInstance(appId1, 1);\r\n    ApplicationAttemptId attemptId2 = ApplicationAttemptId.newInstance(appId2, 2);\r\n    String key1 = \"key1\";\r\n    String key2 = \"key2\";\r\n    byte[] data1 = \"data1\".getBytes();\r\n    byte[] data2 = \"data2\".getBytes();\r\n    AMRMProxyTokenSecretManager secretManager = new AMRMProxyTokenSecretManager(stateStore);\r\n    secretManager.init(conf);\r\n    secretManager.start();\r\n    try {\r\n        stateStore.storeAMRMProxyAppContextEntry(attemptId1, key1, data1);\r\n        stateStore.storeAMRMProxyAppContextEntry(attemptId2, key1, data1);\r\n        stateStore.storeAMRMProxyAppContextEntry(attemptId1, key2, data2);\r\n        stateStore.storeAMRMProxyAppContextEntry(attemptId2, key2, data2);\r\n        restartStateStore();\r\n        secretManager.setNMStateStoreService(stateStore);\r\n        state = stateStore.loadAMRMProxyState();\r\n        assertEquals(state.getCurrentMasterKey(), secretManager.getCurrentMasterKeyData().getMasterKey());\r\n        assertThat(state.getNextMasterKey()).isNull();\r\n        assertThat(state.getAppContexts()).hasSize(2);\r\n        Map<String, byte[]> map = state.getAppContexts().get(attemptId1);\r\n        assertNotEquals(map, null);\r\n        assertThat(map).hasSize(2);\r\n        assertTrue(Arrays.equals(map.get(key1), data1));\r\n        assertTrue(Arrays.equals(map.get(key2), data2));\r\n        map = state.getAppContexts().get(attemptId2);\r\n        assertNotEquals(map, null);\r\n        assertThat(map).hasSize(2);\r\n        assertTrue(Arrays.equals(map.get(key1), data1));\r\n        assertTrue(Arrays.equals(map.get(key2), data2));\r\n        secretManager.rollMasterKey();\r\n        stateStore.removeAMRMProxyAppContextEntry(attemptId2, key1);\r\n        restartStateStore();\r\n        secretManager.setNMStateStoreService(stateStore);\r\n        state = stateStore.loadAMRMProxyState();\r\n        assertEquals(state.getCurrentMasterKey(), secretManager.getCurrentMasterKeyData().getMasterKey());\r\n        assertEquals(state.getNextMasterKey(), secretManager.getNextMasterKeyData().getMasterKey());\r\n        assertEquals(state.getAppContexts().size(), 2);\r\n        map = state.getAppContexts().get(attemptId1);\r\n        assertThat(map).isNotNull();\r\n        assertThat(map).hasSize(2);\r\n        assertTrue(Arrays.equals(map.get(key1), data1));\r\n        assertTrue(Arrays.equals(map.get(key2), data2));\r\n        map = state.getAppContexts().get(attemptId2);\r\n        assertThat(map).isNotNull();\r\n        assertThat(map).hasSize(1);\r\n        assertTrue(Arrays.equals(map.get(key2), data2));\r\n        secretManager.activateNextMasterKey();\r\n        stateStore.removeAMRMProxyAppContext(attemptId1);\r\n        restartStateStore();\r\n        secretManager.setNMStateStoreService(stateStore);\r\n        state = stateStore.loadAMRMProxyState();\r\n        assertEquals(state.getCurrentMasterKey(), secretManager.getCurrentMasterKeyData().getMasterKey());\r\n        assertThat(state.getNextMasterKey()).isNull();\r\n        assertThat(state.getAppContexts()).hasSize(1);\r\n        map = state.getAppContexts().get(attemptId2);\r\n        assertThat(map).isNotNull();\r\n        assertThat(map).hasSize(1);\r\n        assertTrue(Arrays.equals(map.get(key2), data2));\r\n    } finally {\r\n        secretManager.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "testStateStoreForResourceMapping",
  "errType" : null,
  "containingMethodsNum" : 29,
  "sourceCodeText" : "void testStateStoreForResourceMapping() throws IOException\n{\r\n    List<RecoveredContainerState> recoveredContainers = loadContainersState(stateStore.getContainerStateIterator());\r\n    assertTrue(recoveredContainers.isEmpty());\r\n    ApplicationId appId = ApplicationId.newInstance(1234, 3);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 4);\r\n    ContainerId containerId = ContainerId.newContainerId(appAttemptId, 5);\r\n    storeMockContainer(containerId);\r\n    Container container = mock(Container.class);\r\n    when(container.getContainerId()).thenReturn(containerId);\r\n    ResourceMappings resourceMappings = new ResourceMappings();\r\n    when(container.getResourceMappings()).thenReturn(resourceMappings);\r\n    stateStore.storeAssignedResources(container, \"gpu\", Arrays.asList(new GpuDevice(1, 1), new GpuDevice(2, 2), new GpuDevice(3, 3)));\r\n    List<Serializable> gpuRes1 = Arrays.asList(new GpuDevice(1, 1), new GpuDevice(2, 2), new GpuDevice(4, 4));\r\n    stateStore.storeAssignedResources(container, \"gpu\", gpuRes1);\r\n    List<Serializable> fpgaRes = Arrays.asList(new FpgaDevice(\"testType\", 3, 3, \"testIPID\"), new FpgaDevice(\"testType\", 4, 4, \"testIPID\"), new FpgaDevice(\"testType\", 5, 5, \"testIPID\"), new FpgaDevice(\"testType\", 6, 6, \"testIPID\"));\r\n    stateStore.storeAssignedResources(container, \"fpga\", fpgaRes);\r\n    List<Serializable> numaRes = Arrays.asList(new NumaResourceAllocation(\"testmemNodeId\", 2048, \"testCpuNodeId\", 10));\r\n    stateStore.storeAssignedResources(container, \"numa\", numaRes);\r\n    restartStateStore();\r\n    recoveredContainers = loadContainersState(stateStore.getContainerStateIterator());\r\n    assertEquals(1, recoveredContainers.size());\r\n    RecoveredContainerState rcs = recoveredContainers.get(0);\r\n    List<Serializable> resources = rcs.getResourceMappings().getAssignedResources(\"gpu\");\r\n    Assert.assertEquals(gpuRes1, resources);\r\n    Assert.assertEquals(gpuRes1, resourceMappings.getAssignedResources(\"gpu\"));\r\n    resources = rcs.getResourceMappings().getAssignedResources(\"fpga\");\r\n    Assert.assertEquals(fpgaRes, resources);\r\n    Assert.assertEquals(fpgaRes, resourceMappings.getAssignedResources(\"fpga\"));\r\n    resources = rcs.getResourceMappings().getAssignedResources(\"numa\");\r\n    Assert.assertEquals(numaRes, resources);\r\n    Assert.assertEquals(numaRes, resourceMappings.getAssignedResources(\"numa\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "testStateStoreNodeHealth",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testStateStoreNodeHealth() throws IOException\n{\r\n    DB keepDB = stateStore.getDB();\r\n    DB myMocked = mock(DB.class);\r\n    stateStore.setDB(myMocked);\r\n    ApplicationId appId = ApplicationId.newInstance(1234, 1);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    DBException toThrow = new DBException();\r\n    Mockito.doThrow(toThrow).when(myMocked).put(any(byte[].class), any(byte[].class));\r\n    try {\r\n        ContainerId containerId = ContainerId.newContainerId(appAttemptId, 1);\r\n        stateStore.storeContainerKilled(containerId);\r\n    } catch (IOException ioErr) {\r\n        assertTrue(ioErr.getCause() instanceof DBException);\r\n        assertFalse(\"Statestore should have been unhealthy\", stateStore.isHealthy());\r\n        return;\r\n    } finally {\r\n        stateStore.setDB(keepDB);\r\n    }\r\n    Assert.fail(\"Expected exception not thrown\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "testEmptyRestartTimes",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testEmptyRestartTimes() throws IOException\n{\r\n    List<Long> restartTimes = new ArrayList<>();\r\n    ApplicationId appId = ApplicationId.newInstance(1234, 3);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 4);\r\n    ContainerId containerId = ContainerId.newContainerId(appAttemptId, 5);\r\n    storeMockContainer(containerId);\r\n    stateStore.storeContainerRestartTimes(containerId, restartTimes);\r\n    restartStateStore();\r\n    RecoveredContainerState rcs = loadContainersState(stateStore.getContainerStateIterator()).get(0);\r\n    List<Long> recoveredRestartTimes = rcs.getRestartTimes();\r\n    assertTrue(recoveredRestartTimes.isEmpty());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\recovery",
  "methodName" : "storeMockContainer",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "StartContainerRequest storeMockContainer(ContainerId containerId) throws IOException\n{\r\n    LocalResource lrsrc = LocalResource.newInstance(URL.newInstance(\"hdfs\", \"somehost\", 12345, \"/some/path/to/rsrc\"), LocalResourceType.FILE, LocalResourceVisibility.APPLICATION, 123L, 1234567890L);\r\n    Map<String, LocalResource> localResources = new HashMap<String, LocalResource>();\r\n    localResources.put(\"rsrc\", lrsrc);\r\n    Map<String, String> env = new HashMap<String, String>();\r\n    env.put(\"somevar\", \"someval\");\r\n    List<String> containerCmds = new ArrayList<String>();\r\n    containerCmds.add(\"somecmd\");\r\n    containerCmds.add(\"somearg\");\r\n    Map<String, ByteBuffer> serviceData = new HashMap<String, ByteBuffer>();\r\n    serviceData.put(\"someservice\", ByteBuffer.wrap(new byte[] { 0x1, 0x2, 0x3 }));\r\n    ByteBuffer containerTokens = ByteBuffer.wrap(new byte[] { 0x7, 0x8, 0x9, 0xa });\r\n    Map<ApplicationAccessType, String> acls = new HashMap<ApplicationAccessType, String>();\r\n    acls.put(ApplicationAccessType.VIEW_APP, \"viewuser\");\r\n    acls.put(ApplicationAccessType.MODIFY_APP, \"moduser\");\r\n    ContainerLaunchContext clc = ContainerLaunchContext.newInstance(localResources, env, containerCmds, serviceData, containerTokens, acls);\r\n    Resource containerRsrc = Resource.newInstance(1357, 3);\r\n    ContainerTokenIdentifier containerTokenId = new ContainerTokenIdentifier(containerId, \"host\", \"user\", containerRsrc, 9876543210L, 42, 2468, Priority.newInstance(7), 13579);\r\n    Token containerToken = Token.newInstance(containerTokenId.getBytes(), ContainerTokenIdentifier.KIND.toString(), \"password\".getBytes(), \"tokenservice\");\r\n    StartContainerRequest containerReq = StartContainerRequest.newInstance(clc, containerToken);\r\n    stateStore.storeContainer(containerId, 0, 0, containerReq);\r\n    return containerReq;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setup()\n{\r\n    DefaultMetricsSystem.initialize(\"NodeManager\");\r\n    metrics = NodeManagerMetrics.create();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown()\n{\r\n    DefaultMetricsSystem.shutdown();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "testReferenceOfSingletonJvmMetrics",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testReferenceOfSingletonJvmMetrics()\n{\r\n    JvmMetrics jvmMetrics = JvmMetrics.initSingleton(\"NodeManagerModule\", null);\r\n    Assert.assertEquals(\"NodeManagerMetrics should reference the singleton\" + \" JvmMetrics instance\", jvmMetrics, metrics.getJvmMetrics());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "testNames",
  "errType" : null,
  "containingMethodsNum" : 41,
  "sourceCodeText" : "void testNames()\n{\r\n    Resource total = Records.newRecord(Resource.class);\r\n    total.setMemorySize(8 * GiB);\r\n    total.setVirtualCores(16);\r\n    Resource resource = Records.newRecord(Resource.class);\r\n    resource.setMemorySize(512);\r\n    resource.setVirtualCores(2);\r\n    Resource largerResource = Records.newRecord(Resource.class);\r\n    largerResource.setMemorySize(1024);\r\n    largerResource.setVirtualCores(2);\r\n    Resource smallerResource = Records.newRecord(Resource.class);\r\n    smallerResource.setMemorySize(256);\r\n    smallerResource.setVirtualCores(1);\r\n    metrics.addResource(total);\r\n    for (int i = 10; i-- > 0; ) {\r\n        metrics.launchedContainer();\r\n        metrics.allocateContainer(resource);\r\n    }\r\n    metrics.initingContainer();\r\n    metrics.endInitingContainer();\r\n    metrics.runningContainer();\r\n    metrics.endRunningContainer();\r\n    metrics.completedContainer();\r\n    metrics.releaseContainer(resource);\r\n    metrics.failedContainer();\r\n    metrics.releaseContainer(resource);\r\n    metrics.killedContainer();\r\n    metrics.releaseContainer(resource);\r\n    metrics.initingContainer();\r\n    metrics.runningContainer();\r\n    metrics.changeContainer(resource, largerResource);\r\n    metrics.changeContainer(resource, smallerResource);\r\n    Assert.assertTrue(!metrics.containerLaunchDuration.changed());\r\n    metrics.addContainerLaunchDuration(1);\r\n    Assert.assertTrue(metrics.containerLaunchDuration.changed());\r\n    metrics.setNodeGpuUtilization(35.5F);\r\n    metrics.runningApplication();\r\n    metrics.runningApplication();\r\n    metrics.endRunningApplication();\r\n    checkMetrics(10, 1, 1, 1, 1, 1, 4, 7, 4, 13, 3, 35.5F, 1);\r\n    metrics.addResource(total);\r\n    MetricsRecordBuilder rb = getMetrics(\"NodeManagerMetrics\");\r\n    assertGauge(\"AvailableGB\", 12, rb);\r\n    assertGauge(\"AvailableVCores\", 19, rb);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\metrics",
  "methodName" : "checkMetrics",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void checkMetrics(int launched, int completed, int failed, int killed, int initing, int running, int allocatedGB, int allocatedContainers, int availableGB, int allocatedVCores, int availableVCores, Float nodeGpuUtilization, int applicationsRunning)\n{\r\n    MetricsRecordBuilder rb = getMetrics(\"NodeManagerMetrics\");\r\n    assertCounter(\"ContainersLaunched\", launched, rb);\r\n    assertCounter(\"ContainersCompleted\", completed, rb);\r\n    assertCounter(\"ContainersFailed\", failed, rb);\r\n    assertCounter(\"ContainersKilled\", killed, rb);\r\n    assertGauge(\"ContainersIniting\", initing, rb);\r\n    assertGauge(\"ContainersRunning\", running, rb);\r\n    assertGauge(\"AllocatedGB\", allocatedGB, rb);\r\n    assertGauge(\"AllocatedVCores\", allocatedVCores, rb);\r\n    assertGauge(\"AllocatedContainers\", allocatedContainers, rb);\r\n    assertGauge(\"AvailableGB\", availableGB, rb);\r\n    assertGauge(\"AvailableVCores\", availableVCores, rb);\r\n    assertGauge(\"NodeGpuUtilization\", nodeGpuUtilization, rb);\r\n    assertGauge(\"ApplicationsRunning\", applicationsRunning, rb);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "setupForTests",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setupForTests() throws IOException\n{\r\n    conf = new Configuration();\r\n    localFs = FileContext.getLocalFSFileContext(conf);\r\n    testDir.mkdirs();\r\n    testFile.createNewFile();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "teardown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void teardown()\n{\r\n    FileUtil.fullyDelete(testDir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testConcurrentAccess",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testConcurrentAccess() throws IOException\n{\r\n    String[] dirs = { testFile.getPath() };\r\n    DirectoryCollection dc = new DirectoryCollection(dirs, conf.getFloat(YarnConfiguration.NM_MAX_PER_DISK_UTILIZATION_PERCENTAGE, YarnConfiguration.DEFAULT_NM_MAX_PER_DISK_UTILIZATION_PERCENTAGE));\r\n    List<String> list = dc.getGoodDirs();\r\n    ListIterator<String> li = list.listIterator();\r\n    Assert.assertTrue(\"checkDirs did not remove test file from directory list\", dc.checkDirs());\r\n    li.next();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testCreateDirectories",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testCreateDirectories() throws IOException\n{\r\n    conf.set(CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY, \"077\");\r\n    String dirA = new File(testDir, \"dirA\").getPath();\r\n    String dirB = new File(dirA, \"dirB\").getPath();\r\n    String dirC = new File(testDir, \"dirC\").getPath();\r\n    Path pathC = new Path(dirC);\r\n    FsPermission permDirC = new FsPermission((short) 0710);\r\n    localFs.mkdir(pathC, null, true);\r\n    localFs.setPermission(pathC, permDirC);\r\n    String[] dirs = { dirA, dirB, dirC };\r\n    DirectoryCollection dc = new DirectoryCollection(dirs, conf.getFloat(YarnConfiguration.NM_MAX_PER_DISK_UTILIZATION_PERCENTAGE, YarnConfiguration.DEFAULT_NM_MAX_PER_DISK_UTILIZATION_PERCENTAGE));\r\n    FsPermission defaultPerm = FsPermission.getDefault().applyUMask(new FsPermission((short) FsPermission.DEFAULT_UMASK));\r\n    boolean createResult = dc.createNonExistentDirs(localFs, defaultPerm);\r\n    Assert.assertTrue(createResult);\r\n    FileStatus status = localFs.getFileStatus(new Path(dirA));\r\n    Assert.assertEquals(\"local dir parent not created with proper permissions\", defaultPerm, status.getPermission());\r\n    status = localFs.getFileStatus(new Path(dirB));\r\n    Assert.assertEquals(\"local dir not created with proper permissions\", defaultPerm, status.getPermission());\r\n    status = localFs.getFileStatus(pathC);\r\n    Assert.assertEquals(\"existing local directory permissions modified\", permDirC, status.getPermission());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testDiskSpaceUtilizationLimit",
  "errType" : null,
  "containingMethodsNum" : 37,
  "sourceCodeText" : "void testDiskSpaceUtilizationLimit() throws IOException\n{\r\n    String dirA = new File(testDir, \"dirA\").getPath();\r\n    String[] dirs = { dirA };\r\n    DirectoryCollection dc = new DirectoryCollection(dirs, 0.0F);\r\n    dc.checkDirs();\r\n    Assert.assertEquals(0, dc.getGoodDirs().size());\r\n    Assert.assertEquals(0, dc.getErroredDirs().size());\r\n    Assert.assertEquals(1, dc.getFailedDirs().size());\r\n    Assert.assertEquals(1, dc.getFullDirs().size());\r\n    Assert.assertNotNull(dc.getDirectoryErrorInfo(dirA));\r\n    Assert.assertEquals(DirectoryCollection.DiskErrorCause.DISK_FULL, dc.getDirectoryErrorInfo(dirA).cause);\r\n    Assert.assertEquals(0, dc.getGoodDirsDiskUtilizationPercentage());\r\n    dc = new DirectoryCollection(dirs, 100.0F);\r\n    int utilizedSpacePerc = (int) ((testDir.getTotalSpace() - testDir.getUsableSpace()) * 100 / testDir.getTotalSpace());\r\n    dc.checkDirs();\r\n    Assert.assertEquals(1, dc.getGoodDirs().size());\r\n    Assert.assertEquals(0, dc.getErroredDirs().size());\r\n    Assert.assertEquals(0, dc.getFailedDirs().size());\r\n    Assert.assertEquals(0, dc.getFullDirs().size());\r\n    Assert.assertNull(dc.getDirectoryErrorInfo(dirA));\r\n    Assert.assertEquals(utilizedSpacePerc, dc.getGoodDirsDiskUtilizationPercentage());\r\n    dc = new DirectoryCollection(dirs, testDir.getTotalSpace() / (1024 * 1024));\r\n    dc.checkDirs();\r\n    Assert.assertEquals(0, dc.getGoodDirs().size());\r\n    Assert.assertEquals(0, dc.getErroredDirs().size());\r\n    Assert.assertEquals(1, dc.getFailedDirs().size());\r\n    Assert.assertEquals(1, dc.getFullDirs().size());\r\n    Assert.assertNotNull(dc.getDirectoryErrorInfo(dirA));\r\n    Assert.assertEquals(0, dc.getGoodDirsDiskUtilizationPercentage());\r\n    dc = new DirectoryCollection(dirs, 100.0F, 100.0F, 0);\r\n    utilizedSpacePerc = (int) ((testDir.getTotalSpace() - testDir.getUsableSpace()) * 100 / testDir.getTotalSpace());\r\n    dc.checkDirs();\r\n    Assert.assertEquals(1, dc.getGoodDirs().size());\r\n    Assert.assertEquals(0, dc.getErroredDirs().size());\r\n    Assert.assertEquals(0, dc.getFailedDirs().size());\r\n    Assert.assertEquals(0, dc.getFullDirs().size());\r\n    Assert.assertNull(dc.getDirectoryErrorInfo(dirA));\r\n    Assert.assertEquals(utilizedSpacePerc, dc.getGoodDirsDiskUtilizationPercentage());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testDiskSpaceUtilizationThresholdEnabled",
  "errType" : null,
  "containingMethodsNum" : 60,
  "sourceCodeText" : "void testDiskSpaceUtilizationThresholdEnabled() throws IOException\n{\r\n    String dirA = new File(testDir, \"dirA\").getPath();\r\n    String[] dirs = { dirA };\r\n    DirectoryCollection dc = new DirectoryCollection(dirs, 0.0F);\r\n    dc.setDiskUtilizationThresholdEnabled(false);\r\n    Assert.assertFalse(dc.getDiskUtilizationThresholdEnabled());\r\n    dc.checkDirs();\r\n    Assert.assertEquals(1, dc.getGoodDirs().size());\r\n    Assert.assertEquals(0, dc.getErroredDirs().size());\r\n    Assert.assertEquals(0, dc.getFailedDirs().size());\r\n    Assert.assertEquals(0, dc.getFullDirs().size());\r\n    Assert.assertNull(dc.getDirectoryErrorInfo(dirA));\r\n    dc.setDiskUtilizationThresholdEnabled(true);\r\n    Assert.assertTrue(dc.getDiskUtilizationThresholdEnabled());\r\n    dc.checkDirs();\r\n    Assert.assertEquals(0, dc.getGoodDirs().size());\r\n    Assert.assertEquals(0, dc.getErroredDirs().size());\r\n    Assert.assertEquals(1, dc.getFailedDirs().size());\r\n    Assert.assertEquals(1, dc.getFullDirs().size());\r\n    Assert.assertNotNull(dc.getDirectoryErrorInfo(dirA));\r\n    Assert.assertEquals(DirectoryCollection.DiskErrorCause.DISK_FULL, dc.getDirectoryErrorInfo(dirA).cause);\r\n    Assert.assertEquals(0, dc.getGoodDirsDiskUtilizationPercentage());\r\n    dc = new DirectoryCollection(dirs, 100.0F);\r\n    int utilizedSpacePerc = (int) ((testDir.getTotalSpace() - testDir.getUsableSpace()) * 100 / testDir.getTotalSpace());\r\n    dc.checkDirs();\r\n    Assert.assertEquals(1, dc.getGoodDirs().size());\r\n    Assert.assertEquals(0, dc.getErroredDirs().size());\r\n    Assert.assertEquals(0, dc.getFailedDirs().size());\r\n    Assert.assertEquals(0, dc.getFullDirs().size());\r\n    Assert.assertNull(dc.getDirectoryErrorInfo(dirA));\r\n    Assert.assertEquals(utilizedSpacePerc, dc.getGoodDirsDiskUtilizationPercentage());\r\n    dc = new DirectoryCollection(dirs, testDir.getTotalSpace() / (1024 * 1024));\r\n    dc.setDiskUtilizationThresholdEnabled(false);\r\n    Assert.assertFalse(dc.getDiskUtilizationThresholdEnabled());\r\n    dc.setDiskFreeSpaceThresholdEnabled(false);\r\n    Assert.assertFalse(dc.getDiskFreeSpaceThresholdEnabled());\r\n    dc.checkDirs();\r\n    Assert.assertEquals(1, dc.getGoodDirs().size());\r\n    Assert.assertEquals(0, dc.getErroredDirs().size());\r\n    Assert.assertEquals(0, dc.getFailedDirs().size());\r\n    Assert.assertEquals(0, dc.getFullDirs().size());\r\n    Assert.assertNull(dc.getDirectoryErrorInfo(dirA));\r\n    dc = new DirectoryCollection(dirs, testDir.getTotalSpace() / (1024 * 1024));\r\n    dc.setDiskFreeSpaceThresholdEnabled(true);\r\n    Assert.assertTrue(dc.getDiskFreeSpaceThresholdEnabled());\r\n    dc.checkDirs();\r\n    Assert.assertEquals(0, dc.getGoodDirs().size());\r\n    Assert.assertEquals(0, dc.getErroredDirs().size());\r\n    Assert.assertEquals(1, dc.getFailedDirs().size());\r\n    Assert.assertEquals(1, dc.getFullDirs().size());\r\n    Assert.assertNotNull(dc.getDirectoryErrorInfo(dirA));\r\n    Assert.assertEquals(0, dc.getGoodDirsDiskUtilizationPercentage());\r\n    dc = new DirectoryCollection(dirs, 100.0F, 100.0F, 0);\r\n    utilizedSpacePerc = (int) ((testDir.getTotalSpace() - testDir.getUsableSpace()) * 100 / testDir.getTotalSpace());\r\n    dc.checkDirs();\r\n    Assert.assertEquals(1, dc.getGoodDirs().size());\r\n    Assert.assertEquals(0, dc.getErroredDirs().size());\r\n    Assert.assertEquals(0, dc.getFailedDirs().size());\r\n    Assert.assertEquals(0, dc.getFullDirs().size());\r\n    Assert.assertNull(dc.getDirectoryErrorInfo(dirA));\r\n    Assert.assertEquals(utilizedSpacePerc, dc.getGoodDirsDiskUtilizationPercentage());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testDiskLimitsCutoffSetters",
  "errType" : null,
  "containingMethodsNum" : 27,
  "sourceCodeText" : "void testDiskLimitsCutoffSetters() throws IOException\n{\r\n    String[] dirs = { \"dir\" };\r\n    DirectoryCollection dc = new DirectoryCollection(dirs, 0.0F, 0.0F, 100);\r\n    float testValue = 57.5F;\r\n    float delta = 0.1F;\r\n    dc.setDiskUtilizationPercentageCutoff(testValue, 50.0F);\r\n    Assert.assertEquals(testValue, dc.getDiskUtilizationPercentageCutoffHigh(), delta);\r\n    Assert.assertEquals(50.0F, dc.getDiskUtilizationPercentageCutoffLow(), delta);\r\n    testValue = -57.5F;\r\n    dc.setDiskUtilizationPercentageCutoff(testValue, testValue);\r\n    Assert.assertEquals(0.0F, dc.getDiskUtilizationPercentageCutoffHigh(), delta);\r\n    Assert.assertEquals(0.0F, dc.getDiskUtilizationPercentageCutoffLow(), delta);\r\n    testValue = 157.5F;\r\n    dc.setDiskUtilizationPercentageCutoff(testValue, testValue);\r\n    Assert.assertEquals(100.0F, dc.getDiskUtilizationPercentageCutoffHigh(), delta);\r\n    Assert.assertEquals(100.0F, dc.getDiskUtilizationPercentageCutoffLow(), delta);\r\n    long lowSpaceValue = 57;\r\n    dc.setDiskUtilizationSpaceCutoff(lowSpaceValue);\r\n    Assert.assertEquals(lowSpaceValue, dc.getDiskUtilizationSpaceCutoffLow());\r\n    Assert.assertEquals(lowSpaceValue, dc.getDiskUtilizationSpaceCutoffHigh());\r\n    long highSpaceValue = 73;\r\n    dc.setDiskUtilizationSpaceCutoff(lowSpaceValue, highSpaceValue);\r\n    Assert.assertEquals(lowSpaceValue, dc.getDiskUtilizationSpaceCutoffLow());\r\n    Assert.assertEquals(highSpaceValue, dc.getDiskUtilizationSpaceCutoffHigh());\r\n    lowSpaceValue = -57;\r\n    dc.setDiskUtilizationSpaceCutoff(lowSpaceValue);\r\n    Assert.assertEquals(0, dc.getDiskUtilizationSpaceCutoffLow());\r\n    Assert.assertEquals(0, dc.getDiskUtilizationSpaceCutoffHigh());\r\n    dc.setDiskUtilizationSpaceCutoff(lowSpaceValue, highSpaceValue);\r\n    Assert.assertEquals(0, dc.getDiskUtilizationSpaceCutoffLow());\r\n    Assert.assertEquals(highSpaceValue, dc.getDiskUtilizationSpaceCutoffHigh());\r\n    highSpaceValue = -10;\r\n    dc.setDiskUtilizationSpaceCutoff(lowSpaceValue, highSpaceValue);\r\n    Assert.assertEquals(0, dc.getDiskUtilizationSpaceCutoffLow());\r\n    Assert.assertEquals(0, dc.getDiskUtilizationSpaceCutoffHigh());\r\n    lowSpaceValue = 33;\r\n    dc.setDiskUtilizationSpaceCutoff(lowSpaceValue, highSpaceValue);\r\n    Assert.assertEquals(lowSpaceValue, dc.getDiskUtilizationSpaceCutoffLow());\r\n    Assert.assertEquals(lowSpaceValue, dc.getDiskUtilizationSpaceCutoffHigh());\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testFailedDisksBecomingGoodAgain",
  "errType" : null,
  "containingMethodsNum" : 33,
  "sourceCodeText" : "void testFailedDisksBecomingGoodAgain() throws Exception\n{\r\n    String dirA = new File(testDir, \"dirA\").getPath();\r\n    String[] dirs = { dirA };\r\n    DirectoryCollection dc = new DirectoryCollection(dirs, 0.0F);\r\n    dc.checkDirs();\r\n    Assert.assertEquals(0, dc.getGoodDirs().size());\r\n    Assert.assertEquals(1, dc.getFailedDirs().size());\r\n    Assert.assertEquals(1, dc.getFullDirs().size());\r\n    Assert.assertEquals(0, dc.getErroredDirs().size());\r\n    Assert.assertNotNull(dc.getDirectoryErrorInfo(dirA));\r\n    Assert.assertEquals(DirectoryCollection.DiskErrorCause.DISK_FULL, dc.getDirectoryErrorInfo(dirA).cause);\r\n    dc.setDiskUtilizationPercentageCutoff(100.0F, 100.0F);\r\n    dc.checkDirs();\r\n    Assert.assertEquals(1, dc.getGoodDirs().size());\r\n    Assert.assertEquals(0, dc.getFailedDirs().size());\r\n    Assert.assertEquals(0, dc.getFullDirs().size());\r\n    Assert.assertEquals(0, dc.getErroredDirs().size());\r\n    Assert.assertNull(dc.getDirectoryErrorInfo(dirA));\r\n    conf.set(CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY, \"077\");\r\n    String dirB = new File(testDir, \"dirB\").getPath();\r\n    Path pathB = new Path(dirB);\r\n    FsPermission permDirB = new FsPermission((short) 0400);\r\n    localFs.mkdir(pathB, null, true);\r\n    localFs.setPermission(pathB, permDirB);\r\n    String[] dirs2 = { dirB };\r\n    dc = new DirectoryCollection(dirs2, 100.0F);\r\n    dc.checkDirs();\r\n    Assert.assertEquals(0, dc.getGoodDirs().size());\r\n    Assert.assertEquals(1, dc.getFailedDirs().size());\r\n    Assert.assertEquals(0, dc.getFullDirs().size());\r\n    Assert.assertEquals(1, dc.getErroredDirs().size());\r\n    Assert.assertNotNull(dc.getDirectoryErrorInfo(dirB));\r\n    Assert.assertEquals(DirectoryCollection.DiskErrorCause.OTHER, dc.getDirectoryErrorInfo(dirB).cause);\r\n    permDirB = new FsPermission((short) 0700);\r\n    localFs.setPermission(pathB, permDirB);\r\n    dc.checkDirs();\r\n    Assert.assertEquals(1, dc.getGoodDirs().size());\r\n    Assert.assertEquals(0, dc.getFailedDirs().size());\r\n    Assert.assertEquals(0, dc.getFullDirs().size());\r\n    Assert.assertEquals(0, dc.getErroredDirs().size());\r\n    Assert.assertNull(dc.getDirectoryErrorInfo(dirA));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testConstructors",
  "errType" : null,
  "containingMethodsNum" : 48,
  "sourceCodeText" : "void testConstructors()\n{\r\n    String[] dirs = { \"dir\" };\r\n    float delta = 0.1F;\r\n    DirectoryCollection dc = new DirectoryCollection(dirs);\r\n    Assert.assertEquals(100.0F, dc.getDiskUtilizationPercentageCutoffHigh(), delta);\r\n    Assert.assertEquals(100.0F, dc.getDiskUtilizationPercentageCutoffLow(), delta);\r\n    Assert.assertEquals(0, dc.getDiskUtilizationSpaceCutoffLow());\r\n    Assert.assertEquals(0, dc.getDiskUtilizationSpaceCutoffHigh());\r\n    dc = new DirectoryCollection(dirs, 57.5F);\r\n    Assert.assertEquals(57.5F, dc.getDiskUtilizationPercentageCutoffHigh(), delta);\r\n    Assert.assertEquals(57.5F, dc.getDiskUtilizationPercentageCutoffLow(), delta);\r\n    Assert.assertEquals(0, dc.getDiskUtilizationSpaceCutoffLow());\r\n    Assert.assertEquals(0, dc.getDiskUtilizationSpaceCutoffHigh());\r\n    dc = new DirectoryCollection(dirs, 57);\r\n    Assert.assertEquals(100.0F, dc.getDiskUtilizationPercentageCutoffHigh(), delta);\r\n    Assert.assertEquals(100.0F, dc.getDiskUtilizationPercentageCutoffLow(), delta);\r\n    Assert.assertEquals(57, dc.getDiskUtilizationSpaceCutoffLow());\r\n    Assert.assertEquals(57, dc.getDiskUtilizationSpaceCutoffHigh());\r\n    dc = new DirectoryCollection(dirs, 57, 73);\r\n    Assert.assertEquals(100.0F, dc.getDiskUtilizationPercentageCutoffHigh(), delta);\r\n    Assert.assertEquals(100.0F, dc.getDiskUtilizationPercentageCutoffLow(), delta);\r\n    Assert.assertEquals(57, dc.getDiskUtilizationSpaceCutoffLow());\r\n    Assert.assertEquals(73, dc.getDiskUtilizationSpaceCutoffHigh());\r\n    dc = new DirectoryCollection(dirs, 57, 33);\r\n    Assert.assertEquals(100.0F, dc.getDiskUtilizationPercentageCutoffHigh(), delta);\r\n    Assert.assertEquals(100.0F, dc.getDiskUtilizationPercentageCutoffLow(), delta);\r\n    Assert.assertEquals(57, dc.getDiskUtilizationSpaceCutoffLow());\r\n    Assert.assertEquals(57, dc.getDiskUtilizationSpaceCutoffHigh());\r\n    dc = new DirectoryCollection(dirs, 57, -33);\r\n    Assert.assertEquals(100.0F, dc.getDiskUtilizationPercentageCutoffHigh(), delta);\r\n    Assert.assertEquals(100.0F, dc.getDiskUtilizationPercentageCutoffLow(), delta);\r\n    Assert.assertEquals(57, dc.getDiskUtilizationSpaceCutoffLow());\r\n    Assert.assertEquals(57, dc.getDiskUtilizationSpaceCutoffHigh());\r\n    dc = new DirectoryCollection(dirs, -57, -33);\r\n    Assert.assertEquals(100.0F, dc.getDiskUtilizationPercentageCutoffHigh(), delta);\r\n    Assert.assertEquals(100.0F, dc.getDiskUtilizationPercentageCutoffLow(), delta);\r\n    Assert.assertEquals(0, dc.getDiskUtilizationSpaceCutoffLow());\r\n    Assert.assertEquals(0, dc.getDiskUtilizationSpaceCutoffHigh());\r\n    dc = new DirectoryCollection(dirs, -57, 33);\r\n    Assert.assertEquals(100.0F, dc.getDiskUtilizationPercentageCutoffHigh(), delta);\r\n    Assert.assertEquals(100.0F, dc.getDiskUtilizationPercentageCutoffLow(), delta);\r\n    Assert.assertEquals(0, dc.getDiskUtilizationSpaceCutoffLow());\r\n    Assert.assertEquals(33, dc.getDiskUtilizationSpaceCutoffHigh());\r\n    dc = new DirectoryCollection(dirs, 57.5F, 50.5F, 67);\r\n    Assert.assertEquals(57.5F, dc.getDiskUtilizationPercentageCutoffHigh(), delta);\r\n    Assert.assertEquals(50.5F, dc.getDiskUtilizationPercentageCutoffLow(), delta);\r\n    Assert.assertEquals(67, dc.getDiskUtilizationSpaceCutoffLow());\r\n    Assert.assertEquals(67, dc.getDiskUtilizationSpaceCutoffHigh());\r\n    dc = new DirectoryCollection(dirs, -57.5F, -57.5F, -67);\r\n    Assert.assertEquals(0.0F, dc.getDiskUtilizationPercentageCutoffHigh(), delta);\r\n    Assert.assertEquals(0.0F, dc.getDiskUtilizationPercentageCutoffLow(), delta);\r\n    Assert.assertEquals(0, dc.getDiskUtilizationSpaceCutoffLow());\r\n    Assert.assertEquals(0, dc.getDiskUtilizationSpaceCutoffHigh());\r\n    dc = new DirectoryCollection(dirs, 157.5F, 157.5F, -67);\r\n    Assert.assertEquals(100.0F, dc.getDiskUtilizationPercentageCutoffHigh(), delta);\r\n    Assert.assertEquals(100.0F, dc.getDiskUtilizationPercentageCutoffLow(), delta);\r\n    Assert.assertEquals(0, dc.getDiskUtilizationSpaceCutoffLow());\r\n    Assert.assertEquals(0, dc.getDiskUtilizationSpaceCutoffHigh());\r\n    dc = new DirectoryCollection(dirs, 157.5F, 157.5F, 5, 10);\r\n    Assert.assertEquals(100.0F, dc.getDiskUtilizationPercentageCutoffHigh(), delta);\r\n    Assert.assertEquals(100.0F, dc.getDiskUtilizationPercentageCutoffLow(), delta);\r\n    Assert.assertEquals(5, dc.getDiskUtilizationSpaceCutoffLow());\r\n    Assert.assertEquals(10, dc.getDiskUtilizationSpaceCutoffHigh());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testDirsChangeListener",
  "errType" : null,
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void testDirsChangeListener()\n{\r\n    DirsChangeListenerTest listener1 = new DirsChangeListenerTest();\r\n    DirsChangeListenerTest listener2 = new DirsChangeListenerTest();\r\n    DirsChangeListenerTest listener3 = new DirsChangeListenerTest();\r\n    String dirA = new File(testDir, \"dirA\").getPath();\r\n    String[] dirs = { dirA };\r\n    DirectoryCollection dc = new DirectoryCollection(dirs, 0.0F);\r\n    Assert.assertEquals(1, dc.getGoodDirs().size());\r\n    Assert.assertEquals(listener1.num, 0);\r\n    Assert.assertEquals(listener2.num, 0);\r\n    Assert.assertEquals(listener3.num, 0);\r\n    dc.registerDirsChangeListener(listener1);\r\n    dc.registerDirsChangeListener(listener2);\r\n    dc.registerDirsChangeListener(listener3);\r\n    Assert.assertEquals(listener1.num, 1);\r\n    Assert.assertEquals(listener2.num, 1);\r\n    Assert.assertEquals(listener3.num, 1);\r\n    dc.deregisterDirsChangeListener(listener3);\r\n    dc.checkDirs();\r\n    Assert.assertEquals(0, dc.getGoodDirs().size());\r\n    Assert.assertEquals(listener1.num, 2);\r\n    Assert.assertEquals(listener2.num, 2);\r\n    Assert.assertEquals(listener3.num, 1);\r\n    dc.deregisterDirsChangeListener(listener2);\r\n    dc.setDiskUtilizationPercentageCutoff(100.0F, 100.0F);\r\n    dc.checkDirs();\r\n    Assert.assertEquals(1, dc.getGoodDirs().size());\r\n    Assert.assertEquals(listener1.num, 3);\r\n    Assert.assertEquals(listener2.num, 2);\r\n    Assert.assertEquals(listener3.num, 1);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void setup()\n{\r\n    mockContainerScheduler = mock(ContainerScheduler.class);\r\n    ContainersMonitor containersMonitor = new ContainersMonitorImpl(mock(ContainerExecutor.class), mock(AsyncDispatcher.class), mock(Context.class));\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.setInt(YarnConfiguration.NM_PMEM_MB, 1024);\r\n    conf.setBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED, true);\r\n    conf.setBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED, true);\r\n    conf.setFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO, 2.0f);\r\n    conf.setInt(YarnConfiguration.NM_VCORES, 8);\r\n    containersMonitor.init(conf);\r\n    when(mockContainerScheduler.getContainersMonitor()).thenReturn(containersMonitor);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\scheduler",
  "methodName" : "testHasResourcesAvailable",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testHasResourcesAvailable()\n{\r\n    AllocationBasedResourceUtilizationTracker tracker = new AllocationBasedResourceUtilizationTracker(mockContainerScheduler);\r\n    Container testContainer = mock(Container.class);\r\n    when(testContainer.getResource()).thenReturn(Resource.newInstance(512, 4));\r\n    for (int i = 0; i < 2; i++) {\r\n        Assert.assertTrue(tracker.hasResourcesAvailable(testContainer));\r\n        tracker.addContainerResources(testContainer);\r\n    }\r\n    Assert.assertFalse(tracker.hasResourcesAvailable(testContainer));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "registerApplicationMaster",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RegisterApplicationMasterResponse registerApplicationMaster(RegisterApplicationMasterRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().registerApplicationMaster(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "finishApplicationMaster",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FinishApplicationMasterResponse finishApplicationMaster(FinishApplicationMasterRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().finishApplicationMaster(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\amrmproxy",
  "methodName" : "allocate",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AllocateResponse allocate(AllocateRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().allocate(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "setupClass",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setupClass()\n{\r\n    mockServer = mock(Server.class);\r\n    doReturn(new InetSocketAddress(123)).when(mockServer).getListenerAddress();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setup() throws IOException\n{\r\n    conf = new Configuration();\r\n    spylfs = spy(FileContext.getLocalFSFileContext().getDefaultFileSystem());\r\n    lfs = FileContext.getFileContext(spylfs, conf);\r\n    String logDir = lfs.makeQualified(new Path(basedir, \"logdir \")).toString();\r\n    conf.set(YarnConfiguration.NM_LOG_DIRS, logDir);\r\n    nmContext = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), new NMNullStateStoreService(), false, conf);\r\n    metrics = mock(NodeManagerMetrics.class);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "cleanup",
  "errType" : [ "IOException|IllegalArgumentException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void cleanup() throws IOException\n{\r\n    conf = null;\r\n    try {\r\n        FileUtils.deleteDirectory(new File(basedir.toString()));\r\n    } catch (IOException | IllegalArgumentException e) {\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testLocalizationInit",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testLocalizationInit() throws Exception\n{\r\n    conf.set(CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY, \"077\");\r\n    AsyncDispatcher dispatcher = new AsyncDispatcher();\r\n    dispatcher.init(new Configuration());\r\n    ContainerExecutor exec = mock(ContainerExecutor.class);\r\n    DeletionService delService = spy(new DeletionService(exec));\r\n    delService.init(conf);\r\n    delService.start();\r\n    List<Path> localDirs = new ArrayList<Path>();\r\n    String[] sDirs = new String[4];\r\n    for (int i = 0; i < 4; ++i) {\r\n        localDirs.add(lfs.makeQualified(new Path(basedir, i + \"\")));\r\n        sDirs[i] = localDirs.get(i).toString();\r\n    }\r\n    conf.setStrings(YarnConfiguration.NM_LOCAL_DIRS, sDirs);\r\n    LocalDirsHandlerService diskhandler = new LocalDirsHandlerService();\r\n    diskhandler.init(conf);\r\n    ResourceLocalizationService locService = spy(new ResourceLocalizationService(dispatcher, exec, delService, diskhandler, nmContext, metrics));\r\n    doReturn(lfs).when(locService).getLocalFileContext(isA(Configuration.class));\r\n    try {\r\n        dispatcher.start();\r\n        locService.init(conf);\r\n        final FsPermission defaultPerm = new FsPermission((short) 0755);\r\n        for (Path p : localDirs) {\r\n            p = new Path((new URI(p.toString())).getPath());\r\n            Path usercache = new Path(p, ContainerLocalizer.USERCACHE);\r\n            verify(spylfs).mkdir(eq(usercache), eq(defaultPerm), eq(true));\r\n            Path publicCache = new Path(p, ContainerLocalizer.FILECACHE);\r\n            verify(spylfs).mkdir(eq(publicCache), eq(defaultPerm), eq(true));\r\n            Path nmPriv = new Path(p, ResourceLocalizationService.NM_PRIVATE_DIR);\r\n            verify(spylfs).mkdir(eq(nmPriv), eq(ResourceLocalizationService.NM_PRIVATE_PERM), eq(true));\r\n        }\r\n    } finally {\r\n        dispatcher.stop();\r\n        delService.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testDirectoryCleanupOnNewlyCreatedStateStore",
  "errType" : null,
  "containingMethodsNum" : 26,
  "sourceCodeText" : "void testDirectoryCleanupOnNewlyCreatedStateStore() throws IOException, URISyntaxException\n{\r\n    conf.set(CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY, \"077\");\r\n    AsyncDispatcher dispatcher = new AsyncDispatcher();\r\n    dispatcher.init(new Configuration());\r\n    ContainerExecutor exec = mock(ContainerExecutor.class);\r\n    DeletionService delService = spy(new DeletionService(exec));\r\n    delService.init(conf);\r\n    delService.start();\r\n    List<Path> localDirs = new ArrayList<Path>();\r\n    String[] sDirs = new String[4];\r\n    for (int i = 0; i < 4; ++i) {\r\n        localDirs.add(lfs.makeQualified(new Path(basedir, i + \"\")));\r\n        sDirs[i] = localDirs.get(i).toString();\r\n    }\r\n    conf.setStrings(YarnConfiguration.NM_LOCAL_DIRS, sDirs);\r\n    LocalDirsHandlerService diskhandler = new LocalDirsHandlerService();\r\n    diskhandler.init(conf);\r\n    NMStateStoreService nmStateStoreService = mock(NMStateStoreService.class);\r\n    when(nmStateStoreService.canRecover()).thenReturn(true);\r\n    when(nmStateStoreService.isNewlyCreated()).thenReturn(true);\r\n    ResourceLocalizationService locService = spy(new ResourceLocalizationService(dispatcher, exec, delService, diskhandler, nmContext, metrics));\r\n    doReturn(lfs).when(locService).getLocalFileContext(isA(Configuration.class));\r\n    try {\r\n        dispatcher.start();\r\n        locService.init(conf);\r\n        final FsPermission defaultPerm = new FsPermission((short) 0755);\r\n        for (Path p : localDirs) {\r\n            p = new Path((new URI(p.toString())).getPath());\r\n            Path usercache = new Path(p, ContainerLocalizer.USERCACHE);\r\n            verify(spylfs).rename(eq(usercache), any(Path.class), any());\r\n            verify(spylfs).mkdir(eq(usercache), eq(defaultPerm), eq(true));\r\n            Path publicCache = new Path(p, ContainerLocalizer.FILECACHE);\r\n            verify(spylfs).rename(eq(usercache), any(Path.class), any());\r\n            verify(spylfs).mkdir(eq(publicCache), eq(defaultPerm), eq(true));\r\n            Path nmPriv = new Path(p, ResourceLocalizationService.NM_PRIVATE_DIR);\r\n            verify(spylfs).rename(eq(usercache), any(Path.class), any());\r\n            verify(spylfs).mkdir(eq(nmPriv), eq(ResourceLocalizationService.NM_PRIVATE_PERM), eq(true));\r\n        }\r\n    } finally {\r\n        dispatcher.stop();\r\n        delService.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testResourceRelease",
  "errType" : null,
  "containingMethodsNum" : 76,
  "sourceCodeText" : "void testResourceRelease() throws Exception\n{\r\n    List<Path> localDirs = new ArrayList<Path>();\r\n    String[] sDirs = new String[4];\r\n    for (int i = 0; i < 4; ++i) {\r\n        localDirs.add(lfs.makeQualified(new Path(basedir, i + \"\")));\r\n        sDirs[i] = localDirs.get(i).toString();\r\n    }\r\n    conf.setStrings(YarnConfiguration.NM_LOCAL_DIRS, sDirs);\r\n    LocalizerTracker mockLocallilzerTracker = mock(LocalizerTracker.class);\r\n    DrainDispatcher dispatcher = new DrainDispatcher();\r\n    dispatcher.init(conf);\r\n    dispatcher.start();\r\n    EventHandler<ApplicationEvent> applicationBus = mock(EventHandler.class);\r\n    dispatcher.register(ApplicationEventType.class, applicationBus);\r\n    EventHandler<ContainerEvent> containerBus = mock(EventHandler.class);\r\n    dispatcher.register(ContainerEventType.class, containerBus);\r\n    EventHandler<LocalizerEvent> localizerBus = mock(EventHandler.class);\r\n    dispatcher.register(LocalizerEventType.class, localizerBus);\r\n    ContainerExecutor exec = mock(ContainerExecutor.class);\r\n    LocalDirsHandlerService dirsHandler = new LocalDirsHandlerService();\r\n    dirsHandler.init(conf);\r\n    DeletionService delService = new DeletionService(exec);\r\n    delService.init(new Configuration());\r\n    delService.start();\r\n    ResourceLocalizationService rawService = new ResourceLocalizationService(dispatcher, exec, delService, dirsHandler, nmContext, metrics);\r\n    ResourceLocalizationService spyService = spy(rawService);\r\n    doReturn(mockServer).when(spyService).createServer();\r\n    doReturn(mockLocallilzerTracker).when(spyService).createLocalizerTracker(isA(Configuration.class));\r\n    doReturn(lfs).when(spyService).getLocalFileContext(isA(Configuration.class));\r\n    try {\r\n        spyService.init(conf);\r\n        spyService.start();\r\n        final String user = \"user0\";\r\n        final Application app = mock(Application.class);\r\n        final ApplicationId appId = BuilderUtils.newApplicationId(314159265358979L, 3);\r\n        when(app.getUser()).thenReturn(user);\r\n        when(app.getAppId()).thenReturn(appId);\r\n        spyService.handle(new ApplicationLocalizationEvent(LocalizationEventType.INIT_APPLICATION_RESOURCES, app));\r\n        dispatcher.await();\r\n        LocalResourcesTracker appTracker = spyService.getLocalResourcesTracker(LocalResourceVisibility.APPLICATION, user, appId);\r\n        LocalResourcesTracker privTracker = spyService.getLocalResourcesTracker(LocalResourceVisibility.PRIVATE, user, appId);\r\n        LocalResourcesTracker pubTracker = spyService.getLocalResourcesTracker(LocalResourceVisibility.PUBLIC, user, appId);\r\n        final Container c = getMockContainer(appId, 42, user);\r\n        Random r = new Random();\r\n        long seed = r.nextLong();\r\n        System.out.println(\"SEED: \" + seed);\r\n        r.setSeed(seed);\r\n        final LocalResource privResource = getPrivateMockedResource(r);\r\n        final LocalResourceRequest privReq = new LocalResourceRequest(privResource);\r\n        final LocalResource pubResource = getPublicMockedResource(r);\r\n        final LocalResourceRequest pubReq = new LocalResourceRequest(pubResource);\r\n        final LocalResource pubResource2 = getPublicMockedResource(r);\r\n        final LocalResourceRequest pubReq2 = new LocalResourceRequest(pubResource2);\r\n        final LocalResource appResource = getAppMockedResource(r);\r\n        final LocalResourceRequest appReq = new LocalResourceRequest(appResource);\r\n        Map<LocalResourceVisibility, Collection<LocalResourceRequest>> req = new HashMap<LocalResourceVisibility, Collection<LocalResourceRequest>>();\r\n        req.put(LocalResourceVisibility.PRIVATE, Collections.singletonList(privReq));\r\n        req.put(LocalResourceVisibility.PUBLIC, Collections.singletonList(pubReq));\r\n        req.put(LocalResourceVisibility.APPLICATION, Collections.singletonList(appReq));\r\n        Map<LocalResourceVisibility, Collection<LocalResourceRequest>> req2 = new HashMap<LocalResourceVisibility, Collection<LocalResourceRequest>>();\r\n        req2.put(LocalResourceVisibility.PRIVATE, Collections.singletonList(privReq));\r\n        req2.put(LocalResourceVisibility.PUBLIC, Collections.singletonList(pubReq2));\r\n        Set<LocalResourceRequest> pubRsrcs = new HashSet<LocalResourceRequest>();\r\n        pubRsrcs.add(pubReq);\r\n        pubRsrcs.add(pubReq2);\r\n        spyService.handle(new ContainerLocalizationRequestEvent(c, req));\r\n        spyService.handle(new ContainerLocalizationRequestEvent(c, req2));\r\n        dispatcher.await();\r\n        int privRsrcCount = 0;\r\n        for (LocalizedResource lr : privTracker) {\r\n            privRsrcCount++;\r\n            Assert.assertEquals(\"Incorrect reference count\", 2, lr.getRefCount());\r\n            Assert.assertEquals(privReq, lr.getRequest());\r\n        }\r\n        Assert.assertEquals(1, privRsrcCount);\r\n        int pubRsrcCount = 0;\r\n        for (LocalizedResource lr : pubTracker) {\r\n            pubRsrcCount++;\r\n            Assert.assertEquals(\"Incorrect reference count\", 1, lr.getRefCount());\r\n            pubRsrcs.remove(lr.getRequest());\r\n        }\r\n        Assert.assertEquals(0, pubRsrcs.size());\r\n        Assert.assertEquals(2, pubRsrcCount);\r\n        int appRsrcCount = 0;\r\n        for (LocalizedResource lr : appTracker) {\r\n            appRsrcCount++;\r\n            Assert.assertEquals(\"Incorrect reference count\", 1, lr.getRefCount());\r\n            Assert.assertEquals(appReq, lr.getRequest());\r\n        }\r\n        Assert.assertEquals(1, appRsrcCount);\r\n        spyService.handle(new ContainerLocalizationCleanupEvent(c, req));\r\n        verify(mockLocallilzerTracker).cleanupPrivLocalizers(\"container_314159265358979_0003_01_000042\");\r\n        req2.remove(LocalResourceVisibility.PRIVATE);\r\n        spyService.handle(new ContainerLocalizationCleanupEvent(c, req2));\r\n        dispatcher.await();\r\n        pubRsrcs.add(pubReq);\r\n        pubRsrcs.add(pubReq2);\r\n        privRsrcCount = 0;\r\n        for (LocalizedResource lr : privTracker) {\r\n            privRsrcCount++;\r\n            Assert.assertEquals(\"Incorrect reference count\", 1, lr.getRefCount());\r\n            Assert.assertEquals(privReq, lr.getRequest());\r\n        }\r\n        Assert.assertEquals(1, privRsrcCount);\r\n        pubRsrcCount = 0;\r\n        for (LocalizedResource lr : pubTracker) {\r\n            pubRsrcCount++;\r\n            Assert.assertEquals(\"Incorrect reference count\", 0, lr.getRefCount());\r\n            pubRsrcs.remove(lr.getRequest());\r\n        }\r\n        Assert.assertEquals(0, pubRsrcs.size());\r\n        Assert.assertEquals(2, pubRsrcCount);\r\n        appRsrcCount = 0;\r\n        for (LocalizedResource lr : appTracker) {\r\n            appRsrcCount++;\r\n        }\r\n        Assert.assertEquals(0, appRsrcCount);\r\n    } finally {\r\n        dispatcher.stop();\r\n        delService.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testRecovery",
  "errType" : null,
  "containingMethodsNum" : 119,
  "sourceCodeText" : "void testRecovery() throws Exception\n{\r\n    final String user1 = \"user1\";\r\n    final String user2 = \"user2\";\r\n    final ApplicationId appId1 = ApplicationId.newInstance(1, 1);\r\n    final ApplicationId appId2 = ApplicationId.newInstance(1, 2);\r\n    List<Path> localDirs = new ArrayList<Path>();\r\n    String[] sDirs = new String[4];\r\n    for (int i = 0; i < 4; ++i) {\r\n        localDirs.add(lfs.makeQualified(new Path(basedir, i + \"\")));\r\n        sDirs[i] = localDirs.get(i).toString();\r\n    }\r\n    conf.setStrings(YarnConfiguration.NM_LOCAL_DIRS, sDirs);\r\n    conf.setBoolean(YarnConfiguration.NM_RECOVERY_ENABLED, true);\r\n    NMMemoryStateStoreService stateStore = new NMMemoryStateStoreService();\r\n    stateStore.init(conf);\r\n    stateStore.start();\r\n    DrainDispatcher dispatcher = new DrainDispatcher();\r\n    dispatcher.init(conf);\r\n    dispatcher.start();\r\n    EventHandler<ApplicationEvent> applicationBus = mock(EventHandler.class);\r\n    dispatcher.register(ApplicationEventType.class, applicationBus);\r\n    EventHandler<ContainerEvent> containerBus = mock(EventHandler.class);\r\n    dispatcher.register(ContainerEventType.class, containerBus);\r\n    EventHandler<LocalizerEvent> localizerBus = mock(EventHandler.class);\r\n    dispatcher.register(LocalizerEventType.class, localizerBus);\r\n    LocalDirsHandlerService dirsHandler = new LocalDirsHandlerService();\r\n    dirsHandler.init(conf);\r\n    ResourceLocalizationService spyService = createSpyService(dispatcher, dirsHandler, stateStore);\r\n    try {\r\n        spyService.init(conf);\r\n        spyService.start();\r\n        final Application app1 = mock(Application.class);\r\n        when(app1.getUser()).thenReturn(user1);\r\n        when(app1.getAppId()).thenReturn(appId1);\r\n        final Application app2 = mock(Application.class);\r\n        when(app2.getUser()).thenReturn(user2);\r\n        when(app2.getAppId()).thenReturn(appId2);\r\n        spyService.handle(new ApplicationLocalizationEvent(LocalizationEventType.INIT_APPLICATION_RESOURCES, app1));\r\n        spyService.handle(new ApplicationLocalizationEvent(LocalizationEventType.INIT_APPLICATION_RESOURCES, app2));\r\n        dispatcher.await();\r\n        LocalResourcesTracker appTracker1 = spyService.getLocalResourcesTracker(LocalResourceVisibility.APPLICATION, user1, appId1);\r\n        LocalResourcesTracker privTracker1 = spyService.getLocalResourcesTracker(LocalResourceVisibility.PRIVATE, user1, null);\r\n        LocalResourcesTracker appTracker2 = spyService.getLocalResourcesTracker(LocalResourceVisibility.APPLICATION, user2, appId2);\r\n        LocalResourcesTracker pubTracker = spyService.getLocalResourcesTracker(LocalResourceVisibility.PUBLIC, null, null);\r\n        final Container c1 = getMockContainer(appId1, 1, user1);\r\n        final Container c2 = getMockContainer(appId2, 2, user2);\r\n        Random r = new Random();\r\n        long seed = r.nextLong();\r\n        System.out.println(\"SEED: \" + seed);\r\n        r.setSeed(seed);\r\n        final LocalResource privResource1 = getPrivateMockedResource(r);\r\n        final LocalResourceRequest privReq1 = new LocalResourceRequest(privResource1);\r\n        final LocalResource privResource2 = getPrivateMockedResource(r);\r\n        final LocalResourceRequest privReq2 = new LocalResourceRequest(privResource2);\r\n        final LocalResource pubResource1 = getPublicMockedResource(r);\r\n        final LocalResourceRequest pubReq1 = new LocalResourceRequest(pubResource1);\r\n        final LocalResource pubResource2 = getPublicMockedResource(r);\r\n        final LocalResourceRequest pubReq2 = new LocalResourceRequest(pubResource2);\r\n        final LocalResource appResource1 = getAppMockedResource(r);\r\n        final LocalResourceRequest appReq1 = new LocalResourceRequest(appResource1);\r\n        final LocalResource appResource2 = getAppMockedResource(r);\r\n        final LocalResourceRequest appReq2 = new LocalResourceRequest(appResource2);\r\n        final LocalResource appResource3 = getAppMockedResource(r);\r\n        final LocalResourceRequest appReq3 = new LocalResourceRequest(appResource3);\r\n        Map<LocalResourceVisibility, Collection<LocalResourceRequest>> req1 = new HashMap<LocalResourceVisibility, Collection<LocalResourceRequest>>();\r\n        req1.put(LocalResourceVisibility.PRIVATE, Arrays.asList(new LocalResourceRequest[] { privReq1, privReq2 }));\r\n        req1.put(LocalResourceVisibility.PUBLIC, Collections.singletonList(pubReq1));\r\n        req1.put(LocalResourceVisibility.APPLICATION, Collections.singletonList(appReq1));\r\n        Map<LocalResourceVisibility, Collection<LocalResourceRequest>> req2 = new HashMap<LocalResourceVisibility, Collection<LocalResourceRequest>>();\r\n        req2.put(LocalResourceVisibility.APPLICATION, Arrays.asList(new LocalResourceRequest[] { appReq2, appReq3 }));\r\n        req2.put(LocalResourceVisibility.PUBLIC, Collections.singletonList(pubReq2));\r\n        spyService.handle(new ContainerLocalizationRequestEvent(c1, req1));\r\n        spyService.handle(new ContainerLocalizationRequestEvent(c2, req2));\r\n        dispatcher.await();\r\n        privTracker1.getPathForLocalization(privReq1, dirsHandler.getLocalPathForWrite(ContainerLocalizer.USERCACHE + user1), null);\r\n        privTracker1.getPathForLocalization(privReq2, dirsHandler.getLocalPathForWrite(ContainerLocalizer.USERCACHE + user1), null);\r\n        LocalizedResource privLr1 = privTracker1.getLocalizedResource(privReq1);\r\n        LocalizedResource privLr2 = privTracker1.getLocalizedResource(privReq2);\r\n        appTracker1.getPathForLocalization(appReq1, dirsHandler.getLocalPathForWrite(ContainerLocalizer.APPCACHE + appId1), null);\r\n        LocalizedResource appLr1 = appTracker1.getLocalizedResource(appReq1);\r\n        appTracker2.getPathForLocalization(appReq2, dirsHandler.getLocalPathForWrite(ContainerLocalizer.APPCACHE + appId2), null);\r\n        LocalizedResource appLr2 = appTracker2.getLocalizedResource(appReq2);\r\n        appTracker2.getPathForLocalization(appReq3, dirsHandler.getLocalPathForWrite(ContainerLocalizer.APPCACHE + appId2), null);\r\n        LocalizedResource appLr3 = appTracker2.getLocalizedResource(appReq3);\r\n        pubTracker.getPathForLocalization(pubReq1, dirsHandler.getLocalPathForWrite(ContainerLocalizer.FILECACHE), null);\r\n        LocalizedResource pubLr1 = pubTracker.getLocalizedResource(pubReq1);\r\n        pubTracker.getPathForLocalization(pubReq2, dirsHandler.getLocalPathForWrite(ContainerLocalizer.FILECACHE), null);\r\n        LocalizedResource pubLr2 = pubTracker.getLocalizedResource(pubReq2);\r\n        assertNotNull(\"Localization not started\", privLr1.getLocalPath());\r\n        privTracker1.handle(new ResourceLocalizedEvent(privReq1, privLr1.getLocalPath(), privLr1.getSize() + 5));\r\n        assertNotNull(\"Localization not started\", privLr2.getLocalPath());\r\n        privTracker1.handle(new ResourceLocalizedEvent(privReq2, privLr2.getLocalPath(), privLr2.getSize() + 10));\r\n        assertNotNull(\"Localization not started\", appLr1.getLocalPath());\r\n        appTracker1.handle(new ResourceLocalizedEvent(appReq1, appLr1.getLocalPath(), appLr1.getSize()));\r\n        assertNotNull(\"Localization not started\", appLr3.getLocalPath());\r\n        appTracker2.handle(new ResourceLocalizedEvent(appReq3, appLr3.getLocalPath(), appLr3.getSize() + 7));\r\n        assertNotNull(\"Localization not started\", pubLr1.getLocalPath());\r\n        pubTracker.handle(new ResourceLocalizedEvent(pubReq1, pubLr1.getLocalPath(), pubLr1.getSize() + 1000));\r\n        assertNotNull(\"Localization not started\", pubLr2.getLocalPath());\r\n        pubTracker.handle(new ResourceLocalizedEvent(pubReq2, pubLr2.getLocalPath(), pubLr2.getSize() + 99999));\r\n        dispatcher.await();\r\n        assertEquals(ResourceState.LOCALIZED, privLr1.getState());\r\n        assertEquals(ResourceState.LOCALIZED, privLr2.getState());\r\n        assertEquals(ResourceState.LOCALIZED, appLr1.getState());\r\n        assertEquals(ResourceState.DOWNLOADING, appLr2.getState());\r\n        assertEquals(ResourceState.LOCALIZED, appLr3.getState());\r\n        assertEquals(ResourceState.LOCALIZED, pubLr1.getState());\r\n        assertEquals(ResourceState.LOCALIZED, pubLr2.getState());\r\n        spyService = createSpyService(dispatcher, dirsHandler, stateStore);\r\n        spyService.init(conf);\r\n        spyService.recoverLocalizedResources(stateStore.loadLocalizationState());\r\n        dispatcher.await();\r\n        appTracker1 = spyService.getLocalResourcesTracker(LocalResourceVisibility.APPLICATION, user1, appId1);\r\n        privTracker1 = spyService.getLocalResourcesTracker(LocalResourceVisibility.PRIVATE, user1, null);\r\n        appTracker2 = spyService.getLocalResourcesTracker(LocalResourceVisibility.APPLICATION, user2, appId2);\r\n        pubTracker = spyService.getLocalResourcesTracker(LocalResourceVisibility.PUBLIC, null, null);\r\n        LocalizedResource recoveredRsrc = privTracker1.getLocalizedResource(privReq1);\r\n        assertEquals(privReq1, recoveredRsrc.getRequest());\r\n        assertEquals(privLr1.getLocalPath(), recoveredRsrc.getLocalPath());\r\n        assertEquals(privLr1.getSize(), recoveredRsrc.getSize());\r\n        assertEquals(ResourceState.LOCALIZED, recoveredRsrc.getState());\r\n        recoveredRsrc = privTracker1.getLocalizedResource(privReq2);\r\n        assertEquals(privReq2, recoveredRsrc.getRequest());\r\n        assertEquals(privLr2.getLocalPath(), recoveredRsrc.getLocalPath());\r\n        assertEquals(privLr2.getSize(), recoveredRsrc.getSize());\r\n        assertEquals(ResourceState.LOCALIZED, recoveredRsrc.getState());\r\n        recoveredRsrc = appTracker1.getLocalizedResource(appReq1);\r\n        assertEquals(appReq1, recoveredRsrc.getRequest());\r\n        assertEquals(appLr1.getLocalPath(), recoveredRsrc.getLocalPath());\r\n        assertEquals(appLr1.getSize(), recoveredRsrc.getSize());\r\n        assertEquals(ResourceState.LOCALIZED, recoveredRsrc.getState());\r\n        recoveredRsrc = appTracker2.getLocalizedResource(appReq2);\r\n        assertNull(\"in-progress resource should not be present\", recoveredRsrc);\r\n        recoveredRsrc = appTracker2.getLocalizedResource(appReq3);\r\n        assertEquals(appReq3, recoveredRsrc.getRequest());\r\n        assertEquals(appLr3.getLocalPath(), recoveredRsrc.getLocalPath());\r\n        assertEquals(appLr3.getSize(), recoveredRsrc.getSize());\r\n        assertEquals(ResourceState.LOCALIZED, recoveredRsrc.getState());\r\n    } finally {\r\n        dispatcher.stop();\r\n        stateStore.close();\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testLocalizerRunnerException",
  "errType" : null,
  "containingMethodsNum" : 41,
  "sourceCodeText" : "void testLocalizerRunnerException() throws Exception\n{\r\n    DrainDispatcher dispatcher = new DrainDispatcher();\r\n    dispatcher.init(conf);\r\n    dispatcher.start();\r\n    EventHandler<ApplicationEvent> applicationBus = mock(EventHandler.class);\r\n    dispatcher.register(ApplicationEventType.class, applicationBus);\r\n    EventHandler<ContainerEvent> containerBus = mock(EventHandler.class);\r\n    dispatcher.register(ContainerEventType.class, containerBus);\r\n    ContainerExecutor exec = mock(ContainerExecutor.class);\r\n    LocalDirsHandlerService dirsHandler = new LocalDirsHandlerService();\r\n    LocalDirsHandlerService dirsHandlerSpy = spy(dirsHandler);\r\n    dirsHandlerSpy.init(conf);\r\n    DeletionService delServiceReal = new DeletionService(exec);\r\n    DeletionService delService = spy(delServiceReal);\r\n    delService.init(new Configuration());\r\n    delService.start();\r\n    ResourceLocalizationService rawService = new ResourceLocalizationService(dispatcher, exec, delService, dirsHandlerSpy, nmContext, metrics);\r\n    ResourceLocalizationService spyService = spy(rawService);\r\n    doReturn(mockServer).when(spyService).createServer();\r\n    try {\r\n        spyService.init(conf);\r\n        spyService.start();\r\n        final Application app = mock(Application.class);\r\n        final ApplicationId appId = BuilderUtils.newApplicationId(314159265358979L, 3);\r\n        when(app.getUser()).thenReturn(\"user0\");\r\n        when(app.getAppId()).thenReturn(appId);\r\n        spyService.handle(new ApplicationLocalizationEvent(LocalizationEventType.INIT_APPLICATION_RESOURCES, app));\r\n        dispatcher.await();\r\n        Random r = new Random();\r\n        long seed = r.nextLong();\r\n        System.out.println(\"SEED: \" + seed);\r\n        r.setSeed(seed);\r\n        final Container c = getMockContainer(appId, 42, \"user0\");\r\n        final LocalResource resource1 = getPrivateMockedResource(r);\r\n        System.out.println(\"Here 4\");\r\n        final LocalResourceRequest req1 = new LocalResourceRequest(resource1);\r\n        Map<LocalResourceVisibility, Collection<LocalResourceRequest>> rsrcs = new HashMap<LocalResourceVisibility, Collection<LocalResourceRequest>>();\r\n        List<LocalResourceRequest> privateResourceList = new ArrayList<LocalResourceRequest>();\r\n        privateResourceList.add(req1);\r\n        rsrcs.put(LocalResourceVisibility.PRIVATE, privateResourceList);\r\n        final Constructor<?>[] constructors = FSError.class.getDeclaredConstructors();\r\n        constructors[0].setAccessible(true);\r\n        FSError fsError = (FSError) constructors[0].newInstance(new IOException(\"Disk Error\"));\r\n        Mockito.doThrow(fsError).when(dirsHandlerSpy).getLocalPathForWrite(isA(String.class));\r\n        spyService.handle(new ContainerLocalizationRequestEvent(c, rsrcs));\r\n        Thread.sleep(1000);\r\n        dispatcher.await();\r\n        verify(containerBus).handle(isA(ContainerResourceFailedEvent.class));\r\n    } finally {\r\n        spyService.stop();\r\n        dispatcher.stop();\r\n        delService.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testLocalizationHeartbeat",
  "errType" : null,
  "containingMethodsNum" : 120,
  "sourceCodeText" : "void testLocalizationHeartbeat() throws Exception\n{\r\n    List<Path> localDirs = new ArrayList<Path>();\r\n    String[] sDirs = new String[1];\r\n    localDirs.add(lfs.makeQualified(new Path(basedir, 0 + \"\")));\r\n    sDirs[0] = localDirs.get(0).toString();\r\n    conf.setStrings(YarnConfiguration.NM_LOCAL_DIRS, sDirs);\r\n    conf.set(YarnConfiguration.NM_LOCAL_CACHE_MAX_FILES_PER_DIRECTORY, \"37\");\r\n    DrainDispatcher dispatcher = new DrainDispatcher();\r\n    dispatcher.init(conf);\r\n    dispatcher.start();\r\n    EventHandler<ApplicationEvent> applicationBus = mock(EventHandler.class);\r\n    dispatcher.register(ApplicationEventType.class, applicationBus);\r\n    EventHandler<ContainerEvent> containerBus = mock(EventHandler.class);\r\n    dispatcher.register(ContainerEventType.class, containerBus);\r\n    ContainerExecutor exec = mock(ContainerExecutor.class);\r\n    LocalDirsHandlerService dirsHandler = new LocalDirsHandlerService();\r\n    dirsHandler.init(conf);\r\n    DeletionService delServiceReal = new DeletionService(exec);\r\n    DeletionService delService = spy(delServiceReal);\r\n    delService.init(new Configuration());\r\n    delService.start();\r\n    ResourceLocalizationService rawService = new ResourceLocalizationService(dispatcher, exec, delService, dirsHandler, nmContext, metrics);\r\n    ResourceLocalizationService spyService = spy(rawService);\r\n    doReturn(mockServer).when(spyService).createServer();\r\n    doReturn(lfs).when(spyService).getLocalFileContext(isA(Configuration.class));\r\n    FsPermission defaultPermission = FsPermission.getDirDefault().applyUMask(lfs.getUMask());\r\n    FsPermission nmPermission = ResourceLocalizationService.NM_PRIVATE_PERM.applyUMask(lfs.getUMask());\r\n    final Path userDir = new Path(sDirs[0].substring(\"file:\".length()), ContainerLocalizer.USERCACHE);\r\n    final Path fileDir = new Path(sDirs[0].substring(\"file:\".length()), ContainerLocalizer.FILECACHE);\r\n    final Path sysDir = new Path(sDirs[0].substring(\"file:\".length()), ResourceLocalizationService.NM_PRIVATE_DIR);\r\n    final FileStatus fs = new FileStatus(0, true, 1, 0, System.currentTimeMillis(), 0, defaultPermission, \"\", \"\", new Path(sDirs[0]));\r\n    final FileStatus nmFs = new FileStatus(0, true, 1, 0, System.currentTimeMillis(), 0, nmPermission, \"\", \"\", sysDir);\r\n    doAnswer(new Answer<FileStatus>() {\r\n\r\n        @Override\r\n        public FileStatus answer(InvocationOnMock invocation) throws Throwable {\r\n            Object[] args = invocation.getArguments();\r\n            if (args.length > 0) {\r\n                if (args[0].equals(userDir) || args[0].equals(fileDir)) {\r\n                    return fs;\r\n                }\r\n            }\r\n            return nmFs;\r\n        }\r\n    }).when(spylfs).getFileStatus(isA(Path.class));\r\n    try {\r\n        spyService.init(conf);\r\n        spyService.start();\r\n        final Application app = mock(Application.class);\r\n        final ApplicationId appId = BuilderUtils.newApplicationId(314159265358979L, 3);\r\n        when(app.getUser()).thenReturn(\"user0\");\r\n        when(app.getAppId()).thenReturn(appId);\r\n        spyService.handle(new ApplicationLocalizationEvent(LocalizationEventType.INIT_APPLICATION_RESOURCES, app));\r\n        ArgumentMatcher<ApplicationEvent> matchesAppInit = evt -> evt.getType() == ApplicationEventType.APPLICATION_INITED && appId == evt.getApplicationID();\r\n        dispatcher.await();\r\n        verify(applicationBus).handle(argThat(matchesAppInit));\r\n        Random r = new Random();\r\n        long seed = r.nextLong();\r\n        System.out.println(\"SEED: \" + seed);\r\n        r.setSeed(seed);\r\n        final Container c = getMockContainer(appId, 42, \"user0\");\r\n        FSDataOutputStream out = new FSDataOutputStream(new DataOutputBuffer(), null);\r\n        doReturn(out).when(spylfs).createInternal(isA(Path.class), isA(EnumSet.class), isA(FsPermission.class), anyInt(), anyShort(), anyLong(), isA(Progressable.class), isA(ChecksumOpt.class), anyBoolean());\r\n        final LocalResource resource1 = getPrivateMockedResource(r);\r\n        LocalResource resource2 = null;\r\n        do {\r\n            resource2 = getPrivateMockedResource(r);\r\n        } while (resource2 == null || resource2.equals(resource1));\r\n        LocalResource resource3 = null;\r\n        do {\r\n            resource3 = getPrivateMockedResource(r);\r\n        } while (resource3 == null || resource3.equals(resource1) || resource3.equals(resource2));\r\n        final LocalResourceRequest req1 = new LocalResourceRequest(resource1);\r\n        final LocalResourceRequest req2 = new LocalResourceRequest(resource2);\r\n        final LocalResourceRequest req3 = new LocalResourceRequest(resource3);\r\n        Map<LocalResourceVisibility, Collection<LocalResourceRequest>> rsrcs = new HashMap<LocalResourceVisibility, Collection<LocalResourceRequest>>();\r\n        List<LocalResourceRequest> privateResourceList = new ArrayList<LocalResourceRequest>();\r\n        privateResourceList.add(req1);\r\n        privateResourceList.add(req2);\r\n        privateResourceList.add(req3);\r\n        rsrcs.put(LocalResourceVisibility.PRIVATE, privateResourceList);\r\n        spyService.handle(new ContainerLocalizationRequestEvent(c, rsrcs));\r\n        Thread.sleep(1000);\r\n        dispatcher.await();\r\n        String appStr = appId.toString();\r\n        String ctnrStr = c.getContainerId().toString();\r\n        ArgumentCaptor<LocalizerStartContext> contextCaptor = ArgumentCaptor.forClass(LocalizerStartContext.class);\r\n        verify(exec).startLocalizer(contextCaptor.capture());\r\n        LocalizerStartContext context = contextCaptor.getValue();\r\n        Path localizationTokenPath = context.getNmPrivateContainerTokens();\r\n        assertEquals(\"user0\", context.getUser());\r\n        assertEquals(appStr, context.getAppId());\r\n        assertEquals(ctnrStr, context.getLocId());\r\n        LocalResourceStatus rsrc1success = mock(LocalResourceStatus.class);\r\n        LocalResourceStatus rsrc2pending = mock(LocalResourceStatus.class);\r\n        LocalResourceStatus rsrc2success = mock(LocalResourceStatus.class);\r\n        LocalResourceStatus rsrc3success = mock(LocalResourceStatus.class);\r\n        LocalizerStatus stat = mock(LocalizerStatus.class);\r\n        when(stat.getLocalizerId()).thenReturn(ctnrStr);\r\n        when(rsrc1success.getResource()).thenReturn(resource1);\r\n        when(rsrc2pending.getResource()).thenReturn(resource2);\r\n        when(rsrc2success.getResource()).thenReturn(resource2);\r\n        when(rsrc3success.getResource()).thenReturn(resource3);\r\n        when(rsrc1success.getLocalSize()).thenReturn(4344L);\r\n        when(rsrc2success.getLocalSize()).thenReturn(2342L);\r\n        when(rsrc3success.getLocalSize()).thenReturn(5345L);\r\n        URL locPath = getPath(\"/cache/private/blah\");\r\n        when(rsrc1success.getLocalPath()).thenReturn(locPath);\r\n        when(rsrc2success.getLocalPath()).thenReturn(locPath);\r\n        when(rsrc3success.getLocalPath()).thenReturn(locPath);\r\n        when(rsrc1success.getStatus()).thenReturn(ResourceStatusType.FETCH_SUCCESS);\r\n        when(rsrc2pending.getStatus()).thenReturn(ResourceStatusType.FETCH_PENDING);\r\n        when(rsrc2success.getStatus()).thenReturn(ResourceStatusType.FETCH_SUCCESS);\r\n        when(rsrc3success.getStatus()).thenReturn(ResourceStatusType.FETCH_SUCCESS);\r\n        List<LocalResourceStatus> rsrcs4 = new ArrayList<LocalResourceStatus>();\r\n        rsrcs4.add(rsrc2success);\r\n        rsrcs4.add(rsrc3success);\r\n        when(stat.getResources()).thenReturn(Collections.<LocalResourceStatus>emptyList()).thenReturn(Collections.singletonList(rsrc1success)).thenReturn(Collections.singletonList(rsrc2pending)).thenReturn(rsrcs4).thenReturn(Collections.<LocalResourceStatus>emptyList());\r\n        String localPath = Path.SEPARATOR + ContainerLocalizer.USERCACHE + Path.SEPARATOR + \"user0\" + Path.SEPARATOR + ContainerLocalizer.FILECACHE;\r\n        LocalizerHeartbeatResponse response = spyService.heartbeat(stat);\r\n        assertEquals(LocalizerAction.LIVE, response.getLocalizerAction());\r\n        assertEquals(1, response.getResourceSpecs().size());\r\n        assertEquals(req1, new LocalResourceRequest(response.getResourceSpecs().get(0).getResource()));\r\n        URL localizedPath = response.getResourceSpecs().get(0).getDestinationDirectory();\r\n        assertTrue(localizedPath.getFile().endsWith(localPath + Path.SEPARATOR + \"10\"));\r\n        response = spyService.heartbeat(stat);\r\n        assertEquals(LocalizerAction.LIVE, response.getLocalizerAction());\r\n        assertEquals(1, response.getResourceSpecs().size());\r\n        assertEquals(req2, new LocalResourceRequest(response.getResourceSpecs().get(0).getResource()));\r\n        localizedPath = response.getResourceSpecs().get(0).getDestinationDirectory();\r\n        assertTrue(localizedPath.getFile().endsWith(localPath + Path.SEPARATOR + \"0\" + Path.SEPARATOR + \"11\"));\r\n        response = spyService.heartbeat(stat);\r\n        assertEquals(LocalizerAction.LIVE, response.getLocalizerAction());\r\n        assertEquals(1, response.getResourceSpecs().size());\r\n        assertEquals(req3, new LocalResourceRequest(response.getResourceSpecs().get(0).getResource()));\r\n        localizedPath = response.getResourceSpecs().get(0).getDestinationDirectory();\r\n        assertTrue(localizedPath.getFile().endsWith(localPath + Path.SEPARATOR + \"1\" + Path.SEPARATOR + \"12\"));\r\n        response = spyService.heartbeat(stat);\r\n        assertEquals(LocalizerAction.LIVE, response.getLocalizerAction());\r\n        spyService.handle(new ContainerLocalizationEvent(LocalizationEventType.CONTAINER_RESOURCES_LOCALIZED, c));\r\n        response = spyService.heartbeat(stat);\r\n        assertEquals(LocalizerAction.DIE, response.getLocalizerAction());\r\n        dispatcher.await();\r\n        ArgumentMatcher<ContainerEvent> matchesContainerLoc = evt -> evt.getType() == ContainerEventType.RESOURCE_LOCALIZED && c.getContainerId() == evt.getContainerID();\r\n        verify(containerBus, times(3)).handle(argThat(matchesContainerLoc));\r\n        verify(delService, times(1)).delete(argThat(new FileDeletionMatcher(delService, null, localizationTokenPath, null)));\r\n    } finally {\r\n        spyService.stop();\r\n        dispatcher.stop();\r\n        delService.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testDownloadingResourcesOnContainerKill",
  "errType" : null,
  "containingMethodsNum" : 25,
  "sourceCodeText" : "void testDownloadingResourcesOnContainerKill() throws Exception\n{\r\n    List<Path> localDirs = new ArrayList<Path>();\r\n    String[] sDirs = new String[1];\r\n    localDirs.add(lfs.makeQualified(new Path(basedir, 0 + \"\")));\r\n    sDirs[0] = localDirs.get(0).toString();\r\n    conf.setStrings(YarnConfiguration.NM_LOCAL_DIRS, sDirs);\r\n    DummyExecutor exec = new DummyExecutor();\r\n    LocalDirsHandlerService dirsHandler = new LocalDirsHandlerService();\r\n    dirsHandler.init(conf);\r\n    DeletionService delServiceReal = new DeletionService(exec);\r\n    DeletionService delService = spy(delServiceReal);\r\n    delService.init(new Configuration());\r\n    delService.start();\r\n    DrainDispatcher dispatcher = getDispatcher(conf);\r\n    ResourceLocalizationService rawService = new ResourceLocalizationService(dispatcher, exec, delService, dirsHandler, nmContext, metrics);\r\n    ResourceLocalizationService spyService = spy(rawService);\r\n    doReturn(mockServer).when(spyService).createServer();\r\n    doReturn(lfs).when(spyService).getLocalFileContext(isA(Configuration.class));\r\n    FsPermission defaultPermission = FsPermission.getDirDefault().applyUMask(lfs.getUMask());\r\n    FsPermission nmPermission = ResourceLocalizationService.NM_PRIVATE_PERM.applyUMask(lfs.getUMask());\r\n    final Path userDir = new Path(sDirs[0].substring(\"file:\".length()), ContainerLocalizer.USERCACHE);\r\n    final Path fileDir = new Path(sDirs[0].substring(\"file:\".length()), ContainerLocalizer.FILECACHE);\r\n    final Path sysDir = new Path(sDirs[0].substring(\"file:\".length()), ResourceLocalizationService.NM_PRIVATE_DIR);\r\n    final FileStatus fs = new FileStatus(0, true, 1, 0, System.currentTimeMillis(), 0, defaultPermission, \"\", \"\", new Path(sDirs[0]));\r\n    final FileStatus nmFs = new FileStatus(0, true, 1, 0, System.currentTimeMillis(), 0, nmPermission, \"\", \"\", sysDir);\r\n    doAnswer(new Answer<FileStatus>() {\r\n\r\n        @Override\r\n        public FileStatus answer(InvocationOnMock invocation) throws Throwable {\r\n            Object[] args = invocation.getArguments();\r\n            if (args.length > 0) {\r\n                if (args[0].equals(userDir) || args[0].equals(fileDir)) {\r\n                    return fs;\r\n                }\r\n            }\r\n            return nmFs;\r\n        }\r\n    }).when(spylfs).getFileStatus(isA(Path.class));\r\n    try {\r\n        spyService.init(conf);\r\n        spyService.start();\r\n        doLocalization(spyService, dispatcher, exec, delService);\r\n    } finally {\r\n        spyService.stop();\r\n        dispatcher.stop();\r\n        delService.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testResourceLocalizationReqsAfterContainerKill",
  "errType" : null,
  "containingMethodsNum" : 25,
  "sourceCodeText" : "void testResourceLocalizationReqsAfterContainerKill() throws Exception\n{\r\n    List<Path> localDirs = new ArrayList<Path>();\r\n    String[] sDirs = new String[1];\r\n    localDirs.add(lfs.makeQualified(new Path(basedir, 0 + \"\")));\r\n    sDirs[0] = localDirs.get(0).toString();\r\n    conf.setStrings(YarnConfiguration.NM_LOCAL_DIRS, sDirs);\r\n    DummyExecutor exec = new DummyExecutor();\r\n    LocalDirsHandlerService dirsHandler = new LocalDirsHandlerService();\r\n    dirsHandler.init(conf);\r\n    DeletionService delServiceReal = new DeletionService(exec);\r\n    DeletionService delService = spy(delServiceReal);\r\n    delService.init(new Configuration());\r\n    delService.start();\r\n    DrainDispatcher dispatcher = getDispatcher(conf);\r\n    ResourceLocalizationService rawService = new ResourceLocalizationService(dispatcher, exec, delService, dirsHandler, nmContext, metrics);\r\n    ResourceLocalizationService spyService = spy(rawService);\r\n    doReturn(mockServer).when(spyService).createServer();\r\n    doReturn(lfs).when(spyService).getLocalFileContext(isA(Configuration.class));\r\n    FsPermission defaultPermission = FsPermission.getDirDefault().applyUMask(lfs.getUMask());\r\n    FsPermission nmPermission = ResourceLocalizationService.NM_PRIVATE_PERM.applyUMask(lfs.getUMask());\r\n    final Path userDir = new Path(sDirs[0].substring(\"file:\".length()), ContainerLocalizer.USERCACHE);\r\n    final Path fileDir = new Path(sDirs[0].substring(\"file:\".length()), ContainerLocalizer.FILECACHE);\r\n    final Path sysDir = new Path(sDirs[0].substring(\"file:\".length()), ResourceLocalizationService.NM_PRIVATE_DIR);\r\n    final FileStatus fs = new FileStatus(0, true, 1, 0, System.currentTimeMillis(), 0, defaultPermission, \"\", \"\", new Path(sDirs[0]));\r\n    final FileStatus nmFs = new FileStatus(0, true, 1, 0, System.currentTimeMillis(), 0, nmPermission, \"\", \"\", sysDir);\r\n    doAnswer(new Answer<FileStatus>() {\r\n\r\n        @Override\r\n        public FileStatus answer(InvocationOnMock invocation) throws Throwable {\r\n            Object[] args = invocation.getArguments();\r\n            if (args.length > 0) {\r\n                if (args[0].equals(userDir) || args[0].equals(fileDir)) {\r\n                    return fs;\r\n                }\r\n            }\r\n            return nmFs;\r\n        }\r\n    }).when(spylfs).getFileStatus(isA(Path.class));\r\n    try {\r\n        spyService.init(conf);\r\n        spyService.start();\r\n        doLocalizationAfterCleanup(spyService, dispatcher, exec, delService);\r\n    } finally {\r\n        spyService.stop();\r\n        dispatcher.stop();\r\n        delService.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getDispatcher",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "DrainDispatcher getDispatcher(Configuration config)\n{\r\n    DrainDispatcher dispatcher = new DrainDispatcher();\r\n    dispatcher.init(config);\r\n    dispatcher.start();\r\n    return dispatcher;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getApplicationBus",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "EventHandler<ApplicationEvent> getApplicationBus(DrainDispatcher dispatcher)\n{\r\n    EventHandler<ApplicationEvent> applicationBus = mock(EventHandler.class);\r\n    dispatcher.register(ApplicationEventType.class, applicationBus);\r\n    return applicationBus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getContainerBus",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "EventHandler<ContainerEvent> getContainerBus(DrainDispatcher dispatcher)\n{\r\n    EventHandler<ContainerEvent> containerBus = mock(EventHandler.class);\r\n    dispatcher.register(ContainerEventType.class, containerBus);\r\n    return containerBus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "initApp",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void initApp(ResourceLocalizationService spyService, EventHandler<ApplicationEvent> applicationBus, Application app, ApplicationId appId, DrainDispatcher dispatcher)\n{\r\n    spyService.handle(new ApplicationLocalizationEvent(LocalizationEventType.INIT_APPLICATION_RESOURCES, app));\r\n    ArgumentMatcher<ApplicationEvent> matchesAppInit = evt -> evt.getType() == ApplicationEventType.APPLICATION_INITED && appId == evt.getApplicationID();\r\n    dispatcher.await();\r\n    verify(applicationBus).handle(argThat(matchesAppInit));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "doLocalization",
  "errType" : null,
  "containingMethodsNum" : 57,
  "sourceCodeText" : "void doLocalization(ResourceLocalizationService spyService, DrainDispatcher dispatcher, DummyExecutor exec, DeletionService delService) throws IOException, URISyntaxException, InterruptedException\n{\r\n    final Application app = mock(Application.class);\r\n    final ApplicationId appId = BuilderUtils.newApplicationId(314159265358979L, 3);\r\n    String user = \"user0\";\r\n    when(app.getUser()).thenReturn(user);\r\n    when(app.getAppId()).thenReturn(appId);\r\n    List<LocalResource> resources = initializeLocalizer(appId);\r\n    LocalResource resource1 = resources.get(0);\r\n    LocalResource resource2 = resources.get(1);\r\n    LocalResource resource3 = resources.get(2);\r\n    final Container c1 = getMockContainer(appId, 42, \"user0\");\r\n    final Container c2 = getMockContainer(appId, 43, \"user0\");\r\n    EventHandler<ApplicationEvent> applicationBus = getApplicationBus(dispatcher);\r\n    EventHandler<ContainerEvent> containerBus = getContainerBus(dispatcher);\r\n    initApp(spyService, applicationBus, app, appId, dispatcher);\r\n    final LocalResourceRequest req1 = new LocalResourceRequest(resource1);\r\n    final LocalResourceRequest req2 = new LocalResourceRequest(resource2);\r\n    final LocalResourceRequest req3 = new LocalResourceRequest(resource3);\r\n    Map<LocalResourceVisibility, Collection<LocalResourceRequest>> rsrcs = new HashMap<LocalResourceVisibility, Collection<LocalResourceRequest>>();\r\n    List<LocalResourceRequest> privateResourceList = new ArrayList<LocalResourceRequest>();\r\n    privateResourceList.add(req1);\r\n    privateResourceList.add(req2);\r\n    privateResourceList.add(req3);\r\n    rsrcs.put(LocalResourceVisibility.PRIVATE, privateResourceList);\r\n    spyService.handle(new ContainerLocalizationRequestEvent(c1, rsrcs));\r\n    final LocalResourceRequest req11 = new LocalResourceRequest(resource2);\r\n    Map<LocalResourceVisibility, Collection<LocalResourceRequest>> rsrcs1 = new HashMap<LocalResourceVisibility, Collection<LocalResourceRequest>>();\r\n    List<LocalResourceRequest> privateResourceList1 = new ArrayList<LocalResourceRequest>();\r\n    privateResourceList1.add(req11);\r\n    rsrcs1.put(LocalResourceVisibility.PRIVATE, privateResourceList1);\r\n    spyService.handle(new ContainerLocalizationRequestEvent(c2, rsrcs1));\r\n    dispatcher.await();\r\n    exec.waitForLocalizers(2);\r\n    LocalizerRunner locC1 = spyService.getLocalizerRunner(c1.getContainerId().toString());\r\n    LocalizerStatus stat = mockLocalizerStatus(c1, resource1, resource2);\r\n    LocalizerHeartbeatResponse response = spyService.heartbeat(stat);\r\n    assertEquals(LocalizerAction.LIVE, response.getLocalizerAction());\r\n    response = spyService.heartbeat(stat);\r\n    assertEquals(LocalizerAction.LIVE, response.getLocalizerAction());\r\n    final String locPath1 = response.getResourceSpecs().get(0).getDestinationDirectory().getFile();\r\n    response = spyService.heartbeat(stat);\r\n    assertEquals(LocalizerAction.LIVE, response.getLocalizerAction());\r\n    final String locPath2 = response.getResourceSpecs().get(0).getDestinationDirectory().getFile();\r\n    spyService.handle(new ContainerLocalizationCleanupEvent(c1, rsrcs));\r\n    response = spyService.heartbeat(stat);\r\n    assertEquals(LocalizerAction.DIE, response.getLocalizerAction());\r\n    exec.setStopLocalization();\r\n    dispatcher.await();\r\n    ArgumentMatcher<ContainerEvent> successContainerLoc = evt -> evt.getType() == ContainerEventType.RESOURCE_LOCALIZED && c1.getContainerId() == evt.getContainerID();\r\n    verify(containerBus).handle(argThat(successContainerLoc));\r\n    Set<Path> paths = Sets.newHashSet(new Path(locPath1), new Path(locPath1 + \"_tmp\"), new Path(locPath2), new Path(locPath2 + \"_tmp\"));\r\n    while (locC1.getState() != Thread.State.TERMINATED) {\r\n        Thread.sleep(50);\r\n    }\r\n    verify(delService, times(2)).delete(argThat(new FileDeletionMatcher(delService, user, null, new ArrayList<>(paths))));\r\n    LocalResourcesTracker tracker = spyService.getLocalResourcesTracker(LocalResourceVisibility.PRIVATE, \"user0\", appId);\r\n    LocalizedResource rsrc1 = tracker.getLocalizedResource(req1);\r\n    assertNotNull(rsrc1);\r\n    assertThat(rsrc1.getState()).isEqualTo(ResourceState.LOCALIZED);\r\n    assertThat(rsrc1.getRefCount()).isEqualTo(0);\r\n    LocalizedResource rsrc2 = tracker.getLocalizedResource(req2);\r\n    assertNotNull(rsrc2);\r\n    assertThat(rsrc2.getState()).isEqualTo(ResourceState.DOWNLOADING);\r\n    assertThat(rsrc2.getRefCount()).isEqualTo(1);\r\n    LocalizedResource rsrc3 = tracker.getLocalizedResource(req3);\r\n    assertNull(rsrc3);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "doLocalizationAfterCleanup",
  "errType" : null,
  "containingMethodsNum" : 65,
  "sourceCodeText" : "void doLocalizationAfterCleanup(ResourceLocalizationService spyService, DrainDispatcher dispatcher, DummyExecutor exec, DeletionService delService) throws IOException, URISyntaxException, InterruptedException\n{\r\n    final Application app = mock(Application.class);\r\n    final ApplicationId appId = BuilderUtils.newApplicationId(314159265358979L, 3);\r\n    String user = \"user0\";\r\n    when(app.getUser()).thenReturn(user);\r\n    when(app.getAppId()).thenReturn(appId);\r\n    List<LocalResource> resources = initializeLocalizer(appId);\r\n    LocalResource resource1 = resources.get(0);\r\n    LocalResource resource2 = resources.get(1);\r\n    LocalResource resource3 = resources.get(2);\r\n    final Container c1 = getMockContainer(appId, 42, \"user0\");\r\n    final Container c2 = getMockContainer(appId, 43, \"user0\");\r\n    EventHandler<ApplicationEvent> applicationBus = getApplicationBus(dispatcher);\r\n    EventHandler<ContainerEvent> containerBus = getContainerBus(dispatcher);\r\n    initApp(spyService, applicationBus, app, appId, dispatcher);\r\n    final LocalResourceRequest req1 = new LocalResourceRequest(resource1);\r\n    final LocalResourceRequest req2 = new LocalResourceRequest(resource2);\r\n    final LocalResourceRequest req3 = new LocalResourceRequest(resource3);\r\n    Map<LocalResourceVisibility, Collection<LocalResourceRequest>> rsrcs = new HashMap<LocalResourceVisibility, Collection<LocalResourceRequest>>();\r\n    List<LocalResourceRequest> privateResourceList = new ArrayList<LocalResourceRequest>();\r\n    rsrcs.put(LocalResourceVisibility.PRIVATE, privateResourceList);\r\n    spyService.handle(new ContainerLocalizationRequestEvent(c1, rsrcs));\r\n    dispatcher.await();\r\n    spyService.handle(new ContainerLocalizationCleanupEvent(c1, rsrcs));\r\n    dispatcher.await();\r\n    privateResourceList.add(req1);\r\n    privateResourceList.add(req2);\r\n    privateResourceList.add(req3);\r\n    rsrcs.put(LocalResourceVisibility.PRIVATE, privateResourceList);\r\n    LocalizerContext locCtx = new LocalizerContext(user, c1.getContainerId(), c1.getCredentials());\r\n    LocalResourcesTracker tracker = spyService.getLocalResourcesTracker(LocalResourceVisibility.PRIVATE, user, null);\r\n    for (LocalResourceRequest req : privateResourceList) {\r\n        tracker.handle(new ResourceRequestEvent(req, LocalResourceVisibility.PRIVATE, locCtx));\r\n    }\r\n    dispatcher.await();\r\n    for (LocalResourceRequest req : privateResourceList) {\r\n        tracker.handle(new ResourceReleaseEvent(req, c1.getContainerId()));\r\n    }\r\n    dispatcher.await();\r\n    spyService.handle(new ContainerLocalizationRequestEvent(c2, rsrcs));\r\n    dispatcher.await();\r\n    exec.yieldForLocalizers(2);\r\n    assertThat(exec.getNumLocalizers()).isEqualTo(1);\r\n    LocalizerRunner locC2 = spyService.getLocalizerRunner(c2.getContainerId().toString());\r\n    LocalizerStatus stat = mockLocalizerStatus(c2, resource1, resource2);\r\n    LocalizerHeartbeatResponse response = spyService.heartbeat(stat);\r\n    assertEquals(LocalizerAction.LIVE, response.getLocalizerAction());\r\n    response = spyService.heartbeat(stat);\r\n    assertEquals(LocalizerAction.LIVE, response.getLocalizerAction());\r\n    final String locPath1 = response.getResourceSpecs().get(0).getDestinationDirectory().getFile();\r\n    response = spyService.heartbeat(stat);\r\n    assertEquals(LocalizerAction.LIVE, response.getLocalizerAction());\r\n    final String locPath2 = response.getResourceSpecs().get(0).getDestinationDirectory().getFile();\r\n    spyService.handle(new ContainerLocalizationCleanupEvent(c2, rsrcs));\r\n    response = spyService.heartbeat(stat);\r\n    assertEquals(LocalizerAction.DIE, response.getLocalizerAction());\r\n    exec.setStopLocalization();\r\n    dispatcher.await();\r\n    ArgumentMatcher<ContainerEvent> successContainerLoc = evt -> evt.getType() == ContainerEventType.RESOURCE_LOCALIZED && c2.getContainerId() == evt.getContainerID();\r\n    verify(containerBus).handle(argThat(successContainerLoc));\r\n    Set<Path> paths = Sets.newHashSet(new Path(locPath1), new Path(locPath1 + \"_tmp\"), new Path(locPath2), new Path(locPath2 + \"_tmp\"));\r\n    while (locC2.getState() != Thread.State.TERMINATED) {\r\n        Thread.sleep(50);\r\n    }\r\n    verify(delService, times(3)).delete(argThat(new FileDeletionMatcher(delService, user, null, new ArrayList<>(paths))));\r\n    LocalizedResource rsrc1 = tracker.getLocalizedResource(req1);\r\n    assertNotNull(rsrc1);\r\n    assertThat(rsrc1.getState()).isEqualTo(ResourceState.LOCALIZED);\r\n    assertThat(rsrc1.getRefCount()).isEqualTo(0);\r\n    LocalizedResource rsrc2 = tracker.getLocalizedResource(req2);\r\n    assertNull(rsrc2);\r\n    LocalizedResource rsrc3 = tracker.getLocalizedResource(req3);\r\n    assertNull(rsrc3);\r\n    assertThat(exec.getNumLocalizers()).isEqualTo(1);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "mockLocalizerStatus",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "LocalizerStatus mockLocalizerStatus(Container c1, LocalResource resource1, LocalResource resource2)\n{\r\n    final String containerIdStr = c1.getContainerId().toString();\r\n    LocalResourceStatus rsrc1success = mock(LocalResourceStatus.class);\r\n    LocalResourceStatus rsrc2pending = mock(LocalResourceStatus.class);\r\n    LocalizerStatus stat = mock(LocalizerStatus.class);\r\n    when(stat.getLocalizerId()).thenReturn(containerIdStr);\r\n    when(rsrc1success.getResource()).thenReturn(resource1);\r\n    when(rsrc2pending.getResource()).thenReturn(resource2);\r\n    when(rsrc1success.getLocalSize()).thenReturn(4344L);\r\n    URL locPath = getPath(\"/some/path\");\r\n    when(rsrc1success.getLocalPath()).thenReturn(locPath);\r\n    when(rsrc1success.getStatus()).thenReturn(ResourceStatusType.FETCH_SUCCESS);\r\n    when(rsrc2pending.getStatus()).thenReturn(ResourceStatusType.FETCH_PENDING);\r\n    when(stat.getResources()).thenReturn(Collections.<LocalResourceStatus>emptyList()).thenReturn(Collections.singletonList(rsrc1success)).thenReturn(Collections.singletonList(rsrc2pending)).thenReturn(Collections.singletonList(rsrc2pending)).thenReturn(Collections.<LocalResourceStatus>emptyList());\r\n    return stat;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "initializeLocalizer",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "List<LocalResource> initializeLocalizer(ApplicationId appId) throws IOException\n{\r\n    Random r = new Random();\r\n    long seed = r.nextLong();\r\n    System.out.println(\"SEED: \" + seed);\r\n    r.setSeed(seed);\r\n    FSDataOutputStream out = new FSDataOutputStream(new DataOutputBuffer(), null);\r\n    doReturn(out).when(spylfs).createInternal(isA(Path.class), isA(EnumSet.class), isA(FsPermission.class), anyInt(), anyShort(), anyLong(), isA(Progressable.class), isA(ChecksumOpt.class), anyBoolean());\r\n    final LocalResource resource1 = getPrivateMockedResource(r);\r\n    LocalResource resource2 = null;\r\n    do {\r\n        resource2 = getPrivateMockedResource(r);\r\n    } while (resource2 == null || resource2.equals(resource1));\r\n    LocalResource resource3 = null;\r\n    do {\r\n        resource3 = getPrivateMockedResource(r);\r\n    } while (resource3 == null || resource3.equals(resource1) || resource3.equals(resource2));\r\n    return Arrays.asList(resource1, resource2, resource3);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testPublicResourceInitializesLocalDir",
  "errType" : null,
  "containingMethodsNum" : 45,
  "sourceCodeText" : "void testPublicResourceInitializesLocalDir() throws Exception\n{\r\n    NMStateStoreService spyStateStore = spy(nmContext.getNMStateStore());\r\n    when(spyStateStore.canRecover()).thenReturn(true);\r\n    NMContext spyContext = spy(nmContext);\r\n    when(spyContext.getNMStateStore()).thenReturn(spyStateStore);\r\n    List<Path> localDirs = new ArrayList<Path>();\r\n    String[] sDirs = new String[4];\r\n    for (int i = 0; i < 4; ++i) {\r\n        localDirs.add(lfs.makeQualified(new Path(basedir, i + \"\")));\r\n        sDirs[i] = localDirs.get(i).toString();\r\n    }\r\n    conf.setStrings(YarnConfiguration.NM_LOCAL_DIRS, sDirs);\r\n    DrainDispatcher dispatcher = new DrainDispatcher();\r\n    EventHandler<ApplicationEvent> applicationBus = mock(EventHandler.class);\r\n    dispatcher.register(ApplicationEventType.class, applicationBus);\r\n    EventHandler<ContainerEvent> containerBus = mock(EventHandler.class);\r\n    dispatcher.register(ContainerEventType.class, containerBus);\r\n    ContainerExecutor exec = mock(ContainerExecutor.class);\r\n    DeletionService delService = mock(DeletionService.class);\r\n    LocalDirsHandlerService dirsHandler = new LocalDirsHandlerService();\r\n    dirsHandler.init(conf);\r\n    dispatcher.init(conf);\r\n    dispatcher.start();\r\n    try {\r\n        ResourceLocalizationService rawService = new ResourceLocalizationService(dispatcher, exec, delService, dirsHandler, spyContext, metrics);\r\n        ResourceLocalizationService spyService = spy(rawService);\r\n        doReturn(mockServer).when(spyService).createServer();\r\n        doReturn(lfs).when(spyService).getLocalFileContext(isA(Configuration.class));\r\n        spyService.init(conf);\r\n        final FsPermission defaultPerm = new FsPermission((short) 0755);\r\n        for (Path p : localDirs) {\r\n            p = new Path((new URI(p.toString())).getPath());\r\n            Path publicCache = new Path(p, ContainerLocalizer.FILECACHE);\r\n            verify(spylfs, never()).mkdir(eq(publicCache), eq(defaultPerm), eq(true));\r\n        }\r\n        spyService.start();\r\n        final String user = \"user0\";\r\n        final Application app = mock(Application.class);\r\n        final ApplicationId appId = BuilderUtils.newApplicationId(314159265358979L, 3);\r\n        when(app.getUser()).thenReturn(user);\r\n        when(app.getAppId()).thenReturn(appId);\r\n        spyService.handle(new ApplicationLocalizationEvent(LocalizationEventType.INIT_APPLICATION_RESOURCES, app));\r\n        dispatcher.await();\r\n        final Container c = getMockContainer(appId, 42, user);\r\n        Random r = new Random();\r\n        long seed = r.nextLong();\r\n        System.out.println(\"SEED: \" + seed);\r\n        r.setSeed(seed);\r\n        final LocalResource pubResource1 = getPublicMockedResource(r);\r\n        final LocalResourceRequest pubReq1 = new LocalResourceRequest(pubResource1);\r\n        LocalResource pubResource2 = null;\r\n        do {\r\n            pubResource2 = getPublicMockedResource(r);\r\n        } while (pubResource2 == null || pubResource2.equals(pubResource1));\r\n        final LocalResourceRequest pubReq2 = new LocalResourceRequest(pubResource2);\r\n        Set<LocalResourceRequest> pubRsrcs = new HashSet<LocalResourceRequest>();\r\n        pubRsrcs.add(pubReq1);\r\n        pubRsrcs.add(pubReq2);\r\n        Map<LocalResourceVisibility, Collection<LocalResourceRequest>> req = new HashMap<LocalResourceVisibility, Collection<LocalResourceRequest>>();\r\n        req.put(LocalResourceVisibility.PUBLIC, pubRsrcs);\r\n        spyService.handle(new ContainerLocalizationRequestEvent(c, req));\r\n        dispatcher.await();\r\n        verify(spyService, times(1)).checkAndInitializeLocalDirs();\r\n        for (Path p : localDirs) {\r\n            p = new Path((new URI(p.toString())).getPath());\r\n            Path publicCache = new Path(p, ContainerLocalizer.FILECACHE);\r\n            verify(spylfs).mkdir(eq(publicCache), eq(defaultPerm), eq(true));\r\n        }\r\n    } finally {\r\n        dispatcher.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testPublicCacheDirPermission",
  "errType" : null,
  "containingMethodsNum" : 40,
  "sourceCodeText" : "void testPublicCacheDirPermission() throws Exception\n{\r\n    NMStateStoreService spyStateStore = spy(nmContext.getNMStateStore());\r\n    when(spyStateStore.canRecover()).thenReturn(true);\r\n    NMContext spyContext = spy(nmContext);\r\n    when(spyContext.getNMStateStore()).thenReturn(spyStateStore);\r\n    Path localDir = new Path(\"target\", \"testPublicCacheDirPermission\");\r\n    String sDir = lfs.makeQualified(localDir).toString();\r\n    conf.setStrings(YarnConfiguration.NM_LOCAL_DIRS, sDir);\r\n    conf.setInt(YarnConfiguration.NM_LOCAL_CACHE_MAX_FILES_PER_DIRECTORY, 38);\r\n    DrainDispatcher dispatcher = new DrainDispatcher();\r\n    EventHandler<ApplicationEvent> applicationBus = mock(EventHandler.class);\r\n    dispatcher.register(ApplicationEventType.class, applicationBus);\r\n    EventHandler<ContainerEvent> containerBus = mock(EventHandler.class);\r\n    dispatcher.register(ContainerEventType.class, containerBus);\r\n    ContainerExecutor exec = mock(ContainerExecutor.class);\r\n    DeletionService delService = mock(DeletionService.class);\r\n    LocalDirsHandlerService dirsHandler = new LocalDirsHandlerService();\r\n    dirsHandler.init(conf);\r\n    dispatcher.init(conf);\r\n    dispatcher.start();\r\n    try {\r\n        ResourceLocalizationService rawService = new ResourceLocalizationService(dispatcher, exec, delService, dirsHandler, spyContext, null);\r\n        ResourceLocalizationService spyService = spy(rawService);\r\n        doReturn(mockServer).when(spyService).createServer();\r\n        doReturn(lfs).when(spyService).getLocalFileContext(isA(Configuration.class));\r\n        spyService.init(conf);\r\n        spyService.start();\r\n        final FsPermission expectedPerm = new FsPermission((short) 0755);\r\n        Path publicCache = new Path(localDir, ContainerLocalizer.FILECACHE);\r\n        FsPermission wrongPerm = new FsPermission((short) 0700);\r\n        Path overflowFolder = new Path(publicCache, \"0\");\r\n        lfs.mkdir(overflowFolder, wrongPerm, false);\r\n        spyService.lfs.setUMask(new FsPermission((short) 0777));\r\n        final String user = \"user0\";\r\n        final Application app = mock(Application.class);\r\n        final ApplicationId appId = BuilderUtils.newApplicationId(314159265358979L, 3);\r\n        when(app.getUser()).thenReturn(user);\r\n        when(app.getAppId()).thenReturn(appId);\r\n        spyService.handle(new ApplicationLocalizationEvent(LocalizationEventType.INIT_APPLICATION_RESOURCES, app));\r\n        dispatcher.await();\r\n        final Container c = getMockContainer(appId, 42, user);\r\n        Random r = new Random();\r\n        long seed = r.nextLong();\r\n        System.out.println(\"SEED: \" + seed);\r\n        r.setSeed(seed);\r\n        Set<LocalResourceRequest> pubRsrcs = new HashSet<LocalResourceRequest>();\r\n        for (int i = 0; i < 3; i++) {\r\n            LocalResource pubResource = getPublicMockedResource(r, true, conf, sDir);\r\n            LocalResourceRequest pubReq = new LocalResourceRequest(pubResource);\r\n            pubRsrcs.add(pubReq);\r\n        }\r\n        Map<LocalResourceVisibility, Collection<LocalResourceRequest>> req = new HashMap<LocalResourceVisibility, Collection<LocalResourceRequest>>();\r\n        req.put(LocalResourceVisibility.PUBLIC, pubRsrcs);\r\n        spyService.handle(new ContainerLocalizationRequestEvent(c, req));\r\n        dispatcher.await();\r\n        Assert.assertEquals(\"Cache directory permissions filecache/0 is incorrect\", expectedPerm, lfs.getFileStatus(overflowFolder).getPermission());\r\n    } finally {\r\n        dispatcher.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testLocalizerHeartbeatWhenAppCleaningUp",
  "errType" : [ "Exception", "Exception" ],
  "containingMethodsNum" : 56,
  "sourceCodeText" : "void testLocalizerHeartbeatWhenAppCleaningUp() throws Exception\n{\r\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, lfs.makeQualified(new Path(basedir, 0 + \"\")).toString());\r\n    DrainDispatcher dispatcher = new DrainDispatcher();\r\n    dispatcher.init(conf);\r\n    dispatcher.start();\r\n    dispatcher.register(ApplicationEventType.class, mock(EventHandler.class));\r\n    dispatcher.register(ContainerEventType.class, mock(EventHandler.class));\r\n    DummyExecutor exec = new DummyExecutor();\r\n    LocalDirsHandlerService dirsHandler = new LocalDirsHandlerService();\r\n    dirsHandler.init(conf);\r\n    ResourceLocalizationService rawService = new ResourceLocalizationService(dispatcher, exec, mock(DeletionService.class), dirsHandler, nmContext, metrics);\r\n    ResourceLocalizationService spyService = spy(rawService);\r\n    doReturn(mockServer).when(spyService).createServer();\r\n    doReturn(lfs).when(spyService).getLocalFileContext(isA(Configuration.class));\r\n    try {\r\n        spyService.init(conf);\r\n        spyService.start();\r\n        final Application app = mock(Application.class);\r\n        final ApplicationId appId = BuilderUtils.newApplicationId(1234567890L, 3);\r\n        when(app.getUser()).thenReturn(\"user0\");\r\n        when(app.getAppId()).thenReturn(appId);\r\n        when(app.toString()).thenReturn(appId.toString());\r\n        spyService.handle(new ApplicationLocalizationEvent(LocalizationEventType.INIT_APPLICATION_RESOURCES, app));\r\n        dispatcher.await();\r\n        Random r = new Random();\r\n        long seed = r.nextLong();\r\n        System.out.println(\"SEED: \" + seed);\r\n        r.setSeed(seed);\r\n        final Container c = getMockContainer(appId, 46, \"user0\");\r\n        FSDataOutputStream out = new FSDataOutputStream(new DataOutputBuffer(), null);\r\n        doReturn(out).when(spylfs).createInternal(isA(Path.class), isA(EnumSet.class), isA(FsPermission.class), anyInt(), anyShort(), anyLong(), isA(Progressable.class), isA(ChecksumOpt.class), anyBoolean());\r\n        final LocalResource resource1 = getAppMockedResource(r);\r\n        final LocalResource resource2 = getAppMockedResource(r);\r\n        final LocalResourceRequest req1 = new LocalResourceRequest(resource1);\r\n        final LocalResourceRequest req2 = new LocalResourceRequest(resource2);\r\n        Map<LocalResourceVisibility, Collection<LocalResourceRequest>> rsrcs = new HashMap<LocalResourceVisibility, Collection<LocalResourceRequest>>();\r\n        List<LocalResourceRequest> appResourceList = Arrays.asList(req1, req2);\r\n        rsrcs.put(LocalResourceVisibility.APPLICATION, appResourceList);\r\n        spyService.handle(new ContainerLocalizationRequestEvent(c, rsrcs));\r\n        dispatcher.await();\r\n        exec.waitForLocalizers(1);\r\n        final String containerIdStr = c.getContainerId().toString();\r\n        LocalizerRunner locRunnerForContainer = spyService.getLocalizerRunner(containerIdStr);\r\n        LocalResourceStatus rsrcSuccess = mock(LocalResourceStatus.class);\r\n        LocalizerStatus stat = mock(LocalizerStatus.class);\r\n        when(stat.getLocalizerId()).thenReturn(containerIdStr);\r\n        when(rsrcSuccess.getResource()).thenReturn(resource1);\r\n        when(rsrcSuccess.getLocalSize()).thenReturn(4344L);\r\n        when(rsrcSuccess.getLocalPath()).thenReturn(getPath(\"/some/path\"));\r\n        when(rsrcSuccess.getStatus()).thenReturn(ResourceStatusType.FETCH_SUCCESS);\r\n        when(stat.getResources()).thenReturn(Collections.<LocalResourceStatus>emptyList());\r\n        LocalizerHeartbeatResponse response = spyService.heartbeat(stat);\r\n        assertEquals(\"NM should tell localizer to be LIVE in Heartbeat.\", LocalizerAction.LIVE, response.getLocalizerAction());\r\n        spyService.handle(new ContainerLocalizationCleanupEvent(c, rsrcs));\r\n        dispatcher.await();\r\n        try {\r\n            locRunnerForContainer.processHeartbeat(Collections.singletonList(rsrcSuccess));\r\n        } catch (Exception e) {\r\n            fail(\"Exception should not have been thrown on processing heartbeat\");\r\n        }\r\n        spyService.handle(new ApplicationLocalizationEvent(LocalizationEventType.DESTROY_APPLICATION_RESOURCES, app));\r\n        dispatcher.await();\r\n        try {\r\n            locRunnerForContainer.processHeartbeat(Collections.singletonList(rsrcSuccess));\r\n        } catch (Exception e) {\r\n            fail(\"Exception should not have been thrown on processing heartbeat\");\r\n        }\r\n        response = spyService.heartbeat(stat);\r\n        assertEquals(\"NM should tell localizer to DIE in Heartbeat.\", LocalizerAction.DIE, response.getLocalizerAction());\r\n        exec.setStopLocalization();\r\n    } finally {\r\n        spyService.stop();\r\n        dispatcher.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testFailedPublicResource",
  "errType" : [ "InterruptedException", "BrokenBarrierException" ],
  "containingMethodsNum" : 37,
  "sourceCodeText" : "void testFailedPublicResource() throws Exception\n{\r\n    List<Path> localDirs = new ArrayList<Path>();\r\n    String[] sDirs = new String[4];\r\n    for (int i = 0; i < 4; ++i) {\r\n        localDirs.add(lfs.makeQualified(new Path(basedir, i + \"\")));\r\n        sDirs[i] = localDirs.get(i).toString();\r\n    }\r\n    conf.setStrings(YarnConfiguration.NM_LOCAL_DIRS, sDirs);\r\n    DrainDispatcher dispatcher = new DrainDispatcher();\r\n    EventHandler<ApplicationEvent> applicationBus = mock(EventHandler.class);\r\n    dispatcher.register(ApplicationEventType.class, applicationBus);\r\n    EventHandler<ContainerEvent> containerBus = mock(EventHandler.class);\r\n    dispatcher.register(ContainerEventType.class, containerBus);\r\n    ContainerExecutor exec = mock(ContainerExecutor.class);\r\n    DeletionService delService = mock(DeletionService.class);\r\n    LocalDirsHandlerService dirsHandler = new LocalDirsHandlerService();\r\n    dirsHandler.init(conf);\r\n    dispatcher.init(conf);\r\n    dispatcher.start();\r\n    try {\r\n        ResourceLocalizationService rawService = new ResourceLocalizationService(dispatcher, exec, delService, dirsHandler, nmContext, metrics);\r\n        ResourceLocalizationService spyService = spy(rawService);\r\n        doReturn(mockServer).when(spyService).createServer();\r\n        doReturn(lfs).when(spyService).getLocalFileContext(isA(Configuration.class));\r\n        spyService.init(conf);\r\n        spyService.start();\r\n        final String user = \"user0\";\r\n        final Application app = mock(Application.class);\r\n        final ApplicationId appId = BuilderUtils.newApplicationId(314159265358979L, 3);\r\n        when(app.getUser()).thenReturn(user);\r\n        when(app.getAppId()).thenReturn(appId);\r\n        spyService.handle(new ApplicationLocalizationEvent(LocalizationEventType.INIT_APPLICATION_RESOURCES, app));\r\n        dispatcher.await();\r\n        final Container c = getMockContainer(appId, 42, user);\r\n        Random r = new Random();\r\n        long seed = r.nextLong();\r\n        System.out.println(\"SEED: \" + seed);\r\n        r.setSeed(seed);\r\n        final CyclicBarrier barrier = new CyclicBarrier(2);\r\n        doAnswer(new Answer<Void>() {\r\n\r\n            public Void answer(InvocationOnMock invocation) throws IOException {\r\n                try {\r\n                    barrier.await();\r\n                } catch (InterruptedException e) {\r\n                } catch (BrokenBarrierException e) {\r\n                }\r\n                throw new IOException(\"forced failure\");\r\n            }\r\n        }).when(spylfs).setPermission(isA(Path.class), isA(FsPermission.class));\r\n        final LocalResource pubResource = getPublicMockedResource(r);\r\n        final LocalResourceRequest pubReq = new LocalResourceRequest(pubResource);\r\n        Map<LocalResourceVisibility, Collection<LocalResourceRequest>> req = new HashMap<LocalResourceVisibility, Collection<LocalResourceRequest>>();\r\n        req.put(LocalResourceVisibility.PUBLIC, Collections.singletonList(pubReq));\r\n        Set<LocalResourceRequest> pubRsrcs = new HashSet<LocalResourceRequest>();\r\n        pubRsrcs.add(pubReq);\r\n        spyService.handle(new ContainerLocalizationRequestEvent(c, req));\r\n        spyService.handle(new ContainerLocalizationRequestEvent(c, req));\r\n        dispatcher.await();\r\n        barrier.await();\r\n        verify(containerBus, timeout(5000).times(2)).handle(isA(ContainerResourceFailedEvent.class));\r\n    } finally {\r\n        dispatcher.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testPublicResourceAddResourceExceptions",
  "errType" : null,
  "containingMethodsNum" : 50,
  "sourceCodeText" : "void testPublicResourceAddResourceExceptions() throws Exception\n{\r\n    List<Path> localDirs = new ArrayList<Path>();\r\n    String[] sDirs = new String[4];\r\n    for (int i = 0; i < 4; ++i) {\r\n        localDirs.add(lfs.makeQualified(new Path(basedir, i + \"\")));\r\n        sDirs[i] = localDirs.get(i).toString();\r\n    }\r\n    conf.setStrings(YarnConfiguration.NM_LOCAL_DIRS, sDirs);\r\n    DrainDispatcher dispatcher = new DrainDispatcher();\r\n    EventHandler<ApplicationEvent> applicationBus = mock(EventHandler.class);\r\n    dispatcher.register(ApplicationEventType.class, applicationBus);\r\n    EventHandler<ContainerEvent> containerBus = mock(EventHandler.class);\r\n    dispatcher.register(ContainerEventType.class, containerBus);\r\n    ContainerExecutor exec = mock(ContainerExecutor.class);\r\n    DeletionService delService = mock(DeletionService.class);\r\n    LocalDirsHandlerService dirsHandler = new LocalDirsHandlerService();\r\n    LocalDirsHandlerService dirsHandlerSpy = spy(dirsHandler);\r\n    dirsHandlerSpy.init(conf);\r\n    dispatcher.init(conf);\r\n    dispatcher.start();\r\n    try {\r\n        ResourceLocalizationService rawService = new ResourceLocalizationService(dispatcher, exec, delService, dirsHandlerSpy, nmContext, metrics);\r\n        ResourceLocalizationService spyService = spy(rawService);\r\n        doReturn(mockServer).when(spyService).createServer();\r\n        doReturn(lfs).when(spyService).getLocalFileContext(isA(Configuration.class));\r\n        spyService.init(conf);\r\n        spyService.start();\r\n        final String user = \"user0\";\r\n        final Application app = mock(Application.class);\r\n        final ApplicationId appId = BuilderUtils.newApplicationId(314159265358979L, 3);\r\n        when(app.getUser()).thenReturn(user);\r\n        when(app.getAppId()).thenReturn(appId);\r\n        spyService.handle(new ApplicationLocalizationEvent(LocalizationEventType.INIT_APPLICATION_RESOURCES, app));\r\n        dispatcher.await();\r\n        Random r = new Random();\r\n        r.setSeed(r.nextLong());\r\n        final LocalResource pubResource = getPublicMockedResource(r);\r\n        final LocalResourceRequest pubReq = new LocalResourceRequest(pubResource);\r\n        Map<LocalResourceVisibility, Collection<LocalResourceRequest>> req = new HashMap<LocalResourceVisibility, Collection<LocalResourceRequest>>();\r\n        req.put(LocalResourceVisibility.PUBLIC, Collections.singletonList(pubReq));\r\n        final Container c = getMockContainer(appId, 42, user);\r\n        Mockito.doThrow(new IOException()).when(dirsHandlerSpy).getLocalPathForWrite(isA(String.class), Mockito.anyLong(), Mockito.anyBoolean());\r\n        spyService.handle(new ContainerLocalizationRequestEvent(c, req));\r\n        dispatcher.await();\r\n        LocalResourcesTracker tracker = spyService.getLocalResourcesTracker(LocalResourceVisibility.PUBLIC, user, appId);\r\n        Assert.assertNull(tracker.getLocalizedResource(pubReq));\r\n        String name = Long.toHexString(r.nextLong());\r\n        URL url = getPath(\"/local/PRIVATE/\" + name + \"/\");\r\n        final LocalResource rsrc = BuilderUtils.newLocalResource(url, LocalResourceType.FILE, LocalResourceVisibility.PUBLIC, r.nextInt(1024) + 1024L, r.nextInt(1024) + 2048L, false);\r\n        final LocalResourceRequest pubReq1 = new LocalResourceRequest(rsrc);\r\n        Map<LocalResourceVisibility, Collection<LocalResourceRequest>> req1 = new HashMap<LocalResourceVisibility, Collection<LocalResourceRequest>>();\r\n        req1.put(LocalResourceVisibility.PUBLIC, Collections.singletonList(pubReq1));\r\n        Mockito.doCallRealMethod().when(dirsHandlerSpy).getLocalPathForWrite(isA(String.class), Mockito.anyLong(), Mockito.anyBoolean());\r\n        spyService.handle(new ContainerLocalizationRequestEvent(c, req1));\r\n        dispatcher.await();\r\n        tracker = spyService.getLocalResourcesTracker(LocalResourceVisibility.PUBLIC, user, appId);\r\n        Assert.assertNull(tracker.getLocalizedResource(pubReq));\r\n        PublicLocalizer publicLocalizer = spyService.getPublicLocalizer();\r\n        publicLocalizer.threadPool.shutdown();\r\n        spyService.handle(new ContainerLocalizationRequestEvent(c, req));\r\n        dispatcher.await();\r\n        tracker = spyService.getLocalResourcesTracker(LocalResourceVisibility.PUBLIC, user, appId);\r\n        Assert.assertNull(tracker.getLocalizedResource(pubReq));\r\n    } finally {\r\n        dispatcher.await();\r\n        dispatcher.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testParallelDownloadAttemptsForPrivateResource",
  "errType" : null,
  "containingMethodsNum" : 49,
  "sourceCodeText" : "void testParallelDownloadAttemptsForPrivateResource() throws Exception\n{\r\n    DrainDispatcher dispatcher1 = null;\r\n    try {\r\n        dispatcher1 = new DrainDispatcher();\r\n        String user = \"testuser\";\r\n        ApplicationId appId = BuilderUtils.newApplicationId(1, 1);\r\n        List<Path> localDirs = new ArrayList<Path>();\r\n        String[] sDirs = new String[1];\r\n        for (int i = 0; i < 1; ++i) {\r\n            localDirs.add(lfs.makeQualified(new Path(basedir, i + \"\")));\r\n            sDirs[i] = localDirs.get(i).toString();\r\n        }\r\n        conf.setStrings(YarnConfiguration.NM_LOCAL_DIRS, sDirs);\r\n        LocalDirsHandlerService localDirHandler = new LocalDirsHandlerService();\r\n        localDirHandler.init(conf);\r\n        EventHandler<ApplicationEvent> applicationBus = mock(EventHandler.class);\r\n        dispatcher1.register(ApplicationEventType.class, applicationBus);\r\n        EventHandler<ContainerEvent> containerBus = mock(EventHandler.class);\r\n        dispatcher1.register(ContainerEventType.class, containerBus);\r\n        ContainerExecutor exec = mock(ContainerExecutor.class);\r\n        DeletionService delService = mock(DeletionService.class);\r\n        LocalDirsHandlerService dirsHandler = new LocalDirsHandlerService();\r\n        dirsHandler.init(conf);\r\n        dispatcher1.init(conf);\r\n        dispatcher1.start();\r\n        ResourceLocalizationService rls = new ResourceLocalizationService(dispatcher1, exec, delService, localDirHandler, nmContext, metrics);\r\n        dispatcher1.register(LocalizationEventType.class, rls);\r\n        rls.init(conf);\r\n        rls.handle(createApplicationLocalizationEvent(user, appId));\r\n        LocalResourceRequest req = new LocalResourceRequest(new Path(\"file:///tmp\"), 123L, LocalResourceType.FILE, LocalResourceVisibility.PRIVATE, \"\");\r\n        Container container1 = createMockContainer(user, 1);\r\n        String localizerId1 = container1.getContainerId().toString();\r\n        rls.getPrivateLocalizers().put(localizerId1, rls.new LocalizerRunner(new LocalizerContext(user, container1.getContainerId(), null), localizerId1));\r\n        LocalizerRunner localizerRunner1 = rls.getLocalizerRunner(localizerId1);\r\n        dispatcher1.getEventHandler().handle(createContainerLocalizationEvent(container1, LocalResourceVisibility.PRIVATE, req));\r\n        Assert.assertTrue(waitForPrivateDownloadToStart(rls, localizerId1, 1, 5000));\r\n        ContainerImpl container2 = createMockContainer(user, 2);\r\n        String localizerId2 = container2.getContainerId().toString();\r\n        rls.getPrivateLocalizers().put(localizerId2, rls.new LocalizerRunner(new LocalizerContext(user, container2.getContainerId(), null), localizerId2));\r\n        LocalizerRunner localizerRunner2 = rls.getLocalizerRunner(localizerId2);\r\n        dispatcher1.getEventHandler().handle(createContainerLocalizationEvent(container2, LocalResourceVisibility.PRIVATE, req));\r\n        Assert.assertTrue(waitForPrivateDownloadToStart(rls, localizerId2, 1, 5000));\r\n        LocalResourcesTracker tracker = rls.getLocalResourcesTracker(LocalResourceVisibility.PRIVATE, user, appId);\r\n        LocalizedResource lr = tracker.getLocalizedResource(req);\r\n        Assert.assertEquals(ResourceState.DOWNLOADING, lr.getState());\r\n        Assert.assertEquals(1, lr.sem.availablePermits());\r\n        LocalizerHeartbeatResponse response1 = rls.heartbeat(createLocalizerStatus(localizerId1));\r\n        Assert.assertEquals(1, localizerRunner1.scheduled.size());\r\n        Assert.assertEquals(req.getResource(), response1.getResourceSpecs().get(0).getResource().getResource());\r\n        Assert.assertEquals(0, lr.sem.availablePermits());\r\n        LocalizerHeartbeatResponse response2 = rls.heartbeat(createLocalizerStatus(localizerId2));\r\n        Assert.assertEquals(0, localizerRunner2.scheduled.size());\r\n        Assert.assertEquals(0, response2.getResourceSpecs().size());\r\n        rls.heartbeat(createLocalizerStatusForFailedResource(localizerId1, req));\r\n        Assert.assertTrue(waitForResourceState(lr, rls, req, LocalResourceVisibility.PRIVATE, user, appId, ResourceState.FAILED, 5000));\r\n        Assert.assertTrue(lr.getState().equals(ResourceState.FAILED));\r\n        Assert.assertEquals(0, localizerRunner1.scheduled.size());\r\n        response2 = rls.heartbeat(createLocalizerStatus(localizerId2));\r\n        Assert.assertEquals(0, localizerRunner2.scheduled.size());\r\n        Assert.assertEquals(0, localizerRunner2.pending.size());\r\n        Assert.assertEquals(0, response2.getResourceSpecs().size());\r\n    } finally {\r\n        if (dispatcher1 != null) {\r\n            dispatcher1.stop();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testLocalResourcePath",
  "errType" : null,
  "containingMethodsNum" : 37,
  "sourceCodeText" : "void testLocalResourcePath() throws Exception\n{\r\n    DrainDispatcher dispatcher1 = null;\r\n    try {\r\n        dispatcher1 = new DrainDispatcher();\r\n        String user = \"testuser\";\r\n        ApplicationId appId = BuilderUtils.newApplicationId(1, 1);\r\n        List<Path> localDirs = new ArrayList<Path>();\r\n        String[] sDirs = new String[1];\r\n        for (int i = 0; i < 1; ++i) {\r\n            localDirs.add(lfs.makeQualified(new Path(basedir, i + \"\")));\r\n            sDirs[i] = localDirs.get(i).toString();\r\n        }\r\n        conf.setStrings(YarnConfiguration.NM_LOCAL_DIRS, sDirs);\r\n        LocalDirsHandlerService localDirHandler = new LocalDirsHandlerService();\r\n        localDirHandler.init(conf);\r\n        EventHandler<ApplicationEvent> applicationBus = mock(EventHandler.class);\r\n        dispatcher1.register(ApplicationEventType.class, applicationBus);\r\n        EventHandler<ContainerEvent> containerBus = mock(EventHandler.class);\r\n        dispatcher1.register(ContainerEventType.class, containerBus);\r\n        ContainerExecutor exec = mock(ContainerExecutor.class);\r\n        DeletionService delService = mock(DeletionService.class);\r\n        LocalDirsHandlerService dirsHandler = new LocalDirsHandlerService();\r\n        dirsHandler.init(conf);\r\n        dispatcher1.init(conf);\r\n        dispatcher1.start();\r\n        ResourceLocalizationService rls = new ResourceLocalizationService(dispatcher1, exec, delService, localDirHandler, nmContext, metrics);\r\n        dispatcher1.register(LocalizationEventType.class, rls);\r\n        rls.init(conf);\r\n        rls.handle(createApplicationLocalizationEvent(user, appId));\r\n        Container container1 = createMockContainer(user, 1);\r\n        String localizerId1 = container1.getContainerId().toString();\r\n        rls.getPrivateLocalizers().put(localizerId1, rls.new LocalizerRunner(new LocalizerContext(user, container1.getContainerId(), null), localizerId1));\r\n        LocalResourceRequest reqPriv = new LocalResourceRequest(new Path(\"file:///tmp1\"), 123L, LocalResourceType.FILE, LocalResourceVisibility.PRIVATE, \"\");\r\n        List<LocalResourceRequest> privList = new ArrayList<LocalResourceRequest>();\r\n        privList.add(reqPriv);\r\n        LocalResourceRequest reqApp = new LocalResourceRequest(new Path(\"file:///tmp2\"), 123L, LocalResourceType.FILE, LocalResourceVisibility.APPLICATION, \"\");\r\n        List<LocalResourceRequest> appList = new ArrayList<LocalResourceRequest>();\r\n        appList.add(reqApp);\r\n        Map<LocalResourceVisibility, Collection<LocalResourceRequest>> rsrcs = new HashMap<LocalResourceVisibility, Collection<LocalResourceRequest>>();\r\n        rsrcs.put(LocalResourceVisibility.APPLICATION, appList);\r\n        rsrcs.put(LocalResourceVisibility.PRIVATE, privList);\r\n        dispatcher1.getEventHandler().handle(new ContainerLocalizationRequestEvent(container1, rsrcs));\r\n        Assert.assertTrue(waitForPrivateDownloadToStart(rls, localizerId1, 2, 5000));\r\n        String userCachePath = StringUtils.join(Path.SEPARATOR, Arrays.asList(localDirs.get(0).toUri().getRawPath(), ContainerLocalizer.USERCACHE, user, ContainerLocalizer.FILECACHE));\r\n        String userAppCachePath = StringUtils.join(Path.SEPARATOR, Arrays.asList(localDirs.get(0).toUri().getRawPath(), ContainerLocalizer.USERCACHE, user, ContainerLocalizer.APPCACHE, appId.toString(), ContainerLocalizer.FILECACHE));\r\n        int returnedResources = 0;\r\n        boolean appRsrc = false, privRsrc = false;\r\n        while (returnedResources < 2) {\r\n            LocalizerHeartbeatResponse response = rls.heartbeat(createLocalizerStatus(localizerId1));\r\n            for (ResourceLocalizationSpec resourceSpec : response.getResourceSpecs()) {\r\n                returnedResources++;\r\n                Path destinationDirectory = new Path(resourceSpec.getDestinationDirectory().getFile());\r\n                if (resourceSpec.getResource().getVisibility() == LocalResourceVisibility.APPLICATION) {\r\n                    appRsrc = true;\r\n                    Assert.assertEquals(userAppCachePath, destinationDirectory.getParent().toUri().toString());\r\n                } else if (resourceSpec.getResource().getVisibility() == LocalResourceVisibility.PRIVATE) {\r\n                    privRsrc = true;\r\n                    Assert.assertEquals(userCachePath, destinationDirectory.getParent().toUri().toString());\r\n                } else {\r\n                    throw new Exception(\"Unexpected resource received.\");\r\n                }\r\n            }\r\n        }\r\n        Assert.assertTrue(appRsrc && privRsrc);\r\n    } finally {\r\n        if (dispatcher1 != null) {\r\n            dispatcher1.stop();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "createLocalizerStatusForFailedResource",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "LocalizerStatus createLocalizerStatusForFailedResource(String localizerId, LocalResourceRequest req)\n{\r\n    LocalizerStatus status = createLocalizerStatus(localizerId);\r\n    LocalResourceStatus resourceStatus = new LocalResourceStatusPBImpl();\r\n    resourceStatus.setException(SerializedException.newInstance(new YarnException(\"test\")));\r\n    resourceStatus.setStatus(ResourceStatusType.FETCH_FAILURE);\r\n    resourceStatus.setResource(req);\r\n    status.addResourceStatus(resourceStatus);\r\n    return status;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "createLocalizerStatus",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LocalizerStatus createLocalizerStatus(String localizerId1)\n{\r\n    LocalizerStatus status = new LocalizerStatusPBImpl();\r\n    status.setLocalizerId(localizerId1);\r\n    return status;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "createApplicationLocalizationEvent",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "LocalizationEvent createApplicationLocalizationEvent(String user, ApplicationId appId)\n{\r\n    Application app = mock(Application.class);\r\n    when(app.getUser()).thenReturn(user);\r\n    when(app.getAppId()).thenReturn(appId);\r\n    return new ApplicationLocalizationEvent(LocalizationEventType.INIT_APPLICATION_RESOURCES, app);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testParallelDownloadAttemptsForPublicResource",
  "errType" : null,
  "containingMethodsNum" : 44,
  "sourceCodeText" : "void testParallelDownloadAttemptsForPublicResource() throws Exception\n{\r\n    DrainDispatcher dispatcher1 = null;\r\n    String user = \"testuser\";\r\n    try {\r\n        List<Path> localDirs = new ArrayList<Path>();\r\n        String[] sDirs = new String[1];\r\n        for (int i = 0; i < 1; ++i) {\r\n            localDirs.add(lfs.makeQualified(new Path(basedir, i + \"\")));\r\n            sDirs[i] = localDirs.get(i).toString();\r\n        }\r\n        conf.setStrings(YarnConfiguration.NM_LOCAL_DIRS, sDirs);\r\n        EventHandler<ApplicationEvent> applicationBus = mock(EventHandler.class);\r\n        dispatcher1 = new DrainDispatcher();\r\n        dispatcher1.register(ApplicationEventType.class, applicationBus);\r\n        EventHandler<ContainerEvent> containerBus = mock(EventHandler.class);\r\n        dispatcher1.register(ContainerEventType.class, containerBus);\r\n        ContainerExecutor exec = mock(ContainerExecutor.class);\r\n        DeletionService delService = mock(DeletionService.class);\r\n        LocalDirsHandlerService dirsHandler = new LocalDirsHandlerService();\r\n        dirsHandler.init(conf);\r\n        dispatcher1.init(conf);\r\n        dispatcher1.start();\r\n        ResourceLocalizationService rawService = new ResourceLocalizationService(dispatcher1, exec, delService, dirsHandler, nmContext, metrics);\r\n        ResourceLocalizationService spyService = spy(rawService);\r\n        dispatcher1.register(LocalizationEventType.class, spyService);\r\n        spyService.init(conf);\r\n        Assert.assertEquals(0, spyService.getPublicLocalizer().pending.size());\r\n        LocalResourceRequest req = new LocalResourceRequest(new Path(\"/tmp\"), 123L, LocalResourceType.FILE, LocalResourceVisibility.PUBLIC, \"\");\r\n        ApplicationImpl app = mock(ApplicationImpl.class);\r\n        ApplicationId appId = BuilderUtils.newApplicationId(1, 1);\r\n        when(app.getAppId()).thenReturn(appId);\r\n        when(app.getUser()).thenReturn(user);\r\n        dispatcher1.getEventHandler().handle(new ApplicationLocalizationEvent(LocalizationEventType.INIT_APPLICATION_RESOURCES, app));\r\n        ContainerImpl container1 = createMockContainer(user, 1);\r\n        dispatcher1.getEventHandler().handle(createContainerLocalizationEvent(container1, LocalResourceVisibility.PUBLIC, req));\r\n        Assert.assertTrue(waitForResourceState(null, spyService, req, LocalResourceVisibility.PUBLIC, user, null, ResourceState.DOWNLOADING, 5000));\r\n        Assert.assertTrue(waitForPublicDownloadToStart(spyService, 1, 5000));\r\n        LocalizedResource lr = getLocalizedResource(spyService, req, LocalResourceVisibility.PUBLIC, user, null);\r\n        Assert.assertEquals(ResourceState.DOWNLOADING, lr.getState());\r\n        Assert.assertEquals(1, spyService.getPublicLocalizer().pending.size());\r\n        Assert.assertEquals(0, lr.sem.availablePermits());\r\n        ContainerImpl container2 = createMockContainer(user, 2);\r\n        dispatcher1.getEventHandler().handle(createContainerLocalizationEvent(container2, LocalResourceVisibility.PUBLIC, req));\r\n        Assert.assertFalse(waitForPublicDownloadToStart(spyService, 2, 5000));\r\n        ResourceFailedLocalizationEvent locFailedEvent = new ResourceFailedLocalizationEvent(req, new Exception(\"test\").toString());\r\n        spyService.getLocalResourcesTracker(LocalResourceVisibility.PUBLIC, user, null).handle(locFailedEvent);\r\n        Assert.assertTrue(waitForResourceState(lr, spyService, req, LocalResourceVisibility.PUBLIC, user, null, ResourceState.FAILED, 5000));\r\n        Assert.assertTrue(waitForResourceState(lr, spyService, req, LocalResourceVisibility.APPLICATION, user, appId, ResourceState.FAILED, 5000));\r\n        lr.unlock();\r\n        spyService.getPublicLocalizer().pending.clear();\r\n        LocalizerContext lc = mock(LocalizerContext.class);\r\n        when(lc.getContainerId()).thenReturn(ContainerId.newContainerId(ApplicationAttemptId.newInstance(ApplicationId.newInstance(1L, 1), 1), 1L));\r\n        LocalizerResourceRequestEvent localizerEvent = new LocalizerResourceRequestEvent(lr, null, lc, null);\r\n        dispatcher1.getEventHandler().handle(localizerEvent);\r\n        Assert.assertFalse(waitForPublicDownloadToStart(spyService, 1, 5000));\r\n        Assert.assertEquals(1, lr.sem.availablePermits());\r\n    } finally {\r\n        if (dispatcher1 != null) {\r\n            dispatcher1.stop();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "waitForPrivateDownloadToStart",
  "errType" : [ "Exception", "Exception" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "boolean waitForPrivateDownloadToStart(ResourceLocalizationService service, String localizerId, int size, int maxWaitTime)\n{\r\n    List<LocalizerResourceRequestEvent> pending = null;\r\n    do {\r\n        if (service.getPrivateLocalizers().get(localizerId) != null) {\r\n            pending = service.getPrivateLocalizers().get(localizerId).pending;\r\n        }\r\n        if (pending == null) {\r\n            try {\r\n                maxWaitTime -= 20;\r\n                Thread.sleep(20);\r\n            } catch (Exception e) {\r\n            }\r\n        } else {\r\n            break;\r\n        }\r\n    } while (maxWaitTime > 0);\r\n    if (pending == null) {\r\n        return false;\r\n    }\r\n    do {\r\n        if (pending.size() == size) {\r\n            return true;\r\n        } else {\r\n            try {\r\n                maxWaitTime -= 20;\r\n                Thread.sleep(20);\r\n            } catch (Exception e) {\r\n            }\r\n        }\r\n    } while (maxWaitTime > 0);\r\n    return pending.size() == size;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "waitForPublicDownloadToStart",
  "errType" : [ "Exception", "InterruptedException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "boolean waitForPublicDownloadToStart(ResourceLocalizationService service, int size, int maxWaitTime)\n{\r\n    Map<Future<Path>, LocalizerResourceRequestEvent> pending = null;\r\n    do {\r\n        if (service.getPublicLocalizer() != null) {\r\n            pending = service.getPublicLocalizer().pending;\r\n        }\r\n        if (pending == null) {\r\n            try {\r\n                maxWaitTime -= 20;\r\n                Thread.sleep(20);\r\n            } catch (Exception e) {\r\n            }\r\n        } else {\r\n            break;\r\n        }\r\n    } while (maxWaitTime > 0);\r\n    if (pending == null) {\r\n        return false;\r\n    }\r\n    do {\r\n        if (pending.size() == size) {\r\n            return true;\r\n        } else {\r\n            try {\r\n                maxWaitTime -= 20;\r\n                Thread.sleep(20);\r\n            } catch (InterruptedException e) {\r\n            }\r\n        }\r\n    } while (maxWaitTime > 0);\r\n    return pending.size() == size;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getLocalizedResource",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LocalizedResource getLocalizedResource(ResourceLocalizationService service, LocalResourceRequest req, LocalResourceVisibility vis, String user, ApplicationId appId)\n{\r\n    return service.getLocalResourcesTracker(vis, user, appId).getLocalizedResource(req);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "waitForResourceState",
  "errType" : [ "InterruptedException", "InterruptedException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "boolean waitForResourceState(LocalizedResource lr, ResourceLocalizationService service, LocalResourceRequest req, LocalResourceVisibility vis, String user, ApplicationId appId, ResourceState resourceState, long maxWaitTime)\n{\r\n    LocalResourcesTracker tracker = null;\r\n    do {\r\n        if (tracker == null) {\r\n            tracker = service.getLocalResourcesTracker(vis, user, appId);\r\n        }\r\n        if (tracker != null && lr == null) {\r\n            lr = tracker.getLocalizedResource(req);\r\n        }\r\n        if (lr != null) {\r\n            break;\r\n        } else {\r\n            try {\r\n                maxWaitTime -= 20;\r\n                Thread.sleep(20);\r\n            } catch (InterruptedException e) {\r\n            }\r\n        }\r\n    } while (maxWaitTime > 0);\r\n    if (lr == null) {\r\n        return false;\r\n    }\r\n    do {\r\n        if (!lr.getState().equals(resourceState)) {\r\n            try {\r\n                maxWaitTime -= 50;\r\n                Thread.sleep(50);\r\n            } catch (InterruptedException e) {\r\n            }\r\n        } else {\r\n            break;\r\n        }\r\n    } while (maxWaitTime > 0);\r\n    return lr.getState().equals(resourceState);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "createContainerLocalizationEvent",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerLocalizationRequestEvent createContainerLocalizationEvent(Container container, LocalResourceVisibility vis, LocalResourceRequest req)\n{\r\n    Map<LocalResourceVisibility, Collection<LocalResourceRequest>> reqs = new HashMap<LocalResourceVisibility, Collection<LocalResourceRequest>>();\r\n    List<LocalResourceRequest> resourceList = new ArrayList<LocalResourceRequest>();\r\n    resourceList.add(req);\r\n    reqs.put(vis, resourceList);\r\n    return new ContainerLocalizationRequestEvent(container, reqs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "createMockContainer",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "ContainerImpl createMockContainer(String user, int containerId)\n{\r\n    ContainerImpl container = mock(ContainerImpl.class);\r\n    when(container.getContainerId()).thenReturn(BuilderUtils.newContainerId(1, 1, 1, containerId));\r\n    when(container.getUser()).thenReturn(user);\r\n    Credentials mockCredentials = mock(Credentials.class);\r\n    when(container.getCredentials()).thenReturn(mockCredentials);\r\n    when(container.getContainerState()).thenReturn(ContainerState.LOCALIZING);\r\n    return container;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getPath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "URL getPath(String path)\n{\r\n    URL url = BuilderUtils.newURL(\"file\", null, 0, path);\r\n    return url;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getMockedResource",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "LocalResource getMockedResource(Random r, LocalResourceVisibility vis)\n{\r\n    String name = Long.toHexString(r.nextLong());\r\n    URL url = getPath(\"/local/PRIVATE/\" + name);\r\n    LocalResource rsrc = BuilderUtils.newLocalResource(url, LocalResourceType.FILE, vis, r.nextInt(1024) + 1024L, r.nextInt(1024) + 2048L, false);\r\n    return rsrc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getMockedResource",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "LocalResource getMockedResource(Random r, LocalResourceVisibility vis, boolean create, Configuration conf, String path)\n{\r\n    String name = Long.toHexString(r.nextLong());\r\n    Path newpath = new Path(path + \"/local\", name);\r\n    File file = new File(Path.getPathWithoutSchemeAndAuthority(newpath).toString());\r\n    try {\r\n        FileSystem.create(FileSystem.get(conf), newpath, new FsPermission((short) 0755));\r\n        file.deleteOnExit();\r\n    } catch (IOException e) {\r\n        e.printStackTrace();\r\n    }\r\n    LocalResource mockedResource = BuilderUtils.newLocalResource(URL.fromPath(newpath), LocalResourceType.FILE, vis, file.getTotalSpace(), file.lastModified(), false);\r\n    return mockedResource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getAppMockedResource",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LocalResource getAppMockedResource(Random r)\n{\r\n    return getMockedResource(r, LocalResourceVisibility.APPLICATION);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getPublicMockedResource",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LocalResource getPublicMockedResource(Random r, boolean create, Configuration conf, String path)\n{\r\n    return getMockedResource(r, LocalResourceVisibility.PUBLIC, create, conf, path);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getPublicMockedResource",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LocalResource getPublicMockedResource(Random r)\n{\r\n    return getMockedResource(r, LocalResourceVisibility.PUBLIC);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getPrivateMockedResource",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LocalResource getPrivateMockedResource(Random r)\n{\r\n    return getMockedResource(r, LocalResourceVisibility.PRIVATE);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getMockContainer",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "Container getMockContainer(ApplicationId appId, int id, String user) throws IOException\n{\r\n    Container c = mock(Container.class);\r\n    ApplicationAttemptId appAttemptId = BuilderUtils.newApplicationAttemptId(appId, 1);\r\n    ContainerId cId = BuilderUtils.newContainerId(appAttemptId, id);\r\n    when(c.getUser()).thenReturn(user);\r\n    when(c.getContainerId()).thenReturn(cId);\r\n    Credentials creds = new Credentials();\r\n    Token<? extends TokenIdentifier> tk = getToken(id);\r\n    String fingerprint = ResourceLocalizationService.buildTokenFingerprint(tk);\r\n    assertNotNull(fingerprint);\r\n    assertTrue(\"Expected token fingerprint of 10 hex bytes delimited by space.\", fingerprint.matches(\"^(([0-9a-f]){2} ){9}([0-9a-f]){2}$\"));\r\n    creds.addToken(new Text(\"tok\" + id), tk);\r\n    when(c.getCredentials()).thenReturn(creds);\r\n    when(c.toString()).thenReturn(cId.toString());\r\n    when(c.getContainerState()).thenReturn(ContainerState.LOCALIZING);\r\n    return c;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "createSpyService",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "ResourceLocalizationService createSpyService(DrainDispatcher dispatcher, LocalDirsHandlerService dirsHandler, NMStateStoreService stateStore)\n{\r\n    ContainerExecutor exec = mock(ContainerExecutor.class);\r\n    LocalizerTracker mockLocalizerTracker = mock(LocalizerTracker.class);\r\n    DeletionService delService = mock(DeletionService.class);\r\n    NMContext nmContext = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore, false, conf);\r\n    ResourceLocalizationService rawService = new ResourceLocalizationService(dispatcher, exec, delService, dirsHandler, nmContext, metrics);\r\n    ResourceLocalizationService spyService = spy(rawService);\r\n    doReturn(mockServer).when(spyService).createServer();\r\n    doReturn(mockLocalizerTracker).when(spyService).createLocalizerTracker(isA(Configuration.class));\r\n    doReturn(lfs).when(spyService).getLocalFileContext(isA(Configuration.class));\r\n    return spyService;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "getToken",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Token<? extends TokenIdentifier> getToken(int id)\n{\r\n    return new Token((\"ident\" + id).getBytes(), (\"passwd\" + id).getBytes(), new Text(\"kind\" + id), new Text(\"service\" + id));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testFailedDirsResourceRelease",
  "errType" : [ "Throwable", "Throwable" ],
  "containingMethodsNum" : 110,
  "sourceCodeText" : "void testFailedDirsResourceRelease() throws Exception\n{\r\n    File f = new File(basedir.toString());\r\n    String[] sDirs = new String[4];\r\n    List<Path> localDirs = new ArrayList<Path>(sDirs.length);\r\n    for (int i = 0; i < 4; ++i) {\r\n        sDirs[i] = f.getAbsolutePath() + i;\r\n        localDirs.add(new Path(sDirs[i]));\r\n    }\r\n    List<Path> containerLocalDirs = new ArrayList<Path>(localDirs.size());\r\n    List<Path> appLocalDirs = new ArrayList<Path>(localDirs.size());\r\n    List<Path> nmLocalContainerDirs = new ArrayList<Path>(localDirs.size());\r\n    List<Path> nmLocalAppDirs = new ArrayList<Path>(localDirs.size());\r\n    conf.setStrings(YarnConfiguration.NM_LOCAL_DIRS, sDirs);\r\n    conf.setLong(YarnConfiguration.NM_DISK_HEALTH_CHECK_INTERVAL_MS, 500);\r\n    LocalizerTracker mockLocallilzerTracker = mock(LocalizerTracker.class);\r\n    DrainDispatcher dispatcher = new DrainDispatcher();\r\n    dispatcher.init(conf);\r\n    dispatcher.start();\r\n    EventHandler<ApplicationEvent> applicationBus = mock(EventHandler.class);\r\n    dispatcher.register(ApplicationEventType.class, applicationBus);\r\n    EventHandler<ContainerEvent> containerBus = mock(EventHandler.class);\r\n    dispatcher.register(ContainerEventType.class, containerBus);\r\n    EventHandler<LocalizerEvent> localizerBus = mock(EventHandler.class);\r\n    dispatcher.register(LocalizerEventType.class, localizerBus);\r\n    ContainerExecutor exec = mock(ContainerExecutor.class);\r\n    LocalDirsHandlerService mockDirsHandler = mock(LocalDirsHandlerService.class);\r\n    doReturn(new ArrayList<String>(Arrays.asList(sDirs))).when(mockDirsHandler).getLocalDirsForCleanup();\r\n    DeletionService delService = mock(DeletionService.class);\r\n    ResourceLocalizationService rawService = new ResourceLocalizationService(dispatcher, exec, delService, mockDirsHandler, nmContext, metrics);\r\n    ResourceLocalizationService spyService = spy(rawService);\r\n    doReturn(mockServer).when(spyService).createServer();\r\n    doReturn(mockLocallilzerTracker).when(spyService).createLocalizerTracker(isA(Configuration.class));\r\n    doReturn(lfs).when(spyService).getLocalFileContext(isA(Configuration.class));\r\n    FsPermission defaultPermission = FsPermission.getDirDefault().applyUMask(lfs.getUMask());\r\n    FsPermission nmPermission = ResourceLocalizationService.NM_PRIVATE_PERM.applyUMask(lfs.getUMask());\r\n    final FileStatus fs = new FileStatus(0, true, 1, 0, System.currentTimeMillis(), 0, defaultPermission, \"\", \"\", localDirs.get(0));\r\n    final FileStatus nmFs = new FileStatus(0, true, 1, 0, System.currentTimeMillis(), 0, nmPermission, \"\", \"\", localDirs.get(0));\r\n    final String user = \"user0\";\r\n    final Application app = mock(Application.class);\r\n    final ApplicationId appId = BuilderUtils.newApplicationId(314159265358979L, 3);\r\n    when(app.getUser()).thenReturn(user);\r\n    when(app.getAppId()).thenReturn(appId);\r\n    when(app.toString()).thenReturn(appId.toString());\r\n    final Container c = getMockContainer(appId, 42, user);\r\n    List<String> tmpDirs = mockDirsHandler.getLocalDirs();\r\n    for (int i = 0; i < tmpDirs.size(); ++i) {\r\n        Path usersdir = new Path(tmpDirs.get(i), ContainerLocalizer.USERCACHE);\r\n        Path userdir = new Path(usersdir, user);\r\n        Path allAppsdir = new Path(userdir, ContainerLocalizer.APPCACHE);\r\n        Path appDir = new Path(allAppsdir, appId.toString());\r\n        Path containerDir = new Path(appDir, c.getContainerId().toString());\r\n        containerLocalDirs.add(containerDir);\r\n        appLocalDirs.add(appDir);\r\n        Path sysDir = new Path(tmpDirs.get(i), ResourceLocalizationService.NM_PRIVATE_DIR);\r\n        Path appSysDir = new Path(sysDir, appId.toString());\r\n        Path containerSysDir = new Path(appSysDir, c.getContainerId().toString());\r\n        nmLocalContainerDirs.add(containerSysDir);\r\n        nmLocalAppDirs.add(appSysDir);\r\n    }\r\n    try {\r\n        spyService.init(conf);\r\n        spyService.start();\r\n        spyService.handle(new ApplicationLocalizationEvent(LocalizationEventType.INIT_APPLICATION_RESOURCES, app));\r\n        dispatcher.await();\r\n        LocalResourcesTracker appTracker = spyService.getLocalResourcesTracker(LocalResourceVisibility.APPLICATION, user, appId);\r\n        LocalResourcesTracker privTracker = spyService.getLocalResourcesTracker(LocalResourceVisibility.PRIVATE, user, appId);\r\n        LocalResourcesTracker pubTracker = spyService.getLocalResourcesTracker(LocalResourceVisibility.PUBLIC, user, appId);\r\n        Random r = new Random();\r\n        long seed = r.nextLong();\r\n        r.setSeed(seed);\r\n        final LocalResource privResource = getPrivateMockedResource(r);\r\n        final LocalResourceRequest privReq = new LocalResourceRequest(privResource);\r\n        final LocalResource appResource = getAppMockedResource(r);\r\n        final LocalResourceRequest appReq = new LocalResourceRequest(appResource);\r\n        final LocalResource pubResource = getPublicMockedResource(r);\r\n        final LocalResourceRequest pubReq = new LocalResourceRequest(pubResource);\r\n        Map<LocalResourceVisibility, Collection<LocalResourceRequest>> req = new HashMap<LocalResourceVisibility, Collection<LocalResourceRequest>>();\r\n        req.put(LocalResourceVisibility.PRIVATE, Collections.singletonList(privReq));\r\n        req.put(LocalResourceVisibility.APPLICATION, Collections.singletonList(appReq));\r\n        req.put(LocalResourceVisibility.PUBLIC, Collections.singletonList(pubReq));\r\n        Map<LocalResourceVisibility, Collection<LocalResourceRequest>> req2 = new HashMap<LocalResourceVisibility, Collection<LocalResourceRequest>>();\r\n        req2.put(LocalResourceVisibility.PRIVATE, Collections.singletonList(privReq));\r\n        spyService.handle(new ContainerLocalizationRequestEvent(c, req));\r\n        spyService.handle(new ContainerLocalizationRequestEvent(c, req2));\r\n        dispatcher.await();\r\n        int privRsrcCount = 0;\r\n        for (LocalizedResource lr : privTracker) {\r\n            privRsrcCount++;\r\n            Assert.assertEquals(\"Incorrect reference count\", 2, lr.getRefCount());\r\n            Assert.assertEquals(privReq, lr.getRequest());\r\n        }\r\n        Assert.assertEquals(1, privRsrcCount);\r\n        int appRsrcCount = 0;\r\n        for (LocalizedResource lr : appTracker) {\r\n            appRsrcCount++;\r\n            Assert.assertEquals(\"Incorrect reference count\", 1, lr.getRefCount());\r\n            Assert.assertEquals(appReq, lr.getRequest());\r\n        }\r\n        Assert.assertEquals(1, appRsrcCount);\r\n        int pubRsrcCount = 0;\r\n        for (LocalizedResource lr : pubTracker) {\r\n            pubRsrcCount++;\r\n            Assert.assertEquals(\"Incorrect reference count\", 1, lr.getRefCount());\r\n            Assert.assertEquals(pubReq, lr.getRequest());\r\n        }\r\n        Assert.assertEquals(1, pubRsrcCount);\r\n        for (int i = 0; i < containerLocalDirs.size(); ++i) {\r\n            if (i == 2) {\r\n                Mockito.doThrow(new IOException()).when(spylfs).getFileStatus(eq(containerLocalDirs.get(i)));\r\n                Mockito.doThrow(new IOException()).when(spylfs).getFileStatus(eq(nmLocalContainerDirs.get(i)));\r\n            } else {\r\n                doReturn(fs).when(spylfs).getFileStatus(eq(containerLocalDirs.get(i)));\r\n                doReturn(nmFs).when(spylfs).getFileStatus(eq(nmLocalContainerDirs.get(i)));\r\n            }\r\n        }\r\n        spyService.handle(new ContainerLocalizationCleanupEvent(c, req));\r\n        verify(mockLocallilzerTracker).cleanupPrivLocalizers(\"container_314159265358979_0003_01_000042\");\r\n        for (int i = 0; i < containerLocalDirs.size(); ++i) {\r\n            if (i == 2) {\r\n                try {\r\n                    verify(delService, times(1)).delete(argThat(new FileDeletionMatcher(delService, user, containerLocalDirs.get(i), null)));\r\n                    verify(delService, times(1)).delete(argThat(new FileDeletionMatcher(delService, null, nmLocalContainerDirs.get(i), null)));\r\n                    Assert.fail(\"deletion attempts for invalid dirs\");\r\n                } catch (Throwable e) {\r\n                    continue;\r\n                }\r\n            } else {\r\n                verify(delService, times(1)).delete(argThat(new FileDeletionMatcher(delService, user, containerLocalDirs.get(i), null)));\r\n                verify(delService, times(1)).delete(argThat(new FileDeletionMatcher(delService, null, nmLocalContainerDirs.get(i), null)));\r\n            }\r\n        }\r\n        ArgumentMatcher<ApplicationEvent> matchesAppDestroy = evt -> evt.getType() == ApplicationEventType.APPLICATION_RESOURCES_CLEANEDUP && appId == evt.getApplicationID();\r\n        dispatcher.await();\r\n        for (int i = 0; i < containerLocalDirs.size(); ++i) {\r\n            if (i == 3) {\r\n                Mockito.doThrow(new IOException()).when(spylfs).getFileStatus(eq(appLocalDirs.get(i)));\r\n                Mockito.doThrow(new UnsupportedFileSystemException(\"test\")).when(spylfs).getFileStatus(eq(nmLocalAppDirs.get(i)));\r\n            } else {\r\n                doReturn(fs).when(spylfs).getFileStatus(eq(appLocalDirs.get(i)));\r\n                doReturn(nmFs).when(spylfs).getFileStatus(eq(nmLocalAppDirs.get(i)));\r\n            }\r\n        }\r\n        LocalizationEvent destroyApp = new ApplicationLocalizationEvent(LocalizationEventType.DESTROY_APPLICATION_RESOURCES, app);\r\n        spyService.handle(destroyApp);\r\n        dispatcher.await();\r\n        verify(applicationBus).handle(argThat(matchesAppDestroy));\r\n        for (int i = 0; i < containerLocalDirs.size(); ++i) {\r\n            if (i == 3) {\r\n                try {\r\n                    verify(delService, times(1)).delete(argThat(new FileDeletionMatcher(delService, user, containerLocalDirs.get(i), null)));\r\n                    verify(delService, times(1)).delete(argThat(new FileDeletionMatcher(delService, null, nmLocalContainerDirs.get(i), null)));\r\n                    Assert.fail(\"deletion attempts for invalid dirs\");\r\n                } catch (Throwable e) {\r\n                    continue;\r\n                }\r\n            } else {\r\n                verify(delService, times(1)).delete(argThat(new FileDeletionMatcher(delService, user, containerLocalDirs.get(i), null)));\r\n                verify(delService, times(1)).delete(argThat(new FileDeletionMatcher(delService, null, nmLocalContainerDirs.get(i), null)));\r\n            }\r\n        }\r\n    } finally {\r\n        dispatcher.stop();\r\n        delService.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testDirHandler",
  "errType" : null,
  "containingMethodsNum" : 35,
  "sourceCodeText" : "void testDirHandler() throws Exception\n{\r\n    File f = new File(basedir.toString());\r\n    String[] sDirs = new String[4];\r\n    List<Path> localDirs = new ArrayList<Path>(sDirs.length);\r\n    for (int i = 0; i < 4; ++i) {\r\n        sDirs[i] = f.getAbsolutePath() + i;\r\n        localDirs.add(new Path(sDirs[i]));\r\n    }\r\n    conf.setStrings(YarnConfiguration.NM_LOCAL_DIRS, sDirs);\r\n    LocalizerTracker mockLocalizerTracker = mock(LocalizerTracker.class);\r\n    DrainDispatcher dispatcher = new DrainDispatcher();\r\n    dispatcher.init(conf);\r\n    dispatcher.start();\r\n    EventHandler<ApplicationEvent> applicationBus = mock(EventHandler.class);\r\n    dispatcher.register(ApplicationEventType.class, applicationBus);\r\n    EventHandler<LocalizerEvent> localizerBus = mock(EventHandler.class);\r\n    dispatcher.register(LocalizerEventType.class, localizerBus);\r\n    ContainerExecutor exec = mock(ContainerExecutor.class);\r\n    LocalDirsHandlerService mockDirsHandler = mock(LocalDirsHandlerService.class);\r\n    doReturn(new ArrayList<String>(Arrays.asList(sDirs))).when(mockDirsHandler).getLocalDirsForCleanup();\r\n    DeletionService delService = mock(DeletionService.class);\r\n    ResourceLocalizationService rawService = new ResourceLocalizationService(dispatcher, exec, delService, mockDirsHandler, nmContext, metrics);\r\n    ResourceLocalizationService spyService = spy(rawService);\r\n    doReturn(mockServer).when(spyService).createServer();\r\n    doReturn(mockLocalizerTracker).when(spyService).createLocalizerTracker(isA(Configuration.class));\r\n    final String user = \"user0\";\r\n    final Application app = mock(Application.class);\r\n    final ApplicationId appId = BuilderUtils.newApplicationId(314159265358979L, 3);\r\n    when(app.getUser()).thenReturn(user);\r\n    when(app.getAppId()).thenReturn(appId);\r\n    when(app.toString()).thenReturn(appId.toString());\r\n    try {\r\n        spyService.init(conf);\r\n        spyService.start();\r\n        spyService.handle(new ApplicationLocalizationEvent(LocalizationEventType.INIT_APPLICATION_RESOURCES, app));\r\n        dispatcher.await();\r\n        LocalResourcesTracker appTracker = spyService.getLocalResourcesTracker(LocalResourceVisibility.APPLICATION, user, appId);\r\n        LocalResourcesTracker privTracker = spyService.getLocalResourcesTracker(LocalResourceVisibility.PRIVATE, user, appId);\r\n        LocalResourcesTracker pubTracker = spyService.getLocalResourcesTracker(LocalResourceVisibility.PUBLIC, user, appId);\r\n        Assert.assertNotNull(\"dirHandler for appTracker is null!\", ((LocalResourcesTrackerImpl) appTracker).getDirsHandler());\r\n        Assert.assertNotNull(\"dirHandler for privTracker is null!\", ((LocalResourcesTrackerImpl) privTracker).getDirsHandler());\r\n        Assert.assertNotNull(\"dirHandler for pubTracker is null!\", ((LocalResourcesTrackerImpl) pubTracker).getDirsHandler());\r\n    } finally {\r\n        dispatcher.stop();\r\n        delService.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    cgroupDir = new File(System.getProperty(\"test.build.data\", System.getProperty(\"java.io.tmpdir\", \"target\")), this.getClass().getName());\r\n    FileUtils.deleteQuietly(cgroupDir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    FileUtils.deleteQuietly(cgroupDir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "testcheckAndDeleteCgroup",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testcheckAndDeleteCgroup() throws Exception\n{\r\n    CgroupsLCEResourcesHandler handler = new CgroupsLCEResourcesHandler();\r\n    handler.setConf(new YarnConfiguration());\r\n    handler.initConfig();\r\n    FileUtils.deleteQuietly(cgroupDir);\r\n    Assert.assertFalse(handler.checkAndDeleteCgroup(cgroupDir));\r\n    File tfile = new File(cgroupDir.getAbsolutePath(), \"tasks\");\r\n    FileOutputStream fos = FileUtils.openOutputStream(tfile);\r\n    File fspy = Mockito.spy(cgroupDir);\r\n    Mockito.when(fspy.delete()).thenReturn(true);\r\n    Assert.assertTrue(handler.checkAndDeleteCgroup(fspy));\r\n    fos.write(\"1234\".getBytes());\r\n    fos.close();\r\n    Assert.assertFalse(handler.checkAndDeleteCgroup(fspy));\r\n    FileUtils.deleteQuietly(cgroupDir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "testDeleteCgroup",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testDeleteCgroup() throws Exception\n{\r\n    final ControlledClock clock = new ControlledClock();\r\n    CgroupsLCEResourcesHandler handler = new CgroupsLCEResourcesHandler();\r\n    handler.setConf(new YarnConfiguration());\r\n    handler.initConfig();\r\n    handler.clock = clock;\r\n    FileUtils.deleteQuietly(cgroupDir);\r\n    File tfile = new File(cgroupDir.getAbsolutePath(), \"tasks\");\r\n    FileOutputStream fos = FileUtils.openOutputStream(tfile);\r\n    fos.write(\"1234\".getBytes());\r\n    fos.close();\r\n    final CountDownLatch latch = new CountDownLatch(1);\r\n    new Thread() {\r\n\r\n        @Override\r\n        public void run() {\r\n            latch.countDown();\r\n            try {\r\n                Thread.sleep(200);\r\n            } catch (InterruptedException ex) {\r\n            }\r\n            clock.tickMsec(YarnConfiguration.DEFAULT_NM_LINUX_CONTAINER_CGROUPS_DELETE_TIMEOUT);\r\n        }\r\n    }.start();\r\n    latch.await();\r\n    Assert.assertFalse(handler.deleteCgroup(cgroupDir.getAbsolutePath()));\r\n    FileUtils.deleteQuietly(cgroupDir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "createMockCgroupMount",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "File createMockCgroupMount(File parentDir, String type) throws IOException\n{\r\n    File cgroupMountDir = new File(parentDir.getAbsolutePath(), type + \"/hadoop-yarn\");\r\n    FileUtils.deleteQuietly(cgroupMountDir);\r\n    if (!cgroupMountDir.mkdirs()) {\r\n        String message = \"Could not create dir \" + cgroupMountDir.getAbsolutePath();\r\n        throw new IOException(message);\r\n    }\r\n    return cgroupMountDir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "testInit",
  "errType" : null,
  "containingMethodsNum" : 22,
  "sourceCodeText" : "void testInit() throws IOException\n{\r\n    LinuxContainerExecutor mockLCE = new MockLinuxContainerExecutor();\r\n    CustomCgroupsLCEResourceHandler handler = new CustomCgroupsLCEResourceHandler();\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    final int numProcessors = 4;\r\n    ResourceCalculatorPlugin plugin = Mockito.mock(ResourceCalculatorPlugin.class);\r\n    Mockito.doReturn(numProcessors).when(plugin).getNumProcessors();\r\n    Mockito.doReturn(numProcessors).when(plugin).getNumCores();\r\n    handler.setConf(conf);\r\n    handler.initConfig();\r\n    File mockMtab = TestCGroupsHandlerImpl.createPremountedCgroups(cgroupDir, false);\r\n    File cpuCgroupMountDir = createMockCgroupMount(cgroupDir, \"cpu\");\r\n    handler.setMtabFile(mockMtab.getAbsolutePath());\r\n    handler.init(mockLCE, plugin);\r\n    File periodFile = new File(cpuCgroupMountDir, \"cpu.cfs_period_us\");\r\n    File quotaFile = new File(cpuCgroupMountDir, \"cpu.cfs_quota_us\");\r\n    Assert.assertFalse(periodFile.exists());\r\n    Assert.assertFalse(quotaFile.exists());\r\n    conf.setInt(YarnConfiguration.NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT, 75);\r\n    handler.limits[0] = 100 * 1000;\r\n    handler.limits[1] = 1000 * 1000;\r\n    handler.init(mockLCE, plugin);\r\n    int period = readIntFromFile(periodFile);\r\n    int quota = readIntFromFile(quotaFile);\r\n    Assert.assertEquals(100 * 1000, period);\r\n    Assert.assertEquals(1000 * 1000, quota);\r\n    conf.setInt(YarnConfiguration.NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT, 100);\r\n    handler.limits[0] = 100 * 1000;\r\n    handler.limits[1] = 1000 * 1000;\r\n    handler.init(mockLCE, plugin);\r\n    quota = readIntFromFile(quotaFile);\r\n    Assert.assertEquals(-1, quota);\r\n    FileUtils.deleteQuietly(cgroupDir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "readIntFromFile",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int readIntFromFile(File targetFile) throws IOException\n{\r\n    Scanner scanner = new Scanner(targetFile);\r\n    try {\r\n        return scanner.hasNextInt() ? scanner.nextInt() : -1;\r\n    } finally {\r\n        scanner.close();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "testGetOverallLimits",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testGetOverallLimits()\n{\r\n    int expectedQuota = 1000 * 1000;\r\n    CgroupsLCEResourcesHandler handler = new CgroupsLCEResourcesHandler();\r\n    int[] ret = handler.getOverallLimits(2);\r\n    Assert.assertEquals(expectedQuota / 2, ret[0]);\r\n    Assert.assertEquals(expectedQuota, ret[1]);\r\n    ret = handler.getOverallLimits(2000);\r\n    Assert.assertEquals(expectedQuota, ret[0]);\r\n    Assert.assertEquals(-1, ret[1]);\r\n    int[] params = { 0, -1 };\r\n    for (int cores : params) {\r\n        try {\r\n            handler.getOverallLimits(cores);\r\n            Assert.fail(\"Function call should throw error.\");\r\n        } catch (IllegalArgumentException ie) {\r\n        }\r\n    }\r\n    ret = handler.getOverallLimits(1000 * 1000);\r\n    Assert.assertEquals(1000 * 1000, ret[0]);\r\n    Assert.assertEquals(-1, ret[1]);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "testContainerLimits",
  "errType" : null,
  "containingMethodsNum" : 49,
  "sourceCodeText" : "void testContainerLimits() throws IOException\n{\r\n    LinuxContainerExecutor mockLCE = new MockLinuxContainerExecutor();\r\n    CustomCgroupsLCEResourceHandler handler = new CustomCgroupsLCEResourceHandler();\r\n    handler.generateLimitsMode = true;\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.NM_DISK_RESOURCE_ENABLED, true);\r\n    final int numProcessors = 4;\r\n    ResourceCalculatorPlugin plugin = Mockito.mock(ResourceCalculatorPlugin.class);\r\n    Mockito.doReturn(numProcessors).when(plugin).getNumProcessors();\r\n    Mockito.doReturn(numProcessors).when(plugin).getNumCores();\r\n    handler.setConf(conf);\r\n    handler.initConfig();\r\n    File mockMtab = TestCGroupsHandlerImpl.createPremountedCgroups(cgroupDir, false);\r\n    File cpuCgroupMountDir = createMockCgroupMount(cgroupDir, \"cpu\");\r\n    handler.setMtabFile(mockMtab.getAbsolutePath());\r\n    handler.init(mockLCE, plugin);\r\n    ContainerId id = ContainerId.fromString(\"container_1_1_1_1\");\r\n    handler.preExecute(id, Resource.newInstance(1024, 1));\r\n    Assert.assertNotNull(handler.getControllerPaths());\r\n    File containerCpuDir = new File(cpuCgroupMountDir, id.toString());\r\n    Assert.assertTrue(containerCpuDir.exists());\r\n    Assert.assertTrue(containerCpuDir.isDirectory());\r\n    File periodFile = new File(containerCpuDir, \"cpu.cfs_period_us\");\r\n    File quotaFile = new File(containerCpuDir, \"cpu.cfs_quota_us\");\r\n    Assert.assertFalse(periodFile.exists());\r\n    Assert.assertFalse(quotaFile.exists());\r\n    FileUtils.deleteQuietly(containerCpuDir);\r\n    conf.setBoolean(YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE, true);\r\n    handler.initConfig();\r\n    handler.preExecute(id, Resource.newInstance(1024, YarnConfiguration.DEFAULT_NM_VCORES));\r\n    Assert.assertTrue(containerCpuDir.exists());\r\n    Assert.assertTrue(containerCpuDir.isDirectory());\r\n    periodFile = new File(containerCpuDir, \"cpu.cfs_period_us\");\r\n    quotaFile = new File(containerCpuDir, \"cpu.cfs_quota_us\");\r\n    Assert.assertFalse(periodFile.exists());\r\n    Assert.assertFalse(quotaFile.exists());\r\n    FileUtils.deleteQuietly(containerCpuDir);\r\n    conf.setBoolean(YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE, true);\r\n    handler.initConfig();\r\n    handler.preExecute(id, Resource.newInstance(1024, YarnConfiguration.DEFAULT_NM_VCORES / 2));\r\n    Assert.assertTrue(containerCpuDir.exists());\r\n    Assert.assertTrue(containerCpuDir.isDirectory());\r\n    periodFile = new File(containerCpuDir, \"cpu.cfs_period_us\");\r\n    quotaFile = new File(containerCpuDir, \"cpu.cfs_quota_us\");\r\n    Assert.assertTrue(periodFile.exists());\r\n    Assert.assertTrue(quotaFile.exists());\r\n    Assert.assertEquals(500 * 1000, readIntFromFile(periodFile));\r\n    Assert.assertEquals(1000 * 1000, readIntFromFile(quotaFile));\r\n    FileUtils.deleteQuietly(containerCpuDir);\r\n    conf.setBoolean(YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE, true);\r\n    conf.setInt(YarnConfiguration.NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT, 50);\r\n    handler.initConfig();\r\n    handler.init(mockLCE, plugin);\r\n    handler.preExecute(id, Resource.newInstance(1024, YarnConfiguration.DEFAULT_NM_VCORES / 2));\r\n    Assert.assertTrue(containerCpuDir.exists());\r\n    Assert.assertTrue(containerCpuDir.isDirectory());\r\n    periodFile = new File(containerCpuDir, \"cpu.cfs_period_us\");\r\n    quotaFile = new File(containerCpuDir, \"cpu.cfs_quota_us\");\r\n    Assert.assertTrue(periodFile.exists());\r\n    Assert.assertTrue(quotaFile.exists());\r\n    Assert.assertEquals(1000 * 1000, readIntFromFile(periodFile));\r\n    Assert.assertEquals(1000 * 1000, readIntFromFile(quotaFile));\r\n    FileUtils.deleteQuietly(cgroupDir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "testSelectCgroup",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testSelectCgroup()\n{\r\n    File cpu = new File(cgroupDir, \"cpu\");\r\n    File cpuNoExist = new File(cgroupDir, \"cpuNoExist\");\r\n    File memory = new File(cgroupDir, \"memory\");\r\n    try {\r\n        CgroupsLCEResourcesHandler handler = new CgroupsLCEResourcesHandler();\r\n        Map<String, Set<String>> cgroups = new LinkedHashMap<>();\r\n        Assert.assertTrue(\"temp dir should be created\", cpu.mkdirs());\r\n        Assert.assertTrue(\"temp dir should be created\", memory.mkdirs());\r\n        Assert.assertFalse(\"temp dir should not be created\", cpuNoExist.exists());\r\n        cgroups.put(memory.getAbsolutePath(), Collections.singleton(\"memory\"));\r\n        cgroups.put(cpuNoExist.getAbsolutePath(), Collections.singleton(\"cpu\"));\r\n        cgroups.put(cpu.getAbsolutePath(), Collections.singleton(\"cpu\"));\r\n        String selectedCPU = handler.findControllerInMtab(\"cpu\", cgroups);\r\n        Assert.assertEquals(\"Wrong CPU mount point selected\", cpu.getAbsolutePath(), selectedCPU);\r\n    } finally {\r\n        FileUtils.deleteQuietly(cpu);\r\n        FileUtils.deleteQuietly(memory);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\util",
  "methodName" : "testManualCgroupSetting",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testManualCgroupSetting() throws IOException\n{\r\n    CgroupsLCEResourcesHandler handler = new CgroupsLCEResourcesHandler();\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.set(YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_MOUNT_PATH, cgroupDir.getAbsolutePath());\r\n    handler.setConf(conf);\r\n    File cpu = new File(new File(cgroupDir, \"cpuacct,cpu\"), \"/hadoop-yarn\");\r\n    try {\r\n        Assert.assertTrue(\"temp dir should be created\", cpu.mkdirs());\r\n        final int numProcessors = 4;\r\n        ResourceCalculatorPlugin plugin = Mockito.mock(ResourceCalculatorPlugin.class);\r\n        Mockito.doReturn(numProcessors).when(plugin).getNumProcessors();\r\n        Mockito.doReturn(numProcessors).when(plugin).getNumCores();\r\n        when(plugin.getNumProcessors()).thenReturn(8);\r\n        handler.init(null, plugin);\r\n        Assert.assertEquals(\"CPU CGRoup path was not set\", cpu.getParent(), handler.getControllerPaths().get(\"cpu\"));\r\n    } finally {\r\n        FileUtils.deleteQuietly(cpu);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "createPBRecordFactory",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RecordFactory createPBRecordFactory()\n{\r\n    Configuration conf = new Configuration();\r\n    return RecordFactoryProvider.getRecordFactory(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "createResource",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "LocalResource createResource()\n{\r\n    LocalResource ret = recordFactory.newRecordInstance(LocalResource.class);\r\n    assertTrue(ret instanceof LocalResourcePBImpl);\r\n    ret.setResource(URL.fromPath(new Path(\"hdfs://y.ak:8020/foo/bar\")));\r\n    ret.setSize(4344L);\r\n    ret.setTimestamp(3141592653589793L);\r\n    ret.setVisibility(LocalResourceVisibility.PUBLIC);\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "createLocalResourceStatus",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "LocalResourceStatus createLocalResourceStatus()\n{\r\n    LocalResourceStatus ret = recordFactory.newRecordInstance(LocalResourceStatus.class);\r\n    assertTrue(ret instanceof LocalResourceStatusPBImpl);\r\n    ret.setResource(createResource());\r\n    ret.setLocalPath(URL.fromPath(new Path(\"file:///local/foo/bar\")));\r\n    ret.setStatus(ResourceStatusType.FETCH_SUCCESS);\r\n    ret.setLocalSize(4443L);\r\n    Exception e = new Exception(\"Dingos.\");\r\n    e.setStackTrace(new StackTraceElement[] { new StackTraceElement(\"foo\", \"bar\", \"baz\", 10), new StackTraceElement(\"sbb\", \"one\", \"onm\", 10) });\r\n    ret.setException(SerializedException.newInstance(e));\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "createLocalizerStatus",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "LocalizerStatus createLocalizerStatus()\n{\r\n    LocalizerStatus ret = recordFactory.newRecordInstance(LocalizerStatus.class);\r\n    assertTrue(ret instanceof LocalizerStatusPBImpl);\r\n    ret.setLocalizerId(\"localizer0\");\r\n    ret.addResourceStatus(createLocalResourceStatus());\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "createLocalizerHeartbeatResponse",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "LocalizerHeartbeatResponse createLocalizerHeartbeatResponse() throws URISyntaxException\n{\r\n    LocalizerHeartbeatResponse ret = recordFactory.newRecordInstance(LocalizerHeartbeatResponse.class);\r\n    assertTrue(ret instanceof LocalizerHeartbeatResponsePBImpl);\r\n    ret.setLocalizerAction(LocalizerAction.LIVE);\r\n    LocalResource rsrc = createResource();\r\n    ArrayList<ResourceLocalizationSpec> rsrcs = new ArrayList<ResourceLocalizationSpec>();\r\n    ResourceLocalizationSpec resource = recordFactory.newRecordInstance(ResourceLocalizationSpec.class);\r\n    resource.setResource(rsrc);\r\n    resource.setDestinationDirectory(URL.fromPath((new Path(\"/tmp\" + System.currentTimeMillis()))));\r\n    rsrcs.add(resource);\r\n    ret.setResourceSpecs(rsrcs);\r\n    System.out.println(resource);\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "testLocalResourceStatusSerDe",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testLocalResourceStatusSerDe() throws Exception\n{\r\n    LocalResourceStatus rsrcS = createLocalResourceStatus();\r\n    assertTrue(rsrcS instanceof LocalResourceStatusPBImpl);\r\n    LocalResourceStatusPBImpl rsrcPb = (LocalResourceStatusPBImpl) rsrcS;\r\n    DataOutputBuffer out = new DataOutputBuffer();\r\n    rsrcPb.getProto().writeDelimitedTo(out);\r\n    DataInputBuffer in = new DataInputBuffer();\r\n    in.reset(out.getData(), 0, out.getLength());\r\n    LocalResourceStatusProto rsrcPbD = LocalResourceStatusProto.parseDelimitedFrom(in);\r\n    assertNotNull(rsrcPbD);\r\n    LocalResourceStatus rsrcD = new LocalResourceStatusPBImpl(rsrcPbD);\r\n    assertEquals(rsrcS, rsrcD);\r\n    assertEquals(createResource(), rsrcS.getResource());\r\n    assertEquals(createResource(), rsrcD.getResource());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "testLocalizerStatusSerDe",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testLocalizerStatusSerDe() throws Exception\n{\r\n    LocalizerStatus rsrcS = createLocalizerStatus();\r\n    assertTrue(rsrcS instanceof LocalizerStatusPBImpl);\r\n    LocalizerStatusPBImpl rsrcPb = (LocalizerStatusPBImpl) rsrcS;\r\n    DataOutputBuffer out = new DataOutputBuffer();\r\n    rsrcPb.getProto().writeDelimitedTo(out);\r\n    DataInputBuffer in = new DataInputBuffer();\r\n    in.reset(out.getData(), 0, out.getLength());\r\n    LocalizerStatusProto rsrcPbD = LocalizerStatusProto.parseDelimitedFrom(in);\r\n    assertNotNull(rsrcPbD);\r\n    LocalizerStatus rsrcD = new LocalizerStatusPBImpl(rsrcPbD);\r\n    assertEquals(rsrcS, rsrcD);\r\n    assertEquals(\"localizer0\", rsrcS.getLocalizerId());\r\n    assertEquals(\"localizer0\", rsrcD.getLocalizerId());\r\n    assertEquals(createLocalResourceStatus(), rsrcS.getResourceStatus(0));\r\n    assertEquals(createLocalResourceStatus(), rsrcD.getResourceStatus(0));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "testLocalizerHeartbeatResponseSerDe",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testLocalizerHeartbeatResponseSerDe() throws Exception\n{\r\n    LocalizerHeartbeatResponse rsrcS = createLocalizerHeartbeatResponse();\r\n    assertTrue(rsrcS instanceof LocalizerHeartbeatResponsePBImpl);\r\n    LocalizerHeartbeatResponsePBImpl rsrcPb = (LocalizerHeartbeatResponsePBImpl) rsrcS;\r\n    DataOutputBuffer out = new DataOutputBuffer();\r\n    rsrcPb.getProto().writeDelimitedTo(out);\r\n    DataInputBuffer in = new DataInputBuffer();\r\n    in.reset(out.getData(), 0, out.getLength());\r\n    LocalizerHeartbeatResponseProto rsrcPbD = LocalizerHeartbeatResponseProto.parseDelimitedFrom(in);\r\n    assertNotNull(rsrcPbD);\r\n    LocalizerHeartbeatResponse rsrcD = new LocalizerHeartbeatResponsePBImpl(rsrcPbD);\r\n    assertEquals(rsrcS, rsrcD);\r\n    assertEquals(createResource(), rsrcS.getResourceSpecs().get(0).getResource());\r\n    assertEquals(createResource(), rsrcD.getResourceSpecs().get(0).getResource());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\api\\protocolrecords\\impl\\pb",
  "methodName" : "testSerializedExceptionDeSer",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testSerializedExceptionDeSer() throws Exception\n{\r\n    YarnException yarnEx = new YarnException(\"Yarn_Exception\");\r\n    SerializedException serEx = SerializedException.newInstance(yarnEx);\r\n    Throwable throwable = serEx.deSerialize();\r\n    Assert.assertEquals(yarnEx.getClass(), throwable.getClass());\r\n    Assert.assertEquals(yarnEx.getMessage(), throwable.getMessage());\r\n    IOException ioe = new IOException(\"Test_IOException\");\r\n    RuntimeException runtimeException = new RuntimeException(\"Test_RuntimeException\", ioe);\r\n    YarnException yarnEx2 = new YarnException(\"Test_YarnException\", runtimeException);\r\n    SerializedException serEx2 = SerializedException.newInstance(yarnEx2);\r\n    Throwable throwable2 = serEx2.deSerialize();\r\n    throwable2.printStackTrace();\r\n    Assert.assertEquals(yarnEx2.getClass(), throwable2.getClass());\r\n    Assert.assertEquals(yarnEx2.getMessage(), throwable2.getMessage());\r\n    Assert.assertEquals(runtimeException.getClass(), throwable2.getCause().getClass());\r\n    Assert.assertEquals(runtimeException.getMessage(), throwable2.getCause().getMessage());\r\n    Assert.assertEquals(ioe.getClass(), throwable2.getCause().getCause().getClass());\r\n    Assert.assertEquals(ioe.getMessage(), throwable2.getCause().getCause().getMessage());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void setUp() throws IOException, ResourceHandlerException\n{\r\n    conf = new YarnConfiguration();\r\n    setNumaTopologyConfigs();\r\n    Context mockContext = createAndGetMockContext();\r\n    NMStateStoreService mock = mock(NMStateStoreService.class);\r\n    when(mockContext.getNMStateStore()).thenReturn(mock);\r\n    numaResourceHandler = new NumaResourceHandlerImpl(conf, mockContext);\r\n    numaResourceHandler.bootstrap(conf);\r\n    mockContainer = mock(Container.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "testAllocateNumaMemoryResource",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testAllocateNumaMemoryResource() throws ResourceHandlerException\n{\r\n    testAllocateNumaResource(\"container_1481156246874_0001_01_000001\", Resource.newInstance(2048, 2), \"0\", \"0\");\r\n    testAllocateNumaResource(\"container_1481156246874_0001_01_000002\", Resource.newInstance(60000, 2), \"1\", \"1\");\r\n    testAllocateNumaResource(\"container_1481156246874_0001_01_000003\", Resource.newInstance(80000, 2), \"0,1\", \"0\");\r\n    when(mockContainer.getContainerId()).thenReturn(ContainerId.fromString(\"container_1481156246874_0001_01_000004\"));\r\n    when(mockContainer.getResource()).thenReturn(Resource.newInstance(80000, 2));\r\n    assertNull(numaResourceHandler.preStart(mockContainer));\r\n    testAllocateNumaResource(\"container_1481156246874_0001_01_000005\", Resource.newInstance(1024, 2), \"1\", \"1\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "testAllocateNumaCpusResource",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testAllocateNumaCpusResource() throws ResourceHandlerException\n{\r\n    testAllocateNumaResource(\"container_1481156246874_0001_01_000001\", Resource.newInstance(2048, 2), \"0\", \"0\");\r\n    testAllocateNumaResource(\"container_1481156246874_0001_01_000002\", Resource.newInstance(2048, 2), \"1\", \"1\");\r\n    testAllocateNumaResource(\"container_1481156246874_0001_01_000003\", Resource.newInstance(2048, 3), \"0\", \"0,1\");\r\n    when(mockContainer.getContainerId()).thenReturn(ContainerId.fromString(\"container_1481156246874_0001_01_000004\"));\r\n    when(mockContainer.getResource()).thenReturn(Resource.newInstance(2048, 2));\r\n    assertNull(numaResourceHandler.preStart(mockContainer));\r\n    testAllocateNumaResource(\"container_1481156246874_0001_01_000005\", Resource.newInstance(2048, 1), \"1\", \"1\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "testReacquireContainer",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testReacquireContainer() throws Exception\n{\r\n    @SuppressWarnings(\"unchecked\")\r\n    ConcurrentHashMap<ContainerId, Container> mockContainers = mock(ConcurrentHashMap.class);\r\n    Context mockContext = mock(Context.class);\r\n    NMStateStoreService mock = mock(NMStateStoreService.class);\r\n    when(mockContext.getNMStateStore()).thenReturn(mock);\r\n    ResourceMappings resourceMappings = new ResourceMappings();\r\n    AssignedResources assignedRscs = new AssignedResources();\r\n    NumaResourceAllocation numaResourceAllocation = new NumaResourceAllocation(\"0\", 70000, \"0\", 4);\r\n    assignedRscs.updateAssignedResources(Arrays.asList(numaResourceAllocation));\r\n    resourceMappings.addAssignedResources(\"numa\", assignedRscs);\r\n    when(mockContainer.getResourceMappings()).thenReturn(resourceMappings);\r\n    when(mockContainers.get(any())).thenReturn(mockContainer);\r\n    when(mockContext.getContainers()).thenReturn(mockContainers);\r\n    numaResourceHandler = new NumaResourceHandlerImpl(conf, mockContext);\r\n    numaResourceHandler.bootstrap(conf);\r\n    numaResourceHandler.reacquireContainer(ContainerId.fromString(\"container_1481156246874_0001_01_000001\"));\r\n    testAllocateNumaResource(\"container_1481156246874_0001_01_000005\", Resource.newInstance(2048, 1), \"1\", \"1\");\r\n    when(mockContainer.getContainerId()).thenReturn(ContainerId.fromString(\"container_1481156246874_0001_01_000005\"));\r\n    when(mockContainer.getResource()).thenReturn(Resource.newInstance(2048, 4));\r\n    List<PrivilegedOperation> preStart = numaResourceHandler.preStart(mockContainer);\r\n    assertNull(preStart);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "setNumaTopologyConfigs",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setNumaTopologyConfigs()\n{\r\n    conf.set(YarnConfiguration.NM_NUMA_AWARENESS_NODE_IDS, \"0,1\");\r\n    conf.set(\"yarn.nodemanager.numa-awareness.0.memory\", \"73717\");\r\n    conf.set(\"yarn.nodemanager.numa-awareness.0.cpus\", \"4\");\r\n    conf.set(\"yarn.nodemanager.numa-awareness.1.memory\", \"73727\");\r\n    conf.set(\"yarn.nodemanager.numa-awareness.1.cpus\", \"4\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "createAndGetMockContext",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "Context createAndGetMockContext()\n{\r\n    Context mockContext = mock(Context.class);\r\n    @SuppressWarnings(\"unchecked\")\r\n    ConcurrentHashMap<ContainerId, Container> mockContainers = mock(ConcurrentHashMap.class);\r\n    mockContainer = mock(Container.class);\r\n    when(mockContainer.getResourceMappings()).thenReturn(new ResourceMappings());\r\n    when(mockContainers.get(any())).thenReturn(mockContainer);\r\n    when(mockContext.getContainers()).thenReturn(mockContainers);\r\n    return mockContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\resources\\numa",
  "methodName" : "testAllocateNumaResource",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testAllocateNumaResource(String containerId, Resource resource, String memNodes, String cpuNodes) throws ResourceHandlerException\n{\r\n    when(mockContainer.getContainerId()).thenReturn(ContainerId.fromString(containerId));\r\n    when(mockContainer.getResource()).thenReturn(resource);\r\n    List<PrivilegedOperation> preStart = numaResourceHandler.preStart(mockContainer);\r\n    List<String> arguments = preStart.get(0).getArguments();\r\n    assertEquals(arguments, Arrays.asList(\"/usr/bin/numactl\", \"--interleave=\" + memNodes, \"--cpunodebind=\" + cpuNodes));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "setDelayContainers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDelayContainers(final boolean delayContainersParam)\n{\r\n    this.delayContainers = delayContainersParam;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "createContainerManager",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "ContainerManagerImpl createContainerManager(DeletionService delSrvc)\n{\r\n    return new ContainerManagerImpl(context, exec, delSrvc, getNodeStatusUpdater(), metrics, dirsHandler) {\r\n\r\n        @Override\r\n        protected UserGroupInformation getRemoteUgi() throws YarnException {\r\n            ApplicationId appId = ApplicationId.newInstance(0, 0);\r\n            ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n            UserGroupInformation ugi = UserGroupInformation.createRemoteUser(appAttemptId.toString());\r\n            ugi.addTokenIdentifier(new NMTokenIdentifier(appAttemptId, context.getNodeId(), user, context.getNMTokenSecretManager().getCurrentKey().getKeyId()));\r\n            return ugi;\r\n        }\r\n\r\n        @Override\r\n        protected ContainersMonitor createContainersMonitor(ContainerExecutor exec) {\r\n            return new ContainersMonitorImpl(exec, dispatcher, this.context) {\r\n\r\n                @Override\r\n                public long getPmemAllocatedForContainers() {\r\n                    return TWO_GB;\r\n                }\r\n\r\n                @Override\r\n                public long getVmemAllocatedForContainers() {\r\n                    float pmemRatio = getConfig().getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO, YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\r\n                    return (long) (pmemRatio * getPmemAllocatedForContainers());\r\n                }\r\n\r\n                @Override\r\n                public long getVCoresAllocatedForContainers() {\r\n                    return 4;\r\n                }\r\n            };\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager",
  "methodName" : "createContainerExecutor",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "ContainerExecutor createContainerExecutor()\n{\r\n    DefaultContainerExecutor exec = new DefaultContainerExecutor() {\r\n\r\n        ConcurrentMap<String, Boolean> oversleepMap = new ConcurrentHashMap<String, Boolean>();\r\n\r\n        @Override\r\n        public int launchContainer(ContainerStartContext ctx) throws IOException, ConfigurationException {\r\n            final String containerId = ctx.getContainer().getContainerId().toString();\r\n            oversleepMap.put(containerId, false);\r\n            if (delayContainers) {\r\n                try {\r\n                    Thread.sleep(10000);\r\n                    if (oversleepMap.get(containerId)) {\r\n                        Thread.sleep(10000);\r\n                    }\r\n                } catch (InterruptedException e) {\r\n                }\r\n            }\r\n            return super.launchContainer(ctx);\r\n        }\r\n\r\n        @Override\r\n        public void pauseContainer(Container container) {\r\n            oversleepMap.put(container.getContainerId().toString(), true);\r\n            LOG.info(\"Container was paused\");\r\n        }\r\n\r\n        @Override\r\n        public void resumeContainer(Container container) {\r\n            LOG.info(\"Container was resumed\");\r\n        }\r\n    };\r\n    exec.setConf(conf);\r\n    return spy(exec);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setup()\n{\r\n    testRootDir.mkdirs();\r\n    nodeAttributesProvider = new ScriptBasedNodeAttributesProvider();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    if (testRootDir.exists()) {\r\n        FileContext.getLocalFSFileContext().delete(new Path(testRootDir.getAbsolutePath()), true);\r\n    }\r\n    if (nodeAttributesProvider != null) {\r\n        nodeAttributesProvider.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "getConfForNodeAttributeScript",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Configuration getConfForNodeAttributeScript()\n{\r\n    Configuration conf = new Configuration();\r\n    conf.set(YarnConfiguration.NM_SCRIPT_BASED_NODE_ATTRIBUTES_PROVIDER_PATH, nodeAttributeScript.getAbsolutePath());\r\n    conf.setLong(YarnConfiguration.NM_NODE_ATTRIBUTES_PROVIDER_FETCH_INTERVAL_MS, 1000);\r\n    conf.setLong(YarnConfiguration.NM_NODE_ATTRIBUTES_PROVIDER_FETCH_TIMEOUT_MS, 1000);\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "writeNodeAttributeScriptFile",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void writeNodeAttributeScriptFile(String scriptStr, boolean setExecutable) throws IOException\n{\r\n    PrintWriter pw = null;\r\n    try {\r\n        FileUtil.setWritable(nodeAttributeScript, true);\r\n        FileUtil.setReadable(nodeAttributeScript, true);\r\n        pw = new PrintWriter(new FileOutputStream(nodeAttributeScript));\r\n        pw.println(scriptStr);\r\n        pw.flush();\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n        Assert.fail();\r\n    } finally {\r\n        if (null != pw) {\r\n            pw.close();\r\n        }\r\n    }\r\n    FileUtil.setExecutable(nodeAttributeScript, setExecutable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "testNodeAttributeScriptProvider",
  "errType" : [ "TimeoutException" ],
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testNodeAttributeScriptProvider() throws IOException, InterruptedException\n{\r\n    String simpleScript = \"echo NODE_ATTRIBUTE:host,STRING,host1234\\n \" + \"echo NODE_ATTRIBUTE:os,STRING,redhat_6_3\\n \" + \"echo NODE_ATTRIBUTE:ip,STRING,10.0.0.1\";\r\n    writeNodeAttributeScriptFile(simpleScript, true);\r\n    nodeAttributesProvider.init(getConfForNodeAttributeScript());\r\n    nodeAttributesProvider.start();\r\n    try {\r\n        GenericTestUtils.waitFor(() -> nodeAttributesProvider.getDescriptors().size() == 3, 500, 3000);\r\n    } catch (TimeoutException e) {\r\n        Assert.fail(\"Expecting node attributes size is 3, but got \" + nodeAttributesProvider.getDescriptors().size());\r\n    }\r\n    Iterator<NodeAttribute> it = nodeAttributesProvider.getDescriptors().iterator();\r\n    while (it.hasNext()) {\r\n        NodeAttribute att = it.next();\r\n        switch(att.getAttributeKey().getAttributeName()) {\r\n            case \"host\":\r\n                Assert.assertEquals(NodeAttributeType.STRING, att.getAttributeType());\r\n                Assert.assertEquals(\"host1234\", att.getAttributeValue());\r\n                break;\r\n            case \"os\":\r\n                Assert.assertEquals(NodeAttributeType.STRING, att.getAttributeType());\r\n                Assert.assertEquals(\"redhat_6_3\", att.getAttributeValue());\r\n                break;\r\n            case \"ip\":\r\n                Assert.assertEquals(NodeAttributeType.STRING, att.getAttributeType());\r\n                Assert.assertEquals(\"10.0.0.1\", att.getAttributeValue());\r\n                break;\r\n            default:\r\n                Assert.fail(\"Unexpected attribute name \" + att.getAttributeKey().getAttributeName());\r\n                break;\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "testInvalidScriptOutput",
  "errType" : [ "TimeoutException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testInvalidScriptOutput() throws IOException, InterruptedException\n{\r\n    String scriptContent = \"echo host,STRING,host1234\";\r\n    writeNodeAttributeScriptFile(scriptContent, true);\r\n    nodeAttributesProvider.init(getConfForNodeAttributeScript());\r\n    nodeAttributesProvider.start();\r\n    try {\r\n        GenericTestUtils.waitFor(() -> nodeAttributesProvider.getDescriptors().size() == 1, 500, 3000);\r\n        Assert.fail(\"This test should timeout because the provide is unable\" + \" to parse any attributes from the script output.\");\r\n    } catch (TimeoutException e) {\r\n        Assert.assertEquals(0, nodeAttributesProvider.getDescriptors().size());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "testMalformedScriptOutput",
  "errType" : [ "TimeoutException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testMalformedScriptOutput() throws Exception\n{\r\n    String scriptContent = \"echo NODE_ATTRIBUTE:host,STRING,host1234,a_extra_column\";\r\n    writeNodeAttributeScriptFile(scriptContent, true);\r\n    nodeAttributesProvider.init(getConfForNodeAttributeScript());\r\n    nodeAttributesProvider.start();\r\n    try {\r\n        GenericTestUtils.waitFor(() -> nodeAttributesProvider.getDescriptors().size() == 1, 500, 3000);\r\n        Assert.fail(\"This test should timeout because the provide is unable\" + \" to parse any attributes from the script output.\");\r\n    } catch (TimeoutException e) {\r\n        Assert.assertEquals(0, nodeAttributesProvider.getDescriptors().size());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "testFetchInterval",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testFetchInterval() throws Exception\n{\r\n    String simpleScript = \"echo NODE_ATTRIBUTE:pid,STRING,$$\";\r\n    writeNodeAttributeScriptFile(simpleScript, true);\r\n    nodeAttributesProvider.init(getConfForNodeAttributeScript());\r\n    nodeAttributesProvider.start();\r\n    Set<String> resultSet = new HashSet<>();\r\n    GenericTestUtils.waitFor(() -> {\r\n        Set<NodeAttribute> attributes = nodeAttributesProvider.getDescriptors();\r\n        if (attributes != null) {\r\n            Assert.assertEquals(1, attributes.size());\r\n            resultSet.add(attributes.iterator().next().getAttributeValue());\r\n            return resultSet.size() > 1;\r\n        } else {\r\n            return false;\r\n        }\r\n    }, 500, 3000);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\nodelabels",
  "methodName" : "testNodeAttributesValidation",
  "errType" : [ "TimeoutException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testNodeAttributesValidation() throws Exception\n{\r\n    String scriptContent = \"echo NODE_ATTRIBUTE:host,STRING,host1234\\n \" + \"echo NODE_ATTRIBUTE:host,STRING,host2345\\n \" + \"echo NODE_ATTRIBUTE:ip,STRING,10.0.0.1\";\r\n    writeNodeAttributeScriptFile(scriptContent, true);\r\n    nodeAttributesProvider.init(getConfForNodeAttributeScript());\r\n    nodeAttributesProvider.start();\r\n    try {\r\n        GenericTestUtils.waitFor(() -> nodeAttributesProvider.getDescriptors().size() == 3, 500, 3000);\r\n        Assert.fail(\"This test should timeout because the provide is unable\" + \" to parse any attributes from the script output.\");\r\n    } catch (TimeoutException e) {\r\n        Assert.assertEquals(0, nodeAttributesProvider.getDescriptors().size());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testHierarchicalSubDirectoryCreation",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testHierarchicalSubDirectoryCreation()\n{\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.set(YarnConfiguration.NM_LOCAL_CACHE_MAX_FILES_PER_DIRECTORY, \"37\");\r\n    LocalCacheDirectoryManager hDir = new LocalCacheDirectoryManager(conf);\r\n    Assert.assertTrue(hDir.getRelativePathForLocalization().isEmpty());\r\n    for (int i = 1; i <= 37 * 36 * 36; i++) {\r\n        StringBuffer sb = new StringBuffer();\r\n        String num = Integer.toString(i - 1, 36);\r\n        if (num.length() == 1) {\r\n            sb.append(num.charAt(0));\r\n        } else {\r\n            sb.append(Integer.toString(Integer.parseInt(num.substring(0, 1), 36) - 1, 36));\r\n        }\r\n        for (int j = 1; j < num.length(); j++) {\r\n            sb.append(Path.SEPARATOR).append(num.charAt(j));\r\n        }\r\n        Assert.assertEquals(sb.toString(), hDir.getRelativePathForLocalization());\r\n    }\r\n    String testPath1 = \"4\";\r\n    String testPath2 = \"2\";\r\n    hDir.decrementFileCountForPath(testPath1);\r\n    hDir.decrementFileCountForPath(testPath2);\r\n    Assert.assertEquals(testPath1, hDir.getRelativePathForLocalization());\r\n    Assert.assertEquals(testPath2, hDir.getRelativePathForLocalization());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testMinimumPerDirectoryFileLimit",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testMinimumPerDirectoryFileLimit()\n{\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.set(YarnConfiguration.NM_LOCAL_CACHE_MAX_FILES_PER_DIRECTORY, \"1\");\r\n    Exception e = null;\r\n    NMContext nmContext = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), new NMNullStateStoreService(), false, conf);\r\n    NodeManagerMetrics metrics = mock(NodeManagerMetrics.class);\r\n    ResourceLocalizationService service = new ResourceLocalizationService(null, null, null, null, nmContext, metrics);\r\n    try {\r\n        service.init(conf);\r\n    } catch (Exception e1) {\r\n        e = e1;\r\n    }\r\n    Assert.assertNotNull(e);\r\n    Assert.assertEquals(YarnRuntimeException.class, e.getClass());\r\n    Assert.assertEquals(e.getMessage(), YarnConfiguration.NM_LOCAL_CACHE_MAX_FILES_PER_DIRECTORY + \" parameter is configured with a value less than 37.\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testDirectoryStateChangeFromFullToNonFull",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testDirectoryStateChangeFromFullToNonFull()\n{\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.set(YarnConfiguration.NM_LOCAL_CACHE_MAX_FILES_PER_DIRECTORY, \"40\");\r\n    LocalCacheDirectoryManager dir = new LocalCacheDirectoryManager(conf);\r\n    String rootPath = \"\";\r\n    String firstSubDir = \"0\";\r\n    for (int i = 0; i < 4; i++) {\r\n        Assert.assertEquals(rootPath, dir.getRelativePathForLocalization());\r\n    }\r\n    dir.decrementFileCountForPath(rootPath);\r\n    dir.decrementFileCountForPath(rootPath);\r\n    Assert.assertEquals(rootPath, dir.getRelativePathForLocalization());\r\n    Assert.assertEquals(rootPath, dir.getRelativePathForLocalization());\r\n    Assert.assertEquals(firstSubDir, dir.getRelativePathForLocalization());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testDirectoryConversion",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testDirectoryConversion()\n{\r\n    for (int i = 0; i < 10000; ++i) {\r\n        String path = Directory.getRelativePath(i);\r\n        Assert.assertEquals(\"Incorrect conversion for \" + i, i, Directory.getDirectoryNumber(path));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\localizer",
  "methodName" : "testIncrementFileCountForPath",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testIncrementFileCountForPath()\n{\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.setInt(YarnConfiguration.NM_LOCAL_CACHE_MAX_FILES_PER_DIRECTORY, LocalCacheDirectoryManager.DIRECTORIES_PER_LEVEL + 2);\r\n    LocalCacheDirectoryManager mgr = new LocalCacheDirectoryManager(conf);\r\n    final String rootPath = \"\";\r\n    mgr.incrementFileCountForPath(rootPath);\r\n    Assert.assertEquals(rootPath, mgr.getRelativePathForLocalization());\r\n    Assert.assertFalse(\"root dir should be full\", rootPath.equals(mgr.getRelativePathForLocalization()));\r\n    mgr.getRelativePathForLocalization();\r\n    mgr.decrementFileCountForPath(rootPath);\r\n    mgr.decrementFileCountForPath(rootPath);\r\n    Assert.assertEquals(rootPath, mgr.getRelativePathForLocalization());\r\n    Assert.assertEquals(rootPath, mgr.getRelativePathForLocalization());\r\n    String otherDir = mgr.getRelativePathForLocalization();\r\n    Assert.assertFalse(\"root dir should be full\", otherDir.equals(rootPath));\r\n    final String deepDir0 = \"d/e/e/p/0\";\r\n    final String deepDir1 = \"d/e/e/p/1\";\r\n    final String deepDir2 = \"d/e/e/p/2\";\r\n    final String deepDir3 = \"d/e/e/p/3\";\r\n    mgr.incrementFileCountForPath(deepDir0);\r\n    Assert.assertEquals(otherDir, mgr.getRelativePathForLocalization());\r\n    Assert.assertEquals(deepDir0, mgr.getRelativePathForLocalization());\r\n    Assert.assertEquals(\"total dir count incorrect after increment\", deepDir1, mgr.getRelativePathForLocalization());\r\n    mgr.incrementFileCountForPath(deepDir2);\r\n    mgr.incrementFileCountForPath(deepDir1);\r\n    mgr.incrementFileCountForPath(deepDir2);\r\n    Assert.assertEquals(deepDir3, mgr.getRelativePathForLocalization());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 23,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    files = FileContext.getLocalFSFileContext();\r\n    Path workSpacePath = new Path(workSpace.getAbsolutePath());\r\n    files.mkdir(workSpacePath, null, true);\r\n    FileUtil.chmod(workSpace.getAbsolutePath(), \"777\");\r\n    File localDir = new File(workSpace.getAbsoluteFile(), \"localDir\");\r\n    files.mkdir(new Path(localDir.getAbsolutePath()), new FsPermission(\"777\"), false);\r\n    File logDir = new File(workSpace.getAbsoluteFile(), \"logDir\");\r\n    files.mkdir(new Path(logDir.getAbsolutePath()), new FsPermission(\"777\"), false);\r\n    String exec_path = System.getProperty(\"container-executor.path\");\r\n    if (exec_path != null && !exec_path.isEmpty()) {\r\n        conf = new Configuration(false);\r\n        conf.setClass(\"fs.AbstractFileSystem.file.impl\", org.apache.hadoop.fs.local.LocalFs.class, org.apache.hadoop.fs.AbstractFileSystem.class);\r\n        appSubmitter = System.getProperty(\"application.submitter\");\r\n        if (appSubmitter == null || appSubmitter.isEmpty()) {\r\n            appSubmitter = \"nobody\";\r\n        }\r\n        conf.set(YarnConfiguration.NM_NONSECURE_MODE_LOCAL_USER_KEY, appSubmitter);\r\n        LOG.info(\"Setting \" + YarnConfiguration.NM_LINUX_CONTAINER_EXECUTOR_PATH + \"=\" + exec_path);\r\n        conf.set(YarnConfiguration.NM_LINUX_CONTAINER_EXECUTOR_PATH, exec_path);\r\n        exec = new LinuxContainerExecutor();\r\n        exec.setConf(conf);\r\n        conf.set(YarnConfiguration.NM_LOCAL_DIRS, localDir.getAbsolutePath());\r\n        conf.set(YarnConfiguration.NM_LOG_DIRS, logDir.getAbsolutePath());\r\n        dirsHandler = new LocalDirsHandlerService();\r\n        dirsHandler.init(conf);\r\n        List<String> localDirs = dirsHandler.getLocalDirs();\r\n        for (String dir : localDirs) {\r\n            Path userDir = new Path(dir, ContainerLocalizer.USERCACHE);\r\n            files.mkdir(userDir, new FsPermission(\"777\"), false);\r\n            Path fileDir = new Path(dir, ContainerLocalizer.FILECACHE);\r\n            files.mkdir(fileDir, new FsPermission(\"777\"), false);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    FileContext.getLocalFSFileContext().delete(new Path(workSpace.getAbsolutePath()), true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "cleanupUserAppCache",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void cleanupUserAppCache(String user) throws Exception\n{\r\n    List<String> localDirs = dirsHandler.getLocalDirs();\r\n    for (String dir : localDirs) {\r\n        Path usercachedir = new Path(dir, ContainerLocalizer.USERCACHE);\r\n        Path userdir = new Path(usercachedir, user);\r\n        Path appcachedir = new Path(userdir, ContainerLocalizer.APPCACHE);\r\n        exec.deleteAsUser(new DeletionAsUserContext.Builder().setUser(user).setSubDir(appcachedir).build());\r\n        FileContext.getLocalFSFileContext().delete(usercachedir, true);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "cleanupUserFileCache",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void cleanupUserFileCache(String user)\n{\r\n    List<String> localDirs = dirsHandler.getLocalDirs();\r\n    for (String dir : localDirs) {\r\n        Path filecache = new Path(dir, ContainerLocalizer.FILECACHE);\r\n        Path filedir = new Path(filecache, user);\r\n        exec.deleteAsUser(new DeletionAsUserContext.Builder().setUser(user).setSubDir(filedir).build());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "cleanupLogDirs",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void cleanupLogDirs(String user)\n{\r\n    List<String> logDirs = dirsHandler.getLogDirs();\r\n    for (String dir : logDirs) {\r\n        String appId = \"APP_\" + id;\r\n        String containerId = \"CONTAINER_\" + (id - 1);\r\n        Path appdir = new Path(dir, appId);\r\n        Path containerdir = new Path(appdir, containerId);\r\n        exec.deleteAsUser(new DeletionAsUserContext.Builder().setUser(user).setSubDir(containerdir).build());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "cleanupAppFiles",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void cleanupAppFiles(String user) throws Exception\n{\r\n    cleanupUserAppCache(user);\r\n    cleanupUserFileCache(user);\r\n    cleanupLogDirs(user);\r\n    String[] files = { \"launch_container.sh\", \"container_tokens\", \"touch-file\" };\r\n    Path ws = new Path(workSpace.toURI());\r\n    for (String file : files) {\r\n        File f = new File(workSpace, file);\r\n        if (f.exists()) {\r\n            exec.deleteAsUser(new DeletionAsUserContext.Builder().setUser(user).setSubDir(new Path(file)).setBasedirs(ws).build());\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "shouldRun",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean shouldRun()\n{\r\n    if (exec == null) {\r\n        LOG.warn(\"Not running test because container-executor.path is not set\");\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "writeScriptFile",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "String writeScriptFile(String... cmd) throws IOException\n{\r\n    File f = File.createTempFile(\"TestLinuxContainerExecutor\", \".sh\");\r\n    f.deleteOnExit();\r\n    PrintWriter p = new PrintWriter(new FileOutputStream(f));\r\n    p.println(\"#!/bin/sh\");\r\n    p.print(\"exec\");\r\n    for (String part : cmd) {\r\n        p.print(\" '\");\r\n        p.print(part.replace(\"\\\\\", \"\\\\\\\\\").replace(\"'\", \"\\\\'\"));\r\n        p.print(\"'\");\r\n    }\r\n    p.println();\r\n    p.close();\r\n    return f.getAbsolutePath();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getNextId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getNextId()\n{\r\n    id += 1;\r\n    return id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "getNextContainerId",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ContainerId getNextContainerId()\n{\r\n    ContainerId cId = mock(ContainerId.class);\r\n    String id = \"CONTAINER_\" + getNextId();\r\n    when(cId.toString()).thenReturn(id);\r\n    return cId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "runAndBlock",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int runAndBlock(String... cmd) throws IOException, ConfigurationException\n{\r\n    return runAndBlock(getNextContainerId(), cmd);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "runAndBlock",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "int runAndBlock(ContainerId cId, String... cmd) throws IOException, ConfigurationException\n{\r\n    String appId = \"APP_\" + getNextId();\r\n    Container container = mock(Container.class);\r\n    ContainerLaunchContext context = mock(ContainerLaunchContext.class);\r\n    HashMap<String, String> env = new HashMap<String, String>();\r\n    when(container.getContainerId()).thenReturn(cId);\r\n    when(container.getLaunchContext()).thenReturn(context);\r\n    when(context.getEnvironment()).thenReturn(env);\r\n    String script = writeScriptFile(cmd);\r\n    Path scriptPath = new Path(script);\r\n    Path tokensPath = new Path(\"/dev/null\");\r\n    Path workDir = new Path(workSpace.getAbsolutePath());\r\n    Path pidFile = new Path(workDir, \"pid.txt\");\r\n    exec.activateContainer(cId, pidFile);\r\n    return exec.launchContainer(new ContainerStartContext.Builder().setContainer(container).setNmPrivateContainerScriptPath(scriptPath).setNmPrivateTokensPath(tokensPath).setUser(appSubmitter).setAppId(appId).setContainerWorkDir(workDir).setLocalDirs(dirsHandler.getLocalDirs()).setLogDirs(dirsHandler.getLogDirs()).build());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testContainerLocalizer",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testContainerLocalizer() throws Exception\n{\r\n    Assume.assumeTrue(shouldRun());\r\n    String locId = \"container_01_01\";\r\n    Path nmPrivateContainerTokensPath = dirsHandler.getLocalPathForWrite(ResourceLocalizationService.NM_PRIVATE_DIR + Path.SEPARATOR + String.format(ContainerExecutor.TOKEN_FILE_NAME_FMT, locId));\r\n    files.create(nmPrivateContainerTokensPath, EnumSet.of(CREATE, OVERWRITE));\r\n    Configuration config = new YarnConfiguration(conf);\r\n    InetSocketAddress nmAddr = config.getSocketAddr(YarnConfiguration.NM_BIND_HOST, YarnConfiguration.NM_LOCALIZER_ADDRESS, YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS, YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\r\n    String appId = \"application_01_01\";\r\n    exec = new LinuxContainerExecutor() {\r\n\r\n        @Override\r\n        public void buildMainArgs(List<String> command, String user, String appId, String locId, InetSocketAddress nmAddr, String tokenFileName, List<String> localDirs) {\r\n            MockContainerLocalizer.buildMainArgs(command, user, appId, locId, nmAddr, localDirs);\r\n        }\r\n    };\r\n    exec.setConf(conf);\r\n    exec.startLocalizer(new LocalizerStartContext.Builder().setNmPrivateContainerTokens(nmPrivateContainerTokensPath).setNmAddr(nmAddr).setUser(appSubmitter).setAppId(appId).setLocId(locId).setDirsHandler(dirsHandler).build());\r\n    String locId2 = \"container_01_02\";\r\n    Path nmPrivateContainerTokensPath2 = dirsHandler.getLocalPathForWrite(ResourceLocalizationService.NM_PRIVATE_DIR + Path.SEPARATOR + String.format(ContainerExecutor.TOKEN_FILE_NAME_FMT, locId2));\r\n    files.create(nmPrivateContainerTokensPath2, EnumSet.of(CREATE, OVERWRITE));\r\n    exec.startLocalizer(new LocalizerStartContext.Builder().setNmPrivateContainerTokens(nmPrivateContainerTokensPath2).setNmAddr(nmAddr).setUser(appSubmitter).setAppId(appId).setLocId(locId2).setDirsHandler(dirsHandler).build());\r\n    cleanupUserAppCache(appSubmitter);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testContainerLaunch",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testContainerLaunch() throws Exception\n{\r\n    Assume.assumeTrue(shouldRun());\r\n    String expectedRunAsUser = conf.get(YarnConfiguration.NM_NONSECURE_MODE_LOCAL_USER_KEY, YarnConfiguration.DEFAULT_NM_NONSECURE_MODE_LOCAL_USER);\r\n    File touchFile = new File(workSpace, \"touch-file\");\r\n    int ret = runAndBlock(\"touch\", touchFile.getAbsolutePath());\r\n    assertEquals(0, ret);\r\n    FileStatus fileStatus = FileContext.getLocalFSFileContext().getFileStatus(new Path(touchFile.getAbsolutePath()));\r\n    assertEquals(expectedRunAsUser, fileStatus.getOwner());\r\n    cleanupAppFiles(expectedRunAsUser);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testNonSecureRunAsSubmitter",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testNonSecureRunAsSubmitter() throws Exception\n{\r\n    Assume.assumeTrue(shouldRun());\r\n    Assume.assumeFalse(UserGroupInformation.isSecurityEnabled());\r\n    String expectedRunAsUser = appSubmitter;\r\n    conf.set(YarnConfiguration.NM_NONSECURE_MODE_LIMIT_USERS, \"false\");\r\n    exec.setConf(conf);\r\n    File touchFile = new File(workSpace, \"touch-file\");\r\n    int ret = runAndBlock(\"touch\", touchFile.getAbsolutePath());\r\n    assertEquals(0, ret);\r\n    FileStatus fileStatus = FileContext.getLocalFSFileContext().getFileStatus(new Path(touchFile.getAbsolutePath()));\r\n    assertEquals(expectedRunAsUser, fileStatus.getOwner());\r\n    cleanupAppFiles(expectedRunAsUser);\r\n    conf.unset(YarnConfiguration.NM_NONSECURE_MODE_LIMIT_USERS);\r\n    exec.setConf(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testContainerKill",
  "errType" : [ "IOException|ConfigurationException" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testContainerKill() throws Exception\n{\r\n    Assume.assumeTrue(shouldRun());\r\n    final ContainerId sleepId = getNextContainerId();\r\n    Thread t = new Thread() {\r\n\r\n        public void run() {\r\n            try {\r\n                runAndBlock(sleepId, \"sleep\", \"100\");\r\n            } catch (IOException | ConfigurationException e) {\r\n                LOG.warn(\"Caught exception while running sleep\", e);\r\n            }\r\n        }\r\n    };\r\n    t.setDaemon(true);\r\n    t.start();\r\n    assertTrue(t.isAlive());\r\n    String pid = null;\r\n    int count = 10;\r\n    while ((pid = exec.getProcessId(sleepId)) == null && count > 0) {\r\n        LOG.info(\"Sleeping for 200 ms before checking for pid \");\r\n        Thread.sleep(200);\r\n        count--;\r\n    }\r\n    assertNotNull(pid);\r\n    LOG.info(\"Going to killing the process.\");\r\n    exec.signalContainer(new ContainerSignalContext.Builder().setUser(appSubmitter).setPid(pid).setSignal(Signal.TERM).build());\r\n    LOG.info(\"sleeping for 100ms to let the sleep be killed\");\r\n    Thread.sleep(100);\r\n    assertFalse(t.isAlive());\r\n    cleanupAppFiles(appSubmitter);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testCGroups",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testCGroups() throws Exception\n{\r\n    Assume.assumeTrue(shouldRun());\r\n    String cgroupsMount = System.getProperty(\"cgroups.mount\");\r\n    Assume.assumeTrue((cgroupsMount != null) && !cgroupsMount.isEmpty());\r\n    assertTrue(\"Cgroups mount point does not exist\", new File(cgroupsMount).exists());\r\n    List<String> cgroupKVs = new ArrayList<>();\r\n    String hierarchy = \"hadoop-yarn\";\r\n    String[] controllers = { \"cpu\", \"net_cls\" };\r\n    for (String controller : controllers) {\r\n        cgroupKVs.add(controller + \"=\" + cgroupsMount + \"/\" + controller);\r\n        assertTrue(new File(cgroupsMount, controller).exists());\r\n    }\r\n    try {\r\n        exec.mountCgroups(cgroupKVs, hierarchy);\r\n        for (String controller : controllers) {\r\n            assertTrue(controller + \" cgroup not mounted\", new File(cgroupsMount + \"/\" + controller + \"/tasks\").exists());\r\n            assertTrue(controller + \" cgroup hierarchy not created\", new File(cgroupsMount + \"/\" + controller + \"/\" + hierarchy).exists());\r\n            assertTrue(controller + \" cgroup hierarchy created incorrectly\", new File(cgroupsMount + \"/\" + controller + \"/\" + hierarchy + \"/tasks\").exists());\r\n        }\r\n    } catch (IOException ie) {\r\n        fail(\"Couldn't mount cgroups \" + ie.toString());\r\n        throw ie;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testLocalUser",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testLocalUser() throws Exception\n{\r\n    Assume.assumeTrue(shouldRun());\r\n    try {\r\n        Configuration conf = new YarnConfiguration();\r\n        conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION, \"simple\");\r\n        UserGroupInformation.setConfiguration(conf);\r\n        LinuxContainerExecutor lce = new LinuxContainerExecutor();\r\n        lce.setConf(conf);\r\n        Assert.assertEquals(YarnConfiguration.DEFAULT_NM_NONSECURE_MODE_LOCAL_USER, lce.getRunAsUser(\"foo\"));\r\n        conf.set(YarnConfiguration.NM_NONSECURE_MODE_LOCAL_USER_KEY, \"bar\");\r\n        lce = new LinuxContainerExecutor();\r\n        lce.setConf(conf);\r\n        Assert.assertEquals(\"bar\", lce.getRunAsUser(\"foo\"));\r\n        conf.set(YarnConfiguration.NM_NONSECURE_MODE_LOCAL_USER_KEY, \"bar\");\r\n        conf.setBoolean(YarnConfiguration.NM_NONSECURE_MODE_LIMIT_USERS, false);\r\n        lce = new LinuxContainerExecutor();\r\n        lce.setConf(conf);\r\n        Assert.assertEquals(\"foo\", lce.getRunAsUser(\"foo\"));\r\n        conf = new YarnConfiguration();\r\n        conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION, \"kerberos\");\r\n        UserGroupInformation.setConfiguration(conf);\r\n        lce = new LinuxContainerExecutor();\r\n        lce.setConf(conf);\r\n        Assert.assertEquals(\"foo\", lce.getRunAsUser(\"foo\"));\r\n    } finally {\r\n        Configuration conf = new YarnConfiguration();\r\n        conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION, \"simple\");\r\n        UserGroupInformation.setConfiguration(conf);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testNonsecureUsernamePattern",
  "errType" : [ "IllegalArgumentException", "Throwable", "IllegalArgumentException", "Throwable" ],
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void testNonsecureUsernamePattern() throws Exception\n{\r\n    Assume.assumeTrue(shouldRun());\r\n    try {\r\n        Configuration conf = new YarnConfiguration();\r\n        conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION, \"simple\");\r\n        UserGroupInformation.setConfiguration(conf);\r\n        LinuxContainerExecutor lce = new LinuxContainerExecutor();\r\n        lce.setConf(conf);\r\n        lce.verifyUsernamePattern(\"foo\");\r\n        try {\r\n            lce.verifyUsernamePattern(\"foo/x\");\r\n            fail();\r\n        } catch (IllegalArgumentException ex) {\r\n        } catch (Throwable ex) {\r\n            fail(ex.toString());\r\n        }\r\n        conf.set(YarnConfiguration.NM_NONSECURE_MODE_USER_PATTERN_KEY, \"foo\");\r\n        lce = new LinuxContainerExecutor();\r\n        lce.setConf(conf);\r\n        lce.verifyUsernamePattern(\"foo\");\r\n        try {\r\n            lce.verifyUsernamePattern(\"bar\");\r\n            fail();\r\n        } catch (IllegalArgumentException ex) {\r\n        } catch (Throwable ex) {\r\n            fail(ex.toString());\r\n        }\r\n        conf = new YarnConfiguration();\r\n        conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION, \"kerberos\");\r\n        UserGroupInformation.setConfiguration(conf);\r\n        lce = new LinuxContainerExecutor();\r\n        lce.setConf(conf);\r\n        lce.verifyUsernamePattern(\"foo\");\r\n        lce.verifyUsernamePattern(\"foo/w\");\r\n    } finally {\r\n        Configuration conf = new YarnConfiguration();\r\n        conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION, \"simple\");\r\n        UserGroupInformation.setConfiguration(conf);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testPostExecuteAfterReacquisition",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testPostExecuteAfterReacquisition() throws Exception\n{\r\n    Assume.assumeTrue(shouldRun());\r\n    ApplicationId appId = ApplicationId.newInstance(12345, 67890);\r\n    ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 54321);\r\n    ContainerId cid = ContainerId.newContainerId(attemptId, 9876);\r\n    Configuration conf = new YarnConfiguration();\r\n    conf.setClass(YarnConfiguration.NM_LINUX_CONTAINER_RESOURCES_HANDLER, TestResourceHandler.class, LCEResourcesHandler.class);\r\n    LinuxContainerExecutor lce = new LinuxContainerExecutor();\r\n    lce.setConf(conf);\r\n    try {\r\n        lce.init(null);\r\n    } catch (IOException e) {\r\n    }\r\n    Container container = mock(Container.class);\r\n    ContainerLaunchContext context = mock(ContainerLaunchContext.class);\r\n    HashMap<String, String> env = new HashMap<>();\r\n    when(container.getLaunchContext()).thenReturn(context);\r\n    when(context.getEnvironment()).thenReturn(env);\r\n    lce.reacquireContainer(new ContainerReacquisitionContext.Builder().setContainer(container).setUser(\"foouser\").setContainerId(cid).build());\r\n    assertTrue(\"postExec not called after reacquisition\", TestResourceHandler.postExecContainers.contains(cid));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testRemoveDockerContainer",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testRemoveDockerContainer() throws Exception\n{\r\n    ApplicationId appId = ApplicationId.newInstance(12345, 67890);\r\n    ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 54321);\r\n    String cid = ContainerId.newContainerId(attemptId, 9876).toString();\r\n    LinuxContainerExecutor lce = mock(LinuxContainerExecutor.class);\r\n    lce.removeDockerContainer(cid);\r\n    verify(lce, times(1)).removeDockerContainer(cid);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testReapContainer",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testReapContainer() throws Exception\n{\r\n    Container container = mock(Container.class);\r\n    LinuxContainerRuntime containerRuntime = mock(LinuxContainerRuntime.class);\r\n    LinuxContainerExecutor lce = spy(new LinuxContainerExecutor(containerRuntime));\r\n    ContainerReapContext.Builder builder = new ContainerReapContext.Builder();\r\n    builder.setContainer(container).setUser(\"foo\");\r\n    ContainerReapContext ctx = builder.build();\r\n    lce.reapContainer(ctx);\r\n    verify(lce, times(1)).reapContainer(ctx);\r\n    verify(lce, times(1)).postComplete(any());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testRelaunchContainer",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testRelaunchContainer() throws Exception\n{\r\n    Container container = mock(Container.class);\r\n    LinuxContainerExecutor lce = mock(LinuxContainerExecutor.class);\r\n    ContainerStartContext.Builder builder = new ContainerStartContext.Builder();\r\n    builder.setContainer(container).setUser(\"foo\");\r\n    ContainerStartContext ctx = builder.build();\r\n    lce.relaunchContainer(ctx);\r\n    verify(lce, times(1)).relaunchContainer(ctx);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testExecContainer",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testExecContainer() throws Exception\n{\r\n    Container container = mock(Container.class);\r\n    LinuxContainerExecutor lce = mock(LinuxContainerExecutor.class);\r\n    ContainerExecContext.Builder builder = new ContainerExecContext.Builder();\r\n    builder.setUser(\"foo\").setAppId(\"app1\").setContainer(container);\r\n    ContainerExecContext ctx = builder.build();\r\n    lce.execContainer(ctx);\r\n    verify(lce, times(1)).execContainer(ctx);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testUpdateYarnSysFS",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testUpdateYarnSysFS() throws Exception\n{\r\n    String user = System.getProperty(\"user.name\");\r\n    String appId = \"app-1\";\r\n    String spec = \"\";\r\n    Context ctx = mock(Context.class);\r\n    LinuxContainerExecutor lce = mock(LinuxContainerExecutor.class);\r\n    lce.updateYarnSysFS(ctx, user, appId, spec);\r\n    verify(lce, times(1)).updateYarnSysFS(ctx, user, appId, spec);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testGetLocalResources",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetLocalResources() throws Exception\n{\r\n    Container container = mock(Container.class);\r\n    LinuxContainerExecutor lce = mock(LinuxContainerExecutor.class);\r\n    lce.getLocalResources(container);\r\n    verify(lce, times(1)).getLocalResources(container);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    mockExecutor = mock(PrivilegedOperationExecutor.class);\r\n    mockCGroupsHandler = mock(CGroupsHandler.class);\r\n    configuration = new Configuration();\r\n    String tmpPath = new StringBuffer(System.getProperty(\"test.build.data\")).append('/').append(\"hadoop.tmp.dir\").toString();\r\n    configuration.set(\"hadoop.tmp.dir\", tmpPath);\r\n    runtime = new DockerLinuxContainerRuntime(mockExecutor, mockCGroupsHandler);\r\n    container = mock(Container.class);\r\n    cId = mock(ContainerId.class);\r\n    context = mock(ContainerLaunchContext.class);\r\n    env = new HashMap<>();\r\n    builder = new ContainerRuntimeContext.Builder(container);\r\n    nmContext = createMockNMContext();\r\n    appAttemptId = mock(ApplicationAttemptId.class);\r\n    when(container.getContainerId()).thenReturn(cId);\r\n    when(cId.toString()).thenReturn(MOCK_CONTAINER_ID);\r\n    when(cId.getApplicationAttemptId()).thenReturn(appAttemptId);\r\n    when(container.getLaunchContext()).thenReturn(context);\r\n    when(context.getEnvironment()).thenReturn(env);\r\n    builder.setExecutionAttribute(CONTAINER_ID_STR, MOCK_CONTAINER_ID);\r\n    runtime.initialize(TestDockerContainerRuntime.enableMockContainerExecutor(configuration), null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "createMockNMContext",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "Context createMockNMContext()\n{\r\n    Context mockNMContext = mock(Context.class);\r\n    LocalDirsHandlerService localDirsHandler = mock(LocalDirsHandlerService.class);\r\n    String tmpPath = new StringBuffer(System.getProperty(\"test.build.data\")).append('/').append(\"hadoop.tmp.dir\").toString();\r\n    ConcurrentMap<ContainerId, Container> containerMap = mock(ConcurrentMap.class);\r\n    when(mockNMContext.getLocalDirsHandler()).thenReturn(localDirsHandler);\r\n    when(mockNMContext.getContainers()).thenReturn(containerMap);\r\n    when(containerMap.get(any())).thenReturn(container);\r\n    try {\r\n        when(localDirsHandler.getLocalPathForWrite(anyString())).thenReturn(new Path(tmpPath));\r\n    } catch (IOException ioe) {\r\n        LOG.info(\"LocalDirsHandler failed\" + ioe);\r\n    }\r\n    return mockNMContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testExecuteDockerCommand",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testExecuteDockerCommand() throws Exception\n{\r\n    DockerStopCommand dockerStopCommand = new DockerStopCommand(MOCK_CONTAINER_ID);\r\n    DockerCommandExecutor.executeDockerCommand(dockerStopCommand, cId.toString(), env, mockExecutor, false, nmContext);\r\n    List<PrivilegedOperation> ops = MockPrivilegedOperationCaptor.capturePrivilegedOperations(mockExecutor, 1, true);\r\n    assertEquals(1, ops.size());\r\n    assertEquals(PrivilegedOperation.OperationType.RUN_DOCKER_CMD.name(), ops.get(0).getOperationType().name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testExecuteDockerRm",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testExecuteDockerRm() throws Exception\n{\r\n    DockerRmCommand dockerCommand = new DockerRmCommand(MOCK_CONTAINER_ID, null);\r\n    DockerCommandExecutor.executeDockerCommand(dockerCommand, MOCK_CONTAINER_ID, env, mockExecutor, false, nmContext);\r\n    List<PrivilegedOperation> ops = MockPrivilegedOperationCaptor.capturePrivilegedOperations(mockExecutor, 1, true);\r\n    PrivilegedOperation privOp = ops.get(0);\r\n    List<String> args = privOp.getArguments();\r\n    assertEquals(1, ops.size());\r\n    assertEquals(PrivilegedOperation.OperationType.REMOVE_DOCKER_CONTAINER.name(), privOp.getOperationType().name());\r\n    assertEquals(1, args.size());\r\n    assertEquals(MOCK_CONTAINER_ID, args.get(0));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testExecuteDockerRmWithCgroup",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testExecuteDockerRmWithCgroup() throws Exception\n{\r\n    DockerRmCommand dockerCommand = new DockerRmCommand(MOCK_CONTAINER_ID, MOCK_CGROUP_HIERARCHY);\r\n    DockerCommandExecutor.executeDockerCommand(dockerCommand, MOCK_CONTAINER_ID, env, mockExecutor, false, nmContext);\r\n    List<PrivilegedOperation> ops = MockPrivilegedOperationCaptor.capturePrivilegedOperations(mockExecutor, 1, true);\r\n    PrivilegedOperation privOp = ops.get(0);\r\n    List<String> args = privOp.getArguments();\r\n    assertEquals(1, ops.size());\r\n    assertEquals(PrivilegedOperation.OperationType.REMOVE_DOCKER_CONTAINER.name(), privOp.getOperationType().name());\r\n    assertEquals(2, args.size());\r\n    assertEquals(MOCK_CGROUP_HIERARCHY, args.get(0));\r\n    assertEquals(MOCK_CONTAINER_ID, args.get(1));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testExecuteDockerStop",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testExecuteDockerStop() throws Exception\n{\r\n    DockerStopCommand dockerCommand = new DockerStopCommand(MOCK_CONTAINER_ID);\r\n    DockerCommandExecutor.executeDockerCommand(dockerCommand, MOCK_CONTAINER_ID, env, mockExecutor, false, nmContext);\r\n    List<PrivilegedOperation> ops = MockPrivilegedOperationCaptor.capturePrivilegedOperations(mockExecutor, 1, true);\r\n    List<String> dockerCommands = getValidatedDockerCommands(ops);\r\n    assertEquals(1, ops.size());\r\n    assertEquals(PrivilegedOperation.OperationType.RUN_DOCKER_CMD.name(), ops.get(0).getOperationType().name());\r\n    assertEquals(3, dockerCommands.size());\r\n    assertEquals(\"[docker-command-execution]\", dockerCommands.get(0));\r\n    assertEquals(\"  docker-command=stop\", dockerCommands.get(1));\r\n    assertEquals(\"  name=\" + MOCK_CONTAINER_ID, dockerCommands.get(2));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testExecuteDockerInspectStatus",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testExecuteDockerInspectStatus() throws Exception\n{\r\n    DockerInspectCommand dockerCommand = new DockerInspectCommand(MOCK_CONTAINER_ID).getContainerStatus();\r\n    DockerCommandExecutor.executeDockerCommand(dockerCommand, MOCK_CONTAINER_ID, env, mockExecutor, false, nmContext);\r\n    List<PrivilegedOperation> ops = MockPrivilegedOperationCaptor.capturePrivilegedOperations(mockExecutor, 1, true);\r\n    PrivilegedOperation privOp = ops.get(0);\r\n    List<String> args = privOp.getArguments();\r\n    assertEquals(1, ops.size());\r\n    assertEquals(PrivilegedOperation.OperationType.INSPECT_DOCKER_CONTAINER.name(), privOp.getOperationType().name());\r\n    assertEquals(2, args.size());\r\n    assertEquals(\"--format={{.State.Status}}\", args.get(0));\r\n    assertEquals(MOCK_CONTAINER_ID, args.get(1));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testExecuteDockerPull",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testExecuteDockerPull() throws Exception\n{\r\n    DockerPullCommand dockerCommand = new DockerPullCommand(MOCK_IMAGE_NAME);\r\n    DockerCommandExecutor.executeDockerCommand(dockerCommand, MOCK_CONTAINER_ID, env, mockExecutor, false, nmContext);\r\n    List<PrivilegedOperation> ops = MockPrivilegedOperationCaptor.capturePrivilegedOperations(mockExecutor, 1, true);\r\n    List<String> dockerCommands = getValidatedDockerCommands(ops);\r\n    assertEquals(1, ops.size());\r\n    assertEquals(PrivilegedOperation.OperationType.RUN_DOCKER_CMD.name(), ops.get(0).getOperationType().name());\r\n    assertEquals(3, dockerCommands.size());\r\n    assertEquals(\"[docker-command-execution]\", dockerCommands.get(0));\r\n    assertEquals(\"  docker-command=pull\", dockerCommands.get(1));\r\n    assertEquals(\"  image=\" + MOCK_IMAGE_NAME, dockerCommands.get(2));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testExecuteDockerLoad",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testExecuteDockerLoad() throws Exception\n{\r\n    DockerLoadCommand dockerCommand = new DockerLoadCommand(MOCK_LOCAL_IMAGE_NAME);\r\n    DockerCommandExecutor.executeDockerCommand(dockerCommand, MOCK_CONTAINER_ID, env, mockExecutor, false, nmContext);\r\n    List<PrivilegedOperation> ops = MockPrivilegedOperationCaptor.capturePrivilegedOperations(mockExecutor, 1, true);\r\n    List<String> dockerCommands = getValidatedDockerCommands(ops);\r\n    assertEquals(1, ops.size());\r\n    assertEquals(PrivilegedOperation.OperationType.RUN_DOCKER_CMD.name(), ops.get(0).getOperationType().name());\r\n    assertEquals(3, dockerCommands.size());\r\n    assertEquals(\"[docker-command-execution]\", dockerCommands.get(0));\r\n    assertEquals(\"  docker-command=load\", dockerCommands.get(1));\r\n    assertEquals(\"  image=\" + MOCK_LOCAL_IMAGE_NAME, dockerCommands.get(2));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testGetContainerStatus",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testGetContainerStatus() throws Exception\n{\r\n    for (DockerContainerStatus status : DockerContainerStatus.values()) {\r\n        when(mockExecutor.executePrivilegedOperation(eq(null), any(PrivilegedOperation.class), eq(null), any(), eq(true), eq(false))).thenReturn(status.getName());\r\n        assertEquals(status, DockerCommandExecutor.getContainerStatus(MOCK_CONTAINER_ID, mockExecutor, nmContext));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testExecuteDockerKillSIGQUIT",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testExecuteDockerKillSIGQUIT() throws Exception\n{\r\n    DockerKillCommand dockerKillCommand = new DockerKillCommand(MOCK_CONTAINER_ID).setSignal(ContainerExecutor.Signal.QUIT.name());\r\n    DockerCommandExecutor.executeDockerCommand(dockerKillCommand, MOCK_CONTAINER_ID, env, mockExecutor, false, nmContext);\r\n    List<PrivilegedOperation> ops = MockPrivilegedOperationCaptor.capturePrivilegedOperations(mockExecutor, 1, true);\r\n    List<String> dockerCommands = getValidatedDockerCommands(ops);\r\n    assertEquals(1, ops.size());\r\n    assertEquals(PrivilegedOperation.OperationType.RUN_DOCKER_CMD.name(), ops.get(0).getOperationType().name());\r\n    assertEquals(4, dockerCommands.size());\r\n    assertEquals(\"[docker-command-execution]\", dockerCommands.get(0));\r\n    assertEquals(\"  docker-command=kill\", dockerCommands.get(1));\r\n    assertEquals(\"  name=\" + MOCK_CONTAINER_ID, dockerCommands.get(2));\r\n    assertEquals(\"  signal=\" + ContainerExecutor.Signal.QUIT.name(), dockerCommands.get(3));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testExecuteDockerKillSIGKILL",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testExecuteDockerKillSIGKILL() throws Exception\n{\r\n    DockerKillCommand dockerKillCommand = new DockerKillCommand(MOCK_CONTAINER_ID).setSignal(ContainerExecutor.Signal.KILL.name());\r\n    DockerCommandExecutor.executeDockerCommand(dockerKillCommand, MOCK_CONTAINER_ID, env, mockExecutor, false, nmContext);\r\n    List<PrivilegedOperation> ops = MockPrivilegedOperationCaptor.capturePrivilegedOperations(mockExecutor, 1, true);\r\n    List<String> dockerCommands = getValidatedDockerCommands(ops);\r\n    assertEquals(1, ops.size());\r\n    assertEquals(PrivilegedOperation.OperationType.RUN_DOCKER_CMD.name(), ops.get(0).getOperationType().name());\r\n    assertEquals(4, dockerCommands.size());\r\n    assertEquals(\"[docker-command-execution]\", dockerCommands.get(0));\r\n    assertEquals(\"  docker-command=kill\", dockerCommands.get(1));\r\n    assertEquals(\"  name=\" + MOCK_CONTAINER_ID, dockerCommands.get(2));\r\n    assertEquals(\"  signal=\" + ContainerExecutor.Signal.KILL.name(), dockerCommands.get(3));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testExecuteDockerKillSIGTERM",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testExecuteDockerKillSIGTERM() throws Exception\n{\r\n    DockerKillCommand dockerKillCommand = new DockerKillCommand(MOCK_CONTAINER_ID).setSignal(ContainerExecutor.Signal.TERM.name());\r\n    DockerCommandExecutor.executeDockerCommand(dockerKillCommand, MOCK_CONTAINER_ID, env, mockExecutor, false, nmContext);\r\n    List<PrivilegedOperation> ops = MockPrivilegedOperationCaptor.capturePrivilegedOperations(mockExecutor, 1, true);\r\n    List<String> dockerCommands = getValidatedDockerCommands(ops);\r\n    assertEquals(1, ops.size());\r\n    assertEquals(PrivilegedOperation.OperationType.RUN_DOCKER_CMD.name(), ops.get(0).getOperationType().name());\r\n    assertEquals(4, dockerCommands.size());\r\n    assertEquals(\"[docker-command-execution]\", dockerCommands.get(0));\r\n    assertEquals(\"  docker-command=kill\", dockerCommands.get(1));\r\n    assertEquals(\"  name=\" + MOCK_CONTAINER_ID, dockerCommands.get(2));\r\n    assertEquals(\"  signal=\" + ContainerExecutor.Signal.TERM.name(), dockerCommands.get(3));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testIsStoppable",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testIsStoppable()\n{\r\n    assertTrue(DockerCommandExecutor.isStoppable(DockerContainerStatus.RUNNING));\r\n    assertTrue(DockerCommandExecutor.isStoppable(DockerContainerStatus.RESTARTING));\r\n    assertFalse(DockerCommandExecutor.isStoppable(DockerContainerStatus.EXITED));\r\n    assertFalse(DockerCommandExecutor.isStoppable(DockerContainerStatus.CREATED));\r\n    assertFalse(DockerCommandExecutor.isStoppable(DockerContainerStatus.DEAD));\r\n    assertFalse(DockerCommandExecutor.isStoppable(DockerContainerStatus.NONEXISTENT));\r\n    assertFalse(DockerCommandExecutor.isStoppable(DockerContainerStatus.REMOVING));\r\n    assertFalse(DockerCommandExecutor.isStoppable(DockerContainerStatus.STOPPED));\r\n    assertFalse(DockerCommandExecutor.isStoppable(DockerContainerStatus.UNKNOWN));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testIsKIllable",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testIsKIllable()\n{\r\n    assertTrue(DockerCommandExecutor.isKillable(DockerContainerStatus.RUNNING));\r\n    assertTrue(DockerCommandExecutor.isKillable(DockerContainerStatus.RESTARTING));\r\n    assertFalse(DockerCommandExecutor.isKillable(DockerContainerStatus.EXITED));\r\n    assertFalse(DockerCommandExecutor.isKillable(DockerContainerStatus.CREATED));\r\n    assertFalse(DockerCommandExecutor.isKillable(DockerContainerStatus.DEAD));\r\n    assertFalse(DockerCommandExecutor.isKillable(DockerContainerStatus.NONEXISTENT));\r\n    assertFalse(DockerCommandExecutor.isKillable(DockerContainerStatus.REMOVING));\r\n    assertFalse(DockerCommandExecutor.isKillable(DockerContainerStatus.STOPPED));\r\n    assertFalse(DockerCommandExecutor.isKillable(DockerContainerStatus.UNKNOWN));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "testIsRemovable",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testIsRemovable()\n{\r\n    assertTrue(DockerCommandExecutor.isRemovable(DockerContainerStatus.STOPPED));\r\n    assertTrue(DockerCommandExecutor.isRemovable(DockerContainerStatus.RESTARTING));\r\n    assertTrue(DockerCommandExecutor.isRemovable(DockerContainerStatus.EXITED));\r\n    assertTrue(DockerCommandExecutor.isRemovable(DockerContainerStatus.CREATED));\r\n    assertTrue(DockerCommandExecutor.isRemovable(DockerContainerStatus.DEAD));\r\n    assertFalse(DockerCommandExecutor.isRemovable(DockerContainerStatus.NONEXISTENT));\r\n    assertFalse(DockerCommandExecutor.isRemovable(DockerContainerStatus.REMOVING));\r\n    assertFalse(DockerCommandExecutor.isRemovable(DockerContainerStatus.UNKNOWN));\r\n    assertFalse(DockerCommandExecutor.isRemovable(DockerContainerStatus.RUNNING));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\containermanager\\linux\\runtime\\docker",
  "methodName" : "getValidatedDockerCommands",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "List<String> getValidatedDockerCommands(List<PrivilegedOperation> ops) throws IOException\n{\r\n    try {\r\n        List<String> dockerCommands = new ArrayList<>();\r\n        for (PrivilegedOperation op : ops) {\r\n            Assert.assertEquals(op.getOperationType(), PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\r\n            String dockerCommandFile = op.getArguments().get(0);\r\n            List<String> dockerCommandFileContents = Files.readAllLines(Paths.get(dockerCommandFile), Charset.forName(\"UTF-8\"));\r\n            dockerCommands.addAll(dockerCommandFileContents);\r\n        }\r\n        return dockerCommands;\r\n    } catch (IOException e) {\r\n        throw new IOException(\"Unable to read the docker command file.\", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager",
  "methodName" : "testSuccessfulContainerLaunch",
  "errType" : null,
  "containingMethodsNum" : 36,
  "sourceCodeText" : "void testSuccessfulContainerLaunch() throws InterruptedException, IOException, YarnException\n{\r\n    FileContext localFS = FileContext.getLocalFSFileContext();\r\n    localFS.delete(new Path(localDir.getAbsolutePath()), true);\r\n    localFS.delete(new Path(localLogDir.getAbsolutePath()), true);\r\n    localFS.delete(new Path(remoteLogDir.getAbsolutePath()), true);\r\n    localDir.mkdir();\r\n    localLogDir.mkdir();\r\n    remoteLogDir.mkdir();\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, null, new NMNullStateStoreService(), false, conf) {\r\n\r\n        @Override\r\n        public int getHttpPort() {\r\n            return 1234;\r\n        }\r\n    };\r\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, localDir.getAbsolutePath());\r\n    conf.set(YarnConfiguration.NM_LOG_DIRS, localLogDir.getAbsolutePath());\r\n    conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR, remoteLogDir.getAbsolutePath());\r\n    conf.set(YarnConfiguration.NM_LOCALIZER_ADDRESS, \"0.0.0.0:\" + ServerSocketUtil.getPort(8040, 10));\r\n    ContainerExecutor exec = new DefaultContainerExecutor();\r\n    exec.setConf(conf);\r\n    DeletionService del = new DeletionService(exec);\r\n    Dispatcher dispatcher = new AsyncDispatcher();\r\n    LocalDirsHandlerService dirsHandler = new LocalDirsHandlerService();\r\n    NodeHealthCheckerService healthChecker = new NodeHealthCheckerService(dirsHandler);\r\n    healthChecker.init(conf);\r\n    NodeManagerMetrics metrics = NodeManagerMetrics.create();\r\n    NodeStatusUpdater nodeStatusUpdater = new NodeStatusUpdaterImpl(context, dispatcher, healthChecker, metrics) {\r\n\r\n        @Override\r\n        protected ResourceTracker getRMClient() {\r\n            return new LocalRMInterface();\r\n        }\r\n\r\n        @Override\r\n        protected void stopRMProxy() {\r\n            return;\r\n        }\r\n\r\n        @Override\r\n        protected void startStatusUpdater() {\r\n            return;\r\n        }\r\n\r\n        @Override\r\n        public long getRMIdentifier() {\r\n            return SIMULATED_RM_IDENTIFIER;\r\n        }\r\n    };\r\n    DummyContainerManager containerManager = new DummyContainerManager(context, exec, del, nodeStatusUpdater, metrics, dirsHandler);\r\n    nodeStatusUpdater.init(conf);\r\n    NodeResourceMonitorImpl nodeResourceMonitor = mock(NodeResourceMonitorImpl.class);\r\n    ((NMContext) context).setNodeResourceMonitor(nodeResourceMonitor);\r\n    ((NMContext) context).setContainerManager(containerManager);\r\n    nodeStatusUpdater.start();\r\n    ((NMContext) context).setNodeStatusUpdater(nodeStatusUpdater);\r\n    containerManager.init(conf);\r\n    containerManager.start();\r\n    ContainerLaunchContext launchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class);\r\n    ApplicationId applicationId = ApplicationId.newInstance(0, 0);\r\n    ApplicationAttemptId applicationAttemptId = ApplicationAttemptId.newInstance(applicationId, 0);\r\n    ContainerId cID = ContainerId.newContainerId(applicationAttemptId, 0);\r\n    String user = \"testing\";\r\n    StartContainerRequest scRequest = StartContainerRequest.newInstance(launchContext, TestContainerManager.createContainerToken(cID, SIMULATED_RM_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager()));\r\n    List<StartContainerRequest> list = new ArrayList<StartContainerRequest>();\r\n    list.add(scRequest);\r\n    StartContainersRequest allRequests = StartContainersRequest.newInstance(list);\r\n    containerManager.startContainers(allRequests);\r\n    BaseContainerManagerTest.waitForContainerState(containerManager, cID, Arrays.asList(ContainerState.RUNNING), 20);\r\n    List<ContainerId> containerIds = new ArrayList<ContainerId>();\r\n    containerIds.add(cID);\r\n    StopContainersRequest stopRequest = StopContainersRequest.newInstance(containerIds);\r\n    containerManager.stopContainers(stopRequest);\r\n    BaseContainerManagerTest.waitForContainerState(containerManager, cID, ContainerState.COMPLETE);\r\n    containerManager.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setUp()\n{\r\n    container = mock(Container.class);\r\n    context = new ContainerReapContext.Builder().setUser(USER).setContainer(container).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void getContainer()\n{\r\n    assertEquals(container, context.getContainer());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-nodemanager\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\nodemanager\\executor",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void getUser()\n{\r\n    assertEquals(USER, context.getUser());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
} ]