[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "setUp",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void setUp()\n{\r\n    super.setUpConfig();\r\n    interceptor = new TestableFederationInterceptorREST();\r\n    stateStore = new MemoryFederationStateStore();\r\n    stateStore.init(this.getConf());\r\n    FederationStateStoreFacade.getInstance().reinitialize(stateStore, this.getConf());\r\n    stateStoreUtil = new FederationStateStoreTestUtil(stateStore);\r\n    interceptor.setConf(this.getConf());\r\n    interceptor.init(user);\r\n    subClusters = new ArrayList<>();\r\n    try {\r\n        for (int i = 0; i < NUM_SUBCLUSTER; i++) {\r\n            SubClusterId sc = SubClusterId.newInstance(Integer.toString(i));\r\n            stateStoreUtil.registerSubCluster(sc);\r\n            subClusters.add(sc);\r\n        }\r\n    } catch (YarnException e) {\r\n        LOG.error(e.getMessage());\r\n        Assert.fail();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDown()\n{\r\n    interceptor.shutdown();\r\n    super.tearDown();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "createConfiguration",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "YarnConfiguration createConfiguration()\n{\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.FEDERATION_ENABLED, true);\r\n    conf.set(YarnConfiguration.ROUTER_WEBAPP_DEFAULT_INTERCEPTOR_CLASS, MockDefaultRequestInterceptorREST.class.getName());\r\n    String mockPassThroughInterceptorClass = PassThroughRESTRequestInterceptor.class.getName();\r\n    conf.set(YarnConfiguration.ROUTER_CLIENTRM_INTERCEPTOR_CLASS_PIPELINE, mockPassThroughInterceptorClass + \",\" + TestableFederationInterceptorREST.class.getName());\r\n    conf.set(YarnConfiguration.FEDERATION_POLICY_MANAGER, UniformBroadcastPolicyManager.class.getName());\r\n    conf.setInt(YarnConfiguration.FEDERATION_CACHE_TIME_TO_LIVE_SECS, 0);\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testGetNewApplication",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testGetNewApplication() throws YarnException, IOException, InterruptedException\n{\r\n    Response response = interceptor.createNewApplication(null);\r\n    Assert.assertNotNull(response);\r\n    NewApplication ci = (NewApplication) response.getEntity();\r\n    Assert.assertNotNull(ci);\r\n    ApplicationId appId = ApplicationId.fromString(ci.getApplicationId());\r\n    Assert.assertTrue(appId.getClusterTimestamp() < NUM_SUBCLUSTER);\r\n    Assert.assertTrue(appId.getClusterTimestamp() >= 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testSubmitApplication",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testSubmitApplication() throws YarnException, IOException, InterruptedException\n{\r\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    ApplicationSubmissionContextInfo context = new ApplicationSubmissionContextInfo();\r\n    context.setApplicationId(appId.toString());\r\n    Response response = interceptor.submitApplication(context, null);\r\n    Assert.assertEquals(ACCEPTED, response.getStatus());\r\n    SubClusterId ci = (SubClusterId) response.getEntity();\r\n    Assert.assertNotNull(response);\r\n    SubClusterId scIdResult = stateStoreUtil.queryApplicationHomeSC(appId);\r\n    Assert.assertNotNull(scIdResult);\r\n    Assert.assertTrue(subClusters.contains(scIdResult));\r\n    Assert.assertEquals(ci, scIdResult);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testSubmitApplicationMultipleSubmission",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testSubmitApplicationMultipleSubmission() throws YarnException, IOException, InterruptedException\n{\r\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    ApplicationSubmissionContextInfo context = new ApplicationSubmissionContextInfo();\r\n    context.setApplicationId(appId.toString());\r\n    Response response = interceptor.submitApplication(context, null);\r\n    Assert.assertNotNull(response);\r\n    Assert.assertEquals(ACCEPTED, response.getStatus());\r\n    SubClusterId scIdResult = stateStoreUtil.queryApplicationHomeSC(appId);\r\n    Assert.assertNotNull(scIdResult);\r\n    response = interceptor.submitApplication(context, null);\r\n    Assert.assertNotNull(response);\r\n    Assert.assertEquals(ACCEPTED, response.getStatus());\r\n    SubClusterId scIdResult2 = stateStoreUtil.queryApplicationHomeSC(appId);\r\n    Assert.assertNotNull(scIdResult2);\r\n    Assert.assertEquals(scIdResult, scIdResult2);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testSubmitApplicationEmptyRequest",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testSubmitApplicationEmptyRequest() throws YarnException, IOException, InterruptedException\n{\r\n    Response response = interceptor.submitApplication(null, null);\r\n    Assert.assertEquals(BAD_REQUEST, response.getStatus());\r\n    response = interceptor.submitApplication(new ApplicationSubmissionContextInfo(), null);\r\n    Assert.assertEquals(BAD_REQUEST, response.getStatus());\r\n    ApplicationSubmissionContextInfo context = new ApplicationSubmissionContextInfo();\r\n    response = interceptor.submitApplication(context, null);\r\n    Assert.assertEquals(BAD_REQUEST, response.getStatus());\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testSubmitApplicationWrongFormat",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testSubmitApplicationWrongFormat() throws YarnException, IOException, InterruptedException\n{\r\n    ApplicationSubmissionContextInfo context = new ApplicationSubmissionContextInfo();\r\n    context.setApplicationId(\"Application_wrong_id\");\r\n    Response response = interceptor.submitApplication(context, null);\r\n    Assert.assertEquals(BAD_REQUEST, response.getStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testForceKillApplication",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testForceKillApplication() throws YarnException, IOException, InterruptedException\n{\r\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    ApplicationSubmissionContextInfo context = new ApplicationSubmissionContextInfo();\r\n    context.setApplicationId(appId.toString());\r\n    Response response = interceptor.submitApplication(context, null);\r\n    Assert.assertNotNull(response);\r\n    Assert.assertNotNull(stateStoreUtil.queryApplicationHomeSC(appId));\r\n    AppState appState = new AppState(\"KILLED\");\r\n    Response responseKill = interceptor.updateAppState(appState, null, appId.toString());\r\n    Assert.assertNotNull(responseKill);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testForceKillApplicationNotExists",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testForceKillApplicationNotExists() throws YarnException, IOException, InterruptedException\n{\r\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    AppState appState = new AppState(\"KILLED\");\r\n    Response response = interceptor.updateAppState(appState, null, appId.toString());\r\n    Assert.assertEquals(BAD_REQUEST, response.getStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testForceKillApplicationWrongFormat",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testForceKillApplicationWrongFormat() throws YarnException, IOException, InterruptedException\n{\r\n    AppState appState = new AppState(\"KILLED\");\r\n    Response response = interceptor.updateAppState(appState, null, \"Application_wrong_id\");\r\n    Assert.assertEquals(BAD_REQUEST, response.getStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testForceKillApplicationEmptyRequest",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testForceKillApplicationEmptyRequest() throws YarnException, IOException, InterruptedException\n{\r\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    ApplicationSubmissionContextInfo context = new ApplicationSubmissionContextInfo();\r\n    context.setApplicationId(appId.toString());\r\n    interceptor.submitApplication(context, null);\r\n    Response response = interceptor.updateAppState(null, null, appId.toString());\r\n    Assert.assertEquals(BAD_REQUEST, response.getStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testGetApplicationReport",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testGetApplicationReport() throws YarnException, IOException, InterruptedException\n{\r\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    ApplicationSubmissionContextInfo context = new ApplicationSubmissionContextInfo();\r\n    context.setApplicationId(appId.toString());\r\n    Response response = interceptor.submitApplication(context, null);\r\n    Assert.assertNotNull(response);\r\n    Assert.assertNotNull(stateStoreUtil.queryApplicationHomeSC(appId));\r\n    AppInfo responseGet = interceptor.getApp(null, appId.toString(), null);\r\n    Assert.assertNotNull(responseGet);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testGetApplicationNotExists",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testGetApplicationNotExists() throws YarnException, IOException, InterruptedException\n{\r\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    AppInfo response = interceptor.getApp(null, appId.toString(), null);\r\n    Assert.assertNull(response);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testGetApplicationWrongFormat",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testGetApplicationWrongFormat() throws YarnException, IOException, InterruptedException\n{\r\n    AppInfo response = interceptor.getApp(null, \"Application_wrong_id\", null);\r\n    Assert.assertNull(response);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testGetApplicationsReport",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testGetApplicationsReport() throws YarnException, IOException, InterruptedException\n{\r\n    AppsInfo responseGet = interceptor.getApps(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);\r\n    Assert.assertNotNull(responseGet);\r\n    Assert.assertEquals(NUM_SUBCLUSTER, responseGet.getApps().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testGetNode",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testGetNode()\n{\r\n    NodeInfo responseGet = interceptor.getNode(\"testGetNode\");\r\n    Assert.assertNotNull(responseGet);\r\n    Assert.assertEquals(NUM_SUBCLUSTER - 1, responseGet.getLastHealthUpdate());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testGetNodes",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testGetNodes()\n{\r\n    NodesInfo responseGet = interceptor.getNodes(null);\r\n    Assert.assertNotNull(responseGet);\r\n    Assert.assertEquals(NUM_SUBCLUSTER, responseGet.getNodes().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testUpdateNodeResource",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testUpdateNodeResource()\n{\r\n    List<NodeInfo> nodes = interceptor.getNodes(null).getNodes();\r\n    Assert.assertFalse(nodes.isEmpty());\r\n    final String nodeId = nodes.get(0).getNodeId();\r\n    ResourceOptionInfo resourceOption = new ResourceOptionInfo(ResourceOption.newInstance(Resource.newInstance(2048, 3), 1000));\r\n    ResourceInfo resource = interceptor.updateNodeResource(null, nodeId, resourceOption);\r\n    Assert.assertNotNull(resource);\r\n    Assert.assertEquals(2048, resource.getMemorySize());\r\n    Assert.assertEquals(3, resource.getvCores());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testGetClusterMetrics",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testGetClusterMetrics()\n{\r\n    ClusterMetricsInfo responseGet = interceptor.getClusterMetricsInfo();\r\n    Assert.assertNotNull(responseGet);\r\n    int expectedAppSubmitted = 0;\r\n    for (int i = 0; i < NUM_SUBCLUSTER; i++) {\r\n        expectedAppSubmitted += i;\r\n    }\r\n    Assert.assertEquals(expectedAppSubmitted, responseGet.getAppsSubmitted());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testGetApplicationState",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testGetApplicationState() throws YarnException, IOException, InterruptedException\n{\r\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    ApplicationSubmissionContextInfo context = new ApplicationSubmissionContextInfo();\r\n    context.setApplicationId(appId.toString());\r\n    Response response = interceptor.submitApplication(context, null);\r\n    Assert.assertNotNull(response);\r\n    Assert.assertNotNull(stateStoreUtil.queryApplicationHomeSC(appId));\r\n    AppState responseGet = interceptor.getAppState(null, appId.toString());\r\n    Assert.assertNotNull(responseGet);\r\n    Assert.assertEquals(MockDefaultRequestInterceptorREST.APP_STATE_RUNNING, responseGet.getState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testGetApplicationStateNotExists",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testGetApplicationStateNotExists() throws YarnException, IOException, InterruptedException\n{\r\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    AppState response = interceptor.getAppState(null, appId.toString());\r\n    Assert.assertNull(response);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testGetApplicationStateWrongFormat",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testGetApplicationStateWrongFormat() throws YarnException, IOException, InterruptedException\n{\r\n    AppState response = interceptor.getAppState(null, \"Application_wrong_id\");\r\n    Assert.assertNull(response);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testRMSwitchoverOfOneSC",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testRMSwitchoverOfOneSC() throws Exception\n{\r\n    SubClusterId subClusterId = SubClusterId.newInstance(Integer.toString(0));\r\n    interceptor.getClusterMetricsInfo();\r\n    Assert.assertEquals(\"http://1.2.3.4:4\", interceptor.getInterceptorForSubCluster(subClusterId).getWebAppAddress());\r\n    registerSubClusterWithSwitchoverRM(subClusterId);\r\n    interceptor.getClusterMetricsInfo();\r\n    Assert.assertEquals(\"http://5.6.7.8:8\", interceptor.getInterceptorForSubCluster(subClusterId).getWebAppAddress());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "registerSubClusterWithSwitchoverRM",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void registerSubClusterWithSwitchoverRM(SubClusterId subClusterId) throws YarnException\n{\r\n    String amRMAddress = \"5.6.7.8:5\";\r\n    String clientRMAddress = \"5.6.7.8:6\";\r\n    String rmAdminAddress = \"5.6.7.8:7\";\r\n    String webAppAddress = \"5.6.7.8:8\";\r\n    SubClusterInfo subClusterInfo = SubClusterInfo.newInstance(subClusterId, amRMAddress, clientRMAddress, rmAdminAddress, webAppAddress, SubClusterState.SC_RUNNING, new MonotonicClock().getTime(), \"capability\");\r\n    stateStore.registerSubCluster(SubClusterRegisterRequest.newInstance(subClusterInfo));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "setNextInterceptor",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNextInterceptor(RESTRequestInterceptor next)\n{\r\n    throw new YarnRuntimeException(\"setNextInterceptor is being called on MockRESTRequestInterceptor,\" + \"which should be the last one in the chain. \" + \"Check if the interceptor pipeline configuration is correct\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "get",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ClusterInfo get()\n{\r\n    return new ClusterInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getClusterInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ClusterInfo getClusterInfo()\n{\r\n    return new ClusterInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getClusterUserInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ClusterUserInfo getClusterUserInfo(HttpServletRequest hsr)\n{\r\n    return new ClusterUserInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getClusterMetricsInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ClusterMetricsInfo getClusterMetricsInfo()\n{\r\n    return new ClusterMetricsInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getSchedulerInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SchedulerTypeInfo getSchedulerInfo()\n{\r\n    return new SchedulerTypeInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "dumpSchedulerLogs",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String dumpSchedulerLogs(String time, HttpServletRequest hsr) throws IOException\n{\r\n    return \"Done\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getNodes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodesInfo getNodes(String states)\n{\r\n    return new NodesInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getNode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeInfo getNode(String nodeId)\n{\r\n    return new NodeInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "updateNodeResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourceInfo updateNodeResource(HttpServletRequest hsr, String nodeId, ResourceOptionInfo resourceOption) throws AuthorizationException\n{\r\n    return new ResourceInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getApps",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AppsInfo getApps(HttpServletRequest hsr, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes, Set<String> applicationTags, String name, Set<String> unselectedFields)\n{\r\n    return new AppsInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getActivities",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ActivitiesInfo getActivities(HttpServletRequest hsr, String nodeId, String groupBy)\n{\r\n    return new ActivitiesInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getBulkActivities",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "BulkActivitiesInfo getBulkActivities(HttpServletRequest hsr, String groupBy, int activitiesCount) throws InterruptedException\n{\r\n    return new BulkActivitiesInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getAppActivities",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AppActivitiesInfo getAppActivities(HttpServletRequest hsr, String appId, String time, Set<String> requestPriorities, Set<String> allocationRequestIds, String groupBy, String limit, Set<String> actions, boolean summarize)\n{\r\n    return new AppActivitiesInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getAppStatistics",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationStatisticsInfo getAppStatistics(HttpServletRequest hsr, Set<String> stateQueries, Set<String> typeQueries)\n{\r\n    return new ApplicationStatisticsInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getApp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AppInfo getApp(HttpServletRequest hsr, String appId, Set<String> unselectedFields)\n{\r\n    return new AppInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getAppState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AppState getAppState(HttpServletRequest hsr, String appId) throws AuthorizationException\n{\r\n    return new AppState();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "updateAppState",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response updateAppState(AppState targetState, HttpServletRequest hsr, String appId) throws AuthorizationException, YarnException, InterruptedException, IOException\n{\r\n    return Response.status(Status.OK).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getNodeToLabels",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeToLabelsInfo getNodeToLabels(HttpServletRequest hsr) throws IOException\n{\r\n    return new NodeToLabelsInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getLabelsToNodes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LabelsToNodesInfo getLabelsToNodes(Set<String> labels) throws IOException\n{\r\n    return new LabelsToNodesInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "replaceLabelsOnNodes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response replaceLabelsOnNodes(NodeToLabelsEntryList newNodeToLabels, HttpServletRequest hsr) throws Exception\n{\r\n    return Response.status(Status.OK).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "replaceLabelsOnNode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response replaceLabelsOnNode(Set<String> newNodeLabelsName, HttpServletRequest hsr, String nodeId) throws Exception\n{\r\n    return Response.status(Status.OK).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getClusterNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeLabelsInfo getClusterNodeLabels(HttpServletRequest hsr) throws IOException\n{\r\n    return new NodeLabelsInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "addToClusterNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response addToClusterNodeLabels(NodeLabelsInfo newNodeLabels, HttpServletRequest hsr) throws Exception\n{\r\n    return Response.status(Status.OK).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "removeFromClusterNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response removeFromClusterNodeLabels(Set<String> oldNodeLabels, HttpServletRequest hsr) throws Exception\n{\r\n    return Response.status(Status.OK).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getLabelsOnNode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeLabelsInfo getLabelsOnNode(HttpServletRequest hsr, String nodeId) throws IOException\n{\r\n    return new NodeLabelsInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getAppPriority",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AppPriority getAppPriority(HttpServletRequest hsr, String appId) throws AuthorizationException\n{\r\n    return new AppPriority();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "updateApplicationPriority",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response updateApplicationPriority(AppPriority targetPriority, HttpServletRequest hsr, String appId) throws AuthorizationException, YarnException, InterruptedException, IOException\n{\r\n    return Response.status(Status.OK).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getAppQueue",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AppQueue getAppQueue(HttpServletRequest hsr, String appId) throws AuthorizationException\n{\r\n    return new AppQueue();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "updateAppQueue",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response updateAppQueue(AppQueue targetQueue, HttpServletRequest hsr, String appId) throws AuthorizationException, YarnException, InterruptedException, IOException\n{\r\n    return Response.status(Status.OK).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "createNewApplication",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response createNewApplication(HttpServletRequest hsr) throws AuthorizationException, IOException, InterruptedException\n{\r\n    return Response.status(Status.OK).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "submitApplication",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response submitApplication(ApplicationSubmissionContextInfo newApp, HttpServletRequest hsr) throws AuthorizationException, IOException, InterruptedException\n{\r\n    return Response.status(Status.OK).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "postDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response postDelegationToken(DelegationToken tokenData, HttpServletRequest hsr) throws AuthorizationException, IOException, InterruptedException, Exception\n{\r\n    return Response.status(Status.OK).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "postDelegationTokenExpiration",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response postDelegationTokenExpiration(HttpServletRequest hsr) throws AuthorizationException, IOException, Exception\n{\r\n    return Response.status(Status.OK).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "cancelDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response cancelDelegationToken(HttpServletRequest hsr) throws AuthorizationException, IOException, InterruptedException, Exception\n{\r\n    return Response.status(Status.OK).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "createNewReservation",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response createNewReservation(HttpServletRequest hsr) throws AuthorizationException, IOException, InterruptedException\n{\r\n    return Response.status(Status.OK).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "submitReservation",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response submitReservation(ReservationSubmissionRequestInfo resContext, HttpServletRequest hsr) throws AuthorizationException, IOException, InterruptedException\n{\r\n    return Response.status(Status.OK).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "updateReservation",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response updateReservation(ReservationUpdateRequestInfo resContext, HttpServletRequest hsr) throws AuthorizationException, IOException, InterruptedException\n{\r\n    return Response.status(Status.OK).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "deleteReservation",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response deleteReservation(ReservationDeleteRequestInfo resContext, HttpServletRequest hsr) throws AuthorizationException, IOException, InterruptedException\n{\r\n    return Response.status(Status.OK).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "listReservation",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response listReservation(String queue, String reservationId, long startTime, long endTime, boolean includeResourceAllocations, HttpServletRequest hsr) throws Exception\n{\r\n    return Response.status(Status.OK).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getAppTimeout",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AppTimeoutInfo getAppTimeout(HttpServletRequest hsr, String appId, String type) throws AuthorizationException\n{\r\n    return new AppTimeoutInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getAppTimeouts",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AppTimeoutsInfo getAppTimeouts(HttpServletRequest hsr, String appId) throws AuthorizationException\n{\r\n    return new AppTimeoutsInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "updateApplicationTimeout",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response updateApplicationTimeout(AppTimeoutInfo appTimeout, HttpServletRequest hsr, String appId) throws AuthorizationException, YarnException, InterruptedException, IOException\n{\r\n    return Response.status(Status.OK).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getAppAttempts",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AppAttemptsInfo getAppAttempts(HttpServletRequest hsr, String appId)\n{\r\n    return new AppAttemptsInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "checkUserAccessToQueue",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RMQueueAclInfo checkUserAccessToQueue(String queue, String username, String queueAclType, HttpServletRequest hsr)\n{\r\n    return new RMQueueAclInfo(true, username, \"\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getAppAttempt",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AppAttemptInfo getAppAttempt(HttpServletRequest req, HttpServletResponse res, String appId, String appAttemptId)\n{\r\n    return new AppAttemptInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getContainers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainersInfo getContainers(HttpServletRequest req, HttpServletResponse res, String appId, String appAttemptId)\n{\r\n    return new ContainersInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerInfo getContainer(HttpServletRequest req, HttpServletResponse res, String appId, String appAttemptId, String containerId)\n{\r\n    return new ContainerInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "signalToContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response signalToContainer(String containerId, String command, HttpServletRequest req)\n{\r\n    return Response.status(Status.OK).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "refreshQueues",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RefreshQueuesResponse refreshQueues(RefreshQueuesRequest request) throws StandbyException, YarnException, IOException\n{\r\n    return getNextInterceptor().refreshQueues(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "refreshNodes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RefreshNodesResponse refreshNodes(RefreshNodesRequest request) throws StandbyException, YarnException, IOException\n{\r\n    return getNextInterceptor().refreshNodes(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "refreshSuperUserGroupsConfiguration",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RefreshSuperUserGroupsConfigurationResponse refreshSuperUserGroupsConfiguration(RefreshSuperUserGroupsConfigurationRequest request) throws StandbyException, YarnException, IOException\n{\r\n    return getNextInterceptor().refreshSuperUserGroupsConfiguration(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "refreshUserToGroupsMappings",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RefreshUserToGroupsMappingsResponse refreshUserToGroupsMappings(RefreshUserToGroupsMappingsRequest request) throws StandbyException, YarnException, IOException\n{\r\n    return getNextInterceptor().refreshUserToGroupsMappings(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "refreshAdminAcls",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RefreshAdminAclsResponse refreshAdminAcls(RefreshAdminAclsRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().refreshAdminAcls(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "refreshServiceAcls",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RefreshServiceAclsResponse refreshServiceAcls(RefreshServiceAclsRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().refreshServiceAcls(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "updateNodeResource",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "UpdateNodeResourceResponse updateNodeResource(UpdateNodeResourceRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().updateNodeResource(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "refreshNodesResources",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RefreshNodesResourcesResponse refreshNodesResources(RefreshNodesResourcesRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().refreshNodesResources(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "addToClusterNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AddToClusterNodeLabelsResponse addToClusterNodeLabels(AddToClusterNodeLabelsRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().addToClusterNodeLabels(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "removeFromClusterNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RemoveFromClusterNodeLabelsResponse removeFromClusterNodeLabels(RemoveFromClusterNodeLabelsRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().removeFromClusterNodeLabels(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "replaceLabelsOnNode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReplaceLabelsOnNodeResponse replaceLabelsOnNode(ReplaceLabelsOnNodeRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().replaceLabelsOnNode(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "checkForDecommissioningNodes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "CheckForDecommissioningNodesResponse checkForDecommissioningNodes(CheckForDecommissioningNodesRequest checkForDecommissioningNodesRequest) throws YarnException, IOException\n{\r\n    return getNextInterceptor().checkForDecommissioningNodes(checkForDecommissioningNodesRequest);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "refreshClusterMaxPriority",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RefreshClusterMaxPriorityResponse refreshClusterMaxPriority(RefreshClusterMaxPriorityRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().refreshClusterMaxPriority(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "getGroupsForUser",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String[] getGroupsForUser(String user) throws IOException\n{\r\n    return getNextInterceptor().getGroupsForUser(user);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "mapAttributesToNodes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodesToAttributesMappingResponse mapAttributesToNodes(NodesToAttributesMappingRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().mapAttributesToNodes(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "testRequestInterceptorChainCreation",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testRequestInterceptorChainCreation() throws Exception\n{\r\n    ClientRequestInterceptor root = super.getRouterClientRMService().createRequestInterceptorChain();\r\n    int index = 0;\r\n    while (root != null) {\r\n        switch(index) {\r\n            case 0:\r\n            case 1:\r\n            case 2:\r\n                Assert.assertEquals(PassThroughClientRequestInterceptor.class.getName(), root.getClass().getName());\r\n                break;\r\n            case 3:\r\n                Assert.assertEquals(MockClientRequestInterceptor.class.getName(), root.getClass().getName());\r\n                break;\r\n            default:\r\n                Assert.fail();\r\n        }\r\n        root = root.getNextInterceptor();\r\n        index++;\r\n    }\r\n    Assert.assertEquals(\"The number of interceptors in chain does not match\", 4, index);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "testRouterClientRMServiceE2E",
  "errType" : null,
  "containingMethodsNum" : 38,
  "sourceCodeText" : "void testRouterClientRMServiceE2E() throws Exception\n{\r\n    String user = \"test1\";\r\n    LOG.info(\"testRouterClientRMServiceE2E - Get New Application\");\r\n    GetNewApplicationResponse responseGetNewApp = getNewApplication(user);\r\n    Assert.assertNotNull(responseGetNewApp);\r\n    LOG.info(\"testRouterClientRMServiceE2E - Submit Application\");\r\n    SubmitApplicationResponse responseSubmitApp = submitApplication(responseGetNewApp.getApplicationId(), user);\r\n    Assert.assertNotNull(responseSubmitApp);\r\n    LOG.info(\"testRouterClientRMServiceE2E - Get Cluster Metrics\");\r\n    GetClusterMetricsResponse responseGetClusterMetrics = getClusterMetrics(user);\r\n    Assert.assertNotNull(responseGetClusterMetrics);\r\n    LOG.info(\"testRouterClientRMServiceE2E - Get Cluster Nodes\");\r\n    GetClusterNodesResponse responseGetClusterNodes = getClusterNodes(user);\r\n    Assert.assertNotNull(responseGetClusterNodes);\r\n    LOG.info(\"testRouterClientRMServiceE2E - Get Queue Info\");\r\n    GetQueueInfoResponse responseGetQueueInfo = getQueueInfo(user);\r\n    Assert.assertNotNull(responseGetQueueInfo);\r\n    LOG.info(\"testRouterClientRMServiceE2E - Get Queue User\");\r\n    GetQueueUserAclsInfoResponse responseGetQueueUser = getQueueUserAcls(user);\r\n    Assert.assertNotNull(responseGetQueueUser);\r\n    LOG.info(\"testRouterClientRMServiceE2E - Get Cluster Node\");\r\n    GetClusterNodeLabelsResponse responseGetClusterNode = getClusterNodeLabels(user);\r\n    Assert.assertNotNull(responseGetClusterNode);\r\n    LOG.info(\"testRouterClientRMServiceE2E - Move Application Across Queues\");\r\n    MoveApplicationAcrossQueuesResponse responseMoveApp = moveApplicationAcrossQueues(user, responseGetNewApp.getApplicationId());\r\n    Assert.assertNotNull(responseMoveApp);\r\n    LOG.info(\"testRouterClientRMServiceE2E - Get New Reservation\");\r\n    GetNewReservationResponse getNewReservationResponse = getNewReservation(user);\r\n    LOG.info(\"testRouterClientRMServiceE2E - Submit Reservation\");\r\n    ReservationSubmissionResponse responseSubmitReser = submitReservation(user, getNewReservationResponse.getReservationId());\r\n    Assert.assertNotNull(responseSubmitReser);\r\n    LOG.info(\"testRouterClientRMServiceE2E - Update Reservation\");\r\n    ReservationUpdateResponse responseUpdateReser = updateReservation(user, getNewReservationResponse.getReservationId());\r\n    Assert.assertNotNull(responseUpdateReser);\r\n    LOG.info(\"testRouterClientRMServiceE2E - Delete Reservation\");\r\n    ReservationDeleteResponse responseDeleteReser = deleteReservation(user, getNewReservationResponse.getReservationId());\r\n    Assert.assertNotNull(responseDeleteReser);\r\n    LOG.info(\"testRouterClientRMServiceE2E - Kill Application\");\r\n    KillApplicationResponse responseKillApp = forceKillApplication(responseGetNewApp.getApplicationId(), user);\r\n    Assert.assertNotNull(responseKillApp);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "testUsersChainMapWithLRUCache",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testUsersChainMapWithLRUCache() throws YarnException, IOException, InterruptedException\n{\r\n    Map<String, RequestInterceptorChainWrapper> pipelines;\r\n    RequestInterceptorChainWrapper chain;\r\n    getNewApplication(\"test1\");\r\n    getNewApplication(\"test2\");\r\n    getNewApplication(\"test3\");\r\n    getNewApplication(\"test4\");\r\n    getNewApplication(\"test5\");\r\n    getNewApplication(\"test6\");\r\n    getNewApplication(\"test7\");\r\n    getNewApplication(\"test8\");\r\n    pipelines = super.getRouterClientRMService().getPipelines();\r\n    Assert.assertEquals(8, pipelines.size());\r\n    getNewApplication(\"test9\");\r\n    getNewApplication(\"test10\");\r\n    getNewApplication(\"test1\");\r\n    getNewApplication(\"test11\");\r\n    Assert.assertEquals(10, pipelines.size());\r\n    chain = pipelines.get(\"test1\");\r\n    Assert.assertNotNull(\"test1 should not be evicted\", chain);\r\n    chain = pipelines.get(\"test2\");\r\n    Assert.assertNull(\"test2 should have been evicted\", chain);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "testClientPipelineConcurrent",
  "errType" : [ "IOException|InterruptedException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testClientPipelineConcurrent() throws InterruptedException\n{\r\n    final String user = \"test1\";\r\n    class ClientTestThread extends Thread {\r\n\r\n        private ClientRequestInterceptor interceptor;\r\n\r\n        @Override\r\n        public void run() {\r\n            try {\r\n                interceptor = pipeline();\r\n            } catch (IOException | InterruptedException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n\r\n        private ClientRequestInterceptor pipeline() throws IOException, InterruptedException {\r\n            return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<ClientRequestInterceptor>() {\r\n\r\n                @Override\r\n                public ClientRequestInterceptor run() throws Exception {\r\n                    RequestInterceptorChainWrapper wrapper = getRouterClientRMService().getInterceptorChain();\r\n                    ClientRequestInterceptor interceptor = wrapper.getRootInterceptor();\r\n                    Assert.assertNotNull(interceptor);\r\n                    LOG.info(\"init client interceptor success for user \" + user);\r\n                    return interceptor;\r\n                }\r\n            });\r\n        }\r\n    }\r\n    ClientTestThread client1 = new ClientTestThread();\r\n    ClientTestThread client2 = new ClientTestThread();\r\n    client1.start();\r\n    client2.start();\r\n    client1.join();\r\n    client2.join();\r\n    Assert.assertNotNull(client1.interceptor);\r\n    Assert.assertNotNull(client2.interceptor);\r\n    Assert.assertTrue(client1.interceptor == client2.interceptor);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "getRouterRMAdminService",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "MockRouterRMAdminService getRouterRMAdminService()\n{\r\n    Assert.assertNotNull(this.rmAdminService);\r\n    return this.rmAdminService;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void setUp()\n{\r\n    this.conf = new YarnConfiguration();\r\n    String mockPassThroughInterceptorClass = PassThroughRMAdminRequestInterceptor.class.getName();\r\n    this.conf.set(YarnConfiguration.ROUTER_RMADMIN_INTERCEPTOR_CLASS_PIPELINE, mockPassThroughInterceptorClass + \",\" + mockPassThroughInterceptorClass + \",\" + mockPassThroughInterceptorClass + \",\" + MockRMAdminRequestInterceptor.class.getName());\r\n    this.conf.setInt(YarnConfiguration.ROUTER_PIPELINE_CACHE_MAX_SIZE, TEST_MAX_CACHE_SIZE);\r\n    this.dispatcher = new AsyncDispatcher();\r\n    this.dispatcher.init(conf);\r\n    this.dispatcher.start();\r\n    this.rmAdminService = createAndStartRouterRMAdminService();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDown()\n{\r\n    if (rmAdminService != null) {\r\n        rmAdminService.stop();\r\n        rmAdminService = null;\r\n    }\r\n    if (this.dispatcher != null) {\r\n        this.dispatcher.stop();\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "getThreadPool",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ExecutorService getThreadPool()\n{\r\n    return threadpool;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "createAndStartRouterRMAdminService",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "MockRouterRMAdminService createAndStartRouterRMAdminService()\n{\r\n    MockRouterRMAdminService svc = new MockRouterRMAdminService();\r\n    svc.init(conf);\r\n    svc.start();\r\n    return svc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "refreshQueues",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RefreshQueuesResponse refreshQueues(String user) throws IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<RefreshQueuesResponse>() {\r\n\r\n        @Override\r\n        public RefreshQueuesResponse run() throws Exception {\r\n            RefreshQueuesRequest req = RefreshQueuesRequest.newInstance();\r\n            RefreshQueuesResponse response = getRouterRMAdminService().refreshQueues(req);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "refreshNodes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RefreshNodesResponse refreshNodes(String user) throws IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<RefreshNodesResponse>() {\r\n\r\n        @Override\r\n        public RefreshNodesResponse run() throws Exception {\r\n            RefreshNodesRequest req = RefreshNodesRequest.newInstance();\r\n            RefreshNodesResponse response = getRouterRMAdminService().refreshNodes(req);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "refreshSuperUserGroupsConfiguration",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RefreshSuperUserGroupsConfigurationResponse refreshSuperUserGroupsConfiguration(String user) throws IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<RefreshSuperUserGroupsConfigurationResponse>() {\r\n\r\n        @Override\r\n        public RefreshSuperUserGroupsConfigurationResponse run() throws Exception {\r\n            RefreshSuperUserGroupsConfigurationRequest req = RefreshSuperUserGroupsConfigurationRequest.newInstance();\r\n            RefreshSuperUserGroupsConfigurationResponse response = getRouterRMAdminService().refreshSuperUserGroupsConfiguration(req);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "refreshUserToGroupsMappings",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RefreshUserToGroupsMappingsResponse refreshUserToGroupsMappings(String user) throws IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<RefreshUserToGroupsMappingsResponse>() {\r\n\r\n        @Override\r\n        public RefreshUserToGroupsMappingsResponse run() throws Exception {\r\n            RefreshUserToGroupsMappingsRequest req = RefreshUserToGroupsMappingsRequest.newInstance();\r\n            RefreshUserToGroupsMappingsResponse response = getRouterRMAdminService().refreshUserToGroupsMappings(req);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "refreshAdminAcls",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RefreshAdminAclsResponse refreshAdminAcls(String user) throws IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<RefreshAdminAclsResponse>() {\r\n\r\n        @Override\r\n        public RefreshAdminAclsResponse run() throws Exception {\r\n            RefreshAdminAclsRequest req = RefreshAdminAclsRequest.newInstance();\r\n            RefreshAdminAclsResponse response = getRouterRMAdminService().refreshAdminAcls(req);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "refreshServiceAcls",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RefreshServiceAclsResponse refreshServiceAcls(String user) throws IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<RefreshServiceAclsResponse>() {\r\n\r\n        @Override\r\n        public RefreshServiceAclsResponse run() throws Exception {\r\n            RefreshServiceAclsRequest req = RefreshServiceAclsRequest.newInstance();\r\n            RefreshServiceAclsResponse response = getRouterRMAdminService().refreshServiceAcls(req);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "updateNodeResource",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "UpdateNodeResourceResponse updateNodeResource(String user) throws IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<UpdateNodeResourceResponse>() {\r\n\r\n        @Override\r\n        public UpdateNodeResourceResponse run() throws Exception {\r\n            UpdateNodeResourceRequest req = UpdateNodeResourceRequest.newInstance(null);\r\n            UpdateNodeResourceResponse response = getRouterRMAdminService().updateNodeResource(req);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "refreshNodesResources",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RefreshNodesResourcesResponse refreshNodesResources(String user) throws IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<RefreshNodesResourcesResponse>() {\r\n\r\n        @Override\r\n        public RefreshNodesResourcesResponse run() throws Exception {\r\n            RefreshNodesResourcesRequest req = RefreshNodesResourcesRequest.newInstance();\r\n            RefreshNodesResourcesResponse response = getRouterRMAdminService().refreshNodesResources(req);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "addToClusterNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AddToClusterNodeLabelsResponse addToClusterNodeLabels(String user) throws IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<AddToClusterNodeLabelsResponse>() {\r\n\r\n        @Override\r\n        public AddToClusterNodeLabelsResponse run() throws Exception {\r\n            AddToClusterNodeLabelsRequest req = AddToClusterNodeLabelsRequest.newInstance(null);\r\n            AddToClusterNodeLabelsResponse response = getRouterRMAdminService().addToClusterNodeLabels(req);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "removeFromClusterNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RemoveFromClusterNodeLabelsResponse removeFromClusterNodeLabels(String user) throws IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<RemoveFromClusterNodeLabelsResponse>() {\r\n\r\n        @Override\r\n        public RemoveFromClusterNodeLabelsResponse run() throws Exception {\r\n            RemoveFromClusterNodeLabelsRequest req = RemoveFromClusterNodeLabelsRequest.newInstance(null);\r\n            RemoveFromClusterNodeLabelsResponse response = getRouterRMAdminService().removeFromClusterNodeLabels(req);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "replaceLabelsOnNode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReplaceLabelsOnNodeResponse replaceLabelsOnNode(String user) throws IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<ReplaceLabelsOnNodeResponse>() {\r\n\r\n        @Override\r\n        public ReplaceLabelsOnNodeResponse run() throws Exception {\r\n            ReplaceLabelsOnNodeRequest req = ReplaceLabelsOnNodeRequest.newInstance(new HashMap<NodeId, Set<String>>());\r\n            ReplaceLabelsOnNodeResponse response = getRouterRMAdminService().replaceLabelsOnNode(req);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "checkForDecommissioningNodes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "CheckForDecommissioningNodesResponse checkForDecommissioningNodes(String user) throws IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<CheckForDecommissioningNodesResponse>() {\r\n\r\n        @Override\r\n        public CheckForDecommissioningNodesResponse run() throws Exception {\r\n            CheckForDecommissioningNodesRequest req = CheckForDecommissioningNodesRequest.newInstance();\r\n            CheckForDecommissioningNodesResponse response = getRouterRMAdminService().checkForDecommissioningNodes(req);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "refreshClusterMaxPriority",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RefreshClusterMaxPriorityResponse refreshClusterMaxPriority(String user) throws IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<RefreshClusterMaxPriorityResponse>() {\r\n\r\n        @Override\r\n        public RefreshClusterMaxPriorityResponse run() throws Exception {\r\n            RefreshClusterMaxPriorityRequest req = RefreshClusterMaxPriorityRequest.newInstance();\r\n            RefreshClusterMaxPriorityResponse response = getRouterRMAdminService().refreshClusterMaxPriority(req);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "getGroupsForUser",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String[] getGroupsForUser(String user) throws IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<String[]>() {\r\n\r\n        @Override\r\n        public String[] run() throws Exception {\r\n            String[] response = getRouterRMAdminService().getGroupsForUser(user);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void setUp()\n{\r\n    this.conf = createConfiguration();\r\n    router = spy(new Router());\r\n    Mockito.doNothing().when(router).startWepApp();\r\n    routerWebService = new RouterWebServices(router, conf);\r\n    routerWebService.setResponse(mock(HttpServletResponse.class));\r\n    router.init(conf);\r\n    router.start();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "createConfiguration",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "YarnConfiguration createConfiguration()\n{\r\n    YarnConfiguration config = new YarnConfiguration();\r\n    String mockPassThroughInterceptorClass = PassThroughRESTRequestInterceptor.class.getName();\r\n    config.set(YarnConfiguration.ROUTER_WEBAPP_INTERCEPTOR_CLASS_PIPELINE, mockPassThroughInterceptorClass + \",\" + mockPassThroughInterceptorClass + \",\" + mockPassThroughInterceptorClass + \",\" + MockRESTRequestInterceptor.class.getName());\r\n    config.setInt(YarnConfiguration.ROUTER_PIPELINE_CACHE_MAX_SIZE, TEST_MAX_CACHE_SIZE);\r\n    return config;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown()\n{\r\n    if (router != null) {\r\n        router.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "setUpConfig",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setUpConfig()\n{\r\n    this.conf = createConfiguration();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getConf",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Configuration getConf()\n{\r\n    return this.conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getRouterWebServices",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RouterWebServices getRouterWebServices()\n{\r\n    Assert.assertNotNull(this.routerWebService);\r\n    return this.routerWebService;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "get",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ClusterInfo get(String user) throws IOException, InterruptedException\n{\r\n    return routerWebService.get();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getClusterInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ClusterInfo getClusterInfo(String user) throws IOException, InterruptedException\n{\r\n    return routerWebService.getClusterInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getClusterMetricsInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ClusterMetricsInfo getClusterMetricsInfo(String user) throws IOException, InterruptedException\n{\r\n    return routerWebService.getClusterMetricsInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getSchedulerInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SchedulerTypeInfo getSchedulerInfo(String user) throws IOException, InterruptedException\n{\r\n    return routerWebService.getSchedulerInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "dumpSchedulerLogs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String dumpSchedulerLogs(String user) throws IOException, InterruptedException\n{\r\n    return routerWebService.dumpSchedulerLogs(null, createHttpServletRequest(user));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getNodes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodesInfo getNodes(String user) throws IOException, InterruptedException\n{\r\n    return routerWebService.getNodes(null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getNode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeInfo getNode(String user) throws IOException, InterruptedException\n{\r\n    return routerWebService.getNode(null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getApps",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AppsInfo getApps(String user) throws IOException, InterruptedException\n{\r\n    return routerWebService.getApps(createHttpServletRequest(user), null, null, null, null, null, null, null, null, null, null, null, null, null, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getActivities",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ActivitiesInfo getActivities(String user) throws IOException, InterruptedException\n{\r\n    return routerWebService.getActivities(createHttpServletRequest(user), null, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getBulkActivities",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "BulkActivitiesInfo getBulkActivities(String user) throws InterruptedException\n{\r\n    return routerWebService.getBulkActivities(createHttpServletRequest(user), null, 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getAppActivities",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AppActivitiesInfo getAppActivities(String user) throws IOException, InterruptedException\n{\r\n    return routerWebService.getAppActivities(createHttpServletRequest(user), null, null, null, null, null, null, null, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getAppStatistics",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationStatisticsInfo getAppStatistics(String user) throws IOException, InterruptedException\n{\r\n    return routerWebService.getAppStatistics(createHttpServletRequest(user), null, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getApp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AppInfo getApp(String user) throws IOException, InterruptedException\n{\r\n    return routerWebService.getApp(createHttpServletRequest(user), null, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getAppState",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AppState getAppState(String user) throws IOException, InterruptedException\n{\r\n    return routerWebService.getAppState(createHttpServletRequest(user), null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "updateAppState",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response updateAppState(String user) throws AuthorizationException, YarnException, InterruptedException, IOException\n{\r\n    return routerWebService.updateAppState(null, createHttpServletRequest(user), null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getNodeToLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeToLabelsInfo getNodeToLabels(String user) throws IOException, InterruptedException\n{\r\n    return routerWebService.getNodeToLabels(createHttpServletRequest(user));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getLabelsToNodes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LabelsToNodesInfo getLabelsToNodes(String user) throws IOException, InterruptedException\n{\r\n    return routerWebService.getLabelsToNodes(null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "replaceLabelsOnNodes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response replaceLabelsOnNodes(String user) throws Exception\n{\r\n    return routerWebService.replaceLabelsOnNodes(null, createHttpServletRequest(user));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "replaceLabelsOnNode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response replaceLabelsOnNode(String user) throws Exception\n{\r\n    return routerWebService.replaceLabelsOnNode(null, createHttpServletRequest(user), null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getClusterNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeLabelsInfo getClusterNodeLabels(String user) throws IOException, InterruptedException\n{\r\n    return routerWebService.getClusterNodeLabels(createHttpServletRequest(user));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "addToClusterNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response addToClusterNodeLabels(String user) throws Exception\n{\r\n    return routerWebService.addToClusterNodeLabels(null, createHttpServletRequest(user));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "removeFromClusterNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response removeFromClusterNodeLabels(String user) throws Exception\n{\r\n    return routerWebService.removeFromClusterNodeLabels(null, createHttpServletRequest(user));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getLabelsOnNode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeLabelsInfo getLabelsOnNode(String user) throws IOException, InterruptedException\n{\r\n    return routerWebService.getLabelsOnNode(createHttpServletRequest(user), null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getAppPriority",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AppPriority getAppPriority(String user) throws IOException, InterruptedException\n{\r\n    return routerWebService.getAppPriority(createHttpServletRequest(user), null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "updateApplicationPriority",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response updateApplicationPriority(String user) throws AuthorizationException, YarnException, InterruptedException, IOException\n{\r\n    return routerWebService.updateApplicationPriority(null, createHttpServletRequest(user), null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getAppQueue",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AppQueue getAppQueue(String user) throws IOException, InterruptedException\n{\r\n    return routerWebService.getAppQueue(createHttpServletRequest(user), null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "updateAppQueue",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response updateAppQueue(String user) throws AuthorizationException, YarnException, InterruptedException, IOException\n{\r\n    return routerWebService.updateAppQueue(null, createHttpServletRequest(user), null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "createNewApplication",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response createNewApplication(String user) throws AuthorizationException, IOException, InterruptedException\n{\r\n    return routerWebService.createNewApplication(createHttpServletRequest(user));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "submitApplication",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response submitApplication(String user) throws AuthorizationException, IOException, InterruptedException\n{\r\n    return routerWebService.submitApplication(null, createHttpServletRequest(user));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "postDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response postDelegationToken(String user) throws AuthorizationException, IOException, InterruptedException, Exception\n{\r\n    return routerWebService.postDelegationToken(null, createHttpServletRequest(user));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "postDelegationTokenExpiration",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response postDelegationTokenExpiration(String user) throws AuthorizationException, IOException, Exception\n{\r\n    return routerWebService.postDelegationTokenExpiration(createHttpServletRequest(user));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "cancelDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response cancelDelegationToken(String user) throws AuthorizationException, IOException, InterruptedException, Exception\n{\r\n    return routerWebService.cancelDelegationToken(createHttpServletRequest(user));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "createNewReservation",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response createNewReservation(String user) throws AuthorizationException, IOException, InterruptedException\n{\r\n    return routerWebService.createNewReservation(createHttpServletRequest(user));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "submitReservation",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response submitReservation(String user) throws AuthorizationException, IOException, InterruptedException\n{\r\n    return routerWebService.submitReservation(null, createHttpServletRequest(user));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "updateReservation",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response updateReservation(String user) throws AuthorizationException, IOException, InterruptedException\n{\r\n    return routerWebService.updateReservation(null, createHttpServletRequest(user));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "deleteReservation",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response deleteReservation(String user) throws AuthorizationException, IOException, InterruptedException\n{\r\n    return routerWebService.deleteReservation(null, createHttpServletRequest(user));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "listReservation",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response listReservation(String user) throws Exception\n{\r\n    return routerWebService.listReservation(null, null, 0, 0, false, createHttpServletRequest(user));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getAppTimeout",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AppTimeoutInfo getAppTimeout(String user) throws IOException, InterruptedException\n{\r\n    return routerWebService.getAppTimeout(createHttpServletRequest(user), null, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getAppTimeouts",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AppTimeoutsInfo getAppTimeouts(String user) throws IOException, InterruptedException\n{\r\n    return routerWebService.getAppTimeouts(createHttpServletRequest(user), null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "updateApplicationTimeout",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response updateApplicationTimeout(String user) throws AuthorizationException, YarnException, InterruptedException, IOException\n{\r\n    return routerWebService.updateApplicationTimeout(null, createHttpServletRequest(user), null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getAppAttempts",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AppAttemptsInfo getAppAttempts(String user) throws IOException, InterruptedException\n{\r\n    return routerWebService.getAppAttempts(createHttpServletRequest(user), null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getAppAttempt",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AppAttemptInfo getAppAttempt(String user) throws IOException, InterruptedException\n{\r\n    return routerWebService.getAppAttempt(createHttpServletRequest(user), null, null, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainersInfo getContainers(String user) throws IOException, InterruptedException\n{\r\n    return routerWebService.getContainers(createHttpServletRequest(user), null, null, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerInfo getContainer(String user) throws IOException, InterruptedException\n{\r\n    return routerWebService.getContainer(createHttpServletRequest(user), null, null, null, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getInterceptorChain",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RequestInterceptorChainWrapper getInterceptorChain(String user) throws IOException, InterruptedException\n{\r\n    HttpServletRequest request = createHttpServletRequest(user);\r\n    return routerWebService.getInterceptorChain(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "createHttpServletRequest",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "HttpServletRequest createHttpServletRequest(String user)\n{\r\n    HttpServletRequest request = mock(HttpServletRequest.class);\r\n    when(request.getRemoteUser()).thenReturn(user);\r\n    return request;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void setUp() throws IOException\n{\r\n    super.setUpConfig();\r\n    interceptor = new TestableFederationClientInterceptor();\r\n    stateStore = new MemoryFederationStateStore();\r\n    stateStore.init(this.getConf());\r\n    FederationStateStoreFacade.getInstance().reinitialize(stateStore, getConf());\r\n    stateStoreUtil = new FederationStateStoreTestUtil(stateStore);\r\n    interceptor.setConf(this.getConf());\r\n    interceptor.init(user);\r\n    good = SubClusterId.newInstance(\"0\");\r\n    bad1 = SubClusterId.newInstance(\"1\");\r\n    bad2 = SubClusterId.newInstance(\"2\");\r\n    scs.add(good);\r\n    scs.add(bad1);\r\n    scs.add(bad2);\r\n    interceptor.registerBadSubCluster(bad1);\r\n    interceptor.registerBadSubCluster(bad2);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDown()\n{\r\n    interceptor.shutdown();\r\n    super.tearDown();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "setupCluster",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setupCluster(List<SubClusterId> scsToRegister) throws YarnException\n{\r\n    try {\r\n        stateStoreUtil.deregisterAllSubClusters();\r\n        for (SubClusterId sc : scsToRegister) {\r\n            stateStoreUtil.registerSubCluster(sc);\r\n        }\r\n    } catch (YarnException e) {\r\n        LOG.error(e.getMessage());\r\n        Assert.fail();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "createConfiguration",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "YarnConfiguration createConfiguration()\n{\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.FEDERATION_ENABLED, true);\r\n    String mockPassThroughInterceptorClass = PassThroughClientRequestInterceptor.class.getName();\r\n    conf.set(YarnConfiguration.ROUTER_CLIENTRM_INTERCEPTOR_CLASS_PIPELINE, mockPassThroughInterceptorClass + \",\" + mockPassThroughInterceptorClass + \",\" + TestableFederationClientInterceptor.class.getName());\r\n    conf.set(YarnConfiguration.FEDERATION_POLICY_MANAGER, UniformBroadcastPolicyManager.class.getName());\r\n    conf.setInt(YarnConfiguration.FEDERATION_CACHE_TIME_TO_LIVE_SECS, 0);\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "testGetNewApplicationOneBadSC",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testGetNewApplicationOneBadSC() throws YarnException, IOException, InterruptedException\n{\r\n    System.out.println(\"Test getNewApplication with one bad SubCluster\");\r\n    setupCluster(Arrays.asList(bad2));\r\n    try {\r\n        interceptor.getNewApplication(GetNewApplicationRequest.newInstance());\r\n        Assert.fail();\r\n    } catch (Exception e) {\r\n        System.out.println(e.toString());\r\n        Assert.assertTrue(e.getMessage().equals(FederationPolicyUtils.NO_ACTIVE_SUBCLUSTER_AVAILABLE));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "testGetNewApplicationTwoBadSCs",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testGetNewApplicationTwoBadSCs() throws YarnException, IOException, InterruptedException\n{\r\n    System.out.println(\"Test getNewApplication with two bad SubClusters\");\r\n    setupCluster(Arrays.asList(bad1, bad2));\r\n    try {\r\n        interceptor.getNewApplication(GetNewApplicationRequest.newInstance());\r\n        Assert.fail();\r\n    } catch (Exception e) {\r\n        System.out.println(e.toString());\r\n        Assert.assertTrue(e.getMessage().equals(FederationPolicyUtils.NO_ACTIVE_SUBCLUSTER_AVAILABLE));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "testGetNewApplicationOneBadOneGood",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testGetNewApplicationOneBadOneGood() throws YarnException, IOException, InterruptedException\n{\r\n    System.out.println(\"Test getNewApplication with one bad, one good SC\");\r\n    setupCluster(Arrays.asList(good, bad2));\r\n    GetNewApplicationResponse response = null;\r\n    try {\r\n        response = interceptor.getNewApplication(GetNewApplicationRequest.newInstance());\r\n    } catch (Exception e) {\r\n        Assert.fail();\r\n    }\r\n    Assert.assertEquals(ResourceManager.getClusterTimeStamp(), response.getApplicationId().getClusterTimestamp());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "testSubmitApplicationOneBadSC",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testSubmitApplicationOneBadSC() throws YarnException, IOException, InterruptedException\n{\r\n    System.out.println(\"Test submitApplication with one bad SubCluster\");\r\n    setupCluster(Arrays.asList(bad2));\r\n    final ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    final SubmitApplicationRequest request = mockSubmitApplicationRequest(appId);\r\n    try {\r\n        interceptor.submitApplication(request);\r\n        Assert.fail();\r\n    } catch (Exception e) {\r\n        System.out.println(e);\r\n        Assert.assertTrue(e.getMessage().equals(FederationPolicyUtils.NO_ACTIVE_SUBCLUSTER_AVAILABLE));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "mockSubmitApplicationRequest",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "SubmitApplicationRequest mockSubmitApplicationRequest(ApplicationId appId)\n{\r\n    ContainerLaunchContext amContainerSpec = mock(ContainerLaunchContext.class);\r\n    ApplicationSubmissionContext context = ApplicationSubmissionContext.newInstance(appId, MockApps.newAppName(), \"q1\", Priority.newInstance(0), amContainerSpec, false, false, -1, Resources.createResource(YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB), \"MockApp\");\r\n    SubmitApplicationRequest request = SubmitApplicationRequest.newInstance(context);\r\n    return request;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "testSubmitApplicationTwoBadSCs",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testSubmitApplicationTwoBadSCs() throws YarnException, IOException, InterruptedException\n{\r\n    System.out.println(\"Test submitApplication with two bad SubClusters\");\r\n    setupCluster(Arrays.asList(bad1, bad2));\r\n    final ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    final SubmitApplicationRequest request = mockSubmitApplicationRequest(appId);\r\n    try {\r\n        interceptor.submitApplication(request);\r\n        Assert.fail();\r\n    } catch (Exception e) {\r\n        System.out.println(e.toString());\r\n        Assert.assertTrue(e.getMessage().equals(FederationPolicyUtils.NO_ACTIVE_SUBCLUSTER_AVAILABLE));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "testSubmitApplicationOneBadOneGood",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testSubmitApplicationOneBadOneGood() throws YarnException, IOException, InterruptedException\n{\r\n    System.out.println(\"Test submitApplication with one bad, one good SC\");\r\n    setupCluster(Arrays.asList(good, bad2));\r\n    final ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    final SubmitApplicationRequest request = mockSubmitApplicationRequest(appId);\r\n    try {\r\n        interceptor.submitApplication(request);\r\n    } catch (Exception e) {\r\n        Assert.fail();\r\n    }\r\n    Assert.assertEquals(good, stateStore.getApplicationHomeSubCluster(GetApplicationHomeSubClusterRequest.newInstance(appId)).getApplicationHomeSubCluster().getHomeSubCluster());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testRouterWebServicesE2E",
  "errType" : null,
  "containingMethodsNum" : 86,
  "sourceCodeText" : "void testRouterWebServicesE2E() throws Exception\n{\r\n    ClusterInfo clusterInfo = get(user);\r\n    Assert.assertNotNull(clusterInfo);\r\n    ClusterInfo clusterInfo2 = getClusterInfo(user);\r\n    Assert.assertNotNull(clusterInfo2);\r\n    ClusterMetricsInfo clusterMetricsInfo = getClusterMetricsInfo(user);\r\n    Assert.assertNotNull(clusterMetricsInfo);\r\n    SchedulerTypeInfo schedulerTypeInfo = getSchedulerInfo(user);\r\n    Assert.assertNotNull(schedulerTypeInfo);\r\n    String dumpResult = dumpSchedulerLogs(user);\r\n    Assert.assertNotNull(dumpResult);\r\n    NodesInfo nodesInfo = getNodes(user);\r\n    Assert.assertNotNull(nodesInfo);\r\n    NodeInfo nodeInfo = getNode(user);\r\n    Assert.assertNotNull(nodeInfo);\r\n    AppsInfo appsInfo = getApps(user);\r\n    Assert.assertNotNull(appsInfo);\r\n    ActivitiesInfo activitiesInfo = getActivities(user);\r\n    Assert.assertNotNull(activitiesInfo);\r\n    AppActivitiesInfo appActiviesInfo = getAppActivities(user);\r\n    Assert.assertNotNull(appActiviesInfo);\r\n    ApplicationStatisticsInfo applicationStatisticsInfo = getAppStatistics(user);\r\n    Assert.assertNotNull(applicationStatisticsInfo);\r\n    AppInfo appInfo = getApp(user);\r\n    Assert.assertNotNull(appInfo);\r\n    AppState appState = getAppState(user);\r\n    Assert.assertNotNull(appState);\r\n    Response response = updateAppState(user);\r\n    Assert.assertNotNull(response);\r\n    NodeToLabelsInfo nodeToLabelsInfo = getNodeToLabels(user);\r\n    Assert.assertNotNull(nodeToLabelsInfo);\r\n    LabelsToNodesInfo labelsToNodesInfo = getLabelsToNodes(user);\r\n    Assert.assertNotNull(labelsToNodesInfo);\r\n    Response response2 = replaceLabelsOnNodes(user);\r\n    Assert.assertNotNull(response2);\r\n    Response response3 = replaceLabelsOnNode(user);\r\n    Assert.assertNotNull(response3);\r\n    NodeLabelsInfo nodeLabelsInfo = getClusterNodeLabels(user);\r\n    Assert.assertNotNull(nodeLabelsInfo);\r\n    Response response4 = addToClusterNodeLabels(user);\r\n    Assert.assertNotNull(response4);\r\n    Response response5 = removeFromClusterNodeLabels(user);\r\n    Assert.assertNotNull(response5);\r\n    NodeLabelsInfo nodeLabelsInfo2 = getLabelsOnNode(user);\r\n    Assert.assertNotNull(nodeLabelsInfo2);\r\n    AppPriority appPriority = getAppPriority(user);\r\n    Assert.assertNotNull(appPriority);\r\n    Response response6 = updateApplicationPriority(user);\r\n    Assert.assertNotNull(response6);\r\n    AppQueue appQueue = getAppQueue(user);\r\n    Assert.assertNotNull(appQueue);\r\n    Response response7 = updateAppQueue(user);\r\n    Assert.assertNotNull(response7);\r\n    Response response8 = createNewApplication(user);\r\n    Assert.assertNotNull(response8);\r\n    Response response9 = submitApplication(user);\r\n    Assert.assertNotNull(response9);\r\n    Response response10 = postDelegationToken(user);\r\n    Assert.assertNotNull(response10);\r\n    Response response11 = postDelegationTokenExpiration(user);\r\n    Assert.assertNotNull(response11);\r\n    Response response12 = cancelDelegationToken(user);\r\n    Assert.assertNotNull(response12);\r\n    Response response13 = createNewReservation(user);\r\n    Assert.assertNotNull(response13);\r\n    Response response14 = submitReservation(user);\r\n    Assert.assertNotNull(response14);\r\n    Response response15 = updateReservation(user);\r\n    Assert.assertNotNull(response15);\r\n    Response response16 = deleteReservation(user);\r\n    Assert.assertNotNull(response16);\r\n    Response response17 = listReservation(user);\r\n    Assert.assertNotNull(response17);\r\n    AppTimeoutInfo appTimeoutInfo = getAppTimeout(user);\r\n    Assert.assertNotNull(appTimeoutInfo);\r\n    AppTimeoutsInfo appTimeoutsInfo = getAppTimeouts(user);\r\n    Assert.assertNotNull(appTimeoutsInfo);\r\n    Response response18 = updateApplicationTimeout(user);\r\n    Assert.assertNotNull(response18);\r\n    AppAttemptsInfo appAttemptsInfo = getAppAttempts(user);\r\n    Assert.assertNotNull(appAttemptsInfo);\r\n    AppAttemptInfo appAttemptInfo = getAppAttempt(user);\r\n    Assert.assertNotNull(appAttemptInfo);\r\n    ContainersInfo containersInfo = getContainers(user);\r\n    Assert.assertNotNull(containersInfo);\r\n    ContainerInfo containerInfo = getContainer(user);\r\n    Assert.assertNotNull(containerInfo);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testRequestInterceptorChainCreation",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testRequestInterceptorChainCreation() throws Exception\n{\r\n    RESTRequestInterceptor root = super.getRouterWebServices().createRequestInterceptorChain();\r\n    int index = 0;\r\n    while (root != null) {\r\n        switch(index) {\r\n            case 0:\r\n            case 1:\r\n            case 2:\r\n                Assert.assertEquals(PassThroughRESTRequestInterceptor.class.getName(), root.getClass().getName());\r\n                break;\r\n            case 3:\r\n                Assert.assertEquals(MockRESTRequestInterceptor.class.getName(), root.getClass().getName());\r\n                break;\r\n            default:\r\n                Assert.fail();\r\n        }\r\n        root = root.getNextInterceptor();\r\n        index++;\r\n    }\r\n    Assert.assertEquals(\"The number of interceptors in chain does not match\", 4, index);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testUsersChainMapWithLRUCache",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testUsersChainMapWithLRUCache() throws YarnException, IOException, InterruptedException\n{\r\n    getInterceptorChain(\"test1\");\r\n    getInterceptorChain(\"test2\");\r\n    getInterceptorChain(\"test3\");\r\n    getInterceptorChain(\"test4\");\r\n    getInterceptorChain(\"test5\");\r\n    getInterceptorChain(\"test6\");\r\n    getInterceptorChain(\"test7\");\r\n    getInterceptorChain(\"test8\");\r\n    Map<String, RequestInterceptorChainWrapper> pipelines = getRouterWebServices().getPipelines();\r\n    Assert.assertEquals(8, pipelines.size());\r\n    getInterceptorChain(\"test9\");\r\n    getInterceptorChain(\"test10\");\r\n    getInterceptorChain(\"test1\");\r\n    getInterceptorChain(\"test11\");\r\n    Assert.assertEquals(10, pipelines.size());\r\n    RequestInterceptorChainWrapper chain = pipelines.get(\"test1\");\r\n    Assert.assertNotNull(\"test1 should not be evicted\", chain);\r\n    chain = pipelines.get(\"test2\");\r\n    Assert.assertNull(\"test2 should have been evicted\", chain);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testWebPipelineConcurrent",
  "errType" : [ "IOException|InterruptedException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testWebPipelineConcurrent() throws InterruptedException\n{\r\n    final String user = \"test1\";\r\n    class ClientTestThread extends Thread {\r\n\r\n        private RESTRequestInterceptor interceptor;\r\n\r\n        @Override\r\n        public void run() {\r\n            try {\r\n                interceptor = pipeline();\r\n            } catch (IOException | InterruptedException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n\r\n        private RESTRequestInterceptor pipeline() throws IOException, InterruptedException {\r\n            return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<RESTRequestInterceptor>() {\r\n\r\n                @Override\r\n                public RESTRequestInterceptor run() throws Exception {\r\n                    RequestInterceptorChainWrapper wrapper = getInterceptorChain(user);\r\n                    RESTRequestInterceptor interceptor = wrapper.getRootInterceptor();\r\n                    Assert.assertNotNull(interceptor);\r\n                    LOG.info(\"init web interceptor success for user\" + user);\r\n                    return interceptor;\r\n                }\r\n            });\r\n        }\r\n    }\r\n    ClientTestThread client1 = new ClientTestThread();\r\n    ClientTestThread client2 = new ClientTestThread();\r\n    client1.start();\r\n    client2.start();\r\n    client1.join();\r\n    client2.join();\r\n    Assert.assertNotNull(client1.interceptor);\r\n    Assert.assertNotNull(client2.interceptor);\r\n    Assert.assertTrue(client1.interceptor == client2.interceptor);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "stop",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void stop() throws InterruptedException\n{\r\n    if (process != null) {\r\n        process.destroy();\r\n        process.waitFor();\r\n        process.exitValue();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void init()\n{\r\n    LOG.info(\"Test: aggregate metrics are initialized correctly\");\r\n    Assert.assertEquals(0, metrics.getNumSucceededAppsCreated());\r\n    Assert.assertEquals(0, metrics.getNumSucceededAppsSubmitted());\r\n    Assert.assertEquals(0, metrics.getNumSucceededAppsKilled());\r\n    Assert.assertEquals(0, metrics.getNumSucceededAppsRetrieved());\r\n    Assert.assertEquals(0, metrics.getNumSucceededAppAttemptsRetrieved());\r\n    Assert.assertEquals(0, metrics.getAppsFailedCreated());\r\n    Assert.assertEquals(0, metrics.getAppsFailedSubmitted());\r\n    Assert.assertEquals(0, metrics.getAppsFailedKilled());\r\n    Assert.assertEquals(0, metrics.getAppsFailedRetrieved());\r\n    Assert.assertEquals(0, metrics.getAppAttemptsFailedRetrieved());\r\n    LOG.info(\"Test: aggregate metrics are updated correctly\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router",
  "methodName" : "testSucceededAppsCreated",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testSucceededAppsCreated()\n{\r\n    long totalGoodBefore = metrics.getNumSucceededAppsCreated();\r\n    goodSubCluster.getNewApplication(100);\r\n    Assert.assertEquals(totalGoodBefore + 1, metrics.getNumSucceededAppsCreated());\r\n    Assert.assertEquals(100, metrics.getLatencySucceededAppsCreated(), 0);\r\n    goodSubCluster.getNewApplication(200);\r\n    Assert.assertEquals(totalGoodBefore + 2, metrics.getNumSucceededAppsCreated());\r\n    Assert.assertEquals(150, metrics.getLatencySucceededAppsCreated(), 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router",
  "methodName" : "testAppsFailedCreated",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testAppsFailedCreated()\n{\r\n    long totalBadbefore = metrics.getAppsFailedCreated();\r\n    badSubCluster.getNewApplication();\r\n    Assert.assertEquals(totalBadbefore + 1, metrics.getAppsFailedCreated());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router",
  "methodName" : "testSucceededAppsSubmitted",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testSucceededAppsSubmitted()\n{\r\n    long totalGoodBefore = metrics.getNumSucceededAppsSubmitted();\r\n    goodSubCluster.submitApplication(100);\r\n    Assert.assertEquals(totalGoodBefore + 1, metrics.getNumSucceededAppsSubmitted());\r\n    Assert.assertEquals(100, metrics.getLatencySucceededAppsSubmitted(), 0);\r\n    goodSubCluster.submitApplication(200);\r\n    Assert.assertEquals(totalGoodBefore + 2, metrics.getNumSucceededAppsSubmitted());\r\n    Assert.assertEquals(150, metrics.getLatencySucceededAppsSubmitted(), 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router",
  "methodName" : "testAppsFailedSubmitted",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testAppsFailedSubmitted()\n{\r\n    long totalBadbefore = metrics.getAppsFailedSubmitted();\r\n    badSubCluster.submitApplication();\r\n    Assert.assertEquals(totalBadbefore + 1, metrics.getAppsFailedSubmitted());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router",
  "methodName" : "testSucceededAppsKilled",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testSucceededAppsKilled()\n{\r\n    long totalGoodBefore = metrics.getNumSucceededAppsKilled();\r\n    goodSubCluster.forceKillApplication(100);\r\n    Assert.assertEquals(totalGoodBefore + 1, metrics.getNumSucceededAppsKilled());\r\n    Assert.assertEquals(100, metrics.getLatencySucceededAppsKilled(), 0);\r\n    goodSubCluster.forceKillApplication(200);\r\n    Assert.assertEquals(totalGoodBefore + 2, metrics.getNumSucceededAppsKilled());\r\n    Assert.assertEquals(150, metrics.getLatencySucceededAppsKilled(), 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router",
  "methodName" : "testAppsFailedKilled",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testAppsFailedKilled()\n{\r\n    long totalBadbefore = metrics.getAppsFailedKilled();\r\n    badSubCluster.forceKillApplication();\r\n    Assert.assertEquals(totalBadbefore + 1, metrics.getAppsFailedKilled());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router",
  "methodName" : "testSucceededAppsReport",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testSucceededAppsReport()\n{\r\n    long totalGoodBefore = metrics.getNumSucceededAppsRetrieved();\r\n    goodSubCluster.getApplicationReport(100);\r\n    Assert.assertEquals(totalGoodBefore + 1, metrics.getNumSucceededAppsRetrieved());\r\n    Assert.assertEquals(100, metrics.getLatencySucceededGetAppReport(), 0);\r\n    goodSubCluster.getApplicationReport(200);\r\n    Assert.assertEquals(totalGoodBefore + 2, metrics.getNumSucceededAppsRetrieved());\r\n    Assert.assertEquals(150, metrics.getLatencySucceededGetAppReport(), 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router",
  "methodName" : "testAppsReportFailed",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testAppsReportFailed()\n{\r\n    long totalBadbefore = metrics.getAppsFailedRetrieved();\r\n    badSubCluster.getApplicationReport();\r\n    Assert.assertEquals(totalBadbefore + 1, metrics.getAppsFailedRetrieved());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router",
  "methodName" : "testSucceededAppAttemptReport",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testSucceededAppAttemptReport()\n{\r\n    long totalGoodBefore = metrics.getNumSucceededAppAttemptsRetrieved();\r\n    goodSubCluster.getApplicationAttemptReport(100);\r\n    Assert.assertEquals(totalGoodBefore + 1, metrics.getNumSucceededAppAttemptsRetrieved());\r\n    Assert.assertEquals(100, metrics.getLatencySucceededGetAppAttemptReport(), 0);\r\n    goodSubCluster.getApplicationAttemptReport(200);\r\n    Assert.assertEquals(totalGoodBefore + 2, metrics.getNumSucceededAppAttemptsRetrieved());\r\n    Assert.assertEquals(150, metrics.getLatencySucceededGetAppAttemptReport(), 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router",
  "methodName" : "testAppAttemptReportFailed",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testAppAttemptReportFailed()\n{\r\n    long totalBadbefore = metrics.getAppAttemptsFailedRetrieved();\r\n    badSubCluster.getApplicationAttemptReport();\r\n    Assert.assertEquals(totalBadbefore + 1, metrics.getAppAttemptsFailedRetrieved());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router",
  "methodName" : "testSucceededMultipleAppsReport",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testSucceededMultipleAppsReport()\n{\r\n    long totalGoodBefore = metrics.getNumSucceededMultipleAppsRetrieved();\r\n    goodSubCluster.getApplicationsReport(100);\r\n    Assert.assertEquals(totalGoodBefore + 1, metrics.getNumSucceededMultipleAppsRetrieved());\r\n    Assert.assertEquals(100, metrics.getLatencySucceededMultipleGetAppReport(), 0);\r\n    goodSubCluster.getApplicationsReport(200);\r\n    Assert.assertEquals(totalGoodBefore + 2, metrics.getNumSucceededMultipleAppsRetrieved());\r\n    Assert.assertEquals(150, metrics.getLatencySucceededMultipleGetAppReport(), 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router",
  "methodName" : "testMulipleAppsReportFailed",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testMulipleAppsReportFailed()\n{\r\n    long totalBadbefore = metrics.getMultipleAppsFailedRetrieved();\r\n    badSubCluster.getApplicationsReport();\r\n    Assert.assertEquals(totalBadbefore + 1, metrics.getMultipleAppsFailedRetrieved());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router",
  "methodName" : "testSucceededGetClusterMetrics",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testSucceededGetClusterMetrics()\n{\r\n    long totalGoodBefore = metrics.getNumSucceededGetClusterMetricsRetrieved();\r\n    goodSubCluster.getClusterMetrics(100);\r\n    Assert.assertEquals(totalGoodBefore + 1, metrics.getNumSucceededGetClusterMetricsRetrieved());\r\n    Assert.assertEquals(100, metrics.getLatencySucceededGetClusterMetricsRetrieved(), 0);\r\n    goodSubCluster.getClusterMetrics(200);\r\n    Assert.assertEquals(totalGoodBefore + 2, metrics.getNumSucceededGetClusterMetricsRetrieved());\r\n    Assert.assertEquals(150, metrics.getLatencySucceededGetClusterMetricsRetrieved(), 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router",
  "methodName" : "testGetClusterMetricsFailed",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testGetClusterMetricsFailed()\n{\r\n    long totalBadbefore = metrics.getClusterMetricsFailedRetrieved();\r\n    badSubCluster.getClusterMetrics();\r\n    Assert.assertEquals(totalBadbefore + 1, metrics.getClusterMetricsFailedRetrieved());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void init(String user)\n{\r\n    MockRM mockRM = new MockRM(super.getConf()) {\r\n\r\n        @Override\r\n        protected AdminService createAdminService() {\r\n            return new AdminService(this) {\r\n\r\n                @Override\r\n                protected void startServer() {\r\n                }\r\n\r\n                @Override\r\n                public RefreshServiceAclsResponse refreshServiceAcls(RefreshServiceAclsRequest request) throws YarnException, IOException {\r\n                    return RefreshServiceAclsResponse.newInstance();\r\n                }\r\n\r\n                @Override\r\n                protected void stopServer() {\r\n                }\r\n            };\r\n        }\r\n    };\r\n    mockRM.init(super.getConf());\r\n    mockRM.start();\r\n    super.setRMAdmin(mockRM.getAdminService());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "waitWebAppRunning",
  "errType" : [ "Exception", "ClientHandlerException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void waitWebAppRunning(final String address, final String path)\n{\r\n    try {\r\n        final Client clientToRouter = Client.create();\r\n        final WebResource toRouter = clientToRouter.resource(address).path(path);\r\n        GenericTestUtils.waitFor(new Supplier<Boolean>() {\r\n\r\n            @Override\r\n            public Boolean get() {\r\n                try {\r\n                    ClientResponse response = toRouter.accept(APPLICATION_JSON).get(ClientResponse.class);\r\n                    if (response.getStatus() == SC_OK) {\r\n                        return true;\r\n                    }\r\n                } catch (ClientHandlerException e) {\r\n                }\r\n                return false;\r\n            }\r\n        }, 1000, 10 * 1000);\r\n    } catch (Exception e) {\r\n        fail(\"Web app not running\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    conf = new YarnConfiguration();\r\n    File baseDir = GenericTestUtils.getTestDir(\"processes\");\r\n    baseDir.mkdirs();\r\n    String baseName = TestRouterWebServicesREST.class.getSimpleName();\r\n    File rmOutput = new File(baseDir, baseName + \"-rm.log\");\r\n    rmOutput.createNewFile();\r\n    List<String> addClasspath = new LinkedList<>();\r\n    addClasspath.add(\"../hadoop-yarn-server-timelineservice/target/classes\");\r\n    rm = new JavaProcess(ResourceManager.class, addClasspath, rmOutput);\r\n    rmAddress = getRMWebAppURLWithScheme(conf);\r\n    waitWebAppRunning(rmAddress, RM_WEB_SERVICE_PATH);\r\n    File routerOutput = new File(baseDir, baseName + \"-router.log\");\r\n    routerOutput.createNewFile();\r\n    router = new JavaProcess(Router.class, routerOutput);\r\n    routerAddress = getRouterWebAppURLWithScheme(conf);\r\n    waitWebAppRunning(routerAddress, RM_WEB_SERVICE_PATH);\r\n    File nmOutput = new File(baseDir, baseName + \"-nm.log\");\r\n    nmOutput.createNewFile();\r\n    nm = new JavaProcess(NodeManager.class, nmOutput);\r\n    nmAddress = \"http://\" + getNMWebAppURLWithoutScheme(conf);\r\n    waitWebAppRunning(nmAddress, \"/ws/v1/node\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "stop",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void stop() throws Exception\n{\r\n    if (nm != null) {\r\n        nm.stop();\r\n    }\r\n    if (router != null) {\r\n        router.stop();\r\n    }\r\n    if (rm != null) {\r\n        rm.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "performGetCalls",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "List<T> performGetCalls(final String path, final Class<T> returnType, final String queryName, final String queryValue) throws IOException, InterruptedException\n{\r\n    Client clientToRouter = Client.create();\r\n    WebResource toRouter = clientToRouter.resource(routerAddress).path(path);\r\n    Client clientToRM = Client.create();\r\n    WebResource toRM = clientToRM.resource(rmAddress).path(path);\r\n    final Builder toRouterBuilder;\r\n    final Builder toRMBuilder;\r\n    if (queryValue != null && queryName != null) {\r\n        toRouterBuilder = toRouter.queryParam(queryName, queryValue).accept(APPLICATION_XML);\r\n        toRMBuilder = toRM.queryParam(queryName, queryValue).accept(APPLICATION_XML);\r\n    } else {\r\n        toRouterBuilder = toRouter.accept(APPLICATION_XML);\r\n        toRMBuilder = toRM.accept(APPLICATION_XML);\r\n    }\r\n    return UserGroupInformation.createRemoteUser(userName).doAs(new PrivilegedExceptionAction<List<T>>() {\r\n\r\n        @Override\r\n        public List<T> run() throws Exception {\r\n            ClientResponse response = toRouterBuilder.get(ClientResponse.class);\r\n            ClientResponse response2 = toRMBuilder.get(ClientResponse.class);\r\n            assertEquals(SC_OK, response.getStatus());\r\n            assertEquals(SC_OK, response2.getStatus());\r\n            List<T> responses = new ArrayList<>();\r\n            responses.add(response.getEntity(returnType));\r\n            responses.add(response2.getEntity(returnType));\r\n            return responses;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "performCall",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ClientResponse performCall(final String webAddress, final String queryKey, final String queryValue, final Object context, final HTTPMethods method) throws IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(userName).doAs(new PrivilegedExceptionAction<ClientResponse>() {\r\n\r\n        @Override\r\n        public ClientResponse run() throws Exception {\r\n            Client clientToRouter = Client.create();\r\n            WebResource toRouter = clientToRouter.resource(routerAddress).path(webAddress);\r\n            WebResource toRouterWR = toRouter;\r\n            if (queryKey != null && queryValue != null) {\r\n                toRouterWR = toRouterWR.queryParam(queryKey, queryValue);\r\n            }\r\n            Builder builder = null;\r\n            if (context != null) {\r\n                builder = toRouterWR.entity(context, APPLICATION_JSON);\r\n                builder = builder.accept(APPLICATION_JSON);\r\n            } else {\r\n                builder = toRouter.accept(APPLICATION_JSON);\r\n            }\r\n            ClientResponse response = null;\r\n            switch(method) {\r\n                case DELETE:\r\n                    response = builder.delete(ClientResponse.class);\r\n                    break;\r\n                case POST:\r\n                    response = builder.post(ClientResponse.class);\r\n                    break;\r\n                case PUT:\r\n                    response = builder.put(ClientResponse.class);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testInfoXML",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testInfoXML() throws Exception\n{\r\n    List<ClusterInfo> responses = performGetCalls(RM_WEB_SERVICE_PATH, ClusterInfo.class, null, null);\r\n    ClusterInfo routerResponse = responses.get(0);\r\n    ClusterInfo rmResponse = responses.get(1);\r\n    assertNotNull(routerResponse);\r\n    assertNotNull(rmResponse);\r\n    assertEquals(rmResponse.getRMVersion(), routerResponse.getRMVersion());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testClusterInfoXML",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testClusterInfoXML() throws Exception\n{\r\n    List<ClusterInfo> responses = performGetCalls(RM_WEB_SERVICE_PATH + INFO, ClusterInfo.class, null, null);\r\n    ClusterInfo routerResponse = responses.get(0);\r\n    ClusterInfo rmResponse = responses.get(1);\r\n    assertNotNull(routerResponse);\r\n    assertNotNull(rmResponse);\r\n    assertEquals(rmResponse.getRMVersion(), routerResponse.getRMVersion());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testMetricsInfoXML",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testMetricsInfoXML() throws Exception\n{\r\n    List<ClusterMetricsInfo> responses = performGetCalls(RM_WEB_SERVICE_PATH + METRICS, ClusterMetricsInfo.class, null, null);\r\n    ClusterMetricsInfo routerResponse = responses.get(0);\r\n    ClusterMetricsInfo rmResponse = responses.get(1);\r\n    assertNotNull(routerResponse);\r\n    assertNotNull(rmResponse);\r\n    assertEquals(rmResponse.getActiveNodes(), routerResponse.getActiveNodes());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testSchedulerInfoXML",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testSchedulerInfoXML() throws Exception\n{\r\n    List<SchedulerTypeInfo> responses = performGetCalls(RM_WEB_SERVICE_PATH + SCHEDULER, SchedulerTypeInfo.class, null, null);\r\n    SchedulerTypeInfo routerResponse = responses.get(0);\r\n    SchedulerTypeInfo rmResponse = responses.get(1);\r\n    assertNotNull(routerResponse);\r\n    assertNotNull(rmResponse);\r\n    assertEquals(rmResponse.getSchedulerInfo().getSchedulerType(), routerResponse.getSchedulerInfo().getSchedulerType());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testNodesEmptyXML",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testNodesEmptyXML() throws Exception\n{\r\n    List<NodesInfo> responses = performGetCalls(RM_WEB_SERVICE_PATH + NODES, NodesInfo.class, null, null);\r\n    NodesInfo routerResponse = responses.get(0);\r\n    NodesInfo rmResponse = responses.get(1);\r\n    assertNotNull(routerResponse);\r\n    assertNotNull(rmResponse);\r\n    assertEquals(rmResponse.getNodes().size(), routerResponse.getNodes().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testNodesXML",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testNodesXML() throws Exception\n{\r\n    List<NodesInfo> responses = performGetCalls(RM_WEB_SERVICE_PATH + NODES, NodesInfo.class, STATES, \"LOST\");\r\n    NodesInfo routerResponse = responses.get(0);\r\n    NodesInfo rmResponse = responses.get(1);\r\n    assertNotNull(routerResponse);\r\n    assertNotNull(rmResponse);\r\n    assertEquals(rmResponse.getNodes().size(), routerResponse.getNodes().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testNodeXML",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testNodeXML() throws Exception\n{\r\n    List<NodeInfo> responses = performGetCalls(RM_WEB_SERVICE_PATH + format(NODES_NODEID, getNodeId()), NodeInfo.class, null, null);\r\n    NodeInfo routerResponse = responses.get(0);\r\n    NodeInfo rmResponse = responses.get(1);\r\n    assertNotNull(routerResponse);\r\n    assertNotNull(rmResponse);\r\n    assertEquals(rmResponse.getVersion(), routerResponse.getVersion());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testUpdateNodeResource",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testUpdateNodeResource() throws Exception\n{\r\n    GenericTestUtils.waitFor(() -> getNodeId() != null, 100, 5 * 1000);\r\n    String nodeId = getNodeId();\r\n    List<NodeInfo> responses0 = performGetCalls(RM_WEB_SERVICE_PATH + format(NODES_NODEID, getNodeId()), NodeInfo.class, null, null);\r\n    NodeInfo nodeInfo0 = responses0.get(0);\r\n    assertEquals(8192, nodeInfo0.getTotalResource().getMemorySize());\r\n    assertEquals(8, nodeInfo0.getTotalResource().getvCores());\r\n    Resource resource = Resource.newInstance(4096, 5);\r\n    ResourceOptionInfo resourceOption = new ResourceOptionInfo(ResourceOption.newInstance(resource, 1000));\r\n    ClientResponse routerResponse = performCall(RM_WEB_SERVICE_PATH + format(NODE_RESOURCE, nodeId), null, null, resourceOption, POST);\r\n    assertResponseStatusCode(Status.OK, routerResponse.getStatusInfo());\r\n    JSONObject json = routerResponse.getEntity(JSONObject.class);\r\n    JSONObject totalResource = json.getJSONObject(\"resourceInfo\");\r\n    assertEquals(resource.getMemorySize(), totalResource.getLong(\"memory\"));\r\n    assertEquals(resource.getVirtualCores(), totalResource.getLong(\"vCores\"));\r\n    List<NodeInfo> responses1 = performGetCalls(RM_WEB_SERVICE_PATH + format(NODES_NODEID, getNodeId()), NodeInfo.class, null, null);\r\n    NodeInfo nodeInfo1 = responses1.get(0);\r\n    assertEquals(4096, nodeInfo1.getTotalResource().getMemorySize());\r\n    assertEquals(5, nodeInfo1.getTotalResource().getvCores());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testActiviesXML",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testActiviesXML() throws Exception\n{\r\n    List<ActivitiesInfo> responses = performGetCalls(RM_WEB_SERVICE_PATH + SCHEDULER_ACTIVITIES, ActivitiesInfo.class, null, null);\r\n    ActivitiesInfo routerResponse = responses.get(0);\r\n    ActivitiesInfo rmResponse = responses.get(1);\r\n    assertNotNull(routerResponse);\r\n    assertNotNull(rmResponse);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testAppActivitiesXML",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testAppActivitiesXML() throws Exception\n{\r\n    String appId = submitApplication();\r\n    List<AppActivitiesInfo> responses = performGetCalls(RM_WEB_SERVICE_PATH + SCHEDULER_APP_ACTIVITIES, AppActivitiesInfo.class, APP_ID, appId);\r\n    AppActivitiesInfo routerResponse = responses.get(0);\r\n    AppActivitiesInfo rmResponse = responses.get(1);\r\n    assertNotNull(routerResponse);\r\n    assertNotNull(rmResponse);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testAppStatisticsXML",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testAppStatisticsXML() throws Exception\n{\r\n    submitApplication();\r\n    List<ApplicationStatisticsInfo> responses = performGetCalls(RM_WEB_SERVICE_PATH + APP_STATISTICS, ApplicationStatisticsInfo.class, STATES, \"RUNNING\");\r\n    ApplicationStatisticsInfo routerResponse = responses.get(0);\r\n    ApplicationStatisticsInfo rmResponse = responses.get(1);\r\n    assertNotNull(routerResponse);\r\n    assertNotNull(rmResponse);\r\n    assertEquals(rmResponse.getStatItems().size(), routerResponse.getStatItems().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testDumpSchedulerLogsXML",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testDumpSchedulerLogsXML() throws Exception\n{\r\n    ClientResponse badResponse = performCall(RM_WEB_SERVICE_PATH + SCHEDULER_LOGS, null, null, null, PUT);\r\n    assertEquals(SC_INTERNAL_SERVER_ERROR, badResponse.getStatus());\r\n    ClientResponse response = performCall(RM_WEB_SERVICE_PATH + SCHEDULER_LOGS, TIME, \"1\", null, POST);\r\n    assertEquals(SC_BAD_REQUEST, response.getStatus());\r\n    String ci = response.getEntity(String.class);\r\n    assertNotNull(ci);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testNewApplicationXML",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testNewApplicationXML() throws Exception\n{\r\n    ClientResponse badResponse = performCall(RM_WEB_SERVICE_PATH + APPS_NEW_APPLICATION, null, null, null, PUT);\r\n    assertEquals(SC_INTERNAL_SERVER_ERROR, badResponse.getStatus());\r\n    ClientResponse response = performCall(RM_WEB_SERVICE_PATH + APPS_NEW_APPLICATION, null, null, null, POST);\r\n    assertEquals(SC_OK, response.getStatus());\r\n    NewApplication ci = response.getEntity(NewApplication.class);\r\n    assertNotNull(ci);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testSubmitApplicationXML",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testSubmitApplicationXML() throws Exception\n{\r\n    ClientResponse badResponse = performCall(RM_WEB_SERVICE_PATH + APPS, null, null, null, PUT);\r\n    assertEquals(SC_INTERNAL_SERVER_ERROR, badResponse.getStatus());\r\n    ApplicationSubmissionContextInfo context = new ApplicationSubmissionContextInfo();\r\n    context.setApplicationId(getNewApplicationId().getApplicationId());\r\n    ClientResponse response = performCall(RM_WEB_SERVICE_PATH + APPS, null, null, context, POST);\r\n    assertEquals(SC_ACCEPTED, response.getStatus());\r\n    String ci = response.getEntity(String.class);\r\n    assertNotNull(ci);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testAppsXML",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testAppsXML() throws Exception\n{\r\n    submitApplication();\r\n    List<AppsInfo> responses = performGetCalls(RM_WEB_SERVICE_PATH + APPS, AppsInfo.class, null, null);\r\n    AppsInfo routerResponse = responses.get(0);\r\n    AppsInfo rmResponse = responses.get(1);\r\n    assertNotNull(routerResponse);\r\n    assertNotNull(rmResponse);\r\n    assertEquals(rmResponse.getApps().size(), routerResponse.getApps().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testAppXML",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testAppXML() throws Exception\n{\r\n    String appId = submitApplication();\r\n    List<AppInfo> responses = performGetCalls(RM_WEB_SERVICE_PATH + format(APPS_APPID, appId), AppInfo.class, null, null);\r\n    AppInfo routerResponse = responses.get(0);\r\n    AppInfo rmResponse = responses.get(1);\r\n    assertNotNull(routerResponse);\r\n    assertNotNull(rmResponse);\r\n    assertEquals(rmResponse.getAMHostHttpAddress(), routerResponse.getAMHostHttpAddress());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testAppAttemptXML",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testAppAttemptXML() throws Exception\n{\r\n    String appId = submitApplication();\r\n    List<AppAttemptsInfo> responses = performGetCalls(RM_WEB_SERVICE_PATH + format(APPS_APPID_APPATTEMPTS, appId), AppAttemptsInfo.class, null, null);\r\n    AppAttemptsInfo routerResponse = responses.get(0);\r\n    AppAttemptsInfo rmResponse = responses.get(1);\r\n    assertNotNull(routerResponse);\r\n    assertNotNull(rmResponse);\r\n    assertEquals(rmResponse.getAttempts().size(), routerResponse.getAttempts().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testAppStateXML",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testAppStateXML() throws Exception\n{\r\n    String appId = submitApplication();\r\n    List<AppState> responses = performGetCalls(RM_WEB_SERVICE_PATH + format(APPS_APPID_STATE, appId), AppState.class, null, null);\r\n    AppState routerResponse = responses.get(0);\r\n    AppState rmResponse = responses.get(1);\r\n    assertNotNull(routerResponse);\r\n    assertNotNull(rmResponse);\r\n    assertEquals(rmResponse.getState(), routerResponse.getState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testUpdateAppStateXML",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testUpdateAppStateXML() throws Exception\n{\r\n    String appId = submitApplication();\r\n    String pathApp = RM_WEB_SERVICE_PATH + format(APPS_APPID_STATE, appId);\r\n    ClientResponse badResponse = performCall(pathApp, null, null, null, POST);\r\n    assertEquals(SC_INTERNAL_SERVER_ERROR, badResponse.getStatus());\r\n    AppState appState = new AppState(\"KILLED\");\r\n    ClientResponse response = performCall(pathApp, null, null, appState, PUT);\r\n    assertEquals(SC_ACCEPTED, response.getStatus());\r\n    AppState ci = response.getEntity(AppState.class);\r\n    assertNotNull(ci);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testAppPriorityXML",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testAppPriorityXML() throws Exception\n{\r\n    String appId = submitApplication();\r\n    List<AppPriority> responses = performGetCalls(RM_WEB_SERVICE_PATH + format(APPS_APPID_PRIORITY, appId), AppPriority.class, null, null);\r\n    AppPriority routerResponse = responses.get(0);\r\n    AppPriority rmResponse = responses.get(1);\r\n    assertNotNull(routerResponse);\r\n    assertNotNull(rmResponse);\r\n    assertEquals(rmResponse.getPriority(), routerResponse.getPriority());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testUpdateAppPriorityXML",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testUpdateAppPriorityXML() throws Exception\n{\r\n    String appId = submitApplication();\r\n    ClientResponse badResponse = performCall(RM_WEB_SERVICE_PATH + format(APPS_APPID_PRIORITY, appId), null, null, null, POST);\r\n    assertEquals(SC_INTERNAL_SERVER_ERROR, badResponse.getStatus());\r\n    AppPriority appPriority = new AppPriority(1);\r\n    ClientResponse response = performCall(RM_WEB_SERVICE_PATH + format(APPS_APPID_PRIORITY, appId), null, null, appPriority, PUT);\r\n    assertEquals(SC_OK, response.getStatus());\r\n    AppPriority ci = response.getEntity(AppPriority.class);\r\n    assertNotNull(ci);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testAppQueueXML",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testAppQueueXML() throws Exception\n{\r\n    String appId = submitApplication();\r\n    List<AppQueue> responses = performGetCalls(RM_WEB_SERVICE_PATH + format(APPS_APPID_QUEUE, appId), AppQueue.class, null, null);\r\n    AppQueue routerResponse = responses.get(0);\r\n    AppQueue rmResponse = responses.get(1);\r\n    assertNotNull(routerResponse);\r\n    assertNotNull(rmResponse);\r\n    assertEquals(rmResponse.getQueue(), routerResponse.getQueue());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testUpdateAppQueueXML",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testUpdateAppQueueXML() throws Exception\n{\r\n    String appId = submitApplication();\r\n    ClientResponse badResponse = performCall(RM_WEB_SERVICE_PATH + format(APPS_APPID_QUEUE, appId), null, null, null, POST);\r\n    assertEquals(SC_INTERNAL_SERVER_ERROR, badResponse.getStatus());\r\n    AppQueue appQueue = new AppQueue(\"default\");\r\n    ClientResponse response = performCall(RM_WEB_SERVICE_PATH + format(APPS_APPID_QUEUE, appId), null, null, appQueue, PUT);\r\n    assertEquals(SC_OK, response.getStatus());\r\n    AppQueue ci = response.getEntity(AppQueue.class);\r\n    assertNotNull(ci);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testAppTimeoutsXML",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testAppTimeoutsXML() throws Exception\n{\r\n    String appId = submitApplication();\r\n    List<AppTimeoutsInfo> responses = performGetCalls(RM_WEB_SERVICE_PATH + format(APPS_TIMEOUTS, appId), AppTimeoutsInfo.class, null, null);\r\n    AppTimeoutsInfo routerResponse = responses.get(0);\r\n    AppTimeoutsInfo rmResponse = responses.get(1);\r\n    assertNotNull(routerResponse);\r\n    assertNotNull(rmResponse);\r\n    assertEquals(rmResponse.getAppTimeouts().size(), routerResponse.getAppTimeouts().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testAppTimeoutXML",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testAppTimeoutXML() throws Exception\n{\r\n    String appId = submitApplication();\r\n    String pathApp = RM_WEB_SERVICE_PATH + format(APPS_TIMEOUTS, appId);\r\n    List<AppTimeoutInfo> responses = performGetCalls(pathApp + \"/\" + \"LIFETIME\", AppTimeoutInfo.class, null, null);\r\n    AppTimeoutInfo routerResponse = responses.get(0);\r\n    AppTimeoutInfo rmResponse = responses.get(1);\r\n    assertNotNull(routerResponse);\r\n    assertNotNull(rmResponse);\r\n    assertEquals(rmResponse.getExpireTime(), routerResponse.getExpireTime());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testUpdateAppTimeoutsXML",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testUpdateAppTimeoutsXML() throws Exception\n{\r\n    String appId = submitApplication();\r\n    ClientResponse badResponse = performCall(RM_WEB_SERVICE_PATH + format(APPS_TIMEOUT, appId), null, null, null, POST);\r\n    assertEquals(SC_INTERNAL_SERVER_ERROR, badResponse.getStatus());\r\n    AppTimeoutInfo appTimeoutInfo = new AppTimeoutInfo();\r\n    ClientResponse response = performCall(RM_WEB_SERVICE_PATH + format(APPS_TIMEOUT, appId), null, null, appTimeoutInfo, PUT);\r\n    assertEquals(SC_BAD_REQUEST, response.getStatus());\r\n    String ci = response.getEntity(String.class);\r\n    assertNotNull(ci);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testNewReservationXML",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testNewReservationXML() throws Exception\n{\r\n    ClientResponse badResponse = performCall(RM_WEB_SERVICE_PATH + RESERVATION_NEW, null, null, null, PUT);\r\n    assertEquals(SC_INTERNAL_SERVER_ERROR, badResponse.getStatus());\r\n    ClientResponse response = performCall(RM_WEB_SERVICE_PATH + RESERVATION_NEW, null, null, null, POST);\r\n    assertEquals(SC_OK, response.getStatus());\r\n    NewReservation ci = response.getEntity(NewReservation.class);\r\n    assertNotNull(ci);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testSubmitReservationXML",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testSubmitReservationXML() throws Exception\n{\r\n    ClientResponse badResponse = performCall(RM_WEB_SERVICE_PATH + RESERVATION_SUBMIT, null, null, null, PUT);\r\n    assertEquals(SC_INTERNAL_SERVER_ERROR, badResponse.getStatus());\r\n    ReservationSubmissionRequestInfo context = new ReservationSubmissionRequestInfo();\r\n    context.setReservationId(getNewReservationId().getReservationId());\r\n    ClientResponse response = performCall(RM_WEB_SERVICE_PATH + RESERVATION_SUBMIT, null, null, context, POST);\r\n    assertEquals(SC_BAD_REQUEST, response.getStatus());\r\n    String ci = response.getEntity(String.class);\r\n    assertNotNull(ci);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testUpdateReservationXML",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testUpdateReservationXML() throws Exception\n{\r\n    ClientResponse badResponse = performCall(RM_WEB_SERVICE_PATH + RESERVATION_UPDATE, null, null, null, PUT);\r\n    assertEquals(SC_INTERNAL_SERVER_ERROR, badResponse.getStatus());\r\n    String reservationId = getNewReservationId().getReservationId();\r\n    ReservationUpdateRequestInfo context = new ReservationUpdateRequestInfo();\r\n    context.setReservationId(reservationId);\r\n    ClientResponse response = performCall(RM_WEB_SERVICE_PATH + RESERVATION_UPDATE, null, null, context, POST);\r\n    assertEquals(SC_BAD_REQUEST, response.getStatus());\r\n    String ci = response.getEntity(String.class);\r\n    assertNotNull(ci);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testDeleteReservationXML",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testDeleteReservationXML() throws Exception\n{\r\n    ClientResponse badResponse = performCall(RM_WEB_SERVICE_PATH + RESERVATION_DELETE, null, null, null, PUT);\r\n    assertEquals(SC_INTERNAL_SERVER_ERROR, badResponse.getStatus());\r\n    String reservationId = getNewReservationId().getReservationId();\r\n    ReservationDeleteRequestInfo context = new ReservationDeleteRequestInfo();\r\n    context.setReservationId(reservationId);\r\n    ClientResponse response = performCall(RM_WEB_SERVICE_PATH + RESERVATION_DELETE, null, null, context, POST);\r\n    assertEquals(SC_BAD_REQUEST, response.getStatus());\r\n    String ci = response.getEntity(String.class);\r\n    assertNotNull(ci);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testGetNodeToLabelsXML",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testGetNodeToLabelsXML() throws Exception\n{\r\n    List<NodeToLabelsInfo> responses = performGetCalls(RM_WEB_SERVICE_PATH + GET_NODE_TO_LABELS, NodeToLabelsInfo.class, null, null);\r\n    NodeToLabelsInfo routerResponse = responses.get(0);\r\n    NodeToLabelsInfo rmResponse = responses.get(1);\r\n    assertNotNull(routerResponse);\r\n    assertNotNull(rmResponse);\r\n    assertEquals(rmResponse.getNodeToLabels().size(), routerResponse.getNodeToLabels().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testGetClusterNodeLabelsXML",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testGetClusterNodeLabelsXML() throws Exception\n{\r\n    List<NodeLabelsInfo> responses = performGetCalls(RM_WEB_SERVICE_PATH + GET_NODE_LABELS, NodeLabelsInfo.class, null, null);\r\n    NodeLabelsInfo routerResponse = responses.get(0);\r\n    NodeLabelsInfo rmResponse = responses.get(1);\r\n    assertNotNull(routerResponse);\r\n    assertNotNull(rmResponse);\r\n    assertEquals(rmResponse.getNodeLabels().size(), routerResponse.getNodeLabels().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testGetLabelsOnNodeXML",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testGetLabelsOnNodeXML() throws Exception\n{\r\n    List<NodeLabelsInfo> responses = performGetCalls(RM_WEB_SERVICE_PATH + format(NODES_NODEID_GETLABELS, getNodeId()), NodeLabelsInfo.class, null, null);\r\n    NodeLabelsInfo routerResponse = responses.get(0);\r\n    NodeLabelsInfo rmResponse = responses.get(1);\r\n    assertNotNull(routerResponse);\r\n    assertNotNull(rmResponse);\r\n    assertEquals(rmResponse.getNodeLabels().size(), routerResponse.getNodeLabels().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testGetLabelsMappingEmptyXML",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testGetLabelsMappingEmptyXML() throws Exception\n{\r\n    List<LabelsToNodesInfo> responses = performGetCalls(RM_WEB_SERVICE_PATH + LABEL_MAPPINGS, LabelsToNodesInfo.class, null, null);\r\n    LabelsToNodesInfo routerResponse = responses.get(0);\r\n    LabelsToNodesInfo rmResponse = responses.get(1);\r\n    assertNotNull(routerResponse);\r\n    assertNotNull(rmResponse);\r\n    assertEquals(rmResponse.getLabelsToNodes().size(), routerResponse.getLabelsToNodes().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testGetLabelsMappingXML",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testGetLabelsMappingXML() throws Exception\n{\r\n    List<LabelsToNodesInfo> responses = performGetCalls(RM_WEB_SERVICE_PATH + LABEL_MAPPINGS, LabelsToNodesInfo.class, LABELS, \"label1\");\r\n    LabelsToNodesInfo routerResponse = responses.get(0);\r\n    LabelsToNodesInfo rmResponse = responses.get(1);\r\n    assertNotNull(routerResponse);\r\n    assertNotNull(rmResponse);\r\n    assertEquals(rmResponse.getLabelsToNodes().size(), routerResponse.getLabelsToNodes().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testAddToClusterNodeLabelsXML",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testAddToClusterNodeLabelsXML() throws Exception\n{\r\n    ClientResponse badResponse = performCall(RM_WEB_SERVICE_PATH + ADD_NODE_LABELS, null, null, null, PUT);\r\n    assertEquals(SC_INTERNAL_SERVER_ERROR, badResponse.getStatus());\r\n    List<NodeLabel> nodeLabels = new ArrayList<>();\r\n    nodeLabels.add(NodeLabel.newInstance(\"default\"));\r\n    NodeLabelsInfo context = new NodeLabelsInfo(nodeLabels);\r\n    ClientResponse response = performCall(RM_WEB_SERVICE_PATH + ADD_NODE_LABELS, null, null, context, POST);\r\n    assertEquals(SC_OK, response.getStatus());\r\n    String ci = response.getEntity(String.class);\r\n    assertNotNull(ci);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testRemoveFromClusterNodeLabelsXML",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testRemoveFromClusterNodeLabelsXML() throws Exception\n{\r\n    ClientResponse badResponse = performCall(RM_WEB_SERVICE_PATH + REMOVE_NODE_LABELS, null, null, null, PUT);\r\n    assertEquals(SC_INTERNAL_SERVER_ERROR, badResponse.getStatus());\r\n    addNodeLabel();\r\n    ClientResponse response = performCall(RM_WEB_SERVICE_PATH + REMOVE_NODE_LABELS, LABELS, \"default\", null, POST);\r\n    assertEquals(SC_OK, response.getStatus());\r\n    String ci = response.getEntity(String.class);\r\n    assertNotNull(ci);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testReplaceLabelsOnNodesXML",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testReplaceLabelsOnNodesXML() throws Exception\n{\r\n    ClientResponse badResponse = performCall(RM_WEB_SERVICE_PATH + REPLACE_NODE_TO_LABELS, null, null, null, PUT);\r\n    assertEquals(SC_INTERNAL_SERVER_ERROR, badResponse.getStatus());\r\n    addNodeLabel();\r\n    NodeToLabelsEntryList context = new NodeToLabelsEntryList();\r\n    ClientResponse response = performCall(RM_WEB_SERVICE_PATH + REPLACE_NODE_TO_LABELS, null, null, context, POST);\r\n    assertEquals(SC_OK, response.getStatus());\r\n    String ci = response.getEntity(String.class);\r\n    assertNotNull(ci);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testReplaceLabelsOnNodeXML",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testReplaceLabelsOnNodeXML() throws Exception\n{\r\n    String pathNode = RM_WEB_SERVICE_PATH + format(NODES_NODEID_REPLACE_LABELS, getNodeId());\r\n    ClientResponse badResponse = performCall(pathNode, null, null, null, PUT);\r\n    assertEquals(SC_INTERNAL_SERVER_ERROR, badResponse.getStatus());\r\n    addNodeLabel();\r\n    ClientResponse response = performCall(pathNode, LABELS, \"default\", null, POST);\r\n    assertEquals(SC_OK, response.getStatus());\r\n    String ci = response.getEntity(String.class);\r\n    assertNotNull(ci);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testGetAppAttemptXML",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testGetAppAttemptXML() throws Exception\n{\r\n    String appId = submitApplication();\r\n    String pathAttempts = RM_WEB_SERVICE_PATH + format(APPS_APPID_APPATTEMPTS_APPATTEMPTID, appId, getAppAttempt(appId));\r\n    List<AppAttemptInfo> responses = performGetCalls(pathAttempts, AppAttemptInfo.class, null, null);\r\n    AppAttemptInfo routerResponse = responses.get(0);\r\n    AppAttemptInfo rmResponse = responses.get(1);\r\n    assertNotNull(routerResponse);\r\n    assertNotNull(rmResponse);\r\n    assertEquals(rmResponse.getAppAttemptId(), routerResponse.getAppAttemptId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testGetContainersXML",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testGetContainersXML() throws Exception\n{\r\n    String appId = submitApplication();\r\n    String pathAttempts = RM_WEB_SERVICE_PATH + format(APPS_APPID_APPATTEMPTS_APPATTEMPTID_CONTAINERS, appId, getAppAttempt(appId));\r\n    List<ContainersInfo> responses = performGetCalls(pathAttempts, ContainersInfo.class, null, null);\r\n    ContainersInfo routerResponse = responses.get(0);\r\n    ContainersInfo rmResponse = responses.get(1);\r\n    assertNotNull(routerResponse);\r\n    assertNotNull(rmResponse);\r\n    assertEquals(rmResponse.getContainers().size(), routerResponse.getContainers().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testGetAppsMultiThread",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testGetAppsMultiThread() throws Exception\n{\r\n    final int iniNumApps = getNumApps();\r\n    testGetContainersXML();\r\n    testAppsXML();\r\n    GenericTestUtils.waitFor(new Supplier<Boolean>() {\r\n\r\n        @Override\r\n        public Boolean get() {\r\n            try {\r\n                return getNumApps() == iniNumApps + 2;\r\n            } catch (Exception e) {\r\n                fail();\r\n            }\r\n            return false;\r\n        }\r\n    }, 100, 10 * 1000);\r\n    ExecutorService threadpool = HadoopExecutors.newCachedThreadPool(new ThreadFactoryBuilder().setNameFormat(\"REST Tester #%d\").build());\r\n    CompletionService<Void> svc = new ExecutorCompletionService<>(threadpool);\r\n    try {\r\n        for (int i = 0; i < NUM_THREADS_TESTS; i++) {\r\n            svc.submit(new Callable<Void>() {\r\n\r\n                @Override\r\n                public Void call() throws Exception {\r\n                    assertEquals(iniNumApps + 2, getNumApps());\r\n                    return null;\r\n                }\r\n            });\r\n        }\r\n    } finally {\r\n        threadpool.shutdown();\r\n    }\r\n    assertEquals(iniNumApps + 2, getNumApps());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getNumApps",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "int getNumApps() throws Exception\n{\r\n    List<AppsInfo> responses = performGetCalls(RM_WEB_SERVICE_PATH + APPS, AppsInfo.class, null, null);\r\n    AppsInfo routerResponse = responses.get(0);\r\n    AppsInfo rmResponse = responses.get(1);\r\n    assertEquals(rmResponse.getApps().size(), routerResponse.getApps().size());\r\n    return rmResponse.getApps().size();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getNodeId",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "String getNodeId()\n{\r\n    Client clientToRM = Client.create();\r\n    WebResource toRM = clientToRM.resource(rmAddress).path(RM_WEB_SERVICE_PATH + NODES);\r\n    ClientResponse response = toRM.accept(APPLICATION_XML).get(ClientResponse.class);\r\n    NodesInfo ci = response.getEntity(NodesInfo.class);\r\n    List<NodeInfo> nodes = ci.getNodes();\r\n    if (nodes.isEmpty()) {\r\n        return null;\r\n    }\r\n    return nodes.get(0).getNodeId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getNewApplicationId",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "NewApplication getNewApplicationId()\n{\r\n    Client clientToRM = Client.create();\r\n    WebResource toRM = clientToRM.resource(rmAddress).path(RM_WEB_SERVICE_PATH + APPS_NEW_APPLICATION);\r\n    ClientResponse response = toRM.accept(APPLICATION_XML).post(ClientResponse.class);\r\n    return response.getEntity(NewApplication.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "submitApplication",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "String submitApplication()\n{\r\n    ApplicationSubmissionContextInfo context = new ApplicationSubmissionContextInfo();\r\n    String appId = getNewApplicationId().getApplicationId();\r\n    context.setApplicationId(appId);\r\n    Client clientToRouter = Client.create();\r\n    WebResource toRM = clientToRouter.resource(rmAddress).path(RM_WEB_SERVICE_PATH + APPS);\r\n    toRM.entity(context, APPLICATION_XML).accept(APPLICATION_XML).post(ClientResponse.class);\r\n    return appId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getNewReservationId",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "NewReservation getNewReservationId()\n{\r\n    Client clientToRM = Client.create();\r\n    WebResource toRM = clientToRM.resource(rmAddress).path(RM_WEB_SERVICE_PATH + RESERVATION_NEW);\r\n    ClientResponse response = toRM.accept(APPLICATION_XML).post(ClientResponse.class);\r\n    return response.getEntity(NewReservation.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "addNodeLabel",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "String addNodeLabel()\n{\r\n    Client clientToRM = Client.create();\r\n    WebResource toRM = clientToRM.resource(rmAddress).path(RM_WEB_SERVICE_PATH + ADD_NODE_LABELS);\r\n    List<NodeLabel> nodeLabels = new ArrayList<>();\r\n    nodeLabels.add(NodeLabel.newInstance(\"default\"));\r\n    NodeLabelsInfo context = new NodeLabelsInfo(nodeLabels);\r\n    ClientResponse response = toRM.entity(context, APPLICATION_XML).accept(APPLICATION_XML).post(ClientResponse.class);\r\n    return response.getEntity(String.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getAppAttempt",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "String getAppAttempt(String appId)\n{\r\n    Client clientToRM = Client.create();\r\n    String pathAppAttempt = RM_WEB_SERVICE_PATH + format(APPS_APPID_APPATTEMPTS, appId);\r\n    WebResource toRM = clientToRM.resource(rmAddress).path(pathAppAttempt);\r\n    ClientResponse response = toRM.accept(APPLICATION_XML).get(ClientResponse.class);\r\n    AppAttemptsInfo ci = response.getEntity(AppAttemptsInfo.class);\r\n    return ci.getAttempts().get(0).getAppAttemptId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "format",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String format(String format, Object... args)\n{\r\n    Pattern p = Pattern.compile(\"\\\\{.*?}\");\r\n    Matcher m = p.matcher(format);\r\n    String newFormat = m.replaceAll(\"%s\");\r\n    return String.format(newFormat, args);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "setUp",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void setUp()\n{\r\n    super.setUpConfig();\r\n    interceptor = new TestableFederationClientInterceptor();\r\n    stateStore = new MemoryFederationStateStore();\r\n    stateStore.init(this.getConf());\r\n    FederationStateStoreFacade.getInstance().reinitialize(stateStore, getConf());\r\n    stateStoreUtil = new FederationStateStoreTestUtil(stateStore);\r\n    interceptor.setConf(this.getConf());\r\n    interceptor.init(user);\r\n    subClusters = new ArrayList<SubClusterId>();\r\n    try {\r\n        for (int i = 0; i < NUM_SUBCLUSTER; i++) {\r\n            SubClusterId sc = SubClusterId.newInstance(Integer.toString(i));\r\n            stateStoreUtil.registerSubCluster(sc);\r\n            subClusters.add(sc);\r\n        }\r\n    } catch (YarnException e) {\r\n        LOG.error(e.getMessage());\r\n        Assert.fail();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDown()\n{\r\n    interceptor.shutdown();\r\n    super.tearDown();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "createConfiguration",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "YarnConfiguration createConfiguration()\n{\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.FEDERATION_ENABLED, true);\r\n    String mockPassThroughInterceptorClass = PassThroughClientRequestInterceptor.class.getName();\r\n    conf.set(YarnConfiguration.ROUTER_CLIENTRM_INTERCEPTOR_CLASS_PIPELINE, mockPassThroughInterceptorClass + \",\" + mockPassThroughInterceptorClass + \",\" + TestableFederationClientInterceptor.class.getName());\r\n    conf.set(YarnConfiguration.FEDERATION_POLICY_MANAGER, UniformBroadcastPolicyManager.class.getName());\r\n    conf.setInt(YarnConfiguration.FEDERATION_CACHE_TIME_TO_LIVE_SECS, 0);\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "testGetNewApplication",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testGetNewApplication() throws YarnException, IOException, InterruptedException\n{\r\n    LOG.info(\"Test FederationClientInterceptor: Get New Application\");\r\n    GetNewApplicationRequest request = GetNewApplicationRequest.newInstance();\r\n    GetNewApplicationResponse response = interceptor.getNewApplication(request);\r\n    Assert.assertNotNull(response);\r\n    Assert.assertNotNull(response.getApplicationId());\r\n    Assert.assertTrue(response.getApplicationId().getClusterTimestamp() == ResourceManager.getClusterTimeStamp());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "testSubmitApplication",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testSubmitApplication() throws YarnException, IOException, InterruptedException\n{\r\n    LOG.info(\"Test FederationClientInterceptor: Submit Application\");\r\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    SubmitApplicationRequest request = mockSubmitApplicationRequest(appId);\r\n    SubmitApplicationResponse response = interceptor.submitApplication(request);\r\n    Assert.assertNotNull(response);\r\n    SubClusterId scIdResult = stateStoreUtil.queryApplicationHomeSC(appId);\r\n    Assert.assertNotNull(scIdResult);\r\n    Assert.assertTrue(subClusters.contains(scIdResult));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "mockSubmitApplicationRequest",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "SubmitApplicationRequest mockSubmitApplicationRequest(ApplicationId appId)\n{\r\n    ContainerLaunchContext amContainerSpec = mock(ContainerLaunchContext.class);\r\n    ApplicationSubmissionContext context = ApplicationSubmissionContext.newInstance(appId, MockApps.newAppName(), \"default\", Priority.newInstance(0), amContainerSpec, false, false, -1, Resources.createResource(YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB), \"MockApp\");\r\n    SubmitApplicationRequest request = SubmitApplicationRequest.newInstance(context);\r\n    return request;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "testSubmitApplicationMultipleSubmission",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testSubmitApplicationMultipleSubmission() throws YarnException, IOException, InterruptedException\n{\r\n    LOG.info(\"Test FederationClientInterceptor: Submit Application - Multiple\");\r\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    SubmitApplicationRequest request = mockSubmitApplicationRequest(appId);\r\n    SubmitApplicationResponse response = interceptor.submitApplication(request);\r\n    Assert.assertNotNull(response);\r\n    SubClusterId scIdResult = stateStoreUtil.queryApplicationHomeSC(appId);\r\n    Assert.assertNotNull(scIdResult);\r\n    response = interceptor.submitApplication(request);\r\n    Assert.assertNotNull(response);\r\n    SubClusterId scIdResult2 = stateStoreUtil.queryApplicationHomeSC(appId);\r\n    Assert.assertNotNull(scIdResult2);\r\n    Assert.assertEquals(scIdResult, scIdResult);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "testSubmitApplicationEmptyRequest",
  "errType" : [ "YarnException", "YarnException", "YarnException" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testSubmitApplicationEmptyRequest() throws YarnException, IOException, InterruptedException\n{\r\n    LOG.info(\"Test FederationClientInterceptor: Submit Application - Empty\");\r\n    try {\r\n        interceptor.submitApplication(null);\r\n        Assert.fail();\r\n    } catch (YarnException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing submitApplication request or \" + \"applicationSubmissionContext information.\"));\r\n    }\r\n    try {\r\n        interceptor.submitApplication(SubmitApplicationRequest.newInstance(null));\r\n        Assert.fail();\r\n    } catch (YarnException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing submitApplication request or \" + \"applicationSubmissionContext information.\"));\r\n    }\r\n    try {\r\n        ApplicationSubmissionContext context = ApplicationSubmissionContext.newInstance(null, \"\", \"\", null, null, false, false, -1, null, null);\r\n        SubmitApplicationRequest request = SubmitApplicationRequest.newInstance(context);\r\n        interceptor.submitApplication(request);\r\n        Assert.fail();\r\n    } catch (YarnException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing submitApplication request or \" + \"applicationSubmissionContext information.\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "testForceKillApplication",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testForceKillApplication() throws YarnException, IOException, InterruptedException\n{\r\n    LOG.info(\"Test FederationClientInterceptor: Force Kill Application\");\r\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    SubmitApplicationRequest request = mockSubmitApplicationRequest(appId);\r\n    SubmitApplicationResponse response = interceptor.submitApplication(request);\r\n    Assert.assertNotNull(response);\r\n    Assert.assertNotNull(stateStoreUtil.queryApplicationHomeSC(appId));\r\n    KillApplicationRequest requestKill = KillApplicationRequest.newInstance(appId);\r\n    KillApplicationResponse responseKill = interceptor.forceKillApplication(requestKill);\r\n    Assert.assertNotNull(responseKill);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "testForceKillApplicationNotExists",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testForceKillApplicationNotExists() throws YarnException, IOException, InterruptedException\n{\r\n    LOG.info(\"Test FederationClientInterceptor: \" + \"Force Kill Application - Not Exists\");\r\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    KillApplicationRequest requestKill = KillApplicationRequest.newInstance(appId);\r\n    try {\r\n        interceptor.forceKillApplication(requestKill);\r\n        Assert.fail();\r\n    } catch (YarnException e) {\r\n        Assert.assertTrue(e.getMessage().equals(\"Application \" + appId + \" does not exist in FederationStateStore\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "testForceKillApplicationEmptyRequest",
  "errType" : [ "YarnException", "YarnException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testForceKillApplicationEmptyRequest() throws YarnException, IOException, InterruptedException\n{\r\n    LOG.info(\"Test FederationClientInterceptor: Force Kill Application - Empty\");\r\n    try {\r\n        interceptor.forceKillApplication(null);\r\n        Assert.fail();\r\n    } catch (YarnException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing forceKillApplication request or ApplicationId.\"));\r\n    }\r\n    try {\r\n        interceptor.forceKillApplication(KillApplicationRequest.newInstance(null));\r\n        Assert.fail();\r\n    } catch (YarnException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing forceKillApplication request or ApplicationId.\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "testGetApplicationReport",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testGetApplicationReport() throws YarnException, IOException, InterruptedException\n{\r\n    LOG.info(\"Test FederationClientInterceptor: Get Application Report\");\r\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    SubmitApplicationRequest request = mockSubmitApplicationRequest(appId);\r\n    SubmitApplicationResponse response = interceptor.submitApplication(request);\r\n    Assert.assertNotNull(response);\r\n    Assert.assertNotNull(stateStoreUtil.queryApplicationHomeSC(appId));\r\n    GetApplicationReportRequest requestGet = GetApplicationReportRequest.newInstance(appId);\r\n    GetApplicationReportResponse responseGet = interceptor.getApplicationReport(requestGet);\r\n    Assert.assertNotNull(responseGet);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "testGetApplicationNotExists",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testGetApplicationNotExists() throws YarnException, IOException, InterruptedException\n{\r\n    LOG.info(\"Test ApplicationClientProtocol: Get Application Report - Not Exists\");\r\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    GetApplicationReportRequest requestGet = GetApplicationReportRequest.newInstance(appId);\r\n    try {\r\n        interceptor.getApplicationReport(requestGet);\r\n        Assert.fail();\r\n    } catch (YarnException e) {\r\n        Assert.assertTrue(e.getMessage().equals(\"Application \" + appId + \" does not exist in FederationStateStore\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "testGetApplicationEmptyRequest",
  "errType" : [ "YarnException", "YarnException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testGetApplicationEmptyRequest() throws YarnException, IOException, InterruptedException\n{\r\n    LOG.info(\"Test FederationClientInterceptor: Get Application Report - Empty\");\r\n    try {\r\n        interceptor.getApplicationReport(null);\r\n        Assert.fail();\r\n    } catch (YarnException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing getApplicationReport request or \" + \"applicationId information.\"));\r\n    }\r\n    try {\r\n        interceptor.getApplicationReport(GetApplicationReportRequest.newInstance(null));\r\n        Assert.fail();\r\n    } catch (YarnException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing getApplicationReport request or \" + \"applicationId information.\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "testGetApplicationAttemptReport",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testGetApplicationAttemptReport() throws YarnException, IOException, InterruptedException\n{\r\n    LOG.info(\"Test FederationClientInterceptor: \" + \"Get ApplicationAttempt Report\");\r\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    SubmitApplicationRequest request = mockSubmitApplicationRequest(appId);\r\n    SubmitApplicationResponse response = interceptor.submitApplication(request);\r\n    Assert.assertNotNull(response);\r\n    Assert.assertNotNull(stateStoreUtil.queryApplicationHomeSC(appId));\r\n    GetApplicationAttemptReportRequest requestGet = GetApplicationAttemptReportRequest.newInstance(appAttemptId);\r\n    GetApplicationAttemptReportResponse responseGet = interceptor.getApplicationAttemptReport(requestGet);\r\n    Assert.assertNotNull(responseGet);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "testGetApplicationAttemptNotExists",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testGetApplicationAttemptNotExists() throws Exception\n{\r\n    LOG.info(\"Test ApplicationClientProtocol: \" + \"Get ApplicationAttempt Report - Not Exists\");\r\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    ApplicationAttemptId appAttemptID = ApplicationAttemptId.newInstance(appId, 1);\r\n    GetApplicationAttemptReportRequest requestGet = GetApplicationAttemptReportRequest.newInstance(appAttemptID);\r\n    LambdaTestUtils.intercept(YarnException.class, \"ApplicationAttempt \" + appAttemptID + \"belongs to Application \" + appId + \" does not exist in FederationStateStore\", () -> interceptor.getApplicationAttemptReport(requestGet));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "testGetApplicationAttemptEmptyRequest",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetApplicationAttemptEmptyRequest() throws Exception\n{\r\n    LOG.info(\"Test FederationClientInterceptor: \" + \"Get ApplicationAttempt Report - Empty\");\r\n    LambdaTestUtils.intercept(YarnException.class, \"Missing getApplicationAttemptReport \" + \"request or applicationId \" + \"or applicationAttemptId information.\", () -> interceptor.getApplicationAttemptReport(null));\r\n    LambdaTestUtils.intercept(YarnException.class, \"Missing getApplicationAttemptReport \" + \"request or applicationId \" + \"or applicationAttemptId information.\", () -> interceptor.getApplicationAttemptReport(GetApplicationAttemptReportRequest.newInstance(null)));\r\n    LambdaTestUtils.intercept(YarnException.class, \"Missing getApplicationAttemptReport \" + \"request or applicationId \" + \"or applicationAttemptId information.\", () -> interceptor.getApplicationAttemptReport(GetApplicationAttemptReportRequest.newInstance(ApplicationAttemptId.newInstance(null, 1))));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "testGetClusterMetricsRequest",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testGetClusterMetricsRequest() throws YarnException, IOException\n{\r\n    LOG.info(\"Test FederationClientInterceptor : Get Cluster Metrics request\");\r\n    GetClusterMetricsResponse response = interceptor.getClusterMetrics(null);\r\n    Assert.assertEquals(subClusters.size(), response.getClusterMetrics().getNumNodeManagers());\r\n    response = interceptor.getClusterMetrics(GetClusterMetricsRequest.newInstance());\r\n    Assert.assertEquals(subClusters.size(), response.getClusterMetrics().getNumNodeManagers());\r\n    ClientMethod remoteMethod = new ClientMethod(\"getClusterMetrics\", new Class[] { GetClusterMetricsRequest.class }, new Object[] { GetClusterMetricsRequest.newInstance() });\r\n    Map<SubClusterId, GetClusterMetricsResponse> clusterMetrics = interceptor.invokeConcurrent(new ArrayList<>(), remoteMethod, GetClusterMetricsResponse.class);\r\n    Assert.assertEquals(true, clusterMetrics.isEmpty());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "testGetApplicationsResponse",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testGetApplicationsResponse() throws YarnException, IOException, InterruptedException\n{\r\n    LOG.info(\"Test FederationClientInterceptor: Get Applications Response\");\r\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    SubmitApplicationRequest request = mockSubmitApplicationRequest(appId);\r\n    SubmitApplicationResponse response = interceptor.submitApplication(request);\r\n    Assert.assertNotNull(response);\r\n    Assert.assertNotNull(stateStoreUtil.queryApplicationHomeSC(appId));\r\n    Set<String> appTypes = Collections.singleton(\"MockApp\");\r\n    GetApplicationsRequest requestGet = GetApplicationsRequest.newInstance(appTypes);\r\n    GetApplicationsResponse responseGet = interceptor.getApplications(requestGet);\r\n    Assert.assertNotNull(responseGet);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "testGetApplicationsNullRequest",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testGetApplicationsNullRequest() throws Exception\n{\r\n    LOG.info(\"Test FederationClientInterceptor: Get Applications request\");\r\n    LambdaTestUtils.intercept(YarnException.class, \"Missing getApplications request.\", () -> interceptor.getApplications(null));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "testGetApplicationsApplicationTypeNotExists",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testGetApplicationsApplicationTypeNotExists() throws Exception\n{\r\n    LOG.info(\"Test FederationClientInterceptor: Application with type does \" + \"not exist\");\r\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    SubmitApplicationRequest request = mockSubmitApplicationRequest(appId);\r\n    SubmitApplicationResponse response = interceptor.submitApplication(request);\r\n    Assert.assertNotNull(response);\r\n    Assert.assertNotNull(stateStoreUtil.queryApplicationHomeSC(appId));\r\n    Set<String> appTypes = Collections.singleton(\"SPARK\");\r\n    GetApplicationsRequest requestGet = GetApplicationsRequest.newInstance(appTypes);\r\n    GetApplicationsResponse responseGet = interceptor.getApplications(requestGet);\r\n    Assert.assertNotNull(responseGet);\r\n    Assert.assertTrue(responseGet.getApplicationList().isEmpty());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "testGetApplicationsApplicationStateNotExists",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testGetApplicationsApplicationStateNotExists() throws Exception\n{\r\n    LOG.info(\"Test FederationClientInterceptor:\" + \" Application with state does not exist\");\r\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    SubmitApplicationRequest request = mockSubmitApplicationRequest(appId);\r\n    SubmitApplicationResponse response = interceptor.submitApplication(request);\r\n    Assert.assertNotNull(response);\r\n    Assert.assertNotNull(stateStoreUtil.queryApplicationHomeSC(appId));\r\n    EnumSet<YarnApplicationState> applicationStates = EnumSet.noneOf(YarnApplicationState.class);\r\n    applicationStates.add(YarnApplicationState.KILLED);\r\n    GetApplicationsRequest requestGet = GetApplicationsRequest.newInstance(applicationStates);\r\n    GetApplicationsResponse responseGet = interceptor.getApplications(requestGet);\r\n    Assert.assertNotNull(responseGet);\r\n    Assert.assertTrue(responseGet.getApplicationList().isEmpty());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router",
  "methodName" : "testJVMMetricsService",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testJVMMetricsService()\n{\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    Router router = new Router();\r\n    router.init(conf);\r\n    assertEquals(3, router.getServices().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router",
  "methodName" : "testServiceACLRefresh",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testServiceACLRefresh()\n{\r\n    Configuration conf = new Configuration();\r\n    conf.setBoolean(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, true);\r\n    String aclsString = \"alice,bob users,wheel\";\r\n    conf.set(\"security.applicationclient.protocol.acl\", aclsString);\r\n    conf.set(\"security.resourcemanager-administration.protocol.acl\", aclsString);\r\n    Router router = new Router();\r\n    router.init(conf);\r\n    router.start();\r\n    ServiceAuthorizationManager clientRMServiceManager = router.clientRMProxyService.getServer().getServiceAuthorizationManager();\r\n    verifyServiceACLsRefresh(clientRMServiceManager, org.apache.hadoop.yarn.api.ApplicationClientProtocolPB.class, aclsString);\r\n    ServiceAuthorizationManager routerAdminServiceManager = router.rmAdminProxyService.getServer().getServiceAuthorizationManager();\r\n    verifyServiceACLsRefresh(routerAdminServiceManager, org.apache.hadoop.yarn.server.api.ResourceManagerAdministrationProtocolPB.class, aclsString);\r\n    router.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router",
  "methodName" : "verifyServiceACLsRefresh",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void verifyServiceACLsRefresh(ServiceAuthorizationManager manager, Class<?> protocol, String aclString)\n{\r\n    if (manager.getProtocolsWithAcls().size() == 0) {\r\n        fail(\"Acls are not refreshed for protocol \" + protocol);\r\n    }\r\n    for (Class<?> protocolClass : manager.getProtocolsWithAcls()) {\r\n        AccessControlList accessList = manager.getProtocolsAcls(protocolClass);\r\n        if (protocolClass == protocol) {\r\n            Assert.assertEquals(accessList.getAclString(), aclString);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    when(APPID.toString()).thenReturn(\"app_1\");\r\n    when(SUBCLUSTERID.toString()).thenReturn(\"sc0\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router",
  "methodName" : "testKeyValLogFormat",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testKeyValLogFormat() throws Exception\n{\r\n    StringBuilder actLog = new StringBuilder();\r\n    StringBuilder expLog = new StringBuilder();\r\n    RouterAuditLogger.start(RouterAuditLogger.Keys.USER, USER, actLog);\r\n    expLog.append(\"USER=test\");\r\n    assertEquals(expLog.toString(), actLog.toString());\r\n    RouterAuditLogger.add(RouterAuditLogger.Keys.OPERATION, OPERATION, actLog);\r\n    expLog.append(\"\\tOPERATION=oper\");\r\n    assertEquals(expLog.toString(), actLog.toString());\r\n    RouterAuditLogger.add(RouterAuditLogger.Keys.APPID, (String) null, actLog);\r\n    expLog.append(\"\\tAPPID=null\");\r\n    assertEquals(expLog.toString(), actLog.toString());\r\n    RouterAuditLogger.add(RouterAuditLogger.Keys.TARGET, TARGET, actLog);\r\n    expLog.append(\"\\tTARGET=tgt\");\r\n    assertEquals(expLog.toString(), actLog.toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router",
  "methodName" : "testSuccessLogFormatHelper",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testSuccessLogFormatHelper(ApplicationId appId, SubClusterId subClusterId)\n{\r\n    String sLog = RouterAuditLogger.createSuccessLog(USER, OPERATION, TARGET, appId, subClusterId);\r\n    StringBuilder expLog = new StringBuilder();\r\n    expLog.append(\"USER=test\\t\");\r\n    expLog.append(\"OPERATION=oper\\tTARGET=tgt\\tRESULT=SUCCESS\");\r\n    if (appId != null) {\r\n        expLog.append(\"\\tAPPID=app_1\");\r\n    }\r\n    if (subClusterId != null) {\r\n        expLog.append(\"\\tSUBCLUSTERID=sc0\");\r\n    }\r\n    assertEquals(expLog.toString(), sLog);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router",
  "methodName" : "testSuccessLogNulls",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testSuccessLogNulls()\n{\r\n    String sLog = RouterAuditLogger.createSuccessLog(null, null, null, null, null);\r\n    StringBuilder expLog = new StringBuilder();\r\n    expLog.append(\"USER=null\\t\");\r\n    expLog.append(\"OPERATION=null\\tTARGET=null\\tRESULT=SUCCESS\");\r\n    assertEquals(expLog.toString(), sLog);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router",
  "methodName" : "testSuccessLogFormat",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testSuccessLogFormat()\n{\r\n    testSuccessLogFormatHelper(null, null);\r\n    testSuccessLogFormatHelper(APPID, null);\r\n    testSuccessLogFormatHelper(null, SUBCLUSTERID);\r\n    testSuccessLogFormatHelper(APPID, SUBCLUSTERID);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router",
  "methodName" : "testFailureLogFormatHelper",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testFailureLogFormatHelper(ApplicationId appId, SubClusterId subClusterId)\n{\r\n    String fLog = RouterAuditLogger.createFailureLog(USER, OPERATION, \"UNKNOWN\", TARGET, DESC, appId, subClusterId);\r\n    StringBuilder expLog = new StringBuilder();\r\n    expLog.append(\"USER=test\\t\");\r\n    expLog.append(\"OPERATION=oper\\tTARGET=tgt\\tRESULT=FAILURE\\t\");\r\n    expLog.append(\"DESCRIPTION=description of an audit log\");\r\n    expLog.append(\"\\tPERMISSIONS=UNKNOWN\");\r\n    if (appId != null) {\r\n        expLog.append(\"\\tAPPID=app_1\");\r\n    }\r\n    if (subClusterId != null) {\r\n        expLog.append(\"\\tSUBCLUSTERID=sc0\");\r\n    }\r\n    assertEquals(expLog.toString(), fLog);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router",
  "methodName" : "testFailureLogFormat",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testFailureLogFormat()\n{\r\n    testFailureLogFormatHelper(null, null);\r\n    testFailureLogFormatHelper(APPID, null);\r\n    testFailureLogFormatHelper(null, SUBCLUSTERID);\r\n    testFailureLogFormatHelper(APPID, SUBCLUSTERID);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router",
  "methodName" : "testRouterAuditLogger",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testRouterAuditLogger() throws Exception\n{\r\n    testSuccessLogFormat();\r\n    testFailureLogFormat();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getAppAttempts",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AppAttemptsInfo getAppAttempts(HttpServletRequest hsr, String appId)\n{\r\n    return getNextInterceptor().getAppAttempts(hsr, appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "checkUserAccessToQueue",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RMQueueAclInfo checkUserAccessToQueue(String queue, String username, String queueAclType, HttpServletRequest hsr) throws AuthorizationException\n{\r\n    return getNextInterceptor().checkUserAccessToQueue(queue, username, queueAclType, hsr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getAppAttempt",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AppAttemptInfo getAppAttempt(HttpServletRequest req, HttpServletResponse res, String appId, String appAttemptId)\n{\r\n    return getNextInterceptor().getAppAttempt(req, res, appId, appAttemptId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainersInfo getContainers(HttpServletRequest req, HttpServletResponse res, String appId, String appAttemptId)\n{\r\n    return getNextInterceptor().getContainers(req, res, appId, appAttemptId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerInfo getContainer(HttpServletRequest req, HttpServletResponse res, String appId, String appAttemptId, String containerId)\n{\r\n    return getNextInterceptor().getContainer(req, res, appId, appAttemptId, containerId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "get",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ClusterInfo get()\n{\r\n    return getNextInterceptor().get();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getClusterInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ClusterInfo getClusterInfo()\n{\r\n    return getNextInterceptor().getClusterInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getClusterUserInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ClusterUserInfo getClusterUserInfo(HttpServletRequest hsr)\n{\r\n    return getNextInterceptor().getClusterUserInfo(hsr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getClusterMetricsInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ClusterMetricsInfo getClusterMetricsInfo()\n{\r\n    return getNextInterceptor().getClusterMetricsInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getSchedulerInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SchedulerTypeInfo getSchedulerInfo()\n{\r\n    return getNextInterceptor().getSchedulerInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "dumpSchedulerLogs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String dumpSchedulerLogs(String time, HttpServletRequest hsr) throws IOException\n{\r\n    return getNextInterceptor().dumpSchedulerLogs(time, hsr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getNodes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodesInfo getNodes(String states)\n{\r\n    return getNextInterceptor().getNodes(states);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getNode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeInfo getNode(String nodeId)\n{\r\n    return getNextInterceptor().getNode(nodeId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "updateNodeResource",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceInfo updateNodeResource(HttpServletRequest hsr, String nodeId, ResourceOptionInfo resourceOption) throws AuthorizationException\n{\r\n    return getNextInterceptor().updateNodeResource(hsr, nodeId, resourceOption);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getApps",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AppsInfo getApps(HttpServletRequest hsr, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes, Set<String> applicationTags, String name, Set<String> unselectedFields)\n{\r\n    return getNextInterceptor().getApps(hsr, stateQuery, statesQuery, finalStatusQuery, userQuery, queueQuery, count, startedBegin, startedEnd, finishBegin, finishEnd, applicationTypes, applicationTags, name, unselectedFields);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getActivities",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ActivitiesInfo getActivities(HttpServletRequest hsr, String nodeId, String groupBy)\n{\r\n    return getNextInterceptor().getActivities(hsr, nodeId, groupBy);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getBulkActivities",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "BulkActivitiesInfo getBulkActivities(HttpServletRequest hsr, String groupBy, int activitiesCount) throws InterruptedException\n{\r\n    return getNextInterceptor().getBulkActivities(hsr, groupBy, activitiesCount);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getAppActivities",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AppActivitiesInfo getAppActivities(HttpServletRequest hsr, String appId, String time, Set<String> requestPriorities, Set<String> allocationRequestIds, String groupBy, String limit, Set<String> actions, boolean summarize)\n{\r\n    return getNextInterceptor().getAppActivities(hsr, appId, time, requestPriorities, allocationRequestIds, groupBy, limit, actions, summarize);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getAppStatistics",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationStatisticsInfo getAppStatistics(HttpServletRequest hsr, Set<String> stateQueries, Set<String> typeQueries)\n{\r\n    return getNextInterceptor().getAppStatistics(hsr, stateQueries, typeQueries);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getApp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AppInfo getApp(HttpServletRequest hsr, String appId, Set<String> unselectedFields)\n{\r\n    return getNextInterceptor().getApp(hsr, appId, unselectedFields);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getAppState",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AppState getAppState(HttpServletRequest hsr, String appId) throws AuthorizationException\n{\r\n    return getNextInterceptor().getAppState(hsr, appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "updateAppState",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response updateAppState(AppState targetState, HttpServletRequest hsr, String appId) throws AuthorizationException, YarnException, InterruptedException, IOException\n{\r\n    return getNextInterceptor().updateAppState(targetState, hsr, appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getNodeToLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeToLabelsInfo getNodeToLabels(HttpServletRequest hsr) throws IOException\n{\r\n    return getNextInterceptor().getNodeToLabels(hsr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getLabelsToNodes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LabelsToNodesInfo getLabelsToNodes(Set<String> labels) throws IOException\n{\r\n    return getNextInterceptor().getLabelsToNodes(labels);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "replaceLabelsOnNodes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response replaceLabelsOnNodes(NodeToLabelsEntryList newNodeToLabels, HttpServletRequest hsr) throws Exception\n{\r\n    return getNextInterceptor().replaceLabelsOnNodes(newNodeToLabels, hsr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "replaceLabelsOnNode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response replaceLabelsOnNode(Set<String> newNodeLabelsName, HttpServletRequest hsr, String nodeId) throws Exception\n{\r\n    return getNextInterceptor().replaceLabelsOnNode(newNodeLabelsName, hsr, nodeId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getClusterNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeLabelsInfo getClusterNodeLabels(HttpServletRequest hsr) throws IOException\n{\r\n    return getNextInterceptor().getClusterNodeLabels(hsr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "addToClusterNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response addToClusterNodeLabels(NodeLabelsInfo newNodeLabels, HttpServletRequest hsr) throws Exception\n{\r\n    return getNextInterceptor().addToClusterNodeLabels(newNodeLabels, hsr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "removeFromClusterNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response removeFromClusterNodeLabels(Set<String> oldNodeLabels, HttpServletRequest hsr) throws Exception\n{\r\n    return getNextInterceptor().removeFromClusterNodeLabels(oldNodeLabels, hsr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getLabelsOnNode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeLabelsInfo getLabelsOnNode(HttpServletRequest hsr, String nodeId) throws IOException\n{\r\n    return getNextInterceptor().getLabelsOnNode(hsr, nodeId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getAppPriority",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AppPriority getAppPriority(HttpServletRequest hsr, String appId) throws AuthorizationException\n{\r\n    return getNextInterceptor().getAppPriority(hsr, appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "updateApplicationPriority",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response updateApplicationPriority(AppPriority targetPriority, HttpServletRequest hsr, String appId) throws AuthorizationException, YarnException, InterruptedException, IOException\n{\r\n    return getNextInterceptor().updateApplicationPriority(targetPriority, hsr, appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getAppQueue",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AppQueue getAppQueue(HttpServletRequest hsr, String appId) throws AuthorizationException\n{\r\n    return getNextInterceptor().getAppQueue(hsr, appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "updateAppQueue",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response updateAppQueue(AppQueue targetQueue, HttpServletRequest hsr, String appId) throws AuthorizationException, YarnException, InterruptedException, IOException\n{\r\n    return getNextInterceptor().updateAppQueue(targetQueue, hsr, appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "createNewApplication",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response createNewApplication(HttpServletRequest hsr) throws AuthorizationException, IOException, InterruptedException\n{\r\n    return getNextInterceptor().createNewApplication(hsr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "submitApplication",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response submitApplication(ApplicationSubmissionContextInfo newApp, HttpServletRequest hsr) throws AuthorizationException, IOException, InterruptedException\n{\r\n    return getNextInterceptor().submitApplication(newApp, hsr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "postDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response postDelegationToken(DelegationToken tokenData, HttpServletRequest hsr) throws AuthorizationException, IOException, InterruptedException, Exception\n{\r\n    return getNextInterceptor().postDelegationToken(tokenData, hsr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "postDelegationTokenExpiration",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response postDelegationTokenExpiration(HttpServletRequest hsr) throws AuthorizationException, IOException, Exception\n{\r\n    return getNextInterceptor().postDelegationTokenExpiration(hsr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "cancelDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response cancelDelegationToken(HttpServletRequest hsr) throws AuthorizationException, IOException, InterruptedException, Exception\n{\r\n    return getNextInterceptor().cancelDelegationToken(hsr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "createNewReservation",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response createNewReservation(HttpServletRequest hsr) throws AuthorizationException, IOException, InterruptedException\n{\r\n    return getNextInterceptor().createNewReservation(hsr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "submitReservation",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response submitReservation(ReservationSubmissionRequestInfo resContext, HttpServletRequest hsr) throws AuthorizationException, IOException, InterruptedException\n{\r\n    return getNextInterceptor().submitReservation(resContext, hsr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "updateReservation",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response updateReservation(ReservationUpdateRequestInfo resContext, HttpServletRequest hsr) throws AuthorizationException, IOException, InterruptedException\n{\r\n    return getNextInterceptor().updateReservation(resContext, hsr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "deleteReservation",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response deleteReservation(ReservationDeleteRequestInfo resContext, HttpServletRequest hsr) throws AuthorizationException, IOException, InterruptedException\n{\r\n    return getNextInterceptor().deleteReservation(resContext, hsr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "listReservation",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response listReservation(String queue, String reservationId, long startTime, long endTime, boolean includeResourceAllocations, HttpServletRequest hsr) throws Exception\n{\r\n    return getNextInterceptor().listReservation(queue, reservationId, startTime, endTime, includeResourceAllocations, hsr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getAppTimeout",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AppTimeoutInfo getAppTimeout(HttpServletRequest hsr, String appId, String type) throws AuthorizationException\n{\r\n    return getNextInterceptor().getAppTimeout(hsr, appId, type);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getAppTimeouts",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AppTimeoutsInfo getAppTimeouts(HttpServletRequest hsr, String appId) throws AuthorizationException\n{\r\n    return getNextInterceptor().getAppTimeouts(hsr, appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "updateApplicationTimeout",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response updateApplicationTimeout(AppTimeoutInfo appTimeout, HttpServletRequest hsr, String appId) throws AuthorizationException, YarnException, InterruptedException, IOException\n{\r\n    return getNextInterceptor().updateApplicationTimeout(appTimeout, hsr, appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "signalToContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response signalToContainer(String containerId, String command, HttpServletRequest req) throws AuthorizationException\n{\r\n    return getNextInterceptor().signalToContainer(containerId, command, req);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "testRequestInterceptorChainCreation",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testRequestInterceptorChainCreation() throws Exception\n{\r\n    RMAdminRequestInterceptor root = super.getRouterRMAdminService().createRequestInterceptorChain();\r\n    int index = 0;\r\n    while (root != null) {\r\n        switch(index) {\r\n            case 0:\r\n            case 1:\r\n            case 2:\r\n                Assert.assertEquals(PassThroughRMAdminRequestInterceptor.class.getName(), root.getClass().getName());\r\n                break;\r\n            case 3:\r\n                Assert.assertEquals(MockRMAdminRequestInterceptor.class.getName(), root.getClass().getName());\r\n                break;\r\n            default:\r\n                Assert.fail();\r\n        }\r\n        root = root.getNextInterceptor();\r\n        index++;\r\n    }\r\n    Assert.assertEquals(\"The number of interceptors in chain does not match\", 4, index);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "testRouterRMAdminServiceE2E",
  "errType" : null,
  "containingMethodsNum" : 42,
  "sourceCodeText" : "void testRouterRMAdminServiceE2E() throws Exception\n{\r\n    String user = \"test1\";\r\n    LOG.info(\"testRouterRMAdminServiceE2E - Refresh Queues\");\r\n    RefreshQueuesResponse responseRefreshQueues = refreshQueues(user);\r\n    Assert.assertNotNull(responseRefreshQueues);\r\n    LOG.info(\"testRouterRMAdminServiceE2E - Refresh Nodes\");\r\n    RefreshNodesResponse responseRefreshNodes = refreshNodes(user);\r\n    Assert.assertNotNull(responseRefreshNodes);\r\n    LOG.info(\"testRouterRMAdminServiceE2E - Refresh Super User\");\r\n    RefreshSuperUserGroupsConfigurationResponse responseRefreshSuperUser = refreshSuperUserGroupsConfiguration(user);\r\n    Assert.assertNotNull(responseRefreshSuperUser);\r\n    LOG.info(\"testRouterRMAdminServiceE2E - Refresh User to Group\");\r\n    RefreshUserToGroupsMappingsResponse responseRefreshUserToGroup = refreshUserToGroupsMappings(user);\r\n    Assert.assertNotNull(responseRefreshUserToGroup);\r\n    LOG.info(\"testRouterRMAdminServiceE2E - Refresh Admin Acls\");\r\n    RefreshAdminAclsResponse responseRefreshAdminAcls = refreshAdminAcls(user);\r\n    Assert.assertNotNull(responseRefreshAdminAcls);\r\n    LOG.info(\"testRouterRMAdminServiceE2E - Refresh Service Acls\");\r\n    RefreshServiceAclsResponse responseRefreshServiceAcls = refreshServiceAcls(user);\r\n    Assert.assertNotNull(responseRefreshServiceAcls);\r\n    LOG.info(\"testRouterRMAdminServiceE2E - Update Node Resource\");\r\n    UpdateNodeResourceResponse responseUpdateNodeResource = updateNodeResource(user);\r\n    Assert.assertNotNull(responseUpdateNodeResource);\r\n    LOG.info(\"testRouterRMAdminServiceE2E - Refresh Nodes Resource\");\r\n    RefreshNodesResourcesResponse responseRefreshNodesResources = refreshNodesResources(user);\r\n    Assert.assertNotNull(responseRefreshNodesResources);\r\n    LOG.info(\"testRouterRMAdminServiceE2E - Add To Cluster NodeLabels\");\r\n    AddToClusterNodeLabelsResponse responseAddToClusterNodeLabels = addToClusterNodeLabels(user);\r\n    Assert.assertNotNull(responseAddToClusterNodeLabels);\r\n    LOG.info(\"testRouterRMAdminServiceE2E - Remove To Cluster NodeLabels\");\r\n    RemoveFromClusterNodeLabelsResponse responseRemoveFromClusterNodeLabels = removeFromClusterNodeLabels(user);\r\n    Assert.assertNotNull(responseRemoveFromClusterNodeLabels);\r\n    LOG.info(\"testRouterRMAdminServiceE2E - Replace Labels On Node\");\r\n    ReplaceLabelsOnNodeResponse responseReplaceLabelsOnNode = replaceLabelsOnNode(user);\r\n    Assert.assertNotNull(responseReplaceLabelsOnNode);\r\n    LOG.info(\"testRouterRMAdminServiceE2E - Check For Decommissioning Nodes\");\r\n    CheckForDecommissioningNodesResponse responseCheckForDecom = checkForDecommissioningNodes(user);\r\n    Assert.assertNotNull(responseCheckForDecom);\r\n    LOG.info(\"testRouterRMAdminServiceE2E - Refresh Cluster Max Priority\");\r\n    RefreshClusterMaxPriorityResponse responseRefreshClusterMaxPriority = refreshClusterMaxPriority(user);\r\n    Assert.assertNotNull(responseRefreshClusterMaxPriority);\r\n    LOG.info(\"testRouterRMAdminServiceE2E - Get Groups For User\");\r\n    String[] responseGetGroupsForUser = getGroupsForUser(user);\r\n    Assert.assertNotNull(responseGetGroupsForUser);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "testUsersChainMapWithLRUCache",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testUsersChainMapWithLRUCache() throws YarnException, IOException, InterruptedException\n{\r\n    Map<String, RequestInterceptorChainWrapper> pipelines;\r\n    RequestInterceptorChainWrapper chain;\r\n    refreshQueues(\"test1\");\r\n    refreshQueues(\"test2\");\r\n    refreshQueues(\"test3\");\r\n    refreshQueues(\"test4\");\r\n    refreshQueues(\"test5\");\r\n    refreshQueues(\"test6\");\r\n    refreshQueues(\"test7\");\r\n    refreshQueues(\"test8\");\r\n    pipelines = super.getRouterRMAdminService().getPipelines();\r\n    Assert.assertEquals(8, pipelines.size());\r\n    refreshQueues(\"test9\");\r\n    refreshQueues(\"test10\");\r\n    refreshQueues(\"test1\");\r\n    refreshQueues(\"test11\");\r\n    Assert.assertEquals(10, pipelines.size());\r\n    chain = pipelines.get(\"test1\");\r\n    Assert.assertNotNull(\"test1 should not be evicted\", chain);\r\n    chain = pipelines.get(\"test2\");\r\n    Assert.assertNull(\"test2 should have been evicted\", chain);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\rmadmin",
  "methodName" : "testRMAdminPipelineConcurrent",
  "errType" : [ "IOException|InterruptedException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testRMAdminPipelineConcurrent() throws InterruptedException\n{\r\n    final String user = \"test1\";\r\n    class ClientTestThread extends Thread {\r\n\r\n        private RMAdminRequestInterceptor interceptor;\r\n\r\n        @Override\r\n        public void run() {\r\n            try {\r\n                interceptor = pipeline();\r\n            } catch (IOException | InterruptedException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n\r\n        private RMAdminRequestInterceptor pipeline() throws IOException, InterruptedException {\r\n            return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<RMAdminRequestInterceptor>() {\r\n\r\n                @Override\r\n                public RMAdminRequestInterceptor run() throws Exception {\r\n                    RequestInterceptorChainWrapper wrapper = getRouterRMAdminService().getInterceptorChain();\r\n                    RMAdminRequestInterceptor interceptor = wrapper.getRootInterceptor();\r\n                    Assert.assertNotNull(interceptor);\r\n                    LOG.info(\"init rm admin interceptor success for user\" + user);\r\n                    return interceptor;\r\n                }\r\n            });\r\n        }\r\n    }\r\n    ClientTestThread client1 = new ClientTestThread();\r\n    ClientTestThread client2 = new ClientTestThread();\r\n    client1.start();\r\n    client2.start();\r\n    client1.join();\r\n    client2.join();\r\n    Assert.assertNotNull(client1.interceptor);\r\n    Assert.assertNotNull(client2.interceptor);\r\n    Assert.assertTrue(client1.interceptor == client2.interceptor);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "validateRunning",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void validateRunning() throws ConnectException\n{\r\n    if (!isRunning) {\r\n        throw new ConnectException(\"RM is stopped\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "createNewApplication",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Response createNewApplication(HttpServletRequest hsr) throws AuthorizationException, IOException, InterruptedException\n{\r\n    validateRunning();\r\n    ApplicationId applicationId = ApplicationId.newInstance(Integer.valueOf(getSubClusterId().getId()), applicationCounter.incrementAndGet());\r\n    NewApplication appId = new NewApplication(applicationId.toString(), new ResourceInfo());\r\n    return Response.status(Status.OK).entity(appId).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "submitApplication",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Response submitApplication(ApplicationSubmissionContextInfo newApp, HttpServletRequest hsr) throws AuthorizationException, IOException, InterruptedException\n{\r\n    validateRunning();\r\n    ApplicationId appId = ApplicationId.fromString(newApp.getApplicationId());\r\n    LOG.info(\"Application submitted: \" + appId);\r\n    applicationMap.add(appId);\r\n    return Response.status(Status.ACCEPTED).header(HttpHeaders.LOCATION, \"\").entity(getSubClusterId()).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getApp",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "AppInfo getApp(HttpServletRequest hsr, String appId, Set<String> unselectedFields)\n{\r\n    if (!isRunning) {\r\n        throw new RuntimeException(\"RM is stopped\");\r\n    }\r\n    ApplicationId applicationId = ApplicationId.fromString(appId);\r\n    if (!applicationMap.contains(applicationId)) {\r\n        throw new NotFoundException(\"app with id: \" + appId + \" not found\");\r\n    }\r\n    return new AppInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getApps",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "AppsInfo getApps(HttpServletRequest hsr, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes, Set<String> applicationTags, String name, Set<String> unselectedFields)\n{\r\n    if (!isRunning) {\r\n        throw new RuntimeException(\"RM is stopped\");\r\n    }\r\n    AppsInfo appsInfo = new AppsInfo();\r\n    AppInfo appInfo = new AppInfo();\r\n    appInfo.setAppId(ApplicationId.newInstance(Integer.valueOf(getSubClusterId().getId()), applicationCounter.incrementAndGet()).toString());\r\n    appInfo.setAMHostHttpAddress(\"http://i_am_the_AM:1234\");\r\n    appsInfo.add(appInfo);\r\n    return appsInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "updateAppState",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "Response updateAppState(AppState targetState, HttpServletRequest hsr, String appId) throws AuthorizationException, YarnException, InterruptedException, IOException\n{\r\n    validateRunning();\r\n    ApplicationId applicationId = ApplicationId.fromString(appId);\r\n    if (!applicationMap.remove(applicationId)) {\r\n        throw new ApplicationNotFoundException(\"Trying to kill an absent application: \" + appId);\r\n    }\r\n    if (targetState == null) {\r\n        return Response.status(Status.BAD_REQUEST).build();\r\n    }\r\n    LOG.info(\"Force killing application: \" + appId);\r\n    AppState ret = new AppState();\r\n    ret.setState(targetState.toString());\r\n    return Response.status(Status.OK).entity(ret).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getNode",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NodeInfo getNode(String nodeId)\n{\r\n    if (!isRunning) {\r\n        throw new RuntimeException(\"RM is stopped\");\r\n    }\r\n    NodeInfo node = new NodeInfo();\r\n    node.setId(nodeId);\r\n    node.setLastHealthUpdate(Integer.valueOf(getSubClusterId().getId()));\r\n    return node;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getNodes",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "NodesInfo getNodes(String states)\n{\r\n    if (!isRunning) {\r\n        throw new RuntimeException(\"RM is stopped\");\r\n    }\r\n    NodeInfo node = new NodeInfo();\r\n    node.setId(\"Node \" + Integer.valueOf(getSubClusterId().getId()));\r\n    node.setLastHealthUpdate(Integer.valueOf(getSubClusterId().getId()));\r\n    NodesInfo nodes = new NodesInfo();\r\n    nodes.add(node);\r\n    return nodes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "updateNodeResource",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceInfo updateNodeResource(HttpServletRequest hsr, String nodeId, ResourceOptionInfo resourceOption)\n{\r\n    if (!isRunning) {\r\n        throw new RuntimeException(\"RM is stopped\");\r\n    }\r\n    Resource resource = resourceOption.getResourceOption().getResource();\r\n    return new ResourceInfo(resource);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getClusterMetricsInfo",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "ClusterMetricsInfo getClusterMetricsInfo()\n{\r\n    if (!isRunning) {\r\n        throw new RuntimeException(\"RM is stopped\");\r\n    }\r\n    ClusterMetricsInfo metrics = new ClusterMetricsInfo();\r\n    metrics.setAppsSubmitted(Integer.valueOf(getSubClusterId().getId()));\r\n    metrics.setAppsCompleted(Integer.valueOf(getSubClusterId().getId()));\r\n    metrics.setAppsPending(Integer.valueOf(getSubClusterId().getId()));\r\n    metrics.setAppsRunning(Integer.valueOf(getSubClusterId().getId()));\r\n    metrics.setAppsFailed(Integer.valueOf(getSubClusterId().getId()));\r\n    metrics.setAppsKilled(Integer.valueOf(getSubClusterId().getId()));\r\n    return metrics;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "getAppState",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "AppState getAppState(HttpServletRequest hsr, String appId) throws AuthorizationException\n{\r\n    if (!isRunning) {\r\n        throw new RuntimeException(\"RM is stopped\");\r\n    }\r\n    ApplicationId applicationId = ApplicationId.fromString(appId);\r\n    if (!applicationMap.contains(applicationId)) {\r\n        throw new NotFoundException(\"app with id: \" + appId + \" not found\");\r\n    }\r\n    return new AppState(APP_STATE_RUNNING);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "setSubClusterId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setSubClusterId(int subClusterId)\n{\r\n    setSubClusterId(SubClusterId.newInstance(Integer.toString(subClusterId)));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "isRunning",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isRunning()\n{\r\n    return isRunning;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "setRunning",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setRunning(boolean runningMode)\n{\r\n    this.isRunning = runningMode;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getNewApplication",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetNewApplicationResponse getNewApplication(GetNewApplicationRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().getNewApplication(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "submitApplication",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SubmitApplicationResponse submitApplication(SubmitApplicationRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().submitApplication(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "forceKillApplication",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "KillApplicationResponse forceKillApplication(KillApplicationRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().forceKillApplication(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getClusterMetrics",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetClusterMetricsResponse getClusterMetrics(GetClusterMetricsRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().getClusterMetrics(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getClusterNodes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetClusterNodesResponse getClusterNodes(GetClusterNodesRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().getClusterNodes(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getQueueInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetQueueInfoResponse getQueueInfo(GetQueueInfoRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().getQueueInfo(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getQueueUserAcls",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetQueueUserAclsInfoResponse getQueueUserAcls(GetQueueUserAclsInfoRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().getQueueUserAcls(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "moveApplicationAcrossQueues",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "MoveApplicationAcrossQueuesResponse moveApplicationAcrossQueues(MoveApplicationAcrossQueuesRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().moveApplicationAcrossQueues(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getNewReservation",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetNewReservationResponse getNewReservation(GetNewReservationRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().getNewReservation(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "submitReservation",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReservationSubmissionResponse submitReservation(ReservationSubmissionRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().submitReservation(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "listReservations",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReservationListResponse listReservations(ReservationListRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().listReservations(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "updateReservation",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReservationUpdateResponse updateReservation(ReservationUpdateRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().updateReservation(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "deleteReservation",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReservationDeleteResponse deleteReservation(ReservationDeleteRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().deleteReservation(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getNodeToLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetNodesToLabelsResponse getNodeToLabels(GetNodesToLabelsRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().getNodeToLabels(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getLabelsToNodes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetLabelsToNodesResponse getLabelsToNodes(GetLabelsToNodesRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().getLabelsToNodes(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getClusterNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetClusterNodeLabelsResponse getClusterNodeLabels(GetClusterNodeLabelsRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().getClusterNodeLabels(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getApplicationReport",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetApplicationReportResponse getApplicationReport(GetApplicationReportRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().getApplicationReport(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getApplications",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetApplicationsResponse getApplications(GetApplicationsRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().getApplications(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getApplicationAttemptReport",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetApplicationAttemptReportResponse getApplicationAttemptReport(GetApplicationAttemptReportRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().getApplicationAttemptReport(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getApplicationAttempts",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetApplicationAttemptsResponse getApplicationAttempts(GetApplicationAttemptsRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().getApplicationAttempts(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getContainerReport",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetContainerReportResponse getContainerReport(GetContainerReportRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().getContainerReport(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetContainersResponse getContainers(GetContainersRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().getContainers(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetDelegationTokenResponse getDelegationToken(GetDelegationTokenRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().getDelegationToken(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "renewDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RenewDelegationTokenResponse renewDelegationToken(RenewDelegationTokenRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().renewDelegationToken(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "cancelDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "CancelDelegationTokenResponse cancelDelegationToken(CancelDelegationTokenRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().cancelDelegationToken(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "failApplicationAttempt",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FailApplicationAttemptResponse failApplicationAttempt(FailApplicationAttemptRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().failApplicationAttempt(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "updateApplicationPriority",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "UpdateApplicationPriorityResponse updateApplicationPriority(UpdateApplicationPriorityRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().updateApplicationPriority(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "signalToContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SignalContainerResponse signalToContainer(SignalContainerRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().signalToContainer(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "updateApplicationTimeouts",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "UpdateApplicationTimeoutsResponse updateApplicationTimeouts(UpdateApplicationTimeoutsRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().updateApplicationTimeouts(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getResourceProfiles",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetAllResourceProfilesResponse getResourceProfiles(GetAllResourceProfilesRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().getResourceProfiles(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getResourceProfile",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetResourceProfileResponse getResourceProfile(GetResourceProfileRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().getResourceProfile(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getResourceTypeInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetAllResourceTypeInfoResponse getResourceTypeInfo(GetAllResourceTypeInfoRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().getResourceTypeInfo(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getAttributesToNodes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetAttributesToNodesResponse getAttributesToNodes(GetAttributesToNodesRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().getAttributesToNodes(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getClusterNodeAttributes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetClusterNodeAttributesResponse getClusterNodeAttributes(GetClusterNodeAttributesRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().getClusterNodeAttributes(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getNodesToAttributes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetNodesToAttributesResponse getNodesToAttributes(GetNodesToAttributesRequest request) throws YarnException, IOException\n{\r\n    return getNextInterceptor().getNodesToAttributes(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getRouterClientRMService",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "MockRouterClientRMService getRouterClientRMService()\n{\r\n    Assert.assertNotNull(this.clientrmService);\r\n    return this.clientrmService;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "createConfiguration",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "Configuration createConfiguration()\n{\r\n    YarnConfiguration config = new YarnConfiguration();\r\n    String mockPassThroughInterceptorClass = PassThroughClientRequestInterceptor.class.getName();\r\n    config.set(YarnConfiguration.ROUTER_CLIENTRM_INTERCEPTOR_CLASS_PIPELINE, mockPassThroughInterceptorClass + \",\" + mockPassThroughInterceptorClass + \",\" + mockPassThroughInterceptorClass + \",\" + MockClientRequestInterceptor.class.getName());\r\n    config.setInt(YarnConfiguration.ROUTER_PIPELINE_CACHE_MAX_SIZE, TEST_MAX_CACHE_SIZE);\r\n    CapacitySchedulerConfiguration schedulerConf = new CapacitySchedulerConfiguration(config);\r\n    ReservationSystemTestUtil.setupQueueConfiguration(schedulerConf);\r\n    schedulerConf.setClass(YarnConfiguration.RM_SCHEDULER, CapacityScheduler.class, ResourceScheduler.class);\r\n    schedulerConf.setBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE, true);\r\n    return schedulerConf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setUp() throws IOException\n{\r\n    this.conf = createConfiguration();\r\n    this.dispatcher = new AsyncDispatcher();\r\n    this.dispatcher.init(conf);\r\n    this.dispatcher.start();\r\n    this.clientrmService = createAndStartRouterClientRMService();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "setUpConfig",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setUpConfig()\n{\r\n    this.conf = createConfiguration();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getConf",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Configuration getConf()\n{\r\n    return this.conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDown()\n{\r\n    if (clientrmService != null) {\r\n        clientrmService.stop();\r\n        clientrmService = null;\r\n    }\r\n    if (this.dispatcher != null) {\r\n        this.dispatcher.stop();\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getThreadPool",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ExecutorService getThreadPool()\n{\r\n    return threadpool;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "createAndStartRouterClientRMService",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "MockRouterClientRMService createAndStartRouterClientRMService()\n{\r\n    MockRouterClientRMService svc = new MockRouterClientRMService();\r\n    svc.init(conf);\r\n    svc.start();\r\n    return svc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getNewApplication",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetNewApplicationResponse getNewApplication(String user) throws YarnException, IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<GetNewApplicationResponse>() {\r\n\r\n        @Override\r\n        public GetNewApplicationResponse run() throws Exception {\r\n            GetNewApplicationRequest req = GetNewApplicationRequest.newInstance();\r\n            GetNewApplicationResponse response = getRouterClientRMService().getNewApplication(req);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "submitApplication",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SubmitApplicationResponse submitApplication(final ApplicationId appId, String user) throws YarnException, IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<SubmitApplicationResponse>() {\r\n\r\n        @Override\r\n        public SubmitApplicationResponse run() throws Exception {\r\n            ContainerLaunchContext amContainerSpec = mock(ContainerLaunchContext.class);\r\n            ApplicationSubmissionContext context = ApplicationSubmissionContext.newInstance(appId, MockApps.newAppName(), \"q1\", Priority.newInstance(0), amContainerSpec, false, false, -1, Resources.createResource(YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB), \"MockApp\");\r\n            SubmitApplicationRequest req = SubmitApplicationRequest.newInstance(context);\r\n            SubmitApplicationResponse response = getRouterClientRMService().submitApplication(req);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "forceKillApplication",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "KillApplicationResponse forceKillApplication(final ApplicationId appId, String user) throws YarnException, IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<KillApplicationResponse>() {\r\n\r\n        @Override\r\n        public KillApplicationResponse run() throws Exception {\r\n            KillApplicationRequest req = KillApplicationRequest.newInstance(appId);\r\n            KillApplicationResponse response = getRouterClientRMService().forceKillApplication(req);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getClusterMetrics",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetClusterMetricsResponse getClusterMetrics(String user) throws YarnException, IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<GetClusterMetricsResponse>() {\r\n\r\n        @Override\r\n        public GetClusterMetricsResponse run() throws Exception {\r\n            GetClusterMetricsRequest req = GetClusterMetricsRequest.newInstance();\r\n            GetClusterMetricsResponse response = getRouterClientRMService().getClusterMetrics(req);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getClusterNodes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetClusterNodesResponse getClusterNodes(String user) throws YarnException, IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<GetClusterNodesResponse>() {\r\n\r\n        @Override\r\n        public GetClusterNodesResponse run() throws Exception {\r\n            GetClusterNodesRequest req = GetClusterNodesRequest.newInstance();\r\n            GetClusterNodesResponse response = getRouterClientRMService().getClusterNodes(req);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getQueueInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetQueueInfoResponse getQueueInfo(String user) throws YarnException, IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<GetQueueInfoResponse>() {\r\n\r\n        @Override\r\n        public GetQueueInfoResponse run() throws Exception {\r\n            GetQueueInfoRequest req = GetQueueInfoRequest.newInstance(\"default\", false, false, false);\r\n            GetQueueInfoResponse response = getRouterClientRMService().getQueueInfo(req);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getQueueUserAcls",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetQueueUserAclsInfoResponse getQueueUserAcls(String user) throws YarnException, IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<GetQueueUserAclsInfoResponse>() {\r\n\r\n        @Override\r\n        public GetQueueUserAclsInfoResponse run() throws Exception {\r\n            GetQueueUserAclsInfoRequest req = GetQueueUserAclsInfoRequest.newInstance();\r\n            GetQueueUserAclsInfoResponse response = getRouterClientRMService().getQueueUserAcls(req);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "moveApplicationAcrossQueues",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "MoveApplicationAcrossQueuesResponse moveApplicationAcrossQueues(String user, final ApplicationId appId) throws YarnException, IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<MoveApplicationAcrossQueuesResponse>() {\r\n\r\n        @Override\r\n        public MoveApplicationAcrossQueuesResponse run() throws Exception {\r\n            MoveApplicationAcrossQueuesRequest req = MoveApplicationAcrossQueuesRequest.newInstance(appId, \"newQueue\");\r\n            MoveApplicationAcrossQueuesResponse response = getRouterClientRMService().moveApplicationAcrossQueues(req);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getNewReservation",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetNewReservationResponse getNewReservation(String user) throws YarnException, IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<GetNewReservationResponse>() {\r\n\r\n        @Override\r\n        public GetNewReservationResponse run() throws Exception {\r\n            GetNewReservationResponse response = getRouterClientRMService().getNewReservation(GetNewReservationRequest.newInstance());\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "submitReservation",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReservationSubmissionResponse submitReservation(String user, final ReservationId reservationId) throws YarnException, IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<ReservationSubmissionResponse>() {\r\n\r\n        @Override\r\n        public ReservationSubmissionResponse run() throws Exception {\r\n            Clock clock = new UTCClock();\r\n            long arrival = clock.getTime();\r\n            long duration = 60000;\r\n            long deadline = (long) (arrival + 1.05 * duration);\r\n            ReservationSubmissionRequest req = ReservationSystemTestUtil.createSimpleReservationRequest(reservationId, 1, arrival, deadline, duration);\r\n            ReservationSubmissionResponse response = getRouterClientRMService().submitReservation(req);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "updateReservation",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReservationUpdateResponse updateReservation(String user, final ReservationId reservationId) throws YarnException, IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<ReservationUpdateResponse>() {\r\n\r\n        @Override\r\n        public ReservationUpdateResponse run() throws Exception {\r\n            Clock clock = new UTCClock();\r\n            long arrival = clock.getTime();\r\n            long duration = 60000;\r\n            long deadline = (long) (arrival + 1.05 * duration);\r\n            ReservationDefinition rDef = createSimpleReservationRequest(1, arrival, deadline, duration, reservationId).getReservationDefinition();\r\n            ReservationUpdateRequest req = ReservationUpdateRequest.newInstance(rDef, reservationId);\r\n            ReservationUpdateResponse response = getRouterClientRMService().updateReservation(req);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "deleteReservation",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReservationDeleteResponse deleteReservation(String user, final ReservationId reservationId) throws YarnException, IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<ReservationDeleteResponse>() {\r\n\r\n        @Override\r\n        public ReservationDeleteResponse run() throws Exception {\r\n            ReservationDeleteRequest req = ReservationDeleteRequest.newInstance(reservationId);\r\n            ReservationDeleteResponse response = getRouterClientRMService().deleteReservation(req);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getNodeToLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetNodesToLabelsResponse getNodeToLabels(String user) throws YarnException, IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<GetNodesToLabelsResponse>() {\r\n\r\n        @Override\r\n        public GetNodesToLabelsResponse run() throws Exception {\r\n            GetNodesToLabelsRequest req = GetNodesToLabelsRequest.newInstance();\r\n            GetNodesToLabelsResponse response = getRouterClientRMService().getNodeToLabels(req);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getLabelsToNodes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetLabelsToNodesResponse getLabelsToNodes(String user) throws YarnException, IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<GetLabelsToNodesResponse>() {\r\n\r\n        @Override\r\n        public GetLabelsToNodesResponse run() throws Exception {\r\n            GetLabelsToNodesRequest req = GetLabelsToNodesRequest.newInstance();\r\n            GetLabelsToNodesResponse response = getRouterClientRMService().getLabelsToNodes(req);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getClusterNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetClusterNodeLabelsResponse getClusterNodeLabels(String user) throws YarnException, IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<GetClusterNodeLabelsResponse>() {\r\n\r\n        @Override\r\n        public GetClusterNodeLabelsResponse run() throws Exception {\r\n            GetClusterNodeLabelsRequest req = GetClusterNodeLabelsRequest.newInstance();\r\n            GetClusterNodeLabelsResponse response = getRouterClientRMService().getClusterNodeLabels(req);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getApplicationReport",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetApplicationReportResponse getApplicationReport(String user, final ApplicationId appId) throws YarnException, IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<GetApplicationReportResponse>() {\r\n\r\n        @Override\r\n        public GetApplicationReportResponse run() throws Exception {\r\n            GetApplicationReportRequest req = GetApplicationReportRequest.newInstance(appId);\r\n            GetApplicationReportResponse response = getRouterClientRMService().getApplicationReport(req);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getApplications",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetApplicationsResponse getApplications(String user) throws YarnException, IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<GetApplicationsResponse>() {\r\n\r\n        @Override\r\n        public GetApplicationsResponse run() throws Exception {\r\n            GetApplicationsRequest req = GetApplicationsRequest.newInstance();\r\n            GetApplicationsResponse response = getRouterClientRMService().getApplications(req);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getApplicationAttemptReport",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetApplicationAttemptReportResponse getApplicationAttemptReport(String user, final ApplicationAttemptId appAttemptId) throws YarnException, IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<GetApplicationAttemptReportResponse>() {\r\n\r\n        @Override\r\n        public GetApplicationAttemptReportResponse run() throws Exception {\r\n            GetApplicationAttemptReportRequest req = GetApplicationAttemptReportRequest.newInstance(appAttemptId);\r\n            GetApplicationAttemptReportResponse response = getRouterClientRMService().getApplicationAttemptReport(req);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getApplicationAttempts",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetApplicationAttemptsResponse getApplicationAttempts(String user, final ApplicationId applicationId) throws YarnException, IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<GetApplicationAttemptsResponse>() {\r\n\r\n        @Override\r\n        public GetApplicationAttemptsResponse run() throws Exception {\r\n            GetApplicationAttemptsRequest req = GetApplicationAttemptsRequest.newInstance(applicationId);\r\n            GetApplicationAttemptsResponse response = getRouterClientRMService().getApplicationAttempts(req);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getContainerReport",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetContainerReportResponse getContainerReport(String user, final ContainerId containerId) throws YarnException, IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<GetContainerReportResponse>() {\r\n\r\n        @Override\r\n        public GetContainerReportResponse run() throws Exception {\r\n            GetContainerReportRequest req = GetContainerReportRequest.newInstance(containerId);\r\n            GetContainerReportResponse response = getRouterClientRMService().getContainerReport(req);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetContainersResponse getContainers(String user, final ApplicationAttemptId appAttemptId) throws YarnException, IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<GetContainersResponse>() {\r\n\r\n        @Override\r\n        public GetContainersResponse run() throws Exception {\r\n            GetContainersRequest req = GetContainersRequest.newInstance(appAttemptId);\r\n            GetContainersResponse response = getRouterClientRMService().getContainers(req);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetDelegationTokenResponse getDelegationToken(final String user) throws YarnException, IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<GetDelegationTokenResponse>() {\r\n\r\n        @Override\r\n        public GetDelegationTokenResponse run() throws Exception {\r\n            GetDelegationTokenRequest req = GetDelegationTokenRequest.newInstance(user);\r\n            GetDelegationTokenResponse response = getRouterClientRMService().getDelegationToken(req);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "renewDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RenewDelegationTokenResponse renewDelegationToken(String user, final Token token) throws YarnException, IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<RenewDelegationTokenResponse>() {\r\n\r\n        @Override\r\n        public RenewDelegationTokenResponse run() throws Exception {\r\n            RenewDelegationTokenRequest req = RenewDelegationTokenRequest.newInstance(token);\r\n            RenewDelegationTokenResponse response = getRouterClientRMService().renewDelegationToken(req);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "cancelDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "CancelDelegationTokenResponse cancelDelegationToken(String user, final Token token) throws YarnException, IOException, InterruptedException\n{\r\n    return UserGroupInformation.createRemoteUser(user).doAs(new PrivilegedExceptionAction<CancelDelegationTokenResponse>() {\r\n\r\n        @Override\r\n        public CancelDelegationTokenResponse run() throws Exception {\r\n            CancelDelegationTokenRequest req = CancelDelegationTokenRequest.newInstance(token);\r\n            CancelDelegationTokenResponse response = getRouterClientRMService().cancelDelegationToken(req);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "createSimpleReservationRequest",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "ReservationSubmissionRequest createSimpleReservationRequest(int numContainers, long arrival, long deadline, long duration, ReservationId reservationId)\n{\r\n    ReservationRequest r = ReservationRequest.newInstance(Resource.newInstance(1024, 1), numContainers, 1, duration);\r\n    ReservationRequests reqs = ReservationRequests.newInstance(Collections.singletonList(r), ReservationRequestInterpreter.R_ALL);\r\n    ReservationDefinition rDef = ReservationDefinition.newInstance(arrival, deadline, reqs, \"testRouterClientRMService#reservation\");\r\n    ReservationSubmissionRequest request = ReservationSubmissionRequest.newInstance(rDef, \"dedicated\", reservationId);\r\n    return request;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "init",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void init(String user)\n{\r\n    MockRM mockRM = new MockRM(super.getConf()) {\r\n\r\n        @Override\r\n        protected ClientRMService createClientRMService() {\r\n            return new ClientRMService(getRMContext(), getResourceScheduler(), rmAppManager, applicationACLsManager, queueACLsManager, getRMContext().getRMDelegationTokenSecretManager()) {\r\n\r\n                @Override\r\n                protected void serviceStart() {\r\n                }\r\n\r\n                @Override\r\n                protected void serviceStop() {\r\n                }\r\n\r\n                @Override\r\n                public MoveApplicationAcrossQueuesResponse moveApplicationAcrossQueues(MoveApplicationAcrossQueuesRequest request) throws YarnException {\r\n                    return MoveApplicationAcrossQueuesResponse.newInstance();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    mockRM.init(super.getConf());\r\n    mockRM.start();\r\n    try {\r\n        mockRM.registerNode(\"127.0.0.1:1\", 102400, 100);\r\n        Thread.sleep(1050);\r\n    } catch (Exception e) {\r\n        Assert.fail(e.getMessage());\r\n    }\r\n    super.setRMClient(mockRM.getClientRMService());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "testClusterMetricsMerge",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testClusterMetricsMerge()\n{\r\n    ArrayList<GetClusterMetricsResponse> responses = new ArrayList<>();\r\n    responses.add(getClusterMetricsResponse(1));\r\n    responses.add(getClusterMetricsResponse(2));\r\n    GetClusterMetricsResponse result = RouterYarnClientUtils.merge(responses);\r\n    YarnClusterMetrics resultMetrics = result.getClusterMetrics();\r\n    Assert.assertEquals(3, resultMetrics.getNumNodeManagers());\r\n    Assert.assertEquals(3, resultMetrics.getNumActiveNodeManagers());\r\n    Assert.assertEquals(3, resultMetrics.getNumDecommissionedNodeManagers());\r\n    Assert.assertEquals(3, resultMetrics.getNumLostNodeManagers());\r\n    Assert.assertEquals(3, resultMetrics.getNumRebootedNodeManagers());\r\n    Assert.assertEquals(3, resultMetrics.getNumUnhealthyNodeManagers());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getClusterMetricsResponse",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "GetClusterMetricsResponse getClusterMetricsResponse(int value)\n{\r\n    YarnClusterMetrics metrics = YarnClusterMetrics.newInstance(value);\r\n    metrics.setNumUnhealthyNodeManagers(value);\r\n    metrics.setNumRebootedNodeManagers(value);\r\n    metrics.setNumLostNodeManagers(value);\r\n    metrics.setNumDecommissionedNodeManagers(value);\r\n    metrics.setNumActiveNodeManagers(value);\r\n    metrics.setNumNodeManagers(value);\r\n    return GetClusterMetricsResponse.newInstance(metrics);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "testMergeApplications",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testMergeApplications()\n{\r\n    ArrayList<GetApplicationsResponse> responses = new ArrayList<>();\r\n    responses.add(getApplicationsResponse(1, false));\r\n    responses.add(getApplicationsResponse(2, false));\r\n    GetApplicationsResponse result = RouterYarnClientUtils.mergeApplications(responses, false);\r\n    Assert.assertNotNull(result);\r\n    Assert.assertEquals(2, result.getApplicationList().size());\r\n    String appName1 = result.getApplicationList().get(0).getName();\r\n    String appName2 = result.getApplicationList().get(1).getName();\r\n    Assert.assertEquals(false, appName1.contains(UnmanagedApplicationManager.APP_NAME));\r\n    Assert.assertEquals(false, appName2.contains(UnmanagedApplicationManager.APP_NAME));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "testMergeUnmanagedApplications",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testMergeUnmanagedApplications()\n{\r\n    ArrayList<GetApplicationsResponse> responses = new ArrayList<>();\r\n    responses.add(getApplicationsResponse(1, true));\r\n    GetApplicationsResponse result = RouterYarnClientUtils.mergeApplications(responses, true);\r\n    Assert.assertNotNull(result);\r\n    Assert.assertEquals(1, result.getApplicationList().size());\r\n    ApplicationReport appReport = result.getApplicationList().iterator().next();\r\n    String appName = appReport.getName();\r\n    Assert.assertTrue(appName.startsWith(PARTIAL_REPORT));\r\n    ApplicationResourceUsageReport resourceUsageReport = appReport.getApplicationResourceUsageReport();\r\n    Assert.assertEquals(2, resourceUsageReport.getNumUsedContainers());\r\n    Assert.assertEquals(4, resourceUsageReport.getNumReservedContainers());\r\n    result = RouterYarnClientUtils.mergeApplications(responses, false);\r\n    Assert.assertNotNull(result);\r\n    Assert.assertTrue(result.getApplicationList().isEmpty());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "testMergeApplicationsNullResourceUsage",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testMergeApplicationsNullResourceUsage()\n{\r\n    ApplicationId appId = ApplicationId.newInstance(1234, 1);\r\n    ApplicationReport appReport = ApplicationReport.newInstance(appId, ApplicationAttemptId.newInstance(appId, 1), \"user\", \"queue\", \"app1\", \"host\", 124, null, YarnApplicationState.RUNNING, \"diagnostics\", \"url\", 0, 0, 0, FinalApplicationStatus.SUCCEEDED, null, \"N/A\", 0.53789f, \"YARN\", null, null, false, null, null, null);\r\n    ApplicationReport uamAppReport = ApplicationReport.newInstance(appId, ApplicationAttemptId.newInstance(appId, 1), \"user\", \"queue\", \"app1\", \"host\", 124, null, YarnApplicationState.RUNNING, \"diagnostics\", \"url\", 0, 0, 0, FinalApplicationStatus.SUCCEEDED, null, \"N/A\", 0.53789f, \"YARN\", null, null, true, null, null, null);\r\n    ArrayList<GetApplicationsResponse> responses = new ArrayList<>();\r\n    List<ApplicationReport> applications = new ArrayList<>();\r\n    applications.add(appReport);\r\n    applications.add(uamAppReport);\r\n    responses.add(GetApplicationsResponse.newInstance(applications));\r\n    GetApplicationsResponse result = RouterYarnClientUtils.mergeApplications(responses, false);\r\n    Assert.assertNotNull(result);\r\n    Assert.assertEquals(1, result.getApplicationList().size());\r\n    String appName = result.getApplicationList().get(0).getName();\r\n    Assert.assertFalse(appName.contains(UnmanagedApplicationManager.APP_NAME));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getApplicationsResponse",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "GetApplicationsResponse getApplicationsResponse(int value, boolean uamOnly)\n{\r\n    String appName = uamOnly ? UnmanagedApplicationManager.APP_NAME : \"appname\";\r\n    List<ApplicationReport> applications = new ArrayList<>();\r\n    ApplicationId appId = ApplicationId.newInstance(1234, value);\r\n    Resource resource = Resource.newInstance(1024, 1);\r\n    ApplicationResourceUsageReport appResourceUsageReport = ApplicationResourceUsageReport.newInstance(1, 2, resource, resource, resource, null, 0.1f, 0.1f, null);\r\n    ApplicationReport appReport = ApplicationReport.newInstance(appId, ApplicationAttemptId.newInstance(appId, 1), \"user\", \"queue\", appName, \"host\", 124, null, YarnApplicationState.RUNNING, \"diagnostics\", \"url\", 0, 0, 0, FinalApplicationStatus.SUCCEEDED, appResourceUsageReport, \"N/A\", 0.53789f, \"YARN\", null, null, uamOnly, null, null, null);\r\n    ApplicationId appId2 = ApplicationId.newInstance(1234, value);\r\n    ApplicationReport appReport2 = ApplicationReport.newInstance(appId2, ApplicationAttemptId.newInstance(appId, 1), \"user\", \"queue\", UnmanagedApplicationManager.APP_NAME, \"host\", 124, null, YarnApplicationState.RUNNING, \"diagnostics\", \"url\", 0, 0, 0, FinalApplicationStatus.SUCCEEDED, appResourceUsageReport, \"N/A\", 0.53789f, \"YARN\", null, null, true, null, null, null);\r\n    applications.add(appReport);\r\n    applications.add(appReport2);\r\n    return GetApplicationsResponse.newInstance(applications);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void setUp()\n{\r\n    super.setUpConfig();\r\n    interceptor = new TestableFederationInterceptorREST();\r\n    stateStore = new MemoryFederationStateStore();\r\n    stateStore.init(this.getConf());\r\n    FederationStateStoreFacade.getInstance().reinitialize(stateStore, getConf());\r\n    stateStoreUtil = new FederationStateStoreTestUtil(stateStore);\r\n    interceptor.setConf(this.getConf());\r\n    interceptor.init(user);\r\n    good = SubClusterId.newInstance(\"1\");\r\n    bad1 = SubClusterId.newInstance(\"2\");\r\n    bad2 = SubClusterId.newInstance(\"3\");\r\n    scs.add(good);\r\n    scs.add(bad1);\r\n    scs.add(bad2);\r\n    interceptor.registerBadSubCluster(bad1);\r\n    interceptor.registerBadSubCluster(bad2);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDown()\n{\r\n    interceptor.shutdown();\r\n    super.tearDown();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "setupCluster",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setupCluster(List<SubClusterId> scsToRegister) throws YarnException\n{\r\n    try {\r\n        stateStoreUtil.deregisterAllSubClusters();\r\n        for (SubClusterId sc : scsToRegister) {\r\n            stateStoreUtil.registerSubCluster(sc);\r\n        }\r\n    } catch (YarnException e) {\r\n        LOG.error(e.getMessage());\r\n        Assert.fail();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "createConfiguration",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "YarnConfiguration createConfiguration()\n{\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.FEDERATION_ENABLED, true);\r\n    conf.set(YarnConfiguration.ROUTER_WEBAPP_DEFAULT_INTERCEPTOR_CLASS, MockDefaultRequestInterceptorREST.class.getName());\r\n    String mockPassThroughInterceptorClass = PassThroughClientRequestInterceptor.class.getName();\r\n    conf.set(YarnConfiguration.ROUTER_CLIENTRM_INTERCEPTOR_CLASS_PIPELINE, mockPassThroughInterceptorClass + \",\" + TestableFederationClientInterceptor.class.getName());\r\n    conf.set(YarnConfiguration.FEDERATION_POLICY_MANAGER, UniformBroadcastPolicyManager.class.getName());\r\n    conf.setInt(YarnConfiguration.FEDERATION_CACHE_TIME_TO_LIVE_SECS, 0);\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testGetNewApplicationOneBadSC",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetNewApplicationOneBadSC() throws YarnException, IOException, InterruptedException\n{\r\n    setupCluster(Arrays.asList(bad2));\r\n    Response response = interceptor.createNewApplication(null);\r\n    Assert.assertEquals(SERVICE_UNAVAILABLE, response.getStatus());\r\n    Assert.assertEquals(FederationPolicyUtils.NO_ACTIVE_SUBCLUSTER_AVAILABLE, response.getEntity());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testGetNewApplicationTwoBadSCs",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetNewApplicationTwoBadSCs() throws YarnException, IOException, InterruptedException\n{\r\n    setupCluster(Arrays.asList(bad1, bad2));\r\n    Response response = interceptor.createNewApplication(null);\r\n    Assert.assertEquals(SERVICE_UNAVAILABLE, response.getStatus());\r\n    Assert.assertEquals(FederationPolicyUtils.NO_ACTIVE_SUBCLUSTER_AVAILABLE, response.getEntity());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testGetNewApplicationOneBadOneGood",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testGetNewApplicationOneBadOneGood() throws YarnException, IOException, InterruptedException\n{\r\n    System.out.println(\"Test getNewApplication with one bad, one good SC\");\r\n    setupCluster(Arrays.asList(good, bad2));\r\n    Response response = interceptor.createNewApplication(null);\r\n    Assert.assertEquals(OK, response.getStatus());\r\n    NewApplication newApp = (NewApplication) response.getEntity();\r\n    ApplicationId appId = ApplicationId.fromString(newApp.getApplicationId());\r\n    Assert.assertEquals(Integer.parseInt(good.getId()), appId.getClusterTimestamp());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testSubmitApplicationOneBadSC",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testSubmitApplicationOneBadSC() throws YarnException, IOException, InterruptedException\n{\r\n    setupCluster(Arrays.asList(bad2));\r\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    ApplicationSubmissionContextInfo context = new ApplicationSubmissionContextInfo();\r\n    context.setApplicationId(appId.toString());\r\n    Response response = interceptor.submitApplication(context, null);\r\n    Assert.assertEquals(SERVICE_UNAVAILABLE, response.getStatus());\r\n    Assert.assertEquals(FederationPolicyUtils.NO_ACTIVE_SUBCLUSTER_AVAILABLE, response.getEntity());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testSubmitApplicationTwoBadSCs",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testSubmitApplicationTwoBadSCs() throws YarnException, IOException, InterruptedException\n{\r\n    setupCluster(Arrays.asList(bad1, bad2));\r\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    ApplicationSubmissionContextInfo context = new ApplicationSubmissionContextInfo();\r\n    context.setApplicationId(appId.toString());\r\n    Response response = interceptor.submitApplication(context, null);\r\n    Assert.assertEquals(SERVICE_UNAVAILABLE, response.getStatus());\r\n    Assert.assertEquals(FederationPolicyUtils.NO_ACTIVE_SUBCLUSTER_AVAILABLE, response.getEntity());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testSubmitApplicationOneBadOneGood",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testSubmitApplicationOneBadOneGood() throws YarnException, IOException, InterruptedException\n{\r\n    System.out.println(\"Test submitApplication with one bad, one good SC\");\r\n    setupCluster(Arrays.asList(good, bad2));\r\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    ApplicationSubmissionContextInfo context = new ApplicationSubmissionContextInfo();\r\n    context.setApplicationId(appId.toString());\r\n    Response response = interceptor.submitApplication(context, null);\r\n    Assert.assertEquals(ACCEPTED, response.getStatus());\r\n    Assert.assertEquals(good, stateStore.getApplicationHomeSubCluster(GetApplicationHomeSubClusterRequest.newInstance(appId)).getApplicationHomeSubCluster().getHomeSubCluster());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testGetAppsOneBadSC",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testGetAppsOneBadSC() throws YarnException, IOException, InterruptedException\n{\r\n    setupCluster(Arrays.asList(bad2));\r\n    AppsInfo response = interceptor.getApps(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);\r\n    Assert.assertNull(response);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testGetAppsTwoBadSCs",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testGetAppsTwoBadSCs() throws YarnException, IOException, InterruptedException\n{\r\n    setupCluster(Arrays.asList(bad1, bad2));\r\n    AppsInfo response = interceptor.getApps(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);\r\n    Assert.assertNull(response);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testGetAppsOneBadOneGood",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetAppsOneBadOneGood() throws YarnException, IOException, InterruptedException\n{\r\n    setupCluster(Arrays.asList(good, bad2));\r\n    AppsInfo response = interceptor.getApps(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);\r\n    Assert.assertNotNull(response);\r\n    Assert.assertEquals(1, response.getApps().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testGetNodeOneBadSC",
  "errType" : [ "NotFoundException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetNodeOneBadSC() throws YarnException, IOException, InterruptedException\n{\r\n    setupCluster(Arrays.asList(bad2));\r\n    try {\r\n        interceptor.getNode(\"testGetNodeOneBadSC\");\r\n        Assert.fail();\r\n    } catch (NotFoundException e) {\r\n        Assert.assertTrue(e.getMessage().contains(\"nodeId, testGetNodeOneBadSC, is not found\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testGetNodeTwoBadSCs",
  "errType" : [ "NotFoundException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetNodeTwoBadSCs() throws YarnException, IOException, InterruptedException\n{\r\n    setupCluster(Arrays.asList(bad1, bad2));\r\n    try {\r\n        interceptor.getNode(\"testGetNodeTwoBadSCs\");\r\n        Assert.fail();\r\n    } catch (NotFoundException e) {\r\n        Assert.assertTrue(e.getMessage().contains(\"nodeId, testGetNodeTwoBadSCs, is not found\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testGetNodeOneBadOneGood",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetNodeOneBadOneGood() throws YarnException, IOException, InterruptedException\n{\r\n    setupCluster(Arrays.asList(good, bad2));\r\n    NodeInfo response = interceptor.getNode(null);\r\n    Assert.assertNotNull(response);\r\n    Assert.assertEquals(good.getId(), Long.toString(response.getLastHealthUpdate()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testGetNodesOneBadSC",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetNodesOneBadSC() throws YarnException, IOException, InterruptedException\n{\r\n    setupCluster(Arrays.asList(bad2));\r\n    NodesInfo response = interceptor.getNodes(null);\r\n    Assert.assertNotNull(response);\r\n    Assert.assertEquals(0, response.getNodes().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testGetNodesTwoBadSCs",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetNodesTwoBadSCs() throws YarnException, IOException, InterruptedException\n{\r\n    setupCluster(Arrays.asList(bad1, bad2));\r\n    NodesInfo response = interceptor.getNodes(null);\r\n    Assert.assertNotNull(response);\r\n    Assert.assertEquals(0, response.getNodes().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testGetNodesOneBadOneGood",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testGetNodesOneBadOneGood() throws YarnException, IOException, InterruptedException\n{\r\n    setupCluster(Arrays.asList(good, bad2));\r\n    NodesInfo response = interceptor.getNodes(null);\r\n    Assert.assertNotNull(response);\r\n    Assert.assertEquals(1, response.getNodes().size());\r\n    Assert.assertEquals(good.getId(), Long.toString(response.getNodes().get(0).getLastHealthUpdate()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testGetClusterMetricsOneBadSC",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetClusterMetricsOneBadSC() throws YarnException, IOException, InterruptedException\n{\r\n    setupCluster(Arrays.asList(bad2));\r\n    ClusterMetricsInfo response = interceptor.getClusterMetricsInfo();\r\n    Assert.assertNotNull(response);\r\n    checkEmptyMetrics(response);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testGetClusterMetricsTwoBadSCs",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetClusterMetricsTwoBadSCs() throws YarnException, IOException, InterruptedException\n{\r\n    setupCluster(Arrays.asList(bad1, bad2));\r\n    ClusterMetricsInfo response = interceptor.getClusterMetricsInfo();\r\n    Assert.assertNotNull(response);\r\n    Assert.assertEquals(0, response.getAppsSubmitted());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testGetClusterMetricsOneBadOneGood",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetClusterMetricsOneBadOneGood() throws YarnException, IOException, InterruptedException\n{\r\n    setupCluster(Arrays.asList(good, bad2));\r\n    ClusterMetricsInfo response = interceptor.getClusterMetricsInfo();\r\n    Assert.assertNotNull(response);\r\n    checkMetricsFromGoodSC(response);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "checkMetricsFromGoodSC",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void checkMetricsFromGoodSC(ClusterMetricsInfo response)\n{\r\n    Assert.assertEquals(Integer.parseInt(good.getId()), response.getAppsSubmitted());\r\n    Assert.assertEquals(Integer.parseInt(good.getId()), response.getAppsCompleted());\r\n    Assert.assertEquals(Integer.parseInt(good.getId()), response.getAppsPending());\r\n    Assert.assertEquals(Integer.parseInt(good.getId()), response.getAppsRunning());\r\n    Assert.assertEquals(Integer.parseInt(good.getId()), response.getAppsFailed());\r\n    Assert.assertEquals(Integer.parseInt(good.getId()), response.getAppsKilled());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "checkEmptyMetrics",
  "errType" : null,
  "containingMethodsNum" : 25,
  "sourceCodeText" : "void checkEmptyMetrics(ClusterMetricsInfo response)\n{\r\n    Assert.assertEquals(0, response.getAppsSubmitted());\r\n    Assert.assertEquals(0, response.getAppsCompleted());\r\n    Assert.assertEquals(0, response.getAppsPending());\r\n    Assert.assertEquals(0, response.getAppsRunning());\r\n    Assert.assertEquals(0, response.getAppsFailed());\r\n    Assert.assertEquals(0, response.getAppsKilled());\r\n    Assert.assertEquals(0, response.getReservedMB());\r\n    Assert.assertEquals(0, response.getAvailableMB());\r\n    Assert.assertEquals(0, response.getAllocatedMB());\r\n    Assert.assertEquals(0, response.getReservedVirtualCores());\r\n    Assert.assertEquals(0, response.getAvailableVirtualCores());\r\n    Assert.assertEquals(0, response.getAllocatedVirtualCores());\r\n    Assert.assertEquals(0, response.getContainersAllocated());\r\n    Assert.assertEquals(0, response.getReservedContainers());\r\n    Assert.assertEquals(0, response.getPendingContainers());\r\n    Assert.assertEquals(0, response.getTotalMB());\r\n    Assert.assertEquals(0, response.getTotalVirtualCores());\r\n    Assert.assertEquals(0, response.getTotalNodes());\r\n    Assert.assertEquals(0, response.getLostNodes());\r\n    Assert.assertEquals(0, response.getUnhealthyNodes());\r\n    Assert.assertEquals(0, response.getDecommissioningNodes());\r\n    Assert.assertEquals(0, response.getDecommissionedNodes());\r\n    Assert.assertEquals(0, response.getRebootedNodes());\r\n    Assert.assertEquals(0, response.getActiveNodes());\r\n    Assert.assertEquals(0, response.getShutdownNodes());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "getClientRMProxyForSubCluster",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "ApplicationClientProtocol getClientRMProxyForSubCluster(SubClusterId subClusterId) throws YarnException\n{\r\n    MockRM mockRM = null;\r\n    synchronized (this) {\r\n        if (mockRMs.containsKey(subClusterId)) {\r\n            mockRM = mockRMs.get(subClusterId);\r\n        } else {\r\n            mockRM = new MockRM();\r\n            if (badSubCluster.contains(subClusterId)) {\r\n                RMContext rmContext = mock(RMContext.class);\r\n                return new MockClientRMService(rmContext, null, null, null, null, null);\r\n            }\r\n            mockRM.init(super.getConf());\r\n            mockRM.start();\r\n            try {\r\n                mockRM.registerNode(\"h1:1234\", 1024);\r\n            } catch (Exception e) {\r\n                Assert.fail(e.getMessage());\r\n            }\r\n            mockRMs.put(subClusterId, mockRM);\r\n        }\r\n        return mockRM.getClientRMService();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\clientrm",
  "methodName" : "registerBadSubCluster",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void registerBadSubCluster(SubClusterId badSC) throws IOException\n{\r\n    badSubCluster.add(badSC);\r\n    if (mockRMs.contains(badSC)) {\r\n        mockRMs.get(badSC).close();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "registerBadSubCluster",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void registerBadSubCluster(SubClusterId badSC)\n{\r\n    getOrCreateInterceptorForSubCluster(badSC, \"1.2.3.4:4\");\r\n    badSubCluster.add(badSC);\r\n    MockDefaultRequestInterceptorREST interceptor = (MockDefaultRequestInterceptorREST) super.getInterceptorForSubCluster(badSC);\r\n    interceptor.setRunning(false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testMerge4DifferentApps",
  "errType" : null,
  "containingMethodsNum" : 41,
  "sourceCodeText" : "void testMerge4DifferentApps()\n{\r\n    AppsInfo apps = new AppsInfo();\r\n    int value = 1000;\r\n    AppInfo app1 = new AppInfo();\r\n    app1.setAppId(APPID1.toString());\r\n    app1.setAMHostHttpAddress(\"http://i_am_the_AM1:1234\");\r\n    app1.setState(YarnApplicationState.FINISHED);\r\n    app1.setNumAMContainerPreempted(value);\r\n    apps.add(app1);\r\n    AppInfo app2 = new AppInfo();\r\n    app2.setAppId(APPID2.toString());\r\n    app2.setAMHostHttpAddress(\"http://i_am_the_AM2:1234\");\r\n    app2.setState(YarnApplicationState.ACCEPTED);\r\n    app2.setAllocatedVCores(2 * value);\r\n    apps.add(app2);\r\n    AppInfo app3 = new AppInfo();\r\n    app3.setAppId(APPID3.toString());\r\n    app3.setAMHostHttpAddress(\"http://i_am_the_AM3:1234\");\r\n    app3.setState(YarnApplicationState.RUNNING);\r\n    app3.setReservedMB(3 * value);\r\n    apps.add(app3);\r\n    AppInfo app4 = new AppInfo();\r\n    app4.setAppId(APPID4.toString());\r\n    app4.setAMHostHttpAddress(\"http://i_am_the_AM4:1234\");\r\n    app4.setState(YarnApplicationState.NEW);\r\n    app4.setAllocatedMB(4 * value);\r\n    apps.add(app4);\r\n    AppsInfo result = RouterWebServiceUtil.mergeAppsInfo(apps.getApps(), false);\r\n    Assert.assertNotNull(result);\r\n    Assert.assertEquals(4, result.getApps().size());\r\n    List<String> appIds = new ArrayList<String>();\r\n    AppInfo appInfo1 = null, appInfo2 = null, appInfo3 = null, appInfo4 = null;\r\n    for (AppInfo app : result.getApps()) {\r\n        appIds.add(app.getAppId());\r\n        if (app.getAppId().equals(APPID1.toString())) {\r\n            appInfo1 = app;\r\n        }\r\n        if (app.getAppId().equals(APPID2.toString())) {\r\n            appInfo2 = app;\r\n        }\r\n        if (app.getAppId().equals(APPID3.toString())) {\r\n            appInfo3 = app;\r\n        }\r\n        if (app.getAppId().equals(APPID4.toString())) {\r\n            appInfo4 = app;\r\n        }\r\n    }\r\n    Assert.assertTrue(appIds.contains(APPID1.toString()));\r\n    Assert.assertTrue(appIds.contains(APPID2.toString()));\r\n    Assert.assertTrue(appIds.contains(APPID3.toString()));\r\n    Assert.assertTrue(appIds.contains(APPID4.toString()));\r\n    Assert.assertEquals(app1.getState(), appInfo1.getState());\r\n    Assert.assertEquals(app1.getNumAMContainerPreempted(), appInfo1.getNumAMContainerPreempted());\r\n    Assert.assertEquals(app2.getState(), appInfo2.getState());\r\n    Assert.assertEquals(app3.getAllocatedVCores(), appInfo3.getAllocatedVCores());\r\n    Assert.assertEquals(app3.getState(), appInfo3.getState());\r\n    Assert.assertEquals(app3.getReservedMB(), appInfo3.getReservedMB());\r\n    Assert.assertEquals(app4.getState(), appInfo4.getState());\r\n    Assert.assertEquals(app3.getAllocatedMB(), appInfo3.getAllocatedMB());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testMergeAppsFinished",
  "errType" : null,
  "containingMethodsNum" : 23,
  "sourceCodeText" : "void testMergeAppsFinished()\n{\r\n    AppsInfo apps = new AppsInfo();\r\n    String amHost = \"http://i_am_the_AM1:1234\";\r\n    AppInfo am = new AppInfo();\r\n    am.setAppId(APPID1.toString());\r\n    am.setAMHostHttpAddress(amHost);\r\n    am.setState(YarnApplicationState.FINISHED);\r\n    int value = 1000;\r\n    setAppInfoFinished(am, value);\r\n    apps.add(am);\r\n    AppInfo uam1 = new AppInfo();\r\n    uam1.setAppId(APPID1.toString());\r\n    apps.add(uam1);\r\n    setAppInfoFinished(uam1, value);\r\n    AppInfo uam2 = new AppInfo();\r\n    uam2.setAppId(APPID1.toString());\r\n    apps.add(uam2);\r\n    setAppInfoFinished(uam2, value);\r\n    AppsInfo result = RouterWebServiceUtil.mergeAppsInfo(apps.getApps(), false);\r\n    Assert.assertNotNull(result);\r\n    Assert.assertEquals(1, result.getApps().size());\r\n    AppInfo app = result.getApps().get(0);\r\n    Assert.assertEquals(APPID1.toString(), app.getAppId());\r\n    Assert.assertEquals(amHost, app.getAMHostHttpAddress());\r\n    Assert.assertEquals(value * 3, app.getPreemptedResourceMB());\r\n    Assert.assertEquals(value * 3, app.getPreemptedResourceVCores());\r\n    Assert.assertEquals(value * 3, app.getNumNonAMContainerPreempted());\r\n    Assert.assertEquals(value * 3, app.getNumAMContainerPreempted());\r\n    Assert.assertEquals(value * 3, app.getPreemptedMemorySeconds());\r\n    Assert.assertEquals(value * 3, app.getPreemptedVcoreSeconds());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "setAppInfoFinished",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void setAppInfoFinished(AppInfo am, int value)\n{\r\n    am.setPreemptedResourceMB(value);\r\n    am.setPreemptedResourceVCores(value);\r\n    am.setNumNonAMContainerPreempted(value);\r\n    am.setNumAMContainerPreempted(value);\r\n    am.setPreemptedMemorySeconds(value);\r\n    am.setPreemptedVcoreSeconds(value);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testMergeAppsRunning",
  "errType" : null,
  "containingMethodsNum" : 27,
  "sourceCodeText" : "void testMergeAppsRunning()\n{\r\n    AppsInfo apps = new AppsInfo();\r\n    String amHost = \"http://i_am_the_AM2:1234\";\r\n    AppInfo am = new AppInfo();\r\n    am.setAppId(APPID2.toString());\r\n    am.setAMHostHttpAddress(amHost);\r\n    am.setState(YarnApplicationState.RUNNING);\r\n    int value = 1000;\r\n    setAppInfoRunning(am, value);\r\n    apps.add(am);\r\n    AppInfo uam1 = new AppInfo();\r\n    uam1.setAppId(APPID2.toString());\r\n    uam1.setState(YarnApplicationState.RUNNING);\r\n    apps.add(uam1);\r\n    setAppInfoRunning(uam1, value);\r\n    AppInfo uam2 = new AppInfo();\r\n    uam2.setAppId(APPID2.toString());\r\n    uam2.setState(YarnApplicationState.RUNNING);\r\n    apps.add(uam2);\r\n    setAppInfoRunning(uam2, value);\r\n    AppsInfo result = RouterWebServiceUtil.mergeAppsInfo(apps.getApps(), false);\r\n    Assert.assertNotNull(result);\r\n    Assert.assertEquals(1, result.getApps().size());\r\n    AppInfo app = result.getApps().get(0);\r\n    Assert.assertEquals(APPID2.toString(), app.getAppId());\r\n    Assert.assertEquals(amHost, app.getAMHostHttpAddress());\r\n    Assert.assertEquals(value * 3, app.getAllocatedMB());\r\n    Assert.assertEquals(value * 3, app.getAllocatedVCores());\r\n    Assert.assertEquals(value * 3, app.getReservedMB());\r\n    Assert.assertEquals(value * 3, app.getReservedVCores());\r\n    Assert.assertEquals(value * 3, app.getRunningContainers());\r\n    Assert.assertEquals(value * 3, app.getMemorySeconds());\r\n    Assert.assertEquals(value * 3, app.getVcoreSeconds());\r\n    Assert.assertEquals(3, app.getResourceRequests().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "setAppInfoRunning",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void setAppInfoRunning(AppInfo am, int value)\n{\r\n    am.getResourceRequests().add(new ResourceRequestInfo());\r\n    am.setAllocatedMB(value);\r\n    am.setAllocatedVCores(value);\r\n    am.setReservedMB(value);\r\n    am.setReservedVCores(value);\r\n    am.setRunningContainers(value);\r\n    am.setMemorySeconds(value);\r\n    am.setVcoreSeconds(value);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testMerge2UAM",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testMerge2UAM()\n{\r\n    AppsInfo apps = new AppsInfo();\r\n    AppInfo app1 = new AppInfo();\r\n    app1.setAppId(APPID1.toString());\r\n    app1.setName(UnmanagedApplicationManager.APP_NAME);\r\n    app1.setState(YarnApplicationState.RUNNING);\r\n    apps.add(app1);\r\n    AppInfo app2 = new AppInfo();\r\n    app2.setAppId(APPID1.toString());\r\n    app2.setName(UnmanagedApplicationManager.APP_NAME);\r\n    app2.setState(YarnApplicationState.RUNNING);\r\n    apps.add(app2);\r\n    AppsInfo result = RouterWebServiceUtil.mergeAppsInfo(apps.getApps(), false);\r\n    Assert.assertNotNull(result);\r\n    Assert.assertEquals(0, result.getApps().size());\r\n    AppsInfo result2 = RouterWebServiceUtil.mergeAppsInfo(apps.getApps(), true);\r\n    Assert.assertNotNull(result2);\r\n    Assert.assertEquals(1, result2.getApps().size());\r\n    Assert.assertEquals(YarnApplicationState.RUNNING, result2.getApps().get(0).getState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testMergeUAM",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testMergeUAM()\n{\r\n    AppsInfo apps = new AppsInfo();\r\n    AppInfo app1 = new AppInfo();\r\n    app1.setAppId(APPID1.toString());\r\n    app1.setName(\"Test\");\r\n    apps.add(app1);\r\n    AppsInfo result = RouterWebServiceUtil.mergeAppsInfo(apps.getApps(), false);\r\n    Assert.assertNotNull(result);\r\n    Assert.assertEquals(1, result.getApps().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testDeleteDuplicate4DifferentNodes",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testDeleteDuplicate4DifferentNodes()\n{\r\n    NodesInfo nodes = new NodesInfo();\r\n    NodeInfo nodeInfo1 = new NodeInfo();\r\n    nodeInfo1.setId(NODE1);\r\n    nodes.add(nodeInfo1);\r\n    NodeInfo nodeInfo2 = new NodeInfo();\r\n    nodeInfo2.setId(NODE2);\r\n    nodes.add(nodeInfo2);\r\n    NodeInfo nodeInfo3 = new NodeInfo();\r\n    nodeInfo3.setId(NODE3);\r\n    nodes.add(nodeInfo3);\r\n    NodeInfo nodeInfo4 = new NodeInfo();\r\n    nodeInfo4.setId(NODE4);\r\n    nodes.add(nodeInfo4);\r\n    NodesInfo result = RouterWebServiceUtil.deleteDuplicateNodesInfo(nodes.getNodes());\r\n    Assert.assertNotNull(result);\r\n    Assert.assertEquals(4, result.getNodes().size());\r\n    List<String> nodesIds = new ArrayList<String>();\r\n    for (NodeInfo node : result.getNodes()) {\r\n        nodesIds.add(node.getNodeId());\r\n    }\r\n    Assert.assertTrue(nodesIds.contains(NODE1));\r\n    Assert.assertTrue(nodesIds.contains(NODE2));\r\n    Assert.assertTrue(nodesIds.contains(NODE3));\r\n    Assert.assertTrue(nodesIds.contains(NODE4));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testDeleteDuplicateNodes",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testDeleteDuplicateNodes()\n{\r\n    NodesInfo nodes = new NodesInfo();\r\n    NodeInfo node1 = new NodeInfo();\r\n    node1.setId(NODE1);\r\n    node1.setLastHealthUpdate(0);\r\n    nodes.add(node1);\r\n    NodeInfo node2 = new NodeInfo();\r\n    node2.setId(NODE1);\r\n    node2.setLastHealthUpdate(1);\r\n    nodes.add(node2);\r\n    NodeInfo node3 = new NodeInfo();\r\n    node3.setId(NODE1);\r\n    node3.setLastHealthUpdate(2);\r\n    nodes.add(node3);\r\n    NodesInfo result = RouterWebServiceUtil.deleteDuplicateNodesInfo(nodes.getNodes());\r\n    Assert.assertNotNull(result);\r\n    Assert.assertEquals(1, result.getNodes().size());\r\n    NodeInfo node = result.getNodes().get(0);\r\n    Assert.assertEquals(NODE1, node.getNodeId());\r\n    Assert.assertEquals(2, node.getLastHealthUpdate());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "testMergeMetrics",
  "errType" : null,
  "containingMethodsNum" : 30,
  "sourceCodeText" : "void testMergeMetrics()\n{\r\n    ClusterMetricsInfo metrics = new ClusterMetricsInfo();\r\n    ClusterMetricsInfo metricsResponse = new ClusterMetricsInfo();\r\n    long seed = System.currentTimeMillis();\r\n    setUpClusterMetrics(metrics, seed);\r\n    seed += 1000000000;\r\n    setUpClusterMetrics(metricsResponse, seed);\r\n    ClusterMetricsInfo metricsClone = createClusterMetricsClone(metrics);\r\n    RouterWebServiceUtil.mergeMetrics(metrics, metricsResponse);\r\n    Assert.assertEquals(metricsResponse.getAppsSubmitted() + metricsClone.getAppsSubmitted(), metrics.getAppsSubmitted());\r\n    Assert.assertEquals(metricsResponse.getAppsCompleted() + metricsClone.getAppsCompleted(), metrics.getAppsCompleted());\r\n    Assert.assertEquals(metricsResponse.getAppsPending() + metricsClone.getAppsPending(), metrics.getAppsPending());\r\n    Assert.assertEquals(metricsResponse.getAppsRunning() + metricsClone.getAppsRunning(), metrics.getAppsRunning());\r\n    Assert.assertEquals(metricsResponse.getAppsFailed() + metricsClone.getAppsFailed(), metrics.getAppsFailed());\r\n    Assert.assertEquals(metricsResponse.getAppsKilled() + metricsClone.getAppsKilled(), metrics.getAppsKilled());\r\n    Assert.assertEquals(metricsResponse.getReservedMB() + metricsClone.getReservedMB(), metrics.getReservedMB());\r\n    Assert.assertEquals(metricsResponse.getAvailableMB() + metricsClone.getAvailableMB(), metrics.getAvailableMB());\r\n    Assert.assertEquals(metricsResponse.getAllocatedMB() + metricsClone.getAllocatedMB(), metrics.getAllocatedMB());\r\n    Assert.assertEquals(metricsResponse.getReservedVirtualCores() + metricsClone.getReservedVirtualCores(), metrics.getReservedVirtualCores());\r\n    Assert.assertEquals(metricsResponse.getAvailableVirtualCores() + metricsClone.getAvailableVirtualCores(), metrics.getAvailableVirtualCores());\r\n    Assert.assertEquals(metricsResponse.getAllocatedVirtualCores() + metricsClone.getAllocatedVirtualCores(), metrics.getAllocatedVirtualCores());\r\n    Assert.assertEquals(metricsResponse.getContainersAllocated() + metricsClone.getContainersAllocated(), metrics.getContainersAllocated());\r\n    Assert.assertEquals(metricsResponse.getReservedContainers() + metricsClone.getReservedContainers(), metrics.getReservedContainers());\r\n    Assert.assertEquals(metricsResponse.getPendingContainers() + metricsClone.getPendingContainers(), metrics.getPendingContainers());\r\n    Assert.assertEquals(metricsResponse.getTotalMB() + metricsClone.getTotalMB(), metrics.getTotalMB());\r\n    Assert.assertEquals(metricsResponse.getTotalVirtualCores() + metricsClone.getTotalVirtualCores(), metrics.getTotalVirtualCores());\r\n    Assert.assertEquals(metricsResponse.getTotalNodes() + metricsClone.getTotalNodes(), metrics.getTotalNodes());\r\n    Assert.assertEquals(metricsResponse.getLostNodes() + metricsClone.getLostNodes(), metrics.getLostNodes());\r\n    Assert.assertEquals(metricsResponse.getUnhealthyNodes() + metricsClone.getUnhealthyNodes(), metrics.getUnhealthyNodes());\r\n    Assert.assertEquals(metricsResponse.getDecommissioningNodes() + metricsClone.getDecommissioningNodes(), metrics.getDecommissioningNodes());\r\n    Assert.assertEquals(metricsResponse.getDecommissionedNodes() + metricsClone.getDecommissionedNodes(), metrics.getDecommissionedNodes());\r\n    Assert.assertEquals(metricsResponse.getRebootedNodes() + metricsClone.getRebootedNodes(), metrics.getRebootedNodes());\r\n    Assert.assertEquals(metricsResponse.getActiveNodes() + metricsClone.getActiveNodes(), metrics.getActiveNodes());\r\n    Assert.assertEquals(metricsResponse.getShutdownNodes() + metricsClone.getShutdownNodes(), metrics.getShutdownNodes());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "createClusterMetricsClone",
  "errType" : null,
  "containingMethodsNum" : 25,
  "sourceCodeText" : "ClusterMetricsInfo createClusterMetricsClone(ClusterMetricsInfo metrics)\n{\r\n    ClusterMetricsInfo metricsClone = new ClusterMetricsInfo();\r\n    metricsClone.setAppsSubmitted(metrics.getAppsSubmitted());\r\n    metricsClone.setAppsCompleted(metrics.getAppsCompleted());\r\n    metricsClone.setAppsPending(metrics.getAppsPending());\r\n    metricsClone.setAppsRunning(metrics.getAppsRunning());\r\n    metricsClone.setAppsFailed(metrics.getAppsFailed());\r\n    metricsClone.setAppsKilled(metrics.getAppsKilled());\r\n    metricsClone.setReservedMB(metrics.getReservedMB());\r\n    metricsClone.setAvailableMB(metrics.getAvailableMB());\r\n    metricsClone.setAllocatedMB(metrics.getAllocatedMB());\r\n    metricsClone.setReservedVirtualCores(metrics.getReservedVirtualCores());\r\n    metricsClone.setAvailableVirtualCores(metrics.getAvailableVirtualCores());\r\n    metricsClone.setAllocatedVirtualCores(metrics.getAllocatedVirtualCores());\r\n    metricsClone.setContainersAllocated(metrics.getContainersAllocated());\r\n    metricsClone.setContainersReserved(metrics.getReservedContainers());\r\n    metricsClone.setContainersPending(metrics.getPendingContainers());\r\n    metricsClone.setTotalMB(metrics.getTotalMB());\r\n    metricsClone.setTotalVirtualCores(metrics.getTotalVirtualCores());\r\n    metricsClone.setTotalNodes(metrics.getTotalNodes());\r\n    metricsClone.setLostNodes(metrics.getLostNodes());\r\n    metricsClone.setUnhealthyNodes(metrics.getUnhealthyNodes());\r\n    metricsClone.setDecommissioningNodes(metrics.getDecommissioningNodes());\r\n    metricsClone.setDecommissionedNodes(metrics.getDecommissionedNodes());\r\n    metricsClone.setRebootedNodes(metrics.getRebootedNodes());\r\n    metricsClone.setActiveNodes(metrics.getActiveNodes());\r\n    metricsClone.setShutdownNodes(metrics.getShutdownNodes());\r\n    return metricsClone;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-router\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\router\\webapp",
  "methodName" : "setUpClusterMetrics",
  "errType" : null,
  "containingMethodsNum" : 26,
  "sourceCodeText" : "void setUpClusterMetrics(ClusterMetricsInfo metrics, long seed)\n{\r\n    LOG.info(\"Using seed: \" + seed);\r\n    Random rand = new Random(seed);\r\n    metrics.setAppsSubmitted(rand.nextInt(1000));\r\n    metrics.setAppsCompleted(rand.nextInt(1000));\r\n    metrics.setAppsPending(rand.nextInt(1000));\r\n    metrics.setAppsRunning(rand.nextInt(1000));\r\n    metrics.setAppsFailed(rand.nextInt(1000));\r\n    metrics.setAppsKilled(rand.nextInt(1000));\r\n    metrics.setReservedMB(rand.nextInt(1000));\r\n    metrics.setAvailableMB(rand.nextInt(1000));\r\n    metrics.setAllocatedMB(rand.nextInt(1000));\r\n    metrics.setReservedVirtualCores(rand.nextInt(1000));\r\n    metrics.setAvailableVirtualCores(rand.nextInt(1000));\r\n    metrics.setAllocatedVirtualCores(rand.nextInt(1000));\r\n    metrics.setContainersAllocated(rand.nextInt(1000));\r\n    metrics.setContainersReserved(rand.nextInt(1000));\r\n    metrics.setContainersPending(rand.nextInt(1000));\r\n    metrics.setTotalMB(rand.nextInt(1000));\r\n    metrics.setTotalVirtualCores(rand.nextInt(1000));\r\n    metrics.setTotalNodes(rand.nextInt(1000));\r\n    metrics.setLostNodes(rand.nextInt(1000));\r\n    metrics.setUnhealthyNodes(rand.nextInt(1000));\r\n    metrics.setDecommissioningNodes(rand.nextInt(1000));\r\n    metrics.setDecommissionedNodes(rand.nextInt(1000));\r\n    metrics.setRebootedNodes(rand.nextInt(1000));\r\n    metrics.setActiveNodes(rand.nextInt(1000));\r\n    metrics.setShutdownNodes(rand.nextInt(1000));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
} ]