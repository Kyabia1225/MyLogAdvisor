[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\writer\\cosmosdb",
  "methodName" : "fetchLatestDoc",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineDocument fetchLatestDoc(CollectionType collectionType, String documentId, StringBuilder eTagStrBuilder)\n{\r\n    try {\r\n        return DocumentStoreTestUtils.bakeTimelineEntityDoc();\r\n    } catch (IOException e) {\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection",
  "methodName" : "testTimelineEntityDocMergeOperation",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testTimelineEntityDocMergeOperation() throws IOException\n{\r\n    TimelineEntityDocument actualEntityDoc = new TimelineEntityDocument();\r\n    TimelineEntityDocument expectedEntityDoc = DocumentStoreTestUtils.bakeTimelineEntityDoc();\r\n    Assert.assertEquals(1, actualEntityDoc.getInfo().size());\r\n    Assert.assertEquals(0, actualEntityDoc.getMetrics().size());\r\n    Assert.assertEquals(0, actualEntityDoc.getEvents().size());\r\n    Assert.assertEquals(0, actualEntityDoc.getConfigs().size());\r\n    Assert.assertEquals(0, actualEntityDoc.getIsRelatedToEntities().size());\r\n    Assert.assertEquals(0, actualEntityDoc.getRelatesToEntities().size());\r\n    actualEntityDoc.merge(expectedEntityDoc);\r\n    Assert.assertEquals(expectedEntityDoc.getInfo().size(), actualEntityDoc.getInfo().size());\r\n    Assert.assertEquals(expectedEntityDoc.getMetrics().size(), actualEntityDoc.getMetrics().size());\r\n    Assert.assertEquals(expectedEntityDoc.getEvents().size(), actualEntityDoc.getEvents().size());\r\n    Assert.assertEquals(expectedEntityDoc.getConfigs().size(), actualEntityDoc.getConfigs().size());\r\n    Assert.assertEquals(expectedEntityDoc.getRelatesToEntities().size(), actualEntityDoc.getIsRelatedToEntities().size());\r\n    Assert.assertEquals(expectedEntityDoc.getRelatesToEntities().size(), actualEntityDoc.getRelatesToEntities().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection",
  "methodName" : "testFlowActivityDocMergeOperation",
  "errType" : null,
  "containingMethodsNum" : 22,
  "sourceCodeText" : "void testFlowActivityDocMergeOperation() throws IOException\n{\r\n    FlowActivityDocument actualFlowActivityDoc = new FlowActivityDocument();\r\n    FlowActivityDocument expectedFlowActivityDoc = DocumentStoreTestUtils.bakeFlowActivityDoc();\r\n    Assert.assertEquals(0, actualFlowActivityDoc.getDayTimestamp());\r\n    Assert.assertEquals(0, actualFlowActivityDoc.getFlowActivities().size());\r\n    Assert.assertNull(actualFlowActivityDoc.getFlowName());\r\n    Assert.assertEquals(TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), actualFlowActivityDoc.getType());\r\n    Assert.assertNull(actualFlowActivityDoc.getUser());\r\n    Assert.assertNull(actualFlowActivityDoc.getId());\r\n    actualFlowActivityDoc.merge(expectedFlowActivityDoc);\r\n    Assert.assertEquals(expectedFlowActivityDoc.getDayTimestamp(), actualFlowActivityDoc.getDayTimestamp());\r\n    Assert.assertEquals(expectedFlowActivityDoc.getFlowActivities().size(), actualFlowActivityDoc.getFlowActivities().size());\r\n    Assert.assertEquals(expectedFlowActivityDoc.getFlowName(), actualFlowActivityDoc.getFlowName());\r\n    Assert.assertEquals(expectedFlowActivityDoc.getType(), actualFlowActivityDoc.getType());\r\n    Assert.assertEquals(expectedFlowActivityDoc.getUser(), actualFlowActivityDoc.getUser());\r\n    Assert.assertEquals(expectedFlowActivityDoc.getId(), actualFlowActivityDoc.getId());\r\n    expectedFlowActivityDoc.addFlowActivity(FLOW_NAME, FLOW_VERSION, System.currentTimeMillis());\r\n    actualFlowActivityDoc.merge(expectedFlowActivityDoc);\r\n    Assert.assertEquals(expectedFlowActivityDoc.getDayTimestamp(), actualFlowActivityDoc.getDayTimestamp());\r\n    Assert.assertEquals(expectedFlowActivityDoc.getFlowActivities().size(), actualFlowActivityDoc.getFlowActivities().size());\r\n    Assert.assertEquals(expectedFlowActivityDoc.getFlowName(), actualFlowActivityDoc.getFlowName());\r\n    Assert.assertEquals(expectedFlowActivityDoc.getType(), actualFlowActivityDoc.getType());\r\n    Assert.assertEquals(expectedFlowActivityDoc.getUser(), actualFlowActivityDoc.getUser());\r\n    Assert.assertEquals(expectedFlowActivityDoc.getId(), actualFlowActivityDoc.getId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\collection",
  "methodName" : "testFlowRunDocMergeAndAggOperation",
  "errType" : null,
  "containingMethodsNum" : 30,
  "sourceCodeText" : "void testFlowRunDocMergeAndAggOperation() throws IOException\n{\r\n    FlowRunDocument actualFlowRunDoc = new FlowRunDocument();\r\n    FlowRunDocument expectedFlowRunDoc = DocumentStoreTestUtils.bakeFlowRunDoc();\r\n    final long timestamp = System.currentTimeMillis();\r\n    final long value = 98586624;\r\n    TimelineMetric timelineMetric = new TimelineMetric();\r\n    timelineMetric.setId(MEMORY_ID);\r\n    timelineMetric.setType(TimelineMetric.Type.SINGLE_VALUE);\r\n    timelineMetric.setRealtimeAggregationOp(TimelineMetricOperation.SUM);\r\n    timelineMetric.addValue(timestamp, value);\r\n    TimelineMetricSubDoc metricSubDoc = new TimelineMetricSubDoc(timelineMetric);\r\n    expectedFlowRunDoc.getMetrics().put(MEMORY_ID, metricSubDoc);\r\n    Assert.assertNull(actualFlowRunDoc.getClusterId());\r\n    Assert.assertNull(actualFlowRunDoc.getFlowName());\r\n    Assert.assertNull(actualFlowRunDoc.getFlowRunId());\r\n    Assert.assertNull(actualFlowRunDoc.getFlowVersion());\r\n    Assert.assertNull(actualFlowRunDoc.getId());\r\n    Assert.assertNull(actualFlowRunDoc.getUsername());\r\n    Assert.assertEquals(actualFlowRunDoc.getType(), TimelineEntityType.YARN_FLOW_RUN.toString());\r\n    Assert.assertEquals(0, actualFlowRunDoc.getMinStartTime());\r\n    Assert.assertEquals(0, actualFlowRunDoc.getMaxEndTime());\r\n    Assert.assertEquals(0, actualFlowRunDoc.getMetrics().size());\r\n    actualFlowRunDoc.merge(expectedFlowRunDoc);\r\n    Assert.assertEquals(expectedFlowRunDoc.getClusterId(), actualFlowRunDoc.getClusterId());\r\n    Assert.assertEquals(expectedFlowRunDoc.getFlowName(), actualFlowRunDoc.getFlowName());\r\n    Assert.assertEquals(expectedFlowRunDoc.getFlowRunId(), actualFlowRunDoc.getFlowRunId());\r\n    Assert.assertEquals(expectedFlowRunDoc.getFlowVersion(), actualFlowRunDoc.getFlowVersion());\r\n    Assert.assertEquals(expectedFlowRunDoc.getId(), actualFlowRunDoc.getId());\r\n    Assert.assertEquals(expectedFlowRunDoc.getUsername(), actualFlowRunDoc.getUsername());\r\n    Assert.assertEquals(expectedFlowRunDoc.getType(), actualFlowRunDoc.getType());\r\n    Assert.assertEquals(expectedFlowRunDoc.getMinStartTime(), actualFlowRunDoc.getMinStartTime());\r\n    Assert.assertEquals(expectedFlowRunDoc.getMaxEndTime(), actualFlowRunDoc.getMaxEndTime());\r\n    Assert.assertEquals(expectedFlowRunDoc.getMetrics().size(), actualFlowRunDoc.getMetrics().size());\r\n    actualFlowRunDoc.merge(expectedFlowRunDoc);\r\n    Assert.assertEquals(value + value, actualFlowRunDoc.getMetrics().get(MEMORY_ID).getSingleDataValue());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setUp() throws YarnException\n{\r\n    conf.set(DocumentStoreUtils.TIMELINE_SERVICE_DOCUMENTSTORE_DATABASE_NAME, \"TestDB\");\r\n    conf.set(DocumentStoreUtils.TIMELINE_SERVICE_COSMOSDB_ENDPOINT, \"https://localhost:443\");\r\n    conf.set(DocumentStoreUtils.TIMELINE_SERVICE_COSMOSDB_MASTER_KEY, \"1234567\");\r\n    PowerMockito.mockStatic(DocumentStoreFactory.class);\r\n    PowerMockito.when(DocumentStoreFactory.createDocumentStoreWriter(ArgumentMatchers.any(Configuration.class))).thenReturn(documentStoreWriter);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "testFailOnNoCosmosDBConfigs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testFailOnNoCosmosDBConfigs() throws Exception\n{\r\n    DocumentStoreUtils.validateCosmosDBConf(new Configuration());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "testWritingToCosmosDB",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testWritingToCosmosDB() throws Exception\n{\r\n    DocumentStoreTimelineWriterImpl timelineWriter = new DocumentStoreTimelineWriterImpl();\r\n    timelineWriter.serviceInit(conf);\r\n    TimelineEntities entities = new TimelineEntities();\r\n    entities.addEntities(DocumentStoreTestUtils.bakeTimelineEntities());\r\n    entities.addEntity(DocumentStoreTestUtils.bakeTimelineEntityDoc().fetchTimelineEntity());\r\n    PowerMockito.verifyStatic(DocumentStoreFactory.class);\r\n    TimelineCollectorContext context = new TimelineCollectorContext();\r\n    context.setFlowName(\"TestFlow\");\r\n    context.setAppId(\"DUMMY_APP_ID\");\r\n    context.setClusterId(\"yarn_cluster\");\r\n    context.setUserId(\"test_user\");\r\n    timelineWriter.write(context, entities, UserGroupInformation.createRemoteUser(\"test_user\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\reader\\cosmosdb",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setUp()\n{\r\n    AsyncDocumentClient asyncDocumentClient = Mockito.mock(AsyncDocumentClient.class);\r\n    PowerMockito.mockStatic(DocumentStoreUtils.class);\r\n    PowerMockito.when(DocumentStoreUtils.getCosmosDBDatabaseName(ArgumentMatchers.any(Configuration.class))).thenReturn(\"FooBar\");\r\n    PowerMockito.when(DocumentStoreUtils.createCosmosDBAsyncClient(ArgumentMatchers.any(Configuration.class))).thenReturn(asyncDocumentClient);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\reader\\cosmosdb",
  "methodName" : "testFailureFOnEmptyPredicates",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testFailureFOnEmptyPredicates()\n{\r\n    PowerMockito.when(DocumentStoreUtils.isNullOrEmpty(ArgumentMatchers.any())).thenReturn(Boolean.TRUE);\r\n    CosmosDBDocumentStoreReader cosmosDBDocumentStoreReader = new CosmosDBDocumentStoreReader(null);\r\n    cosmosDBDocumentStoreReader.addPredicates(new TimelineReaderContext(null, \"\", \"\", null, \"\", \"\", null), \"DummyCollection\", new StringBuilder());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\reader",
  "methodName" : "readDocument",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineDoc readDocument(String collectionName, TimelineReaderContext context, Class<TimelineDoc> docClass)\n{\r\n    switch(TimelineEntityType.valueOf(context.getEntityType())) {\r\n        case YARN_FLOW_ACTIVITY:\r\n            return (TimelineDoc) flowActivityDoc;\r\n        case YARN_FLOW_RUN:\r\n            return (TimelineDoc) flowRunDoc;\r\n        default:\r\n            return (TimelineDoc) entityDoc;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\reader",
  "methodName" : "readDocumentList",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "List<TimelineDoc> readDocumentList(String collectionName, TimelineReaderContext context, Class<TimelineDoc> docClass, long size)\n{\r\n    switch(TimelineEntityType.valueOf(context.getEntityType())) {\r\n        case YARN_FLOW_ACTIVITY:\r\n            List<FlowActivityDocument> flowActivityDocs = new ArrayList<>();\r\n            flowActivityDocs.add(flowActivityDoc);\r\n            if (size > flowActivityDocs.size()) {\r\n                size = flowActivityDocs.size();\r\n            }\r\n            return (List<TimelineDoc>) flowActivityDocs.subList(0, (int) size);\r\n        case YARN_FLOW_RUN:\r\n            List<FlowRunDocument> flowRunDocs = new ArrayList<>();\r\n            flowRunDocs.add(flowRunDoc);\r\n            if (size > flowRunDocs.size()) {\r\n                size = flowRunDocs.size();\r\n            }\r\n            return (List<TimelineDoc>) flowRunDocs.subList(0, (int) size);\r\n        case YARN_APPLICATION:\r\n            List<TimelineEntityDocument> applicationEntities = new ArrayList<>();\r\n            applicationEntities.add(entityDoc);\r\n            if (size > applicationEntities.size()) {\r\n                size = applicationEntities.size();\r\n            }\r\n            return (List<TimelineDoc>) applicationEntities.subList(0, (int) size);\r\n        default:\r\n            if (size > entityDocs.size() || size == -1) {\r\n                size = entityDocs.size();\r\n            }\r\n            return (List<TimelineDoc>) entityDocs.subList(0, (int) size);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\reader",
  "methodName" : "fetchEntityTypes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<String> fetchEntityTypes(String collectionName, TimelineReaderContext context)\n{\r\n    return entityDocs.stream().map(TimelineEntityDocument::getType).collect(Collectors.toSet());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\reader",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void close()\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setUp() throws YarnException\n{\r\n    conf.set(DocumentStoreUtils.TIMELINE_SERVICE_DOCUMENTSTORE_DATABASE_NAME, \"TestDB\");\r\n    conf.set(DocumentStoreUtils.TIMELINE_SERVICE_COSMOSDB_ENDPOINT, \"https://localhost:443\");\r\n    conf.set(DocumentStoreUtils.TIMELINE_SERVICE_COSMOSDB_MASTER_KEY, \"1234567\");\r\n    PowerMockito.mockStatic(DocumentStoreFactory.class);\r\n    PowerMockito.when(DocumentStoreFactory.createDocumentStoreReader(ArgumentMatchers.any(Configuration.class))).thenReturn(documentStoreReader);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "testFailOnNoCosmosDBConfigs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testFailOnNoCosmosDBConfigs() throws Exception\n{\r\n    DocumentStoreUtils.validateCosmosDBConf(new Configuration());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "testGetEntity",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testGetEntity() throws Exception\n{\r\n    context.setEntityType(TimelineEntityType.YARN_APPLICATION.toString());\r\n    timelineReader.serviceInit(conf);\r\n    TimelineDataToRetrieve dataToRetrieve = new TimelineDataToRetrieve();\r\n    EnumSet<TimelineReader.Field> fieldsToRetrieve = EnumSet.noneOf(TimelineReader.Field.class);\r\n    dataToRetrieve.setFieldsToRetrieve(fieldsToRetrieve);\r\n    TimelineEntity timelineEntity = timelineReader.getEntity(context, dataToRetrieve);\r\n    Assert.assertEquals(appTimelineEntity.getCreatedTime(), timelineEntity.getCreatedTime().longValue());\r\n    Assert.assertEquals(0, timelineEntity.getMetrics().size());\r\n    Assert.assertEquals(0, timelineEntity.getEvents().size());\r\n    Assert.assertEquals(0, timelineEntity.getConfigs().size());\r\n    Assert.assertEquals(appTimelineEntity.getInfo().size(), timelineEntity.getInfo().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "testGetEntityCustomField",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testGetEntityCustomField() throws Exception\n{\r\n    context.setEntityType(TimelineEntityType.YARN_CONTAINER.toString());\r\n    timelineReader.serviceInit(conf);\r\n    TimelineDataToRetrieve dataToRetrieve = new TimelineDataToRetrieve();\r\n    dataToRetrieve.getFieldsToRetrieve().add(TimelineReader.Field.METRICS);\r\n    TimelineEntity timelineEntity = timelineReader.getEntity(context, dataToRetrieve);\r\n    Assert.assertEquals(appTimelineEntity.getCreatedTime(), timelineEntity.getCreatedTime().longValue());\r\n    Assert.assertEquals(appTimelineEntity.getMetrics().size(), timelineEntity.getMetrics().size());\r\n    Assert.assertEquals(0, timelineEntity.getEvents().size());\r\n    Assert.assertEquals(0, timelineEntity.getConfigs().size());\r\n    Assert.assertEquals(appTimelineEntity.getInfo().size(), timelineEntity.getInfo().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "testGetEntityAllFields",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testGetEntityAllFields() throws Exception\n{\r\n    context.setEntityType(TimelineEntityType.YARN_CONTAINER.toString());\r\n    timelineReader.serviceInit(conf);\r\n    TimelineDataToRetrieve dataToRetrieve = new TimelineDataToRetrieve();\r\n    dataToRetrieve.getFieldsToRetrieve().add(TimelineReader.Field.ALL);\r\n    TimelineEntity timelineEntity = timelineReader.getEntity(context, dataToRetrieve);\r\n    Assert.assertEquals(appTimelineEntity.getCreatedTime(), timelineEntity.getCreatedTime().longValue());\r\n    Assert.assertEquals(appTimelineEntity.getMetrics().size(), timelineEntity.getMetrics().size());\r\n    Assert.assertEquals(appTimelineEntity.getEvents().size(), timelineEntity.getEvents().size());\r\n    Assert.assertEquals(appTimelineEntity.getConfigs().size(), timelineEntity.getConfigs().size());\r\n    Assert.assertEquals(appTimelineEntity.getInfo().size(), timelineEntity.getInfo().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "testGetAllEntities",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testGetAllEntities() throws Exception\n{\r\n    context.setEntityType(TimelineEntityType.YARN_CONTAINER.toString());\r\n    timelineReader.serviceInit(conf);\r\n    TimelineDataToRetrieve dataToRetrieve = new TimelineDataToRetrieve();\r\n    dataToRetrieve.getFieldsToRetrieve().add(TimelineReader.Field.ALL);\r\n    Set<TimelineEntity> actualEntities = timelineReader.getEntities(context, new TimelineEntityFilters.Builder().build(), dataToRetrieve);\r\n    Assert.assertEquals(entities.size(), actualEntities.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "testGetEntitiesWithLimit",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetEntitiesWithLimit() throws Exception\n{\r\n    context.setEntityType(TimelineEntityType.YARN_CONTAINER.toString());\r\n    timelineReader.serviceInit(conf);\r\n    TimelineDataToRetrieve dataToRetrieve = new TimelineDataToRetrieve();\r\n    Set<TimelineEntity> actualEntities = timelineReader.getEntities(context, new TimelineEntityFilters.Builder().entityLimit(2L).build(), dataToRetrieve);\r\n    Assert.assertEquals(2, actualEntities.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "testGetEntitiesByWindows",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetEntitiesByWindows() throws Exception\n{\r\n    context.setEntityType(TimelineEntityType.YARN_CONTAINER.toString());\r\n    timelineReader.serviceInit(conf);\r\n    TimelineDataToRetrieve dataToRetrieve = new TimelineDataToRetrieve();\r\n    Set<TimelineEntity> actualEntities = timelineReader.getEntities(context, new TimelineEntityFilters.Builder().createdTimeBegin(1533985554927L).createTimeEnd(1533985554927L).build(), dataToRetrieve);\r\n    Assert.assertEquals(1, actualEntities.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "testGetFilteredEntities",
  "errType" : null,
  "containingMethodsNum" : 25,
  "sourceCodeText" : "void testGetFilteredEntities() throws Exception\n{\r\n    context.setEntityType(TimelineEntityType.YARN_CONTAINER.toString());\r\n    timelineReader.serviceInit(conf);\r\n    TimelineDataToRetrieve dataToRetrieve = new TimelineDataToRetrieve();\r\n    dataToRetrieve.getFieldsToRetrieve().add(TimelineReader.Field.ALL);\r\n    TimelineFilterList infoFilterList = new TimelineFilterList();\r\n    infoFilterList.addFilter(new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"YARN_APPLICATION_ATTEMPT_FINAL_STATUS\", \"SUCCEEDED\"));\r\n    Set<TimelineEntity> actualEntities = timelineReader.getEntities(context, new TimelineEntityFilters.Builder().infoFilters(infoFilterList).build(), dataToRetrieve);\r\n    Assert.assertEquals(1, actualEntities.size());\r\n    for (TimelineEntity entity : actualEntities) {\r\n        if (!entity.getType().equals(\"YARN_APPLICATION_ATTEMPT\")) {\r\n            Assert.fail(\"Incorrect filtering based on info filters\");\r\n        }\r\n    }\r\n    TimelineFilterList confFilterList = new TimelineFilterList();\r\n    context.setEntityType(TimelineEntityType.YARN_APPLICATION.toString());\r\n    confFilterList.addFilter(new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"YARN_AM_NODE_LABEL_EXPRESSION\", \"<DEFAULT_PARTITION>\"));\r\n    actualEntities = timelineReader.getEntities(context, new TimelineEntityFilters.Builder().configFilters(confFilterList).build(), dataToRetrieve);\r\n    Assert.assertEquals(1, actualEntities.size());\r\n    for (TimelineEntity entity : actualEntities) {\r\n        if (!entity.getType().equals(\"YARN_APPLICATION\")) {\r\n            Assert.fail(\"Incorrect filtering based on info filters\");\r\n        }\r\n    }\r\n    context.setEntityType(TimelineEntityType.YARN_CONTAINER.toString());\r\n    TimelineFilterList eventFilters = new TimelineFilterList();\r\n    eventFilters.addFilter(new TimelineExistsFilter(TimelineCompareOp.EQUAL, \"CONTAINER_LAUNCHED\"));\r\n    actualEntities = timelineReader.getEntities(context, new TimelineEntityFilters.Builder().eventFilters(eventFilters).build(), dataToRetrieve);\r\n    Assert.assertEquals(1, actualEntities.size());\r\n    for (TimelineEntity entity : actualEntities) {\r\n        if (!entity.getType().equals(\"YARN_CONTAINER\")) {\r\n            Assert.fail(\"Incorrect filtering based on info filters\");\r\n        }\r\n    }\r\n    TimelineFilterList metricFilterList = new TimelineFilterList();\r\n    metricFilterList.addFilter(new TimelineCompareFilter(TimelineCompareOp.GREATER_OR_EQUAL, \"MEMORY\", 150298624L));\r\n    actualEntities = timelineReader.getEntities(context, new TimelineEntityFilters.Builder().metricFilters(metricFilterList).build(), dataToRetrieve);\r\n    Assert.assertEquals(1, actualEntities.size());\r\n    for (TimelineEntity entity : actualEntities) {\r\n        if (!entity.getType().equals(\"YARN_CONTAINER\")) {\r\n            Assert.fail(\"Incorrect filtering based on info filters\");\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "testReadingDifferentEntityTypes",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testReadingDifferentEntityTypes() throws Exception\n{\r\n    timelineReader.serviceInit(conf);\r\n    TimelineDataToRetrieve dataToRetrieve = new TimelineDataToRetrieve();\r\n    context.setEntityType(TimelineEntityType.YARN_FLOW_ACTIVITY.toString());\r\n    TimelineEntity timelineEntity = timelineReader.getEntity(context, dataToRetrieve);\r\n    Assert.assertEquals(TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), timelineEntity.getType());\r\n    context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\r\n    timelineEntity = timelineReader.getEntity(context, dataToRetrieve);\r\n    Assert.assertEquals(TimelineEntityType.YARN_FLOW_RUN.toString(), timelineEntity.getType());\r\n    context.setEntityType(TimelineEntityType.YARN_APPLICATION.toString());\r\n    timelineEntity = timelineReader.getEntity(context, dataToRetrieve);\r\n    Assert.assertEquals(TimelineEntityType.YARN_APPLICATION.toString(), timelineEntity.getType());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "testReadingAllEntityTypes",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testReadingAllEntityTypes() throws Exception\n{\r\n    timelineReader.serviceInit(conf);\r\n    context.setEntityType(TimelineEntityType.YARN_CONTAINER.toString());\r\n    Set<String> entityTypes = timelineReader.getEntityTypes(context);\r\n    Assert.assertTrue(entityTypes.contains(TimelineEntityType.YARN_CONTAINER.toString()));\r\n    Assert.assertTrue(entityTypes.contains(TimelineEntityType.YARN_APPLICATION_ATTEMPT.toString()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "testMetricsToRetrieve",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testMetricsToRetrieve() throws Exception\n{\r\n    timelineReader.serviceInit(conf);\r\n    TimelineDataToRetrieve dataToRetrieve = new TimelineDataToRetrieve();\r\n    dataToRetrieve.getFieldsToRetrieve().add(TimelineReader.Field.METRICS);\r\n    TimelineFilterList timelineFilterList = new TimelineFilterList();\r\n    timelineFilterList.setOperator(TimelineFilterList.Operator.OR);\r\n    timelineFilterList.addFilter(new TimelinePrefixFilter(TimelineCompareOp.EQUAL, \"NOTHING\"));\r\n    dataToRetrieve.setMetricsToRetrieve(timelineFilterList);\r\n    context.setEntityType(TimelineEntityType.YARN_APPLICATION.toString());\r\n    TimelineEntity timelineEntity = timelineReader.getEntity(context, dataToRetrieve);\r\n    Assert.assertEquals(0, timelineEntity.getMetrics().size());\r\n    timelineFilterList.addFilter(new TimelinePrefixFilter(TimelineCompareOp.EQUAL, \"YARN_APPLICATION_NON_AM_CONTAINER_PREEMPTED\"));\r\n    dataToRetrieve.setMetricsToRetrieve(timelineFilterList);\r\n    context.setEntityType(TimelineEntityType.YARN_APPLICATION.toString());\r\n    timelineEntity = timelineReader.getEntity(context, dataToRetrieve);\r\n    Assert.assertTrue(timelineEntity.getMetrics().size() > 0);\r\n    timelineFilterList.setOperator(TimelineFilterList.Operator.AND);\r\n    timelineEntity = timelineReader.getEntity(context, dataToRetrieve);\r\n    Assert.assertEquals(0, timelineEntity.getMetrics().size());\r\n    dataToRetrieve.getMetricsToRetrieve().getFilterList().remove(0);\r\n    context.setEntityType(TimelineEntityType.YARN_APPLICATION.toString());\r\n    timelineEntity = timelineReader.getEntity(context, dataToRetrieve);\r\n    Assert.assertTrue(timelineEntity.getMetrics().size() > 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "testConfigsToRetrieve",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testConfigsToRetrieve() throws Exception\n{\r\n    timelineReader.serviceInit(conf);\r\n    TimelineDataToRetrieve dataToRetrieve = new TimelineDataToRetrieve();\r\n    dataToRetrieve.getFieldsToRetrieve().add(TimelineReader.Field.CONFIGS);\r\n    TimelineFilterList timelineFilterList = new TimelineFilterList();\r\n    timelineFilterList.setOperator(TimelineFilterList.Operator.OR);\r\n    timelineFilterList.addFilter(new TimelinePrefixFilter(TimelineCompareOp.EQUAL, \"NOTHING\"));\r\n    dataToRetrieve.setConfsToRetrieve(timelineFilterList);\r\n    context.setEntityType(TimelineEntityType.YARN_APPLICATION.toString());\r\n    TimelineEntity timelineEntity = timelineReader.getEntity(context, dataToRetrieve);\r\n    Assert.assertEquals(0, timelineEntity.getConfigs().size());\r\n    timelineFilterList.addFilter(new TimelinePrefixFilter(TimelineCompareOp.EQUAL, \"YARN_AM_NODE_LABEL_EXPRESSION\"));\r\n    dataToRetrieve.setConfsToRetrieve(timelineFilterList);\r\n    context.setEntityType(TimelineEntityType.YARN_APPLICATION.toString());\r\n    timelineEntity = timelineReader.getEntity(context, dataToRetrieve);\r\n    Assert.assertTrue(timelineEntity.getConfigs().size() > 0);\r\n    timelineFilterList.setOperator(TimelineFilterList.Operator.AND);\r\n    timelineEntity = timelineReader.getEntity(context, dataToRetrieve);\r\n    Assert.assertEquals(0, timelineEntity.getConfigs().size());\r\n    dataToRetrieve.getConfsToRetrieve().getFilterList().remove(0);\r\n    context.setEntityType(TimelineEntityType.YARN_APPLICATION.toString());\r\n    timelineEntity = timelineReader.getEntity(context, dataToRetrieve);\r\n    Assert.assertTrue(timelineEntity.getConfigs().size() > 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\writer",
  "methodName" : "createDatabase",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void createDatabase()\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\writer",
  "methodName" : "createCollection",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void createCollection(String collectionName)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\writer",
  "methodName" : "writeDocument",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void writeDocument(Document timelineDocument, CollectionType collectionType)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\writer",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void close()\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "fromJson",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "T fromJson(final String jsonStr, final TypeReference<T> type) throws IOException\n{\r\n    return OBJECT_MAPPER.readValue(jsonStr, type);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "getObjectMapper",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ObjectMapper getObjectMapper()\n{\r\n    return OBJECT_MAPPER;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\writer\\cosmosdb",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setUp()\n{\r\n    AsyncDocumentClient asyncDocumentClient = Mockito.mock(AsyncDocumentClient.class);\r\n    PowerMockito.mockStatic(DocumentStoreUtils.class);\r\n    PowerMockito.when(DocumentStoreUtils.getCosmosDBDatabaseName(ArgumentMatchers.any(Configuration.class))).thenReturn(\"FooBar\");\r\n    PowerMockito.when(DocumentStoreUtils.createCosmosDBAsyncClient(ArgumentMatchers.any(Configuration.class))).thenReturn(asyncDocumentClient);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore\\writer\\cosmosdb",
  "methodName" : "applyingUpdatesOnPrevDocTest",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void applyingUpdatesOnPrevDocTest() throws IOException\n{\r\n    MockedCosmosDBDocumentStoreWriter documentStoreWriter = new MockedCosmosDBDocumentStoreWriter(null);\r\n    TimelineEntityDocument actualEntityDoc = new TimelineEntityDocument();\r\n    TimelineEntityDocument expectedEntityDoc = DocumentStoreTestUtils.bakeTimelineEntityDoc();\r\n    Assert.assertEquals(1, actualEntityDoc.getInfo().size());\r\n    Assert.assertEquals(0, actualEntityDoc.getMetrics().size());\r\n    Assert.assertEquals(0, actualEntityDoc.getEvents().size());\r\n    Assert.assertEquals(0, actualEntityDoc.getConfigs().size());\r\n    Assert.assertEquals(0, actualEntityDoc.getIsRelatedToEntities().size());\r\n    Assert.assertEquals(0, actualEntityDoc.getRelatesToEntities().size());\r\n    actualEntityDoc = (TimelineEntityDocument) documentStoreWriter.applyUpdatesOnPrevDoc(CollectionType.ENTITY, actualEntityDoc, null);\r\n    Assert.assertEquals(expectedEntityDoc.getInfo().size(), actualEntityDoc.getInfo().size());\r\n    Assert.assertEquals(expectedEntityDoc.getMetrics().size(), actualEntityDoc.getMetrics().size());\r\n    Assert.assertEquals(expectedEntityDoc.getEvents().size(), actualEntityDoc.getEvents().size());\r\n    Assert.assertEquals(expectedEntityDoc.getConfigs().size(), actualEntityDoc.getConfigs().size());\r\n    Assert.assertEquals(expectedEntityDoc.getRelatesToEntities().size(), actualEntityDoc.getIsRelatedToEntities().size());\r\n    Assert.assertEquals(expectedEntityDoc.getRelatesToEntities().size(), actualEntityDoc.getRelatesToEntities().size());\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setUp() throws YarnException\n{\r\n    conf.set(DocumentStoreUtils.TIMELINE_SERVICE_DOCUMENTSTORE_DATABASE_NAME, \"TestDB\");\r\n    conf.set(DocumentStoreUtils.TIMELINE_SERVICE_COSMOSDB_ENDPOINT, \"https://localhost:443\");\r\n    conf.set(DocumentStoreUtils.TIMELINE_SERVICE_COSMOSDB_MASTER_KEY, \"1234567\");\r\n    PowerMockito.mockStatic(DocumentStoreFactory.class);\r\n    PowerMockito.when(DocumentStoreFactory.createDocumentStoreWriter(ArgumentMatchers.any(Configuration.class))).thenReturn(documentStoreWriter);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "collectionCreatorTest",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void collectionCreatorTest()\n{\r\n    new DocumentStoreCollectionCreator().createTimelineSchema(new String[] {});\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "bakeTimelineEntities",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<TimelineEntity> bakeTimelineEntities() throws IOException\n{\r\n    String jsonStr = IOUtils.toString(DocumentStoreTestUtils.class.getClassLoader().getResourceAsStream(\"documents/timeline-entities.json\"), \"UTF-8\");\r\n    return JsonUtils.fromJson(jsonStr, new TypeReference<List<TimelineEntity>>() {\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "bakeYarnAppTimelineEntities",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<TimelineEntityDocument> bakeYarnAppTimelineEntities() throws IOException\n{\r\n    String jsonStr = IOUtils.toString(DocumentStoreTestUtils.class.getClassLoader().getResourceAsStream(\"documents/test-timeline-entities-doc.json\"), \"UTF-8\");\r\n    return JsonUtils.fromJson(jsonStr, new TypeReference<List<TimelineEntityDocument>>() {\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "bakeTimelineEntityDoc",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "TimelineEntityDocument bakeTimelineEntityDoc() throws IOException\n{\r\n    String jsonStr = IOUtils.toString(DocumentStoreTestUtils.class.getClassLoader().getResourceAsStream(\"documents/timeline-app-doc.json\"), \"UTF-8\");\r\n    return JsonUtils.fromJson(jsonStr, new TypeReference<TimelineEntityDocument>() {\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "bakeFlowActivityDoc",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "FlowActivityDocument bakeFlowActivityDoc() throws IOException\n{\r\n    String jsonStr = IOUtils.toString(DocumentStoreTestUtils.class.getClassLoader().getResourceAsStream(\"documents/flowactivity-doc.json\"), \"UTF-8\");\r\n    return JsonUtils.fromJson(jsonStr, new TypeReference<FlowActivityDocument>() {\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-documentstore\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\documentstore",
  "methodName" : "bakeFlowRunDoc",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "FlowRunDocument bakeFlowRunDoc() throws IOException\n{\r\n    String jsonStr = IOUtils.toString(DocumentStoreTestUtils.class.getClassLoader().getResourceAsStream(\"documents/flowrun-doc.json\"), \"UTF-8\");\r\n    return JsonUtils.fromJson(jsonStr, new TypeReference<FlowRunDocument>() {\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
} ]