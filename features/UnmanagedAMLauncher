[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-unmanaged-am-launcher\\src\\main\\java\\org\\apache\\hadoop\\yarn\\applications\\unmanagedamlauncher",
  "methodName" : "main",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void main(String[] args)\n{\r\n    try {\r\n        UnmanagedAMLauncher client = new UnmanagedAMLauncher();\r\n        LOG.info(\"Initializing Client\");\r\n        boolean doRun = client.init(args);\r\n        if (!doRun) {\r\n            System.exit(0);\r\n        }\r\n        client.run();\r\n    } catch (Throwable t) {\r\n        LOG.error(\"Error running Client\", t);\r\n        System.exit(1);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-unmanaged-am-launcher\\src\\main\\java\\org\\apache\\hadoop\\yarn\\applications\\unmanagedamlauncher",
  "methodName" : "printUsage",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void printUsage(Options opts)\n{\r\n    new HelpFormatter().printHelp(\"Client\", opts);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-unmanaged-am-launcher\\src\\main\\java\\org\\apache\\hadoop\\yarn\\applications\\unmanagedamlauncher",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "boolean init(String[] args) throws ParseException\n{\r\n    Options opts = new Options();\r\n    opts.addOption(\"appname\", true, \"Application Name. Default value - UnmanagedAM\");\r\n    opts.addOption(\"priority\", true, \"Application Priority. Default 0\");\r\n    opts.addOption(\"queue\", true, \"RM Queue in which this application is to be submitted\");\r\n    opts.addOption(\"master_memory\", true, \"Amount of memory in MB to be requested to run the application master\");\r\n    opts.addOption(\"cmd\", true, \"command to start unmanaged AM (required)\");\r\n    opts.addOption(\"classpath\", true, \"additional classpath\");\r\n    opts.addOption(\"help\", false, \"Print usage\");\r\n    CommandLine cliParser = new GnuParser().parse(opts, args);\r\n    if (args.length == 0) {\r\n        printUsage(opts);\r\n        throw new IllegalArgumentException(\"No args specified for client to initialize\");\r\n    }\r\n    if (cliParser.hasOption(\"help\")) {\r\n        printUsage(opts);\r\n        return false;\r\n    }\r\n    appName = cliParser.getOptionValue(\"appname\", \"UnmanagedAM\");\r\n    amPriority = Integer.parseInt(cliParser.getOptionValue(\"priority\", \"0\"));\r\n    amQueue = cliParser.getOptionValue(\"queue\", \"default\");\r\n    classpath = cliParser.getOptionValue(\"classpath\", null);\r\n    amCmd = cliParser.getOptionValue(\"cmd\");\r\n    if (amCmd == null) {\r\n        printUsage(opts);\r\n        throw new IllegalArgumentException(\"No cmd specified for application master\");\r\n    }\r\n    YarnConfiguration yarnConf = new YarnConfiguration(conf);\r\n    rmClient = YarnClient.createYarnClient();\r\n    rmClient.init(yarnConf);\r\n    return true;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-unmanaged-am-launcher\\src\\main\\java\\org\\apache\\hadoop\\yarn\\applications\\unmanagedamlauncher",
  "methodName" : "launchAM",
  "errType" : [ "InterruptedException", "IOException", "IOException", "IllegalStateException", "InterruptedException", "InterruptedException", "IOException" ],
  "containingMethodsNum" : 50,
  "sourceCodeText" : "void launchAM(ApplicationAttemptId attemptId) throws IOException, YarnException\n{\r\n    Credentials credentials = new Credentials();\r\n    Token<AMRMTokenIdentifier> token = rmClient.getAMRMToken(attemptId.getApplicationId());\r\n    credentials.addToken(token.getService(), token);\r\n    File tokenFile = File.createTempFile(\"unmanagedAMRMToken\", \"\", new File(System.getProperty(\"user.dir\")));\r\n    try {\r\n        FileUtil.chmod(tokenFile.getAbsolutePath(), \"600\");\r\n    } catch (InterruptedException ex) {\r\n        throw new RuntimeException(ex);\r\n    }\r\n    tokenFile.deleteOnExit();\r\n    try (DataOutputStream os = new DataOutputStream(new FileOutputStream(tokenFile, true))) {\r\n        credentials.writeTokenStorageToStream(os);\r\n    }\r\n    Map<String, String> env = System.getenv();\r\n    ArrayList<String> envAMList = new ArrayList<String>();\r\n    boolean setClasspath = false;\r\n    for (Map.Entry<String, String> entry : env.entrySet()) {\r\n        String key = entry.getKey();\r\n        String value = entry.getValue();\r\n        if (key.equals(\"CLASSPATH\")) {\r\n            setClasspath = true;\r\n            if (classpath != null) {\r\n                value = value + File.pathSeparator + classpath;\r\n            }\r\n        }\r\n        envAMList.add(key + \"=\" + value);\r\n    }\r\n    if (!setClasspath && classpath != null) {\r\n        envAMList.add(\"CLASSPATH=\" + classpath);\r\n    }\r\n    ContainerId containerId = ContainerId.newContainerId(attemptId, 0);\r\n    String hostname = InetAddress.getLocalHost().getHostName();\r\n    envAMList.add(Environment.CONTAINER_ID.name() + \"=\" + containerId);\r\n    envAMList.add(Environment.NM_HOST.name() + \"=\" + hostname);\r\n    envAMList.add(Environment.NM_HTTP_PORT.name() + \"=0\");\r\n    envAMList.add(Environment.NM_PORT.name() + \"=0\");\r\n    envAMList.add(Environment.LOCAL_DIRS.name() + \"= /tmp\");\r\n    envAMList.add(ApplicationConstants.APP_SUBMIT_TIME_ENV + \"=\" + System.currentTimeMillis());\r\n    envAMList.add(ApplicationConstants.CONTAINER_TOKEN_FILE_ENV_NAME + \"=\" + tokenFile.getAbsolutePath());\r\n    String[] envAM = new String[envAMList.size()];\r\n    Process amProc = Runtime.getRuntime().exec(amCmd, envAMList.toArray(envAM));\r\n    final BufferedReader errReader = new BufferedReader(new InputStreamReader(amProc.getErrorStream(), Charset.forName(\"UTF-8\")));\r\n    final BufferedReader inReader = new BufferedReader(new InputStreamReader(amProc.getInputStream(), Charset.forName(\"UTF-8\")));\r\n    Thread errThread = new Thread() {\r\n\r\n        @Override\r\n        public void run() {\r\n            try {\r\n                String line = errReader.readLine();\r\n                while ((line != null) && !isInterrupted()) {\r\n                    System.err.println(line);\r\n                    line = errReader.readLine();\r\n                }\r\n            } catch (IOException ioe) {\r\n                LOG.warn(\"Error reading the error stream\", ioe);\r\n            }\r\n        }\r\n    };\r\n    Thread outThread = new Thread() {\r\n\r\n        @Override\r\n        public void run() {\r\n            try {\r\n                String line = inReader.readLine();\r\n                while ((line != null) && !isInterrupted()) {\r\n                    System.out.println(line);\r\n                    line = inReader.readLine();\r\n                }\r\n            } catch (IOException ioe) {\r\n                LOG.warn(\"Error reading the out stream\", ioe);\r\n            }\r\n        }\r\n    };\r\n    try {\r\n        errThread.start();\r\n        outThread.start();\r\n    } catch (IllegalStateException ise) {\r\n    }\r\n    try {\r\n        int exitCode = amProc.waitFor();\r\n        LOG.info(\"AM process exited with value: \" + exitCode);\r\n    } catch (InterruptedException e) {\r\n        e.printStackTrace();\r\n    } finally {\r\n        amCompleted = true;\r\n    }\r\n    try {\r\n        errThread.join();\r\n        outThread.join();\r\n        errReader.close();\r\n        inReader.close();\r\n    } catch (InterruptedException ie) {\r\n        LOG.info(\"ShellExecutor: Interrupted while reading the error/out stream\", ie);\r\n    } catch (IOException ioe) {\r\n        LOG.warn(\"Error while closing the error/out stream\", ioe);\r\n    }\r\n    amProc.destroy();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 7,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-unmanaged-am-launcher\\src\\main\\java\\org\\apache\\hadoop\\yarn\\applications\\unmanagedamlauncher",
  "methodName" : "run",
  "errType" : null,
  "containingMethodsNum" : 29,
  "sourceCodeText" : "boolean run() throws IOException, YarnException\n{\r\n    LOG.info(\"Starting Client\");\r\n    rmClient.start();\r\n    try {\r\n        LOG.info(\"Setting up application submission context for ASM\");\r\n        ApplicationSubmissionContext appContext = rmClient.createApplication().getApplicationSubmissionContext();\r\n        ApplicationId appId = appContext.getApplicationId();\r\n        appContext.setApplicationName(appName);\r\n        Priority pri = Records.newRecord(Priority.class);\r\n        pri.setPriority(amPriority);\r\n        appContext.setPriority(pri);\r\n        appContext.setQueue(amQueue);\r\n        ContainerLaunchContext amContainer = Records.newRecord(ContainerLaunchContext.class);\r\n        appContext.setAMContainerSpec(amContainer);\r\n        appContext.setUnmanagedAM(true);\r\n        LOG.info(\"Setting unmanaged AM\");\r\n        LOG.info(\"Submitting application to ASM\");\r\n        rmClient.submitApplication(appContext);\r\n        ApplicationReport appReport = monitorApplication(appId, EnumSet.of(YarnApplicationState.ACCEPTED, YarnApplicationState.KILLED, YarnApplicationState.FAILED, YarnApplicationState.FINISHED));\r\n        if (appReport.getYarnApplicationState() == YarnApplicationState.ACCEPTED) {\r\n            ApplicationAttemptReport attemptReport = monitorCurrentAppAttempt(appId, YarnApplicationAttemptState.LAUNCHED);\r\n            ApplicationAttemptId attemptId = attemptReport.getApplicationAttemptId();\r\n            LOG.info(\"Launching AM with application attempt id \" + attemptId);\r\n            launchAM(attemptId);\r\n            appReport = monitorApplication(appId, EnumSet.of(YarnApplicationState.KILLED, YarnApplicationState.FAILED, YarnApplicationState.FINISHED));\r\n        }\r\n        YarnApplicationState appState = appReport.getYarnApplicationState();\r\n        FinalApplicationStatus appStatus = appReport.getFinalApplicationStatus();\r\n        LOG.info(\"App ended with state: \" + appReport.getYarnApplicationState() + \" and status: \" + appStatus);\r\n        boolean success;\r\n        if (YarnApplicationState.FINISHED == appState && FinalApplicationStatus.SUCCEEDED == appStatus) {\r\n            LOG.info(\"Application has completed successfully.\");\r\n            success = true;\r\n        } else {\r\n            LOG.info(\"Application did finished unsuccessfully.\" + \" YarnState=\" + appState.toString() + \", FinalStatus=\" + appStatus.toString());\r\n            success = false;\r\n        }\r\n        return success;\r\n    } finally {\r\n        rmClient.stop();\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-unmanaged-am-launcher\\src\\main\\java\\org\\apache\\hadoop\\yarn\\applications\\unmanagedamlauncher",
  "methodName" : "monitorCurrentAppAttempt",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "ApplicationAttemptReport monitorCurrentAppAttempt(ApplicationId appId, YarnApplicationAttemptState attemptState) throws YarnException, IOException\n{\r\n    long startTime = System.currentTimeMillis();\r\n    ApplicationAttemptId attemptId = null;\r\n    while (true) {\r\n        if (attemptId == null) {\r\n            attemptId = rmClient.getApplicationReport(appId).getCurrentApplicationAttemptId();\r\n        }\r\n        ApplicationAttemptReport attemptReport = null;\r\n        if (attemptId != null) {\r\n            attemptReport = rmClient.getApplicationAttemptReport(attemptId);\r\n            if (attemptState.equals(attemptReport.getYarnApplicationAttemptState())) {\r\n                return attemptReport;\r\n            }\r\n        }\r\n        LOG.info(\"Current attempt state of \" + appId + \" is \" + (attemptReport == null ? \" N/A \" : attemptReport.getYarnApplicationAttemptState()) + \", waiting for current attempt to reach \" + attemptState);\r\n        try {\r\n            Thread.sleep(1000);\r\n        } catch (InterruptedException e) {\r\n            LOG.warn(\"Interrupted while waiting for current attempt of \" + appId + \" to reach \" + attemptState);\r\n        }\r\n        if (System.currentTimeMillis() - startTime > AM_STATE_WAIT_TIMEOUT_MS) {\r\n            String errmsg = \"Timeout for waiting current attempt of \" + appId + \" to reach \" + attemptState;\r\n            LOG.error(errmsg);\r\n            throw new RuntimeException(errmsg);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-unmanaged-am-launcher\\src\\main\\java\\org\\apache\\hadoop\\yarn\\applications\\unmanagedamlauncher",
  "methodName" : "monitorApplication",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "ApplicationReport monitorApplication(ApplicationId appId, Set<YarnApplicationState> finalState) throws YarnException, IOException\n{\r\n    long foundAMCompletedTime = 0;\r\n    StringBuilder expectedFinalState = new StringBuilder();\r\n    boolean first = true;\r\n    for (YarnApplicationState state : finalState) {\r\n        if (first) {\r\n            first = false;\r\n            expectedFinalState.append(state.name());\r\n        } else {\r\n            expectedFinalState.append(\",\" + state.name());\r\n        }\r\n    }\r\n    while (true) {\r\n        try {\r\n            Thread.sleep(1000);\r\n        } catch (InterruptedException e) {\r\n            LOG.debug(\"Thread sleep in monitoring loop interrupted\");\r\n        }\r\n        ApplicationReport report = rmClient.getApplicationReport(appId);\r\n        LOG.info(\"Got application report from ASM for\" + \", appId=\" + appId.getId() + \", appAttemptId=\" + report.getCurrentApplicationAttemptId() + \", clientToAMToken=\" + report.getClientToAMToken() + \", appDiagnostics=\" + report.getDiagnostics() + \", appMasterHost=\" + report.getHost() + \", appQueue=\" + report.getQueue() + \", appMasterRpcPort=\" + report.getRpcPort() + \", appStartTime=\" + report.getStartTime() + \", yarnAppState=\" + report.getYarnApplicationState().toString() + \", distributedFinalState=\" + report.getFinalApplicationStatus().toString() + \", appTrackingUrl=\" + report.getTrackingUrl() + \", appUser=\" + report.getUser());\r\n        YarnApplicationState state = report.getYarnApplicationState();\r\n        if (finalState.contains(state)) {\r\n            return report;\r\n        }\r\n        if (amCompleted) {\r\n            if (foundAMCompletedTime == 0) {\r\n                foundAMCompletedTime = System.currentTimeMillis();\r\n            } else if ((System.currentTimeMillis() - foundAMCompletedTime) > AM_STATE_WAIT_TIMEOUT_MS) {\r\n                LOG.warn(\"Waited \" + AM_STATE_WAIT_TIMEOUT_MS / 1000 + \" seconds after process completed for AppReport\" + \" to reach desired final state. Not waiting anymore.\" + \"CurrentState = \" + state + \", ExpectedStates = \" + expectedFinalState.toString());\r\n                throw new RuntimeException(\"Failed to receive final expected state\" + \" in ApplicationReport\" + \", CurrentState=\" + state + \", ExpectedStates=\" + expectedFinalState.toString());\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
} ]