[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\solver\\impl",
  "methodName" : "createSolver",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Solver createSolver() throws ResourceEstimatorException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\solver\\impl",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setup() throws SolverException, IOException, SkylineStoreException, ResourceEstimatorException\n{\r\n    solver = createSolver();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\solver\\impl",
  "methodName" : "testNullJobHistory",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testNullJobHistory() throws SolverException, SkylineStoreException\n{\r\n    solver.solve(null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\solver\\impl",
  "methodName" : "testEmptyJobHistory",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testEmptyJobHistory() throws SolverException, SkylineStoreException\n{\r\n    Map<RecurrenceId, List<ResourceSkyline>> jobHistoryInvalid = new HashMap<RecurrenceId, List<ResourceSkyline>>();\r\n    solver.solve(jobHistoryInvalid);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\solver\\impl",
  "methodName" : "cleanUp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void cleanUp()\n{\r\n    solver.close();\r\n    solver = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\translator\\impl",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setup() throws ResourceEstimatorException\n{\r\n    skylineStore = new InMemoryStore();\r\n    final LogParser nativeParser = new BaseLogParser();\r\n    Configuration config = new Configuration();\r\n    config.addResource(ResourceEstimatorConfiguration.CONFIG_FILE);\r\n    nativeParser.init(config, skylineStore);\r\n    logParserUtil.setLogParser(nativeParser);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\translator\\impl",
  "methodName" : "parseFile",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void parseFile(final String logFile) throws SkylineStoreException, IOException, ParseException, ResourceEstimatorException, DataFieldNotFoundException\n{\r\n    logParserUtil.parseLog(logFile);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\translator\\impl",
  "methodName" : "testParse",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testParse() throws SkylineStoreException, IOException, ParseException, ResourceEstimatorException, DataFieldNotFoundException\n{\r\n    final String logFile = \"src/test/resources/trace/nativeLog.txt\";\r\n    parseFile(logFile);\r\n    final RecurrenceId recurrenceId = new RecurrenceId(\"tpch_q12\", \"tpch_q12_0\");\r\n    final Map<RecurrenceId, List<ResourceSkyline>> jobSkylineLists = skylineStore.getHistory(recurrenceId);\r\n    Assert.assertEquals(1, jobSkylineLists.size());\r\n    final List<ResourceSkyline> jobHistory = jobSkylineLists.get(recurrenceId);\r\n    Assert.assertEquals(1, jobHistory.size());\r\n    final ResourceSkyline resourceSkyline = jobHistory.get(0);\r\n    Assert.assertEquals(0, resourceSkyline.getJobInputDataSize(), 0);\r\n    Assert.assertEquals(\"tpch_q12_0\", resourceSkyline.getJobId());\r\n    Assert.assertEquals(0, resourceSkyline.getJobSubmissionTime());\r\n    Assert.assertEquals(25, resourceSkyline.getJobFinishTime());\r\n    Assert.assertEquals(1024, resourceSkyline.getContainerSpec().getMemorySize());\r\n    Assert.assertEquals(1, resourceSkyline.getContainerSpec().getVirtualCores());\r\n    final RLESparseResourceAllocation skylineLists = resourceSkyline.getSkylineList();\r\n    int k;\r\n    for (k = 0; k < 10; k++) {\r\n        Assert.assertEquals(1, skylineLists.getCapacityAtTime(k).getMemorySize() / 1024);\r\n    }\r\n    for (k = 10; k < 15; k++) {\r\n        Assert.assertEquals(1074, skylineLists.getCapacityAtTime(k).getMemorySize() / 1024);\r\n    }\r\n    for (k = 15; k < 20; k++) {\r\n        Assert.assertEquals(2538, skylineLists.getCapacityAtTime(k).getMemorySize() / 1024);\r\n    }\r\n    for (k = 20; k < 25; k++) {\r\n        Assert.assertEquals(2468, skylineLists.getCapacityAtTime(k).getMemorySize() / 1024);\r\n    }\r\n    Assert.assertEquals(0, skylineLists.getCapacityAtTime(25).getMemorySize() / 1024);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\translator\\impl",
  "methodName" : "cleanUp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void cleanUp()\n{\r\n    skylineStore = null;\r\n    logParserUtil = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\common\\serialization",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setup()\n{\r\n    resource = Resource.newInstance(1024 * 100, 100);\r\n    gson = new GsonBuilder().registerTypeAdapter(Resource.class, new ResourceSerDe()).create();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\common\\serialization",
  "methodName" : "testSerialization",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testSerialization()\n{\r\n    final String json = gson.toJson(resource, new TypeToken<Resource>() {\r\n    }.getType());\r\n    final Resource resourceDe = gson.fromJson(json, new TypeToken<Resource>() {\r\n    }.getType());\r\n    Assert.assertEquals(resource.getMemorySize(), resourceDe.getMemorySize());\r\n    Assert.assertEquals(resource.getVirtualCores(), resourceDe.getVirtualCores());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\common\\serialization",
  "methodName" : "cleanUp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void cleanUp()\n{\r\n    resource = null;\r\n    gson = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\solver\\impl",
  "methodName" : "parseLog",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void parseLog(final String inputLog) throws SolverException, IOException, SkylineStoreException, DataFieldNotFoundException, ParseException\n{\r\n    final InputStream logs = new FileInputStream(inputLog);\r\n    SAMPLEPARSER.parseStream(logs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\solver\\impl",
  "methodName" : "createSolver",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Solver createSolver() throws ResourceEstimatorException\n{\r\n    solver = new LpSolver();\r\n    Configuration config = new Configuration();\r\n    config.addResource(ResourceEstimatorConfiguration.CONFIG_FILE);\r\n    solver.init(config, skylineStore);\r\n    SAMPLEPARSER.init(config, skylineStore);\r\n    return solver;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\solver\\impl",
  "methodName" : "testSolve",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testSolve() throws IOException, SkylineStoreException, SolverException, ResourceEstimatorException, DataFieldNotFoundException, ParseException\n{\r\n    parseLog(\"src/test/resources/lp/tpch_q12.txt\");\r\n    RecurrenceId recurrenceId = new RecurrenceId(\"tpch_q12\", \"*\");\r\n    final Map<RecurrenceId, List<ResourceSkyline>> jobHistory = skylineStore.getHistory(recurrenceId);\r\n    solver = createSolver();\r\n    RLESparseResourceAllocation result = solver.solve(jobHistory);\r\n    String file = \"src/test/resources/lp/answer.txt\";\r\n    Reader fileReader = new InputStreamReader(new FileInputStream(file), Charset.forName(\"UTF-8\"));\r\n    BufferedReader bufferedReader = new BufferedReader(fileReader);\r\n    String line = bufferedReader.readLine();\r\n    Configuration config = new Configuration();\r\n    config.addResource(new org.apache.hadoop.fs.Path(ResourceEstimatorConfiguration.CONFIG_FILE));\r\n    int timeInterval = config.getInt(ResourceEstimatorConfiguration.TIME_INTERVAL_KEY, 5);\r\n    final long containerMemAlloc = jobHistory.entrySet().iterator().next().getValue().get(0).getContainerSpec().getMemorySize();\r\n    int count = 0;\r\n    int numContainer = 0;\r\n    while (line != null) {\r\n        numContainer = (int) (result.getCapacityAtTime(count * timeInterval).getMemorySize() / containerMemAlloc);\r\n        assertEquals(Integer.parseInt(line), numContainer, 0.1 * Integer.parseInt(line));\r\n        line = bufferedReader.readLine();\r\n        count++;\r\n    }\r\n    fileReader.close();\r\n    bufferedReader.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\common\\api",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setup()\n{\r\n    resourceOverTime = new TreeMap<>();\r\n    skylineList = new RLESparseResourceAllocation(resourceOverTime, new DefaultResourceCalculator());\r\n    resource1 = Resource.newInstance(1024 * 100, 100);\r\n    resource2 = Resource.newInstance(1024 * 200, 200);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\common\\api",
  "methodName" : "testGetJobId",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetJobId()\n{\r\n    Assert.assertNull(resourceSkyline);\r\n    ReservationInterval riAdd = new ReservationInterval(0, 10);\r\n    skylineList.addInterval(riAdd, resource1);\r\n    riAdd = new ReservationInterval(10, 20);\r\n    skylineList.addInterval(riAdd, resource1);\r\n    resourceSkyline = new ResourceSkyline(\"1\", 1024.5, 0, 20, resource1, skylineList);\r\n    Assert.assertEquals(\"1\", resourceSkyline.getJobId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\common\\api",
  "methodName" : "testGetJobSubmissionTime",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetJobSubmissionTime()\n{\r\n    Assert.assertNull(resourceSkyline);\r\n    ReservationInterval riAdd = new ReservationInterval(0, 10);\r\n    skylineList.addInterval(riAdd, resource1);\r\n    riAdd = new ReservationInterval(10, 20);\r\n    skylineList.addInterval(riAdd, resource1);\r\n    resourceSkyline = new ResourceSkyline(\"1\", 1024.5, 0, 20, resource1, skylineList);\r\n    Assert.assertEquals(0, resourceSkyline.getJobSubmissionTime());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\common\\api",
  "methodName" : "testGetJobFinishTime",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetJobFinishTime()\n{\r\n    Assert.assertNull(resourceSkyline);\r\n    ReservationInterval riAdd = new ReservationInterval(0, 10);\r\n    skylineList.addInterval(riAdd, resource1);\r\n    riAdd = new ReservationInterval(10, 20);\r\n    skylineList.addInterval(riAdd, resource1);\r\n    resourceSkyline = new ResourceSkyline(\"1\", 1024.5, 0, 20, resource1, skylineList);\r\n    Assert.assertEquals(20, resourceSkyline.getJobFinishTime());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\common\\api",
  "methodName" : "testGetKthResource",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testGetKthResource()\n{\r\n    Assert.assertNull(resourceSkyline);\r\n    ReservationInterval riAdd = new ReservationInterval(10, 20);\r\n    skylineList.addInterval(riAdd, resource1);\r\n    riAdd = new ReservationInterval(20, 30);\r\n    skylineList.addInterval(riAdd, resource2);\r\n    resourceSkyline = new ResourceSkyline(\"1\", 1024.5, 0, 20, resource1, skylineList);\r\n    final RLESparseResourceAllocation skylineList2 = resourceSkyline.getSkylineList();\r\n    for (int i = 10; i < 20; i++) {\r\n        Assert.assertEquals(resource1.getMemorySize(), skylineList2.getCapacityAtTime(i).getMemorySize());\r\n        Assert.assertEquals(resource1.getVirtualCores(), skylineList2.getCapacityAtTime(i).getVirtualCores());\r\n    }\r\n    for (int i = 20; i < 30; i++) {\r\n        Assert.assertEquals(resource2.getMemorySize(), skylineList2.getCapacityAtTime(i).getMemorySize());\r\n        Assert.assertEquals(resource2.getVirtualCores(), skylineList2.getCapacityAtTime(i).getVirtualCores());\r\n    }\r\n    Assert.assertEquals(0, skylineList2.getCapacityAtTime(9).getMemorySize());\r\n    Assert.assertEquals(0, skylineList2.getCapacityAtTime(9).getVirtualCores());\r\n    Assert.assertEquals(0, skylineList2.getCapacityAtTime(30).getMemorySize());\r\n    Assert.assertEquals(0, skylineList2.getCapacityAtTime(30).getVirtualCores());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\common\\api",
  "methodName" : "cleanUp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void cleanUp()\n{\r\n    resourceSkyline = null;\r\n    resource1 = null;\r\n    resource2 = null;\r\n    resourceOverTime.clear();\r\n    resourceOverTime = null;\r\n    skylineList = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\common\\serialization",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setup()\n{\r\n    resourceOverTime = new TreeMap<>();\r\n    skylineList = new RLESparseResourceAllocation(resourceOverTime, new DefaultResourceCalculator());\r\n    resource = Resource.newInstance(1024 * 100, 100);\r\n    resource2 = Resource.newInstance(1024 * 200, 200);\r\n    gson = new GsonBuilder().registerTypeAdapter(Resource.class, new ResourceSerDe()).registerTypeAdapter(RLESparseResourceAllocation.class, new RLESparseResourceAllocationSerDe()).enableComplexMapKeySerialization().create();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\common\\serialization",
  "methodName" : "testSerialization",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testSerialization()\n{\r\n    ReservationInterval riAdd = new ReservationInterval(0, 10);\r\n    skylineList.addInterval(riAdd, resource);\r\n    riAdd = new ReservationInterval(10, 20);\r\n    skylineList.addInterval(riAdd, resource2);\r\n    resourceSkyline = new ResourceSkyline(\"1\", 1024.5, 0, 20, resource, skylineList);\r\n    RecurrenceId recurrenceId = new RecurrenceId(\"FraudDetection\", \"1\");\r\n    List<ResourceSkyline> listSkyline = new ArrayList<>();\r\n    listSkyline.add(resourceSkyline);\r\n    Map<RecurrenceId, List<ResourceSkyline>> historySkyline = new HashMap<RecurrenceId, List<ResourceSkyline>>();\r\n    historySkyline.put(recurrenceId, listSkyline);\r\n    final String json = gson.toJson(historySkyline, new TypeToken<Map<RecurrenceId, List<ResourceSkyline>>>() {\r\n    }.getType());\r\n    final Map<RecurrenceId, List<ResourceSkyline>> historySkylineDe = gson.fromJson(json, new TypeToken<Map<RecurrenceId, List<ResourceSkyline>>>() {\r\n    }.getType());\r\n    List<ResourceSkyline> resourceSkylineList = historySkylineDe.get(recurrenceId);\r\n    Assert.assertNotNull(resourceSkylineList);\r\n    Assert.assertEquals(1, resourceSkylineList.size());\r\n    ResourceSkyline resourceSkylineDe = resourceSkylineList.get(0);\r\n    Assert.assertEquals(resourceSkylineDe.getJobId(), resourceSkyline.getJobId());\r\n    Assert.assertEquals(resourceSkylineDe.getJobInputDataSize(), resourceSkyline.getJobInputDataSize(), 0);\r\n    Assert.assertEquals(resourceSkylineDe.getJobSubmissionTime(), resourceSkyline.getJobSubmissionTime());\r\n    Assert.assertEquals(resourceSkylineDe.getJobFinishTime(), resourceSkyline.getJobFinishTime());\r\n    Assert.assertEquals(resourceSkylineDe.getContainerSpec().getMemorySize(), resourceSkyline.getContainerSpec().getMemorySize());\r\n    Assert.assertEquals(resourceSkylineDe.getContainerSpec().getVirtualCores(), resourceSkyline.getContainerSpec().getVirtualCores());\r\n    final RLESparseResourceAllocation skylineList2 = resourceSkyline.getSkylineList();\r\n    final RLESparseResourceAllocation skylineListDe = resourceSkylineDe.getSkylineList();\r\n    for (int i = 0; i < 20; i++) {\r\n        Assert.assertEquals(skylineList2.getCapacityAtTime(i).getMemorySize(), skylineListDe.getCapacityAtTime(i).getMemorySize());\r\n        Assert.assertEquals(skylineList2.getCapacityAtTime(i).getVirtualCores(), skylineListDe.getCapacityAtTime(i).getVirtualCores());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\common\\serialization",
  "methodName" : "cleanUp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void cleanUp()\n{\r\n    gson = null;\r\n    resourceSkyline = null;\r\n    resourceOverTime.clear();\r\n    resourceOverTime = null;\r\n    resource = null;\r\n    resource2 = null;\r\n    skylineList = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\service",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    super.setUp();\r\n    containerMemAlloc = 1024;\r\n    containerCPUAlloc = 1;\r\n    containerSpec = Resource.newInstance(containerMemAlloc, containerCPUAlloc);\r\n    gson = new GsonBuilder().registerTypeAdapter(Resource.class, new ResourceSerDe()).registerTypeAdapter(RLESparseResourceAllocation.class, new RLESparseResourceAllocationSerDe()).enableComplexMapKeySerialization().create();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\service",
  "methodName" : "compareResourceSkyline",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void compareResourceSkyline(final ResourceSkyline skyline1, final ResourceSkyline skyline2)\n{\r\n    Assert.assertEquals(skyline1.getJobId(), skyline2.getJobId());\r\n    Assert.assertEquals(skyline1.getJobInputDataSize(), skyline2.getJobInputDataSize(), 0);\r\n    Assert.assertEquals(skyline1.getJobSubmissionTime(), skyline2.getJobSubmissionTime());\r\n    Assert.assertEquals(skyline1.getJobFinishTime(), skyline2.getJobFinishTime());\r\n    Assert.assertEquals(skyline1.getContainerSpec().getMemorySize(), skyline2.getContainerSpec().getMemorySize());\r\n    Assert.assertEquals(skyline1.getContainerSpec().getVirtualCores(), skyline2.getContainerSpec().getVirtualCores());\r\n    final RLESparseResourceAllocation skylineList1 = skyline1.getSkylineList();\r\n    final RLESparseResourceAllocation skylineList2 = skyline2.getSkylineList();\r\n    for (int i = (int) skylineList1.getEarliestStartTime(); i < skylineList1.getLatestNonNullTime(); i++) {\r\n        Assert.assertEquals(skylineList1.getCapacityAtTime(i).getMemorySize(), skylineList2.getCapacityAtTime(i).getMemorySize());\r\n        Assert.assertEquals(skylineList1.getCapacityAtTime(i).getVirtualCores(), skylineList2.getCapacityAtTime(i).getVirtualCores());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\service",
  "methodName" : "getSkyline1",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "ResourceSkyline getSkyline1()\n{\r\n    final TreeMap<Long, Resource> resourceOverTime = new TreeMap<>();\r\n    ReservationInterval riAdd;\r\n    final RLESparseResourceAllocation skylineList = new RLESparseResourceAllocation(resourceOverTime, new DefaultResourceCalculator());\r\n    riAdd = new ReservationInterval(0, 10);\r\n    Resource resource = Resource.newInstance(containerMemAlloc, containerCPUAlloc);\r\n    skylineList.addInterval(riAdd, resource);\r\n    riAdd = new ReservationInterval(10, 15);\r\n    resource = Resource.newInstance(containerMemAlloc * 1074, containerCPUAlloc * 1074);\r\n    skylineList.addInterval(riAdd, resource);\r\n    riAdd = new ReservationInterval(15, 20);\r\n    resource = Resource.newInstance(containerMemAlloc * 2538, containerCPUAlloc * 2538);\r\n    skylineList.addInterval(riAdd, resource);\r\n    riAdd = new ReservationInterval(20, 25);\r\n    resource = Resource.newInstance(containerMemAlloc * 2468, containerCPUAlloc * 2468);\r\n    skylineList.addInterval(riAdd, resource);\r\n    final ResourceSkyline resourceSkyline1 = new ResourceSkyline(\"tpch_q12_0\", 0, 0, 25, containerSpec, skylineList);\r\n    return resourceSkyline1;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\service",
  "methodName" : "getSkyline2",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "ResourceSkyline getSkyline2()\n{\r\n    final TreeMap<Long, Resource> resourceOverTime = new TreeMap<>();\r\n    ReservationInterval riAdd;\r\n    final RLESparseResourceAllocation skylineList = new RLESparseResourceAllocation(resourceOverTime, new DefaultResourceCalculator());\r\n    riAdd = new ReservationInterval(0, 10);\r\n    Resource resource = Resource.newInstance(containerMemAlloc, containerCPUAlloc);\r\n    skylineList.addInterval(riAdd, resource);\r\n    riAdd = new ReservationInterval(10, 15);\r\n    resource = Resource.newInstance(containerMemAlloc * 794, containerCPUAlloc * 794);\r\n    skylineList.addInterval(riAdd, resource);\r\n    riAdd = new ReservationInterval(15, 20);\r\n    resource = Resource.newInstance(containerMemAlloc * 2517, containerCPUAlloc * 2517);\r\n    skylineList.addInterval(riAdd, resource);\r\n    riAdd = new ReservationInterval(20, 25);\r\n    resource = Resource.newInstance(containerMemAlloc * 2484, containerCPUAlloc * 2484);\r\n    skylineList.addInterval(riAdd, resource);\r\n    final ResourceSkyline resourceSkyline2 = new ResourceSkyline(\"tpch_q12_1\", 0, 0, 25, containerSpec, skylineList);\r\n    return resourceSkyline2;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\service",
  "methodName" : "checkResult",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void checkResult(final String jobId, final Map<RecurrenceId, List<ResourceSkyline>> jobHistory)\n{\r\n    switch(jobId) {\r\n        case \"tpch_q12_0\":\r\n            {\r\n                final RecurrenceId recurrenceId = new RecurrenceId(\"tpch_q12\", \"tpch_q12_0\");\r\n                Assert.assertEquals(1, jobHistory.get(recurrenceId).size());\r\n                ResourceSkyline skylineReceive = jobHistory.get(recurrenceId).get(0);\r\n                compareResourceSkyline(skylineReceive, getSkyline1());\r\n                break;\r\n            }\r\n        case \"tpch_q12_1\":\r\n            {\r\n                final RecurrenceId recurrenceId = new RecurrenceId(\"tpch_q12\", \"tpch_q12_1\");\r\n                Assert.assertEquals(1, jobHistory.get(recurrenceId).size());\r\n                ResourceSkyline skylineReceive = jobHistory.get(recurrenceId).get(0);\r\n                compareResourceSkyline(skylineReceive, getSkyline2());\r\n                break;\r\n            }\r\n        default:\r\n            break;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\service",
  "methodName" : "compareRLESparseResourceAllocation",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void compareRLESparseResourceAllocation(final RLESparseResourceAllocation rle1, final RLESparseResourceAllocation rle2)\n{\r\n    for (int i = (int) rle1.getEarliestStartTime(); i < rle1.getLatestNonNullTime(); i++) {\r\n        Assert.assertEquals(rle1.getCapacityAtTime(i), rle2.getCapacityAtTime(i));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\service",
  "methodName" : "testGetPrediction",
  "errType" : null,
  "containingMethodsNum" : 33,
  "sourceCodeText" : "void testGetPrediction()\n{\r\n    final String logFile = \"resourceEstimatorService.txt\";\r\n    WebResource webResource = resource();\r\n    webResource.path(parseLogCommand).type(MediaType.APPLICATION_XML_TYPE).post(logFile);\r\n    webResource = resource().path(getHistorySkylineCommand);\r\n    String response = webResource.get(String.class);\r\n    Map<RecurrenceId, List<ResourceSkyline>> jobHistory = gson.fromJson(response, new TypeToken<Map<RecurrenceId, List<ResourceSkyline>>>() {\r\n    }.getType());\r\n    checkResult(\"tpch_q12_0\", jobHistory);\r\n    checkResult(\"tpch_q12_1\", jobHistory);\r\n    webResource = resource().path(getEstimatedSkylineCommand);\r\n    response = webResource.get(String.class);\r\n    Assert.assertEquals(\"null\", response);\r\n    webResource = resource().path(makeEstimationCommand);\r\n    response = webResource.get(String.class);\r\n    RLESparseResourceAllocation skylineList = gson.fromJson(response, new TypeToken<RLESparseResourceAllocation>() {\r\n    }.getType());\r\n    Assert.assertEquals(1, skylineList.getCapacityAtTime(0).getMemorySize() / containerMemAlloc);\r\n    Assert.assertEquals(1058, skylineList.getCapacityAtTime(10).getMemorySize() / containerMemAlloc);\r\n    Assert.assertEquals(2538, skylineList.getCapacityAtTime(15).getMemorySize() / containerMemAlloc);\r\n    Assert.assertEquals(2484, skylineList.getCapacityAtTime(20).getMemorySize() / containerMemAlloc);\r\n    webResource = resource().path(getEstimatedSkylineCommand);\r\n    response = webResource.get(String.class);\r\n    final RLESparseResourceAllocation skylineList2 = gson.fromJson(response, new TypeToken<RLESparseResourceAllocation>() {\r\n    }.getType());\r\n    compareRLESparseResourceAllocation(skylineList, skylineList2);\r\n    webResource = resource().path(makeEstimationCommand);\r\n    response = webResource.get(String.class);\r\n    final RLESparseResourceAllocation skylineList3 = gson.fromJson(response, new TypeToken<RLESparseResourceAllocation>() {\r\n    }.getType());\r\n    compareRLESparseResourceAllocation(skylineList, skylineList3);\r\n    webResource = resource().path(deleteHistoryCommand);\r\n    webResource.delete();\r\n    webResource = resource().path(getHistorySkylineCommand);\r\n    response = webResource.get(String.class);\r\n    jobHistory = gson.fromJson(response, new TypeToken<Map<RecurrenceId, List<ResourceSkyline>>>() {\r\n    }.getType());\r\n    Assert.assertEquals(1, jobHistory.size());\r\n    final String pipelineId = ((RecurrenceId) jobHistory.keySet().toArray()[0]).getRunId();\r\n    Assert.assertEquals(\"tpch_q12_0\", pipelineId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\translator\\impl",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setup() throws ResourceEstimatorException\n{\r\n    skylineStore = new InMemoryStore();\r\n    final LogParser rmParser = new BaseLogParser();\r\n    Configuration config = new Configuration();\r\n    config.addResource(new org.apache.hadoop.fs.Path(ResourceEstimatorConfiguration.CONFIG_FILE));\r\n    config.set(ResourceEstimatorConfiguration.TRANSLATOR_LINE_PARSER, RmSingleLineParser.class.getName());\r\n    rmParser.init(config, skylineStore);\r\n    logParserUtil.setLogParser(rmParser);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\translator\\impl",
  "methodName" : "parseFile",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void parseFile(final String logFile) throws SkylineStoreException, IOException, ParseException, ResourceEstimatorException, DataFieldNotFoundException\n{\r\n    logParserUtil.parseLog(logFile);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\translator\\impl",
  "methodName" : "testParse",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testParse() throws SkylineStoreException, IOException, ParseException, ResourceEstimatorException, DataFieldNotFoundException\n{\r\n    final String logFile = \"src/test/resources/trace/rmLog.txt\";\r\n    parseFile(logFile);\r\n    final RecurrenceId recurrenceId = new RecurrenceId(\"FraudDetection\", \"1\");\r\n    final Map<RecurrenceId, List<ResourceSkyline>> jobSkylineLists = skylineStore.getHistory(recurrenceId);\r\n    Assert.assertEquals(1, jobSkylineLists.size());\r\n    final List<ResourceSkyline> jobHistory = jobSkylineLists.get(recurrenceId);\r\n    Assert.assertEquals(1, jobHistory.size());\r\n    final ResourceSkyline resourceSkyline = jobHistory.get(0);\r\n    Assert.assertEquals(0, resourceSkyline.getJobInputDataSize(), 0);\r\n    Assert.assertEquals(\"application_1497832133857_0330\", resourceSkyline.getJobId());\r\n    Assert.assertEquals(logParserUtil.stringToUnixTimestamp(\"06/21/2017 16:10:13\"), resourceSkyline.getJobSubmissionTime());\r\n    Assert.assertEquals(logParserUtil.stringToUnixTimestamp(\"06/21/2017 16:18:35\"), resourceSkyline.getJobFinishTime());\r\n    final Resource resource = Resource.newInstance(1800, 1);\r\n    Assert.assertEquals(resource.getMemorySize(), resourceSkyline.getContainerSpec().getMemorySize());\r\n    Assert.assertEquals(resource.getVirtualCores(), resourceSkyline.getContainerSpec().getVirtualCores());\r\n    final RLESparseResourceAllocation skylineLists = resourceSkyline.getSkylineList();\r\n    int k;\r\n    for (k = 0; k < 142; k++) {\r\n        Assert.assertEquals(1, skylineLists.getCapacityAtTime(k).getMemorySize() / resource.getMemorySize());\r\n    }\r\n    for (k = 142; k < 345; k++) {\r\n        Assert.assertEquals(2, skylineLists.getCapacityAtTime(k).getMemorySize() / resource.getMemorySize());\r\n    }\r\n    for (k = 345; k < 502; k++) {\r\n        Assert.assertEquals(1, skylineLists.getCapacityAtTime(k).getMemorySize() / resource.getMemorySize());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\translator\\impl",
  "methodName" : "testInvalidDateFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testInvalidDateFormat() throws ParseException\n{\r\n    logParserUtil.stringToUnixTimestamp(\"2017.07.16 16:37:45\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\translator\\impl",
  "methodName" : "testDuplicateJobSubmissionTime",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testDuplicateJobSubmissionTime() throws SkylineStoreException, IOException, ParseException, ResourceEstimatorException, DataFieldNotFoundException\n{\r\n    final String logFile = \"src/test/resources/trace/invalidLog1.txt\";\r\n    parseFile(logFile);\r\n    final RecurrenceId recurrenceId = new RecurrenceId(\"Test\", \"1\");\r\n    final Map<RecurrenceId, List<ResourceSkyline>> jobSkylineLists = skylineStore.getHistory(recurrenceId);\r\n    Assert.assertEquals(logParserUtil.stringToUnixTimestamp(\"06/21/2017 16:10:23\"), jobSkylineLists.get(recurrenceId).get(0).getJobSubmissionTime());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\translator\\impl",
  "methodName" : "testJobIdNotFoundInJobSubmission",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testJobIdNotFoundInJobSubmission() throws SkylineStoreException, IOException, ParseException, ResourceEstimatorException, DataFieldNotFoundException\n{\r\n    final String logFile = \"src/test/resources/trace/invalidLog2.txt\";\r\n    parseFile(logFile);\r\n    final RecurrenceId recurrenceId = new RecurrenceId(\"Test\", \"2\");\r\n    Assert.assertNull(skylineStore.getHistory(recurrenceId));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\translator\\impl",
  "methodName" : "testJobIdNotFoundInContainerAlloc",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testJobIdNotFoundInContainerAlloc() throws SkylineStoreException, IOException, ParseException, ResourceEstimatorException, DataFieldNotFoundException\n{\r\n    final String logFile = \"src/test/resources/trace/invalidLog3.txt\";\r\n    parseFile(logFile);\r\n    final RecurrenceId recurrenceId = new RecurrenceId(\"Test\", \"3\");\r\n    final Map<RecurrenceId, List<ResourceSkyline>> jobSkylineLists = skylineStore.getHistory(recurrenceId);\r\n    Assert.assertEquals(0, jobSkylineLists.get(recurrenceId).get(0).getSkylineList().getCumulative().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\translator\\impl",
  "methodName" : "testContainerIdNotFoundInContainerAlloc",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testContainerIdNotFoundInContainerAlloc() throws SkylineStoreException, IOException, ParseException, ResourceEstimatorException, DataFieldNotFoundException\n{\r\n    final String logFile = \"src/test/resources/trace/invalidLog4.txt\";\r\n    parseFile(logFile);\r\n    final RecurrenceId recurrenceId = new RecurrenceId(\"Test\", \"4\");\r\n    final Map<RecurrenceId, List<ResourceSkyline>> jobSkylineLists = skylineStore.getHistory(recurrenceId);\r\n    Assert.assertEquals(0, jobSkylineLists.get(recurrenceId).get(0).getSkylineList().getCumulative().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\translator\\impl",
  "methodName" : "testJobIdNotFoundInJobFailure",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testJobIdNotFoundInJobFailure() throws SkylineStoreException, IOException, ParseException, ResourceEstimatorException, DataFieldNotFoundException\n{\r\n    final String logFile = \"src/test/resources/trace/invalidLog5.txt\";\r\n    parseFile(logFile);\r\n    final RecurrenceId recurrenceId = new RecurrenceId(\"Test\", \"5\");\r\n    final Map<RecurrenceId, List<ResourceSkyline>> jobSkylineLists = skylineStore.getHistory(recurrenceId);\r\n    Assert.assertEquals(logParserUtil.stringToUnixTimestamp(\"06/21/2017 16:10:13\"), jobSkylineLists.get(recurrenceId).get(0).getJobSubmissionTime());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\translator\\impl",
  "methodName" : "testJobIdNotFoundInJobFinish",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testJobIdNotFoundInJobFinish() throws SkylineStoreException, IOException, ParseException, ResourceEstimatorException, DataFieldNotFoundException\n{\r\n    final String logFile = \"src/test/resources/trace/invalidLog6.txt\";\r\n    parseFile(logFile);\r\n    final RecurrenceId recurrenceId = new RecurrenceId(\"Test\", \"6\");\r\n    Assert.assertNull(skylineStore.getHistory(recurrenceId));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\translator\\impl",
  "methodName" : "testRecurrenceIdNotFoundInJobFinish",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testRecurrenceIdNotFoundInJobFinish() throws SkylineStoreException, IOException, ParseException, ResourceEstimatorException, DataFieldNotFoundException\n{\r\n    final String logFile = \"src/test/resources/trace/invalidLog7.txt\";\r\n    parseFile(logFile);\r\n    final RecurrenceId recurrenceId = new RecurrenceId(\"Test\", \"7\");\r\n    Assert.assertNull(skylineStore.getHistory(recurrenceId));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\translator\\impl",
  "methodName" : "testJobIdNotFoundInResourceSpec",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testJobIdNotFoundInResourceSpec() throws SkylineStoreException, IOException, ParseException, ResourceEstimatorException, DataFieldNotFoundException\n{\r\n    final String logFile = \"src/test/resources/trace/invalidLog8.txt\";\r\n    parseFile(logFile);\r\n    final RecurrenceId recurrenceId = new RecurrenceId(\"Test\", \"8\");\r\n    final Map<RecurrenceId, List<ResourceSkyline>> jobSkylineLists = skylineStore.getHistory(recurrenceId);\r\n    Assert.assertEquals(1024, jobSkylineLists.get(recurrenceId).get(0).getContainerSpec().getMemorySize());\r\n    Assert.assertEquals(1, jobSkylineLists.get(recurrenceId).get(0).getContainerSpec().getVirtualCores());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\translator\\impl",
  "methodName" : "testResourceSpecNotFoundInResourceSpec",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testResourceSpecNotFoundInResourceSpec() throws SkylineStoreException, IOException, ParseException, ResourceEstimatorException, DataFieldNotFoundException\n{\r\n    final String logFile = \"src/test/resources/trace/invalidLog9.txt\";\r\n    parseFile(logFile);\r\n    final RecurrenceId recurrenceId = new RecurrenceId(\"Test\", \"9\");\r\n    final Map<RecurrenceId, List<ResourceSkyline>> jobSkylineLists = skylineStore.getHistory(recurrenceId);\r\n    Assert.assertEquals(1024, jobSkylineLists.get(recurrenceId).get(0).getContainerSpec().getMemorySize());\r\n    Assert.assertEquals(1, jobSkylineLists.get(recurrenceId).get(0).getContainerSpec().getVirtualCores());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\translator\\impl",
  "methodName" : "cleanUp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void cleanUp()\n{\r\n    skylineStore = null;\r\n    logParserUtil = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\skylinestore\\impl",
  "methodName" : "createSkylineStore",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SkylineStore createSkylineStore()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\skylinestore\\impl",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setup()\n{\r\n    skylineStore = createSkylineStore();\r\n    resourceOverTime = new TreeMap<>();\r\n    resource = Resource.newInstance(1024 * 100, 100);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\skylinestore\\impl",
  "methodName" : "compare",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void compare(final ResourceSkyline skyline1, final ResourceSkyline skyline2)\n{\r\n    Assert.assertEquals(skyline1.getJobId(), skyline2.getJobId());\r\n    Assert.assertEquals(skyline1.getJobInputDataSize(), skyline2.getJobInputDataSize(), 0);\r\n    Assert.assertEquals(skyline1.getJobSubmissionTime(), skyline2.getJobSubmissionTime());\r\n    Assert.assertEquals(skyline1.getJobFinishTime(), skyline2.getJobFinishTime());\r\n    Assert.assertEquals(skyline1.getContainerSpec().getMemorySize(), skyline2.getContainerSpec().getMemorySize());\r\n    Assert.assertEquals(skyline1.getContainerSpec().getVirtualCores(), skyline2.getContainerSpec().getVirtualCores());\r\n    Assert.assertEquals(true, skyline2.getSkylineList().equals(skyline1.getSkylineList()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\skylinestore\\impl",
  "methodName" : "addToStore",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void addToStore(final RecurrenceId recurrenceId, final ResourceSkyline resourceSkyline) throws SkylineStoreException\n{\r\n    final List<ResourceSkyline> resourceSkylines = new ArrayList<>();\r\n    resourceSkylines.add(resourceSkyline);\r\n    skylineStore.addHistory(recurrenceId, resourceSkylines);\r\n    final List<ResourceSkyline> resourceSkylinesGet = skylineStore.getHistory(recurrenceId).get(recurrenceId);\r\n    Assert.assertTrue(resourceSkylinesGet.contains(resourceSkyline));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\skylinestore\\impl",
  "methodName" : "getSkyline",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ResourceSkyline getSkyline(final int n)\n{\r\n    skylineList = new RLESparseResourceAllocation(resourceOverTime, new DefaultResourceCalculator());\r\n    for (int i = 0; i < n; i++) {\r\n        riAdd = new ReservationInterval(i * 10, (i + 1) * 10);\r\n        skylineList.addInterval(riAdd, resource);\r\n    }\r\n    final ResourceSkyline resourceSkyline = new ResourceSkyline(Integer.toString(n), 1024.5, 0, 20, resource, skylineList);\r\n    return resourceSkyline;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\skylinestore\\impl",
  "methodName" : "testGetHistory",
  "errType" : null,
  "containingMethodsNum" : 51,
  "sourceCodeText" : "void testGetHistory() throws SkylineStoreException\n{\r\n    final RecurrenceId recurrenceId1 = new RecurrenceId(\"FraudDetection\", \"17/06/20 00:00:00\");\r\n    final ResourceSkyline resourceSkyline1 = getSkyline(1);\r\n    addToStore(recurrenceId1, resourceSkyline1);\r\n    final ResourceSkyline resourceSkyline2 = getSkyline(2);\r\n    addToStore(recurrenceId1, resourceSkyline2);\r\n    final RecurrenceId recurrenceId2 = new RecurrenceId(\"FraudDetection\", \"17/06/21 00:00:00\");\r\n    final ResourceSkyline resourceSkyline3 = getSkyline(3);\r\n    addToStore(recurrenceId2, resourceSkyline3);\r\n    final ResourceSkyline resourceSkyline4 = getSkyline(4);\r\n    addToStore(recurrenceId2, resourceSkyline4);\r\n    final RecurrenceId recurrenceId3 = new RecurrenceId(\"Random\", \"17/06/20 00:00:00\");\r\n    addToStore(recurrenceId3, resourceSkyline1);\r\n    addToStore(recurrenceId3, resourceSkyline2);\r\n    Map<RecurrenceId, List<ResourceSkyline>> jobHistory = skylineStore.getHistory(recurrenceId1);\r\n    Assert.assertEquals(1, jobHistory.size());\r\n    for (final Map.Entry<RecurrenceId, List<ResourceSkyline>> entry : jobHistory.entrySet()) {\r\n        Assert.assertEquals(recurrenceId1, entry.getKey());\r\n        final List<ResourceSkyline> getSkylines = entry.getValue();\r\n        Assert.assertEquals(2, getSkylines.size());\r\n        compare(resourceSkyline1, getSkylines.get(0));\r\n        compare(resourceSkyline2, getSkylines.get(1));\r\n    }\r\n    RecurrenceId recurrenceIdTest = new RecurrenceId(\"FraudDetection\", \"*\");\r\n    jobHistory = skylineStore.getHistory(recurrenceIdTest);\r\n    Assert.assertEquals(2, jobHistory.size());\r\n    for (final Map.Entry<RecurrenceId, List<ResourceSkyline>> entry : jobHistory.entrySet()) {\r\n        Assert.assertEquals(recurrenceId1.getPipelineId(), entry.getKey().getPipelineId());\r\n        final List<ResourceSkyline> getSkylines = entry.getValue();\r\n        if (entry.getKey().getRunId().equals(\"17/06/20 00:00:00\")) {\r\n            Assert.assertEquals(2, getSkylines.size());\r\n            compare(resourceSkyline1, getSkylines.get(0));\r\n            compare(resourceSkyline2, getSkylines.get(1));\r\n        } else {\r\n            Assert.assertEquals(entry.getKey().getRunId(), \"17/06/21 00:00:00\");\r\n            Assert.assertEquals(2, getSkylines.size());\r\n            compare(resourceSkyline3, getSkylines.get(0));\r\n            compare(resourceSkyline4, getSkylines.get(1));\r\n        }\r\n    }\r\n    recurrenceIdTest = new RecurrenceId(\"*\", \"some random runId\");\r\n    jobHistory = skylineStore.getHistory(recurrenceIdTest);\r\n    Assert.assertEquals(3, jobHistory.size());\r\n    for (final Map.Entry<RecurrenceId, List<ResourceSkyline>> entry : jobHistory.entrySet()) {\r\n        if (entry.getKey().getPipelineId().equals(\"FraudDetection\")) {\r\n            final List<ResourceSkyline> getSkylines = entry.getValue();\r\n            if (entry.getKey().getRunId().equals(\"17/06/20 00:00:00\")) {\r\n                Assert.assertEquals(2, getSkylines.size());\r\n                compare(resourceSkyline1, getSkylines.get(0));\r\n                compare(resourceSkyline2, getSkylines.get(1));\r\n            } else {\r\n                Assert.assertEquals(entry.getKey().getRunId(), \"17/06/21 00:00:00\");\r\n                Assert.assertEquals(2, getSkylines.size());\r\n                compare(resourceSkyline3, getSkylines.get(0));\r\n                compare(resourceSkyline4, getSkylines.get(1));\r\n            }\r\n        } else {\r\n            Assert.assertEquals(\"Random\", entry.getKey().getPipelineId());\r\n            Assert.assertEquals(entry.getKey().getRunId(), \"17/06/20 00:00:00\");\r\n            final List<ResourceSkyline> getSkylines = entry.getValue();\r\n            Assert.assertEquals(2, getSkylines.size());\r\n            compare(resourceSkyline1, getSkylines.get(0));\r\n            compare(resourceSkyline2, getSkylines.get(1));\r\n        }\r\n    }\r\n    recurrenceIdTest = new RecurrenceId(\"some random pipelineId\", \"some random runId\");\r\n    Assert.assertNull(skylineStore.getHistory(recurrenceIdTest));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\skylinestore\\impl",
  "methodName" : "testGetEstimation",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetEstimation() throws SkylineStoreException\n{\r\n    final RLESparseResourceAllocation skylineList2 = new RLESparseResourceAllocation(resourceOverTime, new DefaultResourceCalculator());\r\n    for (int i = 0; i < 5; i++) {\r\n        riAdd = new ReservationInterval(i * 10, (i + 1) * 10);\r\n        skylineList2.addInterval(riAdd, resource);\r\n    }\r\n    skylineStore.addEstimation(\"FraudDetection\", skylineList2);\r\n    final RLESparseResourceAllocation estimation = skylineStore.getEstimation(\"FraudDetection\");\r\n    for (int i = 0; i < 50; i++) {\r\n        Assert.assertEquals(skylineList2.getCapacityAtTime(i), estimation.getCapacityAtTime(i));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\skylinestore\\impl",
  "methodName" : "testGetNullRecurrenceId",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testGetNullRecurrenceId() throws SkylineStoreException\n{\r\n    final RecurrenceId recurrenceId1 = new RecurrenceId(\"FraudDetection\", \"17/06/20 00:00:00\");\r\n    final ResourceSkyline resourceSkyline1 = getSkyline(1);\r\n    addToStore(recurrenceId1, resourceSkyline1);\r\n    final ResourceSkyline resourceSkyline2 = getSkyline(2);\r\n    addToStore(recurrenceId1, resourceSkyline2);\r\n    final RecurrenceId recurrenceId2 = new RecurrenceId(\"FraudDetection\", \"17/06/21 00:00:00\");\r\n    final ResourceSkyline resourceSkyline3 = getSkyline(3);\r\n    addToStore(recurrenceId2, resourceSkyline3);\r\n    final ResourceSkyline resourceSkyline4 = getSkyline(4);\r\n    addToStore(recurrenceId2, resourceSkyline4);\r\n    final RecurrenceId recurrenceId3 = new RecurrenceId(\"Random\", \"17/06/20 00:00:00\");\r\n    addToStore(recurrenceId3, resourceSkyline1);\r\n    addToStore(recurrenceId3, resourceSkyline2);\r\n    skylineStore.getHistory(null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\skylinestore\\impl",
  "methodName" : "testGetNullPipelineIdException",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetNullPipelineIdException() throws SkylineStoreException\n{\r\n    skylineStore.getEstimation(null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\skylinestore\\impl",
  "methodName" : "testAddNormal",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testAddNormal() throws SkylineStoreException\n{\r\n    final RecurrenceId recurrenceId = new RecurrenceId(\"FraudDetection\", \"17/06/20 00:00:00\");\r\n    final ResourceSkyline resourceSkyline1 = getSkyline(1);\r\n    addToStore(recurrenceId, resourceSkyline1);\r\n    final ArrayList<ResourceSkyline> resourceSkylines = new ArrayList<ResourceSkyline>();\r\n    resourceSkylines.add(null);\r\n    final ResourceSkyline resourceSkyline2 = getSkyline(2);\r\n    resourceSkylines.add(resourceSkyline2);\r\n    skylineStore.addHistory(recurrenceId, resourceSkylines);\r\n    final Map<RecurrenceId, List<ResourceSkyline>> jobHistory = skylineStore.getHistory(recurrenceId);\r\n    Assert.assertEquals(1, jobHistory.size());\r\n    for (final Map.Entry<RecurrenceId, List<ResourceSkyline>> entry : jobHistory.entrySet()) {\r\n        Assert.assertEquals(recurrenceId, entry.getKey());\r\n        final List<ResourceSkyline> getSkylines = entry.getValue();\r\n        Assert.assertEquals(2, getSkylines.size());\r\n        compare(resourceSkyline1, getSkylines.get(0));\r\n        compare(resourceSkyline2, getSkylines.get(1));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\skylinestore\\impl",
  "methodName" : "testAddNullRecurrenceId",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testAddNullRecurrenceId() throws SkylineStoreException\n{\r\n    final RecurrenceId recurrenceIdNull = null;\r\n    final ArrayList<ResourceSkyline> resourceSkylines = new ArrayList<ResourceSkyline>();\r\n    final ResourceSkyline resourceSkyline1 = getSkyline(1);\r\n    resourceSkylines.add(resourceSkyline1);\r\n    skylineStore.addHistory(recurrenceIdNull, resourceSkylines);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\skylinestore\\impl",
  "methodName" : "testAddNullResourceSkyline",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testAddNullResourceSkyline() throws SkylineStoreException\n{\r\n    final RecurrenceId recurrenceId = new RecurrenceId(\"FraudDetection\", \"17/06/20 00:00:00\");\r\n    final ArrayList<ResourceSkyline> resourceSkylines = new ArrayList<ResourceSkyline>();\r\n    final ResourceSkyline resourceSkyline1 = getSkyline(1);\r\n    resourceSkylines.add(resourceSkyline1);\r\n    skylineStore.addHistory(recurrenceId, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\skylinestore\\impl",
  "methodName" : "testAddDuplicateRecurrenceId",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testAddDuplicateRecurrenceId() throws SkylineStoreException\n{\r\n    final RecurrenceId recurrenceId = new RecurrenceId(\"FraudDetection\", \"17/06/20 00:00:00\");\r\n    final ArrayList<ResourceSkyline> resourceSkylines = new ArrayList<ResourceSkyline>();\r\n    final ResourceSkyline resourceSkyline1 = getSkyline(1);\r\n    resourceSkylines.add(resourceSkyline1);\r\n    skylineStore.addHistory(recurrenceId, resourceSkylines);\r\n    skylineStore.addHistory(recurrenceId, resourceSkylines);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\skylinestore\\impl",
  "methodName" : "testAddNullPipelineIdException",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testAddNullPipelineIdException() throws SkylineStoreException\n{\r\n    final RLESparseResourceAllocation skylineList2 = new RLESparseResourceAllocation(resourceOverTime, new DefaultResourceCalculator());\r\n    for (int i = 0; i < 5; i++) {\r\n        riAdd = new ReservationInterval(i * 10, (i + 1) * 10);\r\n        skylineList2.addInterval(riAdd, resource);\r\n    }\r\n    skylineStore.addEstimation(null, skylineList2);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\skylinestore\\impl",
  "methodName" : "testAddNullRLESparseResourceAllocationExceptionException",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testAddNullRLESparseResourceAllocationExceptionException() throws SkylineStoreException\n{\r\n    skylineStore.addEstimation(\"FraudDetection\", null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\skylinestore\\impl",
  "methodName" : "testDeleteNormal",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testDeleteNormal() throws SkylineStoreException\n{\r\n    final RecurrenceId recurrenceId1 = new RecurrenceId(\"FraudDetection\", \"17/06/20 00:00:00\");\r\n    final ResourceSkyline resourceSkyline1 = getSkyline(1);\r\n    addToStore(recurrenceId1, resourceSkyline1);\r\n    final ResourceSkyline resourceSkyline2 = getSkyline(2);\r\n    addToStore(recurrenceId1, resourceSkyline2);\r\n    skylineStore.deleteHistory(recurrenceId1);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\skylinestore\\impl",
  "methodName" : "testDeleteNullRecurrenceId",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testDeleteNullRecurrenceId() throws SkylineStoreException\n{\r\n    final RecurrenceId recurrenceId1 = new RecurrenceId(\"FraudDetection\", \"17/06/20 00:00:00\");\r\n    final ResourceSkyline resourceSkyline1 = getSkyline(1);\r\n    addToStore(recurrenceId1, resourceSkyline1);\r\n    skylineStore.deleteHistory(null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\skylinestore\\impl",
  "methodName" : "testDeleteRecurrenceIdNotFound",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testDeleteRecurrenceIdNotFound() throws SkylineStoreException\n{\r\n    final RecurrenceId recurrenceId1 = new RecurrenceId(\"FraudDetection\", \"17/06/20 00:00:00\");\r\n    final ResourceSkyline resourceSkyline1 = getSkyline(1);\r\n    addToStore(recurrenceId1, resourceSkyline1);\r\n    final RecurrenceId recurrenceIdInvalid = new RecurrenceId(\"Some random pipelineId\", \"Some random runId\");\r\n    skylineStore.deleteHistory(recurrenceIdInvalid);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\skylinestore\\impl",
  "methodName" : "testUpdateNormal",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testUpdateNormal() throws SkylineStoreException\n{\r\n    final RecurrenceId recurrenceId1 = new RecurrenceId(\"FraudDetection\", \"17/06/20 00:00:00\");\r\n    final ResourceSkyline resourceSkyline1 = getSkyline(1);\r\n    addToStore(recurrenceId1, resourceSkyline1);\r\n    final ArrayList<ResourceSkyline> resourceSkylines = new ArrayList<ResourceSkyline>();\r\n    final ResourceSkyline resourceSkyline2 = getSkyline(2);\r\n    resourceSkylines.add(resourceSkyline1);\r\n    resourceSkylines.add(resourceSkyline2);\r\n    skylineStore.updateHistory(recurrenceId1, resourceSkylines);\r\n    final Map<RecurrenceId, List<ResourceSkyline>> jobHistory = skylineStore.getHistory(recurrenceId1);\r\n    Assert.assertEquals(1, jobHistory.size());\r\n    for (final Map.Entry<RecurrenceId, List<ResourceSkyline>> entry : jobHistory.entrySet()) {\r\n        Assert.assertEquals(recurrenceId1, entry.getKey());\r\n        final List<ResourceSkyline> getSkylines = entry.getValue();\r\n        Assert.assertEquals(2, getSkylines.size());\r\n        compare(resourceSkyline1, getSkylines.get(0));\r\n        compare(resourceSkyline2, getSkylines.get(1));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\skylinestore\\impl",
  "methodName" : "testUpdateNullRecurrenceId",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testUpdateNullRecurrenceId() throws SkylineStoreException\n{\r\n    final ArrayList<ResourceSkyline> resourceSkylines = new ArrayList<ResourceSkyline>();\r\n    final ResourceSkyline resourceSkyline1 = getSkyline(1);\r\n    resourceSkylines.add(resourceSkyline1);\r\n    final ArrayList<ResourceSkyline> resourceSkylinesInvalid = new ArrayList<ResourceSkyline>();\r\n    resourceSkylinesInvalid.add(null);\r\n    skylineStore.updateHistory(null, resourceSkylines);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\skylinestore\\impl",
  "methodName" : "testUpdateNullResourceSkyline",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testUpdateNullResourceSkyline() throws SkylineStoreException\n{\r\n    final RecurrenceId recurrenceId = new RecurrenceId(\"FraudDetection\", \"17/06/20 00:00:00\");\r\n    final ArrayList<ResourceSkyline> resourceSkylines = new ArrayList<ResourceSkyline>();\r\n    final ResourceSkyline resourceSkyline1 = getSkyline(1);\r\n    resourceSkylines.add(resourceSkyline1);\r\n    final ArrayList<ResourceSkyline> resourceSkylinesInvalid = new ArrayList<ResourceSkyline>();\r\n    resourceSkylinesInvalid.add(null);\r\n    skylineStore.addHistory(recurrenceId, resourceSkylines);\r\n    skylineStore.updateHistory(recurrenceId, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\skylinestore\\impl",
  "methodName" : "testUpdateEmptyRecurrenceId",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testUpdateEmptyRecurrenceId() throws SkylineStoreException\n{\r\n    final RecurrenceId recurrenceId = new RecurrenceId(\"FraudDetection\", \"17/06/20 00:00:00\");\r\n    final ArrayList<ResourceSkyline> resourceSkylines = new ArrayList<ResourceSkyline>();\r\n    final ResourceSkyline resourceSkyline1 = getSkyline(1);\r\n    resourceSkylines.add(resourceSkyline1);\r\n    final ArrayList<ResourceSkyline> resourceSkylinesInvalid = new ArrayList<ResourceSkyline>();\r\n    resourceSkylinesInvalid.add(null);\r\n    skylineStore.addHistory(recurrenceId, resourceSkylines);\r\n    skylineStore.updateHistory(recurrenceId, resourceSkylinesInvalid);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\skylinestore\\impl",
  "methodName" : "testUpdateRecurrenceIdNotFound",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testUpdateRecurrenceIdNotFound() throws SkylineStoreException\n{\r\n    final ArrayList<ResourceSkyline> resourceSkylines = new ArrayList<ResourceSkyline>();\r\n    final ResourceSkyline resourceSkyline1 = getSkyline(1);\r\n    resourceSkylines.add(resourceSkyline1);\r\n    final RecurrenceId recurrenceIdInvalid = new RecurrenceId(\"Some random pipelineId\", \"Some random runId\");\r\n    final ArrayList<ResourceSkyline> resourceSkylinesInvalid = new ArrayList<ResourceSkyline>();\r\n    resourceSkylinesInvalid.add(null);\r\n    skylineStore.updateHistory(recurrenceIdInvalid, resourceSkylines);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\skylinestore\\impl",
  "methodName" : "cleanUp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void cleanUp()\n{\r\n    skylineStore = null;\r\n    resourceOverTime.clear();\r\n    resourceOverTime = null;\r\n    skylineList = null;\r\n    riAdd = null;\r\n    resource = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\skylinestore\\impl",
  "methodName" : "createSkylineStore",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SkylineStore createSkylineStore()\n{\r\n    return new InMemoryStore();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\service",
  "methodName" : "getInjector",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Injector getInjector()\n{\r\n    return internalInjector;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\service",
  "methodName" : "setInjector",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Injector setInjector(Injector in)\n{\r\n    internalInjector = in;\r\n    return internalInjector;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\common\\serialization",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setup()\n{\r\n    resourceOverTime = new TreeMap<>();\r\n    skylineList = new RLESparseResourceAllocation(resourceOverTime, new DefaultResourceCalculator());\r\n    resource = Resource.newInstance(1024 * 100, 100);\r\n    resource2 = Resource.newInstance(1024 * 200, 200);\r\n    gson = new GsonBuilder().registerTypeAdapter(Resource.class, new ResourceSerDe()).registerTypeAdapter(RLESparseResourceAllocation.class, new RLESparseResourceAllocationSerDe()).create();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\common\\serialization",
  "methodName" : "testSerialization",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testSerialization()\n{\r\n    ReservationInterval riAdd = new ReservationInterval(0, 10);\r\n    skylineList.addInterval(riAdd, resource);\r\n    riAdd = new ReservationInterval(10, 20);\r\n    skylineList.addInterval(riAdd, resource2);\r\n    resourceSkyline = new ResourceSkyline(\"1\", 1024.5, 0, 20, resource, skylineList);\r\n    final String json = gson.toJson(resourceSkyline, new TypeToken<ResourceSkyline>() {\r\n    }.getType());\r\n    final ResourceSkyline resourceSkylineDe = gson.fromJson(json, new TypeToken<ResourceSkyline>() {\r\n    }.getType());\r\n    Assert.assertEquals(resourceSkylineDe.getJobId(), resourceSkyline.getJobId());\r\n    Assert.assertEquals(resourceSkylineDe.getJobInputDataSize(), resourceSkyline.getJobInputDataSize(), 0);\r\n    Assert.assertEquals(resourceSkylineDe.getJobSubmissionTime(), resourceSkyline.getJobSubmissionTime());\r\n    Assert.assertEquals(resourceSkylineDe.getJobFinishTime(), resourceSkyline.getJobFinishTime());\r\n    Assert.assertEquals(resourceSkylineDe.getContainerSpec().getMemorySize(), resourceSkyline.getContainerSpec().getMemorySize());\r\n    Assert.assertEquals(resourceSkylineDe.getContainerSpec().getVirtualCores(), resourceSkyline.getContainerSpec().getVirtualCores());\r\n    final RLESparseResourceAllocation skylineList2 = resourceSkyline.getSkylineList();\r\n    final RLESparseResourceAllocation skylineListDe = resourceSkylineDe.getSkylineList();\r\n    for (int i = 0; i < 20; i++) {\r\n        Assert.assertEquals(skylineList2.getCapacityAtTime(i).getMemorySize(), skylineListDe.getCapacityAtTime(i).getMemorySize());\r\n        Assert.assertEquals(skylineList2.getCapacityAtTime(i).getVirtualCores(), skylineListDe.getCapacityAtTime(i).getVirtualCores());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\common\\serialization",
  "methodName" : "cleanUp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void cleanUp()\n{\r\n    gson = null;\r\n    resourceSkyline = null;\r\n    resourceOverTime.clear();\r\n    resourceOverTime = null;\r\n    resource = null;\r\n    resource2 = null;\r\n    skylineList = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\translator\\api",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void setup() throws ParseException\n{\r\n    recurrenceId = new RecurrenceId(\"Fraud Detection\", \"17/07/16 16:27:25\");\r\n    jobMetaData = new JobMetaData(logParserUtil.stringToUnixTimestamp(\"17/07/16 16:27:25\"));\r\n    jobMetaData.setRecurrenceId(recurrenceId);\r\n    jobMetaData.setContainerStart(\"C1\", logParserUtil.stringToUnixTimestamp(\"17/07/16 16:27:30\"));\r\n    jobMetaData.setContainerEnd(\"C1\", logParserUtil.stringToUnixTimestamp(\"17/07/16 16:37:30\"));\r\n    jobMetaData.setContainerStart(\"C2\", logParserUtil.stringToUnixTimestamp(\"17/07/16 16:27:40\"));\r\n    jobMetaData.setContainerEnd(\"C2\", logParserUtil.stringToUnixTimestamp(\"17/07/16 16:37:40\"));\r\n    jobMetaData.setJobFinishTime(logParserUtil.stringToUnixTimestamp(\"17/07/16 16:37:45\"));\r\n    final Resource containerAlloc = Resource.newInstance(1, 1);\r\n    jobMetaData.getResourceSkyline().setContainerSpec(containerAlloc);\r\n    jobMetaData.getResourceSkyline().setJobInputDataSize(1024.5);\r\n    jobMetaData.createSkyline();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\translator\\api",
  "methodName" : "testGetContainerSpec",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetContainerSpec()\n{\r\n    final Resource containerAlloc = jobMetaData.getResourceSkyline().getContainerSpec();\r\n    final Resource containerAlloc2 = Resource.newInstance(1, 1);\r\n    Assert.assertEquals(containerAlloc.getMemorySize(), containerAlloc2.getMemorySize());\r\n    Assert.assertEquals(containerAlloc.getVirtualCores(), containerAlloc2.getVirtualCores());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\translator\\api",
  "methodName" : "testGetJobSize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetJobSize()\n{\r\n    Assert.assertEquals(jobMetaData.getResourceSkyline().getJobInputDataSize(), 1024.5, 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\translator\\api",
  "methodName" : "testGetRecurrenceeId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetRecurrenceeId()\n{\r\n    final RecurrenceId recurrenceIdTest = new RecurrenceId(\"Fraud Detection\", \"17/07/16 16:27:25\");\r\n    Assert.assertEquals(recurrenceIdTest, jobMetaData.getRecurrenceId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\translator\\api",
  "methodName" : "testStringToUnixTimestamp",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testStringToUnixTimestamp() throws ParseException\n{\r\n    final long submissionTime = logParserUtil.stringToUnixTimestamp(\"17/07/16 16:27:25\");\r\n    Assert.assertEquals(jobMetaData.getResourceSkyline().getJobSubmissionTime(), submissionTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\translator\\api",
  "methodName" : "testResourceSkyline",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testResourceSkyline()\n{\r\n    final RLESparseResourceAllocation skylineList = jobMetaData.getResourceSkyline().getSkylineList();\r\n    final int containerCPU = jobMetaData.getResourceSkyline().getContainerSpec().getVirtualCores();\r\n    int k;\r\n    for (k = 0; k < 5; k++) {\r\n        Assert.assertEquals(0, skylineList.getCapacityAtTime(k).getVirtualCores() / containerCPU);\r\n    }\r\n    for (k = 5; k < 15; k++) {\r\n        Assert.assertEquals(1, skylineList.getCapacityAtTime(k).getVirtualCores() / containerCPU);\r\n    }\r\n    for (k = 15; k < 605; k++) {\r\n        Assert.assertEquals(2, skylineList.getCapacityAtTime(k).getVirtualCores() / containerCPU);\r\n    }\r\n    for (k = 605; k < 615; k++) {\r\n        Assert.assertEquals(1, skylineList.getCapacityAtTime(k).getVirtualCores() / containerCPU);\r\n    }\r\n    Assert.assertEquals(0, skylineList.getCapacityAtTime(615).getVirtualCores() / containerCPU);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\translator\\api",
  "methodName" : "testContainerReleaseTimeMissing",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testContainerReleaseTimeMissing() throws ParseException\n{\r\n    recurrenceId = new RecurrenceId(\"Fraud Detection\", \"17/07/16 16:27:25\");\r\n    jobMetaData = new JobMetaData(logParserUtil.stringToUnixTimestamp(\"17/07/16 16:27:25\"));\r\n    jobMetaData.setRecurrenceId(recurrenceId);\r\n    jobMetaData.setContainerStart(\"C1\", logParserUtil.stringToUnixTimestamp(\"17/07/16 16:27:30\"));\r\n    jobMetaData.setContainerEnd(\"C1\", logParserUtil.stringToUnixTimestamp(\"17/07/16 16:37:30\"));\r\n    jobMetaData.setContainerStart(\"C2\", logParserUtil.stringToUnixTimestamp(\"17/07/16 16:27:40\"));\r\n    jobMetaData.setJobFinishTime(logParserUtil.stringToUnixTimestamp(\"17/07/16 16:37:45\"));\r\n    final Resource containerAlloc = Resource.newInstance(1, 1);\r\n    jobMetaData.getResourceSkyline().setContainerSpec(containerAlloc);\r\n    jobMetaData.getResourceSkyline().setJobInputDataSize(1024.5);\r\n    jobMetaData.createSkyline();\r\n    final RLESparseResourceAllocation skylineList = jobMetaData.getResourceSkyline().getSkylineList();\r\n    final int containerCPU = jobMetaData.getResourceSkyline().getContainerSpec().getVirtualCores();\r\n    int k;\r\n    for (k = 0; k < 5; k++) {\r\n        Assert.assertEquals(0, skylineList.getCapacityAtTime(k).getVirtualCores() / containerCPU);\r\n    }\r\n    for (k = 5; k < 605; k++) {\r\n        Assert.assertEquals(1, skylineList.getCapacityAtTime(k).getVirtualCores() / containerCPU);\r\n    }\r\n    Assert.assertEquals(0, skylineList.getCapacityAtTime(605).getVirtualCores() / containerCPU);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-resourceestimator\\src\\test\\java\\org\\apache\\hadoop\\resourceestimator\\translator\\api",
  "methodName" : "cleanUp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void cleanUp()\n{\r\n    jobMetaData = null;\r\n    recurrenceId = null;\r\n    logParserUtil = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
} ]