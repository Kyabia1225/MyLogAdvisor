[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\yarn",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    fc = AliyunOSSTestUtils.createTestFileContext(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\yarn",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    if (fc != null) {\r\n        fc.delete(getTestPath(), true);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\yarn",
  "methodName" : "getTestPath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getTestPath()\n{\r\n    return new Path(AliyunOSSTestUtils.generateUniqueTestPath());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\yarn",
  "methodName" : "testOSSStatus",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testOSSStatus() throws Exception\n{\r\n    FsStatus fsStatus = fc.getFsStatus(null);\r\n    assertNotNull(fsStatus);\r\n    assertTrue(\"Used capacity should be positive: \" + fsStatus.getUsed(), fsStatus.getUsed() >= 0);\r\n    assertTrue(\"Remaining capacity should be positive: \" + fsStatus.getRemaining(), fsStatus.getRemaining() >= 0);\r\n    assertTrue(\"Capacity should be positive: \" + fsStatus.getCapacity(), fsStatus.getCapacity() >= 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\yarn",
  "methodName" : "testOSSCreateFileInSubDir",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testOSSCreateFileInSubDir() throws Exception\n{\r\n    Path dirPath = getTestPath();\r\n    fc.mkdir(dirPath, FileContext.DIR_DEFAULT_PERM, true);\r\n    Path filePath = new Path(dirPath, \"file\");\r\n    try (FSDataOutputStream file = fc.create(filePath, EnumSet.of(CreateFlag.CREATE))) {\r\n        file.write(666);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\contract",
  "methodName" : "createContract",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AbstractFSContract createContract(Configuration conf)\n{\r\n    return new AliyunOSSContract(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\contract",
  "methodName" : "createContract",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AbstractFSContract createContract(Configuration conf)\n{\r\n    return new AliyunOSSContract(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\contract",
  "methodName" : "testSeekBeyondDownloadSize",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testSeekBeyondDownloadSize() throws Throwable\n{\r\n    describe(\"seek and read beyond download size.\");\r\n    Path byteFile = path(\"byte_file.txt\");\r\n    byte[] block = dataset(100 * 1024 + 10, 0, 255);\r\n    FileSystem fs = getFileSystem();\r\n    createFile(fs, byteFile, true, block);\r\n    FSDataInputStream instream = getFileSystem().open(byteFile);\r\n    instream.seek(100 * 1024 - 1);\r\n    assertEquals(100 * 1024 - 1, instream.getPos());\r\n    assertEquals(144, instream.read());\r\n    instream.seek(100 * 1024 + 1);\r\n    assertEquals(100 * 1024 + 1, instream.getPos());\r\n    assertEquals(146, instream.read());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    fs = AliyunOSSTestUtils.createTestFileSystem(conf);\r\n    assumeNotNull(fs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "getTestBaseDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Path getTestBaseDir()\n{\r\n    return testRootPath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "testMkdirsWithUmask",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void testMkdirsWithUmask() throws Exception\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "testRootDirAlwaysExists",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testRootDirAlwaysExists() throws Exception\n{\r\n    fs.getFileStatus(super.path(\"/\"));\r\n    assertTrue(\"FileSystem.exists() fails for root\", fs.exists(super.path(\"/\")));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "testRenameRootDirForbidden",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testRenameRootDirForbidden() throws Exception\n{\r\n    assumeTrue(renameSupported());\r\n    rename(super.path(\"/\"), super.path(\"/test/newRootDir\"), false, true, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "testListStatus",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testListStatus() throws IOException\n{\r\n    Path file = this.path(\"/test/hadoop/file\");\r\n    this.createFile(file);\r\n    assertTrue(\"File exists\", this.fs.exists(file));\r\n    FileStatus fs = this.fs.getFileStatus(file);\r\n    assertEquals(fs.getOwner(), UserGroupInformation.getCurrentUser().getShortUserName());\r\n    assertEquals(fs.getGroup(), UserGroupInformation.getCurrentUser().getShortUserName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "testGetFileStatusInVersioningBucket",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testGetFileStatusInVersioningBucket() throws Exception\n{\r\n    Path file = this.path(\"/test/hadoop/file\");\r\n    for (int i = 1; i <= 30; ++i) {\r\n        this.createFile(new Path(file, \"sub\" + i));\r\n    }\r\n    assertTrue(\"File exists\", this.fs.exists(file));\r\n    FileStatus fs = this.fs.getFileStatus(file);\r\n    assertEquals(fs.getOwner(), UserGroupInformation.getCurrentUser().getShortUserName());\r\n    assertEquals(fs.getGroup(), UserGroupInformation.getCurrentUser().getShortUserName());\r\n    AliyunOSSFileSystemStore store = ((AliyunOSSFileSystem) this.fs).getStore();\r\n    for (int i = 0; i < 29; ++i) {\r\n        store.deleteObjects(Arrays.asList(\"test/hadoop/file/sub\" + i));\r\n    }\r\n    this.fs.getFileStatus(file);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "testDeleteSubdir",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testDeleteSubdir() throws IOException\n{\r\n    Path parentDir = this.path(\"/test/hadoop\");\r\n    Path file = this.path(\"/test/hadoop/file\");\r\n    Path subdir = this.path(\"/test/hadoop/subdir\");\r\n    this.createFile(file);\r\n    assertTrue(\"Created subdir\", this.fs.mkdirs(subdir));\r\n    assertTrue(\"File exists\", this.fs.exists(file));\r\n    assertTrue(\"Parent dir exists\", this.fs.exists(parentDir));\r\n    assertTrue(\"Subdir exists\", this.fs.exists(subdir));\r\n    assertTrue(\"Deleted subdir\", this.fs.delete(subdir, true));\r\n    assertTrue(\"Parent should exist\", this.fs.exists(parentDir));\r\n    assertTrue(\"Deleted file\", this.fs.delete(file, false));\r\n    assertTrue(\"Parent should exist\", this.fs.exists(parentDir));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "renameSupported",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean renameSupported()\n{\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "testRenameNonExistentPath",
  "errType" : [ "FileNotFoundException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testRenameNonExistentPath() throws Exception\n{\r\n    assumeTrue(renameSupported());\r\n    Path src = this.path(\"/test/hadoop/path\");\r\n    Path dst = this.path(\"/test/new/newpath\");\r\n    try {\r\n        super.rename(src, dst, false, false, false);\r\n        fail(\"Should throw FileNotFoundException!\");\r\n    } catch (FileNotFoundException e) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "testRenameFileMoveToNonExistentDirectory",
  "errType" : [ "FileNotFoundException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testRenameFileMoveToNonExistentDirectory() throws Exception\n{\r\n    assumeTrue(renameSupported());\r\n    Path src = this.path(\"/test/hadoop/file\");\r\n    this.createFile(src);\r\n    Path dst = this.path(\"/test/new/newfile\");\r\n    try {\r\n        super.rename(src, dst, false, true, false);\r\n        fail(\"Should throw FileNotFoundException!\");\r\n    } catch (FileNotFoundException e) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "testRenameDirectoryConcurrent",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testRenameDirectoryConcurrent() throws Exception\n{\r\n    assumeTrue(renameSupported());\r\n    Path src = this.path(\"/test/hadoop/file/\");\r\n    Path child1 = this.path(\"/test/hadoop/file/1\");\r\n    Path child2 = this.path(\"/test/hadoop/file/2\");\r\n    Path child3 = this.path(\"/test/hadoop/file/3\");\r\n    Path child4 = this.path(\"/test/hadoop/file/4\");\r\n    this.createFile(child1);\r\n    this.createFile(child2);\r\n    this.createFile(child3);\r\n    this.createFile(child4);\r\n    Path dst = this.path(\"/test/new\");\r\n    super.rename(src, dst, true, false, true);\r\n    assertEquals(4, this.fs.listStatus(dst).length);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "testRenameDirectoryCopyTaskAllSucceed",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testRenameDirectoryCopyTaskAllSucceed() throws Exception\n{\r\n    assumeTrue(renameSupported());\r\n    Path srcOne = this.path(\"/test/hadoop/file/1\");\r\n    this.createFile(srcOne);\r\n    Path dstOne = this.path(\"/test/new/file/1\");\r\n    Path dstTwo = this.path(\"/test/new/file/2\");\r\n    AliyunOSSCopyFileContext copyFileContext = new AliyunOSSCopyFileContext();\r\n    AliyunOSSFileSystemStore store = ((AliyunOSSFileSystem) this.fs).getStore();\r\n    store.storeEmptyFile(\"test/new/file/\");\r\n    AliyunOSSCopyFileTask oneCopyFileTask = new AliyunOSSCopyFileTask(store, srcOne.toUri().getPath().substring(1), data.length, dstOne.toUri().getPath().substring(1), copyFileContext);\r\n    oneCopyFileTask.run();\r\n    assumeFalse(copyFileContext.isCopyFailure());\r\n    AliyunOSSCopyFileTask twoCopyFileTask = new AliyunOSSCopyFileTask(store, srcOne.toUri().getPath().substring(1), data.length, dstTwo.toUri().getPath().substring(1), copyFileContext);\r\n    twoCopyFileTask.run();\r\n    assumeFalse(copyFileContext.isCopyFailure());\r\n    copyFileContext.lock();\r\n    try {\r\n        copyFileContext.awaitAllFinish(2);\r\n    } catch (InterruptedException e) {\r\n        throw new Exception(e);\r\n    } finally {\r\n        copyFileContext.unlock();\r\n    }\r\n    assumeFalse(copyFileContext.isCopyFailure());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "testRenameDirectoryCopyTaskAllFailed",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testRenameDirectoryCopyTaskAllFailed() throws Exception\n{\r\n    assumeTrue(renameSupported());\r\n    Path srcOne = this.path(\"/test/hadoop/file/1\");\r\n    this.createFile(srcOne);\r\n    Path dstOne = new Path(\"1\");\r\n    Path dstTwo = new Path(\"2\");\r\n    AliyunOSSCopyFileContext copyFileContext = new AliyunOSSCopyFileContext();\r\n    AliyunOSSFileSystemStore store = ((AliyunOSSFileSystem) this.fs).getStore();\r\n    AliyunOSSCopyFileTask oneCopyFileTask = new AliyunOSSCopyFileTask(store, srcOne.toUri().getPath().substring(1), data.length, dstOne.toUri().getPath().substring(1), copyFileContext);\r\n    oneCopyFileTask.run();\r\n    assumeTrue(copyFileContext.isCopyFailure());\r\n    AliyunOSSCopyFileTask twoCopyFileTask = new AliyunOSSCopyFileTask(store, srcOne.toUri().getPath().substring(1), data.length, dstTwo.toUri().getPath().substring(1), copyFileContext);\r\n    twoCopyFileTask.run();\r\n    assumeTrue(copyFileContext.isCopyFailure());\r\n    copyFileContext.lock();\r\n    try {\r\n        copyFileContext.awaitAllFinish(2);\r\n    } catch (InterruptedException e) {\r\n        throw new Exception(e);\r\n    } finally {\r\n        copyFileContext.unlock();\r\n    }\r\n    assumeTrue(copyFileContext.isCopyFailure());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "testRenameDirectoryCopyTaskPartialFailed",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testRenameDirectoryCopyTaskPartialFailed() throws Exception\n{\r\n    assumeTrue(renameSupported());\r\n    Path srcOne = this.path(\"/test/hadoop/file/1\");\r\n    this.createFile(srcOne);\r\n    Path dstOne = new Path(\"1\");\r\n    Path dstTwo = new Path(\"/test/new/file/2\");\r\n    Path dstThree = new Path(\"3\");\r\n    AliyunOSSCopyFileContext copyFileContext = new AliyunOSSCopyFileContext();\r\n    AliyunOSSFileSystemStore store = ((AliyunOSSFileSystem) this.fs).getStore();\r\n    AliyunOSSCopyFileTask oneCopyFileTask = new AliyunOSSCopyFileTask(store, srcOne.toUri().getPath().substring(1), data.length, dstOne.toUri().getPath().substring(1), copyFileContext);\r\n    oneCopyFileTask.run();\r\n    assumeTrue(copyFileContext.isCopyFailure());\r\n    AliyunOSSCopyFileTask twoCopyFileTask = new AliyunOSSCopyFileTask(store, srcOne.toUri().getPath().substring(1), data.length, dstTwo.toUri().getPath().substring(1), copyFileContext);\r\n    twoCopyFileTask.run();\r\n    assumeTrue(copyFileContext.isCopyFailure());\r\n    AliyunOSSCopyFileTask threeCopyFileTask = new AliyunOSSCopyFileTask(store, srcOne.toUri().getPath().substring(1), data.length, dstThree.toUri().getPath().substring(1), copyFileContext);\r\n    threeCopyFileTask.run();\r\n    assumeTrue(copyFileContext.isCopyFailure());\r\n    copyFileContext.lock();\r\n    try {\r\n        copyFileContext.awaitAllFinish(3);\r\n    } catch (InterruptedException e) {\r\n        throw new Exception(e);\r\n    } finally {\r\n        copyFileContext.unlock();\r\n    }\r\n    assumeTrue(copyFileContext.isCopyFailure());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "testRenameDirectoryMoveToNonExistentDirectory",
  "errType" : [ "FileNotFoundException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testRenameDirectoryMoveToNonExistentDirectory() throws Exception\n{\r\n    assumeTrue(renameSupported());\r\n    Path src = this.path(\"/test/hadoop/dir\");\r\n    this.fs.mkdirs(src);\r\n    Path dst = this.path(\"/test/new/newdir\");\r\n    try {\r\n        super.rename(src, dst, false, true, false);\r\n        fail(\"Should throw FileNotFoundException!\");\r\n    } catch (FileNotFoundException e) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "testRenameFileMoveToExistingDirectory",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testRenameFileMoveToExistingDirectory() throws Exception\n{\r\n    super.testRenameFileMoveToExistingDirectory();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "testRenameFileAsExistingFile",
  "errType" : [ "FileAlreadyExistsException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testRenameFileAsExistingFile() throws Exception\n{\r\n    assumeTrue(renameSupported());\r\n    Path src = this.path(\"/test/hadoop/file\");\r\n    this.createFile(src);\r\n    Path dst = this.path(\"/test/new/newfile\");\r\n    this.createFile(dst);\r\n    try {\r\n        super.rename(src, dst, false, true, true);\r\n        fail(\"Should throw FileAlreadyExistsException\");\r\n    } catch (FileAlreadyExistsException e) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "testRenameDirectoryAsExistingFile",
  "errType" : [ "FileAlreadyExistsException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testRenameDirectoryAsExistingFile() throws Exception\n{\r\n    assumeTrue(renameSupported());\r\n    Path src = this.path(\"/test/hadoop/dir\");\r\n    this.fs.mkdirs(src);\r\n    Path dst = this.path(\"/test/new/newfile\");\r\n    this.createFile(dst);\r\n    try {\r\n        super.rename(src, dst, false, true, true);\r\n        fail(\"Should throw FileAlreadyExistsException\");\r\n    } catch (FileAlreadyExistsException e) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "testGetFileStatusFileAndDirectory",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testGetFileStatusFileAndDirectory() throws Exception\n{\r\n    Path filePath = this.path(\"/test/oss/file1\");\r\n    this.createFile(filePath);\r\n    assertTrue(\"Should be file\", this.fs.getFileStatus(filePath).isFile());\r\n    assertFalse(\"Should not be directory\", this.fs.getFileStatus(filePath).isDirectory());\r\n    Path dirPath = this.path(\"/test/oss/dir\");\r\n    this.fs.mkdirs(dirPath);\r\n    assertTrue(\"Should be directory\", this.fs.getFileStatus(dirPath).isDirectory());\r\n    assertFalse(\"Should not be file\", this.fs.getFileStatus(dirPath).isFile());\r\n    Path parentPath = this.path(\"/test/oss\");\r\n    for (FileStatus fileStatus : fs.listStatus(parentPath)) {\r\n        assertTrue(\"file and directory should be new\", fileStatus.getModificationTime() > 0L);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "testMkdirsForExistingFile",
  "errType" : [ "FileAlreadyExistsException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testMkdirsForExistingFile() throws Exception\n{\r\n    Path testFile = this.path(\"/test/hadoop/file\");\r\n    assertFalse(this.fs.exists(testFile));\r\n    this.createFile(testFile);\r\n    assertTrue(this.fs.exists(testFile));\r\n    try {\r\n        this.fs.mkdirs(testFile);\r\n        fail(\"Should throw FileAlreadyExistsException!\");\r\n    } catch (FileAlreadyExistsException e) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "testRenameChangingDirShouldFail",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testRenameChangingDirShouldFail() throws Exception\n{\r\n    testRenameDir(true, false, false);\r\n    testRenameDir(true, true, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "testRenameDir",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testRenameDir() throws Exception\n{\r\n    testRenameDir(false, true, false);\r\n    testRenameDir(false, true, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "testRenameDir",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testRenameDir(boolean changing, boolean result, boolean empty) throws Exception\n{\r\n    fs.getConf().setLong(Constants.FS_OSS_BLOCK_SIZE_KEY, 1024);\r\n    String key = \"a/b/test.file\";\r\n    for (int i = 0; i < 100; i++) {\r\n        if (empty) {\r\n            fs.createNewFile(this.path(key + \".\" + i));\r\n        } else {\r\n            createFile(this.path(key + \".\" + i));\r\n        }\r\n    }\r\n    Path srcPath = this.path(\"a\");\r\n    Path dstPath = this.path(\"b\");\r\n    TestRenameTask task = new TestRenameTask(fs, srcPath, dstPath);\r\n    Thread thread = new Thread(task);\r\n    thread.start();\r\n    while (!task.isRunning()) {\r\n        Thread.sleep(1);\r\n    }\r\n    if (changing) {\r\n        fs.delete(this.path(\"a/b\"), true);\r\n    }\r\n    thread.join();\r\n    if (changing) {\r\n        assertTrue(task.isSucceed() || fs.exists(this.path(\"a\")));\r\n    } else {\r\n        assertEquals(result, task.isSucceed());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "getGlobalTimeout",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getGlobalTimeout()\n{\r\n    return 120 * 1000;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\fileContext",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setUp() throws IOException, Exception\n{\r\n    Configuration conf = new Configuration();\r\n    fc1 = AliyunOSSTestUtils.createTestFileContext(conf);\r\n    fc2 = AliyunOSSTestUtils.createTestFileContext(conf);\r\n    super.setUp();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\fileContext",
  "methodName" : "testFileStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void testFileStatus() throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "createTestFileSystem",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AliyunOSSFileSystem createTestFileSystem(Configuration conf) throws IOException\n{\r\n    AliyunOSSFileSystem ossfs = new AliyunOSSFileSystem();\r\n    ossfs.initialize(getURI(conf), conf);\r\n    return ossfs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "createTestFileContext",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FileContext createTestFileContext(Configuration conf) throws IOException\n{\r\n    return FileContext.getFileContext(getURI(conf), conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "getURI",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "URI getURI(Configuration conf)\n{\r\n    String fsname = conf.getTrimmed(TestAliyunOSSFileSystemContract.TEST_FS_OSS_NAME, \"\");\r\n    boolean liveTest = !StringUtils.isEmpty(fsname);\r\n    URI testURI = null;\r\n    if (liveTest) {\r\n        testURI = URI.create(fsname);\r\n        liveTest = testURI.getScheme().equals(Constants.FS_OSS);\r\n    }\r\n    if (!liveTest) {\r\n        throw new AssumptionViolatedException(\"No test filesystem in \" + TestAliyunOSSFileSystemContract.TEST_FS_OSS_NAME);\r\n    }\r\n    return testURI;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "generateUniqueTestPath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String generateUniqueTestPath()\n{\r\n    String testUniqueForkId = System.getProperty(\"test.unique.fork.id\");\r\n    return testUniqueForkId == null ? \"/test\" : \"/\" + testUniqueForkId + \"/test\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "disableFilesystemCaching",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void disableFilesystemCaching(Configuration conf)\n{\r\n    conf.setBoolean(TestAliyunOSSFileSystemContract.FS_OSS_IMPL_DISABLE_CACHE, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\fileContext",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setUp() throws IOException, Exception\n{\r\n    Configuration conf = new Configuration();\r\n    fc = AliyunOSSTestUtils.createTestFileContext(conf);\r\n    super.setUp();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\contract",
  "methodName" : "createContract",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AbstractFSContract createContract(Configuration conf)\n{\r\n    return new AliyunOSSContract(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\yarn",
  "methodName" : "createContract",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AbstractFSContract createContract(Configuration configuration)\n{\r\n    this.conf = configuration;\r\n    return new AliyunOSSContract(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\yarn",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    super.setup();\r\n    fs = getFileSystem();\r\n    rootPath = path(\"MiniClusterWordCount\");\r\n    Path workingDir = path(\"working\");\r\n    fs.setWorkingDirectory(workingDir);\r\n    fs.mkdirs(new Path(rootPath, \"input/\"));\r\n    yarnCluster = new MiniYARNCluster(\"MiniClusterWordCount\", 1, 1, 1);\r\n    yarnCluster.init(conf);\r\n    yarnCluster.start();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\yarn",
  "methodName" : "testWithMiniCluster",
  "errType" : null,
  "containingMethodsNum" : 22,
  "sourceCodeText" : "void testWithMiniCluster() throws Exception\n{\r\n    Path input = new Path(rootPath, \"input/in\");\r\n    input = input.makeQualified(fs.getUri(), fs.getWorkingDirectory());\r\n    Path output = new Path(rootPath, \"output/\");\r\n    output = output.makeQualified(fs.getUri(), fs.getWorkingDirectory());\r\n    writeStringToFile(input, \"first line\\nsecond line\\nthird line\");\r\n    Job job = Job.getInstance(conf, \"word count\");\r\n    job.setJarByClass(WordCount.class);\r\n    job.setMapperClass(WordCount.TokenizerMapper.class);\r\n    job.setCombinerClass(WordCount.IntSumReducer.class);\r\n    job.setReducerClass(WordCount.IntSumReducer.class);\r\n    job.setOutputKeyClass(Text.class);\r\n    job.setOutputValueClass(IntWritable.class);\r\n    FileInputFormat.addInputPath(job, input);\r\n    FileOutputFormat.setOutputPath(job, output);\r\n    int exitCode = (job.waitForCompletion(true) ? 0 : 1);\r\n    assertEquals(\"Returned error code.\", 0, exitCode);\r\n    assertTrue(fs.exists(new Path(output, \"_SUCCESS\")));\r\n    String outputAsStr = readStringFromFile(new Path(output, \"part-r-00000\"));\r\n    Map<String, Integer> resAsMap = getResultAsMap(outputAsStr);\r\n    assertEquals(4, resAsMap.size());\r\n    assertEquals(1, (int) resAsMap.get(\"first\"));\r\n    assertEquals(1, (int) resAsMap.get(\"second\"));\r\n    assertEquals(1, (int) resAsMap.get(\"third\"));\r\n    assertEquals(3, (int) resAsMap.get(\"line\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\yarn",
  "methodName" : "getResultAsMap",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Map<String, Integer> getResultAsMap(String outputAsStr)\n{\r\n    Map<String, Integer> result = new HashMap<>();\r\n    for (String line : outputAsStr.split(\"\\n\")) {\r\n        String[] tokens = line.split(\"\\t\");\r\n        assertTrue(\"Not enough tokens in in string \\\" \" + line + \"\\\" from output \\\"\" + outputAsStr + \"\\\"\", tokens.length > 1);\r\n        result.put(tokens[0], Integer.parseInt(tokens[1]));\r\n    }\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\yarn",
  "methodName" : "writeStringToFile",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void writeStringToFile(Path path, String string) throws IOException\n{\r\n    FileContext fc = AliyunOSSTestUtils.createTestFileContext(conf);\r\n    try (FSDataOutputStream file = fc.create(path, EnumSet.of(CreateFlag.CREATE))) {\r\n        file.write(string.getBytes());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\yarn",
  "methodName" : "readStringFromFile",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String readStringFromFile(Path path) throws IOException\n{\r\n    try (FSDataInputStream in = fs.open(path)) {\r\n        long bytesLen = fs.getFileStatus(path).getLen();\r\n        byte[] buffer = new byte[(int) bytesLen];\r\n        IOUtils.readFully(in, buffer, 0, buffer.length);\r\n        return new String(buffer);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\yarn",
  "methodName" : "teardown",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void teardown() throws Exception\n{\r\n    if (yarnCluster != null) {\r\n        yarnCluster.stop();\r\n    }\r\n    super.teardown();\r\n    IOUtils.closeStream(getFileSystem());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    conf = new Configuration();\r\n    fs = new AliyunOSSFileSystem();\r\n    fs.initialize(URI.create(conf.get(\"test.fs.oss.name\")), conf);\r\n    store = fs.getStore();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "tearDown",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    try {\r\n        store.purge(\"test\");\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n        throw e;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "checkSettings",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void checkSettings() throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    assumeNotNull(conf.get(Constants.ACCESS_KEY_ID));\r\n    assumeNotNull(conf.get(Constants.ACCESS_KEY_SECRET));\r\n    assumeNotNull(conf.get(\"test.fs.oss.name\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "writeRenameReadCompare",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void writeRenameReadCompare(Path path, long len) throws IOException, NoSuchAlgorithmException\n{\r\n    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\r\n    OutputStream out = new BufferedOutputStream(new DigestOutputStream(fs.create(path, false), digest));\r\n    for (long i = 0; i < len; i++) {\r\n        out.write('Q');\r\n    }\r\n    out.flush();\r\n    out.close();\r\n    assertTrue(\"Exists\", fs.exists(path));\r\n    ObjectMetadata srcMeta = fs.getStore().getObjectMetadata(path.toUri().getPath().substring(1));\r\n    Path copyPath = path.suffix(\".copy\");\r\n    fs.rename(path, copyPath);\r\n    assertTrue(\"Copy exists\", fs.exists(copyPath));\r\n    ObjectMetadata dstMeta = fs.getStore().getObjectMetadata(copyPath.toUri().getPath().substring(1));\r\n    assertEquals(srcMeta.getObjectType(), dstMeta.getObjectType());\r\n    MessageDigest digest2 = MessageDigest.getInstance(\"MD5\");\r\n    InputStream in = new BufferedInputStream(new DigestInputStream(fs.open(copyPath), digest2));\r\n    long copyLen = 0;\r\n    while (in.read() != -1) {\r\n        copyLen++;\r\n    }\r\n    in.close();\r\n    assertEquals(\"Copy length matches original\", len, copyLen);\r\n    assertArrayEquals(\"Digests match\", digest.digest(), digest2.digest());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "testSmallUpload",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testSmallUpload() throws IOException, NoSuchAlgorithmException\n{\r\n    writeRenameReadCompare(new Path(\"/test/small\"), 16384);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "testLargeUpload",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testLargeUpload() throws IOException, NoSuchAlgorithmException\n{\r\n    writeRenameReadCompare(new Path(\"/test/xlarge\"), Constants.MULTIPART_UPLOAD_PART_SIZE_DEFAULT + 1);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\contract",
  "methodName" : "createConfiguration",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Configuration createConfiguration()\n{\r\n    Configuration newConf = super.createConfiguration();\r\n    newConf.setLong(MULTIPART_UPLOAD_PART_SIZE_KEY, MULTIPART_SETTING);\r\n    return newConf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\contract",
  "methodName" : "createContract",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AliyunOSSContract createContract(Configuration conf)\n{\r\n    return new AliyunOSSContract(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\contract",
  "methodName" : "createContract",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AbstractFSContract createContract(Configuration conf)\n{\r\n    return new AliyunOSSContract(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\contract",
  "methodName" : "teardown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void teardown() throws Exception\n{\r\n    getLogger().info(\"FS details {}\", getFileSystem());\r\n    super.teardown();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\contract",
  "methodName" : "createConfiguration",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Configuration createConfiguration()\n{\r\n    Configuration conf = super.createConfiguration();\r\n    AliyunOSSTestUtils.disableFilesystemCaching(conf);\r\n    conf.setInt(Constants.MAX_PAGING_KEYS_KEY, 2);\r\n    conf.setInt(Constants.LIST_VERSION, 1);\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    fs = AliyunOSSTestUtils.createTestFileSystem(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    if (fs != null) {\r\n        fs.delete(new Path(testRootPath), true);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "setPath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path setPath(String path)\n{\r\n    if (path.startsWith(\"/\")) {\r\n        return new Path(testRootPath + path);\r\n    } else {\r\n        return new Path(testRootPath + \"/\" + path);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "testSeekFile",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testSeekFile() throws Exception\n{\r\n    Path smallSeekFile = setPath(\"/test/smallSeekFile.txt\");\r\n    long size = 5 * 1024 * 1024;\r\n    ContractTestUtils.generateTestFile(this.fs, smallSeekFile, size, 256, 255);\r\n    LOG.info(\"5MB file created: smallSeekFile.txt\");\r\n    FSDataInputStream instream = this.fs.open(smallSeekFile);\r\n    int seekTimes = 5;\r\n    LOG.info(\"multiple fold position seeking test...:\");\r\n    for (int i = 0; i < seekTimes; i++) {\r\n        long pos = size / (seekTimes - i) - 1;\r\n        LOG.info(\"begin seeking for pos: \" + pos);\r\n        instream.seek(pos);\r\n        assertTrue(\"expected position at:\" + pos + \", but got:\" + instream.getPos(), instream.getPos() == pos);\r\n        LOG.info(\"completed seeking at pos: \" + instream.getPos());\r\n    }\r\n    LOG.info(\"random position seeking test...:\");\r\n    Random rand = new Random();\r\n    for (int i = 0; i < seekTimes; i++) {\r\n        long pos = Math.abs(rand.nextLong()) % size;\r\n        LOG.info(\"begin seeking for pos: \" + pos);\r\n        instream.seek(pos);\r\n        assertTrue(\"expected position at:\" + pos + \", but got:\" + instream.getPos(), instream.getPos() == pos);\r\n        LOG.info(\"completed seeking at pos: \" + instream.getPos());\r\n    }\r\n    IOUtils.closeStream(instream);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "testSequentialAndRandomRead",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testSequentialAndRandomRead() throws Exception\n{\r\n    Path smallSeekFile = setPath(\"/test/smallSeekFile.txt\");\r\n    long size = 5 * 1024 * 1024;\r\n    ContractTestUtils.generateTestFile(this.fs, smallSeekFile, size, 256, 255);\r\n    LOG.info(\"5MB file created: smallSeekFile.txt\");\r\n    FSDataInputStream fsDataInputStream = this.fs.open(smallSeekFile);\r\n    AliyunOSSInputStream in = (AliyunOSSInputStream) fsDataInputStream.getWrappedStream();\r\n    assertTrue(\"expected position at:\" + 0 + \", but got:\" + fsDataInputStream.getPos(), fsDataInputStream.getPos() == 0);\r\n    assertTrue(\"expected position at:\" + Constants.MULTIPART_DOWNLOAD_SIZE_DEFAULT + \", but got:\" + in.getExpectNextPos(), in.getExpectNextPos() == Constants.MULTIPART_DOWNLOAD_SIZE_DEFAULT);\r\n    fsDataInputStream.seek(4 * 1024 * 1024);\r\n    assertTrue(\"expected position at:\" + 4 * 1024 * 1024 + Constants.MULTIPART_DOWNLOAD_SIZE_DEFAULT + \", but got:\" + in.getExpectNextPos(), in.getExpectNextPos() == 4 * 1024 * 1024 + Constants.MULTIPART_DOWNLOAD_SIZE_DEFAULT);\r\n    IOUtils.closeStream(fsDataInputStream);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "testOSSFileReaderTask",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testOSSFileReaderTask() throws Exception\n{\r\n    Path smallSeekFile = setPath(\"/test/smallSeekFileOSSFileReader.txt\");\r\n    long size = 5 * 1024 * 1024;\r\n    ContractTestUtils.generateTestFile(this.fs, smallSeekFile, size, 256, 255);\r\n    LOG.info(\"5MB file created: smallSeekFileOSSFileReader.txt\");\r\n    ReadBuffer readBuffer = new ReadBuffer(12, 24);\r\n    AliyunOSSFileReaderTask task = new AliyunOSSFileReaderTask(\"1\", ((AliyunOSSFileSystem) this.fs).getStore(), readBuffer);\r\n    task.run();\r\n    assertEquals(readBuffer.getStatus(), ReadBuffer.STATUS.ERROR);\r\n    task = new AliyunOSSFileReaderTask(\"test/test/smallSeekFileOSSFileReader.txt\", ((AliyunOSSFileSystem) this.fs).getStore(), readBuffer);\r\n    task.run();\r\n    assertEquals(readBuffer.getStatus(), ReadBuffer.STATUS.SUCCESS);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "testReadFile",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testReadFile() throws Exception\n{\r\n    final int bufLen = 256;\r\n    final int sizeFlag = 5;\r\n    String filename = \"readTestFile_\" + sizeFlag + \".txt\";\r\n    Path readTestFile = setPath(\"/test/\" + filename);\r\n    long size = sizeFlag * 1024 * 1024;\r\n    ContractTestUtils.generateTestFile(this.fs, readTestFile, size, 256, 255);\r\n    LOG.info(sizeFlag + \"MB file created: /test/\" + filename);\r\n    FSDataInputStream instream = this.fs.open(readTestFile);\r\n    byte[] buf = new byte[bufLen];\r\n    long bytesRead = 0;\r\n    while (bytesRead < size) {\r\n        int bytes;\r\n        if (size - bytesRead < bufLen) {\r\n            int remaining = (int) (size - bytesRead);\r\n            bytes = instream.read(buf, 0, remaining);\r\n        } else {\r\n            bytes = instream.read(buf, 0, bufLen);\r\n        }\r\n        bytesRead += bytes;\r\n        if (bytesRead % (1024 * 1024) == 0) {\r\n            int available = instream.available();\r\n            int remaining = (int) (size - bytesRead);\r\n            assertTrue(\"expected remaining:\" + remaining + \", but got:\" + available, remaining == available);\r\n            LOG.info(\"Bytes read: \" + Math.round((double) bytesRead / (1024 * 1024)) + \" MB\");\r\n        }\r\n    }\r\n    assertTrue(instream.available() == 0);\r\n    IOUtils.closeStream(instream);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "testDirectoryModifiedTime",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testDirectoryModifiedTime() throws Exception\n{\r\n    Path emptyDirPath = setPath(\"/test/emptyDirectory\");\r\n    fs.mkdirs(emptyDirPath);\r\n    FileStatus dirFileStatus = fs.getFileStatus(emptyDirPath);\r\n    assertTrue(\"expected the empty dir is new\", dirFileStatus.getModificationTime() > 0L);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\contract",
  "methodName" : "createContract",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AbstractFSContract createContract(Configuration conf)\n{\r\n    return new AliyunOSSContract(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\fileContext",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    fc = AliyunOSSTestUtils.createTestFileContext(conf);\r\n    fc.mkdir(fileContextTestHelper.getTestRootPath(fc, \"test\"), FileContext.DEFAULT_PERM, true);\r\n    FileContext.clearStatistics();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\fileContext",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    if (fc != null) {\r\n        fc.delete(fileContextTestHelper.getTestRootPath(fc, \"test\"), true);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\fileContext",
  "methodName" : "verifyReadBytes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void verifyReadBytes(FileSystem.Statistics stats)\n{\r\n    Assert.assertEquals(2 * blockSize, stats.getBytesRead());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\fileContext",
  "methodName" : "verifyWrittenBytes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void verifyWrittenBytes(FileSystem.Statistics stats)\n{\r\n    Assert.assertEquals(blockSize, stats.getBytesWritten());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\fileContext",
  "methodName" : "getFsUri",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "URI getFsUri()\n{\r\n    return fc.getHomeDirectory().toUri();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\contract",
  "methodName" : "createContract",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AbstractFSContract createContract(Configuration conf)\n{\r\n    return new AliyunOSSContract(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\contract",
  "methodName" : "createContract",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AbstractFSContract createContract(Configuration conf)\n{\r\n    return new AliyunOSSContract(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "createContract",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AbstractFSContract createContract(Configuration conf)\n{\r\n    return new AliyunOSSContract(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "testCredentialMissingAccessKeyId",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testCredentialMissingAccessKeyId() throws Throwable\n{\r\n    Configuration conf = new Configuration();\r\n    conf.set(ACCESS_KEY_ID, \"\");\r\n    conf.set(ACCESS_KEY_SECRET, \"accessKeySecret\");\r\n    conf.set(SECURITY_TOKEN, \"token\");\r\n    validateCredential(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "testCredentialMissingAccessKeySecret",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testCredentialMissingAccessKeySecret() throws Throwable\n{\r\n    Configuration conf = new Configuration();\r\n    conf.set(ACCESS_KEY_ID, \"accessKeyId\");\r\n    conf.set(ACCESS_KEY_SECRET, \"\");\r\n    conf.set(SECURITY_TOKEN, \"token\");\r\n    validateCredential(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "validateCredential",
  "errType" : [ "InvalidCredentialsException", "IOException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void validateCredential(URI uri, Configuration conf)\n{\r\n    try {\r\n        CredentialsProvider provider = AliyunOSSUtils.getCredentialsProvider(uri, conf);\r\n        Credentials credentials = provider.getCredentials();\r\n        fail(\"Expected a CredentialInitializationException, got \" + credentials);\r\n    } catch (InvalidCredentialsException expected) {\r\n    } catch (IOException e) {\r\n        Throwable cause = e.getCause();\r\n        if (cause instanceof InvocationTargetException) {\r\n            boolean isInstance = ((InvocationTargetException) cause).getTargetException() instanceof InvalidCredentialsException;\r\n            if (!isInstance) {\r\n                fail(\"Unexpected exception.\");\r\n            }\r\n        } else {\r\n            fail(\"Unexpected exception.\");\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "validateCredential",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void validateCredential(Configuration conf)\n{\r\n    validateCredential(null, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\fileContext",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setUp() throws IOException, Exception\n{\r\n    Configuration conf = new Configuration();\r\n    fc = AliyunOSSTestUtils.createTestFileContext(conf);\r\n    super.setUp();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\contract",
  "methodName" : "createContract",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AbstractFSContract createContract(Configuration conf)\n{\r\n    return new AliyunOSSContract(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    conf.setInt(MULTIPART_UPLOAD_PART_SIZE_KEY, PART_SIZE);\r\n    conf.setInt(IO_CHUNK_BUFFER_SIZE, conf.getInt(MULTIPART_UPLOAD_PART_SIZE_KEY, 0));\r\n    conf.setInt(Constants.UPLOAD_ACTIVE_BLOCKS_KEY, 20);\r\n    fs = AliyunOSSTestUtils.createTestFileSystem(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    if (fs != null) {\r\n        fs.delete(new Path(testRootPath), true);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "getTestPath",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Path getTestPath()\n{\r\n    return new Path(testRootPath + \"/test-aliyun-oss\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "testZeroByteUpload",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testZeroByteUpload() throws IOException\n{\r\n    ContractTestUtils.createAndVerifyFile(fs, getTestPath(), 0);\r\n    bufferDirShouldEmpty();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "testRegularUpload",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testRegularUpload() throws IOException\n{\r\n    FileSystem.clearStatistics();\r\n    long size = 1024 * 1024;\r\n    FileSystem.Statistics statistics = FileSystem.getStatistics(\"oss\", AliyunOSSFileSystem.class);\r\n    ContractTestUtils.createAndVerifyFile(fs, getTestPath(), size - 1);\r\n    assertEquals(7, statistics.getReadOps());\r\n    assertEquals(size - 1, statistics.getBytesRead());\r\n    assertEquals(3, statistics.getWriteOps());\r\n    assertEquals(size - 1, statistics.getBytesWritten());\r\n    ContractTestUtils.createAndVerifyFile(fs, getTestPath(), size);\r\n    assertEquals(14, statistics.getReadOps());\r\n    assertEquals(2 * size - 1, statistics.getBytesRead());\r\n    assertEquals(6, statistics.getWriteOps());\r\n    assertEquals(2 * size - 1, statistics.getBytesWritten());\r\n    ContractTestUtils.createAndVerifyFile(fs, getTestPath(), size + 1);\r\n    assertEquals(22, statistics.getReadOps());\r\n    assertEquals(3 * size, statistics.getBytesRead());\r\n    assertEquals(10, statistics.getWriteOps());\r\n    assertEquals(3 * size, statistics.getBytesWritten());\r\n    bufferDirShouldEmpty();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "testMultiPartUpload",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testMultiPartUpload() throws IOException\n{\r\n    long size = 6 * 1024 * 1024;\r\n    FileSystem.clearStatistics();\r\n    FileSystem.Statistics statistics = FileSystem.getStatistics(\"oss\", AliyunOSSFileSystem.class);\r\n    ContractTestUtils.createAndVerifyFile(fs, getTestPath(), size - 1);\r\n    assertEquals(17, statistics.getReadOps());\r\n    assertEquals(size - 1, statistics.getBytesRead());\r\n    assertEquals(8, statistics.getWriteOps());\r\n    assertEquals(size - 1, statistics.getBytesWritten());\r\n    ContractTestUtils.createAndVerifyFile(fs, getTestPath(), size);\r\n    assertEquals(34, statistics.getReadOps());\r\n    assertEquals(2 * size - 1, statistics.getBytesRead());\r\n    assertEquals(16, statistics.getWriteOps());\r\n    assertEquals(2 * size - 1, statistics.getBytesWritten());\r\n    ContractTestUtils.createAndVerifyFile(fs, getTestPath(), size + 1);\r\n    assertEquals(52, statistics.getReadOps());\r\n    assertEquals(3 * size, statistics.getBytesRead());\r\n    assertEquals(25, statistics.getWriteOps());\r\n    assertEquals(3 * size, statistics.getBytesWritten());\r\n    bufferDirShouldEmpty();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "testMultiPartUploadConcurrent",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testMultiPartUploadConcurrent() throws IOException\n{\r\n    FileSystem.clearStatistics();\r\n    long size = 50 * 1024 * 1024 - 1;\r\n    ContractTestUtils.createAndVerifyFile(fs, getTestPath(), size);\r\n    FileSystem.Statistics statistics = FileSystem.getStatistics(\"oss\", AliyunOSSFileSystem.class);\r\n    assertEquals(105, statistics.getReadOps());\r\n    assertEquals(size, statistics.getBytesRead());\r\n    assertEquals(52, statistics.getWriteOps());\r\n    assertEquals(size, statistics.getBytesWritten());\r\n    bufferDirShouldEmpty();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "testHugeUpload",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testHugeUpload() throws IOException\n{\r\n    ContractTestUtils.createAndVerifyFile(fs, getTestPath(), PART_SIZE - 1);\r\n    ContractTestUtils.createAndVerifyFile(fs, getTestPath(), PART_SIZE);\r\n    ContractTestUtils.createAndVerifyFile(fs, getTestPath(), MULTIPART_UPLOAD_PART_SIZE_DEFAULT + 1);\r\n    bufferDirShouldEmpty();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "testMultiPartUploadLimit",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testMultiPartUploadLimit() throws IOException\n{\r\n    long partSize1 = AliyunOSSUtils.calculatePartSize(10 * 1024, 100 * 1024);\r\n    assert (10 * 1024 / partSize1 < Constants.MULTIPART_UPLOAD_PART_NUM_LIMIT);\r\n    long partSize2 = AliyunOSSUtils.calculatePartSize(200 * 1024, 100 * 1024);\r\n    assert (200 * 1024 / partSize2 < Constants.MULTIPART_UPLOAD_PART_NUM_LIMIT);\r\n    long partSize3 = AliyunOSSUtils.calculatePartSize(10000 * 100 * 1024, 100 * 1024);\r\n    assert (10000 * 100 * 1024 / partSize3 < Constants.MULTIPART_UPLOAD_PART_NUM_LIMIT);\r\n    long partSize4 = AliyunOSSUtils.calculatePartSize(10001 * 100 * 1024, 100 * 1024);\r\n    assert (10001 * 100 * 1024 / partSize4 < Constants.MULTIPART_UPLOAD_PART_NUM_LIMIT);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "testSmallUpload",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testSmallUpload() throws IOException\n{\r\n    long size = fs.getConf().getInt(MULTIPART_UPLOAD_PART_SIZE_KEY, 1024);\r\n    ContractTestUtils.createAndVerifyFile(fs, getTestPath(), size - 1);\r\n    bufferDirShouldEmpty();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss",
  "methodName" : "bufferDirShouldEmpty",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void bufferDirShouldEmpty() throws IOException\n{\r\n    Path bufferPath = new Path(fs.getConf().get(BUFFER_DIR_KEY));\r\n    FileStatus[] files = bufferPath.getFileSystem(fs.getConf()).listStatus(bufferPath);\r\n    assertEquals(0, files.length);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\contract",
  "methodName" : "getScheme",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getScheme()\n{\r\n    return \"oss\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\contract",
  "methodName" : "getTestFileSystem",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FileSystem getTestFileSystem() throws IOException\n{\r\n    return AliyunOSSTestUtils.createTestFileSystem(new Configuration());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\contract",
  "methodName" : "getTestPath",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path getTestPath()\n{\r\n    String testUniqueForkId = System.getProperty(\"test.unique.fork.id\");\r\n    return testUniqueForkId == null ? super.getTestPath() : new Path(\"/\" + testUniqueForkId, \"test\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\fileContext",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setUp() throws IOException, Exception\n{\r\n    Configuration conf = new Configuration();\r\n    fc = AliyunOSSTestUtils.createTestFileContext(conf);\r\n    super.setUp();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\fileContext",
  "methodName" : "listCorruptedBlocksSupported",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean listCorruptedBlocksSupported()\n{\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\fileContext",
  "methodName" : "testCreateFlagAppendExistingFile",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void testCreateFlagAppendExistingFile() throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\fileContext",
  "methodName" : "testCreateFlagCreateAppendExistingFile",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void testCreateFlagCreateAppendExistingFile() throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\fileContext",
  "methodName" : "testSetVerifyChecksum",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void testSetVerifyChecksum() throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\fileContext",
  "methodName" : "testBuilderCreateAppendExistingFile",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void testBuilderCreateAppendExistingFile() throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\contract",
  "methodName" : "createContract",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AbstractFSContract createContract(Configuration conf)\n{\r\n    return new AliyunOSSContract(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-aliyun\\src\\test\\java\\org\\apache\\hadoop\\fs\\aliyun\\oss\\contract",
  "methodName" : "testListEmptyRootDirectory",
  "errType" : [ "AssertionError|FileNotFoundException", "InterruptedException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testListEmptyRootDirectory() throws IOException\n{\r\n    for (int attempt = 1, maxAttempts = 10; attempt <= maxAttempts; ++attempt) {\r\n        try {\r\n            super.testListEmptyRootDirectory();\r\n            break;\r\n        } catch (AssertionError | FileNotFoundException e) {\r\n            if (attempt < maxAttempts) {\r\n                LOG.info(\"Attempt {} of {} for empty root directory test failed.  \" + \"Attempting retry.\", attempt, maxAttempts);\r\n                try {\r\n                    Thread.sleep(1000);\r\n                } catch (InterruptedException e2) {\r\n                    Thread.currentThread().interrupt();\r\n                    fail(\"Test interrupted.\");\r\n                    break;\r\n                }\r\n            } else {\r\n                LOG.error(\"Empty root directory test failed {} attempts.  Failing test.\", maxAttempts);\r\n                throw e;\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
} ]