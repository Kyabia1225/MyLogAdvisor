[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 45,
  "sourceCodeText" : "void setup() throws YarnException, IOException\n{\r\n    conf = new YarnConfiguration();\r\n    conf.set(YarnConfiguration.NM_CONTAINER_STATE_TRANSITION_LISTENERS, DebugSumContainerStateListener.class.getName());\r\n    yarnCluster = new MiniYARNCluster(TestAMRMClient.class.getName(), nodeCount, 1, 1);\r\n    yarnCluster.init(conf);\r\n    yarnCluster.start();\r\n    assertNotNull(yarnCluster);\r\n    assertEquals(STATE.STARTED, yarnCluster.getServiceState());\r\n    yarnClient = (YarnClientImpl) YarnClient.createYarnClient();\r\n    yarnClient.init(conf);\r\n    yarnClient.start();\r\n    assertNotNull(yarnClient);\r\n    assertEquals(STATE.STARTED, yarnClient.getServiceState());\r\n    nodeReports = yarnClient.getNodeReports(NodeState.RUNNING);\r\n    ApplicationSubmissionContext appContext = yarnClient.createApplication().getApplicationSubmissionContext();\r\n    ApplicationId appId = appContext.getApplicationId();\r\n    appContext.setApplicationName(\"Test\");\r\n    Priority pri = Priority.newInstance(0);\r\n    appContext.setPriority(pri);\r\n    appContext.setQueue(\"default\");\r\n    ContainerLaunchContext amContainer = Records.newRecord(ContainerLaunchContext.class);\r\n    appContext.setAMContainerSpec(amContainer);\r\n    appContext.setUnmanagedAM(true);\r\n    SubmitApplicationRequest appRequest = Records.newRecord(SubmitApplicationRequest.class);\r\n    appRequest.setApplicationSubmissionContext(appContext);\r\n    yarnClient.submitApplication(appContext);\r\n    int iterationsLeft = 30;\r\n    RMAppAttempt appAttempt = null;\r\n    while (iterationsLeft > 0) {\r\n        ApplicationReport appReport = yarnClient.getApplicationReport(appId);\r\n        if (appReport.getYarnApplicationState() == YarnApplicationState.ACCEPTED) {\r\n            attemptId = appReport.getCurrentApplicationAttemptId();\r\n            appAttempt = yarnCluster.getResourceManager().getRMContext().getRMApps().get(attemptId.getApplicationId()).getCurrentAppAttempt();\r\n            while (true) {\r\n                if (appAttempt.getAppAttemptState() == RMAppAttemptState.LAUNCHED) {\r\n                    break;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n        sleep(1000);\r\n        --iterationsLeft;\r\n    }\r\n    if (iterationsLeft == 0) {\r\n        fail(\"Application hasn't bee started\");\r\n    }\r\n    UserGroupInformation.setLoginUser(UserGroupInformation.createRemoteUser(UserGroupInformation.getCurrentUser().getUserName()));\r\n    UserGroupInformation.getCurrentUser().addToken(appAttempt.getAMRMToken());\r\n    nmTokenCache = new NMTokenCache();\r\n    rmClient = (AMRMClientImpl<ContainerRequest>) AMRMClient.<ContainerRequest>createAMRMClient();\r\n    rmClient.setNMTokenCache(nmTokenCache);\r\n    rmClient.init(conf);\r\n    rmClient.start();\r\n    assertNotNull(rmClient);\r\n    assertEquals(STATE.STARTED, rmClient.getServiceState());\r\n    nmClient = (NMClientImpl) NMClient.createNMClient();\r\n    nmClient.setNMTokenCache(rmClient.getNMTokenCache());\r\n    nmClient.init(conf);\r\n    nmClient.start();\r\n    assertNotNull(nmClient);\r\n    assertEquals(STATE.STARTED, nmClient.getServiceState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void tearDown()\n{\r\n    rmClient.stop();\r\n    yarnClient.stop();\r\n    yarnCluster.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "stopNmClient",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void stopNmClient(boolean stopContainers)\n{\r\n    assertNotNull(\"Null nmClient\", nmClient);\r\n    assertEquals(1, nmClient.startedContainers.size());\r\n    assertTrue(nmClient.getCleanupRunningContainers().get());\r\n    nmClient.cleanupRunningContainersOnStop(stopContainers);\r\n    assertEquals(stopContainers, nmClient.getCleanupRunningContainers().get());\r\n    nmClient.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testNMClientNoCleanupOnStop",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testNMClientNoCleanupOnStop() throws YarnException, IOException\n{\r\n    rmClient.registerApplicationMaster(\"Host\", 10000, \"\");\r\n    testContainerManagement(nmClient, allocateContainers(rmClient, 5));\r\n    rmClient.unregisterApplicationMaster(FinalApplicationStatus.SUCCEEDED, null, null);\r\n    stopNmClient(false);\r\n    assertFalse(nmClient.startedContainers.isEmpty());\r\n    nmClient.cleanupRunningContainers();\r\n    assertEquals(0, nmClient.startedContainers.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testNMClient",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testNMClient() throws YarnException, IOException\n{\r\n    rmClient.registerApplicationMaster(\"Host\", 10000, \"\");\r\n    testContainerManagement(nmClient, allocateContainers(rmClient, 5));\r\n    rmClient.unregisterApplicationMaster(FinalApplicationStatus.SUCCEEDED, null, null);\r\n    assertFalse(nmClient.startedContainers.isEmpty());\r\n    nmClient.cleanupRunningContainersOnStop(true);\r\n    assertTrue(nmClient.getCleanupRunningContainers().get());\r\n    nmClient.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "allocateContainers",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "Set<Container> allocateContainers(AMRMClientImpl<ContainerRequest> rmClient, int num) throws YarnException, IOException\n{\r\n    Resource capability = Resource.newInstance(1024, 0);\r\n    Priority priority = Priority.newInstance(0);\r\n    String node = nodeReports.get(0).getNodeId().getHost();\r\n    String rack = nodeReports.get(0).getRackName();\r\n    String[] nodes = new String[] { node };\r\n    String[] racks = new String[] { rack };\r\n    for (int i = 0; i < num; ++i) {\r\n        rmClient.addContainerRequest(new ContainerRequest(capability, nodes, racks, priority));\r\n    }\r\n    int containersRequestedAny = rmClient.getTable(0).get(priority, ResourceRequest.ANY, ExecutionType.GUARANTEED, capability).remoteRequest.getNumContainers();\r\n    int allocatedContainerCount = 0;\r\n    int iterationsLeft = 2;\r\n    Set<Container> containers = new TreeSet<Container>();\r\n    while (allocatedContainerCount < containersRequestedAny && iterationsLeft > 0) {\r\n        AllocateResponse allocResponse = rmClient.allocate(0.1f);\r\n        allocatedContainerCount += allocResponse.getAllocatedContainers().size();\r\n        for (Container container : allocResponse.getAllocatedContainers()) {\r\n            containers.add(container);\r\n        }\r\n        if (!allocResponse.getNMTokens().isEmpty()) {\r\n            for (NMToken token : allocResponse.getNMTokens()) {\r\n                rmClient.getNMTokenCache().setToken(token.getNodeId().toString(), token.getToken());\r\n            }\r\n        }\r\n        if (allocatedContainerCount < containersRequestedAny) {\r\n            sleep(1000);\r\n        }\r\n        --iterationsLeft;\r\n    }\r\n    return containers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testContainerManagement",
  "errType" : [ "YarnException", "YarnException", "YarnException", "YarnException", "YarnException", "YarnException", "YarnException" ],
  "containingMethodsNum" : 28,
  "sourceCodeText" : "void testContainerManagement(NMClientImpl client, Set<Container> containers) throws YarnException, IOException\n{\r\n    int size = containers.size();\r\n    int i = 0;\r\n    for (Container container : containers) {\r\n        try {\r\n            client.getContainerStatus(container.getId(), container.getNodeId());\r\n            fail(\"Exception is expected\");\r\n        } catch (YarnException e) {\r\n            assertTrue(\"The thrown exception is not expected\", e.getMessage().contains(\"is not handled by this NodeManager\"));\r\n        }\r\n        try {\r\n            client.updateContainerResource(container);\r\n            fail(\"Exception is expected\");\r\n        } catch (YarnException e) {\r\n            assertTrue(\"The thrown exception is not expected\", e.getMessage().contains(\"is not handled by this NodeManager\"));\r\n        }\r\n        try {\r\n            client.restartContainer(container.getId());\r\n            fail(\"Exception is expected\");\r\n        } catch (YarnException e) {\r\n            assertTrue(\"The thrown exception is not expected\", e.getMessage().contains(\"Unknown container\"));\r\n        }\r\n        try {\r\n            client.rollbackLastReInitialization(container.getId());\r\n            fail(\"Exception is expected\");\r\n        } catch (YarnException e) {\r\n            assertTrue(\"The thrown exception is not expected\", e.getMessage().contains(\"Unknown container\"));\r\n        }\r\n        try {\r\n            client.commitLastReInitialization(container.getId());\r\n            fail(\"Exception is expected\");\r\n        } catch (YarnException e) {\r\n            assertTrue(\"The thrown exception is not expected\", e.getMessage().contains(\"Unknown container\"));\r\n        }\r\n        try {\r\n            client.stopContainer(container.getId(), container.getNodeId());\r\n            fail(\"Exception is expected\");\r\n        } catch (YarnException e) {\r\n            if (!e.getMessage().contains(\"is not handled by this NodeManager\")) {\r\n                throw new AssertionError(\"Exception is not expected: \", e);\r\n            }\r\n        }\r\n        Credentials ts = new Credentials();\r\n        DataOutputBuffer dob = new DataOutputBuffer();\r\n        ts.writeTokenStorageToStream(dob);\r\n        ByteBuffer securityTokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\r\n        ContainerLaunchContext clc = Records.newRecord(ContainerLaunchContext.class);\r\n        if (Shell.WINDOWS) {\r\n            clc.setCommands(Arrays.asList(\"ping\", \"-n\", \"10000000\", \"127.0.0.1\", \">nul\"));\r\n        } else {\r\n            clc.setCommands(Arrays.asList(\"sleep\", \"1000000\"));\r\n        }\r\n        clc.setTokens(securityTokens);\r\n        try {\r\n            client.startContainer(container, clc);\r\n        } catch (YarnException e) {\r\n            throw new AssertionError(\"Exception is not expected \", e);\r\n        }\r\n        List<Integer> exitStatuses = Collections.singletonList(-1000);\r\n        if (++i < size) {\r\n            testContainer(client, i, container, clc, exitStatuses);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 7,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testContainer",
  "errType" : [ "YarnException", "YarnException" ],
  "containingMethodsNum" : 25,
  "sourceCodeText" : "void testContainer(NMClientImpl client, int i, Container container, ContainerLaunchContext clc, List<Integer> exitCode) throws YarnException, IOException\n{\r\n    testGetContainerStatus(container, i, ContainerState.RUNNING, \"\", exitCode);\r\n    waitForContainerTransitionCount(container, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.RUNNING, 1);\r\n    testIncreaseContainerResource(container);\r\n    testRestartContainer(container.getId());\r\n    testGetContainerStatus(container, i, ContainerState.RUNNING, \"will be Restarted\", exitCode);\r\n    waitForContainerTransitionCount(container, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.RUNNING, 2);\r\n    if (i % 2 == 0) {\r\n        testReInitializeContainer(container.getId(), clc, false);\r\n        testGetContainerStatus(container, i, ContainerState.RUNNING, \"will be Re-initialized\", exitCode);\r\n        waitForContainerTransitionCount(container, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.RUNNING, 3);\r\n        testRollbackContainer(container.getId(), false);\r\n        testGetContainerStatus(container, i, ContainerState.RUNNING, \"will be Rolled-back\", exitCode);\r\n        waitForContainerTransitionCount(container, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.RUNNING, 4);\r\n        testCommitContainer(container.getId(), true);\r\n        testReInitializeContainer(container.getId(), clc, false);\r\n        testGetContainerStatus(container, i, ContainerState.RUNNING, \"will be Re-initialized\", exitCode);\r\n        waitForContainerTransitionCount(container, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.RUNNING, 5);\r\n        testCommitContainer(container.getId(), false);\r\n    } else {\r\n        testReInitializeContainer(container.getId(), clc, true);\r\n        testGetContainerStatus(container, i, ContainerState.RUNNING, \"will be Re-initialized\", exitCode);\r\n        waitForContainerTransitionCount(container, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.RUNNING, 3);\r\n        testRollbackContainer(container.getId(), true);\r\n        testCommitContainer(container.getId(), true);\r\n    }\r\n    try {\r\n        client.stopContainer(container.getId(), container.getNodeId());\r\n    } catch (YarnException e) {\r\n        throw (AssertionError) (new AssertionError(\"Exception is not expected: \" + e, e));\r\n    }\r\n    try {\r\n        testGetContainerStatus(container, i, ContainerState.COMPLETE, \"Container killed by the ApplicationMaster.\", Arrays.asList(ContainerExitStatus.KILLED_BY_APPMASTER, ContainerExitStatus.SUCCESS));\r\n    } catch (YarnException e) {\r\n        if (!e.getMessage().contains(\"was recently stopped on node manager\")) {\r\n            throw (AssertionError) (new AssertionError(\"Exception is not expected: \", e));\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "waitForContainerTransitionCount",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void waitForContainerTransitionCount(Container container, org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState state, long transitions) throws YarnException\n{\r\n    long transitionCount = -1;\r\n    do {\r\n        if (transitionCount != -1) {\r\n            try {\r\n                Thread.sleep(10);\r\n            } catch (InterruptedException e) {\r\n                throw new YarnException(\"Timeout at transition count:\" + transitionCount, e);\r\n            }\r\n        }\r\n        transitionCount = DebugSumContainerStateListener.getTransitionCounter(container.getId(), state);\r\n    } while (transitionCount != transitions);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "sleep",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void sleep(int sleepTime)\n{\r\n    try {\r\n        Thread.sleep(sleepTime);\r\n    } catch (InterruptedException e) {\r\n        e.printStackTrace();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testGetContainerStatus",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testGetContainerStatus(Container container, int index, ContainerState state, String diagnostics, List<Integer> exitStatuses) throws YarnException, IOException\n{\r\n    while (true) {\r\n        sleep(250);\r\n        ContainerStatus status = nmClient.getContainerStatus(container.getId(), container.getNodeId());\r\n        if (status.getState() == state) {\r\n            assertEquals(container.getId(), status.getContainerId());\r\n            assertTrue(\"\" + index + \": \" + status.getDiagnostics(), status.getDiagnostics().contains(diagnostics));\r\n            assertTrue(\"Exit Statuses are supposed to be in: \" + exitStatuses + \", but the actual exit status code is: \" + status.getExitStatus(), exitStatuses.contains(status.getExitStatus()));\r\n            break;\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testIncreaseContainerResource",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testIncreaseContainerResource(Container container) throws YarnException, IOException\n{\r\n    try {\r\n        nmClient.increaseContainerResource(container);\r\n    } catch (YarnException e) {\r\n        if (!e.getMessage().contains(container.getId() + \" has update version \")) {\r\n            throw (AssertionError) (new AssertionError(\"Exception is not expected: \" + e).initCause(e));\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testRestartContainer",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testRestartContainer(ContainerId containerId) throws YarnException, IOException\n{\r\n    try {\r\n        sleep(250);\r\n        nmClient.restartContainer(containerId);\r\n        sleep(250);\r\n    } catch (YarnException e) {\r\n        if (!e.getMessage().contains(\"can only be changed when a container is in RUNNING state\")) {\r\n            throw (AssertionError) (new AssertionError(\"Exception is not expected: \" + e).initCause(e));\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testRollbackContainer",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testRollbackContainer(ContainerId containerId, boolean notRollbackable) throws YarnException, IOException\n{\r\n    try {\r\n        sleep(250);\r\n        nmClient.rollbackLastReInitialization(containerId);\r\n        if (notRollbackable) {\r\n            fail(\"Should not be able to rollback..\");\r\n        }\r\n        sleep(250);\r\n    } catch (YarnException e) {\r\n        if (notRollbackable) {\r\n            Assert.assertTrue(e.getMessage().contains(\"Nothing to rollback to\"));\r\n        } else {\r\n            if (!e.getMessage().contains(\"can only be changed when a container is in RUNNING state\")) {\r\n                throw (AssertionError) (new AssertionError(\"Exception is not expected: \" + e).initCause(e));\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testCommitContainer",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testCommitContainer(ContainerId containerId, boolean notCommittable) throws YarnException, IOException\n{\r\n    try {\r\n        nmClient.commitLastReInitialization(containerId);\r\n        if (notCommittable) {\r\n            fail(\"Should not be able to commit..\");\r\n        }\r\n    } catch (YarnException e) {\r\n        if (notCommittable) {\r\n            Assert.assertTrue(e.getMessage().contains(\"Nothing to Commit\"));\r\n        } else {\r\n            if (!e.getMessage().contains(\"can only be changed when a container is in RUNNING state\")) {\r\n                throw (AssertionError) (new AssertionError(\"Exception is not expected: \" + e).initCause(e));\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testReInitializeContainer",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testReInitializeContainer(ContainerId containerId, ContainerLaunchContext clc, boolean autoCommit) throws YarnException, IOException\n{\r\n    try {\r\n        nmClient.reInitializeContainer(containerId, clc, autoCommit);\r\n    } catch (YarnException e) {\r\n        if (!e.getMessage().contains(\"can only be changed when a container is in RUNNING state\")) {\r\n            throw (AssertionError) (new AssertionError(\"Exception is not expected: \" + e).initCause(e));\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testHedgingRequestProxyProvider",
  "errType" : null,
  "containingMethodsNum" : 26,
  "sourceCodeText" : "void testHedgingRequestProxyProvider() throws Exception\n{\r\n    Configuration conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, true);\r\n    conf.setBoolean(YarnConfiguration.AUTO_FAILOVER_ENABLED, false);\r\n    conf.set(YarnConfiguration.RM_CLUSTER_ID, \"cluster1\");\r\n    conf.set(YarnConfiguration.RM_HA_IDS, \"rm1,rm2,rm3,rm4,rm5\");\r\n    conf.set(YarnConfiguration.CLIENT_FAILOVER_PROXY_PROVIDER, RequestHedgingRMFailoverProxyProvider.class.getName());\r\n    conf.setLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS, 2000);\r\n    try (MiniYARNCluster cluster = new MiniYARNCluster(\"testHedgingRequestProxyProvider\", 5, 0, 1, 1)) {\r\n        HATestUtil.setRpcAddressForRM(\"rm1\", 10000, conf);\r\n        HATestUtil.setRpcAddressForRM(\"rm2\", 20000, conf);\r\n        HATestUtil.setRpcAddressForRM(\"rm3\", 30000, conf);\r\n        HATestUtil.setRpcAddressForRM(\"rm4\", 40000, conf);\r\n        HATestUtil.setRpcAddressForRM(\"rm5\", 50000, conf);\r\n        conf.setBoolean(YarnConfiguration.YARN_MINICLUSTER_FIXED_PORTS, true);\r\n        cluster.init(conf);\r\n        cluster.start();\r\n        final YarnClient client = YarnClient.createYarnClient();\r\n        client.init(conf);\r\n        client.start();\r\n        long start = System.currentTimeMillis();\r\n        makeRMActive(cluster, 4);\r\n        validateActiveRM(client);\r\n        long end = System.currentTimeMillis();\r\n        System.out.println(\"Client call succeeded at \" + end);\r\n        Assert.assertTrue(end - start <= 10000);\r\n        cluster.getResourceManager(4).getRMContext().getRMAdminService().transitionToStandby(new HAServiceProtocol.StateChangeRequestInfo(HAServiceProtocol.RequestSource.REQUEST_BY_USER));\r\n        makeRMActive(cluster, 2);\r\n        validateActiveRM(client);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "validateActiveRM",
  "errType" : [ "YarnException", "YarnException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void validateActiveRM(YarnClient client) throws IOException\n{\r\n    try {\r\n        client.getApplicationReport(null);\r\n        Assert.fail();\r\n    } catch (YarnException e) {\r\n        Assert.assertTrue(e instanceof ApplicationNotFoundException);\r\n    }\r\n    try {\r\n        client.getAllQueues();\r\n    } catch (YarnException e) {\r\n        Assert.fail(e.toString());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "makeRMActive",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void makeRMActive(final MiniYARNCluster cluster, final int index)\n{\r\n    Thread t = new Thread() {\r\n\r\n        @Override\r\n        public void run() {\r\n            try {\r\n                System.out.println(\"Transition rm\" + index + \" to active\");\r\n                cluster.getResourceManager(index).getRMContext().getRMAdminService().transitionToActive(new HAServiceProtocol.StateChangeRequestInfo(HAServiceProtocol.RequestSource.REQUEST_BY_USER));\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    };\r\n    t.start();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "initiate",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initiate() throws Exception\n{\r\n    startHACluster(0, false, true, false);\r\n    this.resourceTracker = getRMClient();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "shutDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void shutDown()\n{\r\n    if (this.resourceTracker != null) {\r\n        RPC.stopProxy(this.resourceTracker);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testResourceTrackerOnHA",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testResourceTrackerOnHA() throws Exception\n{\r\n    NodeId nodeId = NodeId.newInstance(\"localhost\", 0);\r\n    Resource resource = Resource.newInstance(2048, 4);\r\n    RegisterNodeManagerRequest request = RegisterNodeManagerRequest.newInstance(nodeId, 0, resource, YarnVersionInfo.getVersion(), null, null);\r\n    resourceTracker.registerNodeManager(request);\r\n    Assert.assertTrue(waitForNodeManagerToConnect(200, nodeId));\r\n    failoverThread = createAndStartFailoverThread();\r\n    NodeStatus status = NodeStatus.newInstance(NodeId.newInstance(\"localhost\", 0), 0, null, null, null, null, null, null);\r\n    NodeHeartbeatRequest request2 = NodeHeartbeatRequest.newInstance(status, null, null, null);\r\n    resourceTracker.nodeHeartbeat(request2);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "getRMClient",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceTracker getRMClient() throws IOException\n{\r\n    return ServerRMProxy.createRMProxy(this.conf, ResourceTracker.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "waitForNodeManagerToConnect",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean waitForNodeManagerToConnect(final int maxTime, final NodeId nodeId) throws Exception\n{\r\n    GenericTestUtils.waitFor(() -> getActiveRM().getRMContext().getRMNodes().containsKey(nodeId), 20, maxTime);\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setUp()\n{\r\n    cli = new SchedConfCLI();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "setupQueueConfiguration",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setupQueueConfiguration(CapacitySchedulerConfiguration config)\n{\r\n    config.setQueues(CapacitySchedulerConfiguration.ROOT, new String[] { \"testqueue\" });\r\n    String a = CapacitySchedulerConfiguration.ROOT + \".testqueue\";\r\n    config.setCapacity(a, 100f);\r\n    config.setMaximumCapacity(a, 100f);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "cleanUp",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void cleanUp() throws Exception\n{\r\n    if (rm != null) {\r\n        rm.stop();\r\n    }\r\n    CONF_FILE.delete();\r\n    if (CONF_FILE.exists()) {\r\n        throw new RuntimeException(\"Failed to delete configuration file\");\r\n    }\r\n    if (OLD_CONF_FILE.exists()) {\r\n        if (!OLD_CONF_FILE.renameTo(CONF_FILE)) {\r\n            throw new RuntimeException(\"Failed to re-copy old\" + \" configuration file\");\r\n        }\r\n    }\r\n    super.tearDown();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testGetSchedulerConf",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testGetSchedulerConf() throws Exception\n{\r\n    ByteArrayOutputStream sysOutStream = new ByteArrayOutputStream();\r\n    PrintStream sysOut = new PrintStream(sysOutStream);\r\n    System.setOut(sysOut);\r\n    try {\r\n        super.setUp();\r\n        GuiceServletConfig.setInjector(Guice.createInjector(new WebServletModule()));\r\n        int exitCode = cli.getSchedulerConf(\"\", resource());\r\n        assertEquals(\"SchedConfCLI failed to run\", 0, exitCode);\r\n        assertTrue(\"Failed to get scheduler configuration\", sysOutStream.toString().contains(\"testqueue\"));\r\n    } finally {\r\n        cleanUp();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testFormatSchedulerConf",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testFormatSchedulerConf() throws Exception\n{\r\n    try {\r\n        super.setUp();\r\n        GuiceServletConfig.setInjector(Guice.createInjector(new WebServletModule()));\r\n        ResourceScheduler scheduler = rm.getResourceScheduler();\r\n        MutableConfigurationProvider provider = ((MutableConfScheduler) scheduler).getMutableConfProvider();\r\n        SchedConfUpdateInfo schedUpdateInfo = new SchedConfUpdateInfo();\r\n        HashMap<String, String> globalUpdates = new HashMap<>();\r\n        globalUpdates.put(\"schedKey1\", \"schedVal1\");\r\n        schedUpdateInfo.setGlobalParams(globalUpdates);\r\n        LogMutation log = provider.logAndApplyMutation(UserGroupInformation.getCurrentUser(), schedUpdateInfo);\r\n        rm.getRMContext().getRMAdminService().refreshQueues();\r\n        provider.confirmPendingMutation(log, true);\r\n        Configuration schedulerConf = provider.getConfiguration();\r\n        assertEquals(\"schedVal1\", schedulerConf.get(\"schedKey1\"));\r\n        int exitCode = cli.formatSchedulerConf(\"\", resource());\r\n        assertEquals(0, exitCode);\r\n        schedulerConf = provider.getConfiguration();\r\n        assertNull(schedulerConf.get(\"schedKey1\"));\r\n    } finally {\r\n        cleanUp();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testInvalidConf",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testInvalidConf() throws Exception\n{\r\n    ByteArrayOutputStream sysErrStream = new ByteArrayOutputStream();\r\n    PrintStream sysErr = new PrintStream(sysErrStream);\r\n    System.setErr(sysErr);\r\n    executeCommand(sysErrStream, \"-add\", \"root.a:=confVal\");\r\n    executeCommand(sysErrStream, \"-update\", \"root.a:=confVal\");\r\n    executeCommand(sysErrStream, \"-add\", \"root.a:confKey=confVal=conf\");\r\n    executeCommand(sysErrStream, \"-update\", \"root.a:confKey=confVal=c\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "executeCommand",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void executeCommand(ByteArrayOutputStream sysErrStream, String op, String queueConf) throws Exception\n{\r\n    int exitCode = cli.run(new String[] { op, queueConf });\r\n    assertNotEquals(\"Should return an error code\", 0, exitCode);\r\n    assertTrue(sysErrStream.toString().contains(\"Specify configuration key \" + \"value as confKey=confVal.\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testAddQueues",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testAddQueues()\n{\r\n    SchedConfUpdateInfo schedUpdateInfo = new SchedConfUpdateInfo();\r\n    cli.addQueues(\"root.a:a1=aVal1,a2=aVal2,a3=\", schedUpdateInfo);\r\n    Map<String, String> paramValues = new HashMap<>();\r\n    List<QueueConfigInfo> addQueueInfo = schedUpdateInfo.getAddQueueInfo();\r\n    paramValues.put(\"a1\", \"aVal1\");\r\n    paramValues.put(\"a2\", \"aVal2\");\r\n    paramValues.put(\"a3\", null);\r\n    validateQueueConfigInfo(addQueueInfo, 0, \"root.a\", paramValues);\r\n    schedUpdateInfo = new SchedConfUpdateInfo();\r\n    cli.addQueues(\"root.b:b1=bVal1;root.c:c1=cVal1\", schedUpdateInfo);\r\n    addQueueInfo = schedUpdateInfo.getAddQueueInfo();\r\n    assertEquals(2, addQueueInfo.size());\r\n    paramValues.clear();\r\n    paramValues.put(\"b1\", \"bVal1\");\r\n    validateQueueConfigInfo(addQueueInfo, 0, \"root.b\", paramValues);\r\n    paramValues.clear();\r\n    paramValues.put(\"c1\", \"cVal1\");\r\n    validateQueueConfigInfo(addQueueInfo, 1, \"root.c\", paramValues);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testAddQueuesWithCommaInValue",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testAddQueuesWithCommaInValue()\n{\r\n    SchedConfUpdateInfo schedUpdateInfo = new SchedConfUpdateInfo();\r\n    cli.addQueues(\"root.a:a1=a1Val1\\\\,a1Val2 a1Val3,a2=a2Val1\\\\,a2Val2\", schedUpdateInfo);\r\n    List<QueueConfigInfo> addQueueInfo = schedUpdateInfo.getAddQueueInfo();\r\n    Map<String, String> params = new HashMap<>();\r\n    params.put(\"a1\", \"a1Val1,a1Val2 a1Val3\");\r\n    params.put(\"a2\", \"a2Val1,a2Val2\");\r\n    validateQueueConfigInfo(addQueueInfo, 0, \"root.a\", params);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testRemoveQueues",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testRemoveQueues()\n{\r\n    SchedConfUpdateInfo schedUpdateInfo = new SchedConfUpdateInfo();\r\n    cli.removeQueues(\"root.a;root.b;root.c.c1\", schedUpdateInfo);\r\n    List<String> removeInfo = schedUpdateInfo.getRemoveQueueInfo();\r\n    assertEquals(3, removeInfo.size());\r\n    assertEquals(\"root.a\", removeInfo.get(0));\r\n    assertEquals(\"root.b\", removeInfo.get(1));\r\n    assertEquals(\"root.c.c1\", removeInfo.get(2));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testUpdateQueues",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testUpdateQueues()\n{\r\n    SchedConfUpdateInfo schedUpdateInfo = new SchedConfUpdateInfo();\r\n    Map<String, String> paramValues = new HashMap<>();\r\n    cli.updateQueues(\"root.a:a1=aVal1,a2=aVal2,a3=\", schedUpdateInfo);\r\n    List<QueueConfigInfo> updateQueueInfo = schedUpdateInfo.getUpdateQueueInfo();\r\n    paramValues.put(\"a1\", \"aVal1\");\r\n    paramValues.put(\"a2\", \"aVal2\");\r\n    paramValues.put(\"a3\", null);\r\n    validateQueueConfigInfo(updateQueueInfo, 0, \"root.a\", paramValues);\r\n    schedUpdateInfo = new SchedConfUpdateInfo();\r\n    cli.updateQueues(\"root.b:b1=bVal1;root.c:c1=cVal1\", schedUpdateInfo);\r\n    updateQueueInfo = schedUpdateInfo.getUpdateQueueInfo();\r\n    assertEquals(2, updateQueueInfo.size());\r\n    paramValues.clear();\r\n    paramValues.put(\"b1\", \"bVal1\");\r\n    validateQueueConfigInfo(updateQueueInfo, 0, \"root.b\", paramValues);\r\n    paramValues.clear();\r\n    paramValues.put(\"c1\", \"cVal1\");\r\n    validateQueueConfigInfo(updateQueueInfo, 1, \"root.c\", paramValues);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "validateQueueConfigInfo",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void validateQueueConfigInfo(List<QueueConfigInfo> updateQueueInfo, int index, String queuename, Map<String, String> paramValues)\n{\r\n    QueueConfigInfo updateInfo = updateQueueInfo.get(index);\r\n    assertEquals(queuename, updateInfo.getQueue());\r\n    Map<String, String> params = updateInfo.getParams();\r\n    assertEquals(paramValues.size(), params.size());\r\n    paramValues.forEach((k, v) -> assertEquals(v, params.get(k)));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testUpdateQueuesWithCommaInValue",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testUpdateQueuesWithCommaInValue()\n{\r\n    SchedConfUpdateInfo schedUpdateInfo = new SchedConfUpdateInfo();\r\n    cli.updateQueues(\"root.a:a1=a1Val1\\\\,a1Val2 a1Val3,a2=a2Val1\\\\,a2Val2\", schedUpdateInfo);\r\n    List<QueueConfigInfo> updateQueueInfo = schedUpdateInfo.getUpdateQueueInfo();\r\n    Map<String, String> paramValues = new HashMap<>();\r\n    paramValues.put(\"a1\", \"a1Val1,a1Val2 a1Val3\");\r\n    paramValues.put(\"a2\", \"a2Val1,a2Val2\");\r\n    validateQueueConfigInfo(updateQueueInfo, 0, \"root.a\", paramValues);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testGlobalUpdate",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGlobalUpdate()\n{\r\n    SchedConfUpdateInfo schedUpdateInfo = new SchedConfUpdateInfo();\r\n    cli.globalUpdates(\"schedKey1=schedVal1,schedKey2=schedVal2\", schedUpdateInfo);\r\n    Map<String, String> paramValues = new HashMap<>();\r\n    paramValues.put(\"schedKey1\", \"schedVal1\");\r\n    paramValues.put(\"schedKey2\", \"schedVal2\");\r\n    validateGlobalParams(schedUpdateInfo, paramValues);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testGlobalUpdateWithCommaInValue",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGlobalUpdateWithCommaInValue()\n{\r\n    SchedConfUpdateInfo schedUpdateInfo = new SchedConfUpdateInfo();\r\n    cli.globalUpdates(\"schedKey1=schedVal1.1\\\\,schedVal1.2 schedVal1.3,schedKey2=schedVal2\", schedUpdateInfo);\r\n    Map<String, String> paramValues = new HashMap<>();\r\n    paramValues.put(\"schedKey1\", \"schedVal1.1,schedVal1.2 schedVal1.3\");\r\n    paramValues.put(\"schedKey2\", \"schedVal2\");\r\n    validateGlobalParams(schedUpdateInfo, paramValues);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "validateGlobalParams",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void validateGlobalParams(SchedConfUpdateInfo schedUpdateInfo, Map<String, String> paramValues)\n{\r\n    Map<String, String> globalInfo = schedUpdateInfo.getGlobalParams();\r\n    assertEquals(paramValues.size(), globalInfo.size());\r\n    paramValues.forEach((k, v) -> assertEquals(v, globalInfo.get(k)));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setUp() throws IOException, YarnException\n{\r\n    conf = new YarnConfiguration();\r\n    conf.setInt(YarnConfiguration.FEDERATION_CACHE_TIME_TO_LIVE_SECS, 60 * 60);\r\n    stateStore = spy(new MemoryFederationStateStore());\r\n    stateStore.init(conf);\r\n    FederationStateStoreFacade.getInstance().reinitialize(stateStore, conf);\r\n    verify(stateStore, times(0)).getSubClusters(any(GetSubClustersInfoRequest.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    stateStore.close();\r\n    stateStore = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testFederationRMFailoverProxyProvider",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testFederationRMFailoverProxyProvider() throws Exception\n{\r\n    testProxyProvider(true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testFederationRMFailoverProxyProviderWithoutFlushFacadeCache",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testFederationRMFailoverProxyProviderWithoutFlushFacadeCache() throws Exception\n{\r\n    testProxyProvider(false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testProxyProvider",
  "errType" : [ "YarnException|IOException" ],
  "containingMethodsNum" : 33,
  "sourceCodeText" : "void testProxyProvider(boolean facadeFlushCache) throws Exception\n{\r\n    final SubClusterId subClusterId = SubClusterId.newInstance(\"SC-1\");\r\n    final MiniYARNCluster cluster = new MiniYARNCluster(\"testFederationRMFailoverProxyProvider\", 3, 0, 1, 1);\r\n    conf.setBoolean(YarnConfiguration.FEDERATION_FLUSH_CACHE_FOR_RM_ADDR, facadeFlushCache);\r\n    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, true);\r\n    conf.setBoolean(YarnConfiguration.AUTO_FAILOVER_ENABLED, false);\r\n    conf.set(YarnConfiguration.RM_CLUSTER_ID, \"cluster1\");\r\n    conf.set(YarnConfiguration.RM_HA_IDS, \"rm1,rm2,rm3\");\r\n    conf.setLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS, 2000);\r\n    HATestUtil.setRpcAddressForRM(\"rm1\", 10000, conf);\r\n    HATestUtil.setRpcAddressForRM(\"rm2\", 20000, conf);\r\n    HATestUtil.setRpcAddressForRM(\"rm3\", 30000, conf);\r\n    conf.setBoolean(YarnConfiguration.YARN_MINICLUSTER_FIXED_PORTS, true);\r\n    cluster.init(conf);\r\n    cluster.start();\r\n    makeRMActive(subClusterId, cluster, 2);\r\n    ApplicationClientProtocol client = FederationProxyProviderUtil.createRMProxy(conf, ApplicationClientProtocol.class, subClusterId, UserGroupInformation.getCurrentUser());\r\n    verify(stateStore, times(1)).getSubClusters(any(GetSubClustersInfoRequest.class));\r\n    GetClusterMetricsResponse response = client.getClusterMetrics(GetClusterMetricsRequest.newInstance());\r\n    verify(stateStore, times(1)).getSubClusters(any(GetSubClustersInfoRequest.class));\r\n    checkResponse(response);\r\n    cluster.getResourceManager(2).getRMContext().getRMAdminService().transitionToStandby(new HAServiceProtocol.StateChangeRequestInfo(HAServiceProtocol.RequestSource.REQUEST_BY_USER));\r\n    makeRMActive(subClusterId, cluster, 1);\r\n    verify(stateStore, times(1)).getSubClusters(any(GetSubClustersInfoRequest.class));\r\n    threadResponse = null;\r\n    Thread thread = new Thread(new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r\n            try {\r\n                threadResponse = client.getClusterMetrics(GetClusterMetricsRequest.newInstance());\r\n            } catch (YarnException | IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    });\r\n    thread.start();\r\n    if (!facadeFlushCache) {\r\n        Thread.sleep(500);\r\n        verify(stateStore, times(1)).getSubClusters(any(GetSubClustersInfoRequest.class));\r\n        FederationStateStoreFacade.getInstance().getSubCluster(subClusterId, true);\r\n    }\r\n    thread.join();\r\n    response = threadResponse;\r\n    if (facadeFlushCache) {\r\n        verify(stateStore, atLeast(2)).getSubClusters(any(GetSubClustersInfoRequest.class));\r\n    } else {\r\n        verify(stateStore, times(2)).getSubClusters(any(GetSubClustersInfoRequest.class));\r\n    }\r\n    checkResponse(response);\r\n    cluster.stop();\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "checkResponse",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void checkResponse(GetClusterMetricsResponse response)\n{\r\n    Assert.assertNotNull(response.getClusterMetrics());\r\n    Assert.assertEquals(0, response.getClusterMetrics().getNumActiveNodeManagers());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "makeRMActive",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void makeRMActive(final SubClusterId subClusterId, final MiniYARNCluster cluster, final int index)\n{\r\n    try {\r\n        System.out.println(\"Transition rm\" + (index + 1) + \" to active\");\r\n        String dummyAddress = \"host:\" + index;\r\n        cluster.getResourceManager(index).getRMContext().getRMAdminService().transitionToActive(new HAServiceProtocol.StateChangeRequestInfo(HAServiceProtocol.RequestSource.REQUEST_BY_USER));\r\n        ResourceManager rm = cluster.getResourceManager(index);\r\n        InetSocketAddress amRMAddress = rm.getApplicationMasterService().getBindAddress();\r\n        InetSocketAddress clientRMAddress = rm.getClientRMService().getBindAddress();\r\n        SubClusterRegisterRequest request = SubClusterRegisterRequest.newInstance(SubClusterInfo.newInstance(subClusterId, amRMAddress.getAddress().getHostAddress() + \":\" + amRMAddress.getPort(), clientRMAddress.getAddress().getHostAddress() + \":\" + clientRMAddress.getPort(), dummyAddress, dummyAddress, SubClusterState.SC_NEW, 1, dummyCapability));\r\n        stateStore.registerSubCluster(request);\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testUGIForProxyCreation",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testUGIForProxyCreation() throws IOException, InterruptedException\n{\r\n    conf.set(YarnConfiguration.RM_CLUSTER_ID, \"cluster1\");\r\n    UserGroupInformation currentUser = UserGroupInformation.getCurrentUser();\r\n    UserGroupInformation user1 = UserGroupInformation.createProxyUser(\"user1\", currentUser);\r\n    UserGroupInformation user2 = UserGroupInformation.createProxyUser(\"user2\", currentUser);\r\n    final TestableFederationRMFailoverProxyProvider provider = new TestableFederationRMFailoverProxyProvider();\r\n    InetSocketAddress addr = conf.getSocketAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS, YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS, YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\r\n    final ClientRMProxy rmProxy = mock(ClientRMProxy.class);\r\n    when(rmProxy.getRMAddress(any(YarnConfiguration.class), any(Class.class))).thenReturn(addr);\r\n    user1.doAs(new PrivilegedExceptionAction<Object>() {\r\n\r\n        @Override\r\n        public Object run() {\r\n            provider.init(conf, rmProxy, ApplicationMasterProtocol.class);\r\n            return null;\r\n        }\r\n    });\r\n    final ProxyInfo currentProxy = provider.getProxy();\r\n    Assert.assertEquals(\"user1\", provider.getLastProxyUGI().getUserName());\r\n    user2.doAs(new PrivilegedExceptionAction<Object>() {\r\n\r\n        @Override\r\n        public Object run() {\r\n            provider.performFailover(currentProxy.proxy);\r\n            return null;\r\n        }\r\n    });\r\n    Assert.assertEquals(\"user1\", provider.getLastProxyUGI().getUserName());\r\n    provider.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setUp() throws IOException, YarnException\n{\r\n    conf = new YarnConfiguration();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testRestartedRM",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testRestartedRM() throws Exception\n{\r\n    MiniYARNCluster cluster = new MiniYARNCluster(\"testRestartedRMNegative\", NUMNODEMANAGERS, 1, 1);\r\n    YarnClient rmClient = YarnClient.createYarnClient();\r\n    try {\r\n        cluster.init(conf);\r\n        cluster.start();\r\n        final Configuration yarnConf = cluster.getConfig();\r\n        rmClient = YarnClient.createYarnClient();\r\n        rmClient.init(yarnConf);\r\n        rmClient.start();\r\n        List<NodeReport> nodeReports = rmClient.getNodeReports();\r\n        assertEquals(\"The proxy didn't get expected number of node reports\", NUMNODEMANAGERS, nodeReports.size());\r\n    } finally {\r\n        if (rmClient != null) {\r\n            rmClient.stop();\r\n        }\r\n        cluster.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testConnectingToRM",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testConnectingToRM() throws Exception\n{\r\n    conf.setClass(YarnConfiguration.CLIENT_FAILOVER_NO_HA_PROXY_PROVIDER, AutoRefreshNoHARMFailoverProxyProvider.class, RMFailoverProxyProvider.class);\r\n    MiniYARNCluster cluster = new MiniYARNCluster(\"testRestartedRMNegative\", NUMNODEMANAGERS, 1, 1);\r\n    YarnClient rmClient = null;\r\n    try {\r\n        cluster.init(conf);\r\n        cluster.start();\r\n        final Configuration yarnConf = cluster.getConfig();\r\n        rmClient = YarnClient.createYarnClient();\r\n        rmClient.init(yarnConf);\r\n        rmClient.start();\r\n        List<NodeReport> nodeReports = rmClient.getNodeReports();\r\n        assertEquals(\"The proxy didn't get expected number of node reports\", NUMNODEMANAGERS, nodeReports.size());\r\n    } finally {\r\n        if (rmClient != null) {\r\n            rmClient.stop();\r\n        }\r\n        cluster.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testDefaultFPPGetOneProxy",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testDefaultFPPGetOneProxy() throws Exception\n{\r\n    Proxy mockProxy1 = new TestProxy((proxy, method, args) -> null);\r\n    Class protocol = ApplicationClientProtocol.class;\r\n    RMProxy<Proxy> mockRMProxy = mock(RMProxy.class);\r\n    DefaultNoHARMFailoverProxyProvider<Proxy> fpp = new DefaultNoHARMFailoverProxyProvider<>();\r\n    InetSocketAddress mockAdd1 = new InetSocketAddress(RM1_PORT);\r\n    when(mockRMProxy.getRMAddress(any(YarnConfiguration.class), any(Class.class))).thenReturn(mockAdd1);\r\n    when(mockRMProxy.getProxy(any(YarnConfiguration.class), any(Class.class), eq(mockAdd1))).thenReturn(mockProxy1);\r\n    fpp.init(conf, mockRMProxy, protocol);\r\n    FailoverProxyProvider.ProxyInfo<Proxy> actualProxy1 = fpp.getProxy();\r\n    assertEquals(\"AutoRefreshRMFailoverProxyProvider doesn't generate \" + \"expected proxy\", mockProxy1, actualProxy1.proxy);\r\n    actualProxy1 = fpp.getProxy();\r\n    assertEquals(\"AutoRefreshRMFailoverProxyProvider doesn't generate \" + \"expected proxy\", mockProxy1, actualProxy1.proxy);\r\n    actualProxy1 = fpp.getProxy();\r\n    assertEquals(\"AutoRefreshRMFailoverProxyProvider doesn't generate \" + \"expected proxy\", mockProxy1, actualProxy1.proxy);\r\n    verify(mockRMProxy, times(1)).getProxy(any(YarnConfiguration.class), any(Class.class), eq(mockAdd1));\r\n    fpp.performFailover(actualProxy1.proxy);\r\n    FailoverProxyProvider.ProxyInfo<Proxy> actualProxy2 = fpp.getProxy();\r\n    assertEquals(\"AutoRefreshRMFailoverProxyProvider \" + \"doesn't generate expected proxy after failover\", mockProxy1, actualProxy2.proxy);\r\n    verify(mockRMProxy, times(1)).getProxy(any(YarnConfiguration.class), any(Class.class), eq(mockAdd1));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testAutoRefreshIPChange",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testAutoRefreshIPChange() throws Exception\n{\r\n    conf.setClass(YarnConfiguration.CLIENT_FAILOVER_NO_HA_PROXY_PROVIDER, AutoRefreshNoHARMFailoverProxyProvider.class, RMFailoverProxyProvider.class);\r\n    Proxy mockProxy1 = new TestProxy((proxy, method, args) -> null);\r\n    Proxy mockProxy2 = new TestProxy((proxy, method, args) -> null);\r\n    Class protocol = ApplicationClientProtocol.class;\r\n    RMProxy<Proxy> mockRMProxy = mock(RMProxy.class);\r\n    AutoRefreshNoHARMFailoverProxyProvider<Proxy> fpp = new AutoRefreshNoHARMFailoverProxyProvider<>();\r\n    InetSocketAddress mockAdd1 = new InetSocketAddress(RM1_PORT);\r\n    InetSocketAddress mockAdd2 = new InetSocketAddress(RM2_PORT);\r\n    when(mockRMProxy.getRMAddress(any(YarnConfiguration.class), any(Class.class))).thenReturn(mockAdd1);\r\n    when(mockRMProxy.getProxy(any(YarnConfiguration.class), any(Class.class), eq(mockAdd1))).thenReturn(mockProxy1);\r\n    fpp.init(conf, mockRMProxy, protocol);\r\n    FailoverProxyProvider.ProxyInfo<Proxy> actualProxy1 = fpp.getProxy();\r\n    assertEquals(\"AutoRefreshRMFailoverProxyProvider doesn't generate \" + \"expected proxy\", mockProxy1, actualProxy1.proxy);\r\n    actualProxy1 = fpp.getProxy();\r\n    assertEquals(\"AutoRefreshRMFailoverProxyProvider doesn't generate \" + \"expected proxy\", mockProxy1, actualProxy1.proxy);\r\n    actualProxy1 = fpp.getProxy();\r\n    assertEquals(\"AutoRefreshRMFailoverProxyProvider doesn't generate \" + \"expected proxy\", mockProxy1, actualProxy1.proxy);\r\n    verify(mockRMProxy, times(1)).getProxy(any(YarnConfiguration.class), any(Class.class), eq(mockAdd1));\r\n    when(mockRMProxy.getRMAddress(any(YarnConfiguration.class), any(Class.class))).thenReturn(mockAdd2);\r\n    when(mockRMProxy.getProxy(any(YarnConfiguration.class), any(Class.class), eq(mockAdd2))).thenReturn(mockProxy2);\r\n    fpp.performFailover(actualProxy1.proxy);\r\n    FailoverProxyProvider.ProxyInfo<Proxy> actualProxy2 = fpp.getProxy();\r\n    assertEquals(\"AutoRefreshNoHARMFailoverProxyProvider \" + \"doesn't generate expected proxy after failover\", mockProxy2, actualProxy2.proxy);\r\n    assertNotEquals(\"AutoRefreshNoHARMFailoverProxyProvider \" + \"shouldn't generate same proxy after failover\", actualProxy1.proxy, actualProxy2.proxy);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "beforeClass",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void beforeClass() throws IOException\n{\r\n    localFs = FileSystem.getLocal(new Configuration());\r\n    TEST_ROOT_DIR = new Path(\"target\", TestSharedCacheClientImpl.class.getName() + \"-tmpDir\").makeQualified(localFs.getUri(), localFs.getWorkingDirectory());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "afterClass",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void afterClass()\n{\r\n    try {\r\n        if (localFs != null) {\r\n            localFs.close();\r\n        }\r\n    } catch (IOException ioe) {\r\n        LOG.info(\"IO exception in closing file system)\");\r\n        ioe.printStackTrace();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setup()\n{\r\n    cProtocol = mock(ClientSCMProtocol.class);\r\n    client = new SharedCacheClientImpl() {\r\n\r\n        @Override\r\n        protected ClientSCMProtocol createClientProxy() {\r\n            return cProtocol;\r\n        }\r\n\r\n        @Override\r\n        protected void stopClientProxy() {\r\n        }\r\n    };\r\n    client.init(new Configuration());\r\n    client.start();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "cleanup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void cleanup()\n{\r\n    if (client != null) {\r\n        client.stop();\r\n        client = null;\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testUseCacheMiss",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testUseCacheMiss() throws Exception\n{\r\n    UseSharedCacheResourceResponse response = new UseSharedCacheResourceResponsePBImpl();\r\n    response.setPath(null);\r\n    when(cProtocol.use(isA(UseSharedCacheResourceRequest.class))).thenReturn(response);\r\n    URL newURL = client.use(mock(ApplicationId.class), \"key\");\r\n    assertNull(\"The path is not null!\", newURL);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testUseCacheHit",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testUseCacheHit() throws Exception\n{\r\n    Path file = new Path(\"viewfs://test/path\");\r\n    URL useUrl = URL.fromPath(new Path(\"viewfs://test/path\"));\r\n    UseSharedCacheResourceResponse response = new UseSharedCacheResourceResponsePBImpl();\r\n    response.setPath(file.toString());\r\n    when(cProtocol.use(isA(UseSharedCacheResourceRequest.class))).thenReturn(response);\r\n    URL newURL = client.use(mock(ApplicationId.class), \"key\");\r\n    assertEquals(\"The paths are not equal!\", useUrl, newURL);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testUseError",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testUseError() throws Exception\n{\r\n    String message = \"Mock IOExcepiton!\";\r\n    when(cProtocol.use(isA(UseSharedCacheResourceRequest.class))).thenThrow(new IOException(message));\r\n    client.use(mock(ApplicationId.class), \"key\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testRelease",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testRelease() throws Exception\n{\r\n    when(cProtocol.release(isA(ReleaseSharedCacheResourceRequest.class))).thenReturn(null);\r\n    client.release(mock(ApplicationId.class), \"key\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testReleaseError",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testReleaseError() throws Exception\n{\r\n    String message = \"Mock IOExcepiton!\";\r\n    when(cProtocol.release(isA(ReleaseSharedCacheResourceRequest.class))).thenThrow(new IOException(message));\r\n    client.release(mock(ApplicationId.class), \"key\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testChecksum",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testChecksum() throws Exception\n{\r\n    String filename = \"test1.txt\";\r\n    Path file = makeFile(filename);\r\n    assertEquals(inputChecksumSHA256, client.getFileChecksum(file));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testNonexistantFileChecksum",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testNonexistantFileChecksum() throws Exception\n{\r\n    Path file = new Path(TEST_ROOT_DIR, \"non-existant-file\");\r\n    client.getFileChecksum(file);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "makeFile",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Path makeFile(String filename) throws Exception\n{\r\n    Path file = new Path(TEST_ROOT_DIR, filename);\r\n    DataOutputStream out = null;\r\n    try {\r\n        out = localFs.create(file);\r\n        out.write(input.getBytes(\"UTF-8\"));\r\n    } finally {\r\n        if (out != null) {\r\n            out.close();\r\n        }\r\n    }\r\n    return file;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void setup()\n{\r\n    Configuration conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, true);\r\n    conf.setFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION, 2.0f);\r\n    conf.set(YarnConfiguration.YARN_LOG_SERVER_URL, \"https://localhost:8188/ahs\");\r\n    client = new AHSv2ClientImpl();\r\n    client.init(conf);\r\n    spyTimelineReaderClient = mock(TimelineReaderClient.class);\r\n    client.setReaderClient(spyTimelineReaderClient);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testGetContainerReport",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testGetContainerReport() throws IOException, YarnException\n{\r\n    final ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    final ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    final ContainerId containerId = ContainerId.newContainerId(appAttemptId, 1);\r\n    when(spyTimelineReaderClient.getContainerEntity(containerId, \"ALL\", null)).thenReturn(createContainerEntity(containerId));\r\n    when(spyTimelineReaderClient.getApplicationEntity(appId, \"ALL\", null)).thenReturn(createApplicationTimelineEntity(appId, true, false));\r\n    ContainerReport report = client.getContainerReport(containerId);\r\n    assertThat(report.getContainerId()).isEqualTo(containerId);\r\n    assertThat(report.getAssignedNode().getHost()).isEqualTo(\"test host\");\r\n    assertThat(report.getAssignedNode().getPort()).isEqualTo(100);\r\n    assertThat(report.getAllocatedResource().getVirtualCores()).isEqualTo(8);\r\n    assertThat(report.getCreationTime()).isEqualTo(123456);\r\n    assertThat(report.getLogUrl()).isEqualTo(\"https://localhost:8188/ahs/logs/\" + \"test host:100/container_0_0001_01_000001/\" + \"container_0_0001_01_000001/user1\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testGetAppAttemptReport",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testGetAppAttemptReport() throws IOException, YarnException\n{\r\n    final ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    final ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    when(spyTimelineReaderClient.getApplicationAttemptEntity(appAttemptId, \"ALL\", null)).thenReturn(createAppAttemptTimelineEntity(appAttemptId));\r\n    ApplicationAttemptReport report = client.getApplicationAttemptReport(appAttemptId);\r\n    assertThat(report.getApplicationAttemptId()).isEqualTo(appAttemptId);\r\n    assertThat(report.getFinishTime()).isEqualTo(Integer.MAX_VALUE + 2L);\r\n    assertThat(report.getOriginalTrackingUrl()).isEqualTo(\"test original tracking url\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testGetAppReport",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testGetAppReport() throws IOException, YarnException\n{\r\n    final ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    when(spyTimelineReaderClient.getApplicationEntity(appId, \"ALL\", null)).thenReturn(createApplicationTimelineEntity(appId, false, false));\r\n    ApplicationReport report = client.getApplicationReport(appId);\r\n    assertThat(report.getApplicationId()).isEqualTo(appId);\r\n    assertThat(report.getAppNodeLabelExpression()).isEqualTo(\"test_node_label\");\r\n    Assert.assertTrue(report.getApplicationTags().contains(\"Test_APP_TAGS_1\"));\r\n    assertThat(report.getYarnApplicationState()).isEqualTo(YarnApplicationState.FINISHED);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "createApplicationTimelineEntity",
  "errType" : null,
  "containingMethodsNum" : 30,
  "sourceCodeText" : "TimelineEntity createApplicationTimelineEntity(ApplicationId appId, boolean emptyACLs, boolean wrongAppId)\n{\r\n    TimelineEntity entity = new TimelineEntity();\r\n    entity.setType(ApplicationMetricsConstants.ENTITY_TYPE);\r\n    if (wrongAppId) {\r\n        entity.setId(\"wrong_app_id\");\r\n    } else {\r\n        entity.setId(appId.toString());\r\n    }\r\n    Map<String, Object> entityInfo = new HashMap<String, Object>();\r\n    entityInfo.put(ApplicationMetricsConstants.NAME_ENTITY_INFO, \"test app\");\r\n    entityInfo.put(ApplicationMetricsConstants.TYPE_ENTITY_INFO, \"test app type\");\r\n    entityInfo.put(ApplicationMetricsConstants.USER_ENTITY_INFO, \"user1\");\r\n    entityInfo.put(ApplicationMetricsConstants.QUEUE_ENTITY_INFO, \"test queue\");\r\n    entityInfo.put(ApplicationMetricsConstants.UNMANAGED_APPLICATION_ENTITY_INFO, \"false\");\r\n    entityInfo.put(ApplicationMetricsConstants.APPLICATION_PRIORITY_INFO, Priority.newInstance(0));\r\n    entityInfo.put(ApplicationMetricsConstants.SUBMITTED_TIME_ENTITY_INFO, Integer.MAX_VALUE + 1L);\r\n    entityInfo.put(ApplicationMetricsConstants.APP_MEM_METRICS, 123);\r\n    entityInfo.put(ApplicationMetricsConstants.APP_CPU_METRICS, 345);\r\n    entityInfo.put(ApplicationMetricsConstants.APP_MEM_PREEMPT_METRICS, 456);\r\n    entityInfo.put(ApplicationMetricsConstants.APP_CPU_PREEMPT_METRICS, 789);\r\n    if (emptyACLs) {\r\n        entityInfo.put(ApplicationMetricsConstants.APP_VIEW_ACLS_ENTITY_INFO, \"\");\r\n    } else {\r\n        entityInfo.put(ApplicationMetricsConstants.APP_VIEW_ACLS_ENTITY_INFO, \"user2\");\r\n    }\r\n    Set<String> appTags = new HashSet<String>();\r\n    appTags.add(\"Test_APP_TAGS_1\");\r\n    appTags.add(\"Test_APP_TAGS_2\");\r\n    entityInfo.put(ApplicationMetricsConstants.APP_TAGS_INFO, appTags);\r\n    entity.setInfo(entityInfo);\r\n    Map<String, String> configs = new HashMap<>();\r\n    configs.put(ApplicationMetricsConstants.APP_NODE_LABEL_EXPRESSION, \"test_node_label\");\r\n    entity.setConfigs(configs);\r\n    TimelineEvent tEvent = new TimelineEvent();\r\n    tEvent.setId(ApplicationMetricsConstants.FINISHED_EVENT_TYPE);\r\n    tEvent.setTimestamp(Integer.MAX_VALUE + 1L + appId.getId());\r\n    entity.addEvent(tEvent);\r\n    tEvent = new TimelineEvent();\r\n    tEvent.setId(ApplicationMetricsConstants.STATE_UPDATED_EVENT_TYPE);\r\n    tEvent.setTimestamp(Integer.MAX_VALUE + 2L + appId.getId());\r\n    Map<String, Object> eventInfo = new HashMap<>();\r\n    eventInfo.put(ApplicationMetricsConstants.STATE_EVENT_INFO, YarnApplicationState.KILLED);\r\n    tEvent.setInfo(eventInfo);\r\n    entity.addEvent(tEvent);\r\n    return entity;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "createAppAttemptTimelineEntity",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "TimelineEntity createAppAttemptTimelineEntity(ApplicationAttemptId appAttemptId)\n{\r\n    TimelineEntity entity = new TimelineEntity();\r\n    entity.setType(AppAttemptMetricsConstants.ENTITY_TYPE);\r\n    entity.setId(appAttemptId.toString());\r\n    Map<String, Object> entityInfo = new HashMap<String, Object>();\r\n    entityInfo.put(AppAttemptMetricsConstants.TRACKING_URL_INFO, \"test tracking url\");\r\n    entityInfo.put(AppAttemptMetricsConstants.ORIGINAL_TRACKING_URL_INFO, \"test original tracking url\");\r\n    entityInfo.put(AppAttemptMetricsConstants.HOST_INFO, \"test host\");\r\n    entityInfo.put(AppAttemptMetricsConstants.RPC_PORT_INFO, 100);\r\n    entityInfo.put(AppAttemptMetricsConstants.MASTER_CONTAINER_INFO, ContainerId.newContainerId(appAttemptId, 1));\r\n    entity.setInfo(entityInfo);\r\n    TimelineEvent tEvent = new TimelineEvent();\r\n    tEvent.setId(AppAttemptMetricsConstants.REGISTERED_EVENT_TYPE);\r\n    tEvent.setTimestamp(Integer.MAX_VALUE + 1L);\r\n    entity.addEvent(tEvent);\r\n    tEvent = new TimelineEvent();\r\n    tEvent.setId(AppAttemptMetricsConstants.FINISHED_EVENT_TYPE);\r\n    tEvent.setTimestamp(Integer.MAX_VALUE + 2L);\r\n    entity.addEvent(tEvent);\r\n    return entity;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "createContainerEntity",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "TimelineEntity createContainerEntity(ContainerId containerId)\n{\r\n    TimelineEntity entity = new TimelineEntity();\r\n    entity.setType(ContainerMetricsConstants.ENTITY_TYPE);\r\n    entity.setId(containerId.toString());\r\n    Map<String, Object> entityInfo = new HashMap<String, Object>();\r\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_MEMORY_INFO, 1024);\r\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_VCORE_INFO, 8);\r\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_HOST_INFO, \"test host\");\r\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_PORT_INFO, 100);\r\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_PRIORITY_INFO, -1);\r\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_HOST_HTTP_ADDRESS_INFO, \"http://test:1234\");\r\n    entityInfo.put(ContainerMetricsConstants.DIAGNOSTICS_INFO, \"test diagnostics info\");\r\n    entityInfo.put(ContainerMetricsConstants.EXIT_STATUS_INFO, -1);\r\n    entityInfo.put(ContainerMetricsConstants.STATE_INFO, ContainerState.COMPLETE.toString());\r\n    entity.setInfo(entityInfo);\r\n    TimelineEvent tEvent = new TimelineEvent();\r\n    tEvent.setId(ContainerMetricsConstants.CREATED_IN_RM_EVENT_TYPE);\r\n    tEvent.setTimestamp(123456);\r\n    entity.addEvent(tEvent);\r\n    return entity;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "initialize",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initialize() throws Exception\n{\r\n    startHACluster(0, false, false, true);\r\n    super.startupHAAndSetupClient();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testRegisterApplicationMasterOnHA",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testRegisterApplicationMasterOnHA() throws YarnException, IOException\n{\r\n    RegisterApplicationMasterRequest request = RegisterApplicationMasterRequest.newInstance(\"localhost\", 0, \"\");\r\n    RegisterApplicationMasterResponse response = getAMClient().registerApplicationMaster(request);\r\n    Assert.assertEquals(response, this.cluster.createFakeRegisterApplicationMasterResponse());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testFinishApplicationMasterOnHA",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testFinishApplicationMasterOnHA() throws YarnException, IOException\n{\r\n    FinishApplicationMasterRequest request = FinishApplicationMasterRequest.newInstance(FinalApplicationStatus.SUCCEEDED, \"\", \"\");\r\n    FinishApplicationMasterResponse response = getAMClient().finishApplicationMaster(request);\r\n    Assert.assertEquals(response, this.cluster.createFakeFinishApplicationMasterResponse());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testAllocateOnHA",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testAllocateOnHA() throws YarnException, IOException\n{\r\n    AllocateRequest request = AllocateRequest.newInstance(0, 50f, new ArrayList<ResourceRequest>(), new ArrayList<ContainerId>(), ResourceBlacklistRequest.newInstance(new ArrayList<String>(), new ArrayList<String>()));\r\n    AllocateResponse response = getAMClient().allocate(request);\r\n    Assert.assertEquals(response, this.cluster.createFakeAllocateResponse());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "initialize",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void initialize() throws Exception\n{\r\n    HATestUtil.setRpcAddressForRM(RM1_NODE_ID, RM1_PORT_BASE + 200, conf);\r\n    HATestUtil.setRpcAddressForRM(RM2_NODE_ID, RM2_PORT_BASE + 200, conf);\r\n    conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, true);\r\n    conf.setFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION, 2.0f);\r\n    conf.setClass(YarnConfiguration.TIMELINE_SERVICE_WRITER_CLASS, FileSystemTimelineWriterImpl.class, TimelineWriter.class);\r\n    startHACluster(0, false, false, true);\r\n    super.startupHAAndSetupClient();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testAllocateForTimelineV2OnHA",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testAllocateForTimelineV2OnHA() throws YarnException, IOException\n{\r\n    AllocateRequest request = AllocateRequest.newInstance(0, 50f, new ArrayList<ResourceRequest>(), new ArrayList<ContainerId>(), ResourceBlacklistRequest.newInstance(new ArrayList<String>(), new ArrayList<String>()));\r\n    AllocateResponse response = getAMClient().allocate(request);\r\n    Assert.assertEquals(response, this.cluster.createFakeAllocateResponse());\r\n    Assert.assertNotNull(response.getCollectorInfo());\r\n    Assert.assertEquals(\"host:port\", response.getCollectorInfo().getCollectorAddr());\r\n    Assert.assertNotNull(response.getCollectorInfo().getCollectorToken());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "configure",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void configure() throws IOException, YarnException\n{\r\n    admin = mock(ResourceManagerAdministrationProtocol.class);\r\n    client = mock(ApplicationClientProtocol.class);\r\n    when(admin.mapAttributesToNodes(any(NodesToAttributesMappingRequest.class))).thenAnswer(new Answer<NodesToAttributesMappingResponse>() {\r\n\r\n        @Override\r\n        public NodesToAttributesMappingResponse answer(InvocationOnMock invocation) throws Throwable {\r\n            nodeToAttrRequest = (NodesToAttributesMappingRequest) invocation.getArguments()[0];\r\n            return NodesToAttributesMappingResponse.newInstance();\r\n        }\r\n    });\r\n    nodeAttributesCLI = new NodeAttributesCLI() {\r\n\r\n        @Override\r\n        protected AdminCommandHandler getAdminCommandHandler() {\r\n            return new AdminCommandHandler() {\r\n\r\n                @Override\r\n                protected ResourceManagerAdministrationProtocol createAdminProtocol() throws IOException {\r\n                    return admin;\r\n                }\r\n            };\r\n        }\r\n\r\n        @Override\r\n        protected ClientCommandHandler getClientCommandHandler() {\r\n            ClientCommandHandler handler = new ClientCommandHandler() {\r\n\r\n                @Override\r\n                protected ApplicationClientProtocol createApplicationProtocol() throws IOException {\r\n                    return client;\r\n                }\r\n            };\r\n            handler.setSysOut(new PrintStream(sysOutBytes));\r\n            return handler;\r\n        }\r\n    };\r\n    nodeAttributesCLI.setErrOut(new PrintStream(errOutBytes));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testHelp",
  "errType" : null,
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void testHelp() throws Exception\n{\r\n    String[] args = new String[] { \"-help\", \"-replace\" };\r\n    assertTrue(\"It should have succeeded help for replace\", 0 == runTool(args));\r\n    assertErrorContains(\"-replace <\\\"node1:attribute[(type)][=value],attribute1\" + \"[=value],attribute2  node2:attribute2[=value],attribute3\\\">\");\r\n    assertErrorContains(\"Replace the node to attributes mapping information at\" + \" the ResourceManager with the new mapping. Currently supported\" + \" attribute type. And string is the default type too. Attribute value\" + \" if not specified for string type value will be considered as empty\" + \" string. Replaced node-attributes should not violate the existing\" + \" attribute to attribute type mapping.\");\r\n    args = new String[] { \"-help\", \"-remove\" };\r\n    assertTrue(\"It should have succeeded help for replace\", 0 == runTool(args));\r\n    assertErrorContains(\"-remove <\\\"node1:attribute,attribute1\" + \" node2:attribute2\\\">\");\r\n    assertErrorContains(\"Removes the specified node to attributes mapping\" + \" information at the ResourceManager\");\r\n    args = new String[] { \"-help\", \"-add\" };\r\n    assertTrue(\"It should have succeeded help for replace\", 0 == runTool(args));\r\n    assertErrorContains(\"-add <\\\"node1:attribute[(type)][=value],\" + \"attribute1[=value],attribute2  node2:attribute2[=value],\" + \"attribute3\\\">\");\r\n    assertErrorContains(\"Adds or updates the node to attributes mapping\" + \" information at the ResourceManager. Currently supported attribute\" + \" type is string. And string is the default type too. Attribute value\" + \" if not specified for string type value will be considered as empty\" + \" string. Added or updated node-attributes should not violate the\" + \" existing attribute to attribute type mapping.\");\r\n    args = new String[] { \"-help\", \"-failOnUnknownNodes\" };\r\n    assertTrue(\"It should have succeeded help for replace\", 0 == runTool(args));\r\n    assertErrorContains(\"-failOnUnknownNodes\");\r\n    assertErrorContains(\"Can be used optionally along with [add,remove,\" + \"replace] options. When set, command will fail if specified nodes \" + \"are unknown.\");\r\n    args = new String[] { \"-help\", \"-list\" };\r\n    assertTrue(\"It should have succeeded help for replace\", 0 == runTool(args));\r\n    assertErrorContains(\"-list\");\r\n    assertErrorContains(\"List all attributes in cluster\");\r\n    args = new String[] { \"-help\", \"-nodes\" };\r\n    assertTrue(\"It should have succeeded help for replace\", 0 == runTool(args));\r\n    assertErrorContains(\"-nodes\");\r\n    assertErrorContains(\"Works with [list] to specify node hostnames whose mappings \" + \"are required to be displayed.\");\r\n    args = new String[] { \"-help\", \"-attributes\" };\r\n    assertTrue(\"It should have succeeded help for replace\", 0 == runTool(args));\r\n    assertErrorContains(\"-attributes\");\r\n    assertErrorContains(\"Works with [attributestonodes] to specify attributes whose mapping \" + \"are required to be displayed.\");\r\n    args = new String[] { \"-help\", \"-attributestonodes\" };\r\n    assertTrue(\"It should have succeeded help for replace\", 0 == runTool(args));\r\n    assertErrorContains(\"-attributestonodes\");\r\n    assertErrorContains(\"Displays mapping of attributes to nodes and attribute \" + \"values grouped by attributes\");\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testReplace",
  "errType" : null,
  "containingMethodsNum" : 32,
  "sourceCodeText" : "void testReplace() throws Exception\n{\r\n    String[] args = new String[] { \"-replace\", \"x(\" };\r\n    assertTrue(\"It should have failed as no node is specified\", 0 != runTool(args));\r\n    assertFailureMessageContains(NodeAttributesCLI.INVALID_MAPPING_ERR_MSG);\r\n    args = new String[] { \"-replace\", \"x:(=abc\" };\r\n    assertTrue(\"It should have failed as no closing parenthesis is not specified\", 0 != runTool(args));\r\n    assertFailureMessageContains(\"Attribute for node x is not properly configured : (=abc\");\r\n    args = new String[] { \"-replace\", \"x:()=abc\" };\r\n    assertTrue(\"It should have failed as no type specified inside parenthesis\", 0 != runTool(args));\r\n    assertFailureMessageContains(\"Attribute for node x is not properly configured : ()=abc\");\r\n    args = new String[] { \"-replace\", \":x(string)\" };\r\n    assertTrue(\"It should have failed as no node is specified\", 0 != runTool(args));\r\n    assertFailureMessageContains(\"Node name cannot be empty\");\r\n    args = new String[] { \"-replace\", \"x:(key=value)\" };\r\n    assertTrue(0 != runTool(args));\r\n    assertFailureMessageContains(\"Attribute for node x is not properly configured : (key=value)\");\r\n    args = new String[] { \"-replace\" };\r\n    assertTrue(\"Should fail as no attribute mappings specified\", 0 != runTool(args));\r\n    assertFailureMessageContains(NodeAttributesCLI.MISSING_ARGUMENT);\r\n    args = new String[] { \"-replace\", \"-failOnUnknownNodes\", \"x:key(string)=value,key2=val2\" };\r\n    assertTrue(\"Should fail as no attribute mappings specified for replace\", 0 != runTool(args));\r\n    assertFailureMessageContains(NodeAttributesCLI.MISSING_ARGUMENT);\r\n    args = new String[] { \"-replace\", \" \" };\r\n    assertTrue(0 != runTool(args));\r\n    assertFailureMessageContains(NodeAttributesCLI.NO_MAPPING_ERR_MSG);\r\n    args = new String[] { \"-replace\", \", \" };\r\n    assertTrue(0 != runTool(args));\r\n    assertFailureMessageContains(NodeAttributesCLI.INVALID_MAPPING_ERR_MSG);\r\n    args = new String[] { \"-replace\", \"x:key(string)=value,key2=val2 y:key2=val23,key3 z:key4\" };\r\n    assertTrue(\"Should not fail as attribute has been properly mapped\", 0 == runTool(args));\r\n    List<NodeToAttributes> nodeAttributesList = new ArrayList<>();\r\n    List<NodeAttribute> attributes = new ArrayList<>();\r\n    attributes.add(NodeAttribute.newInstance(\"key\", NodeAttributeType.STRING, \"value\"));\r\n    attributes.add(NodeAttribute.newInstance(\"key2\", NodeAttributeType.STRING, \"val2\"));\r\n    nodeAttributesList.add(NodeToAttributes.newInstance(\"x\", attributes));\r\n    attributes = new ArrayList<>();\r\n    attributes.add(NodeAttribute.newInstance(\"key2\", NodeAttributeType.STRING, \"val23\"));\r\n    attributes.add(NodeAttribute.newInstance(\"key3\", NodeAttributeType.STRING, \"\"));\r\n    nodeAttributesList.add(NodeToAttributes.newInstance(\"y\", attributes));\r\n    attributes = new ArrayList<>();\r\n    attributes.add(NodeAttribute.newInstance(\"key2\", NodeAttributeType.STRING, \"val23\"));\r\n    attributes.add(NodeAttribute.newInstance(\"key3\", NodeAttributeType.STRING, \"\"));\r\n    nodeAttributesList.add(NodeToAttributes.newInstance(\"y\", attributes));\r\n    attributes = new ArrayList<>();\r\n    attributes.add(NodeAttribute.newInstance(\"key4\", NodeAttributeType.STRING, \"\"));\r\n    nodeAttributesList.add(NodeToAttributes.newInstance(\"z\", attributes));\r\n    NodesToAttributesMappingRequest expected = NodesToAttributesMappingRequest.newInstance(AttributeMappingOperationType.REPLACE, nodeAttributesList, false);\r\n    assertTrue(nodeToAttrRequest.equals(expected));\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testRemove",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testRemove() throws Exception\n{\r\n    String[] args = new String[] { \"-remove\", \"x:\" };\r\n    assertTrue(\"It should have failed as no node is specified\", 0 != runTool(args));\r\n    assertFailureMessageContains(\"Attributes cannot be null or empty for Operation [remove] on the \" + \"node x\");\r\n    args = new String[] { \"-remove\", \"x:key2,key3 z:key4\", \"-failOnUnknownNodes\" };\r\n    assertTrue(\"Should not fail as attribute has been properly mapped\", 0 == runTool(args));\r\n    List<NodeToAttributes> nodeAttributesList = new ArrayList<>();\r\n    List<NodeAttribute> attributes = new ArrayList<>();\r\n    attributes.add(NodeAttribute.newInstance(\"key2\", NodeAttributeType.STRING, \"\"));\r\n    attributes.add(NodeAttribute.newInstance(\"key3\", NodeAttributeType.STRING, \"\"));\r\n    nodeAttributesList.add(NodeToAttributes.newInstance(\"x\", attributes));\r\n    attributes = new ArrayList<>();\r\n    attributes.add(NodeAttribute.newInstance(\"key4\", NodeAttributeType.STRING, \"\"));\r\n    nodeAttributesList.add(NodeToAttributes.newInstance(\"z\", attributes));\r\n    NodesToAttributesMappingRequest expected = NodesToAttributesMappingRequest.newInstance(AttributeMappingOperationType.REMOVE, nodeAttributesList, true);\r\n    assertTrue(nodeToAttrRequest.equals(expected));\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testAdd",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testAdd() throws Exception\n{\r\n    String[] args = new String[] { \"-add\", \"x:\" };\r\n    assertTrue(\"It should have failed as no node is specified\", 0 != runTool(args));\r\n    assertFailureMessageContains(\"Attributes cannot be null or empty for Operation [add] on the node x\");\r\n    args = new String[] { \"-add\", \"x:key2=123,key3=abc z:key4(string)\", \"-failOnUnknownNodes\" };\r\n    assertTrue(\"Should not fail as attribute has been properly mapped\", 0 == runTool(args));\r\n    List<NodeToAttributes> nodeAttributesList = new ArrayList<>();\r\n    List<NodeAttribute> attributes = new ArrayList<>();\r\n    attributes.add(NodeAttribute.newInstance(\"key2\", NodeAttributeType.STRING, \"123\"));\r\n    attributes.add(NodeAttribute.newInstance(\"key3\", NodeAttributeType.STRING, \"abc\"));\r\n    nodeAttributesList.add(NodeToAttributes.newInstance(\"x\", attributes));\r\n    attributes = new ArrayList<>();\r\n    attributes.add(NodeAttribute.newInstance(\"key4\", NodeAttributeType.STRING, \"\"));\r\n    nodeAttributesList.add(NodeToAttributes.newInstance(\"z\", attributes));\r\n    NodesToAttributesMappingRequest expected = NodesToAttributesMappingRequest.newInstance(AttributeMappingOperationType.ADD, nodeAttributesList, true);\r\n    assertTrue(nodeToAttrRequest.equals(expected));\r\n    args = new String[] { \"-add\", \"x:key2=123,key3=abc x:key4(string)\", \"-failOnUnknownNodes\" };\r\n    assertTrue(\"Should not fail as attribute has been properly mapped\", 0 == runTool(args));\r\n    nodeAttributesList = new ArrayList<>();\r\n    attributes = new ArrayList<>();\r\n    attributes.add(NodeAttribute.newInstance(\"key4\", NodeAttributeType.STRING, \"\"));\r\n    nodeAttributesList.add(NodeToAttributes.newInstance(\"x\", attributes));\r\n    expected = NodesToAttributesMappingRequest.newInstance(AttributeMappingOperationType.ADD, nodeAttributesList, true);\r\n    assertTrue(nodeToAttrRequest.equals(expected));\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testListAttributes",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testListAttributes() throws Exception\n{\r\n    when(client.getClusterNodeAttributes(any(GetClusterNodeAttributesRequest.class))).thenAnswer(new Answer<GetClusterNodeAttributesResponse>() {\r\n\r\n        @Override\r\n        public GetClusterNodeAttributesResponse answer(InvocationOnMock invocation) throws Throwable {\r\n            GetClusterNodeAttributesRequest nodeAttrReq = (GetClusterNodeAttributesRequest) invocation.getArguments()[0];\r\n            return GetClusterNodeAttributesResponse.newInstance(ImmutableSet.of(NodeAttributeInfo.newInstance(NodeAttributeKey.newInstance(\"GPU\"), NodeAttributeType.STRING)));\r\n        }\r\n    });\r\n    String[] args = new String[] { \"-list\" };\r\n    assertTrue(\"It should be success since it list all attributes\", 0 == runTool(args));\r\n    assertSysOutContains(\"Attribute\\t           Type\", \"rm.yarn.io/GPU\\t         STRING\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testNodeToAttributes",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testNodeToAttributes() throws Exception\n{\r\n    when(client.getNodesToAttributes(any(GetNodesToAttributesRequest.class))).thenAnswer(new Answer<GetNodesToAttributesResponse>() {\r\n\r\n        @Override\r\n        public GetNodesToAttributesResponse answer(InvocationOnMock invocation) throws Throwable {\r\n            GetNodesToAttributesRequest nodeToAttributes = (GetNodesToAttributesRequest) invocation.getArguments()[0];\r\n            return GetNodesToAttributesResponse.newInstance(ImmutableMap.<String, Set<NodeAttribute>>builder().put(\"hostname\", ImmutableSet.of(NodeAttribute.newInstance(\"GPU\", NodeAttributeType.STRING, \"ARM\"))).build());\r\n        }\r\n    });\r\n    String[] args = new String[] { \"-nodetoattributes\", \"-nodes\" };\r\n    assertTrue(\"It should not success since nodes are not specified\", 0 != runTool(args));\r\n    assertErrorContains(NodeAttributesCLI.INVALID_COMMAND_USAGE);\r\n    args = new String[] { \"-nodestoattributes\", \"-nodes\" };\r\n    assertTrue(\"It should not success since nodes are not specified\", 0 != runTool(args));\r\n    assertErrorContains(NodeAttributesCLI.MISSING_ARGUMENT);\r\n    args = new String[] { \"-nodestoattributes\", \"-nodes\", \"hostname\" };\r\n    assertTrue(\"Should return hostname to attributed list\", 0 == runTool(args));\r\n    assertSysOutContains(\"hostname\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testAttributesToNodes",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testAttributesToNodes() throws Exception\n{\r\n    when(client.getAttributesToNodes(any(GetAttributesToNodesRequest.class))).thenAnswer(new Answer<GetAttributesToNodesResponse>() {\r\n\r\n        @Override\r\n        public GetAttributesToNodesResponse answer(InvocationOnMock invocation) throws Throwable {\r\n            GetAttributesToNodesRequest attrToNodes = (GetAttributesToNodesRequest) invocation.getArguments()[0];\r\n            return GetAttributesToNodesResponse.newInstance(ImmutableMap.<NodeAttributeKey, List<NodeToAttributeValue>>builder().put(NodeAttributeKey.newInstance(\"GPU\"), ImmutableList.of(NodeToAttributeValue.newInstance(\"host1\", \"ARM\"))).build());\r\n        }\r\n    });\r\n    String[] args = new String[] { \"-attributestonodes\" };\r\n    assertTrue(\"It should be success since it list all attributes\", 0 == runTool(args));\r\n    assertSysOutContains(\"Hostname\\tAttribute-value\", \"rm.yarn.io/GPU :\", \"host1\\t            ARM\");\r\n    args = new String[] { \"-attributestonodes\", \"-attributes\" };\r\n    assertTrue(\"It should not success since attributes for filter are not specified\", 0 != runTool(args));\r\n    assertErrorContains(NodeAttributesCLI.MISSING_ARGUMENT);\r\n    args = new String[] { \"-attributestonodes\", \"-attributes\", \"fail/da/fail\" };\r\n    assertTrue(\"It should not success since attributes format is not correct\", 0 != runTool(args));\r\n    assertErrorContains(\"Attribute format not correct. Should be <[prefix]/[name]> \" + \":fail/da/fail\");\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "assertFailureMessageContains",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void assertFailureMessageContains(String... messages)\n{\r\n    assertErrorContains(messages);\r\n    assertErrorContains(NodeAttributesCLI.USAGE_YARN_NODE_ATTRIBUTES);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "assertErrorContains",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void assertErrorContains(String... messages)\n{\r\n    for (String message : messages) {\r\n        if (!errOutput.contains(message)) {\r\n            fail(\"Expected output to contain '\" + message + \"' but err_output was:\\n\" + errOutput);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "assertSysOutContains",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void assertSysOutContains(String... messages)\n{\r\n    for (String message : messages) {\r\n        if (!sysOutput.contains(message)) {\r\n            fail(\"Expected output to contain '\" + message + \"' but sys_output was:\\n\" + sysOutput);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "runTool",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "int runTool(String... args) throws Exception\n{\r\n    errOutBytes.reset();\r\n    sysOutBytes.reset();\r\n    LOG.info(\"Running: NodeAttributesCLI \" + Joiner.on(\" \").join(args));\r\n    int ret = nodeAttributesCLI.run(args);\r\n    errOutput = new String(errOutBytes.toByteArray(), Charsets.UTF_8);\r\n    sysOutput = new String(sysOutBytes.toByteArray(), Charsets.UTF_8);\r\n    LOG.info(\"Err_output:\\n\" + errOutput);\r\n    LOG.info(\"Sys_output:\\n\" + sysOutput);\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void setup() throws IOException\n{\r\n    fakeAppId = ApplicationId.newInstance(System.currentTimeMillis(), 0);\r\n    conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, true);\r\n    conf.set(YarnConfiguration.RM_HA_IDS, RM1_NODE_ID + \",\" + RM2_NODE_ID);\r\n    HATestUtil.setRpcAddressForRM(RM1_NODE_ID, RM1_PORT_BASE, conf);\r\n    HATestUtil.setRpcAddressForRM(RM2_NODE_ID, RM2_PORT_BASE, conf);\r\n    conf.setLong(YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_BASE_MS, 100L);\r\n    conf.setBoolean(YarnConfiguration.YARN_MINICLUSTER_FIXED_PORTS, true);\r\n    conf.setBoolean(YarnConfiguration.YARN_MINICLUSTER_USE_RPC, true);\r\n    cluster = new MiniYARNCluster(TestRMFailover.class.getName(), 2, 1, 1, 1);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "teardown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void teardown()\n{\r\n    cluster.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "verifyClientConnection",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void verifyClientConnection()\n{\r\n    int numRetries = 3;\r\n    while (numRetries-- > 0) {\r\n        Configuration conf = new YarnConfiguration(this.conf);\r\n        YarnClient client = YarnClient.createYarnClient();\r\n        client.init(conf);\r\n        client.start();\r\n        try {\r\n            client.getApplications();\r\n            return;\r\n        } catch (Exception e) {\r\n            LOG.error(e.toString());\r\n        } finally {\r\n            client.stop();\r\n        }\r\n    }\r\n    fail(\"Client couldn't connect to the Active RM\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "verifyConnections",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void verifyConnections() throws InterruptedException, YarnException\n{\r\n    assertTrue(\"NMs failed to connect to the RM\", cluster.waitForNodeManagersToConnect(20000));\r\n    verifyClientConnection();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "getAdminService",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AdminService getAdminService(int index)\n{\r\n    return cluster.getResourceManager(index).getRMContext().getRMAdminService();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "explicitFailover",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void explicitFailover() throws IOException\n{\r\n    int activeRMIndex = cluster.getActiveRMIndex();\r\n    int newActiveRMIndex = (activeRMIndex + 1) % 2;\r\n    getAdminService(activeRMIndex).transitionToStandby(req);\r\n    getAdminService(newActiveRMIndex).transitionToActive(req);\r\n    assertEquals(\"Failover failed\", newActiveRMIndex, cluster.getActiveRMIndex());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "failover",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void failover() throws IOException, InterruptedException, YarnException\n{\r\n    int activeRMIndex = cluster.getActiveRMIndex();\r\n    cluster.stopResourceManager(activeRMIndex);\r\n    assertEquals(\"Failover failed\", (activeRMIndex + 1) % 2, cluster.getActiveRMIndex());\r\n    cluster.restartResourceManager(activeRMIndex);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testExplicitFailover",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testExplicitFailover() throws YarnException, InterruptedException, IOException\n{\r\n    conf.setBoolean(YarnConfiguration.AUTO_FAILOVER_ENABLED, false);\r\n    cluster.init(conf);\r\n    cluster.start();\r\n    assertFalse(\"RM never turned active\", -1 == cluster.getActiveRMIndex());\r\n    verifyConnections();\r\n    explicitFailover();\r\n    verifyConnections();\r\n    explicitFailover();\r\n    verifyConnections();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "verifyRMTransitionToStandby",
  "errType" : [ "TimeoutException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void verifyRMTransitionToStandby(ResourceManager rm) throws InterruptedException\n{\r\n    try {\r\n        GenericTestUtils.waitFor(new Supplier<Boolean>() {\r\n\r\n            @Override\r\n            public Boolean get() {\r\n                return rm.getRMContext().getHAServiceState() == HAServiceState.STANDBY;\r\n            }\r\n        }, 100, 20000);\r\n    } catch (TimeoutException e) {\r\n        fail(\"RM didn't transition to Standby.\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testAutomaticFailover",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testAutomaticFailover() throws YarnException, InterruptedException, IOException\n{\r\n    conf.set(YarnConfiguration.RM_CLUSTER_ID, \"yarn-test-cluster\");\r\n    conf.set(YarnConfiguration.RM_ZK_ADDRESS, hostPort);\r\n    conf.setInt(YarnConfiguration.RM_ZK_TIMEOUT_MS, 2000);\r\n    cluster.init(conf);\r\n    cluster.start();\r\n    assertFalse(\"RM never turned active\", -1 == cluster.getActiveRMIndex());\r\n    verifyConnections();\r\n    failover();\r\n    verifyConnections();\r\n    failover();\r\n    verifyConnections();\r\n    ResourceManager rm = cluster.getResourceManager(cluster.getActiveRMIndex());\r\n    rm.getRMContext().getDispatcher().getEventHandler().handle(new RMFatalEvent(RMFatalEventType.STATE_STORE_FENCED, \"test\"));\r\n    verifyRMTransitionToStandby(rm);\r\n    verifyConnections();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testWebAppProxyInStandAloneMode",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testWebAppProxyInStandAloneMode() throws YarnException, InterruptedException, IOException\n{\r\n    conf.setBoolean(YarnConfiguration.AUTO_FAILOVER_ENABLED, false);\r\n    WebAppProxyServer webAppProxyServer = new WebAppProxyServer();\r\n    try {\r\n        conf.set(YarnConfiguration.PROXY_ADDRESS, \"0.0.0.0:9099\");\r\n        cluster.init(conf);\r\n        cluster.start();\r\n        getAdminService(0).transitionToActive(req);\r\n        assertFalse(\"RM never turned active\", -1 == cluster.getActiveRMIndex());\r\n        verifyConnections();\r\n        webAppProxyServer.init(conf);\r\n        Assert.assertEquals(STATE.INITED, webAppProxyServer.getServiceState());\r\n        webAppProxyServer.start();\r\n        Assert.assertEquals(STATE.STARTED, webAppProxyServer.getServiceState());\r\n        URL wrongUrl = new URL(\"http://0.0.0.0:9099/proxy/\" + fakeAppId);\r\n        HttpURLConnection proxyConn = (HttpURLConnection) wrongUrl.openConnection();\r\n        proxyConn.connect();\r\n        verifyResponse(proxyConn);\r\n        explicitFailover();\r\n        verifyConnections();\r\n        proxyConn.connect();\r\n        verifyResponse(proxyConn);\r\n    } finally {\r\n        webAppProxyServer.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testEmbeddedWebAppProxy",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testEmbeddedWebAppProxy() throws YarnException, InterruptedException, IOException\n{\r\n    conf.setBoolean(YarnConfiguration.AUTO_FAILOVER_ENABLED, false);\r\n    cluster.init(conf);\r\n    cluster.start();\r\n    assertFalse(\"RM never turned active\", -1 == cluster.getActiveRMIndex());\r\n    verifyConnections();\r\n    URL wrongUrl = new URL(\"http://0.0.0.0:18088/proxy/\" + fakeAppId);\r\n    HttpURLConnection proxyConn = (HttpURLConnection) wrongUrl.openConnection();\r\n    proxyConn.connect();\r\n    verifyResponse(proxyConn);\r\n    explicitFailover();\r\n    verifyConnections();\r\n    proxyConn.connect();\r\n    verifyResponse(proxyConn);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "verifyResponse",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void verifyResponse(HttpURLConnection response) throws IOException\n{\r\n    assertEquals(\"Not Found\", response.getResponseMessage());\r\n    assertEquals(404, response.getResponseCode());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testRMWebAppRedirect",
  "errType" : null,
  "containingMethodsNum" : 34,
  "sourceCodeText" : "void testRMWebAppRedirect() throws YarnException, InterruptedException, IOException\n{\r\n    cluster = new MiniYARNCluster(TestRMFailover.class.getName(), 2, 0, 1, 1);\r\n    conf.setBoolean(YarnConfiguration.AUTO_FAILOVER_ENABLED, false);\r\n    cluster.init(conf);\r\n    cluster.start();\r\n    getAdminService(0).transitionToActive(req);\r\n    String rm1Url = \"http://0.0.0.0:18088\";\r\n    String rm2Url = \"http://0.0.0.0:28088\";\r\n    String redirectURL = getRedirectURL(rm2Url);\r\n    assertEquals(redirectURL, rm1Url + \"/\");\r\n    redirectURL = getRedirectURL(rm2Url + \"/metrics\");\r\n    assertEquals(redirectURL, rm1Url + \"/metrics\");\r\n    redirectURL = getRedirectURL(rm2Url + \"/cluster/cluster\");\r\n    assertNull(redirectURL);\r\n    redirectURL = getRedirectURL(rm2Url + \"/conf\");\r\n    assertNull(redirectURL);\r\n    redirectURL = getRedirectURL(rm2Url + \"/stacks\");\r\n    assertNull(redirectURL);\r\n    redirectURL = getRedirectURL(rm2Url + \"/logLevel\");\r\n    assertNull(redirectURL);\r\n    redirectURL = getRedirectURL(rm2Url + \"/static\");\r\n    assertNull(redirectURL);\r\n    redirectURL = getRedirectURL(rm2Url + \"/logs\");\r\n    assertNull(redirectURL);\r\n    redirectURL = getRedirectURL(rm2Url + \"/jmx?param1=value1+x&param2=y\");\r\n    assertNull(redirectURL);\r\n    redirectURL = getRedirectURL(rm2Url + \"/prom\");\r\n    assertNull(redirectURL);\r\n    redirectURL = getRedirectURL(rm2Url + \"/ws/v1/cluster/info\");\r\n    assertNull(redirectURL);\r\n    redirectURL = getRedirectURL(rm2Url + \"/ws/v1/cluster/apps\");\r\n    assertEquals(redirectURL, rm1Url + \"/ws/v1/cluster/apps\");\r\n    redirectURL = getRedirectURL(rm2Url + \"/proxy/\" + fakeAppId);\r\n    assertNull(redirectURL);\r\n    getAdminService(0).transitionToStandby(req);\r\n    redirectURL = getRefreshURL(rm2Url);\r\n    assertTrue(redirectURL != null && redirectURL.contains(YarnWebParams.NEXT_REFRESH_INTERVAL) && redirectURL.contains(rm2Url));\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "getRedirectURL",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String getRedirectURL(String url)\n{\r\n    String redirectUrl = null;\r\n    try {\r\n        HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();\r\n        conn.setInstanceFollowRedirects(false);\r\n        if (conn.getResponseCode() == HttpServletResponse.SC_TEMPORARY_REDIRECT) {\r\n            redirectUrl = conn.getHeaderField(\"Location\");\r\n        }\r\n    } catch (Exception e) {\r\n    }\r\n    return redirectUrl;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "getRefreshURL",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String getRefreshURL(String url)\n{\r\n    String redirectUrl = null;\r\n    try {\r\n        HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();\r\n        conn.setInstanceFollowRedirects(false);\r\n        redirectUrl = conn.getHeaderField(\"Refresh\");\r\n    } catch (Exception e) {\r\n    }\r\n    return redirectUrl;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testUncaughtExceptionHandlerWithHAEnabled",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testUncaughtExceptionHandlerWithHAEnabled() throws InterruptedException\n{\r\n    conf.set(YarnConfiguration.RM_CLUSTER_ID, \"yarn-test-cluster\");\r\n    conf.set(YarnConfiguration.RM_ZK_ADDRESS, hostPort);\r\n    cluster.init(conf);\r\n    cluster.start();\r\n    assertFalse(\"RM never turned active\", -1 == cluster.getActiveRMIndex());\r\n    ResourceManager resourceManager = cluster.getResourceManager(cluster.getActiveRMIndex());\r\n    final RMCriticalThreadUncaughtExceptionHandler exHandler = new RMCriticalThreadUncaughtExceptionHandler(resourceManager.getRMContext());\r\n    final RuntimeException rte = new RuntimeException(\"TestRuntimeException\");\r\n    final Thread testThread = new Thread(new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r\n            throw rte;\r\n        }\r\n    });\r\n    testThread.setName(\"TestThread\");\r\n    testThread.setUncaughtExceptionHandler(exHandler);\r\n    testThread.start();\r\n    testThread.join();\r\n    verifyRMTransitionToStandby(resourceManager);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testUncaughtExceptionHandlerWithoutHA",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testUncaughtExceptionHandlerWithoutHA() throws InterruptedException\n{\r\n    ExitUtil.disableSystemExit();\r\n    ResourceManager resourceManager = new MockRM();\r\n    ((AsyncDispatcher) resourceManager.getRMContext().getDispatcher()).start();\r\n    resourceManager.getRMContext().getStateStore().start();\r\n    resourceManager.getRMContext().getContainerTokenSecretManager().rollMasterKey();\r\n    final RMCriticalThreadUncaughtExceptionHandler exHandler = new RMCriticalThreadUncaughtExceptionHandler(resourceManager.getRMContext());\r\n    final RMCriticalThreadUncaughtExceptionHandler spyRTEHandler = spy(exHandler);\r\n    final RuntimeException rte = new RuntimeException(\"TestRuntimeException\");\r\n    final Thread testThread = new Thread(new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r\n            throw rte;\r\n        }\r\n    });\r\n    testThread.setName(\"TestThread\");\r\n    testThread.setUncaughtExceptionHandler(spyRTEHandler);\r\n    assertSame(spyRTEHandler, testThread.getUncaughtExceptionHandler());\r\n    testThread.start();\r\n    testThread.join();\r\n    verify(spyRTEHandler).uncaughtException(testThread, rte);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "initializeDummyHostnameResolution",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void initializeDummyHostnameResolution() throws Exception\n{\r\n    String previousIpAddress;\r\n    for (String hostName : dummyHostNames) {\r\n        previousIpAddress = NetUtils.getStaticResolution(hostName);\r\n        if (null != previousIpAddress) {\r\n            savedStaticResolution.put(hostName, previousIpAddress);\r\n        }\r\n        NetUtils.addStaticResolution(hostName, \"10.20.30.40\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "restoreDummyHostnameResolution",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void restoreDummyHostnameResolution() throws Exception\n{\r\n    for (Map.Entry<String, String> hostnameToIpEntry : savedStaticResolution.entrySet()) {\r\n        NetUtils.addStaticResolution(hostnameToIpEntry.getKey(), hostnameToIpEntry.getValue());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testHAClusterInfoURL",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testHAClusterInfoURL() throws IOException, InterruptedException\n{\r\n    TopCLI topcli = new TopCLI();\r\n    String rm1Address = \"host2:8088\";\r\n    String rm2Address = \"host3:8088\";\r\n    Configuration conf = topcli.getConf();\r\n    conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS + \".\" + RM1_NODE_ID, rm1Address);\r\n    topcli.getConf().set(YarnConfiguration.RM_WEBAPP_ADDRESS + \".\" + RM2_NODE_ID, rm2Address);\r\n    topcli.getConf().setBoolean(YarnConfiguration.RM_HA_ENABLED, true);\r\n    topcli.getConf().set(YarnConfiguration.RM_HA_IDS, RM1_NODE_ID + \",\" + RM2_NODE_ID);\r\n    URL clusterUrl = topcli.getHAClusterUrl(conf, RM1_NODE_ID);\r\n    Assert.assertEquals(\"http\", clusterUrl.getProtocol());\r\n    Assert.assertEquals(rm1Address, clusterUrl.getAuthority());\r\n    clusterUrl = topcli.getHAClusterUrl(conf, RM2_NODE_ID);\r\n    Assert.assertEquals(\"http\", clusterUrl.getProtocol());\r\n    Assert.assertEquals(rm2Address, clusterUrl.getAuthority());\r\n    rm1Address = \"host2:9088\";\r\n    rm2Address = \"host3:9088\";\r\n    conf = topcli.getConf();\r\n    conf.set(YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS + \".\" + RM1_NODE_ID, rm1Address);\r\n    conf.set(YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS + \".\" + RM2_NODE_ID, rm2Address);\r\n    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, true);\r\n    conf.set(YarnConfiguration.RM_HA_IDS, RM1_NODE_ID + \",\" + RM2_NODE_ID);\r\n    conf.set(YarnConfiguration.YARN_HTTP_POLICY_KEY, \"HTTPS_ONLY\");\r\n    clusterUrl = topcli.getHAClusterUrl(conf, RM1_NODE_ID);\r\n    Assert.assertEquals(\"https\", clusterUrl.getProtocol());\r\n    Assert.assertEquals(rm1Address, clusterUrl.getAuthority());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testAMRMProxyE2E",
  "errType" : null,
  "containingMethodsNum" : 39,
  "sourceCodeText" : "void testAMRMProxyE2E() throws Exception\n{\r\n    ApplicationMasterProtocol client;\r\n    try (MiniYARNCluster cluster = new MiniYARNCluster(\"testAMRMProxyE2E\", 1, 1, 1);\r\n        YarnClient rmClient = YarnClient.createYarnClient()) {\r\n        Configuration conf = new YarnConfiguration();\r\n        conf.setBoolean(YarnConfiguration.AMRM_PROXY_ENABLED, true);\r\n        conf.setBoolean(FairSchedulerConfiguration.ASSIGN_MULTIPLE, true);\r\n        cluster.init(conf);\r\n        cluster.start();\r\n        final Configuration yarnConf = cluster.getConfig();\r\n        yarnConf.set(YarnConfiguration.RM_SCHEDULER_ADDRESS, YarnConfiguration.DEFAULT_AMRM_PROXY_ADDRESS);\r\n        rmClient.init(yarnConf);\r\n        rmClient.start();\r\n        ApplicationAttemptId appAttmptId = createApp(rmClient, cluster, conf);\r\n        ApplicationId appId = appAttmptId.getApplicationId();\r\n        client = createAMRMProtocol(rmClient, appId, cluster, yarnConf);\r\n        LOG.info(\"testAMRMProxyE2E - Register Application Master\");\r\n        RegisterApplicationMasterResponse responseRegister = client.registerApplicationMaster(RegisterApplicationMasterRequest.newInstance(NetUtils.getHostname(), 1024, \"\"));\r\n        Assert.assertNotNull(responseRegister);\r\n        Assert.assertNotNull(responseRegister.getQueue());\r\n        Assert.assertNotNull(responseRegister.getApplicationACLs());\r\n        Assert.assertNotNull(responseRegister.getClientToAMTokenMasterKey());\r\n        Assert.assertNotNull(responseRegister.getContainersFromPreviousAttempts());\r\n        Assert.assertNotNull(responseRegister.getSchedulerResourceTypes());\r\n        Assert.assertNotNull(responseRegister.getMaximumResourceCapability());\r\n        RMApp rmApp = cluster.getResourceManager().getRMContext().getRMApps().get(appId);\r\n        Assert.assertEquals(RMAppState.RUNNING, rmApp.getState());\r\n        LOG.info(\"testAMRMProxyE2E - Allocate Resources Application Master\");\r\n        AllocateRequest request = createAllocateRequest(rmClient.getNodeReports(NodeState.RUNNING));\r\n        AllocateResponse allocResponse = client.allocate(request);\r\n        Assert.assertNotNull(allocResponse);\r\n        Assert.assertEquals(0, allocResponse.getAllocatedContainers().size());\r\n        request.setAskList(new ArrayList<ResourceRequest>());\r\n        request.setResponseId(request.getResponseId() + 1);\r\n        Thread.sleep(1000);\r\n        allocResponse = client.allocate(request);\r\n        Assert.assertNotNull(allocResponse);\r\n        Assert.assertEquals(2, allocResponse.getAllocatedContainers().size());\r\n        LOG.info(\"testAMRMPRoxy - Finish Application Master\");\r\n        FinishApplicationMasterResponse responseFinish = client.finishApplicationMaster(FinishApplicationMasterRequest.newInstance(FinalApplicationStatus.SUCCEEDED, \"success\", null));\r\n        Assert.assertNotNull(responseFinish);\r\n        Thread.sleep(500);\r\n        Assert.assertNotEquals(RMAppState.FINISHED, rmApp.getState());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testAMRMProxyTokenRenewal",
  "errType" : null,
  "containingMethodsNum" : 27,
  "sourceCodeText" : "void testAMRMProxyTokenRenewal() throws Exception\n{\r\n    ApplicationMasterProtocol client;\r\n    try (MiniYARNCluster cluster = new MiniYARNCluster(\"testE2ETokenRenewal\", 1, 1, 1);\r\n        YarnClient rmClient = YarnClient.createYarnClient()) {\r\n        Configuration conf = new YarnConfiguration();\r\n        conf.setBoolean(YarnConfiguration.AMRM_PROXY_ENABLED, true);\r\n        conf.setInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS, 4500);\r\n        conf.setInt(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS, 4500);\r\n        conf.setInt(YarnConfiguration.RM_AM_EXPIRY_INTERVAL_MS, 4500);\r\n        conf.setInt(YarnConfiguration.RM_AMRM_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS, 20);\r\n        cluster.init(conf);\r\n        cluster.start();\r\n        final Configuration yarnConf = cluster.getConfig();\r\n        yarnConf.set(YarnConfiguration.RM_SCHEDULER_ADDRESS, YarnConfiguration.DEFAULT_AMRM_PROXY_ADDRESS);\r\n        rmClient.init(yarnConf);\r\n        rmClient.start();\r\n        ApplicationAttemptId appAttmptId = createApp(rmClient, cluster, conf);\r\n        ApplicationId appId = appAttmptId.getApplicationId();\r\n        client = createAMRMProtocol(rmClient, appId, cluster, yarnConf);\r\n        client.registerApplicationMaster(RegisterApplicationMasterRequest.newInstance(NetUtils.getHostname(), 1024, \"\"));\r\n        LOG.info(\"testAMRMProxyTokenRenewal - Allocate Resources Application Master\");\r\n        AllocateRequest request = createAllocateRequest(rmClient.getNodeReports(NodeState.RUNNING));\r\n        Token lastToken = null;\r\n        AllocateResponse response = null;\r\n        for (int i = 0; i < 5; i++) {\r\n            response = client.allocate(request);\r\n            request.setResponseId(request.getResponseId() + 1);\r\n            if (response.getAMRMToken() != null && !response.getAMRMToken().equals(lastToken)) {\r\n                break;\r\n            }\r\n            lastToken = response.getAMRMToken();\r\n            Thread.sleep(4500);\r\n        }\r\n        Assert.assertFalse(response.getAMRMToken().equals(lastToken));\r\n        LOG.info(\"testAMRMPRoxy - Finish Application Master\");\r\n        client.finishApplicationMaster(FinishApplicationMasterRequest.newInstance(FinalApplicationStatus.SUCCEEDED, \"success\", null));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testE2ETokenSwap",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testE2ETokenSwap() throws Exception\n{\r\n    ApplicationMasterProtocol client;\r\n    try (MiniYARNCluster cluster = new MiniYARNCluster(\"testE2ETokenSwap\", 1, 1, 1);\r\n        YarnClient rmClient = YarnClient.createYarnClient()) {\r\n        Configuration conf = new YarnConfiguration();\r\n        conf.setBoolean(YarnConfiguration.AMRM_PROXY_ENABLED, true);\r\n        cluster.init(conf);\r\n        cluster.start();\r\n        final Configuration yarnConf = cluster.getConfig();\r\n        rmClient.init(yarnConf);\r\n        rmClient.start();\r\n        ApplicationAttemptId appAttmptId = createApp(rmClient, cluster, conf);\r\n        ApplicationId appId = appAttmptId.getApplicationId();\r\n        client = createAMRMProtocol(rmClient, appId, cluster, yarnConf);\r\n        try {\r\n            client.registerApplicationMaster(RegisterApplicationMasterRequest.newInstance(NetUtils.getHostname(), 1024, \"\"));\r\n            Assert.fail();\r\n        } catch (IOException e) {\r\n            Assert.assertTrue(e.getMessage().startsWith(\"Invalid AMRMToken from appattempt_\"));\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    conf = new YarnConfiguration();\r\n    allocatedContainers = new ArrayList<>();\r\n    rejectedSchedulingRequests = new ArrayList<>();\r\n    pcMapping = new HashMap<>();\r\n    pcMapping.put(Collections.singleton(\"foo\"), PlacementConstraints.build(PlacementConstraints.targetNotIn(NODE, allocationTag(\"foo\"))));\r\n    pcMapping.put(Collections.singleton(\"bar\"), PlacementConstraints.build(PlacementConstraints.targetNotIn(NODE, allocationTag(\"bar\"))));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testAMRMClientWithPlacementConstraintsByPlacementProcessor",
  "errType" : null,
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void testAMRMClientWithPlacementConstraintsByPlacementProcessor() throws Exception\n{\r\n    conf.set(YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_HANDLER, YarnConfiguration.PROCESSOR_RM_PLACEMENT_CONSTRAINTS_HANDLER);\r\n    createClusterAndStartApplication(conf);\r\n    allocatedContainers.clear();\r\n    rejectedSchedulingRequests.clear();\r\n    AMRMClient<AMRMClient.ContainerRequest> amClient = AMRMClient.<AMRMClient.ContainerRequest>createAMRMClient();\r\n    amClient.setNMTokenCache(new NMTokenCache());\r\n    Assert.assertNotSame(NMTokenCache.getSingleton(), amClient.getNMTokenCache());\r\n    AMRMClientAsync asyncClient = new AMRMClientAsyncImpl<>(amClient, 1000, new TestCallbackHandler());\r\n    asyncClient.init(conf);\r\n    asyncClient.start();\r\n    asyncClient.registerApplicationMaster(\"Host\", 10000, \"\", pcMapping);\r\n    asyncClient.addSchedulingRequests(Arrays.asList(schedulingRequest(1, 1, 1, 1, 512, \"foo\"), schedulingRequest(1, 1, 2, 1, 512, \"foo\"), schedulingRequest(1, 1, 3, 1, 512, \"foo\"), schedulingRequest(1, 1, 4, 1, 512, \"foo\"), schedulingRequest(4, 1, 5, 1, 512, \"bar\")));\r\n    waitForContainerAllocation(allocatedContainers, rejectedSchedulingRequests, 6, 2);\r\n    Assert.assertEquals(6, allocatedContainers.size());\r\n    Map<NodeId, List<Container>> containersPerNode = allocatedContainers.stream().collect(Collectors.groupingBy(Container::getNodeId));\r\n    Map<Set<String>, List<SchedulingRequest>> outstandingSchedRequests = ((AMRMClientImpl) amClient).getOutstandingSchedRequests();\r\n    Assert.assertEquals(2, outstandingSchedRequests.size());\r\n    Assert.assertEquals(1, outstandingSchedRequests.get(new HashSet<>(Collections.singletonList(\"foo\"))).size());\r\n    Assert.assertEquals(1, outstandingSchedRequests.get(new HashSet<>(Collections.singletonList(\"bar\"))).size());\r\n    Assert.assertEquals(3, containersPerNode.entrySet().size());\r\n    HashSet<String> srcTags = new HashSet<>(Arrays.asList(\"foo\", \"bar\"));\r\n    containersPerNode.entrySet().forEach(x -> Assert.assertEquals(srcTags, x.getValue().stream().map(y -> y.getAllocationTags().iterator().next()).collect(Collectors.toSet())));\r\n    Assert.assertEquals(2, rejectedSchedulingRequests.size());\r\n    Assert.assertEquals(srcTags, rejectedSchedulingRequests.stream().map(x -> x.getRequest().getAllocationTags().iterator().next()).collect(Collectors.toSet()));\r\n    asyncClient.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testAMRMClientWithPlacementConstraintsByScheduler",
  "errType" : null,
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void testAMRMClientWithPlacementConstraintsByScheduler() throws Exception\n{\r\n    conf.set(YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_HANDLER, YarnConfiguration.SCHEDULER_RM_PLACEMENT_CONSTRAINTS_HANDLER);\r\n    createClusterAndStartApplication(conf);\r\n    allocatedContainers.clear();\r\n    rejectedSchedulingRequests.clear();\r\n    AMRMClient<AMRMClient.ContainerRequest> amClient = AMRMClient.<AMRMClient.ContainerRequest>createAMRMClient();\r\n    amClient.setNMTokenCache(new NMTokenCache());\r\n    Assert.assertNotSame(NMTokenCache.getSingleton(), amClient.getNMTokenCache());\r\n    AMRMClientAsync asyncClient = new AMRMClientAsyncImpl<>(amClient, 1000, new TestCallbackHandler());\r\n    asyncClient.init(conf);\r\n    asyncClient.start();\r\n    asyncClient.registerApplicationMaster(\"Host\", 10000, \"\", pcMapping);\r\n    asyncClient.addSchedulingRequests(Arrays.asList(schedulingRequest(1, 1, 1, 1, 512, \"foo\"), schedulingRequest(1, 1, 2, 1, 512, \"foo\"), schedulingRequest(1, 1, 3, 1, 512, \"foo\"), schedulingRequest(1, 1, 4, 1, 512, \"foo\"), schedulingRequest(4, 1, 5, 1, 512, \"bar\"), schedulingRequest(1, 1, 6, 1, 512, new HashSet<>())));\r\n    waitForContainerAllocation(allocatedContainers, rejectedSchedulingRequests, 7, 0);\r\n    Assert.assertEquals(7, allocatedContainers.size());\r\n    Map<NodeId, List<Container>> containersPerNode = allocatedContainers.stream().collect(Collectors.groupingBy(Container::getNodeId));\r\n    Map<Set<String>, List<SchedulingRequest>> outstandingSchedRequests = ((AMRMClientImpl) amClient).getOutstandingSchedRequests();\r\n    Assert.assertEquals(3, outstandingSchedRequests.size());\r\n    Assert.assertEquals(1, outstandingSchedRequests.get(new HashSet<>(Collections.singletonList(\"foo\"))).size());\r\n    Assert.assertEquals(1, outstandingSchedRequests.get(new HashSet<>(Collections.singletonList(\"bar\"))).size());\r\n    Assert.assertEquals(0, outstandingSchedRequests.get(new HashSet<String>()).size());\r\n    Assert.assertEquals(3, containersPerNode.entrySet().size());\r\n    HashSet<String> srcTags = new HashSet<>(Arrays.asList(\"foo\", \"bar\"));\r\n    containersPerNode.entrySet().forEach(x -> Assert.assertEquals(srcTags, x.getValue().stream().filter(y -> !y.getAllocationTags().isEmpty()).map(y -> y.getAllocationTags().iterator().next()).collect(Collectors.toSet())));\r\n    Assert.assertEquals(0, rejectedSchedulingRequests.size());\r\n    asyncClient.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testEmptyKeyOfOutstandingSchedRequests",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testEmptyKeyOfOutstandingSchedRequests()\n{\r\n    AMRMClient<AMRMClient.ContainerRequest> amClient = AMRMClient.<AMRMClient.ContainerRequest>createAMRMClient();\r\n    HashSet<String> schedRequest = null;\r\n    amClient.addSchedulingRequests(Arrays.asList(schedulingRequest(1, 1, 1, 1, 512, ExecutionType.GUARANTEED), schedulingRequest(1, 1, 2, 1, 512, new HashSet<>()), schedulingRequest(1, 1, 3, 1, 512, schedRequest)));\r\n    Map<Set<String>, List<SchedulingRequest>> outstandingSchedRequests = ((AMRMClientImpl) amClient).getOutstandingSchedRequests();\r\n    Assert.assertEquals(1, outstandingSchedRequests.size());\r\n    Assert.assertEquals(3, outstandingSchedRequests.get(new HashSet<String>()).size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "waitForContainerAllocation",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void waitForContainerAllocation(List<Container> allocatedContainers, List<RejectedSchedulingRequest> rejectedRequests, int containerNum, int rejNum) throws Exception\n{\r\n    int maxCount = 10;\r\n    while (maxCount >= 0 && (allocatedContainers.size() < containerNum || rejectedRequests.size() < rejNum)) {\r\n        maxCount--;\r\n        sleep(1000);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "schedulingRequest",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SchedulingRequest schedulingRequest(int numAllocations, int priority, long allocReqId, int cores, int mem, String... tags)\n{\r\n    return schedulingRequest(numAllocations, priority, allocReqId, cores, mem, ExecutionType.GUARANTEED, new HashSet<>(Arrays.asList(tags)));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "schedulingRequest",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SchedulingRequest schedulingRequest(int numAllocations, int priority, long allocReqId, int cores, int mem, Set<String> tags)\n{\r\n    return schedulingRequest(numAllocations, priority, allocReqId, cores, mem, ExecutionType.GUARANTEED, tags);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "schedulingRequest",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SchedulingRequest schedulingRequest(int numAllocations, int priority, long allocReqId, int cores, int mem, ExecutionType execType, Set<String> tags)\n{\r\n    SchedulingRequest schedRequest = schedulingRequest(numAllocations, priority, allocReqId, cores, mem, execType);\r\n    schedRequest.setAllocationTags(tags);\r\n    return schedRequest;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "schedulingRequest",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SchedulingRequest schedulingRequest(int numAllocations, int priority, long allocReqId, int cores, int mem, ExecutionType execType)\n{\r\n    return SchedulingRequest.newBuilder().priority(Priority.newInstance(priority)).allocationRequestId(allocReqId).executionType(ExecutionTypeRequest.newInstance(execType, true)).resourceSizing(ResourceSizing.newInstance(numAllocations, Resource.newInstance(mem, cores))).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "getProtocolAddress",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "InetSocketAddress getProtocolAddress(Configuration conf) throws IOException\n{\r\n    return conf.getSocketAddr(YarnConfiguration.RM_ADMIN_ADDRESS, YarnConfiguration.DEFAULT_RM_ADMIN_ADDRESS, YarnConfiguration.DEFAULT_RM_ADMIN_PORT);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "setConf",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setConf(Configuration conf)\n{\r\n    conf = new YarnConfiguration(conf);\r\n    super.setConf(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "getUgmProtocol",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "GetUserMappingsProtocol getUgmProtocol() throws IOException\n{\r\n    Configuration conf = getConf();\r\n    final InetSocketAddress addr = conf.getSocketAddr(YarnConfiguration.RM_ADMIN_ADDRESS, YarnConfiguration.DEFAULT_RM_ADMIN_ADDRESS, YarnConfiguration.DEFAULT_RM_ADMIN_PORT);\r\n    final YarnRPC rpc = YarnRPC.create(conf);\r\n    ResourceManagerAdministrationProtocol adminProtocol = (ResourceManagerAdministrationProtocol) rpc.getProxy(ResourceManagerAdministrationProtocol.class, addr, getConf());\r\n    return adminProtocol;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "main",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void main(String[] argv) throws Exception\n{\r\n    int res = ToolRunner.run(new GetGroupsForTesting(new YarnConfiguration()), argv);\r\n    System.exit(res);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setup()\n{\r\n    QueueMetrics.clearQueueMetrics();\r\n    DefaultMetricsSystem.setMiniClusterMode(true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testStartWithTimelineV15",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testStartWithTimelineV15()\n{\r\n    Configuration conf = getConf();\r\n    conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, true);\r\n    conf.setFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION, 1.5f);\r\n    YarnClientImpl client = (YarnClientImpl) YarnClient.createYarnClient();\r\n    client.init(conf);\r\n    client.start();\r\n    client.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testAsyncAPIPollTimeout",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testAsyncAPIPollTimeout()\n{\r\n    testAsyncAPIPollTimeoutHelper(null, false);\r\n    testAsyncAPIPollTimeoutHelper(0L, true);\r\n    testAsyncAPIPollTimeoutHelper(1L, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testAsyncAPIPollTimeoutHelper",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testAsyncAPIPollTimeoutHelper(Long valueForTimeout, boolean expectedTimeoutEnforcement)\n{\r\n    YarnClientImpl client = new YarnClientImpl();\r\n    try {\r\n        Configuration conf = getConf();\r\n        if (valueForTimeout != null) {\r\n            conf.setLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS, valueForTimeout);\r\n        }\r\n        client.init(conf);\r\n        Assert.assertEquals(expectedTimeoutEnforcement, client.enforceAsyncAPITimeout());\r\n    } finally {\r\n        IOUtils.closeStream(client);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testBestEffortTimelineDelegationToken",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testBestEffortTimelineDelegationToken() throws Exception\n{\r\n    Configuration conf = getConf();\r\n    conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, true);\r\n    SecurityUtil.setAuthenticationMethod(UserGroupInformation.AuthenticationMethod.KERBEROS, conf);\r\n    conf.set(YarnConfiguration.TIMELINE_HTTP_AUTH_TYPE, KerberosAuthenticationHandler.TYPE);\r\n    YarnClientImpl client = spy(new YarnClientImpl() {\r\n\r\n        @Override\r\n        TimelineClient createTimelineClient() throws IOException, YarnException {\r\n            timelineClient = mock(TimelineClient.class);\r\n            when(timelineClient.getDelegationToken(any())).thenThrow(new RuntimeException(\"Best effort test exception\"));\r\n            return timelineClient;\r\n        }\r\n    });\r\n    client.init(conf);\r\n    conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_CLIENT_BEST_EFFORT, true);\r\n    client.serviceInit(conf);\r\n    client.getTimelineDelegationToken();\r\n    try {\r\n        conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_CLIENT_BEST_EFFORT, false);\r\n        client.serviceInit(conf);\r\n        client.getTimelineDelegationToken();\r\n        Assert.fail(\"Get delegation token should have thrown an exception\");\r\n    } catch (IOException e) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testAutomaitcLogAggregationDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 31,
  "sourceCodeText" : "void testAutomaitcLogAggregationDelegationToken() throws Exception\n{\r\n    Configuration conf = getConf();\r\n    SecurityUtil.setAuthenticationMethod(UserGroupInformation.AuthenticationMethod.KERBEROS, conf);\r\n    conf.set(YarnConfiguration.RM_PRINCIPAL, YARN_RM);\r\n    String remoteRootLogPath = \"/tmp/app-logs\";\r\n    MiniDFSCluster hdfsCluster = null;\r\n    try {\r\n        HdfsConfiguration hdfsConfig = new HdfsConfiguration();\r\n        hdfsCluster = new MiniDFSCluster.Builder(hdfsConfig).numDataNodes(1).build();\r\n        Path remoteRootLogDir = new Path(remoteRootLogPath);\r\n        FileSystem fs = hdfsCluster.getFileSystem();\r\n        fs.mkdirs(remoteRootLogDir);\r\n        conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR, fs.getFileStatus(remoteRootLogDir).getPath().toString());\r\n        DelegationTokenIdentifier hdfsDT = new DelegationTokenIdentifier(new Text(\"test\"), new Text(YARN_RM), null);\r\n        final Token<DelegationTokenIdentifier> dToken = new Token<>(hdfsDT.getBytes(), new byte[0], hdfsDT.getKind(), new Text());\r\n        FileSystem mockFs = mock(FileSystem.class);\r\n        doAnswer(new Answer<Token<?>[]>() {\r\n\r\n            @Override\r\n            public Token<?>[] answer(InvocationOnMock invocation) {\r\n                Object[] args = invocation.getArguments();\r\n                ((Credentials) args[1]).addToken(hdfsDT.getKind(), dToken);\r\n                return new Token[] { dToken };\r\n            }\r\n        }).when(mockFs).addDelegationTokens(any(), any());\r\n        FileSystemTestHelper.addFileSystemForTesting(fs.getUri(), hdfsConfig, mockFs);\r\n        YarnClientImpl client = spy(new YarnClientImpl() {\r\n\r\n            @Override\r\n            protected void serviceStart() {\r\n                rmClient = mock(ApplicationClientProtocol.class);\r\n            }\r\n\r\n            @Override\r\n            protected void serviceStop() {\r\n            }\r\n\r\n            @Override\r\n            public ApplicationReport getApplicationReport(ApplicationId appId) {\r\n                ApplicationReport report = mock(ApplicationReport.class);\r\n                when(report.getYarnApplicationState()).thenReturn(YarnApplicationState.RUNNING);\r\n                return report;\r\n            }\r\n\r\n            @Override\r\n            public boolean isSecurityEnabled() {\r\n                return true;\r\n            }\r\n        });\r\n        client.init(conf);\r\n        client.start();\r\n        ApplicationSubmissionContext context = mock(ApplicationSubmissionContext.class);\r\n        ApplicationId applicationId = ApplicationId.newInstance(0, 1);\r\n        when(context.getApplicationId()).thenReturn(applicationId);\r\n        DataOutputBuffer dob = new DataOutputBuffer();\r\n        Credentials credentials = new Credentials();\r\n        credentials.writeTokenStorageToStream(dob);\r\n        ByteBuffer tokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\r\n        ContainerLaunchContext clc = ContainerLaunchContext.newInstance(null, null, null, null, tokens, null);\r\n        when(context.getAMContainerSpec()).thenReturn(clc);\r\n        client.submitApplication(context);\r\n        credentials = new Credentials();\r\n        DataInputByteBuffer dibb = new DataInputByteBuffer();\r\n        tokens = clc.getTokens();\r\n        if (tokens != null) {\r\n            dibb.reset(tokens);\r\n            credentials.readTokenStorageStream(dibb);\r\n            tokens.rewind();\r\n        }\r\n        Collection<Token<? extends TokenIdentifier>> dTokens = credentials.getAllTokens();\r\n        Assert.assertEquals(\"Failed to place token for Log Aggregation Path\", 1, dTokens.size());\r\n        Assert.assertEquals(\"Wrong Token for Log Aggregation\", hdfsDT.getKind(), dTokens.iterator().next().getKind());\r\n    } finally {\r\n        if (hdfsCluster != null) {\r\n            hdfsCluster.shutdown();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testAutomaticTimelineDelegationTokenLoading",
  "errType" : null,
  "containingMethodsNum" : 27,
  "sourceCodeText" : "void testAutomaticTimelineDelegationTokenLoading() throws Exception\n{\r\n    Configuration conf = getConf();\r\n    conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, true);\r\n    SecurityUtil.setAuthenticationMethod(UserGroupInformation.AuthenticationMethod.KERBEROS, conf);\r\n    conf.set(YarnConfiguration.TIMELINE_HTTP_AUTH_TYPE, KerberosAuthenticationHandler.TYPE);\r\n    TimelineDelegationTokenIdentifier timelineDT = new TimelineDelegationTokenIdentifier();\r\n    final Token<TimelineDelegationTokenIdentifier> dToken = new Token<>(timelineDT.getBytes(), new byte[0], timelineDT.getKind(), new Text());\r\n    YarnClientImpl client = spy(new YarnClientImpl() {\r\n\r\n        @Override\r\n        TimelineClient createTimelineClient() throws IOException, YarnException {\r\n            timelineClient = mock(TimelineClient.class);\r\n            when(timelineClient.getDelegationToken(any())).thenReturn(dToken);\r\n            return timelineClient;\r\n        }\r\n\r\n        @Override\r\n        protected void serviceStart() {\r\n            rmClient = mock(ApplicationClientProtocol.class);\r\n        }\r\n\r\n        @Override\r\n        protected void serviceStop() {\r\n        }\r\n\r\n        @Override\r\n        public ApplicationReport getApplicationReport(ApplicationId appId) {\r\n            ApplicationReport report = mock(ApplicationReport.class);\r\n            when(report.getYarnApplicationState()).thenReturn(YarnApplicationState.RUNNING);\r\n            return report;\r\n        }\r\n\r\n        @Override\r\n        public boolean isSecurityEnabled() {\r\n            return true;\r\n        }\r\n    });\r\n    client.init(conf);\r\n    client.start();\r\n    try {\r\n        for (int i = 0; i < 2; ++i) {\r\n            ApplicationSubmissionContext context = mock(ApplicationSubmissionContext.class);\r\n            ApplicationId applicationId = ApplicationId.newInstance(0, i + 1);\r\n            when(context.getApplicationId()).thenReturn(applicationId);\r\n            DataOutputBuffer dob = new DataOutputBuffer();\r\n            Credentials credentials = new Credentials();\r\n            if (i == 0) {\r\n                credentials.addToken(client.timelineService, dToken);\r\n            }\r\n            credentials.writeTokenStorageToStream(dob);\r\n            ByteBuffer tokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\r\n            ContainerLaunchContext clc = ContainerLaunchContext.newInstance(null, null, null, null, tokens, null);\r\n            when(context.getAMContainerSpec()).thenReturn(clc);\r\n            client.submitApplication(context);\r\n            if (i == 0) {\r\n                verify(client, never()).getTimelineDelegationToken();\r\n            }\r\n            credentials = new Credentials();\r\n            DataInputByteBuffer dibb = new DataInputByteBuffer();\r\n            tokens = clc.getTokens();\r\n            if (tokens != null) {\r\n                dibb.reset(tokens);\r\n                credentials.readTokenStorageStream(dibb);\r\n                tokens.rewind();\r\n            }\r\n            Collection<Token<? extends TokenIdentifier>> dTokens = credentials.getAllTokens();\r\n            Assert.assertEquals(1, dTokens.size());\r\n            Assert.assertEquals(dToken, dTokens.iterator().next());\r\n        }\r\n    } finally {\r\n        client.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testParseTimelineDelegationTokenRenewer",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testParseTimelineDelegationTokenRenewer()\n{\r\n    YarnClientImpl client = (YarnClientImpl) YarnClient.createYarnClient();\r\n    Configuration conf = getConf();\r\n    conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, true);\r\n    conf.set(YarnConfiguration.RM_PRINCIPAL, \"rm/_HOST@EXAMPLE.COM\");\r\n    conf.set(YarnConfiguration.RM_ADDRESS, \"localhost:8188\");\r\n    try {\r\n        client.init(conf);\r\n        client.start();\r\n        Assert.assertEquals(\"rm/localhost@EXAMPLE.COM\", client.timelineDTRenewer);\r\n    } finally {\r\n        client.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "data",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Collection<Object[]> data()\n{\r\n    return Arrays.asList(new Object[][] { { CapacityScheduler.class.getName(), true }, { CapacityScheduler.class.getName(), false }, { FairScheduler.class.getName(), false } });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testAMRMClientNoMatchingRequests",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testAMRMClientNoMatchingRequests() throws IOException, YarnException\n{\r\n    AMRMClient<ContainerRequest> amClient = AMRMClient.createAMRMClient();\r\n    amClient.init(conf);\r\n    amClient.start();\r\n    amClient.registerApplicationMaster(\"Host\", 10000, \"\");\r\n    Resource testCapability1 = Resource.newInstance(1024, 2);\r\n    List<? extends Collection<ContainerRequest>> matches = amClient.getMatchingRequests(priority, node, testCapability1);\r\n    assertEquals(\"Expected no matching requests.\", matches.size(), 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testAMRMClientMatchingFit",
  "errType" : null,
  "containingMethodsNum" : 69,
  "sourceCodeText" : "void testAMRMClientMatchingFit() throws YarnException, IOException\n{\r\n    AMRMClient<ContainerRequest> amClient = null;\r\n    try {\r\n        amClient = AMRMClient.<ContainerRequest>createAMRMClient();\r\n        amClient.init(conf);\r\n        amClient.start();\r\n        amClient.registerApplicationMaster(\"Host\", 10000, \"\");\r\n        Resource capability1 = Resource.newInstance(1024, 2);\r\n        Resource capability2 = Resource.newInstance(1024, 1);\r\n        Resource capability3 = Resource.newInstance(1000, 2);\r\n        Resource capability4 = Resource.newInstance(2000, 1);\r\n        Resource capability5 = Resource.newInstance(1000, 3);\r\n        Resource capability6 = Resource.newInstance(2000, 1);\r\n        Resource capability7 = Resource.newInstance(2000, 1);\r\n        ContainerRequest storedContainer1 = new ContainerRequest(capability1, nodes, racks, priority);\r\n        ContainerRequest storedContainer2 = new ContainerRequest(capability2, nodes, racks, priority);\r\n        ContainerRequest storedContainer3 = new ContainerRequest(capability3, nodes, racks, priority);\r\n        ContainerRequest storedContainer4 = new ContainerRequest(capability4, nodes, racks, priority);\r\n        ContainerRequest storedContainer5 = new ContainerRequest(capability5, nodes, racks, priority);\r\n        ContainerRequest storedContainer6 = new ContainerRequest(capability6, nodes, racks, priority);\r\n        ContainerRequest storedContainer7 = new ContainerRequest(capability7, nodes, racks, priority2, false);\r\n        amClient.addContainerRequest(storedContainer1);\r\n        amClient.addContainerRequest(storedContainer2);\r\n        amClient.addContainerRequest(storedContainer3);\r\n        amClient.addContainerRequest(storedContainer4);\r\n        amClient.addContainerRequest(storedContainer5);\r\n        amClient.addContainerRequest(storedContainer6);\r\n        amClient.addContainerRequest(storedContainer7);\r\n        ContainerRequest storedContainer11 = new ContainerRequest(capability1, nodes, racks, priority, 1);\r\n        ContainerRequest storedContainer33 = new ContainerRequest(capability3, nodes, racks, priority, 3);\r\n        ContainerRequest storedContainer43 = new ContainerRequest(capability4, nodes, racks, priority, 3);\r\n        amClient.addContainerRequest(storedContainer11);\r\n        amClient.addContainerRequest(storedContainer33);\r\n        amClient.addContainerRequest(storedContainer43);\r\n        List<? extends Collection<ContainerRequest>> matches;\r\n        ContainerRequest storedRequest;\r\n        Resource testCapability1 = Resource.newInstance(1024, 2);\r\n        matches = amClient.getMatchingRequests(priority, node, testCapability1);\r\n        verifyMatches(matches, 1);\r\n        storedRequest = matches.get(0).iterator().next();\r\n        assertEquals(storedContainer1, storedRequest);\r\n        amClient.removeContainerRequest(storedContainer1);\r\n        Collection<ContainerRequest> reqIdMatches = amClient.getMatchingRequests(1);\r\n        assertEquals(1, reqIdMatches.size());\r\n        storedRequest = reqIdMatches.iterator().next();\r\n        assertEquals(storedContainer11, storedRequest);\r\n        amClient.removeContainerRequest(storedContainer11);\r\n        reqIdMatches = amClient.getMatchingRequests(3);\r\n        assertEquals(2, reqIdMatches.size());\r\n        Iterator<ContainerRequest> iter = reqIdMatches.iterator();\r\n        storedRequest = iter.next();\r\n        assertEquals(storedContainer43, storedRequest);\r\n        amClient.removeContainerRequest(storedContainer43);\r\n        storedRequest = iter.next();\r\n        assertEquals(storedContainer33, storedRequest);\r\n        amClient.removeContainerRequest(storedContainer33);\r\n        Resource testCapability2 = Resource.newInstance(2000, 1);\r\n        matches = amClient.getMatchingRequests(priority, node, testCapability2);\r\n        verifyMatches(matches, 2);\r\n        int i = 0;\r\n        for (ContainerRequest storedRequest1 : matches.get(0)) {\r\n            if (i++ == 0) {\r\n                assertEquals(storedContainer4, storedRequest1);\r\n            } else {\r\n                assertEquals(storedContainer6, storedRequest1);\r\n            }\r\n        }\r\n        amClient.removeContainerRequest(storedContainer6);\r\n        Resource testCapability3 = Resource.newInstance(4000, 4);\r\n        matches = amClient.getMatchingRequests(priority, node, testCapability3);\r\n        assert (matches.size() == 4);\r\n        Resource testCapability4 = Resource.newInstance(1024, 2);\r\n        matches = amClient.getMatchingRequests(priority, node, testCapability4);\r\n        assert (matches.size() == 2);\r\n        for (Collection<ContainerRequest> testSet : matches) {\r\n            assertEquals(1, testSet.size());\r\n            ContainerRequest testRequest = testSet.iterator().next();\r\n            assertTrue(testRequest != storedContainer4);\r\n            assertTrue(testRequest != storedContainer5);\r\n            assert (testRequest == storedContainer2 || testRequest == storedContainer3);\r\n        }\r\n        Resource testCapability5 = Resource.newInstance(512, 4);\r\n        matches = amClient.getMatchingRequests(priority, node, testCapability5);\r\n        assert (matches.size() == 0);\r\n        Resource testCapability7 = Resource.newInstance(2000, 1);\r\n        matches = amClient.getMatchingRequests(priority2, ResourceRequest.ANY, testCapability7);\r\n        assert (matches.size() == 0);\r\n        matches = amClient.getMatchingRequests(priority2, node, testCapability7);\r\n        assert (matches.size() == 1);\r\n        amClient.unregisterApplicationMaster(FinalApplicationStatus.SUCCEEDED, null, null);\r\n    } finally {\r\n        if (amClient != null && amClient.getServiceState() == STATE.STARTED) {\r\n            amClient.stop();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testAMRMClientMatchingFitExecType",
  "errType" : null,
  "containingMethodsNum" : 57,
  "sourceCodeText" : "void testAMRMClientMatchingFitExecType() throws YarnException, IOException\n{\r\n    AMRMClient<ContainerRequest> amClient = null;\r\n    try {\r\n        amClient = AMRMClient.<ContainerRequest>createAMRMClient();\r\n        amClient.init(conf);\r\n        amClient.start();\r\n        amClient.registerApplicationMaster(\"Host\", 10000, \"\");\r\n        Resource capability1 = Resource.newInstance(1024, 2);\r\n        Resource capability2 = Resource.newInstance(1024, 1);\r\n        Resource capability3 = Resource.newInstance(1000, 2);\r\n        Resource capability4 = Resource.newInstance(1000, 2);\r\n        Resource capability5 = Resource.newInstance(2000, 2);\r\n        Resource capability6 = Resource.newInstance(2000, 3);\r\n        Resource capability7 = Resource.newInstance(6000, 3);\r\n        ContainerRequest storedGuarContainer1 = new ContainerRequest(capability1, nodes, racks, priority);\r\n        ContainerRequest storedGuarContainer2 = new ContainerRequest(capability2, nodes, racks, priority);\r\n        ContainerRequest storedOpportContainer1 = new ContainerRequest(capability1, nodes, racks, priority, 0, true, null, ExecutionTypeRequest.newInstance(ExecutionType.OPPORTUNISTIC));\r\n        ContainerRequest storedOpportContainer2 = new ContainerRequest(capability2, nodes, racks, priority, 0, true, null, ExecutionTypeRequest.newInstance(ExecutionType.OPPORTUNISTIC));\r\n        ContainerRequest storedOpportContainer3 = new ContainerRequest(capability3, nodes, racks, priority, 0, true, null, ExecutionTypeRequest.newInstance(ExecutionType.OPPORTUNISTIC));\r\n        ContainerRequest storedOpportContainer4 = new ContainerRequest(capability4, nodes, racks, priority, 0, true, null, ExecutionTypeRequest.newInstance(ExecutionType.OPPORTUNISTIC));\r\n        ContainerRequest storedOpportContainer5 = new ContainerRequest(capability5, nodes, racks, priority, 0, true, null, ExecutionTypeRequest.newInstance(ExecutionType.OPPORTUNISTIC));\r\n        ContainerRequest storedOpportContainer6 = new ContainerRequest(capability6, nodes, racks, priority, 0, true, null, ExecutionTypeRequest.newInstance(ExecutionType.OPPORTUNISTIC));\r\n        ContainerRequest storedOpportContainer7 = new ContainerRequest(capability7, nodes, racks, priority2, 0, false, null, ExecutionTypeRequest.newInstance(ExecutionType.OPPORTUNISTIC));\r\n        amClient.addContainerRequest(storedGuarContainer1);\r\n        amClient.addContainerRequest(storedGuarContainer2);\r\n        amClient.addContainerRequest(storedOpportContainer1);\r\n        amClient.addContainerRequest(storedOpportContainer2);\r\n        amClient.addContainerRequest(storedOpportContainer3);\r\n        amClient.addContainerRequest(storedOpportContainer4);\r\n        amClient.addContainerRequest(storedOpportContainer5);\r\n        amClient.addContainerRequest(storedOpportContainer6);\r\n        amClient.addContainerRequest(storedOpportContainer7);\r\n        assertEquals(24, (((AMRMClientImpl<ContainerRequest>) amClient).ask.size()));\r\n        List<? extends Collection<ContainerRequest>> matches;\r\n        ContainerRequest storedRequest;\r\n        Resource testCapability1 = Resource.newInstance(1024, 2);\r\n        matches = amClient.getMatchingRequests(priority, node, ExecutionType.GUARANTEED, testCapability1);\r\n        verifyMatches(matches, 1);\r\n        storedRequest = matches.get(0).iterator().next();\r\n        assertEquals(storedGuarContainer1, storedRequest);\r\n        amClient.removeContainerRequest(storedGuarContainer1);\r\n        matches = amClient.getMatchingRequests(priority, node, ExecutionType.OPPORTUNISTIC, testCapability1);\r\n        verifyMatches(matches, 1);\r\n        storedRequest = matches.get(0).iterator().next();\r\n        assertEquals(storedOpportContainer1, storedRequest);\r\n        amClient.removeContainerRequest(storedOpportContainer1);\r\n        Resource testCapability2 = Resource.newInstance(1000, 2);\r\n        matches = amClient.getMatchingRequests(priority, node, ExecutionType.OPPORTUNISTIC, testCapability2);\r\n        verifyMatches(matches, 2);\r\n        int i = 0;\r\n        for (ContainerRequest storedRequest1 : matches.get(0)) {\r\n            if (i++ == 0) {\r\n                assertEquals(storedOpportContainer3, storedRequest1);\r\n            } else {\r\n                assertEquals(storedOpportContainer4, storedRequest1);\r\n            }\r\n        }\r\n        amClient.removeContainerRequest(storedOpportContainer3);\r\n        Resource testCapability3 = Resource.newInstance(4000, 4);\r\n        matches = amClient.getMatchingRequests(priority, node, ExecutionType.OPPORTUNISTIC, testCapability3);\r\n        assert (matches.size() == 4);\r\n        Resource testCapability4 = Resource.newInstance(6000, 3);\r\n        matches = amClient.getMatchingRequests(priority2, ResourceRequest.ANY, ExecutionType.OPPORTUNISTIC, testCapability4);\r\n        assert (matches.size() == 0);\r\n        matches = amClient.getMatchingRequests(priority2, node, ExecutionType.OPPORTUNISTIC, testCapability4);\r\n        assert (matches.size() == 1);\r\n        amClient.unregisterApplicationMaster(FinalApplicationStatus.SUCCEEDED, null, null);\r\n    } finally {\r\n        if (amClient != null && amClient.getServiceState() == STATE.STARTED) {\r\n            amClient.stop();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "verifyMatches",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void verifyMatches(List<? extends Collection<ContainerRequest>> matches, int matchSize)\n{\r\n    assertEquals(1, matches.size());\r\n    assertEquals(matchSize, matches.get(0).size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testAMRMClientMatchingFitInferredRack",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testAMRMClientMatchingFitInferredRack() throws YarnException, IOException\n{\r\n    AMRMClientImpl<ContainerRequest> amClient = null;\r\n    try {\r\n        amClient = new AMRMClientImpl<ContainerRequest>();\r\n        amClient.init(conf);\r\n        amClient.start();\r\n        amClient.registerApplicationMaster(\"Host\", 10000, \"\");\r\n        Resource capability = Resource.newInstance(1024, 2);\r\n        ContainerRequest storedContainer1 = new ContainerRequest(capability, nodes, null, priority);\r\n        amClient.addContainerRequest(storedContainer1);\r\n        List<? extends Collection<ContainerRequest>> matches;\r\n        ContainerRequest storedRequest;\r\n        matches = amClient.getMatchingRequests(priority, node, capability);\r\n        verifyMatches(matches, 1);\r\n        storedRequest = matches.get(0).iterator().next();\r\n        assertEquals(storedContainer1, storedRequest);\r\n        matches = amClient.getMatchingRequests(priority, rack, capability);\r\n        verifyMatches(matches, 1);\r\n        storedRequest = matches.get(0).iterator().next();\r\n        assertEquals(storedContainer1, storedRequest);\r\n        amClient.removeContainerRequest(storedContainer1);\r\n        matches = amClient.getMatchingRequests(priority, rack, capability);\r\n        assertTrue(matches.isEmpty());\r\n        amClient.unregisterApplicationMaster(FinalApplicationStatus.SUCCEEDED, null, null);\r\n    } finally {\r\n        if (amClient != null && amClient.getServiceState() == STATE.STARTED) {\r\n            amClient.stop();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testAMRMClientMatchStorage",
  "errType" : null,
  "containingMethodsNum" : 66,
  "sourceCodeText" : "void testAMRMClientMatchStorage() throws YarnException, IOException\n{\r\n    AMRMClientImpl<ContainerRequest> amClient = null;\r\n    try {\r\n        amClient = (AMRMClientImpl<ContainerRequest>) AMRMClient.<ContainerRequest>createAMRMClient();\r\n        amClient.init(conf);\r\n        amClient.start();\r\n        amClient.registerApplicationMaster(\"Host\", 10000, \"\");\r\n        Priority priority1 = Records.newRecord(Priority.class);\r\n        priority1.setPriority(2);\r\n        ContainerRequest storedContainer1 = new ContainerRequest(capability, nodes, racks, priority);\r\n        ContainerRequest storedContainer2 = new ContainerRequest(capability, nodes, racks, priority);\r\n        ContainerRequest storedContainer3 = new ContainerRequest(capability, null, null, priority1);\r\n        amClient.addContainerRequest(storedContainer1);\r\n        amClient.addContainerRequest(storedContainer2);\r\n        amClient.addContainerRequest(storedContainer3);\r\n        RemoteRequestsTable<ContainerRequest> remoteRequestsTable = amClient.getTable(0);\r\n        int containersRequestedAny = remoteRequestsTable.get(priority, ResourceRequest.ANY, ExecutionType.GUARANTEED, capability).remoteRequest.getNumContainers();\r\n        assertEquals(2, containersRequestedAny);\r\n        containersRequestedAny = remoteRequestsTable.get(priority1, ResourceRequest.ANY, ExecutionType.GUARANTEED, capability).remoteRequest.getNumContainers();\r\n        assertEquals(1, containersRequestedAny);\r\n        List<? extends Collection<ContainerRequest>> matches = amClient.getMatchingRequests(priority, node, capability);\r\n        verifyMatches(matches, 2);\r\n        matches = amClient.getMatchingRequests(priority, rack, capability);\r\n        verifyMatches(matches, 2);\r\n        matches = amClient.getMatchingRequests(priority, ResourceRequest.ANY, capability);\r\n        verifyMatches(matches, 2);\r\n        matches = amClient.getMatchingRequests(priority1, rack, capability);\r\n        assertTrue(matches.isEmpty());\r\n        matches = amClient.getMatchingRequests(priority1, ResourceRequest.ANY, capability);\r\n        verifyMatches(matches, 1);\r\n        amClient.removeContainerRequest(storedContainer3);\r\n        matches = amClient.getMatchingRequests(priority, node, capability);\r\n        verifyMatches(matches, 2);\r\n        amClient.removeContainerRequest(storedContainer2);\r\n        matches = amClient.getMatchingRequests(priority, node, capability);\r\n        verifyMatches(matches, 1);\r\n        matches = amClient.getMatchingRequests(priority, rack, capability);\r\n        verifyMatches(matches, 1);\r\n        ContainerRequest storedRequest = matches.get(0).iterator().next();\r\n        assertEquals(storedContainer1, storedRequest);\r\n        amClient.removeContainerRequest(storedContainer1);\r\n        matches = amClient.getMatchingRequests(priority, ResourceRequest.ANY, capability);\r\n        assertTrue(matches.isEmpty());\r\n        matches = amClient.getMatchingRequests(priority1, ResourceRequest.ANY, capability);\r\n        assertTrue(matches.isEmpty());\r\n        assertTrue(amClient.getTable(0).isEmpty());\r\n        amClient.addContainerRequest(storedContainer1);\r\n        amClient.addContainerRequest(storedContainer3);\r\n        int allocatedContainerCount = 0;\r\n        int iterationsLeft = 3;\r\n        while (allocatedContainerCount < 2 && iterationsLeft-- > 0) {\r\n            Log.getLog().info(\"Allocated \" + allocatedContainerCount + \" containers\" + \" with \" + iterationsLeft + \" iterations left\");\r\n            AllocateResponse allocResponse = amClient.allocate(0.1f);\r\n            assertEquals(0, amClient.ask.size());\r\n            assertEquals(0, amClient.release.size());\r\n            assertEquals(nodeCount, amClient.getClusterNodeCount());\r\n            allocatedContainerCount += allocResponse.getAllocatedContainers().size();\r\n            for (Container container : allocResponse.getAllocatedContainers()) {\r\n                ContainerRequest expectedRequest = container.getPriority().equals(storedContainer1.getPriority()) ? storedContainer1 : storedContainer3;\r\n                matches = amClient.getMatchingRequests(container.getPriority(), ResourceRequest.ANY, container.getResource());\r\n                verifyMatches(matches, 1);\r\n                ContainerRequest matchedRequest = matches.get(0).iterator().next();\r\n                assertEquals(matchedRequest, expectedRequest);\r\n                amClient.removeContainerRequest(matchedRequest);\r\n                amClient.releaseAssignedContainer(container.getId());\r\n            }\r\n            if (allocatedContainerCount < containersRequestedAny) {\r\n                triggerSchedulingWithNMHeartBeat();\r\n            }\r\n        }\r\n        assertEquals(2, allocatedContainerCount);\r\n        AllocateResponse allocResponse = amClient.allocate(0.1f);\r\n        assertEquals(0, amClient.release.size());\r\n        assertEquals(0, amClient.ask.size());\r\n        assertEquals(0, allocResponse.getAllocatedContainers().size());\r\n        assertTrue(remoteRequestsTable.isEmpty());\r\n        amClient.unregisterApplicationMaster(FinalApplicationStatus.SUCCEEDED, null, null);\r\n    } finally {\r\n        if (amClient != null && amClient.getServiceState() == STATE.STARTED) {\r\n            amClient.stop();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "triggerSchedulingWithNMHeartBeat",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void triggerSchedulingWithNMHeartBeat()\n{\r\n    RMContext context = yarnCluster.getResourceManager().getRMContext();\r\n    if (context.getScheduler() instanceof FairScheduler) {\r\n        FairScheduler scheduler = (FairScheduler) context.getScheduler();\r\n        scheduler.update();\r\n    }\r\n    for (RMNode rmNode : context.getRMNodes().values()) {\r\n        context.getScheduler().handle(new NodeUpdateSchedulerEvent(rmNode));\r\n    }\r\n    if (context.getScheduler() instanceof FairScheduler) {\r\n        FairScheduler scheduler = (FairScheduler) context.getScheduler();\r\n        scheduler.update();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testAllocationWithBlacklist",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 27,
  "sourceCodeText" : "void testAllocationWithBlacklist() throws YarnException, IOException\n{\r\n    AMRMClientImpl<ContainerRequest> amClient = null;\r\n    try {\r\n        amClient = (AMRMClientImpl<ContainerRequest>) AMRMClient.<ContainerRequest>createAMRMClient();\r\n        amClient.init(conf);\r\n        amClient.start();\r\n        amClient.registerApplicationMaster(\"Host\", 10000, \"\");\r\n        assertEquals(0, amClient.ask.size());\r\n        assertEquals(0, amClient.release.size());\r\n        ContainerRequest storedContainer1 = new ContainerRequest(capability, nodes, racks, priority);\r\n        amClient.addContainerRequest(storedContainer1);\r\n        assertEquals(3, amClient.ask.size());\r\n        assertEquals(0, amClient.release.size());\r\n        List<String> localNodeBlacklist = new ArrayList<String>();\r\n        localNodeBlacklist.add(node);\r\n        amClient.updateBlacklist(localNodeBlacklist, null);\r\n        int allocatedContainerCount = getAllocatedContainersNumber(amClient, DEFAULT_ITERATION);\r\n        assertEquals(0, allocatedContainerCount);\r\n        amClient.updateBlacklist(null, localNodeBlacklist);\r\n        ContainerRequest storedContainer2 = new ContainerRequest(capability, nodes, racks, priority);\r\n        amClient.addContainerRequest(storedContainer2);\r\n        allocatedContainerCount = getAllocatedContainersNumber(amClient, DEFAULT_ITERATION);\r\n        assertEquals(2, allocatedContainerCount);\r\n        assertTrue(amClient.blacklistAdditions.isEmpty());\r\n        assertTrue(amClient.blacklistRemovals.isEmpty());\r\n        ContainerRequest invalidContainerRequest = new ContainerRequest(Resource.newInstance(-1024, 1), nodes, racks, priority);\r\n        amClient.addContainerRequest(invalidContainerRequest);\r\n        amClient.updateBlacklist(localNodeBlacklist, null);\r\n        try {\r\n            amClient.allocate(0.1f);\r\n            fail(\"there should be an exception here.\");\r\n        } catch (Exception e) {\r\n            assertEquals(1, amClient.blacklistAdditions.size());\r\n        }\r\n    } finally {\r\n        if (amClient != null && amClient.getServiceState() == STATE.STARTED) {\r\n            amClient.stop();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testAMRMClientWithBlacklist",
  "errType" : null,
  "containingMethodsNum" : 25,
  "sourceCodeText" : "void testAMRMClientWithBlacklist() throws YarnException, IOException\n{\r\n    AMRMClientImpl<ContainerRequest> amClient = null;\r\n    try {\r\n        amClient = (AMRMClientImpl<ContainerRequest>) AMRMClient.<ContainerRequest>createAMRMClient();\r\n        amClient.init(conf);\r\n        amClient.start();\r\n        amClient.registerApplicationMaster(\"Host\", 10000, \"\");\r\n        String[] nodes = { \"node1\", \"node2\", \"node3\" };\r\n        List<String> nodeList01 = new ArrayList<String>();\r\n        nodeList01.add(nodes[0]);\r\n        nodeList01.add(nodes[1]);\r\n        amClient.updateBlacklist(nodeList01, null);\r\n        assertEquals(2, amClient.blacklistAdditions.size());\r\n        assertEquals(0, amClient.blacklistRemovals.size());\r\n        List<String> nodeList02 = new ArrayList<String>();\r\n        nodeList02.add(nodes[0]);\r\n        nodeList02.add(nodes[2]);\r\n        amClient.updateBlacklist(nodeList02, null);\r\n        assertEquals(3, amClient.blacklistAdditions.size());\r\n        assertEquals(0, amClient.blacklistRemovals.size());\r\n        List<String> nodeList12 = new ArrayList<String>();\r\n        nodeList12.add(nodes[1]);\r\n        nodeList12.add(nodes[2]);\r\n        amClient.updateBlacklist(null, nodeList12);\r\n        assertEquals(1, amClient.blacklistAdditions.size());\r\n        assertEquals(2, amClient.blacklistRemovals.size());\r\n        List<String> nodeList1 = new ArrayList<String>();\r\n        nodeList1.add(nodes[1]);\r\n        amClient.updateBlacklist(nodeList1, null);\r\n        assertEquals(2, amClient.blacklistAdditions.size());\r\n        assertEquals(1, amClient.blacklistRemovals.size());\r\n    } finally {\r\n        if (amClient != null && amClient.getServiceState() == STATE.STARTED) {\r\n            amClient.stop();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getAllocatedContainersNumber",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "int getAllocatedContainersNumber(AMRMClientImpl<ContainerRequest> amClient, int iterationsLeft) throws YarnException, IOException\n{\r\n    int allocatedContainerCount = 0;\r\n    while (iterationsLeft-- > 0) {\r\n        Log.getLog().info(\"Allocated \" + allocatedContainerCount + \" containers\" + \" with \" + iterationsLeft + \" iterations left\");\r\n        AllocateResponse allocResponse = amClient.allocate(0.1f);\r\n        assertEquals(0, amClient.ask.size());\r\n        assertEquals(0, amClient.release.size());\r\n        assertEquals(nodeCount, amClient.getClusterNodeCount());\r\n        allocatedContainerCount += allocResponse.getAllocatedContainers().size();\r\n        if (allocatedContainerCount == 0) {\r\n            triggerSchedulingWithNMHeartBeat();\r\n        }\r\n    }\r\n    return allocatedContainerCount;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testAMRMClient",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testAMRMClient() throws YarnException, IOException\n{\r\n    initAMRMClientAndTest(false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testAMRMClientAllocReqId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testAMRMClientAllocReqId() throws YarnException, IOException\n{\r\n    initAMRMClientAndTest(true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testAMRMClientWithSaslEncryption",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testAMRMClientWithSaslEncryption() throws Exception\n{\r\n    teardown();\r\n    conf = new YarnConfiguration();\r\n    conf.set(CommonConfigurationKeysPublic.HADOOP_RPC_PROTECTION, \"privacy\");\r\n    createClusterAndStartApplication(conf);\r\n    initAMRMClientAndTest(false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "initAMRMClientAndTest",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void initAMRMClientAndTest(boolean useAllocReqId) throws YarnException, IOException\n{\r\n    AMRMClient<ContainerRequest> amClient = null;\r\n    try {\r\n        amClient = AMRMClient.<ContainerRequest>createAMRMClient();\r\n        amClient.setNMTokenCache(new NMTokenCache());\r\n        Assert.assertNotSame(NMTokenCache.getSingleton(), amClient.getNMTokenCache());\r\n        amClient.init(conf);\r\n        amClient.start();\r\n        amClient.registerApplicationMaster(\"Host\", 10000, \"\");\r\n        if (useAllocReqId) {\r\n            testAllocRequestId((AMRMClientImpl<ContainerRequest>) amClient);\r\n        } else {\r\n            testAllocation((AMRMClientImpl<ContainerRequest>) amClient);\r\n        }\r\n        amClient.unregisterApplicationMaster(FinalApplicationStatus.SUCCEEDED, null, null);\r\n    } finally {\r\n        if (amClient != null && amClient.getServiceState() == STATE.STARTED) {\r\n            amClient.stop();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testAskWithNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testAskWithNodeLabels()\n{\r\n    AMRMClientImpl<ContainerRequest> client = new AMRMClientImpl<ContainerRequest>();\r\n    client.addContainerRequest(new ContainerRequest(Resource.newInstance(1024, 1), null, null, Priority.UNDEFINED, true, \"x\"));\r\n    assertEquals(1, client.ask.size());\r\n    assertEquals(\"x\", client.ask.iterator().next().getNodeLabelExpression());\r\n    client.addContainerRequest(new ContainerRequest(Resource.newInstance(1024, 1), null, null, Priority.UNDEFINED, true, \"x\"));\r\n    client.addContainerRequest(new ContainerRequest(Resource.newInstance(1024, 1), null, null, Priority.UNDEFINED, true, \"a\"));\r\n    assertEquals(1, client.ask.size());\r\n    assertEquals(\"a\", client.ask.iterator().next().getNodeLabelExpression());\r\n    client.addContainerRequest(new ContainerRequest(Resource.newInstance(1024, 1), null, null, Priority.UNDEFINED, true, \"y\"));\r\n    assertEquals(1, client.ask.size());\r\n    for (ResourceRequest req : client.ask) {\r\n        if (ResourceRequest.ANY.equals(req.getResourceName())) {\r\n            assertEquals(\"y\", req.getNodeLabelExpression());\r\n        } else {\r\n            Assert.assertNull(req.getNodeLabelExpression());\r\n        }\r\n    }\r\n    client.addContainerRequest(new ContainerRequest(Resource.newInstance(1024, 1), new String[] { \"rack1\" }, new String[] { \"node1\", \"node2\" }, Priority.UNDEFINED, true, \"y\"));\r\n    for (ResourceRequest req : client.ask) {\r\n        if (ResourceRequest.ANY.equals(req.getResourceName())) {\r\n            assertEquals(\"y\", req.getNodeLabelExpression());\r\n        } else {\r\n            Assert.assertNull(req.getNodeLabelExpression());\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "verifyAddRequestFailed",
  "errType" : [ "InvalidContainerRequestException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void verifyAddRequestFailed(AMRMClient<ContainerRequest> client, ContainerRequest request)\n{\r\n    try {\r\n        client.addContainerRequest(request);\r\n    } catch (InvalidContainerRequestException e) {\r\n        return;\r\n    }\r\n    fail();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testAskWithInvalidNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testAskWithInvalidNodeLabels()\n{\r\n    AMRMClientImpl<ContainerRequest> client = new AMRMClientImpl<ContainerRequest>();\r\n    verifyAddRequestFailed(client, new ContainerRequest(Resource.newInstance(1024, 1), null, null, Priority.UNDEFINED, true, \"x && y\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testAMRMClientWithContainerResourceChange",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testAMRMClientWithContainerResourceChange() throws YarnException, IOException\n{\r\n    Assume.assumeTrue(schedulerName.equals(CapacityScheduler.class.getName()));\r\n    AMRMClient<ContainerRequest> amClient = null;\r\n    try {\r\n        amClient = AMRMClient.createAMRMClient();\r\n        Assert.assertNotNull(amClient);\r\n        Assert.assertSame(NMTokenCache.getSingleton(), amClient.getNMTokenCache());\r\n        amClient.init(conf);\r\n        amClient.start();\r\n        assertEquals(STATE.STARTED, amClient.getServiceState());\r\n        NMClientImpl nmClient = (NMClientImpl) NMClient.createNMClient();\r\n        Assert.assertNotNull(nmClient);\r\n        Assert.assertSame(NMTokenCache.getSingleton(), nmClient.getNMTokenCache());\r\n        nmClient.init(conf);\r\n        nmClient.start();\r\n        assertEquals(STATE.STARTED, nmClient.getServiceState());\r\n        amClient.registerApplicationMaster(\"Host\", 10000, \"\");\r\n        List<Container> containers = allocateAndStartContainers(amClient, nmClient, 3);\r\n        doContainerResourceChange(amClient, containers);\r\n        amClient.unregisterApplicationMaster(FinalApplicationStatus.SUCCEEDED, null, null);\r\n    } finally {\r\n        if (amClient != null && amClient.getServiceState() == STATE.STARTED) {\r\n            amClient.stop();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "allocateAndStartContainers",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "List<Container> allocateAndStartContainers(final AMRMClient<ContainerRequest> amClient, final NMClient nmClient, int num) throws YarnException, IOException\n{\r\n    for (int i = 0; i < num; ++i) {\r\n        amClient.addContainerRequest(new ContainerRequest(capability, nodes, racks, priority));\r\n    }\r\n    amClient.allocate(0.1f);\r\n    triggerSchedulingWithNMHeartBeat();\r\n    AllocateResponse allocResponse = amClient.allocate(0.1f);\r\n    List<Container> containers = allocResponse.getAllocatedContainers();\r\n    assertEquals(num, containers.size());\r\n    Credentials ts = new Credentials();\r\n    DataOutputBuffer dob = new DataOutputBuffer();\r\n    ts.writeTokenStorageToStream(dob);\r\n    ByteBuffer securityTokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\r\n    ContainerLaunchContext clc = BuilderUtils.newContainerLaunchContext(Collections.<String, LocalResource>emptyMap(), new HashMap<String, String>(), Arrays.asList(\"sleep\", \"100\"), new HashMap<String, ByteBuffer>(), securityTokens, new HashMap<ApplicationAccessType, String>());\r\n    try {\r\n        for (int i = 0; i < num; i++) {\r\n            Container container = containers.get(i);\r\n            nmClient.startContainer(container, clc);\r\n            while (true) {\r\n                ContainerStatus status = nmClient.getContainerStatus(container.getId(), container.getNodeId());\r\n                if (status.getState() == ContainerState.RUNNING) {\r\n                    break;\r\n                }\r\n                sleep(10);\r\n            }\r\n        }\r\n    } catch (YarnException e) {\r\n        throw new AssertionError(\"Exception is not expected: \" + e);\r\n    }\r\n    triggerSchedulingWithNMHeartBeat();\r\n    return containers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "doContainerResourceChange",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void doContainerResourceChange(final AMRMClient<ContainerRequest> amClient, List<Container> containers) throws YarnException, IOException\n{\r\n    assertEquals(3, containers.size());\r\n    Container container1 = containers.get(0);\r\n    Container container2 = containers.get(1);\r\n    Container container3 = containers.get(2);\r\n    AMRMClientImpl<ContainerRequest> amClientImpl = (AMRMClientImpl<ContainerRequest>) amClient;\r\n    assertEquals(0, amClientImpl.change.size());\r\n    amClientImpl.requestContainerUpdate(container1, UpdateContainerRequest.newInstance(container1.getVersion(), container1.getId(), ContainerUpdateType.INCREASE_RESOURCE, Resource.newInstance(2048, 1), null));\r\n    amClientImpl.requestContainerUpdate(container1, UpdateContainerRequest.newInstance(container1.getVersion(), container1.getId(), ContainerUpdateType.INCREASE_RESOURCE, Resource.newInstance(4096, 1), null));\r\n    assertEquals(Resource.newInstance(4096, 1), amClientImpl.change.get(container1.getId()).getValue().getCapability());\r\n    amClientImpl.requestContainerUpdate(container1, UpdateContainerRequest.newInstance(container1.getVersion(), container1.getId(), ContainerUpdateType.DECREASE_RESOURCE, Resource.newInstance(512, 1), null));\r\n    assertEquals(Resource.newInstance(512, 1), amClientImpl.change.get(container1.getId()).getValue().getCapability());\r\n    amClientImpl.requestContainerUpdate(container3, UpdateContainerRequest.newInstance(container3.getVersion(), container3.getId(), ContainerUpdateType.INCREASE_RESOURCE, Resource.newInstance(2048, 1), null));\r\n    assertEquals(2, amClientImpl.pendingChange.size());\r\n    amClientImpl.releaseAssignedContainer(container3.getId());\r\n    assertEquals(1, amClientImpl.pendingChange.size());\r\n    assertUpdatedContainers(amClient, container1);\r\n    amClientImpl.requestContainerUpdate(container2, UpdateContainerRequest.newInstance(container2.getVersion(), container2.getId(), ContainerUpdateType.INCREASE_RESOURCE, Resource.newInstance(2048, 1), null));\r\n    assertEquals(Resource.newInstance(2048, 1), amClientImpl.change.get(container2.getId()).getValue().getCapability());\r\n    assertUpdatedContainers(amClient, container2);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "assertUpdatedContainers",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void assertUpdatedContainers(AMRMClient<ContainerRequest> amClient, Container container)\n{\r\n    RMContext context = yarnCluster.getResourceManager().getRMContext();\r\n    RMNode rmNode = context.getRMNodes().get(container.getNodeId());\r\n    List<UpdatedContainer> updateResponse = new ArrayList<>();\r\n    int allocationAttempts = 0;\r\n    while (allocationAttempts < 1000) {\r\n        context.getScheduler().handle(new NodeUpdateSchedulerEvent(rmNode));\r\n        try {\r\n            updateResponse = amClient.allocate(0.1f).getUpdatedContainers();\r\n            if (updateResponse.size() == 1) {\r\n                break;\r\n            } else {\r\n                allocationAttempts++;\r\n                sleep(20);\r\n            }\r\n        } catch (Exception ignored) {\r\n        }\r\n    }\r\n    Assert.assertEquals(\"Container resource change update failed\", 1, updateResponse.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testAMRMContainerPromotionAndDemotionWithAutoUpdate",
  "errType" : null,
  "containingMethodsNum" : 28,
  "sourceCodeText" : "void testAMRMContainerPromotionAndDemotionWithAutoUpdate() throws Exception\n{\r\n    AMRMClientImpl<AMRMClient.ContainerRequest> amClient = (AMRMClientImpl<AMRMClient.ContainerRequest>) AMRMClient.createAMRMClient();\r\n    amClient.init(conf);\r\n    amClient.start();\r\n    NMClientImpl nmClient = (NMClientImpl) NMClient.createNMClient();\r\n    Assert.assertNotNull(nmClient);\r\n    nmClient.init(conf);\r\n    nmClient.start();\r\n    assertEquals(STATE.STARTED, nmClient.getServiceState());\r\n    amClient.registerApplicationMaster(\"Host\", 10000, \"\");\r\n    assertEquals(0, amClient.ask.size());\r\n    assertEquals(0, amClient.release.size());\r\n    Resource reqResource = Resource.newInstance(512, 1);\r\n    amClient.addContainerRequest(new AMRMClient.ContainerRequest(reqResource, null, null, priority2, 0, true, null, ExecutionTypeRequest.newInstance(ExecutionType.OPPORTUNISTIC, true)));\r\n    AllocateResponse allocResponse = waitForAllocation(amClient, 1, 0);\r\n    assertEquals(1, allocResponse.getAllocatedContainers().size());\r\n    startContainer(allocResponse, nmClient);\r\n    Container c = allocResponse.getAllocatedContainers().get(0);\r\n    amClient.requestContainerUpdate(c, UpdateContainerRequest.newInstance(c.getVersion(), c.getId(), ContainerUpdateType.PROMOTE_EXECUTION_TYPE, null, ExecutionType.GUARANTEED));\r\n    allocResponse = waitForAllocation(amClient, 0, 1);\r\n    UpdatedContainer updatedContainer = allocResponse.getUpdatedContainers().get(0);\r\n    if (!autoUpdate) {\r\n        nmClient.updateContainerResource(updatedContainer.getContainer());\r\n    }\r\n    waitForNMContextUpdate(updatedContainer, ExecutionType.GUARANTEED);\r\n    amClient.requestContainerUpdate(updatedContainer.getContainer(), UpdateContainerRequest.newInstance(updatedContainer.getContainer().getVersion(), updatedContainer.getContainer().getId(), ContainerUpdateType.DEMOTE_EXECUTION_TYPE, null, ExecutionType.OPPORTUNISTIC));\r\n    allocResponse = waitForAllocation(amClient, 0, 1);\r\n    updatedContainer = allocResponse.getUpdatedContainers().get(0);\r\n    if (!autoUpdate) {\r\n        nmClient.updateContainerResource(updatedContainer.getContainer());\r\n    }\r\n    waitForNMContextUpdate(updatedContainer, ExecutionType.OPPORTUNISTIC);\r\n    amClient.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "waitForAllocation",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "AllocateResponse waitForAllocation(AMRMClient amrmClient, int expectedAllocatedContainerNum, int expectedUpdatedContainerNum) throws Exception\n{\r\n    AllocateResponse allocResponse = null;\r\n    int iteration = 100;\r\n    while (iteration > 0) {\r\n        allocResponse = amrmClient.allocate(0.1f);\r\n        int actualAllocated = allocResponse.getAllocatedContainers().size();\r\n        int actualUpdated = allocResponse.getUpdatedContainers().size();\r\n        if (expectedAllocatedContainerNum == actualAllocated && expectedUpdatedContainerNum == actualUpdated) {\r\n            break;\r\n        }\r\n        Thread.sleep(100);\r\n        iteration--;\r\n    }\r\n    return allocResponse;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "waitForNMContextUpdate",
  "errType" : [ "TimeoutException", "InterruptedException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void waitForNMContextUpdate(UpdatedContainer updatedContainer, ExecutionType expectedType)\n{\r\n    for (int i = 0; i < nodeCount; i++) {\r\n        NodeManager nm = yarnCluster.getNodeManager(i);\r\n        if (nm.getNMContext().getNodeId().equals(updatedContainer.getContainer().getNodeId())) {\r\n            try {\r\n                GenericTestUtils.waitFor(() -> {\r\n                    org.apache.hadoop.yarn.server.nodemanager.containermanager.container.Container nmContainer = nm.getNMContext().getContainers().get(updatedContainer.getContainer().getId());\r\n                    if (nmContainer != null) {\r\n                        ExecutionType actual = nmContainer.getContainerTokenIdentifier().getExecutionType();\r\n                        return actual.equals(expectedType);\r\n                    }\r\n                    return false;\r\n                }, 1000, 30000);\r\n            } catch (TimeoutException e) {\r\n                fail(\"Times out waiting for container state in\" + \" NM context to be updated\");\r\n            } catch (InterruptedException e) {\r\n            }\r\n            break;\r\n        }\r\n        if (i == nodeCount - 1) {\r\n            fail(\"Container doesn't exist in NM context.\");\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testAMRMClientWithContainerPromotion",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 58,
  "sourceCodeText" : "void testAMRMClientWithContainerPromotion() throws YarnException, IOException\n{\r\n    AMRMClientImpl<AMRMClient.ContainerRequest> amClient = (AMRMClientImpl<AMRMClient.ContainerRequest>) AMRMClient.createAMRMClient();\r\n    Assert.assertSame(NMTokenCache.getSingleton(), amClient.getNMTokenCache());\r\n    amClient.init(conf);\r\n    amClient.start();\r\n    NMClientImpl nmClient = (NMClientImpl) NMClient.createNMClient();\r\n    Assert.assertNotNull(nmClient);\r\n    Assert.assertSame(NMTokenCache.getSingleton(), nmClient.getNMTokenCache());\r\n    nmClient.init(conf);\r\n    nmClient.start();\r\n    assertEquals(STATE.STARTED, nmClient.getServiceState());\r\n    amClient.registerApplicationMaster(\"Host\", 10000, \"\");\r\n    assertEquals(0, amClient.ask.size());\r\n    assertEquals(0, amClient.release.size());\r\n    amClient.addContainerRequest(new AMRMClient.ContainerRequest(capability, null, null, priority2, 0, true, null, ExecutionTypeRequest.newInstance(ExecutionType.OPPORTUNISTIC, true)));\r\n    int oppContainersRequestedAny = amClient.getTable(0).get(priority2, ResourceRequest.ANY, ExecutionType.OPPORTUNISTIC, capability).remoteRequest.getNumContainers();\r\n    assertEquals(1, oppContainersRequestedAny);\r\n    assertEquals(1, amClient.ask.size());\r\n    assertEquals(0, amClient.release.size());\r\n    int allocatedContainerCount = 0;\r\n    Map<ContainerId, Container> allocatedOpportContainers = new HashMap<>();\r\n    int iterationsLeft = 50;\r\n    amClient.getNMTokenCache().clearCache();\r\n    assertEquals(0, amClient.getNMTokenCache().numberOfTokensInCache());\r\n    AllocateResponse allocResponse = null;\r\n    while (allocatedContainerCount < oppContainersRequestedAny && iterationsLeft-- > 0) {\r\n        allocResponse = amClient.allocate(0.1f);\r\n        assertEquals(0, amClient.ask.size());\r\n        assertEquals(0, amClient.release.size());\r\n        allocatedContainerCount += allocResponse.getAllocatedContainers().size();\r\n        for (Container container : allocResponse.getAllocatedContainers()) {\r\n            if (container.getExecutionType() == ExecutionType.OPPORTUNISTIC) {\r\n                allocatedOpportContainers.put(container.getId(), container);\r\n            }\r\n        }\r\n        if (allocatedContainerCount < oppContainersRequestedAny) {\r\n            sleep(100);\r\n        }\r\n    }\r\n    assertEquals(oppContainersRequestedAny, allocatedContainerCount);\r\n    assertEquals(oppContainersRequestedAny, allocatedOpportContainers.size());\r\n    startContainer(allocResponse, nmClient);\r\n    try {\r\n        Container c = allocatedOpportContainers.values().iterator().next();\r\n        amClient.requestContainerUpdate(c, UpdateContainerRequest.newInstance(c.getVersion(), c.getId(), ContainerUpdateType.PROMOTE_EXECUTION_TYPE, null, ExecutionType.OPPORTUNISTIC));\r\n        fail(\"Should throw Exception..\");\r\n    } catch (IllegalArgumentException e) {\r\n        System.out.println(\"## \" + e.getMessage());\r\n        assertTrue(e.getMessage().contains(\"target should be GUARANTEED and original should be OPPORTUNISTIC\"));\r\n    }\r\n    Container c = allocatedOpportContainers.values().iterator().next();\r\n    amClient.requestContainerUpdate(c, UpdateContainerRequest.newInstance(c.getVersion(), c.getId(), ContainerUpdateType.PROMOTE_EXECUTION_TYPE, null, ExecutionType.GUARANTEED));\r\n    iterationsLeft = 120;\r\n    Map<ContainerId, UpdatedContainer> updatedContainers = new HashMap<>();\r\n    while (iterationsLeft-- > 0 && updatedContainers.isEmpty()) {\r\n        allocResponse = amClient.allocate(0.1f);\r\n        if (allocResponse.getUpdatedContainers() != null) {\r\n            for (UpdatedContainer updatedContainer : allocResponse.getUpdatedContainers()) {\r\n                System.out.println(\"Got update..\");\r\n                updatedContainers.put(updatedContainer.getContainer().getId(), updatedContainer);\r\n            }\r\n        }\r\n        if (iterationsLeft > 0) {\r\n            sleep(100);\r\n        }\r\n    }\r\n    assertEquals(1, updatedContainers.size());\r\n    for (ContainerId cId : allocatedOpportContainers.keySet()) {\r\n        Container orig = allocatedOpportContainers.get(cId);\r\n        UpdatedContainer updatedContainer = updatedContainers.get(cId);\r\n        assertNotNull(updatedContainer);\r\n        assertEquals(ExecutionType.GUARANTEED, updatedContainer.getContainer().getExecutionType());\r\n        assertEquals(orig.getResource(), updatedContainer.getContainer().getResource());\r\n        assertEquals(orig.getNodeId(), updatedContainer.getContainer().getNodeId());\r\n        assertEquals(orig.getVersion() + 1, updatedContainer.getContainer().getVersion());\r\n    }\r\n    assertEquals(0, amClient.ask.size());\r\n    assertEquals(0, amClient.release.size());\r\n    updateContainerExecType(allocResponse, ExecutionType.GUARANTEED, nmClient);\r\n    amClient.ask.clear();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testAMRMClientWithContainerDemotion",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 58,
  "sourceCodeText" : "void testAMRMClientWithContainerDemotion() throws YarnException, IOException\n{\r\n    AMRMClientImpl<AMRMClient.ContainerRequest> amClient = (AMRMClientImpl<AMRMClient.ContainerRequest>) AMRMClient.createAMRMClient();\r\n    Assert.assertSame(NMTokenCache.getSingleton(), amClient.getNMTokenCache());\r\n    amClient.init(conf);\r\n    amClient.start();\r\n    NMClientImpl nmClient = (NMClientImpl) NMClient.createNMClient();\r\n    Assert.assertNotNull(nmClient);\r\n    Assert.assertSame(NMTokenCache.getSingleton(), nmClient.getNMTokenCache());\r\n    nmClient.init(conf);\r\n    nmClient.start();\r\n    assertEquals(STATE.STARTED, nmClient.getServiceState());\r\n    amClient.registerApplicationMaster(\"Host\", 10000, \"\");\r\n    assertEquals(0, amClient.ask.size());\r\n    assertEquals(0, amClient.release.size());\r\n    amClient.addContainerRequest(new AMRMClient.ContainerRequest(capability, null, null, priority2, 0, true, null, ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED, true)));\r\n    int oppContainersRequestedAny = amClient.getTable(0).get(priority2, ResourceRequest.ANY, ExecutionType.GUARANTEED, capability).remoteRequest.getNumContainers();\r\n    assertEquals(1, oppContainersRequestedAny);\r\n    assertEquals(1, amClient.ask.size());\r\n    assertEquals(0, amClient.release.size());\r\n    int allocatedContainerCount = 0;\r\n    Map<ContainerId, Container> allocatedGuaranteedContainers = new HashMap<>();\r\n    int iterationsLeft = 50;\r\n    amClient.getNMTokenCache().clearCache();\r\n    assertEquals(0, amClient.getNMTokenCache().numberOfTokensInCache());\r\n    AllocateResponse allocResponse = null;\r\n    while (allocatedContainerCount < oppContainersRequestedAny && iterationsLeft-- > 0) {\r\n        allocResponse = amClient.allocate(0.1f);\r\n        assertEquals(0, amClient.ask.size());\r\n        assertEquals(0, amClient.release.size());\r\n        allocatedContainerCount += allocResponse.getAllocatedContainers().size();\r\n        for (Container container : allocResponse.getAllocatedContainers()) {\r\n            if (container.getExecutionType() == ExecutionType.GUARANTEED) {\r\n                allocatedGuaranteedContainers.put(container.getId(), container);\r\n            }\r\n        }\r\n        if (allocatedContainerCount < oppContainersRequestedAny) {\r\n            sleep(100);\r\n        }\r\n    }\r\n    assertEquals(oppContainersRequestedAny, allocatedContainerCount);\r\n    assertEquals(oppContainersRequestedAny, allocatedGuaranteedContainers.size());\r\n    startContainer(allocResponse, nmClient);\r\n    try {\r\n        Container c = allocatedGuaranteedContainers.values().iterator().next();\r\n        amClient.requestContainerUpdate(c, UpdateContainerRequest.newInstance(c.getVersion(), c.getId(), ContainerUpdateType.DEMOTE_EXECUTION_TYPE, null, ExecutionType.GUARANTEED));\r\n        fail(\"Should throw Exception..\");\r\n    } catch (IllegalArgumentException e) {\r\n        System.out.println(\"## \" + e.getMessage());\r\n        assertTrue(e.getMessage().contains(\"target should be OPPORTUNISTIC and original should be GUARANTEED\"));\r\n    }\r\n    Container c = allocatedGuaranteedContainers.values().iterator().next();\r\n    amClient.requestContainerUpdate(c, UpdateContainerRequest.newInstance(c.getVersion(), c.getId(), ContainerUpdateType.DEMOTE_EXECUTION_TYPE, null, ExecutionType.OPPORTUNISTIC));\r\n    iterationsLeft = 120;\r\n    Map<ContainerId, UpdatedContainer> updatedContainers = new HashMap<>();\r\n    while (iterationsLeft-- > 0 && updatedContainers.isEmpty()) {\r\n        allocResponse = amClient.allocate(0.1f);\r\n        if (allocResponse.getUpdatedContainers() != null) {\r\n            for (UpdatedContainer updatedContainer : allocResponse.getUpdatedContainers()) {\r\n                System.out.println(\"Got update..\");\r\n                updatedContainers.put(updatedContainer.getContainer().getId(), updatedContainer);\r\n            }\r\n        }\r\n        if (iterationsLeft > 0) {\r\n            sleep(100);\r\n        }\r\n    }\r\n    assertEquals(1, updatedContainers.size());\r\n    for (ContainerId cId : allocatedGuaranteedContainers.keySet()) {\r\n        Container orig = allocatedGuaranteedContainers.get(cId);\r\n        UpdatedContainer updatedContainer = updatedContainers.get(cId);\r\n        assertNotNull(updatedContainer);\r\n        assertEquals(ExecutionType.OPPORTUNISTIC, updatedContainer.getContainer().getExecutionType());\r\n        assertEquals(orig.getResource(), updatedContainer.getContainer().getResource());\r\n        assertEquals(orig.getNodeId(), updatedContainer.getContainer().getNodeId());\r\n        assertEquals(orig.getVersion() + 1, updatedContainer.getContainer().getVersion());\r\n    }\r\n    assertEquals(0, amClient.ask.size());\r\n    assertEquals(0, amClient.release.size());\r\n    updateContainerExecType(allocResponse, ExecutionType.OPPORTUNISTIC, nmClient);\r\n    amClient.ask.clear();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "updateContainerExecType",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void updateContainerExecType(AllocateResponse allocResponse, ExecutionType expectedExecType, NMClientImpl nmClient) throws IOException, YarnException\n{\r\n    for (UpdatedContainer updatedContainer : allocResponse.getUpdatedContainers()) {\r\n        Container container = updatedContainer.getContainer();\r\n        if (!autoUpdate) {\r\n            nmClient.increaseContainerResource(container);\r\n        }\r\n        while (true) {\r\n            ContainerStatus status = nmClient.getContainerStatus(container.getId(), container.getNodeId());\r\n            if (status.getExecutionType() == expectedExecType) {\r\n                break;\r\n            }\r\n            sleep(10);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "startContainer",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void startContainer(AllocateResponse allocResponse, NMClientImpl nmClient) throws IOException, YarnException\n{\r\n    Credentials ts = new Credentials();\r\n    DataOutputBuffer dob = new DataOutputBuffer();\r\n    ts.writeTokenStorageToStream(dob);\r\n    ByteBuffer securityTokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\r\n    ContainerLaunchContext clc = BuilderUtils.newContainerLaunchContext(Collections.<String, LocalResource>emptyMap(), new HashMap<String, String>(), Arrays.asList(\"sleep\", \"100\"), new HashMap<String, ByteBuffer>(), securityTokens, new HashMap<ApplicationAccessType, String>());\r\n    for (Container container : allocResponse.getAllocatedContainers()) {\r\n        nmClient.startContainer(container, clc);\r\n        while (true) {\r\n            ContainerStatus status = nmClient.getContainerStatus(container.getId(), container.getNodeId());\r\n            if (status.getState() == ContainerState.RUNNING) {\r\n                break;\r\n            }\r\n            sleep(10);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testAllocation",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 47,
  "sourceCodeText" : "void testAllocation(final AMRMClientImpl<ContainerRequest> amClient) throws YarnException, IOException\n{\r\n    assertEquals(0, amClient.ask.size());\r\n    assertEquals(0, amClient.release.size());\r\n    amClient.addContainerRequest(new ContainerRequest(capability, nodes, racks, priority));\r\n    amClient.addContainerRequest(new ContainerRequest(capability, nodes, racks, priority));\r\n    amClient.addContainerRequest(new ContainerRequest(capability, nodes, racks, priority));\r\n    amClient.addContainerRequest(new ContainerRequest(capability, nodes, racks, priority));\r\n    amClient.removeContainerRequest(new ContainerRequest(capability, nodes, racks, priority));\r\n    amClient.removeContainerRequest(new ContainerRequest(capability, nodes, racks, priority));\r\n    assertNumContainers(amClient, 0, 2, 2, 2, 3, 0);\r\n    int containersRequestedAny = 2;\r\n    int allocatedContainerCount = 0;\r\n    int iterationsLeft = 3;\r\n    Set<ContainerId> releases = new TreeSet<ContainerId>();\r\n    amClient.getNMTokenCache().clearCache();\r\n    assertEquals(0, amClient.getNMTokenCache().numberOfTokensInCache());\r\n    HashMap<String, Token> receivedNMTokens = new HashMap<String, Token>();\r\n    while (allocatedContainerCount < containersRequestedAny && iterationsLeft-- > 0) {\r\n        AllocateResponse allocResponse = amClient.allocate(0.1f);\r\n        assertEquals(0, amClient.ask.size());\r\n        assertEquals(0, amClient.release.size());\r\n        assertEquals(nodeCount, amClient.getClusterNodeCount());\r\n        allocatedContainerCount += allocResponse.getAllocatedContainers().size();\r\n        for (Container container : allocResponse.getAllocatedContainers()) {\r\n            ContainerId rejectContainerId = container.getId();\r\n            releases.add(rejectContainerId);\r\n            amClient.releaseAssignedContainer(rejectContainerId);\r\n        }\r\n        for (NMToken token : allocResponse.getNMTokens()) {\r\n            String nodeID = token.getNodeId().toString();\r\n            if (receivedNMTokens.containsKey(nodeID)) {\r\n                fail(\"Received token again for : \" + nodeID);\r\n            }\r\n            receivedNMTokens.put(nodeID, token.getToken());\r\n        }\r\n        if (allocatedContainerCount < containersRequestedAny) {\r\n            triggerSchedulingWithNMHeartBeat();\r\n        }\r\n    }\r\n    assertTrue(receivedNMTokens.size() > 0 && receivedNMTokens.size() <= nodeCount);\r\n    assertEquals(allocatedContainerCount, containersRequestedAny);\r\n    assertEquals(2, releases.size());\r\n    assertEquals(0, amClient.ask.size());\r\n    amClient.removeContainerRequest(new ContainerRequest(capability, nodes, racks, priority));\r\n    amClient.removeContainerRequest(new ContainerRequest(capability, nodes, racks, priority));\r\n    assertEquals(3, amClient.ask.size());\r\n    ResourceRequest snoopRequest = amClient.ask.iterator().next();\r\n    assertEquals(0, snoopRequest.getNumContainers());\r\n    amClient.addContainerRequest(new ContainerRequest(capability, nodes, racks, priority));\r\n    amClient.addContainerRequest(new ContainerRequest(capability, nodes, racks, priority));\r\n    snoopRequest = amClient.ask.iterator().next();\r\n    assertEquals(2, snoopRequest.getNumContainers());\r\n    ApplicationMasterProtocol realRM = amClient.rmClient;\r\n    try {\r\n        ApplicationMasterProtocol mockRM = mock(ApplicationMasterProtocol.class);\r\n        when(mockRM.allocate(any(AllocateRequest.class))).thenAnswer(new Answer<AllocateResponse>() {\r\n\r\n            public AllocateResponse answer(InvocationOnMock invocation) throws Exception {\r\n                amClient.removeContainerRequest(new ContainerRequest(capability, nodes, racks, priority));\r\n                amClient.removeContainerRequest(new ContainerRequest(capability, nodes, racks, priority));\r\n                throw new Exception();\r\n            }\r\n        });\r\n        amClient.rmClient = mockRM;\r\n        amClient.allocate(0.1f);\r\n    } catch (Exception ioe) {\r\n    } finally {\r\n        amClient.rmClient = realRM;\r\n    }\r\n    assertEquals(2, amClient.release.size());\r\n    assertEquals(3, amClient.ask.size());\r\n    snoopRequest = amClient.ask.iterator().next();\r\n    assertEquals(0, snoopRequest.getNumContainers());\r\n    waitForContainerCompletion(3, amClient, releases);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "waitForContainerCompletion",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void waitForContainerCompletion(int numIterations, AMRMClientImpl<ContainerRequest> amClient, Set<ContainerId> releases) throws YarnException, IOException\n{\r\n    while (!releases.isEmpty() || numIterations-- > 0) {\r\n        AllocateResponse allocResponse = amClient.allocate(0.1f);\r\n        assertEquals(0, allocResponse.getAllocatedContainers().size());\r\n        if (allocResponse.getCompletedContainersStatuses().size() > 0) {\r\n            for (ContainerStatus cStatus : allocResponse.getCompletedContainersStatuses()) {\r\n                if (releases.contains(cStatus.getContainerId())) {\r\n                    assertThat(cStatus.getState()).isEqualTo(ContainerState.COMPLETE);\r\n                    assertEquals(-100, cStatus.getExitStatus());\r\n                    releases.remove(cStatus.getContainerId());\r\n                }\r\n            }\r\n        }\r\n        if (numIterations > 0) {\r\n            triggerSchedulingWithNMHeartBeat();\r\n        }\r\n    }\r\n    assertEquals(0, amClient.ask.size());\r\n    assertEquals(0, amClient.release.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testAllocRequestId",
  "errType" : null,
  "containingMethodsNum" : 32,
  "sourceCodeText" : "void testAllocRequestId(final AMRMClientImpl<ContainerRequest> amClient) throws YarnException, IOException\n{\r\n    assertEquals(0, amClient.ask.size());\r\n    assertEquals(0, amClient.release.size());\r\n    amClient.addContainerRequest(new ContainerRequest(capability, nodes, racks, priority));\r\n    amClient.addContainerRequest(new ContainerRequest(capability, nodes, racks, priority));\r\n    amClient.addContainerRequest(new ContainerRequest(capability, nodes, racks, priority, 1));\r\n    amClient.addContainerRequest(new ContainerRequest(capability, nodes, racks, priority, 1));\r\n    amClient.addContainerRequest(new ContainerRequest(capability, nodes, racks, priority, 2));\r\n    amClient.addContainerRequest(new ContainerRequest(capability, nodes, racks, priority, 2));\r\n    amClient.removeContainerRequest(new ContainerRequest(capability, nodes, racks, priority));\r\n    amClient.removeContainerRequest(new ContainerRequest(capability, nodes, racks, priority, 1));\r\n    amClient.removeContainerRequest(new ContainerRequest(capability, nodes, racks, priority, 2));\r\n    assertNumContainers(amClient, 0, 1, 1, 1, 9, 0);\r\n    assertNumContainers(amClient, 1, 1, 1, 1, 9, 0);\r\n    assertNumContainers(amClient, 2, 1, 1, 1, 9, 0);\r\n    int containersRequestedAny = 3;\r\n    List<Container> allocatedContainers = new ArrayList<>();\r\n    int iterationsLeft = 5;\r\n    Set<ContainerId> releases = new TreeSet<ContainerId>();\r\n    while (allocatedContainers.size() < containersRequestedAny && iterationsLeft-- > 0) {\r\n        AllocateResponse allocResponse = amClient.allocate(0.1f);\r\n        assertEquals(0, amClient.ask.size());\r\n        assertEquals(0, amClient.release.size());\r\n        allocatedContainers.addAll(allocResponse.getAllocatedContainers());\r\n        for (Container container : allocResponse.getAllocatedContainers()) {\r\n            ContainerId rejectContainerId = container.getId();\r\n            releases.add(rejectContainerId);\r\n            amClient.releaseAssignedContainer(rejectContainerId);\r\n        }\r\n        if (allocatedContainers.size() < containersRequestedAny) {\r\n            triggerSchedulingWithNMHeartBeat();\r\n        }\r\n    }\r\n    assertEquals(containersRequestedAny, allocatedContainers.size());\r\n    Set<Long> expAllocIds = new HashSet<>(Arrays.asList(Long.valueOf(0), Long.valueOf(1), Long.valueOf(2)));\r\n    Set<Long> actAllocIds = new HashSet<>();\r\n    for (Container ac : allocatedContainers) {\r\n        actAllocIds.add(Long.valueOf(ac.getAllocationRequestId()));\r\n    }\r\n    assertEquals(expAllocIds, actAllocIds);\r\n    assertEquals(3, amClient.release.size());\r\n    assertEquals(0, amClient.ask.size());\r\n    waitForContainerCompletion(3, amClient, releases);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "assertNumContainers",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void assertNumContainers(AMRMClientImpl<ContainerRequest> amClient, long allocationReqId, int expNode, int expRack, int expAny, int expAsks, int expRelease)\n{\r\n    RemoteRequestsTable<ContainerRequest> remoteRequestsTable = amClient.getTable(allocationReqId);\r\n    int containersRequestedNode = remoteRequestsTable.get(priority, node, ExecutionType.GUARANTEED, capability).remoteRequest.getNumContainers();\r\n    int containersRequestedRack = remoteRequestsTable.get(priority, rack, ExecutionType.GUARANTEED, capability).remoteRequest.getNumContainers();\r\n    int containersRequestedAny = remoteRequestsTable.get(priority, ResourceRequest.ANY, ExecutionType.GUARANTEED, capability).remoteRequest.getNumContainers();\r\n    assertEquals(expNode, containersRequestedNode);\r\n    assertEquals(expRack, containersRequestedRack);\r\n    assertEquals(expAny, containersRequestedAny);\r\n    assertEquals(expAsks, amClient.ask.size());\r\n    assertEquals(expRelease, amClient.release.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testWaitFor",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testWaitFor() throws InterruptedException\n{\r\n    AMRMClientImpl<ContainerRequest> amClient = null;\r\n    CountDownSupplier countDownChecker = new CountDownSupplier();\r\n    try {\r\n        amClient = (AMRMClientImpl<ContainerRequest>) AMRMClient.<ContainerRequest>createAMRMClient();\r\n        amClient.init(new YarnConfiguration());\r\n        amClient.start();\r\n        amClient.waitFor(countDownChecker, 1000);\r\n        assertEquals(3, countDownChecker.counter);\r\n    } finally {\r\n        if (amClient != null) {\r\n            amClient.stop();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "sleep",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void sleep(int sleepTime)\n{\r\n    try {\r\n        Thread.sleep(sleepTime);\r\n    } catch (InterruptedException e) {\r\n        e.printStackTrace();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testAMRMClientOnAMRMTokenRollOver",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 46,
  "sourceCodeText" : "void testAMRMClientOnAMRMTokenRollOver() throws YarnException, IOException\n{\r\n    AMRMClient<ContainerRequest> amClient = null;\r\n    try {\r\n        AMRMTokenSecretManager amrmTokenSecretManager = yarnCluster.getResourceManager().getRMContext().getAMRMTokenSecretManager();\r\n        amClient = AMRMClient.<ContainerRequest>createAMRMClient();\r\n        amClient.init(conf);\r\n        amClient.start();\r\n        Long startTime = System.currentTimeMillis();\r\n        amClient.registerApplicationMaster(\"Host\", 10000, \"\");\r\n        org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> amrmToken_1 = getAMRMToken();\r\n        Assert.assertNotNull(amrmToken_1);\r\n        assertEquals(amrmToken_1.decodeIdentifier().getKeyId(), amrmTokenSecretManager.getMasterKey().getMasterKey().getKeyId());\r\n        while (System.currentTimeMillis() - startTime < rollingIntervalSec * 1000) {\r\n            amClient.allocate(0.1f);\r\n            sleep(1000);\r\n        }\r\n        amClient.allocate(0.1f);\r\n        org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> amrmToken_2 = getAMRMToken();\r\n        Assert.assertNotNull(amrmToken_2);\r\n        assertEquals(amrmToken_2.decodeIdentifier().getKeyId(), amrmTokenSecretManager.getMasterKey().getMasterKey().getKeyId());\r\n        Assert.assertNotEquals(amrmToken_1, amrmToken_2);\r\n        AllocateResponse response = amClient.allocate(0.1f);\r\n        UserGroupInformation testUser1 = UserGroupInformation.createRemoteUser(\"testUser1\");\r\n        AMRMTokenIdentifierForTest newVersionTokenIdentifier = new AMRMTokenIdentifierForTest(amrmToken_2.decodeIdentifier(), \"message\");\r\n        assertEquals(\"Message is changed after set to newVersionTokenIdentifier\", \"message\", newVersionTokenIdentifier.getMessage());\r\n        org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> newVersionToken = new org.apache.hadoop.security.token.Token<AMRMTokenIdentifier>(newVersionTokenIdentifier.getBytes(), amrmTokenSecretManager.retrievePassword(newVersionTokenIdentifier), newVersionTokenIdentifier.getKind(), new Text());\r\n        SecurityUtil.setTokenService(newVersionToken, yarnCluster.getResourceManager().getApplicationMasterService().getBindAddress());\r\n        testUser1.addToken(newVersionToken);\r\n        AllocateRequest request = Records.newRecord(AllocateRequest.class);\r\n        request.setResponseId(response.getResponseId());\r\n        testUser1.doAs(new PrivilegedAction<ApplicationMasterProtocol>() {\r\n\r\n            @Override\r\n            public ApplicationMasterProtocol run() {\r\n                return (ApplicationMasterProtocol) YarnRPC.create(conf).getProxy(ApplicationMasterProtocol.class, yarnCluster.getResourceManager().getApplicationMasterService().getBindAddress(), conf);\r\n            }\r\n        }).allocate(request);\r\n        while (true) {\r\n            if (amrmToken_2.decodeIdentifier().getKeyId() != amrmTokenSecretManager.getCurrnetMasterKeyData().getMasterKey().getKeyId()) {\r\n                if (amrmTokenSecretManager.getNextMasterKeyData() == null) {\r\n                    break;\r\n                } else if (amrmToken_2.decodeIdentifier().getKeyId() != amrmTokenSecretManager.getNextMasterKeyData().getMasterKey().getKeyId()) {\r\n                    break;\r\n                }\r\n            }\r\n            amClient.allocate(0.1f);\r\n            sleep(1000);\r\n        }\r\n        try {\r\n            UserGroupInformation testUser2 = UserGroupInformation.createRemoteUser(\"testUser2\");\r\n            SecurityUtil.setTokenService(amrmToken_2, yarnCluster.getResourceManager().getApplicationMasterService().getBindAddress());\r\n            testUser2.addToken(amrmToken_2);\r\n            testUser2.doAs(new PrivilegedAction<ApplicationMasterProtocol>() {\r\n\r\n                @Override\r\n                public ApplicationMasterProtocol run() {\r\n                    return (ApplicationMasterProtocol) YarnRPC.create(conf).getProxy(ApplicationMasterProtocol.class, yarnCluster.getResourceManager().getApplicationMasterService().getBindAddress(), conf);\r\n                }\r\n            }).allocate(Records.newRecord(AllocateRequest.class));\r\n            fail(\"The old Token should not work\");\r\n        } catch (Exception ex) {\r\n            assertTrue(ex instanceof InvalidToken);\r\n            assertTrue(ex.getMessage().contains(\"Invalid AMRMToken from \" + amrmToken_2.decodeIdentifier().getApplicationAttemptId()));\r\n        }\r\n        amClient.unregisterApplicationMaster(FinalApplicationStatus.SUCCEEDED, null, null);\r\n    } finally {\r\n        if (amClient != null && amClient.getServiceState() == STATE.STARTED) {\r\n            amClient.stop();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getAMRMToken",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> getAMRMToken() throws IOException\n{\r\n    Credentials credentials = UserGroupInformation.getCurrentUser().getCredentials();\r\n    Iterator<org.apache.hadoop.security.token.Token<?>> iter = credentials.getAllTokens().iterator();\r\n    org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> result = null;\r\n    while (iter.hasNext()) {\r\n        org.apache.hadoop.security.token.Token<?> token = iter.next();\r\n        if (token.getKind().equals(AMRMTokenIdentifier.KIND_NAME)) {\r\n            if (result != null) {\r\n                fail(\"credentials has more than one AMRM token.\" + \" token1: \" + result + \" token2: \" + token);\r\n            }\r\n            result = (org.apache.hadoop.security.token.Token<AMRMTokenIdentifier>) token;\r\n        }\r\n    }\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testGetMatchingFitWithProfiles",
  "errType" : null,
  "containingMethodsNum" : 40,
  "sourceCodeText" : "void testGetMatchingFitWithProfiles() throws Exception\n{\r\n    teardown();\r\n    conf.setBoolean(YarnConfiguration.RM_RESOURCE_PROFILES_ENABLED, true);\r\n    createClusterAndStartApplication(conf);\r\n    AMRMClient<ContainerRequest> amClient = null;\r\n    try {\r\n        amClient = AMRMClient.<ContainerRequest>createAMRMClient();\r\n        amClient.init(conf);\r\n        amClient.start();\r\n        amClient.registerApplicationMaster(\"Host\", 10000, \"\");\r\n        ContainerRequest storedContainer1 = new ContainerRequest(Resource.newInstance(0, 0), nodes, racks, priority, \"minimum\");\r\n        ContainerRequest storedContainer2 = new ContainerRequest(Resource.newInstance(0, 0), nodes, racks, priority, \"default\");\r\n        ContainerRequest storedContainer3 = new ContainerRequest(Resource.newInstance(0, 0), nodes, racks, priority, \"maximum\");\r\n        ContainerRequest storedContainer4 = new ContainerRequest(Resource.newInstance(2048, 1), nodes, racks, priority, \"minimum\");\r\n        ContainerRequest storedContainer5 = new ContainerRequest(Resource.newInstance(2048, 1), nodes, racks, priority2, \"default\");\r\n        ContainerRequest storedContainer6 = new ContainerRequest(Resource.newInstance(2048, 1), nodes, racks, priority, \"default\");\r\n        ContainerRequest storedContainer7 = new ContainerRequest(Resource.newInstance(0, 0), nodes, racks, priority, \"http\");\r\n        amClient.addContainerRequest(storedContainer1);\r\n        amClient.addContainerRequest(storedContainer2);\r\n        amClient.addContainerRequest(storedContainer3);\r\n        amClient.addContainerRequest(storedContainer4);\r\n        amClient.addContainerRequest(storedContainer5);\r\n        amClient.addContainerRequest(storedContainer6);\r\n        amClient.addContainerRequest(storedContainer7);\r\n        List<? extends Collection<ContainerRequest>> matches;\r\n        ContainerRequest storedRequest;\r\n        matches = amClient.getMatchingRequests(priority, node, ExecutionType.GUARANTEED, Resource.newInstance(0, 0), \"minimum\");\r\n        verifyMatches(matches, 1);\r\n        storedRequest = matches.get(0).iterator().next();\r\n        assertEquals(storedContainer1, storedRequest);\r\n        amClient.removeContainerRequest(storedContainer1);\r\n        matches = amClient.getMatchingRequests(priority, node, ExecutionType.GUARANTEED, Resource.newInstance(0, 0), \"default\");\r\n        verifyMatches(matches, 2);\r\n        int i = 0;\r\n        for (ContainerRequest storedRequest1 : matches.get(0)) {\r\n            switch(i) {\r\n                case 0:\r\n                    assertEquals(storedContainer2, storedRequest1);\r\n                    break;\r\n                case 1:\r\n                    assertEquals(storedContainer7, storedRequest1);\r\n                    break;\r\n            }\r\n            i++;\r\n        }\r\n        amClient.removeContainerRequest(storedContainer5);\r\n        Resource testCapability3 = Resource.newInstance(8192, 8);\r\n        matches = amClient.getMatchingRequests(priority, node, testCapability3);\r\n        assertEquals(3, matches.size());\r\n        Resource testCapability4 = Resource.newInstance(2048, 1);\r\n        matches = amClient.getMatchingRequests(priority, node, testCapability4);\r\n        assertEquals(1, matches.size());\r\n    } finally {\r\n        if (amClient != null && amClient.getServiceState() == STATE.STARTED) {\r\n            amClient.stop();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testNoUpdateTrackingUrl",
  "errType" : [ "IOException|YarnException" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testNoUpdateTrackingUrl()\n{\r\n    try {\r\n        AMRMClientImpl<ContainerRequest> amClient = null;\r\n        amClient = new AMRMClientImpl<>();\r\n        amClient.init(conf);\r\n        amClient.start();\r\n        amClient.registerApplicationMaster(\"Host\", 10000, \"\");\r\n        assertEquals(\"\", amClient.appTrackingUrl);\r\n        ApplicationMasterProtocol mockRM = mock(ApplicationMasterProtocol.class);\r\n        AllocateResponse mockResponse = mock(AllocateResponse.class);\r\n        when(mockRM.allocate(any(AllocateRequest.class))).thenReturn(mockResponse);\r\n        ApplicationMasterProtocol realRM = amClient.rmClient;\r\n        amClient.rmClient = mockRM;\r\n        amClient.allocate(0.1f);\r\n        ArgumentCaptor<AllocateRequest> argument = ArgumentCaptor.forClass(AllocateRequest.class);\r\n        verify(mockRM).allocate(argument.capture());\r\n        assertNull(argument.getValue().getTrackingUrl());\r\n        amClient.rmClient = realRM;\r\n        amClient.unregisterApplicationMaster(FinalApplicationStatus.SUCCEEDED, null, null);\r\n    } catch (IOException | YarnException e) {\r\n        throw new AssertionError(\"testNoUpdateTrackingUrl unexpectedly threw exception: \" + e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testUpdateTrackingUrl",
  "errType" : [ "IOException|YarnException" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testUpdateTrackingUrl()\n{\r\n    try {\r\n        AMRMClientImpl<ContainerRequest> amClient = null;\r\n        amClient = new AMRMClientImpl<>();\r\n        amClient.init(conf);\r\n        amClient.start();\r\n        amClient.registerApplicationMaster(\"Host\", 10000, \"\");\r\n        String trackingUrl = \"hadoop.apache.org\";\r\n        assertEquals(\"\", amClient.appTrackingUrl);\r\n        ApplicationMasterProtocol mockRM = mock(ApplicationMasterProtocol.class);\r\n        AllocateResponse mockResponse = mock(AllocateResponse.class);\r\n        when(mockRM.allocate(any(AllocateRequest.class))).thenReturn(mockResponse);\r\n        ApplicationMasterProtocol realRM = amClient.rmClient;\r\n        amClient.rmClient = mockRM;\r\n        amClient.updateTrackingUrl(trackingUrl);\r\n        assertEquals(trackingUrl, amClient.newTrackingUrl);\r\n        assertEquals(\"\", amClient.appTrackingUrl);\r\n        amClient.allocate(0.1f);\r\n        assertNull(amClient.newTrackingUrl);\r\n        assertEquals(trackingUrl, amClient.appTrackingUrl);\r\n        ArgumentCaptor<AllocateRequest> argument = ArgumentCaptor.forClass(AllocateRequest.class);\r\n        verify(mockRM).allocate(argument.capture());\r\n        assertEquals(trackingUrl, argument.getValue().getTrackingUrl());\r\n        amClient.rmClient = realRM;\r\n        amClient.unregisterApplicationMaster(FinalApplicationStatus.SUCCEEDED, null, null);\r\n    } catch (IOException | YarnException e) {\r\n        throw new AssertionError(\"testUpdateTrackingUrl unexpectedly threw exception: \" + e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "teardown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void teardown()\n{\r\n    ServiceOperations.stop(asyncClient);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "testNMClientAsync",
  "errType" : null,
  "containingMethodsNum" : 31,
  "sourceCodeText" : "void testNMClientAsync() throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    conf.setInt(YarnConfiguration.NM_CLIENT_ASYNC_THREAD_POOL_MAX_SIZE, 10);\r\n    int expectedSuccess = 40;\r\n    int expectedFailure = 40;\r\n    asyncClient = new MockNMClientAsync1(expectedSuccess, expectedFailure);\r\n    asyncClient.init(conf);\r\n    Assert.assertEquals(\"The max thread pool size is not correctly set\", 10, asyncClient.maxThreadPoolSize);\r\n    asyncClient.start();\r\n    for (int i = 0; i < expectedSuccess + expectedFailure; ++i) {\r\n        if (i == expectedSuccess) {\r\n            while (!((TestCallbackHandler1) asyncClient.getCallbackHandler()).isAllSuccessCallsExecuted()) {\r\n                Thread.sleep(10);\r\n            }\r\n            asyncClient.setClient(mockNMClient(1));\r\n        }\r\n        Container container = mockContainer(i);\r\n        ContainerLaunchContext clc = recordFactory.newRecordInstance(ContainerLaunchContext.class);\r\n        asyncClient.startContainerAsync(container, clc);\r\n    }\r\n    while (!((TestCallbackHandler1) asyncClient.getCallbackHandler()).isStartAndQueryFailureCallsExecuted()) {\r\n        Thread.sleep(10);\r\n    }\r\n    asyncClient.setClient(mockNMClient(2));\r\n    ((TestCallbackHandler1) asyncClient.getCallbackHandler()).path = false;\r\n    for (int i = 0; i < expectedFailure; ++i) {\r\n        Container container = mockContainer(expectedSuccess + expectedFailure + i);\r\n        ContainerLaunchContext clc = recordFactory.newRecordInstance(ContainerLaunchContext.class);\r\n        asyncClient.startContainerAsync(container, clc);\r\n    }\r\n    while (!((TestCallbackHandler1) asyncClient.getCallbackHandler()).isIncreaseResourceFailureCallsExecuted()) {\r\n        Thread.sleep(10);\r\n    }\r\n    while (!((TestCallbackHandler1) asyncClient.getCallbackHandler()).isStopFailureCallsExecuted()) {\r\n        Thread.sleep(10);\r\n    }\r\n    for (String errorMsg : ((TestCallbackHandler1) asyncClient.getCallbackHandler()).errorMsgs) {\r\n        System.out.println(errorMsg);\r\n    }\r\n    Assert.assertEquals(\"Error occurs in CallbackHandler\", 0, ((TestCallbackHandler1) asyncClient.getCallbackHandler()).errorMsgs.size());\r\n    for (String errorMsg : ((MockNMClientAsync1) asyncClient).errorMsgs) {\r\n        System.out.println(errorMsg);\r\n    }\r\n    Assert.assertEquals(\"Error occurs in ContainerEventProcessor\", 0, ((MockNMClientAsync1) asyncClient).errorMsgs.size());\r\n    while (asyncClient.containers.size() > 0) {\r\n        Thread.sleep(10);\r\n    }\r\n    asyncClient.stop();\r\n    Assert.assertFalse(\"The thread of Container Management Event Dispatcher is still alive\", asyncClient.eventDispatcherThread.isAlive());\r\n    Assert.assertTrue(\"The thread pool is not shut down\", asyncClient.threadPool.isShutdown());\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "mockNMClient",
  "errType" : null,
  "containingMethodsNum" : 21,
  "sourceCodeText" : "NMClient mockNMClient(int mode) throws YarnException, IOException\n{\r\n    NMClient client = mock(NMClient.class);\r\n    switch(mode) {\r\n        case 0:\r\n            when(client.startContainer(any(Container.class), any(ContainerLaunchContext.class))).thenReturn(Collections.<String, ByteBuffer>emptyMap());\r\n            when(client.getContainerStatus(any(ContainerId.class), any(NodeId.class))).thenReturn(recordFactory.newRecordInstance(ContainerStatus.class));\r\n            doNothing().when(client).updateContainerResource(any(Container.class));\r\n            doNothing().when(client).reInitializeContainer(any(ContainerId.class), any(ContainerLaunchContext.class), anyBoolean());\r\n            doNothing().when(client).restartContainer(any(ContainerId.class));\r\n            doNothing().when(client).rollbackLastReInitialization(any(ContainerId.class));\r\n            doNothing().when(client).commitLastReInitialization(any(ContainerId.class));\r\n            doNothing().when(client).stopContainer(any(ContainerId.class), any(NodeId.class));\r\n            break;\r\n        case 1:\r\n            doThrow(RPCUtil.getRemoteException(\"Start Exception\")).when(client).startContainer(any(Container.class), any(ContainerLaunchContext.class));\r\n            doThrow(RPCUtil.getRemoteException(\"Query Exception\")).when(client).getContainerStatus(any(ContainerId.class), any(NodeId.class));\r\n            doThrow(RPCUtil.getRemoteException(\"Stop Exception\")).when(client).stopContainer(any(ContainerId.class), any(NodeId.class));\r\n            break;\r\n        case 2:\r\n            when(client.startContainer(any(Container.class), any(ContainerLaunchContext.class))).thenReturn(Collections.<String, ByteBuffer>emptyMap());\r\n            when(client.getContainerStatus(any(ContainerId.class), any(NodeId.class))).thenReturn(recordFactory.newRecordInstance(ContainerStatus.class));\r\n            doThrow(RPCUtil.getRemoteException(\"Increase Resource Exception\")).when(client).updateContainerResource(any(Container.class));\r\n            doThrow(RPCUtil.getRemoteException(\"ReInitialize Exception\")).when(client).reInitializeContainer(any(ContainerId.class), any(ContainerLaunchContext.class), anyBoolean());\r\n            doThrow(RPCUtil.getRemoteException(\"Restart Exception\")).when(client).restartContainer(any(ContainerId.class));\r\n            doThrow(RPCUtil.getRemoteException(\"Rollback upgrade Exception\")).when(client).rollbackLastReInitialization(any(ContainerId.class));\r\n            doThrow(RPCUtil.getRemoteException(\"Commit upgrade Exception\")).when(client).commitLastReInitialization(any(ContainerId.class));\r\n            doThrow(RPCUtil.getRemoteException(\"Stop Exception\")).when(client).stopContainer(any(ContainerId.class), any(NodeId.class));\r\n    }\r\n    when(client.getNodeIdOfStartedContainer(any(ContainerId.class))).thenReturn(NodeId.newInstance(\"localhost\", 0));\r\n    return client;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "testOutOfOrder",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testOutOfOrder() throws Exception\n{\r\n    CyclicBarrier barrierA = new CyclicBarrier(2);\r\n    CyclicBarrier barrierB = new CyclicBarrier(2);\r\n    CyclicBarrier barrierC = new CyclicBarrier(2);\r\n    asyncClient = new MockNMClientAsync2(barrierA, barrierB, barrierC);\r\n    asyncClient.init(new Configuration());\r\n    asyncClient.start();\r\n    final Container container = mockContainer(1);\r\n    final ContainerLaunchContext clc = recordFactory.newRecordInstance(ContainerLaunchContext.class);\r\n    Thread t = new Thread() {\r\n\r\n        @Override\r\n        public void run() {\r\n            asyncClient.startContainerAsync(container, clc);\r\n        }\r\n    };\r\n    t.start();\r\n    barrierA.await();\r\n    asyncClient.stopContainerAsync(container.getId(), container.getNodeId());\r\n    barrierC.await();\r\n    Assert.assertFalse(\"Starting and stopping should be out of order\", ((TestCallbackHandler2) asyncClient.getCallbackHandler()).exceptionOccurred.get());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "mockContainer",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "Container mockContainer(int i)\n{\r\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId containerId = ContainerId.newContainerId(attemptId, i);\r\n    nodeId = NodeId.newInstance(\"localhost\", 0);\r\n    containerToken = recordFactory.newRecordInstance(Token.class);\r\n    return Container.newInstance(containerId, nodeId, null, null, null, containerToken);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    ResourceUtils.resetResourceTypes();\r\n    Configuration yarnConf = new YarnConfiguration();\r\n    String resourceTypesFile = \"resource-types-4.xml\";\r\n    InputStream source = yarnConf.getClassLoader().getResourceAsStream(resourceTypesFile);\r\n    dest = new File(yarnConf.getClassLoader().getResource(\".\").getPath(), \"resource-types.xml\");\r\n    FileUtils.copyInputStreamToFile(source, dest);\r\n    ResourceUtils.getResourceTypes();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "teardown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void teardown()\n{\r\n    if (dest.exists()) {\r\n        dest.delete();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "configure",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void configure() throws IOException, YarnException\n{\r\n    remoteAdminServiceAccessed = false;\r\n    admin = mock(ResourceManagerAdministrationProtocol.class);\r\n    when(admin.addToClusterNodeLabels(any(AddToClusterNodeLabelsRequest.class))).thenAnswer(new Answer<AddToClusterNodeLabelsResponse>() {\r\n\r\n        @Override\r\n        public AddToClusterNodeLabelsResponse answer(InvocationOnMock invocation) throws Throwable {\r\n            remoteAdminServiceAccessed = true;\r\n            return AddToClusterNodeLabelsResponse.newInstance();\r\n        }\r\n    });\r\n    haadmin = mock(HAServiceProtocol.class);\r\n    when(haadmin.getServiceStatus()).thenReturn(new HAServiceStatus(HAServiceProtocol.HAServiceState.INITIALIZING));\r\n    final HAServiceTarget haServiceTarget = mock(HAServiceTarget.class);\r\n    when(haServiceTarget.getProxy(any(Configuration.class), anyInt())).thenReturn(haadmin);\r\n    rmAdminCLI = new RMAdminCLI(new Configuration()) {\r\n\r\n        @Override\r\n        protected ResourceManagerAdministrationProtocol createAdminProtocol() throws IOException {\r\n            return admin;\r\n        }\r\n\r\n        @Override\r\n        protected HAServiceTarget resolveTarget(String rmId) {\r\n            return haServiceTarget;\r\n        }\r\n    };\r\n    initDummyNodeLabelsManager();\r\n    rmAdminCLI.localNodeLabelsManager = dummyNodeLabelsManager;\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, true);\r\n    conf.set(YarnConfiguration.RM_HA_IDS, \"rm1,rm2\");\r\n    conf.set(HAUtil.addSuffix(YarnConfiguration.RM_ADDRESS, \"rm1\"), HOST_A + \":12345\");\r\n    conf.set(HAUtil.addSuffix(YarnConfiguration.RM_ADMIN_ADDRESS, \"rm1\"), HOST_A + \":12346\");\r\n    conf.set(HAUtil.addSuffix(YarnConfiguration.RM_ADDRESS, \"rm2\"), HOST_B + \":12345\");\r\n    conf.set(HAUtil.addSuffix(YarnConfiguration.RM_ADMIN_ADDRESS, \"rm2\"), HOST_B + \":12346\");\r\n    rmAdminCLIWithHAEnabled = new RMAdminCLI(conf) {\r\n\r\n        @Override\r\n        protected ResourceManagerAdministrationProtocol createAdminProtocol() throws IOException {\r\n            return admin;\r\n        }\r\n\r\n        @Override\r\n        protected HAServiceTarget resolveTarget(String rmId) {\r\n            HAServiceTarget target = super.resolveTarget(rmId);\r\n            HAServiceTarget spy = Mockito.spy(target);\r\n            try {\r\n                Mockito.doReturn(haadmin).when(spy).getProxy(Mockito.<Configuration>any(), Mockito.anyInt());\r\n                Mockito.doReturn(false).when(spy).isAutoFailoverEnabled();\r\n            } catch (IOException e) {\r\n                throw new AssertionError(e);\r\n            }\r\n            return spy;\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "initDummyNodeLabelsManager",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void initDummyNodeLabelsManager()\n{\r\n    Configuration conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.NODE_LABELS_ENABLED, true);\r\n    dummyNodeLabelsManager = new DummyCommonNodeLabelsManager() {\r\n\r\n        @Override\r\n        public void replaceLabelsOnNode(Map<NodeId, Set<String>> replaceLabelsToNode) throws IOException {\r\n            Iterator<NodeId> iterator = replaceLabelsToNode.keySet().iterator();\r\n            while (iterator.hasNext()) {\r\n                NodeId nodeId = iterator.next();\r\n                if (nodeId.getHost().endsWith(\"=\")) {\r\n                    throw new IOException(\"Parsing of Input String failed\");\r\n                }\r\n            }\r\n            super.replaceLabelsOnNode(replaceLabelsToNode);\r\n        }\r\n    };\r\n    dummyNodeLabelsManager.init(conf);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testRefreshQueues",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testRefreshQueues() throws Exception\n{\r\n    String[] args = { \"-refreshQueues\" };\r\n    assertEquals(0, rmAdminCLI.run(args));\r\n    verify(admin).refreshQueues(any(RefreshQueuesRequest.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testRefreshUserToGroupsMappings",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testRefreshUserToGroupsMappings() throws Exception\n{\r\n    String[] args = { \"-refreshUserToGroupsMappings\" };\r\n    assertEquals(0, rmAdminCLI.run(args));\r\n    verify(admin).refreshUserToGroupsMappings(any(RefreshUserToGroupsMappingsRequest.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testRefreshSuperUserGroupsConfiguration",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testRefreshSuperUserGroupsConfiguration() throws Exception\n{\r\n    String[] args = { \"-refreshSuperUserGroupsConfiguration\" };\r\n    assertEquals(0, rmAdminCLI.run(args));\r\n    verify(admin).refreshSuperUserGroupsConfiguration(any(RefreshSuperUserGroupsConfigurationRequest.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testRefreshAdminAcls",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testRefreshAdminAcls() throws Exception\n{\r\n    String[] args = { \"-refreshAdminAcls\" };\r\n    assertEquals(0, rmAdminCLI.run(args));\r\n    verify(admin).refreshAdminAcls(any(RefreshAdminAclsRequest.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testRefreshClusterMaxPriority",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testRefreshClusterMaxPriority() throws Exception\n{\r\n    String[] args = { \"-refreshClusterMaxPriority\" };\r\n    assertEquals(0, rmAdminCLI.run(args));\r\n    verify(admin).refreshClusterMaxPriority(any(RefreshClusterMaxPriorityRequest.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testRefreshServiceAcl",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testRefreshServiceAcl() throws Exception\n{\r\n    String[] args = { \"-refreshServiceAcl\" };\r\n    assertEquals(0, rmAdminCLI.run(args));\r\n    verify(admin).refreshServiceAcls(any(RefreshServiceAclsRequest.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testUpdateNodeResource",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testUpdateNodeResource() throws Exception\n{\r\n    String nodeIdStr = \"0.0.0.0:0\";\r\n    int memSize = 2048;\r\n    int cores = 2;\r\n    String[] args = { \"-updateNodeResource\", nodeIdStr, Integer.toString(memSize), Integer.toString(cores) };\r\n    assertEquals(0, rmAdminCLI.run(args));\r\n    ArgumentCaptor<UpdateNodeResourceRequest> argument = ArgumentCaptor.forClass(UpdateNodeResourceRequest.class);\r\n    verify(admin).updateNodeResource(argument.capture());\r\n    UpdateNodeResourceRequest request = argument.getValue();\r\n    Map<NodeId, ResourceOption> resourceMap = request.getNodeResourceMap();\r\n    NodeId nodeId = NodeId.fromString(nodeIdStr);\r\n    Resource expectedResource = Resources.createResource(memSize, cores);\r\n    ResourceOption resource = resourceMap.get(nodeId);\r\n    assertNotNull(\"resource for \" + nodeIdStr + \" shouldn't be null.\", resource);\r\n    assertEquals(\"resource value for \" + nodeIdStr + \" is not as expected.\", ResourceOption.newInstance(expectedResource, ResourceOption.OVER_COMMIT_TIMEOUT_MILLIS_DEFAULT), resource);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testUpdateNodeResourceWithOverCommitTimeout",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testUpdateNodeResourceWithOverCommitTimeout() throws Exception\n{\r\n    String nodeIdStr = \"0.0.0.0:0\";\r\n    int memSize = 2048;\r\n    int cores = 2;\r\n    int timeout = 1000;\r\n    String[] args = { \"-updateNodeResource\", nodeIdStr, Integer.toString(memSize), Integer.toString(cores), Integer.toString(timeout) };\r\n    assertEquals(0, rmAdminCLI.run(args));\r\n    ArgumentCaptor<UpdateNodeResourceRequest> argument = ArgumentCaptor.forClass(UpdateNodeResourceRequest.class);\r\n    verify(admin).updateNodeResource(argument.capture());\r\n    UpdateNodeResourceRequest request = argument.getValue();\r\n    Map<NodeId, ResourceOption> resourceMap = request.getNodeResourceMap();\r\n    NodeId nodeId = NodeId.fromString(nodeIdStr);\r\n    Resource expectedResource = Resources.createResource(memSize, cores);\r\n    ResourceOption resource = resourceMap.get(nodeId);\r\n    assertNotNull(\"resource for \" + nodeIdStr + \" shouldn't be null.\", resource);\r\n    assertEquals(\"resource value for \" + nodeIdStr + \" is not as expected.\", ResourceOption.newInstance(expectedResource, timeout), resource);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testUpdateNodeResourceWithInvalidValue",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testUpdateNodeResourceWithInvalidValue() throws Exception\n{\r\n    String nodeIdStr = \"0.0.0.0:0\";\r\n    int memSize = -2048;\r\n    int cores = 2;\r\n    String[] args = { \"-updateNodeResource\", nodeIdStr, Integer.toString(memSize), Integer.toString(cores) };\r\n    assertEquals(-1, rmAdminCLI.run(args));\r\n    verify(admin, times(0)).updateNodeResource(any(UpdateNodeResourceRequest.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testUpdateNodeResourceTypes",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testUpdateNodeResourceTypes() throws Exception\n{\r\n    String nodeIdStr = \"0.0.0.0:0\";\r\n    String resourceTypes = \"memory-mb=1Gi,vcores=1,resource1=3Gi,resource2=2m\";\r\n    String[] args = { \"-updateNodeResource\", nodeIdStr, resourceTypes };\r\n    assertEquals(0, rmAdminCLI.run(args));\r\n    ArgumentCaptor<UpdateNodeResourceRequest> argument = ArgumentCaptor.forClass(UpdateNodeResourceRequest.class);\r\n    verify(admin).updateNodeResource(argument.capture());\r\n    UpdateNodeResourceRequest request = argument.getValue();\r\n    Map<NodeId, ResourceOption> resourceMap = request.getNodeResourceMap();\r\n    NodeId nodeId = NodeId.fromString(nodeIdStr);\r\n    Resource expectedResource = Resource.newInstance(1024, 1);\r\n    expectedResource.setResourceInformation(\"resource1\", ResourceInformation.newInstance(\"resource1\", \"Gi\", 3));\r\n    expectedResource.setResourceInformation(\"resource2\", ResourceInformation.newInstance(\"resource2\", \"m\", 2));\r\n    ResourceOption resource = resourceMap.get(nodeId);\r\n    assertEquals(1024, resource.getResource().getResourceInformation(\"memory-mb\").getValue());\r\n    assertEquals(\"Mi\", resource.getResource().getResourceInformation(\"memory-mb\").getUnits());\r\n    assertNotNull(\"resource for \" + nodeIdStr + \" shouldn't be null.\", resource);\r\n    assertEquals(\"resource value for \" + nodeIdStr + \" is not as expected.\", ResourceOption.newInstance(expectedResource, ResourceOption.OVER_COMMIT_TIMEOUT_MILLIS_DEFAULT), resource);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testUpdateNodeResourceTypesWithOverCommitTimeout",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testUpdateNodeResourceTypesWithOverCommitTimeout() throws Exception\n{\r\n    String nodeIdStr = \"0.0.0.0:0\";\r\n    String resourceTypes = \"memory-mb=1024Mi,vcores=1,resource1=3Gi,resource2=2m\";\r\n    int timeout = 1000;\r\n    String[] args = { \"-updateNodeResource\", nodeIdStr, resourceTypes, Integer.toString(timeout) };\r\n    assertEquals(0, rmAdminCLI.run(args));\r\n    ArgumentCaptor<UpdateNodeResourceRequest> argument = ArgumentCaptor.forClass(UpdateNodeResourceRequest.class);\r\n    verify(admin).updateNodeResource(argument.capture());\r\n    UpdateNodeResourceRequest request = argument.getValue();\r\n    Map<NodeId, ResourceOption> resourceMap = request.getNodeResourceMap();\r\n    NodeId nodeId = NodeId.fromString(nodeIdStr);\r\n    Resource expectedResource = Resource.newInstance(1024, 1);\r\n    expectedResource.setResourceInformation(\"resource1\", ResourceInformation.newInstance(\"resource1\", \"Gi\", 3));\r\n    expectedResource.setResourceInformation(\"resource2\", ResourceInformation.newInstance(\"resource2\", \"m\", 2));\r\n    ResourceOption resource = resourceMap.get(nodeId);\r\n    assertNotNull(\"resource for \" + nodeIdStr + \" shouldn't be null.\", resource);\r\n    assertEquals(\"resource value for \" + nodeIdStr + \" is not as expected.\", ResourceOption.newInstance(expectedResource, timeout), resource);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testUpdateNodeResourceTypesWithoutMandatoryResources",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testUpdateNodeResourceTypesWithoutMandatoryResources() throws Exception\n{\r\n    String nodeIdStr = \"0.0.0.0:0\";\r\n    String resourceTypes = \"resource1=3Gi,resource2=2m\";\r\n    String[] args = { \"-updateNodeResource\", nodeIdStr, resourceTypes };\r\n    assertEquals(-1, rmAdminCLI.run(args));\r\n    verify(admin, times(0)).updateNodeResource(any(UpdateNodeResourceRequest.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testUpdateNodeResourceTypesWithInvalidResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testUpdateNodeResourceTypesWithInvalidResource() throws Exception\n{\r\n    String nodeIdStr = \"0.0.0.0:0\";\r\n    String resourceTypes = \"memory-mb=1024Mi,vcores=1,resource1=3Gi,resource3=2m\";\r\n    String[] args = { \"-updateNodeResource\", nodeIdStr, resourceTypes };\r\n    assertEquals(-1, rmAdminCLI.run(args));\r\n    verify(admin, times(0)).updateNodeResource(any(UpdateNodeResourceRequest.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testUpdateNodeResourceTypesWithInvalidResourceValue",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testUpdateNodeResourceTypesWithInvalidResourceValue() throws Exception\n{\r\n    String nodeIdStr = \"0.0.0.0:0\";\r\n    String resourceTypes = \"memory-mb=1024Mi,vcores=1,resource1=ABDC,resource2=2m\";\r\n    String[] args = { \"-updateNodeResource\", nodeIdStr, resourceTypes };\r\n    assertEquals(-1, rmAdminCLI.run(args));\r\n    verify(admin, times(0)).updateNodeResource(any(UpdateNodeResourceRequest.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testUpdateNodeResourceTypesWithInvalidResourceUnit",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testUpdateNodeResourceTypesWithInvalidResourceUnit() throws Exception\n{\r\n    String nodeIdStr = \"0.0.0.0:0\";\r\n    String resourceTypes = \"memory-mb=1024Mi,vcores=1,resource1=2XYZ,resource2=2m\";\r\n    String[] args = { \"-updateNodeResource\", nodeIdStr, resourceTypes };\r\n    assertEquals(-1, rmAdminCLI.run(args));\r\n    verify(admin, times(0)).updateNodeResource(any(UpdateNodeResourceRequest.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testUpdateNodeResourceTypesWithNonAlphaResourceUnit",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testUpdateNodeResourceTypesWithNonAlphaResourceUnit() throws Exception\n{\r\n    String nodeIdStr = \"0.0.0.0:0\";\r\n    String resourceTypes = \"memory-mb=1024M i,vcores=1,resource1=2G,resource2=2m\";\r\n    String[] args = { \"-updateNodeResource\", nodeIdStr, resourceTypes };\r\n    assertEquals(-1, rmAdminCLI.run(args));\r\n    verify(admin, times(0)).updateNodeResource(any(UpdateNodeResourceRequest.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testUpdateNodeResourceTypesWithInvalidResourceFormat",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testUpdateNodeResourceTypesWithInvalidResourceFormat() throws Exception\n{\r\n    String nodeIdStr = \"0.0.0.0:0\";\r\n    String resourceTypes = \"memory-mb=1024Mi,vcores=1,resource2\";\r\n    String[] args = { \"-updateNodeResource\", nodeIdStr, resourceTypes };\r\n    assertEquals(-1, rmAdminCLI.run(args));\r\n    verify(admin, times(0)).updateNodeResource(any(UpdateNodeResourceRequest.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testRefreshNodes",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testRefreshNodes() throws Exception\n{\r\n    String[] args = { \"-refreshNodes\" };\r\n    assertEquals(0, rmAdminCLI.run(args));\r\n    verify(admin).refreshNodes(any(RefreshNodesRequest.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testRefreshNodesGracefulBeforeTimeout",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testRefreshNodesGracefulBeforeTimeout() throws Exception\n{\r\n    String[] args = { \"-refreshNodes\", \"-g\", \"1\", \"-client\" };\r\n    CheckForDecommissioningNodesResponse response = Records.newRecord(CheckForDecommissioningNodesResponse.class);\r\n    HashSet<NodeId> decomNodes = new HashSet<NodeId>();\r\n    response.setDecommissioningNodes(decomNodes);\r\n    when(admin.checkForDecommissioningNodes(any(CheckForDecommissioningNodesRequest.class))).thenReturn(response);\r\n    assertEquals(0, rmAdminCLI.run(args));\r\n    verify(admin).refreshNodes(RefreshNodesRequest.newInstance(DecommissionType.GRACEFUL, 1));\r\n    verify(admin, never()).refreshNodes(RefreshNodesRequest.newInstance(DecommissionType.FORCEFUL));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testRefreshNodesGracefulHitTimeout",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testRefreshNodesGracefulHitTimeout() throws Exception\n{\r\n    String[] forcefulDecomArgs = { \"-refreshNodes\", \"-g\", \"1\", \"-client\" };\r\n    HashSet<NodeId> decomNodes = new HashSet<NodeId>();\r\n    CheckForDecommissioningNodesResponse response = Records.newRecord(CheckForDecommissioningNodesResponse.class);\r\n    response.setDecommissioningNodes(decomNodes);\r\n    decomNodes.add(NodeId.newInstance(\"node1\", 100));\r\n    response.setDecommissioningNodes(decomNodes);\r\n    when(admin.checkForDecommissioningNodes(any(CheckForDecommissioningNodesRequest.class))).thenReturn(response);\r\n    assertEquals(0, rmAdminCLI.run(forcefulDecomArgs));\r\n    verify(admin).refreshNodes(RefreshNodesRequest.newInstance(DecommissionType.FORCEFUL));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testRefreshNodesGracefulInfiniteTimeout",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testRefreshNodesGracefulInfiniteTimeout() throws Exception\n{\r\n    String[] infiniteTimeoutArgs = { \"-refreshNodes\", \"-g\", \"-1\", \"-client\" };\r\n    testRefreshNodesGracefulInfiniteTimeout(infiniteTimeoutArgs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testRefreshNodesGracefulNoTimeout",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testRefreshNodesGracefulNoTimeout() throws Exception\n{\r\n    String[] noTimeoutArgs = { \"-refreshNodes\", \"-g\", \"-client\" };\r\n    testRefreshNodesGracefulInfiniteTimeout(noTimeoutArgs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testRefreshNodesGracefulInfiniteTimeout",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testRefreshNodesGracefulInfiniteTimeout(String[] args) throws Exception\n{\r\n    when(admin.checkForDecommissioningNodes(any(CheckForDecommissioningNodesRequest.class))).thenAnswer(new Answer<CheckForDecommissioningNodesResponse>() {\r\n\r\n        private int count = 5;\r\n\r\n        @Override\r\n        public CheckForDecommissioningNodesResponse answer(InvocationOnMock invocationOnMock) throws Throwable {\r\n            CheckForDecommissioningNodesResponse response = Records.newRecord(CheckForDecommissioningNodesResponse.class);\r\n            HashSet<NodeId> decomNodes = new HashSet<NodeId>();\r\n            count--;\r\n            if (count <= 0) {\r\n                response.setDecommissioningNodes(decomNodes);\r\n                return response;\r\n            } else {\r\n                decomNodes.add(NodeId.newInstance(\"node1\", 100));\r\n                response.setDecommissioningNodes(decomNodes);\r\n                return response;\r\n            }\r\n        }\r\n    });\r\n    assertEquals(0, rmAdminCLI.run(args));\r\n    verify(admin, atLeastOnce()).refreshNodes(RefreshNodesRequest.newInstance(DecommissionType.GRACEFUL, -1));\r\n    verify(admin, never()).refreshNodes(RefreshNodesRequest.newInstance(DecommissionType.FORCEFUL));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testRefreshNodesGracefulInvalidArgs",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testRefreshNodesGracefulInvalidArgs() throws Exception\n{\r\n    String[] invalidArgs = { \"-refreshNodes\", \"-ginvalid\", \"invalid\", \"-client\" };\r\n    assertEquals(-1, rmAdminCLI.run(invalidArgs));\r\n    String[] invalidTimeoutArgs = { \"-refreshNodes\", \"-g\", \"invalid\", \"-client\" };\r\n    assertEquals(-1, rmAdminCLI.run(invalidTimeoutArgs));\r\n    String[] negativeTimeoutArgs = { \"-refreshNodes\", \"-g\", \"-1000\", \"-client\" };\r\n    assertEquals(-1, rmAdminCLI.run(negativeTimeoutArgs));\r\n    String[] invalidTrackingArgs = { \"-refreshNodes\", \"-g\", \"1\", \"-foo\" };\r\n    assertEquals(-1, rmAdminCLI.run(invalidTrackingArgs));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testGetGroups",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testGetGroups() throws Exception\n{\r\n    when(admin.getGroupsForUser(eq(\"admin\"))).thenReturn(new String[] { \"group1\", \"group2\" });\r\n    PrintStream origOut = System.out;\r\n    PrintStream out = mock(PrintStream.class);\r\n    System.setOut(out);\r\n    try {\r\n        String[] args = { \"-getGroups\", \"admin\" };\r\n        assertEquals(0, rmAdminCLI.run(args));\r\n        verify(admin).getGroupsForUser(eq(\"admin\"));\r\n        verify(out).println(argThat((ArgumentMatcher<StringBuilder>) arg -> (\"\" + arg).equals(\"admin : group1 group2\")));\r\n    } finally {\r\n        System.setOut(origOut);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testTransitionToActive",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testTransitionToActive() throws Exception\n{\r\n    String[] args = { \"-transitionToActive\", \"rm1\" };\r\n    assertEquals(-1, rmAdminCLI.run(args));\r\n    verify(haadmin, never()).transitionToActive(any(HAServiceProtocol.StateChangeRequestInfo.class));\r\n    assertEquals(0, rmAdminCLIWithHAEnabled.run(args));\r\n    verify(haadmin).transitionToActive(any(HAServiceProtocol.StateChangeRequestInfo.class));\r\n    verify(haadmin, times(1)).getServiceStatus();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testTransitionToStandby",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testTransitionToStandby() throws Exception\n{\r\n    String[] args = { \"-transitionToStandby\", \"rm1\" };\r\n    assertEquals(-1, rmAdminCLI.run(args));\r\n    verify(haadmin, never()).transitionToStandby(any(HAServiceProtocol.StateChangeRequestInfo.class));\r\n    assertEquals(0, rmAdminCLIWithHAEnabled.run(args));\r\n    verify(haadmin).transitionToStandby(any(HAServiceProtocol.StateChangeRequestInfo.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testGetServiceState",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetServiceState() throws Exception\n{\r\n    String[] args = { \"-getServiceState\", \"rm1\" };\r\n    assertEquals(-1, rmAdminCLI.run(args));\r\n    verify(haadmin, never()).getServiceStatus();\r\n    assertEquals(0, rmAdminCLIWithHAEnabled.run(args));\r\n    verify(haadmin).getServiceStatus();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testGetAllServiceState",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testGetAllServiceState() throws Exception\n{\r\n    HAServiceStatus standbyStatus = new HAServiceStatus(HAServiceState.STANDBY).setReadyToBecomeActive();\r\n    Mockito.doReturn(standbyStatus).when(haadmin).getServiceStatus();\r\n    ByteArrayOutputStream dataOut = new ByteArrayOutputStream();\r\n    rmAdminCLIWithHAEnabled.setOut(new PrintStream(dataOut));\r\n    String[] args = { \"-getAllServiceState\" };\r\n    assertEquals(0, rmAdminCLIWithHAEnabled.run(args));\r\n    assertTrue(dataOut.toString().contains(String.format(\"%-50s %-10s\", (HOST_A + \":\" + 12346), standbyStatus.getState())));\r\n    assertTrue(dataOut.toString().contains(String.format(\"%-50s %-10s\", (HOST_B + \":\" + 12346), standbyStatus.getState())));\r\n    rmAdminCLIWithHAEnabled.setOut(System.out);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testCheckHealth",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testCheckHealth() throws Exception\n{\r\n    String[] args = { \"-checkHealth\", \"rm1\" };\r\n    assertEquals(-1, rmAdminCLI.run(args));\r\n    verify(haadmin, never()).monitorHealth();\r\n    assertEquals(0, rmAdminCLIWithHAEnabled.run(args));\r\n    verify(haadmin).monitorHealth();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testHelp",
  "errType" : null,
  "containingMethodsNum" : 34,
  "sourceCodeText" : "void testHelp() throws Exception\n{\r\n    PrintStream oldOutPrintStream = System.out;\r\n    PrintStream oldErrPrintStream = System.err;\r\n    ByteArrayOutputStream dataOut = new ByteArrayOutputStream();\r\n    ByteArrayOutputStream dataErr = new ByteArrayOutputStream();\r\n    System.setOut(new PrintStream(dataOut));\r\n    System.setErr(new PrintStream(dataErr));\r\n    try {\r\n        String[] args = { \"-help\" };\r\n        assertEquals(0, rmAdminCLI.run(args));\r\n        oldOutPrintStream.println(dataOut);\r\n        assertTrue(dataOut.toString().contains(\"rmadmin is the command to execute YARN administrative commands.\"));\r\n        assertTrue(dataOut.toString().contains(\"yarn rmadmin [-refreshQueues] [-refreshNodes \" + \"[-g|graceful [timeout in seconds] -client|server]] \" + \"[-refreshNodesResources] [-refresh\" + \"SuperUserGroupsConfiguration] [-refreshUserToGroupsMappings] \" + \"[-refreshAdminAcls] [-refreshServiceAcl] [-getGroup \" + \"[username]] [-addToClusterNodeLabels \" + \"<\\\"label1(exclusive=true),label2(exclusive=false),label3\\\">] \" + \"[-removeFromClusterNodeLabels <label1,label2,label3>] \" + \"[-replaceLabelsOnNode \" + \"<\\\"node1[:port]=label1 node2[:port]=label2\\\"> \" + \"[-failOnUnknownNodes]] \" + \"[-directlyAccessNodeLabelStore] [-refreshClusterMaxPriority] \" + \"[-updateNodeResource [NodeID] [MemSize] [vCores] \" + \"([OvercommitTimeout]) or -updateNodeResource \" + \"[NodeID] [ResourceTypes] ([OvercommitTimeout])] \" + \"[-help [cmd]]\"));\r\n        assertTrue(dataOut.toString().contains(\"-refreshQueues: Reload the queues' acls, states and scheduler \" + \"specific properties.\"));\r\n        assertTrue(dataOut.toString().contains(\"-refreshNodes [-g|graceful [timeout in seconds]\" + \" -client|server]: \" + \"Refresh the hosts information at the ResourceManager.\"));\r\n        assertTrue(dataOut.toString().contains(\"-refreshNodesResources: Refresh resources of NodeManagers at the \" + \"ResourceManager.\"));\r\n        assertTrue(dataOut.toString().contains(\"-refreshUserToGroupsMappings: Refresh user-to-groups mappings\"));\r\n        assertTrue(dataOut.toString().contains(\"-refreshSuperUserGroupsConfiguration: Refresh superuser proxy\" + \" groups mappings\"));\r\n        assertTrue(dataOut.toString().contains(\"-refreshAdminAcls: Refresh acls for administration of \" + \"ResourceManager\"));\r\n        assertTrue(dataOut.toString().contains(\"-refreshServiceAcl: Reload the service-level authorization\" + \" policy file\"));\r\n        assertTrue(dataOut.toString().contains(\"-help [cmd]: Displays help for the given command or all \" + \"commands if none\"));\r\n        testError(new String[] { \"-help\", \"-refreshQueues\" }, \"Usage: yarn rmadmin [-refreshQueues]\", dataErr, 0);\r\n        testError(new String[] { \"-help\", \"-refreshNodes\" }, \"Usage: yarn rmadmin [-refreshNodes [-g|graceful \" + \"[timeout in seconds] -client|server]]\", dataErr, 0);\r\n        testError(new String[] { \"-help\", \"-refreshNodesResources\" }, \"Usage: yarn rmadmin [-refreshNodesResources]\", dataErr, 0);\r\n        testError(new String[] { \"-help\", \"-refreshUserToGroupsMappings\" }, \"Usage: yarn rmadmin [-refreshUserToGroupsMappings]\", dataErr, 0);\r\n        testError(new String[] { \"-help\", \"-refreshSuperUserGroupsConfiguration\" }, \"Usage: yarn rmadmin [-refreshSuperUserGroupsConfiguration]\", dataErr, 0);\r\n        testError(new String[] { \"-help\", \"-refreshAdminAcls\" }, \"Usage: yarn rmadmin [-refreshAdminAcls]\", dataErr, 0);\r\n        testError(new String[] { \"-help\", \"-refreshServiceAcl\" }, \"Usage: yarn rmadmin [-refreshServiceAcl]\", dataErr, 0);\r\n        testError(new String[] { \"-help\", \"-getGroups\" }, \"Usage: yarn rmadmin [-getGroups [username]]\", dataErr, 0);\r\n        testError(new String[] { \"-help\", \"-transitionToActive\" }, \"Usage: yarn rmadmin [-transitionToActive [--forceactive]\" + \" <serviceId>]\", dataErr, 0);\r\n        testError(new String[] { \"-help\", \"-transitionToStandby\" }, \"Usage: yarn rmadmin [-transitionToStandby <serviceId>]\", dataErr, 0);\r\n        testError(new String[] { \"-help\", \"-getServiceState\" }, \"Usage: yarn rmadmin [-getServiceState <serviceId>]\", dataErr, 0);\r\n        testError(new String[] { \"-help\", \"-checkHealth\" }, \"Usage: yarn rmadmin [-checkHealth <serviceId>]\", dataErr, 0);\r\n        testError(new String[] { \"-help\", \"-badParameter\" }, \"Usage: yarn rmadmin\", dataErr, 0);\r\n        testError(new String[] { \"-badParameter\" }, \"badParameter: Unknown command\", dataErr, -1);\r\n        assertEquals(0, rmAdminCLIWithHAEnabled.run(args));\r\n        oldOutPrintStream.println(dataOut);\r\n        String expectedHelpMsg = \"yarn rmadmin [-refreshQueues] [-refreshNodes [-g|graceful \" + \"[timeout in seconds] -client|server]] \" + \"[-refreshNodesResources] [-refreshSuperUserGroupsConfiguration] \" + \"[-refreshUserToGroupsMappings] \" + \"[-refreshAdminAcls] [-refreshServiceAcl] [-getGroup\" + \" [username]] [-addToClusterNodeLabels <\\\"label1(exclusive=true),\" + \"label2(exclusive=false),label3\\\">]\" + \" [-removeFromClusterNodeLabels <label1,label2,label3>] [-replaceLabelsOnNode \" + \"<\\\"node1[:port]=label1 node2[:port]=label2\\\"> \" + \"[-failOnUnknownNodes]] [-directlyAccessNodeLabelStore] \" + \"[-refreshClusterMaxPriority] \" + \"[-updateNodeResource [NodeID] [MemSize] [vCores] \" + \"([OvercommitTimeout]) \" + \"or -updateNodeResource [NodeID] [ResourceTypes] \" + \"([OvercommitTimeout])] \" + \"[-transitionToActive [--forceactive] <serviceId>] \" + \"[-transitionToStandby <serviceId>] \" + \"[-getServiceState <serviceId>] [-getAllServiceState] \" + \"[-checkHealth <serviceId>] [-help [cmd]]\";\r\n        String actualHelpMsg = dataOut.toString();\r\n        assertTrue(String.format(\"Help messages: %n \" + actualHelpMsg + \" %n doesn't include expected \" + \"messages: %n\" + expectedHelpMsg), actualHelpMsg.contains(expectedHelpMsg));\r\n    } finally {\r\n        System.setOut(oldOutPrintStream);\r\n        System.setErr(oldErrPrintStream);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testException",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testException() throws Exception\n{\r\n    PrintStream oldErrPrintStream = System.err;\r\n    ByteArrayOutputStream dataErr = new ByteArrayOutputStream();\r\n    System.setErr(new PrintStream(dataErr));\r\n    try {\r\n        when(admin.refreshQueues(any(RefreshQueuesRequest.class))).thenThrow(new IOException(\"test exception\"));\r\n        String[] args = { \"-refreshQueues\" };\r\n        assertEquals(-1, rmAdminCLI.run(args));\r\n        verify(admin).refreshQueues(any(RefreshQueuesRequest.class));\r\n        assertTrue(dataErr.toString().contains(\"refreshQueues: test exception\"));\r\n    } finally {\r\n        System.setErr(oldErrPrintStream);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testAccessLocalNodeLabelManager",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testAccessLocalNodeLabelManager() throws Exception\n{\r\n    assertFalse(dummyNodeLabelsManager.getServiceState() == STATE.STOPPED);\r\n    String[] args = { \"-addToClusterNodeLabels\", \"x,y\", \"-directlyAccessNodeLabelStore\" };\r\n    assertEquals(0, rmAdminCLI.run(args));\r\n    assertTrue(dummyNodeLabelsManager.getClusterNodeLabelNames().containsAll(ImmutableSet.of(\"x\", \"y\")));\r\n    dummyNodeLabelsManager.removeFromClusterNodeLabels(ImmutableSet.of(\"x\", \"y\"));\r\n    args = new String[] { \"-addToClusterNodeLabels\", \"-directlyAccessNodeLabelStore\", \"x,y\" };\r\n    assertEquals(-1, rmAdminCLI.run(args));\r\n    assertTrue(dummyNodeLabelsManager.getServiceState() == STATE.STOPPED);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testAccessRemoteNodeLabelManager",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testAccessRemoteNodeLabelManager() throws Exception\n{\r\n    String[] args = { \"-addToClusterNodeLabels\", \"x,y\" };\r\n    assertEquals(0, rmAdminCLI.run(args));\r\n    assertTrue(dummyNodeLabelsManager.getClusterNodeLabelNames().isEmpty());\r\n    assertTrue(remoteAdminServiceAccessed);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testAddToClusterNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testAddToClusterNodeLabels() throws Exception\n{\r\n    String[] args = { \"-addToClusterNodeLabels\", \"x\", \"-directlyAccessNodeLabelStore\" };\r\n    assertEquals(0, rmAdminCLI.run(args));\r\n    assertTrue(dummyNodeLabelsManager.getClusterNodeLabelNames().containsAll(ImmutableSet.of(\"x\")));\r\n    args = new String[] { \"-addToClusterNodeLabels\" };\r\n    assertTrue(0 != rmAdminCLI.run(args));\r\n    args = new String[] { \"-addToClusterNodeLabels\", \"-directlyAccessNodeLabelStore\" };\r\n    assertTrue(0 != rmAdminCLI.run(args));\r\n    args = new String[] { \"-addToClusterNodeLabels\", \" \" };\r\n    assertTrue(0 != rmAdminCLI.run(args));\r\n    args = new String[] { \"-addToClusterNodeLabels\", \" , \" };\r\n    assertTrue(0 != rmAdminCLI.run(args));\r\n    args = new String[] { \"-addToClusterNodeLabels\", \",x,,\", \"-directlyAccessNodeLabelStore\" };\r\n    assertEquals(0, rmAdminCLI.run(args));\r\n    assertTrue(dummyNodeLabelsManager.getClusterNodeLabelNames().containsAll(ImmutableSet.of(\"x\")));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testAddToClusterNodeLabelsWithExclusivitySetting",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testAddToClusterNodeLabelsWithExclusivitySetting() throws Exception\n{\r\n    String[] args = new String[] { \"-addToClusterNodeLabels\", \"x(\" };\r\n    assertTrue(0 != rmAdminCLI.run(args));\r\n    args = new String[] { \"-addToClusterNodeLabels\", \"x)\" };\r\n    assertTrue(0 != rmAdminCLI.run(args));\r\n    args = new String[] { \"-addToClusterNodeLabels\", \"x(key=value)\" };\r\n    assertTrue(0 != rmAdminCLI.run(args));\r\n    args = new String[] { \"-addToClusterNodeLabels\", \"x(exclusive=)\" };\r\n    assertTrue(0 != rmAdminCLI.run(args));\r\n    args = new String[] { \"-addToClusterNodeLabels\", \"w,x(exclusive=true), y(exclusive=false),z()\", \"-directlyAccessNodeLabelStore\" };\r\n    assertTrue(0 == rmAdminCLI.run(args));\r\n    assertTrue(dummyNodeLabelsManager.isExclusiveNodeLabel(\"w\"));\r\n    assertTrue(dummyNodeLabelsManager.isExclusiveNodeLabel(\"x\"));\r\n    assertFalse(dummyNodeLabelsManager.isExclusiveNodeLabel(\"y\"));\r\n    assertTrue(dummyNodeLabelsManager.isExclusiveNodeLabel(\"z\"));\r\n    args = new String[] { \"-addToClusterNodeLabels\", \"a (exclusive= true) , b( exclusive =false),c  \", \"-directlyAccessNodeLabelStore\" };\r\n    assertTrue(0 == rmAdminCLI.run(args));\r\n    assertTrue(dummyNodeLabelsManager.isExclusiveNodeLabel(\"a\"));\r\n    assertFalse(dummyNodeLabelsManager.isExclusiveNodeLabel(\"b\"));\r\n    assertTrue(dummyNodeLabelsManager.isExclusiveNodeLabel(\"c\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testRemoveFromClusterNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testRemoveFromClusterNodeLabels() throws Exception\n{\r\n    dummyNodeLabelsManager.addToCluserNodeLabelsWithDefaultExclusivity(ImmutableSet.of(\"x\", \"y\"));\r\n    String[] args = { \"-removeFromClusterNodeLabels\", \"x,,y\", \"-directlyAccessNodeLabelStore\" };\r\n    assertEquals(0, rmAdminCLI.run(args));\r\n    assertTrue(dummyNodeLabelsManager.getClusterNodeLabelNames().isEmpty());\r\n    args = new String[] { \"-removeFromClusterNodeLabels\" };\r\n    assertTrue(0 != rmAdminCLI.run(args));\r\n    args = new String[] { \"-removeFromClusterNodeLabels\", \"-directlyAccessNodeLabelStore\" };\r\n    assertTrue(0 != rmAdminCLI.run(args));\r\n    args = new String[] { \"-removeFromClusterNodeLabels\", \" \" };\r\n    assertTrue(0 != rmAdminCLI.run(args));\r\n    args = new String[] { \"-removeFromClusterNodeLabels\", \", \" };\r\n    assertTrue(0 != rmAdminCLI.run(args));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testReplaceLabelsOnNode",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testReplaceLabelsOnNode() throws Exception\n{\r\n    dummyNodeLabelsManager.addToCluserNodeLabelsWithDefaultExclusivity(ImmutableSet.of(\"x\", \"y\", \"Y\"));\r\n    String[] args = { \"-replaceLabelsOnNode\", \"node1:8000,x node2:8000=y node3,x node4=Y\", \"-directlyAccessNodeLabelStore\" };\r\n    assertEquals(0, rmAdminCLI.run(args));\r\n    assertTrue(dummyNodeLabelsManager.getNodeLabels().containsKey(NodeId.newInstance(\"node1\", 8000)));\r\n    assertTrue(dummyNodeLabelsManager.getNodeLabels().containsKey(NodeId.newInstance(\"node2\", 8000)));\r\n    assertTrue(dummyNodeLabelsManager.getNodeLabels().containsKey(NodeId.newInstance(\"node3\", 0)));\r\n    assertTrue(dummyNodeLabelsManager.getNodeLabels().containsKey(NodeId.newInstance(\"node4\", 0)));\r\n    args = new String[] { \"-replaceLabelsOnNode\" };\r\n    assertTrue(0 != rmAdminCLI.run(args));\r\n    args = new String[] { \"-replaceLabelsOnNode\", \"-failOnUnknownNodes\" };\r\n    assertTrue(0 != rmAdminCLI.run(args));\r\n    args = new String[] { \"-replaceLabelsOnNode\", \"-directlyAccessNodeLabelStore\" };\r\n    assertTrue(0 != rmAdminCLI.run(args));\r\n    args = new String[] { \"-replaceLabelsOnNode\", \" \" };\r\n    assertTrue(0 != rmAdminCLI.run(args));\r\n    args = new String[] { \"-replaceLabelsOnNode\", \", \" };\r\n    assertTrue(0 != rmAdminCLI.run(args));\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testReplaceMultipleLabelsOnSingleNode",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testReplaceMultipleLabelsOnSingleNode() throws Exception\n{\r\n    dummyNodeLabelsManager.addToCluserNodeLabelsWithDefaultExclusivity(ImmutableSet.of(\"x\", \"y\"));\r\n    String[] args = { \"-replaceLabelsOnNode\", \"node1,x,y\", \"-directlyAccessNodeLabelStore\" };\r\n    assertTrue(0 != rmAdminCLI.run(args));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testRemoveLabelsOnNodes",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testRemoveLabelsOnNodes() throws Exception\n{\r\n    dummyNodeLabelsManager.addToCluserNodeLabelsWithDefaultExclusivity(ImmutableSet.of(\"x\", \"y\"));\r\n    String[] args = { \"-replaceLabelsOnNode\", \"node1=x node2=y\", \"-directlyAccessNodeLabelStore\" };\r\n    assertTrue(0 == rmAdminCLI.run(args));\r\n    args = new String[] { \"-replaceLabelsOnNode\", \"node1= node2=\", \"-directlyAccessNodeLabelStore\" };\r\n    assertTrue(\"Labels should get replaced even '=' is used \", 0 == rmAdminCLI.run(args));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testError",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testError(String[] args, String template, ByteArrayOutputStream data, int resultCode) throws Exception\n{\r\n    int actualResultCode = rmAdminCLI.run(args);\r\n    assertEquals(\"Expected result code: \" + resultCode + \", actual result code is: \" + actualResultCode, resultCode, actualResultCode);\r\n    assertTrue(String.format(\"Expected error message: %n\" + template + \" is not included in messages: %n\" + data.toString()), data.toString().contains(template));\r\n    data.reset();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testRMHAErrorUsage",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testRMHAErrorUsage() throws Exception\n{\r\n    ByteArrayOutputStream errOutBytes = new ByteArrayOutputStream();\r\n    rmAdminCLIWithHAEnabled.setErrOut(new PrintStream(errOutBytes));\r\n    try {\r\n        String[] args = { \"-transitionToActive\" };\r\n        assertEquals(-1, rmAdminCLIWithHAEnabled.run(args));\r\n        String errOut = new String(errOutBytes.toByteArray(), Charsets.UTF_8);\r\n        errOutBytes.reset();\r\n        assertTrue(errOut.contains(\"Usage: rmadmin\"));\r\n    } finally {\r\n        rmAdminCLIWithHAEnabled.setErrOut(System.err);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testNoUnsupportedHACommandsInHelp",
  "errType" : null,
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void testNoUnsupportedHACommandsInHelp() throws Exception\n{\r\n    ByteArrayOutputStream dataErr = new ByteArrayOutputStream();\r\n    System.setErr(new PrintStream(dataErr));\r\n    String[] args = {};\r\n    assertEquals(-1, rmAdminCLIWithHAEnabled.run(args));\r\n    String errOut = dataErr.toString();\r\n    assertFalse(errOut.contains(\"-transitionToObserver\"));\r\n    dataErr.reset();\r\n    String[] args1 = { \"-transitionToObserver\" };\r\n    assertEquals(-1, rmAdminCLIWithHAEnabled.run(args1));\r\n    errOut = dataErr.toString();\r\n    assertTrue(errOut.contains(\"transitionToObserver: Unknown command\"));\r\n    dataErr.reset();\r\n    args1[0] = \"-failover\";\r\n    assertEquals(-1, rmAdminCLIWithHAEnabled.run(args1));\r\n    errOut = dataErr.toString();\r\n    assertTrue(errOut.contains(\"failover: Unknown command\"));\r\n    dataErr.reset();\r\n    String[] args2 = { \"-help\", \"-transitionToObserver\" };\r\n    assertEquals(0, rmAdminCLIWithHAEnabled.run(args2));\r\n    errOut = dataErr.toString();\r\n    assertFalse(errOut.contains(\"-transitionToObserver\"));\r\n    dataErr.reset();\r\n    args2[1] = \"-failover\";\r\n    assertEquals(0, rmAdminCLIWithHAEnabled.run(args2));\r\n    errOut = dataErr.toString();\r\n    assertFalse(errOut.contains(\"-failover\"));\r\n    dataErr.reset();\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setUp() throws IOException, YarnException\n{\r\n    conf = new YarnConfiguration();\r\n    conf.setClass(YarnConfiguration.CLIENT_FAILOVER_NO_HA_PROXY_PROVIDER, ConfiguredRMFailoverProxyProvider.class, RMFailoverProxyProvider.class);\r\n    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testFailoverChange",
  "errType" : null,
  "containingMethodsNum" : 27,
  "sourceCodeText" : "void testFailoverChange() throws Exception\n{\r\n    conf.set(YarnConfiguration.RM_HA_IDS, \"rm0, rm1\");\r\n    Proxy mockProxy2 = new TestProxy((proxy, method, args) -> null);\r\n    Proxy mockProxy1 = new TestProxy((proxy, method, args) -> null);\r\n    Class protocol = ApplicationClientProtocol.class;\r\n    RMProxy<Proxy> mockRMProxy = mock(RMProxy.class);\r\n    ConfiguredRMFailoverProxyProvider<Proxy> fpp = new ConfiguredRMFailoverProxyProvider<>();\r\n    InetSocketAddress mockAdd1 = new InetSocketAddress(RM1_PORT);\r\n    InetSocketAddress mockAdd2 = new InetSocketAddress(RM2_PORT);\r\n    when(mockRMProxy.getRMAddress(any(YarnConfiguration.class), any(Class.class))).thenReturn(mockAdd1);\r\n    when(mockRMProxy.getProxy(any(YarnConfiguration.class), any(Class.class), eq(mockAdd1))).thenReturn(mockProxy1);\r\n    fpp.init(conf, mockRMProxy, protocol);\r\n    FailoverProxyProvider.ProxyInfo<Proxy> actualProxy1 = fpp.getProxy();\r\n    assertEquals(\"ConfiguredRMFailoverProxyProvider doesn't generate \" + \"expected proxy\", mockProxy1, actualProxy1.proxy);\r\n    actualProxy1 = fpp.getProxy();\r\n    assertEquals(\"ConfiguredRMFailoverProxyProvider doesn't generate \" + \"expected proxy\", mockProxy1, actualProxy1.proxy);\r\n    actualProxy1 = fpp.getProxy();\r\n    assertEquals(\"ConfiguredRMFailoverProxyProvider doesn't generate \" + \"expected proxy\", mockProxy1, actualProxy1.proxy);\r\n    verify(mockRMProxy, times(1)).getProxy(any(YarnConfiguration.class), any(Class.class), eq(mockAdd1));\r\n    when(mockRMProxy.getRMAddress(any(YarnConfiguration.class), any(Class.class))).thenReturn(mockAdd2);\r\n    when(mockRMProxy.getProxy(any(YarnConfiguration.class), any(Class.class), eq(mockAdd2))).thenReturn(mockProxy2);\r\n    fpp.performFailover(actualProxy1.proxy);\r\n    FailoverProxyProvider.ProxyInfo<Proxy> actualProxy2 = fpp.getProxy();\r\n    assertEquals(\"ConfiguredRMFailoverProxyProvider \" + \"doesn't generate expected proxy after failover\", mockProxy2, actualProxy2.proxy);\r\n    assertNotEquals(\"ConfiguredRMFailoverProxyProvider \" + \"shouldn't generate same proxy after failover\", actualProxy1.proxy, actualProxy2.proxy);\r\n    verify(mockRMProxy, times(1)).getProxy(any(YarnConfiguration.class), any(Class.class), eq(mockAdd1));\r\n    verify(mockRMProxy, times(1)).getProxy(any(YarnConfiguration.class), any(Class.class), eq(mockAdd2));\r\n    when(mockRMProxy.getRMAddress(any(YarnConfiguration.class), any(Class.class))).thenReturn(mockAdd1);\r\n    when(mockRMProxy.getProxy(any(YarnConfiguration.class), any(Class.class), eq(mockAdd1))).thenReturn(mockProxy1);\r\n    fpp.performFailover(actualProxy2.proxy);\r\n    FailoverProxyProvider.ProxyInfo<Proxy> actualProxy3 = fpp.getProxy();\r\n    assertEquals(\"ConfiguredRMFailoverProxyProvider \" + \"doesn't generate expected proxy after failover\", mockProxy1, actualProxy3.proxy);\r\n    verify(mockRMProxy, times(1)).getProxy(any(YarnConfiguration.class), any(Class.class), eq(mockAdd1));\r\n    verify(mockRMProxy, times(1)).getProxy(any(YarnConfiguration.class), any(Class.class), eq(mockAdd2));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testAutoRefreshFailoverChange",
  "errType" : null,
  "containingMethodsNum" : 30,
  "sourceCodeText" : "void testAutoRefreshFailoverChange() throws Exception\n{\r\n    conf.setClass(YarnConfiguration.CLIENT_FAILOVER_NO_HA_PROXY_PROVIDER, AutoRefreshRMFailoverProxyProvider.class, RMFailoverProxyProvider.class);\r\n    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, true);\r\n    conf.set(YarnConfiguration.RM_HA_IDS, \"rm0, rm1\");\r\n    Proxy mockProxy1 = new TestProxy((proxy, method, args) -> null);\r\n    Proxy mockProxy2 = new TestProxy((proxy, method, args) -> null);\r\n    Class protocol = ApplicationClientProtocol.class;\r\n    RMProxy<Proxy> mockRMProxy = mock(RMProxy.class);\r\n    AutoRefreshRMFailoverProxyProvider<Proxy> fpp = new AutoRefreshRMFailoverProxyProvider<>();\r\n    InetSocketAddress mockAdd1 = new InetSocketAddress(RM1_PORT);\r\n    InetSocketAddress mockAdd2 = new InetSocketAddress(RM2_PORT);\r\n    InetSocketAddress mockAdd3 = new InetSocketAddress(RM3_PORT);\r\n    when(mockRMProxy.getRMAddress(any(YarnConfiguration.class), any(Class.class))).thenReturn(mockAdd1);\r\n    when(mockRMProxy.getProxy(any(YarnConfiguration.class), any(Class.class), eq(mockAdd1))).thenReturn(mockProxy1);\r\n    fpp.init(conf, mockRMProxy, protocol);\r\n    FailoverProxyProvider.ProxyInfo<Proxy> actualProxy1 = fpp.getProxy();\r\n    assertEquals(\"AutoRefreshRMFailoverProxyProvider doesn't generate \" + \"expected proxy\", mockProxy1, actualProxy1.proxy);\r\n    actualProxy1 = fpp.getProxy();\r\n    assertEquals(\"AutoRefreshRMFailoverProxyProvider doesn't generate \" + \"expected proxy\", mockProxy1, actualProxy1.proxy);\r\n    actualProxy1 = fpp.getProxy();\r\n    assertEquals(\"AutoRefreshRMFailoverProxyProvider doesn't generate \" + \"expected proxy\", mockProxy1, actualProxy1.proxy);\r\n    verify(mockRMProxy, times(1)).getProxy(any(YarnConfiguration.class), any(Class.class), eq(mockAdd1));\r\n    when(mockRMProxy.getRMAddress(any(YarnConfiguration.class), any(Class.class))).thenReturn(mockAdd2);\r\n    when(mockRMProxy.getProxy(any(YarnConfiguration.class), any(Class.class), eq(mockAdd2))).thenReturn(mockProxy2);\r\n    fpp.performFailover(actualProxy1.proxy);\r\n    FailoverProxyProvider.ProxyInfo<Proxy> actualProxy2 = fpp.getProxy();\r\n    assertEquals(\"AutoRefreshRMFailoverProxyProvider \" + \"doesn't generate expected proxy after failover\", mockProxy2, actualProxy2.proxy);\r\n    assertNotEquals(\"AutoRefreshRMFailoverProxyProvider \" + \"shouldn't generate same proxy after failover\", actualProxy1.proxy, actualProxy2.proxy);\r\n    verify(mockRMProxy, times(1)).getProxy(any(YarnConfiguration.class), any(Class.class), eq(mockAdd1));\r\n    verify(mockRMProxy, times(1)).getProxy(any(YarnConfiguration.class), any(Class.class), eq(mockAdd2));\r\n    when(mockRMProxy.getRMAddress(any(YarnConfiguration.class), any(Class.class))).thenReturn(mockAdd3);\r\n    when(mockRMProxy.getProxy(any(YarnConfiguration.class), any(Class.class), eq(mockAdd3))).thenReturn(mockProxy1);\r\n    fpp.performFailover(actualProxy2.proxy);\r\n    FailoverProxyProvider.ProxyInfo<Proxy> actualProxy3 = fpp.getProxy();\r\n    assertEquals(\"ConfiguredRMFailoverProxyProvider \" + \"doesn't generate expected proxy after failover\", mockProxy1, actualProxy3.proxy);\r\n    verify(mockRMProxy, times(1)).getProxy(any(YarnConfiguration.class), any(Class.class), eq(mockAdd1));\r\n    verify(mockRMProxy, times(1)).getProxy(any(YarnConfiguration.class), any(Class.class), eq(mockAdd2));\r\n    verify(mockRMProxy, times(1)).getProxy(any(YarnConfiguration.class), any(Class.class), eq(mockAdd3));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    conf.setBoolean(CommonConfigurationKeys.HADOOP_SECURITY_TOKEN_SERVICE_USE_IP, false);\r\n    SecurityUtil.setConfiguration(conf);\r\n    conf.set(YarnConfiguration.RECOVERY_ENABLED, \"true\");\r\n    conf.set(YarnConfiguration.RM_STORE, MemoryRMStateStore.class.getName());\r\n    conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS, YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);\r\n    conf.setBoolean(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED, true);\r\n    conf.setLong(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS, 0);\r\n    conf.set(YarnConfiguration.RM_SCHEDULER_ADDRESS, \"0.0.0.0:0\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDown()\n{\r\n    conf.setBoolean(CommonConfigurationKeys.HADOOP_SECURITY_TOKEN_SERVICE_USE_IP, true);\r\n    SecurityUtil.setConfiguration(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testAMRMClientResendsRequestsOnRMRestart",
  "errType" : null,
  "containingMethodsNum" : 111,
  "sourceCodeText" : "void testAMRMClientResendsRequestsOnRMRestart() throws Exception\n{\r\n    UserGroupInformation.setLoginUser(null);\r\n    MemoryRMStateStore memStore = new MemoryRMStateStore();\r\n    memStore.init(conf);\r\n    MyResourceManager rm1 = new MyResourceManager(conf, memStore);\r\n    rm1.start();\r\n    RMApp app = MockRMAppSubmitter.submitWithMemory(1024, rm1);\r\n    rm1.drainEvents();\r\n    MockNM nm1 = new MockNM(\"h1:1234\", 15120, rm1.getResourceTrackerService());\r\n    nm1.registerNode();\r\n    nm1.nodeHeartbeat(true);\r\n    rm1.drainEvents();\r\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt().getAppAttemptId();\r\n    rm1.sendAMLaunched(appAttemptId);\r\n    rm1.drainEvents();\r\n    org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> token = rm1.getRMContext().getRMApps().get(appAttemptId.getApplicationId()).getRMAppAttempt(appAttemptId).getAMRMToken();\r\n    UserGroupInformation ugi = UserGroupInformation.getCurrentUser();\r\n    ugi.addTokenIdentifier(token.decodeIdentifier());\r\n    AMRMClient<ContainerRequest> amClient = new MyAMRMClientImpl(rm1);\r\n    amClient.init(conf);\r\n    amClient.start();\r\n    amClient.registerApplicationMaster(\"Host\", 10000, \"\");\r\n    ContainerRequest cRequest1 = createReq(1, 1024, new String[] { \"h1\" });\r\n    amClient.addContainerRequest(cRequest1);\r\n    ContainerRequest cRequest2 = createReq(1, 1024, new String[] { \"h1\", \"h2\" });\r\n    amClient.addContainerRequest(cRequest2);\r\n    ContainerRequest cRequest3 = createReq(1, 1024, new String[] { \"h1\" });\r\n    amClient.addContainerRequest(cRequest3);\r\n    List<String> blacklistAdditions = new ArrayList<String>();\r\n    List<String> blacklistRemoval = new ArrayList<String>();\r\n    blacklistAdditions.add(\"h2\");\r\n    blacklistRemoval.add(\"h10\");\r\n    amClient.updateBlacklist(blacklistAdditions, blacklistRemoval);\r\n    blacklistAdditions.remove(\"h2\");\r\n    AllocateResponse allocateResponse = amClient.allocate(0.1f);\r\n    rm1.drainEvents();\r\n    Assert.assertEquals(\"No of assignments must be 0\", 0, allocateResponse.getAllocatedContainers().size());\r\n    assertAsksAndReleases(4, 0, rm1);\r\n    assertBlacklistAdditionsAndRemovals(1, 1, rm1);\r\n    nm1.nodeHeartbeat(true);\r\n    rm1.drainEvents();\r\n    allocateResponse = amClient.allocate(0.2f);\r\n    rm1.drainEvents();\r\n    Assert.assertEquals(\"No of assignments must be 0\", 3, allocateResponse.getAllocatedContainers().size());\r\n    assertAsksAndReleases(0, 0, rm1);\r\n    assertBlacklistAdditionsAndRemovals(0, 0, rm1);\r\n    List<Container> allocatedContainers = allocateResponse.getAllocatedContainers();\r\n    amClient.removeContainerRequest(cRequest1);\r\n    amClient.removeContainerRequest(cRequest2);\r\n    amClient.removeContainerRequest(cRequest3);\r\n    allocateResponse = amClient.allocate(0.2f);\r\n    rm1.drainEvents();\r\n    Assert.assertEquals(\"No of assignments must be 0\", 0, allocateResponse.getAllocatedContainers().size());\r\n    assertAsksAndReleases(4, 0, rm1);\r\n    assertBlacklistAdditionsAndRemovals(0, 0, rm1);\r\n    ContainerRequest cRequest4 = createReq(1, 1024, new String[] { \"h1\" });\r\n    amClient.addContainerRequest(cRequest4);\r\n    int pendingRelease = 0;\r\n    Iterator<Container> it = allocatedContainers.iterator();\r\n    while (it.hasNext()) {\r\n        amClient.releaseAssignedContainer(it.next().getId());\r\n        pendingRelease++;\r\n        it.remove();\r\n        break;\r\n    }\r\n    Container container = it.next();\r\n    ContainerId containerId = container.getId();\r\n    nm1.nodeHeartbeat(containerId.getApplicationAttemptId(), containerId.getContainerId(), ContainerState.RUNNING);\r\n    rm1.drainEvents();\r\n    amClient.requestContainerUpdate(container, UpdateContainerRequest.newInstance(container.getVersion(), container.getId(), ContainerUpdateType.INCREASE_RESOURCE, Resource.newInstance(2048, 1), null));\r\n    it.remove();\r\n    allocateResponse = amClient.allocate(0.3f);\r\n    rm1.drainEvents();\r\n    Assert.assertEquals(\"No of assignments must be 0\", 0, allocateResponse.getAllocatedContainers().size());\r\n    assertAsksAndReleases(3, pendingRelease, rm1);\r\n    assertChanges(1, 0, rm1);\r\n    assertBlacklistAdditionsAndRemovals(0, 0, rm1);\r\n    int completedContainer = allocateResponse.getCompletedContainersStatuses().size();\r\n    pendingRelease -= completedContainer;\r\n    MyResourceManager rm2 = new MyResourceManager(conf, memStore);\r\n    rm2.start();\r\n    nm1.setResourceTrackerService(rm2.getResourceTrackerService());\r\n    ((MyAMRMClientImpl) amClient).updateRMProxy(rm2);\r\n    NodeHeartbeatResponse hbResponse = nm1.nodeHeartbeat(true);\r\n    Assert.assertEquals(NodeAction.RESYNC, hbResponse.getNodeAction());\r\n    nm1 = new MockNM(\"h1:1234\", 10240, rm2.getResourceTrackerService());\r\n    NMContainerStatus containerReport = NMContainerStatus.newInstance(containerId, 0, ContainerState.RUNNING, Resource.newInstance(1024, 1), \"recover container\", 0, Priority.newInstance(0), 0);\r\n    nm1.registerNode(Collections.singletonList(containerReport), Collections.singletonList(containerId.getApplicationAttemptId().getApplicationId()));\r\n    nm1.nodeHeartbeat(true);\r\n    rm2.drainEvents();\r\n    blacklistAdditions.add(\"h3\");\r\n    amClient.updateBlacklist(blacklistAdditions, null);\r\n    blacklistAdditions.remove(\"h3\");\r\n    it = allocatedContainers.iterator();\r\n    while (it.hasNext()) {\r\n        amClient.releaseAssignedContainer(it.next().getId());\r\n        pendingRelease++;\r\n        it.remove();\r\n    }\r\n    ContainerRequest cRequest5 = createReq(1, 1024, new String[] { \"h1\", \"h2\" });\r\n    amClient.addContainerRequest(cRequest5);\r\n    allocateResponse = amClient.allocate(0.3f);\r\n    rm2.drainEvents();\r\n    completedContainer = allocateResponse.getCompletedContainersStatuses().size();\r\n    pendingRelease -= completedContainer;\r\n    assertAsksAndReleases(4, pendingRelease, rm2);\r\n    assertChanges(1, 0, rm2);\r\n    assertBlacklistAdditionsAndRemovals(2, 0, rm2);\r\n    ContainerRequest cRequest6 = createReq(1, 1024, new String[] { \"h1\", \"h2\", \"h3\" });\r\n    amClient.addContainerRequest(cRequest6);\r\n    allocateResponse = amClient.allocate(0.5f);\r\n    rm2.drainEvents();\r\n    Assert.assertEquals(\"No of assignments must be 0\", 0, allocateResponse.getAllocatedContainers().size());\r\n    assertAsksAndReleases(5, 0, rm2);\r\n    assertChanges(0, 0, rm2);\r\n    assertBlacklistAdditionsAndRemovals(0, 0, rm2);\r\n    int noAssignedContainer = 0;\r\n    int count = 5;\r\n    while (count-- > 0) {\r\n        nm1.nodeHeartbeat(true);\r\n        rm2.drainEvents();\r\n        allocateResponse = amClient.allocate(0.5f);\r\n        rm2.drainEvents();\r\n        noAssignedContainer += allocateResponse.getAllocatedContainers().size();\r\n        if (noAssignedContainer == 3) {\r\n            break;\r\n        }\r\n        Thread.sleep(1000);\r\n    }\r\n    Assert.assertEquals(\"Number of container should be 3\", 3, noAssignedContainer);\r\n    amClient.stop();\r\n    rm1.stop();\r\n    rm2.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testAMRMClientForUnregisterAMOnRMRestart",
  "errType" : null,
  "containingMethodsNum" : 37,
  "sourceCodeText" : "void testAMRMClientForUnregisterAMOnRMRestart() throws Exception\n{\r\n    MemoryRMStateStore memStore = new MemoryRMStateStore();\r\n    memStore.init(conf);\r\n    MyResourceManager rm1 = new MyResourceManager(conf, memStore);\r\n    rm1.start();\r\n    RMApp app = MockRMAppSubmitter.submitWithMemory(1024, rm1);\r\n    rm1.drainEvents();\r\n    MockNM nm1 = new MockNM(\"h1:1234\", 15120, rm1.getResourceTrackerService());\r\n    nm1.registerNode();\r\n    nm1.nodeHeartbeat(true);\r\n    rm1.drainEvents();\r\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt().getAppAttemptId();\r\n    rm1.sendAMLaunched(appAttemptId);\r\n    rm1.drainEvents();\r\n    org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> token = rm1.getRMContext().getRMApps().get(appAttemptId.getApplicationId()).getRMAppAttempt(appAttemptId).getAMRMToken();\r\n    UserGroupInformation ugi = UserGroupInformation.getCurrentUser();\r\n    ugi.addTokenIdentifier(token.decodeIdentifier());\r\n    AMRMClient<ContainerRequest> amClient = new MyAMRMClientImpl(rm1);\r\n    amClient.init(conf);\r\n    amClient.start();\r\n    amClient.registerApplicationMaster(\"h1\", 10000, \"\");\r\n    amClient.allocate(0.1f);\r\n    MyResourceManager rm2 = new MyResourceManager(conf, memStore);\r\n    rm2.start();\r\n    nm1.setResourceTrackerService(rm2.getResourceTrackerService());\r\n    ((MyAMRMClientImpl) amClient).updateRMProxy(rm2);\r\n    NodeHeartbeatResponse hbResponse = nm1.nodeHeartbeat(true);\r\n    Assert.assertEquals(NodeAction.RESYNC, hbResponse.getNodeAction());\r\n    nm1 = new MockNM(\"h1:1234\", 10240, rm2.getResourceTrackerService());\r\n    ContainerId containerId = ContainerId.newContainerId(appAttemptId, 1);\r\n    NMContainerStatus containerReport = NMContainerStatus.newInstance(containerId, 0, ContainerState.RUNNING, Resource.newInstance(1024, 1), \"recover container\", 0, Priority.newInstance(0), 0);\r\n    nm1.registerNode(Arrays.asList(containerReport), null);\r\n    nm1.nodeHeartbeat(true);\r\n    rm2.drainEvents();\r\n    amClient.unregisterApplicationMaster(FinalApplicationStatus.SUCCEEDED, null, null);\r\n    rm2.waitForState(appAttemptId, RMAppAttemptState.FINISHING);\r\n    nm1.nodeHeartbeat(appAttemptId, 1, ContainerState.COMPLETE);\r\n    rm2.waitForState(appAttemptId, RMAppAttemptState.FINISHED);\r\n    rm2.waitForState(app.getApplicationId(), RMAppState.FINISHED);\r\n    amClient.stop();\r\n    rm1.stop();\r\n    rm2.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testAMRMClientOnAMRMTokenRollOverOnRMRestart",
  "errType" : [ "InterruptedException", "Exception", "Exception" ],
  "containingMethodsNum" : 52,
  "sourceCodeText" : "void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception\n{\r\n    conf.setLong(YarnConfiguration.RM_AMRM_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS, rolling_interval_sec);\r\n    conf.setLong(YarnConfiguration.RM_AM_EXPIRY_INTERVAL_MS, am_expire_ms);\r\n    MemoryRMStateStore memStore = new MemoryRMStateStore();\r\n    memStore.init(conf);\r\n    MyResourceManager2 rm1 = new MyResourceManager2(conf, memStore);\r\n    rm1.start();\r\n    Long startTime = System.currentTimeMillis();\r\n    RMApp app = MockRMAppSubmitter.submitWithMemory(1024, rm1);\r\n    rm1.drainEvents();\r\n    MockNM nm1 = new MockNM(\"h1:1234\", 15120, rm1.getResourceTrackerService());\r\n    nm1.registerNode();\r\n    nm1.nodeHeartbeat(true);\r\n    rm1.drainEvents();\r\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt().getAppAttemptId();\r\n    rm1.sendAMLaunched(appAttemptId);\r\n    rm1.drainEvents();\r\n    AMRMTokenSecretManager amrmTokenSecretManagerForRM1 = rm1.getRMContext().getAMRMTokenSecretManager();\r\n    org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> token = amrmTokenSecretManagerForRM1.createAndGetAMRMToken(appAttemptId);\r\n    UserGroupInformation ugi = UserGroupInformation.getCurrentUser();\r\n    ugi.addTokenIdentifier(token.decodeIdentifier());\r\n    AMRMClient<ContainerRequest> amClient = new MyAMRMClientImpl(rm1);\r\n    amClient.init(conf);\r\n    amClient.start();\r\n    amClient.registerApplicationMaster(\"h1\", 10000, \"\");\r\n    amClient.allocate(0.1f);\r\n    while (System.currentTimeMillis() - startTime < rolling_interval_sec * 1000) {\r\n        amClient.allocate(0.1f);\r\n        try {\r\n            Thread.sleep(1000);\r\n        } catch (InterruptedException e) {\r\n        }\r\n    }\r\n    Assert.assertTrue(amrmTokenSecretManagerForRM1.getMasterKey().getMasterKey().getKeyId() != token.decodeIdentifier().getKeyId());\r\n    amClient.allocate(0.1f);\r\n    org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> newToken = amrmTokenSecretManagerForRM1.createAndGetAMRMToken(appAttemptId);\r\n    int waitCount = 0;\r\n    while (waitCount++ <= 50) {\r\n        if (amrmTokenSecretManagerForRM1.getCurrnetMasterKeyData().getMasterKey().getKeyId() != token.decodeIdentifier().getKeyId()) {\r\n            break;\r\n        }\r\n        try {\r\n            amClient.allocate(0.1f);\r\n        } catch (Exception ex) {\r\n            break;\r\n        }\r\n        Thread.sleep(500);\r\n    }\r\n    Assert.assertTrue(amrmTokenSecretManagerForRM1.getNextMasterKeyData() == null);\r\n    Assert.assertTrue(amrmTokenSecretManagerForRM1.getCurrnetMasterKeyData().getMasterKey().getKeyId() == newToken.decodeIdentifier().getKeyId());\r\n    final MyResourceManager2 rm2 = new MyResourceManager2(conf, memStore);\r\n    rm2.start();\r\n    nm1.setResourceTrackerService(rm2.getResourceTrackerService());\r\n    ((MyAMRMClientImpl) amClient).updateRMProxy(rm2);\r\n    AMRMTokenSecretManager amrmTokenSecretManagerForRM2 = rm2.getRMContext().getAMRMTokenSecretManager();\r\n    Assert.assertTrue(amrmTokenSecretManagerForRM2.getCurrnetMasterKeyData().getMasterKey().getKeyId() == newToken.decodeIdentifier().getKeyId());\r\n    Assert.assertTrue(amrmTokenSecretManagerForRM2.getNextMasterKeyData() == null);\r\n    try {\r\n        UserGroupInformation testUser = UserGroupInformation.createRemoteUser(\"testUser\");\r\n        SecurityUtil.setTokenService(token, rm2.getApplicationMasterService().getBindAddress());\r\n        testUser.addToken(token);\r\n        testUser.doAs(new PrivilegedAction<ApplicationMasterProtocol>() {\r\n\r\n            @Override\r\n            public ApplicationMasterProtocol run() {\r\n                return (ApplicationMasterProtocol) YarnRPC.create(conf).getProxy(ApplicationMasterProtocol.class, rm2.getApplicationMasterService().getBindAddress(), conf);\r\n            }\r\n        }).allocate(Records.newRecord(AllocateRequest.class));\r\n        Assert.fail(\"The old Token should not work\");\r\n    } catch (Exception ex) {\r\n        Assert.assertTrue(ex instanceof InvalidToken);\r\n        Assert.assertTrue(ex.getMessage().contains(\"Invalid AMRMToken from \" + token.decodeIdentifier().getApplicationAttemptId()));\r\n    }\r\n    amClient.allocate(0.1f);\r\n    amClient.unregisterApplicationMaster(FinalApplicationStatus.SUCCEEDED, null, null);\r\n    amClient.stop();\r\n    rm1.stop();\r\n    rm2.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "assertBlacklistAdditionsAndRemovals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void assertBlacklistAdditionsAndRemovals(int expectedAdditions, int expectedRemovals, MyResourceManager rm)\n{\r\n    Assert.assertEquals(expectedAdditions, rm.getMyFifoScheduler().lastBlacklistAdditions.size());\r\n    Assert.assertEquals(expectedRemovals, rm.getMyFifoScheduler().lastBlacklistRemovals.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "assertAsksAndReleases",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void assertAsksAndReleases(int expectedAsk, int expectedRelease, MyResourceManager rm)\n{\r\n    Assert.assertEquals(expectedAsk, rm.getMyFifoScheduler().lastAsk.size());\r\n    Assert.assertEquals(expectedRelease, rm.getMyFifoScheduler().lastRelease.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "assertChanges",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void assertChanges(int expectedIncrease, int expectedDecrease, MyResourceManager rm)\n{\r\n    Assert.assertEquals(expectedIncrease, rm.getMyFifoScheduler().lastIncrease.size());\r\n    Assert.assertEquals(expectedDecrease, rm.getMyFifoScheduler().lastDecrease.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "createReq",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerRequest createReq(int priority, int memory, String[] hosts)\n{\r\n    Resource capability = Resource.newInstance(memory, 1);\r\n    Priority priorityOfContainer = Priority.newInstance(priority);\r\n    return new ContainerRequest(capability, hosts, new String[] { NetworkTopology.DEFAULT_RACK }, priorityOfContainer);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\util",
  "methodName" : "testGetRMPrincipalStandAlone_Configuration",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testGetRMPrincipalStandAlone_Configuration() throws IOException\n{\r\n    Configuration conf = new Configuration();\r\n    conf.set(YarnConfiguration.RM_ADDRESS, \"myhost\");\r\n    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, false);\r\n    String result = YarnClientUtils.getRmPrincipal(conf);\r\n    assertNull(\"The hostname translation did return null when the principal is \" + \"missing from the conf: \" + result, result);\r\n    conf = new Configuration();\r\n    conf.set(YarnConfiguration.RM_ADDRESS, \"myhost\");\r\n    conf.set(YarnConfiguration.RM_PRINCIPAL, \"test/_HOST@REALM\");\r\n    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, false);\r\n    result = YarnClientUtils.getRmPrincipal(conf);\r\n    assertEquals(\"The hostname translation did not produce the expected \" + \"results: \" + result, \"test/myhost@REALM\", result);\r\n    conf.set(YarnConfiguration.RM_PRINCIPAL, \"test/yourhost@REALM\");\r\n    result = YarnClientUtils.getRmPrincipal(conf);\r\n    assertEquals(\"The hostname translation did not produce the expected \" + \"results: \" + result, \"test/yourhost@REALM\", result);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\util",
  "methodName" : "testGetRMPrincipalHA_Configuration",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void testGetRMPrincipalHA_Configuration() throws IOException\n{\r\n    Configuration conf = new Configuration();\r\n    conf.set(YarnConfiguration.RM_ADDRESS, \"myhost\");\r\n    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, true);\r\n    String result = YarnClientUtils.getRmPrincipal(conf);\r\n    assertNull(\"The hostname translation did return null when the principal is \" + \"missing from the conf: \" + result, result);\r\n    conf = new Configuration();\r\n    conf.set(YarnConfiguration.RM_ADDRESS + \".rm0\", \"myhost\");\r\n    conf.set(YarnConfiguration.RM_PRINCIPAL, \"test/_HOST@REALM\");\r\n    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, true);\r\n    conf.set(YarnConfiguration.RM_HA_IDS, \"rm0\");\r\n    result = YarnClientUtils.getRmPrincipal(conf);\r\n    assertEquals(\"The hostname translation did not produce the expected \" + \"results: \" + result, \"test/myhost@REALM\", result);\r\n    conf = new Configuration();\r\n    conf.set(YarnConfiguration.RM_ADDRESS + \".rm0\", \"myhost\");\r\n    conf.set(YarnConfiguration.RM_PRINCIPAL, \"test/_HOST@REALM\");\r\n    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, true);\r\n    try {\r\n        result = YarnClientUtils.getRmPrincipal(conf);\r\n        fail(\"The hostname translation succeeded even though no RM ids were \" + \"set: \" + result);\r\n    } catch (IOException ex) {\r\n    }\r\n    conf = new Configuration();\r\n    conf.set(YarnConfiguration.RM_ADDRESS + \".rm0\", \"myhost\");\r\n    conf.set(YarnConfiguration.RM_PRINCIPAL, \"test/_HOST@REALM\");\r\n    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, true);\r\n    conf.set(YarnConfiguration.RM_HA_ID, \"rm0\");\r\n    result = YarnClientUtils.getRmPrincipal(conf);\r\n    assertEquals(\"The hostname translation did not produce the expected \" + \"results: \" + result, \"test/myhost@REALM\", result);\r\n    conf.set(YarnConfiguration.RM_PRINCIPAL, \"test/yourhost@REALM\");\r\n    result = YarnClientUtils.getRmPrincipal(conf);\r\n    assertEquals(\"The hostname translation did not produce the expected \" + \"results: \" + result, \"test/yourhost@REALM\", result);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\util",
  "methodName" : "testGetRMPrincipalStandAlone_String",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testGetRMPrincipalStandAlone_String() throws IOException\n{\r\n    Configuration conf = new Configuration();\r\n    conf.set(YarnConfiguration.RM_ADDRESS, \"myhost\");\r\n    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, false);\r\n    String result = YarnClientUtils.getRmPrincipal(\"test/_HOST@REALM\", conf);\r\n    assertEquals(\"The hostname translation did not produce the expected \" + \"results: \" + result, \"test/myhost@REALM\", result);\r\n    result = YarnClientUtils.getRmPrincipal(\"test/yourhost@REALM\", conf);\r\n    assertEquals(\"The hostname translation did not produce the expected \" + \"results: \" + result, \"test/yourhost@REALM\", result);\r\n    try {\r\n        result = YarnClientUtils.getRmPrincipal(null, conf);\r\n        fail(\"The hostname translation succeeded even though the RM principal \" + \"was null: \" + result);\r\n    } catch (IllegalArgumentException ex) {\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\util",
  "methodName" : "testGetRMPrincipalHA_String",
  "errType" : [ "IllegalArgumentException", "IOException" ],
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testGetRMPrincipalHA_String() throws IOException\n{\r\n    Configuration conf = new Configuration();\r\n    conf.set(YarnConfiguration.RM_ADDRESS + \".rm0\", \"myhost\");\r\n    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, true);\r\n    conf.set(YarnConfiguration.RM_HA_IDS, \"rm0\");\r\n    String result = YarnClientUtils.getRmPrincipal(\"test/_HOST@REALM\", conf);\r\n    assertEquals(\"The hostname translation did not produce the expected \" + \"results: \" + result, \"test/myhost@REALM\", result);\r\n    try {\r\n        result = YarnClientUtils.getRmPrincipal(null, conf);\r\n        fail(\"The hostname translation succeeded even though the RM principal \" + \"was null: \" + result);\r\n    } catch (IllegalArgumentException ex) {\r\n    }\r\n    conf = new Configuration();\r\n    conf.set(YarnConfiguration.RM_ADDRESS + \".rm0\", \"myhost\");\r\n    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, true);\r\n    try {\r\n        YarnClientUtils.getRmPrincipal(\"test/_HOST@REALM\", conf);\r\n        fail(\"The hostname translation succeeded even though no RM ids were set\");\r\n    } catch (IOException ex) {\r\n    }\r\n    conf = new Configuration();\r\n    conf.set(YarnConfiguration.RM_ADDRESS + \".rm0\", \"myhost\");\r\n    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, true);\r\n    conf.set(YarnConfiguration.RM_HA_ID, \"rm0\");\r\n    result = YarnClientUtils.getRmPrincipal(\"test/_HOST@REALM\", conf);\r\n    assertEquals(\"The hostname translation did not produce the expected \" + \"results: \" + result, \"test/myhost@REALM\", result);\r\n    result = YarnClientUtils.getRmPrincipal(\"test/yourhost@REALM\", conf);\r\n    assertEquals(\"The hostname translation did not produce the expected \" + \"results: \" + result, \"test/yourhost@REALM\", result);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\util",
  "methodName" : "testGetYarnConfWithRmHaId",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testGetYarnConfWithRmHaId() throws IOException\n{\r\n    Configuration conf = new Configuration();\r\n    conf.set(YarnConfiguration.RM_HA_ID, \"rm0\");\r\n    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, false);\r\n    YarnConfiguration result = YarnClientUtils.getYarnConfWithRmHaId(conf);\r\n    assertSameConf(conf, result);\r\n    assertEquals(\"RM_HA_ID was changed when it shouldn't have been: \" + result.get(YarnConfiguration.RM_HA_ID), \"rm0\", result.get(YarnConfiguration.RM_HA_ID));\r\n    conf = new Configuration();\r\n    conf.set(YarnConfiguration.RM_HA_ID, \"rm0\");\r\n    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, true);\r\n    result = YarnClientUtils.getYarnConfWithRmHaId(conf);\r\n    assertSameConf(conf, result);\r\n    assertEquals(\"RM_HA_ID was changed when it shouldn't have been: \" + result.get(YarnConfiguration.RM_HA_ID), \"rm0\", result.get(YarnConfiguration.RM_HA_ID));\r\n    conf = new Configuration();\r\n    conf.set(YarnConfiguration.RM_HA_IDS, \"rm0,rm1\");\r\n    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, true);\r\n    result = YarnClientUtils.getYarnConfWithRmHaId(conf);\r\n    assertSameConf(conf, result);\r\n    assertEquals(\"RM_HA_ID was not set correctly: \" + result.get(YarnConfiguration.RM_HA_ID), \"rm0\", result.get(YarnConfiguration.RM_HA_ID));\r\n    conf = new Configuration();\r\n    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, true);\r\n    try {\r\n        YarnClientUtils.getYarnConfWithRmHaId(conf);\r\n        fail(\"Allowed invalid HA configuration: HA is enabled, but no RM ID \" + \"is set\");\r\n    } catch (IOException ex) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\util",
  "methodName" : "assertSameConf",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void assertSameConf(Configuration master, YarnConfiguration copy)\n{\r\n    Set<String> seen = new HashSet<>();\r\n    Iterator<Entry<String, String>> itr = master.iterator();\r\n    seen.add(YarnConfiguration.RM_HA_ID);\r\n    while (itr.hasNext()) {\r\n        Entry<String, String> property = itr.next();\r\n        String key = property.getKey();\r\n        if (!seen.add(key)) {\r\n            assertEquals(\"New configuration changed the value of \" + key, master.get(key), copy.get(key));\r\n        }\r\n    }\r\n    itr = copy.iterator();\r\n    while (itr.hasNext()) {\r\n        Entry<String, String> property = itr.next();\r\n        String key = property.getKey();\r\n        if (!seen.contains(property.getKey())) {\r\n            assertEquals(\"New configuration changed the value of \" + key, copy.get(key), master.get(key));\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    sysOutStream = new ByteArrayOutputStream();\r\n    sysOut = new PrintStream(sysOutStream);\r\n    System.setOut(sysOut);\r\n    sysErrStream = new ByteArrayOutputStream();\r\n    sysErr = new PrintStream(sysErrStream);\r\n    System.setErr(sysErr);\r\n    conf = new YarnConfiguration();\r\n    WebServiceClient.initialize(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown()\n{\r\n    WebServiceClient.destroy();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testFailResultCodes",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testFailResultCodes() throws Exception\n{\r\n    conf.setClass(\"fs.file.impl\", LocalFileSystem.class, FileSystem.class);\r\n    LogCLIHelpers cliHelper = new LogCLIHelpers();\r\n    cliHelper.setConf(conf);\r\n    YarnClient mockYarnClient = createMockYarnClient(YarnApplicationState.FINISHED, UserGroupInformation.getCurrentUser().getShortUserName());\r\n    LogsCLI dumper = new LogsCLIForTest(mockYarnClient);\r\n    dumper.setConf(conf);\r\n    int exitCode = dumper.run(new String[] { \"-applicationId\", \"application_0_0\" });\r\n    assertTrue(\"Should return an error code\", exitCode != 0);\r\n    exitCode = cliHelper.dumpAContainersLogs(\"application_0_0\", \"container_0_0\", \"nonexistentnode:1234\", \"nobody\");\r\n    assertTrue(\"Should return an error code\", exitCode != 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testInvalidOpts",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testInvalidOpts() throws Exception\n{\r\n    YarnClient mockYarnClient = createMockYarnClient(YarnApplicationState.FINISHED, UserGroupInformation.getCurrentUser().getShortUserName());\r\n    LogsCLI cli = new LogsCLIForTest(mockYarnClient);\r\n    cli.setConf(conf);\r\n    int exitCode = cli.run(new String[] { \"-InvalidOpts\" });\r\n    assertTrue(exitCode == -1);\r\n    assertTrue(sysErrStream.toString().contains(\"options parsing failed: Unrecognized option: -InvalidOpts\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testInvalidAMContainerId",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testInvalidAMContainerId() throws Exception\n{\r\n    conf.setBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED, true);\r\n    YarnClient mockYarnClient = createMockYarnClient(YarnApplicationState.FINISHED, UserGroupInformation.getCurrentUser().getShortUserName());\r\n    LogsCLI cli = spy(new LogsCLIForTest(mockYarnClient));\r\n    List<JSONObject> list = Arrays.asList(new JSONObject());\r\n    doReturn(list).when(cli).getAMContainerInfoForRMWebService(any(Configuration.class), any(String.class));\r\n    cli.setConf(conf);\r\n    int exitCode = cli.run(new String[] { \"-applicationId\", \"application_1465862913885_0027\", \"-am\", \"1000\" });\r\n    assertTrue(exitCode == -1);\r\n    assertTrue(sysErrStream.toString().contains(\"exceeds the number of AM containers\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testAMContainerInfoFetchFromTimelineReader",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testAMContainerInfoFetchFromTimelineReader() throws Exception\n{\r\n    conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, true);\r\n    conf.set(YarnConfiguration.TIMELINE_SERVICE_VERSIONS, \"2.0f\");\r\n    YarnClient mockYarnClient = createMockYarnClient(YarnApplicationState.FINISHED, UserGroupInformation.getCurrentUser().getShortUserName());\r\n    LogsCLI cli = spy(new LogsCLIForTest(mockYarnClient));\r\n    String appInfoEntity = \"[{\\\"metrics\\\":[],\\\"events\\\":[],\\\"createdtime\\\":1542273848613,\\\"idpref\" + \"ix\\\":9223372036854775806,\\\"id\\\":\\\"appattempt_1542271570060_0002_\" + \"000001\\\",\\\"type\\\":\\\"YARN_APPLICATION_ATTEMPT\\\",\\\"info\\\":{\\\"YARN_\" + \"APPLICATION_ATTEMPT_MASTER_CONTAINER\\\":\\\"container_e01_154227157\" + \"0060_0002_01_000001\\\"},\\\"configs\\\":{},\\\"isrelatedto\\\":{},\\\"relat\" + \"esto\\\":{}}]\";\r\n    JSONArray obj = new JSONArray(appInfoEntity);\r\n    ClientResponse response = mock(ClientResponse.class);\r\n    doReturn(obj).when(response).getEntity(JSONArray.class);\r\n    doReturn(response).when(cli).getClientResponseFromTimelineReader(any(Configuration.class), any(String.class));\r\n    doThrow(new RuntimeException()).when(cli).getAMContainerInfoForRMWebService(any(Configuration.class), any(String.class));\r\n    cli.setConf(conf);\r\n    int exitCode = cli.run(new String[] { \"-applicationId\", \"application_1542271570060_0002\", \"-am\", \"1\" });\r\n    assertTrue(exitCode == 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testUnknownApplicationId",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testUnknownApplicationId() throws Exception\n{\r\n    YarnClient mockYarnClient = createMockYarnClientUnknownApp();\r\n    LogsCLI cli = new LogsCLIForTest(mockYarnClient);\r\n    cli.setConf(conf);\r\n    int exitCode = cli.run(new String[] { \"-applicationId\", ApplicationId.newInstance(1, 1).toString() });\r\n    assertTrue(exitCode != 0);\r\n    assertTrue(sysErrStream.toString().startsWith(\"Unable to get ApplicationState\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testUnknownApplicationAttemptId",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testUnknownApplicationAttemptId() throws Exception\n{\r\n    YarnClient mockYarnClient = createMockYarnClientUnknownApp();\r\n    LogsCLI cli = new LogsCLIForTest(mockYarnClient);\r\n    cli.setConf(conf);\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    int exitCode = cli.run(new String[] { \"-applicationAttemptId\", ApplicationAttemptId.newInstance(appId, 1).toString() });\r\n    assertTrue(exitCode != 0);\r\n    assertTrue(sysErrStream.toString().contains(\"Unable to get ApplicationState.\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testHelpMessage",
  "errType" : null,
  "containingMethodsNum" : 111,
  "sourceCodeText" : "void testHelpMessage() throws Exception\n{\r\n    YarnClient mockYarnClient = createMockYarnClient(YarnApplicationState.FINISHED, UserGroupInformation.getCurrentUser().getShortUserName());\r\n    LogsCLI dumper = new LogsCLIForTest(mockYarnClient);\r\n    dumper.setConf(conf);\r\n    int exitCode = dumper.run(new String[] {});\r\n    assertTrue(exitCode == -1);\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    PrintWriter pw = new PrintWriter(baos);\r\n    pw.println(\"Retrieve logs for YARN applications.\");\r\n    pw.println(\"usage: yarn logs -applicationId <application ID> [OPTIONS]\");\r\n    pw.println();\r\n    pw.println(\"general options are:\");\r\n    pw.println(\" -am <AM Containers>                          Prints the AM Container logs\");\r\n    pw.println(\"                                              for this application.\");\r\n    pw.println(\"                                              Specify comma-separated\");\r\n    pw.println(\"                                              value to get logs for\");\r\n    pw.println(\"                                              related AM Container. For\");\r\n    pw.println(\"                                              example, If we specify -am\");\r\n    pw.println(\"                                              1,2, we will get the logs\");\r\n    pw.println(\"                                              for the first AM Container\");\r\n    pw.println(\"                                              as well as the second AM\");\r\n    pw.println(\"                                              Container. To get logs for\");\r\n    pw.println(\"                                              all AM Containers, use -am\");\r\n    pw.println(\"                                              ALL. To get logs for the\");\r\n    pw.println(\"                                              latest AM Container, use -am\");\r\n    pw.println(\"                                              -1. By default, it will\");\r\n    pw.println(\"                                              print all available logs.\");\r\n    pw.println(\"                                              Work with -log_files to get\");\r\n    pw.println(\"                                              only specific logs.\");\r\n    pw.println(\" -appOwner <Application Owner>                AppOwner (assumed to be\");\r\n    pw.println(\"                                              current user if not\");\r\n    pw.println(\"                                              specified)\");\r\n    pw.println(\" -client_max_retries <Max Retries>            Set max retry number for a\");\r\n    pw.println(\"                                              retry client to get the\");\r\n    pw.println(\"                                              container logs for the\");\r\n    pw.println(\"                                              running applications. Use a\");\r\n    pw.println(\"                                              negative value to make retry\");\r\n    pw.println(\"                                              forever. The default value\");\r\n    pw.println(\"                                              is 30.\");\r\n    pw.println(\" -client_retry_interval_ms <Retry Interval>   Work with\");\r\n    pw.println(\"                                              --client_max_retries to\");\r\n    pw.println(\"                                              create a retry client. The\");\r\n    pw.println(\"                                              default value is 1000.\");\r\n    pw.println(\" -clusterId <Cluster ID>                      ClusterId. By default, it\");\r\n    pw.println(\"                                              will take default cluster id\");\r\n    pw.println(\"                                              from the RM\");\r\n    pw.println(\" -containerId <Container ID>                  ContainerId. By default, it\");\r\n    pw.println(\"                                              will print all available\");\r\n    pw.println(\"                                              logs. Work with -log_files\");\r\n    pw.println(\"                                              to get only specific logs.\");\r\n    pw.println(\"                                              If specified, the\");\r\n    pw.println(\"                                              applicationId can be omitted\");\r\n    pw.println(\" -help                                        Displays help for all\");\r\n    pw.println(\"                                              commands.\");\r\n    pw.println(\" -list_nodes                                  Show the list of nodes that\");\r\n    pw.println(\"                                              successfully aggregated\");\r\n    pw.println(\"                                              logs. This option can only\");\r\n    pw.println(\"                                              be used with finished\");\r\n    pw.println(\"                                              applications.\");\r\n    pw.println(\" -log_files <Log File Name>                   Specify comma-separated\");\r\n    pw.println(\"                                              value to get exact matched\");\r\n    pw.println(\"                                              log files. Use \\\"ALL\\\" or \\\"*\\\"\");\r\n    pw.println(\"                                              to fetch all the log files\");\r\n    pw.println(\"                                              for the container.\");\r\n    pw.println(\" -log_files_pattern <Log File Pattern>        Specify comma-separated\");\r\n    pw.println(\"                                              value to get matched log\");\r\n    pw.println(\"                                              files by using java regex.\");\r\n    pw.println(\"                                              Use \\\".*\\\" to fetch all the\");\r\n    pw.println(\"                                              log files for the container.\");\r\n    pw.println(\" -nodeAddress <Node Address>                  NodeAddress in the format\");\r\n    pw.println(\"                                              nodename:port\");\r\n    pw.println(\" -out <Local Directory>                       Local directory for storing\");\r\n    pw.println(\"                                              individual container logs.\");\r\n    pw.println(\"                                              The container logs will be\");\r\n    pw.println(\"                                              stored based on the node the\");\r\n    pw.println(\"                                              container ran on.\");\r\n    pw.println(\" -show_application_log_info                   Show the containerIds which\");\r\n    pw.println(\"                                              belong to the specific\");\r\n    pw.println(\"                                              Application. You can combine\");\r\n    pw.println(\"                                              this with --nodeAddress to\");\r\n    pw.println(\"                                              get containerIds for all the\");\r\n    pw.println(\"                                              containers on the specific\");\r\n    pw.println(\"                                              NodeManager.\");\r\n    pw.println(\" -show_container_log_info                     Show the container log\");\r\n    pw.println(\"                                              metadata, including log-file\");\r\n    pw.println(\"                                              names, the size of the log\");\r\n    pw.println(\"                                              files. You can combine this\");\r\n    pw.println(\"                                              with --containerId to get\");\r\n    pw.println(\"                                              log metadata for the\");\r\n    pw.println(\"                                              specific container, or with\");\r\n    pw.println(\"                                              --nodeAddress to get log\");\r\n    pw.println(\"                                              metadata for all the\");\r\n    pw.println(\"                                              containers on the specific\");\r\n    pw.println(\"                                              NodeManager.\");\r\n    pw.println(\" -size <size>                                 Prints the log file's first\");\r\n    pw.println(\"                                              'n' bytes or the last 'n'\");\r\n    pw.println(\"                                              bytes. Use negative values\");\r\n    pw.println(\"                                              as bytes to read from the\");\r\n    pw.println(\"                                              end and positive values as\");\r\n    pw.println(\"                                              bytes to read from the\");\r\n    pw.println(\"                                              beginning.\");\r\n    pw.println(\" -size_limit_mb <Size Limit>                  Use this option to limit the\");\r\n    pw.println(\"                                              size of the total logs which\");\r\n    pw.println(\"                                              could be fetched. By\");\r\n    pw.println(\"                                              default, we only allow to\");\r\n    pw.println(\"                                              fetch at most 10240 MB logs.\");\r\n    pw.println(\"                                              If the total log size is\");\r\n    pw.println(\"                                              larger than the specified\");\r\n    pw.println(\"                                              number, the CLI would fail.\");\r\n    pw.println(\"                                              The user could specify -1 to\");\r\n    pw.println(\"                                              ignore the size limit and\");\r\n    pw.println(\"                                              fetch all logs.\");\r\n    pw.close();\r\n    String appReportStr = baos.toString(\"UTF-8\");\r\n    Assert.assertTrue(sysOutStream.toString().contains(appReportStr));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testFetchFinishedApplictionLogs",
  "errType" : null,
  "containingMethodsNum" : 212,
  "sourceCodeText" : "void testFetchFinishedApplictionLogs() throws Exception\n{\r\n    String remoteLogRootDir = \"target/logs/\";\r\n    conf.setBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED, true);\r\n    conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR, remoteLogRootDir);\r\n    conf.setBoolean(YarnConfiguration.YARN_ACL_ENABLE, true);\r\n    conf.set(YarnConfiguration.YARN_ADMIN_ACL, \"admin\");\r\n    FileSystem fs = FileSystem.get(conf);\r\n    UserGroupInformation ugi = UserGroupInformation.getCurrentUser();\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    ApplicationAttemptId appAttemptId1 = ApplicationAttemptId.newInstance(appId, 1);\r\n    ApplicationAttemptId appAttemptId2 = ApplicationAttemptId.newInstance(appId, 2);\r\n    ContainerId containerId0 = ContainerId.newContainerId(appAttemptId1, 0);\r\n    ContainerId containerId1 = ContainerId.newContainerId(appAttemptId1, 1);\r\n    ContainerId containerId2 = ContainerId.newContainerId(appAttemptId1, 2);\r\n    ContainerId containerId3 = ContainerId.newContainerId(appAttemptId2, 3);\r\n    ContainerId containerId4 = ContainerId.newContainerId(appAttemptId2, 4);\r\n    final NodeId nodeId = NodeId.newInstance(\"localhost\", 1234);\r\n    final NodeId badNodeId = NodeId.newInstance(\"badhost\", 5678);\r\n    String rootLogDir = \"target/LocalLogs\";\r\n    Path rootLogDirPath = new Path(rootLogDir);\r\n    if (fs.exists(rootLogDirPath)) {\r\n        fs.delete(rootLogDirPath, true);\r\n    }\r\n    assertTrue(fs.mkdirs(rootLogDirPath));\r\n    Path appLogsDir = new Path(rootLogDirPath, appId.toString());\r\n    if (fs.exists(appLogsDir)) {\r\n        fs.delete(appLogsDir, true);\r\n    }\r\n    assertTrue(fs.mkdirs(appLogsDir));\r\n    List<String> rootLogDirs = Arrays.asList(rootLogDir);\r\n    List<String> logTypes = new ArrayList<String>();\r\n    logTypes.add(\"syslog\");\r\n    createContainerLogInLocalDir(appLogsDir, containerId1, fs, logTypes, ImmutableList.of(\"empty\"));\r\n    createContainerLogInLocalDir(appLogsDir, containerId2, fs, logTypes, Collections.emptyList());\r\n    logTypes.add(\"stdout\");\r\n    logTypes.add(\"stdout1234\");\r\n    createContainerLogInLocalDir(appLogsDir, containerId3, fs, logTypes, Collections.emptyList());\r\n    Path path = new Path(remoteLogRootDir + ugi.getShortUserName() + \"/bucket-logs-tfile/0001/application_0_0001\");\r\n    if (fs.exists(path)) {\r\n        fs.delete(path, true);\r\n    }\r\n    assertTrue(fs.mkdirs(path));\r\n    uploadEmptyContainerLogIntoRemoteDir(ugi, conf, rootLogDirs, nodeId, containerId0, path, fs);\r\n    uploadEmptyContainerLogIntoRemoteDir(ugi, conf, rootLogDirs, nodeId, containerId1, path, fs);\r\n    uploadContainerLogIntoRemoteDir(ugi, conf, rootLogDirs, nodeId, containerId1, path, fs);\r\n    uploadContainerLogIntoRemoteDir(ugi, conf, rootLogDirs, nodeId, containerId2, path, fs);\r\n    uploadContainerLogIntoRemoteDir(ugi, conf, rootLogDirs, nodeId, containerId3, path, fs);\r\n    uploadTruncatedTFileIntoRemoteDir(ugi, conf, badNodeId, containerId4, fs);\r\n    YarnClient mockYarnClient = createMockYarnClient(YarnApplicationState.FINISHED, ugi.getShortUserName());\r\n    LogsCLI cli = new LogsCLIForTest(mockYarnClient) {\r\n\r\n        @Override\r\n        public ContainerReport getContainerReport(String containerIdStr) throws YarnException, IOException {\r\n            ContainerReport mockReport = mock(ContainerReport.class);\r\n            doReturn(nodeId).when(mockReport).getAssignedNode();\r\n            doReturn(\"http://localhost:2345\").when(mockReport).getNodeHttpAddress();\r\n            return mockReport;\r\n        }\r\n    };\r\n    cli.setConf(conf);\r\n    int exitCode = cli.run(new String[] { \"-applicationId\", appId.toString() });\r\n    LOG.info(sysOutStream.toString());\r\n    assertTrue(exitCode == 0);\r\n    assertTrue(sysOutStream.toString().contains(logMessage(containerId1, \"syslog\")));\r\n    assertTrue(sysOutStream.toString().contains(logMessage(containerId2, \"syslog\")));\r\n    assertTrue(sysOutStream.toString().contains(logMessage(containerId3, \"syslog\")));\r\n    assertTrue(sysOutStream.toString().contains(logMessage(containerId3, \"stdout\")));\r\n    assertTrue(sysOutStream.toString().contains(logMessage(containerId3, \"stdout1234\")));\r\n    assertTrue(sysOutStream.toString().contains(createEmptyLog(\"empty\")));\r\n    sysOutStream.reset();\r\n    exitCode = cli.run(new String[] { \"-applicationId\", appId.toString(), \"-applicationAttemptId\", appAttemptId1.toString() });\r\n    LOG.info(sysOutStream.toString());\r\n    assertTrue(exitCode == 0);\r\n    assertTrue(sysOutStream.toString().contains(logMessage(containerId1, \"syslog\")));\r\n    assertTrue(sysOutStream.toString().contains(logMessage(containerId2, \"syslog\")));\r\n    assertTrue(sysOutStream.toString().contains(logMessage(containerId3, \"syslog\")));\r\n    assertFalse(sysOutStream.toString().contains(logMessage(containerId3, \"stdout\")));\r\n    assertFalse(sysOutStream.toString().contains(logMessage(containerId3, \"stdout1234\")));\r\n    assertTrue(sysOutStream.toString().contains(createEmptyLog(\"empty\")));\r\n    sysOutStream.reset();\r\n    exitCode = cli.run(new String[] { \"-applicationAttemptId\", appAttemptId1.toString() });\r\n    LOG.info(sysOutStream.toString());\r\n    assertTrue(exitCode == 0);\r\n    assertTrue(sysOutStream.toString().contains(logMessage(containerId1, \"syslog\")));\r\n    assertTrue(sysOutStream.toString().contains(logMessage(containerId2, \"syslog\")));\r\n    assertTrue(sysOutStream.toString().contains(logMessage(containerId3, \"syslog\")));\r\n    assertFalse(sysOutStream.toString().contains(logMessage(containerId3, \"stdout\")));\r\n    assertFalse(sysOutStream.toString().contains(logMessage(containerId3, \"stdout1234\")));\r\n    assertTrue(sysOutStream.toString().contains(createEmptyLog(\"empty\")));\r\n    sysOutStream.reset();\r\n    exitCode = cli.run(new String[] { \"-applicationId\", appId.toString(), \"-log_files_pattern\", \".*\" });\r\n    assertTrue(exitCode == 0);\r\n    assertTrue(sysOutStream.toString().contains(logMessage(containerId1, \"syslog\")));\r\n    assertTrue(sysOutStream.toString().contains(logMessage(containerId2, \"syslog\")));\r\n    assertTrue(sysOutStream.toString().contains(logMessage(containerId3, \"syslog\")));\r\n    assertTrue(sysOutStream.toString().contains(logMessage(containerId3, \"stdout\")));\r\n    assertTrue(sysOutStream.toString().contains(logMessage(containerId3, \"stdout1234\")));\r\n    assertTrue(sysOutStream.toString().contains(createEmptyLog(\"empty\")));\r\n    sysOutStream.reset();\r\n    exitCode = cli.run(new String[] { \"-applicationId\", appId.toString(), \"-log_files\", \"*\" });\r\n    assertTrue(exitCode == 0);\r\n    assertTrue(sysOutStream.toString().contains(logMessage(containerId1, \"syslog\")));\r\n    assertTrue(sysOutStream.toString().contains(logMessage(containerId2, \"syslog\")));\r\n    assertTrue(sysOutStream.toString().contains(logMessage(containerId3, \"syslog\")));\r\n    assertTrue(sysOutStream.toString().contains(logMessage(containerId3, \"stdout\")));\r\n    assertTrue(sysOutStream.toString().contains(logMessage(containerId3, \"stdout1234\")));\r\n    assertTrue(sysOutStream.toString().contains(createEmptyLog(\"empty\")));\r\n    int fullSize = sysOutStream.toByteArray().length;\r\n    sysOutStream.reset();\r\n    exitCode = cli.run(new String[] { \"-applicationId\", appId.toString(), \"-log_files\", \"stdout\" });\r\n    assertTrue(exitCode == 0);\r\n    assertFalse(sysOutStream.toString().contains(logMessage(containerId1, \"syslog\")));\r\n    assertFalse(sysOutStream.toString().contains(logMessage(containerId2, \"syslog\")));\r\n    assertFalse(sysOutStream.toString().contains(logMessage(containerId3, \"syslog\")));\r\n    assertTrue(sysOutStream.toString().contains(logMessage(containerId3, \"stdout\")));\r\n    assertFalse(sysOutStream.toString().contains(logMessage(containerId3, \"stdout1234\")));\r\n    assertFalse(sysOutStream.toString().contains(createEmptyLog(\"empty\")));\r\n    sysOutStream.reset();\r\n    exitCode = cli.run(new String[] { \"-applicationId\", appId.toString(), \"-logFiles\", \"stdout\" });\r\n    assertTrue(\"Failed with -logFiles\", exitCode == 0);\r\n    assertFalse(\"Failed with -logFiles\", sysOutStream.toString().contains(logMessage(containerId1, \"syslog\")));\r\n    assertFalse(\"Failed with -logFiles\", sysOutStream.toString().contains(logMessage(containerId2, \"syslog\")));\r\n    assertFalse(\"Failed with -logFiles\", sysOutStream.toString().contains(logMessage(containerId3, \"syslog\")));\r\n    assertTrue(\"Failed with -logFiles\", sysOutStream.toString().contains(logMessage(containerId3, \"stdout\")));\r\n    assertFalse(\"Failed with -logFiles\", sysOutStream.toString().contains(logMessage(containerId3, \"stdout1234\")));\r\n    assertFalse(\"Failed with -logFiles\", sysOutStream.toString().contains(createEmptyLog(\"empty\")));\r\n    sysOutStream.reset();\r\n    exitCode = cli.run(new String[] { \"-applicationId\", appId.toString(), \"-log_files\", \"stdout\", \"-logFiles\", \"syslog\" });\r\n    assertTrue(\"Failed with -logFiles and -log_files\", exitCode == 0);\r\n    assertFalse(\"Failed with -logFiles and -log_files\", sysOutStream.toString().contains(logMessage(containerId1, \"syslog\")));\r\n    assertFalse(\"Failed with -logFiles and -log_files\", sysOutStream.toString().contains(logMessage(containerId2, \"syslog\")));\r\n    assertFalse(\"Failed with -logFiles and -log_files\", sysOutStream.toString().contains(logMessage(containerId3, \"syslog\")));\r\n    assertTrue(\"Failed with -logFiles and -log_files\", sysOutStream.toString().contains(logMessage(containerId3, \"stdout\")));\r\n    assertFalse(\"Failed with -logFiles and -log_files\", sysOutStream.toString().contains(logMessage(containerId3, \"stdout1234\")));\r\n    assertFalse(\"Failed with -logFiles and -log_files\", sysOutStream.toString().contains(createEmptyLog(\"empty\")));\r\n    sysOutStream.reset();\r\n    exitCode = cli.run(new String[] { \"-applicationId\", appId.toString(), \"-log_files_pattern\", \"std*\" });\r\n    assertTrue(exitCode == 0);\r\n    assertFalse(sysOutStream.toString().contains(logMessage(containerId1, \"syslog\")));\r\n    assertFalse(sysOutStream.toString().contains(logMessage(containerId2, \"syslog\")));\r\n    assertFalse(sysOutStream.toString().contains(logMessage(containerId3, \"syslog\")));\r\n    assertTrue(sysOutStream.toString().contains(logMessage(containerId3, \"stdout\")));\r\n    assertTrue(sysOutStream.toString().contains(logMessage(containerId3, \"stdout1234\")));\r\n    assertFalse(sysOutStream.toString().contains(createEmptyLog(\"empty\")));\r\n    sysOutStream.reset();\r\n    exitCode = cli.run(new String[] { \"-applicationId\", appId.toString(), \"-log_files\", \"123\" });\r\n    assertTrue(exitCode == -1);\r\n    assertTrue(sysErrStream.toString().contains(\"Can not find any log file matching the pattern: [123] \" + \"for the application: \" + appId.toString()));\r\n    sysErrStream.reset();\r\n    exitCode = cli.run(new String[] { \"-applicationId\", appId.toString(), \"-log_files\", \"*\", \"-size\", \"10000\" });\r\n    assertTrue(exitCode == 0);\r\n    assertTrue(sysOutStream.toByteArray().length == fullSize);\r\n    sysOutStream.reset();\r\n    exitCode = cli.run(new String[] { \"-applicationId\", appId.toString(), \"-nodeAddress\", nodeId.toString(), \"-containerId\", containerId1.toString() });\r\n    assertTrue(exitCode == 0);\r\n    assertTrue(sysOutStream.toString().contains(logMessage(containerId1, \"syslog\")));\r\n    assertTrue(sysOutStream.toString().contains(\"LogLastModifiedTime\"));\r\n    assertTrue(!sysOutStream.toString().contains(\"Logs for container \" + containerId1.toString() + \" are not present in this log-file.\"));\r\n    sysOutStream.reset();\r\n    exitCode = cli.run(new String[] { \"-applicationId\", appId.toString(), \"-containerId\", containerId3.toString(), \"-log_files\", \"123\" });\r\n    assertTrue(exitCode == -1);\r\n    assertTrue(sysErrStream.toString().contains(\"Can not find any log file matching the pattern: [123] \" + \"for the container: \" + containerId3 + \" within the application: \" + appId.toString()));\r\n    sysErrStream.reset();\r\n    exitCode = cli.run(new String[] { \"-applicationId\", appId.toString(), \"-containerId\", containerId3.toString(), \"-log_files\", \"stdout\" });\r\n    assertTrue(exitCode == 0);\r\n    int fullContextSize = sysOutStream.toByteArray().length;\r\n    String fullContext = sysOutStream.toString();\r\n    sysOutStream.reset();\r\n    String logMessage = logMessage(containerId3, \"stdout\");\r\n    int fileContentSize = logMessage.getBytes().length;\r\n    StringBuilder sb = new StringBuilder();\r\n    String endOfFile = \"End of LogType:stdout\";\r\n    sb.append(\"\\n\" + endOfFile + \"\\n\");\r\n    sb.append(StringUtils.repeat(\"*\", endOfFile.length() + 50) + \"\\n\\n\");\r\n    int tailContentSize = sb.toString().length();\r\n    exitCode = cli.run(new String[] { \"-applicationId\", appId.toString(), \"-containerId\", containerId3.toString(), \"-log_files\", \"stdout\", \"-size\", \"5\" });\r\n    assertTrue(exitCode == 0);\r\n    Assert.assertEquals(new String(logMessage.getBytes(), 0, 5), new String(sysOutStream.toByteArray(), (fullContextSize - fileContentSize - tailContentSize), 5));\r\n    sysOutStream.reset();\r\n    exitCode = cli.run(new String[] { \"-applicationId\", appId.toString(), \"-containerId\", containerId1.toString(), \"-log_files\", \"empty\", \"-size\", \"5\" });\r\n    assertTrue(exitCode == 0);\r\n    assertTrue(sysOutStream.toString().contains(createEmptyLog(\"empty\")));\r\n    sysOutStream.reset();\r\n    exitCode = cli.run(new String[] { \"-applicationId\", appId.toString(), \"-containerId\", containerId3.toString(), \"-log_files\", \"stdout\", \"-size\", \"-5\" });\r\n    assertTrue(exitCode == 0);\r\n    Assert.assertEquals(new String(logMessage.getBytes(), logMessage.getBytes().length - 5, 5), new String(sysOutStream.toByteArray(), (fullContextSize - fileContentSize - tailContentSize), 5));\r\n    sysOutStream.reset();\r\n    long negative = (fullContextSize + 1000) * (-1);\r\n    exitCode = cli.run(new String[] { \"-applicationId\", appId.toString(), \"-containerId\", containerId3.toString(), \"-log_files\", \"stdout\", \"-size\", Long.toString(negative) });\r\n    assertTrue(exitCode == 0);\r\n    Assert.assertEquals(fullContext, sysOutStream.toString());\r\n    sysOutStream.reset();\r\n    exitCode = cli.run(new String[] { \"-applicationId\", appId.toString(), \"-nodeAddress\", nodeId.toString(), \"-containerId\", containerId0.toString() });\r\n    assertTrue(exitCode == -1);\r\n    assertTrue(sysErrStream.toString().contains(\"Can not find any log file matching the pattern\"));\r\n    sysErrStream.reset();\r\n    exitCode = cli.run(new String[] { \"-applicationId\", appId.toString(), \"-nodeAddress\", nodeId.toString(), \"-containerId\", containerId3.toString() });\r\n    assertTrue(exitCode == 0);\r\n    assertTrue(sysOutStream.toString().contains(logMessage(containerId3, \"syslog\")));\r\n    assertTrue(sysOutStream.toString().contains(logMessage(containerId3, \"stdout\")));\r\n    sysOutStream.reset();\r\n    exitCode = cli.run(new String[] { \"-applicationId\", appId.toString(), \"-nodeAddress\", nodeId.toString(), \"-containerId\", containerId3.toString(), \"-log_files\", \"stdout\" });\r\n    assertTrue(exitCode == 0);\r\n    assertTrue(sysOutStream.toString().contains(logMessage(containerId3, \"stdout\")));\r\n    assertTrue(!sysOutStream.toString().contains(logMessage(containerId3, \"syslog\")));\r\n    sysOutStream.reset();\r\n    YarnClient mockYarnClientWithException = createMockYarnClientWithException();\r\n    cli = new LogsCLIForTest(mockYarnClientWithException);\r\n    cli.setConf(conf);\r\n    exitCode = cli.run(new String[] { \"-applicationId\", appId.toString(), \"-containerId\", containerId3.toString() });\r\n    assertTrue(exitCode == 0);\r\n    assertTrue(sysOutStream.toString().contains(logMessage(containerId3, \"syslog\")));\r\n    assertTrue(sysOutStream.toString().contains(logMessage(containerId3, \"stdout\")));\r\n    assertTrue(sysOutStream.toString().contains(containerId3 + \" on \" + LogAggregationUtils.getNodeString(nodeId)));\r\n    sysOutStream.reset();\r\n    exitCode = cli.run(new String[] { \"-containerId\", containerId3.toString() });\r\n    assertTrue(exitCode == 0);\r\n    assertTrue(sysOutStream.toString().contains(logMessage(containerId3, \"syslog\")));\r\n    assertTrue(sysOutStream.toString().contains(logMessage(containerId3, \"stdout\")));\r\n    assertTrue(sysOutStream.toString().contains(containerId3 + \" on \" + LogAggregationUtils.getNodeString(nodeId)));\r\n    sysOutStream.reset();\r\n    exitCode = cli.run(new String[] { \"-containerId\", \"invalid_container\" });\r\n    assertTrue(exitCode == -1);\r\n    assertTrue(sysErrStream.toString().contains(\"Invalid ContainerId specified\"));\r\n    sysErrStream.reset();\r\n    exitCode = cli.run(new String[] { \"-applicationId\", appId.toString(), \"-nodeAddress\", badNodeId.toString(), \"-containerId\", containerId4.toString() });\r\n    assertTrue(exitCode == -1);\r\n    assertTrue(sysErrStream.toString().contains(\"Can not find any log file matching the pattern\"));\r\n    sysErrStream.reset();\r\n    fs.delete(new Path(remoteLogRootDir), true);\r\n    fs.delete(new Path(rootLogDir), true);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testCheckRetryCount",
  "errType" : [ "RuntimeException" ],
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void testCheckRetryCount() throws Exception\n{\r\n    UserGroupInformation ugi = UserGroupInformation.getCurrentUser();\r\n    NodeId nodeId = NodeId.newInstance(\"localhost\", 1234);\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ApplicationAttemptReport mockAttemptReport = mock(ApplicationAttemptReport.class);\r\n    doReturn(appAttemptId).when(mockAttemptReport).getApplicationAttemptId();\r\n    List<ApplicationAttemptReport> attemptReports = Arrays.asList(mockAttemptReport);\r\n    ContainerId containerId1 = ContainerId.newContainerId(appAttemptId, 1);\r\n    ContainerReport mockContainerReport1 = mock(ContainerReport.class);\r\n    doReturn(containerId1).when(mockContainerReport1).getContainerId();\r\n    doReturn(nodeId).when(mockContainerReport1).getAssignedNode();\r\n    doReturn(\"http://localhost:2345\").when(mockContainerReport1).getNodeHttpAddress();\r\n    doReturn(ContainerState.RUNNING).when(mockContainerReport1).getContainerState();\r\n    List<ContainerReport> containerReports = Arrays.asList(mockContainerReport1);\r\n    YarnClient mockYarnClient = createMockYarnClient(YarnApplicationState.RUNNING, ugi.getShortUserName(), true, attemptReports, containerReports);\r\n    doReturn(mockContainerReport1).when(mockYarnClient).getContainerReport(any(ContainerId.class));\r\n    LogsCLI cli = new LogsCLIForTest(mockYarnClient);\r\n    cli.setConf(new YarnConfiguration());\r\n    try {\r\n        cli.run(new String[] { \"-containerId\", containerId1.toString(), \"-client_max_retries\", \"5\" });\r\n        Assert.fail(\"Exception expected! \" + \"NodeManager should be off to run this test. \");\r\n    } catch (RuntimeException ce) {\r\n        Assert.assertTrue(\"Handler exception for reason other than retry: \" + ce.getMessage(), ce.getMessage().contains(\"Connection retries limit exceeded\"));\r\n        Assert.assertTrue(\"Retry filter didn't perform any retries! \", cli.connectionRetry.getRetired());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testGetRunningContainerLogs",
  "errType" : null,
  "containingMethodsNum" : 42,
  "sourceCodeText" : "void testGetRunningContainerLogs() throws Exception\n{\r\n    UserGroupInformation ugi = UserGroupInformation.getCurrentUser();\r\n    NodeId nodeId = NodeId.newInstance(\"localhost\", 1234);\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ApplicationAttemptReport mockAttemptReport = mock(ApplicationAttemptReport.class);\r\n    doReturn(appAttemptId).when(mockAttemptReport).getApplicationAttemptId();\r\n    List<ApplicationAttemptReport> attemptReports = Arrays.asList(mockAttemptReport);\r\n    ContainerId containerId1 = ContainerId.newContainerId(appAttemptId, 1);\r\n    ContainerReport mockContainerReport1 = mock(ContainerReport.class);\r\n    doReturn(containerId1).when(mockContainerReport1).getContainerId();\r\n    doReturn(nodeId).when(mockContainerReport1).getAssignedNode();\r\n    doReturn(\"http://localhost:2345\").when(mockContainerReport1).getNodeHttpAddress();\r\n    doReturn(ContainerState.RUNNING).when(mockContainerReport1).getContainerState();\r\n    List<ContainerReport> containerReports = Arrays.asList(mockContainerReport1);\r\n    YarnClient mockYarnClient = createMockYarnClient(YarnApplicationState.RUNNING, ugi.getShortUserName(), true, attemptReports, containerReports);\r\n    doReturn(mockContainerReport1).when(mockYarnClient).getContainerReport(any(ContainerId.class));\r\n    FileSystem fs = FileSystem.get(conf);\r\n    String rootLogDir = \"target/LocalLogs\";\r\n    Path rootLogDirPath = new Path(rootLogDir);\r\n    if (fs.exists(rootLogDirPath)) {\r\n        fs.delete(rootLogDirPath, true);\r\n    }\r\n    assertTrue(fs.mkdirs(rootLogDirPath));\r\n    Path appLogsDir = new Path(rootLogDirPath, appId.toString());\r\n    if (fs.exists(appLogsDir)) {\r\n        fs.delete(appLogsDir, true);\r\n    }\r\n    assertTrue(fs.mkdirs(appLogsDir));\r\n    String fileName = \"syslog\";\r\n    List<String> logTypes = new ArrayList<String>();\r\n    logTypes.add(fileName);\r\n    createContainerLogInLocalDir(appLogsDir, containerId1, fs, logTypes, Collections.emptyList());\r\n    Path containerDirPath = new Path(appLogsDir, containerId1.toString());\r\n    Path logPath = new Path(containerDirPath, fileName);\r\n    File logFile = new File(logPath.toString());\r\n    final FileInputStream fis = new FileInputStream(logFile);\r\n    try {\r\n        LogsCLI cli = spy(new LogsCLIForTest(mockYarnClient));\r\n        Set<String> logsSet = new HashSet<String>();\r\n        logsSet.add(fileName);\r\n        doReturn(logsSet).when(cli).getMatchedContainerLogFiles(any(ContainerLogsRequest.class), anyBoolean(), anyBoolean());\r\n        ClientResponse mockReponse = mock(ClientResponse.class);\r\n        doReturn(Status.OK).when(mockReponse).getStatusInfo();\r\n        doReturn(fis).when(mockReponse).getEntityInputStream();\r\n        doReturn(mockReponse).when(cli).getResponseFromNMWebService(any(Configuration.class), any(Client.class), any(ContainerLogsRequest.class), anyString());\r\n        cli.setConf(new YarnConfiguration());\r\n        int exitCode = cli.run(new String[] { \"-containerId\", containerId1.toString() });\r\n        assertTrue(exitCode == 0);\r\n        assertTrue(sysOutStream.toString().contains(logMessage(containerId1, \"syslog\")));\r\n        sysOutStream.reset();\r\n    } finally {\r\n        IOUtils.closeStream(fis);\r\n        fs.delete(new Path(rootLogDir), true);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testFetchRunningApplicationLogs",
  "errType" : null,
  "containingMethodsNum" : 53,
  "sourceCodeText" : "void testFetchRunningApplicationLogs() throws Exception\n{\r\n    UserGroupInformation ugi = UserGroupInformation.getCurrentUser();\r\n    NodeId nodeId = NodeId.newInstance(\"localhost\", 1234);\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ApplicationAttemptReport mockAttemptReport = mock(ApplicationAttemptReport.class);\r\n    doReturn(appAttemptId).when(mockAttemptReport).getApplicationAttemptId();\r\n    List<ApplicationAttemptReport> attemptReports = Arrays.asList(mockAttemptReport);\r\n    ContainerId containerId1 = ContainerId.newContainerId(appAttemptId, 1);\r\n    ContainerReport mockContainerReport1 = mock(ContainerReport.class);\r\n    doReturn(containerId1).when(mockContainerReport1).getContainerId();\r\n    doReturn(nodeId).when(mockContainerReport1).getAssignedNode();\r\n    doReturn(\"http://localhost:2345\").when(mockContainerReport1).getNodeHttpAddress();\r\n    ContainerId containerId2 = ContainerId.newContainerId(appAttemptId, 2);\r\n    ContainerReport mockContainerReport2 = mock(ContainerReport.class);\r\n    doReturn(containerId2).when(mockContainerReport2).getContainerId();\r\n    doReturn(nodeId).when(mockContainerReport2).getAssignedNode();\r\n    doReturn(\"http://localhost:2345\").when(mockContainerReport2).getNodeHttpAddress();\r\n    List<ContainerReport> containerReports = Arrays.asList(mockContainerReport1, mockContainerReport2);\r\n    YarnClient mockYarnClient = createMockYarnClient(YarnApplicationState.RUNNING, ugi.getShortUserName(), true, attemptReports, containerReports);\r\n    LogsCLI cli = spy(new LogsCLIForTest(mockYarnClient));\r\n    doReturn(0).when(cli).printContainerLogsFromRunningApplication(any(Configuration.class), any(ContainerLogsRequest.class), any(LogCLIHelpers.class), anyBoolean(), anyBoolean());\r\n    Set<String> logTypes = new HashSet<>();\r\n    logTypes.add(\"ALL\");\r\n    ContainerLogsRequest mockContainer1 = mock(ContainerLogsRequest.class);\r\n    doReturn(logTypes).when(mockContainer1).getLogTypes();\r\n    ContainerLogsRequest mockContainer2 = mock(ContainerLogsRequest.class);\r\n    doReturn(logTypes).when(mockContainer2).getLogTypes();\r\n    Map<String, ContainerLogsRequest> matchedLogTypes = new HashMap<>();\r\n    matchedLogTypes.put(containerId1.toString(), mockContainer1);\r\n    matchedLogTypes.put(containerId2.toString(), mockContainer2);\r\n    doReturn(matchedLogTypes).when(cli).getMatchedLogTypesForRunningApp(anyList(), anyBoolean(), anyBoolean());\r\n    cli.setConf(new YarnConfiguration());\r\n    int exitCode = cli.run(new String[] { \"-applicationId\", appId.toString() });\r\n    assertTrue(exitCode == 0);\r\n    ArgumentCaptor<ContainerLogsRequest> logsRequestCaptor = ArgumentCaptor.forClass(ContainerLogsRequest.class);\r\n    verify(cli, times(2)).printContainerLogsFromRunningApplication(any(Configuration.class), logsRequestCaptor.capture(), any(LogCLIHelpers.class), anyBoolean(), anyBoolean());\r\n    List<ContainerLogsRequest> capturedRequests = logsRequestCaptor.getAllValues();\r\n    Assert.assertEquals(2, capturedRequests.size());\r\n    Set<String> logTypes0 = capturedRequests.get(0).getLogTypes();\r\n    Set<String> logTypes1 = capturedRequests.get(1).getLogTypes();\r\n    Assert.assertTrue(logTypes0.contains(\"ALL\") && (logTypes0.size() == 1));\r\n    Assert.assertTrue(logTypes1.contains(\"ALL\") && (logTypes1.size() == 1));\r\n    mockYarnClient = createMockYarnClientWithException(YarnApplicationState.RUNNING, ugi.getShortUserName());\r\n    LogsCLI cli2 = spy(new LogsCLIForTest(mockYarnClient));\r\n    ContainerLogsRequest newOption = mock(ContainerLogsRequest.class);\r\n    doReturn(newOption).when(cli2).getMatchedOptionForRunningApp(any(ContainerLogsRequest.class), anyBoolean(), anyBoolean());\r\n    doReturn(0).when(cli2).printContainerLogsFromRunningApplication(any(Configuration.class), any(ContainerLogsRequest.class), any(LogCLIHelpers.class), anyBoolean(), anyBoolean());\r\n    doReturn(\"123\").when(cli2).getNodeHttpAddressFromRMWebString(any(ContainerLogsRequest.class));\r\n    cli2.setConf(new YarnConfiguration());\r\n    ContainerId containerId100 = ContainerId.newContainerId(appAttemptId, 100);\r\n    System.out.println(containerId100.toString());\r\n    System.out.println(appId.toString());\r\n    exitCode = cli2.run(new String[] { \"-applicationId\", appId.toString(), \"-containerId\", containerId100.toString(), \"-nodeAddress\", \"NM:1234\" });\r\n    assertTrue(exitCode == 0);\r\n    verify(cli2, times(1)).printContainerLogsFromRunningApplication(any(Configuration.class), logsRequestCaptor.capture(), any(LogCLIHelpers.class), anyBoolean(), anyBoolean());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testFetchApplictionLogsAsAnotherUser",
  "errType" : null,
  "containingMethodsNum" : 64,
  "sourceCodeText" : "void testFetchApplictionLogsAsAnotherUser() throws Exception\n{\r\n    String remoteLogRootDir = \"target/logs/\";\r\n    String rootLogDir = \"target/LocalLogs\";\r\n    String testUser = \"test\";\r\n    UserGroupInformation testUgi = UserGroupInformation.createRemoteUser(testUser);\r\n    conf.setBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED, true);\r\n    conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR, remoteLogRootDir);\r\n    conf.setBoolean(YarnConfiguration.YARN_ACL_ENABLE, true);\r\n    conf.set(YarnConfiguration.YARN_ADMIN_ACL, \"admin\");\r\n    FileSystem fs = FileSystem.get(conf);\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId containerId = ContainerId.newContainerId(appAttemptId, 1);\r\n    NodeId nodeId = NodeId.newInstance(\"localhost\", 1234);\r\n    try {\r\n        Path rootLogDirPath = new Path(rootLogDir);\r\n        if (fs.exists(rootLogDirPath)) {\r\n            fs.delete(rootLogDirPath, true);\r\n        }\r\n        assertTrue(fs.mkdirs(rootLogDirPath));\r\n        final Path appLogsDir = new Path(rootLogDirPath, appId.toString());\r\n        if (fs.exists(appLogsDir)) {\r\n            fs.delete(appLogsDir, true);\r\n        }\r\n        assertTrue(fs.mkdirs(appLogsDir));\r\n        List<String> rootLogDirs = Arrays.asList(rootLogDir);\r\n        List<String> logTypes = new ArrayList<String>();\r\n        logTypes.add(\"syslog\");\r\n        createContainerLogInLocalDir(appLogsDir, containerId, fs, logTypes, Collections.emptyList());\r\n        Path path = new Path(remoteLogRootDir + testUser + \"/bucket-logs-tfile/0001/\" + appId);\r\n        if (fs.exists(path)) {\r\n            fs.delete(path, true);\r\n        }\r\n        assertTrue(fs.mkdirs(path));\r\n        uploadContainerLogIntoRemoteDir(testUgi, conf, rootLogDirs, nodeId, containerId, path, fs);\r\n        YarnClient mockYarnClient = createMockYarnClient(YarnApplicationState.FINISHED, testUgi.getShortUserName());\r\n        LogsCLI cli = new LogsCLIForTest(mockYarnClient);\r\n        cli.setConf(conf);\r\n        int exitCode = cli.run(new String[] { \"-applicationId\", appId.toString(), \"-appOwner\", testUser });\r\n        assertTrue(exitCode == 0);\r\n        assertTrue(sysOutStream.toString().contains(logMessage(containerId, \"syslog\")));\r\n        sysOutStream.reset();\r\n        exitCode = cli.run(new String[] { \"-applicationId\", appId.toString(), \"-appOwner\", \"invalid\" });\r\n        assertTrue(exitCode == -1);\r\n        assertTrue(sysErrStream.toString().contains(\"Can not find the logs \" + \"for the application: \" + appId.toString()));\r\n        sysErrStream.reset();\r\n        YarnClient mockYarnClient2 = createMockYarnClientUnknownApp();\r\n        cli = new LogsCLIForTest(mockYarnClient2);\r\n        cli.setConf(conf);\r\n        exitCode = cli.run(new String[] { \"-applicationId\", appId.toString() });\r\n        assertTrue(exitCode == 0);\r\n        assertTrue(sysOutStream.toString().contains(logMessage(containerId, \"syslog\")));\r\n        sysOutStream.reset();\r\n        path = new Path(remoteLogRootDir + testUser + \"/logs/\" + appId);\r\n        if (fs.exists(path)) {\r\n            fs.delete(path, true);\r\n        }\r\n        assertTrue(fs.mkdirs(path));\r\n        uploadContainerLogIntoRemoteDir(testUgi, conf, rootLogDirs, nodeId, containerId, path, fs);\r\n        exitCode = cli.run(new String[] { \"-applicationId\", appId.toString() });\r\n        assertTrue(exitCode == 0);\r\n        assertTrue(sysOutStream.toString().contains(logMessage(containerId, \"syslog\")));\r\n        sysOutStream.reset();\r\n        ApplicationId appId2 = ApplicationId.newInstance(System.currentTimeMillis(), 2);\r\n        exitCode = cli.run(new String[] { \"-applicationId\", appId2.toString() });\r\n        assertTrue(exitCode == -1);\r\n        assertTrue(sysErrStream.toString().contains(\"Can not find the appOwner\"));\r\n        sysErrStream.reset();\r\n        ApplicationId appTest = ApplicationId.newInstance(System.currentTimeMillis(), 1000);\r\n        String priorityUser = \"priority\";\r\n        Path pathWithoutPerm = new Path(remoteLogRootDir + priorityUser + \"/bucket-logs-tfile/1000/\" + appTest);\r\n        if (fs.exists(pathWithoutPerm)) {\r\n            fs.delete(pathWithoutPerm, true);\r\n        }\r\n        FsPermission permission = FsPermission.createImmutable((short) 01300);\r\n        assertTrue(fs.mkdirs(pathWithoutPerm, permission));\r\n        exitCode = cli.run(new String[] { \"-applicationId\", appTest.toString() });\r\n        assertTrue(exitCode == -1);\r\n        assertTrue(sysErrStream.toString().contains(\"Can not find the logs for the application: \" + appTest.toString()));\r\n        sysErrStream.reset();\r\n    } finally {\r\n        fs.delete(new Path(remoteLogRootDir), true);\r\n        fs.delete(new Path(rootLogDir), true);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testWithInvalidApplicationId",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testWithInvalidApplicationId() throws Exception\n{\r\n    LogsCLI cli = createCli();\r\n    int exitCode = cli.run(new String[] { \"-applicationId\", \"123\" });\r\n    assertTrue(exitCode == -1);\r\n    assertTrue(sysErrStream.toString().contains(\"Invalid ApplicationId specified\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testWithInvalidAppAttemptId",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testWithInvalidAppAttemptId() throws Exception\n{\r\n    LogsCLI cli = createCli();\r\n    int exitCode = cli.run(new String[] { \"-applicationAttemptId\", \"123\" });\r\n    assertTrue(exitCode == -1);\r\n    assertTrue(sysErrStream.toString().contains(\"Invalid AppAttemptId specified\"));\r\n    sysErrStream.reset();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testWithInvalidContainerId",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testWithInvalidContainerId() throws Exception\n{\r\n    LogsCLI cli = createCli();\r\n    int exitCode = cli.run(new String[] { \"-containerId\", \"123\" });\r\n    assertTrue(exitCode == -1);\r\n    assertTrue(sysErrStream.toString().contains(\"Invalid ContainerId specified\"));\r\n    sysErrStream.reset();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testWithNonMatchingEntityIds",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testWithNonMatchingEntityIds() throws Exception\n{\r\n    ApplicationId appId1 = ApplicationId.newInstance(0, 1);\r\n    ApplicationId appId2 = ApplicationId.newInstance(0, 2);\r\n    ApplicationAttemptId appAttemptId1 = ApplicationAttemptId.newInstance(appId1, 1);\r\n    ApplicationAttemptId appAttemptId2 = ApplicationAttemptId.newInstance(appId2, 1);\r\n    ContainerId containerId0 = ContainerId.newContainerId(appAttemptId1, 0);\r\n    LogsCLI cli = createCli();\r\n    int exitCode = cli.run(new String[] { \"-applicationId\", appId2.toString(), \"-applicationAttemptId\", appAttemptId1.toString() });\r\n    assertTrue(exitCode == -1);\r\n    assertTrue(sysErrStream.toString().contains(\"The Application:\" + appId2.toString() + \" does not have the AppAttempt:\" + appAttemptId1.toString()));\r\n    sysErrStream.reset();\r\n    exitCode = cli.run(new String[] { \"-applicationId\", appId2.toString(), \"-containerId\", containerId0.toString() });\r\n    assertTrue(exitCode == -1);\r\n    assertTrue(sysErrStream.toString().contains(\"The Application:\" + appId2.toString() + \" does not have the container:\" + containerId0.toString()));\r\n    sysErrStream.reset();\r\n    exitCode = cli.run(new String[] { \"-applicationAttemptId\", appAttemptId2.toString(), \"-containerId\", containerId0.toString() });\r\n    assertTrue(exitCode == -1);\r\n    assertTrue(sysErrStream.toString().contains(\"The AppAttempt:\" + appAttemptId2.toString() + \" does not have the container:\" + containerId0.toString()));\r\n    sysErrStream.reset();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testWithExclusiveArguments",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testWithExclusiveArguments() throws Exception\n{\r\n    ApplicationId appId1 = ApplicationId.newInstance(0, 1);\r\n    LogsCLI cli = createCli();\r\n    int exitCode = cli.run(new String[] { \"-applicationId\", appId1.toString(), \"-show_container_log_info\", \"-show_application_log_info\" });\r\n    assertTrue(exitCode == -1);\r\n    assertTrue(sysErrStream.toString().contains(\"Invalid options. \" + \"Can only accept one of show_application_log_info/\" + \"show_container_log_info.\"));\r\n    sysErrStream.reset();\r\n    exitCode = cli.run(new String[] { \"-applicationId\", appId1.toString(), \"-log_files\", \"*\", \"-log_files_pattern\", \".*\" });\r\n    assertTrue(exitCode == -1);\r\n    assertTrue(sysErrStream.toString().contains(\"Invalid options. \" + \"Can only accept one of log_files/\" + \"log_files_pattern.\"));\r\n    sysErrStream.reset();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testWithFileInputForOptionOut",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testWithFileInputForOptionOut() throws Exception\n{\r\n    String localDir = \"target/SaveLogs\";\r\n    Path localPath = new Path(localDir);\r\n    FileSystem fs = FileSystem.get(conf);\r\n    ApplicationId appId1 = ApplicationId.newInstance(0, 1);\r\n    LogsCLI cli = createCli();\r\n    try {\r\n        fs.mkdirs(localPath);\r\n        Path tmpFilePath = new Path(localPath, \"tmpFile\");\r\n        if (!fs.exists(tmpFilePath)) {\r\n            fs.createNewFile(tmpFilePath);\r\n        }\r\n        int exitCode = cli.run(new String[] { \"-applicationId\", appId1.toString(), \"-out\", tmpFilePath.toString() });\r\n        assertTrue(exitCode == -1);\r\n        assertTrue(sysErrStream.toString().contains(\"Invalid value for -out option. Please provide a directory.\"));\r\n    } finally {\r\n        fs.delete(localPath, true);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testGuessAppOwnerWithCustomSuffix",
  "errType" : null,
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void testGuessAppOwnerWithCustomSuffix() throws Exception\n{\r\n    String remoteLogRootDir = \"target/logs/\";\r\n    String jobUser = \"user1\";\r\n    String loggedUser = \"user2\";\r\n    conf.setBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED, true);\r\n    conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR, remoteLogRootDir);\r\n    conf.setBoolean(YarnConfiguration.YARN_ACL_ENABLE, true);\r\n    conf.set(YarnConfiguration.YARN_ADMIN_ACL, \"admin\");\r\n    String controllerName = \"indexed\";\r\n    conf.set(YarnConfiguration.LOG_AGGREGATION_FILE_FORMATS, controllerName);\r\n    conf.set(String.format(LOG_AGGREGATION_FILE_CONTROLLER_FMT, controllerName), LogAggregationIndexedFileController.class.getName());\r\n    conf.set(String.format(LOG_AGGREGATION_REMOTE_APP_LOG_DIR_SUFFIX_FMT, controllerName), controllerName);\r\n    FileSystem fs = FileSystem.get(conf);\r\n    try {\r\n        ApplicationId appId1 = ApplicationId.newInstance(0, 1);\r\n        Path path = new Path(remoteLogRootDir + jobUser + \"/bucket-indexed/0001/\" + appId1);\r\n        if (fs.exists(path)) {\r\n            fs.delete(path, true);\r\n        }\r\n        assertTrue(fs.mkdirs(path));\r\n        String appOwner = LogCLIHelpers.getOwnerForAppIdOrNull(appId1, loggedUser, conf);\r\n        assertThat(appOwner).isEqualTo(jobUser);\r\n        ApplicationId appId2 = ApplicationId.newInstance(0, 2);\r\n        path = new Path(remoteLogRootDir + jobUser + \"/indexed/\" + appId2);\r\n        if (fs.exists(path)) {\r\n            fs.delete(path, true);\r\n        }\r\n        assertTrue(fs.mkdirs(path));\r\n        appOwner = LogCLIHelpers.getOwnerForAppIdOrNull(appId2, loggedUser, conf);\r\n        assertThat(appOwner).isEqualTo(jobUser);\r\n    } finally {\r\n        fs.delete(new Path(remoteLogRootDir), true);\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testGuessAppOwnerWithCustomAppLogDir",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testGuessAppOwnerWithCustomAppLogDir() throws Exception\n{\r\n    String remoteLogRootDir = \"target/logs/\";\r\n    String remoteLogRootDir1 = \"target/logs1/\";\r\n    String jobUser = \"user1\";\r\n    String loggedUser = \"user2\";\r\n    conf.setBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED, true);\r\n    conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR, remoteLogRootDir);\r\n    String controllerName = \"indexed\";\r\n    conf.set(YarnConfiguration.LOG_AGGREGATION_FILE_FORMATS, controllerName);\r\n    conf.set(String.format(LOG_AGGREGATION_FILE_CONTROLLER_FMT, controllerName), LogAggregationIndexedFileController.class.getName());\r\n    conf.set(String.format(LOG_AGGREGATION_REMOTE_APP_LOG_DIR_FMT, controllerName), remoteLogRootDir1);\r\n    FileSystem fs = FileSystem.get(conf);\r\n    try {\r\n        ApplicationId appId1 = ApplicationId.newInstance(0, 3);\r\n        Path path = new Path(remoteLogRootDir1 + jobUser + \"/bucket-logs-indexed/0003/\" + appId1);\r\n        if (fs.exists(path)) {\r\n            fs.delete(path, true);\r\n        }\r\n        assertTrue(fs.mkdirs(path));\r\n        String appOwner = LogCLIHelpers.getOwnerForAppIdOrNull(appId1, loggedUser, conf);\r\n        assertThat(appOwner).isEqualTo(jobUser);\r\n    } finally {\r\n        fs.delete(new Path(remoteLogRootDir1), true);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testSaveContainerLogsLocally",
  "errType" : null,
  "containingMethodsNum" : 38,
  "sourceCodeText" : "void testSaveContainerLogsLocally() throws Exception\n{\r\n    String remoteLogRootDir = \"target/logs/\";\r\n    String rootLogDir = \"target/LocalLogs\";\r\n    String localDir = \"target/SaveLogs\";\r\n    Path localPath = new Path(localDir);\r\n    conf.setBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED, true);\r\n    conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR, remoteLogRootDir);\r\n    conf.setBoolean(YarnConfiguration.YARN_ACL_ENABLE, true);\r\n    conf.set(YarnConfiguration.YARN_ADMIN_ACL, \"admin\");\r\n    FileSystem fs = FileSystem.get(conf);\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    List<ContainerId> containerIds = new ArrayList<ContainerId>();\r\n    ContainerId containerId1 = ContainerId.newContainerId(appAttemptId, 1);\r\n    ContainerId containerId2 = ContainerId.newContainerId(appAttemptId, 2);\r\n    containerIds.add(containerId1);\r\n    containerIds.add(containerId2);\r\n    List<NodeId> nodeIds = new ArrayList<NodeId>();\r\n    NodeId nodeId = NodeId.newInstance(\"localhost\", 1234);\r\n    NodeId nodeId2 = NodeId.newInstance(\"test\", 4567);\r\n    nodeIds.add(nodeId);\r\n    nodeIds.add(nodeId2);\r\n    try {\r\n        createContainerLogs(conf, remoteLogRootDir, rootLogDir, fs, appId, containerIds, nodeIds);\r\n        YarnClient mockYarnClient = createMockYarnClient(YarnApplicationState.FINISHED, UserGroupInformation.getCurrentUser().getShortUserName());\r\n        LogsCLI cli = new LogsCLIForTest(mockYarnClient);\r\n        cli.setConf(conf);\r\n        int exitCode = cli.run(new String[] { \"-applicationId\", appId.toString(), \"-out\", localPath.toString() });\r\n        assertTrue(exitCode == 0);\r\n        FileStatus[] nodeDir = fs.listStatus(localPath);\r\n        Arrays.sort(nodeDir);\r\n        assertTrue(nodeDir.length == 2);\r\n        assertTrue(nodeDir[0].getPath().getName().contains(LogAggregationUtils.getNodeString(nodeId)));\r\n        assertTrue(nodeDir[1].getPath().getName().contains(LogAggregationUtils.getNodeString(nodeId2)));\r\n        FileStatus[] container1Dir = fs.listStatus(nodeDir[0].getPath());\r\n        assertTrue(container1Dir.length == 1);\r\n        assertTrue(container1Dir[0].getPath().getName().equals(containerId1.toString()));\r\n        String container1 = readContainerContent(container1Dir[0].getPath(), fs);\r\n        assertTrue(container1.contains(logMessage(containerId1, \"syslog\")));\r\n        FileStatus[] container2Dir = fs.listStatus(nodeDir[1].getPath());\r\n        assertTrue(container2Dir.length == 1);\r\n        assertTrue(container2Dir[0].getPath().getName().equals(containerId2.toString()));\r\n        String container2 = readContainerContent(container2Dir[0].getPath(), fs);\r\n        assertTrue(container2.contains(logMessage(containerId2, \"syslog\")));\r\n    } finally {\r\n        fs.delete(new Path(remoteLogRootDir), true);\r\n        fs.delete(new Path(rootLogDir), true);\r\n        fs.delete(localPath, true);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "readContainerContent",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "String readContainerContent(Path containerPath, FileSystem fs) throws IOException\n{\r\n    assertTrue(fs.exists(containerPath));\r\n    StringBuffer inputLine = new StringBuffer();\r\n    try (BufferedReader reader = new BufferedReader(new InputStreamReader(fs.open(containerPath)))) {\r\n        String tmp;\r\n        while ((tmp = reader.readLine()) != null) {\r\n            inputLine.append(tmp);\r\n        }\r\n        return inputLine.toString();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testPrintContainerLogMetadata",
  "errType" : null,
  "containingMethodsNum" : 50,
  "sourceCodeText" : "void testPrintContainerLogMetadata() throws Exception\n{\r\n    String remoteLogRootDir = \"target/logs/\";\r\n    conf.setBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED, true);\r\n    conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR, remoteLogRootDir);\r\n    conf.setBoolean(YarnConfiguration.YARN_ACL_ENABLE, true);\r\n    conf.set(YarnConfiguration.YARN_ADMIN_ACL, \"admin\");\r\n    FileSystem fs = FileSystem.get(conf);\r\n    String rootLogDir = \"target/LocalLogs\";\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    List<ContainerId> containerIds = new ArrayList<ContainerId>();\r\n    ContainerId containerId1 = ContainerId.newContainerId(appAttemptId, 1);\r\n    ContainerId containerId2 = ContainerId.newContainerId(appAttemptId, 2);\r\n    containerIds.add(containerId1);\r\n    containerIds.add(containerId2);\r\n    List<NodeId> nodeIds = new ArrayList<NodeId>();\r\n    NodeId nodeId = NodeId.newInstance(\"localhost\", 1234);\r\n    nodeIds.add(nodeId);\r\n    nodeIds.add(nodeId);\r\n    createContainerLogs(conf, remoteLogRootDir, rootLogDir, fs, appId, containerIds, nodeIds);\r\n    YarnClient mockYarnClient = createMockYarnClient(YarnApplicationState.FINISHED, UserGroupInformation.getCurrentUser().getShortUserName());\r\n    LogsCLI cli = new LogsCLIForTest(mockYarnClient);\r\n    cli.setConf(conf);\r\n    cli.run(new String[] { \"-applicationId\", appId.toString(), \"-show_container_log_info\" });\r\n    assertTrue(sysOutStream.toString().contains(\"Container: container_0_0001_01_000001 on localhost_\"));\r\n    assertTrue(sysOutStream.toString().contains(\"Container: container_0_0001_01_000002 on localhost_\"));\r\n    assertTrue(sysOutStream.toString().contains(\"syslog\"));\r\n    assertTrue(sysOutStream.toString().contains(\"43\"));\r\n    sysOutStream.reset();\r\n    cli.run(new String[] { \"-applicationId\", appId.toString(), \"-show_container_log_info\", \"-containerId\", \"container_0_0001_01_000001\" });\r\n    assertTrue(sysOutStream.toString().contains(\"Container: container_0_0001_01_000001 on localhost_\"));\r\n    assertFalse(sysOutStream.toString().contains(\"Container: container_0_0001_01_000002 on localhost_\"));\r\n    assertTrue(sysOutStream.toString().contains(\"syslog\"));\r\n    assertTrue(sysOutStream.toString().contains(\"43\"));\r\n    sysOutStream.reset();\r\n    cli.run(new String[] { \"-applicationId\", appId.toString(), \"-show_container_log_info\", \"-nodeAddress\", \"localhost\" });\r\n    assertTrue(sysOutStream.toString().contains(\"Container: container_0_0001_01_000001 on localhost_\"));\r\n    assertTrue(sysOutStream.toString().contains(\"Container: container_0_0001_01_000002 on localhost_\"));\r\n    assertTrue(sysOutStream.toString().contains(\"syslog\"));\r\n    assertTrue(sysOutStream.toString().contains(\"43\"));\r\n    sysOutStream.reset();\r\n    cli.run(new String[] { \"-applicationId\", appId.toString(), \"-show_container_log_info\", \"-nodeAddress\", \"localhost\", \"-containerId\", \"container_1234\" });\r\n    assertTrue(sysErrStream.toString().contains(\"Invalid ContainerId specified\"));\r\n    sysErrStream.reset();\r\n    cli.run(new String[] { \"-applicationId\", appId.toString(), \"-show_application_log_info\" });\r\n    assertTrue(sysOutStream.toString().contains(\"Application State: Completed.\"));\r\n    assertTrue(sysOutStream.toString().contains(\"container_0_0001_01_000001 on localhost\"));\r\n    assertTrue(sysOutStream.toString().contains(\"container_0_0001_01_000002 on localhost\"));\r\n    sysOutStream.reset();\r\n    cli.run(new String[] { \"-applicationId\", appId.toString(), \"-show_application_log_info\", \"-nodeAddress\", \"localhost\" });\r\n    assertTrue(sysOutStream.toString().contains(\"Application State: Completed.\"));\r\n    assertTrue(sysOutStream.toString().contains(\"container_0_0001_01_000001 on localhost\"));\r\n    assertTrue(sysOutStream.toString().contains(\"container_0_0001_01_000002 on localhost\"));\r\n    sysOutStream.reset();\r\n    fs.delete(new Path(remoteLogRootDir), true);\r\n    fs.delete(new Path(rootLogDir), true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testListNodeInfo",
  "errType" : null,
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void testListNodeInfo() throws Exception\n{\r\n    String remoteLogRootDir = \"target/logs/\";\r\n    conf.setBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED, true);\r\n    conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR, remoteLogRootDir);\r\n    conf.setBoolean(YarnConfiguration.YARN_ACL_ENABLE, true);\r\n    conf.set(YarnConfiguration.YARN_ADMIN_ACL, \"admin\");\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    List<ContainerId> containerIds = new ArrayList<ContainerId>();\r\n    ContainerId containerId1 = ContainerId.newContainerId(appAttemptId, 1);\r\n    ContainerId containerId2 = ContainerId.newContainerId(appAttemptId, 2);\r\n    containerIds.add(containerId1);\r\n    containerIds.add(containerId2);\r\n    List<NodeId> nodeIds = new ArrayList<NodeId>();\r\n    NodeId nodeId1 = NodeId.newInstance(\"localhost1\", 1234);\r\n    NodeId nodeId2 = NodeId.newInstance(\"localhost2\", 2345);\r\n    nodeIds.add(nodeId1);\r\n    nodeIds.add(nodeId2);\r\n    String rootLogDir = \"target/LocalLogs\";\r\n    FileSystem fs = FileSystem.get(conf);\r\n    createContainerLogs(conf, remoteLogRootDir, rootLogDir, fs, appId, containerIds, nodeIds);\r\n    YarnClient mockYarnClient = createMockYarnClient(YarnApplicationState.FINISHED, UserGroupInformation.getCurrentUser().getShortUserName());\r\n    LogsCLI cli = new LogsCLIForTest(mockYarnClient);\r\n    cli.setConf(conf);\r\n    cli.run(new String[] { \"-applicationId\", appId.toString(), \"-list_nodes\" });\r\n    assertTrue(sysOutStream.toString().contains(LogAggregationUtils.getNodeString(nodeId1)));\r\n    assertTrue(sysOutStream.toString().contains(LogAggregationUtils.getNodeString(nodeId2)));\r\n    sysOutStream.reset();\r\n    fs.delete(new Path(remoteLogRootDir), true);\r\n    fs.delete(new Path(rootLogDir), true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testFetchApplictionLogsHar",
  "errType" : null,
  "containingMethodsNum" : 29,
  "sourceCodeText" : "void testFetchApplictionLogsHar() throws Exception\n{\r\n    String remoteLogRootDir = \"target/logs/\";\r\n    conf.setBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED, true);\r\n    conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR, remoteLogRootDir);\r\n    conf.setBoolean(YarnConfiguration.YARN_ACL_ENABLE, true);\r\n    conf.set(YarnConfiguration.YARN_ADMIN_ACL, \"admin\");\r\n    FileSystem fs = FileSystem.get(conf);\r\n    UserGroupInformation ugi = UserGroupInformation.getCurrentUser();\r\n    URL harUrl = ClassLoader.getSystemClassLoader().getResource(\"application_1440536969523_0001.har\");\r\n    assertNotNull(harUrl);\r\n    Path path = new Path(remoteLogRootDir + ugi.getShortUserName() + \"/bucket-logs-tfile/0001/application_1440536969523_0001\");\r\n    if (fs.exists(path)) {\r\n        fs.delete(path, true);\r\n    }\r\n    assertTrue(fs.mkdirs(path));\r\n    Path harPath = new Path(path, \"application_1440536969523_0001.har\");\r\n    fs.copyFromLocalFile(false, new Path(harUrl.toURI()), harPath);\r\n    assertTrue(fs.exists(harPath));\r\n    YarnClient mockYarnClient = createMockYarnClient(YarnApplicationState.FINISHED, ugi.getShortUserName());\r\n    LogsCLI cli = new LogsCLIForTest(mockYarnClient);\r\n    cli.setConf(conf);\r\n    int exitCode = cli.run(new String[] { \"-applicationId\", \"application_1440536969523_0001\" });\r\n    assertTrue(exitCode == 0);\r\n    String out = sysOutStream.toString();\r\n    assertTrue(out.contains(\"container_1440536969523_0001_01_000001 on host1_1111\"));\r\n    assertTrue(out.contains(\"Hello stderr\"));\r\n    assertTrue(out.contains(\"Hello stdout\"));\r\n    assertTrue(out.contains(\"Hello syslog\"));\r\n    assertTrue(out.contains(\"container_1440536969523_0001_01_000002 on host2_2222\"));\r\n    assertTrue(out.contains(\"Goodbye stderr\"));\r\n    assertTrue(out.contains(\"Goodbye stdout\"));\r\n    assertTrue(out.contains(\"Goodbye syslog\"));\r\n    sysOutStream.reset();\r\n    fs.delete(new Path(remoteLogRootDir), true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "createContainerLogs",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void createContainerLogs(Configuration configuration, String remoteLogRootDir, String rootLogDir, FileSystem fs, ApplicationId appId, List<ContainerId> containerIds, List<NodeId> nodeIds) throws Exception\n{\r\n    UserGroupInformation ugi = UserGroupInformation.getCurrentUser();\r\n    Path rootLogDirPath = new Path(rootLogDir);\r\n    if (fs.exists(rootLogDirPath)) {\r\n        fs.delete(rootLogDirPath, true);\r\n    }\r\n    assertTrue(fs.mkdirs(rootLogDirPath));\r\n    Path appLogsDir = new Path(rootLogDirPath, appId.toString());\r\n    if (fs.exists(appLogsDir)) {\r\n        fs.delete(appLogsDir, true);\r\n    }\r\n    assertTrue(fs.mkdirs(appLogsDir));\r\n    List<String> rootLogDirs = Arrays.asList(rootLogDir);\r\n    List<String> logTypes = new ArrayList<String>();\r\n    logTypes.add(\"syslog\");\r\n    for (ContainerId containerId : containerIds) {\r\n        createContainerLogInLocalDir(appLogsDir, containerId, fs, logTypes, Collections.emptyList());\r\n    }\r\n    Path path = new Path(remoteLogRootDir + ugi.getShortUserName() + \"/bucket-logs-tfile/0001/application_0_0001\");\r\n    if (fs.exists(path)) {\r\n        fs.delete(path, true);\r\n    }\r\n    assertTrue(fs.mkdirs(path));\r\n    for (int i = 0; i < containerIds.size(); i++) {\r\n        uploadContainerLogIntoRemoteDir(ugi, configuration, rootLogDirs, nodeIds.get(i), containerIds.get(i), path, fs);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "createContainerLogInLocalDir",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void createContainerLogInLocalDir(Path appLogsDir, ContainerId containerId, FileSystem fs, List<String> logTypes, List<String> emptyLogTypes) throws Exception\n{\r\n    Path containerLogsDir = new Path(appLogsDir, containerId.toString());\r\n    if (fs.exists(containerLogsDir)) {\r\n        fs.delete(containerLogsDir, true);\r\n    }\r\n    assertTrue(fs.mkdirs(containerLogsDir));\r\n    for (String logType : logTypes) {\r\n        Writer writer = new FileWriter(new File(containerLogsDir.toString(), logType));\r\n        writer.write(logMessage(containerId, logType));\r\n        writer.close();\r\n    }\r\n    for (String emptyLogType : emptyLogTypes) {\r\n        Writer writer = new FileWriter(new File(containerLogsDir.toString(), emptyLogType));\r\n        writer.write(\"\");\r\n        writer.close();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "logMessage",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String logMessage(ContainerId containerId, String logType)\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"Hello \" + containerId + \" in \" + logType + \"!\");\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "createEmptyLog",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String createEmptyLog(String logType)\n{\r\n    return \"LogContents:\\n\\nEnd of LogType:\" + logType;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "uploadContainerLogIntoRemoteDir",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void uploadContainerLogIntoRemoteDir(UserGroupInformation ugi, Configuration configuration, List<String> rootLogDirs, NodeId nodeId, ContainerId containerId, Path appDir, FileSystem fs) throws Exception\n{\r\n    Path path = new Path(appDir, LogAggregationUtils.getNodeString(nodeId) + System.currentTimeMillis());\r\n    LogAggregationFileControllerFactory factory = new LogAggregationFileControllerFactory(configuration);\r\n    LogAggregationFileController fileFormat = factory.getFileControllerForWrite();\r\n    try {\r\n        Map<ApplicationAccessType, String> appAcls = new HashMap<>();\r\n        appAcls.put(ApplicationAccessType.VIEW_APP, ugi.getUserName());\r\n        LogAggregationFileControllerContext context = new LogAggregationFileControllerContext(path, path, true, 1000, containerId.getApplicationAttemptId().getApplicationId(), appAcls, nodeId, ugi);\r\n        fileFormat.initializeWriter(context);\r\n        fileFormat.write(new AggregatedLogFormat.LogKey(containerId), new AggregatedLogFormat.LogValue(rootLogDirs, containerId, UserGroupInformation.getCurrentUser().getShortUserName()));\r\n    } finally {\r\n        fileFormat.closeWriter();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "uploadEmptyContainerLogIntoRemoteDir",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void uploadEmptyContainerLogIntoRemoteDir(UserGroupInformation ugi, Configuration configuration, List<String> rootLogDirs, NodeId nodeId, ContainerId containerId, Path appDir, FileSystem fs) throws Exception\n{\r\n    LogAggregationFileControllerFactory factory = new LogAggregationFileControllerFactory(configuration);\r\n    LogAggregationFileController fileFormat = factory.getFileControllerForWrite();\r\n    try {\r\n        Map<ApplicationAccessType, String> appAcls = new HashMap<>();\r\n        appAcls.put(ApplicationAccessType.VIEW_APP, ugi.getUserName());\r\n        ApplicationId appId = containerId.getApplicationAttemptId().getApplicationId();\r\n        Path path = fileFormat.getRemoteNodeLogFileForApp(appId, ugi.getCurrentUser().getShortUserName(), nodeId);\r\n        LogAggregationFileControllerContext context = new LogAggregationFileControllerContext(path, path, true, 1000, appId, appAcls, nodeId, ugi);\r\n        fileFormat.initializeWriter(context);\r\n        AggregatedLogFormat.LogKey key = new AggregatedLogFormat.LogKey(containerId);\r\n        AggregatedLogFormat.LogValue value = new AggregatedLogFormat.LogValue(rootLogDirs, containerId, UserGroupInformation.getCurrentUser().getShortUserName());\r\n        fileFormat.write(key, value);\r\n    } finally {\r\n        fileFormat.closeWriter();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "uploadTruncatedTFileIntoRemoteDir",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void uploadTruncatedTFileIntoRemoteDir(UserGroupInformation ugi, Configuration configuration, NodeId nodeId, ContainerId containerId, FileSystem fs) throws Exception\n{\r\n    LogAggregationFileControllerFactory factory = new LogAggregationFileControllerFactory(configuration);\r\n    LogAggregationFileController fileFormat = factory.getFileControllerForWrite();\r\n    ApplicationId appId = containerId.getApplicationAttemptId().getApplicationId();\r\n    Path path = fileFormat.getRemoteNodeLogFileForApp(appId, ugi.getCurrentUser().getShortUserName(), nodeId);\r\n    fs.create(path, true).close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "createCli",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "LogsCLI createCli() throws IOException, YarnException\n{\r\n    YarnClient mockYarnClient = createMockYarnClient(YarnApplicationState.FINISHED, UserGroupInformation.getCurrentUser().getShortUserName());\r\n    LogsCLI cli = new LogsCLIForTest(mockYarnClient);\r\n    cli.setConf(conf);\r\n    return cli;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "createMockYarnClient",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnClient createMockYarnClient(YarnApplicationState appState, String user) throws YarnException, IOException\n{\r\n    return createMockYarnClient(appState, user, false, null, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "createMockYarnClient",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "YarnClient createMockYarnClient(YarnApplicationState appState, String user, boolean mockContainerReport, List<ApplicationAttemptReport> mockAttempts, List<ContainerReport> mockContainers) throws YarnException, IOException\n{\r\n    YarnClient mockClient = mock(YarnClient.class);\r\n    ApplicationReport mockAppReport = mock(ApplicationReport.class);\r\n    doReturn(user).when(mockAppReport).getUser();\r\n    doReturn(appState).when(mockAppReport).getYarnApplicationState();\r\n    doReturn(mockAppReport).when(mockClient).getApplicationReport(any(ApplicationId.class));\r\n    if (mockContainerReport) {\r\n        doReturn(mockAttempts).when(mockClient).getApplicationAttempts(any(ApplicationId.class));\r\n        doReturn(mockContainers).when(mockClient).getContainers(any(ApplicationAttemptId.class));\r\n    }\r\n    return mockClient;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "createMockYarnClientWithException",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "YarnClient createMockYarnClientWithException(YarnApplicationState appState, String user) throws YarnException, IOException\n{\r\n    YarnClient mockClient = mock(YarnClient.class);\r\n    ApplicationReport mockAppReport = mock(ApplicationReport.class);\r\n    doReturn(user).when(mockAppReport).getUser();\r\n    doReturn(appState).when(mockAppReport).getYarnApplicationState();\r\n    doReturn(mockAppReport).when(mockClient).getApplicationReport(any(ApplicationId.class));\r\n    doThrow(new YarnException()).when(mockClient).getContainerReport(any(ContainerId.class));\r\n    return mockClient;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "createMockYarnClientWithException",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "YarnClient createMockYarnClientWithException() throws YarnException, IOException\n{\r\n    YarnClient mockClient = mock(YarnClient.class);\r\n    doThrow(new YarnException()).when(mockClient).getApplicationReport(any(ApplicationId.class));\r\n    doThrow(new YarnException()).when(mockClient).getContainerReport(any(ContainerId.class));\r\n    return mockClient;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "createMockYarnClientUnknownApp",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "YarnClient createMockYarnClientUnknownApp() throws YarnException, IOException\n{\r\n    YarnClient mockClient = mock(YarnClient.class);\r\n    doThrow(new YarnException(\"Unknown AppId\")).when(mockClient).getApplicationReport(any(ApplicationId.class));\r\n    return mockClient;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testResourceRequest",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testResourceRequest()\n{\r\n    Resource resource = recordFactory.newRecordInstance(Resource.class);\r\n    Priority priority = recordFactory.newRecordInstance(Priority.class);\r\n    ResourceRequest original = ResourceRequest.newInstance(priority, \"localhost\", resource, 2);\r\n    ResourceRequest copy = ResourceRequest.newInstance(priority, \"localhost\", resource, 2);\r\n    assertTrue(original.equals(copy));\r\n    assertEquals(0, original.compareTo(copy));\r\n    assertTrue(original.hashCode() == copy.hashCode());\r\n    copy.setNumContainers(1);\r\n    assertFalse(original.equals(copy));\r\n    assertNotSame(0, original.compareTo(copy));\r\n    assertFalse(original.hashCode() == copy.hashCode());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testCancelDelegationTokenRequestPBImpl",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testCancelDelegationTokenRequestPBImpl()\n{\r\n    Token token = getDelegationToken();\r\n    CancelDelegationTokenRequestPBImpl original = new CancelDelegationTokenRequestPBImpl();\r\n    original.setDelegationToken(token);\r\n    CancelDelegationTokenRequestProto protoType = original.getProto();\r\n    CancelDelegationTokenRequestPBImpl copy = new CancelDelegationTokenRequestPBImpl(protoType);\r\n    assertNotNull(copy.getDelegationToken());\r\n    assertEquals(token, copy.getDelegationToken());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testRenewDelegationTokenRequestPBImpl",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testRenewDelegationTokenRequestPBImpl()\n{\r\n    Token token = getDelegationToken();\r\n    RenewDelegationTokenRequestPBImpl original = new RenewDelegationTokenRequestPBImpl();\r\n    original.setDelegationToken(token);\r\n    RenewDelegationTokenRequestProto protoType = original.getProto();\r\n    RenewDelegationTokenRequestPBImpl copy = new RenewDelegationTokenRequestPBImpl(protoType);\r\n    assertNotNull(copy.getDelegationToken());\r\n    assertEquals(token, copy.getDelegationToken());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "getDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Token getDelegationToken()\n{\r\n    return Token.newInstance(new byte[0], \"\", new byte[0], \"\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testClientStop",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testClientStop()\n{\r\n    Configuration conf = new Configuration();\r\n    AHSClient client = AHSClient.createAHSClient();\r\n    client.init(conf);\r\n    client.start();\r\n    client.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testGetApplications",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testGetApplications() throws YarnException, IOException\n{\r\n    Configuration conf = new Configuration();\r\n    final AHSClient client = new MockAHSClient();\r\n    client.init(conf);\r\n    client.start();\r\n    List<ApplicationReport> expectedReports = ((MockAHSClient) client).getReports();\r\n    List<ApplicationReport> reports = client.getApplications();\r\n    Assert.assertEquals(reports, expectedReports);\r\n    reports = client.getApplications();\r\n    assertThat(reports).hasSize(4);\r\n    client.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testGetApplicationReport",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testGetApplicationReport() throws YarnException, IOException\n{\r\n    Configuration conf = new Configuration();\r\n    final AHSClient client = new MockAHSClient();\r\n    client.init(conf);\r\n    client.start();\r\n    List<ApplicationReport> expectedReports = ((MockAHSClient) client).getReports();\r\n    ApplicationId applicationId = ApplicationId.newInstance(1234, 5);\r\n    ApplicationReport report = client.getApplicationReport(applicationId);\r\n    Assert.assertEquals(report, expectedReports.get(0));\r\n    Assert.assertEquals(report.getApplicationId().toString(), expectedReports.get(0).getApplicationId().toString());\r\n    Assert.assertEquals(report.getSubmitTime(), expectedReports.get(0).getSubmitTime());\r\n    client.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testGetApplicationAttempts",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testGetApplicationAttempts() throws YarnException, IOException\n{\r\n    Configuration conf = new Configuration();\r\n    final AHSClient client = new MockAHSClient();\r\n    client.init(conf);\r\n    client.start();\r\n    ApplicationId applicationId = ApplicationId.newInstance(1234, 5);\r\n    List<ApplicationAttemptReport> reports = client.getApplicationAttempts(applicationId);\r\n    Assert.assertNotNull(reports);\r\n    Assert.assertEquals(reports.get(0).getApplicationAttemptId(), ApplicationAttemptId.newInstance(applicationId, 1));\r\n    Assert.assertEquals(reports.get(1).getApplicationAttemptId(), ApplicationAttemptId.newInstance(applicationId, 2));\r\n    client.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testGetApplicationAttempt",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testGetApplicationAttempt() throws YarnException, IOException\n{\r\n    Configuration conf = new Configuration();\r\n    final AHSClient client = new MockAHSClient();\r\n    client.init(conf);\r\n    client.start();\r\n    List<ApplicationReport> expectedReports = ((MockAHSClient) client).getReports();\r\n    ApplicationId applicationId = ApplicationId.newInstance(1234, 5);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(applicationId, 1);\r\n    ApplicationAttemptReport report = client.getApplicationAttemptReport(appAttemptId);\r\n    Assert.assertNotNull(report);\r\n    Assert.assertEquals(report.getApplicationAttemptId().toString(), expectedReports.get(0).getCurrentApplicationAttemptId().toString());\r\n    client.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testGetContainers",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testGetContainers() throws YarnException, IOException\n{\r\n    Configuration conf = new Configuration();\r\n    final AHSClient client = new MockAHSClient();\r\n    client.init(conf);\r\n    client.start();\r\n    ApplicationId applicationId = ApplicationId.newInstance(1234, 5);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(applicationId, 1);\r\n    List<ContainerReport> reports = client.getContainers(appAttemptId);\r\n    Assert.assertNotNull(reports);\r\n    Assert.assertEquals(reports.get(0).getContainerId(), (ContainerId.newContainerId(appAttemptId, 1)));\r\n    Assert.assertEquals(reports.get(1).getContainerId(), (ContainerId.newContainerId(appAttemptId, 2)));\r\n    client.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testGetContainerReport",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testGetContainerReport() throws YarnException, IOException\n{\r\n    Configuration conf = new Configuration();\r\n    final AHSClient client = new MockAHSClient();\r\n    client.init(conf);\r\n    client.start();\r\n    List<ApplicationReport> expectedReports = ((MockAHSClient) client).getReports();\r\n    ApplicationId applicationId = ApplicationId.newInstance(1234, 5);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(applicationId, 1);\r\n    ContainerId containerId = ContainerId.newContainerId(appAttemptId, 1);\r\n    ContainerReport report = client.getContainerReport(containerId);\r\n    Assert.assertNotNull(report);\r\n    Assert.assertEquals(report.getContainerId().toString(), (ContainerId.newContainerId(expectedReports.get(0).getCurrentApplicationAttemptId(), 1)).toString());\r\n    client.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setup()\n{\r\n    sysOutStream = new ByteArrayOutputStream();\r\n    sysOut = spy(new PrintStream(sysOutStream));\r\n    sysErrStream = new ByteArrayOutputStream();\r\n    sysErr = spy(new PrintStream(sysErrStream));\r\n    System.setOut(sysOut);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testGetApplicationReport",
  "errType" : null,
  "containingMethodsNum" : 49,
  "sourceCodeText" : "void testGetApplicationReport() throws Exception\n{\r\n    for (int i = 0; i < 2; ++i) {\r\n        ApplicationCLI cli = createAndGetAppCLI();\r\n        ApplicationId applicationId = ApplicationId.newInstance(1234, 5);\r\n        Map<String, Long> resourceSecondsMap = new HashMap<>();\r\n        Map<String, Long> preemptedResoureSecondsMap = new HashMap<>();\r\n        resourceSecondsMap.put(ResourceInformation.MEMORY_MB.getName(), 123456L);\r\n        resourceSecondsMap.put(ResourceInformation.VCORES.getName(), 4567L);\r\n        preemptedResoureSecondsMap.put(ResourceInformation.MEMORY_MB.getName(), 1111L);\r\n        preemptedResoureSecondsMap.put(ResourceInformation.VCORES.getName(), 2222L);\r\n        ApplicationResourceUsageReport usageReport = i == 0 ? null : ApplicationResourceUsageReport.newInstance(2, 0, null, null, null, resourceSecondsMap, 0, 0, preemptedResoureSecondsMap);\r\n        ApplicationReport newApplicationReport = ApplicationReport.newInstance(applicationId, ApplicationAttemptId.newInstance(applicationId, 1), \"user\", \"queue\", \"appname\", \"host\", 124, null, YarnApplicationState.FINISHED, \"diagnostics\", \"url\", 0, 0, 0, FinalApplicationStatus.SUCCEEDED, usageReport, \"N/A\", 0.53789f, \"YARN\", null, null, false, Priority.newInstance(0), \"high-mem\", \"high-mem\");\r\n        newApplicationReport.setLogAggregationStatus(LogAggregationStatus.SUCCEEDED);\r\n        newApplicationReport.setPriority(Priority.newInstance(0));\r\n        newApplicationReport.setRMClusterId(\"Cluster1\");\r\n        ApplicationTimeout timeout = ApplicationTimeout.newInstance(ApplicationTimeoutType.LIFETIME, \"UNLIMITED\", -1);\r\n        newApplicationReport.setApplicationTimeouts(Collections.singletonMap(timeout.getTimeoutType(), timeout));\r\n        when(client.getApplicationReport(any(ApplicationId.class))).thenReturn(newApplicationReport);\r\n        int result = cli.run(new String[] { \"application\", \"-status\", applicationId.toString() });\r\n        assertEquals(0, result);\r\n        verify(client, times(1 + i)).getApplicationReport(applicationId);\r\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n        PrintWriter pw = new PrintWriter(baos);\r\n        pw.println(\"Application Report : \");\r\n        pw.println(\"\\tApplication-Id : application_1234_0005\");\r\n        pw.println(\"\\tApplication-Name : appname\");\r\n        pw.println(\"\\tApplication-Type : YARN\");\r\n        pw.println(\"\\tUser : user\");\r\n        pw.println(\"\\tQueue : queue\");\r\n        pw.println(\"\\tApplication Priority : 0\");\r\n        pw.println(\"\\tStart-Time : 0\");\r\n        pw.println(\"\\tFinish-Time : 0\");\r\n        pw.println(\"\\tProgress : 53.79%\");\r\n        pw.println(\"\\tState : FINISHED\");\r\n        pw.println(\"\\tFinal-State : SUCCEEDED\");\r\n        pw.println(\"\\tTracking-URL : N/A\");\r\n        pw.println(\"\\tRPC Port : 124\");\r\n        pw.println(\"\\tAM Host : host\");\r\n        pw.println(\"\\tAggregate Resource Allocation : \" + (i == 0 ? \"N/A\" : \"123456 MB-seconds, 4567 vcore-seconds\"));\r\n        pw.println(\"\\tAggregate Resource Preempted : \" + (i == 0 ? \"N/A\" : \"1111 MB-seconds, 2222 vcore-seconds\"));\r\n        pw.println(\"\\tLog Aggregation Status : SUCCEEDED\");\r\n        pw.println(\"\\tDiagnostics : diagnostics\");\r\n        pw.println(\"\\tUnmanaged Application : false\");\r\n        pw.println(\"\\tApplication Node Label Expression : high-mem\");\r\n        pw.println(\"\\tAM container Node Label Expression : high-mem\");\r\n        pw.print(\"\\tTimeoutType : LIFETIME\");\r\n        pw.print(\"\\tExpiryTime : UNLIMITED\");\r\n        pw.println(\"\\tRemainingTime : -1seconds\");\r\n        pw.println(\"\\tRMClusterId : Cluster1\");\r\n        pw.println();\r\n        pw.close();\r\n        String appReportStr = baos.toString(\"UTF-8\");\r\n        Assert.assertEquals(appReportStr, sysOutStream.toString());\r\n        sysOutStream.reset();\r\n        verify(sysOut, times(1 + i)).println(isA(String.class));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testGetApplicationAttemptReport",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testGetApplicationAttemptReport() throws Exception\n{\r\n    ApplicationCLI cli = createAndGetAppCLI();\r\n    ApplicationId applicationId = ApplicationId.newInstance(1234, 5);\r\n    ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(applicationId, 1);\r\n    ApplicationAttemptReport attemptReport = ApplicationAttemptReport.newInstance(attemptId, \"host\", 124, \"url\", \"oUrl\", \"diagnostics\", YarnApplicationAttemptState.FINISHED, ContainerId.newContainerId(attemptId, 1), 1000l, 2000l);\r\n    when(client.getApplicationAttemptReport(any(ApplicationAttemptId.class))).thenReturn(attemptReport);\r\n    int result = cli.run(new String[] { \"applicationattempt\", \"-status\", attemptId.toString() });\r\n    assertEquals(0, result);\r\n    verify(client).getApplicationAttemptReport(attemptId);\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    PrintWriter pw = new PrintWriter(baos);\r\n    pw.println(\"Application Attempt Report : \");\r\n    pw.println(\"\\tApplicationAttempt-Id : appattempt_1234_0005_000001\");\r\n    pw.println(\"\\tState : FINISHED\");\r\n    pw.println(\"\\tAMContainer : container_1234_0005_01_000001\");\r\n    pw.println(\"\\tTracking-URL : url\");\r\n    pw.println(\"\\tRPC Port : 124\");\r\n    pw.println(\"\\tAM Host : host\");\r\n    pw.println(\"\\tDiagnostics : diagnostics\");\r\n    pw.close();\r\n    String appReportStr = baos.toString(\"UTF-8\");\r\n    Assert.assertEquals(appReportStr, sysOutStream.toString());\r\n    verify(sysOut, times(1)).println(isA(String.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testGetApplicationAttempts",
  "errType" : null,
  "containingMethodsNum" : 28,
  "sourceCodeText" : "void testGetApplicationAttempts() throws Exception\n{\r\n    ApplicationCLI cli = createAndGetAppCLI();\r\n    ApplicationId applicationId = ApplicationId.newInstance(1234, 5);\r\n    ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(applicationId, 1);\r\n    ApplicationAttemptId attemptId1 = ApplicationAttemptId.newInstance(applicationId, 2);\r\n    ApplicationAttemptReport attemptReport = ApplicationAttemptReport.newInstance(attemptId, \"host\", 124, \"url\", \"oUrl\", \"diagnostics\", YarnApplicationAttemptState.FINISHED, ContainerId.newContainerId(attemptId, 1));\r\n    ApplicationAttemptReport attemptReport1 = ApplicationAttemptReport.newInstance(attemptId1, \"host\", 124, \"url\", \"oUrl\", \"diagnostics\", YarnApplicationAttemptState.FINISHED, ContainerId.newContainerId(attemptId1, 1));\r\n    List<ApplicationAttemptReport> reports = new ArrayList<ApplicationAttemptReport>();\r\n    reports.add(attemptReport);\r\n    reports.add(attemptReport1);\r\n    when(client.getApplicationAttempts(any(ApplicationId.class))).thenReturn(reports);\r\n    int result = cli.run(new String[] { \"applicationattempt\", \"-list\", applicationId.toString() });\r\n    assertEquals(0, result);\r\n    verify(client).getApplicationAttempts(applicationId);\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    PrintWriter pw = new PrintWriter(baos);\r\n    pw.println(\"Total number of application attempts :2\");\r\n    pw.print(\"         ApplicationAttempt-Id\");\r\n    pw.print(\"\\t               State\");\r\n    pw.print(\"\\t                    AM-Container-Id\");\r\n    pw.println(\"\\t                       Tracking-URL\");\r\n    pw.print(\"   appattempt_1234_0005_000001\");\r\n    pw.print(\"\\t            FINISHED\");\r\n    pw.print(\"\\t      container_1234_0005_01_000001\");\r\n    pw.println(\"\\t                                url\");\r\n    pw.print(\"   appattempt_1234_0005_000002\");\r\n    pw.print(\"\\t            FINISHED\");\r\n    pw.print(\"\\t      container_1234_0005_02_000001\");\r\n    pw.println(\"\\t                                url\");\r\n    pw.close();\r\n    String appReportStr = baos.toString(\"UTF-8\");\r\n    Assert.assertEquals(appReportStr, sysOutStream.toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testGetContainerReport",
  "errType" : null,
  "containingMethodsNum" : 28,
  "sourceCodeText" : "void testGetContainerReport() throws Exception\n{\r\n    ApplicationCLI cli = createAndGetAppCLI();\r\n    ApplicationId applicationId = ApplicationId.newInstance(1234, 5);\r\n    ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(applicationId, 1);\r\n    ContainerId containerId = ContainerId.newContainerId(attemptId, 1);\r\n    Map<String, List<Map<String, String>>> ports = new HashMap<>();\r\n    ArrayList<Map<String, String>> list = new ArrayList();\r\n    HashMap<String, String> map = new HashMap();\r\n    map.put(\"abc\", \"123\");\r\n    list.add(map);\r\n    ports.put(\"192.168.0.1\", list);\r\n    ContainerReport container = ContainerReport.newInstance(containerId, null, NodeId.newInstance(\"host\", 1234), Priority.UNDEFINED, 1234, 5678, \"diagnosticInfo\", \"logURL\", 0, ContainerState.COMPLETE, \"http://\" + NodeId.newInstance(\"host\", 2345).toString());\r\n    container.setExposedPorts(ports);\r\n    when(client.getContainerReport(any(ContainerId.class))).thenReturn(container);\r\n    int result = cli.run(new String[] { \"container\", \"-status\", containerId.toString() });\r\n    assertEquals(0, result);\r\n    verify(client).getContainerReport(containerId);\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    PrintWriter pw = new PrintWriter(baos);\r\n    pw.println(\"Container Report : \");\r\n    pw.println(\"\\tContainer-Id : container_1234_0005_01_000001\");\r\n    pw.println(\"\\tStart-Time : 1234\");\r\n    pw.println(\"\\tFinish-Time : 5678\");\r\n    pw.println(\"\\tState : COMPLETE\");\r\n    pw.println(\"\\tExecution-Type : GUARANTEED\");\r\n    pw.println(\"\\tLOG-URL : logURL\");\r\n    pw.println(\"\\tHost : host:1234\");\r\n    pw.println(\"\\tNodeHttpAddress : http://host:2345\");\r\n    pw.println(\"\\tExposedPorts : {\\\"192.168.0.1\\\":[{\\\"abc\\\":\\\"123\\\"}]}\");\r\n    pw.println(\"\\tDiagnostics : diagnosticInfo\");\r\n    pw.close();\r\n    String appReportStr = baos.toString(\"UTF-8\");\r\n    Assert.assertEquals(appReportStr, sysOutStream.toString());\r\n    verify(sysOut, times(1)).println(isA(String.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testGetContainers",
  "errType" : null,
  "containingMethodsNum" : 33,
  "sourceCodeText" : "void testGetContainers() throws Exception\n{\r\n    ApplicationCLI cli = createAndGetAppCLI();\r\n    ApplicationId applicationId = ApplicationId.newInstance(1234, 5);\r\n    ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(applicationId, 1);\r\n    ContainerId containerId = ContainerId.newContainerId(attemptId, 1);\r\n    ContainerId containerId1 = ContainerId.newContainerId(attemptId, 2);\r\n    ContainerId containerId2 = ContainerId.newContainerId(attemptId, 3);\r\n    long time1 = 1234, time2 = 5678;\r\n    Map<String, List<Map<String, String>>> ports = new HashMap<>();\r\n    ContainerReport container = ContainerReport.newInstance(containerId, null, NodeId.newInstance(\"host\", 1234), Priority.UNDEFINED, time1, time2, \"diagnosticInfo\", \"logURL\", 0, ContainerState.COMPLETE, \"http://\" + NodeId.newInstance(\"host\", 2345).toString());\r\n    container.setExposedPorts(ports);\r\n    ContainerReport container1 = ContainerReport.newInstance(containerId1, null, NodeId.newInstance(\"host\", 1234), Priority.UNDEFINED, time1, time2, \"diagnosticInfo\", \"logURL\", 0, ContainerState.COMPLETE, \"http://\" + NodeId.newInstance(\"host\", 2345).toString());\r\n    container1.setExposedPorts(ports);\r\n    ContainerReport container2 = ContainerReport.newInstance(containerId2, null, NodeId.newInstance(\"host\", 1234), Priority.UNDEFINED, time1, 0, \"diagnosticInfo\", \"\", 0, ContainerState.RUNNING, \"http://\" + NodeId.newInstance(\"host\", 2345).toString());\r\n    container2.setExposedPorts(ports);\r\n    List<ContainerReport> reports = new ArrayList<ContainerReport>();\r\n    reports.add(container);\r\n    reports.add(container1);\r\n    reports.add(container2);\r\n    when(client.getContainers(any(ApplicationAttemptId.class))).thenReturn(reports);\r\n    sysOutStream.reset();\r\n    int result = cli.run(new String[] { \"container\", \"-list\", attemptId.toString() });\r\n    assertEquals(0, result);\r\n    verify(client).getContainers(attemptId);\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    OutputStreamWriter stream = new OutputStreamWriter(baos, \"UTF-8\");\r\n    PrintWriter pw = new PrintWriter(stream);\r\n    pw.println(\"Total number of containers :3\");\r\n    pw.printf(ApplicationCLI.CONTAINER_PATTERN, \"Container-Id\", \"Start Time\", \"Finish Time\", \"State\", \"Host\", \"Node Http Address\", \"LOG-URL\");\r\n    pw.printf(ApplicationCLI.CONTAINER_PATTERN, \"container_1234_0005_01_000001\", Times.format(time1), Times.format(time2), \"COMPLETE\", \"host:1234\", \"http://host:2345\", \"logURL\");\r\n    pw.printf(ApplicationCLI.CONTAINER_PATTERN, \"container_1234_0005_01_000002\", Times.format(time1), Times.format(time2), \"COMPLETE\", \"host:1234\", \"http://host:2345\", \"logURL\");\r\n    pw.printf(ApplicationCLI.CONTAINER_PATTERN, \"container_1234_0005_01_000003\", Times.format(time1), \"N/A\", \"RUNNING\", \"host:1234\", \"http://host:2345\", \"\");\r\n    pw.close();\r\n    String appReportStr = baos.toString(\"UTF-8\");\r\n    Log.getLog().info(\"ExpectedOutput\");\r\n    Log.getLog().info(\"[\" + appReportStr + \"]\");\r\n    Log.getLog().info(\"OutputFrom command\");\r\n    String actualOutput = sysOutStream.toString(\"UTF-8\");\r\n    Log.getLog().info(\"[\" + actualOutput + \"]\");\r\n    Assert.assertEquals(appReportStr, actualOutput);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testGetApplicationReportException",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testGetApplicationReportException() throws Exception\n{\r\n    ApplicationCLI cli = createAndGetAppCLI();\r\n    ApplicationId applicationId = ApplicationId.newInstance(1234, 5);\r\n    when(client.getApplicationReport(any(ApplicationId.class))).thenThrow(new ApplicationNotFoundException(\"History file for application\" + applicationId + \" is not found\"));\r\n    int exitCode = cli.run(new String[] { \"application\", \"-status\", applicationId.toString() });\r\n    verify(sysOut).println(\"Application with id '\" + applicationId + \"' doesn't exist in RM or Timeline Server.\");\r\n    Assert.assertNotSame(\"should return non-zero exit code.\", 0, exitCode);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testGetApplications",
  "errType" : null,
  "containingMethodsNum" : 323,
  "sourceCodeText" : "void testGetApplications() throws Exception\n{\r\n    ApplicationCLI cli = createAndGetAppCLI();\r\n    ApplicationId applicationId = ApplicationId.newInstance(1234, 5);\r\n    ApplicationReport newApplicationReport = ApplicationReport.newInstance(applicationId, ApplicationAttemptId.newInstance(applicationId, 1), \"user\", \"queue\", \"appname\", \"host\", 124, null, YarnApplicationState.RUNNING, \"diagnostics\", \"url\", 0, 0, 0, FinalApplicationStatus.SUCCEEDED, null, \"N/A\", 0.53789f, \"YARN\", null, Sets.newHashSet(\"tag1\", \"tag3\"), false, Priority.UNDEFINED, \"\", \"\");\r\n    List<ApplicationReport> applicationReports = new ArrayList<ApplicationReport>();\r\n    applicationReports.add(newApplicationReport);\r\n    ApplicationId applicationId2 = ApplicationId.newInstance(1234, 6);\r\n    ApplicationReport newApplicationReport2 = ApplicationReport.newInstance(applicationId2, ApplicationAttemptId.newInstance(applicationId2, 2), \"user2\", \"queue2\", \"appname2\", \"host2\", 125, null, YarnApplicationState.FINISHED, \"diagnostics2\", \"url2\", 2, 2, 2, FinalApplicationStatus.SUCCEEDED, null, \"N/A\", 0.63789f, \"NON-YARN\", null, Sets.newHashSet(\"tag2\", \"tag3\"), false, Priority.UNDEFINED, \"\", \"\");\r\n    applicationReports.add(newApplicationReport2);\r\n    ApplicationId applicationId3 = ApplicationId.newInstance(1234, 7);\r\n    ApplicationReport newApplicationReport3 = ApplicationReport.newInstance(applicationId3, ApplicationAttemptId.newInstance(applicationId3, 3), \"user3\", \"queue3\", \"appname3\", \"host3\", 126, null, YarnApplicationState.RUNNING, \"diagnostics3\", \"url3\", 3, 3, 3, FinalApplicationStatus.SUCCEEDED, null, \"N/A\", 0.73789f, \"MAPREDUCE\", null, Sets.newHashSet(\"tag1\", \"tag4\"), false, Priority.UNDEFINED, \"\", \"\");\r\n    applicationReports.add(newApplicationReport3);\r\n    ApplicationId applicationId4 = ApplicationId.newInstance(1234, 8);\r\n    ApplicationReport newApplicationReport4 = ApplicationReport.newInstance(applicationId4, ApplicationAttemptId.newInstance(applicationId4, 4), \"user4\", \"queue4\", \"appname4\", \"host4\", 127, null, YarnApplicationState.FAILED, \"diagnostics4\", \"url4\", 4, 4, 4, FinalApplicationStatus.SUCCEEDED, null, \"N/A\", 0.83789f, \"NON-MAPREDUCE\", null, Sets.newHashSet(\"tag1\"), false, Priority.UNDEFINED, \"\", \"\");\r\n    applicationReports.add(newApplicationReport4);\r\n    ApplicationId applicationId5 = ApplicationId.newInstance(1234, 9);\r\n    ApplicationReport newApplicationReport5 = ApplicationReport.newInstance(applicationId5, ApplicationAttemptId.newInstance(applicationId5, 5), \"user5\", \"queue5\", \"appname5\", \"host5\", 128, null, YarnApplicationState.ACCEPTED, \"diagnostics5\", \"url5\", 5, 5, 5, FinalApplicationStatus.KILLED, null, \"N/A\", 0.93789f, \"HIVE\", null, Sets.newHashSet(\"tag2\", \"tag4\"), false, Priority.UNDEFINED, \"\", \"\");\r\n    applicationReports.add(newApplicationReport5);\r\n    ApplicationId applicationId6 = ApplicationId.newInstance(1234, 10);\r\n    ApplicationReport newApplicationReport6 = ApplicationReport.newInstance(applicationId6, ApplicationAttemptId.newInstance(applicationId6, 6), \"user6\", \"queue6\", \"appname6\", \"host6\", 129, null, YarnApplicationState.SUBMITTED, \"diagnostics6\", \"url6\", 6, 6, 6, FinalApplicationStatus.KILLED, null, \"N/A\", 0.99789f, \"PIG\", null, new HashSet<String>(), false, Priority.UNDEFINED, \"\", \"\");\r\n    applicationReports.add(newApplicationReport6);\r\n    Set<String> appType1 = new HashSet<String>();\r\n    EnumSet<YarnApplicationState> appState1 = EnumSet.noneOf(YarnApplicationState.class);\r\n    appState1.add(YarnApplicationState.RUNNING);\r\n    appState1.add(YarnApplicationState.ACCEPTED);\r\n    appState1.add(YarnApplicationState.SUBMITTED);\r\n    Set<String> appTag = new HashSet<String>();\r\n    when(client.getApplications(appType1, appState1, appTag)).thenReturn(getApplicationReports(applicationReports, appType1, appState1, appTag, false));\r\n    int result = cli.run(new String[] { \"application\", \"-list\" });\r\n    assertEquals(0, result);\r\n    verify(client).getApplications(appType1, appState1, appTag);\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    PrintWriter pw = new PrintWriter(baos);\r\n    pw.println(\"Total number of applications (application-types: \" + appType1 + \", states: \" + appState1 + \" and tags: \" + appTag + \")\" + \":\" + 4);\r\n    pw.print(\"                Application-Id\\t    Application-Name\");\r\n    pw.print(\"\\t    Application-Type\");\r\n    pw.print(\"\\t      User\\t     Queue\\t             State\\t       \");\r\n    pw.print(\"Final-State\\t       Progress\");\r\n    pw.println(\"\\t                       Tracking-URL\");\r\n    pw.print(\"         application_1234_0005\\t             \");\r\n    pw.print(\"appname\\t                YARN\\t      user\\t     \");\r\n    pw.print(\"queue\\t           RUNNING\\t         \");\r\n    pw.print(\"SUCCEEDED\\t         53.79%\");\r\n    pw.println(\"\\t                                N/A\");\r\n    pw.print(\"         application_1234_0007\\t            \");\r\n    pw.print(\"appname3\\t           MAPREDUCE\\t     user3\\t    \");\r\n    pw.print(\"queue3\\t           RUNNING\\t         \");\r\n    pw.print(\"SUCCEEDED\\t         73.79%\");\r\n    pw.println(\"\\t                                N/A\");\r\n    pw.print(\"         application_1234_0009\\t            \");\r\n    pw.print(\"appname5\\t                HIVE\\t     user5\\t    \");\r\n    pw.print(\"queue5\\t          ACCEPTED\\t            \");\r\n    pw.print(\"KILLED\\t         93.79%\");\r\n    pw.println(\"\\t                                N/A\");\r\n    pw.print(\"         application_1234_0010\\t            \");\r\n    pw.print(\"appname6\\t                 PIG\\t     user6\\t    \");\r\n    pw.print(\"queue6\\t         SUBMITTED\\t            \");\r\n    pw.print(\"KILLED\\t         99.79%\");\r\n    pw.println(\"\\t                                N/A\");\r\n    pw.close();\r\n    String appsReportStr = baos.toString(\"UTF-8\");\r\n    Assert.assertEquals(appsReportStr, sysOutStream.toString());\r\n    verify(sysOut, times(1)).write(any(byte[].class), anyInt(), anyInt());\r\n    sysOutStream.reset();\r\n    Set<String> appType2 = new HashSet<String>();\r\n    appType2.add(\"YARN\");\r\n    appType2.add(\"NON-YARN\");\r\n    EnumSet<YarnApplicationState> appState2 = EnumSet.noneOf(YarnApplicationState.class);\r\n    appState2.add(YarnApplicationState.RUNNING);\r\n    appState2.add(YarnApplicationState.ACCEPTED);\r\n    appState2.add(YarnApplicationState.SUBMITTED);\r\n    when(client.getApplications(appType2, appState2, appTag)).thenReturn(getApplicationReports(applicationReports, appType2, appState2, appTag, false));\r\n    result = cli.run(new String[] { \"application\", \"-list\", \"-appTypes\", \"YARN, ,,  NON-YARN\", \"   ,, ,,\" });\r\n    assertEquals(0, result);\r\n    verify(client).getApplications(appType2, appState2, appTag);\r\n    baos = new ByteArrayOutputStream();\r\n    pw = new PrintWriter(baos);\r\n    pw.println(\"Total number of applications (application-types: \" + appType2 + \", states: \" + appState2 + \" and tags: \" + appTag + \")\" + \":\" + 1);\r\n    pw.print(\"                Application-Id\\t    Application-Name\");\r\n    pw.print(\"\\t    Application-Type\");\r\n    pw.print(\"\\t      User\\t     Queue\\t             State\\t       \");\r\n    pw.print(\"Final-State\\t       Progress\");\r\n    pw.println(\"\\t                       Tracking-URL\");\r\n    pw.print(\"         application_1234_0005\\t             \");\r\n    pw.print(\"appname\\t                YARN\\t      user\\t     \");\r\n    pw.print(\"queue\\t           RUNNING\\t         \");\r\n    pw.print(\"SUCCEEDED\\t         53.79%\");\r\n    pw.println(\"\\t                                N/A\");\r\n    pw.close();\r\n    appsReportStr = baos.toString(\"UTF-8\");\r\n    Assert.assertEquals(appsReportStr, sysOutStream.toString());\r\n    verify(sysOut, times(2)).write(any(byte[].class), anyInt(), anyInt());\r\n    sysOutStream.reset();\r\n    Set<String> appType3 = new HashSet<String>();\r\n    EnumSet<YarnApplicationState> appState3 = EnumSet.noneOf(YarnApplicationState.class);\r\n    appState3.add(YarnApplicationState.FINISHED);\r\n    appState3.add(YarnApplicationState.FAILED);\r\n    when(client.getApplications(appType3, appState3, appTag)).thenReturn(getApplicationReports(applicationReports, appType3, appState3, appTag, false));\r\n    result = cli.run(new String[] { \"application\", \"-list\", \"--appStates\", \"FINISHED ,, , FAILED\", \",,FINISHED\" });\r\n    assertEquals(0, result);\r\n    verify(client).getApplications(appType3, appState3, appTag);\r\n    baos = new ByteArrayOutputStream();\r\n    pw = new PrintWriter(baos);\r\n    pw.println(\"Total number of applications (application-types: \" + appType3 + \", states: \" + appState3 + \" and tags: \" + appTag + \")\" + \":\" + 2);\r\n    pw.print(\"                Application-Id\\t    Application-Name\");\r\n    pw.print(\"\\t    Application-Type\");\r\n    pw.print(\"\\t      User\\t     Queue\\t             State\\t       \");\r\n    pw.print(\"Final-State\\t       Progress\");\r\n    pw.println(\"\\t                       Tracking-URL\");\r\n    pw.print(\"         application_1234_0006\\t            \");\r\n    pw.print(\"appname2\\t            NON-YARN\\t     user2\\t    \");\r\n    pw.print(\"queue2\\t          FINISHED\\t         \");\r\n    pw.print(\"SUCCEEDED\\t         63.79%\");\r\n    pw.println(\"\\t                                N/A\");\r\n    pw.print(\"         application_1234_0008\\t            \");\r\n    pw.print(\"appname4\\t       NON-MAPREDUCE\\t     user4\\t    \");\r\n    pw.print(\"queue4\\t            FAILED\\t         \");\r\n    pw.print(\"SUCCEEDED\\t         83.79%\");\r\n    pw.println(\"\\t                                N/A\");\r\n    pw.close();\r\n    appsReportStr = baos.toString(\"UTF-8\");\r\n    Assert.assertEquals(appsReportStr, sysOutStream.toString());\r\n    verify(sysOut, times(3)).write(any(byte[].class), anyInt(), anyInt());\r\n    sysOutStream.reset();\r\n    Set<String> appType4 = new HashSet<String>();\r\n    appType4.add(\"YARN\");\r\n    appType4.add(\"NON-YARN\");\r\n    EnumSet<YarnApplicationState> appState4 = EnumSet.noneOf(YarnApplicationState.class);\r\n    appState4.add(YarnApplicationState.FINISHED);\r\n    appState4.add(YarnApplicationState.FAILED);\r\n    when(client.getApplications(appType4, appState4, appTag)).thenReturn(getApplicationReports(applicationReports, appType4, appState4, appTag, false));\r\n    result = cli.run(new String[] { \"application\", \"-list\", \"--appTypes\", \"YARN,NON-YARN\", \"--appStates\", \"FINISHED ,, , FAILED\" });\r\n    assertEquals(0, result);\r\n    verify(client).getApplications(appType2, appState2, appTag);\r\n    baos = new ByteArrayOutputStream();\r\n    pw = new PrintWriter(baos);\r\n    pw.println(\"Total number of applications (application-types: \" + appType4 + \", states: \" + appState4 + \" and tags: \" + appTag + \")\" + \":\" + 1);\r\n    pw.print(\"                Application-Id\\t    Application-Name\");\r\n    pw.print(\"\\t    Application-Type\");\r\n    pw.print(\"\\t      User\\t     Queue\\t             State\\t       \");\r\n    pw.print(\"Final-State\\t       Progress\");\r\n    pw.println(\"\\t                       Tracking-URL\");\r\n    pw.print(\"         application_1234_0006\\t            \");\r\n    pw.print(\"appname2\\t            NON-YARN\\t     user2\\t    \");\r\n    pw.print(\"queue2\\t          FINISHED\\t         \");\r\n    pw.print(\"SUCCEEDED\\t         63.79%\");\r\n    pw.println(\"\\t                                N/A\");\r\n    pw.close();\r\n    appsReportStr = baos.toString(\"UTF-8\");\r\n    Assert.assertEquals(appsReportStr, sysOutStream.toString());\r\n    verify(sysOut, times(4)).write(any(byte[].class), anyInt(), anyInt());\r\n    sysOutStream.reset();\r\n    result = cli.run(new String[] { \"application\", \"-list\", \"--appStates\", \"FINISHED ,, , INVALID\" });\r\n    assertEquals(-1, result);\r\n    baos = new ByteArrayOutputStream();\r\n    pw = new PrintWriter(baos);\r\n    pw.println(\"The application state  INVALID is invalid.\");\r\n    pw.print(\"The valid application state can be one of the following: \");\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"ALL,\");\r\n    for (YarnApplicationState state : YarnApplicationState.values()) {\r\n        sb.append(state + \",\");\r\n    }\r\n    String output = sb.toString();\r\n    pw.println(output.substring(0, output.length() - 1));\r\n    pw.close();\r\n    appsReportStr = baos.toString(\"UTF-8\");\r\n    Assert.assertEquals(appsReportStr, sysOutStream.toString());\r\n    verify(sysOut, times(4)).write(any(byte[].class), anyInt(), anyInt());\r\n    sysOutStream.reset();\r\n    Set<String> appType5 = new HashSet<String>();\r\n    EnumSet<YarnApplicationState> appState5 = EnumSet.noneOf(YarnApplicationState.class);\r\n    appState5.add(YarnApplicationState.FINISHED);\r\n    when(client.getApplications(appType5, appState5, appTag)).thenReturn(getApplicationReports(applicationReports, appType5, appState5, appTag, true));\r\n    result = cli.run(new String[] { \"application\", \"-list\", \"--appStates\", \"FINISHED ,, , ALL\" });\r\n    assertEquals(0, result);\r\n    verify(client).getApplications(appType5, appState5, appTag);\r\n    baos = new ByteArrayOutputStream();\r\n    pw = new PrintWriter(baos);\r\n    pw.println(\"Total number of applications (application-types: \" + appType5 + \", states: \" + appState5 + \" and tags: \" + appTag + \")\" + \":\" + 6);\r\n    pw.print(\"                Application-Id\\t    Application-Name\");\r\n    pw.print(\"\\t    Application-Type\");\r\n    pw.print(\"\\t      User\\t     Queue\\t             State\\t       \");\r\n    pw.print(\"Final-State\\t       Progress\");\r\n    pw.println(\"\\t                       Tracking-URL\");\r\n    pw.print(\"         application_1234_0005\\t             \");\r\n    pw.print(\"appname\\t                YARN\\t      user\\t     \");\r\n    pw.print(\"queue\\t           RUNNING\\t         \");\r\n    pw.print(\"SUCCEEDED\\t         53.79%\");\r\n    pw.println(\"\\t                                N/A\");\r\n    pw.print(\"         application_1234_0006\\t            \");\r\n    pw.print(\"appname2\\t            NON-YARN\\t     user2\\t    \");\r\n    pw.print(\"queue2\\t          FINISHED\\t         \");\r\n    pw.print(\"SUCCEEDED\\t         63.79%\");\r\n    pw.println(\"\\t                                N/A\");\r\n    pw.print(\"         application_1234_0007\\t            \");\r\n    pw.print(\"appname3\\t           MAPREDUCE\\t     user3\\t    \");\r\n    pw.print(\"queue3\\t           RUNNING\\t         \");\r\n    pw.print(\"SUCCEEDED\\t         73.79%\");\r\n    pw.println(\"\\t                                N/A\");\r\n    pw.print(\"         application_1234_0008\\t            \");\r\n    pw.print(\"appname4\\t       NON-MAPREDUCE\\t     user4\\t    \");\r\n    pw.print(\"queue4\\t            FAILED\\t         \");\r\n    pw.print(\"SUCCEEDED\\t         83.79%\");\r\n    pw.println(\"\\t                                N/A\");\r\n    pw.print(\"         application_1234_0009\\t            \");\r\n    pw.print(\"appname5\\t                HIVE\\t     user5\\t    \");\r\n    pw.print(\"queue5\\t          ACCEPTED\\t            \");\r\n    pw.print(\"KILLED\\t         93.79%\");\r\n    pw.println(\"\\t                                N/A\");\r\n    pw.print(\"         application_1234_0010\\t            \");\r\n    pw.print(\"appname6\\t                 PIG\\t     user6\\t    \");\r\n    pw.print(\"queue6\\t         SUBMITTED\\t            \");\r\n    pw.print(\"KILLED\\t         99.79%\");\r\n    pw.println(\"\\t                                N/A\");\r\n    pw.close();\r\n    appsReportStr = baos.toString(\"UTF-8\");\r\n    Assert.assertEquals(appsReportStr, sysOutStream.toString());\r\n    verify(sysOut, times(5)).write(any(byte[].class), anyInt(), anyInt());\r\n    sysOutStream.reset();\r\n    Set<String> appType6 = new HashSet<String>();\r\n    appType6.add(\"YARN\");\r\n    appType6.add(\"NON-YARN\");\r\n    EnumSet<YarnApplicationState> appState6 = EnumSet.noneOf(YarnApplicationState.class);\r\n    appState6.add(YarnApplicationState.FINISHED);\r\n    when(client.getApplications(appType6, appState6, appTag)).thenReturn(getApplicationReports(applicationReports, appType6, appState6, appTag, false));\r\n    result = cli.run(new String[] { \"application\", \"-list\", \"-appTypes\", \"YARN, ,,  NON-YARN\", \"--appStates\", \"finished\" });\r\n    assertEquals(0, result);\r\n    verify(client).getApplications(appType6, appState6, appTag);\r\n    baos = new ByteArrayOutputStream();\r\n    pw = new PrintWriter(baos);\r\n    pw.println(\"Total number of applications (application-types: \" + appType6 + \", states: \" + appState6 + \" and tags: \" + appTag + \")\" + \":\" + 1);\r\n    pw.print(\"                Application-Id\\t    Application-Name\");\r\n    pw.print(\"\\t    Application-Type\");\r\n    pw.print(\"\\t      User\\t     Queue\\t             State\\t       \");\r\n    pw.print(\"Final-State\\t       Progress\");\r\n    pw.println(\"\\t                       Tracking-URL\");\r\n    pw.print(\"         application_1234_0006\\t            \");\r\n    pw.print(\"appname2\\t            NON-YARN\\t     user2\\t    \");\r\n    pw.print(\"queue2\\t          FINISHED\\t         \");\r\n    pw.print(\"SUCCEEDED\\t         63.79%\");\r\n    pw.println(\"\\t                                N/A\");\r\n    pw.close();\r\n    appsReportStr = baos.toString(\"UTF-8\");\r\n    Assert.assertEquals(appsReportStr, sysOutStream.toString());\r\n    verify(sysOut, times(6)).write(any(byte[].class), anyInt(), anyInt());\r\n    sysOutStream.reset();\r\n    Set<String> appTag1 = Sets.newHashSet(\"tag1\");\r\n    when(client.getApplications(appType1, appState1, appTag1)).thenReturn(getApplicationReports(applicationReports, appType1, appState1, appTag1, false));\r\n    result = cli.run(new String[] { \"application\", \"-list\", \"-appTags\", \"tag1\" });\r\n    assertEquals(0, result);\r\n    verify(client).getApplications(appType1, appState1, appTag1);\r\n    baos = new ByteArrayOutputStream();\r\n    pw = new PrintWriter(baos);\r\n    pw.println(\"Total number of applications (application-types: \" + appType1 + \", states: \" + appState1 + \" and tags: \" + appTag1 + \")\" + \":\" + 2);\r\n    pw.print(\"                Application-Id\\t    Application-Name\");\r\n    pw.print(\"\\t    Application-Type\");\r\n    pw.print(\"\\t      User\\t     Queue\\t             State\\t       \");\r\n    pw.print(\"Final-State\\t       Progress\");\r\n    pw.println(\"\\t                       Tracking-URL\");\r\n    pw.print(\"         application_1234_0005\\t             \");\r\n    pw.print(\"appname\\t                YARN\\t      user\\t     \");\r\n    pw.print(\"queue\\t           RUNNING\\t         \");\r\n    pw.print(\"SUCCEEDED\\t         53.79%\");\r\n    pw.println(\"\\t                                N/A\");\r\n    pw.print(\"         application_1234_0007\\t            \");\r\n    pw.print(\"appname3\\t           MAPREDUCE\\t     user3\\t    \");\r\n    pw.print(\"queue3\\t           RUNNING\\t         \");\r\n    pw.print(\"SUCCEEDED\\t         73.79%\");\r\n    pw.println(\"\\t                                N/A\");\r\n    pw.close();\r\n    appsReportStr = baos.toString(\"UTF-8\");\r\n    Assert.assertEquals(appsReportStr, sysOutStream.toString());\r\n    verify(sysOut, times(7)).write(any(byte[].class), anyInt(), anyInt());\r\n    sysOutStream.reset();\r\n    EnumSet<YarnApplicationState> appState7 = EnumSet.of(YarnApplicationState.RUNNING, YarnApplicationState.FAILED);\r\n    when(client.getApplications(appType1, appState7, appTag1)).thenReturn(getApplicationReports(applicationReports, appType1, appState7, appTag1, false));\r\n    result = cli.run(new String[] { \"application\", \"-list\", \"-appStates\", \"RUNNING,FAILED\", \"-appTags\", \"tag1\" });\r\n    assertEquals(0, result);\r\n    verify(client).getApplications(appType1, appState7, appTag1);\r\n    baos = new ByteArrayOutputStream();\r\n    pw = new PrintWriter(baos);\r\n    pw.println(\"Total number of applications (application-types: \" + appType1 + \", states: \" + appState7 + \" and tags: \" + appTag1 + \")\" + \":\" + 3);\r\n    pw.print(\"                Application-Id\\t    Application-Name\");\r\n    pw.print(\"\\t    Application-Type\");\r\n    pw.print(\"\\t      User\\t     Queue\\t             State\\t       \");\r\n    pw.print(\"Final-State\\t       Progress\");\r\n    pw.println(\"\\t                       Tracking-URL\");\r\n    pw.print(\"         application_1234_0005\\t             \");\r\n    pw.print(\"appname\\t                YARN\\t      user\\t     \");\r\n    pw.print(\"queue\\t           RUNNING\\t         \");\r\n    pw.print(\"SUCCEEDED\\t         53.79%\");\r\n    pw.println(\"\\t                                N/A\");\r\n    pw.print(\"         application_1234_0007\\t            \");\r\n    pw.print(\"appname3\\t           MAPREDUCE\\t     user3\\t    \");\r\n    pw.print(\"queue3\\t           RUNNING\\t         \");\r\n    pw.print(\"SUCCEEDED\\t         73.79%\");\r\n    pw.println(\"\\t                                N/A\");\r\n    pw.print(\"         application_1234_0008\\t            \");\r\n    pw.print(\"appname4\\t       NON-MAPREDUCE\\t     user4\\t    \");\r\n    pw.print(\"queue4\\t            FAILED\\t         \");\r\n    pw.print(\"SUCCEEDED\\t         83.79%\");\r\n    pw.println(\"\\t                                N/A\");\r\n    pw.close();\r\n    appsReportStr = baos.toString(\"UTF-8\");\r\n    Assert.assertEquals(appsReportStr, sysOutStream.toString());\r\n    verify(sysOut, times(8)).write(any(byte[].class), anyInt(), anyInt());\r\n    sysOutStream.reset();\r\n    Set<String> appType9 = Sets.newHashSet(\"YARN\");\r\n    Set<String> appTag2 = Sets.newHashSet(\"tag3\");\r\n    when(client.getApplications(appType9, appState1, appTag2)).thenReturn(getApplicationReports(applicationReports, appType9, appState1, appTag2, false));\r\n    result = cli.run(new String[] { \"application\", \"-list\", \"-appTypes\", \"YARN\", \"-appTags\", \"tag3\" });\r\n    assertEquals(0, result);\r\n    verify(client).getApplications(appType9, appState1, appTag2);\r\n    baos = new ByteArrayOutputStream();\r\n    pw = new PrintWriter(baos);\r\n    pw.println(\"Total number of applications (application-types: \" + appType9 + \", states: \" + appState1 + \" and tags: \" + appTag2 + \")\" + \":\" + 1);\r\n    pw.print(\"                Application-Id\\t    Application-Name\");\r\n    pw.print(\"\\t    Application-Type\");\r\n    pw.print(\"\\t      User\\t     Queue\\t             State\\t       \");\r\n    pw.print(\"Final-State\\t       Progress\");\r\n    pw.println(\"\\t                       Tracking-URL\");\r\n    pw.print(\"         application_1234_0005\\t             \");\r\n    pw.print(\"appname\\t                YARN\\t      user\\t     \");\r\n    pw.print(\"queue\\t           RUNNING\\t         \");\r\n    pw.print(\"SUCCEEDED\\t         53.79%\");\r\n    pw.println(\"\\t                                N/A\");\r\n    pw.close();\r\n    appsReportStr = baos.toString(\"UTF-8\");\r\n    Assert.assertEquals(appsReportStr, sysOutStream.toString());\r\n    verify(sysOut, times(9)).write(any(byte[].class), anyInt(), anyInt());\r\n    sysOutStream.reset();\r\n    Set<String> appType10 = Sets.newHashSet(\"HIVE\");\r\n    Set<String> appTag3 = Sets.newHashSet(\"tag4\");\r\n    EnumSet<YarnApplicationState> appState10 = EnumSet.of(YarnApplicationState.ACCEPTED);\r\n    when(client.getApplications(appType10, appState10, appTag3)).thenReturn(getApplicationReports(applicationReports, appType10, appState10, appTag3, false));\r\n    result = cli.run(new String[] { \"application\", \"-list\", \"-appTypes\", \"HIVE\", \"-appStates\", \"ACCEPTED\", \"-appTags\", \"tag4\" });\r\n    assertEquals(0, result);\r\n    verify(client).getApplications(appType10, appState10, appTag3);\r\n    baos = new ByteArrayOutputStream();\r\n    pw = new PrintWriter(baos);\r\n    pw.println(\"Total number of applications (application-types: \" + appType10 + \", states: \" + appState10 + \" and tags: \" + appTag3 + \")\" + \":\" + 1);\r\n    pw.print(\"                Application-Id\\t    Application-Name\");\r\n    pw.print(\"\\t    Application-Type\");\r\n    pw.print(\"\\t      User\\t     Queue\\t             State\\t       \");\r\n    pw.print(\"Final-State\\t       Progress\");\r\n    pw.println(\"\\t                       Tracking-URL\");\r\n    pw.print(\"         application_1234_0009\\t            \");\r\n    pw.print(\"appname5\\t                HIVE\\t     user5\\t    \");\r\n    pw.print(\"queue5\\t          ACCEPTED\\t            \");\r\n    pw.print(\"KILLED\\t         93.79%\");\r\n    pw.println(\"\\t                                N/A\");\r\n    pw.close();\r\n    appsReportStr = baos.toString(\"UTF-8\");\r\n    Assert.assertEquals(appsReportStr, sysOutStream.toString());\r\n    verify(sysOut, times(10)).write(any(byte[].class), anyInt(), anyInt());\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getApplicationReports",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "List<ApplicationReport> getApplicationReports(List<ApplicationReport> applicationReports, Set<String> appTypes, EnumSet<YarnApplicationState> appStates, Set<String> appTags, boolean allStates)\n{\r\n    List<ApplicationReport> appReports = new ArrayList<ApplicationReport>();\r\n    if (allStates) {\r\n        for (YarnApplicationState state : YarnApplicationState.values()) {\r\n            appStates.add(state);\r\n        }\r\n    }\r\n    for (ApplicationReport appReport : applicationReports) {\r\n        if (appTypes != null && !appTypes.isEmpty()) {\r\n            if (!appTypes.contains(appReport.getApplicationType())) {\r\n                continue;\r\n            }\r\n        }\r\n        if (appStates != null && !appStates.isEmpty()) {\r\n            if (!appStates.contains(appReport.getYarnApplicationState())) {\r\n                continue;\r\n            }\r\n        }\r\n        if (appTags != null && !appTags.isEmpty()) {\r\n            Set<String> tags = appReport.getApplicationTags();\r\n            if (tags == null || tags.isEmpty()) {\r\n                continue;\r\n            }\r\n            boolean match = false;\r\n            for (String appTag : appTags) {\r\n                if (tags.contains(appTag)) {\r\n                    match = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!match) {\r\n                continue;\r\n            }\r\n        }\r\n        appReports.add(appReport);\r\n    }\r\n    return appReports;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testAppsHelpCommand",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testAppsHelpCommand() throws Exception\n{\r\n    ApplicationCLI cli = createAndGetAppCLI();\r\n    ApplicationCLI spyCli = spy(cli);\r\n    int result = spyCli.run(new String[] { \"application\", \"-help\" });\r\n    Assert.assertTrue(result == 0);\r\n    verify(spyCli).printUsage(any(String.class), any(Options.class));\r\n    Assert.assertEquals(createApplicationCLIHelpMessage(), sysOutStream.toString());\r\n    sysOutStream.reset();\r\n    NodeId nodeId = NodeId.newInstance(\"host0\", 0);\r\n    result = cli.run(new String[] { \"application\", \"-status\", nodeId.toString(), \"args\" });\r\n    verify(spyCli).printUsage(any(String.class), any(Options.class));\r\n    Assert.assertEquals(createApplicationCLIHelpMessage(), sysOutStream.toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testAppAttemptsHelpCommand",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testAppAttemptsHelpCommand() throws Exception\n{\r\n    ApplicationCLI cli = createAndGetAppCLI();\r\n    ApplicationCLI spyCli = spy(cli);\r\n    int result = spyCli.run(new String[] { \"applicationattempt\", \"-help\" });\r\n    Assert.assertTrue(result == 0);\r\n    verify(spyCli).printUsage(any(String.class), any(Options.class));\r\n    Assert.assertEquals(createApplicationAttemptCLIHelpMessage(), sysOutStream.toString());\r\n    sysOutStream.reset();\r\n    ApplicationId applicationId = ApplicationId.newInstance(1234, 5);\r\n    result = cli.run(new String[] { \"applicationattempt\", \"-list\", applicationId.toString(), \"args\" });\r\n    verify(spyCli).printUsage(any(String.class), any(Options.class));\r\n    Assert.assertEquals(createApplicationAttemptCLIHelpMessage(), sysOutStream.toString());\r\n    sysOutStream.reset();\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(applicationId, 6);\r\n    result = cli.run(new String[] { \"applicationattempt\", \"-status\", appAttemptId.toString(), \"args\" });\r\n    verify(spyCli).printUsage(any(String.class), any(Options.class));\r\n    Assert.assertEquals(createApplicationAttemptCLIHelpMessage(), sysOutStream.toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testContainersHelpCommand",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testContainersHelpCommand() throws Exception\n{\r\n    ApplicationCLI cli = createAndGetAppCLI();\r\n    ApplicationCLI spyCli = spy(cli);\r\n    int result = spyCli.run(new String[] { \"container\", \"-help\" });\r\n    Assert.assertTrue(result == 0);\r\n    verify(spyCli).printUsage(any(String.class), any(Options.class));\r\n    Assert.assertEquals(createContainerCLIHelpMessage(), normalize(sysOutStream.toString()));\r\n    sysOutStream.reset();\r\n    ApplicationId applicationId = ApplicationId.newInstance(1234, 5);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(applicationId, 6);\r\n    result = cli.run(new String[] { \"container\", \"-list\", appAttemptId.toString(), \"args\" });\r\n    verify(spyCli).printUsage(any(String.class), any(Options.class));\r\n    Assert.assertEquals(createContainerCLIHelpMessage(), normalize(sysOutStream.toString()));\r\n    sysOutStream.reset();\r\n    ContainerId containerId = ContainerId.newContainerId(appAttemptId, 7);\r\n    result = cli.run(new String[] { \"container\", \"-status\", containerId.toString(), \"args\" });\r\n    verify(spyCli).printUsage(any(String.class), any(Options.class));\r\n    Assert.assertEquals(createContainerCLIHelpMessage(), normalize(sysOutStream.toString()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testNodesHelpCommand",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testNodesHelpCommand() throws Exception\n{\r\n    NodeCLI nodeCLI = createAndGetNodeCLI();\r\n    nodeCLI.run(new String[] {});\r\n    Assert.assertEquals(createNodeCLIHelpMessage(), sysOutStream.toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testKillApplication",
  "errType" : [ "ApplicationNotFoundException", "Exception" ],
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void testKillApplication() throws Exception\n{\r\n    ApplicationCLI cli = createAndGetAppCLI();\r\n    ApplicationId applicationId = ApplicationId.newInstance(1234, 5);\r\n    ApplicationReport newApplicationReport2 = ApplicationReport.newInstance(applicationId, ApplicationAttemptId.newInstance(applicationId, 1), \"user\", \"queue\", \"appname\", \"host\", 124, null, YarnApplicationState.FINISHED, \"diagnostics\", \"url\", 0, 0, 0, FinalApplicationStatus.SUCCEEDED, null, \"N/A\", 0.53789f, \"YARN\", null);\r\n    when(client.getApplicationReport(any(ApplicationId.class))).thenReturn(newApplicationReport2);\r\n    int result = cli.run(new String[] { \"application\", \"-kill\", applicationId.toString() });\r\n    assertEquals(0, result);\r\n    verify(client, times(0)).killApplication(any(ApplicationId.class));\r\n    verify(sysOut).println(\"Application \" + applicationId + \" has already finished \");\r\n    ApplicationReport newApplicationReport = ApplicationReport.newInstance(applicationId, ApplicationAttemptId.newInstance(applicationId, 1), \"user\", \"queue\", \"appname\", \"host\", 124, null, YarnApplicationState.RUNNING, \"diagnostics\", \"url\", 0, 0, 0, FinalApplicationStatus.SUCCEEDED, null, \"N/A\", 0.53789f, \"YARN\", null);\r\n    when(client.getApplicationReport(any(ApplicationId.class))).thenReturn(newApplicationReport);\r\n    result = cli.run(new String[] { \"application\", \"-kill\", applicationId.toString() });\r\n    assertEquals(0, result);\r\n    verify(client).killApplication(any(ApplicationId.class));\r\n    verify(sysOut).println(\"Killing application application_1234_0005\");\r\n    doThrow(new ApplicationNotFoundException(\"Application with id '\" + applicationId + \"' doesn't exist in RM.\")).when(client).getApplicationReport(applicationId);\r\n    cli = createAndGetAppCLI();\r\n    try {\r\n        int exitCode = cli.run(new String[] { \"application\", \"-kill\", applicationId.toString() });\r\n        verify(sysOut).println(\"Application with id '\" + applicationId + \"' doesn't exist in RM.\");\r\n        Assert.assertNotSame(\"should return non-zero exit code.\", 0, exitCode);\r\n    } catch (ApplicationNotFoundException appEx) {\r\n        Assert.fail(\"application -kill should not throw\" + \"ApplicationNotFoundException. \" + appEx);\r\n    } catch (Exception e) {\r\n        Assert.fail(\"Unexpected exception: \" + e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testKillApplications",
  "errType" : null,
  "containingMethodsNum" : 40,
  "sourceCodeText" : "void testKillApplications() throws Exception\n{\r\n    ApplicationCLI cli = createAndGetAppCLI();\r\n    ApplicationId applicationId1 = ApplicationId.newInstance(1234, 5);\r\n    ApplicationId applicationId2 = ApplicationId.newInstance(1234, 6);\r\n    ApplicationId applicationId3 = ApplicationId.newInstance(1234, 7);\r\n    ApplicationId applicationId4 = ApplicationId.newInstance(1234, 8);\r\n    ApplicationReport newApplicationReport1 = ApplicationReport.newInstance(applicationId1, ApplicationAttemptId.newInstance(applicationId1, 1), \"user\", \"queue\", \"appname\", \"host\", 124, null, YarnApplicationState.FINISHED, \"diagnostics\", \"url\", 0, 0, 0, FinalApplicationStatus.SUCCEEDED, null, \"N/A\", 0.53789f, \"YARN\", null);\r\n    ApplicationReport newApplicationReport2 = ApplicationReport.newInstance(applicationId2, ApplicationAttemptId.newInstance(applicationId2, 1), \"user\", \"queue\", \"appname\", \"host\", 124, null, YarnApplicationState.FINISHED, \"diagnostics\", \"url\", 0, 0, 0, FinalApplicationStatus.SUCCEEDED, null, \"N/A\", 0.34344f, \"YARN\", null);\r\n    when(client.getApplicationReport(applicationId1)).thenReturn(newApplicationReport1);\r\n    when(client.getApplicationReport(applicationId2)).thenReturn(newApplicationReport2);\r\n    int result = cli.run(new String[] { \"application\", \"-kill\", applicationId1.toString() + \" \" + applicationId2.toString() });\r\n    assertEquals(0, result);\r\n    verify(client, times(0)).killApplication(applicationId1);\r\n    verify(client, times(0)).killApplication(applicationId2);\r\n    verify(sysOut).println(\"Application \" + applicationId1 + \" has already finished \");\r\n    verify(sysOut).println(\"Application \" + applicationId2 + \" has already finished \");\r\n    ApplicationReport newApplicationReport3 = ApplicationReport.newInstance(applicationId1, ApplicationAttemptId.newInstance(applicationId1, 1), \"user\", \"queue\", \"appname\", \"host\", 124, null, YarnApplicationState.RUNNING, \"diagnostics\", \"url\", 0, 0, 0, FinalApplicationStatus.SUCCEEDED, null, \"N/A\", 0.53789f, \"YARN\", null);\r\n    ApplicationReport newApplicationReport4 = ApplicationReport.newInstance(applicationId2, ApplicationAttemptId.newInstance(applicationId2, 1), \"user\", \"queue\", \"appname\", \"host\", 124, null, YarnApplicationState.RUNNING, \"diagnostics\", \"url\", 0, 0, 0, FinalApplicationStatus.SUCCEEDED, null, \"N/A\", 0.53345f, \"YARN\", null);\r\n    when(client.getApplicationReport(applicationId1)).thenReturn(newApplicationReport3);\r\n    when(client.getApplicationReport(applicationId2)).thenReturn(newApplicationReport4);\r\n    result = cli.run(new String[] { \"application\", \"-kill\", applicationId1.toString() + \" \" + applicationId2.toString() });\r\n    assertEquals(0, result);\r\n    verify(client).killApplication(applicationId1);\r\n    verify(client).killApplication(applicationId2);\r\n    verify(sysOut).println(\"Killing application application_1234_0005\");\r\n    verify(sysOut).println(\"Killing application application_1234_0006\");\r\n    doThrow(new ApplicationNotFoundException(\"Application with id '\" + applicationId3 + \"' doesn't exist in RM.\")).when(client).getApplicationReport(applicationId3);\r\n    doThrow(new ApplicationNotFoundException(\"Application with id '\" + applicationId4 + \"' doesn't exist in RM.\")).when(client).getApplicationReport(applicationId4);\r\n    result = cli.run(new String[] { \"application\", \"-kill\", applicationId3.toString() + \" \" + applicationId4.toString() });\r\n    Assert.assertNotEquals(0, result);\r\n    verify(sysOut).println(\"Application with id 'application_1234_0007' doesn't exist in RM.\");\r\n    verify(sysOut).println(\"Application with id 'application_1234_0008' doesn't exist in RM.\");\r\n    doThrow(new ApplicationNotFoundException(\"Application with id '\" + applicationId3 + \"' doesn't exist in RM.\")).when(client).getApplicationReport(applicationId3);\r\n    ApplicationReport newApplicationReport5 = ApplicationReport.newInstance(applicationId1, ApplicationAttemptId.newInstance(applicationId1, 1), \"user\", \"queue\", \"appname\", \"host\", 124, null, YarnApplicationState.RUNNING, \"diagnostics\", \"url\", 0, 0, 0, FinalApplicationStatus.SUCCEEDED, null, \"N/A\", 0.53345f, \"YARN\", null);\r\n    when(client.getApplicationReport(applicationId1)).thenReturn(newApplicationReport5);\r\n    result = cli.run(new String[] { \"application\", \"-kill\", applicationId3.toString() + \" \" + applicationId1.toString() });\r\n    Assert.assertEquals(0, result);\r\n    sysOutStream.reset();\r\n    result = cli.run(new String[] { \"application\", \"--appStates\", \"RUNNING\", \"-kill\", applicationId3.toString() + \" \" + applicationId1.toString() });\r\n    Assert.assertEquals(-1, result);\r\n    Assert.assertEquals(createApplicationCLIHelpMessage(), sysOutStream.toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testKillApplicationsOfDifferentEndStates",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testKillApplicationsOfDifferentEndStates() throws Exception\n{\r\n    ApplicationCLI cli = createAndGetAppCLI();\r\n    ApplicationId applicationId1 = ApplicationId.newInstance(1234, 5);\r\n    ApplicationId applicationId2 = ApplicationId.newInstance(1234, 6);\r\n    ApplicationReport newApplicationReport5 = ApplicationReport.newInstance(applicationId1, ApplicationAttemptId.newInstance(applicationId1, 1), \"user\", \"queue\", \"appname\", \"host\", 124, null, YarnApplicationState.FINISHED, \"diagnostics\", \"url\", 0, 0, 0, FinalApplicationStatus.SUCCEEDED, null, \"N/A\", 0.53789f, \"YARN\", null);\r\n    ApplicationReport newApplicationReport6 = ApplicationReport.newInstance(applicationId2, ApplicationAttemptId.newInstance(applicationId2, 1), \"user\", \"queue\", \"appname\", \"host\", 124, null, YarnApplicationState.RUNNING, \"diagnostics\", \"url\", 0, 0, 0, FinalApplicationStatus.SUCCEEDED, null, \"N/A\", 0.53345f, \"YARN\", null);\r\n    when(client.getApplicationReport(applicationId1)).thenReturn(newApplicationReport5);\r\n    when(client.getApplicationReport(applicationId2)).thenReturn(newApplicationReport6);\r\n    int result = cli.run(new String[] { \"application\", \"-kill\", applicationId1.toString() + \" \" + applicationId2.toString() });\r\n    assertEquals(0, result);\r\n    verify(client, times(1)).killApplication(applicationId2);\r\n    verify(sysOut).println(\"Application \" + applicationId1 + \" has already finished \");\r\n    verify(sysOut).println(\"Killing application application_1234_0006\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testMoveApplicationAcrossQueues",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void testMoveApplicationAcrossQueues() throws Exception\n{\r\n    ApplicationCLI cli = createAndGetAppCLI();\r\n    ApplicationId applicationId = ApplicationId.newInstance(1234, 5);\r\n    ApplicationReport newApplicationReport2 = ApplicationReport.newInstance(applicationId, ApplicationAttemptId.newInstance(applicationId, 1), \"user\", \"queue\", \"appname\", \"host\", 124, null, YarnApplicationState.FINISHED, \"diagnostics\", \"url\", 0, 0, 0, FinalApplicationStatus.SUCCEEDED, null, \"N/A\", 0.53789f, \"YARN\", null);\r\n    when(client.getApplicationReport(any(ApplicationId.class))).thenReturn(newApplicationReport2);\r\n    int result = cli.run(new String[] { \"application\", \"-movetoqueue\", applicationId.toString(), \"-queue\", \"targetqueue\" });\r\n    assertEquals(0, result);\r\n    verify(client, times(0)).moveApplicationAcrossQueues(any(ApplicationId.class), any(String.class));\r\n    verify(sysOut).println(\"Application \" + applicationId + \" has already finished \");\r\n    ApplicationReport newApplicationReport = ApplicationReport.newInstance(applicationId, ApplicationAttemptId.newInstance(applicationId, 1), \"user\", \"queue\", \"appname\", \"host\", 124, null, YarnApplicationState.RUNNING, \"diagnostics\", \"url\", 0, 0, 0, FinalApplicationStatus.SUCCEEDED, null, \"N/A\", 0.53789f, \"YARN\", null);\r\n    when(client.getApplicationReport(any(ApplicationId.class))).thenReturn(newApplicationReport);\r\n    result = cli.run(new String[] { \"application\", \"-movetoqueue\", applicationId.toString(), \"-queue\", \"targetqueue\" });\r\n    assertEquals(0, result);\r\n    verify(client).moveApplicationAcrossQueues(any(ApplicationId.class), any(String.class));\r\n    verify(sysOut).println(\"Moving application application_1234_0005 to queue targetqueue\");\r\n    verify(sysOut).println(\"Successfully completed move.\");\r\n    doThrow(new ApplicationNotFoundException(\"Application with id '\" + applicationId + \"' doesn't exist in RM.\")).when(client).moveApplicationAcrossQueues(applicationId, \"targetqueue\");\r\n    cli = createAndGetAppCLI();\r\n    try {\r\n        result = cli.run(new String[] { \"application\", \"-movetoqueue\", applicationId.toString(), \"-queue\", \"targetqueue\" });\r\n        Assert.fail();\r\n    } catch (Exception ex) {\r\n        Assert.assertTrue(ex instanceof ApplicationNotFoundException);\r\n        Assert.assertEquals(\"Application with id '\" + applicationId + \"' doesn't exist in RM.\", ex.getMessage());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testMoveApplicationAcrossQueuesWithNewCommand",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void testMoveApplicationAcrossQueuesWithNewCommand() throws Exception\n{\r\n    ApplicationCLI cli = createAndGetAppCLI();\r\n    ApplicationId applicationId = ApplicationId.newInstance(1234, 5);\r\n    ApplicationReport newApplicationReport2 = ApplicationReport.newInstance(applicationId, ApplicationAttemptId.newInstance(applicationId, 1), \"user\", \"queue\", \"appname\", \"host\", 124, null, YarnApplicationState.FINISHED, \"diagnostics\", \"url\", 0, 0, 0, FinalApplicationStatus.SUCCEEDED, null, \"N/A\", 0.53789f, \"YARN\", null);\r\n    when(client.getApplicationReport(any(ApplicationId.class))).thenReturn(newApplicationReport2);\r\n    int result = cli.run(new String[] { \"application\", \"-appId\", applicationId.toString(), \"-changeQueue\", \"targetqueue\" });\r\n    assertEquals(0, result);\r\n    verify(client, times(0)).moveApplicationAcrossQueues(any(ApplicationId.class), any(String.class));\r\n    verify(sysOut).println(\"Application \" + applicationId + \" has already finished \");\r\n    ApplicationReport newApplicationReport = ApplicationReport.newInstance(applicationId, ApplicationAttemptId.newInstance(applicationId, 1), \"user\", \"queue\", \"appname\", \"host\", 124, null, YarnApplicationState.RUNNING, \"diagnostics\", \"url\", 0, 0, 0, FinalApplicationStatus.SUCCEEDED, null, \"N/A\", 0.53789f, \"YARN\", null);\r\n    when(client.getApplicationReport(any(ApplicationId.class))).thenReturn(newApplicationReport);\r\n    result = cli.run(new String[] { \"application\", \"-appId\", applicationId.toString(), \"-changeQueue\", \"targetqueue\" });\r\n    assertEquals(0, result);\r\n    verify(client).moveApplicationAcrossQueues(any(ApplicationId.class), any(String.class));\r\n    verify(sysOut).println(\"Moving application application_1234_0005 to queue targetqueue\");\r\n    verify(sysOut).println(\"Successfully completed move.\");\r\n    doThrow(new ApplicationNotFoundException(\"Application with id '\" + applicationId + \"' doesn't exist in RM.\")).when(client).moveApplicationAcrossQueues(applicationId, \"targetqueue\");\r\n    cli = createAndGetAppCLI();\r\n    try {\r\n        result = cli.run(new String[] { \"application\", \"-appId\", applicationId.toString(), \"-changeQueue\", \"targetqueue\" });\r\n        Assert.fail();\r\n    } catch (Exception ex) {\r\n        Assert.assertTrue(ex instanceof ApplicationNotFoundException);\r\n        Assert.assertEquals(\"Application with id '\" + applicationId + \"' doesn't exist in RM.\", ex.getMessage());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testListClusterNodes",
  "errType" : null,
  "containingMethodsNum" : 201,
  "sourceCodeText" : "void testListClusterNodes() throws Exception\n{\r\n    List<NodeReport> nodeReports = new ArrayList<NodeReport>();\r\n    nodeReports.addAll(getNodeReports(1, NodeState.NEW));\r\n    nodeReports.addAll(getNodeReports(2, NodeState.RUNNING));\r\n    nodeReports.addAll(getNodeReports(1, NodeState.UNHEALTHY));\r\n    nodeReports.addAll(getNodeReports(1, NodeState.DECOMMISSIONED));\r\n    nodeReports.addAll(getNodeReports(1, NodeState.REBOOTED));\r\n    nodeReports.addAll(getNodeReports(1, NodeState.LOST));\r\n    NodeCLI cli = createAndGetNodeCLI();\r\n    Set<NodeState> nodeStates = new HashSet<NodeState>();\r\n    nodeStates.add(NodeState.NEW);\r\n    NodeState[] states = nodeStates.toArray(new NodeState[0]);\r\n    when(client.getNodeReports(states)).thenReturn(getNodeReports(nodeReports, nodeStates));\r\n    int result = cli.run(new String[] { \"-list\", \"-states\", \"NEW\" });\r\n    assertEquals(0, result);\r\n    verify(client).getNodeReports(states);\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    PrintWriter pw = new PrintWriter(baos);\r\n    pw.println(\"Total Nodes:1\");\r\n    pw.print(\"         Node-Id\\t     Node-State\\tNode-Http-Address\\t\");\r\n    pw.println(\"Number-of-Running-Containers\");\r\n    pw.print(\"         host0:0\\t            NEW\\t       host1:8888\\t\");\r\n    pw.println(\"                           0\");\r\n    pw.close();\r\n    String nodesReportStr = baos.toString(\"UTF-8\");\r\n    Assert.assertEquals(nodesReportStr, sysOutStream.toString());\r\n    verify(sysOut, times(1)).write(any(byte[].class), anyInt(), anyInt());\r\n    sysOutStream.reset();\r\n    nodeStates.clear();\r\n    nodeStates.add(NodeState.RUNNING);\r\n    states = nodeStates.toArray(new NodeState[0]);\r\n    when(client.getNodeReports(states)).thenReturn(getNodeReports(nodeReports, nodeStates));\r\n    result = cli.run(new String[] { \"-list\", \"-states\", \"RUNNING\" });\r\n    assertEquals(0, result);\r\n    verify(client).getNodeReports(states);\r\n    baos = new ByteArrayOutputStream();\r\n    pw = new PrintWriter(baos);\r\n    pw.println(\"Total Nodes:2\");\r\n    pw.print(\"         Node-Id\\t     Node-State\\tNode-Http-Address\\t\");\r\n    pw.println(\"Number-of-Running-Containers\");\r\n    pw.print(\"         host0:0\\t        RUNNING\\t       host1:8888\\t\");\r\n    pw.println(\"                           0\");\r\n    pw.print(\"         host1:0\\t        RUNNING\\t       host1:8888\\t\");\r\n    pw.println(\"                           0\");\r\n    pw.close();\r\n    nodesReportStr = baos.toString(\"UTF-8\");\r\n    Assert.assertEquals(nodesReportStr, sysOutStream.toString());\r\n    verify(sysOut, times(2)).write(any(byte[].class), anyInt(), anyInt());\r\n    sysOutStream.reset();\r\n    result = cli.run(new String[] { \"-list\" });\r\n    assertEquals(0, result);\r\n    Assert.assertEquals(nodesReportStr, sysOutStream.toString());\r\n    verify(sysOut, times(3)).write(any(byte[].class), anyInt(), anyInt());\r\n    sysOutStream.reset();\r\n    result = cli.run(new String[] { \"-list\", \"-showDetails\" });\r\n    assertEquals(0, result);\r\n    baos = new ByteArrayOutputStream();\r\n    pw = new PrintWriter(baos);\r\n    pw.println(\"Total Nodes:2\");\r\n    pw.print(\"         Node-Id\\t     Node-State\\tNode-Http-Address\\t\");\r\n    pw.println(\"Number-of-Running-Containers\");\r\n    pw.print(\"         host0:0\\t        RUNNING\\t       host1:8888\\t\");\r\n    pw.println(\"                           0\");\r\n    pw.println(\"Detailed Node Information :\");\r\n    pw.println(\"\\tConfigured Resources : <memory:0, vCores:0>\");\r\n    pw.println(\"\\tAllocated Resources : <memory:0, vCores:0>\");\r\n    pw.println(\"\\tResource Utilization by Node : PMem:2048 MB, VMem:4096 MB, VCores:8.0\");\r\n    pw.println(\"\\tResource Utilization by Containers : PMem:1024 MB, VMem:2048 MB, VCores:4.0\");\r\n    pw.println(\"\\tNode-Labels : \");\r\n    pw.print(\"         host1:0\\t        RUNNING\\t       host1:8888\\t\");\r\n    pw.println(\"                           0\");\r\n    pw.println(\"Detailed Node Information :\");\r\n    pw.println(\"\\tConfigured Resources : <memory:0, vCores:0>\");\r\n    pw.println(\"\\tAllocated Resources : <memory:0, vCores:0>\");\r\n    pw.println(\"\\tResource Utilization by Node : PMem:2048 MB, VMem:4096 MB, VCores:8.0\");\r\n    pw.println(\"\\tResource Utilization by Containers : PMem:1024 MB, VMem:2048 MB, VCores:4.0\");\r\n    pw.println(\"\\tNode-Labels : \");\r\n    pw.close();\r\n    nodesReportStr = baos.toString(\"UTF-8\");\r\n    Assert.assertEquals(nodesReportStr, sysOutStream.toString());\r\n    verify(sysOut, times(4)).write(any(byte[].class), anyInt(), anyInt());\r\n    sysOutStream.reset();\r\n    nodeStates.clear();\r\n    nodeStates.add(NodeState.UNHEALTHY);\r\n    states = nodeStates.toArray(new NodeState[0]);\r\n    when(client.getNodeReports(states)).thenReturn(getNodeReports(nodeReports, nodeStates));\r\n    result = cli.run(new String[] { \"-list\", \"-states\", \"UNHEALTHY\" });\r\n    assertEquals(0, result);\r\n    verify(client).getNodeReports(states);\r\n    baos = new ByteArrayOutputStream();\r\n    pw = new PrintWriter(baos);\r\n    pw.println(\"Total Nodes:1\");\r\n    pw.print(\"         Node-Id\\t     Node-State\\tNode-Http-Address\\t\");\r\n    pw.println(\"Number-of-Running-Containers\");\r\n    pw.print(\"         host0:0\\t      UNHEALTHY\\t       host1:8888\\t\");\r\n    pw.println(\"                           0\");\r\n    pw.close();\r\n    nodesReportStr = baos.toString(\"UTF-8\");\r\n    Assert.assertEquals(nodesReportStr, sysOutStream.toString());\r\n    verify(sysOut, times(5)).write(any(byte[].class), anyInt(), anyInt());\r\n    sysOutStream.reset();\r\n    nodeStates.clear();\r\n    nodeStates.add(NodeState.DECOMMISSIONED);\r\n    states = nodeStates.toArray(new NodeState[0]);\r\n    when(client.getNodeReports(states)).thenReturn(getNodeReports(nodeReports, nodeStates));\r\n    result = cli.run(new String[] { \"-list\", \"-states\", \"DECOMMISSIONED\" });\r\n    assertEquals(0, result);\r\n    verify(client).getNodeReports(states);\r\n    baos = new ByteArrayOutputStream();\r\n    pw = new PrintWriter(baos);\r\n    pw.println(\"Total Nodes:1\");\r\n    pw.print(\"         Node-Id\\t     Node-State\\tNode-Http-Address\\t\");\r\n    pw.println(\"Number-of-Running-Containers\");\r\n    pw.print(\"         host0:0\\t DECOMMISSIONED\\t       host1:8888\\t\");\r\n    pw.println(\"                           0\");\r\n    pw.close();\r\n    nodesReportStr = baos.toString(\"UTF-8\");\r\n    Assert.assertEquals(nodesReportStr, sysOutStream.toString());\r\n    verify(sysOut, times(6)).write(any(byte[].class), anyInt(), anyInt());\r\n    sysOutStream.reset();\r\n    nodeStates.clear();\r\n    nodeStates.add(NodeState.REBOOTED);\r\n    states = nodeStates.toArray(new NodeState[0]);\r\n    when(client.getNodeReports(states)).thenReturn(getNodeReports(nodeReports, nodeStates));\r\n    result = cli.run(new String[] { \"-list\", \"-states\", \"REBOOTED\" });\r\n    assertEquals(0, result);\r\n    verify(client).getNodeReports(states);\r\n    baos = new ByteArrayOutputStream();\r\n    pw = new PrintWriter(baos);\r\n    pw.println(\"Total Nodes:1\");\r\n    pw.print(\"         Node-Id\\t     Node-State\\tNode-Http-Address\\t\");\r\n    pw.println(\"Number-of-Running-Containers\");\r\n    pw.print(\"         host0:0\\t       REBOOTED\\t       host1:8888\\t\");\r\n    pw.println(\"                           0\");\r\n    pw.close();\r\n    nodesReportStr = baos.toString(\"UTF-8\");\r\n    Assert.assertEquals(nodesReportStr, sysOutStream.toString());\r\n    verify(sysOut, times(7)).write(any(byte[].class), anyInt(), anyInt());\r\n    sysOutStream.reset();\r\n    nodeStates.clear();\r\n    nodeStates.add(NodeState.LOST);\r\n    states = nodeStates.toArray(new NodeState[0]);\r\n    when(client.getNodeReports(states)).thenReturn(getNodeReports(nodeReports, nodeStates));\r\n    result = cli.run(new String[] { \"-list\", \"-states\", \"LOST\" });\r\n    assertEquals(0, result);\r\n    verify(client).getNodeReports(states);\r\n    baos = new ByteArrayOutputStream();\r\n    pw = new PrintWriter(baos);\r\n    pw.println(\"Total Nodes:1\");\r\n    pw.print(\"         Node-Id\\t     Node-State\\tNode-Http-Address\\t\");\r\n    pw.println(\"Number-of-Running-Containers\");\r\n    pw.print(\"         host0:0\\t           LOST\\t       host1:8888\\t\");\r\n    pw.println(\"                           0\");\r\n    pw.close();\r\n    nodesReportStr = baos.toString(\"UTF-8\");\r\n    Assert.assertEquals(nodesReportStr, sysOutStream.toString());\r\n    verify(sysOut, times(8)).write(any(byte[].class), anyInt(), anyInt());\r\n    sysOutStream.reset();\r\n    nodeStates.clear();\r\n    nodeStates.add(NodeState.NEW);\r\n    nodeStates.add(NodeState.RUNNING);\r\n    nodeStates.add(NodeState.LOST);\r\n    nodeStates.add(NodeState.REBOOTED);\r\n    states = nodeStates.toArray(new NodeState[0]);\r\n    when(client.getNodeReports(states)).thenReturn(getNodeReports(nodeReports, nodeStates));\r\n    result = cli.run(new String[] { \"-list\", \"-states\", \"NEW,RUNNING,LOST,REBOOTED\" });\r\n    assertEquals(0, result);\r\n    verify(client).getNodeReports(states);\r\n    baos = new ByteArrayOutputStream();\r\n    pw = new PrintWriter(baos);\r\n    pw.println(\"Total Nodes:5\");\r\n    pw.print(\"         Node-Id\\t     Node-State\\tNode-Http-Address\\t\");\r\n    pw.println(\"Number-of-Running-Containers\");\r\n    pw.print(\"         host0:0\\t            NEW\\t       host1:8888\\t\");\r\n    pw.println(\"                           0\");\r\n    pw.print(\"         host0:0\\t        RUNNING\\t       host1:8888\\t\");\r\n    pw.println(\"                           0\");\r\n    pw.print(\"         host1:0\\t        RUNNING\\t       host1:8888\\t\");\r\n    pw.println(\"                           0\");\r\n    pw.print(\"         host0:0\\t       REBOOTED\\t       host1:8888\\t\");\r\n    pw.println(\"                           0\");\r\n    pw.print(\"         host0:0\\t           LOST\\t       host1:8888\\t\");\r\n    pw.println(\"                           0\");\r\n    pw.close();\r\n    nodesReportStr = baos.toString(\"UTF-8\");\r\n    Assert.assertEquals(nodesReportStr, sysOutStream.toString());\r\n    verify(sysOut, times(9)).write(any(byte[].class), anyInt(), anyInt());\r\n    sysOutStream.reset();\r\n    nodeStates.clear();\r\n    for (NodeState s : NodeState.values()) {\r\n        nodeStates.add(s);\r\n    }\r\n    states = nodeStates.toArray(new NodeState[0]);\r\n    when(client.getNodeReports(states)).thenReturn(getNodeReports(nodeReports, nodeStates));\r\n    result = cli.run(new String[] { \"-list\", \"-All\" });\r\n    assertEquals(0, result);\r\n    verify(client).getNodeReports(states);\r\n    baos = new ByteArrayOutputStream();\r\n    pw = new PrintWriter(baos);\r\n    pw.println(\"Total Nodes:7\");\r\n    pw.print(\"         Node-Id\\t     Node-State\\tNode-Http-Address\\t\");\r\n    pw.println(\"Number-of-Running-Containers\");\r\n    pw.print(\"         host0:0\\t            NEW\\t       host1:8888\\t\");\r\n    pw.println(\"                           0\");\r\n    pw.print(\"         host0:0\\t        RUNNING\\t       host1:8888\\t\");\r\n    pw.println(\"                           0\");\r\n    pw.print(\"         host1:0\\t        RUNNING\\t       host1:8888\\t\");\r\n    pw.println(\"                           0\");\r\n    pw.print(\"         host0:0\\t      UNHEALTHY\\t       host1:8888\\t\");\r\n    pw.println(\"                           0\");\r\n    pw.print(\"         host0:0\\t DECOMMISSIONED\\t       host1:8888\\t\");\r\n    pw.println(\"                           0\");\r\n    pw.print(\"         host0:0\\t       REBOOTED\\t       host1:8888\\t\");\r\n    pw.println(\"                           0\");\r\n    pw.print(\"         host0:0\\t           LOST\\t       host1:8888\\t\");\r\n    pw.println(\"                           0\");\r\n    pw.close();\r\n    nodesReportStr = baos.toString(\"UTF-8\");\r\n    Assert.assertEquals(nodesReportStr, sysOutStream.toString());\r\n    verify(sysOut, times(10)).write(any(byte[].class), anyInt(), anyInt());\r\n    sysOutStream.reset();\r\n    result = cli.run(new String[] { \"-list\", \"-states\", \"InvalidState\" });\r\n    assertEquals(-1, result);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getNodeReports",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<NodeReport> getNodeReports(List<NodeReport> nodeReports, Set<NodeState> nodeStates)\n{\r\n    List<NodeReport> reports = new ArrayList<NodeReport>();\r\n    for (NodeReport nodeReport : nodeReports) {\r\n        if (nodeStates.contains(nodeReport.getNodeState())) {\r\n            reports.add(nodeReport);\r\n        }\r\n    }\r\n    return reports;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testNodeStatus",
  "errType" : null,
  "containingMethodsNum" : 27,
  "sourceCodeText" : "void testNodeStatus() throws Exception\n{\r\n    NodeId nodeId = NodeId.newInstance(\"host0\", 0);\r\n    when(client.getNodeReports()).thenReturn(getNodeReports(3, NodeState.RUNNING, false, false, false));\r\n    NodeCLI cli = createAndGetNodeCLI();\r\n    int result = cli.run(new String[] { \"-status\", nodeId.toString() });\r\n    assertEquals(0, result);\r\n    verify(client).getNodeReports();\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    PrintWriter pw = new PrintWriter(baos);\r\n    pw.println(\"Node Report : \");\r\n    pw.println(\"\\tNode-Id : host0:0\");\r\n    pw.println(\"\\tRack : rack1\");\r\n    pw.println(\"\\tNode-State : RUNNING\");\r\n    pw.println(\"\\tNode-Http-Address : host1:8888\");\r\n    pw.println(\"\\tLast-Health-Update : \" + DateFormatUtils.format(new Date(0), \"E dd/MMM/yy hh:mm:ss:SSzz\"));\r\n    pw.println(\"\\tHealth-Report : \");\r\n    pw.println(\"\\tContainers : 0\");\r\n    pw.println(\"\\tMemory-Used : 0MB\");\r\n    pw.println(\"\\tMemory-Capacity : 0MB\");\r\n    pw.println(\"\\tCPU-Used : 0 vcores\");\r\n    pw.println(\"\\tCPU-Capacity : 0 vcores\");\r\n    pw.println(\"\\tNode-Labels : a,b,c,x,y,z\");\r\n    pw.println(\"\\tNode Attributes : rm.yarn.io/GPU(STRING)=ARM\");\r\n    pw.println(\"\\t                  rm.yarn.io/CPU(STRING)=ARM\");\r\n    pw.println(\"\\tResource Utilization by Node : PMem:2048 MB, VMem:4096 MB, VCores:8.0\");\r\n    pw.println(\"\\tResource Utilization by Containers : PMem:1024 MB, VMem:2048 MB, VCores:4.0\");\r\n    pw.close();\r\n    String nodeStatusStr = baos.toString(\"UTF-8\");\r\n    verify(sysOut, times(1)).println(isA(String.class));\r\n    verify(sysOut).println(nodeStatusStr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testNodeStatusWithEmptyNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 26,
  "sourceCodeText" : "void testNodeStatusWithEmptyNodeLabels() throws Exception\n{\r\n    NodeId nodeId = NodeId.newInstance(\"host0\", 0);\r\n    when(client.getNodeReports()).thenReturn(getNodeReports(3, NodeState.RUNNING));\r\n    NodeCLI cli = createAndGetNodeCLI();\r\n    int result = cli.run(new String[] { \"-status\", nodeId.toString() });\r\n    assertEquals(0, result);\r\n    verify(client).getNodeReports();\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    PrintWriter pw = new PrintWriter(baos);\r\n    pw.println(\"Node Report : \");\r\n    pw.println(\"\\tNode-Id : host0:0\");\r\n    pw.println(\"\\tRack : rack1\");\r\n    pw.println(\"\\tNode-State : RUNNING\");\r\n    pw.println(\"\\tNode-Http-Address : host1:8888\");\r\n    pw.println(\"\\tLast-Health-Update : \" + DateFormatUtils.format(new Date(0), \"E dd/MMM/yy hh:mm:ss:SSzz\"));\r\n    pw.println(\"\\tHealth-Report : \");\r\n    pw.println(\"\\tContainers : 0\");\r\n    pw.println(\"\\tMemory-Used : 0MB\");\r\n    pw.println(\"\\tMemory-Capacity : 0MB\");\r\n    pw.println(\"\\tCPU-Used : 0 vcores\");\r\n    pw.println(\"\\tCPU-Capacity : 0 vcores\");\r\n    pw.println(\"\\tNode-Labels : \");\r\n    pw.println(\"\\tNode Attributes : \");\r\n    pw.println(\"\\tResource Utilization by Node : PMem:2048 MB, VMem:4096 MB, VCores:8.0\");\r\n    pw.println(\"\\tResource Utilization by Containers : PMem:1024 MB, VMem:2048 MB, VCores:4.0\");\r\n    pw.close();\r\n    String nodeStatusStr = baos.toString(\"UTF-8\");\r\n    verify(sysOut, times(1)).println(isA(String.class));\r\n    verify(sysOut).println(nodeStatusStr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testNodeStatusWithEmptyResourceUtilization",
  "errType" : null,
  "containingMethodsNum" : 26,
  "sourceCodeText" : "void testNodeStatusWithEmptyResourceUtilization() throws Exception\n{\r\n    NodeId nodeId = NodeId.newInstance(\"host0\", 0);\r\n    when(client.getNodeReports()).thenReturn(getNodeReports(3, NodeState.RUNNING, false, true, true));\r\n    NodeCLI cli = createAndGetNodeCLI();\r\n    int result = cli.run(new String[] { \"-status\", nodeId.toString() });\r\n    assertEquals(0, result);\r\n    verify(client).getNodeReports();\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    PrintWriter pw = new PrintWriter(baos);\r\n    pw.println(\"Node Report : \");\r\n    pw.println(\"\\tNode-Id : host0:0\");\r\n    pw.println(\"\\tRack : rack1\");\r\n    pw.println(\"\\tNode-State : RUNNING\");\r\n    pw.println(\"\\tNode-Http-Address : host1:8888\");\r\n    pw.println(\"\\tLast-Health-Update : \" + DateFormatUtils.format(new Date(0), \"E dd/MMM/yy hh:mm:ss:SSzz\"));\r\n    pw.println(\"\\tHealth-Report : \");\r\n    pw.println(\"\\tContainers : 0\");\r\n    pw.println(\"\\tMemory-Used : 0MB\");\r\n    pw.println(\"\\tMemory-Capacity : 0MB\");\r\n    pw.println(\"\\tCPU-Used : 0 vcores\");\r\n    pw.println(\"\\tCPU-Capacity : 0 vcores\");\r\n    pw.println(\"\\tNode-Labels : a,b,c,x,y,z\");\r\n    pw.println(\"\\tNode Attributes : \");\r\n    pw.println(\"\\tResource Utilization by Node : \");\r\n    pw.println(\"\\tResource Utilization by Containers : \");\r\n    pw.close();\r\n    String nodeStatusStr = baos.toString(\"UTF-8\");\r\n    verify(sysOut, times(1)).println(isA(String.class));\r\n    verify(sysOut).println(nodeStatusStr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testAbsentNodeStatus",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testAbsentNodeStatus() throws Exception\n{\r\n    NodeId nodeId = NodeId.newInstance(\"Absenthost0\", 0);\r\n    when(client.getNodeReports()).thenReturn(getNodeReports(0, NodeState.RUNNING));\r\n    NodeCLI cli = createAndGetNodeCLI();\r\n    int result = cli.run(new String[] { \"-status\", nodeId.toString() });\r\n    assertEquals(0, result);\r\n    verify(client).getNodeReports();\r\n    verify(sysOut, times(1)).println(isA(String.class));\r\n    verify(sysOut).println(\"Could not find the node report for node id : \" + nodeId.toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testAppCLIUsageInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testAppCLIUsageInfo() throws Exception\n{\r\n    verifyUsageInfo(new ApplicationCLI());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testNodeCLIUsageInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testNodeCLIUsageInfo() throws Exception\n{\r\n    verifyUsageInfo(new NodeCLI());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testMissingArguments",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testMissingArguments() throws Exception\n{\r\n    ApplicationCLI cli = createAndGetAppCLI();\r\n    int result = cli.run(new String[] { \"application\", \"-status\" });\r\n    assertThat(result).isEqualTo(-1);\r\n    Assert.assertEquals(String.format(\"Missing argument for options%n%1s\", createApplicationCLIHelpMessage()), sysOutStream.toString());\r\n    sysOutStream.reset();\r\n    result = cli.run(new String[] { \"applicationattempt\", \"-status\" });\r\n    assertThat(result).isEqualTo(-1);\r\n    Assert.assertEquals(String.format(\"Missing argument for options%n%1s\", createApplicationAttemptCLIHelpMessage()), sysOutStream.toString());\r\n    sysOutStream.reset();\r\n    result = cli.run(new String[] { \"container\", \"-status\" });\r\n    assertThat(result).isEqualTo(-1);\r\n    Assert.assertEquals(String.format(\"Missing argument for options %1s\", createContainerCLIHelpMessage()), normalize(sysOutStream.toString()));\r\n    sysOutStream.reset();\r\n    NodeCLI nodeCLI = createAndGetNodeCLI();\r\n    result = nodeCLI.run(new String[] { \"-status\" });\r\n    assertThat(result).isEqualTo(-1);\r\n    Assert.assertEquals(String.format(\"Missing argument for options%n%1s\", createNodeCLIHelpMessage()), sysOutStream.toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testGetQueueInfo",
  "errType" : null,
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void testGetQueueInfo() throws Exception\n{\r\n    QueueCLI cli = createAndGetQueueCLI();\r\n    Set<String> nodeLabels = new HashSet<String>();\r\n    nodeLabels.add(\"GPU\");\r\n    nodeLabels.add(\"JDK_7\");\r\n    QueueInfo queueInfo = QueueInfo.newInstance(\"queueA\", \"root.queueA\", 0.4f, 0.8f, 0.5f, null, null, QueueState.RUNNING, nodeLabels, \"GPU\", null, false, -1.0f, 10, null, false);\r\n    when(client.getQueueInfo(any(String.class))).thenReturn(queueInfo);\r\n    int result = cli.run(new String[] { \"-status\", \"queueA\" });\r\n    assertEquals(0, result);\r\n    verify(client).getQueueInfo(\"queueA\");\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    PrintWriter pw = new PrintWriter(baos);\r\n    pw.println(\"Queue Information : \");\r\n    pw.println(\"Queue Name : \" + \"queueA\");\r\n    pw.println(\"Queue Path : \" + \"root.queueA\");\r\n    pw.println(\"\\tState : \" + \"RUNNING\");\r\n    pw.println(\"\\tCapacity : \" + \"40.00%\");\r\n    pw.println(\"\\tCurrent Capacity : \" + \"50.00%\");\r\n    pw.println(\"\\tMaximum Capacity : \" + \"80.00%\");\r\n    pw.println(\"\\tWeight : \" + \"-1.00\");\r\n    pw.println(\"\\tMaximum Parallel Apps : \" + \"10\");\r\n    pw.println(\"\\tDefault Node Label expression : \" + \"GPU\");\r\n    pw.println(\"\\tAccessible Node Labels : \" + \"JDK_7,GPU\");\r\n    pw.println(\"\\tPreemption : \" + \"enabled\");\r\n    pw.println(\"\\tIntra-queue Preemption : \" + \"enabled\");\r\n    pw.close();\r\n    String queueInfoStr = baos.toString(\"UTF-8\");\r\n    Assert.assertEquals(queueInfoStr, sysOutStream.toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testGetQueueInfoOverrideIntraQueuePreemption",
  "errType" : null,
  "containingMethodsNum" : 30,
  "sourceCodeText" : "void testGetQueueInfoOverrideIntraQueuePreemption() throws Exception\n{\r\n    CapacitySchedulerConfiguration conf = new CapacitySchedulerConfiguration();\r\n    ReservationSystemTestUtil.setupQueueConfiguration(conf);\r\n    conf.setClass(YarnConfiguration.RM_SCHEDULER, CapacityScheduler.class, ResourceScheduler.class);\r\n    conf.setBoolean(YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS, true);\r\n    conf.set(YarnConfiguration.RM_SCHEDULER_MONITOR_POLICIES, \"org.apache.hadoop.yarn.server.resourcemanager.monitor.capacity.\" + \"ProportionalCapacityPreemptionPolicy\");\r\n    conf.setBoolean(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_ENABLED, true);\r\n    conf.setBoolean(CapacitySchedulerConfiguration.PREFIX + \"root.intra-queue-preemption.disable_preemption\", true);\r\n    conf.setBoolean(CapacitySchedulerConfiguration.PREFIX + \"root.a.a1.intra-queue-preemption.disable_preemption\", false);\r\n    MiniYARNCluster cluster = new MiniYARNCluster(\"testGetQueueInfoOverrideIntraQueuePreemption\", 2, 1, 1);\r\n    YarnClient yarnClient = null;\r\n    try {\r\n        cluster.init(conf);\r\n        cluster.start();\r\n        final Configuration yarnConf = cluster.getConfig();\r\n        yarnClient = YarnClient.createYarnClient();\r\n        yarnClient.init(yarnConf);\r\n        yarnClient.start();\r\n        QueueCLI cli = createAndGetQueueCLI(yarnClient);\r\n        sysOutStream.reset();\r\n        int result = cli.run(new String[] { \"-status\", \"a\" });\r\n        assertEquals(0, result);\r\n        String queueStatusOut = sysOutStream.toString();\r\n        Assert.assertTrue(queueStatusOut.contains(\"\\tPreemption : enabled\"));\r\n        Assert.assertTrue(queueStatusOut.contains(\"Intra-queue Preemption : disabled\"));\r\n        cli = createAndGetQueueCLI(yarnClient);\r\n        sysOutStream.reset();\r\n        result = cli.run(new String[] { \"-status\", \"a1\" });\r\n        assertEquals(0, result);\r\n        queueStatusOut = sysOutStream.toString();\r\n        Assert.assertTrue(queueStatusOut.contains(\"\\tPreemption : enabled\"));\r\n        Assert.assertTrue(queueStatusOut.contains(\"Intra-queue Preemption : enabled\"));\r\n    } finally {\r\n        if (yarnClient != null) {\r\n            yarnClient.stop();\r\n        }\r\n        cluster.stop();\r\n        cluster.close();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testGetQueueInfoPreemptionEnabled",
  "errType" : null,
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void testGetQueueInfoPreemptionEnabled() throws Exception\n{\r\n    CapacitySchedulerConfiguration conf = new CapacitySchedulerConfiguration();\r\n    ReservationSystemTestUtil.setupQueueConfiguration(conf);\r\n    conf.setClass(YarnConfiguration.RM_SCHEDULER, CapacityScheduler.class, ResourceScheduler.class);\r\n    conf.setBoolean(YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS, true);\r\n    conf.set(YarnConfiguration.RM_SCHEDULER_MONITOR_POLICIES, \"org.apache.hadoop.yarn.server.resourcemanager.monitor.capacity.\" + \"ProportionalCapacityPreemptionPolicy\");\r\n    conf.setBoolean(CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_ENABLED, true);\r\n    MiniYARNCluster cluster = new MiniYARNCluster(\"testGetQueueInfoPreemptionEnabled\", 2, 1, 1);\r\n    YarnClient yarnClient = null;\r\n    try {\r\n        cluster.init(conf);\r\n        cluster.start();\r\n        final Configuration yarnConf = cluster.getConfig();\r\n        yarnClient = YarnClient.createYarnClient();\r\n        yarnClient.init(yarnConf);\r\n        yarnClient.start();\r\n        QueueCLI cli = createAndGetQueueCLI(yarnClient);\r\n        sysOutStream.reset();\r\n        int result = cli.run(new String[] { \"-status\", \"a1\" });\r\n        assertEquals(0, result);\r\n        String queueStatusOut = sysOutStream.toString();\r\n        Assert.assertTrue(queueStatusOut.contains(\"\\tPreemption : enabled\"));\r\n        Assert.assertTrue(queueStatusOut.contains(\"Intra-queue Preemption : enabled\"));\r\n    } finally {\r\n        if (yarnClient != null) {\r\n            yarnClient.stop();\r\n        }\r\n        cluster.stop();\r\n        cluster.close();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testGetQueueInfoPreemptionDisabled",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testGetQueueInfoPreemptionDisabled() throws Exception\n{\r\n    CapacitySchedulerConfiguration conf = new CapacitySchedulerConfiguration();\r\n    ReservationSystemTestUtil.setupQueueConfiguration(conf);\r\n    conf.setClass(YarnConfiguration.RM_SCHEDULER, CapacityScheduler.class, ResourceScheduler.class);\r\n    conf.setBoolean(YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS, true);\r\n    conf.set(YarnConfiguration.RM_SCHEDULER_MONITOR_POLICIES, \"org.apache.hadoop.yarn.server.resourcemanager.monitor.capacity.\" + \"ProportionalCapacityPreemptionPolicy\");\r\n    conf.setBoolean(YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS, true);\r\n    conf.setBoolean(PREFIX + \"root.a.a1.disable_preemption\", true);\r\n    try (MiniYARNCluster cluster = new MiniYARNCluster(\"testReservationAPIs\", 2, 1, 1);\r\n        YarnClient yarnClient = YarnClient.createYarnClient()) {\r\n        cluster.init(conf);\r\n        cluster.start();\r\n        final Configuration yarnConf = cluster.getConfig();\r\n        yarnClient.init(yarnConf);\r\n        yarnClient.start();\r\n        QueueCLI cli = createAndGetQueueCLI(yarnClient);\r\n        sysOutStream.reset();\r\n        int result = cli.run(new String[] { \"-status\", \"a1\" });\r\n        assertEquals(0, result);\r\n        String queueStatusOut = sysOutStream.toString();\r\n        Assert.assertTrue(queueStatusOut.contains(\"\\tPreemption : disabled\"));\r\n        Assert.assertTrue(queueStatusOut.contains(\"Intra-queue Preemption : disabled\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testGetQueueInfoWithEmptyNodeLabel",
  "errType" : null,
  "containingMethodsNum" : 22,
  "sourceCodeText" : "void testGetQueueInfoWithEmptyNodeLabel() throws Exception\n{\r\n    QueueCLI cli = createAndGetQueueCLI();\r\n    QueueInfo queueInfo = QueueInfo.newInstance(\"queueA\", \"root.queueA\", 0.4f, 0.8f, 0.5f, null, null, QueueState.RUNNING, null, null, null, true, -1.0f, 10, null, true);\r\n    when(client.getQueueInfo(any(String.class))).thenReturn(queueInfo);\r\n    int result = cli.run(new String[] { \"-status\", \"queueA\" });\r\n    assertEquals(0, result);\r\n    verify(client).getQueueInfo(\"queueA\");\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    PrintWriter pw = new PrintWriter(baos);\r\n    pw.println(\"Queue Information : \");\r\n    pw.println(\"Queue Name : \" + \"queueA\");\r\n    pw.println(\"Queue Path : \" + \"root.queueA\");\r\n    pw.println(\"\\tState : \" + \"RUNNING\");\r\n    pw.println(\"\\tCapacity : \" + \"40.00%\");\r\n    pw.println(\"\\tCurrent Capacity : \" + \"50.00%\");\r\n    pw.println(\"\\tMaximum Capacity : \" + \"80.00%\");\r\n    pw.println(\"\\tWeight : \" + \"-1.00\");\r\n    pw.println(\"\\tMaximum Parallel Apps : \" + \"10\");\r\n    pw.println(\"\\tDefault Node Label expression : \" + NodeLabel.DEFAULT_NODE_LABEL_PARTITION);\r\n    pw.println(\"\\tAccessible Node Labels : \");\r\n    pw.println(\"\\tPreemption : \" + \"disabled\");\r\n    pw.println(\"\\tIntra-queue Preemption : \" + \"disabled\");\r\n    pw.close();\r\n    String queueInfoStr = baos.toString(\"UTF-8\");\r\n    Assert.assertEquals(queueInfoStr, sysOutStream.toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testGetQueueInfoWithNonExistedQueue",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testGetQueueInfoWithNonExistedQueue() throws Exception\n{\r\n    String queueName = \"non-existed-queue\";\r\n    QueueCLI cli = createAndGetQueueCLI();\r\n    when(client.getQueueInfo(any(String.class))).thenReturn(null);\r\n    int result = cli.run(new String[] { \"-status\", queueName });\r\n    assertEquals(-1, result);\r\n    ;\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    PrintWriter pw = new PrintWriter(baos);\r\n    pw.println(\"Cannot get queue from RM by queueName = \" + queueName + \", please check.\");\r\n    pw.close();\r\n    String queueInfoStr = baos.toString(\"UTF-8\");\r\n    Assert.assertEquals(queueInfoStr, sysOutStream.toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testGetApplicationAttemptReportException",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testGetApplicationAttemptReportException() throws Exception\n{\r\n    ApplicationCLI cli = createAndGetAppCLI();\r\n    ApplicationId applicationId = ApplicationId.newInstance(1234, 5);\r\n    ApplicationAttemptId attemptId1 = ApplicationAttemptId.newInstance(applicationId, 1);\r\n    when(client.getApplicationAttemptReport(attemptId1)).thenThrow(new ApplicationNotFoundException(\"History file for application\" + applicationId + \" is not found\"));\r\n    int exitCode = cli.run(new String[] { \"applicationattempt\", \"-status\", attemptId1.toString() });\r\n    verify(sysOut).println(\"Application for AppAttempt with id '\" + attemptId1 + \"' doesn't exist in RM or Timeline Server.\");\r\n    Assert.assertNotSame(\"should return non-zero exit code.\", 0, exitCode);\r\n    ApplicationAttemptId attemptId2 = ApplicationAttemptId.newInstance(applicationId, 2);\r\n    when(client.getApplicationAttemptReport(attemptId2)).thenThrow(new ApplicationAttemptNotFoundException(\"History file for application attempt\" + attemptId2 + \" is not found\"));\r\n    exitCode = cli.run(new String[] { \"applicationattempt\", \"-status\", attemptId2.toString() });\r\n    verify(sysOut).println(\"Application Attempt with id '\" + attemptId2 + \"' doesn't exist in RM or Timeline Server.\");\r\n    Assert.assertNotSame(\"should return non-zero exit code.\", 0, exitCode);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testGetContainerReportException",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testGetContainerReportException() throws Exception\n{\r\n    ApplicationCLI cli = createAndGetAppCLI();\r\n    ApplicationId applicationId = ApplicationId.newInstance(1234, 5);\r\n    ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(applicationId, 1);\r\n    long cntId = 1;\r\n    ContainerId containerId1 = ContainerId.newContainerId(attemptId, cntId++);\r\n    when(client.getContainerReport(containerId1)).thenThrow(new ApplicationNotFoundException(\"History file for application\" + applicationId + \" is not found\"));\r\n    int exitCode = cli.run(new String[] { \"container\", \"-status\", containerId1.toString() });\r\n    verify(sysOut).println(\"Application for Container with id '\" + containerId1 + \"' doesn't exist in RM or Timeline Server.\");\r\n    Assert.assertNotSame(\"should return non-zero exit code.\", 0, exitCode);\r\n    ContainerId containerId2 = ContainerId.newContainerId(attemptId, cntId++);\r\n    when(client.getContainerReport(containerId2)).thenThrow(new ApplicationAttemptNotFoundException(\"History file for application attempt\" + attemptId + \" is not found\"));\r\n    exitCode = cli.run(new String[] { \"container\", \"-status\", containerId2.toString() });\r\n    verify(sysOut).println(\"Application Attempt for Container with id '\" + containerId2 + \"' doesn't exist in RM or Timeline Server.\");\r\n    Assert.assertNotSame(\"should return non-zero exit code.\", 0, exitCode);\r\n    ContainerId containerId3 = ContainerId.newContainerId(attemptId, cntId++);\r\n    when(client.getContainerReport(containerId3)).thenThrow(new ContainerNotFoundException(\"History file for container\" + containerId3 + \" is not found\"));\r\n    exitCode = cli.run(new String[] { \"container\", \"-status\", containerId3.toString() });\r\n    verify(sysOut).println(\"Container with id '\" + containerId3 + \"' doesn't exist in RM or Timeline Server.\");\r\n    Assert.assertNotSame(\"should return non-zero exit code.\", 0, exitCode);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testUpdateApplicationPriority",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testUpdateApplicationPriority() throws Exception\n{\r\n    ApplicationCLI cli = createAndGetAppCLI();\r\n    ApplicationId applicationId = ApplicationId.newInstance(1234, 6);\r\n    ApplicationReport appReport = ApplicationReport.newInstance(applicationId, ApplicationAttemptId.newInstance(applicationId, 1), \"user\", \"queue\", \"appname\", \"host\", 124, null, YarnApplicationState.RUNNING, \"diagnostics\", \"url\", 0, 0, 0, FinalApplicationStatus.UNDEFINED, null, \"N/A\", 0.53789f, \"YARN\", null);\r\n    when(client.getApplicationReport(any(ApplicationId.class))).thenReturn(appReport);\r\n    int result = cli.run(new String[] { \"application\", \"-appId\", applicationId.toString(), \"-updatePriority\", \"1\" });\r\n    assertThat(result).isEqualTo(0);\r\n    verify(client).updateApplicationPriority(any(ApplicationId.class), any(Priority.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testFailApplicationAttempt",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testFailApplicationAttempt() throws Exception\n{\r\n    ApplicationCLI cli = createAndGetAppCLI();\r\n    int exitCode = cli.run(new String[] { \"applicationattempt\", \"-fail\", \"appattempt_1444199730803_0003_000001\" });\r\n    Assert.assertEquals(0, exitCode);\r\n    verify(client).failApplicationAttempt(any(ApplicationAttemptId.class));\r\n    verifyNoMoreInteractions(client);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "verifyUsageInfo",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void verifyUsageInfo(YarnCLI cli) throws Exception\n{\r\n    cli.setSysErrPrintStream(sysErr);\r\n    cli.run(new String[] { \"application\" });\r\n    verify(sysErr).println(\"Invalid Command Usage : \");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getNodeReports",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<NodeReport> getNodeReports(int noOfNodes, NodeState state)\n{\r\n    return getNodeReports(noOfNodes, state, true, false, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getNodeReports",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<NodeReport> getNodeReports(int noOfNodes, NodeState state, boolean emptyNodeLabel, boolean emptyAttributes)\n{\r\n    return getNodeReports(noOfNodes, state, emptyNodeLabel, false, emptyAttributes);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getNodeReports",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "List<NodeReport> getNodeReports(int noOfNodes, NodeState state, boolean emptyNodeLabel, boolean emptyResourceUtilization, boolean emptyAttributes)\n{\r\n    List<NodeReport> nodeReports = new ArrayList<NodeReport>();\r\n    for (int i = 0; i < noOfNodes; i++) {\r\n        Set<String> nodeLabels = null;\r\n        if (!emptyNodeLabel) {\r\n            nodeLabels = ImmutableSet.of(\"c\", \"b\", \"a\", \"x\", \"z\", \"y\");\r\n        }\r\n        NodeReport nodeReport = NodeReport.newInstance(NodeId.newInstance(\"host\" + i, 0), state, \"host\" + 1 + \":8888\", \"rack1\", Records.newRecord(Resource.class), Records.newRecord(Resource.class), 0, \"\", 0, nodeLabels, null, null);\r\n        if (!emptyResourceUtilization) {\r\n            ResourceUtilization containersUtilization = ResourceUtilization.newInstance(1024, 2048, 4);\r\n            ResourceUtilization nodeUtilization = ResourceUtilization.newInstance(2048, 4096, 8);\r\n            nodeReport.setAggregatedContainersUtilization(containersUtilization);\r\n            nodeReport.setNodeUtilization(nodeUtilization);\r\n        }\r\n        if (!emptyAttributes) {\r\n            nodeReport.setNodeAttributes(ImmutableSet.of(NodeAttribute.newInstance(\"GPU\", NodeAttributeType.STRING, \"ARM\"), NodeAttribute.newInstance(\"CPU\", NodeAttributeType.STRING, \"ARM\")));\r\n        }\r\n        nodeReports.add(nodeReport);\r\n    }\r\n    return nodeReports;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "createAndGetAppCLI",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ApplicationCLI createAndGetAppCLI()\n{\r\n    ApplicationCLI cli = new ApplicationCLI() {\r\n\r\n        @Override\r\n        protected void createAndStartYarnClient() {\r\n        }\r\n    };\r\n    cli.setClient(client);\r\n    cli.setSysOutPrintStream(sysOut);\r\n    cli.setSysErrPrintStream(sysErr);\r\n    return cli;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "createAndGetQueueCLI",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "QueueCLI createAndGetQueueCLI()\n{\r\n    return createAndGetQueueCLI(client);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "createAndGetQueueCLI",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "QueueCLI createAndGetQueueCLI(YarnClient client)\n{\r\n    QueueCLI cli = new QueueCLI() {\r\n\r\n        @Override\r\n        protected void createAndStartYarnClient() {\r\n        }\r\n    };\r\n    cli.setClient(client);\r\n    cli.setSysOutPrintStream(sysOut);\r\n    cli.setSysErrPrintStream(sysErr);\r\n    return cli;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "createAndGetNodeCLI",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "NodeCLI createAndGetNodeCLI()\n{\r\n    NodeCLI cli = new NodeCLI() {\r\n\r\n        @Override\r\n        protected void createAndStartYarnClient() {\r\n        }\r\n    };\r\n    cli.setClient(client);\r\n    cli.setSysOutPrintStream(sysOut);\r\n    cli.setSysErrPrintStream(sysErr);\r\n    return cli;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "createApplicationCLIHelpMessage",
  "errType" : null,
  "containingMethodsNum" : 176,
  "sourceCodeText" : "String createApplicationCLIHelpMessage() throws IOException\n{\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    PrintWriter pw = new PrintWriter(baos);\r\n    pw.println(\"usage: application\");\r\n    pw.println(\" -appId <Application ID>                  Specify Application Id to be\");\r\n    pw.println(\"                                          operated\");\r\n    pw.println(\" -appStates <States>                      Works with -list to filter\");\r\n    pw.println(\"                                          applications based on input\");\r\n    pw.println(\"                                          comma-separated list of\");\r\n    pw.println(\"                                          application states. The valid\");\r\n    pw.println(\"                                          application state can be one of\");\r\n    pw.println(\"                                          the following:\");\r\n    pw.println(\"                                          ALL,NEW,NEW_SAVING,SUBMITTED,ACC\");\r\n    pw.println(\"                                          EPTED,RUNNING,FINISHED,FAILED,KI\");\r\n    pw.println(\"                                          LLED\");\r\n    pw.println(\" -appTags <Tags>                          Works with -list to filter\");\r\n    pw.println(\"                                          applications based on input\");\r\n    pw.println(\"                                          comma-separated list of\");\r\n    pw.println(\"                                          application tags.\");\r\n    pw.println(\" -appTypes <Types>                        Works with -list to filter\");\r\n    pw.println(\"                                          applications based on input\");\r\n    pw.println(\"                                          comma-separated list of\");\r\n    pw.println(\"                                          application types.\");\r\n    pw.println(\" -autoFinalize                            Works with -upgrade and\");\r\n    pw.println(\"                                          -initiate options to initiate\");\r\n    pw.println(\"                                          the upgrade of the application\");\r\n    pw.println(\"                                          with the ability to finalize the\");\r\n    pw.println(\"                                          upgrade automatically.\");\r\n    pw.println(\" -cancel                                  Works with -upgrade option to\");\r\n    pw.println(\"                                          cancel current upgrade.\");\r\n    pw.println(\" -changeQueue <Queue Name>                Moves application to a new\");\r\n    pw.println(\"                                          queue. ApplicationId can be\");\r\n    pw.println(\"                                          passed using 'appId' option.\");\r\n    pw.println(\"                                          'movetoqueue' command is\");\r\n    pw.println(\"                                          deprecated, this new command\");\r\n    pw.println(\"                                          'changeQueue' performs same\");\r\n    pw.println(\"                                          functionality.\");\r\n    pw.println(\" -clusterId <Cluster ID>                  ClusterId. By default, it will\");\r\n    pw.println(\"                                          take default cluster id from the\");\r\n    pw.println(\"                                          RM\");\r\n    pw.println(\" -component <Component Name> <Count>      Works with -flex option to\");\r\n    pw.println(\"                                          change the number of\");\r\n    pw.println(\"                                          components/containers running\");\r\n    pw.println(\"                                          for an application /\");\r\n    pw.println(\"                                          long-running service. Supports\");\r\n    pw.println(\"                                          absolute or relative changes,\");\r\n    pw.println(\"                                          such as +1, 2, or -3.\");\r\n    pw.println(\" -components <Components>                 Works with -upgrade option to\");\r\n    pw.println(\"                                          trigger the upgrade of specified\");\r\n    pw.println(\"                                          components of the application.\");\r\n    pw.println(\"                                          Multiple components should be\");\r\n    pw.println(\"                                          separated by commas.\");\r\n    pw.println(\" -decommission <Application Name>         Decommissions component\");\r\n    pw.println(\"                                          instances for an application /\");\r\n    pw.println(\"                                          long-running service. Requires\");\r\n    pw.println(\"                                          -instances option. Supports\");\r\n    pw.println(\"                                          -appTypes option to specify\");\r\n    pw.println(\"                                          which client implementation to\");\r\n    pw.println(\"                                          use.\");\r\n    pw.println(\" -destroy <Application Name>              Destroys a saved application\");\r\n    pw.println(\"                                          specification and removes all\");\r\n    pw.println(\"                                          application data permanently.\");\r\n    pw.println(\"                                          Supports -appTypes option to\");\r\n    pw.println(\"                                          specify which client\");\r\n    pw.println(\"                                          implementation to use.\");\r\n    pw.println(\" -enableFastLaunch <Destination Folder>   Uploads AM dependencies to HDFS\");\r\n    pw.println(\"                                          to make future launches faster.\");\r\n    pw.println(\"                                          Supports -appTypes option to\");\r\n    pw.println(\"                                          specify which client\");\r\n    pw.println(\"                                          implementation to use.\");\r\n    pw.println(\"                                          Optionally a destination folder\");\r\n    pw.println(\"                                          for the tarball can be\");\r\n    pw.println(\"                                          specified.\");\r\n    pw.println(\" -express <arg>                           Works with -upgrade option to\");\r\n    pw.println(\"                                          perform express upgrade.  It\");\r\n    pw.println(\"                                          requires the upgraded\");\r\n    pw.println(\"                                          application specification file.\");\r\n    pw.println(\" -finalize                                Works with -upgrade option to\");\r\n    pw.println(\"                                          finalize the upgrade.\");\r\n    pw.println(\" -flex <Application Name or ID>           Changes number of running\");\r\n    pw.println(\"                                          containers for a component of an\");\r\n    pw.println(\"                                          application / long-running\");\r\n    pw.println(\"                                          service. Requires -component\");\r\n    pw.println(\"                                          option. If name is provided,\");\r\n    pw.println(\"                                          appType must be provided unless\");\r\n    pw.println(\"                                          it is the default yarn-service.\");\r\n    pw.println(\"                                          If ID is provided, the appType\");\r\n    pw.println(\"                                          will be looked up. Supports\");\r\n    pw.println(\"                                          -appTypes option to specify\");\r\n    pw.println(\"                                          which client implementation to\");\r\n    pw.println(\"                                          use.\");\r\n    pw.println(\" -help                                    Displays help for all commands.\");\r\n    pw.println(\" -initiate <File Name>                    Works with -upgrade option to\");\r\n    pw.println(\"                                          initiate the application\");\r\n    pw.println(\"                                          upgrade. It requires the\");\r\n    pw.println(\"                                          upgraded application\");\r\n    pw.println(\"                                          specification file.\");\r\n    pw.println(\" -instances <Component Instances>         Works with -upgrade option to\");\r\n    pw.println(\"                                          trigger the upgrade of specified\");\r\n    pw.println(\"                                          component instances of the\");\r\n    pw.println(\"                                          application. Also works with\");\r\n    pw.println(\"                                          -decommission option to\");\r\n    pw.println(\"                                          decommission specified component\");\r\n    pw.println(\"                                          instances. Multiple instances\");\r\n    pw.println(\"                                          should be separated by commas.\");\r\n    pw.println(\" -kill <Application ID>                   Kills the application. Set of\");\r\n    pw.println(\"                                          applications can be provided\");\r\n    pw.println(\"                                          separated with space\");\r\n    pw.println(\" -launch <Application Name> <File Name>   Launches application from\");\r\n    pw.println(\"                                          specification file (saves\");\r\n    pw.println(\"                                          specification and starts\");\r\n    pw.println(\"                                          application). Options\");\r\n    pw.println(\"                                          -updateLifetime and -changeQueue\");\r\n    pw.println(\"                                          can be specified to alter the\");\r\n    pw.println(\"                                          values provided in the file.\");\r\n    pw.println(\"                                          Supports -appTypes option to\");\r\n    pw.println(\"                                          specify which client\");\r\n    pw.println(\"                                          implementation to use.\");\r\n    pw.println(\" -list                                    List applications. Supports\");\r\n    pw.println(\"                                          optional use of -appTypes to\");\r\n    pw.println(\"                                          filter applications based on\");\r\n    pw.println(\"                                          application type, -appStates to\");\r\n    pw.println(\"                                          filter applications based on\");\r\n    pw.println(\"                                          application state and -appTags\");\r\n    pw.println(\"                                          to filter applications based on\");\r\n    pw.println(\"                                          application tag.\");\r\n    pw.println(\" -movetoqueue <Application ID>            Moves the application to a\");\r\n    pw.println(\"                                          different queue. Deprecated\");\r\n    pw.println(\"                                          command. Use 'changeQueue'\");\r\n    pw.println(\"                                          instead.\");\r\n    pw.println(\" -queue <Queue Name>                      Works with the movetoqueue\");\r\n    pw.println(\"                                          command to specify which queue\");\r\n    pw.println(\"                                          to move an application to.\");\r\n    pw.println(\" -save <Application Name> <File Name>     Saves specification file for an\");\r\n    pw.println(\"                                          application. Options\");\r\n    pw.println(\"                                          -updateLifetime and -changeQueue\");\r\n    pw.println(\"                                          can be specified to alter the\");\r\n    pw.println(\"                                          values provided in the file.\");\r\n    pw.println(\"                                          Supports -appTypes option to\");\r\n    pw.println(\"                                          specify which client\");\r\n    pw.println(\"                                          implementation to use.\");\r\n    pw.println(\" -start <Application Name>                Starts a previously saved\");\r\n    pw.println(\"                                          application. Supports -appTypes\");\r\n    pw.println(\"                                          option to specify which client\");\r\n    pw.println(\"                                          implementation to use.\");\r\n    pw.println(\" -status <Application Name or ID>         Prints the status of the\");\r\n    pw.println(\"                                          application. If app ID is\");\r\n    pw.println(\"                                          provided, it prints the generic\");\r\n    pw.println(\"                                          YARN application status. If name\");\r\n    pw.println(\"                                          is provided, it prints the\");\r\n    pw.println(\"                                          application specific status\");\r\n    pw.println(\"                                          based on app's own\");\r\n    pw.println(\"                                          implementation, and -appTypes\");\r\n    pw.println(\"                                          option must be specified unless\");\r\n    pw.println(\"                                          it is the default yarn-service\");\r\n    pw.println(\"                                          type.\");\r\n    pw.println(\" -stop <Application Name or ID>           Stops application gracefully\");\r\n    pw.println(\"                                          (may be started again later). If\");\r\n    pw.println(\"                                          name is provided, appType must\");\r\n    pw.println(\"                                          be provided unless it is the\");\r\n    pw.println(\"                                          default yarn-service. If ID is\");\r\n    pw.println(\"                                          provided, the appType will be\");\r\n    pw.println(\"                                          looked up. Supports -appTypes\");\r\n    pw.println(\"                                          option to specify which client\");\r\n    pw.println(\"                                          implementation to use.\");\r\n    pw.println(\" -updateLifetime <Timeout>                update timeout of an application\");\r\n    pw.println(\"                                          from NOW. ApplicationId can be\");\r\n    pw.println(\"                                          passed using 'appId' option.\");\r\n    pw.println(\"                                          Timeout value is in seconds.\");\r\n    pw.println(\" -updatePriority <Priority>               update priority of an\");\r\n    pw.println(\"                                          application. ApplicationId can\");\r\n    pw.println(\"                                          be passed using 'appId' option.\");\r\n    pw.println(\" -upgrade <Application Name>              Upgrades an\");\r\n    pw.println(\"                                          application/long-running\");\r\n    pw.println(\"                                          service. It requires either\");\r\n    pw.println(\"                                          -initiate, -instances, or\");\r\n    pw.println(\"                                          -finalize options.\");\r\n    pw.close();\r\n    String appsHelpStr = baos.toString(\"UTF-8\");\r\n    return appsHelpStr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "createApplicationAttemptCLIHelpMessage",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "String createApplicationAttemptCLIHelpMessage() throws IOException\n{\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    PrintWriter pw = new PrintWriter(baos);\r\n    pw.println(\"usage: applicationattempt\");\r\n    pw.println(\" -clusterId <Cluster ID>            ClusterId. By default, it will take\");\r\n    pw.println(\"                                    default cluster id from the RM\");\r\n    pw.println(\" -fail <Application Attempt ID>     Fails application attempt.\");\r\n    pw.println(\" -help                              Displays help for all commands.\");\r\n    pw.println(\" -list <Application ID>             List application attempts for\");\r\n    pw.println(\"                                    application.\");\r\n    pw.println(\" -status <Application Attempt ID>   Prints the status of the application\");\r\n    pw.println(\"                                    attempt.\");\r\n    pw.close();\r\n    String appsHelpStr = baos.toString(\"UTF-8\");\r\n    return appsHelpStr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "createContainerCLIHelpMessage",
  "errType" : [ "UnsupportedEncodingException" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "String createContainerCLIHelpMessage() throws IOException\n{\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    PrintWriter pw = new PrintWriter(baos);\r\n    pw.println(\"usage: container\");\r\n    pw.println(\" -appTypes <Types>                Works with -list to specify the app type when application name is provided.\");\r\n    pw.println(\" -clusterId <Cluster ID>          ClusterId. By default, it will take default cluster id from the RM \");\r\n    pw.println(\" -components <arg>                Works with -list to filter instances based on input comma-separated list of component names.\");\r\n    pw.println(\" -help                            Displays help for all commands.\");\r\n    pw.println(\" -list <Application Name or Attempt ID>   List containers for application attempt  when application attempt ID is provided. When application name is provided, then it finds the instances of the application based on app's own implementation, and -appTypes option must be specified unless it is the default yarn-service type. With app name, it supports optional use of -version to filter instances based on app version, -components to filter instances based on component names, -states to filter instances based on instance state.\");\r\n    pw.println(\" -shell <Container ID [bash|sh]> Run a shell in the container.\");\r\n    pw.println(\" -signal <container ID [signal command]> Signal the container.\");\r\n    pw.println(\"The available signal commands are \");\r\n    pw.println(java.util.Arrays.asList(SignalContainerCommand.values()));\r\n    pw.println(\"                                 Default command is OUTPUT_THREAD_DUMP.\");\r\n    pw.println(\" -states <arg>                    Works with -list to filter instances based on input comma-separated list of instance states.\");\r\n    pw.println(\" -status <Container ID>           Prints the status of the container.\");\r\n    pw.println(\" -version <arg>                   Works with -list to filter instances based on input application version. \");\r\n    pw.close();\r\n    try {\r\n        return normalize(baos.toString(\"UTF-8\"));\r\n    } catch (UnsupportedEncodingException infeasible) {\r\n        return infeasible.toString();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "createNodeCLIHelpMessage",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "String createNodeCLIHelpMessage() throws IOException\n{\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    PrintWriter pw = new PrintWriter(baos);\r\n    pw.println(\"usage: node\");\r\n    pw.println(\" -all               Works with -list to list all nodes.\");\r\n    pw.println(\" -help              Displays help for all commands.\");\r\n    pw.println(\" -list              List all running nodes. Supports optional use of\");\r\n    pw.println(\"                    -states to filter nodes based on node state, all -all\");\r\n    pw.println(\"                    to list all nodes, -showDetails to display more\");\r\n    pw.println(\"                    details about each node.\");\r\n    pw.println(\" -showDetails       Works with -list to show more details about each node.\");\r\n    pw.println(\" -states <States>   Works with -list to filter nodes based on input\");\r\n    pw.println(\"                    comma-separated list of node states. The valid node\");\r\n    pw.println(\"                    state can be one of the following:\");\r\n    pw.println(\"                    NEW,RUNNING,UNHEALTHY,DECOMMISSIONED,LOST,REBOOTED,DEC\");\r\n    pw.println(\"                    OMMISSIONING,SHUTDOWN.\");\r\n    pw.println(\" -status <NodeId>   Prints the status report of the node.\");\r\n    pw.close();\r\n    String nodesHelpStr = baos.toString(\"UTF-8\");\r\n    return nodesHelpStr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "normalize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String normalize(String s)\n{\r\n    return SPACES_PATTERN.matcher(s).replaceAll(\" \");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testAppAttemptReportWhileContainerIsNotAssigned",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testAppAttemptReportWhileContainerIsNotAssigned() throws Exception\n{\r\n    ApplicationCLI cli = createAndGetAppCLI();\r\n    ApplicationId applicationId = ApplicationId.newInstance(1234, 5);\r\n    ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(applicationId, 1);\r\n    ApplicationAttemptReport attemptReport = ApplicationAttemptReport.newInstance(attemptId, \"host\", 124, \"url\", \"oUrl\", \"diagnostics\", YarnApplicationAttemptState.SCHEDULED, null, 1000l, 2000l);\r\n    when(client.getApplicationAttemptReport(any(ApplicationAttemptId.class))).thenReturn(attemptReport);\r\n    int result = cli.run(new String[] { \"applicationattempt\", \"-status\", attemptId.toString() });\r\n    assertEquals(0, result);\r\n    result = cli.run(new String[] { \"applicationattempt\", \"-list\", applicationId.toString() });\r\n    assertEquals(0, result);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testUpdateApplicationTimeout",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testUpdateApplicationTimeout() throws Exception\n{\r\n    ApplicationCLI cli = createAndGetAppCLI();\r\n    ApplicationId applicationId = ApplicationId.newInstance(1234, 6);\r\n    UpdateApplicationTimeoutsResponse response = mock(UpdateApplicationTimeoutsResponse.class);\r\n    String formatISO8601 = Times.formatISO8601(System.currentTimeMillis() + 5 * 1000);\r\n    when(response.getApplicationTimeouts()).thenReturn(Collections.singletonMap(ApplicationTimeoutType.LIFETIME, formatISO8601));\r\n    when(client.updateApplicationTimeouts(any(UpdateApplicationTimeoutsRequest.class))).thenReturn(response);\r\n    int result = cli.run(new String[] { \"application\", \"-appId\", applicationId.toString(), \"-updateLifetime\", \"10\" });\r\n    assertThat(result).isEqualTo(0);\r\n    verify(client).updateApplicationTimeouts(any(UpdateApplicationTimeoutsRequest.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "initiate",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initiate() throws Exception\n{\r\n    startHACluster(1, true, false, false);\r\n    Configuration conf = new YarnConfiguration(this.conf);\r\n    client = createAndStartYarnClient(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "shutDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void shutDown()\n{\r\n    if (client != null) {\r\n        client.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testGetApplicationReportOnHA",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testGetApplicationReportOnHA() throws Exception\n{\r\n    ApplicationReport report = client.getApplicationReport(cluster.createFakeAppId());\r\n    Assert.assertTrue(report != null);\r\n    Assert.assertEquals(cluster.createFakeAppReport(), report);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testGetNewApplicationOnHA",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testGetNewApplicationOnHA() throws Exception\n{\r\n    ApplicationId appId = client.createApplication().getApplicationSubmissionContext().getApplicationId();\r\n    Assert.assertTrue(appId != null);\r\n    Assert.assertEquals(cluster.createFakeAppId(), appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testGetClusterMetricsOnHA",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testGetClusterMetricsOnHA() throws Exception\n{\r\n    YarnClusterMetrics clusterMetrics = client.getYarnClusterMetrics();\r\n    Assert.assertTrue(clusterMetrics != null);\r\n    Assert.assertEquals(cluster.createFakeYarnClusterMetrics(), clusterMetrics);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testGetApplicationsOnHA",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetApplicationsOnHA() throws Exception\n{\r\n    List<ApplicationReport> reports = client.getApplications();\r\n    Assert.assertTrue(reports != null);\r\n    Assert.assertFalse(reports.isEmpty());\r\n    Assert.assertEquals(cluster.createFakeAppReports(), reports);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testGetClusterNodesOnHA",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetClusterNodesOnHA() throws Exception\n{\r\n    List<NodeReport> reports = client.getNodeReports(NodeState.RUNNING);\r\n    Assert.assertTrue(reports != null);\r\n    Assert.assertFalse(reports.isEmpty());\r\n    Assert.assertEquals(cluster.createFakeNodeReports(), reports);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testGetQueueInfoOnHA",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testGetQueueInfoOnHA() throws Exception\n{\r\n    QueueInfo queueInfo = client.getQueueInfo(\"root\");\r\n    Assert.assertTrue(queueInfo != null);\r\n    Assert.assertEquals(cluster.createFakeQueueInfo(), queueInfo);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testGetQueueUserAclsOnHA",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetQueueUserAclsOnHA() throws Exception\n{\r\n    List<QueueUserACLInfo> queueUserAclsList = client.getQueueAclsInfo();\r\n    Assert.assertTrue(queueUserAclsList != null);\r\n    Assert.assertFalse(queueUserAclsList.isEmpty());\r\n    Assert.assertEquals(cluster.createFakeQueueUserACLInfoList(), queueUserAclsList);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testGetApplicationAttemptReportOnHA",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testGetApplicationAttemptReportOnHA() throws Exception\n{\r\n    ApplicationAttemptReport report = client.getApplicationAttemptReport(cluster.createFakeApplicationAttemptId());\r\n    Assert.assertTrue(report != null);\r\n    Assert.assertEquals(cluster.createFakeApplicationAttemptReport(), report);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testGetApplicationAttemptsOnHA",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetApplicationAttemptsOnHA() throws Exception\n{\r\n    List<ApplicationAttemptReport> reports = client.getApplicationAttempts(cluster.createFakeAppId());\r\n    Assert.assertTrue(reports != null);\r\n    Assert.assertFalse(reports.isEmpty());\r\n    Assert.assertEquals(cluster.createFakeApplicationAttemptReports(), reports);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testGetContainerReportOnHA",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testGetContainerReportOnHA() throws Exception\n{\r\n    ContainerReport report = client.getContainerReport(cluster.createFakeContainerId());\r\n    Assert.assertTrue(report != null);\r\n    Assert.assertEquals(cluster.createFakeContainerReport(), report);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testGetContainersOnHA",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetContainersOnHA() throws Exception\n{\r\n    List<ContainerReport> reports = client.getContainers(cluster.createFakeApplicationAttemptId());\r\n    Assert.assertTrue(reports != null);\r\n    Assert.assertFalse(reports.isEmpty());\r\n    Assert.assertEquals(cluster.createFakeContainerReports(), reports);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testSubmitApplicationOnHA",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testSubmitApplicationOnHA() throws Exception\n{\r\n    ApplicationSubmissionContext appContext = Records.newRecord(ApplicationSubmissionContext.class);\r\n    appContext.setApplicationId(cluster.createFakeAppId());\r\n    ContainerLaunchContext amContainer = Records.newRecord(ContainerLaunchContext.class);\r\n    appContext.setAMContainerSpec(amContainer);\r\n    Resource capability = Records.newRecord(Resource.class);\r\n    capability.setMemorySize(10);\r\n    capability.setVirtualCores(1);\r\n    appContext.setResource(capability);\r\n    ApplicationId appId = client.submitApplication(appContext);\r\n    Assert.assertTrue(getActiveRM().getRMContext().getRMApps().containsKey(appId));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testMoveApplicationAcrossQueuesOnHA",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testMoveApplicationAcrossQueuesOnHA() throws Exception\n{\r\n    client.moveApplicationAcrossQueues(cluster.createFakeAppId(), \"root\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testForceKillApplicationOnHA",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testForceKillApplicationOnHA() throws Exception\n{\r\n    client.killApplication(cluster.createFakeAppId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testGetDelegationTokenOnHA",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testGetDelegationTokenOnHA() throws Exception\n{\r\n    Token token = client.getRMDelegationToken(new Text(\" \"));\r\n    Assert.assertEquals(token, cluster.createFakeToken());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testRenewDelegationTokenOnHA",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testRenewDelegationTokenOnHA() throws Exception\n{\r\n    RenewDelegationTokenRequest request = RenewDelegationTokenRequest.newInstance(cluster.createFakeToken());\r\n    long newExpirationTime = ClientRMProxy.createRMProxy(this.conf, ApplicationClientProtocol.class).renewDelegationToken(request).getNextExpirationTime();\r\n    Assert.assertEquals(newExpirationTime, cluster.createNextExpirationTime());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testCancelDelegationTokenOnHA",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testCancelDelegationTokenOnHA() throws Exception\n{\r\n    CancelDelegationTokenRequest request = CancelDelegationTokenRequest.newInstance(cluster.createFakeToken());\r\n    ClientRMProxy.createRMProxy(this.conf, ApplicationClientProtocol.class).cancelDelegationToken(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "testAMRMClientAsync",
  "errType" : null,
  "containingMethodsNum" : 33,
  "sourceCodeText" : "void testAMRMClientAsync() throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    final AtomicBoolean heartbeatBlock = new AtomicBoolean(true);\r\n    List<ContainerStatus> completed1 = Arrays.asList(ContainerStatus.newInstance(newContainerId(0, 0, 0, 0), ContainerState.COMPLETE, \"\", 0));\r\n    List<Container> containers = Arrays.asList(Container.newInstance(null, null, null, null, null, null));\r\n    final AllocateResponse response1 = createAllocateResponse(new ArrayList<ContainerStatus>(), containers, null);\r\n    final AllocateResponse response2 = createAllocateResponse(completed1, new ArrayList<Container>(), null);\r\n    final AllocateResponse response3 = createAllocateResponse(new ArrayList<ContainerStatus>(), new ArrayList<Container>(), containers, containers, null);\r\n    final AllocateResponse emptyResponse = createAllocateResponse(new ArrayList<ContainerStatus>(), new ArrayList<Container>(), null);\r\n    TestCallbackHandler callbackHandler = new TestCallbackHandler();\r\n    final AMRMClient<ContainerRequest> client = mock(AMRMClientImpl.class);\r\n    final AtomicInteger secondHeartbeatSync = new AtomicInteger(0);\r\n    when(client.allocate(anyFloat())).thenReturn(response1).thenAnswer(new Answer<AllocateResponse>() {\r\n\r\n        @Override\r\n        public AllocateResponse answer(InvocationOnMock invocation) throws Throwable {\r\n            secondHeartbeatSync.incrementAndGet();\r\n            while (heartbeatBlock.get()) {\r\n                synchronized (heartbeatBlock) {\r\n                    heartbeatBlock.wait();\r\n                }\r\n            }\r\n            secondHeartbeatSync.incrementAndGet();\r\n            return response2;\r\n        }\r\n    }).thenReturn(response3).thenReturn(emptyResponse);\r\n    when(client.registerApplicationMaster(anyString(), anyInt(), anyString())).thenReturn(null);\r\n    when(client.getAvailableResources()).thenAnswer(new Answer<Resource>() {\r\n\r\n        @Override\r\n        public Resource answer(InvocationOnMock invocation) throws Throwable {\r\n            synchronized (client) {\r\n                Thread.sleep(10);\r\n            }\r\n            return null;\r\n        }\r\n    });\r\n    AMRMClientAsync<ContainerRequest> asyncClient = AMRMClientAsync.createAMRMClientAsync(client, 20, callbackHandler);\r\n    asyncClient.init(conf);\r\n    asyncClient.start();\r\n    asyncClient.registerApplicationMaster(\"localhost\", 1234, null);\r\n    while (secondHeartbeatSync.get() < 1) {\r\n        Thread.sleep(10);\r\n    }\r\n    assert (secondHeartbeatSync.get() < 2);\r\n    asyncClient.getAvailableResources();\r\n    assert (secondHeartbeatSync.get() < 2);\r\n    synchronized (heartbeatBlock) {\r\n        heartbeatBlock.set(false);\r\n        heartbeatBlock.notifyAll();\r\n    }\r\n    Assert.assertEquals(null, callbackHandler.takeCompletedContainers());\r\n    while (callbackHandler.takeAllocatedContainers() == null) {\r\n        Assert.assertEquals(null, callbackHandler.takeCompletedContainers());\r\n        Thread.sleep(10);\r\n    }\r\n    while (callbackHandler.takeCompletedContainers() == null) {\r\n        Thread.sleep(10);\r\n    }\r\n    while (callbackHandler.takeChangedContainers() == null) {\r\n        Thread.sleep(10);\r\n    }\r\n    asyncClient.stop();\r\n    Assert.assertEquals(null, callbackHandler.takeAllocatedContainers());\r\n    Assert.assertEquals(null, callbackHandler.takeCompletedContainers());\r\n    Assert.assertEquals(null, callbackHandler.takeChangedContainers());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "testAMRMClientAsyncException",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testAMRMClientAsyncException() throws Exception\n{\r\n    String exStr = \"TestException\";\r\n    YarnException mockException = mock(YarnException.class);\r\n    when(mockException.getMessage()).thenReturn(exStr);\r\n    runHeartBeatThrowOutException(mockException);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "testAMRMClientAsyncRunTimeException",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testAMRMClientAsyncRunTimeException() throws Exception\n{\r\n    String exStr = \"TestRunTimeException\";\r\n    RuntimeException mockRunTimeException = mock(RuntimeException.class);\r\n    when(mockRunTimeException.getMessage()).thenReturn(exStr);\r\n    runHeartBeatThrowOutException(mockRunTimeException);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "runHeartBeatThrowOutException",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void runHeartBeatThrowOutException(Exception ex) throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    TestCallbackHandler callbackHandler = new TestCallbackHandler();\r\n    @SuppressWarnings(\"unchecked\")\r\n    AMRMClient<ContainerRequest> client = mock(AMRMClientImpl.class);\r\n    when(client.allocate(anyFloat())).thenThrow(ex);\r\n    AMRMClientAsync<ContainerRequest> asyncClient = AMRMClientAsync.createAMRMClientAsync(client, 20, callbackHandler);\r\n    asyncClient.init(conf);\r\n    asyncClient.start();\r\n    synchronized (callbackHandler.notifier) {\r\n        asyncClient.registerApplicationMaster(\"localhost\", 1234, null);\r\n        while (callbackHandler.savedException == null) {\r\n            try {\r\n                callbackHandler.notifier.wait();\r\n            } catch (InterruptedException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n    Assert.assertTrue(callbackHandler.savedException.getMessage().contains(ex.getMessage()));\r\n    asyncClient.stop();\r\n    Assert.assertTrue(callbackHandler.callbackCount > 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "testAMRMClientAsyncShutDown",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testAMRMClientAsyncShutDown() throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    TestCallbackHandler callbackHandler = new TestCallbackHandler();\r\n    @SuppressWarnings(\"unchecked\")\r\n    AMRMClient<ContainerRequest> client = mock(AMRMClientImpl.class);\r\n    createAllocateResponse(new ArrayList<ContainerStatus>(), new ArrayList<Container>(), null);\r\n    when(client.allocate(anyFloat())).thenThrow(new ApplicationAttemptNotFoundException(\"app not found, shut down\"));\r\n    AMRMClientAsync<ContainerRequest> asyncClient = AMRMClientAsync.createAMRMClientAsync(client, 10, callbackHandler);\r\n    asyncClient.init(conf);\r\n    asyncClient.start();\r\n    asyncClient.registerApplicationMaster(\"localhost\", 1234, null);\r\n    Thread.sleep(50);\r\n    verify(client, times(1)).allocate(anyFloat());\r\n    asyncClient.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "testAMRMClientAsyncShutDownWithWaitFor",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testAMRMClientAsyncShutDownWithWaitFor() throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    final TestCallbackHandler callbackHandler = new TestCallbackHandler();\r\n    @SuppressWarnings(\"unchecked\")\r\n    AMRMClient<ContainerRequest> client = mock(AMRMClientImpl.class);\r\n    when(client.allocate(anyFloat())).thenThrow(new ApplicationAttemptNotFoundException(\"app not found, shut down\"));\r\n    AMRMClientAsync<ContainerRequest> asyncClient = AMRMClientAsync.createAMRMClientAsync(client, 10, callbackHandler);\r\n    asyncClient.init(conf);\r\n    asyncClient.start();\r\n    Supplier<Boolean> checker = new Supplier<Boolean>() {\r\n\r\n        @Override\r\n        public Boolean get() {\r\n            return callbackHandler.reboot;\r\n        }\r\n    };\r\n    asyncClient.registerApplicationMaster(\"localhost\", 1234, null);\r\n    asyncClient.waitFor(checker);\r\n    asyncClient.stop();\r\n    Assert.assertTrue(callbackHandler.callbackCount == 0);\r\n    verify(client, times(1)).allocate(anyFloat());\r\n    asyncClient.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "testCallAMRMClientAsyncStopFromCallbackHandler",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testCallAMRMClientAsyncStopFromCallbackHandler() throws YarnException, IOException, InterruptedException\n{\r\n    Configuration conf = new Configuration();\r\n    TestCallbackHandler2 callbackHandler = new TestCallbackHandler2();\r\n    @SuppressWarnings(\"unchecked\")\r\n    AMRMClient<ContainerRequest> client = mock(AMRMClientImpl.class);\r\n    List<ContainerStatus> completed = Arrays.asList(ContainerStatus.newInstance(newContainerId(0, 0, 0, 0), ContainerState.COMPLETE, \"\", 0));\r\n    final AllocateResponse response = createAllocateResponse(completed, new ArrayList<Container>(), null);\r\n    when(client.allocate(anyFloat())).thenReturn(response);\r\n    AMRMClientAsync<ContainerRequest> asyncClient = AMRMClientAsync.createAMRMClientAsync(client, 20, callbackHandler);\r\n    callbackHandler.asynClient = asyncClient;\r\n    asyncClient.init(conf);\r\n    asyncClient.start();\r\n    synchronized (callbackHandler.notifier) {\r\n        asyncClient.registerApplicationMaster(\"localhost\", 1234, null);\r\n        while (callbackHandler.notify == false) {\r\n            try {\r\n                callbackHandler.notifier.wait();\r\n            } catch (InterruptedException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "testCallAMRMClientAsyncStopFromCallbackHandlerWithWaitFor",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testCallAMRMClientAsyncStopFromCallbackHandlerWithWaitFor() throws YarnException, IOException, InterruptedException\n{\r\n    Configuration conf = new Configuration();\r\n    final TestCallbackHandler2 callbackHandler = new TestCallbackHandler2();\r\n    @SuppressWarnings(\"unchecked\")\r\n    AMRMClient<ContainerRequest> client = mock(AMRMClientImpl.class);\r\n    List<ContainerStatus> completed = Arrays.asList(ContainerStatus.newInstance(newContainerId(0, 0, 0, 0), ContainerState.COMPLETE, \"\", 0));\r\n    final AllocateResponse response = createAllocateResponse(completed, new ArrayList<Container>(), null);\r\n    when(client.allocate(anyFloat())).thenReturn(response);\r\n    AMRMClientAsync<ContainerRequest> asyncClient = AMRMClientAsync.createAMRMClientAsync(client, 20, callbackHandler);\r\n    callbackHandler.asynClient = asyncClient;\r\n    asyncClient.init(conf);\r\n    asyncClient.start();\r\n    Supplier<Boolean> checker = new Supplier<Boolean>() {\r\n\r\n        @Override\r\n        public Boolean get() {\r\n            return callbackHandler.notify;\r\n        }\r\n    };\r\n    asyncClient.registerApplicationMaster(\"localhost\", 1234, null);\r\n    asyncClient.waitFor(checker);\r\n    Assert.assertTrue(checker.get());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "runCallBackThrowOutException",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void runCallBackThrowOutException(TestCallbackHandler2 callbackHandler) throws InterruptedException, YarnException, IOException\n{\r\n    Configuration conf = new Configuration();\r\n    @SuppressWarnings(\"unchecked\")\r\n    AMRMClient<ContainerRequest> client = mock(AMRMClientImpl.class);\r\n    List<ContainerStatus> completed = Arrays.asList(ContainerStatus.newInstance(newContainerId(0, 0, 0, 0), ContainerState.COMPLETE, \"\", 0));\r\n    final AllocateResponse response = createAllocateResponse(completed, new ArrayList<Container>(), null);\r\n    when(client.allocate(anyFloat())).thenReturn(response);\r\n    AMRMClientAsync<ContainerRequest> asyncClient = AMRMClientAsync.createAMRMClientAsync(client, 20, callbackHandler);\r\n    callbackHandler.asynClient = asyncClient;\r\n    callbackHandler.throwOutException = true;\r\n    asyncClient.init(conf);\r\n    asyncClient.start();\r\n    synchronized (callbackHandler.notifier) {\r\n        asyncClient.registerApplicationMaster(\"localhost\", 1234, null);\r\n        while (callbackHandler.notify == false) {\r\n            try {\r\n                callbackHandler.notifier.wait();\r\n            } catch (InterruptedException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n    verify(callbackHandler, times(0)).getProgress();\r\n    verify(callbackHandler, times(1)).onError(any(Exception.class));\r\n    Thread.sleep(50);\r\n    verify(callbackHandler, times(0)).getProgress();\r\n    verify(callbackHandler, times(1)).onError(any(Exception.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "testCallBackThrowOutException",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testCallBackThrowOutException() throws YarnException, IOException, InterruptedException\n{\r\n    TestCallbackHandler2 callbackHandler = spy(new TestCallbackHandler2());\r\n    runCallBackThrowOutException(callbackHandler);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "testCallBackThrowOutExceptionNoStop",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testCallBackThrowOutExceptionNoStop() throws YarnException, IOException, InterruptedException\n{\r\n    TestCallbackHandler2 callbackHandler = spy(new TestCallbackHandler2());\r\n    callbackHandler.stop = false;\r\n    runCallBackThrowOutException(callbackHandler);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "createAllocateResponse",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AllocateResponse createAllocateResponse(List<ContainerStatus> completed, List<Container> allocated, List<NMToken> nmTokens)\n{\r\n    AllocateResponse response = AllocateResponse.newInstance(0, completed, allocated, new ArrayList<NodeReport>(), null, null, 1, null, nmTokens);\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "createAllocateResponse",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "AllocateResponse createAllocateResponse(List<ContainerStatus> completed, List<Container> allocated, List<Container> increased, List<Container> decreased, List<NMToken> nmTokens)\n{\r\n    List<UpdatedContainer> updatedContainers = new ArrayList<>();\r\n    for (Container c : increased) {\r\n        updatedContainers.add(UpdatedContainer.newInstance(ContainerUpdateType.INCREASE_RESOURCE, c));\r\n    }\r\n    for (Container c : decreased) {\r\n        updatedContainers.add(UpdatedContainer.newInstance(ContainerUpdateType.DECREASE_RESOURCE, c));\r\n    }\r\n    AllocateResponse response = AllocateResponse.newInstance(0, completed, allocated, new ArrayList<NodeReport>(), null, null, 1, null, nmTokens, null, updatedContainers);\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "newContainerId",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ContainerId newContainerId(int appId, int appAttemptId, long timestamp, int containerId)\n{\r\n    ApplicationId applicationId = ApplicationId.newInstance(timestamp, appId);\r\n    ApplicationAttemptId applicationAttemptId = ApplicationAttemptId.newInstance(applicationId, appAttemptId);\r\n    return ContainerId.newContainerId(applicationAttemptId, containerId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "setUpResourceManager",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void setUpResourceManager() throws IOException, InterruptedException\n{\r\n    Configuration.addDefaultResource(\"config-with-security.xml\");\r\n    Configuration configuration = new YarnConfiguration();\r\n    resourceManager = new ResourceManager() {\r\n\r\n        @Override\r\n        protected void doSecureLogin() throws IOException {\r\n        }\r\n    };\r\n    final CountDownLatch rmStartedSignal = new CountDownLatch(1);\r\n    ServiceStateChangeListener rmStateChangeListener = new ServiceStateChangeListener() {\r\n\r\n        @Override\r\n        public void stateChanged(Service service) {\r\n            if (service.getServiceState() == STATE.STARTED) {\r\n                rmStartedSignal.countDown();\r\n            }\r\n        }\r\n    };\r\n    resourceManager.registerServiceListener(rmStateChangeListener);\r\n    resourceManager.init(configuration);\r\n    new Thread() {\r\n\r\n        public void run() {\r\n            resourceManager.start();\r\n        }\r\n    }.start();\r\n    boolean rmStarted = rmStartedSignal.await(60000L, TimeUnit.MILLISECONDS);\r\n    Assert.assertTrue(\"ResourceManager failed to start up.\", rmStarted);\r\n    LOG.info(\"ResourceManager RMAdmin address: \" + configuration.get(YarnConfiguration.RM_ADMIN_ADDRESS));\r\n    client = new ResourceManagerAdministrationProtocolPBClientImpl(1L, getProtocolAddress(configuration), configuration);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testRefreshQueues",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testRefreshQueues() throws Exception\n{\r\n    RefreshQueuesRequest request = recordFactory.newRecordInstance(RefreshQueuesRequest.class);\r\n    RefreshQueuesResponse response = client.refreshQueues(request);\r\n    assertNotNull(response);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testRefreshNodes",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testRefreshNodes() throws Exception\n{\r\n    resourceManager.getClientRMService();\r\n    RefreshNodesRequest request = RefreshNodesRequest.newInstance(DecommissionType.NORMAL);\r\n    RefreshNodesResponse response = client.refreshNodes(request);\r\n    assertNotNull(response);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testRefreshSuperUserGroupsConfiguration",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testRefreshSuperUserGroupsConfiguration() throws Exception\n{\r\n    RefreshSuperUserGroupsConfigurationRequest request = recordFactory.newRecordInstance(RefreshSuperUserGroupsConfigurationRequest.class);\r\n    RefreshSuperUserGroupsConfigurationResponse response = client.refreshSuperUserGroupsConfiguration(request);\r\n    assertNotNull(response);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testRefreshUserToGroupsMappings",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testRefreshUserToGroupsMappings() throws Exception\n{\r\n    RefreshUserToGroupsMappingsRequest request = recordFactory.newRecordInstance(RefreshUserToGroupsMappingsRequest.class);\r\n    RefreshUserToGroupsMappingsResponse response = client.refreshUserToGroupsMappings(request);\r\n    assertNotNull(response);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testRefreshAdminAcls",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testRefreshAdminAcls() throws Exception\n{\r\n    RefreshAdminAclsRequest request = recordFactory.newRecordInstance(RefreshAdminAclsRequest.class);\r\n    RefreshAdminAclsResponse response = client.refreshAdminAcls(request);\r\n    assertNotNull(response);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testUpdateNodeResource",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testUpdateNodeResource() throws Exception\n{\r\n    UpdateNodeResourceRequest request = recordFactory.newRecordInstance(UpdateNodeResourceRequest.class);\r\n    UpdateNodeResourceResponse response = client.updateNodeResource(request);\r\n    assertNotNull(response);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "testRefreshServiceAcls",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testRefreshServiceAcls() throws Exception\n{\r\n    RefreshServiceAclsRequest request = recordFactory.newRecordInstance(RefreshServiceAclsRequest.class);\r\n    RefreshServiceAclsResponse response = client.refreshServiceAcls(request);\r\n    assertNotNull(response);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "tearDownResourceManager",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDownResourceManager() throws InterruptedException\n{\r\n    if (resourceManager != null) {\r\n        LOG.info(\"Stopping ResourceManager...\");\r\n        resourceManager.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "getProtocolAddress",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "InetSocketAddress getProtocolAddress(Configuration conf) throws IOException\n{\r\n    return conf.getSocketAddr(YarnConfiguration.RM_ADMIN_ADDRESS, YarnConfiguration.DEFAULT_RM_ADMIN_ADDRESS, YarnConfiguration.DEFAULT_RM_ADMIN_PORT);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    conf = new YarnConfiguration();\r\n    createClusterAndStartApplication(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "createClusterAndStartApplication",
  "errType" : null,
  "containingMethodsNum" : 44,
  "sourceCodeText" : "void createClusterAndStartApplication(Configuration conf) throws Exception\n{\r\n    this.conf = conf;\r\n    if (autoUpdate) {\r\n        conf.setBoolean(YarnConfiguration.RM_AUTO_UPDATE_CONTAINERS, true);\r\n    }\r\n    conf.set(YarnConfiguration.RM_SCHEDULER, schedulerName);\r\n    conf.setLong(YarnConfiguration.RM_AMRM_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS, rollingIntervalSec);\r\n    conf.setLong(YarnConfiguration.RM_AM_EXPIRY_INTERVAL_MS, amExpireMs);\r\n    conf.setInt(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS, 100);\r\n    conf.setInt(YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB, 512);\r\n    conf.setLong(YarnConfiguration.NM_LOG_RETAIN_SECONDS, 1);\r\n    conf.setBoolean(YarnConfiguration.OPPORTUNISTIC_CONTAINER_ALLOCATION_ENABLED, true);\r\n    conf.setInt(YarnConfiguration.NM_OPPORTUNISTIC_CONTAINERS_MAX_QUEUE_LENGTH, 10);\r\n    yarnCluster = new MiniYARNCluster(TestAMRMClient.class.getName(), nodeCount, 1, 1);\r\n    yarnCluster.init(conf);\r\n    yarnCluster.start();\r\n    yarnClient = YarnClient.createYarnClient();\r\n    yarnClient.init(conf);\r\n    yarnClient.start();\r\n    assertTrue(\"All node managers did not connect to the RM within the \" + \"allotted 5-second timeout\", yarnCluster.waitForNodeManagersToConnect(5000L));\r\n    nodeReports = yarnClient.getNodeReports(NodeState.RUNNING);\r\n    assertEquals(\"Not all node managers were reported running\", nodeCount, nodeReports.size());\r\n    priority = Priority.newInstance(1);\r\n    priority2 = Priority.newInstance(2);\r\n    capability = Resource.newInstance(1024, 1);\r\n    node = nodeReports.get(0).getNodeId().getHost();\r\n    rack = nodeReports.get(0).getRackName();\r\n    nodes = new String[] { node };\r\n    racks = new String[] { rack };\r\n    ApplicationSubmissionContext appContext = yarnClient.createApplication().getApplicationSubmissionContext();\r\n    ApplicationId appId = appContext.getApplicationId();\r\n    appContext.setApplicationName(\"Test\");\r\n    Priority pri = Records.newRecord(Priority.class);\r\n    pri.setPriority(0);\r\n    appContext.setPriority(pri);\r\n    appContext.setQueue(\"default\");\r\n    ContainerLaunchContext amContainer = BuilderUtils.newContainerLaunchContext(Collections.<String, LocalResource>emptyMap(), new HashMap<String, String>(), Arrays.asList(\"sleep\", \"100\"), new HashMap<String, ByteBuffer>(), null, new HashMap<ApplicationAccessType, String>());\r\n    appContext.setAMContainerSpec(amContainer);\r\n    appContext.setResource(Resource.newInstance(1024, 1));\r\n    SubmitApplicationRequest appRequest = Records.newRecord(SubmitApplicationRequest.class);\r\n    appRequest.setApplicationSubmissionContext(appContext);\r\n    yarnClient.submitApplication(appContext);\r\n    RMAppAttempt appAttempt = null;\r\n    while (true) {\r\n        ApplicationReport appReport = yarnClient.getApplicationReport(appId);\r\n        if (appReport.getYarnApplicationState() == YarnApplicationState.ACCEPTED) {\r\n            attemptId = appReport.getCurrentApplicationAttemptId();\r\n            appAttempt = yarnCluster.getResourceManager().getRMContext().getRMApps().get(attemptId.getApplicationId()).getCurrentAppAttempt();\r\n            while (true) {\r\n                if (appAttempt.getAppAttemptState() == RMAppAttemptState.LAUNCHED) {\r\n                    break;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    }\r\n    UserGroupInformation.setLoginUser(UserGroupInformation.createRemoteUser(UserGroupInformation.getCurrentUser().getUserName()));\r\n    UserGroupInformation.getCurrentUser().addToken(appAttempt.getAMRMToken());\r\n    appAttempt.getAMRMToken().setService(ClientRMProxy.getAMRMTokenService(conf));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "teardown",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void teardown() throws YarnException, IOException\n{\r\n    if (yarnClient != null) {\r\n        yarnClient.killApplication(attemptId.getApplicationId());\r\n    }\r\n    attemptId = null;\r\n    if (yarnClient != null && yarnClient.getServiceState() == Service.STATE.STARTED) {\r\n        yarnClient.stop();\r\n    }\r\n    if (yarnCluster != null && yarnCluster.getServiceState() == Service.STATE.STARTED) {\r\n        yarnCluster.stop();\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "startupHAAndSetupClient",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void startupHAAndSetupClient() throws Exception\n{\r\n    attemptId = this.cluster.createFakeApplicationAttemptId();\r\n    Token<AMRMTokenIdentifier> appToken = this.cluster.getResourceManager().getRMContext().getAMRMTokenSecretManager().createAndGetAMRMToken(attemptId);\r\n    appToken.setService(ClientRMProxy.getAMRMTokenService(this.conf));\r\n    UserGroupInformation.setLoginUser(UserGroupInformation.createRemoteUser(UserGroupInformation.getCurrentUser().getUserName()));\r\n    UserGroupInformation.getCurrentUser().addToken(appToken);\r\n    syncToken(appToken);\r\n    amClient = ClientRMProxy.createRMProxy(this.conf, ApplicationMasterProtocol.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "shutDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void shutDown()\n{\r\n    if (this.amClient != null) {\r\n        RPC.stopProxy(this.amClient);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "getAMClient",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationMasterProtocol getAMClient()\n{\r\n    return amClient;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "syncToken",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void syncToken(Token<AMRMTokenIdentifier> token) throws IOException\n{\r\n    for (int i = 0; i < this.cluster.getNumOfResourceManager(); i++) {\r\n        this.cluster.getResourceManager(i).getRMContext().getAMRMTokenSecretManager().addPersistedPassword(token);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getParameters",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Collection<Object[]> getParameters()\n{\r\n    return Arrays.stream(SchedulerType.values()).map(type -> new Object[] { type }).collect(Collectors.toList());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "setupMiniYARNCluster",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "MiniYARNCluster setupMiniYARNCluster() throws Exception\n{\r\n    MiniYARNCluster cluster = new MiniYARNCluster(\"testReservationAPIs\", 2, 1, 1);\r\n    cluster.init(getConfigurationForReservation());\r\n    cluster.start();\r\n    GenericTestUtils.waitFor(new Supplier<Boolean>() {\r\n\r\n        @Override\r\n        public Boolean get() {\r\n            return cluster.getResourceManager().getRMContext().getReservationSystem().getPlan(ReservationSystemTestUtil.reservationQ).getTotalCapacity().getMemorySize() > 6000;\r\n        }\r\n    }, 10, 10000);\r\n    return cluster;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getConfigurationForReservation",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Configuration getConfigurationForReservation()\n{\r\n    Configuration conf = new Configuration();\r\n    if (schedulerType == SchedulerType.FAIR) {\r\n        conf = configureReservationForFairScheduler();\r\n        conf.set(YarnConfiguration.RM_SCHEDULER, FairScheduler.class.getName());\r\n    } else if (schedulerType == SchedulerType.CAPACITY) {\r\n        conf = configureReservationForCapacityScheduler();\r\n        conf.set(YarnConfiguration.RM_SCHEDULER, CapacityScheduler.class.getName());\r\n    }\r\n    conf.setBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE, true);\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "configureReservationForCapacityScheduler",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Configuration configureReservationForCapacityScheduler()\n{\r\n    CapacitySchedulerConfiguration conf = new CapacitySchedulerConfiguration();\r\n    ReservationSystemTestUtil.setupQueueConfiguration(conf);\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "configureReservationForFairScheduler",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Configuration configureReservationForFairScheduler()\n{\r\n    Configuration conf = new Configuration();\r\n    AllocationFileWriter.create().drfDefaultQueueSchedulingPolicy().addQueue(new AllocationFileQueue.Builder(\"root\").subQueue(new AllocationFileQueue.Builder(\"default\").build()).subQueue(new AllocationFileQueue.Builder(\"dedicated\").reservation().weight(10).build()).build()).writeToFile(FS_ALLOC_FILE);\r\n    conf.set(FairSchedulerConfiguration.ALLOCATION_FILE, FS_ALLOC_FILE);\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "setupYarnClient",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "YarnClient setupYarnClient(MiniYARNCluster cluster)\n{\r\n    final Configuration yarnConf = cluster.getConfig();\r\n    YarnClient client = YarnClient.createYarnClient();\r\n    client.init(yarnConf);\r\n    client.start();\r\n    return client;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "submitReservationTestHelper",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "ReservationSubmissionRequest submitReservationTestHelper(YarnClient client, long arrival, long deadline, long duration) throws IOException, YarnException\n{\r\n    ReservationId reservationID = client.createReservation().getReservationId();\r\n    ReservationSubmissionRequest sRequest = createSimpleReservationRequest(reservationID, 4, arrival, deadline, duration);\r\n    ReservationSubmissionResponse sResponse = client.submitReservation(sRequest);\r\n    Assert.assertNotNull(sResponse);\r\n    Assert.assertNotNull(reservationID);\r\n    System.out.println(\"Submit reservation response: \" + reservationID);\r\n    return sRequest;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setup()\n{\r\n    QueueMetrics.clearQueueMetrics();\r\n    DefaultMetricsSystem.setMiniClusterMode(true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testCreateReservation",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testCreateReservation() throws Exception\n{\r\n    MiniYARNCluster cluster = setupMiniYARNCluster();\r\n    YarnClient client = setupYarnClient(cluster);\r\n    try {\r\n        Clock clock = new UTCClock();\r\n        long arrival = clock.getTime();\r\n        long duration = 60000;\r\n        long deadline = (long) (arrival + 1.05 * duration);\r\n        ReservationSubmissionRequest sRequest = submitReservationTestHelper(client, arrival, deadline, duration);\r\n        client.submitReservation(sRequest);\r\n        arrival = clock.getTime();\r\n        ReservationDefinition rDef = sRequest.getReservationDefinition();\r\n        rDef.setArrival(arrival + duration);\r\n        sRequest.setReservationDefinition(rDef);\r\n        try {\r\n            client.submitReservation(sRequest);\r\n            Assert.fail(\"Reservation submission should fail if a duplicate \" + \"reservation id is used, but the reservation definition has been \" + \"updated.\");\r\n        } catch (Exception e) {\r\n            Assert.assertTrue(e instanceof YarnException);\r\n        }\r\n    } finally {\r\n        if (client != null) {\r\n            client.stop();\r\n        }\r\n        cluster.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testUpdateReservation",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testUpdateReservation() throws Exception\n{\r\n    MiniYARNCluster cluster = setupMiniYARNCluster();\r\n    YarnClient client = setupYarnClient(cluster);\r\n    try {\r\n        Clock clock = new UTCClock();\r\n        long arrival = clock.getTime();\r\n        long duration = 60000;\r\n        long deadline = (long) (arrival + 1.05 * duration);\r\n        ReservationSubmissionRequest sRequest = submitReservationTestHelper(client, arrival, deadline, duration);\r\n        ReservationDefinition rDef = sRequest.getReservationDefinition();\r\n        ReservationRequest rr = rDef.getReservationRequests().getReservationResources().get(0);\r\n        ReservationId reservationID = sRequest.getReservationId();\r\n        rr.setNumContainers(5);\r\n        arrival = clock.getTime();\r\n        duration = 30000;\r\n        deadline = (long) (arrival + 1.05 * duration);\r\n        rr.setDuration(duration);\r\n        rDef.setArrival(arrival);\r\n        rDef.setDeadline(deadline);\r\n        ReservationUpdateRequest uRequest = ReservationUpdateRequest.newInstance(rDef, reservationID);\r\n        ReservationUpdateResponse uResponse = client.updateReservation(uRequest);\r\n        Assert.assertNotNull(uResponse);\r\n        System.out.println(\"Update reservation response: \" + uResponse);\r\n    } finally {\r\n        if (client != null) {\r\n            client.stop();\r\n        }\r\n        cluster.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "createSimpleReservationRequest",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "ReservationSubmissionRequest createSimpleReservationRequest(ReservationId reservationId, int numContainers, long arrival, long deadline, long duration)\n{\r\n    ReservationRequest r = ReservationRequest.newInstance(Resource.newInstance(1024, 1), numContainers, 1, duration);\r\n    ReservationRequests reqs = ReservationRequests.newInstance(Collections.singletonList(r), ReservationRequestInterpreter.R_ALL);\r\n    ReservationDefinition rDef = ReservationDefinition.newInstance(arrival, deadline, reqs, \"testYarnClient#reservation\");\r\n    ReservationSubmissionRequest request = ReservationSubmissionRequest.newInstance(rDef, ReservationSystemTestUtil.reservationQ, reservationId);\r\n    return request;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testListReservationsByReservationId",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testListReservationsByReservationId() throws Exception\n{\r\n    MiniYARNCluster cluster = setupMiniYARNCluster();\r\n    YarnClient client = setupYarnClient(cluster);\r\n    try {\r\n        Clock clock = new UTCClock();\r\n        long arrival = clock.getTime();\r\n        long duration = 60000;\r\n        long deadline = (long) (arrival + 1.05 * duration);\r\n        ReservationSubmissionRequest sRequest = submitReservationTestHelper(client, arrival, deadline, duration);\r\n        ReservationId reservationID = sRequest.getReservationId();\r\n        ReservationListRequest request = ReservationListRequest.newInstance(ReservationSystemTestUtil.reservationQ, reservationID.toString(), -1, -1, false);\r\n        ReservationListResponse response = client.listReservations(request);\r\n        Assert.assertNotNull(response);\r\n        Assert.assertEquals(1, response.getReservationAllocationState().size());\r\n        Assert.assertEquals(response.getReservationAllocationState().get(0).getReservationId().getId(), reservationID.getId());\r\n        Assert.assertEquals(response.getReservationAllocationState().get(0).getResourceAllocationRequests().size(), 0);\r\n    } finally {\r\n        if (client != null) {\r\n            client.stop();\r\n        }\r\n        cluster.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testListReservationsByTimeInterval",
  "errType" : null,
  "containingMethodsNum" : 22,
  "sourceCodeText" : "void testListReservationsByTimeInterval() throws Exception\n{\r\n    MiniYARNCluster cluster = setupMiniYARNCluster();\r\n    YarnClient client = setupYarnClient(cluster);\r\n    try {\r\n        Clock clock = new UTCClock();\r\n        long arrival = clock.getTime();\r\n        long duration = 60000;\r\n        long deadline = (long) (arrival + 1.05 * duration);\r\n        ReservationSubmissionRequest sRequest = submitReservationTestHelper(client, arrival, deadline, duration);\r\n        arrival = clock.getTime();\r\n        ReservationId reservationID = sRequest.getReservationId();\r\n        ReservationListRequest request = ReservationListRequest.newInstance(ReservationSystemTestUtil.reservationQ, \"\", arrival + duration / 2, arrival + duration / 2, true);\r\n        ReservationListResponse response = client.listReservations(request);\r\n        Assert.assertNotNull(response);\r\n        Assert.assertEquals(1, response.getReservationAllocationState().size());\r\n        Assert.assertEquals(response.getReservationAllocationState().get(0).getReservationId().getId(), reservationID.getId());\r\n        request = ReservationListRequest.newInstance(ReservationSystemTestUtil.reservationQ, \"\", 1, Long.MAX_VALUE, true);\r\n        response = client.listReservations(request);\r\n        Assert.assertNotNull(response);\r\n        Assert.assertEquals(1, response.getReservationAllocationState().size());\r\n        Assert.assertEquals(response.getReservationAllocationState().get(0).getReservationId().getId(), reservationID.getId());\r\n        Assert.assertTrue(response.getReservationAllocationState().get(0).getResourceAllocationRequests().size() > 0);\r\n        ReservationRequests reservationRequests = response.getReservationAllocationState().get(0).getReservationDefinition().getReservationRequests();\r\n        Assert.assertEquals(\"R_ALL\", reservationRequests.getInterpreter().toString());\r\n        Assert.assertTrue(reservationRequests.getReservationResources().get(0).getDuration() == duration);\r\n    } finally {\r\n        if (client != null) {\r\n            client.stop();\r\n        }\r\n        cluster.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testListReservationsByInvalidTimeInterval",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testListReservationsByInvalidTimeInterval() throws Exception\n{\r\n    MiniYARNCluster cluster = setupMiniYARNCluster();\r\n    YarnClient client = setupYarnClient(cluster);\r\n    try {\r\n        Clock clock = new UTCClock();\r\n        long arrival = clock.getTime();\r\n        long duration = 60000;\r\n        long deadline = (long) (arrival + 1.05 * duration);\r\n        ReservationSubmissionRequest sRequest = submitReservationTestHelper(client, arrival, deadline, duration);\r\n        ReservationListRequest request = ReservationListRequest.newInstance(ReservationSystemTestUtil.reservationQ, \"\", 1, -1, true);\r\n        ReservationListResponse response = client.listReservations(request);\r\n        Assert.assertNotNull(response);\r\n        Assert.assertEquals(1, response.getReservationAllocationState().size());\r\n        Assert.assertEquals(response.getReservationAllocationState().get(0).getReservationId().getId(), sRequest.getReservationId().getId());\r\n        request = ReservationListRequest.newInstance(ReservationSystemTestUtil.reservationQ, \"\", 1, -10, true);\r\n        response = client.listReservations(request);\r\n        Assert.assertNotNull(response);\r\n        Assert.assertEquals(1, response.getReservationAllocationState().size());\r\n        Assert.assertEquals(response.getReservationAllocationState().get(0).getReservationId().getId(), sRequest.getReservationId().getId());\r\n    } finally {\r\n        if (client != null) {\r\n            client.stop();\r\n        }\r\n        cluster.stop();\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testListReservationsByTimeIntervalContainingNoReservations",
  "errType" : null,
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void testListReservationsByTimeIntervalContainingNoReservations() throws Exception\n{\r\n    MiniYARNCluster cluster = setupMiniYARNCluster();\r\n    YarnClient client = setupYarnClient(cluster);\r\n    try {\r\n        Clock clock = new UTCClock();\r\n        long arrival = clock.getTime();\r\n        long duration = 60000;\r\n        long deadline = (long) (arrival + 1.05 * duration);\r\n        ReservationSubmissionRequest sRequest = submitReservationTestHelper(client, arrival, deadline, duration);\r\n        ReservationListRequest request = ReservationListRequest.newInstance(ReservationSystemTestUtil.reservationQ, \"\", Long.MAX_VALUE, -1, false);\r\n        ReservationListResponse response = client.listReservations(request);\r\n        Assert.assertNotNull(response);\r\n        assertThat(response.getReservationAllocationState()).isEmpty();\r\n        duration = 30000;\r\n        deadline = sRequest.getReservationDefinition().getDeadline();\r\n        request = ReservationListRequest.newInstance(ReservationSystemTestUtil.reservationQ, \"\", deadline + duration, deadline + 2 * duration, false);\r\n        response = client.listReservations(request);\r\n        Assert.assertNotNull(response);\r\n        assertThat(response.getReservationAllocationState()).isEmpty();\r\n        arrival = clock.getTime();\r\n        request = ReservationListRequest.newInstance(ReservationSystemTestUtil.reservationQ, \"\", 0, arrival - duration, false);\r\n        response = client.listReservations(request);\r\n        Assert.assertNotNull(response);\r\n        assertThat(response.getReservationAllocationState()).isEmpty();\r\n        request = ReservationListRequest.newInstance(ReservationSystemTestUtil.reservationQ, \"\", 0, 1, false);\r\n        response = client.listReservations(request);\r\n        Assert.assertNotNull(response);\r\n        assertThat(response.getReservationAllocationState()).isEmpty();\r\n    } finally {\r\n        if (client != null) {\r\n            client.stop();\r\n        }\r\n        cluster.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testReservationDelete",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testReservationDelete() throws Exception\n{\r\n    MiniYARNCluster cluster = setupMiniYARNCluster();\r\n    YarnClient client = setupYarnClient(cluster);\r\n    try {\r\n        Clock clock = new UTCClock();\r\n        long arrival = clock.getTime();\r\n        long duration = 60000;\r\n        long deadline = (long) (arrival + 1.05 * duration);\r\n        ReservationSubmissionRequest sRequest = submitReservationTestHelper(client, arrival, deadline, duration);\r\n        ReservationId reservationID = sRequest.getReservationId();\r\n        ReservationDeleteRequest dRequest = ReservationDeleteRequest.newInstance(reservationID);\r\n        ReservationDeleteResponse dResponse = client.deleteReservation(dRequest);\r\n        Assert.assertNotNull(dResponse);\r\n        System.out.println(\"Delete reservation response: \" + dResponse);\r\n        ReservationListRequest request = ReservationListRequest.newInstance(ReservationSystemTestUtil.reservationQ, reservationID.toString(), -1, -1, false);\r\n        ReservationListResponse response = client.listReservations(request);\r\n        Assert.assertNotNull(response);\r\n        Assert.assertEquals(0, response.getReservationAllocationState().size());\r\n    } finally {\r\n        if (client != null) {\r\n            client.stop();\r\n        }\r\n        cluster.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void write(DataOutput out) throws IOException\n{\r\n    out.write(proto.toByteArray());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "readFields",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void readFields(DataInput in) throws IOException\n{\r\n    DataInputStream dis = (DataInputStream) in;\r\n    byte[] buffer = IOUtils.toByteArray(dis);\r\n    proto = AMRMTokenIdentifierForTestProto.parseFrom(buffer);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getKind",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Text getKind()\n{\r\n    return KIND;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getMessage",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getMessage()\n{\r\n    return proto.getMessage();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "setMessage",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setMessage(String message)\n{\r\n    builder.setMessage(message);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "build",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void build()\n{\r\n    proto = builder.build();\r\n    builder = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getApplicationAttemptId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationAttemptId getApplicationAttemptId()\n{\r\n    return new ApplicationAttemptIdPBImpl(proto.getAppAttemptId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getKeyId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getKeyId()\n{\r\n    return proto.getKeyId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getNewProto",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AMRMTokenIdentifierForTestProto getNewProto()\n{\r\n    return this.proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return this.proto.hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getNewProto().equals(this.getClass().cast(other).getNewProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(this.proto);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testOpportunisticAndGuaranteedRequests",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testOpportunisticAndGuaranteedRequests()\n{\r\n    AMRMClientImpl<ContainerRequest> client = new AMRMClientImpl<ContainerRequest>();\r\n    Configuration conf = new Configuration();\r\n    conf.setClass(CommonConfigurationKeysPublic.NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY, MyResolver.class, DNSToSwitchMapping.class);\r\n    client.init(conf);\r\n    Resource capability = Resource.newInstance(1024, 1);\r\n    ContainerRequest request = ContainerRequest.newBuilder().capability(capability).nodes(new String[] { \"host1\", \"host2\" }).racks(new String[] { \"/rack2\" }).priority(Priority.newInstance(1)).build();\r\n    client.addContainerRequest(request);\r\n    verifyResourceRequest(client, request, \"host1\", true);\r\n    verifyResourceRequest(client, request, \"host2\", true);\r\n    verifyResourceRequest(client, request, \"/rack1\", true);\r\n    verifyResourceRequest(client, request, \"/rack2\", true);\r\n    verifyResourceRequest(client, request, ResourceRequest.ANY, true);\r\n    ContainerRequest request2 = new ContainerRequest(capability, new String[] { \"host1\", \"host2\" }, new String[] { \"/rack2\" }, Priority.newInstance(1), 0, true, null, ExecutionTypeRequest.newInstance(ExecutionType.OPPORTUNISTIC, true));\r\n    client.addContainerRequest(request2);\r\n    verifyResourceRequest(client, request, \"host1\", true, ExecutionType.OPPORTUNISTIC);\r\n    verifyResourceRequest(client, request, \"host2\", true, ExecutionType.OPPORTUNISTIC);\r\n    verifyResourceRequest(client, request, \"/rack1\", true, ExecutionType.OPPORTUNISTIC);\r\n    verifyResourceRequest(client, request, \"/rack2\", true, ExecutionType.OPPORTUNISTIC);\r\n    verifyResourceRequest(client, request, ResourceRequest.ANY, true, ExecutionType.OPPORTUNISTIC);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testFillInRacks",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testFillInRacks()\n{\r\n    AMRMClientImpl<ContainerRequest> client = new AMRMClientImpl<ContainerRequest>();\r\n    Configuration conf = new Configuration();\r\n    conf.setClass(CommonConfigurationKeysPublic.NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY, MyResolver.class, DNSToSwitchMapping.class);\r\n    client.init(conf);\r\n    Resource capability = Resource.newInstance(1024, 1);\r\n    ContainerRequest request = new ContainerRequest(capability, new String[] { \"host1\", \"host2\" }, new String[] { \"/rack2\" }, Priority.newInstance(1));\r\n    client.addContainerRequest(request);\r\n    verifyResourceRequest(client, request, \"host1\", true);\r\n    verifyResourceRequest(client, request, \"host2\", true);\r\n    verifyResourceRequest(client, request, \"/rack1\", true);\r\n    verifyResourceRequest(client, request, \"/rack2\", true);\r\n    verifyResourceRequest(client, request, ResourceRequest.ANY, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testDisableLocalityRelaxation",
  "errType" : null,
  "containingMethodsNum" : 27,
  "sourceCodeText" : "void testDisableLocalityRelaxation()\n{\r\n    AMRMClientImpl<ContainerRequest> client = new AMRMClientImpl<ContainerRequest>();\r\n    Configuration conf = new Configuration();\r\n    conf.setClass(CommonConfigurationKeysPublic.NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY, MyResolver.class, DNSToSwitchMapping.class);\r\n    client.init(conf);\r\n    Resource capability = Resource.newInstance(1024, 1);\r\n    ContainerRequest nodeLevelRequest = new ContainerRequest(capability, new String[] { \"host1\", \"host2\" }, null, Priority.newInstance(1), false);\r\n    client.addContainerRequest(nodeLevelRequest);\r\n    verifyResourceRequest(client, nodeLevelRequest, ResourceRequest.ANY, false);\r\n    verifyResourceRequest(client, nodeLevelRequest, \"/rack1\", false);\r\n    verifyResourceRequest(client, nodeLevelRequest, \"host1\", true);\r\n    verifyResourceRequest(client, nodeLevelRequest, \"host2\", true);\r\n    ContainerRequest nodeLevelRequest2 = new ContainerRequest(capability, new String[] { \"host2\", \"host3\" }, null, Priority.newInstance(1), false);\r\n    client.addContainerRequest(nodeLevelRequest2);\r\n    AMRMClient.ContainerRequest rackLevelRequest = new AMRMClient.ContainerRequest(capability, null, new String[] { \"/rack3\", \"/rack4\" }, Priority.newInstance(2), false);\r\n    client.addContainerRequest(rackLevelRequest);\r\n    verifyResourceRequest(client, rackLevelRequest, ResourceRequest.ANY, false);\r\n    verifyResourceRequest(client, rackLevelRequest, \"/rack3\", true);\r\n    verifyResourceRequest(client, rackLevelRequest, \"/rack4\", true);\r\n    AMRMClient.ContainerRequest rackLevelRequest2 = new AMRMClient.ContainerRequest(capability, null, new String[] { \"/rack4\", \"/rack5\" }, Priority.newInstance(2), false);\r\n    client.addContainerRequest(rackLevelRequest2);\r\n    ContainerRequest bothLevelRequest = new ContainerRequest(capability, new String[] { \"host3\", \"host4\" }, new String[] { \"rack1\", \"/otherrack\" }, Priority.newInstance(3), false);\r\n    client.addContainerRequest(bothLevelRequest);\r\n    verifyResourceRequest(client, bothLevelRequest, ResourceRequest.ANY, false);\r\n    verifyResourceRequest(client, bothLevelRequest, \"rack1\", true);\r\n    verifyResourceRequest(client, bothLevelRequest, \"/otherrack\", true);\r\n    verifyResourceRequest(client, bothLevelRequest, \"host3\", true);\r\n    verifyResourceRequest(client, bothLevelRequest, \"host4\", true);\r\n    ContainerRequest bothLevelRequest2 = new ContainerRequest(capability, new String[] { \"host4\", \"host5\" }, new String[] { \"rack1\", \"/otherrack2\" }, Priority.newInstance(3), false);\r\n    client.addContainerRequest(bothLevelRequest2);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testDifferentLocalityRelaxationSamePriority",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testDifferentLocalityRelaxationSamePriority()\n{\r\n    AMRMClientImpl<ContainerRequest> client = new AMRMClientImpl<ContainerRequest>();\r\n    Configuration conf = new Configuration();\r\n    conf.setClass(CommonConfigurationKeysPublic.NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY, MyResolver.class, DNSToSwitchMapping.class);\r\n    client.init(conf);\r\n    Resource capability = Resource.newInstance(1024, 1);\r\n    ContainerRequest request1 = new ContainerRequest(capability, new String[] { \"host1\", \"host2\" }, null, Priority.newInstance(1), false);\r\n    client.addContainerRequest(request1);\r\n    ContainerRequest request2 = new ContainerRequest(capability, new String[] { \"host3\" }, null, Priority.newInstance(1), true);\r\n    client.addContainerRequest(request2);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testInvalidValidWhenOldRemoved",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testInvalidValidWhenOldRemoved()\n{\r\n    AMRMClientImpl<ContainerRequest> client = new AMRMClientImpl<ContainerRequest>();\r\n    Configuration conf = new Configuration();\r\n    conf.setClass(CommonConfigurationKeysPublic.NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY, MyResolver.class, DNSToSwitchMapping.class);\r\n    client.init(conf);\r\n    Resource capability = Resource.newInstance(1024, 1);\r\n    ContainerRequest request1 = new ContainerRequest(capability, new String[] { \"host1\", \"host2\" }, null, Priority.newInstance(1), false);\r\n    client.addContainerRequest(request1);\r\n    client.removeContainerRequest(request1);\r\n    ContainerRequest request2 = new ContainerRequest(capability, new String[] { \"host3\" }, null, Priority.newInstance(1), true);\r\n    client.addContainerRequest(request2);\r\n    client.removeContainerRequest(request2);\r\n    ContainerRequest request3 = new ContainerRequest(capability, new String[] { \"host1\", \"host2\" }, null, Priority.newInstance(1), false);\r\n    client.addContainerRequest(request3);\r\n    client.removeContainerRequest(request3);\r\n    ContainerRequest request4 = new ContainerRequest(capability, null, new String[] { \"rack1\" }, Priority.newInstance(1), true);\r\n    client.addContainerRequest(request4);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testLocalityRelaxationDifferentLevels",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testLocalityRelaxationDifferentLevels()\n{\r\n    AMRMClientImpl<ContainerRequest> client = new AMRMClientImpl<ContainerRequest>();\r\n    Configuration conf = new Configuration();\r\n    conf.setClass(CommonConfigurationKeysPublic.NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY, MyResolver.class, DNSToSwitchMapping.class);\r\n    client.init(conf);\r\n    Resource capability = Resource.newInstance(1024, 1);\r\n    ContainerRequest request1 = new ContainerRequest(capability, new String[] { \"host1\", \"host2\" }, null, Priority.newInstance(1), false);\r\n    client.addContainerRequest(request1);\r\n    ContainerRequest request2 = new ContainerRequest(capability, null, new String[] { \"rack1\" }, Priority.newInstance(1), true);\r\n    client.addContainerRequest(request2);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "verifyResourceRequest",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void verifyResourceRequest(AMRMClientImpl<ContainerRequest> client, ContainerRequest request, String location, boolean expectedRelaxLocality)\n{\r\n    verifyResourceRequest(client, request, location, expectedRelaxLocality, ExecutionType.GUARANTEED);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "verifyResourceRequest",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void verifyResourceRequest(AMRMClientImpl<ContainerRequest> client, ContainerRequest request, String location, boolean expectedRelaxLocality, ExecutionType executionType)\n{\r\n    ResourceRequest ask = client.getTable(0).get(request.getPriority(), location, executionType, request.getCapability()).remoteRequest;\r\n    assertEquals(location, ask.getResourceName());\r\n    assertEquals(1, ask.getNumContainers());\r\n    assertEquals(expectedRelaxLocality, ask.getRelaxLocality());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "createAMRMProtocol",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "ApplicationMasterProtocol createAMRMProtocol(YarnClient rmClient, ApplicationId appId, MiniYARNCluster cluster, final Configuration yarnConf) throws IOException, InterruptedException, YarnException\n{\r\n    UserGroupInformation user = null;\r\n    ApplicationReport report = rmClient.getApplicationReport(appId);\r\n    user = UserGroupInformation.createProxyUser(report.getCurrentApplicationAttemptId().toString(), UserGroupInformation.getCurrentUser());\r\n    ContainerManagerImpl containerManager = (ContainerManagerImpl) cluster.getNodeManager(0).getNMContext().getContainerManager();\r\n    AMRMProxyTokenSecretManager amrmTokenSecretManager = containerManager.getAMRMProxyService().getSecretManager();\r\n    org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> token = amrmTokenSecretManager.createAndGetAMRMToken(report.getCurrentApplicationAttemptId());\r\n    SecurityUtil.setTokenService(token, containerManager.getAMRMProxyService().getBindAddress());\r\n    user.addToken(token);\r\n    return user.doAs(new PrivilegedExceptionAction<ApplicationMasterProtocol>() {\r\n\r\n        @Override\r\n        public ApplicationMasterProtocol run() throws Exception {\r\n            return ClientRMProxy.createRMProxy(yarnConf, ApplicationMasterProtocol.class);\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "createAllocateRequest",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "AllocateRequest createAllocateRequest(List<NodeReport> listNode)\n{\r\n    AMRMClientImpl<AMRMClient.ContainerRequest> amClient = new AMRMClientImpl<>();\r\n    Resource capability = Resource.newInstance(1024, 2);\r\n    Priority priority = Priority.newInstance(1);\r\n    List<NodeReport> nodeReports = listNode;\r\n    String node = nodeReports.get(0).getNodeId().getHost();\r\n    String[] nodes = new String[] { node };\r\n    AMRMClient.ContainerRequest storedContainer1 = new AMRMClient.ContainerRequest(capability, nodes, null, priority);\r\n    amClient.addContainerRequest(storedContainer1);\r\n    amClient.addContainerRequest(storedContainer1);\r\n    List<ResourceRequest> resourceAsk = new ArrayList<>();\r\n    for (ResourceRequest rr : amClient.ask) {\r\n        resourceAsk.add(rr);\r\n    }\r\n    ResourceBlacklistRequest resourceBlacklistRequest = ResourceBlacklistRequest.newInstance(new ArrayList<>(), new ArrayList<>());\r\n    int responseId = 0;\r\n    return AllocateRequest.newInstance(responseId, 0, resourceAsk, new ArrayList<>(), resourceBlacklistRequest);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "createApp",
  "errType" : null,
  "containingMethodsNum" : 22,
  "sourceCodeText" : "ApplicationAttemptId createApp(YarnClient yarnClient, MiniYARNCluster yarnCluster, Configuration conf) throws Exception\n{\r\n    ApplicationSubmissionContext appContext = yarnClient.createApplication().getApplicationSubmissionContext();\r\n    ApplicationId appId = appContext.getApplicationId();\r\n    appContext.setApplicationName(\"Test\");\r\n    Priority pri = Records.newRecord(Priority.class);\r\n    pri.setPriority(0);\r\n    appContext.setPriority(pri);\r\n    appContext.setQueue(\"default\");\r\n    ContainerLaunchContext amContainer = BuilderUtils.newContainerLaunchContext(Collections.<String, LocalResource>emptyMap(), new HashMap<String, String>(), Arrays.asList(\"sleep\", \"10000\"), new HashMap<String, ByteBuffer>(), null, new HashMap<ApplicationAccessType, String>());\r\n    appContext.setAMContainerSpec(amContainer);\r\n    appContext.setResource(Resource.newInstance(1024, 1));\r\n    SubmitApplicationRequest appRequest = Records.newRecord(SubmitApplicationRequest.class);\r\n    appRequest.setApplicationSubmissionContext(appContext);\r\n    yarnClient.submitApplication(appContext);\r\n    RMAppAttempt appAttempt = null;\r\n    ApplicationAttemptId attemptId = null;\r\n    while (true) {\r\n        ApplicationReport appReport = yarnClient.getApplicationReport(appId);\r\n        if (appReport.getYarnApplicationState() == YarnApplicationState.ACCEPTED) {\r\n            attemptId = appReport.getCurrentApplicationAttemptId();\r\n            appAttempt = yarnCluster.getResourceManager().getRMContext().getRMApps().get(attemptId.getApplicationId()).getCurrentAppAttempt();\r\n            while (true) {\r\n                if (appAttempt.getAppAttemptState() == RMAppAttemptState.LAUNCHED) {\r\n                    break;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    }\r\n    Thread.sleep(1000);\r\n    UserGroupInformation.setLoginUser(UserGroupInformation.createRemoteUser(UserGroupInformation.getCurrentUser().getUserName()));\r\n    UserGroupInformation.getCurrentUser().addToken(appAttempt.getAMRMToken());\r\n    appAttempt.getAMRMToken().setService(ClientRMProxy.getAMRMTokenService(conf));\r\n    return attemptId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    conf = new YarnConfiguration();\r\n    conf.setLong(YarnConfiguration.RM_AMRM_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS, ROLLING_INTERVAL_SEC);\r\n    conf.setLong(YarnConfiguration.RM_AM_EXPIRY_INTERVAL_MS, AM_EXPIRE_MS);\r\n    conf.setInt(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS, 1000);\r\n    conf.setInt(YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB, 512);\r\n    conf.setBoolean(YarnConfiguration.OPPORTUNISTIC_CONTAINER_ALLOCATION_ENABLED, true);\r\n    conf.setInt(YarnConfiguration.NM_OPPORTUNISTIC_CONTAINERS_MAX_QUEUE_LENGTH, 10);\r\n    conf.setLong(YarnConfiguration.NM_LOG_RETAIN_SECONDS, 1);\r\n    yarnCluster = new MiniYARNCluster(TestAMRMClient.class.getName(), nodeCount, 1, 1);\r\n    yarnCluster.init(conf);\r\n    yarnCluster.start();\r\n    yarnClient = YarnClient.createYarnClient();\r\n    yarnClient.init(conf);\r\n    yarnClient.start();\r\n    nodeReports = yarnClient.getNodeReports(NodeState.RUNNING);\r\n    priority = Priority.newInstance(1);\r\n    priority2 = Priority.newInstance(2);\r\n    priority3 = Priority.newInstance(3);\r\n    priority4 = Priority.newInstance(4);\r\n    capability = Resource.newInstance(512, 1);\r\n    node = nodeReports.get(0).getNodeId().getHost();\r\n    rack = nodeReports.get(0).getRackName();\r\n    nodes = new String[] { node };\r\n    racks = new String[] { rack };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "startApp",
  "errType" : null,
  "containingMethodsNum" : 27,
  "sourceCodeText" : "void startApp() throws Exception\n{\r\n    ApplicationSubmissionContext appContext = yarnClient.createApplication().getApplicationSubmissionContext();\r\n    ApplicationId appId = appContext.getApplicationId();\r\n    appContext.setApplicationName(\"Test\");\r\n    Priority pri = Records.newRecord(Priority.class);\r\n    pri.setPriority(0);\r\n    appContext.setPriority(pri);\r\n    appContext.setQueue(\"default\");\r\n    ContainerLaunchContext amContainer = BuilderUtils.newContainerLaunchContext(Collections.<String, LocalResource>emptyMap(), new HashMap<String, String>(), Arrays.asList(\"sleep\", \"100\"), new HashMap<String, ByteBuffer>(), null, new HashMap<ApplicationAccessType, String>());\r\n    appContext.setAMContainerSpec(amContainer);\r\n    appContext.setResource(Resource.newInstance(1024, 1));\r\n    SubmitApplicationRequest appRequest = Records.newRecord(SubmitApplicationRequest.class);\r\n    appRequest.setApplicationSubmissionContext(appContext);\r\n    yarnClient.submitApplication(appContext);\r\n    RMAppAttempt appAttempt = null;\r\n    while (true) {\r\n        ApplicationReport appReport = yarnClient.getApplicationReport(appId);\r\n        if (appReport.getYarnApplicationState() == YarnApplicationState.ACCEPTED) {\r\n            attemptId = appReport.getCurrentApplicationAttemptId();\r\n            appAttempt = yarnCluster.getResourceManager().getRMContext().getRMApps().get(attemptId.getApplicationId()).getCurrentAppAttempt();\r\n            while (true) {\r\n                if (appAttempt.getAppAttemptState() == RMAppAttemptState.LAUNCHED) {\r\n                    break;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    }\r\n    UserGroupInformation.setLoginUser(UserGroupInformation.createRemoteUser(UserGroupInformation.getCurrentUser().getUserName()));\r\n    UserGroupInformation.getCurrentUser().addToken(appAttempt.getAMRMToken());\r\n    appAttempt.getAMRMToken().setService(ClientRMProxy.getAMRMTokenService(conf));\r\n    amClient = (AMRMClientImpl<AMRMClient.ContainerRequest>) AMRMClient.createAMRMClient();\r\n    amClient.setNMTokenCache(new NMTokenCache());\r\n    Assert.assertNotSame(NMTokenCache.getSingleton(), amClient.getNMTokenCache());\r\n    amClient.init(conf);\r\n    amClient.start();\r\n    amClient.registerApplicationMaster(\"Host\", 10000, \"\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "cancelApp",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void cancelApp() throws YarnException, IOException\n{\r\n    try {\r\n        amClient.unregisterApplicationMaster(FinalApplicationStatus.SUCCEEDED, null, null);\r\n    } finally {\r\n        if (amClient != null && amClient.getServiceState() == Service.STATE.STARTED) {\r\n            amClient.stop();\r\n        }\r\n    }\r\n    yarnClient.killApplication(attemptId.getApplicationId());\r\n    attemptId = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void tearDown()\n{\r\n    if (yarnClient != null && yarnClient.getServiceState() == Service.STATE.STARTED) {\r\n        yarnClient.stop();\r\n    }\r\n    if (yarnCluster != null && yarnCluster.getServiceState() == Service.STATE.STARTED) {\r\n        yarnCluster.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testPromotionFromAcquired",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 52,
  "sourceCodeText" : "void testPromotionFromAcquired() throws YarnException, IOException\n{\r\n    assertEquals(0, amClient.ask.size());\r\n    assertEquals(0, amClient.release.size());\r\n    amClient.addContainerRequest(new AMRMClient.ContainerRequest(capability, null, null, priority2, 0, true, null, ExecutionTypeRequest.newInstance(ExecutionType.OPPORTUNISTIC, true)));\r\n    int oppContainersRequestedAny = amClient.getTable(0).get(priority2, ResourceRequest.ANY, ExecutionType.OPPORTUNISTIC, capability).remoteRequest.getNumContainers();\r\n    assertEquals(1, oppContainersRequestedAny);\r\n    assertEquals(1, amClient.ask.size());\r\n    assertEquals(0, amClient.release.size());\r\n    int allocatedContainerCount = 0;\r\n    Map<ContainerId, Container> allocatedOpportContainers = new HashMap<>();\r\n    int iterationsLeft = 50;\r\n    amClient.getNMTokenCache().clearCache();\r\n    Assert.assertEquals(0, amClient.getNMTokenCache().numberOfTokensInCache());\r\n    HashMap<String, Token> receivedNMTokens = new HashMap<>();\r\n    updateMetrics(\"Before Opp Allocation\");\r\n    while (allocatedContainerCount < oppContainersRequestedAny && iterationsLeft-- > 0) {\r\n        AllocateResponse allocResponse = amClient.allocate(0.1f);\r\n        assertEquals(0, amClient.ask.size());\r\n        assertEquals(0, amClient.release.size());\r\n        allocatedContainerCount += allocResponse.getAllocatedContainers().size();\r\n        for (Container container : allocResponse.getAllocatedContainers()) {\r\n            if (container.getExecutionType() == ExecutionType.OPPORTUNISTIC) {\r\n                allocatedOpportContainers.put(container.getId(), container);\r\n                removeCR(container);\r\n            }\r\n        }\r\n        for (NMToken token : allocResponse.getNMTokens()) {\r\n            String nodeID = token.getNodeId().toString();\r\n            receivedNMTokens.put(nodeID, token.getToken());\r\n        }\r\n        if (allocatedContainerCount < oppContainersRequestedAny) {\r\n            sleep(100);\r\n        }\r\n    }\r\n    assertEquals(oppContainersRequestedAny, allocatedContainerCount);\r\n    assertEquals(oppContainersRequestedAny, allocatedOpportContainers.size());\r\n    updateMetrics(\"After Opp Allocation / Before Promotion\");\r\n    try {\r\n        Container c = allocatedOpportContainers.values().iterator().next();\r\n        amClient.requestContainerUpdate(c, UpdateContainerRequest.newInstance(c.getVersion(), c.getId(), ContainerUpdateType.PROMOTE_EXECUTION_TYPE, null, ExecutionType.OPPORTUNISTIC));\r\n        Assert.fail(\"Should throw Exception..\");\r\n    } catch (IllegalArgumentException e) {\r\n        System.out.println(\"## \" + e.getMessage());\r\n        Assert.assertTrue(e.getMessage().contains(\"target should be GUARANTEED and original should be OPPORTUNISTIC\"));\r\n    }\r\n    Container c = allocatedOpportContainers.values().iterator().next();\r\n    amClient.requestContainerUpdate(c, UpdateContainerRequest.newInstance(c.getVersion(), c.getId(), ContainerUpdateType.PROMOTE_EXECUTION_TYPE, null, ExecutionType.GUARANTEED));\r\n    iterationsLeft = 120;\r\n    Map<ContainerId, UpdatedContainer> updatedContainers = new HashMap<>();\r\n    while (iterationsLeft-- > 0 && updatedContainers.isEmpty()) {\r\n        AllocateResponse allocResponse = amClient.allocate(0.1f);\r\n        if (allocResponse.getUpdatedContainers() != null) {\r\n            for (UpdatedContainer updatedContainer : allocResponse.getUpdatedContainers()) {\r\n                System.out.println(\"Got update..\");\r\n                updatedContainers.put(updatedContainer.getContainer().getId(), updatedContainer);\r\n            }\r\n        }\r\n        if (iterationsLeft > 0) {\r\n            sleep(100);\r\n        }\r\n    }\r\n    updateMetrics(\"After Promotion\");\r\n    assertEquals(1, updatedContainers.size());\r\n    for (ContainerId cId : allocatedOpportContainers.keySet()) {\r\n        Container orig = allocatedOpportContainers.get(cId);\r\n        UpdatedContainer updatedContainer = updatedContainers.get(cId);\r\n        assertNotNull(updatedContainer);\r\n        assertEquals(ExecutionType.GUARANTEED, updatedContainer.getContainer().getExecutionType());\r\n        assertEquals(orig.getResource(), updatedContainer.getContainer().getResource());\r\n        assertEquals(orig.getNodeId(), updatedContainer.getContainer().getNodeId());\r\n        assertEquals(orig.getVersion() + 1, updatedContainer.getContainer().getVersion());\r\n    }\r\n    assertEquals(0, amClient.ask.size());\r\n    assertEquals(0, amClient.release.size());\r\n    amClient.ask.clear();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testDemotionFromAcquired",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 52,
  "sourceCodeText" : "void testDemotionFromAcquired() throws YarnException, IOException\n{\r\n    assertEquals(0, amClient.ask.size());\r\n    assertEquals(0, amClient.release.size());\r\n    amClient.addContainerRequest(new AMRMClient.ContainerRequest(capability, null, null, priority3));\r\n    int guarContainersRequestedAny = amClient.getTable(0).get(priority3, ResourceRequest.ANY, ExecutionType.GUARANTEED, capability).remoteRequest.getNumContainers();\r\n    assertEquals(1, guarContainersRequestedAny);\r\n    assertEquals(1, amClient.ask.size());\r\n    assertEquals(0, amClient.release.size());\r\n    int allocatedContainerCount = 0;\r\n    Map<ContainerId, Container> allocatedGuarContainers = new HashMap<>();\r\n    int iterationsLeft = 50;\r\n    amClient.getNMTokenCache().clearCache();\r\n    Assert.assertEquals(0, amClient.getNMTokenCache().numberOfTokensInCache());\r\n    HashMap<String, Token> receivedNMTokens = new HashMap<>();\r\n    updateMetrics(\"Before Guar Allocation\");\r\n    while (allocatedContainerCount < guarContainersRequestedAny && iterationsLeft-- > 0) {\r\n        AllocateResponse allocResponse = amClient.allocate(0.1f);\r\n        assertEquals(0, amClient.ask.size());\r\n        assertEquals(0, amClient.release.size());\r\n        allocatedContainerCount += allocResponse.getAllocatedContainers().size();\r\n        for (Container container : allocResponse.getAllocatedContainers()) {\r\n            if (container.getExecutionType() == ExecutionType.GUARANTEED) {\r\n                allocatedGuarContainers.put(container.getId(), container);\r\n                removeCR(container);\r\n            }\r\n        }\r\n        for (NMToken token : allocResponse.getNMTokens()) {\r\n            String nodeID = token.getNodeId().toString();\r\n            receivedNMTokens.put(nodeID, token.getToken());\r\n        }\r\n        if (allocatedContainerCount < guarContainersRequestedAny) {\r\n            sleep(100);\r\n        }\r\n    }\r\n    assertEquals(guarContainersRequestedAny, allocatedContainerCount);\r\n    assertEquals(guarContainersRequestedAny, allocatedGuarContainers.size());\r\n    updateMetrics(\"After Guar Allocation / Before Demotion\");\r\n    try {\r\n        Container c = allocatedGuarContainers.values().iterator().next();\r\n        amClient.requestContainerUpdate(c, UpdateContainerRequest.newInstance(c.getVersion(), c.getId(), ContainerUpdateType.DEMOTE_EXECUTION_TYPE, null, ExecutionType.GUARANTEED));\r\n        Assert.fail(\"Should throw Exception..\");\r\n    } catch (IllegalArgumentException e) {\r\n        System.out.println(\"## \" + e.getMessage());\r\n        Assert.assertTrue(e.getMessage().contains(\"target should be OPPORTUNISTIC and original should be GUARANTEED\"));\r\n    }\r\n    Container c = allocatedGuarContainers.values().iterator().next();\r\n    amClient.requestContainerUpdate(c, UpdateContainerRequest.newInstance(c.getVersion(), c.getId(), ContainerUpdateType.DEMOTE_EXECUTION_TYPE, null, ExecutionType.OPPORTUNISTIC));\r\n    iterationsLeft = 120;\r\n    Map<ContainerId, UpdatedContainer> updatedContainers = new HashMap<>();\r\n    while (iterationsLeft-- > 0 && updatedContainers.isEmpty()) {\r\n        AllocateResponse allocResponse = amClient.allocate(0.1f);\r\n        if (allocResponse.getUpdatedContainers() != null) {\r\n            for (UpdatedContainer updatedContainer : allocResponse.getUpdatedContainers()) {\r\n                System.out.println(\"Got update..\");\r\n                updatedContainers.put(updatedContainer.getContainer().getId(), updatedContainer);\r\n            }\r\n        }\r\n        if (iterationsLeft > 0) {\r\n            sleep(100);\r\n        }\r\n    }\r\n    updateMetrics(\"After Demotion\");\r\n    assertEquals(1, updatedContainers.size());\r\n    for (ContainerId cId : allocatedGuarContainers.keySet()) {\r\n        Container orig = allocatedGuarContainers.get(cId);\r\n        UpdatedContainer updatedContainer = updatedContainers.get(cId);\r\n        assertNotNull(updatedContainer);\r\n        assertEquals(ExecutionType.OPPORTUNISTIC, updatedContainer.getContainer().getExecutionType());\r\n        assertEquals(orig.getResource(), updatedContainer.getContainer().getResource());\r\n        assertEquals(orig.getNodeId(), updatedContainer.getContainer().getNodeId());\r\n        assertEquals(orig.getVersion() + 1, updatedContainer.getContainer().getVersion());\r\n    }\r\n    assertEquals(0, amClient.ask.size());\r\n    assertEquals(0, amClient.release.size());\r\n    amClient.ask.clear();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testMixedAllocationAndRelease",
  "errType" : null,
  "containingMethodsNum" : 65,
  "sourceCodeText" : "void testMixedAllocationAndRelease() throws YarnException, IOException\n{\r\n    assertEquals(0, amClient.ask.size());\r\n    assertEquals(0, amClient.release.size());\r\n    amClient.addContainerRequest(new AMRMClient.ContainerRequest(capability, nodes, racks, priority));\r\n    amClient.addContainerRequest(new AMRMClient.ContainerRequest(capability, nodes, racks, priority));\r\n    amClient.addContainerRequest(new AMRMClient.ContainerRequest(capability, nodes, racks, priority));\r\n    amClient.addContainerRequest(new AMRMClient.ContainerRequest(capability, nodes, racks, priority));\r\n    amClient.addContainerRequest(new AMRMClient.ContainerRequest(capability, null, null, priority2, 0, true, null, ExecutionTypeRequest.newInstance(ExecutionType.OPPORTUNISTIC, true)));\r\n    amClient.addContainerRequest(new AMRMClient.ContainerRequest(capability, null, null, priority2, 0, true, null, ExecutionTypeRequest.newInstance(ExecutionType.OPPORTUNISTIC, true)));\r\n    int containersRequestedNode = amClient.getTable(0).get(priority, node, ExecutionType.GUARANTEED, capability).remoteRequest.getNumContainers();\r\n    int containersRequestedRack = amClient.getTable(0).get(priority, rack, ExecutionType.GUARANTEED, capability).remoteRequest.getNumContainers();\r\n    int containersRequestedAny = amClient.getTable(0).get(priority, ResourceRequest.ANY, ExecutionType.GUARANTEED, capability).remoteRequest.getNumContainers();\r\n    int oppContainersRequestedAny = amClient.getTable(0).get(priority2, ResourceRequest.ANY, ExecutionType.OPPORTUNISTIC, capability).remoteRequest.getNumContainers();\r\n    assertEquals(4, containersRequestedNode);\r\n    assertEquals(4, containersRequestedRack);\r\n    assertEquals(4, containersRequestedAny);\r\n    assertEquals(2, oppContainersRequestedAny);\r\n    assertEquals(4, amClient.ask.size());\r\n    assertEquals(0, amClient.release.size());\r\n    amClient.removeContainerRequest(new AMRMClient.ContainerRequest(capability, nodes, racks, priority));\r\n    amClient.removeContainerRequest(new AMRMClient.ContainerRequest(capability, nodes, racks, priority));\r\n    amClient.removeContainerRequest(new AMRMClient.ContainerRequest(capability, null, null, priority2, 0, true, null, ExecutionTypeRequest.newInstance(ExecutionType.OPPORTUNISTIC, true)));\r\n    containersRequestedNode = amClient.getTable(0).get(priority, node, ExecutionType.GUARANTEED, capability).remoteRequest.getNumContainers();\r\n    containersRequestedRack = amClient.getTable(0).get(priority, rack, ExecutionType.GUARANTEED, capability).remoteRequest.getNumContainers();\r\n    containersRequestedAny = amClient.getTable(0).get(priority, ResourceRequest.ANY, ExecutionType.GUARANTEED, capability).remoteRequest.getNumContainers();\r\n    oppContainersRequestedAny = amClient.getTable(0).get(priority2, ResourceRequest.ANY, ExecutionType.OPPORTUNISTIC, capability).remoteRequest.getNumContainers();\r\n    assertEquals(2, containersRequestedNode);\r\n    assertEquals(2, containersRequestedRack);\r\n    assertEquals(2, containersRequestedAny);\r\n    assertEquals(1, oppContainersRequestedAny);\r\n    assertEquals(4, amClient.ask.size());\r\n    assertEquals(0, amClient.release.size());\r\n    int allocatedContainerCount = 0;\r\n    int allocatedOpportContainerCount = 0;\r\n    int iterationsLeft = 50;\r\n    Set<ContainerId> releases = new TreeSet<>();\r\n    amClient.getNMTokenCache().clearCache();\r\n    Assert.assertEquals(0, amClient.getNMTokenCache().numberOfTokensInCache());\r\n    HashMap<String, Token> receivedNMTokens = new HashMap<>();\r\n    while (allocatedContainerCount < containersRequestedAny + oppContainersRequestedAny && iterationsLeft-- > 0) {\r\n        AllocateResponse allocResponse = amClient.allocate(0.1f);\r\n        assertEquals(0, amClient.ask.size());\r\n        assertEquals(0, amClient.release.size());\r\n        allocatedContainerCount += allocResponse.getAllocatedContainers().size();\r\n        for (Container container : allocResponse.getAllocatedContainers()) {\r\n            if (container.getExecutionType() == ExecutionType.OPPORTUNISTIC) {\r\n                allocatedOpportContainerCount++;\r\n            }\r\n            ContainerId rejectContainerId = container.getId();\r\n            releases.add(rejectContainerId);\r\n        }\r\n        for (NMToken token : allocResponse.getNMTokens()) {\r\n            String nodeID = token.getNodeId().toString();\r\n            receivedNMTokens.put(nodeID, token.getToken());\r\n        }\r\n        if (allocatedContainerCount < containersRequestedAny) {\r\n            sleep(100);\r\n        }\r\n    }\r\n    assertEquals(containersRequestedAny + oppContainersRequestedAny, allocatedContainerCount);\r\n    assertEquals(oppContainersRequestedAny, allocatedOpportContainerCount);\r\n    for (ContainerId rejectContainerId : releases) {\r\n        amClient.releaseAssignedContainer(rejectContainerId);\r\n    }\r\n    assertEquals(3, amClient.release.size());\r\n    assertEquals(0, amClient.ask.size());\r\n    amClient.removeContainerRequest(new AMRMClient.ContainerRequest(capability, nodes, racks, priority));\r\n    amClient.removeContainerRequest(new AMRMClient.ContainerRequest(capability, nodes, racks, priority));\r\n    amClient.removeContainerRequest(new AMRMClient.ContainerRequest(capability, nodes, racks, priority2, 0, true, null, ExecutionTypeRequest.newInstance(ExecutionType.OPPORTUNISTIC, true)));\r\n    assertEquals(4, amClient.ask.size());\r\n    iterationsLeft = 3;\r\n    while (iterationsLeft-- > 0) {\r\n        AllocateResponse allocResponse = amClient.allocate(0.1f);\r\n        assertEquals(0, allocResponse.getAllocatedContainers().size());\r\n        if (allocResponse.getCompletedContainersStatuses().size() > 0) {\r\n            for (ContainerStatus cStatus : allocResponse.getCompletedContainersStatuses()) {\r\n                if (releases.contains(cStatus.getContainerId())) {\r\n                    assertThat(cStatus.getState()).isEqualTo(ContainerState.COMPLETE);\r\n                    assertEquals(-100, cStatus.getExitStatus());\r\n                    releases.remove(cStatus.getContainerId());\r\n                }\r\n            }\r\n        }\r\n        if (iterationsLeft > 0) {\r\n            sleep(100);\r\n        }\r\n    }\r\n    assertEquals(0, amClient.ask.size());\r\n    assertEquals(0, amClient.release.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testOpportunisticAllocation",
  "errType" : null,
  "containingMethodsNum" : 22,
  "sourceCodeText" : "void testOpportunisticAllocation() throws YarnException, IOException\n{\r\n    assertEquals(0, amClient.ask.size());\r\n    assertEquals(0, amClient.release.size());\r\n    amClient.addContainerRequest(new AMRMClient.ContainerRequest(capability, null, null, priority3, 0, true, null, ExecutionTypeRequest.newInstance(ExecutionType.OPPORTUNISTIC, true)));\r\n    amClient.addContainerRequest(new AMRMClient.ContainerRequest(capability, null, null, priority3, 0, true, null, ExecutionTypeRequest.newInstance(ExecutionType.OPPORTUNISTIC, true)));\r\n    int oppContainersRequestedAny = amClient.getTable(0).get(priority3, ResourceRequest.ANY, ExecutionType.OPPORTUNISTIC, capability).remoteRequest.getNumContainers();\r\n    assertEquals(2, oppContainersRequestedAny);\r\n    assertEquals(1, amClient.ask.size());\r\n    assertEquals(0, amClient.release.size());\r\n    int allocatedContainerCount = 0;\r\n    int iterationsLeft = 10;\r\n    Set<ContainerId> releases = new TreeSet<>();\r\n    amClient.getNMTokenCache().clearCache();\r\n    Assert.assertEquals(0, amClient.getNMTokenCache().numberOfTokensInCache());\r\n    HashMap<String, Token> receivedNMTokens = new HashMap<>();\r\n    while (allocatedContainerCount < oppContainersRequestedAny && iterationsLeft-- > 0) {\r\n        AllocateResponse allocResponse = amClient.allocate(0.1f);\r\n        assertEquals(0, amClient.ask.size());\r\n        assertEquals(0, amClient.release.size());\r\n        for (Container container : allocResponse.getAllocatedContainers()) {\r\n            allocatedContainerCount++;\r\n            ContainerId rejectContainerId = container.getId();\r\n            releases.add(rejectContainerId);\r\n        }\r\n        for (NMToken token : allocResponse.getNMTokens()) {\r\n            String nodeID = token.getNodeId().toString();\r\n            receivedNMTokens.put(nodeID, token.getToken());\r\n        }\r\n        if (allocatedContainerCount < oppContainersRequestedAny) {\r\n            sleep(100);\r\n        }\r\n    }\r\n    assertEquals(oppContainersRequestedAny, allocatedContainerCount);\r\n    assertEquals(1, receivedNMTokens.values().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "removeCR",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void removeCR(Container container)\n{\r\n    List<? extends Collection<AMRMClient.ContainerRequest>> matchingRequests = amClient.getMatchingRequests(container.getPriority(), ResourceRequest.ANY, ExecutionType.OPPORTUNISTIC, container.getResource());\r\n    Set<AMRMClient.ContainerRequest> toRemove = new HashSet<>();\r\n    for (Collection<AMRMClient.ContainerRequest> rc : matchingRequests) {\r\n        for (AMRMClient.ContainerRequest cr : rc) {\r\n            toRemove.add(cr);\r\n        }\r\n    }\r\n    for (AMRMClient.ContainerRequest cr : toRemove) {\r\n        amClient.removeContainerRequest(cr);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "updateMetrics",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void updateMetrics(String msg)\n{\r\n    AbstractYarnScheduler scheduler = (AbstractYarnScheduler) yarnCluster.getResourceManager().getResourceScheduler();\r\n    availMB = scheduler.getRootQueueMetrics().getAvailableMB();\r\n    availVCores = scheduler.getRootQueueMetrics().getAvailableVirtualCores();\r\n    allocMB = scheduler.getRootQueueMetrics().getAllocatedMB();\r\n    allocVCores = scheduler.getRootQueueMetrics().getAllocatedVirtualCores();\r\n    System.out.println(\"## METRICS (\" + msg + \")==>\");\r\n    System.out.println(\" : availMB=\" + availMB + \", \" + \"availVCores=\" + availVCores + \", \" + \"allocMB=\" + allocMB + \", \" + \"allocVCores=\" + allocVCores + \", \");\r\n    System.out.println(\"<== ##\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "sleep",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void sleep(int sleepTime)\n{\r\n    try {\r\n        Thread.sleep(sleepTime);\r\n    } catch (InterruptedException e) {\r\n        e.printStackTrace();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void setup() throws IOException\n{\r\n    failoverThread = null;\r\n    keepRunning = true;\r\n    conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, true);\r\n    conf.setInt(YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS, 10);\r\n    conf.set(YarnConfiguration.RM_HA_IDS, RM1_NODE_ID + \",\" + RM2_NODE_ID);\r\n    HATestUtil.setRpcAddressForRM(RM1_NODE_ID, RM1_PORT_BASE, conf);\r\n    HATestUtil.setRpcAddressForRM(RM2_NODE_ID, RM2_PORT_BASE, conf);\r\n    conf.setLong(YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_BASE_MS, 100L);\r\n    conf.setBoolean(YarnConfiguration.YARN_MINICLUSTER_FIXED_PORTS, true);\r\n    conf.setBoolean(YarnConfiguration.YARN_MINICLUSTER_USE_RPC, true);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "teardown",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void teardown() throws Exception\n{\r\n    keepRunning = false;\r\n    if (failoverThread != null) {\r\n        failoverThread.interrupt();\r\n        try {\r\n            failoverThread.join();\r\n        } catch (InterruptedException ex) {\r\n            LOG.error(\"Error joining with failover thread\", ex);\r\n        }\r\n    }\r\n    cluster.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "getAdminService",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AdminService getAdminService(int index)\n{\r\n    return cluster.getResourceManager(index).getRMContext().getRMAdminService();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "explicitFailover",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void explicitFailover() throws IOException\n{\r\n    int activeRMIndex = cluster.getActiveRMIndex();\r\n    int newActiveRMIndex = (activeRMIndex + 1) % 2;\r\n    getAdminService(activeRMIndex).transitionToStandby(req);\r\n    getAdminService(newActiveRMIndex).transitionToActive(req);\r\n    assertEquals(\"Failover failed\", newActiveRMIndex, cluster.getActiveRMIndex());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "createAndStartYarnClient",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "YarnClient createAndStartYarnClient(Configuration conf)\n{\r\n    Configuration configuration = new YarnConfiguration(conf);\r\n    YarnClient client = YarnClient.createYarnClient();\r\n    client.init(configuration);\r\n    client.start();\r\n    return client;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "verifyConnections",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void verifyConnections() throws InterruptedException, YarnException\n{\r\n    assertTrue(\"NMs failed to connect to the RM\", cluster.waitForNodeManagersToConnect(5000));\r\n    verifyClientConnection();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "verifyClientConnection",
  "errType" : [ "TimeoutException", "YarnException|IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void verifyClientConnection() throws InterruptedException\n{\r\n    try {\r\n        GenericTestUtils.waitFor(() -> {\r\n            Configuration yarnConf = new YarnConfiguration(conf);\r\n            YarnClient client = createAndStartYarnClient(yarnConf);\r\n            try {\r\n                client.getApplications();\r\n                return true;\r\n            } catch (YarnException | IOException ex) {\r\n                LOG.error(ex.getMessage());\r\n            } finally {\r\n                client.stop();\r\n            }\r\n            return false;\r\n        }, 50, 500);\r\n    } catch (TimeoutException e) {\r\n        fail(\"Client couldn't connect to the Active RM\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "createAndStartFailoverThread",
  "errType" : [ "Exception", "InterruptedException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Thread createAndStartFailoverThread()\n{\r\n    Thread failoverThread = new Thread() {\r\n\r\n        public void run() {\r\n            keepRunning = true;\r\n            while (keepRunning) {\r\n                if (cluster.getStartFailoverFlag()) {\r\n                    try {\r\n                        explicitFailover();\r\n                        keepRunning = false;\r\n                        cluster.resetFailoverTriggeredFlag(true);\r\n                    } catch (Exception e) {\r\n                    } finally {\r\n                        keepRunning = false;\r\n                    }\r\n                }\r\n                try {\r\n                    Thread.sleep(50);\r\n                } catch (InterruptedException e) {\r\n                }\r\n            }\r\n        }\r\n    };\r\n    failoverThread.start();\r\n    return failoverThread;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "startHACluster",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void startHACluster(int numOfNMs, boolean overrideClientRMService, boolean overrideRTS, boolean overrideApplicationMasterService) throws Exception\n{\r\n    conf.setBoolean(YarnConfiguration.RECOVERY_ENABLED, true);\r\n    conf.setBoolean(YarnConfiguration.AUTO_FAILOVER_ENABLED, false);\r\n    cluster = new MiniYARNClusterForHATesting(TestRMFailover.class.getName(), 2, numOfNMs, 1, 1, false, overrideClientRMService, overrideRTS, overrideApplicationMasterService);\r\n    cluster.resetStartFailoverFlag(false);\r\n    cluster.init(conf);\r\n    cluster.start();\r\n    assertFalse(\"RM never turned active\", -1 == cluster.getActiveRMIndex());\r\n    verifyConnections();\r\n    explicitFailover();\r\n    verifyConnections();\r\n    failoverThread = createAndStartFailoverThread();\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "getActiveRM",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceManager getActiveRM()\n{\r\n    return cluster.getResourceManager(cluster.getActiveRMIndex());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "configureFairScheduler",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void configureFairScheduler(YarnConfiguration conf)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setup()\n{\r\n    QueueMetrics.clearQueueMetrics();\r\n    DefaultMetricsSystem.setMiniClusterMode(true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testClientStop",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testClientStop()\n{\r\n    Configuration conf = getConf();\r\n    ResourceManager rm = new ResourceManager();\r\n    rm.init(conf);\r\n    rm.start();\r\n    YarnClient client = YarnClient.createYarnClient();\r\n    client.init(conf);\r\n    client.start();\r\n    client.stop();\r\n    rm.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testStartTimelineClientWithErrors",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testStartTimelineClientWithErrors() throws Exception\n{\r\n    testCreateTimelineClientWithError(1.5f, true, false, new NoClassDefFoundError(\"Mock a NoClassDefFoundError\"), new CreateTimelineClientErrorVerifier(1) {\r\n\r\n        @Override\r\n        public void verifyError(Throwable e) {\r\n            Assert.assertTrue(e instanceof NoClassDefFoundError);\r\n            Assert.assertTrue(e.getMessage() != null && e.getMessage().contains(YarnConfiguration.TIMELINE_SERVICE_ENABLED));\r\n        }\r\n    });\r\n    testCreateTimelineClientWithError(1.5f, false, false, new NoClassDefFoundError(\"Mock a NoClassDefFoundError\"), new CreateTimelineClientErrorVerifier(0) {\r\n\r\n        @Override\r\n        public void verifyError(Throwable e) {\r\n            Assert.fail(\"NoClassDefFoundError while creating timeline client\" + \"should be tolerated when timeline service is disabled.\");\r\n        }\r\n    });\r\n    testCreateTimelineClientWithError(1.5f, true, true, new NoClassDefFoundError(\"Mock a NoClassDefFoundError\"), new CreateTimelineClientErrorVerifier(1) {\r\n\r\n        @Override\r\n        public void verifyError(Throwable e) {\r\n            Assert.assertTrue(e instanceof NoClassDefFoundError);\r\n            Assert.assertTrue(e.getMessage() != null && e.getMessage().contains(YarnConfiguration.TIMELINE_SERVICE_ENABLED));\r\n        }\r\n    });\r\n    testCreateTimelineClientWithError(1.5f, true, false, new IOException(\"ATS v1.5 client initialization failed.\"), new CreateTimelineClientErrorVerifier(1) {\r\n\r\n        @Override\r\n        public void verifyError(Throwable e) {\r\n            Assert.assertTrue(e instanceof IOException);\r\n        }\r\n    });\r\n    testCreateTimelineClientWithError(1.5f, true, true, new IOException(\"ATS v1.5 client initialization failed.\"), new CreateTimelineClientErrorVerifier(0) {\r\n\r\n        @Override\r\n        public void verifyError(Throwable e) {\r\n            Assert.fail(\"IOException while creating timeline client\" + \"should be tolerated when best effort is true\");\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testSubmitApplication",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testSubmitApplication() throws Exception\n{\r\n    Configuration conf = getConf();\r\n    conf.setLong(YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS, 100);\r\n    final YarnClient client = new MockYarnClient();\r\n    client.init(conf);\r\n    client.start();\r\n    YarnApplicationState[] exitStates = new YarnApplicationState[] { YarnApplicationState.ACCEPTED, YarnApplicationState.RUNNING, YarnApplicationState.FINISHED };\r\n    ApplicationSubmissionContext contextWithoutApplicationId = mock(ApplicationSubmissionContext.class);\r\n    try {\r\n        client.submitApplication(contextWithoutApplicationId);\r\n        Assert.fail(\"Should throw the ApplicationIdNotProvidedException\");\r\n    } catch (YarnException e) {\r\n        Assert.assertTrue(e instanceof ApplicationIdNotProvidedException);\r\n        Assert.assertTrue(e.getMessage().contains(\"ApplicationId is not provided in ApplicationSubmissionContext\"));\r\n    }\r\n    for (int i = 0; i < exitStates.length; ++i) {\r\n        ApplicationSubmissionContext context = mock(ApplicationSubmissionContext.class);\r\n        ApplicationId applicationId = ApplicationId.newInstance(System.currentTimeMillis(), i);\r\n        when(context.getApplicationId()).thenReturn(applicationId);\r\n        ((MockYarnClient) client).setYarnApplicationState(exitStates[i]);\r\n        client.submitApplication(context);\r\n        verify(((MockYarnClient) client).mockReport, times(4 * i + 4)).getYarnApplicationState();\r\n    }\r\n    client.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testSubmitApplicationInterrupted",
  "errType" : [ "YarnException|IOException", "InterruptedException" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testSubmitApplicationInterrupted() throws IOException\n{\r\n    Configuration conf = getConf();\r\n    int pollIntervalMs = 1000;\r\n    conf.setLong(YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS, pollIntervalMs);\r\n    try (YarnClient client = new MockYarnClient()) {\r\n        client.init(conf);\r\n        client.start();\r\n        final class SubmitThread extends Thread {\r\n\r\n            private boolean isInterrupted = false;\r\n\r\n            @Override\r\n            public void run() {\r\n                ApplicationSubmissionContext context = mock(ApplicationSubmissionContext.class);\r\n                ApplicationId applicationId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n                when(context.getApplicationId()).thenReturn(applicationId);\r\n                ((MockYarnClient) client).setYarnApplicationState(YarnApplicationState.NEW);\r\n                try {\r\n                    client.submitApplication(context);\r\n                } catch (YarnException | IOException e) {\r\n                    if (e instanceof YarnException && e.getCause() != null && e.getCause() instanceof InterruptedException) {\r\n                        isInterrupted = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        SubmitThread appSubmitThread = new SubmitThread();\r\n        appSubmitThread.start();\r\n        try {\r\n            while (appSubmitThread.getState() != State.TIMED_WAITING) {\r\n                Thread.sleep(pollIntervalMs / 2);\r\n            }\r\n            appSubmitThread.interrupt();\r\n            appSubmitThread.join();\r\n        } catch (InterruptedException e) {\r\n        }\r\n        Assert.assertTrue(\"Expected an InterruptedException wrapped inside a \" + \"YarnException\", appSubmitThread.isInterrupted);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testSubmitIncorrectQueueToCapacityScheduler",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void testSubmitIncorrectQueueToCapacityScheduler() throws IOException\n{\r\n    MiniYARNCluster cluster = new MiniYARNCluster(\"testMRAMTokens\", 1, 1, 1);\r\n    YarnClient rmClient = null;\r\n    try {\r\n        YarnConfiguration conf = new YarnConfiguration();\r\n        conf.set(YarnConfiguration.RM_SCHEDULER, CapacityScheduler.class.getName());\r\n        cluster.init(conf);\r\n        cluster.start();\r\n        final Configuration yarnConf = cluster.getConfig();\r\n        rmClient = YarnClient.createYarnClient();\r\n        rmClient.init(yarnConf);\r\n        rmClient.start();\r\n        YarnClientApplication newApp = rmClient.createApplication();\r\n        ApplicationId appId = newApp.getNewApplicationResponse().getApplicationId();\r\n        ApplicationSubmissionContext appContext = Records.newRecord(ApplicationSubmissionContext.class);\r\n        appContext.setApplicationId(appId);\r\n        appContext.setApplicationName(\"test\");\r\n        appContext.setQueue(\"nonexist\");\r\n        ContainerLaunchContext amContainer = Records.newRecord(ContainerLaunchContext.class);\r\n        appContext.setAMContainerSpec(amContainer);\r\n        appContext.setResource(Resource.newInstance(1024, 1));\r\n        rmClient.submitApplication(appContext);\r\n        Assert.fail(\"Job submission should have thrown an exception\");\r\n    } catch (YarnException e) {\r\n        Assert.assertTrue(e.getMessage().contains(\"Failed to submit\"));\r\n    } finally {\r\n        if (rmClient != null) {\r\n            rmClient.stop();\r\n        }\r\n        cluster.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testKillApplication",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testKillApplication() throws Exception\n{\r\n    MockRM rm = new MockRM();\r\n    rm.start();\r\n    RMApp app = MockRMAppSubmitter.submitWithMemory(2000, rm);\r\n    @SuppressWarnings(\"resource\")\r\n    final YarnClient client = new MockYarnClient();\r\n    client.init(getConf());\r\n    client.start();\r\n    client.killApplication(app.getApplicationId());\r\n    verify(((MockYarnClient) client).getRMClient(), times(2)).forceKillApplication(any(KillApplicationRequest.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testApplicationType",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testApplicationType() throws Exception\n{\r\n    GenericTestUtils.setRootLogLevel(Level.DEBUG);\r\n    MockRM rm = new MockRM();\r\n    rm.start();\r\n    RMApp app = MockRMAppSubmitter.submitWithMemory(2000, rm);\r\n    RMApp app1 = MockRMAppSubmitter.submit(rm, MockRMAppSubmissionData.Builder.createWithMemory(200, rm).withAppName(\"name\").withUser(\"user\").withAcls(new HashMap<>()).withUnmanagedAM(false).withQueue(\"default\").withMaxAppAttempts(-1).withCredentials(null).withAppType(\"MAPREDUCE\").build());\r\n    Assert.assertEquals(\"YARN\", app.getApplicationType());\r\n    Assert.assertEquals(\"MAPREDUCE\", app1.getApplicationType());\r\n    rm.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testApplicationTypeLimit",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testApplicationTypeLimit() throws Exception\n{\r\n    GenericTestUtils.setRootLogLevel(Level.DEBUG);\r\n    MockRM rm = new MockRM();\r\n    rm.start();\r\n    RMApp app1 = MockRMAppSubmitter.submit(rm, MockRMAppSubmissionData.Builder.createWithMemory(200, rm).withAppName(\"name\").withUser(\"user\").withAcls(new HashMap<>()).withUnmanagedAM(false).withQueue(\"default\").withMaxAppAttempts(-1).withCredentials(null).withAppType(\"MAPREDUCE-LENGTH-IS-20\").build());\r\n    Assert.assertEquals(\"MAPREDUCE-LENGTH-IS-\", app1.getApplicationType());\r\n    rm.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testGetApplications",
  "errType" : null,
  "containingMethodsNum" : 23,
  "sourceCodeText" : "void testGetApplications() throws YarnException, IOException\n{\r\n    final YarnClient client = new MockYarnClient();\r\n    client.init(getConf());\r\n    client.start();\r\n    List<ApplicationReport> expectedReports = ((MockYarnClient) client).getReports();\r\n    List<ApplicationReport> reports = client.getApplications();\r\n    assertThat(reports).isEqualTo(expectedReports);\r\n    Set<String> appTypes = new HashSet<>();\r\n    appTypes.add(\"YARN\");\r\n    appTypes.add(\"NON-YARN\");\r\n    reports = client.getApplications(appTypes, null);\r\n    assertThat(reports).hasSize(2);\r\n    Assert.assertTrue((reports.get(0).getApplicationType().equals(\"YARN\") && reports.get(1).getApplicationType().equals(\"NON-YARN\")) || (reports.get(1).getApplicationType().equals(\"YARN\") && reports.get(0).getApplicationType().equals(\"NON-YARN\")));\r\n    for (ApplicationReport report : reports) {\r\n        Assert.assertTrue(expectedReports.contains(report));\r\n    }\r\n    EnumSet<YarnApplicationState> appStates = EnumSet.noneOf(YarnApplicationState.class);\r\n    appStates.add(YarnApplicationState.FINISHED);\r\n    appStates.add(YarnApplicationState.FAILED);\r\n    reports = client.getApplications(null, appStates);\r\n    assertThat(reports).hasSize(2);\r\n    Assert.assertTrue((reports.get(0).getApplicationType().equals(\"NON-YARN\") && reports.get(1).getApplicationType().equals(\"NON-MAPREDUCE\")) || (reports.get(1).getApplicationType().equals(\"NON-YARN\") && reports.get(0).getApplicationType().equals(\"NON-MAPREDUCE\")));\r\n    for (ApplicationReport report : reports) {\r\n        Assert.assertTrue(expectedReports.contains(report));\r\n    }\r\n    reports = client.getApplications(appTypes, appStates);\r\n    Assert.assertEquals(1, reports.size());\r\n    Assert.assertEquals(\"NON-YARN\", reports.get(0).getApplicationType());\r\n    for (ApplicationReport report : reports) {\r\n        Assert.assertTrue(expectedReports.contains(report));\r\n    }\r\n    client.stop();\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testGetApplicationAttempts",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testGetApplicationAttempts() throws YarnException, IOException\n{\r\n    final YarnClient client = new MockYarnClient();\r\n    client.init(getConf());\r\n    client.start();\r\n    ApplicationId applicationId = ApplicationId.newInstance(1234, 5);\r\n    List<ApplicationAttemptReport> reports = client.getApplicationAttempts(applicationId);\r\n    Assert.assertNotNull(reports);\r\n    assertThat(reports.get(0).getApplicationAttemptId()).isEqualTo(ApplicationAttemptId.newInstance(applicationId, 1));\r\n    assertThat(reports.get(1).getApplicationAttemptId()).isEqualTo(ApplicationAttemptId.newInstance(applicationId, 2));\r\n    client.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testGetApplicationAttempt",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testGetApplicationAttempt() throws YarnException, IOException\n{\r\n    Configuration conf = new Configuration();\r\n    final YarnClient client = new MockYarnClient();\r\n    client.init(conf);\r\n    client.start();\r\n    List<ApplicationReport> expectedReports = ((MockYarnClient) client).getReports();\r\n    ApplicationId applicationId = ApplicationId.newInstance(1234, 5);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(applicationId, 1);\r\n    ApplicationAttemptReport report = client.getApplicationAttemptReport(appAttemptId);\r\n    Assert.assertNotNull(report);\r\n    assertThat(report.getApplicationAttemptId().toString()).isEqualTo(expectedReports.get(0).getCurrentApplicationAttemptId().toString());\r\n    client.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testGetContainers",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testGetContainers() throws YarnException, IOException\n{\r\n    Configuration conf = getConf();\r\n    conf.setBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED, true);\r\n    final YarnClient client = new MockYarnClient();\r\n    client.init(conf);\r\n    client.start();\r\n    ApplicationId applicationId = ApplicationId.newInstance(1234, 5);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(applicationId, 1);\r\n    List<ContainerReport> reports = client.getContainers(appAttemptId);\r\n    Assert.assertNotNull(reports);\r\n    assertThat(reports.get(0).getContainerId()).isEqualTo((ContainerId.newContainerId(appAttemptId, 1)));\r\n    assertThat(reports.get(1).getContainerId()).isEqualTo((ContainerId.newContainerId(appAttemptId, 2)));\r\n    assertThat(reports.get(2).getContainerId()).isEqualTo((ContainerId.newContainerId(appAttemptId, 3)));\r\n    Assert.assertEquals(ContainerState.RUNNING, (reports.get(0).getContainerState()));\r\n    Assert.assertEquals(ContainerState.RUNNING, (reports.get(1).getContainerState()));\r\n    Assert.assertEquals(ContainerState.COMPLETE, (reports.get(2).getContainerState()));\r\n    client.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testGetContainersOnAHSFail",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testGetContainersOnAHSFail() throws YarnException, IOException\n{\r\n    Configuration conf = getConf();\r\n    conf.setBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED, true);\r\n    final YarnClient client = new MockYarnClient() {\r\n\r\n        @Override\r\n        public List<ContainerReport> getContainers(ApplicationAttemptId appAttemptId) throws YarnException, IOException {\r\n            return getContainersOnAHSFail(appAttemptId);\r\n        }\r\n    };\r\n    client.init(conf);\r\n    client.start();\r\n    ApplicationId applicationId = ApplicationId.newInstance(1234, 5);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(applicationId, 1);\r\n    List<ContainerReport> reports = client.getContainers(appAttemptId);\r\n    Assert.assertNotNull(reports);\r\n    Assert.assertTrue(reports.size() == 2);\r\n    assertThat(reports.get(0).getContainerId()).isEqualTo((ContainerId.newContainerId(appAttemptId, 1)));\r\n    assertThat(reports.get(1).getContainerId()).isEqualTo((ContainerId.newContainerId(appAttemptId, 2)));\r\n    Assert.assertEquals(ContainerState.RUNNING, (reports.get(0).getContainerState()));\r\n    Assert.assertEquals(ContainerState.RUNNING, (reports.get(1).getContainerState()));\r\n    client.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testGetContainerReport",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testGetContainerReport() throws YarnException, IOException\n{\r\n    Configuration conf = getConf();\r\n    conf.setBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED, true);\r\n    final YarnClient client = new MockYarnClient();\r\n    client.init(conf);\r\n    client.start();\r\n    List<ApplicationReport> expectedReports = ((MockYarnClient) client).getReports();\r\n    ApplicationId applicationId = ApplicationId.newInstance(1234, 5);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(applicationId, 1);\r\n    ContainerId containerId = ContainerId.newContainerId(appAttemptId, 1);\r\n    ContainerReport report = client.getContainerReport(containerId);\r\n    Assert.assertNotNull(report);\r\n    assertThat(report.getContainerId().toString()).isEqualTo((ContainerId.newContainerId(expectedReports.get(0).getCurrentApplicationAttemptId(), 1)).toString());\r\n    containerId = ContainerId.newContainerId(appAttemptId, 3);\r\n    report = client.getContainerReport(containerId);\r\n    Assert.assertNotNull(report);\r\n    assertThat(report.getContainerId().toString()).isEqualTo((ContainerId.newContainerId(expectedReports.get(0).getCurrentApplicationAttemptId(), 3)).toString());\r\n    Assert.assertNotNull(report.getExecutionType());\r\n    client.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testGetLabelsToNodes",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testGetLabelsToNodes() throws YarnException, IOException\n{\r\n    final YarnClient client = new MockYarnClient();\r\n    client.init(getConf());\r\n    client.start();\r\n    Map<String, Set<NodeId>> expectedLabelsToNodes = ((MockYarnClient) client).getLabelsToNodesMap();\r\n    Map<String, Set<NodeId>> labelsToNodes = client.getLabelsToNodes();\r\n    assertThat(labelsToNodes).isEqualTo(expectedLabelsToNodes);\r\n    assertThat(labelsToNodes).hasSize(3);\r\n    Set<String> setLabels = new HashSet<>(Arrays.asList(\"x\", \"z\"));\r\n    expectedLabelsToNodes = ((MockYarnClient) client).getLabelsToNodesMap(setLabels);\r\n    labelsToNodes = client.getLabelsToNodes(setLabels);\r\n    assertThat(labelsToNodes).isEqualTo(expectedLabelsToNodes);\r\n    assertThat(labelsToNodes).hasSize(2);\r\n    client.stop();\r\n    client.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testGetNodesToLabels",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testGetNodesToLabels() throws YarnException, IOException\n{\r\n    final YarnClient client = new MockYarnClient();\r\n    client.init(getConf());\r\n    client.start();\r\n    Map<NodeId, Set<String>> expectedNodesToLabels = ((MockYarnClient) client).getNodeToLabelsMap();\r\n    Map<NodeId, Set<String>> nodesToLabels = client.getNodeToLabels();\r\n    assertThat(nodesToLabels).isEqualTo(expectedNodesToLabels);\r\n    assertThat(nodesToLabels).hasSize(1);\r\n    client.stop();\r\n    client.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testAMMRTokens",
  "errType" : null,
  "containingMethodsNum" : 22,
  "sourceCodeText" : "void testAMMRTokens() throws Exception\n{\r\n    MiniYARNCluster cluster = new MiniYARNCluster(\"testMRAMTokens\", 1, 1, 1);\r\n    YarnClient rmClient = null;\r\n    try {\r\n        cluster.init(getConf());\r\n        cluster.start();\r\n        final Configuration yarnConf = cluster.getConfig();\r\n        rmClient = YarnClient.createYarnClient();\r\n        rmClient.init(yarnConf);\r\n        rmClient.start();\r\n        ApplicationId appId = createApp(rmClient, false);\r\n        waitTillAccepted(rmClient, appId, false);\r\n        Assert.assertNull(rmClient.getAMRMToken(appId));\r\n        appId = createApp(rmClient, true);\r\n        waitTillAccepted(rmClient, appId, true);\r\n        long start = System.currentTimeMillis();\r\n        while (rmClient.getAMRMToken(appId) == null) {\r\n            if (System.currentTimeMillis() - start > 20 * 1000) {\r\n                Assert.fail(\"AMRM token is null\");\r\n            }\r\n            Thread.sleep(100);\r\n        }\r\n        Assert.assertNotNull(rmClient.getAMRMToken(appId));\r\n        UserGroupInformation other = UserGroupInformation.createUserForTesting(\"foo\", new String[] {});\r\n        appId = other.doAs(new PrivilegedExceptionAction<ApplicationId>() {\r\n\r\n            @Override\r\n            public ApplicationId run() throws Exception {\r\n                YarnClient rmClient = YarnClient.createYarnClient();\r\n                rmClient.init(yarnConf);\r\n                rmClient.start();\r\n                ApplicationId appId = createApp(rmClient, true);\r\n                waitTillAccepted(rmClient, appId, true);\r\n                long start = System.currentTimeMillis();\r\n                while (rmClient.getAMRMToken(appId) == null) {\r\n                    if (System.currentTimeMillis() - start > 20 * 1000) {\r\n                        Assert.fail(\"AMRM token is null\");\r\n                    }\r\n                    Thread.sleep(100);\r\n                }\r\n                Assert.assertNotNull(rmClient.getAMRMToken(appId));\r\n                return appId;\r\n            }\r\n        });\r\n        Assert.assertNull(rmClient.getAMRMToken(appId));\r\n    } finally {\r\n        if (rmClient != null) {\r\n            rmClient.stop();\r\n        }\r\n        cluster.stop();\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "createApp",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "ApplicationId createApp(YarnClient rmClient, boolean unmanaged) throws Exception\n{\r\n    YarnClientApplication newApp = rmClient.createApplication();\r\n    ApplicationId appId = newApp.getNewApplicationResponse().getApplicationId();\r\n    ApplicationSubmissionContext appContext = Records.newRecord(ApplicationSubmissionContext.class);\r\n    appContext.setApplicationId(appId);\r\n    appContext.setApplicationName(\"test\");\r\n    Priority pri = Records.newRecord(Priority.class);\r\n    pri.setPriority(1);\r\n    appContext.setPriority(pri);\r\n    appContext.setQueue(\"default\");\r\n    ContainerLaunchContext amContainer = Records.newRecord(ContainerLaunchContext.class);\r\n    appContext.setAMContainerSpec(amContainer);\r\n    appContext.setResource(Resource.newInstance(1024, 1));\r\n    appContext.setUnmanagedAM(unmanaged);\r\n    rmClient.submitApplication(appContext);\r\n    return appId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "waitTillAccepted",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void waitTillAccepted(YarnClient rmClient, ApplicationId appId, boolean unmanagedApplication) throws Exception\n{\r\n    long start = System.currentTimeMillis();\r\n    ApplicationReport report = rmClient.getApplicationReport(appId);\r\n    while (YarnApplicationState.ACCEPTED != report.getYarnApplicationState()) {\r\n        if (System.currentTimeMillis() - start > 20 * 1000) {\r\n            throw new Exception(\"App '\" + appId + \"' time out, failed to reach ACCEPTED state\");\r\n        }\r\n        Thread.sleep(200);\r\n        report = rmClient.getApplicationReport(appId);\r\n    }\r\n    Assert.assertEquals(unmanagedApplication, report.isUnmanagedApp());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testShouldNotRetryForeverForNonNetworkExceptions",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testShouldNotRetryForeverForNonNetworkExceptions() throws Exception\n{\r\n    YarnConfiguration conf = getConf();\r\n    conf.setInt(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS, -1);\r\n    ResourceManager rm = null;\r\n    YarnClient yarnClient = null;\r\n    try {\r\n        rm = new ResourceManager();\r\n        rm.init(conf);\r\n        rm.start();\r\n        yarnClient = YarnClient.createYarnClient();\r\n        yarnClient.init(conf);\r\n        yarnClient.start();\r\n        ApplicationId appId = ApplicationId.newInstance(1430126768L, 10645);\r\n        yarnClient.getApplicationReport(appId);\r\n    } finally {\r\n        if (yarnClient != null) {\r\n            yarnClient.stop();\r\n        }\r\n        if (rm != null) {\r\n            rm.stop();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testSignalContainer",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testSignalContainer() throws Exception\n{\r\n    @SuppressWarnings(\"resource\")\r\n    final YarnClient client = new MockYarnClient();\r\n    client.init(getConf());\r\n    client.start();\r\n    ApplicationId applicationId = ApplicationId.newInstance(1234, 5);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(applicationId, 1);\r\n    ContainerId containerId = ContainerId.newContainerId(appAttemptId, 1);\r\n    SignalContainerCommand command = SignalContainerCommand.OUTPUT_THREAD_DUMP;\r\n    client.signalToContainer(containerId, command);\r\n    final ArgumentCaptor<SignalContainerRequest> signalReqCaptor = ArgumentCaptor.forClass(SignalContainerRequest.class);\r\n    verify(((MockYarnClient) client).getRMClient()).signalToContainer(signalReqCaptor.capture());\r\n    SignalContainerRequest request = signalReqCaptor.getValue();\r\n    Assert.assertEquals(containerId, request.getContainerId());\r\n    Assert.assertEquals(command, request.getCommand());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "testCreateTimelineClientWithError",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void testCreateTimelineClientWithError(float timelineVersion, boolean timelineServiceEnabled, boolean timelineClientBestEffort, Throwable mockErr, CreateTimelineClientErrorVerifier errVerifier) throws Exception\n{\r\n    Configuration conf = getConf();\r\n    conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, timelineServiceEnabled);\r\n    conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_CLIENT_BEST_EFFORT, timelineClientBestEffort);\r\n    conf.setFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION, timelineVersion);\r\n    conf.set(YarnConfiguration.TIMELINE_HTTP_AUTH_TYPE, KerberosAuthenticationHandler.TYPE);\r\n    MockYarnClient client = new MockYarnClient();\r\n    MockYarnClient spyClient = spy(client);\r\n    when(spyClient.createTimelineClient()).thenThrow(mockErr);\r\n    CreateTimelineClientErrorVerifier verifier = spy(errVerifier);\r\n    spyClient.init(conf);\r\n    spyClient.start();\r\n    ApplicationSubmissionContext context = mock(ApplicationSubmissionContext.class);\r\n    ContainerLaunchContext containerContext = mock(ContainerLaunchContext.class);\r\n    ApplicationId applicationId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    when(containerContext.getTokens()).thenReturn(null);\r\n    when(context.getApplicationId()).thenReturn(applicationId);\r\n    when(spyClient.isSecurityEnabled()).thenReturn(true);\r\n    when(context.getAMContainerSpec()).thenReturn(containerContext);\r\n    try {\r\n        spyClient.submitApplication(context);\r\n    } catch (Throwable e) {\r\n        verifier.verifyError(e);\r\n    } finally {\r\n        verify(verifier, times(verifier.getExpectedTimes())).verifyError(any(Throwable.class));\r\n        spyClient.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setup()\n{\r\n    sysOutStream = new ByteArrayOutputStream();\r\n    sysOut = spy(new PrintStream(sysOutStream));\r\n    sysErrStream = new ByteArrayOutputStream();\r\n    sysErr = spy(new PrintStream(sysErrStream));\r\n    System.setOut(sysOut);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testGetClusterNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testGetClusterNodeLabels() throws Exception\n{\r\n    when(client.getClusterNodeLabels()).thenReturn(Arrays.asList(NodeLabel.newInstance(\"label1\"), NodeLabel.newInstance(\"label2\")));\r\n    ClusterCLI cli = createAndGetClusterCLI();\r\n    int rc = cli.run(new String[] { ClusterCLI.CMD, \"-\" + ClusterCLI.LIST_LABELS_CMD });\r\n    assertEquals(0, rc);\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    PrintWriter pw = new PrintWriter(baos);\r\n    pw.print(\"Node Labels: <label1:exclusivity=true>,<label2:exclusivity=true>\");\r\n    pw.close();\r\n    verify(sysOut).println(baos.toString(\"UTF-8\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testGetClusterNodeAttributes",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testGetClusterNodeAttributes() throws Exception\n{\r\n    when(client.getClusterAttributes()).thenReturn(ImmutableSet.of(NodeAttributeInfo.newInstance(NodeAttributeKey.newInstance(\"GPU\"), NodeAttributeType.STRING), NodeAttributeInfo.newInstance(NodeAttributeKey.newInstance(\"CPU\"), NodeAttributeType.STRING)));\r\n    ClusterCLI cli = createAndGetClusterCLI();\r\n    int rc = cli.run(new String[] { ClusterCLI.CMD, \"-\" + ClusterCLI.LIST_CLUSTER_ATTRIBUTES });\r\n    assertEquals(0, rc);\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    PrintWriter pw = new PrintWriter(baos);\r\n    pw.println(\"rm.yarn.io/GPU(STRING)\");\r\n    pw.println(\"rm.yarn.io/CPU(STRING)\");\r\n    pw.close();\r\n    verify(sysOut).println(baos.toString(\"UTF-8\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testGetClusterNodeLabelsWithLocalAccess",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testGetClusterNodeLabelsWithLocalAccess() throws Exception\n{\r\n    when(client.getClusterNodeLabels()).thenReturn(Arrays.asList(NodeLabel.newInstance(\"remote1\"), NodeLabel.newInstance(\"remote2\")));\r\n    ClusterCLI cli = createAndGetClusterCLI();\r\n    ClusterCLI.localNodeLabelsManager = mock(CommonNodeLabelsManager.class);\r\n    when(ClusterCLI.localNodeLabelsManager.getClusterNodeLabels()).thenReturn(Arrays.asList(NodeLabel.newInstance(\"local1\"), NodeLabel.newInstance(\"local2\")));\r\n    int rc = cli.run(new String[] { ClusterCLI.CMD, \"-\" + ClusterCLI.LIST_LABELS_CMD, \"-\" + ClusterCLI.DIRECTLY_ACCESS_NODE_LABEL_STORE });\r\n    assertEquals(0, rc);\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    PrintWriter pw = new PrintWriter(baos);\r\n    pw.print(\"Node Labels: <local1:exclusivity=true>,<local2:exclusivity=true>\");\r\n    pw.close();\r\n    verify(sysOut).println(baos.toString(\"UTF-8\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testGetEmptyClusterNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testGetEmptyClusterNodeLabels() throws Exception\n{\r\n    when(client.getClusterNodeLabels()).thenReturn(new ArrayList<NodeLabel>());\r\n    ClusterCLI cli = createAndGetClusterCLI();\r\n    int rc = cli.run(new String[] { ClusterCLI.CMD, \"-\" + ClusterCLI.LIST_LABELS_CMD });\r\n    assertEquals(0, rc);\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    PrintWriter pw = new PrintWriter(baos);\r\n    pw.print(\"Node Labels: \");\r\n    pw.close();\r\n    verify(sysOut).println(baos.toString(\"UTF-8\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "testHelp",
  "errType" : null,
  "containingMethodsNum" : 30,
  "sourceCodeText" : "void testHelp() throws Exception\n{\r\n    ClusterCLI cli = createAndGetClusterCLI();\r\n    int rc = cli.run(new String[] { \"cluster\", \"--help\" });\r\n    assertEquals(0, rc);\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    PrintWriter pw = new PrintWriter(baos);\r\n    pw.println(\"usage: yarn cluster\");\r\n    pw.println(\" -dnl,--directly-access-node-label-store   This is DEPRECATED, will be\");\r\n    pw.println(\"                                           removed in future releases.\");\r\n    pw.println(\"                                           Directly access node label\");\r\n    pw.println(\"                                           store, with this option, all\");\r\n    pw.println(\"                                           node label related operations\");\r\n    pw.println(\"                                           will NOT connect RM. Instead,\");\r\n    pw.println(\"                                           they will access/modify stored\");\r\n    pw.println(\"                                           node labels directly. By\");\r\n    pw.println(\"                                           default, it is false (access\");\r\n    pw.println(\"                                           via RM). AND PLEASE NOTE: if\");\r\n    pw.println(\"                                           you configured\");\r\n    pw.println(\"                                           yarn.node-labels.fs-store.root-\");\r\n    pw.println(\"                                           dir to a local directory\");\r\n    pw.println(\"                                           (instead of NFS or HDFS), this\");\r\n    pw.println(\"                                           option will only work when the\");\r\n    pw.println(\"                                           command run on the machine\");\r\n    pw.println(\"                                           where RM is running. Also, this\");\r\n    pw.println(\"                                           option is UNSTABLE, could be\");\r\n    pw.println(\"                                           removed in future releases.\");\r\n    pw.println(\" -h,--help                                 Displays help for all commands.\");\r\n    pw.println(\" -lna,--list-node-attributes               List cluster node-attribute\");\r\n    pw.println(\"                                           collection\");\r\n    pw.println(\" -lnl,--list-node-labels                   List cluster node-label\");\r\n    pw.println(\"                                           collection\");\r\n    pw.close();\r\n    verify(sysOut).println(baos.toString(\"UTF-8\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "createAndGetClusterCLI",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ClusterCLI createAndGetClusterCLI()\n{\r\n    ClusterCLI cli = new ClusterCLI() {\r\n\r\n        @Override\r\n        protected void createAndStartYarnClient() {\r\n        }\r\n    };\r\n    cli.setClient(client);\r\n    cli.setSysOutPrintStream(sysOut);\r\n    cli.setSysErrPrintStream(sysErr);\r\n    return cli;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "setUpResourceManager",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void setUpResourceManager() throws InterruptedException\n{\r\n    conf = new YarnConfiguration();\r\n    resourceManager = new ResourceManager() {\r\n\r\n        @Override\r\n        protected void doSecureLogin() throws IOException {\r\n        }\r\n    };\r\n    CountDownLatch rmStartedSignal = new CountDownLatch(1);\r\n    ServiceStateChangeListener rmStateChangeListener = new ServiceStateChangeListener() {\r\n\r\n        @Override\r\n        public void stateChanged(Service service) {\r\n            if (service.getServiceState() == STATE.STARTED) {\r\n                rmStartedSignal.countDown();\r\n            }\r\n        }\r\n    };\r\n    resourceManager.registerServiceListener(rmStateChangeListener);\r\n    resourceManager.init(conf);\r\n    new Thread() {\r\n\r\n        public void run() {\r\n            resourceManager.start();\r\n        }\r\n    }.start();\r\n    boolean rmStarted = rmStartedSignal.await(60000L, TimeUnit.MILLISECONDS);\r\n    Assert.assertTrue(\"ResourceManager failed to start up.\", rmStarted);\r\n    LOG.info(\"ResourceManager RMAdmin address: \" + conf.get(YarnConfiguration.RM_ADMIN_ADDRESS));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "setUpConf",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setUpConf()\n{\r\n    super.conf = this.conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "tearDownResourceManager",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDownResourceManager() throws InterruptedException\n{\r\n    if (resourceManager != null) {\r\n        LOG.info(\"Stopping ResourceManager...\");\r\n        resourceManager.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\test\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "getTool",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Tool getTool(PrintStream o)\n{\r\n    return new GetGroupsForTesting(conf, o);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
} ]