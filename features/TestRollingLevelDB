[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    lfs = FileSystem.getLocal(conf);\r\n    File fsPath = new File(\"target\", this.getClass().getSimpleName() + \"-tmpDir\").getAbsoluteFile();\r\n    conf.set(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_PATH, fsPath.getAbsolutePath());\r\n    lfs.delete(new Path(fsPath.getAbsolutePath()), true);\r\n    rollingLevelDB = new MyRollingLevelDB();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testInsertAfterRollPeriodRollsDB",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testInsertAfterRollPeriodRollsDB() throws Exception\n{\r\n    rollingLevelDB.init(conf);\r\n    long now = rollingLevelDB.currentTimeMillis();\r\n    DB db = rollingLevelDB.getDBForStartTime(now);\r\n    long startTime = rollingLevelDB.getStartTimeFor(db);\r\n    Assert.assertEquals(\"Received level db for incorrect start time\", rollingLevelDB.computeCurrentCheckMillis(now), startTime);\r\n    now = rollingLevelDB.getNextRollingTimeMillis();\r\n    rollingLevelDB.setCurrentTimeMillis(now);\r\n    db = rollingLevelDB.getDBForStartTime(now);\r\n    startTime = rollingLevelDB.getStartTimeFor(db);\r\n    Assert.assertEquals(\"Received level db for incorrect start time\", rollingLevelDB.computeCurrentCheckMillis(now), startTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testInsertForPreviousPeriodAfterRollPeriodRollsDB",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testInsertForPreviousPeriodAfterRollPeriodRollsDB() throws Exception\n{\r\n    rollingLevelDB.init(conf);\r\n    long now = rollingLevelDB.currentTimeMillis();\r\n    now = rollingLevelDB.computeCurrentCheckMillis(now);\r\n    rollingLevelDB.setCurrentTimeMillis(now);\r\n    DB db = rollingLevelDB.getDBForStartTime(now - 1);\r\n    long startTime = rollingLevelDB.getStartTimeFor(db);\r\n    Assert.assertEquals(\"Received level db for incorrect start time\", rollingLevelDB.computeCurrentCheckMillis(now - 1), startTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "prepareStore",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void prepareStore() throws Exception\n{\r\n    store = createStore(SCALE);\r\n    TimelineEntities entities = new TimelineEntities();\r\n    entities.addEntity(createApplicationTimelineEntity(ApplicationId.newInstance(0, SCALE + 1), true, true, false, false, YarnApplicationState.FINISHED));\r\n    entities.addEntity(createApplicationTimelineEntity(ApplicationId.newInstance(0, SCALE + 2), true, false, true, false, YarnApplicationState.FINISHED));\r\n    store.put(entities);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "createStore",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineStore createStore(int scale) throws Exception\n{\r\n    TimelineStore store = new MemoryTimelineStore();\r\n    prepareTimelineStore(store, scale);\r\n    return store;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    TimelineACLsManager aclsManager = new TimelineACLsManager(new YarnConfiguration());\r\n    aclsManager.setTimelineStore(store);\r\n    TimelineDataManager dataManager = new TimelineDataManager(store, aclsManager);\r\n    dataManager.init(conf);\r\n    ApplicationACLsManager appAclsManager = new ApplicationACLsManager(conf);\r\n    historyManager = new ApplicationHistoryManagerOnTimelineStore(dataManager, appAclsManager);\r\n    historyManager.init(conf);\r\n    historyManager.start();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown()\n{\r\n    if (historyManager != null) {\r\n        historyManager.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "callers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Collection<Object[]> callers()\n{\r\n    return Arrays.asList(new Object[][] { { \"\" }, { \"user1\" }, { \"user2\" }, { \"user3\" }, { \"admin\" } });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "prepareTimelineStore",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void prepareTimelineStore(TimelineStore store, int scale) throws Exception\n{\r\n    for (int i = 1; i <= scale; ++i) {\r\n        TimelineEntities entities = new TimelineEntities();\r\n        ApplicationId appId = ApplicationId.newInstance(0, i);\r\n        if (i == 2) {\r\n            entities.addEntity(createApplicationTimelineEntity(appId, true, false, false, true, YarnApplicationState.FINISHED));\r\n        } else if (i == 3) {\r\n            entities.addEntity(createApplicationTimelineEntity(appId, false, false, false, false, YarnApplicationState.FINISHED, true, false));\r\n        } else if (i == SCALE + 1) {\r\n            entities.addEntity(createApplicationTimelineEntity(appId, false, false, false, false, YarnApplicationState.FINISHED, false, true));\r\n        } else {\r\n            entities.addEntity(createApplicationTimelineEntity(appId, false, false, false, false, YarnApplicationState.FINISHED));\r\n        }\r\n        store.put(entities);\r\n        for (int j = 1; j <= scale; ++j) {\r\n            entities = new TimelineEntities();\r\n            ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, j);\r\n            entities.addEntity(createAppAttemptTimelineEntity(appAttemptId));\r\n            store.put(entities);\r\n            for (int k = 1; k <= scale; ++k) {\r\n                entities = new TimelineEntities();\r\n                ContainerId containerId = ContainerId.newContainerId(appAttemptId, k);\r\n                entities.addEntity(createContainerEntity(containerId));\r\n                store.put(entities);\r\n            }\r\n        }\r\n    }\r\n    TimelineEntities entities = new TimelineEntities();\r\n    ApplicationId appId = ApplicationId.newInstance(1234, 1);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId containerId = ContainerId.newContainerId(appAttemptId, 1);\r\n    entities.addEntity(createApplicationTimelineEntity(appId, true, false, false, false, YarnApplicationState.RUNNING));\r\n    entities.addEntity(createAppAttemptTimelineEntity(appAttemptId));\r\n    entities.addEntity(createContainerEntity(containerId));\r\n    store.put(entities);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testGetApplicationReport",
  "errType" : null,
  "containingMethodsNum" : 41,
  "sourceCodeText" : "void testGetApplicationReport() throws Exception\n{\r\n    for (int i = 1; i <= 3; ++i) {\r\n        final ApplicationId appId = ApplicationId.newInstance(0, i);\r\n        ApplicationReport app;\r\n        if (callerUGI == null) {\r\n            app = historyManager.getApplication(appId);\r\n        } else {\r\n            app = callerUGI.doAs(new PrivilegedExceptionAction<ApplicationReport>() {\r\n\r\n                @Override\r\n                public ApplicationReport run() throws Exception {\r\n                    return historyManager.getApplication(appId);\r\n                }\r\n            });\r\n        }\r\n        Assert.assertNotNull(app);\r\n        Assert.assertEquals(appId, app.getApplicationId());\r\n        Assert.assertEquals(\"test app\", app.getName());\r\n        Assert.assertEquals(\"test app type\", app.getApplicationType());\r\n        Assert.assertEquals(\"user1\", app.getUser());\r\n        if (i == 2) {\r\n            Assert.assertEquals(\"changed queue1\", app.getQueue());\r\n            Assert.assertEquals(Priority.newInstance(6), app.getPriority());\r\n        } else {\r\n            Assert.assertEquals(\"test queue\", app.getQueue());\r\n            Assert.assertEquals(Priority.newInstance(0), app.getPriority());\r\n        }\r\n        Assert.assertEquals(Integer.MAX_VALUE + 2L + app.getApplicationId().getId(), app.getStartTime());\r\n        Assert.assertEquals(Integer.MAX_VALUE + 1L, app.getSubmitTime());\r\n        Assert.assertEquals(Integer.MAX_VALUE + 3L + +app.getApplicationId().getId(), app.getFinishTime());\r\n        Assert.assertTrue(Math.abs(app.getProgress() - 1.0F) < 0.0001);\r\n        Assert.assertEquals(2, app.getApplicationTags().size());\r\n        Assert.assertTrue(app.getApplicationTags().contains(\"Test_APP_TAGS_1\"));\r\n        Assert.assertTrue(app.getApplicationTags().contains(\"Test_APP_TAGS_2\"));\r\n        if ((i != 2 && callerUGI != null && callerUGI.getShortUserName().equals(\"user3\")) || (i == 2 && callerUGI != null && (callerUGI.getShortUserName().equals(\"user2\") || callerUGI.getShortUserName().equals(\"user3\")))) {\r\n            Assert.assertEquals(ApplicationAttemptId.newInstance(appId, -1), app.getCurrentApplicationAttemptId());\r\n            Assert.assertEquals(ApplicationHistoryManagerOnTimelineStore.UNAVAILABLE, app.getHost());\r\n            Assert.assertEquals(-1, app.getRpcPort());\r\n            Assert.assertEquals(ApplicationHistoryManagerOnTimelineStore.UNAVAILABLE, app.getTrackingUrl());\r\n            Assert.assertEquals(ApplicationHistoryManagerOnTimelineStore.UNAVAILABLE, app.getOriginalTrackingUrl());\r\n            Assert.assertEquals(\"\", app.getDiagnostics());\r\n        } else {\r\n            Assert.assertEquals(ApplicationAttemptId.newInstance(appId, 1), app.getCurrentApplicationAttemptId());\r\n            Assert.assertEquals(\"test host\", app.getHost());\r\n            Assert.assertEquals(100, app.getRpcPort());\r\n            Assert.assertEquals(\"test tracking url\", app.getTrackingUrl());\r\n            Assert.assertEquals(\"test original tracking url\", app.getOriginalTrackingUrl());\r\n            Assert.assertEquals(\"test diagnostics info\", app.getDiagnostics());\r\n        }\r\n        ApplicationResourceUsageReport applicationResourceUsageReport = app.getApplicationResourceUsageReport();\r\n        Assert.assertEquals(123, applicationResourceUsageReport.getMemorySeconds());\r\n        Assert.assertEquals(345, applicationResourceUsageReport.getVcoreSeconds());\r\n        long expectedPreemptMemSecs = 456;\r\n        long expectedPreemptVcoreSecs = 789;\r\n        if (i == 3) {\r\n            expectedPreemptMemSecs = 0;\r\n            expectedPreemptVcoreSecs = 0;\r\n        }\r\n        Assert.assertEquals(expectedPreemptMemSecs, applicationResourceUsageReport.getPreemptedMemorySeconds());\r\n        Assert.assertEquals(expectedPreemptVcoreSecs, applicationResourceUsageReport.getPreemptedVcoreSeconds());\r\n        Assert.assertEquals(FinalApplicationStatus.UNDEFINED, app.getFinalApplicationStatus());\r\n        Assert.assertEquals(YarnApplicationState.FINISHED, app.getYarnApplicationState());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testGetApplicationReportWithNotAttempt",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testGetApplicationReportWithNotAttempt() throws Exception\n{\r\n    final ApplicationId appId = ApplicationId.newInstance(0, SCALE + 1);\r\n    ApplicationReport app;\r\n    if (callerUGI == null) {\r\n        app = historyManager.getApplication(appId);\r\n    } else {\r\n        app = callerUGI.doAs(new PrivilegedExceptionAction<ApplicationReport>() {\r\n\r\n            @Override\r\n            public ApplicationReport run() throws Exception {\r\n                return historyManager.getApplication(appId);\r\n            }\r\n        });\r\n    }\r\n    Assert.assertNotNull(app);\r\n    Assert.assertEquals(appId, app.getApplicationId());\r\n    Assert.assertEquals(ApplicationAttemptId.newInstance(appId, -1), app.getCurrentApplicationAttemptId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testGetApplicationAttemptReport",
  "errType" : [ "AuthorizationException" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testGetApplicationAttemptReport() throws Exception\n{\r\n    final ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(ApplicationId.newInstance(0, 1), 1);\r\n    ApplicationAttemptReport appAttempt;\r\n    if (callerUGI == null) {\r\n        appAttempt = historyManager.getApplicationAttempt(appAttemptId);\r\n    } else {\r\n        try {\r\n            appAttempt = callerUGI.doAs(new PrivilegedExceptionAction<ApplicationAttemptReport>() {\r\n\r\n                @Override\r\n                public ApplicationAttemptReport run() throws Exception {\r\n                    return historyManager.getApplicationAttempt(appAttemptId);\r\n                }\r\n            });\r\n            if (callerUGI != null && callerUGI.getShortUserName().equals(\"user3\")) {\r\n                Assert.fail();\r\n            }\r\n        } catch (AuthorizationException e) {\r\n            if (callerUGI != null && callerUGI.getShortUserName().equals(\"user3\")) {\r\n                return;\r\n            }\r\n            throw e;\r\n        }\r\n    }\r\n    Assert.assertNotNull(appAttempt);\r\n    Assert.assertEquals(appAttemptId, appAttempt.getApplicationAttemptId());\r\n    Assert.assertEquals(ContainerId.newContainerId(appAttemptId, 1), appAttempt.getAMContainerId());\r\n    Assert.assertEquals(\"test host\", appAttempt.getHost());\r\n    Assert.assertEquals(100, appAttempt.getRpcPort());\r\n    Assert.assertEquals(\"test tracking url\", appAttempt.getTrackingUrl());\r\n    Assert.assertEquals(\"test original tracking url\", appAttempt.getOriginalTrackingUrl());\r\n    Assert.assertEquals(\"test diagnostics info\", appAttempt.getDiagnostics());\r\n    Assert.assertEquals(YarnApplicationAttemptState.FINISHED, appAttempt.getYarnApplicationAttemptState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testGetContainerReport",
  "errType" : [ "AuthorizationException" ],
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testGetContainerReport() throws Exception\n{\r\n    final ContainerId containerId = ContainerId.newContainerId(ApplicationAttemptId.newInstance(ApplicationId.newInstance(0, 1), 1), 1);\r\n    ContainerReport container;\r\n    if (callerUGI == null) {\r\n        container = historyManager.getContainer(containerId);\r\n    } else {\r\n        try {\r\n            container = callerUGI.doAs(new PrivilegedExceptionAction<ContainerReport>() {\r\n\r\n                @Override\r\n                public ContainerReport run() throws Exception {\r\n                    return historyManager.getContainer(containerId);\r\n                }\r\n            });\r\n            if (callerUGI != null && callerUGI.getShortUserName().equals(\"user3\")) {\r\n                Assert.fail();\r\n            }\r\n        } catch (AuthorizationException e) {\r\n            if (callerUGI != null && callerUGI.getShortUserName().equals(\"user3\")) {\r\n                return;\r\n            }\r\n            throw e;\r\n        }\r\n    }\r\n    Assert.assertNotNull(container);\r\n    Assert.assertEquals(Integer.MAX_VALUE + 1L, container.getCreationTime());\r\n    Assert.assertEquals(Integer.MAX_VALUE + 2L, container.getFinishTime());\r\n    Assert.assertEquals(Resource.newInstance(-1, -1), container.getAllocatedResource());\r\n    Assert.assertEquals(NodeId.newInstance(\"test host\", 100), container.getAssignedNode());\r\n    Assert.assertEquals(Priority.UNDEFINED, container.getPriority());\r\n    Assert.assertEquals(\"test diagnostics info\", container.getDiagnosticsInfo());\r\n    Assert.assertEquals(ContainerState.COMPLETE, container.getContainerState());\r\n    Assert.assertEquals(-1, container.getContainerExitStatus());\r\n    Assert.assertEquals(\"http://0.0.0.0:8188/applicationhistory/logs/\" + \"test host:100/container_0_0001_01_000001/\" + \"container_0_0001_01_000001/user1\", container.getLogUrl());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testGetApplications",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testGetApplications() throws Exception\n{\r\n    Collection<ApplicationReport> apps = historyManager.getApplications(Long.MAX_VALUE, 0L, Long.MAX_VALUE).values();\r\n    Assert.assertNotNull(apps);\r\n    Assert.assertEquals(SCALE + 2, apps.size());\r\n    ApplicationId ignoredAppId = ApplicationId.newInstance(0, SCALE + 2);\r\n    for (ApplicationReport app : apps) {\r\n        Assert.assertNotEquals(ignoredAppId, app.getApplicationId());\r\n    }\r\n    apps = historyManager.getApplications(Long.MAX_VALUE, 2147483653L, Long.MAX_VALUE).values();\r\n    Assert.assertNotNull(apps);\r\n    Assert.assertEquals(2, apps.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testGetApplicationAttempts",
  "errType" : [ "AuthorizationException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testGetApplicationAttempts() throws Exception\n{\r\n    final ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    Collection<ApplicationAttemptReport> appAttempts;\r\n    if (callerUGI == null) {\r\n        appAttempts = historyManager.getApplicationAttempts(appId).values();\r\n    } else {\r\n        try {\r\n            appAttempts = callerUGI.doAs(new PrivilegedExceptionAction<Collection<ApplicationAttemptReport>>() {\r\n\r\n                @Override\r\n                public Collection<ApplicationAttemptReport> run() throws Exception {\r\n                    return historyManager.getApplicationAttempts(appId).values();\r\n                }\r\n            });\r\n            if (callerUGI != null && callerUGI.getShortUserName().equals(\"user3\")) {\r\n                Assert.fail();\r\n            }\r\n        } catch (AuthorizationException e) {\r\n            if (callerUGI != null && callerUGI.getShortUserName().equals(\"user3\")) {\r\n                return;\r\n            }\r\n            throw e;\r\n        }\r\n    }\r\n    Assert.assertNotNull(appAttempts);\r\n    Assert.assertEquals(SCALE, appAttempts.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testGetContainers",
  "errType" : [ "AuthorizationException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testGetContainers() throws Exception\n{\r\n    final ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(ApplicationId.newInstance(0, 1), 1);\r\n    Collection<ContainerReport> containers;\r\n    if (callerUGI == null) {\r\n        containers = historyManager.getContainers(appAttemptId).values();\r\n    } else {\r\n        try {\r\n            containers = callerUGI.doAs(new PrivilegedExceptionAction<Collection<ContainerReport>>() {\r\n\r\n                @Override\r\n                public Collection<ContainerReport> run() throws Exception {\r\n                    return historyManager.getContainers(appAttemptId).values();\r\n                }\r\n            });\r\n            if (callerUGI != null && callerUGI.getShortUserName().equals(\"user3\")) {\r\n                Assert.fail();\r\n            }\r\n        } catch (AuthorizationException e) {\r\n            if (callerUGI != null && callerUGI.getShortUserName().equals(\"user3\")) {\r\n                return;\r\n            }\r\n            throw e;\r\n        }\r\n    }\r\n    Assert.assertNotNull(containers);\r\n    Assert.assertEquals(SCALE, containers.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testGetAMContainer",
  "errType" : [ "AuthorizationException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testGetAMContainer() throws Exception\n{\r\n    final ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(ApplicationId.newInstance(0, 1), 1);\r\n    ContainerReport container;\r\n    if (callerUGI == null) {\r\n        container = historyManager.getAMContainer(appAttemptId);\r\n    } else {\r\n        try {\r\n            container = callerUGI.doAs(new PrivilegedExceptionAction<ContainerReport>() {\r\n\r\n                @Override\r\n                public ContainerReport run() throws Exception {\r\n                    return historyManager.getAMContainer(appAttemptId);\r\n                }\r\n            });\r\n            if (callerUGI != null && callerUGI.getShortUserName().equals(\"user3\")) {\r\n                Assert.fail();\r\n            }\r\n        } catch (AuthorizationException e) {\r\n            if (callerUGI != null && callerUGI.getShortUserName().equals(\"user3\")) {\r\n                return;\r\n            }\r\n            throw e;\r\n        }\r\n    }\r\n    Assert.assertNotNull(container);\r\n    Assert.assertEquals(appAttemptId, container.getContainerId().getApplicationAttemptId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "createApplicationTimelineEntity",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineEntity createApplicationTimelineEntity(ApplicationId appId, boolean emptyACLs, boolean noAttemptId, boolean wrongAppId, boolean enableUpdateEvent, YarnApplicationState state)\n{\r\n    return createApplicationTimelineEntity(appId, emptyACLs, noAttemptId, wrongAppId, enableUpdateEvent, state, false, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "createApplicationTimelineEntity",
  "errType" : null,
  "containingMethodsNum" : 43,
  "sourceCodeText" : "TimelineEntity createApplicationTimelineEntity(ApplicationId appId, boolean emptyACLs, boolean noAttemptId, boolean wrongAppId, boolean enableUpdateEvent, YarnApplicationState state, boolean missingPreemptMetrics, boolean missingQueue)\n{\r\n    TimelineEntity entity = new TimelineEntity();\r\n    entity.setEntityType(ApplicationMetricsConstants.ENTITY_TYPE);\r\n    if (wrongAppId) {\r\n        entity.setEntityId(\"wrong_app_id\");\r\n    } else {\r\n        entity.setEntityId(appId.toString());\r\n    }\r\n    entity.setDomainId(TimelineDataManager.DEFAULT_DOMAIN_ID);\r\n    entity.addPrimaryFilter(TimelineStore.SystemFilter.ENTITY_OWNER.toString(), \"yarn\");\r\n    Map<String, Object> entityInfo = new HashMap<String, Object>();\r\n    entityInfo.put(ApplicationMetricsConstants.NAME_ENTITY_INFO, \"test app\");\r\n    entityInfo.put(ApplicationMetricsConstants.TYPE_ENTITY_INFO, \"test app type\");\r\n    entityInfo.put(ApplicationMetricsConstants.USER_ENTITY_INFO, \"user1\");\r\n    if (!missingQueue) {\r\n        entityInfo.put(ApplicationMetricsConstants.QUEUE_ENTITY_INFO, \"test queue\");\r\n    }\r\n    entityInfo.put(ApplicationMetricsConstants.UNMANAGED_APPLICATION_ENTITY_INFO, \"false\");\r\n    entityInfo.put(ApplicationMetricsConstants.APPLICATION_PRIORITY_INFO, Priority.newInstance(0));\r\n    entityInfo.put(ApplicationMetricsConstants.SUBMITTED_TIME_ENTITY_INFO, Integer.MAX_VALUE + 1L);\r\n    entityInfo.put(ApplicationMetricsConstants.APP_MEM_METRICS, 123);\r\n    entityInfo.put(ApplicationMetricsConstants.APP_CPU_METRICS, 345);\r\n    if (!missingPreemptMetrics) {\r\n        entityInfo.put(ApplicationMetricsConstants.APP_MEM_PREEMPT_METRICS, 456);\r\n        entityInfo.put(ApplicationMetricsConstants.APP_CPU_PREEMPT_METRICS, 789);\r\n    }\r\n    if (emptyACLs) {\r\n        entityInfo.put(ApplicationMetricsConstants.APP_VIEW_ACLS_ENTITY_INFO, \"\");\r\n    } else {\r\n        entityInfo.put(ApplicationMetricsConstants.APP_VIEW_ACLS_ENTITY_INFO, \"user2\");\r\n    }\r\n    Set<String> appTags = new HashSet<String>();\r\n    appTags.add(\"Test_APP_TAGS_1\");\r\n    appTags.add(\"Test_APP_TAGS_2\");\r\n    entityInfo.put(ApplicationMetricsConstants.APP_TAGS_INFO, appTags);\r\n    entity.setOtherInfo(entityInfo);\r\n    TimelineEvent tEvent = new TimelineEvent();\r\n    tEvent.setEventType(ApplicationMetricsConstants.CREATED_EVENT_TYPE);\r\n    tEvent.setTimestamp(Integer.MAX_VALUE + 2L + appId.getId());\r\n    entity.addEvent(tEvent);\r\n    tEvent = new TimelineEvent();\r\n    tEvent.setEventType(ApplicationMetricsConstants.FINISHED_EVENT_TYPE);\r\n    tEvent.setTimestamp(Integer.MAX_VALUE + 3L + appId.getId());\r\n    Map<String, Object> eventInfo = new HashMap<String, Object>();\r\n    eventInfo.put(ApplicationMetricsConstants.DIAGNOSTICS_INFO_EVENT_INFO, \"test diagnostics info\");\r\n    eventInfo.put(ApplicationMetricsConstants.FINAL_STATUS_EVENT_INFO, FinalApplicationStatus.UNDEFINED.toString());\r\n    eventInfo.put(ApplicationMetricsConstants.STATE_EVENT_INFO, state.toString());\r\n    if (!noAttemptId) {\r\n        eventInfo.put(ApplicationMetricsConstants.LATEST_APP_ATTEMPT_EVENT_INFO, ApplicationAttemptId.newInstance(appId, 1));\r\n    }\r\n    tEvent.setEventInfo(eventInfo);\r\n    entity.addEvent(tEvent);\r\n    tEvent = new TimelineEvent();\r\n    tEvent.setEventType(ApplicationMetricsConstants.STATE_UPDATED_EVENT_TYPE);\r\n    tEvent.setTimestamp(Integer.MAX_VALUE + 4L + appId.getId());\r\n    eventInfo = new HashMap<String, Object>();\r\n    eventInfo.put(ApplicationMetricsConstants.STATE_EVENT_INFO, YarnApplicationState.KILLED);\r\n    tEvent.setEventInfo(eventInfo);\r\n    entity.addEvent(tEvent);\r\n    if (enableUpdateEvent) {\r\n        tEvent = new TimelineEvent();\r\n        long updatedTimeIndex = 4L;\r\n        createAppModifiedEvent(appId, tEvent, updatedTimeIndex++, \"changed queue\", 5);\r\n        entity.addEvent(tEvent);\r\n        tEvent = new TimelineEvent();\r\n        createAppModifiedEvent(appId, tEvent, updatedTimeIndex++, \"changed queue\", 6);\r\n        tEvent = new TimelineEvent();\r\n        createAppModifiedEvent(appId, tEvent, updatedTimeIndex++, \"changed queue1\", 6);\r\n        entity.addEvent(tEvent);\r\n    }\r\n    return entity;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "createAppModifiedEvent",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void createAppModifiedEvent(ApplicationId appId, TimelineEvent tEvent, long updatedTimeIndex, String queue, int priority)\n{\r\n    tEvent.setEventType(ApplicationMetricsConstants.UPDATED_EVENT_TYPE);\r\n    tEvent.setTimestamp(Integer.MAX_VALUE + updatedTimeIndex + appId.getId());\r\n    Map<String, Object> eventInfo = new HashMap<String, Object>();\r\n    eventInfo.put(ApplicationMetricsConstants.QUEUE_ENTITY_INFO, queue);\r\n    eventInfo.put(ApplicationMetricsConstants.APPLICATION_PRIORITY_INFO, priority);\r\n    tEvent.setEventInfo(eventInfo);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "createAppAttemptTimelineEntity",
  "errType" : null,
  "containingMethodsNum" : 23,
  "sourceCodeText" : "TimelineEntity createAppAttemptTimelineEntity(ApplicationAttemptId appAttemptId)\n{\r\n    TimelineEntity entity = new TimelineEntity();\r\n    entity.setEntityType(AppAttemptMetricsConstants.ENTITY_TYPE);\r\n    entity.setEntityId(appAttemptId.toString());\r\n    entity.setDomainId(TimelineDataManager.DEFAULT_DOMAIN_ID);\r\n    entity.addPrimaryFilter(AppAttemptMetricsConstants.PARENT_PRIMARY_FILTER, appAttemptId.getApplicationId().toString());\r\n    entity.addPrimaryFilter(TimelineStore.SystemFilter.ENTITY_OWNER.toString(), \"yarn\");\r\n    TimelineEvent tEvent = new TimelineEvent();\r\n    tEvent.setEventType(AppAttemptMetricsConstants.REGISTERED_EVENT_TYPE);\r\n    tEvent.setTimestamp(Integer.MAX_VALUE + 1L);\r\n    Map<String, Object> eventInfo = new HashMap<String, Object>();\r\n    eventInfo.put(AppAttemptMetricsConstants.TRACKING_URL_INFO, \"test tracking url\");\r\n    eventInfo.put(AppAttemptMetricsConstants.ORIGINAL_TRACKING_URL_INFO, \"test original tracking url\");\r\n    eventInfo.put(AppAttemptMetricsConstants.HOST_INFO, \"test host\");\r\n    eventInfo.put(AppAttemptMetricsConstants.RPC_PORT_INFO, 100);\r\n    eventInfo.put(AppAttemptMetricsConstants.MASTER_CONTAINER_INFO, ContainerId.newContainerId(appAttemptId, 1));\r\n    tEvent.setEventInfo(eventInfo);\r\n    entity.addEvent(tEvent);\r\n    tEvent = new TimelineEvent();\r\n    tEvent.setEventType(AppAttemptMetricsConstants.FINISHED_EVENT_TYPE);\r\n    tEvent.setTimestamp(Integer.MAX_VALUE + 2L);\r\n    eventInfo = new HashMap<String, Object>();\r\n    eventInfo.put(AppAttemptMetricsConstants.TRACKING_URL_INFO, \"test tracking url\");\r\n    eventInfo.put(AppAttemptMetricsConstants.ORIGINAL_TRACKING_URL_INFO, \"test original tracking url\");\r\n    eventInfo.put(AppAttemptMetricsConstants.DIAGNOSTICS_INFO, \"test diagnostics info\");\r\n    eventInfo.put(AppAttemptMetricsConstants.FINAL_STATUS_INFO, FinalApplicationStatus.UNDEFINED.toString());\r\n    eventInfo.put(AppAttemptMetricsConstants.STATE_INFO, YarnApplicationAttemptState.FINISHED.toString());\r\n    tEvent.setEventInfo(eventInfo);\r\n    entity.addEvent(tEvent);\r\n    return entity;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "createContainerEntity",
  "errType" : null,
  "containingMethodsNum" : 22,
  "sourceCodeText" : "TimelineEntity createContainerEntity(ContainerId containerId)\n{\r\n    TimelineEntity entity = new TimelineEntity();\r\n    entity.setEntityType(ContainerMetricsConstants.ENTITY_TYPE);\r\n    entity.setEntityId(containerId.toString());\r\n    entity.setDomainId(TimelineDataManager.DEFAULT_DOMAIN_ID);\r\n    entity.addPrimaryFilter(ContainerMetricsConstants.PARENT_PRIMARIY_FILTER, containerId.getApplicationAttemptId().toString());\r\n    entity.addPrimaryFilter(TimelineStore.SystemFilter.ENTITY_OWNER.toString(), \"yarn\");\r\n    Map<String, Object> entityInfo = new HashMap<String, Object>();\r\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_MEMORY_INFO, -1);\r\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_VCORE_INFO, -1);\r\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_HOST_INFO, \"test host\");\r\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_PORT_INFO, 100);\r\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_PRIORITY_INFO, -1);\r\n    entityInfo.put(ContainerMetricsConstants.ALLOCATED_HOST_HTTP_ADDRESS_INFO, \"http://test:1234\");\r\n    entity.setOtherInfo(entityInfo);\r\n    TimelineEvent tEvent = new TimelineEvent();\r\n    tEvent.setEventType(ContainerMetricsConstants.CREATED_EVENT_TYPE);\r\n    tEvent.setTimestamp(Integer.MAX_VALUE + 1L);\r\n    entity.addEvent(tEvent);\r\n    ;\r\n    tEvent = new TimelineEvent();\r\n    tEvent.setEventType(ContainerMetricsConstants.FINISHED_EVENT_TYPE);\r\n    tEvent.setTimestamp(Integer.MAX_VALUE + 2L);\r\n    Map<String, Object> eventInfo = new HashMap<String, Object>();\r\n    eventInfo.put(ContainerMetricsConstants.DIAGNOSTICS_INFO, \"test diagnostics info\");\r\n    eventInfo.put(ContainerMetricsConstants.EXIT_STATUS_INFO, -1);\r\n    eventInfo.put(ContainerMetricsConstants.STATE_INFO, ContainerState.COMPLETE.toString());\r\n    tEvent.setEventInfo(eventInfo);\r\n    entity.addEvent(tEvent);\r\n    return entity;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "setupClass",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void setupClass() throws Exception\n{\r\n    conf = new YarnConfiguration();\r\n    TimelineStore store = TestApplicationHistoryManagerOnTimelineStore.createStore(MAX_APPS);\r\n    TimelineACLsManager aclsManager = new TimelineACLsManager(conf);\r\n    aclsManager.setTimelineStore(store);\r\n    TimelineDataManager dataManager = new TimelineDataManager(store, aclsManager);\r\n    conf.setBoolean(YarnConfiguration.YARN_ACL_ENABLE, true);\r\n    conf.set(YarnConfiguration.YARN_ADMIN_ACL, \"foo\");\r\n    conf.setBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED, true);\r\n    conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR, remoteLogRootDir);\r\n    dataManager.init(conf);\r\n    ApplicationACLsManager appAclsManager = new ApplicationACLsManager(conf);\r\n    ApplicationHistoryManagerOnTimelineStore historyManager = new ApplicationHistoryManagerOnTimelineStore(dataManager, appAclsManager);\r\n    historyManager.init(conf);\r\n    historyClientService = new ApplicationHistoryClientService(historyManager) {\r\n\r\n        @Override\r\n        protected void serviceStart() throws Exception {\r\n        }\r\n    };\r\n    historyClientService.init(conf);\r\n    historyClientService.start();\r\n    ahsWebservice = new AHSWebServices(historyClientService, conf);\r\n    LogServlet logServlet = spy(ahsWebservice.getLogServlet());\r\n    doReturn(null).when(logServlet).getNMWebAddressFromRM(any());\r\n    doReturn(NM_WEBADDRESS).when(logServlet).getNMWebAddressFromRM(NM_ID);\r\n    ahsWebservice.setLogServlet(logServlet);\r\n    fs = FileSystem.get(conf);\r\n    GuiceServletConfig.setInjector(Guice.createInjector(new WebServletModule()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "tearDownClass",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void tearDownClass() throws Exception\n{\r\n    if (historyClientService != null) {\r\n        historyClientService.stop();\r\n    }\r\n    fs.delete(new Path(remoteLogRootDir), true);\r\n    fs.delete(new Path(rootLogDir), true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "rounds",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Collection<Object[]> rounds()\n{\r\n    return Arrays.asList(new Object[][] { { 0 }, { 1 } });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    super.setUp();\r\n    GuiceServletConfig.setInjector(Guice.createInjector(new WebServletModule()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "testInvalidApp",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testInvalidApp()\n{\r\n    ApplicationId appId = ApplicationId.newInstance(0, MAX_APPS + 1);\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"applicationhistory\").path(\"apps\").path(appId.toString()).queryParam(\"user.name\", USERS[round]).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertResponseStatusCode(\"404 not found expected\", Status.NOT_FOUND, response.getStatusInfo());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "testInvalidAttempt",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testInvalidAttempt()\n{\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, MAX_APPS + 1);\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"applicationhistory\").path(\"apps\").path(appId.toString()).path(\"appattempts\").path(appAttemptId.toString()).queryParam(\"user.name\", USERS[round]).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    if (round == 1) {\r\n        assertResponseStatusCode(Status.FORBIDDEN, response.getStatusInfo());\r\n        return;\r\n    }\r\n    assertResponseStatusCode(\"404 not found expected\", Status.NOT_FOUND, response.getStatusInfo());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "testInvalidContainer",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testInvalidContainer() throws Exception\n{\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId containerId = ContainerId.newContainerId(appAttemptId, MAX_APPS + 1);\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"applicationhistory\").path(\"apps\").path(appId.toString()).path(\"appattempts\").path(appAttemptId.toString()).path(\"containers\").path(containerId.toString()).queryParam(\"user.name\", USERS[round]).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    if (round == 1) {\r\n        assertResponseStatusCode(Status.FORBIDDEN, response.getStatusInfo());\r\n        return;\r\n    }\r\n    assertResponseStatusCode(\"404 not found expected\", Status.NOT_FOUND, response.getStatusInfo());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "testInvalidUri",
  "errType" : [ "UniformInterfaceException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testInvalidUri() throws JSONException, Exception\n{\r\n    WebResource r = resource();\r\n    String responseStr = \"\";\r\n    try {\r\n        responseStr = r.path(\"ws\").path(\"v1\").path(\"applicationhistory\").path(\"bogus\").queryParam(\"user.name\", USERS[round]).accept(MediaType.APPLICATION_JSON).get(String.class);\r\n        fail(\"should have thrown exception on invalid uri\");\r\n    } catch (UniformInterfaceException ue) {\r\n        ClientResponse response = ue.getResponse();\r\n        assertResponseStatusCode(Status.NOT_FOUND, response.getStatusInfo());\r\n        WebServicesTestUtils.checkStringMatch(\"error string exists and shouldn't\", \"\", responseStr);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "testInvalidUri2",
  "errType" : [ "UniformInterfaceException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testInvalidUri2() throws JSONException, Exception\n{\r\n    WebResource r = resource();\r\n    String responseStr = \"\";\r\n    try {\r\n        responseStr = r.queryParam(\"user.name\", USERS[round]).accept(MediaType.APPLICATION_JSON).get(String.class);\r\n        fail(\"should have thrown exception on invalid uri\");\r\n    } catch (UniformInterfaceException ue) {\r\n        ClientResponse response = ue.getResponse();\r\n        assertResponseStatusCode(Status.NOT_FOUND, response.getStatusInfo());\r\n        WebServicesTestUtils.checkStringMatch(\"error string exists and shouldn't\", \"\", responseStr);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "testInvalidAccept",
  "errType" : [ "UniformInterfaceException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testInvalidAccept() throws JSONException, Exception\n{\r\n    WebResource r = resource();\r\n    String responseStr = \"\";\r\n    try {\r\n        responseStr = r.path(\"ws\").path(\"v1\").path(\"applicationhistory\").queryParam(\"user.name\", USERS[round]).accept(MediaType.TEXT_PLAIN).get(String.class);\r\n        fail(\"should have thrown exception on invalid uri\");\r\n    } catch (UniformInterfaceException ue) {\r\n        ClientResponse response = ue.getResponse();\r\n        assertResponseStatusCode(Status.INTERNAL_SERVER_ERROR, response.getStatusInfo());\r\n        WebServicesTestUtils.checkStringMatch(\"error string exists and shouldn't\", \"\", responseStr);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "testAbout",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testAbout() throws Exception\n{\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"applicationhistory\").path(\"about\").queryParam(\"user.name\", USERS[round]).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    TimelineAbout actualAbout = response.getEntity(TimelineAbout.class);\r\n    TimelineAbout expectedAbout = TimelineUtils.createTimelineAbout(\"Generic History Service API\");\r\n    Assert.assertNotNull(\"Timeline service about response is null\", actualAbout);\r\n    Assert.assertEquals(expectedAbout.getAbout(), actualAbout.getAbout());\r\n    Assert.assertEquals(expectedAbout.getTimelineServiceVersion(), actualAbout.getTimelineServiceVersion());\r\n    Assert.assertEquals(expectedAbout.getTimelineServiceBuildVersion(), actualAbout.getTimelineServiceBuildVersion());\r\n    Assert.assertEquals(expectedAbout.getTimelineServiceVersionBuiltOn(), actualAbout.getTimelineServiceVersionBuiltOn());\r\n    Assert.assertEquals(expectedAbout.getHadoopVersion(), actualAbout.getHadoopVersion());\r\n    Assert.assertEquals(expectedAbout.getHadoopBuildVersion(), actualAbout.getHadoopBuildVersion());\r\n    Assert.assertEquals(expectedAbout.getHadoopVersionBuiltOn(), actualAbout.getHadoopVersionBuiltOn());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "testAppsQuery",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testAppsQuery() throws Exception\n{\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"applicationhistory\").path(\"apps\").queryParam(\"state\", YarnApplicationState.FINISHED.toString()).queryParam(\"user.name\", USERS[round]).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    JSONObject json = response.getEntity(JSONObject.class);\r\n    assertEquals(\"incorrect number of elements\", 1, json.length());\r\n    JSONObject apps = json.getJSONObject(\"apps\");\r\n    assertEquals(\"incorrect number of elements\", 1, apps.length());\r\n    JSONArray array = apps.getJSONArray(\"app\");\r\n    assertEquals(\"incorrect number of elements\", MAX_APPS, array.length());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "testQueueQuery",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testQueueQuery() throws Exception\n{\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"applicationhistory\").path(\"apps\").queryParam(\"queue\", \"test queue\").queryParam(\"user.name\", USERS[round]).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertResponseStatusCode(Status.OK, response.getStatusInfo());\r\n    assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    JSONObject json = response.getEntity(JSONObject.class);\r\n    assertEquals(\"incorrect number of elements\", 1, json.length());\r\n    JSONObject apps = json.getJSONObject(\"apps\");\r\n    assertEquals(\"incorrect number of elements\", 1, apps.length());\r\n    JSONArray array = apps.getJSONArray(\"app\");\r\n    assertEquals(\"incorrect number of elements\", MAX_APPS - 1, array.length());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "testSingleApp",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testSingleApp() throws Exception\n{\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"applicationhistory\").path(\"apps\").path(appId.toString()).queryParam(\"user.name\", USERS[round]).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    JSONObject json = response.getEntity(JSONObject.class);\r\n    assertEquals(\"incorrect number of elements\", 1, json.length());\r\n    JSONObject app = json.getJSONObject(\"app\");\r\n    assertEquals(appId.toString(), app.getString(\"appId\"));\r\n    assertEquals(\"test app\", app.get(\"name\"));\r\n    assertEquals(round == 0 ? \"test diagnostics info\" : \"\", app.get(\"diagnosticsInfo\"));\r\n    assertEquals(Integer.MAX_VALUE + 1L, app.get(\"submittedTime\"));\r\n    assertEquals(\"test queue\", app.get(\"queue\"));\r\n    assertEquals(\"user1\", app.get(\"user\"));\r\n    assertEquals(\"test app type\", app.get(\"type\"));\r\n    assertEquals(FinalApplicationStatus.UNDEFINED.toString(), app.get(\"finalAppStatus\"));\r\n    assertEquals(YarnApplicationState.FINISHED.toString(), app.get(\"appState\"));\r\n    assertNotNull(\"Aggregate resource allocation is null\", app.get(\"aggregateResourceAllocation\"));\r\n    assertNotNull(\"Aggregate Preempted Resource Allocation is null\", app.get(\"aggregatePreemptedResourceAllocation\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "testMultipleAttempts",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testMultipleAttempts() throws Exception\n{\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"applicationhistory\").path(\"apps\").path(appId.toString()).path(\"appattempts\").queryParam(\"user.name\", USERS[round]).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    if (round == 1) {\r\n        assertResponseStatusCode(Status.FORBIDDEN, response.getStatusInfo());\r\n        return;\r\n    }\r\n    assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    JSONObject json = response.getEntity(JSONObject.class);\r\n    assertEquals(\"incorrect number of elements\", 1, json.length());\r\n    JSONObject appAttempts = json.getJSONObject(\"appAttempts\");\r\n    assertEquals(\"incorrect number of elements\", 1, appAttempts.length());\r\n    JSONArray array = appAttempts.getJSONArray(\"appAttempt\");\r\n    assertEquals(\"incorrect number of elements\", MAX_APPS, array.length());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "testSingleAttempt",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testSingleAttempt() throws Exception\n{\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"applicationhistory\").path(\"apps\").path(appId.toString()).path(\"appattempts\").path(appAttemptId.toString()).queryParam(\"user.name\", USERS[round]).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    if (round == 1) {\r\n        assertResponseStatusCode(Status.FORBIDDEN, response.getStatusInfo());\r\n        return;\r\n    }\r\n    assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    JSONObject json = response.getEntity(JSONObject.class);\r\n    assertEquals(\"incorrect number of elements\", 1, json.length());\r\n    JSONObject appAttempt = json.getJSONObject(\"appAttempt\");\r\n    assertEquals(appAttemptId.toString(), appAttempt.getString(\"appAttemptId\"));\r\n    assertEquals(\"test host\", appAttempt.getString(\"host\"));\r\n    assertEquals(\"test diagnostics info\", appAttempt.getString(\"diagnosticsInfo\"));\r\n    assertEquals(\"test tracking url\", appAttempt.getString(\"trackingUrl\"));\r\n    assertEquals(YarnApplicationAttemptState.FINISHED.toString(), appAttempt.get(\"appAttemptState\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "testMultipleContainers",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testMultipleContainers() throws Exception\n{\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"applicationhistory\").path(\"apps\").path(appId.toString()).path(\"appattempts\").path(appAttemptId.toString()).path(\"containers\").queryParam(\"user.name\", USERS[round]).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    if (round == 1) {\r\n        assertResponseStatusCode(Status.FORBIDDEN, response.getStatusInfo());\r\n        return;\r\n    }\r\n    assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    JSONObject json = response.getEntity(JSONObject.class);\r\n    assertEquals(\"incorrect number of elements\", 1, json.length());\r\n    JSONObject containers = json.getJSONObject(\"containers\");\r\n    assertEquals(\"incorrect number of elements\", 1, containers.length());\r\n    JSONArray array = containers.getJSONArray(\"container\");\r\n    assertEquals(\"incorrect number of elements\", MAX_APPS, array.length());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "testSingleContainer",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testSingleContainer() throws Exception\n{\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId containerId = ContainerId.newContainerId(appAttemptId, 1);\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"applicationhistory\").path(\"apps\").path(appId.toString()).path(\"appattempts\").path(appAttemptId.toString()).path(\"containers\").path(containerId.toString()).queryParam(\"user.name\", USERS[round]).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    if (round == 1) {\r\n        assertResponseStatusCode(Status.FORBIDDEN, response.getStatusInfo());\r\n        return;\r\n    }\r\n    assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    JSONObject json = response.getEntity(JSONObject.class);\r\n    assertEquals(\"incorrect number of elements\", 1, json.length());\r\n    JSONObject container = json.getJSONObject(\"container\");\r\n    assertEquals(containerId.toString(), container.getString(\"containerId\"));\r\n    assertEquals(\"test diagnostics info\", container.getString(\"diagnosticsInfo\"));\r\n    assertEquals(\"-1\", container.getString(\"allocatedMB\"));\r\n    assertEquals(\"-1\", container.getString(\"allocatedVCores\"));\r\n    assertEquals(NodeId.newInstance(\"test host\", 100).toString(), container.getString(\"assignedNodeId\"));\r\n    assertEquals(\"-1\", container.getString(\"priority\"));\r\n    Configuration conf = new YarnConfiguration();\r\n    assertEquals(WebAppUtils.getHttpSchemePrefix(conf) + WebAppUtils.getAHSWebAppURLWithoutScheme(conf) + \"/applicationhistory/logs/test host:100/container_0_0001_01_000001/\" + \"container_0_0001_01_000001/user1\", container.getString(\"logUrl\"));\r\n    assertEquals(ContainerState.COMPLETE.toString(), container.getString(\"containerState\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "testContainerLogsForFinishedApps",
  "errType" : null,
  "containingMethodsNum" : 57,
  "sourceCodeText" : "void testContainerLogsForFinishedApps() throws Exception\n{\r\n    String fileName = \"syslog\";\r\n    String user = \"user1\";\r\n    NodeId nodeId = NodeId.newInstance(\"test host\", 100);\r\n    NodeId nodeId2 = NodeId.newInstance(\"host2\", 1234);\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId containerId1 = ContainerId.newContainerId(appAttemptId, 1);\r\n    ContainerId containerId100 = ContainerId.newContainerId(appAttemptId, 100);\r\n    TestContainerLogsUtils.createContainerLogFileInRemoteFS(conf, fs, rootLogDir, appId, Collections.singletonMap(containerId1, \"Hello.\" + containerId1), nodeId, fileName, user, true);\r\n    TestContainerLogsUtils.createContainerLogFileInRemoteFS(conf, fs, rootLogDir, appId, Collections.singletonMap(containerId100, \"Hello.\" + containerId100), nodeId2, fileName, user, false);\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"applicationhistory\").path(\"containerlogs\").path(containerId1.toString()).path(fileName).queryParam(\"user.name\", user).accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\r\n    String responseText = response.getEntity(String.class);\r\n    assertTrue(responseText.contains(\"Hello.\" + containerId1));\r\n    r = resource();\r\n    response = r.path(\"ws\").path(\"v1\").path(\"applicationhistory\").path(\"containers\").path(containerId1.toString()).path(\"logs\").path(fileName).queryParam(\"user.name\", user).accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\r\n    responseText = response.getEntity(String.class);\r\n    assertTrue(responseText.contains(\"Hello.\" + containerId1));\r\n    r = resource();\r\n    response = r.path(\"ws\").path(\"v1\").path(\"applicationhistory\").path(\"containerlogs\").path(containerId100.toString()).path(fileName).queryParam(\"user.name\", user).accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\r\n    responseText = response.getEntity(String.class);\r\n    assertTrue(responseText.contains(\"Hello.\" + containerId100));\r\n    r = resource();\r\n    response = r.path(\"ws\").path(\"v1\").path(\"applicationhistory\").path(\"containers\").path(containerId100.toString()).path(\"logs\").path(fileName).queryParam(\"user.name\", user).accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\r\n    responseText = response.getEntity(String.class);\r\n    assertTrue(responseText.contains(\"Hello.\" + containerId100));\r\n    ApplicationId appId100 = ApplicationId.newInstance(0, 100);\r\n    ApplicationAttemptId appAttemptId100 = ApplicationAttemptId.newInstance(appId100, 1);\r\n    ContainerId containerId1ForApp100 = ContainerId.newContainerId(appAttemptId100, 1);\r\n    TestContainerLogsUtils.createContainerLogFileInRemoteFS(conf, fs, rootLogDir, appId100, Collections.singletonMap(containerId1ForApp100, \"Hello.\" + containerId1ForApp100), nodeId, fileName, user, true);\r\n    r = resource();\r\n    response = r.path(\"ws\").path(\"v1\").path(\"applicationhistory\").path(\"containerlogs\").path(containerId1ForApp100.toString()).path(fileName).queryParam(\"user.name\", user).accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\r\n    responseText = response.getEntity(String.class);\r\n    assertTrue(responseText.contains(\"Hello.\" + containerId1ForApp100));\r\n    int fullTextSize = responseText.getBytes().length;\r\n    String tailEndSeparator = StringUtils.repeat(\"*\", \"End of LogType:syslog\".length() + 50) + \"\\n\\n\";\r\n    int tailTextSize = \"\\nEnd of LogType:syslog\\n\".getBytes().length + tailEndSeparator.getBytes().length;\r\n    String logMessage = \"Hello.\" + containerId1ForApp100;\r\n    int fileContentSize = logMessage.getBytes().length;\r\n    r = resource();\r\n    response = r.path(\"ws\").path(\"v1\").path(\"applicationhistory\").path(\"containerlogs\").path(containerId1ForApp100.toString()).path(fileName).queryParam(\"user.name\", user).queryParam(\"size\", \"5\").accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\r\n    responseText = response.getEntity(String.class);\r\n    assertEquals(responseText.getBytes().length, (fullTextSize - fileContentSize) + 5);\r\n    assertTrue(fullTextSize >= responseText.getBytes().length);\r\n    assertEquals(new String(responseText.getBytes(), (fullTextSize - fileContentSize - tailTextSize), 5), new String(logMessage.getBytes(), 0, 5));\r\n    r = resource();\r\n    response = r.path(\"ws\").path(\"v1\").path(\"applicationhistory\").path(\"containerlogs\").path(containerId1ForApp100.toString()).path(fileName).queryParam(\"user.name\", user).queryParam(\"size\", \"-5\").accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\r\n    responseText = response.getEntity(String.class);\r\n    assertEquals(responseText.getBytes().length, (fullTextSize - fileContentSize) + 5);\r\n    assertTrue(fullTextSize >= responseText.getBytes().length);\r\n    assertEquals(new String(responseText.getBytes(), (fullTextSize - fileContentSize - tailTextSize), 5), new String(logMessage.getBytes(), fileContentSize - 5, 5));\r\n    r = resource();\r\n    response = r.path(\"ws\").path(\"v1\").path(\"applicationhistory\").path(\"containerlogs\").path(containerId1ForApp100.toString()).path(fileName).queryParam(\"user.name\", user).queryParam(\"size\", \"10000\").accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\r\n    responseText = response.getEntity(String.class);\r\n    assertThat(responseText.getBytes()).hasSize(fullTextSize);\r\n    r = resource();\r\n    response = r.path(\"ws\").path(\"v1\").path(\"applicationhistory\").path(\"containerlogs\").path(containerId1ForApp100.toString()).path(fileName).queryParam(\"user.name\", user).queryParam(\"size\", \"-10000\").accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\r\n    responseText = response.getEntity(String.class);\r\n    assertThat(responseText.getBytes()).hasSize(fullTextSize);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "testContainerLogsForRunningApps",
  "errType" : null,
  "containingMethodsNum" : 56,
  "sourceCodeText" : "void testContainerLogsForRunningApps() throws Exception\n{\r\n    String fileName = \"syslog\";\r\n    String user = \"user1\";\r\n    ApplicationId appId = ApplicationId.newInstance(1234, 1);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId containerId1 = ContainerId.newContainerId(appAttemptId, 1);\r\n    WebResource r = resource();\r\n    URI requestURI = r.path(\"ws\").path(\"v1\").path(\"applicationhistory\").path(\"containerlogs\").path(containerId1.toString()).path(fileName).queryParam(\"user.name\", user).getURI();\r\n    String redirectURL = getRedirectURL(requestURI.toString());\r\n    assertTrue(redirectURL != null);\r\n    assertTrue(redirectURL.contains(\"test:1234\"));\r\n    assertTrue(redirectURL.contains(\"ws/v1/node/containers\"));\r\n    assertTrue(redirectURL.contains(containerId1.toString()));\r\n    assertTrue(redirectURL.contains(\"/logs/\" + fileName));\r\n    assertTrue(redirectURL.contains(\"user.name=\" + user));\r\n    requestURI = r.path(\"ws\").path(\"v1\").path(\"applicationhistory\").path(\"containerlogs\").path(containerId1.toString()).path(fileName).queryParam(\"user.name\", user).queryParam(YarnWebServiceParams.NM_ID, NM_ID).getURI();\r\n    redirectURL = getRedirectURL(requestURI.toString());\r\n    assertTrue(redirectURL != null);\r\n    assertTrue(redirectURL.contains(NM_WEBADDRESS));\r\n    assertTrue(redirectURL.contains(\"ws/v1/node/containers\"));\r\n    assertTrue(redirectURL.contains(containerId1.toString()));\r\n    assertTrue(redirectURL.contains(\"/logs/\" + fileName));\r\n    assertTrue(redirectURL.contains(\"user.name=\" + user));\r\n    requestURI = r.path(\"ws\").path(\"v1\").path(\"applicationhistory\").path(\"containers\").path(containerId1.toString()).path(\"logs\").path(fileName).queryParam(\"user.name\", user).getURI();\r\n    redirectURL = getRedirectURL(requestURI.toString());\r\n    assertTrue(redirectURL != null);\r\n    assertTrue(redirectURL.contains(\"test:1234\"));\r\n    assertTrue(redirectURL.contains(\"ws/v1/node/containers\"));\r\n    assertTrue(redirectURL.contains(containerId1.toString()));\r\n    assertTrue(redirectURL.contains(\"/logs/\" + fileName));\r\n    assertTrue(redirectURL.contains(\"user.name=\" + user));\r\n    requestURI = r.path(\"ws\").path(\"v1\").path(\"applicationhistory\").path(\"containers\").path(containerId1.toString()).path(\"logs\").path(fileName).queryParam(\"user.name\", user).queryParam(YarnWebServiceParams.NM_ID, NM_ID).getURI();\r\n    redirectURL = getRedirectURL(requestURI.toString());\r\n    assertTrue(redirectURL != null);\r\n    assertTrue(redirectURL.contains(NM_WEBADDRESS));\r\n    assertTrue(redirectURL.contains(\"ws/v1/node/containers\"));\r\n    assertTrue(redirectURL.contains(containerId1.toString()));\r\n    assertTrue(redirectURL.contains(\"/logs/\" + fileName));\r\n    assertTrue(redirectURL.contains(\"user.name=\" + user));\r\n    ContainerId containerId1000 = ContainerId.newContainerId(appAttemptId, 1000);\r\n    String content = \"Hello.\" + containerId1000;\r\n    NodeId nodeId = NodeId.newInstance(\"test host\", 100);\r\n    TestContainerLogsUtils.createContainerLogFileInRemoteFS(conf, fs, rootLogDir, appId, Collections.singletonMap(containerId1000, content), nodeId, fileName, user, true);\r\n    r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"applicationhistory\").path(\"containerlogs\").path(containerId1000.toString()).path(fileName).queryParam(\"user.name\", user).accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\r\n    String responseText = response.getEntity(String.class);\r\n    assertTrue(responseText.contains(content));\r\n    assertTrue(responseText.contains(\"LogAggregationType: \" + ContainerLogAggregationType.LOCAL));\r\n    assertTrue(responseText.contains(LogWebServiceUtils.getNoRedirectWarning()));\r\n    response = r.path(\"ws\").path(\"v1\").path(\"applicationhistory\").path(\"containerlogs\").path(containerId1000.toString()).path(fileName).queryParam(YarnWebServiceParams.NM_ID, \"invalid-nm:1234\").queryParam(\"user.name\", user).accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\r\n    responseText = response.getEntity(String.class);\r\n    assertTrue(responseText.contains(content));\r\n    assertTrue(responseText.contains(\"LogAggregationType: \" + ContainerLogAggregationType.LOCAL));\r\n    assertTrue(responseText.contains(LogWebServiceUtils.getNoRedirectWarning()));\r\n    String content1 = \"Hello.\" + containerId1;\r\n    NodeId nodeId1 = NodeId.fromString(NM_ID);\r\n    TestContainerLogsUtils.createContainerLogFileInRemoteFS(conf, fs, rootLogDir, appId, Collections.singletonMap(containerId1, content1), nodeId1, fileName, user, true);\r\n    response = r.path(\"ws\").path(\"v1\").path(\"applicationhistory\").path(\"containers\").path(containerId1.toString()).path(\"logs\").path(fileName).queryParam(\"user.name\", user).queryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE, \"true\").accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\r\n    responseText = response.getEntity(String.class);\r\n    assertTrue(responseText.contains(content1));\r\n    assertTrue(responseText.contains(\"LogAggregationType: \" + ContainerLogAggregationType.AGGREGATED));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "testContainerLogsMetaForRunningApps",
  "errType" : null,
  "containingMethodsNum" : 39,
  "sourceCodeText" : "void testContainerLogsMetaForRunningApps() throws Exception\n{\r\n    String user = \"user1\";\r\n    ApplicationId appId = ApplicationId.newInstance(1234, 1);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId containerId1 = ContainerId.newContainerId(appAttemptId, 1);\r\n    WebResource r = resource();\r\n    URI requestURI = r.path(\"ws\").path(\"v1\").path(\"applicationhistory\").path(\"containers\").path(containerId1.toString()).path(\"logs\").queryParam(\"user.name\", user).queryParam(YarnWebServiceParams.NM_ID, NM_ID).getURI();\r\n    String redirectURL = getRedirectURL(requestURI.toString());\r\n    assertTrue(redirectURL != null);\r\n    assertTrue(redirectURL.contains(NM_WEBADDRESS));\r\n    assertTrue(redirectURL.contains(\"ws/v1/node/containers\"));\r\n    assertTrue(redirectURL.contains(containerId1.toString()));\r\n    assertTrue(redirectURL.contains(\"/logs\"));\r\n    requestURI = r.path(\"ws\").path(\"v1\").path(\"applicationhistory\").path(\"containers\").path(containerId1.toString()).path(\"logs\").queryParam(\"user.name\", user).getURI();\r\n    redirectURL = getRedirectURL(requestURI.toString());\r\n    assertTrue(redirectURL != null);\r\n    assertTrue(redirectURL.contains(\"test:1234\"));\r\n    assertTrue(redirectURL.contains(\"ws/v1/node/containers\"));\r\n    assertTrue(redirectURL.contains(containerId1.toString()));\r\n    assertTrue(redirectURL.contains(\"/logs\"));\r\n    ContainerId containerId1000 = ContainerId.newContainerId(appAttemptId, 1000);\r\n    String fileName = \"syslog\";\r\n    String content = \"Hello.\" + containerId1000;\r\n    NodeId nodeId = NodeId.newInstance(\"test host\", 100);\r\n    TestContainerLogsUtils.createContainerLogFileInRemoteFS(conf, fs, rootLogDir, appId, Collections.singletonMap(containerId1000, content), nodeId, fileName, user, true);\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"applicationhistory\").path(\"containers\").path(containerId1000.toString()).path(\"logs\").queryParam(\"user.name\", user).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    List<ContainerLogsInfo> responseText = response.getEntity(new GenericType<List<ContainerLogsInfo>>() {\r\n    });\r\n    assertTrue(responseText.size() == 2);\r\n    for (ContainerLogsInfo logInfo : responseText) {\r\n        if (logInfo.getLogType().equals(ContainerLogAggregationType.AGGREGATED.toString())) {\r\n            List<ContainerLogFileInfo> logMeta = logInfo.getContainerLogsInfo();\r\n            assertTrue(logMeta.size() == 1);\r\n            assertThat(logMeta.get(0).getFileName()).isEqualTo(fileName);\r\n            assertThat(logMeta.get(0).getFileSize()).isEqualTo(String.valueOf(content.length()));\r\n        } else {\r\n            assertEquals(logInfo.getLogType(), ContainerLogAggregationType.LOCAL.toString());\r\n        }\r\n    }\r\n    response = r.path(\"ws\").path(\"v1\").path(\"applicationhistory\").path(\"containers\").path(containerId1000.toString()).path(\"logs\").queryParam(YarnWebServiceParams.NM_ID, \"invalid-nm:1234\").queryParam(\"user.name\", user).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    responseText = response.getEntity(new GenericType<List<ContainerLogsInfo>>() {\r\n    });\r\n    assertTrue(responseText.size() == 2);\r\n    for (ContainerLogsInfo logInfo : responseText) {\r\n        if (logInfo.getLogType().equals(ContainerLogAggregationType.AGGREGATED.toString())) {\r\n            List<ContainerLogFileInfo> logMeta = logInfo.getContainerLogsInfo();\r\n            assertTrue(logMeta.size() == 1);\r\n            assertThat(logMeta.get(0).getFileName()).isEqualTo(fileName);\r\n            assertThat(logMeta.get(0).getFileSize()).isEqualTo(String.valueOf(content.length()));\r\n        } else {\r\n            assertThat(logInfo.getLogType()).isEqualTo(ContainerLogAggregationType.LOCAL.toString());\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "testContainerLogsMetaForFinishedApps",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testContainerLogsMetaForFinishedApps() throws Exception\n{\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId containerId1 = ContainerId.newContainerId(appAttemptId, 1);\r\n    String fileName = \"syslog\";\r\n    String user = \"user1\";\r\n    String content = \"Hello.\" + containerId1;\r\n    NodeId nodeId = NodeId.newInstance(\"test host\", 100);\r\n    TestContainerLogsUtils.createContainerLogFileInRemoteFS(conf, fs, rootLogDir, appId, Collections.singletonMap(containerId1, content), nodeId, fileName, user, true);\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"applicationhistory\").path(\"containers\").path(containerId1.toString()).path(\"logs\").queryParam(\"user.name\", user).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    List<ContainerLogsInfo> responseText = response.getEntity(new GenericType<List<ContainerLogsInfo>>() {\r\n    });\r\n    assertTrue(responseText.size() == 1);\r\n    assertEquals(responseText.get(0).getLogType(), ContainerLogAggregationType.AGGREGATED.toString());\r\n    List<ContainerLogFileInfo> logMeta = responseText.get(0).getContainerLogsInfo();\r\n    assertTrue(logMeta.size() == 1);\r\n    assertThat(logMeta.get(0).getFileName()).isEqualTo(fileName);\r\n    assertThat(logMeta.get(0).getFileSize()).isEqualTo(String.valueOf(content.length()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "getRedirectURL",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String getRedirectURL(String url)\n{\r\n    String redirectUrl = null;\r\n    try {\r\n        HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();\r\n        conn.setInstanceFollowRedirects(false);\r\n        if (conn.getResponseCode() == HttpServletResponse.SC_TEMPORARY_REDIRECT) {\r\n            redirectUrl = conn.getHeaderField(\"Location\");\r\n        }\r\n    } catch (Exception e) {\r\n    }\r\n    return redirectUrl;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testEncoding",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testEncoding()\n{\r\n    testEncoding(Long.MAX_VALUE);\r\n    testEncoding(Long.MIN_VALUE);\r\n    testEncoding(0l);\r\n    testEncoding(128l);\r\n    testEncoding(256l);\r\n    testEncoding(512l);\r\n    testEncoding(-256l);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testEncoding",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testEncoding(long l)\n{\r\n    byte[] b = GenericObjectMapper.writeReverseOrderedLong(l);\r\n    assertEquals(\"error decoding\", l, GenericObjectMapper.readReverseOrderedLong(b, 0));\r\n    byte[] buf = new byte[16];\r\n    System.arraycopy(b, 0, buf, 5, 8);\r\n    assertEquals(\"error decoding at offset\", l, GenericObjectMapper.readReverseOrderedLong(buf, 5));\r\n    if (l > Long.MIN_VALUE) {\r\n        byte[] a = GenericObjectMapper.writeReverseOrderedLong(l - 1);\r\n        assertEquals(\"error preserving ordering\", 1, WritableComparator.compareBytes(a, 0, a.length, b, 0, b.length));\r\n    }\r\n    if (l < Long.MAX_VALUE) {\r\n        byte[] c = GenericObjectMapper.writeReverseOrderedLong(l + 1);\r\n        assertEquals(\"error preserving ordering\", 1, WritableComparator.compareBytes(b, 0, b.length, c, 0, c.length));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "verify",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void verify(Object o) throws IOException\n{\r\n    assertEquals(o, GenericObjectMapper.read(GenericObjectMapper.write(o)));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testValueTypes",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testValueTypes() throws IOException\n{\r\n    verify(Integer.MAX_VALUE);\r\n    verify(Integer.MIN_VALUE);\r\n    assertEquals(Integer.MAX_VALUE, GenericObjectMapper.read(GenericObjectMapper.write((long) Integer.MAX_VALUE)));\r\n    assertEquals(Integer.MIN_VALUE, GenericObjectMapper.read(GenericObjectMapper.write((long) Integer.MIN_VALUE)));\r\n    verify((long) Integer.MAX_VALUE + 1l);\r\n    verify((long) Integer.MIN_VALUE - 1l);\r\n    verify(Long.MAX_VALUE);\r\n    verify(Long.MIN_VALUE);\r\n    assertEquals(42, GenericObjectMapper.read(GenericObjectMapper.write(42l)));\r\n    verify(42);\r\n    verify(1.23);\r\n    verify(\"abc\");\r\n    verify(true);\r\n    List<String> list = new ArrayList<String>();\r\n    list.add(\"123\");\r\n    list.add(\"abc\");\r\n    verify(list);\r\n    Map<String, String> map = new HashMap<String, String>();\r\n    map.put(\"k1\", \"v1\");\r\n    map.put(\"k2\", \"v2\");\r\n    verify(map);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "loadTestEntityData",
  "errType" : null,
  "containingMethodsNum" : 64,
  "sourceCodeText" : "void loadTestEntityData() throws IOException\n{\r\n    beforeTs = System.currentTimeMillis() - 1;\r\n    TimelineEntities entities = new TimelineEntities();\r\n    Map<String, Set<Object>> primaryFilters = new HashMap<String, Set<Object>>();\r\n    Set<Object> l1 = new HashSet<Object>();\r\n    l1.add(\"username\");\r\n    Set<Object> l2 = new HashSet<Object>();\r\n    l2.add(Integer.MAX_VALUE);\r\n    Set<Object> l3 = new HashSet<Object>();\r\n    l3.add(\"123abc\");\r\n    Set<Object> l4 = new HashSet<Object>();\r\n    l4.add((long) Integer.MAX_VALUE + 1l);\r\n    primaryFilters.put(\"user\", l1);\r\n    primaryFilters.put(\"appname\", l2);\r\n    primaryFilters.put(\"other\", l3);\r\n    primaryFilters.put(\"long\", l4);\r\n    Map<String, Object> secondaryFilters = new HashMap<String, Object>();\r\n    secondaryFilters.put(\"startTime\", 123456);\r\n    secondaryFilters.put(\"status\", \"RUNNING\");\r\n    Map<String, Object> otherInfo1 = new HashMap<String, Object>();\r\n    otherInfo1.put(\"info1\", \"val1\");\r\n    otherInfo1.putAll(secondaryFilters);\r\n    String entityId1 = \"id_1\";\r\n    String entityType1 = \"type_1\";\r\n    String entityId1b = \"id_2\";\r\n    String entityId2 = \"id_2\";\r\n    String entityType2 = \"type_2\";\r\n    String entityId4 = \"id_4\";\r\n    String entityType4 = \"type_4\";\r\n    String entityId5 = \"id_5\";\r\n    String entityType5 = \"type_5\";\r\n    String entityId6 = \"id_6\";\r\n    String entityId7 = \"id_7\";\r\n    String entityType7 = \"type_7\";\r\n    Map<String, Set<String>> relatedEntities = new HashMap<String, Set<String>>();\r\n    relatedEntities.put(entityType2, Collections.singleton(entityId2));\r\n    TimelineEvent ev3 = createEvent(789l, \"launch_event\", null);\r\n    TimelineEvent ev4 = createEvent(0l, \"init_event\", null);\r\n    List<TimelineEvent> events = new ArrayList<TimelineEvent>();\r\n    events.add(ev3);\r\n    events.add(ev4);\r\n    entities.setEntities(Collections.singletonList(createEntity(entityId2, entityType2, null, events, null, null, null, \"domain_id_1\")));\r\n    TimelinePutResponse response = store.put(entities);\r\n    assertEquals(0, response.getErrors().size());\r\n    TimelineEvent ev1 = createEvent(123l, \"start_event\", null);\r\n    entities.setEntities(Collections.singletonList(createEntity(entityId1, entityType1, 123l, Collections.singletonList(ev1), relatedEntities, primaryFilters, otherInfo1, \"domain_id_1\")));\r\n    response = store.put(entities);\r\n    assertEquals(0, response.getErrors().size());\r\n    entities.setEntities(Collections.singletonList(createEntity(entityId1b, entityType1, null, Collections.singletonList(ev1), relatedEntities, primaryFilters, otherInfo1, \"domain_id_1\")));\r\n    response = store.put(entities);\r\n    assertEquals(0, response.getErrors().size());\r\n    Map<String, Object> eventInfo = new HashMap<String, Object>();\r\n    eventInfo.put(\"event info 1\", \"val1\");\r\n    TimelineEvent ev2 = createEvent(456l, \"end_event\", eventInfo);\r\n    Map<String, Object> otherInfo2 = new HashMap<String, Object>();\r\n    otherInfo2.put(\"info2\", \"val2\");\r\n    entities.setEntities(Collections.singletonList(createEntity(entityId1, entityType1, null, Collections.singletonList(ev2), null, primaryFilters, otherInfo2, \"domain_id_1\")));\r\n    response = store.put(entities);\r\n    assertEquals(0, response.getErrors().size());\r\n    entities.setEntities(Collections.singletonList(createEntity(entityId1b, entityType1, 789l, Collections.singletonList(ev2), null, primaryFilters, otherInfo2, \"domain_id_1\")));\r\n    response = store.put(entities);\r\n    assertEquals(0, response.getErrors().size());\r\n    entities.setEntities(Collections.singletonList(createEntity(\"badentityid\", \"badentity\", null, null, null, null, otherInfo1, \"domain_id_1\")));\r\n    response = store.put(entities);\r\n    assertEquals(1, response.getErrors().size());\r\n    TimelinePutError error = response.getErrors().get(0);\r\n    assertEquals(\"badentityid\", error.getEntityId());\r\n    assertEquals(\"badentity\", error.getEntityType());\r\n    assertEquals(TimelinePutError.NO_START_TIME, error.getErrorCode());\r\n    relatedEntities.clear();\r\n    relatedEntities.put(entityType5, Collections.singleton(entityId5));\r\n    entities.setEntities(Collections.singletonList(createEntity(entityId4, entityType4, 42l, null, relatedEntities, null, null, \"domain_id_1\")));\r\n    response = store.put(entities);\r\n    relatedEntities.clear();\r\n    otherInfo1.put(\"info2\", \"val2\");\r\n    entities.setEntities(Collections.singletonList(createEntity(entityId6, entityType1, 61l, null, relatedEntities, primaryFilters, otherInfo1, \"domain_id_2\")));\r\n    response = store.put(entities);\r\n    relatedEntities.clear();\r\n    relatedEntities.put(entityType1, Collections.singleton(entityId1));\r\n    entities.setEntities(Collections.singletonList(createEntity(entityId7, entityType7, 62l, null, relatedEntities, null, null, \"domain_id_2\")));\r\n    response = store.put(entities);\r\n    assertEquals(1, response.getErrors().size());\r\n    assertEquals(entityType7, response.getErrors().get(0).getEntityType());\r\n    assertEquals(entityId7, response.getErrors().get(0).getEntityId());\r\n    assertEquals(TimelinePutError.FORBIDDEN_RELATION, response.getErrors().get(0).getErrorCode());\r\n    if (store instanceof LeveldbTimelineStore) {\r\n        LeveldbTimelineStore leveldb = (LeveldbTimelineStore) store;\r\n        entities.setEntities(Collections.singletonList(createEntity(\"OLD_ENTITY_ID_1\", \"OLD_ENTITY_TYPE_1\", 63l, null, null, null, null, null)));\r\n        leveldb.putWithNoDomainId(entities);\r\n        entities.setEntities(Collections.singletonList(createEntity(\"OLD_ENTITY_ID_2\", \"OLD_ENTITY_TYPE_1\", 64l, null, null, null, null, null)));\r\n        leveldb.putWithNoDomainId(entities);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "loadVerificationEntityData",
  "errType" : null,
  "containingMethodsNum" : 34,
  "sourceCodeText" : "void loadVerificationEntityData() throws Exception\n{\r\n    userFilter = new NameValuePair(\"user\", \"username\");\r\n    numericFilter1 = new NameValuePair(\"appname\", Integer.MAX_VALUE);\r\n    numericFilter2 = new NameValuePair(\"long\", (long) Integer.MAX_VALUE + 1l);\r\n    numericFilter3 = new NameValuePair(\"other\", \"123abc\");\r\n    goodTestingFilters = new ArrayList<NameValuePair>();\r\n    goodTestingFilters.add(new NameValuePair(\"appname\", Integer.MAX_VALUE));\r\n    goodTestingFilters.add(new NameValuePair(\"status\", \"RUNNING\"));\r\n    badTestingFilters = new ArrayList<NameValuePair>();\r\n    badTestingFilters.add(new NameValuePair(\"appname\", Integer.MAX_VALUE));\r\n    badTestingFilters.add(new NameValuePair(\"status\", \"FINISHED\"));\r\n    primaryFilters = new HashMap<String, Set<Object>>();\r\n    Set<Object> l1 = new HashSet<Object>();\r\n    l1.add(\"username\");\r\n    Set<Object> l2 = new HashSet<Object>();\r\n    l2.add(Integer.MAX_VALUE);\r\n    Set<Object> l3 = new HashSet<Object>();\r\n    l3.add(\"123abc\");\r\n    Set<Object> l4 = new HashSet<Object>();\r\n    l4.add((long) Integer.MAX_VALUE + 1l);\r\n    primaryFilters.put(\"user\", l1);\r\n    primaryFilters.put(\"appname\", l2);\r\n    primaryFilters.put(\"other\", l3);\r\n    primaryFilters.put(\"long\", l4);\r\n    secondaryFilters = new HashMap<String, Object>();\r\n    secondaryFilters.put(\"startTime\", 123456);\r\n    secondaryFilters.put(\"status\", \"RUNNING\");\r\n    allFilters = new HashMap<String, Object>();\r\n    allFilters.putAll(secondaryFilters);\r\n    for (Entry<String, Set<Object>> pf : primaryFilters.entrySet()) {\r\n        for (Object o : pf.getValue()) {\r\n            allFilters.put(pf.getKey(), o);\r\n        }\r\n    }\r\n    otherInfo = new HashMap<String, Object>();\r\n    otherInfo.put(\"info1\", \"val1\");\r\n    otherInfo.put(\"info2\", \"val2\");\r\n    otherInfo.putAll(secondaryFilters);\r\n    entityId1 = \"id_1\";\r\n    entityType1 = \"type_1\";\r\n    entityId1b = \"id_2\";\r\n    entityId2 = \"id_2\";\r\n    entityType2 = \"type_2\";\r\n    entityId4 = \"id_4\";\r\n    entityType4 = \"type_4\";\r\n    entityId5 = \"id_5\";\r\n    entityType5 = \"type_5\";\r\n    entityId6 = \"id_6\";\r\n    entityId7 = \"id_7\";\r\n    entityType7 = \"type_7\";\r\n    ev1 = createEvent(123l, \"start_event\", null);\r\n    eventInfo = new HashMap<String, Object>();\r\n    eventInfo.put(\"event info 1\", \"val1\");\r\n    ev2 = createEvent(456l, \"end_event\", eventInfo);\r\n    events1 = new ArrayList<TimelineEvent>();\r\n    events1.add(ev2);\r\n    events1.add(ev1);\r\n    relEntityMap = new HashMap<String, Set<String>>();\r\n    Set<String> ids = new HashSet<String>();\r\n    ids.add(entityId1);\r\n    ids.add(entityId1b);\r\n    relEntityMap.put(entityType1, ids);\r\n    relEntityMap2 = new HashMap<String, Set<String>>();\r\n    relEntityMap2.put(entityType4, Collections.singleton(entityId4));\r\n    ev3 = createEvent(789l, \"launch_event\", null);\r\n    ev4 = createEvent(0l, \"init_event\", null);\r\n    events2 = new ArrayList<TimelineEvent>();\r\n    events2.add(ev3);\r\n    events2.add(ev4);\r\n    domainId1 = \"domain_id_1\";\r\n    domainId2 = \"domain_id_2\";\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "loadTestDomainData",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 28,
  "sourceCodeText" : "void loadTestDomainData() throws IOException\n{\r\n    domain1 = new TimelineDomain();\r\n    domain1.setId(\"domain_id_1\");\r\n    domain1.setDescription(\"description_1\");\r\n    domain1.setOwner(\"owner_1\");\r\n    domain1.setReaders(\"reader_user_1 reader_group_1\");\r\n    domain1.setWriters(\"writer_user_1 writer_group_1\");\r\n    store.put(domain1);\r\n    domain2 = new TimelineDomain();\r\n    domain2.setId(\"domain_id_2\");\r\n    domain2.setDescription(\"description_2\");\r\n    domain2.setOwner(\"owner_2\");\r\n    domain2.setReaders(\"reader_user_2 reader_group_2\");\r\n    domain2.setWriters(\"writer_user_2 writer_group_2\");\r\n    store.put(domain2);\r\n    elapsedTime = 1000;\r\n    try {\r\n        Thread.sleep(elapsedTime);\r\n    } catch (InterruptedException e) {\r\n        throw new IOException(e);\r\n    }\r\n    domain2.setDescription(\"description_3\");\r\n    domain2.setOwner(\"owner_3\");\r\n    domain2.setReaders(\"reader_user_3 reader_group_3\");\r\n    domain2.setWriters(\"writer_user_3 writer_group_3\");\r\n    store.put(domain2);\r\n    domain3 = new TimelineDomain();\r\n    domain3.setId(\"domain_id_4\");\r\n    domain3.setDescription(\"description_4\");\r\n    domain3.setOwner(\"owner_1\");\r\n    domain3.setReaders(\"reader_user_4 reader_group_4\");\r\n    domain3.setWriters(\"writer_user_4 writer_group_4\");\r\n    store.put(domain3);\r\n    TimelineEntities entities = new TimelineEntities();\r\n    if (store instanceof LeveldbTimelineStore) {\r\n        LeveldbTimelineStore leveldb = (LeveldbTimelineStore) store;\r\n        entities.setEntities(Collections.singletonList(createEntity(\"ACL_ENTITY_ID_11\", \"ACL_ENTITY_TYPE_1\", 63l, null, null, null, null, \"domain_id_4\")));\r\n        leveldb.put(entities);\r\n        entities.setEntities(Collections.singletonList(createEntity(\"ACL_ENTITY_ID_22\", \"ACL_ENTITY_TYPE_1\", 64l, null, null, null, null, \"domain_id_2\")));\r\n        leveldb.put(entities);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetSingleEntity",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testGetSingleEntity() throws IOException\n{\r\n    verifyEntityInfo(null, null, null, null, null, null, store.getEntity(\"id_1\", \"type_2\", EnumSet.allOf(Field.class)), domainId1);\r\n    verifyEntityInfo(entityId1, entityType1, events1, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, 123l, store.getEntity(entityId1, entityType1, EnumSet.allOf(Field.class)), domainId1);\r\n    verifyEntityInfo(entityId1b, entityType1, events1, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, 123l, store.getEntity(entityId1b, entityType1, EnumSet.allOf(Field.class)), domainId1);\r\n    verifyEntityInfo(entityId2, entityType2, events2, relEntityMap, EMPTY_PRIMARY_FILTERS, EMPTY_MAP, 0l, store.getEntity(entityId2, entityType2, EnumSet.allOf(Field.class)), domainId1);\r\n    verifyEntityInfo(entityId4, entityType4, EMPTY_EVENTS, EMPTY_REL_ENTITIES, EMPTY_PRIMARY_FILTERS, EMPTY_MAP, 42l, store.getEntity(entityId4, entityType4, EnumSet.allOf(Field.class)), domainId1);\r\n    verifyEntityInfo(entityId5, entityType5, EMPTY_EVENTS, relEntityMap2, EMPTY_PRIMARY_FILTERS, EMPTY_MAP, 42l, store.getEntity(entityId5, entityType5, EnumSet.allOf(Field.class)), domainId1);\r\n    verifyEntityInfo(entityId1, entityType1, events1, null, null, null, store.getEntity(entityId1, entityType1, EnumSet.of(Field.EVENTS)), domainId1);\r\n    verifyEntityInfo(entityId1, entityType1, Collections.singletonList(ev2), null, null, null, store.getEntity(entityId1, entityType1, EnumSet.of(Field.LAST_EVENT_ONLY)), domainId1);\r\n    verifyEntityInfo(entityId1b, entityType1, events1, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, store.getEntity(entityId1b, entityType1, null), domainId1);\r\n    verifyEntityInfo(entityId1, entityType1, null, null, primaryFilters, null, store.getEntity(entityId1, entityType1, EnumSet.of(Field.PRIMARY_FILTERS)), domainId1);\r\n    verifyEntityInfo(entityId1, entityType1, null, null, null, otherInfo, store.getEntity(entityId1, entityType1, EnumSet.of(Field.OTHER_INFO)), domainId1);\r\n    verifyEntityInfo(entityId2, entityType2, null, relEntityMap, null, null, store.getEntity(entityId2, entityType2, EnumSet.of(Field.RELATED_ENTITIES)), domainId1);\r\n    verifyEntityInfo(entityId6, entityType1, EMPTY_EVENTS, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, store.getEntity(entityId6, entityType1, EnumSet.allOf(Field.class)), domainId2);\r\n    verifyEntityInfo(entityId7, entityType7, EMPTY_EVENTS, EMPTY_REL_ENTITIES, EMPTY_PRIMARY_FILTERS, EMPTY_MAP, store.getEntity(entityId7, entityType7, EnumSet.allOf(Field.class)), domainId2);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getEntities",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<TimelineEntity> getEntities(String entityType) throws IOException\n{\r\n    return store.getEntities(entityType, null, null, null, null, null, null, null, null, null).getEntities();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getEntitiesWithPrimaryFilter",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<TimelineEntity> getEntitiesWithPrimaryFilter(String entityType, NameValuePair primaryFilter) throws IOException\n{\r\n    return store.getEntities(entityType, null, null, null, null, null, primaryFilter, null, null, null).getEntities();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getEntitiesFromId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<TimelineEntity> getEntitiesFromId(String entityType, String fromId) throws IOException\n{\r\n    return store.getEntities(entityType, null, null, null, fromId, null, null, null, null, null).getEntities();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getEntitiesFromTs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<TimelineEntity> getEntitiesFromTs(String entityType, long fromTs) throws IOException\n{\r\n    return store.getEntities(entityType, null, null, null, null, fromTs, null, null, null, null).getEntities();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getEntitiesFromIdWithPrimaryFilter",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<TimelineEntity> getEntitiesFromIdWithPrimaryFilter(String entityType, NameValuePair primaryFilter, String fromId) throws IOException\n{\r\n    return store.getEntities(entityType, null, null, null, fromId, null, primaryFilter, null, null, null).getEntities();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getEntitiesFromTsWithPrimaryFilter",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<TimelineEntity> getEntitiesFromTsWithPrimaryFilter(String entityType, NameValuePair primaryFilter, long fromTs) throws IOException\n{\r\n    return store.getEntities(entityType, null, null, null, null, fromTs, primaryFilter, null, null, null).getEntities();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getEntitiesFromIdWithWindow",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<TimelineEntity> getEntitiesFromIdWithWindow(String entityType, Long windowEnd, String fromId) throws IOException\n{\r\n    return store.getEntities(entityType, null, null, windowEnd, fromId, null, null, null, null, null).getEntities();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getEntitiesFromIdWithPrimaryFilterAndWindow",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<TimelineEntity> getEntitiesFromIdWithPrimaryFilterAndWindow(String entityType, Long windowEnd, String fromId, NameValuePair primaryFilter) throws IOException\n{\r\n    return store.getEntities(entityType, null, null, windowEnd, fromId, null, primaryFilter, null, null, null).getEntities();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getEntitiesWithFilters",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<TimelineEntity> getEntitiesWithFilters(String entityType, NameValuePair primaryFilter, Collection<NameValuePair> secondaryFilters) throws IOException\n{\r\n    return store.getEntities(entityType, null, null, null, null, null, primaryFilter, secondaryFilters, null, null).getEntities();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getEntitiesWithFilters",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<TimelineEntity> getEntitiesWithFilters(String entityType, NameValuePair primaryFilter, Collection<NameValuePair> secondaryFilters, EnumSet<Field> fields) throws IOException\n{\r\n    return store.getEntities(entityType, null, null, null, null, null, primaryFilter, secondaryFilters, fields, null).getEntities();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getEntities",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<TimelineEntity> getEntities(String entityType, Long limit, Long windowStart, Long windowEnd, NameValuePair primaryFilter, EnumSet<Field> fields) throws IOException\n{\r\n    return store.getEntities(entityType, limit, windowStart, windowEnd, null, null, primaryFilter, null, fields, null).getEntities();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetEntities",
  "errType" : null,
  "containingMethodsNum" : 36,
  "sourceCodeText" : "void testGetEntities() throws IOException\n{\r\n    assertEquals(\"nonzero entities size for nonexistent type\", 0, getEntities(\"type_0\").size());\r\n    assertEquals(\"nonzero entities size for nonexistent type\", 0, getEntities(\"type_3\").size());\r\n    assertEquals(\"nonzero entities size for nonexistent type\", 0, getEntities(\"type_6\").size());\r\n    assertEquals(\"nonzero entities size for nonexistent type\", 0, getEntitiesWithPrimaryFilter(\"type_0\", userFilter).size());\r\n    assertEquals(\"nonzero entities size for nonexistent type\", 0, getEntitiesWithPrimaryFilter(\"type_3\", userFilter).size());\r\n    assertEquals(\"nonzero entities size for nonexistent type\", 0, getEntitiesWithPrimaryFilter(\"type_6\", userFilter).size());\r\n    List<TimelineEntity> entities = getEntities(\"type_1\");\r\n    assertEquals(3, entities.size());\r\n    verifyEntityInfo(entityId1, entityType1, events1, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(0), domainId1);\r\n    verifyEntityInfo(entityId1b, entityType1, events1, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(1), domainId1);\r\n    verifyEntityInfo(entityId6, entityType1, EMPTY_EVENTS, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(2), domainId2);\r\n    entities = getEntities(\"type_2\");\r\n    assertEquals(1, entities.size());\r\n    verifyEntityInfo(entityId2, entityType2, events2, relEntityMap, EMPTY_PRIMARY_FILTERS, EMPTY_MAP, entities.get(0), domainId1);\r\n    entities = getEntities(\"type_1\", 1l, null, null, null, EnumSet.allOf(Field.class));\r\n    assertEquals(1, entities.size());\r\n    verifyEntityInfo(entityId1, entityType1, events1, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(0), domainId1);\r\n    entities = getEntities(\"type_1\", 1l, 0l, null, null, EnumSet.allOf(Field.class));\r\n    assertEquals(1, entities.size());\r\n    verifyEntityInfo(entityId1, entityType1, events1, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(0), domainId1);\r\n    entities = getEntities(\"type_1\", null, 234l, null, null, EnumSet.allOf(Field.class));\r\n    assertEquals(0, entities.size());\r\n    entities = getEntities(\"type_1\", null, 123l, null, null, EnumSet.allOf(Field.class));\r\n    assertEquals(0, entities.size());\r\n    entities = getEntities(\"type_1\", null, 234l, 345l, null, EnumSet.allOf(Field.class));\r\n    assertEquals(0, entities.size());\r\n    entities = getEntities(\"type_1\", null, null, 345l, null, EnumSet.allOf(Field.class));\r\n    assertEquals(3, entities.size());\r\n    verifyEntityInfo(entityId1, entityType1, events1, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(0), domainId1);\r\n    verifyEntityInfo(entityId1b, entityType1, events1, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(1), domainId1);\r\n    verifyEntityInfo(entityId6, entityType1, EMPTY_EVENTS, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(2), domainId2);\r\n    entities = getEntities(\"type_1\", null, null, 123l, null, EnumSet.allOf(Field.class));\r\n    assertEquals(3, entities.size());\r\n    verifyEntityInfo(entityId1, entityType1, events1, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(0), domainId1);\r\n    verifyEntityInfo(entityId1b, entityType1, events1, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(1), domainId1);\r\n    verifyEntityInfo(entityId6, entityType1, EMPTY_EVENTS, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(2), domainId2);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetEntitiesWithFromId",
  "errType" : null,
  "containingMethodsNum" : 43,
  "sourceCodeText" : "void testGetEntitiesWithFromId() throws IOException\n{\r\n    List<TimelineEntity> entities = getEntitiesFromId(\"type_1\", entityId1);\r\n    assertEquals(3, entities.size());\r\n    verifyEntityInfo(entityId1, entityType1, events1, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(0), domainId1);\r\n    verifyEntityInfo(entityId1b, entityType1, events1, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(1), domainId1);\r\n    verifyEntityInfo(entityId6, entityType1, EMPTY_EVENTS, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(2), domainId2);\r\n    entities = getEntitiesFromId(\"type_1\", entityId1b);\r\n    assertEquals(2, entities.size());\r\n    verifyEntityInfo(entityId1b, entityType1, events1, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(0), domainId1);\r\n    verifyEntityInfo(entityId6, entityType1, EMPTY_EVENTS, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(1), domainId2);\r\n    entities = getEntitiesFromId(\"type_1\", entityId6);\r\n    assertEquals(1, entities.size());\r\n    verifyEntityInfo(entityId6, entityType1, EMPTY_EVENTS, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(0), domainId2);\r\n    entities = getEntitiesFromIdWithWindow(\"type_1\", 0l, entityId6);\r\n    assertEquals(0, entities.size());\r\n    entities = getEntitiesFromId(\"type_2\", \"a\");\r\n    assertEquals(0, entities.size());\r\n    entities = getEntitiesFromId(\"type_2\", entityId2);\r\n    assertEquals(1, entities.size());\r\n    verifyEntityInfo(entityId2, entityType2, events2, relEntityMap, EMPTY_PRIMARY_FILTERS, EMPTY_MAP, entities.get(0), domainId1);\r\n    entities = getEntitiesFromIdWithWindow(\"type_2\", -456l, null);\r\n    assertEquals(0, entities.size());\r\n    entities = getEntitiesFromIdWithWindow(\"type_2\", -456l, \"a\");\r\n    assertEquals(0, entities.size());\r\n    entities = getEntitiesFromIdWithWindow(\"type_2\", 0l, null);\r\n    assertEquals(1, entities.size());\r\n    entities = getEntitiesFromIdWithWindow(\"type_2\", 0l, entityId2);\r\n    assertEquals(1, entities.size());\r\n    entities = getEntitiesFromIdWithPrimaryFilter(\"type_1\", userFilter, entityId1);\r\n    assertEquals(3, entities.size());\r\n    verifyEntityInfo(entityId1, entityType1, events1, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(0), domainId1);\r\n    verifyEntityInfo(entityId1b, entityType1, events1, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(1), domainId1);\r\n    verifyEntityInfo(entityId6, entityType1, EMPTY_EVENTS, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(2), domainId2);\r\n    entities = getEntitiesFromIdWithPrimaryFilter(\"type_1\", userFilter, entityId1b);\r\n    assertEquals(2, entities.size());\r\n    verifyEntityInfo(entityId1b, entityType1, events1, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(0), domainId1);\r\n    verifyEntityInfo(entityId6, entityType1, EMPTY_EVENTS, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(1), domainId2);\r\n    entities = getEntitiesFromIdWithPrimaryFilter(\"type_1\", userFilter, entityId6);\r\n    assertEquals(1, entities.size());\r\n    verifyEntityInfo(entityId6, entityType1, EMPTY_EVENTS, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(0), domainId2);\r\n    entities = getEntitiesFromIdWithPrimaryFilterAndWindow(\"type_1\", 0l, entityId6, userFilter);\r\n    assertEquals(0, entities.size());\r\n    entities = getEntitiesFromIdWithPrimaryFilter(\"type_2\", userFilter, \"a\");\r\n    assertEquals(0, entities.size());\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetEntitiesWithFromTs",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testGetEntitiesWithFromTs() throws IOException\n{\r\n    assertEquals(0, getEntitiesFromTs(\"type_1\", beforeTs).size());\r\n    assertEquals(0, getEntitiesFromTs(\"type_2\", beforeTs).size());\r\n    assertEquals(0, getEntitiesFromTsWithPrimaryFilter(\"type_1\", userFilter, beforeTs).size());\r\n    long afterTs = System.currentTimeMillis();\r\n    assertEquals(3, getEntitiesFromTs(\"type_1\", afterTs).size());\r\n    assertEquals(1, getEntitiesFromTs(\"type_2\", afterTs).size());\r\n    assertEquals(3, getEntitiesFromTsWithPrimaryFilter(\"type_1\", userFilter, afterTs).size());\r\n    assertEquals(3, getEntities(\"type_1\").size());\r\n    assertEquals(1, getEntities(\"type_2\").size());\r\n    assertEquals(3, getEntitiesWithPrimaryFilter(\"type_1\", userFilter).size());\r\n    long beforeTs = this.beforeTs;\r\n    loadTestEntityData();\r\n    assertEquals(0, getEntitiesFromTs(\"type_1\", beforeTs).size());\r\n    assertEquals(0, getEntitiesFromTs(\"type_2\", beforeTs).size());\r\n    assertEquals(0, getEntitiesFromTsWithPrimaryFilter(\"type_1\", userFilter, beforeTs).size());\r\n    assertEquals(3, getEntitiesFromTs(\"type_1\", afterTs).size());\r\n    assertEquals(1, getEntitiesFromTs(\"type_2\", afterTs).size());\r\n    assertEquals(3, getEntitiesFromTsWithPrimaryFilter(\"type_1\", userFilter, afterTs).size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetEntitiesWithPrimaryFilters",
  "errType" : null,
  "containingMethodsNum" : 40,
  "sourceCodeText" : "void testGetEntitiesWithPrimaryFilters() throws IOException\n{\r\n    assertEquals(\"nonzero entities size for primary filter\", 0, getEntitiesWithPrimaryFilter(\"type_1\", new NameValuePair(\"none\", \"none\")).size());\r\n    assertEquals(\"nonzero entities size for primary filter\", 0, getEntitiesWithPrimaryFilter(\"type_2\", new NameValuePair(\"none\", \"none\")).size());\r\n    assertEquals(\"nonzero entities size for primary filter\", 0, getEntitiesWithPrimaryFilter(\"type_3\", new NameValuePair(\"none\", \"none\")).size());\r\n    List<TimelineEntity> entities = getEntitiesWithPrimaryFilter(\"type_1\", userFilter);\r\n    assertEquals(3, entities.size());\r\n    verifyEntityInfo(entityId1, entityType1, events1, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(0), domainId1);\r\n    verifyEntityInfo(entityId1b, entityType1, events1, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(1), domainId1);\r\n    verifyEntityInfo(entityId6, entityType1, EMPTY_EVENTS, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(2), domainId2);\r\n    entities = getEntitiesWithPrimaryFilter(\"type_1\", numericFilter1);\r\n    assertEquals(3, entities.size());\r\n    verifyEntityInfo(entityId1, entityType1, events1, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(0), domainId1);\r\n    verifyEntityInfo(entityId1b, entityType1, events1, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(1), domainId1);\r\n    verifyEntityInfo(entityId6, entityType1, EMPTY_EVENTS, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(2), domainId2);\r\n    entities = getEntitiesWithPrimaryFilter(\"type_1\", numericFilter2);\r\n    assertEquals(3, entities.size());\r\n    verifyEntityInfo(entityId1, entityType1, events1, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(0), domainId1);\r\n    verifyEntityInfo(entityId1b, entityType1, events1, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(1), domainId1);\r\n    verifyEntityInfo(entityId6, entityType1, EMPTY_EVENTS, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(2), domainId2);\r\n    entities = getEntitiesWithPrimaryFilter(\"type_1\", numericFilter3);\r\n    assertEquals(3, entities.size());\r\n    verifyEntityInfo(entityId1, entityType1, events1, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(0), domainId1);\r\n    verifyEntityInfo(entityId1b, entityType1, events1, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(1), domainId1);\r\n    verifyEntityInfo(entityId6, entityType1, EMPTY_EVENTS, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(2), domainId2);\r\n    entities = getEntitiesWithPrimaryFilter(\"type_2\", userFilter);\r\n    assertEquals(0, entities.size());\r\n    entities = getEntities(\"type_1\", 1l, null, null, userFilter, null);\r\n    assertEquals(1, entities.size());\r\n    verifyEntityInfo(entityId1, entityType1, events1, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(0), domainId1);\r\n    entities = getEntities(\"type_1\", 1l, 0l, null, userFilter, null);\r\n    assertEquals(1, entities.size());\r\n    verifyEntityInfo(entityId1, entityType1, events1, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(0), domainId1);\r\n    entities = getEntities(\"type_1\", null, 234l, null, userFilter, null);\r\n    assertEquals(0, entities.size());\r\n    entities = getEntities(\"type_1\", null, 234l, 345l, userFilter, null);\r\n    assertEquals(0, entities.size());\r\n    entities = getEntities(\"type_1\", null, null, 345l, userFilter, null);\r\n    assertEquals(3, entities.size());\r\n    verifyEntityInfo(entityId1, entityType1, events1, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(0), domainId1);\r\n    verifyEntityInfo(entityId1b, entityType1, events1, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(1), domainId1);\r\n    verifyEntityInfo(entityId6, entityType1, EMPTY_EVENTS, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(2), domainId2);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetEntitiesWithSecondaryFilters",
  "errType" : null,
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void testGetEntitiesWithSecondaryFilters() throws IOException\n{\r\n    for (int i = 0; i < 4; ++i) {\r\n        EnumSet<Field> fields = null;\r\n        if (i == 1) {\r\n            fields = EnumSet.noneOf(Field.class);\r\n        } else if (i == 2) {\r\n            fields = EnumSet.of(Field.PRIMARY_FILTERS);\r\n        } else if (i == 3) {\r\n            fields = EnumSet.of(Field.OTHER_INFO);\r\n        }\r\n        List<TimelineEntity> entities = getEntitiesWithFilters(\"type_1\", null, goodTestingFilters, fields);\r\n        assertEquals(3, entities.size());\r\n        verifyEntityInfo(entityId1, entityType1, (i == 0 ? events1 : null), (i == 0 ? EMPTY_REL_ENTITIES : null), (i == 0 || i == 2 ? primaryFilters : null), (i == 0 || i == 3 ? otherInfo : null), entities.get(0), domainId1);\r\n        verifyEntityInfo(entityId1b, entityType1, (i == 0 ? events1 : null), (i == 0 ? EMPTY_REL_ENTITIES : null), (i == 0 || i == 2 ? primaryFilters : null), (i == 0 || i == 3 ? otherInfo : null), entities.get(1), domainId1);\r\n        verifyEntityInfo(entityId6, entityType1, (i == 0 ? EMPTY_EVENTS : null), (i == 0 ? EMPTY_REL_ENTITIES : null), (i == 0 || i == 2 ? primaryFilters : null), (i == 0 || i == 3 ? otherInfo : null), entities.get(2), domainId2);\r\n        entities = getEntitiesWithFilters(\"type_1\", userFilter, goodTestingFilters, fields);\r\n        assertEquals(3, entities.size());\r\n        if (i == 0) {\r\n            verifyEntityInfo(entityId1, entityType1, (i == 0 ? events1 : null), (i == 0 ? EMPTY_REL_ENTITIES : null), (i == 0 || i == 2 ? primaryFilters : null), (i == 0 || i == 3 ? otherInfo : null), entities.get(0), domainId1);\r\n            verifyEntityInfo(entityId1b, entityType1, (i == 0 ? events1 : null), (i == 0 ? EMPTY_REL_ENTITIES : null), (i == 0 || i == 2 ? primaryFilters : null), (i == 0 || i == 3 ? otherInfo : null), entities.get(1), domainId1);\r\n            verifyEntityInfo(entityId6, entityType1, (i == 0 ? EMPTY_EVENTS : null), (i == 0 ? EMPTY_REL_ENTITIES : null), (i == 0 || i == 2 ? primaryFilters : null), (i == 0 || i == 3 ? otherInfo : null), entities.get(2), domainId2);\r\n        }\r\n        entities = getEntitiesWithFilters(\"type_1\", null, Collections.singleton(new NameValuePair(\"user\", \"none\")), fields);\r\n        assertEquals(0, entities.size());\r\n        entities = getEntitiesWithFilters(\"type_1\", null, badTestingFilters, fields);\r\n        assertEquals(0, entities.size());\r\n        entities = getEntitiesWithFilters(\"type_1\", userFilter, badTestingFilters, fields);\r\n        assertEquals(0, entities.size());\r\n        entities = getEntitiesWithFilters(\"type_5\", null, badTestingFilters, fields);\r\n        assertEquals(0, entities.size());\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetEvents",
  "errType" : null,
  "containingMethodsNum" : 37,
  "sourceCodeText" : "void testGetEvents() throws IOException\n{\r\n    SortedSet<String> sortedSet = new TreeSet<String>();\r\n    sortedSet.add(entityId1);\r\n    List<EventsOfOneEntity> timelines = store.getEntityTimelines(entityType1, sortedSet, null, null, null, null).getAllEvents();\r\n    assertEquals(1, timelines.size());\r\n    verifyEntityTimeline(timelines.get(0), entityId1, entityType1, ev2, ev1);\r\n    sortedSet.add(entityId1b);\r\n    timelines = store.getEntityTimelines(entityType1, sortedSet, null, null, null, null).getAllEvents();\r\n    assertEquals(2, timelines.size());\r\n    verifyEntityTimeline(timelines.get(0), entityId1, entityType1, ev2, ev1);\r\n    verifyEntityTimeline(timelines.get(1), entityId1b, entityType1, ev2, ev1);\r\n    timelines = store.getEntityTimelines(entityType1, sortedSet, 1l, null, null, null).getAllEvents();\r\n    assertEquals(2, timelines.size());\r\n    verifyEntityTimeline(timelines.get(0), entityId1, entityType1, ev2);\r\n    verifyEntityTimeline(timelines.get(1), entityId1b, entityType1, ev2);\r\n    timelines = store.getEntityTimelines(entityType1, sortedSet, null, 345l, null, null).getAllEvents();\r\n    assertEquals(2, timelines.size());\r\n    verifyEntityTimeline(timelines.get(0), entityId1, entityType1, ev2);\r\n    verifyEntityTimeline(timelines.get(1), entityId1b, entityType1, ev2);\r\n    timelines = store.getEntityTimelines(entityType1, sortedSet, null, 123l, null, null).getAllEvents();\r\n    assertEquals(2, timelines.size());\r\n    verifyEntityTimeline(timelines.get(0), entityId1, entityType1, ev2);\r\n    verifyEntityTimeline(timelines.get(1), entityId1b, entityType1, ev2);\r\n    timelines = store.getEntityTimelines(entityType1, sortedSet, null, null, 345l, null).getAllEvents();\r\n    assertEquals(2, timelines.size());\r\n    verifyEntityTimeline(timelines.get(0), entityId1, entityType1, ev1);\r\n    verifyEntityTimeline(timelines.get(1), entityId1b, entityType1, ev1);\r\n    timelines = store.getEntityTimelines(entityType1, sortedSet, null, null, 123l, null).getAllEvents();\r\n    assertEquals(2, timelines.size());\r\n    verifyEntityTimeline(timelines.get(0), entityId1, entityType1, ev1);\r\n    verifyEntityTimeline(timelines.get(1), entityId1b, entityType1, ev1);\r\n    timelines = store.getEntityTimelines(entityType1, sortedSet, null, null, null, Collections.singleton(\"end_event\")).getAllEvents();\r\n    assertEquals(2, timelines.size());\r\n    verifyEntityTimeline(timelines.get(0), entityId1, entityType1, ev2);\r\n    verifyEntityTimeline(timelines.get(1), entityId1b, entityType1, ev2);\r\n    sortedSet.add(entityId2);\r\n    timelines = store.getEntityTimelines(entityType2, sortedSet, null, null, null, null).getAllEvents();\r\n    assertEquals(1, timelines.size());\r\n    verifyEntityTimeline(timelines.get(0), entityId2, entityType2, ev3, ev4);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "verifyEntityInfo",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void verifyEntityInfo(String entityId, String entityType, List<TimelineEvent> events, Map<String, Set<String>> relatedEntities, Map<String, Set<Object>> primaryFilters, Map<String, Object> otherInfo, Long startTime, TimelineEntity retrievedEntityInfo, String domainId)\n{\r\n    verifyEntityInfo(entityId, entityType, events, relatedEntities, primaryFilters, otherInfo, retrievedEntityInfo, domainId);\r\n    assertEquals(startTime, retrievedEntityInfo.getStartTime());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "verifyEntityInfo",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void verifyEntityInfo(String entityId, String entityType, List<TimelineEvent> events, Map<String, Set<String>> relatedEntities, Map<String, Set<Object>> primaryFilters, Map<String, Object> otherInfo, TimelineEntity retrievedEntityInfo, String domainId)\n{\r\n    if (entityId == null) {\r\n        assertNull(retrievedEntityInfo);\r\n        return;\r\n    }\r\n    assertEquals(entityId, retrievedEntityInfo.getEntityId());\r\n    assertEquals(entityType, retrievedEntityInfo.getEntityType());\r\n    assertEquals(domainId, retrievedEntityInfo.getDomainId());\r\n    if (events == null) {\r\n        assertNull(retrievedEntityInfo.getEvents());\r\n    } else {\r\n        assertEquals(events, retrievedEntityInfo.getEvents());\r\n    }\r\n    if (relatedEntities == null) {\r\n        assertNull(retrievedEntityInfo.getRelatedEntities());\r\n    } else {\r\n        assertEquals(relatedEntities, retrievedEntityInfo.getRelatedEntities());\r\n    }\r\n    if (primaryFilters == null) {\r\n        assertNull(retrievedEntityInfo.getPrimaryFilters());\r\n    } else {\r\n        assertTrue(primaryFilters.equals(retrievedEntityInfo.getPrimaryFilters()));\r\n    }\r\n    if (otherInfo == null) {\r\n        assertNull(retrievedEntityInfo.getOtherInfo());\r\n    } else {\r\n        assertTrue(otherInfo.equals(retrievedEntityInfo.getOtherInfo()));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "verifyEntityTimeline",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void verifyEntityTimeline(EventsOfOneEntity retrievedEvents, String entityId, String entityType, TimelineEvent... actualEvents)\n{\r\n    assertEquals(entityId, retrievedEvents.getEntityId());\r\n    assertEquals(entityType, retrievedEvents.getEntityType());\r\n    assertEquals(actualEvents.length, retrievedEvents.getEvents().size());\r\n    for (int i = 0; i < actualEvents.length; i++) {\r\n        assertEquals(actualEvents[i], retrievedEvents.getEvents().get(i));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "createEntity",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "TimelineEntity createEntity(String entityId, String entityType, Long startTime, List<TimelineEvent> events, Map<String, Set<String>> relatedEntities, Map<String, Set<Object>> primaryFilters, Map<String, Object> otherInfo, String domainId)\n{\r\n    TimelineEntity entity = new TimelineEntity();\r\n    entity.setEntityId(entityId);\r\n    entity.setEntityType(entityType);\r\n    entity.setStartTime(startTime);\r\n    entity.setEvents(events);\r\n    if (relatedEntities != null) {\r\n        for (Entry<String, Set<String>> e : relatedEntities.entrySet()) {\r\n            for (String v : e.getValue()) {\r\n                entity.addRelatedEntity(e.getKey(), v);\r\n            }\r\n        }\r\n    } else {\r\n        entity.setRelatedEntities(null);\r\n    }\r\n    entity.setPrimaryFilters(primaryFilters);\r\n    entity.setOtherInfo(otherInfo);\r\n    entity.setDomainId(domainId);\r\n    return entity;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "createEvent",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "TimelineEvent createEvent(long timestamp, String type, Map<String, Object> info)\n{\r\n    TimelineEvent event = new TimelineEvent();\r\n    event.setTimestamp(timestamp);\r\n    event.setEventType(type);\r\n    event.setEventInfo(info);\r\n    return event;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetDomain",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testGetDomain() throws IOException\n{\r\n    TimelineDomain actualDomain1 = store.getDomain(domain1.getId());\r\n    verifyDomainInfo(domain1, actualDomain1);\r\n    assertTrue(actualDomain1.getCreatedTime() > 0);\r\n    assertTrue(actualDomain1.getModifiedTime() > 0);\r\n    assertEquals(actualDomain1.getCreatedTime(), actualDomain1.getModifiedTime());\r\n    TimelineDomain actualDomain2 = store.getDomain(domain2.getId());\r\n    verifyDomainInfo(domain2, actualDomain2);\r\n    assertEquals(\"domain_id_2\", actualDomain2.getId());\r\n    assertTrue(actualDomain2.getCreatedTime() > 0);\r\n    assertTrue(actualDomain2.getModifiedTime() > 0);\r\n    assertTrue(actualDomain2.getCreatedTime() < actualDomain2.getModifiedTime());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetDomains",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testGetDomains() throws IOException\n{\r\n    TimelineDomains actualDomains = store.getDomains(\"owner_1\");\r\n    assertEquals(2, actualDomains.getDomains().size());\r\n    verifyDomainInfo(domain3, actualDomains.getDomains().get(0));\r\n    verifyDomainInfo(domain1, actualDomains.getDomains().get(1));\r\n    actualDomains = store.getDomains(\"owner_4\");\r\n    assertEquals(0, actualDomains.getDomains().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "verifyDomainInfo",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void verifyDomainInfo(TimelineDomain expected, TimelineDomain actual)\n{\r\n    assertEquals(expected.getId(), actual.getId());\r\n    assertEquals(expected.getDescription(), actual.getDescription());\r\n    assertEquals(expected.getOwner(), actual.getOwner());\r\n    assertEquals(expected.getReaders(), actual.getReaders());\r\n    assertEquals(expected.getWriters(), actual.getWriters());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    fsContext = FileContext.getLocalFSFileContext();\r\n    fsPath = new File(\"target\", this.getClass().getSimpleName() + \"-tmpDir\").getAbsoluteFile();\r\n    fsContext.delete(new Path(fsPath.getAbsolutePath()), true);\r\n    config.set(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_PATH, fsPath.getAbsolutePath());\r\n    config.setBoolean(YarnConfiguration.TIMELINE_SERVICE_TTL_ENABLE, false);\r\n    store = new LeveldbTimelineStore();\r\n    store.init(config);\r\n    store.start();\r\n    loadTestEntityData();\r\n    loadVerificationEntityData();\r\n    loadTestDomainData();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    store.stop();\r\n    fsContext.delete(new Path(fsPath.getAbsolutePath()), true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testRootDirPermission",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testRootDirPermission() throws IOException\n{\r\n    FileSystem fs = FileSystem.getLocal(new YarnConfiguration());\r\n    FileStatus file = fs.getFileStatus(new Path(fsPath.getAbsolutePath(), LeveldbTimelineStore.FILENAME));\r\n    assertNotNull(file);\r\n    assertEquals(LeveldbTimelineStore.LEVELDB_DIR_UMASK, file.getPermission());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetSingleEntity",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetSingleEntity() throws IOException\n{\r\n    super.testGetSingleEntity();\r\n    ((LeveldbTimelineStore) store).clearStartTimeCache();\r\n    super.testGetSingleEntity();\r\n    loadTestEntityData();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetEntities",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetEntities() throws IOException\n{\r\n    super.testGetEntities();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetEntitiesWithFromId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetEntitiesWithFromId() throws IOException\n{\r\n    super.testGetEntitiesWithFromId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetEntitiesWithFromTs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetEntitiesWithFromTs() throws IOException\n{\r\n    super.testGetEntitiesWithFromTs();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetEntitiesWithPrimaryFilters",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetEntitiesWithPrimaryFilters() throws IOException\n{\r\n    super.testGetEntitiesWithPrimaryFilters();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetEntitiesWithSecondaryFilters",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetEntitiesWithSecondaryFilters() throws IOException\n{\r\n    super.testGetEntitiesWithSecondaryFilters();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetEvents",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetEvents() throws IOException\n{\r\n    super.testGetEvents();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testCacheSizes",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testCacheSizes()\n{\r\n    Configuration conf = new Configuration();\r\n    assertEquals(10000, LeveldbTimelineStore.getStartTimeReadCacheSize(conf));\r\n    assertEquals(10000, LeveldbTimelineStore.getStartTimeWriteCacheSize(conf));\r\n    conf.setInt(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE, 10001);\r\n    assertEquals(10001, LeveldbTimelineStore.getStartTimeReadCacheSize(conf));\r\n    conf = new Configuration();\r\n    conf.setInt(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE, 10002);\r\n    assertEquals(10002, LeveldbTimelineStore.getStartTimeWriteCacheSize(conf));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "deleteNextEntity",
  "errType" : [ "DBException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean deleteNextEntity(String entityType, byte[] ts) throws IOException, InterruptedException\n{\r\n    LeveldbIterator iterator = null;\r\n    LeveldbIterator pfIterator = null;\r\n    try {\r\n        iterator = ((LeveldbTimelineStore) store).getDbIterator(false);\r\n        pfIterator = ((LeveldbTimelineStore) store).getDbIterator(false);\r\n        return ((LeveldbTimelineStore) store).deleteNextEntity(entityType, ts, iterator, pfIterator, false);\r\n    } catch (DBException e) {\r\n        throw new IOException(e);\r\n    } finally {\r\n        IOUtils.cleanupWithLogger(null, iterator, pfIterator);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetEntityTypes",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testGetEntityTypes() throws IOException\n{\r\n    List<String> entityTypes = ((LeveldbTimelineStore) store).getEntityTypes();\r\n    assertEquals(7, entityTypes.size());\r\n    assertEquals(\"ACL_ENTITY_TYPE_1\", entityTypes.get(0));\r\n    assertEquals(\"OLD_ENTITY_TYPE_1\", entityTypes.get(1));\r\n    assertEquals(entityType1, entityTypes.get(2));\r\n    assertEquals(entityType2, entityTypes.get(3));\r\n    assertEquals(entityType4, entityTypes.get(4));\r\n    assertEquals(entityType5, entityTypes.get(5));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testDeleteEntities",
  "errType" : null,
  "containingMethodsNum" : 22,
  "sourceCodeText" : "void testDeleteEntities() throws IOException, InterruptedException\n{\r\n    assertEquals(3, getEntities(\"type_1\").size());\r\n    assertEquals(1, getEntities(\"type_2\").size());\r\n    assertEquals(false, deleteNextEntity(entityType1, writeReverseOrderedLong(60L)));\r\n    assertEquals(3, getEntities(\"type_1\").size());\r\n    assertEquals(1, getEntities(\"type_2\").size());\r\n    assertEquals(true, deleteNextEntity(entityType1, writeReverseOrderedLong(123L)));\r\n    List<TimelineEntity> entities = getEntities(\"type_2\");\r\n    assertEquals(1, entities.size());\r\n    verifyEntityInfo(entityId2, entityType2, events2, Collections.singletonMap(entityType1, Collections.singleton(entityId1b)), EMPTY_PRIMARY_FILTERS, EMPTY_MAP, entities.get(0), domainId1);\r\n    entities = getEntitiesWithPrimaryFilter(\"type_1\", userFilter);\r\n    assertEquals(2, entities.size());\r\n    verifyEntityInfo(entityId1b, entityType1, events1, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(0), domainId1);\r\n    verifyEntityInfo(entityId6, entityType1, EMPTY_EVENTS, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(1), domainId2);\r\n    ((LeveldbTimelineStore) store).discardOldEntities(0L);\r\n    assertEquals(2, getEntities(\"type_1\").size());\r\n    assertEquals(0, getEntities(\"type_2\").size());\r\n    assertEquals(6, ((LeveldbTimelineStore) store).getEntityTypes().size());\r\n    ((LeveldbTimelineStore) store).discardOldEntities(123L);\r\n    assertEquals(0, getEntities(\"type_1\").size());\r\n    assertEquals(0, getEntities(\"type_2\").size());\r\n    assertEquals(0, ((LeveldbTimelineStore) store).getEntityTypes().size());\r\n    assertEquals(0, getEntitiesWithPrimaryFilter(\"type_1\", userFilter).size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testDeleteEntitiesPrimaryFilters",
  "errType" : null,
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void testDeleteEntitiesPrimaryFilters() throws IOException, InterruptedException\n{\r\n    Map<String, Set<Object>> primaryFilter = Collections.singletonMap(\"user\", Collections.singleton((Object) \"otheruser\"));\r\n    TimelineEntities atsEntities = new TimelineEntities();\r\n    atsEntities.setEntities(Collections.singletonList(createEntity(entityId1b, entityType1, 789l, Collections.singletonList(ev2), null, primaryFilter, null, domainId1)));\r\n    TimelinePutResponse response = store.put(atsEntities);\r\n    assertEquals(0, response.getErrors().size());\r\n    NameValuePair pfPair = new NameValuePair(\"user\", \"otheruser\");\r\n    List<TimelineEntity> entities = getEntitiesWithPrimaryFilter(\"type_1\", pfPair);\r\n    assertEquals(1, entities.size());\r\n    verifyEntityInfo(entityId1b, entityType1, Collections.singletonList(ev2), EMPTY_REL_ENTITIES, primaryFilter, EMPTY_MAP, entities.get(0), domainId1);\r\n    entities = getEntitiesWithPrimaryFilter(\"type_1\", userFilter);\r\n    assertEquals(3, entities.size());\r\n    verifyEntityInfo(entityId1, entityType1, events1, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(0), domainId1);\r\n    verifyEntityInfo(entityId1b, entityType1, events1, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(1), domainId1);\r\n    verifyEntityInfo(entityId6, entityType1, EMPTY_EVENTS, EMPTY_REL_ENTITIES, primaryFilters, otherInfo, entities.get(2), domainId2);\r\n    ((LeveldbTimelineStore) store).discardOldEntities(-123L);\r\n    assertEquals(1, getEntitiesWithPrimaryFilter(\"type_1\", pfPair).size());\r\n    assertEquals(3, getEntitiesWithPrimaryFilter(\"type_1\", userFilter).size());\r\n    ((LeveldbTimelineStore) store).discardOldEntities(123L);\r\n    assertEquals(0, getEntities(\"type_1\").size());\r\n    assertEquals(0, getEntities(\"type_2\").size());\r\n    assertEquals(0, ((LeveldbTimelineStore) store).getEntityTypes().size());\r\n    assertEquals(0, getEntitiesWithPrimaryFilter(\"type_1\", pfPair).size());\r\n    assertEquals(0, getEntitiesWithPrimaryFilter(\"type_1\", userFilter).size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testFromTsWithDeletion",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testFromTsWithDeletion() throws IOException, InterruptedException\n{\r\n    long l = System.currentTimeMillis();\r\n    assertEquals(3, getEntitiesFromTs(\"type_1\", l).size());\r\n    assertEquals(1, getEntitiesFromTs(\"type_2\", l).size());\r\n    assertEquals(3, getEntitiesFromTsWithPrimaryFilter(\"type_1\", userFilter, l).size());\r\n    ((LeveldbTimelineStore) store).discardOldEntities(123L);\r\n    assertEquals(0, getEntitiesFromTs(\"type_1\", l).size());\r\n    assertEquals(0, getEntitiesFromTs(\"type_2\", l).size());\r\n    assertEquals(0, getEntitiesFromTsWithPrimaryFilter(\"type_1\", userFilter, l).size());\r\n    assertEquals(0, getEntities(\"type_1\").size());\r\n    assertEquals(0, getEntities(\"type_2\").size());\r\n    assertEquals(0, getEntitiesFromTsWithPrimaryFilter(\"type_1\", userFilter, l).size());\r\n    loadTestEntityData();\r\n    assertEquals(0, getEntitiesFromTs(\"type_1\", l).size());\r\n    assertEquals(0, getEntitiesFromTs(\"type_2\", l).size());\r\n    assertEquals(0, getEntitiesFromTsWithPrimaryFilter(\"type_1\", userFilter, l).size());\r\n    assertEquals(3, getEntities(\"type_1\").size());\r\n    assertEquals(1, getEntities(\"type_2\").size());\r\n    assertEquals(3, getEntitiesWithPrimaryFilter(\"type_1\", userFilter).size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testCheckVersion",
  "errType" : [ "ServiceStateException" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testCheckVersion() throws IOException\n{\r\n    LeveldbTimelineStore dbStore = (LeveldbTimelineStore) store;\r\n    Version defaultVersion = dbStore.getCurrentVersion();\r\n    Assert.assertEquals(defaultVersion, dbStore.loadVersion());\r\n    Version compatibleVersion = Version.newInstance(defaultVersion.getMajorVersion(), defaultVersion.getMinorVersion() + 2);\r\n    dbStore.storeVersion(compatibleVersion);\r\n    Assert.assertEquals(compatibleVersion, dbStore.loadVersion());\r\n    restartTimelineStore();\r\n    dbStore = (LeveldbTimelineStore) store;\r\n    Assert.assertEquals(defaultVersion, dbStore.loadVersion());\r\n    Version incompatibleVersion = Version.newInstance(defaultVersion.getMajorVersion() + 1, defaultVersion.getMinorVersion());\r\n    dbStore.storeVersion(incompatibleVersion);\r\n    try {\r\n        restartTimelineStore();\r\n        Assert.fail(\"Incompatible version, should expect fail here.\");\r\n    } catch (ServiceStateException e) {\r\n        Assert.assertTrue(\"Exception message mismatch\", e.getMessage().contains(\"Incompatible version for timeline store\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testValidateConfig",
  "errType" : [ "IllegalArgumentException", "IllegalArgumentException", "IllegalArgumentException", "IllegalArgumentException", "IllegalArgumentException" ],
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void testValidateConfig() throws IOException\n{\r\n    Configuration copyConfig = new YarnConfiguration(config);\r\n    try {\r\n        Configuration newConfig = new YarnConfiguration(copyConfig);\r\n        newConfig.setLong(YarnConfiguration.TIMELINE_SERVICE_TTL_MS, 0);\r\n        config = newConfig;\r\n        restartTimelineStore();\r\n        Assert.fail();\r\n    } catch (IllegalArgumentException e) {\r\n        Assert.assertTrue(e.getMessage().contains(YarnConfiguration.TIMELINE_SERVICE_TTL_MS));\r\n    }\r\n    try {\r\n        Configuration newConfig = new YarnConfiguration(copyConfig);\r\n        newConfig.setLong(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS, 0);\r\n        config = newConfig;\r\n        restartTimelineStore();\r\n        Assert.fail();\r\n    } catch (IllegalArgumentException e) {\r\n        Assert.assertTrue(e.getMessage().contains(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS));\r\n    }\r\n    try {\r\n        Configuration newConfig = new YarnConfiguration(copyConfig);\r\n        newConfig.setLong(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE, -1);\r\n        config = newConfig;\r\n        restartTimelineStore();\r\n        Assert.fail();\r\n    } catch (IllegalArgumentException e) {\r\n        Assert.assertTrue(e.getMessage().contains(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE));\r\n    }\r\n    try {\r\n        Configuration newConfig = new YarnConfiguration(copyConfig);\r\n        newConfig.setLong(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE, 0);\r\n        config = newConfig;\r\n        restartTimelineStore();\r\n        Assert.fail();\r\n    } catch (IllegalArgumentException e) {\r\n        Assert.assertTrue(e.getMessage().contains(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE));\r\n    }\r\n    try {\r\n        Configuration newConfig = new YarnConfiguration(copyConfig);\r\n        newConfig.setLong(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE, 0);\r\n        config = newConfig;\r\n        restartTimelineStore();\r\n        Assert.fail();\r\n    } catch (IllegalArgumentException e) {\r\n        Assert.assertTrue(e.getMessage().contains(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE));\r\n    }\r\n    config = copyConfig;\r\n    restartTimelineStore();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 5,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "restartTimelineStore",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void restartTimelineStore() throws IOException\n{\r\n    if (store != null) {\r\n        store.close();\r\n    }\r\n    store = new LeveldbTimelineStore();\r\n    store.init(config);\r\n    store.start();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetDomain",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetDomain() throws IOException\n{\r\n    super.testGetDomain();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetDomains",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetDomains() throws IOException\n{\r\n    super.testGetDomains();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testRelatingToNonExistingEntity",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testRelatingToNonExistingEntity() throws IOException\n{\r\n    TimelineEntity entityToStore = new TimelineEntity();\r\n    entityToStore.setEntityType(\"TEST_ENTITY_TYPE_1\");\r\n    entityToStore.setEntityId(\"TEST_ENTITY_ID_1\");\r\n    entityToStore.setDomainId(TimelineDataManager.DEFAULT_DOMAIN_ID);\r\n    entityToStore.addRelatedEntity(\"TEST_ENTITY_TYPE_2\", \"TEST_ENTITY_ID_2\");\r\n    TimelineEntities entities = new TimelineEntities();\r\n    entities.addEntity(entityToStore);\r\n    store.put(entities);\r\n    TimelineEntity entityToGet = store.getEntity(\"TEST_ENTITY_ID_2\", \"TEST_ENTITY_TYPE_2\", null);\r\n    Assert.assertNotNull(entityToGet);\r\n    Assert.assertEquals(\"DEFAULT\", entityToGet.getDomainId());\r\n    Assert.assertEquals(\"TEST_ENTITY_TYPE_1\", entityToGet.getRelatedEntities().keySet().iterator().next());\r\n    Assert.assertEquals(\"TEST_ENTITY_ID_1\", entityToGet.getRelatedEntities().values().iterator().next().iterator().next());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testRelatingToOldEntityWithoutDomainId",
  "errType" : null,
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void testRelatingToOldEntityWithoutDomainId() throws IOException\n{\r\n    TimelineEntity entityToStore = new TimelineEntity();\r\n    entityToStore.setEntityType(\"NEW_ENTITY_TYPE_1\");\r\n    entityToStore.setEntityId(\"NEW_ENTITY_ID_1\");\r\n    entityToStore.setDomainId(TimelineDataManager.DEFAULT_DOMAIN_ID);\r\n    entityToStore.addRelatedEntity(\"OLD_ENTITY_TYPE_1\", \"OLD_ENTITY_ID_1\");\r\n    TimelineEntities entities = new TimelineEntities();\r\n    entities.addEntity(entityToStore);\r\n    store.put(entities);\r\n    TimelineEntity entityToGet = store.getEntity(\"OLD_ENTITY_ID_1\", \"OLD_ENTITY_TYPE_1\", null);\r\n    Assert.assertNotNull(entityToGet);\r\n    Assert.assertNull(entityToGet.getDomainId());\r\n    Assert.assertEquals(\"NEW_ENTITY_TYPE_1\", entityToGet.getRelatedEntities().keySet().iterator().next());\r\n    Assert.assertEquals(\"NEW_ENTITY_ID_1\", entityToGet.getRelatedEntities().values().iterator().next().iterator().next());\r\n    entityToStore = new TimelineEntity();\r\n    entityToStore.setEntityType(\"NEW_ENTITY_TYPE_2\");\r\n    entityToStore.setEntityId(\"NEW_ENTITY_ID_2\");\r\n    entityToStore.setDomainId(\"NON_DEFAULT\");\r\n    entityToStore.addRelatedEntity(\"OLD_ENTITY_TYPE_1\", \"OLD_ENTITY_ID_1\");\r\n    entities = new TimelineEntities();\r\n    entities.addEntity(entityToStore);\r\n    TimelinePutResponse response = store.put(entities);\r\n    Assert.assertEquals(1, response.getErrors().size());\r\n    Assert.assertEquals(TimelinePutError.FORBIDDEN_RELATION, response.getErrors().get(0).getErrorCode());\r\n    entityToGet = store.getEntity(\"OLD_ENTITY_ID_1\", \"OLD_ENTITY_TYPE_1\", null);\r\n    Assert.assertNotNull(entityToGet);\r\n    Assert.assertNull(entityToGet.getDomainId());\r\n    Assert.assertEquals(1, entityToGet.getRelatedEntities().keySet().size());\r\n    Assert.assertEquals(1, entityToGet.getRelatedEntities().values().iterator().next().size());\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testLevelDbRepair",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testLevelDbRepair() throws IOException\n{\r\n    LeveldbTimelineStore store = new LeveldbTimelineStore();\r\n    JniDBFactory factory = Mockito.mock(JniDBFactory.class);\r\n    Mockito.when(factory.open(Mockito.any(File.class), Mockito.any(Options.class))).thenThrow(new IOException()).thenCallRealMethod();\r\n    store.setFactory(factory);\r\n    File path = new File(\"target\", this.getClass().getSimpleName() + \"-tmpDir1\").getAbsoluteFile();\r\n    Configuration conf = new Configuration(this.config);\r\n    conf.set(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_PATH, path.getAbsolutePath());\r\n    try {\r\n        store.init(conf);\r\n        Mockito.verify(factory, Mockito.times(1)).repair(Mockito.any(File.class), Mockito.any(Options.class));\r\n        FileFilter fileFilter = new WildcardFileFilter(\"*\" + LeveldbTimelineStore.BACKUP_EXT + \"*\");\r\n        Assert.assertTrue(path.listFiles(fileFilter).length > 0);\r\n    } finally {\r\n        store.close();\r\n        fsContext.delete(new Path(path.getAbsolutePath()), true);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    fs = new RawLocalFileSystem();\r\n    initAndStartStore(fs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "initAndStartStore",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void initAndStartStore(final FileSystem fs) throws IOException, URISyntaxException\n{\r\n    Configuration conf = new Configuration();\r\n    fs.initialize(new URI(\"/\"), conf);\r\n    fsWorkingPath = new Path(\"target\", TestFileSystemApplicationHistoryStore.class.getSimpleName());\r\n    fs.delete(fsWorkingPath, true);\r\n    conf.set(YarnConfiguration.FS_APPLICATION_HISTORY_STORE_URI, fsWorkingPath.toString());\r\n    store = new FileSystemApplicationHistoryStore() {\r\n\r\n        @Override\r\n        protected FileSystem getFileSystem(Path path, Configuration conf) {\r\n            return fs;\r\n        }\r\n    };\r\n    store.init(conf);\r\n    store.start();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    store.stop();\r\n    fs.delete(fsWorkingPath, true);\r\n    fs.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testReadWriteHistoryData",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testReadWriteHistoryData() throws IOException\n{\r\n    LOG.info(\"Starting testReadWriteHistoryData\");\r\n    testWriteHistoryData(5);\r\n    testReadHistoryData(5);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testWriteHistoryData",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testWriteHistoryData(int num) throws IOException\n{\r\n    testWriteHistoryData(num, false, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testWriteHistoryData",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testWriteHistoryData(int num, boolean missingContainer, boolean missingApplicationAttempt) throws IOException\n{\r\n    for (int i = 1; i <= num; ++i) {\r\n        ApplicationId appId = ApplicationId.newInstance(0, i);\r\n        writeApplicationStartData(appId);\r\n        for (int j = 1; j <= num; ++j) {\r\n            ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, j);\r\n            writeApplicationAttemptStartData(appAttemptId);\r\n            if (missingApplicationAttempt && j == num) {\r\n                continue;\r\n            }\r\n            for (int k = 1; k <= num; ++k) {\r\n                ContainerId containerId = ContainerId.newContainerId(appAttemptId, k);\r\n                writeContainerStartData(containerId);\r\n                if (missingContainer && k == num) {\r\n                    continue;\r\n                }\r\n                writeContainerFinishData(containerId);\r\n            }\r\n            writeApplicationAttemptFinishData(appAttemptId);\r\n        }\r\n        writeApplicationFinishData(appId);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testReadHistoryData",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testReadHistoryData(int num) throws IOException\n{\r\n    testReadHistoryData(num, false, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testReadHistoryData",
  "errType" : null,
  "containingMethodsNum" : 23,
  "sourceCodeText" : "void testReadHistoryData(int num, boolean missingContainer, boolean missingApplicationAttempt) throws IOException\n{\r\n    Assert.assertEquals(num, store.getAllApplications().size());\r\n    for (int i = 1; i <= num; ++i) {\r\n        ApplicationId appId = ApplicationId.newInstance(0, i);\r\n        ApplicationHistoryData appData = store.getApplication(appId);\r\n        Assert.assertNotNull(appData);\r\n        Assert.assertEquals(appId.toString(), appData.getApplicationName());\r\n        Assert.assertEquals(appId.toString(), appData.getDiagnosticsInfo());\r\n        Assert.assertEquals(num, store.getApplicationAttempts(appId).size());\r\n        for (int j = 1; j <= num; ++j) {\r\n            ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, j);\r\n            ApplicationAttemptHistoryData attemptData = store.getApplicationAttempt(appAttemptId);\r\n            Assert.assertNotNull(attemptData);\r\n            Assert.assertEquals(appAttemptId.toString(), attemptData.getHost());\r\n            if (missingApplicationAttempt && j == num) {\r\n                Assert.assertNull(attemptData.getDiagnosticsInfo());\r\n                continue;\r\n            } else {\r\n                Assert.assertEquals(appAttemptId.toString(), attemptData.getDiagnosticsInfo());\r\n            }\r\n            Assert.assertEquals(num, store.getContainers(appAttemptId).size());\r\n            for (int k = 1; k <= num; ++k) {\r\n                ContainerId containerId = ContainerId.newContainerId(appAttemptId, k);\r\n                ContainerHistoryData containerData = store.getContainer(containerId);\r\n                Assert.assertNotNull(containerData);\r\n                Assert.assertEquals(Priority.newInstance(containerId.getId()), containerData.getPriority());\r\n                if (missingContainer && k == num) {\r\n                    Assert.assertNull(containerData.getDiagnosticsInfo());\r\n                } else {\r\n                    Assert.assertEquals(containerId.toString(), containerData.getDiagnosticsInfo());\r\n                }\r\n            }\r\n            ContainerHistoryData masterContainer = store.getAMContainer(appAttemptId);\r\n            Assert.assertNotNull(masterContainer);\r\n            Assert.assertEquals(ContainerId.newContainerId(appAttemptId, 1), masterContainer.getContainerId());\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testWriteAfterApplicationFinish",
  "errType" : [ "IOException", "IOException", "IOException", "IOException" ],
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testWriteAfterApplicationFinish() throws IOException\n{\r\n    LOG.info(\"Starting testWriteAfterApplicationFinish\");\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    writeApplicationStartData(appId);\r\n    writeApplicationFinishData(appId);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    try {\r\n        writeApplicationAttemptStartData(appAttemptId);\r\n        Assert.fail();\r\n    } catch (IOException e) {\r\n        Assert.assertTrue(e.getMessage().contains(\"is not opened\"));\r\n    }\r\n    try {\r\n        writeApplicationAttemptFinishData(appAttemptId);\r\n        Assert.fail();\r\n    } catch (IOException e) {\r\n        Assert.assertTrue(e.getMessage().contains(\"is not opened\"));\r\n    }\r\n    ContainerId containerId = ContainerId.newContainerId(appAttemptId, 1);\r\n    try {\r\n        writeContainerStartData(containerId);\r\n        Assert.fail();\r\n    } catch (IOException e) {\r\n        Assert.assertTrue(e.getMessage().contains(\"is not opened\"));\r\n    }\r\n    try {\r\n        writeContainerFinishData(containerId);\r\n        Assert.fail();\r\n    } catch (IOException e) {\r\n        Assert.assertTrue(e.getMessage().contains(\"is not opened\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 4,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testMassiveWriteContainerHistoryData",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testMassiveWriteContainerHistoryData() throws IOException\n{\r\n    LOG.info(\"Starting testMassiveWriteContainerHistoryData\");\r\n    long mb = 1024 * 1024;\r\n    long usedDiskBefore = fs.getContentSummary(fsWorkingPath).getLength() / mb;\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    writeApplicationStartData(appId);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    for (int i = 1; i <= 100000; ++i) {\r\n        ContainerId containerId = ContainerId.newContainerId(appAttemptId, i);\r\n        writeContainerStartData(containerId);\r\n        writeContainerFinishData(containerId);\r\n    }\r\n    writeApplicationFinishData(appId);\r\n    long usedDiskAfter = fs.getContentSummary(fsWorkingPath).getLength() / mb;\r\n    Assert.assertTrue((usedDiskAfter - usedDiskBefore) < 20);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testMissingContainerHistoryData",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testMissingContainerHistoryData() throws IOException\n{\r\n    LOG.info(\"Starting testMissingContainerHistoryData\");\r\n    testWriteHistoryData(3, true, false);\r\n    testReadHistoryData(3, true, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testMissingApplicationAttemptHistoryData",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testMissingApplicationAttemptHistoryData() throws IOException\n{\r\n    LOG.info(\"Starting testMissingApplicationAttemptHistoryData\");\r\n    testWriteHistoryData(3, false, true);\r\n    testReadHistoryData(3, false, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testInitExistingWorkingDirectoryInSafeMode",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testInitExistingWorkingDirectoryInSafeMode() throws Exception\n{\r\n    LOG.info(\"Starting testInitExistingWorkingDirectoryInSafeMode\");\r\n    tearDown();\r\n    FileSystem fileSystem = spy(new RawLocalFileSystem());\r\n    FileStatus fileStatus = Mockito.mock(FileStatus.class);\r\n    doReturn(true).when(fileStatus).isDirectory();\r\n    doReturn(fileStatus).when(fileSystem).getFileStatus(any(Path.class));\r\n    try {\r\n        initAndStartStore(fileSystem);\r\n    } catch (Exception e) {\r\n        Assert.fail(\"Exception should not be thrown: \" + e);\r\n    }\r\n    verify(fileStatus, never()).isDirectory();\r\n    verify(fileSystem, times(1)).mkdirs(any(Path.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testInitNonExistingWorkingDirectoryInSafeMode",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testInitNonExistingWorkingDirectoryInSafeMode() throws Exception\n{\r\n    LOG.info(\"Starting testInitNonExistingWorkingDirectoryInSafeMode\");\r\n    tearDown();\r\n    FileSystem fileSystem = spy(new RawLocalFileSystem());\r\n    FileStatus fileStatus = Mockito.mock(FileStatus.class);\r\n    doReturn(false).when(fileStatus).isDirectory();\r\n    doReturn(fileStatus).when(fileSystem).getFileStatus(any(Path.class));\r\n    doThrow(new IOException()).when(fileSystem).mkdirs(any(Path.class));\r\n    try {\r\n        initAndStartStore(fileSystem);\r\n        Assert.fail(\"Exception should have been thrown\");\r\n    } catch (Exception e) {\r\n    }\r\n    verify(fileStatus, never()).isDirectory();\r\n    verify(fileSystem, times(1)).mkdirs(any(Path.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "writeApplicationStartData",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void writeApplicationStartData(ApplicationId appId) throws IOException\n{\r\n    store.applicationStarted(ApplicationStartData.newInstance(appId, appId.toString(), \"test type\", \"test queue\", \"test user\", 0, 0));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "writeApplicationStartData",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void writeApplicationStartData(ApplicationId appId, long startTime) throws IOException\n{\r\n    store.applicationStarted(ApplicationStartData.newInstance(appId, appId.toString(), \"test type\", \"test queue\", \"test user\", 0, startTime));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "writeApplicationFinishData",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void writeApplicationFinishData(ApplicationId appId) throws IOException\n{\r\n    store.applicationFinished(ApplicationFinishData.newInstance(appId, 0, appId.toString(), FinalApplicationStatus.UNDEFINED, YarnApplicationState.FINISHED));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "writeApplicationAttemptStartData",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void writeApplicationAttemptStartData(ApplicationAttemptId appAttemptId) throws IOException\n{\r\n    store.applicationAttemptStarted(ApplicationAttemptStartData.newInstance(appAttemptId, appAttemptId.toString(), 0, ContainerId.newContainerId(appAttemptId, 1)));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "writeApplicationAttemptFinishData",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void writeApplicationAttemptFinishData(ApplicationAttemptId appAttemptId) throws IOException\n{\r\n    store.applicationAttemptFinished(ApplicationAttemptFinishData.newInstance(appAttemptId, appAttemptId.toString(), \"test tracking url\", FinalApplicationStatus.UNDEFINED, YarnApplicationAttemptState.FINISHED));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "writeContainerStartData",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void writeContainerStartData(ContainerId containerId) throws IOException\n{\r\n    store.containerStarted(ContainerStartData.newInstance(containerId, Resource.newInstance(0, 0), NodeId.newInstance(\"localhost\", 0), Priority.newInstance(containerId.getId()), 0));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "writeContainerFinishData",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void writeContainerFinishData(ContainerId containerId) throws IOException\n{\r\n    store.containerFinished(ContainerFinishData.newInstance(containerId, 0, containerId.toString(), 0, ContainerState.COMPLETE));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testStartStopServer",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testStartStopServer() throws Exception\n{\r\n    ApplicationHistoryServer historyServer = new ApplicationHistoryServer();\r\n    Configuration config = new YarnConfiguration();\r\n    config.setClass(YarnConfiguration.TIMELINE_SERVICE_STORE, MemoryTimelineStore.class, TimelineStore.class);\r\n    config.setClass(YarnConfiguration.TIMELINE_SERVICE_STATE_STORE_CLASS, MemoryTimelineStateStore.class, TimelineStateStore.class);\r\n    config.set(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS, \"localhost:0\");\r\n    try {\r\n        try {\r\n            historyServer.init(config);\r\n            config.setInt(YarnConfiguration.TIMELINE_SERVICE_HANDLER_THREAD_COUNT, 0);\r\n            historyServer.start();\r\n            fail();\r\n        } catch (IllegalArgumentException e) {\r\n            Assert.assertTrue(e.getMessage().contains(YarnConfiguration.TIMELINE_SERVICE_HANDLER_THREAD_COUNT));\r\n        }\r\n        config.setInt(YarnConfiguration.TIMELINE_SERVICE_HANDLER_THREAD_COUNT, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_THREAD_COUNT);\r\n        historyServer = new ApplicationHistoryServer();\r\n        historyServer.init(config);\r\n        assertEquals(STATE.INITED, historyServer.getServiceState());\r\n        ApplicationHistoryClientService historyService = historyServer.getClientService();\r\n        assertNotNull(historyServer.getClientService());\r\n        assertEquals(STATE.INITED, historyService.getServiceState());\r\n        historyServer.start();\r\n        assertEquals(STATE.STARTED, historyServer.getServiceState());\r\n        assertEquals(STATE.STARTED, historyService.getServiceState());\r\n        historyServer.stop();\r\n        assertEquals(STATE.STOPPED, historyServer.getServiceState());\r\n    } finally {\r\n        historyServer.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testLaunch",
  "errType" : [ "ExitUtil.ExitException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testLaunch() throws Exception\n{\r\n    ExitUtil.disableSystemExit();\r\n    ApplicationHistoryServer historyServer = null;\r\n    try {\r\n        historyServer = ApplicationHistoryServer.launchAppHistoryServer(new String[0]);\r\n    } catch (ExitUtil.ExitException e) {\r\n        assertEquals(0, e.status);\r\n        ExitUtil.resetFirstExitException();\r\n        fail();\r\n    } finally {\r\n        if (historyServer != null) {\r\n            historyServer.stop();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testLaunchWithArguments",
  "errType" : [ "ExitUtil.ExitException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testLaunchWithArguments() throws Exception\n{\r\n    ExitUtil.disableSystemExit();\r\n    ApplicationHistoryServer historyServer = null;\r\n    try {\r\n        String[] args = new String[2];\r\n        args[0] = \"-D\" + YarnConfiguration.TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS + \"=4000\";\r\n        args[1] = \"-D\" + YarnConfiguration.TIMELINE_SERVICE_TTL_MS + \"=200\";\r\n        historyServer = ApplicationHistoryServer.launchAppHistoryServer(args);\r\n        Configuration conf = historyServer.getConfig();\r\n        assertEquals(\"4000\", conf.get(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS));\r\n        assertEquals(\"200\", conf.get(YarnConfiguration.TIMELINE_SERVICE_TTL_MS));\r\n    } catch (ExitUtil.ExitException e) {\r\n        assertEquals(0, e.status);\r\n        ExitUtil.resetFirstExitException();\r\n        fail();\r\n    } finally {\r\n        if (historyServer != null) {\r\n            historyServer.stop();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testFilterOverrides",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testFilterOverrides() throws Exception\n{\r\n    HashMap<String, String> driver = new HashMap<String, String>();\r\n    driver.put(\"\", TimelineAuthenticationFilterInitializer.class.getName());\r\n    driver.put(StaticUserWebFilter.class.getName(), StaticUserWebFilter.class.getName() + \",\" + TimelineAuthenticationFilterInitializer.class.getName());\r\n    driver.put(AuthenticationFilterInitializer.class.getName(), TimelineAuthenticationFilterInitializer.class.getName());\r\n    driver.put(TimelineAuthenticationFilterInitializer.class.getName(), TimelineAuthenticationFilterInitializer.class.getName());\r\n    driver.put(AuthenticationFilterInitializer.class.getName() + \",\" + TimelineAuthenticationFilterInitializer.class.getName(), TimelineAuthenticationFilterInitializer.class.getName());\r\n    driver.put(AuthenticationFilterInitializer.class.getName() + \", \" + TimelineAuthenticationFilterInitializer.class.getName(), TimelineAuthenticationFilterInitializer.class.getName());\r\n    for (Map.Entry<String, String> entry : driver.entrySet()) {\r\n        String filterInitializer = entry.getKey();\r\n        String expectedValue = entry.getValue();\r\n        ApplicationHistoryServer historyServer = new ApplicationHistoryServer();\r\n        Configuration config = new YarnConfiguration();\r\n        config.setClass(YarnConfiguration.TIMELINE_SERVICE_STORE, MemoryTimelineStore.class, TimelineStore.class);\r\n        config.setClass(YarnConfiguration.TIMELINE_SERVICE_STATE_STORE_CLASS, MemoryTimelineStateStore.class, TimelineStateStore.class);\r\n        config.set(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS, \"localhost:0\");\r\n        try {\r\n            config.set(\"hadoop.http.filter.initializers\", filterInitializer);\r\n            historyServer.init(config);\r\n            historyServer.start();\r\n            Configuration tmp = historyServer.getConfig();\r\n            assertEquals(expectedValue, tmp.get(\"hadoop.http.filter.initializers\"));\r\n        } finally {\r\n            historyServer.stop();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testHostedUIs",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testHostedUIs() throws Exception\n{\r\n    ApplicationHistoryServer historyServer = new ApplicationHistoryServer();\r\n    Configuration config = new YarnConfiguration();\r\n    config.setClass(YarnConfiguration.TIMELINE_SERVICE_STORE, MemoryTimelineStore.class, TimelineStore.class);\r\n    config.setClass(YarnConfiguration.TIMELINE_SERVICE_STATE_STORE_CLASS, MemoryTimelineStateStore.class, TimelineStateStore.class);\r\n    config.set(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS, \"localhost:0\");\r\n    final String UI1 = \"UI1\";\r\n    String connFileStr = \"\";\r\n    File diskFile = new File(\"./pom.xml\");\r\n    String diskFileStr = readInputStream(new FileInputStream(diskFile));\r\n    try {\r\n        config.set(YarnConfiguration.TIMELINE_SERVICE_UI_NAMES, UI1);\r\n        config.set(YarnConfiguration.TIMELINE_SERVICE_UI_WEB_PATH_PREFIX + UI1, \"/\" + UI1);\r\n        config.set(YarnConfiguration.TIMELINE_SERVICE_UI_ON_DISK_PATH_PREFIX + UI1, \"./\");\r\n        historyServer.init(config);\r\n        historyServer.start();\r\n        URL url = new URL(\"http://localhost:\" + historyServer.getPort() + \"/\" + UI1 + \"/pom.xml\");\r\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n        conn.connect();\r\n        assertEquals(HttpURLConnection.HTTP_OK, conn.getResponseCode());\r\n        connFileStr = readInputStream(conn.getInputStream());\r\n    } finally {\r\n        historyServer.stop();\r\n    }\r\n    assertEquals(\"Web file contents should be the same as on disk contents\", diskFileStr, connFileStr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "readInputStream",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String readInputStream(InputStream input) throws Exception\n{\r\n    ByteArrayOutputStream data = new ByteArrayOutputStream();\r\n    byte[] buffer = new byte[512];\r\n    int read;\r\n    while ((read = input.read(buffer)) >= 0) {\r\n        data.write(buffer, 0, read);\r\n    }\r\n    return new String(data.toByteArray(), \"UTF-8\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    fsPath = new File(\"target\", getClass().getSimpleName() + \"-tmpDir\").getAbsoluteFile();\r\n    fsContext = FileContext.getLocalFSFileContext();\r\n    fsContext.delete(new Path(fsPath.getAbsolutePath()), true);\r\n    conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_RECOVERY_ENABLED, true);\r\n    conf.setClass(YarnConfiguration.TIMELINE_SERVICE_STATE_STORE_CLASS, LeveldbTimelineStateStore.class, TimelineStateStore.class);\r\n    conf.set(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_STATE_STORE_PATH, fsPath.getAbsolutePath());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    if (store != null) {\r\n        store.stop();\r\n    }\r\n    if (fsContext != null) {\r\n        fsContext.delete(new Path(fsPath.getAbsolutePath()), true);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "initAndStartTimelineServiceStateStoreService",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "LeveldbTimelineStateStore initAndStartTimelineServiceStateStoreService()\n{\r\n    store = new LeveldbTimelineStateStore();\r\n    store.init(conf);\r\n    store.start();\r\n    return (LeveldbTimelineStateStore) store;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "testTokenStore",
  "errType" : [ "IOException", "IOException" ],
  "containingMethodsNum" : 52,
  "sourceCodeText" : "void testTokenStore() throws Exception\n{\r\n    initAndStartTimelineServiceStateStoreService();\r\n    TimelineServiceState state = store.loadState();\r\n    assertTrue(\"token state not empty\", state.tokenState.isEmpty());\r\n    assertTrue(\"key state not empty\", state.tokenMasterKeyState.isEmpty());\r\n    final DelegationKey key1 = new DelegationKey(1, 2, \"keyData1\".getBytes());\r\n    final TimelineDelegationTokenIdentifier token1 = new TimelineDelegationTokenIdentifier(new Text(\"tokenOwner1\"), new Text(\"tokenRenewer1\"), new Text(\"tokenUser1\"));\r\n    token1.setSequenceNumber(1);\r\n    token1.getBytes();\r\n    final Long tokenDate1 = 1L;\r\n    final TimelineDelegationTokenIdentifier token2 = new TimelineDelegationTokenIdentifier(new Text(\"tokenOwner2\"), new Text(\"tokenRenewer2\"), new Text(\"tokenUser2\"));\r\n    token2.setSequenceNumber(12345678);\r\n    token2.getBytes();\r\n    final Long tokenDate2 = 87654321L;\r\n    store.storeTokenMasterKey(key1);\r\n    try {\r\n        store.storeTokenMasterKey(key1);\r\n        fail(\"redundant store of key undetected\");\r\n    } catch (IOException e) {\r\n    }\r\n    store.storeToken(token1, tokenDate1);\r\n    store.storeToken(token2, tokenDate2);\r\n    try {\r\n        store.storeToken(token1, tokenDate1);\r\n        fail(\"redundant store of token undetected\");\r\n    } catch (IOException e) {\r\n    }\r\n    store.close();\r\n    initAndStartTimelineServiceStateStoreService();\r\n    state = store.loadState();\r\n    assertEquals(\"incorrect loaded token count\", 2, state.tokenState.size());\r\n    assertTrue(\"missing token 1\", state.tokenState.containsKey(token1));\r\n    assertEquals(\"incorrect token 1 date\", tokenDate1, state.tokenState.get(token1));\r\n    assertTrue(\"missing token 2\", state.tokenState.containsKey(token2));\r\n    assertEquals(\"incorrect token 2 date\", tokenDate2, state.tokenState.get(token2));\r\n    assertEquals(\"incorrect master key count\", 1, state.tokenMasterKeyState.size());\r\n    assertTrue(\"missing master key 1\", state.tokenMasterKeyState.contains(key1));\r\n    assertEquals(\"incorrect latest sequence number\", 12345678, state.getLatestSequenceNumber());\r\n    final DelegationKey key2 = new DelegationKey(3, 4, \"keyData2\".getBytes());\r\n    final DelegationKey key3 = new DelegationKey(5, 6, \"keyData3\".getBytes());\r\n    final TimelineDelegationTokenIdentifier token3 = new TimelineDelegationTokenIdentifier(new Text(\"tokenOwner3\"), new Text(\"tokenRenewer3\"), new Text(\"tokenUser3\"));\r\n    token3.setSequenceNumber(12345679);\r\n    token3.getBytes();\r\n    final Long tokenDate3 = 87654321L;\r\n    store.removeToken(token1);\r\n    store.storeTokenMasterKey(key2);\r\n    final Long newTokenDate2 = 975318642L;\r\n    store.updateToken(token2, newTokenDate2);\r\n    store.removeTokenMasterKey(key1);\r\n    store.storeTokenMasterKey(key3);\r\n    store.storeToken(token3, tokenDate3);\r\n    store.close();\r\n    initAndStartTimelineServiceStateStoreService();\r\n    state = store.loadState();\r\n    assertEquals(\"incorrect loaded token count\", 2, state.tokenState.size());\r\n    assertFalse(\"token 1 not removed\", state.tokenState.containsKey(token1));\r\n    assertTrue(\"missing token 2\", state.tokenState.containsKey(token2));\r\n    assertEquals(\"incorrect token 2 date\", newTokenDate2, state.tokenState.get(token2));\r\n    assertTrue(\"missing token 3\", state.tokenState.containsKey(token3));\r\n    assertEquals(\"incorrect token 3 date\", tokenDate3, state.tokenState.get(token3));\r\n    assertEquals(\"incorrect master key count\", 2, state.tokenMasterKeyState.size());\r\n    assertFalse(\"master key 1 not removed\", state.tokenMasterKeyState.contains(key1));\r\n    assertTrue(\"missing master key 2\", state.tokenMasterKeyState.contains(key2));\r\n    assertTrue(\"missing master key 3\", state.tokenMasterKeyState.contains(key3));\r\n    assertEquals(\"incorrect latest sequence number\", 12345679, state.getLatestSequenceNumber());\r\n    store.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\recovery",
  "methodName" : "testCheckVersion",
  "errType" : [ "ServiceStateException" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testCheckVersion() throws IOException\n{\r\n    LeveldbTimelineStateStore store = initAndStartTimelineServiceStateStoreService();\r\n    Version defaultVersion = store.getCurrentVersion();\r\n    Assert.assertEquals(defaultVersion, store.loadVersion());\r\n    Version compatibleVersion = Version.newInstance(defaultVersion.getMajorVersion(), defaultVersion.getMinorVersion() + 2);\r\n    store.storeVersion(compatibleVersion);\r\n    Assert.assertEquals(compatibleVersion, store.loadVersion());\r\n    store.stop();\r\n    store = initAndStartTimelineServiceStateStoreService();\r\n    Assert.assertEquals(defaultVersion, store.loadVersion());\r\n    Version incompatibleVersion = Version.newInstance(defaultVersion.getMajorVersion() + 1, defaultVersion.getMinorVersion());\r\n    store.storeVersion(incompatibleVersion);\r\n    store.stop();\r\n    try {\r\n        initAndStartTimelineServiceStateStoreService();\r\n        Assert.fail(\"Incompatible version, should expect fail here.\");\r\n    } catch (ServiceStateException e) {\r\n        Assert.assertTrue(\"Exception message mismatch\", e.getMessage().contains(\"Incompatible version for timeline state store\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    Configuration conf = new YarnConfiguration();\r\n    TimelineStore store = TestApplicationHistoryManagerOnTimelineStore.createStore(MAX_APPS);\r\n    TimelineACLsManager aclsManager = new TimelineACLsManager(conf);\r\n    aclsManager.setTimelineStore(store);\r\n    dataManager = new TimelineDataManager(store, aclsManager);\r\n    dataManager.init(conf);\r\n    ApplicationACLsManager appAclsManager = new ApplicationACLsManager(conf);\r\n    ApplicationHistoryManagerOnTimelineStore historyManager = new ApplicationHistoryManagerOnTimelineStore(dataManager, appAclsManager);\r\n    historyManager.init(conf);\r\n    historyManager.start();\r\n    clientService = new ApplicationHistoryClientService(historyManager);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testApplicationNotFound",
  "errType" : [ "ApplicationNotFoundException", "Exception" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testApplicationNotFound() throws IOException, YarnException\n{\r\n    ApplicationId appId = null;\r\n    appId = ApplicationId.newInstance(0, MAX_APPS + 1);\r\n    GetApplicationReportRequest request = GetApplicationReportRequest.newInstance(appId);\r\n    try {\r\n        @SuppressWarnings(\"unused\")\r\n        GetApplicationReportResponse response = clientService.getApplicationReport(request);\r\n        Assert.fail(\"Exception should have been thrown before we reach here.\");\r\n    } catch (ApplicationNotFoundException e) {\r\n        Assert.assertTrue(e.getMessage().contains(\"doesn't exist in the timeline store\"));\r\n    } catch (Exception e) {\r\n        Assert.fail(\"Undesired exception caught\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testApplicationAttemptNotFound",
  "errType" : [ "ApplicationAttemptNotFoundException", "Exception" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testApplicationAttemptNotFound() throws IOException, YarnException\n{\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, MAX_APPS + 1);\r\n    GetApplicationAttemptReportRequest request = GetApplicationAttemptReportRequest.newInstance(appAttemptId);\r\n    try {\r\n        @SuppressWarnings(\"unused\")\r\n        GetApplicationAttemptReportResponse response = clientService.getApplicationAttemptReport(request);\r\n        Assert.fail(\"Exception should have been thrown before we reach here.\");\r\n    } catch (ApplicationAttemptNotFoundException e) {\r\n        System.out.println(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().contains(\"doesn't exist in the timeline store\"));\r\n    } catch (Exception e) {\r\n        Assert.fail(\"Undesired exception caught\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testContainerNotFound",
  "errType" : [ "ContainerNotFoundException", "Exception" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testContainerNotFound() throws IOException, YarnException\n{\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId containerId = ContainerId.newContainerId(appAttemptId, MAX_APPS + 1);\r\n    GetContainerReportRequest request = GetContainerReportRequest.newInstance(containerId);\r\n    try {\r\n        @SuppressWarnings(\"unused\")\r\n        GetContainerReportResponse response = clientService.getContainerReport(request);\r\n    } catch (ContainerNotFoundException e) {\r\n        Assert.assertTrue(e.getMessage().contains(\"doesn't exist in the timeline store\"));\r\n    } catch (Exception e) {\r\n        Assert.fail(\"Undesired exception caught\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testApplicationReport",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testApplicationReport() throws IOException, YarnException\n{\r\n    ApplicationId appId = null;\r\n    appId = ApplicationId.newInstance(0, 1);\r\n    GetApplicationReportRequest request = GetApplicationReportRequest.newInstance(appId);\r\n    GetApplicationReportResponse response = clientService.getApplicationReport(request);\r\n    ApplicationReport appReport = response.getApplicationReport();\r\n    Assert.assertNotNull(appReport);\r\n    Assert.assertEquals(123, appReport.getApplicationResourceUsageReport().getMemorySeconds());\r\n    Assert.assertEquals(345, appReport.getApplicationResourceUsageReport().getVcoreSeconds());\r\n    Assert.assertEquals(\"application_0_0001\", appReport.getApplicationId().toString());\r\n    Assert.assertEquals(\"test app type\", appReport.getApplicationType().toString());\r\n    Assert.assertEquals(\"test queue\", appReport.getQueue().toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testApplications",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testApplications() throws IOException, YarnException\n{\r\n    ApplicationId appId = null;\r\n    appId = ApplicationId.newInstance(0, 1);\r\n    ApplicationId appId1 = ApplicationId.newInstance(0, 2);\r\n    GetApplicationsRequest request = GetApplicationsRequest.newInstance();\r\n    GetApplicationsResponse response = clientService.getApplications(request);\r\n    List<ApplicationReport> appReport = response.getApplicationList();\r\n    Assert.assertNotNull(appReport);\r\n    Assert.assertEquals(appId, appReport.get(1).getApplicationId());\r\n    Assert.assertEquals(appId1, appReport.get(0).getApplicationId());\r\n    Configuration conf = new YarnConfiguration();\r\n    conf.setLong(YarnConfiguration.APPLICATION_HISTORY_MAX_APPS, 1);\r\n    ApplicationHistoryManagerOnTimelineStore historyManager2 = new ApplicationHistoryManagerOnTimelineStore(dataManager, new ApplicationACLsManager(conf));\r\n    historyManager2.init(conf);\r\n    historyManager2.start();\r\n    @SuppressWarnings(\"resource\")\r\n    ApplicationHistoryClientService clientService2 = new ApplicationHistoryClientService(historyManager2);\r\n    response = clientService2.getApplications(request);\r\n    appReport = response.getApplicationList();\r\n    Assert.assertNotNull(appReport);\r\n    Assert.assertTrue(appReport.size() == 1);\r\n    Assert.assertEquals(appId1, appReport.get(0).getApplicationId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testApplicationAttemptReport",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testApplicationAttemptReport() throws IOException, YarnException\n{\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    GetApplicationAttemptReportRequest request = GetApplicationAttemptReportRequest.newInstance(appAttemptId);\r\n    GetApplicationAttemptReportResponse response = clientService.getApplicationAttemptReport(request);\r\n    ApplicationAttemptReport attemptReport = response.getApplicationAttemptReport();\r\n    Assert.assertNotNull(attemptReport);\r\n    Assert.assertEquals(\"appattempt_0_0001_000001\", attemptReport.getApplicationAttemptId().toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testApplicationAttempts",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testApplicationAttempts() throws IOException, YarnException\n{\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ApplicationAttemptId appAttemptId1 = ApplicationAttemptId.newInstance(appId, 2);\r\n    GetApplicationAttemptsRequest request = GetApplicationAttemptsRequest.newInstance(appId);\r\n    GetApplicationAttemptsResponse response = clientService.getApplicationAttempts(request);\r\n    List<ApplicationAttemptReport> attemptReports = response.getApplicationAttemptList();\r\n    Assert.assertNotNull(attemptReports);\r\n    Assert.assertEquals(appAttemptId, attemptReports.get(0).getApplicationAttemptId());\r\n    Assert.assertEquals(appAttemptId1, attemptReports.get(1).getApplicationAttemptId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testContainerReport",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testContainerReport() throws IOException, YarnException\n{\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId containerId = ContainerId.newContainerId(appAttemptId, 1);\r\n    GetContainerReportRequest request = GetContainerReportRequest.newInstance(containerId);\r\n    GetContainerReportResponse response = clientService.getContainerReport(request);\r\n    ContainerReport container = response.getContainerReport();\r\n    Assert.assertNotNull(container);\r\n    Assert.assertEquals(containerId, container.getContainerId());\r\n    Assert.assertEquals(\"http://0.0.0.0:8188/applicationhistory/logs/\" + \"test host:100/container_0_0001_01_000001/\" + \"container_0_0001_01_000001/user1\", container.getLogUrl());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testContainers",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testContainers() throws IOException, YarnException\n{\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId containerId = ContainerId.newContainerId(appAttemptId, 1);\r\n    ContainerId containerId1 = ContainerId.newContainerId(appAttemptId, 2);\r\n    GetContainersRequest request = GetContainersRequest.newInstance(appAttemptId);\r\n    GetContainersResponse response = clientService.getContainers(request);\r\n    List<ContainerReport> containers = response.getContainerList();\r\n    Assert.assertNotNull(containers);\r\n    Assert.assertEquals(containerId, containers.get(0).getContainerId());\r\n    Assert.assertEquals(containerId1, containers.get(1).getContainerId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    fsContext = FileContext.getLocalFSFileContext();\r\n    fsPath = new File(\"target\", this.getClass().getSimpleName() + \"-tmpDir\").getAbsoluteFile();\r\n    fsContext.delete(new Path(fsPath.getAbsolutePath()), true);\r\n    config.set(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_PATH, fsPath.getAbsolutePath());\r\n    config.setBoolean(YarnConfiguration.TIMELINE_SERVICE_TTL_ENABLE, false);\r\n    store = new RollingLevelDBTimelineStore();\r\n    store.init(config);\r\n    store.start();\r\n    loadTestEntityData();\r\n    loadVerificationEntityData();\r\n    loadTestDomainData();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    store.stop();\r\n    fsContext.delete(new Path(fsPath.getAbsolutePath()), true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testRootDirPermission",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testRootDirPermission() throws IOException\n{\r\n    FileSystem fs = FileSystem.getLocal(new YarnConfiguration());\r\n    FileStatus file = fs.getFileStatus(new Path(fsPath.getAbsolutePath(), RollingLevelDBTimelineStore.FILENAME));\r\n    assertNotNull(file);\r\n    assertEquals(RollingLevelDBTimelineStore.LEVELDB_DIR_UMASK, file.getPermission());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetSingleEntity",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetSingleEntity() throws IOException\n{\r\n    super.testGetSingleEntity();\r\n    ((RollingLevelDBTimelineStore) store).clearStartTimeCache();\r\n    super.testGetSingleEntity();\r\n    loadTestEntityData();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetEntities",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetEntities() throws IOException\n{\r\n    super.testGetEntities();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetEntitiesWithFromId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetEntitiesWithFromId() throws IOException\n{\r\n    super.testGetEntitiesWithFromId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetEntitiesWithFromTs",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void testGetEntitiesWithFromTs() throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetEntitiesWithPrimaryFilters",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetEntitiesWithPrimaryFilters() throws IOException\n{\r\n    super.testGetEntitiesWithPrimaryFilters();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetEntitiesWithSecondaryFilters",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetEntitiesWithSecondaryFilters() throws IOException\n{\r\n    super.testGetEntitiesWithSecondaryFilters();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetEvents",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetEvents() throws IOException\n{\r\n    super.testGetEvents();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testCacheSizes",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testCacheSizes()\n{\r\n    Configuration conf = new Configuration();\r\n    assertEquals(10000, RollingLevelDBTimelineStore.getStartTimeReadCacheSize(conf));\r\n    assertEquals(10000, RollingLevelDBTimelineStore.getStartTimeWriteCacheSize(conf));\r\n    conf.setInt(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE, 10001);\r\n    assertEquals(10001, RollingLevelDBTimelineStore.getStartTimeReadCacheSize(conf));\r\n    conf = new Configuration();\r\n    conf.setInt(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE, 10002);\r\n    assertEquals(10002, RollingLevelDBTimelineStore.getStartTimeWriteCacheSize(conf));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testCheckVersion",
  "errType" : [ "ServiceStateException" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testCheckVersion() throws IOException\n{\r\n    RollingLevelDBTimelineStore dbStore = (RollingLevelDBTimelineStore) store;\r\n    Version defaultVersion = dbStore.getCurrentVersion();\r\n    Assert.assertEquals(defaultVersion, dbStore.loadVersion());\r\n    Version compatibleVersion = Version.newInstance(defaultVersion.getMajorVersion(), defaultVersion.getMinorVersion() + 2);\r\n    dbStore.storeVersion(compatibleVersion);\r\n    Assert.assertEquals(compatibleVersion, dbStore.loadVersion());\r\n    restartTimelineStore();\r\n    dbStore = (RollingLevelDBTimelineStore) store;\r\n    Assert.assertEquals(defaultVersion, dbStore.loadVersion());\r\n    Version incompatibleVersion = Version.newInstance(defaultVersion.getMajorVersion() + 1, defaultVersion.getMinorVersion());\r\n    dbStore.storeVersion(incompatibleVersion);\r\n    try {\r\n        restartTimelineStore();\r\n        Assert.fail(\"Incompatible version, should expect fail here.\");\r\n    } catch (ServiceStateException e) {\r\n        Assert.assertTrue(\"Exception message mismatch\", e.getMessage().contains(\"Incompatible version for timeline store\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testValidateConfig",
  "errType" : [ "IllegalArgumentException", "IllegalArgumentException", "IllegalArgumentException", "IllegalArgumentException", "IllegalArgumentException" ],
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void testValidateConfig() throws IOException\n{\r\n    Configuration copyConfig = new YarnConfiguration(config);\r\n    try {\r\n        Configuration newConfig = new YarnConfiguration(copyConfig);\r\n        newConfig.setLong(YarnConfiguration.TIMELINE_SERVICE_TTL_MS, 0);\r\n        config = newConfig;\r\n        restartTimelineStore();\r\n        Assert.fail();\r\n    } catch (IllegalArgumentException e) {\r\n        Assert.assertTrue(e.getMessage().contains(YarnConfiguration.TIMELINE_SERVICE_TTL_MS));\r\n    }\r\n    try {\r\n        Configuration newConfig = new YarnConfiguration(copyConfig);\r\n        newConfig.setLong(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS, 0);\r\n        config = newConfig;\r\n        restartTimelineStore();\r\n        Assert.fail();\r\n    } catch (IllegalArgumentException e) {\r\n        Assert.assertTrue(e.getMessage().contains(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS));\r\n    }\r\n    try {\r\n        Configuration newConfig = new YarnConfiguration(copyConfig);\r\n        newConfig.setLong(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE, -1);\r\n        config = newConfig;\r\n        restartTimelineStore();\r\n        Assert.fail();\r\n    } catch (IllegalArgumentException e) {\r\n        Assert.assertTrue(e.getMessage().contains(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE));\r\n    }\r\n    try {\r\n        Configuration newConfig = new YarnConfiguration(copyConfig);\r\n        newConfig.setLong(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE, 0);\r\n        config = newConfig;\r\n        restartTimelineStore();\r\n        Assert.fail();\r\n    } catch (IllegalArgumentException e) {\r\n        Assert.assertTrue(e.getMessage().contains(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE));\r\n    }\r\n    try {\r\n        Configuration newConfig = new YarnConfiguration(copyConfig);\r\n        newConfig.setLong(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE, 0);\r\n        config = newConfig;\r\n        restartTimelineStore();\r\n        Assert.fail();\r\n    } catch (IllegalArgumentException e) {\r\n        Assert.assertTrue(e.getMessage().contains(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE));\r\n    }\r\n    config = copyConfig;\r\n    restartTimelineStore();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 5,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "restartTimelineStore",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void restartTimelineStore() throws IOException\n{\r\n    if (store != null) {\r\n        store.close();\r\n    }\r\n    store = new RollingLevelDBTimelineStore();\r\n    store.init(config);\r\n    store.start();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetDomain",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetDomain() throws IOException\n{\r\n    super.testGetDomain();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetDomains",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetDomains() throws IOException\n{\r\n    super.testGetDomains();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testRelatingToNonExistingEntity",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testRelatingToNonExistingEntity() throws IOException\n{\r\n    TimelineEntity entityToStore = new TimelineEntity();\r\n    entityToStore.setEntityType(\"TEST_ENTITY_TYPE_1\");\r\n    entityToStore.setEntityId(\"TEST_ENTITY_ID_1\");\r\n    entityToStore.setDomainId(TimelineDataManager.DEFAULT_DOMAIN_ID);\r\n    entityToStore.addRelatedEntity(\"TEST_ENTITY_TYPE_2\", \"TEST_ENTITY_ID_2\");\r\n    TimelineEntities entities = new TimelineEntities();\r\n    entities.addEntity(entityToStore);\r\n    store.put(entities);\r\n    TimelineEntity entityToGet = store.getEntity(\"TEST_ENTITY_ID_2\", \"TEST_ENTITY_TYPE_2\", null);\r\n    Assert.assertNotNull(entityToGet);\r\n    Assert.assertEquals(\"DEFAULT\", entityToGet.getDomainId());\r\n    Assert.assertEquals(\"TEST_ENTITY_TYPE_1\", entityToGet.getRelatedEntities().keySet().iterator().next());\r\n    Assert.assertEquals(\"TEST_ENTITY_ID_1\", entityToGet.getRelatedEntities().values().iterator().next().iterator().next());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testRelatingToEntityInSamePut",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testRelatingToEntityInSamePut() throws IOException\n{\r\n    TimelineEntity entityToRelate = new TimelineEntity();\r\n    entityToRelate.setEntityType(\"TEST_ENTITY_TYPE_2\");\r\n    entityToRelate.setEntityId(\"TEST_ENTITY_ID_2\");\r\n    entityToRelate.setDomainId(\"TEST_DOMAIN\");\r\n    TimelineEntity entityToStore = new TimelineEntity();\r\n    entityToStore.setEntityType(\"TEST_ENTITY_TYPE_1\");\r\n    entityToStore.setEntityId(\"TEST_ENTITY_ID_1\");\r\n    entityToStore.setDomainId(\"TEST_DOMAIN\");\r\n    entityToStore.addRelatedEntity(\"TEST_ENTITY_TYPE_2\", \"TEST_ENTITY_ID_2\");\r\n    TimelineEntities entities = new TimelineEntities();\r\n    entities.addEntity(entityToStore);\r\n    entities.addEntity(entityToRelate);\r\n    store.put(entities);\r\n    TimelineEntity entityToGet = store.getEntity(\"TEST_ENTITY_ID_2\", \"TEST_ENTITY_TYPE_2\", null);\r\n    Assert.assertNotNull(entityToGet);\r\n    Assert.assertEquals(\"TEST_DOMAIN\", entityToGet.getDomainId());\r\n    Assert.assertEquals(\"TEST_ENTITY_TYPE_1\", entityToGet.getRelatedEntities().keySet().iterator().next());\r\n    Assert.assertEquals(\"TEST_ENTITY_ID_1\", entityToGet.getRelatedEntities().values().iterator().next().iterator().next());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testRelatingToOldEntityWithoutDomainId",
  "errType" : null,
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void testRelatingToOldEntityWithoutDomainId() throws IOException\n{\r\n    TimelineEntity entityToStore = new TimelineEntity();\r\n    entityToStore.setEntityType(\"NEW_ENTITY_TYPE_1\");\r\n    entityToStore.setEntityId(\"NEW_ENTITY_ID_1\");\r\n    entityToStore.setDomainId(TimelineDataManager.DEFAULT_DOMAIN_ID);\r\n    entityToStore.addRelatedEntity(\"OLD_ENTITY_TYPE_1\", \"OLD_ENTITY_ID_1\");\r\n    TimelineEntities entities = new TimelineEntities();\r\n    entities.addEntity(entityToStore);\r\n    store.put(entities);\r\n    TimelineEntity entityToGet = store.getEntity(\"OLD_ENTITY_ID_1\", \"OLD_ENTITY_TYPE_1\", null);\r\n    Assert.assertNotNull(entityToGet);\r\n    Assert.assertEquals(\"DEFAULT\", entityToGet.getDomainId());\r\n    Assert.assertEquals(\"NEW_ENTITY_TYPE_1\", entityToGet.getRelatedEntities().keySet().iterator().next());\r\n    Assert.assertEquals(\"NEW_ENTITY_ID_1\", entityToGet.getRelatedEntities().values().iterator().next().iterator().next());\r\n    entityToStore = new TimelineEntity();\r\n    entityToStore.setEntityType(\"NEW_ENTITY_TYPE_2\");\r\n    entityToStore.setEntityId(\"NEW_ENTITY_ID_2\");\r\n    entityToStore.setDomainId(\"NON_DEFAULT\");\r\n    entityToStore.addRelatedEntity(\"OLD_ENTITY_TYPE_1\", \"OLD_ENTITY_ID_1\");\r\n    entities = new TimelineEntities();\r\n    entities.addEntity(entityToStore);\r\n    TimelinePutResponse response = store.put(entities);\r\n    Assert.assertEquals(1, response.getErrors().size());\r\n    Assert.assertEquals(TimelinePutError.FORBIDDEN_RELATION, response.getErrors().get(0).getErrorCode());\r\n    entityToGet = store.getEntity(\"OLD_ENTITY_ID_1\", \"OLD_ENTITY_TYPE_1\", null);\r\n    Assert.assertNotNull(entityToGet);\r\n    Assert.assertEquals(\"DEFAULT\", entityToGet.getDomainId());\r\n    Assert.assertEquals(1, entityToGet.getRelatedEntities().keySet().size());\r\n    Assert.assertEquals(1, entityToGet.getRelatedEntities().values().iterator().next().size());\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testStorePerformance",
  "errType" : null,
  "containingMethodsNum" : 33,
  "sourceCodeText" : "void testStorePerformance() throws IOException\n{\r\n    TimelineEntity entityToStorePrep = new TimelineEntity();\r\n    entityToStorePrep.setEntityType(\"TEST_ENTITY_TYPE_PREP\");\r\n    entityToStorePrep.setEntityId(\"TEST_ENTITY_ID_PREP\");\r\n    entityToStorePrep.setDomainId(\"TEST_DOMAIN\");\r\n    entityToStorePrep.addRelatedEntity(\"TEST_ENTITY_TYPE_2\", \"TEST_ENTITY_ID_2\");\r\n    entityToStorePrep.setStartTime(0L);\r\n    TimelineEntities entitiesPrep = new TimelineEntities();\r\n    entitiesPrep.addEntity(entityToStorePrep);\r\n    store.put(entitiesPrep);\r\n    long start = System.currentTimeMillis();\r\n    int num = 1000000;\r\n    Log.getLog().info(\"Start test for \" + num);\r\n    final String tezTaskAttemptId = \"TEZ_TA\";\r\n    final String tezEntityId = \"attempt_1429158534256_0001_1_00_000000_\";\r\n    final String tezTaskId = \"TEZ_T\";\r\n    final String tezDomainId = \"Tez_ATS_application_1429158534256_0001\";\r\n    TimelineEntity entityToStore = new TimelineEntity();\r\n    TimelineEvent startEvt = new TimelineEvent();\r\n    entityToStore.setEntityType(tezTaskAttemptId);\r\n    startEvt.setEventType(\"TASK_ATTEMPT_STARTED\");\r\n    startEvt.setTimestamp(0);\r\n    entityToStore.addEvent(startEvt);\r\n    entityToStore.setDomainId(tezDomainId);\r\n    entityToStore.addPrimaryFilter(\"status\", \"SUCCEEDED\");\r\n    entityToStore.addPrimaryFilter(\"applicationId\", \"application_1429158534256_0001\");\r\n    entityToStore.addPrimaryFilter(\"TEZ_VERTEX_ID\", \"vertex_1429158534256_0001_1_00\");\r\n    entityToStore.addPrimaryFilter(\"TEZ_DAG_ID\", \"dag_1429158534256_0001_1\");\r\n    entityToStore.addPrimaryFilter(\"TEZ_TASK_ID\", \"task_1429158534256_0001_1_00_000000\");\r\n    entityToStore.setStartTime(0L);\r\n    entityToStore.addOtherInfo(\"startTime\", 0);\r\n    entityToStore.addOtherInfo(\"inProgressLogsURL\", \"localhost:8042/inProgressLogsURL\");\r\n    entityToStore.addOtherInfo(\"completedLogsURL\", \"\");\r\n    entityToStore.addOtherInfo(\"nodeId\", \"localhost:54450\");\r\n    entityToStore.addOtherInfo(\"nodeHttpAddress\", \"localhost:8042\");\r\n    entityToStore.addOtherInfo(\"containerId\", \"container_1429158534256_0001_01_000002\");\r\n    entityToStore.addOtherInfo(\"status\", \"RUNNING\");\r\n    entityToStore.addRelatedEntity(tezTaskId, \"TEZ_TASK_ID_1\");\r\n    TimelineEntities entities = new TimelineEntities();\r\n    entities.addEntity(entityToStore);\r\n    for (int i = 0; i < num; ++i) {\r\n        entityToStore.setEntityId(tezEntityId + i);\r\n        store.put(entities);\r\n    }\r\n    long duration = System.currentTimeMillis() - start;\r\n    Log.getLog().info(\"Duration for \" + num + \": \" + duration);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testLevelDbRepair",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testLevelDbRepair() throws IOException\n{\r\n    RollingLevelDBTimelineStore store = new RollingLevelDBTimelineStore();\r\n    JniDBFactory factory = Mockito.mock(JniDBFactory.class);\r\n    Mockito.when(factory.open(Mockito.any(File.class), Mockito.any(Options.class))).thenThrow(new IOException()).thenCallRealMethod();\r\n    store.setFactory(factory);\r\n    File path = new File(\"target\", this.getClass().getSimpleName() + \"-tmpDir2\").getAbsoluteFile();\r\n    Configuration conf = new Configuration(this.config);\r\n    conf.set(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_PATH, path.getAbsolutePath());\r\n    try {\r\n        store.init(conf);\r\n        Mockito.verify(factory, Mockito.times(1)).repair(Mockito.any(File.class), Mockito.any(Options.class));\r\n        FilenameFilter fileFilter = new WildcardFileFilter(\"*\" + RollingLevelDBTimelineStore.BACKUP_EXT + \"*\");\r\n        Assert.assertTrue(new File(path.getAbsolutePath(), RollingLevelDBTimelineStore.FILENAME).list(fileFilter).length > 0);\r\n    } finally {\r\n        store.close();\r\n        fsContext.delete(new Path(path.getAbsolutePath()), true);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "main",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void main(String[] args) throws Exception\n{\r\n    TestRollingLevelDBTimelineStore store = new TestRollingLevelDBTimelineStore();\r\n    store.setup();\r\n    store.testStorePerformance();\r\n    store.tearDown();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "setApplicationHistoryStore",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setApplicationHistoryStore(ApplicationHistoryStore store)\n{\r\n    this.store = store;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setup()\n{\r\n    store = new MemoryApplicationHistoryStore();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "testAppControllerIndex",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testAppControllerIndex() throws Exception\n{\r\n    ApplicationHistoryManager ahManager = mock(ApplicationHistoryManager.class);\r\n    Injector injector = WebAppTests.createMockInjector(ApplicationHistoryManager.class, ahManager);\r\n    AHSController controller = injector.getInstance(AHSController.class);\r\n    controller.index();\r\n    Assert.assertEquals(\"Application History\", controller.get(TITLE, \"unknown\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "testView",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testView() throws Exception\n{\r\n    Injector injector = WebAppTests.createMockInjector(ApplicationBaseProtocol.class, mockApplicationHistoryClientService(5, 1, 1));\r\n    AHSView ahsViewInstance = injector.getInstance(AHSView.class);\r\n    ahsViewInstance.render();\r\n    WebAppTests.flushOutput(injector);\r\n    ahsViewInstance.set(YarnWebParams.APP_STATE, YarnApplicationState.FAILED.toString());\r\n    ahsViewInstance.render();\r\n    WebAppTests.flushOutput(injector);\r\n    ahsViewInstance.set(YarnWebParams.APP_STATE, StringHelper.cjoin(YarnApplicationState.FAILED.toString(), YarnApplicationState.KILLED));\r\n    ahsViewInstance.render();\r\n    WebAppTests.flushOutput(injector);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "testAPPViewNaturalSortType",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testAPPViewNaturalSortType() throws Exception\n{\r\n    Injector injector = WebAppTests.createMockInjector(ApplicationBaseProtocol.class, mockApplicationHistoryClientService(5, 1, 1));\r\n    AHSView ahsViewInstance = injector.getInstance(AHSView.class);\r\n    ahsViewInstance.render();\r\n    WebAppTests.flushOutput(injector);\r\n    Map<String, String> moreParams = ahsViewInstance.context().requestContext().moreParams();\r\n    String appTableColumnsMeta = moreParams.get(\"ui.dataTables.apps.init\");\r\n    Assert.assertTrue(appTableColumnsMeta.indexOf(\"natural\") != -1);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "testAboutPage",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testAboutPage() throws Exception\n{\r\n    Injector injector = WebAppTests.createMockInjector(ApplicationBaseProtocol.class, mockApplicationHistoryClientService(0, 0, 0));\r\n    AboutPage aboutPageInstance = injector.getInstance(AboutPage.class);\r\n    aboutPageInstance.render();\r\n    WebAppTests.flushOutput(injector);\r\n    aboutPageInstance.render();\r\n    WebAppTests.flushOutput(injector);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "testAppPage",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testAppPage() throws Exception\n{\r\n    Injector injector = WebAppTests.createMockInjector(ApplicationBaseProtocol.class, mockApplicationHistoryClientService(1, 5, 1));\r\n    AppPage appPageInstance = injector.getInstance(AppPage.class);\r\n    appPageInstance.render();\r\n    WebAppTests.flushOutput(injector);\r\n    appPageInstance.set(YarnWebParams.APPLICATION_ID, ApplicationId.newInstance(0, 1).toString());\r\n    appPageInstance.render();\r\n    WebAppTests.flushOutput(injector);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "testAppPageNaturalSortType",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testAppPageNaturalSortType() throws Exception\n{\r\n    Injector injector = WebAppTests.createMockInjector(ApplicationBaseProtocol.class, mockApplicationHistoryClientService(1, 5, 1));\r\n    AppPage appPageInstance = injector.getInstance(AppPage.class);\r\n    appPageInstance.render();\r\n    WebAppTests.flushOutput(injector);\r\n    Map<String, String> moreParams = appPageInstance.context().requestContext().moreParams();\r\n    String attemptsTableColumnsMeta = moreParams.get(\"ui.dataTables.attempts.init\");\r\n    Assert.assertTrue(attemptsTableColumnsMeta.indexOf(\"natural\") != -1);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "testAppAttemptPage",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testAppAttemptPage() throws Exception\n{\r\n    Injector injector = WebAppTests.createMockInjector(ApplicationBaseProtocol.class, mockApplicationHistoryClientService(1, 1, 5));\r\n    AppAttemptPage appAttemptPageInstance = injector.getInstance(AppAttemptPage.class);\r\n    appAttemptPageInstance.render();\r\n    WebAppTests.flushOutput(injector);\r\n    appAttemptPageInstance.set(YarnWebParams.APPLICATION_ATTEMPT_ID, ApplicationAttemptId.newInstance(ApplicationId.newInstance(0, 1), 1).toString());\r\n    appAttemptPageInstance.render();\r\n    WebAppTests.flushOutput(injector);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "testAppAttemptPageNaturalSortType",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testAppAttemptPageNaturalSortType() throws Exception\n{\r\n    Injector injector = WebAppTests.createMockInjector(ApplicationBaseProtocol.class, mockApplicationHistoryClientService(1, 1, 5));\r\n    AppAttemptPage appAttemptPageInstance = injector.getInstance(AppAttemptPage.class);\r\n    appAttemptPageInstance.render();\r\n    WebAppTests.flushOutput(injector);\r\n    Map<String, String> moreParams = appAttemptPageInstance.context().requestContext().moreParams();\r\n    String tableColumnsMeta = moreParams.get(\"ui.dataTables.containers.init\");\r\n    Assert.assertTrue(tableColumnsMeta.indexOf(\"natural\") != -1);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "testContainerPage",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testContainerPage() throws Exception\n{\r\n    Injector injector = WebAppTests.createMockInjector(ApplicationBaseProtocol.class, mockApplicationHistoryClientService(1, 1, 1));\r\n    ContainerPage containerPageInstance = injector.getInstance(ContainerPage.class);\r\n    containerPageInstance.render();\r\n    WebAppTests.flushOutput(injector);\r\n    containerPageInstance.set(YarnWebParams.CONTAINER_ID, ContainerId.newContainerId(ApplicationAttemptId.newInstance(ApplicationId.newInstance(0, 1), 1), 1).toString());\r\n    containerPageInstance.render();\r\n    WebAppTests.flushOutput(injector);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice\\webapp",
  "methodName" : "mockApplicationHistoryClientService",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "ApplicationHistoryClientService mockApplicationHistoryClientService(int numApps, int numAppAttempts, int numContainers) throws Exception\n{\r\n    ApplicationHistoryManager ahManager = new MockApplicationHistoryManagerImpl(store);\r\n    ApplicationHistoryClientService historyClientService = new ApplicationHistoryClientService(ahManager);\r\n    for (int i = 1; i <= numApps; ++i) {\r\n        ApplicationId appId = ApplicationId.newInstance(0, i);\r\n        writeApplicationStartData(appId);\r\n        for (int j = 1; j <= numAppAttempts; ++j) {\r\n            ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, j);\r\n            writeApplicationAttemptStartData(appAttemptId);\r\n            for (int k = 1; k <= numContainers; ++k) {\r\n                ContainerId containerId = ContainerId.newContainerId(appAttemptId, k);\r\n                writeContainerStartData(containerId);\r\n                writeContainerFinishData(containerId);\r\n            }\r\n            writeApplicationAttemptFinishData(appAttemptId);\r\n        }\r\n        writeApplicationFinishData(appId);\r\n    }\r\n    return historyClientService;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    fsPath = new File(\"target\", this.getClass().getSimpleName() + \"-tmpDir\").getAbsoluteFile();\r\n    fsContext = FileContext.getLocalFSFileContext();\r\n    fsContext.delete(new Path(fsPath.getAbsolutePath()), true);\r\n    Configuration conf = new YarnConfiguration();\r\n    conf.set(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_PATH, fsPath.getAbsolutePath());\r\n    conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_TTL_ENABLE, false);\r\n    store = new LeveldbTimelineStore();\r\n    store.init(conf);\r\n    store.start();\r\n    loadTestEntityData();\r\n    loadVerificationEntityData();\r\n    loadTestDomainData();\r\n    conf.setBoolean(YarnConfiguration.YARN_ACL_ENABLE, false);\r\n    aclsManager = new TimelineACLsManager(conf);\r\n    aclsManager.setTimelineStore(store);\r\n    dataManaer = new TimelineDataManager(store, aclsManager);\r\n    conf.setBoolean(YarnConfiguration.YARN_ACL_ENABLE, true);\r\n    conf.set(YarnConfiguration.YARN_ADMIN_ACL, \"admin\");\r\n    dataManaer.init(conf);\r\n    adminACLsManager = new AdminACLsManager(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    if (store != null) {\r\n        store.stop();\r\n    }\r\n    if (fsContext != null) {\r\n        fsContext.delete(new Path(fsPath.getAbsolutePath()), true);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetOldEntityWithOutDomainId",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testGetOldEntityWithOutDomainId() throws Exception\n{\r\n    TimelineEntity entity = dataManaer.getEntity(\"OLD_ENTITY_TYPE_1\", \"OLD_ENTITY_ID_1\", null, UserGroupInformation.getCurrentUser());\r\n    Assert.assertNotNull(entity);\r\n    Assert.assertEquals(\"OLD_ENTITY_ID_1\", entity.getEntityId());\r\n    Assert.assertEquals(\"OLD_ENTITY_TYPE_1\", entity.getEntityType());\r\n    Assert.assertEquals(TimelineDataManager.DEFAULT_DOMAIN_ID, entity.getDomainId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetEntitiesAclEnabled",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testGetEntitiesAclEnabled() throws Exception\n{\r\n    AdminACLsManager oldAdminACLsManager = aclsManager.setAdminACLsManager(adminACLsManager);\r\n    try {\r\n        TimelineEntities entities = dataManaer.getEntities(\"ACL_ENTITY_TYPE_1\", null, null, null, null, null, null, 1l, null, UserGroupInformation.createUserForTesting(\"owner_1\", new String[] { \"group1\" }));\r\n        Assert.assertEquals(1, entities.getEntities().size());\r\n        Assert.assertEquals(\"ACL_ENTITY_ID_11\", entities.getEntities().get(0).getEntityId());\r\n    } finally {\r\n        aclsManager.setAdminACLsManager(oldAdminACLsManager);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetOldEntitiesWithOutDomainId",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testGetOldEntitiesWithOutDomainId() throws Exception\n{\r\n    TimelineEntities entities = dataManaer.getEntities(\"OLD_ENTITY_TYPE_1\", null, null, null, null, null, null, null, null, UserGroupInformation.getCurrentUser());\r\n    Assert.assertEquals(2, entities.getEntities().size());\r\n    Assert.assertEquals(\"OLD_ENTITY_ID_2\", entities.getEntities().get(0).getEntityId());\r\n    Assert.assertEquals(\"OLD_ENTITY_TYPE_1\", entities.getEntities().get(0).getEntityType());\r\n    Assert.assertEquals(TimelineDataManager.DEFAULT_DOMAIN_ID, entities.getEntities().get(0).getDomainId());\r\n    Assert.assertEquals(\"OLD_ENTITY_ID_1\", entities.getEntities().get(1).getEntityId());\r\n    Assert.assertEquals(\"OLD_ENTITY_TYPE_1\", entities.getEntities().get(1).getEntityType());\r\n    Assert.assertEquals(TimelineDataManager.DEFAULT_DOMAIN_ID, entities.getEntities().get(1).getDomainId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testUpdatingOldEntityWithoutDomainId",
  "errType" : null,
  "containingMethodsNum" : 25,
  "sourceCodeText" : "void testUpdatingOldEntityWithoutDomainId() throws Exception\n{\r\n    TimelineEntity entity = new TimelineEntity();\r\n    entity.setEntityType(\"OLD_ENTITY_TYPE_1\");\r\n    entity.setEntityId(\"OLD_ENTITY_ID_1\");\r\n    entity.setDomainId(TimelineDataManager.DEFAULT_DOMAIN_ID);\r\n    entity.addOtherInfo(\"NEW_OTHER_INFO_KEY\", \"NEW_OTHER_INFO_VALUE\");\r\n    TimelineEntities entities = new TimelineEntities();\r\n    entities.addEntity(entity);\r\n    TimelinePutResponse response = dataManaer.postEntities(entities, UserGroupInformation.getCurrentUser());\r\n    Assert.assertEquals(0, response.getErrors().size());\r\n    entity = store.getEntity(\"OLD_ENTITY_ID_1\", \"OLD_ENTITY_TYPE_1\", null);\r\n    Assert.assertNotNull(entity);\r\n    Assert.assertEquals(TimelineDataManager.DEFAULT_DOMAIN_ID, entity.getDomainId());\r\n    Assert.assertEquals(1, entity.getOtherInfo().size());\r\n    Assert.assertEquals(\"NEW_OTHER_INFO_KEY\", entity.getOtherInfo().keySet().iterator().next());\r\n    Assert.assertEquals(\"NEW_OTHER_INFO_VALUE\", entity.getOtherInfo().values().iterator().next());\r\n    entity = new TimelineEntity();\r\n    entity.setEntityType(\"OLD_ENTITY_TYPE_1\");\r\n    entity.setEntityId(\"OLD_ENTITY_ID_2\");\r\n    entity.setDomainId(\"NON_DEFAULT\");\r\n    entity.addOtherInfo(\"NEW_OTHER_INFO_KEY\", \"NEW_OTHER_INFO_VALUE\");\r\n    entities = new TimelineEntities();\r\n    entities.addEntity(entity);\r\n    response = dataManaer.postEntities(entities, UserGroupInformation.getCurrentUser());\r\n    Assert.assertEquals(1, response.getErrors().size());\r\n    Assert.assertEquals(TimelinePutResponse.TimelinePutError.ACCESS_DENIED, response.getErrors().get(0).getErrorCode());\r\n    entity = store.getEntity(\"OLD_ENTITY_ID_2\", \"OLD_ENTITY_TYPE_1\", null);\r\n    Assert.assertNotNull(entity);\r\n    Assert.assertNull(entity.getDomainId());\r\n    Assert.assertEquals(0, entity.getOtherInfo().size());\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setup()\n{\r\n    store = new MemoryApplicationHistoryStore();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testReadWriteApplicationHistory",
  "errType" : [ "IOException", "IOException", "IOException" ],
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testReadWriteApplicationHistory() throws Exception\n{\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    try {\r\n        writeApplicationFinishData(appId);\r\n        Assert.fail();\r\n    } catch (IOException e) {\r\n        Assert.assertTrue(e.getMessage().contains(\"is stored before the start information\"));\r\n    }\r\n    int numApps = 5;\r\n    for (int i = 1; i <= numApps; ++i) {\r\n        appId = ApplicationId.newInstance(0, i);\r\n        writeApplicationStartData(appId);\r\n        writeApplicationFinishData(appId);\r\n    }\r\n    Assert.assertEquals(numApps, store.getAllApplications().size());\r\n    for (int i = 1; i <= numApps; ++i) {\r\n        appId = ApplicationId.newInstance(0, i);\r\n        ApplicationHistoryData data = store.getApplication(appId);\r\n        Assert.assertNotNull(data);\r\n        Assert.assertEquals(appId.toString(), data.getApplicationName());\r\n        Assert.assertEquals(appId.toString(), data.getDiagnosticsInfo());\r\n    }\r\n    appId = ApplicationId.newInstance(0, 1);\r\n    try {\r\n        writeApplicationStartData(appId);\r\n        Assert.fail();\r\n    } catch (IOException e) {\r\n        Assert.assertTrue(e.getMessage().contains(\"is already stored\"));\r\n    }\r\n    try {\r\n        writeApplicationFinishData(appId);\r\n        Assert.fail();\r\n    } catch (IOException e) {\r\n        Assert.assertTrue(e.getMessage().contains(\"is already stored\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testReadWriteApplicationAttemptHistory",
  "errType" : [ "IOException", "IOException", "IOException" ],
  "containingMethodsNum" : 23,
  "sourceCodeText" : "void testReadWriteApplicationAttemptHistory() throws Exception\n{\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    try {\r\n        writeApplicationAttemptFinishData(appAttemptId);\r\n        Assert.fail();\r\n    } catch (IOException e) {\r\n        Assert.assertTrue(e.getMessage().contains(\"is stored before the start information\"));\r\n    }\r\n    int numAppAttempts = 5;\r\n    writeApplicationStartData(appId);\r\n    for (int i = 1; i <= numAppAttempts; ++i) {\r\n        appAttemptId = ApplicationAttemptId.newInstance(appId, i);\r\n        writeApplicationAttemptStartData(appAttemptId);\r\n        writeApplicationAttemptFinishData(appAttemptId);\r\n    }\r\n    Assert.assertEquals(numAppAttempts, store.getApplicationAttempts(appId).size());\r\n    for (int i = 1; i <= numAppAttempts; ++i) {\r\n        appAttemptId = ApplicationAttemptId.newInstance(appId, i);\r\n        ApplicationAttemptHistoryData data = store.getApplicationAttempt(appAttemptId);\r\n        Assert.assertNotNull(data);\r\n        Assert.assertEquals(appAttemptId.toString(), data.getHost());\r\n        Assert.assertEquals(appAttemptId.toString(), data.getDiagnosticsInfo());\r\n    }\r\n    writeApplicationFinishData(appId);\r\n    appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    try {\r\n        writeApplicationAttemptStartData(appAttemptId);\r\n        Assert.fail();\r\n    } catch (IOException e) {\r\n        Assert.assertTrue(e.getMessage().contains(\"is already stored\"));\r\n    }\r\n    try {\r\n        writeApplicationAttemptFinishData(appAttemptId);\r\n        Assert.fail();\r\n    } catch (IOException e) {\r\n        Assert.assertTrue(e.getMessage().contains(\"is already stored\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testReadWriteContainerHistory",
  "errType" : [ "IOException", "IOException", "IOException" ],
  "containingMethodsNum" : 27,
  "sourceCodeText" : "void testReadWriteContainerHistory() throws Exception\n{\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId containerId = ContainerId.newContainerId(appAttemptId, 1);\r\n    try {\r\n        writeContainerFinishData(containerId);\r\n        Assert.fail();\r\n    } catch (IOException e) {\r\n        Assert.assertTrue(e.getMessage().contains(\"is stored before the start information\"));\r\n    }\r\n    writeApplicationAttemptStartData(appAttemptId);\r\n    int numContainers = 5;\r\n    for (int i = 1; i <= numContainers; ++i) {\r\n        containerId = ContainerId.newContainerId(appAttemptId, i);\r\n        writeContainerStartData(containerId);\r\n        writeContainerFinishData(containerId);\r\n    }\r\n    Assert.assertEquals(numContainers, store.getContainers(appAttemptId).size());\r\n    for (int i = 1; i <= numContainers; ++i) {\r\n        containerId = ContainerId.newContainerId(appAttemptId, i);\r\n        ContainerHistoryData data = store.getContainer(containerId);\r\n        Assert.assertNotNull(data);\r\n        Assert.assertEquals(Priority.newInstance(containerId.getId()), data.getPriority());\r\n        Assert.assertEquals(containerId.toString(), data.getDiagnosticsInfo());\r\n    }\r\n    ContainerHistoryData masterContainer = store.getAMContainer(appAttemptId);\r\n    Assert.assertNotNull(masterContainer);\r\n    Assert.assertEquals(ContainerId.newContainerId(appAttemptId, 1), masterContainer.getContainerId());\r\n    writeApplicationAttemptFinishData(appAttemptId);\r\n    containerId = ContainerId.newContainerId(appAttemptId, 1);\r\n    try {\r\n        writeContainerStartData(containerId);\r\n        Assert.fail();\r\n    } catch (IOException e) {\r\n        Assert.assertTrue(e.getMessage().contains(\"is already stored\"));\r\n    }\r\n    try {\r\n        writeContainerFinishData(containerId);\r\n        Assert.fail();\r\n    } catch (IOException e) {\r\n        Assert.assertTrue(e.getMessage().contains(\"is already stored\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testMassiveWriteContainerHistory",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testMassiveWriteContainerHistory() throws IOException\n{\r\n    long mb = 1024 * 1024;\r\n    Runtime runtime = Runtime.getRuntime();\r\n    long usedMemoryBefore = (runtime.totalMemory() - runtime.freeMemory()) / mb;\r\n    int numContainers = 100000;\r\n    ApplicationId appId = ApplicationId.newInstance(0, 1);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    for (int i = 1; i <= numContainers; ++i) {\r\n        ContainerId containerId = ContainerId.newContainerId(appAttemptId, i);\r\n        writeContainerStartData(containerId);\r\n        writeContainerFinishData(containerId);\r\n    }\r\n    long usedMemoryAfter = (runtime.totalMemory() - runtime.freeMemory()) / mb;\r\n    Assert.assertTrue((usedMemoryAfter - usedMemoryBefore) < 400);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    super.setUp();\r\n    GuiceServletConfig.setInjector(Guice.createInjector(new WebServletModule()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "mockTimelineStore",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "TimelineStore mockTimelineStore() throws Exception\n{\r\n    beforeTime = System.currentTimeMillis() - 1;\r\n    TestMemoryTimelineStore store = new TestMemoryTimelineStore();\r\n    store.setup();\r\n    return store.getTimelineStore();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "testAbout",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testAbout() throws Exception\n{\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"timeline\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    TimelineAbout actualAbout = response.getEntity(TimelineAbout.class);\r\n    TimelineAbout expectedAbout = TimelineUtils.createTimelineAbout(\"Timeline API\");\r\n    Assert.assertNotNull(\"Timeline service about response is null\", actualAbout);\r\n    Assert.assertEquals(expectedAbout.getAbout(), actualAbout.getAbout());\r\n    Assert.assertEquals(expectedAbout.getTimelineServiceVersion(), actualAbout.getTimelineServiceVersion());\r\n    Assert.assertEquals(expectedAbout.getTimelineServiceBuildVersion(), actualAbout.getTimelineServiceBuildVersion());\r\n    Assert.assertEquals(expectedAbout.getTimelineServiceVersionBuiltOn(), actualAbout.getTimelineServiceVersionBuiltOn());\r\n    Assert.assertEquals(expectedAbout.getHadoopVersion(), actualAbout.getHadoopVersion());\r\n    Assert.assertEquals(expectedAbout.getHadoopBuildVersion(), actualAbout.getHadoopBuildVersion());\r\n    Assert.assertEquals(expectedAbout.getHadoopVersionBuiltOn(), actualAbout.getHadoopVersionBuiltOn());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "verifyEntities",
  "errType" : null,
  "containingMethodsNum" : 26,
  "sourceCodeText" : "void verifyEntities(TimelineEntities entities)\n{\r\n    Assert.assertNotNull(entities);\r\n    Assert.assertEquals(3, entities.getEntities().size());\r\n    TimelineEntity entity1 = entities.getEntities().get(0);\r\n    Assert.assertNotNull(entity1);\r\n    Assert.assertEquals(\"id_1\", entity1.getEntityId());\r\n    Assert.assertEquals(\"type_1\", entity1.getEntityType());\r\n    Assert.assertEquals(123l, entity1.getStartTime().longValue());\r\n    Assert.assertEquals(2, entity1.getEvents().size());\r\n    Assert.assertEquals(4, entity1.getPrimaryFilters().size());\r\n    Assert.assertEquals(4, entity1.getOtherInfo().size());\r\n    TimelineEntity entity2 = entities.getEntities().get(1);\r\n    Assert.assertNotNull(entity2);\r\n    Assert.assertEquals(\"id_2\", entity2.getEntityId());\r\n    Assert.assertEquals(\"type_1\", entity2.getEntityType());\r\n    Assert.assertEquals(123l, entity2.getStartTime().longValue());\r\n    Assert.assertEquals(2, entity2.getEvents().size());\r\n    Assert.assertEquals(4, entity2.getPrimaryFilters().size());\r\n    Assert.assertEquals(4, entity2.getOtherInfo().size());\r\n    TimelineEntity entity3 = entities.getEntities().get(2);\r\n    Assert.assertNotNull(entity2);\r\n    Assert.assertEquals(\"id_6\", entity3.getEntityId());\r\n    Assert.assertEquals(\"type_1\", entity3.getEntityType());\r\n    Assert.assertEquals(61l, entity3.getStartTime().longValue());\r\n    Assert.assertEquals(0, entity3.getEvents().size());\r\n    Assert.assertEquals(4, entity3.getPrimaryFilters().size());\r\n    Assert.assertEquals(4, entity3.getOtherInfo().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "testGetEntities",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetEntities() throws Exception\n{\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"timeline\").path(\"type_1\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    verifyEntities(response.getEntity(TimelineEntities.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "testFromId",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testFromId() throws Exception\n{\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"timeline\").path(\"type_1\").queryParam(\"fromId\", \"id_2\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    assertEquals(2, response.getEntity(TimelineEntities.class).getEntities().size());\r\n    response = r.path(\"ws\").path(\"v1\").path(\"timeline\").path(\"type_1\").queryParam(\"fromId\", \"id_1\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    assertEquals(3, response.getEntity(TimelineEntities.class).getEntities().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "testFromTs",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testFromTs() throws Exception\n{\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"timeline\").path(\"type_1\").queryParam(\"fromTs\", Long.toString(beforeTime)).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    assertEquals(0, response.getEntity(TimelineEntities.class).getEntities().size());\r\n    response = r.path(\"ws\").path(\"v1\").path(\"timeline\").path(\"type_1\").queryParam(\"fromTs\", Long.toString(System.currentTimeMillis())).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    assertEquals(3, response.getEntity(TimelineEntities.class).getEntities().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "testPrimaryFilterString",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testPrimaryFilterString()\n{\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"timeline\").path(\"type_1\").queryParam(\"primaryFilter\", \"user:username\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    verifyEntities(response.getEntity(TimelineEntities.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "testPrimaryFilterInteger",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testPrimaryFilterInteger()\n{\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"timeline\").path(\"type_1\").queryParam(\"primaryFilter\", \"appname:\" + Integer.toString(Integer.MAX_VALUE)).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    verifyEntities(response.getEntity(TimelineEntities.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "testPrimaryFilterLong",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testPrimaryFilterLong()\n{\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"timeline\").path(\"type_1\").queryParam(\"primaryFilter\", \"long:\" + Long.toString((long) Integer.MAX_VALUE + 1l)).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    verifyEntities(response.getEntity(TimelineEntities.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "testSecondaryFilters",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testSecondaryFilters()\n{\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"timeline\").path(\"type_1\").queryParam(\"secondaryFilter\", \"user:username,appname:\" + Integer.toString(Integer.MAX_VALUE)).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    verifyEntities(response.getEntity(TimelineEntities.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "testGetEntity",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testGetEntity() throws Exception\n{\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"timeline\").path(\"type_1\").path(\"id_1\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    TimelineEntity entity = response.getEntity(TimelineEntity.class);\r\n    Assert.assertNotNull(entity);\r\n    Assert.assertEquals(\"id_1\", entity.getEntityId());\r\n    Assert.assertEquals(\"type_1\", entity.getEntityType());\r\n    Assert.assertEquals(123l, entity.getStartTime().longValue());\r\n    Assert.assertEquals(2, entity.getEvents().size());\r\n    Assert.assertEquals(4, entity.getPrimaryFilters().size());\r\n    Assert.assertEquals(4, entity.getOtherInfo().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "testGetEntityFields1",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testGetEntityFields1() throws Exception\n{\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"timeline\").path(\"type_1\").path(\"id_1\").queryParam(\"fields\", \"events,otherinfo\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    TimelineEntity entity = response.getEntity(TimelineEntity.class);\r\n    Assert.assertNotNull(entity);\r\n    Assert.assertEquals(\"id_1\", entity.getEntityId());\r\n    Assert.assertEquals(\"type_1\", entity.getEntityType());\r\n    Assert.assertEquals(123l, entity.getStartTime().longValue());\r\n    Assert.assertEquals(2, entity.getEvents().size());\r\n    Assert.assertEquals(0, entity.getPrimaryFilters().size());\r\n    Assert.assertEquals(4, entity.getOtherInfo().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "testGetEntityFields2",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testGetEntityFields2() throws Exception\n{\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"timeline\").path(\"type_1\").path(\"id_1\").queryParam(\"fields\", \"lasteventonly,\" + \"primaryfilters,relatedentities\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    TimelineEntity entity = response.getEntity(TimelineEntity.class);\r\n    Assert.assertNotNull(entity);\r\n    Assert.assertEquals(\"id_1\", entity.getEntityId());\r\n    Assert.assertEquals(\"type_1\", entity.getEntityType());\r\n    Assert.assertEquals(123l, entity.getStartTime().longValue());\r\n    Assert.assertEquals(1, entity.getEvents().size());\r\n    Assert.assertEquals(4, entity.getPrimaryFilters().size());\r\n    Assert.assertEquals(0, entity.getOtherInfo().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "testGetEvents",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testGetEvents() throws Exception\n{\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"timeline\").path(\"type_1\").path(\"events\").queryParam(\"entityId\", \"id_1\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    TimelineEvents events = response.getEntity(TimelineEvents.class);\r\n    Assert.assertNotNull(events);\r\n    Assert.assertEquals(1, events.getAllEvents().size());\r\n    TimelineEvents.EventsOfOneEntity partEvents = events.getAllEvents().get(0);\r\n    Assert.assertEquals(2, partEvents.getEvents().size());\r\n    TimelineEvent event1 = partEvents.getEvents().get(0);\r\n    Assert.assertEquals(456l, event1.getTimestamp());\r\n    Assert.assertEquals(\"end_event\", event1.getEventType());\r\n    Assert.assertEquals(1, event1.getEventInfo().size());\r\n    TimelineEvent event2 = partEvents.getEvents().get(1);\r\n    Assert.assertEquals(123l, event2.getTimestamp());\r\n    Assert.assertEquals(\"start_event\", event2.getEventType());\r\n    Assert.assertEquals(0, event2.getEventInfo().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "testPostEntitiesWithPrimaryFilter",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testPostEntitiesWithPrimaryFilter() throws Exception\n{\r\n    TimelineEntities entities = new TimelineEntities();\r\n    TimelineEntity entity = new TimelineEntity();\r\n    Map<String, Set<Object>> filters = new HashMap<String, Set<Object>>();\r\n    filters.put(TimelineStore.SystemFilter.ENTITY_OWNER.toString(), new HashSet<Object>());\r\n    entity.setPrimaryFilters(filters);\r\n    entity.setEntityId(\"test id 6\");\r\n    entity.setEntityType(\"test type 6\");\r\n    entity.setStartTime(System.currentTimeMillis());\r\n    entities.addEntity(entity);\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"timeline\").queryParam(\"user.name\", \"tester\").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON).post(ClientResponse.class, entities);\r\n    TimelinePutResponse putResposne = response.getEntity(TimelinePutResponse.class);\r\n    Assert.assertEquals(0, putResposne.getErrors().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "testPostEntities",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testPostEntities() throws Exception\n{\r\n    TimelineEntities entities = new TimelineEntities();\r\n    TimelineEntity entity = new TimelineEntity();\r\n    entity.setEntityId(\"test id 1\");\r\n    entity.setEntityType(\"test type 1\");\r\n    entity.setStartTime(System.currentTimeMillis());\r\n    entity.setDomainId(\"domain_id_1\");\r\n    entities.addEntity(entity);\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"timeline\").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON).post(ClientResponse.class, entities);\r\n    assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    assertResponseStatusCode(Status.FORBIDDEN, response.getStatusInfo());\r\n    response = r.path(\"ws\").path(\"v1\").path(\"timeline\").queryParam(\"user.name\", \"tester\").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON).post(ClientResponse.class, entities);\r\n    assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    TimelinePutResponse putResposne = response.getEntity(TimelinePutResponse.class);\r\n    Assert.assertNotNull(putResposne);\r\n    Assert.assertEquals(0, putResposne.getErrors().size());\r\n    response = r.path(\"ws\").path(\"v1\").path(\"timeline\").path(\"test type 1\").path(\"test id 1\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    entity = response.getEntity(TimelineEntity.class);\r\n    Assert.assertNotNull(entity);\r\n    Assert.assertEquals(\"test id 1\", entity.getEntityId());\r\n    Assert.assertEquals(\"test type 1\", entity.getEntityType());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "testPostIncompleteEntities",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testPostIncompleteEntities() throws Exception\n{\r\n    TimelineEntities entities = new TimelineEntities();\r\n    TimelineEntity entity1 = new TimelineEntity();\r\n    entity1.setEntityId(\"test id 1\");\r\n    entity1.setEntityType(\"test type 1\");\r\n    entity1.setStartTime(System.currentTimeMillis());\r\n    entity1.setDomainId(\"domain_id_1\");\r\n    entities.addEntity(entity1);\r\n    entities.addEntity(new TimelineEntity());\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"timeline\").queryParam(\"user.name\", \"tester\").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON).post(ClientResponse.class, entities);\r\n    assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    assertResponseStatusCode(Status.BAD_REQUEST, response.getStatusInfo());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "testPostEntitiesWithYarnACLsEnabled",
  "errType" : null,
  "containingMethodsNum" : 38,
  "sourceCodeText" : "void testPostEntitiesWithYarnACLsEnabled() throws Exception\n{\r\n    AdminACLsManager oldAdminACLsManager = timelineACLsManager.setAdminACLsManager(adminACLsManager);\r\n    try {\r\n        TimelineEntities entities = new TimelineEntities();\r\n        TimelineEntity entity = new TimelineEntity();\r\n        entity.setEntityId(\"test id 2\");\r\n        entity.setEntityType(\"test type 2\");\r\n        entity.setStartTime(System.currentTimeMillis());\r\n        entity.setDomainId(\"domain_id_1\");\r\n        entities.addEntity(entity);\r\n        WebResource r = resource();\r\n        ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"timeline\").queryParam(\"user.name\", \"writer_user_1\").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON).post(ClientResponse.class, entities);\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n        TimelinePutResponse putResponse = response.getEntity(TimelinePutResponse.class);\r\n        Assert.assertNotNull(putResponse);\r\n        Assert.assertEquals(0, putResponse.getErrors().size());\r\n        response = r.path(\"ws\").path(\"v1\").path(\"timeline\").queryParam(\"user.name\", \"writer_user_3\").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON).post(ClientResponse.class, entities);\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n        putResponse = response.getEntity(TimelinePutResponse.class);\r\n        Assert.assertNotNull(putResponse);\r\n        Assert.assertEquals(1, putResponse.getErrors().size());\r\n        Assert.assertEquals(TimelinePutResponse.TimelinePutError.ACCESS_DENIED, putResponse.getErrors().get(0).getErrorCode());\r\n        entities = new TimelineEntities();\r\n        entity = new TimelineEntity();\r\n        entity.setEntityId(\"test id 3\");\r\n        entity.setEntityType(\"test type 2\");\r\n        entity.setStartTime(System.currentTimeMillis());\r\n        entity.setDomainId(\"domain_id_2\");\r\n        entity.setRelatedEntities(Collections.singletonMap(\"test type 2\", Collections.singleton(\"test id 2\")));\r\n        entities.addEntity(entity);\r\n        r = resource();\r\n        response = r.path(\"ws\").path(\"v1\").path(\"timeline\").queryParam(\"user.name\", \"writer_user_3\").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON).post(ClientResponse.class, entities);\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n        putResponse = response.getEntity(TimelinePutResponse.class);\r\n        Assert.assertNotNull(putResponse);\r\n        Assert.assertEquals(1, putResponse.getErrors().size());\r\n        Assert.assertEquals(TimelinePutError.FORBIDDEN_RELATION, putResponse.getErrors().get(0).getErrorCode());\r\n        response = r.path(\"ws\").path(\"v1\").path(\"timeline\").path(\"test type 2\").path(\"test id 3\").queryParam(\"user.name\", \"reader_user_3\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n        entity = response.getEntity(TimelineEntity.class);\r\n        Assert.assertNotNull(entity);\r\n        Assert.assertEquals(\"test id 3\", entity.getEntityId());\r\n        Assert.assertEquals(\"test type 2\", entity.getEntityType());\r\n    } finally {\r\n        timelineACLsManager.setAdminACLsManager(oldAdminACLsManager);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "testPostEntitiesToDefaultDomain",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testPostEntitiesToDefaultDomain() throws Exception\n{\r\n    AdminACLsManager oldAdminACLsManager = timelineACLsManager.setAdminACLsManager(adminACLsManager);\r\n    try {\r\n        TimelineEntities entities = new TimelineEntities();\r\n        TimelineEntity entity = new TimelineEntity();\r\n        entity.setEntityId(\"test id 7\");\r\n        entity.setEntityType(\"test type 7\");\r\n        entity.setStartTime(System.currentTimeMillis());\r\n        entities.addEntity(entity);\r\n        WebResource r = resource();\r\n        ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"timeline\").queryParam(\"user.name\", \"anybody_1\").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON).post(ClientResponse.class, entities);\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n        TimelinePutResponse putResposne = response.getEntity(TimelinePutResponse.class);\r\n        Assert.assertNotNull(putResposne);\r\n        Assert.assertEquals(0, putResposne.getErrors().size());\r\n        response = r.path(\"ws\").path(\"v1\").path(\"timeline\").path(\"test type 7\").path(\"test id 7\").queryParam(\"user.name\", \"any_body_2\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n        entity = response.getEntity(TimelineEntity.class);\r\n        Assert.assertNotNull(entity);\r\n        Assert.assertEquals(\"test id 7\", entity.getEntityId());\r\n        Assert.assertEquals(\"test type 7\", entity.getEntityType());\r\n        Assert.assertEquals(TimelineDataManager.DEFAULT_DOMAIN_ID, entity.getDomainId());\r\n    } finally {\r\n        timelineACLsManager.setAdminACLsManager(oldAdminACLsManager);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "testGetEntityWithYarnACLsEnabled",
  "errType" : null,
  "containingMethodsNum" : 27,
  "sourceCodeText" : "void testGetEntityWithYarnACLsEnabled() throws Exception\n{\r\n    AdminACLsManager oldAdminACLsManager = timelineACLsManager.setAdminACLsManager(adminACLsManager);\r\n    try {\r\n        TimelineEntities entities = new TimelineEntities();\r\n        TimelineEntity entity = new TimelineEntity();\r\n        entity.setEntityId(\"test id 3\");\r\n        entity.setEntityType(\"test type 3\");\r\n        entity.setStartTime(System.currentTimeMillis());\r\n        entity.setDomainId(\"domain_id_1\");\r\n        entities.addEntity(entity);\r\n        WebResource r = resource();\r\n        ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"timeline\").queryParam(\"user.name\", \"writer_user_1\").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON).post(ClientResponse.class, entities);\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n        TimelinePutResponse putResponse = response.getEntity(TimelinePutResponse.class);\r\n        Assert.assertEquals(0, putResponse.getErrors().size());\r\n        response = r.path(\"ws\").path(\"v1\").path(\"timeline\").path(\"test type 3\").path(\"test id 3\").queryParam(\"user.name\", \"reader_user_1\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n        entity = response.getEntity(TimelineEntity.class);\r\n        Assert.assertNull(entity.getPrimaryFilters().get(TimelineStore.SystemFilter.ENTITY_OWNER.toString()));\r\n        response = r.path(\"ws\").path(\"v1\").path(\"timeline\").path(\"test type 3\").path(\"test id 3\").queryParam(\"fields\", \"relatedentities\").queryParam(\"user.name\", \"reader_user_1\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n        entity = response.getEntity(TimelineEntity.class);\r\n        Assert.assertNull(entity.getPrimaryFilters().get(TimelineStore.SystemFilter.ENTITY_OWNER.toString()));\r\n        response = r.path(\"ws\").path(\"v1\").path(\"timeline\").path(\"test type 3\").path(\"test id 3\").queryParam(\"fields\", \"primaryfilters\").queryParam(\"user.name\", \"reader_user_1\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n        entity = response.getEntity(TimelineEntity.class);\r\n        Assert.assertNull(entity.getPrimaryFilters().get(TimelineStore.SystemFilter.ENTITY_OWNER.toString()));\r\n        response = r.path(\"ws\").path(\"v1\").path(\"timeline\").path(\"test type 3\").path(\"test id 3\").queryParam(\"user.name\", \"reader_user_2\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n        assertResponseStatusCode(Status.FORBIDDEN, response.getStatusInfo());\r\n    } finally {\r\n        timelineACLsManager.setAdminACLsManager(oldAdminACLsManager);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "testGetEntitiesWithYarnACLsEnabled",
  "errType" : null,
  "containingMethodsNum" : 28,
  "sourceCodeText" : "void testGetEntitiesWithYarnACLsEnabled()\n{\r\n    AdminACLsManager oldAdminACLsManager = timelineACLsManager.setAdminACLsManager(adminACLsManager);\r\n    try {\r\n        TimelineEntities entities = new TimelineEntities();\r\n        TimelineEntity entity = new TimelineEntity();\r\n        entity.setEntityId(\"test id 4\");\r\n        entity.setEntityType(\"test type 4\");\r\n        entity.setStartTime(System.currentTimeMillis());\r\n        entity.setDomainId(\"domain_id_1\");\r\n        entities.addEntity(entity);\r\n        WebResource r = resource();\r\n        ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"timeline\").queryParam(\"user.name\", \"writer_user_1\").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON).post(ClientResponse.class, entities);\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n        TimelinePutResponse putResponse = response.getEntity(TimelinePutResponse.class);\r\n        Assert.assertEquals(0, putResponse.getErrors().size());\r\n        entities = new TimelineEntities();\r\n        entity = new TimelineEntity();\r\n        entity.setEntityId(\"test id 5\");\r\n        entity.setEntityType(\"test type 4\");\r\n        entity.setStartTime(System.currentTimeMillis());\r\n        entity.setDomainId(\"domain_id_2\");\r\n        entities.addEntity(entity);\r\n        r = resource();\r\n        response = r.path(\"ws\").path(\"v1\").path(\"timeline\").queryParam(\"user.name\", \"writer_user_3\").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON).post(ClientResponse.class, entities);\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n        putResponse = response.getEntity(TimelinePutResponse.class);\r\n        Assert.assertEquals(0, putResponse.getErrors().size());\r\n        response = r.path(\"ws\").path(\"v1\").path(\"timeline\").queryParam(\"user.name\", \"reader_user_1\").path(\"test type 4\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n        entities = response.getEntity(TimelineEntities.class);\r\n        assertEquals(1, entities.getEntities().size());\r\n        assertEquals(\"test type 4\", entities.getEntities().get(0).getEntityType());\r\n        assertEquals(\"test id 4\", entities.getEntities().get(0).getEntityId());\r\n    } finally {\r\n        timelineACLsManager.setAdminACLsManager(oldAdminACLsManager);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "testGetEventsWithYarnACLsEnabled",
  "errType" : null,
  "containingMethodsNum" : 33,
  "sourceCodeText" : "void testGetEventsWithYarnACLsEnabled()\n{\r\n    AdminACLsManager oldAdminACLsManager = timelineACLsManager.setAdminACLsManager(adminACLsManager);\r\n    try {\r\n        TimelineEntities entities = new TimelineEntities();\r\n        TimelineEntity entity = new TimelineEntity();\r\n        entity.setEntityId(\"test id 5\");\r\n        entity.setEntityType(\"test type 5\");\r\n        entity.setStartTime(System.currentTimeMillis());\r\n        entity.setDomainId(\"domain_id_1\");\r\n        TimelineEvent event = new TimelineEvent();\r\n        event.setEventType(\"event type 1\");\r\n        event.setTimestamp(System.currentTimeMillis());\r\n        entity.addEvent(event);\r\n        entities.addEntity(entity);\r\n        WebResource r = resource();\r\n        ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"timeline\").queryParam(\"user.name\", \"writer_user_1\").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON).post(ClientResponse.class, entities);\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n        TimelinePutResponse putResponse = response.getEntity(TimelinePutResponse.class);\r\n        Assert.assertEquals(0, putResponse.getErrors().size());\r\n        entities = new TimelineEntities();\r\n        entity = new TimelineEntity();\r\n        entity.setEntityId(\"test id 6\");\r\n        entity.setEntityType(\"test type 5\");\r\n        entity.setStartTime(System.currentTimeMillis());\r\n        entity.setDomainId(\"domain_id_2\");\r\n        event = new TimelineEvent();\r\n        event.setEventType(\"event type 2\");\r\n        event.setTimestamp(System.currentTimeMillis());\r\n        entity.addEvent(event);\r\n        entities.addEntity(entity);\r\n        r = resource();\r\n        response = r.path(\"ws\").path(\"v1\").path(\"timeline\").queryParam(\"user.name\", \"writer_user_3\").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON).post(ClientResponse.class, entities);\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n        putResponse = response.getEntity(TimelinePutResponse.class);\r\n        Assert.assertEquals(0, putResponse.getErrors().size());\r\n        response = r.path(\"ws\").path(\"v1\").path(\"timeline\").path(\"test type 5\").path(\"events\").queryParam(\"user.name\", \"reader_user_1\").queryParam(\"entityId\", \"test id 5,test id 6\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n        TimelineEvents events = response.getEntity(TimelineEvents.class);\r\n        assertEquals(1, events.getAllEvents().size());\r\n        assertEquals(\"test id 5\", events.getAllEvents().get(0).getEntityId());\r\n    } finally {\r\n        timelineACLsManager.setAdminACLsManager(oldAdminACLsManager);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "testGetDomain",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testGetDomain() throws Exception\n{\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"timeline\").path(\"domain\").path(\"domain_id_1\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    TimelineDomain domain = response.getEntity(TimelineDomain.class);\r\n    verifyDomain(domain, \"domain_id_1\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "testGetDomainYarnACLsEnabled",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testGetDomainYarnACLsEnabled()\n{\r\n    AdminACLsManager oldAdminACLsManager = timelineACLsManager.setAdminACLsManager(adminACLsManager);\r\n    try {\r\n        WebResource r = resource();\r\n        ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"timeline\").path(\"domain\").path(\"domain_id_1\").queryParam(\"user.name\", \"owner_1\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n        TimelineDomain domain = response.getEntity(TimelineDomain.class);\r\n        verifyDomain(domain, \"domain_id_1\");\r\n        response = r.path(\"ws\").path(\"v1\").path(\"timeline\").path(\"domain\").path(\"domain_id_1\").queryParam(\"user.name\", \"tester\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n        assertResponseStatusCode(Status.NOT_FOUND, response.getStatusInfo());\r\n    } finally {\r\n        timelineACLsManager.setAdminACLsManager(oldAdminACLsManager);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "testGetDomains",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testGetDomains() throws Exception\n{\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"timeline\").path(\"domain\").queryParam(\"owner\", \"owner_1\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    TimelineDomains domains = response.getEntity(TimelineDomains.class);\r\n    Assert.assertEquals(2, domains.getDomains().size());\r\n    for (int i = 0; i < domains.getDomains().size(); ++i) {\r\n        verifyDomain(domains.getDomains().get(i), i == 0 ? \"domain_id_4\" : \"domain_id_1\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "testGetDomainsYarnACLsEnabled",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testGetDomainsYarnACLsEnabled() throws Exception\n{\r\n    AdminACLsManager oldAdminACLsManager = timelineACLsManager.setAdminACLsManager(adminACLsManager);\r\n    try {\r\n        WebResource r = resource();\r\n        ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"timeline\").path(\"domain\").queryParam(\"user.name\", \"owner_1\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n        TimelineDomains domains = response.getEntity(TimelineDomains.class);\r\n        Assert.assertEquals(2, domains.getDomains().size());\r\n        for (int i = 0; i < domains.getDomains().size(); ++i) {\r\n            verifyDomain(domains.getDomains().get(i), i == 0 ? \"domain_id_4\" : \"domain_id_1\");\r\n        }\r\n        response = r.path(\"ws\").path(\"v1\").path(\"timeline\").path(\"domain\").queryParam(\"owner\", \"owner_1\").queryParam(\"user.name\", \"tester\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n        domains = response.getEntity(TimelineDomains.class);\r\n        Assert.assertEquals(0, domains.getDomains().size());\r\n    } finally {\r\n        timelineACLsManager.setAdminACLsManager(oldAdminACLsManager);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "testPutDomain",
  "errType" : null,
  "containingMethodsNum" : 23,
  "sourceCodeText" : "void testPutDomain() throws Exception\n{\r\n    TimelineDomain domain = new TimelineDomain();\r\n    domain.setId(\"test_domain_id\");\r\n    WebResource r = resource();\r\n    ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"timeline\").path(\"domain\").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON).put(ClientResponse.class, domain);\r\n    assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    assertResponseStatusCode(Status.FORBIDDEN, response.getStatusInfo());\r\n    response = r.path(\"ws\").path(\"v1\").path(\"timeline\").path(\"domain\").queryParam(\"user.name\", \"tester\").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON).put(ClientResponse.class, domain);\r\n    assertResponseStatusCode(Status.OK, response.getStatusInfo());\r\n    response = r.path(\"ws\").path(\"v1\").path(\"timeline\").path(\"domain\").path(\"test_domain_id\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    domain = response.getEntity(TimelineDomain.class);\r\n    Assert.assertNotNull(domain);\r\n    Assert.assertEquals(\"test_domain_id\", domain.getId());\r\n    Assert.assertEquals(\"tester\", domain.getOwner());\r\n    Assert.assertEquals(null, domain.getDescription());\r\n    domain.setDescription(\"test_description\");\r\n    response = r.path(\"ws\").path(\"v1\").path(\"timeline\").path(\"domain\").queryParam(\"user.name\", \"tester\").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON).put(ClientResponse.class, domain);\r\n    assertResponseStatusCode(Status.OK, response.getStatusInfo());\r\n    response = r.path(\"ws\").path(\"v1\").path(\"timeline\").path(\"domain\").path(\"test_domain_id\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString());\r\n    domain = response.getEntity(TimelineDomain.class);\r\n    Assert.assertNotNull(domain);\r\n    Assert.assertEquals(\"test_domain_id\", domain.getId());\r\n    Assert.assertEquals(\"test_description\", domain.getDescription());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "testPutDomainYarnACLsEnabled",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testPutDomainYarnACLsEnabled() throws Exception\n{\r\n    AdminACLsManager oldAdminACLsManager = timelineACLsManager.setAdminACLsManager(adminACLsManager);\r\n    try {\r\n        TimelineDomain domain = new TimelineDomain();\r\n        domain.setId(\"test_domain_id_acl\");\r\n        WebResource r = resource();\r\n        ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"timeline\").path(\"domain\").queryParam(\"user.name\", \"tester\").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON).put(ClientResponse.class, domain);\r\n        assertResponseStatusCode(Status.OK, response.getStatusInfo());\r\n        response = r.path(\"ws\").path(\"v1\").path(\"timeline\").path(\"domain\").queryParam(\"user.name\", \"other\").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON).put(ClientResponse.class, domain);\r\n        assertResponseStatusCode(Status.FORBIDDEN, response.getStatusInfo());\r\n    } finally {\r\n        timelineACLsManager.setAdminACLsManager(oldAdminACLsManager);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "testContextFactory",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testContextFactory() throws Exception\n{\r\n    JAXBContext jaxbContext1 = ContextFactory.createContext(new Class[] { TimelineDomain.class }, Collections.EMPTY_MAP);\r\n    JAXBContext jaxbContext2 = ContextFactory.createContext(new Class[] { TimelineDomain.class }, Collections.EMPTY_MAP);\r\n    assertEquals(jaxbContext1, jaxbContext2);\r\n    try {\r\n        ContextFactory.createContext(new Class[] { TimelineEntity.class }, Collections.EMPTY_MAP);\r\n        Assert.fail(\"Expected JAXBException\");\r\n    } catch (Exception e) {\r\n        assertThat(e).isExactlyInstanceOf(JAXBException.class);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "verifyDomain",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void verifyDomain(TimelineDomain domain, String domainId)\n{\r\n    Assert.assertNotNull(domain);\r\n    Assert.assertEquals(domainId, domain.getId());\r\n    Assert.assertNotNull(domain.getDescription());\r\n    Assert.assertNotNull(domain.getOwner());\r\n    Assert.assertNotNull(domain.getReaders());\r\n    Assert.assertNotNull(domain.getWriters());\r\n    Assert.assertNotNull(domain.getCreatedTime());\r\n    Assert.assertNotNull(domain.getModifiedTime());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    store = new MemoryTimelineStore();\r\n    store.init(new YarnConfiguration());\r\n    store.start();\r\n    loadTestEntityData();\r\n    loadVerificationEntityData();\r\n    loadTestDomainData();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    store.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getTimelineStore",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineStore getTimelineStore()\n{\r\n    return store;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetSingleEntity",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetSingleEntity() throws IOException\n{\r\n    super.testGetSingleEntity();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetEntities",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetEntities() throws IOException\n{\r\n    super.testGetEntities();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetEntitiesWithFromId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetEntitiesWithFromId() throws IOException\n{\r\n    super.testGetEntitiesWithFromId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetEntitiesWithFromTs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetEntitiesWithFromTs() throws IOException\n{\r\n    super.testGetEntitiesWithFromTs();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetEntitiesWithPrimaryFilters",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetEntitiesWithPrimaryFilters() throws IOException\n{\r\n    super.testGetEntitiesWithPrimaryFilters();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetEntitiesWithSecondaryFilters",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetEntitiesWithSecondaryFilters() throws IOException\n{\r\n    super.testGetEntitiesWithSecondaryFilters();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetEvents",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetEvents() throws IOException\n{\r\n    super.testGetEvents();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetDomain",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetDomain() throws IOException\n{\r\n    super.testGetDomain();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "testGetDomains",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetDomains() throws IOException\n{\r\n    super.testGetDomains();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "setupServer",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void setupServer() throws Exception\n{\r\n    conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, true);\r\n    conf.setClass(YarnConfiguration.TIMELINE_SERVICE_STORE, MemoryTimelineStore.class, TimelineStore.class);\r\n    conf.set(YarnConfiguration.YARN_HTTP_POLICY_KEY, \"HTTPS_ONLY\");\r\n    conf.setFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION, 1.0f);\r\n    File base = new File(BASEDIR);\r\n    FileUtil.fullyDelete(base);\r\n    base.mkdirs();\r\n    keystoresDir = new File(BASEDIR).getAbsolutePath();\r\n    sslConfDir = KeyStoreTestUtil.getClasspathDir(TestTimelineWebServicesWithSSL.class);\r\n    KeyStoreTestUtil.setupSSLConfig(keystoresDir, sslConfDir, conf, false);\r\n    conf.addResource(\"ssl-server.xml\");\r\n    conf.addResource(\"ssl-client.xml\");\r\n    timelineServer = new ApplicationHistoryServer();\r\n    timelineServer.init(conf);\r\n    timelineServer.start();\r\n    store = timelineServer.getTimelineStore();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "tearDownServer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDownServer() throws Exception\n{\r\n    if (timelineServer != null) {\r\n        timelineServer.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\webapp",
  "methodName" : "testPutEntities",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testPutEntities() throws Exception\n{\r\n    TestTimelineClient client = new TestTimelineClient();\r\n    try {\r\n        client.init(conf);\r\n        client.start();\r\n        TimelineEntity expectedEntity = new TimelineEntity();\r\n        expectedEntity.setEntityType(\"test entity type\");\r\n        expectedEntity.setEntityId(\"test entity id\");\r\n        expectedEntity.setDomainId(\"test domain id\");\r\n        TimelineEvent event = new TimelineEvent();\r\n        event.setEventType(\"test event type\");\r\n        event.setTimestamp(0L);\r\n        expectedEntity.addEvent(event);\r\n        TimelinePutResponse response = client.putEntities(expectedEntity);\r\n        Assert.assertEquals(0, response.getErrors().size());\r\n        Assert.assertTrue(client.resp.toString().contains(\"https\"));\r\n        TimelineEntity actualEntity = store.getEntity(expectedEntity.getEntityId(), expectedEntity.getEntityType(), EnumSet.allOf(Field.class));\r\n        Assert.assertNotNull(actualEntity);\r\n        Assert.assertEquals(expectedEntity.getEntityId(), actualEntity.getEntityId());\r\n        Assert.assertEquals(expectedEntity.getEntityType(), actualEntity.getEntityType());\r\n    } finally {\r\n        client.stop();\r\n        client.close();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    Configuration config = new Configuration();\r\n    config.setClass(YarnConfiguration.APPLICATION_HISTORY_STORE, MemoryApplicationHistoryStore.class, ApplicationHistoryStore.class);\r\n    applicationHistoryManagerImpl = new ApplicationHistoryManagerImpl();\r\n    applicationHistoryManagerImpl.init(config);\r\n    applicationHistoryManagerImpl.start();\r\n    store = applicationHistoryManagerImpl.getHistoryStore();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    applicationHistoryManagerImpl.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testApplicationReport",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testApplicationReport() throws IOException, YarnException\n{\r\n    ApplicationId appId = null;\r\n    appId = ApplicationId.newInstance(0, 1);\r\n    writeApplicationStartData(appId);\r\n    writeApplicationFinishData(appId);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    writeApplicationAttemptStartData(appAttemptId);\r\n    writeApplicationAttemptFinishData(appAttemptId);\r\n    ApplicationReport appReport = applicationHistoryManagerImpl.getApplication(appId);\r\n    Assert.assertNotNull(appReport);\r\n    Assert.assertEquals(appId, appReport.getApplicationId());\r\n    Assert.assertEquals(appAttemptId, appReport.getCurrentApplicationAttemptId());\r\n    Assert.assertEquals(appAttemptId.toString(), appReport.getHost());\r\n    Assert.assertEquals(\"test type\", appReport.getApplicationType().toString());\r\n    Assert.assertEquals(\"test queue\", appReport.getQueue().toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\applicationhistoryservice",
  "methodName" : "testApplications",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testApplications() throws IOException\n{\r\n    ApplicationId appId1 = ApplicationId.newInstance(0, 1);\r\n    ApplicationId appId2 = ApplicationId.newInstance(0, 2);\r\n    ApplicationId appId3 = ApplicationId.newInstance(0, 3);\r\n    writeApplicationStartData(appId1, 1000);\r\n    writeApplicationFinishData(appId1);\r\n    writeApplicationStartData(appId2, 3000);\r\n    writeApplicationFinishData(appId2);\r\n    writeApplicationStartData(appId3, 4000);\r\n    writeApplicationFinishData(appId3);\r\n    Map<ApplicationId, ApplicationReport> reports = applicationHistoryManagerImpl.getApplications(2, 2000L, 5000L);\r\n    Assert.assertNotNull(reports);\r\n    Assert.assertEquals(2, reports.size());\r\n    Assert.assertNull(reports.get(\"1\"));\r\n    Assert.assertNull(reports.get(\"2\"));\r\n    Assert.assertNull(reports.get(\"3\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\security",
  "methodName" : "testYarnACLsNotEnabledForEntity",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testYarnACLsNotEnabledForEntity() throws Exception\n{\r\n    Configuration conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.YARN_ACL_ENABLE, false);\r\n    TimelineACLsManager timelineACLsManager = new TimelineACLsManager(conf);\r\n    timelineACLsManager.setTimelineStore(new TestTimelineStore());\r\n    TimelineEntity entity = new TimelineEntity();\r\n    entity.addPrimaryFilter(TimelineStore.SystemFilter.ENTITY_OWNER.toString(), \"owner\");\r\n    entity.setDomainId(\"domain_id_1\");\r\n    Assert.assertTrue(\"Always true when ACLs are not enabled\", timelineACLsManager.checkAccess(UserGroupInformation.createRemoteUser(\"user\"), ApplicationAccessType.VIEW_APP, entity));\r\n    Assert.assertTrue(\"Always true when ACLs are not enabled\", timelineACLsManager.checkAccess(UserGroupInformation.createRemoteUser(\"user\"), ApplicationAccessType.MODIFY_APP, entity));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\security",
  "methodName" : "testYarnACLsEnabledForEntity",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testYarnACLsEnabledForEntity() throws Exception\n{\r\n    Configuration conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.YARN_ACL_ENABLE, true);\r\n    conf.set(YarnConfiguration.YARN_ADMIN_ACL, \"admin\");\r\n    TimelineACLsManager timelineACLsManager = new TimelineACLsManager(conf);\r\n    timelineACLsManager.setTimelineStore(new TestTimelineStore());\r\n    TimelineEntity entity = new TimelineEntity();\r\n    entity.addPrimaryFilter(TimelineStore.SystemFilter.ENTITY_OWNER.toString(), \"owner\");\r\n    entity.setDomainId(\"domain_id_1\");\r\n    Assert.assertTrue(\"Owner should be allowed to view\", timelineACLsManager.checkAccess(UserGroupInformation.createRemoteUser(\"owner\"), ApplicationAccessType.VIEW_APP, entity));\r\n    Assert.assertTrue(\"Reader should be allowed to view\", timelineACLsManager.checkAccess(UserGroupInformation.createRemoteUser(\"reader\"), ApplicationAccessType.VIEW_APP, entity));\r\n    Assert.assertFalse(\"Other shouldn't be allowed to view\", timelineACLsManager.checkAccess(UserGroupInformation.createRemoteUser(\"other\"), ApplicationAccessType.VIEW_APP, entity));\r\n    Assert.assertTrue(\"Admin should be allowed to view\", timelineACLsManager.checkAccess(UserGroupInformation.createRemoteUser(\"admin\"), ApplicationAccessType.VIEW_APP, entity));\r\n    Assert.assertTrue(\"Owner should be allowed to modify\", timelineACLsManager.checkAccess(UserGroupInformation.createRemoteUser(\"owner\"), ApplicationAccessType.MODIFY_APP, entity));\r\n    Assert.assertTrue(\"Writer should be allowed to modify\", timelineACLsManager.checkAccess(UserGroupInformation.createRemoteUser(\"writer\"), ApplicationAccessType.MODIFY_APP, entity));\r\n    Assert.assertFalse(\"Other shouldn't be allowed to modify\", timelineACLsManager.checkAccess(UserGroupInformation.createRemoteUser(\"other\"), ApplicationAccessType.MODIFY_APP, entity));\r\n    Assert.assertTrue(\"Admin should be allowed to modify\", timelineACLsManager.checkAccess(UserGroupInformation.createRemoteUser(\"admin\"), ApplicationAccessType.MODIFY_APP, entity));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\security",
  "methodName" : "testCorruptedOwnerInfoForEntity",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testCorruptedOwnerInfoForEntity() throws Exception\n{\r\n    Configuration conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.YARN_ACL_ENABLE, true);\r\n    conf.set(YarnConfiguration.YARN_ADMIN_ACL, \"owner\");\r\n    TimelineACLsManager timelineACLsManager = new TimelineACLsManager(conf);\r\n    timelineACLsManager.setTimelineStore(new TestTimelineStore());\r\n    TimelineEntity entity = new TimelineEntity();\r\n    try {\r\n        timelineACLsManager.checkAccess(UserGroupInformation.createRemoteUser(\"owner\"), ApplicationAccessType.VIEW_APP, entity);\r\n        Assert.fail(\"Exception is expected\");\r\n    } catch (YarnException e) {\r\n        Assert.assertTrue(\"It's not the exact expected exception\", e.getMessage().contains(\"doesn't exist.\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\security",
  "methodName" : "testYarnACLsNotEnabledForDomain",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testYarnACLsNotEnabledForDomain() throws Exception\n{\r\n    Configuration conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.YARN_ACL_ENABLE, false);\r\n    TimelineACLsManager timelineACLsManager = new TimelineACLsManager(conf);\r\n    TimelineDomain domain = new TimelineDomain();\r\n    domain.setOwner(\"owner\");\r\n    Assert.assertTrue(\"Always true when ACLs are not enabled\", timelineACLsManager.checkAccess(UserGroupInformation.createRemoteUser(\"user\"), domain));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\security",
  "methodName" : "testYarnACLsEnabledForDomain",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testYarnACLsEnabledForDomain() throws Exception\n{\r\n    Configuration conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.YARN_ACL_ENABLE, true);\r\n    conf.set(YarnConfiguration.YARN_ADMIN_ACL, \"admin\");\r\n    TimelineACLsManager timelineACLsManager = new TimelineACLsManager(conf);\r\n    TimelineDomain domain = new TimelineDomain();\r\n    domain.setOwner(\"owner\");\r\n    Assert.assertTrue(\"Owner should be allowed to access\", timelineACLsManager.checkAccess(UserGroupInformation.createRemoteUser(\"owner\"), domain));\r\n    Assert.assertFalse(\"Other shouldn't be allowed to access\", timelineACLsManager.checkAccess(UserGroupInformation.createRemoteUser(\"other\"), domain));\r\n    Assert.assertTrue(\"Admin should be allowed to access\", timelineACLsManager.checkAccess(UserGroupInformation.createRemoteUser(\"admin\"), domain));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\security",
  "methodName" : "testCorruptedOwnerInfoForDomain",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testCorruptedOwnerInfoForDomain() throws Exception\n{\r\n    Configuration conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.YARN_ACL_ENABLE, true);\r\n    conf.set(YarnConfiguration.YARN_ADMIN_ACL, \"owner\");\r\n    TimelineACLsManager timelineACLsManager = new TimelineACLsManager(conf);\r\n    TimelineDomain domain = new TimelineDomain();\r\n    try {\r\n        timelineACLsManager.checkAccess(UserGroupInformation.createRemoteUser(\"owner\"), domain);\r\n        Assert.fail(\"Exception is expected\");\r\n    } catch (YarnException e) {\r\n        Assert.assertTrue(\"It's not the exact expected exception\", e.getMessage().contains(\"is corrupted.\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\security",
  "methodName" : "withSsl",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Collection<Object[]> withSsl()\n{\r\n    return Arrays.asList(new Object[][] { { false }, { true } });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\security",
  "methodName" : "setup",
  "errType" : [ "Exception", "Exception" ],
  "containingMethodsNum" : 30,
  "sourceCodeText" : "void setup()\n{\r\n    try {\r\n        testMiniKDC = new MiniKdc(MiniKdc.createConf(), TEST_ROOT_DIR);\r\n        testMiniKDC.start();\r\n        testMiniKDC.createPrincipal(httpSpnegoKeytabFile, PRINCIPAL);\r\n    } catch (Exception e) {\r\n        LOG.error(\"Failed to setup MiniKDC\", e);\r\n        fail(\"Couldn't setup MiniKDC\");\r\n    }\r\n    try {\r\n        testTimelineServer = new ApplicationHistoryServer();\r\n        conf = new Configuration(false);\r\n        conf.setStrings(TIMELINE_HTTP_AUTH_PREFIX + \"type\", \"kerberos\");\r\n        conf.set(TIMELINE_HTTP_AUTH_PREFIX + KerberosAuthenticationHandler.PRINCIPAL, httpSpnegoPrincipal);\r\n        conf.set(TIMELINE_HTTP_AUTH_PREFIX + KerberosAuthenticationHandler.KEYTAB, httpSpnegoKeytabFile.getAbsolutePath());\r\n        conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION, \"kerberos\");\r\n        conf.set(YarnConfiguration.TIMELINE_SERVICE_PRINCIPAL, httpSpnegoPrincipal);\r\n        conf.set(YarnConfiguration.TIMELINE_SERVICE_KEYTAB, httpSpnegoKeytabFile.getAbsolutePath());\r\n        conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, true);\r\n        conf.setClass(YarnConfiguration.TIMELINE_SERVICE_STORE, MemoryTimelineStore.class, TimelineStore.class);\r\n        conf.set(YarnConfiguration.TIMELINE_SERVICE_ADDRESS, \"localhost:10200\");\r\n        conf.set(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS, \"localhost:8188\");\r\n        conf.set(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS, \"localhost:8190\");\r\n        conf.set(\"hadoop.proxyuser.HTTP.hosts\", \"*\");\r\n        conf.set(\"hadoop.proxyuser.HTTP.users\", FOO_USER);\r\n        conf.setInt(YarnConfiguration.TIMELINE_SERVICE_CLIENT_MAX_RETRIES, 1);\r\n        if (withSsl) {\r\n            conf.set(YarnConfiguration.YARN_HTTP_POLICY_KEY, HttpConfig.Policy.HTTPS_ONLY.name());\r\n            File base = new File(BASEDIR);\r\n            FileUtil.fullyDelete(base);\r\n            base.mkdirs();\r\n            keystoresDir = new File(BASEDIR).getAbsolutePath();\r\n            sslConfDir = KeyStoreTestUtil.getClasspathDir(TestTimelineAuthenticationFilterForV1.class);\r\n            KeyStoreTestUtil.setupSSLConfig(keystoresDir, sslConfDir, conf, false);\r\n        }\r\n        UserGroupInformation.setConfiguration(conf);\r\n        testTimelineServer.init(conf);\r\n        testTimelineServer.start();\r\n    } catch (Exception e) {\r\n        LOG.error(\"Failed to setup TimelineServer\", e);\r\n        fail(\"Couldn't setup TimelineServer\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\security",
  "methodName" : "createTimelineClientForUGI",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "TimelineClient createTimelineClientForUGI()\n{\r\n    TimelineClient client = TimelineClient.createTimelineClient();\r\n    client.init(conf);\r\n    client.start();\r\n    return client;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\security",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    if (testMiniKDC != null) {\r\n        testMiniKDC.stop();\r\n    }\r\n    if (testTimelineServer != null) {\r\n        testTimelineServer.stop();\r\n    }\r\n    if (withSsl) {\r\n        KeyStoreTestUtil.cleanupSSLConfig(keystoresDir, sslConfDir);\r\n        File base = new File(BASEDIR);\r\n        FileUtil.fullyDelete(base);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\security",
  "methodName" : "testPutTimelineEntities",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testPutTimelineEntities() throws Exception\n{\r\n    KerberosTestUtils.doAs(PRINCIPAL, new Callable<Void>() {\r\n\r\n        @Override\r\n        public Void call() throws Exception {\r\n            TimelineClient client = createTimelineClientForUGI();\r\n            TimelineEntity entityToStore = new TimelineEntity();\r\n            entityToStore.setEntityType(TestTimelineAuthenticationFilterForV1.class.getName());\r\n            entityToStore.setEntityId(\"entity1\");\r\n            entityToStore.setStartTime(0L);\r\n            TimelinePutResponse putResponse = client.putEntities(entityToStore);\r\n            if (putResponse.getErrors().size() > 0) {\r\n                LOG.error(\"putResponse errors: {}\", putResponse.getErrors());\r\n            }\r\n            Assert.assertTrue(\"There were some errors in the putResponse\", putResponse.getErrors().isEmpty());\r\n            TimelineEntity entityToRead = testTimelineServer.getTimelineStore().getEntity(\"entity1\", TestTimelineAuthenticationFilterForV1.class.getName(), null);\r\n            Assert.assertNotNull(\"Timeline entity should not be null\", entityToRead);\r\n            return null;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\security",
  "methodName" : "testPutDomains",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testPutDomains() throws Exception\n{\r\n    KerberosTestUtils.doAs(PRINCIPAL, new Callable<Void>() {\r\n\r\n        @Override\r\n        public Void call() throws Exception {\r\n            TimelineClient client = createTimelineClientForUGI();\r\n            TimelineDomain domainToStore = new TimelineDomain();\r\n            domainToStore.setId(TestTimelineAuthenticationFilterForV1.class.getName());\r\n            domainToStore.setReaders(\"*\");\r\n            domainToStore.setWriters(\"*\");\r\n            client.putDomain(domainToStore);\r\n            TimelineDomain domainToRead = testTimelineServer.getTimelineStore().getDomain(TestTimelineAuthenticationFilterForV1.class.getName());\r\n            Assert.assertNotNull(\"Timeline domain should not be null\", domainToRead);\r\n            return null;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-applicationhistoryservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\security",
  "methodName" : "testDelegationTokenOperations",
  "errType" : [ "Exception", "Exception", "Exception" ],
  "containingMethodsNum" : 43,
  "sourceCodeText" : "void testDelegationTokenOperations() throws Exception\n{\r\n    TimelineClient httpUserClient = KerberosTestUtils.doAs(PRINCIPAL, new Callable<TimelineClient>() {\r\n\r\n        @Override\r\n        public TimelineClient call() throws Exception {\r\n            return createTimelineClientForUGI();\r\n        }\r\n    });\r\n    UserGroupInformation httpUser = KerberosTestUtils.doAs(PRINCIPAL, new Callable<UserGroupInformation>() {\r\n\r\n        @Override\r\n        public UserGroupInformation call() throws Exception {\r\n            return UserGroupInformation.getCurrentUser();\r\n        }\r\n    });\r\n    Token<TimelineDelegationTokenIdentifier> token = httpUserClient.getDelegationToken(httpUser.getShortUserName());\r\n    Assert.assertNotNull(\"Delegation token should not be null\", token);\r\n    TimelineDelegationTokenIdentifier tDT = token.decodeIdentifier();\r\n    Assert.assertNotNull(\"Delegation token identifier should not be null\", tDT);\r\n    Assert.assertEquals(\"Owner of delegation token identifier does not match\", new Text(HTTP_USER), tDT.getOwner());\r\n    Assert.assertFalse(\"Service field of token should not be empty\", token.getService().toString().isEmpty());\r\n    long renewTime1 = httpUserClient.renewDelegationToken(token);\r\n    Thread.sleep(100);\r\n    token.setService(new Text());\r\n    Assert.assertTrue(\"Service field of token should be empty\", token.getService().toString().isEmpty());\r\n    long renewTime2 = httpUserClient.renewDelegationToken(token);\r\n    Assert.assertTrue(\"renewTime2 should be later than renewTime1\", renewTime1 < renewTime2);\r\n    Assert.assertTrue(\"Service field of token should be empty\", token.getService().toString().isEmpty());\r\n    httpUserClient.cancelDelegationToken(token);\r\n    try {\r\n        httpUserClient.renewDelegationToken(token);\r\n        Assert.fail(\"Renew of delegation token should not be successful\");\r\n    } catch (Exception e) {\r\n        LOG.info(\"Exception while renewing delegation token\", e);\r\n        Assert.assertTrue(e.getMessage().contains(\"Renewal request for unknown token\"));\r\n    }\r\n    UserGroupInformation fooUgi = UserGroupInformation.createProxyUser(FOO_USER, httpUser);\r\n    TimelineClient fooUserClient = fooUgi.doAs(new PrivilegedExceptionAction<TimelineClient>() {\r\n\r\n        @Override\r\n        public TimelineClient run() {\r\n            return createTimelineClientForUGI();\r\n        }\r\n    });\r\n    token = fooUserClient.getDelegationToken(httpUser.getShortUserName());\r\n    Assert.assertNotNull(\"Delegation token should not be null\", token);\r\n    tDT = token.decodeIdentifier();\r\n    Assert.assertNotNull(\"Delegation token identifier should not be null\", tDT);\r\n    Assert.assertEquals(\"Owner of delegation token is not the expected\", new Text(FOO_USER), tDT.getOwner());\r\n    Assert.assertEquals(\"Real user of delegation token is not the expected\", new Text(HTTP_USER), tDT.getRealUser());\r\n    final Token<TimelineDelegationTokenIdentifier> tokenToRenew = token;\r\n    renewTime1 = httpUserClient.renewDelegationToken(tokenToRenew);\r\n    renewTime2 = httpUserClient.renewDelegationToken(tokenToRenew);\r\n    Assert.assertTrue(\"renewTime2 should be later than renewTime1\", renewTime1 < renewTime2);\r\n    Assert.assertFalse(\"Service field of token should not be empty\", tokenToRenew.getService().toString().isEmpty());\r\n    fooUserClient.cancelDelegationToken(tokenToRenew);\r\n    try {\r\n        httpUserClient.renewDelegationToken(tokenToRenew);\r\n        Assert.fail(\"Renew of delegation token should not be successful\");\r\n    } catch (Exception e) {\r\n        LOG.info(\"Exception while renewing delegation token\", e);\r\n        Assert.assertTrue(e.getMessage().contains(\"Renewal request for unknown token\"));\r\n    }\r\n    UserGroupInformation barUgi = UserGroupInformation.createProxyUser(BAR_USER, httpUser);\r\n    TimelineClient barUserClient = barUgi.doAs(new PrivilegedExceptionAction<TimelineClient>() {\r\n\r\n        @Override\r\n        public TimelineClient run() {\r\n            return createTimelineClientForUGI();\r\n        }\r\n    });\r\n    try {\r\n        barUserClient.getDelegationToken(httpUser.getShortUserName());\r\n        Assert.fail(\"Retrieval of delegation token should not be successful\");\r\n    } catch (Exception e) {\r\n        LOG.info(\"Exception while retrieving delegation token\", e);\r\n        Assert.assertTrue(e.getCause() instanceof AuthorizationException || e.getCause() instanceof AuthenticationException);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : true
} ]