[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "cleanUp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void cleanUp()\n{\r\n    historyManager = null;\r\n    appManager = null;\r\n    fetcher = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testHelper",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testHelper(boolean isAHSEnabled) throws YarnException, IOException\n{\r\n    conf.setBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED, isAHSEnabled);\r\n    appManager = Mockito.mock(ApplicationClientProtocol.class);\r\n    Mockito.when(appManager.getApplicationReport(Mockito.any(GetApplicationReportRequest.class))).thenThrow(new ApplicationNotFoundException(appNotFoundExceptionMsg));\r\n    fetcher = new AppReportFetcherForTest(conf, appManager);\r\n    ApplicationId appId = ApplicationId.newInstance(0, 0);\r\n    fetcher.getApplicationReport(appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testFetchReportAHSEnabled",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testFetchReportAHSEnabled() throws YarnException, IOException\n{\r\n    testHelper(true);\r\n    Mockito.verify(historyManager, Mockito.times(1)).getApplicationReport(Mockito.any(GetApplicationReportRequest.class));\r\n    Mockito.verify(appManager, Mockito.times(1)).getApplicationReport(Mockito.any(GetApplicationReportRequest.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testFetchReportAHSDisabled",
  "errType" : [ "ApplicationNotFoundException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testFetchReportAHSDisabled() throws YarnException, IOException\n{\r\n    try {\r\n        testHelper(false);\r\n    } catch (ApplicationNotFoundException e) {\r\n        Assert.assertTrue(e.getMessage() == appNotFoundExceptionMsg);\r\n    }\r\n    Mockito.verify(appManager, Mockito.times(1)).getApplicationReport(Mockito.any(GetApplicationReportRequest.class));\r\n    if (historyManager != null) {\r\n        Assert.fail(\"HistoryManager should be null as AHS is disabled\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testGetPathApplicationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testGetPathApplicationId()\n{\r\n    assertEquals(\"/proxy/application_100_0001\", ProxyUriUtils.getPath(BuilderUtils.newApplicationId(100l, 1)));\r\n    assertEquals(\"/proxy/application_6384623_0005\", ProxyUriUtils.getPath(BuilderUtils.newApplicationId(6384623l, 5)));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testGetPathApplicationIdBad",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetPathApplicationIdBad()\n{\r\n    ProxyUriUtils.getPath(null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testGetPathApplicationIdString",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetPathApplicationIdString()\n{\r\n    assertEquals(\"/proxy/application_6384623_0005\", ProxyUriUtils.getPath(BuilderUtils.newApplicationId(6384623l, 5), null));\r\n    assertEquals(\"/proxy/application_6384623_0005/static/app\", ProxyUriUtils.getPath(BuilderUtils.newApplicationId(6384623l, 5), \"/static/app\"));\r\n    assertEquals(\"/proxy/application_6384623_0005/\", ProxyUriUtils.getPath(BuilderUtils.newApplicationId(6384623l, 5), \"/\"));\r\n    assertEquals(\"/proxy/application_6384623_0005/some/path\", ProxyUriUtils.getPath(BuilderUtils.newApplicationId(6384623l, 5), \"some/path\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testGetPathAndQuery",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testGetPathAndQuery()\n{\r\n    assertEquals(\"/proxy/application_6384623_0005/static/app?foo=bar\", ProxyUriUtils.getPathAndQuery(BuilderUtils.newApplicationId(6384623l, 5), \"/static/app\", \"?foo=bar\", false));\r\n    assertEquals(\"/proxy/application_6384623_0005/static/app?foo=bar&bad=good&proxyapproved=true\", ProxyUriUtils.getPathAndQuery(BuilderUtils.newApplicationId(6384623l, 5), \"/static/app\", \"foo=bar&bad=good\", true));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testGetProxyUri",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testGetProxyUri() throws Exception\n{\r\n    URI originalUri = new URI(\"http://host.com/static/foo?bar=bar\");\r\n    URI proxyUri = new URI(\"http://proxy.net:8080/\");\r\n    ApplicationId id = BuilderUtils.newApplicationId(6384623l, 5);\r\n    URI expected = new URI(\"http://proxy.net:8080/proxy/application_6384623_0005/static/foo?bar=bar\");\r\n    URI result = ProxyUriUtils.getProxyUri(originalUri, proxyUri, id);\r\n    assertEquals(expected, result);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testGetProxyUriNull",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testGetProxyUriNull() throws Exception\n{\r\n    URI originalUri = null;\r\n    URI proxyUri = new URI(\"http://proxy.net:8080/\");\r\n    ApplicationId id = BuilderUtils.newApplicationId(6384623l, 5);\r\n    URI expected = new URI(\"http://proxy.net:8080/proxy/application_6384623_0005/\");\r\n    URI result = ProxyUriUtils.getProxyUri(originalUri, proxyUri, id);\r\n    assertEquals(expected, result);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testGetProxyUriFromPluginsReturnsNullIfNoPlugins",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testGetProxyUriFromPluginsReturnsNullIfNoPlugins() throws URISyntaxException\n{\r\n    ApplicationId id = BuilderUtils.newApplicationId(6384623l, 5);\r\n    List<TrackingUriPlugin> list = Lists.newArrayListWithExpectedSize(0);\r\n    assertNull(ProxyUriUtils.getUriFromTrackingPlugins(id, list));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testGetProxyUriFromPluginsReturnsValidUriWhenAble",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testGetProxyUriFromPluginsReturnsValidUriWhenAble() throws URISyntaxException\n{\r\n    ApplicationId id = BuilderUtils.newApplicationId(6384623l, 5);\r\n    List<TrackingUriPlugin> list = Lists.newArrayListWithExpectedSize(2);\r\n    list.add(new TrackingUriPlugin() {\r\n\r\n        public URI getTrackingUri(ApplicationId id) throws URISyntaxException {\r\n            return null;\r\n        }\r\n    });\r\n    list.add(new TrackingUriPlugin() {\r\n\r\n        public URI getTrackingUri(ApplicationId id) throws URISyntaxException {\r\n            return new URI(\"http://history.server.net/\");\r\n        }\r\n    });\r\n    URI result = ProxyUriUtils.getUriFromTrackingPlugins(id, list);\r\n    assertNotNull(result);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "start",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void start() throws Exception\n{\r\n    server = new Server(0);\r\n    ((QueuedThreadPool) server.getThreadPool()).setMaxThreads(20);\r\n    ServletContextHandler context = new ServletContextHandler();\r\n    context.setContextPath(\"/foo\");\r\n    server.setHandler(context);\r\n    context.addServlet(new ServletHolder(TestServlet.class), \"/bar\");\r\n    context.addServlet(new ServletHolder(TimeOutTestServlet.class), \"/timeout\");\r\n    ((ServerConnector) server.getConnectors()[0]).setHost(\"localhost\");\r\n    server.start();\r\n    originalPort = ((ServerConnector) server.getConnectors()[0]).getLocalPort();\r\n    LOG.info(\"Running embedded servlet container at: http://localhost:\" + originalPort);\r\n    System.setProperty(\"sun.net.http.allowRestrictedHeaders\", \"true\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testWebAppProxyServlet",
  "errType" : null,
  "containingMethodsNum" : 49,
  "sourceCodeText" : "void testWebAppProxyServlet() throws Exception\n{\r\n    configuration.set(YarnConfiguration.PROXY_ADDRESS, \"localhost:9090\");\r\n    configuration.setInt(\"hadoop.http.max.threads\", 10);\r\n    WebAppProxyServerForTest proxy = new WebAppProxyServerForTest();\r\n    proxy.init(configuration);\r\n    proxy.start();\r\n    int proxyPort = proxy.proxy.proxyServer.getConnectorAddress(0).getPort();\r\n    AppReportFetcherForTest appReportFetcher = proxy.proxy.appReportFetcher;\r\n    try {\r\n        URL emptyUrl = new URL(\"http://localhost:\" + proxyPort + \"/proxy\");\r\n        HttpURLConnection emptyProxyConn = (HttpURLConnection) emptyUrl.openConnection();\r\n        emptyProxyConn.connect();\r\n        assertEquals(HttpURLConnection.HTTP_NOT_FOUND, emptyProxyConn.getResponseCode());\r\n        URL wrongUrl = new URL(\"http://localhost:\" + proxyPort + \"/proxy/app\");\r\n        HttpURLConnection proxyConn = (HttpURLConnection) wrongUrl.openConnection();\r\n        proxyConn.connect();\r\n        assertEquals(HttpURLConnection.HTTP_INTERNAL_ERROR, proxyConn.getResponseCode());\r\n        URL url = new URL(\"http://localhost:\" + proxyPort + \"/proxy/application_00_0\");\r\n        proxyConn = (HttpURLConnection) url.openConnection();\r\n        proxyConn.setRequestProperty(\"Cookie\", \"checked_application_0_0000=true\");\r\n        proxyConn.connect();\r\n        assertEquals(HttpURLConnection.HTTP_OK, proxyConn.getResponseCode());\r\n        assertTrue(isResponseCookiePresent(proxyConn, \"checked_application_0_0000\", \"true\"));\r\n        URL redirectUrl = new URL(\"http://localhost:\" + proxyPort + \"/proxy/redirect/application_00_0\");\r\n        proxyConn = (HttpURLConnection) redirectUrl.openConnection();\r\n        proxyConn.setInstanceFollowRedirects(false);\r\n        proxyConn.connect();\r\n        assertEquals(\"The proxy returned an unexpected status code rather than\" + \"redirecting the connection (302)\", HttpURLConnection.HTTP_MOVED_TEMP, proxyConn.getResponseCode());\r\n        String expected = WebAppUtils.getResolvedRMWebAppURLWithScheme(configuration) + \"/cluster/failure/application_00_0\";\r\n        String redirect = proxyConn.getHeaderField(ProxyUtils.LOCATION);\r\n        assertEquals(\"The proxy did not redirect the connection to the failure \" + \"page of the RM\", expected, redirect);\r\n        appReportFetcher.answer = 1;\r\n        proxyConn = (HttpURLConnection) url.openConnection();\r\n        proxyConn.setRequestProperty(\"Cookie\", \"checked_application_0_0000=true\");\r\n        proxyConn.connect();\r\n        assertEquals(HttpURLConnection.HTTP_NOT_FOUND, proxyConn.getResponseCode());\r\n        assertFalse(isResponseCookiePresent(proxyConn, \"checked_application_0_0000\", \"true\"));\r\n        appReportFetcher.answer = 4;\r\n        proxyConn = (HttpURLConnection) url.openConnection();\r\n        proxyConn.setRequestProperty(\"Cookie\", \"checked_application_0_0000=true\");\r\n        proxyConn.connect();\r\n        assertEquals(HttpURLConnection.HTTP_NOT_FOUND, proxyConn.getResponseCode());\r\n        assertFalse(isResponseCookiePresent(proxyConn, \"checked_application_0_0000\", \"true\"));\r\n        appReportFetcher.answer = 2;\r\n        proxyConn = (HttpURLConnection) url.openConnection();\r\n        proxyConn.connect();\r\n        assertEquals(HttpURLConnection.HTTP_OK, proxyConn.getResponseCode());\r\n        String s = readInputStream(proxyConn.getInputStream());\r\n        assertTrue(s.contains(\"to continue to an Application Master web interface owned by\"));\r\n        assertTrue(s.contains(\"WARNING: The following page may not be safe!\"));\r\n        appReportFetcher.answer = 3;\r\n        proxyConn = (HttpURLConnection) url.openConnection();\r\n        proxyConn.setRequestProperty(\"Cookie\", \"checked_application_0_0000=true\");\r\n        proxyConn.connect();\r\n        assertEquals(HttpURLConnection.HTTP_OK, proxyConn.getResponseCode());\r\n        appReportFetcher.answer = 5;\r\n        URL clientUrl = new URL(\"http://localhost:\" + proxyPort + \"/proxy/application_00_0/test/tez?x=y&h=p\");\r\n        proxyConn = (HttpURLConnection) clientUrl.openConnection();\r\n        proxyConn.connect();\r\n        LOG.info(\"\" + proxyConn.getURL());\r\n        LOG.info(\"ProxyConn.getHeaderField(): \" + proxyConn.getHeaderField(ProxyUtils.LOCATION));\r\n        assertEquals(\"http://localhost:\" + originalPort + \"/foo/bar/test/tez?a=b&x=y&h=p#main\", proxyConn.getURL().toString());\r\n    } finally {\r\n        proxy.close();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testWebAppProxyConnectionTimeout",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testWebAppProxyConnectionTimeout() throws IOException, ServletException\n{\r\n    HttpServletRequest request = mock(HttpServletRequest.class);\r\n    when(request.getMethod()).thenReturn(\"GET\");\r\n    when(request.getRemoteUser()).thenReturn(\"dr.who\");\r\n    when(request.getPathInfo()).thenReturn(\"/application_00_0\");\r\n    when(request.getHeaderNames()).thenReturn(Collections.emptyEnumeration());\r\n    HttpServletResponse response = mock(HttpServletResponse.class);\r\n    when(response.getOutputStream()).thenReturn(null);\r\n    WebAppProxyServlet servlet = new WebAppProxyServlet();\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.RM_PROXY_TIMEOUT_ENABLED, true);\r\n    conf.setInt(YarnConfiguration.RM_PROXY_CONNECTION_TIMEOUT, 1000);\r\n    servlet.setConf(conf);\r\n    ServletConfig config = mock(ServletConfig.class);\r\n    ServletContext context = mock(ServletContext.class);\r\n    when(config.getServletContext()).thenReturn(context);\r\n    AppReportFetcherForTest appReportFetcher = new AppReportFetcherForTest(new YarnConfiguration());\r\n    when(config.getServletContext().getAttribute(WebAppProxy.FETCHER_ATTRIBUTE)).thenReturn(appReportFetcher);\r\n    appReportFetcher.answer = 7;\r\n    servlet.init(config);\r\n    servlet.doGet(request, response);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testAppReportForEmptyTrackingUrl",
  "errType" : [ "ConnectException", "ConnectException" ],
  "containingMethodsNum" : 23,
  "sourceCodeText" : "void testAppReportForEmptyTrackingUrl() throws Exception\n{\r\n    configuration.set(YarnConfiguration.PROXY_ADDRESS, \"localhost:9090\");\r\n    configuration.setInt(\"hadoop.http.max.threads\", 10);\r\n    WebAppProxyServerForTest proxy = new WebAppProxyServerForTest();\r\n    proxy.init(configuration);\r\n    proxy.start();\r\n    int proxyPort = proxy.proxy.proxyServer.getConnectorAddress(0).getPort();\r\n    AppReportFetcherForTest appReportFetcher = proxy.proxy.appReportFetcher;\r\n    try {\r\n        configuration.setBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED, false);\r\n        ApplicationId app = ApplicationId.newInstance(0, 0);\r\n        appReportFetcher.answer = 6;\r\n        URL url = new URL(\"http://localhost:\" + proxyPort + \"/proxy/\" + app.toString());\r\n        HttpURLConnection proxyConn = (HttpURLConnection) url.openConnection();\r\n        proxyConn.connect();\r\n        try {\r\n            proxyConn.getResponseCode();\r\n        } catch (ConnectException e) {\r\n        }\r\n        String appAddressInRm = WebAppUtils.getResolvedRMWebAppURLWithScheme(configuration) + \"/cluster\" + \"/app/\" + app.toString();\r\n        assertTrue(\"Webapp proxy servlet should have redirected to RM\", proxyConn.getURL().toString().equals(appAddressInRm));\r\n        configuration.setBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED, true);\r\n        proxyConn = (HttpURLConnection) url.openConnection();\r\n        proxyConn.connect();\r\n        try {\r\n            proxyConn.getResponseCode();\r\n        } catch (ConnectException e) {\r\n        }\r\n        String appAddressInAhs = WebAppUtils.getHttpSchemePrefix(configuration) + WebAppUtils.getAHSWebAppURLWithoutScheme(configuration) + \"/applicationhistory\" + \"/app/\" + app.toString();\r\n        assertTrue(\"Webapp proxy servlet should have redirected to AHS\", proxyConn.getURL().toString().equals(appAddressInAhs));\r\n    } finally {\r\n        proxy.close();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testWebAppProxyPassThroughHeaders",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testWebAppProxyPassThroughHeaders() throws Exception\n{\r\n    Configuration configuration = new Configuration();\r\n    configuration.set(YarnConfiguration.PROXY_ADDRESS, \"localhost:9091\");\r\n    configuration.setInt(\"hadoop.http.max.threads\", 10);\r\n    WebAppProxyServerForTest proxy = new WebAppProxyServerForTest();\r\n    proxy.init(configuration);\r\n    proxy.start();\r\n    int proxyPort = proxy.proxy.proxyServer.getConnectorAddress(0).getPort();\r\n    try {\r\n        URL url = new URL(\"http://localhost:\" + proxyPort + \"/proxy/application_00_1\");\r\n        HttpURLConnection proxyConn = (HttpURLConnection) url.openConnection();\r\n        proxyConn.addRequestProperty(\"Origin\", \"http://www.someurl.com\");\r\n        proxyConn.addRequestProperty(\"Access-Control-Request-Method\", \"GET\");\r\n        proxyConn.addRequestProperty(\"Access-Control-Request-Headers\", \"Authorization\");\r\n        proxyConn.addRequestProperty(UNKNOWN_HEADER, \"unknown\");\r\n        assertThat(proxyConn.getRequestProperties()).hasSize(4);\r\n        proxyConn.connect();\r\n        assertEquals(HttpURLConnection.HTTP_OK, proxyConn.getResponseCode());\r\n        assertEquals(numberOfHeaders, 9);\r\n        assertFalse(hasUnknownHeader);\r\n    } finally {\r\n        proxy.close();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testWebAppProxyServerMainMethod",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testWebAppProxyServerMainMethod() throws Exception\n{\r\n    WebAppProxyServer mainServer = null;\r\n    Configuration conf = new YarnConfiguration();\r\n    conf.set(YarnConfiguration.PROXY_ADDRESS, \"localhost:9099\");\r\n    try {\r\n        mainServer = WebAppProxyServer.startServer(conf);\r\n        int counter = 20;\r\n        URL wrongUrl = new URL(\"http://localhost:9099/proxy/app\");\r\n        HttpURLConnection proxyConn = null;\r\n        while (counter > 0) {\r\n            counter--;\r\n            try {\r\n                proxyConn = (HttpURLConnection) wrongUrl.openConnection();\r\n                proxyConn.connect();\r\n                proxyConn.getResponseCode();\r\n                counter = 0;\r\n            } catch (Exception e) {\r\n                Thread.sleep(100);\r\n            }\r\n        }\r\n        assertNotNull(proxyConn);\r\n        assertEquals(HttpURLConnection.HTTP_INTERNAL_ERROR, proxyConn.getResponseCode());\r\n    } finally {\r\n        if (mainServer != null) {\r\n            mainServer.stop();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testCheckHttpsStrictAndNotProvided",
  "errType" : null,
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void testCheckHttpsStrictAndNotProvided() throws Exception\n{\r\n    HttpServletResponse resp = mock(HttpServletResponse.class);\r\n    StringWriter sw = new StringWriter();\r\n    when(resp.getWriter()).thenReturn(new PrintWriter(sw));\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    final URI httpLink = new URI(\"http://foo.com\");\r\n    final URI httpsLink = new URI(\"https://foo.com\");\r\n    conf.set(YarnConfiguration.RM_APPLICATION_HTTPS_POLICY, \"NONE\");\r\n    assertFalse(WebAppProxyServlet.checkHttpsStrictAndNotProvided(resp, httpsLink, conf));\r\n    assertEquals(\"\", sw.toString());\r\n    Mockito.verify(resp, Mockito.times(0)).setContentType(Mockito.any());\r\n    assertFalse(WebAppProxyServlet.checkHttpsStrictAndNotProvided(resp, httpLink, conf));\r\n    assertEquals(\"\", sw.toString());\r\n    Mockito.verify(resp, Mockito.times(0)).setContentType(Mockito.any());\r\n    conf.set(YarnConfiguration.RM_APPLICATION_HTTPS_POLICY, \"LENIENT\");\r\n    assertFalse(WebAppProxyServlet.checkHttpsStrictAndNotProvided(resp, httpsLink, conf));\r\n    assertEquals(\"\", sw.toString());\r\n    Mockito.verify(resp, Mockito.times(0)).setContentType(Mockito.any());\r\n    assertFalse(WebAppProxyServlet.checkHttpsStrictAndNotProvided(resp, httpLink, conf));\r\n    assertEquals(\"\", sw.toString());\r\n    Mockito.verify(resp, Mockito.times(0)).setContentType(Mockito.any());\r\n    conf.set(YarnConfiguration.RM_APPLICATION_HTTPS_POLICY, \"STRICT\");\r\n    assertFalse(WebAppProxyServlet.checkHttpsStrictAndNotProvided(resp, httpsLink, conf));\r\n    assertEquals(\"\", sw.toString());\r\n    Mockito.verify(resp, Mockito.times(0)).setContentType(Mockito.any());\r\n    assertTrue(WebAppProxyServlet.checkHttpsStrictAndNotProvided(resp, httpLink, conf));\r\n    String s = sw.toString();\r\n    assertTrue(\"Was expecting an HTML page explaining that an HTTPS tracking\" + \" url must be used but found \" + s, s.contains(\"HTTPS must be used\"));\r\n    Mockito.verify(resp, Mockito.times(1)).setContentType(MimeType.HTML);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "readInputStream",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String readInputStream(InputStream input) throws Exception\n{\r\n    ByteArrayOutputStream data = new ByteArrayOutputStream();\r\n    byte[] buffer = new byte[512];\r\n    int read;\r\n    while ((read = input.read(buffer)) >= 0) {\r\n        data.write(buffer, 0, read);\r\n    }\r\n    return new String(data.toByteArray(), \"UTF-8\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "isResponseCookiePresent",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "boolean isResponseCookiePresent(HttpURLConnection proxyConn, String expectedName, String expectedValue)\n{\r\n    Map<String, List<String>> headerFields = proxyConn.getHeaderFields();\r\n    List<String> cookiesHeader = headerFields.get(\"Set-Cookie\");\r\n    if (cookiesHeader != null) {\r\n        for (String cookie : cookiesHeader) {\r\n            HttpCookie c = HttpCookie.parse(cookie).get(0);\r\n            if (c.getName().equals(expectedName) && c.getValue().equals(expectedValue)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "stop",
  "errType" : [ "Exception", "Exception" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void stop() throws Exception\n{\r\n    try {\r\n        server.stop();\r\n    } catch (Exception e) {\r\n    }\r\n    try {\r\n        server.destroy();\r\n    } catch (Exception e) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testInit",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testInit() throws Exception\n{\r\n    ProxyCA proxyCA = new ProxyCA();\r\n    Assert.assertNull(proxyCA.getCaCert());\r\n    Assert.assertNull(proxyCA.getCaKeyPair());\r\n    Assert.assertNull(proxyCA.getX509KeyManager());\r\n    Assert.assertNull(proxyCA.getHostnameVerifier());\r\n    proxyCA.init();\r\n    Assert.assertNotNull(proxyCA.getCaCert());\r\n    Assert.assertNotNull(proxyCA.getCaKeyPair());\r\n    Assert.assertNotNull(proxyCA.getX509KeyManager());\r\n    Assert.assertNotNull(proxyCA.getHostnameVerifier());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testInit2Null",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testInit2Null() throws Exception\n{\r\n    ProxyCA proxyCA = new ProxyCA();\r\n    Assert.assertNull(proxyCA.getCaCert());\r\n    Assert.assertNull(proxyCA.getCaKeyPair());\r\n    Assert.assertNull(proxyCA.getX509KeyManager());\r\n    Assert.assertNull(proxyCA.getHostnameVerifier());\r\n    proxyCA.init(null, null);\r\n    Assert.assertNotNull(proxyCA.getCaCert());\r\n    Assert.assertNotNull(proxyCA.getCaKeyPair());\r\n    Assert.assertNotNull(proxyCA.getX509KeyManager());\r\n    Assert.assertNotNull(proxyCA.getHostnameVerifier());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testInit2Mismatch",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testInit2Mismatch() throws Exception\n{\r\n    ProxyCA proxyCA = new ProxyCA();\r\n    Assert.assertNull(proxyCA.getCaCert());\r\n    Assert.assertNull(proxyCA.getCaKeyPair());\r\n    Assert.assertNull(proxyCA.getX509KeyManager());\r\n    Assert.assertNull(proxyCA.getHostnameVerifier());\r\n    CertKeyPair pair1 = createCertAndKeyPair();\r\n    CertKeyPair pair2 = createCertAndKeyPair();\r\n    Assert.assertNotEquals(pair1.getCert(), pair2.getCert());\r\n    Assert.assertNotEquals(pair1.getKeyPair().getPrivate(), pair2.getKeyPair().getPrivate());\r\n    Assert.assertNotEquals(pair1.getKeyPair().getPublic(), pair2.getKeyPair().getPublic());\r\n    proxyCA.init(pair1.getCert(), pair2.getKeyPair().getPrivate());\r\n    Assert.assertNotNull(proxyCA.getCaCert());\r\n    Assert.assertNotNull(proxyCA.getCaKeyPair());\r\n    Assert.assertNotNull(proxyCA.getX509KeyManager());\r\n    Assert.assertNotNull(proxyCA.getHostnameVerifier());\r\n    Assert.assertNotEquals(proxyCA.getCaCert(), pair1.getCert());\r\n    Assert.assertNotEquals(proxyCA.getCaKeyPair().getPrivate(), pair2.getKeyPair().getPrivate());\r\n    Assert.assertNotEquals(proxyCA.getCaKeyPair().getPublic(), pair2.getKeyPair().getPublic());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testInit2Invalid",
  "errType" : [ "InvalidKeyException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testInit2Invalid() throws Exception\n{\r\n    ProxyCA proxyCA = new ProxyCA();\r\n    Assert.assertNull(proxyCA.getCaCert());\r\n    Assert.assertNull(proxyCA.getCaKeyPair());\r\n    Assert.assertNull(proxyCA.getX509KeyManager());\r\n    Assert.assertNull(proxyCA.getHostnameVerifier());\r\n    X509Certificate certificate = Mockito.mock(X509Certificate.class);\r\n    PrivateKey privateKey = Mockito.mock(PrivateKey.class);\r\n    try {\r\n        proxyCA.init(certificate, privateKey);\r\n        Assert.fail(\"Expected InvalidKeyException\");\r\n    } catch (InvalidKeyException e) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testInit2",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testInit2() throws Exception\n{\r\n    ProxyCA proxyCA = new ProxyCA();\r\n    Assert.assertNull(proxyCA.getCaCert());\r\n    Assert.assertNull(proxyCA.getCaKeyPair());\r\n    Assert.assertNull(proxyCA.getX509KeyManager());\r\n    Assert.assertNull(proxyCA.getHostnameVerifier());\r\n    CertKeyPair pair = createCertAndKeyPair();\r\n    proxyCA.init(pair.getCert(), pair.getKeyPair().getPrivate());\r\n    Assert.assertEquals(pair.getCert(), proxyCA.getCaCert());\r\n    Assert.assertEquals(pair.getKeyPair().getPrivate(), proxyCA.getCaKeyPair().getPrivate());\r\n    Assert.assertEquals(pair.getKeyPair().getPublic(), proxyCA.getCaKeyPair().getPublic());\r\n    Assert.assertNotNull(proxyCA.getX509KeyManager());\r\n    Assert.assertNotNull(proxyCA.getHostnameVerifier());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testCreateChildKeyStore",
  "errType" : null,
  "containingMethodsNum" : 26,
  "sourceCodeText" : "void testCreateChildKeyStore() throws Exception\n{\r\n    ProxyCA proxyCA = new ProxyCA();\r\n    proxyCA.init();\r\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    byte[] keystoreBytes = proxyCA.createChildKeyStore(appId, \"password\");\r\n    KeyStore keyStore = KeyStoreTestUtil.bytesToKeyStore(keystoreBytes, \"password\");\r\n    Assert.assertEquals(1, keyStore.size());\r\n    Certificate[] certChain = keyStore.getCertificateChain(\"server\");\r\n    Assert.assertEquals(2, certChain.length);\r\n    X509Certificate caCert = (X509Certificate) certChain[1];\r\n    X509Certificate cert = (X509Certificate) certChain[0];\r\n    Assert.assertEquals(caCert.getSubjectX500Principal().toString(), cert.getIssuerDN().toString());\r\n    Assert.assertEquals(new X500Principal(\"CN=\" + appId), cert.getSubjectX500Principal());\r\n    Assert.assertFalse(\"Found multiple fields in X500 Principal, when there \" + \"should have only been one: \" + cert.getSubjectX500Principal(), cert.getSubjectX500Principal().toString().contains(\",\"));\r\n    Assert.assertEquals(\"SHA512withRSA\", cert.getSigAlgName());\r\n    Assert.assertEquals(cert.getNotBefore(), cert.getNotAfter());\r\n    Assert.assertTrue(\"Expected certificate to be expired but was not: \" + cert.getNotAfter(), cert.getNotAfter().before(new Date()));\r\n    Assert.assertEquals(new X500Principal(\"CN=\" + appId).toString(), cert.getSubjectDN().toString());\r\n    Key privateKey = keyStore.getKey(\"server\", \"password\".toCharArray());\r\n    Assert.assertEquals(\"RSA\", privateKey.getAlgorithm());\r\n    Assert.assertEquals(-1, cert.getBasicConstraints());\r\n    PublicKey caPublicKey = caCert.getPublicKey();\r\n    cert.verify(caPublicKey);\r\n    checkCACert(caCert);\r\n    Assert.assertEquals(proxyCA.getCaCert(), caCert);\r\n    caCert.verify(caPublicKey);\r\n    PrivateKey caPrivateKey = proxyCA.getX509KeyManager().getPrivateKey(null);\r\n    checkPrivatePublicKeys(caPrivateKey, caPublicKey);\r\n    Assert.assertEquals(proxyCA.getCaKeyPair().getPublic(), caPublicKey);\r\n    Assert.assertEquals(proxyCA.getCaKeyPair().getPrivate(), caPrivateKey);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testGetChildTrustStore",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testGetChildTrustStore() throws Exception\n{\r\n    ProxyCA proxyCA = new ProxyCA();\r\n    proxyCA.init();\r\n    byte[] truststoreBytes = proxyCA.getChildTrustStore(\"password\");\r\n    KeyStore truststore = KeyStoreTestUtil.bytesToKeyStore(truststoreBytes, \"password\");\r\n    Assert.assertEquals(1, truststore.size());\r\n    X509Certificate caCert = (X509Certificate) truststore.getCertificate(\"client\");\r\n    checkCACert(caCert);\r\n    Assert.assertEquals(proxyCA.getCaCert(), caCert);\r\n    PublicKey caPublicKey = caCert.getPublicKey();\r\n    caCert.verify(caPublicKey);\r\n    PrivateKey caPrivateKey = proxyCA.getX509KeyManager().getPrivateKey(null);\r\n    checkPrivatePublicKeys(caPrivateKey, caPublicKey);\r\n    Assert.assertEquals(proxyCA.getCaKeyPair().getPublic(), caPublicKey);\r\n    Assert.assertEquals(proxyCA.getCaKeyPair().getPrivate(), caPrivateKey);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testGenerateKeyStorePassword",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testGenerateKeyStorePassword() throws Exception\n{\r\n    ProxyCA proxyCA = new ProxyCA();\r\n    proxyCA.init();\r\n    Set<String> passwords = new HashSet<>();\r\n    for (int i = 0; i < 5; i++) {\r\n        String password = proxyCA.generateKeyStorePassword();\r\n        Assert.assertEquals(16, password.length());\r\n        for (char c : password.toCharArray()) {\r\n            Assert.assertFalse(\"Found character '\" + c + \"' in password '\" + password + \"' which is outside of the expected range\", c < ' ');\r\n            Assert.assertFalse(\"Found character '\" + c + \"' in password '\" + password + \"' which is outside of the expected range\", c > 'z');\r\n        }\r\n        Assert.assertFalse(\"Password \" + password + \" was generated twice, which is _extremely_ unlikely\" + \" and shouldn't practically happen: \" + passwords, passwords.contains(password));\r\n        passwords.add(password);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testCreateTrustManagerDefaultTrustManager",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testCreateTrustManagerDefaultTrustManager() throws Exception\n{\r\n    ProxyCA proxyCA = new ProxyCA();\r\n    proxyCA.init();\r\n    X509TrustManager defaultTrustManager = Mockito.mock(X509TrustManager.class);\r\n    proxyCA.setDefaultTrustManager(defaultTrustManager);\r\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    X509TrustManager trustManager = proxyCA.createTrustManager(appId);\r\n    Mockito.when(defaultTrustManager.getAcceptedIssuers()).thenReturn(new X509Certificate[] { KeyStoreTestUtil.generateCertificate(\"CN=foo\", KeyStoreTestUtil.generateKeyPair(\"RSA\"), 30, \"SHA1withRSA\") });\r\n    Assert.assertArrayEquals(defaultTrustManager.getAcceptedIssuers(), trustManager.getAcceptedIssuers());\r\n    trustManager.checkClientTrusted(null, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testCreateTrustManagerYarnCert",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testCreateTrustManagerYarnCert() throws Exception\n{\r\n    ProxyCA proxyCA = new ProxyCA();\r\n    proxyCA.init();\r\n    X509TrustManager defaultTrustManager = Mockito.mock(X509TrustManager.class);\r\n    proxyCA.setDefaultTrustManager(defaultTrustManager);\r\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    X509TrustManager trustManager = proxyCA.createTrustManager(appId);\r\n    X509Certificate[] certChain = castCertificateArrayToX509CertificateArray(KeyStoreTestUtil.bytesToKeyStore(proxyCA.createChildKeyStore(appId, \"password\"), \"password\").getCertificateChain(\"server\"));\r\n    trustManager.checkServerTrusted(certChain, \"RSA\");\r\n    Mockito.verify(defaultTrustManager, Mockito.times(0)).checkServerTrusted(certChain, \"RSA\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testCreateTrustManagerWrongApp",
  "errType" : [ "CertificateException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testCreateTrustManagerWrongApp() throws Exception\n{\r\n    ProxyCA proxyCA = new ProxyCA();\r\n    proxyCA.init();\r\n    X509TrustManager defaultTrustManager = Mockito.mock(X509TrustManager.class);\r\n    proxyCA.setDefaultTrustManager(defaultTrustManager);\r\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    ApplicationId appId2 = ApplicationId.newInstance(System.currentTimeMillis(), 2);\r\n    X509TrustManager trustManager = proxyCA.createTrustManager(appId);\r\n    X509Certificate[] certChain = castCertificateArrayToX509CertificateArray(KeyStoreTestUtil.bytesToKeyStore(proxyCA.createChildKeyStore(appId2, \"password\"), \"password\").getCertificateChain(\"server\"));\r\n    try {\r\n        trustManager.checkServerTrusted(certChain, \"RSA\");\r\n        Assert.fail(\"Should have thrown a CertificateException, but did not\");\r\n    } catch (CertificateException ce) {\r\n        Assert.assertEquals(\"Expected to find Subject X500 Principal with CN=\" + appId + \" but found CN=\" + appId2, ce.getMessage());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testCreateTrustManagerWrongRM",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testCreateTrustManagerWrongRM() throws Exception\n{\r\n    ProxyCA proxyCA = new ProxyCA();\r\n    proxyCA.init();\r\n    X509TrustManager defaultTrustManager = Mockito.mock(X509TrustManager.class);\r\n    proxyCA.setDefaultTrustManager(defaultTrustManager);\r\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    X509TrustManager trustManager = proxyCA.createTrustManager(appId);\r\n    ProxyCA proxyCA2 = new ProxyCA();\r\n    proxyCA2.init();\r\n    X509Certificate[] certChain = castCertificateArrayToX509CertificateArray(KeyStoreTestUtil.bytesToKeyStore(proxyCA2.createChildKeyStore(appId, \"password\"), \"password\").getCertificateChain(\"server\"));\r\n    Mockito.verify(defaultTrustManager, Mockito.times(0)).checkServerTrusted(certChain, \"RSA\");\r\n    trustManager.checkServerTrusted(certChain, \"RSA\");\r\n    Mockito.verify(defaultTrustManager, Mockito.times(1)).checkServerTrusted(certChain, \"RSA\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testCreateTrustManagerRealCert",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testCreateTrustManagerRealCert() throws Exception\n{\r\n    ProxyCA proxyCA = new ProxyCA();\r\n    proxyCA.init();\r\n    X509TrustManager defaultTrustManager = Mockito.mock(X509TrustManager.class);\r\n    proxyCA.setDefaultTrustManager(defaultTrustManager);\r\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    X509TrustManager trustManager = proxyCA.createTrustManager(appId);\r\n    X509Certificate[] certChain = new X509Certificate[] { KeyStoreTestUtil.generateCertificate(\"CN=foo.com\", KeyStoreTestUtil.generateKeyPair(\"RSA\"), 30, \"SHA1withRSA\") };\r\n    Mockito.verify(defaultTrustManager, Mockito.times(0)).checkServerTrusted(certChain, \"RSA\");\r\n    trustManager.checkServerTrusted(certChain, \"RSA\");\r\n    Mockito.verify(defaultTrustManager, Mockito.times(1)).checkServerTrusted(certChain, \"RSA\");\r\n    certChain = new X509Certificate[] { KeyStoreTestUtil.generateCertificate(\"CN=foo.com\", KeyStoreTestUtil.generateKeyPair(\"RSA\"), 30, \"SHA1withRSA\"), KeyStoreTestUtil.generateCertificate(\"CN=foo.com\", KeyStoreTestUtil.generateKeyPair(\"RSA\"), 30, \"SHA1withRSA\") };\r\n    Mockito.verify(defaultTrustManager, Mockito.times(0)).checkServerTrusted(certChain, \"RSA\");\r\n    trustManager.checkServerTrusted(certChain, \"RSA\");\r\n    Mockito.verify(defaultTrustManager, Mockito.times(1)).checkServerTrusted(certChain, \"RSA\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testCreateTrustManagerExceptions",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testCreateTrustManagerExceptions() throws Exception\n{\r\n    ProxyCA proxyCA = new ProxyCA();\r\n    proxyCA.init();\r\n    X509TrustManager defaultTrustManager = Mockito.mock(X509TrustManager.class);\r\n    proxyCA.setDefaultTrustManager(defaultTrustManager);\r\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    X509TrustManager trustManager = proxyCA.createTrustManager(appId);\r\n    for (Exception e : new Exception[] { new CertificateException(), new NoSuchAlgorithmException(), new InvalidKeyException(), new SignatureException(), new NoSuchProviderException() }) {\r\n        X509Certificate[] certChain = castCertificateArrayToX509CertificateArray(KeyStoreTestUtil.bytesToKeyStore(proxyCA.createChildKeyStore(appId, \"password\"), \"password\").getCertificateChain(\"server\"));\r\n        X509Certificate cert = Mockito.spy(certChain[0]);\r\n        certChain[0] = cert;\r\n        Mockito.doThrow(e).when(certChain[0]).verify(Mockito.any());\r\n        Mockito.verify(defaultTrustManager, Mockito.times(0)).checkServerTrusted(certChain, \"RSA\");\r\n        trustManager.checkServerTrusted(certChain, \"RSA\");\r\n        Mockito.verify(defaultTrustManager, Mockito.times(1)).checkServerTrusted(certChain, \"RSA\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testCreateKeyManager",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testCreateKeyManager() throws Exception\n{\r\n    ProxyCA proxyCA = new ProxyCA();\r\n    proxyCA.init();\r\n    X509KeyManager keyManager = proxyCA.getX509KeyManager();\r\n    Assert.assertArrayEquals(new String[] { \"client\" }, keyManager.getClientAliases(null, null));\r\n    Assert.assertEquals(\"client\", keyManager.chooseClientAlias(null, null, null));\r\n    Assert.assertNull(keyManager.getServerAliases(null, null));\r\n    Assert.assertNull(keyManager.chooseServerAlias(null, null, null));\r\n    byte[] truststoreBytes = proxyCA.getChildTrustStore(\"password\");\r\n    KeyStore truststore = KeyStoreTestUtil.bytesToKeyStore(truststoreBytes, \"password\");\r\n    Assert.assertEquals(1, truststore.size());\r\n    X509Certificate caCert = (X509Certificate) truststore.getCertificate(\"client\");\r\n    Assert.assertArrayEquals(new X509Certificate[] { caCert }, keyManager.getCertificateChain(null));\r\n    Assert.assertEquals(proxyCA.getCaCert(), caCert);\r\n    PrivateKey caPrivateKey = keyManager.getPrivateKey(null);\r\n    PublicKey caPublicKey = caCert.getPublicKey();\r\n    checkPrivatePublicKeys(caPrivateKey, caPublicKey);\r\n    Assert.assertEquals(proxyCA.getCaKeyPair().getPublic(), caPublicKey);\r\n    Assert.assertEquals(proxyCA.getCaKeyPair().getPrivate(), caPrivateKey);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testCreateHostnameVerifier",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testCreateHostnameVerifier() throws Exception\n{\r\n    ProxyCA proxyCA = new ProxyCA();\r\n    proxyCA.init();\r\n    HostnameVerifier verifier = proxyCA.getHostnameVerifier();\r\n    SSLSession sslSession = Mockito.mock(SSLSession.class);\r\n    Mockito.when(sslSession.getPeerCertificates()).thenReturn(KeyStoreTestUtil.bytesToKeyStore(proxyCA.createChildKeyStore(ApplicationId.newInstance(System.currentTimeMillis(), 1), \"password\"), \"password\").getCertificateChain(\"server\"));\r\n    Assert.assertTrue(verifier.verify(\"foo\", sslSession));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testCreateHostnameVerifierSSLPeerUnverifiedException",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testCreateHostnameVerifierSSLPeerUnverifiedException() throws Exception\n{\r\n    ProxyCA proxyCA = new ProxyCA();\r\n    proxyCA.init();\r\n    HostnameVerifier verifier = proxyCA.getHostnameVerifier();\r\n    SSLSession sslSession = Mockito.mock(SSLSession.class);\r\n    Mockito.when(sslSession.getPeerCertificates()).thenThrow(new SSLPeerUnverifiedException(\"\"));\r\n    Assert.assertFalse(verifier.verify(\"foo\", sslSession));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testCreateHostnameVerifierWrongRM",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testCreateHostnameVerifierWrongRM() throws Exception\n{\r\n    ProxyCA proxyCA = new ProxyCA();\r\n    proxyCA.init();\r\n    HostnameVerifier verifier = proxyCA.getHostnameVerifier();\r\n    SSLSession sslSession = Mockito.mock(SSLSession.class);\r\n    ProxyCA proxyCA2 = new ProxyCA();\r\n    proxyCA2.init();\r\n    Mockito.when(sslSession.getPeerCertificates()).thenReturn(KeyStoreTestUtil.bytesToKeyStore(proxyCA2.createChildKeyStore(ApplicationId.newInstance(System.currentTimeMillis(), 1), \"password\"), \"password\").getCertificateChain(\"server\"));\r\n    Assert.assertFalse(verifier.verify(\"foo\", sslSession));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testCreateHostnameVerifierExceptions",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testCreateHostnameVerifierExceptions() throws Exception\n{\r\n    ProxyCA proxyCA = new ProxyCA();\r\n    proxyCA.init();\r\n    HostnameVerifier verifier = proxyCA.getHostnameVerifier();\r\n    for (Exception e : new Exception[] { new CertificateException(), new NoSuchAlgorithmException(), new InvalidKeyException(), new SignatureException(), new NoSuchProviderException() }) {\r\n        SSLSession sslSession = Mockito.mock(SSLSession.class);\r\n        Mockito.when(sslSession.getPeerCertificates()).thenAnswer(new Answer<Certificate[]>() {\r\n\r\n            @Override\r\n            public Certificate[] answer(InvocationOnMock invocation) throws Throwable {\r\n                Certificate[] certChain = KeyStoreTestUtil.bytesToKeyStore(proxyCA.createChildKeyStore(ApplicationId.newInstance(System.currentTimeMillis(), 1), \"password\"), \"password\").getCertificateChain(\"server\");\r\n                Certificate cert = Mockito.spy(certChain[0]);\r\n                certChain[0] = cert;\r\n                Mockito.doThrow(e).when(cert).verify(Mockito.any());\r\n                return certChain;\r\n            }\r\n        });\r\n        Assert.assertFalse(verifier.verify(\"foo\", sslSession));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testCreateHostnameVerifierRealCert",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testCreateHostnameVerifierRealCert() throws Exception\n{\r\n    ProxyCA proxyCA = new ProxyCA();\r\n    proxyCA.init();\r\n    HostnameVerifier verifier = proxyCA.getHostnameVerifier();\r\n    SSLSession sslSession = Mockito.mock(SSLSession.class);\r\n    Mockito.when(sslSession.getPeerCertificates()).thenAnswer(new Answer<Certificate[]>() {\r\n\r\n        @Override\r\n        public Certificate[] answer(InvocationOnMock invocation) throws Throwable {\r\n            Certificate[] certChain = new Certificate[] { KeyStoreTestUtil.generateCertificate(\"CN=foo.com\", KeyStoreTestUtil.generateKeyPair(\"RSA\"), 30, \"SHA1withRSA\") };\r\n            return certChain;\r\n        }\r\n    });\r\n    Assert.assertTrue(verifier.verify(\"foo.com\", sslSession));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testCreateHostnameVerifierRealCertBad",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testCreateHostnameVerifierRealCertBad() throws Exception\n{\r\n    ProxyCA proxyCA = new ProxyCA();\r\n    proxyCA.init();\r\n    HostnameVerifier verifier = proxyCA.getHostnameVerifier();\r\n    SSLSession sslSession = Mockito.mock(SSLSession.class);\r\n    Mockito.when(sslSession.getPeerCertificates()).thenAnswer(new Answer<Certificate[]>() {\r\n\r\n        @Override\r\n        public Certificate[] answer(InvocationOnMock invocation) throws Throwable {\r\n            Certificate[] certChain = new Certificate[] { KeyStoreTestUtil.generateCertificate(\"CN=foo.com\", KeyStoreTestUtil.generateKeyPair(\"RSA\"), 30, \"SHA1withRSA\") };\r\n            return certChain;\r\n        }\r\n    });\r\n    Assert.assertFalse(verifier.verify(\"bar.com\", sslSession));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "checkCACert",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void checkCACert(X509Certificate caCert)\n{\r\n    Assert.assertEquals(caCert.getSubjectX500Principal().toString(), caCert.getIssuerDN().toString());\r\n    Assert.assertEquals(caCert.getSubjectX500Principal().toString(), caCert.getSubjectDN().toString());\r\n    Assert.assertTrue(\"Expected CA certificate X500 Principal to start with\" + \" 'OU=YARN-', but did not: \" + caCert.getSubjectX500Principal(), caCert.getSubjectX500Principal().toString().startsWith(\"OU=YARN-\"));\r\n    Assert.assertFalse(\"Found multiple fields in X500 Principal, when there \" + \"should have only been one: \" + caCert.getSubjectX500Principal(), caCert.getSubjectX500Principal().toString().contains(\",\"));\r\n    Assert.assertEquals(\"SHA512withRSA\", caCert.getSigAlgName());\r\n    Assert.assertEquals(new GregorianCalendar(2037, Calendar.DECEMBER, 31).getTime(), caCert.getNotAfter());\r\n    Assert.assertTrue(\"Expected certificate to have started but was not: \" + caCert.getNotBefore(), caCert.getNotBefore().before(new Date()));\r\n    Assert.assertEquals(0, caCert.getBasicConstraints());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "checkPrivatePublicKeys",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void checkPrivatePublicKeys(PrivateKey privateKey, PublicKey publicKey) throws NoSuchAlgorithmException, InvalidKeyException, SignatureException\n{\r\n    byte[] data = new byte[2000];\r\n    new Random().nextBytes(data);\r\n    Signature signer = Signature.getInstance(\"SHA512withRSA\");\r\n    signer.initSign(privateKey);\r\n    signer.update(data);\r\n    byte[] sig = signer.sign();\r\n    signer = Signature.getInstance(\"SHA512withRSA\");\r\n    signer.initVerify(publicKey);\r\n    signer.update(data);\r\n    Assert.assertTrue(signer.verify(sig));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "castCertificateArrayToX509CertificateArray",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "X509Certificate[] castCertificateArrayToX509CertificateArray(Certificate[] certs)\n{\r\n    return Arrays.copyOf(certs, certs.length, X509Certificate[].class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "createCertAndKeyPair",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "CertKeyPair createCertAndKeyPair() throws Exception\n{\r\n    ProxyCA proxyCA = new ProxyCA();\r\n    proxyCA.init();\r\n    return new CertKeyPair(proxyCA.getCaCert(), proxyCA.getCaKeyPair());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy\\amfilter",
  "methodName" : "setUp",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void setUp()\n{\r\n    rmconf.setBoolean(YarnConfiguration.YARN_ACL_ENABLE, true);\r\n    rmconf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION, \"kerberos\");\r\n    rmconf.setBoolean(YarnConfiguration.RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER, true);\r\n    rmconf.set(\"hadoop.http.filter.initializers\", AuthenticationFilterInitializer.class.getName());\r\n    rmconf.set(PREFIX + \"type\", \"kerberos\");\r\n    rmconf.set(PREFIX + \"kerberos.keytab\", httpSpnegoKeytabFile.getAbsolutePath());\r\n    rmconf.set(PREFIX + \"kerberos.principal\", httpSpnegoPrincipal);\r\n    rmconf.set(YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY, httpSpnegoPrincipal);\r\n    rmconf.set(YarnConfiguration.RM_KEYTAB, httpSpnegoKeytabFile.getAbsolutePath());\r\n    rmconf.set(YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY, httpSpnegoKeytabFile.getAbsolutePath());\r\n    UserGroupInformation.setConfiguration(rmconf);\r\n    try {\r\n        testMiniKDC = new MiniKdc(MiniKdc.createConf(), TEST_ROOT_DIR);\r\n        setupKDC();\r\n    } catch (Exception e) {\r\n        assertTrue(\"Couldn't create MiniKDC\", false);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy\\amfilter",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown()\n{\r\n    if (testMiniKDC != null) {\r\n        testMiniKDC.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy\\amfilter",
  "methodName" : "setupKDC",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setupKDC() throws Exception\n{\r\n    if (!miniKDCStarted) {\r\n        testMiniKDC.start();\r\n        getKdc().createPrincipal(httpSpnegoKeytabFile, \"HTTP/localhost\");\r\n        miniKDCStarted = true;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy\\amfilter",
  "methodName" : "getKdc",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "MiniKdc getKdc()\n{\r\n    return testMiniKDC;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy\\amfilter",
  "methodName" : "testFindRedirectUrl",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testFindRedirectUrl() throws Exception\n{\r\n    final String rm1 = \"rm1\";\r\n    final String rm2 = \"rm2\";\r\n    final String rm1Url = startSecureHttpServer();\r\n    final String rm2Url = \"host2:8088\";\r\n    TestAmIpFilter filter = new TestAmIpFilter();\r\n    TestAmIpFilter spy = Mockito.spy(filter);\r\n    spy.proxyUriBases = new HashMap<>();\r\n    spy.proxyUriBases.put(rm1, rm1Url);\r\n    spy.proxyUriBases.put(rm2, rm2Url);\r\n    spy.rmUrls = new String[] { rm1, rm2 };\r\n    assertTrue(spy.isValidUrl(rm1Url));\r\n    assertFalse(spy.isValidUrl(rm2Url));\r\n    assertThat(spy.findRedirectUrl()).isEqualTo(rm1Url);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy\\amfilter",
  "methodName" : "startSecureHttpServer",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "String startSecureHttpServer() throws Exception\n{\r\n    HttpServer2.Builder builder = new HttpServer2.Builder().setName(\"test\").setConf(rmconf).addEndpoint(new URI(\"http://localhost\")).setACL(new AccessControlList(rmconf.get(YarnConfiguration.YARN_ADMIN_ACL, YarnConfiguration.DEFAULT_YARN_ADMIN_ACL)));\r\n    builder.setUsernameConfKey(YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY).setKeytabConfKey(YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY).setSecurityEnabled(UserGroupInformation.isSecurityEnabled());\r\n    HttpServer2 server = builder.build();\r\n    server.start();\r\n    URL baseUrl = new URL(\"http://\" + NetUtils.getHostPortString(server.getConnectorAddress(0)));\r\n    return baseUrl.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy\\amfilter",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    NetUtils.addStaticResolution(\"host1\", \"172.0.0.1\");\r\n    NetUtils.addStaticResolution(\"host2\", \"172.0.0.1\");\r\n    NetUtils.addStaticResolution(\"host3\", \"172.0.0.1\");\r\n    NetUtils.addStaticResolution(\"host4\", \"172.0.0.1\");\r\n    NetUtils.addStaticResolution(\"host5\", \"172.0.0.1\");\r\n    NetUtils.addStaticResolution(\"host6\", \"172.0.0.1\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy\\amfilter",
  "methodName" : "testInitFilter",
  "errType" : null,
  "containingMethodsNum" : 54,
  "sourceCodeText" : "void testInitFilter()\n{\r\n    MockFilterContainer con = new MockFilterContainer();\r\n    Configuration conf = new Configuration(false);\r\n    conf.set(YarnConfiguration.PROXY_ADDRESS, \"host1:1000\");\r\n    AmFilterInitializer afi = new MockAmFilterInitializer();\r\n    assertNull(con.givenParameters);\r\n    afi.initFilter(con, conf);\r\n    assertEquals(2, con.givenParameters.size());\r\n    assertEquals(\"host1\", con.givenParameters.get(AmIpFilter.PROXY_HOSTS));\r\n    assertEquals(\"http://host1:1000/foo\", con.givenParameters.get(AmIpFilter.PROXY_URI_BASES));\r\n    assertEquals(null, con.givenParameters.get(AmFilterInitializer.RM_HA_URLS));\r\n    con = new MockFilterContainer();\r\n    conf = new Configuration(false);\r\n    conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS, \"host2:2000\");\r\n    afi = new MockAmFilterInitializer();\r\n    assertNull(con.givenParameters);\r\n    afi.initFilter(con, conf);\r\n    assertEquals(2, con.givenParameters.size());\r\n    assertEquals(\"host2\", con.givenParameters.get(AmIpFilter.PROXY_HOSTS));\r\n    assertEquals(\"http://host2:2000/foo\", con.givenParameters.get(AmIpFilter.PROXY_URI_BASES));\r\n    assertEquals(null, con.givenParameters.get(AmFilterInitializer.RM_HA_URLS));\r\n    con = new MockFilterContainer();\r\n    conf = new Configuration(false);\r\n    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, true);\r\n    conf.set(YarnConfiguration.RM_HA_IDS, \"rm1,rm2,rm3\");\r\n    conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS + \".rm1\", \"host2:2000\");\r\n    conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS + \".rm2\", \"host3:3000\");\r\n    conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS + \".rm3\", \"host4:4000\");\r\n    afi = new MockAmFilterInitializer();\r\n    assertNull(con.givenParameters);\r\n    afi.initFilter(con, conf);\r\n    assertEquals(3, con.givenParameters.size());\r\n    String[] proxyHosts = con.givenParameters.get(AmIpFilter.PROXY_HOSTS).split(AmIpFilter.PROXY_HOSTS_DELIMITER);\r\n    assertEquals(3, proxyHosts.length);\r\n    Arrays.sort(proxyHosts);\r\n    assertEquals(\"host2\", proxyHosts[0]);\r\n    assertEquals(\"host3\", proxyHosts[1]);\r\n    assertEquals(\"host4\", proxyHosts[2]);\r\n    String[] proxyBases = con.givenParameters.get(AmIpFilter.PROXY_URI_BASES).split(AmIpFilter.PROXY_URI_BASES_DELIMITER);\r\n    assertEquals(3, proxyBases.length);\r\n    Arrays.sort(proxyBases);\r\n    assertEquals(\"http://host2:2000/foo\", proxyBases[0]);\r\n    assertEquals(\"http://host3:3000/foo\", proxyBases[1]);\r\n    assertEquals(\"http://host4:4000/foo\", proxyBases[2]);\r\n    assertEquals(\"host2:2000,host3:3000,host4:4000\", con.givenParameters.get(AmFilterInitializer.RM_HA_URLS));\r\n    con = new MockFilterContainer();\r\n    conf = new Configuration(false);\r\n    conf.set(YarnConfiguration.YARN_HTTP_POLICY_KEY, HttpConfig.Policy.HTTPS_ONLY.toString());\r\n    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, true);\r\n    conf.set(YarnConfiguration.RM_HA_IDS, \"rm1,rm2\");\r\n    conf.set(YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS + \".rm1\", \"host5:5000\");\r\n    conf.set(YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS + \".rm2\", \"host6:6000\");\r\n    afi = new MockAmFilterInitializer();\r\n    assertNull(con.givenParameters);\r\n    afi.initFilter(con, conf);\r\n    assertEquals(3, con.givenParameters.size());\r\n    proxyHosts = con.givenParameters.get(AmIpFilter.PROXY_HOSTS).split(AmIpFilter.PROXY_HOSTS_DELIMITER);\r\n    assertEquals(2, proxyHosts.length);\r\n    Arrays.sort(proxyHosts);\r\n    assertEquals(\"host5\", proxyHosts[0]);\r\n    assertEquals(\"host6\", proxyHosts[1]);\r\n    proxyBases = con.givenParameters.get(AmIpFilter.PROXY_URI_BASES).split(AmIpFilter.PROXY_URI_BASES_DELIMITER);\r\n    assertEquals(2, proxyBases.length);\r\n    Arrays.sort(proxyBases);\r\n    assertEquals(\"https://host5:5000/foo\", proxyBases[0]);\r\n    assertEquals(\"https://host6:6000/foo\", proxyBases[1]);\r\n    assertEquals(\"host5:5000,host6:6000\", con.givenParameters.get(AmFilterInitializer.RM_HA_URLS));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy\\amfilter",
  "methodName" : "testGetProxyHostsAndPortsForAmFilter",
  "errType" : null,
  "containingMethodsNum" : 74,
  "sourceCodeText" : "void testGetProxyHostsAndPortsForAmFilter()\n{\r\n    Configuration conf = new Configuration(false);\r\n    List<String> proxyHosts = WebAppUtils.getProxyHostsAndPortsForAmFilter(conf);\r\n    assertEquals(1, proxyHosts.size());\r\n    assertEquals(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf), proxyHosts.get(0));\r\n    conf = new Configuration(false);\r\n    conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS, \"${yarn.resourcemanager.hostname}:8088\");\r\n    conf.set(YarnConfiguration.RM_HOSTNAME, \"host1\");\r\n    proxyHosts = WebAppUtils.getProxyHostsAndPortsForAmFilter(conf);\r\n    assertEquals(1, proxyHosts.size());\r\n    assertEquals(\"host1:8088\", proxyHosts.get(0));\r\n    conf = new Configuration(false);\r\n    conf.set(YarnConfiguration.PROXY_ADDRESS, \"host1:1000\");\r\n    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, true);\r\n    conf.set(YarnConfiguration.RM_HA_IDS, \"rm1,rm2,rm3\");\r\n    conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS + \".rm1\", \"host2:2000\");\r\n    conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS + \".rm2\", \"host3:3000\");\r\n    conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS + \".rm3\", \"host4:4000\");\r\n    proxyHosts = WebAppUtils.getProxyHostsAndPortsForAmFilter(conf);\r\n    assertEquals(1, proxyHosts.size());\r\n    assertEquals(\"host1:1000\", proxyHosts.get(0));\r\n    conf = new Configuration(false);\r\n    conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS, \"host2:2000\");\r\n    proxyHosts = WebAppUtils.getProxyHostsAndPortsForAmFilter(conf);\r\n    assertEquals(1, proxyHosts.size());\r\n    Collections.sort(proxyHosts);\r\n    assertEquals(\"host2:2000\", proxyHosts.get(0));\r\n    conf = new Configuration(false);\r\n    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, true);\r\n    conf.set(YarnConfiguration.RM_HA_IDS, \"rm1,rm2,rm3\");\r\n    conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS + \".rm1\", \"host2:2000\");\r\n    conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS + \".rm2\", \"host3:3000\");\r\n    conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS + \".rm3\", \"host4:4000\");\r\n    conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS + \".rm4\", \"dummy\");\r\n    conf.set(YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS + \".rm1\", \"host5:5000\");\r\n    conf.set(YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS + \".rm2\", \"host6:6000\");\r\n    proxyHosts = WebAppUtils.getProxyHostsAndPortsForAmFilter(conf);\r\n    assertEquals(3, proxyHosts.size());\r\n    Collections.sort(proxyHosts);\r\n    assertEquals(\"host2:2000\", proxyHosts.get(0));\r\n    assertEquals(\"host3:3000\", proxyHosts.get(1));\r\n    assertEquals(\"host4:4000\", proxyHosts.get(2));\r\n    conf = new Configuration(false);\r\n    conf.set(YarnConfiguration.YARN_HTTP_POLICY_KEY, HttpConfig.Policy.HTTPS_ONLY.toString());\r\n    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, true);\r\n    conf.set(YarnConfiguration.RM_HA_IDS, \"rm1,rm2,rm3,dummy\");\r\n    conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS + \".rm1\", \"host2:2000\");\r\n    conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS + \".rm2\", \"host3:3000\");\r\n    conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS + \".rm3\", \"host4:4000\");\r\n    conf.set(YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS + \".rm1\", \"host5:5000\");\r\n    conf.set(YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS + \".rm2\", \"host6:6000\");\r\n    proxyHosts = WebAppUtils.getProxyHostsAndPortsForAmFilter(conf);\r\n    assertEquals(2, proxyHosts.size());\r\n    Collections.sort(proxyHosts);\r\n    assertEquals(\"host5:5000\", proxyHosts.get(0));\r\n    assertEquals(\"host6:6000\", proxyHosts.get(1));\r\n    conf = new Configuration(false);\r\n    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, true);\r\n    conf.set(YarnConfiguration.RM_HA_IDS, \"rm1,rm2,rm3\");\r\n    conf.set(YarnConfiguration.RM_HOSTNAME + \".rm1\", \"host2\");\r\n    conf.set(YarnConfiguration.RM_HOSTNAME + \".rm2\", \"host3\");\r\n    conf.set(YarnConfiguration.RM_HOSTNAME + \".rm3\", \"host4\");\r\n    conf.set(YarnConfiguration.RM_HOSTNAME + \".rm4\", \"dummy\");\r\n    proxyHosts = WebAppUtils.getProxyHostsAndPortsForAmFilter(conf);\r\n    assertEquals(3, proxyHosts.size());\r\n    Collections.sort(proxyHosts);\r\n    assertEquals(\"host2:\" + YarnConfiguration.DEFAULT_RM_WEBAPP_PORT, proxyHosts.get(0));\r\n    assertEquals(\"host3:\" + YarnConfiguration.DEFAULT_RM_WEBAPP_PORT, proxyHosts.get(1));\r\n    assertEquals(\"host4:\" + YarnConfiguration.DEFAULT_RM_WEBAPP_PORT, proxyHosts.get(2));\r\n    conf = new Configuration(false);\r\n    conf.set(YarnConfiguration.YARN_HTTP_POLICY_KEY, HttpConfig.Policy.HTTPS_ONLY.toString());\r\n    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, true);\r\n    conf.set(YarnConfiguration.RM_HA_IDS, \"rm1,rm2,rm3\");\r\n    conf.set(YarnConfiguration.RM_HOSTNAME + \".rm1\", \"host2\");\r\n    conf.set(YarnConfiguration.RM_HOSTNAME + \".rm2\", \"host3\");\r\n    conf.set(YarnConfiguration.RM_HOSTNAME + \".rm3\", \"host4\");\r\n    conf.set(YarnConfiguration.RM_HOSTNAME + \".rm4\", \"dummy\");\r\n    proxyHosts = WebAppUtils.getProxyHostsAndPortsForAmFilter(conf);\r\n    assertEquals(3, proxyHosts.size());\r\n    Collections.sort(proxyHosts);\r\n    assertEquals(\"host2:\" + YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_PORT, proxyHosts.get(0));\r\n    assertEquals(\"host3:\" + YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_PORT, proxyHosts.get(1));\r\n    assertEquals(\"host4:\" + YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_PORT, proxyHosts.get(2));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy\\amfilter",
  "methodName" : "filterNullCookies",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void filterNullCookies() throws Exception\n{\r\n    HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\r\n    Mockito.when(request.getCookies()).thenReturn(null);\r\n    Mockito.when(request.getRemoteAddr()).thenReturn(proxyHost);\r\n    HttpServletResponse response = Mockito.mock(HttpServletResponse.class);\r\n    final AtomicBoolean invoked = new AtomicBoolean();\r\n    FilterChain chain = new FilterChain() {\r\n\r\n        @Override\r\n        public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse) throws IOException, ServletException {\r\n            invoked.set(true);\r\n        }\r\n    };\r\n    Map<String, String> params = new HashMap<String, String>();\r\n    params.put(AmIpFilter.PROXY_HOST, proxyHost);\r\n    params.put(AmIpFilter.PROXY_URI_BASE, proxyUri);\r\n    FilterConfig conf = new DummyFilterConfig(params);\r\n    Filter filter = new TestAmIpFilter();\r\n    filter.init(conf);\r\n    filter.doFilter(request, response, chain);\r\n    assertTrue(invoked.get());\r\n    filter.destroy();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy\\amfilter",
  "methodName" : "testFindRedirectUrl",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testFindRedirectUrl() throws Exception\n{\r\n    final String rm1 = \"rm1\";\r\n    final String rm2 = \"rm2\";\r\n    final String rm1Url = startHttpServer();\r\n    final String rm2Url = \"host2:8088\";\r\n    TestAmIpFilter filter = new TestAmIpFilter();\r\n    TestAmIpFilter spy = Mockito.spy(filter);\r\n    spy.proxyUriBases = new HashMap<>();\r\n    spy.proxyUriBases.put(rm1, rm1Url);\r\n    spy.proxyUriBases.put(rm2, rm2Url);\r\n    spy.rmUrls = new String[] { rm1, rm2 };\r\n    assertThat(spy.findRedirectUrl()).isEqualTo(rm1Url);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy\\amfilter",
  "methodName" : "startHttpServer",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "String startHttpServer() throws Exception\n{\r\n    Server server = new Server(0);\r\n    ((QueuedThreadPool) server.getThreadPool()).setMaxThreads(20);\r\n    ServletContextHandler context = new ServletContextHandler();\r\n    context.setContextPath(\"/foo\");\r\n    server.setHandler(context);\r\n    String servletPath = \"/bar\";\r\n    context.addServlet(new ServletHolder(TestHttpServer.EchoServlet.class), servletPath);\r\n    ((ServerConnector) server.getConnectors()[0]).setHost(\"localhost\");\r\n    server.start();\r\n    System.setProperty(\"sun.net.http.allowRestrictedHeaders\", \"true\");\r\n    return server.getURI().toString() + servletPath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy\\amfilter",
  "methodName" : "testProxyUpdate",
  "errType" : [ "ServletException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testProxyUpdate() throws Exception\n{\r\n    Map<String, String> params = new HashMap<>();\r\n    params.put(AmIpFilter.PROXY_HOSTS, proxyHost);\r\n    params.put(AmIpFilter.PROXY_URI_BASES, proxyUri);\r\n    FilterConfig conf = new DummyFilterConfig(params);\r\n    AmIpFilter filter = new AmIpFilter();\r\n    int updateInterval = 1000;\r\n    AmIpFilter.setUpdateInterval(updateInterval);\r\n    filter.init(conf);\r\n    filter.getProxyAddresses();\r\n    assertTrue(filter.getProxyAddresses().contains(\"127.0.0.1\"));\r\n    params = new HashMap<>();\r\n    params.put(AmIpFilter.PROXY_HOSTS, \"unknownhost\");\r\n    params.put(AmIpFilter.PROXY_URI_BASES, proxyUri);\r\n    conf = new DummyFilterConfig(params);\r\n    filter.init(conf);\r\n    assertFalse(filter.getProxyAddresses().isEmpty());\r\n    GenericTestUtils.waitFor(new Supplier<Boolean>() {\r\n\r\n        @Override\r\n        public Boolean get() {\r\n            try {\r\n                return filter.getProxyAddresses().isEmpty();\r\n            } catch (ServletException e) {\r\n                return true;\r\n            }\r\n        }\r\n    }, 500, updateInterval);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy\\amfilter",
  "methodName" : "testFilter",
  "errType" : [ "ServletException" ],
  "containingMethodsNum" : 35,
  "sourceCodeText" : "void testFilter() throws Exception\n{\r\n    Map<String, String> params = new HashMap<String, String>();\r\n    params.put(AmIpFilter.PROXY_HOST, proxyHost);\r\n    params.put(AmIpFilter.PROXY_URI_BASE, proxyUri);\r\n    FilterConfig config = new DummyFilterConfig(params);\r\n    FilterChain chain = new FilterChain() {\r\n\r\n        @Override\r\n        public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse) throws IOException, ServletException {\r\n            doFilterRequest = servletRequest.getClass().getName();\r\n            if (servletRequest instanceof AmIpServletRequestWrapper) {\r\n                servletWrapper = (AmIpServletRequestWrapper) servletRequest;\r\n            }\r\n        }\r\n    };\r\n    AmIpFilter testFilter = new AmIpFilter();\r\n    testFilter.init(config);\r\n    HttpServletResponseForTest response = new HttpServletResponseForTest();\r\n    ServletRequest failRequest = Mockito.mock(ServletRequest.class);\r\n    try {\r\n        testFilter.doFilter(failRequest, response, chain);\r\n        fail();\r\n    } catch (ServletException e) {\r\n        assertEquals(ProxyUtils.E_HTTP_HTTPS_ONLY, e.getMessage());\r\n    }\r\n    HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\r\n    Mockito.when(request.getRemoteAddr()).thenReturn(\"nowhere\");\r\n    Mockito.when(request.getRequestURI()).thenReturn(\"/app/application_00_0\");\r\n    testFilter.doFilter(request, response, chain);\r\n    assertEquals(HttpURLConnection.HTTP_MOVED_TEMP, response.status);\r\n    String redirect = response.getHeader(ProxyUtils.LOCATION);\r\n    assertEquals(\"http://bogus/app/application_00_0\", redirect);\r\n    Mockito.when(request.getRequestURI()).thenReturn(\"/proxy/application_00_0\");\r\n    testFilter.doFilter(request, response, chain);\r\n    assertEquals(HttpURLConnection.HTTP_MOVED_TEMP, response.status);\r\n    redirect = response.getHeader(ProxyUtils.LOCATION);\r\n    assertEquals(\"http://bogus/proxy/redirect/application_00_0\", redirect);\r\n    Mockito.when(request.getRequestURI()).thenReturn(\"/proxy/application_00_0\");\r\n    Mockito.when(request.getQueryString()).thenReturn(\"id=0\");\r\n    testFilter.doFilter(request, response, chain);\r\n    assertEquals(HttpURLConnection.HTTP_MOVED_TEMP, response.status);\r\n    redirect = response.getHeader(ProxyUtils.LOCATION);\r\n    assertEquals(\"http://bogus/proxy/redirect/application_00_0?id=0\", redirect);\r\n    Mockito.when(request.getRemoteAddr()).thenReturn(\"127.0.0.1\");\r\n    testFilter.doFilter(request, response, chain);\r\n    assertTrue(doFilterRequest.contains(\"HttpServletRequest\"));\r\n    Cookie[] cookies = new Cookie[] { new Cookie(WebAppProxyServlet.PROXY_USER_COOKIE_NAME, \"user\") };\r\n    Mockito.when(request.getCookies()).thenReturn(cookies);\r\n    testFilter.doFilter(request, response, chain);\r\n    assertEquals(\"org.apache.hadoop.yarn.server.webproxy.amfilter.AmIpServletRequestWrapper\", doFilterRequest);\r\n    assertEquals(\"user\", servletWrapper.getUserPrincipal().getName());\r\n    assertEquals(\"user\", servletWrapper.getRemoteUser());\r\n    assertFalse(servletWrapper.isUserInRole(\"\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    conf = new YarnConfiguration();\r\n    conf.set(YarnConfiguration.PROXY_ADDRESS, proxyAddress);\r\n    webAppProxy = new WebAppProxyServer();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    webAppProxy.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testStart",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testStart()\n{\r\n    webAppProxy.init(conf);\r\n    assertEquals(STATE.INITED, webAppProxy.getServiceState());\r\n    webAppProxy.start();\r\n    for (Service service : webAppProxy.getServices()) {\r\n        if (service instanceof WebAppProxy) {\r\n            assertEquals(proxyAddress, ((WebAppProxy) service).getBindAddress());\r\n        }\r\n    }\r\n    assertEquals(STATE.STARTED, webAppProxy.getServiceState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testStartWithBindHost",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testStartWithBindHost()\n{\r\n    String bindHost = \"0.0.0.0\";\r\n    conf.set(YarnConfiguration.PROXY_BIND_HOST, bindHost);\r\n    webAppProxy.init(conf);\r\n    assertEquals(STATE.INITED, webAppProxy.getServiceState());\r\n    webAppProxy.start();\r\n    for (Service service : webAppProxy.getServices()) {\r\n        if (service instanceof WebAppProxy) {\r\n            assertEquals(bindHost + \":\" + port, ((WebAppProxy) service).getBindAddress());\r\n        }\r\n    }\r\n    assertEquals(STATE.STARTED, webAppProxy.getServiceState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "testBindAddress",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testBindAddress()\n{\r\n    conf = new YarnConfiguration();\r\n    InetSocketAddress defaultBindAddress = WebAppProxyServer.getBindAddress(conf);\r\n    Assert.assertEquals(\"Web Proxy default bind address port is incorrect\", YarnConfiguration.DEFAULT_PROXY_PORT, defaultBindAddress.getPort());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
} ]